// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains Amazon S3 locations for storing specific types of AS2 message files.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomDirectoriesType {
    /// <p>Specifies a location to store failed AS2 message files.</p>
    pub failed_files_directory: ::std::string::String,
    /// <p>Specifies a location to store MDN files.</p>
    pub mdn_files_directory: ::std::string::String,
    /// <p>Specifies a location to store the payload for AS2 message files.</p>
    pub payload_files_directory: ::std::string::String,
    /// <p>Specifies a location to store AS2 status messages.</p>
    pub status_files_directory: ::std::string::String,
    /// <p>Specifies a location to store temporary AS2 message files.</p>
    pub temporary_files_directory: ::std::string::String,
}
impl CustomDirectoriesType {
    /// <p>Specifies a location to store failed AS2 message files.</p>
    pub fn failed_files_directory(&self) -> &str {
        use std::ops::Deref;
        self.failed_files_directory.deref()
    }
    /// <p>Specifies a location to store MDN files.</p>
    pub fn mdn_files_directory(&self) -> &str {
        use std::ops::Deref;
        self.mdn_files_directory.deref()
    }
    /// <p>Specifies a location to store the payload for AS2 message files.</p>
    pub fn payload_files_directory(&self) -> &str {
        use std::ops::Deref;
        self.payload_files_directory.deref()
    }
    /// <p>Specifies a location to store AS2 status messages.</p>
    pub fn status_files_directory(&self) -> &str {
        use std::ops::Deref;
        self.status_files_directory.deref()
    }
    /// <p>Specifies a location to store temporary AS2 message files.</p>
    pub fn temporary_files_directory(&self) -> &str {
        use std::ops::Deref;
        self.temporary_files_directory.deref()
    }
}
impl CustomDirectoriesType {
    /// Creates a new builder-style object to manufacture [`CustomDirectoriesType`](crate::types::CustomDirectoriesType).
    pub fn builder() -> crate::types::builders::CustomDirectoriesTypeBuilder {
        crate::types::builders::CustomDirectoriesTypeBuilder::default()
    }
}

/// A builder for [`CustomDirectoriesType`](crate::types::CustomDirectoriesType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CustomDirectoriesTypeBuilder {
    pub(crate) failed_files_directory: ::std::option::Option<::std::string::String>,
    pub(crate) mdn_files_directory: ::std::option::Option<::std::string::String>,
    pub(crate) payload_files_directory: ::std::option::Option<::std::string::String>,
    pub(crate) status_files_directory: ::std::option::Option<::std::string::String>,
    pub(crate) temporary_files_directory: ::std::option::Option<::std::string::String>,
}
impl CustomDirectoriesTypeBuilder {
    /// <p>Specifies a location to store failed AS2 message files.</p>
    /// This field is required.
    pub fn failed_files_directory(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failed_files_directory = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a location to store failed AS2 message files.</p>
    pub fn set_failed_files_directory(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failed_files_directory = input;
        self
    }
    /// <p>Specifies a location to store failed AS2 message files.</p>
    pub fn get_failed_files_directory(&self) -> &::std::option::Option<::std::string::String> {
        &self.failed_files_directory
    }
    /// <p>Specifies a location to store MDN files.</p>
    /// This field is required.
    pub fn mdn_files_directory(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mdn_files_directory = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a location to store MDN files.</p>
    pub fn set_mdn_files_directory(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mdn_files_directory = input;
        self
    }
    /// <p>Specifies a location to store MDN files.</p>
    pub fn get_mdn_files_directory(&self) -> &::std::option::Option<::std::string::String> {
        &self.mdn_files_directory
    }
    /// <p>Specifies a location to store the payload for AS2 message files.</p>
    /// This field is required.
    pub fn payload_files_directory(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.payload_files_directory = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a location to store the payload for AS2 message files.</p>
    pub fn set_payload_files_directory(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.payload_files_directory = input;
        self
    }
    /// <p>Specifies a location to store the payload for AS2 message files.</p>
    pub fn get_payload_files_directory(&self) -> &::std::option::Option<::std::string::String> {
        &self.payload_files_directory
    }
    /// <p>Specifies a location to store AS2 status messages.</p>
    /// This field is required.
    pub fn status_files_directory(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_files_directory = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a location to store AS2 status messages.</p>
    pub fn set_status_files_directory(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_files_directory = input;
        self
    }
    /// <p>Specifies a location to store AS2 status messages.</p>
    pub fn get_status_files_directory(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_files_directory
    }
    /// <p>Specifies a location to store temporary AS2 message files.</p>
    /// This field is required.
    pub fn temporary_files_directory(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.temporary_files_directory = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a location to store temporary AS2 message files.</p>
    pub fn set_temporary_files_directory(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.temporary_files_directory = input;
        self
    }
    /// <p>Specifies a location to store temporary AS2 message files.</p>
    pub fn get_temporary_files_directory(&self) -> &::std::option::Option<::std::string::String> {
        &self.temporary_files_directory
    }
    /// Consumes the builder and constructs a [`CustomDirectoriesType`](crate::types::CustomDirectoriesType).
    /// This method will fail if any of the following fields are not set:
    /// - [`failed_files_directory`](crate::types::builders::CustomDirectoriesTypeBuilder::failed_files_directory)
    /// - [`mdn_files_directory`](crate::types::builders::CustomDirectoriesTypeBuilder::mdn_files_directory)
    /// - [`payload_files_directory`](crate::types::builders::CustomDirectoriesTypeBuilder::payload_files_directory)
    /// - [`status_files_directory`](crate::types::builders::CustomDirectoriesTypeBuilder::status_files_directory)
    /// - [`temporary_files_directory`](crate::types::builders::CustomDirectoriesTypeBuilder::temporary_files_directory)
    pub fn build(self) -> ::std::result::Result<crate::types::CustomDirectoriesType, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CustomDirectoriesType {
            failed_files_directory: self.failed_files_directory.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "failed_files_directory",
                    "failed_files_directory was not specified but it is required when building CustomDirectoriesType",
                )
            })?,
            mdn_files_directory: self.mdn_files_directory.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mdn_files_directory",
                    "mdn_files_directory was not specified but it is required when building CustomDirectoriesType",
                )
            })?,
            payload_files_directory: self.payload_files_directory.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "payload_files_directory",
                    "payload_files_directory was not specified but it is required when building CustomDirectoriesType",
                )
            })?,
            status_files_directory: self.status_files_directory.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status_files_directory",
                    "status_files_directory was not specified but it is required when building CustomDirectoriesType",
                )
            })?,
            temporary_files_directory: self.temporary_files_directory.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "temporary_files_directory",
                    "temporary_files_directory was not specified but it is required when building CustomDirectoriesType",
                )
            })?,
        })
    }
}
