// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>a structure that contains details for the web app.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListedWebApp {
    /// <p>The Amazon Resource Name (ARN) for the web app.</p>
    pub arn: ::std::string::String,
    /// <p>The unique identifier for the web app.</p>
    pub web_app_id: ::std::string::String,
    /// <p>The <code>AccessEndpoint</code> is the URL that you provide to your users for them to interact with the Transfer Family web app. You can specify a custom URL or use the default value.</p>
    pub access_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The <code>WebAppEndpoint</code> is the unique URL for your Transfer Family web app. This is the value that you use when you configure <b>Origins</b> on CloudFront.</p>
    pub web_app_endpoint: ::std::option::Option<::std::string::String>,
}
impl ListedWebApp {
    /// <p>The Amazon Resource Name (ARN) for the web app.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The unique identifier for the web app.</p>
    pub fn web_app_id(&self) -> &str {
        use std::ops::Deref;
        self.web_app_id.deref()
    }
    /// <p>The <code>AccessEndpoint</code> is the URL that you provide to your users for them to interact with the Transfer Family web app. You can specify a custom URL or use the default value.</p>
    pub fn access_endpoint(&self) -> ::std::option::Option<&str> {
        self.access_endpoint.as_deref()
    }
    /// <p>The <code>WebAppEndpoint</code> is the unique URL for your Transfer Family web app. This is the value that you use when you configure <b>Origins</b> on CloudFront.</p>
    pub fn web_app_endpoint(&self) -> ::std::option::Option<&str> {
        self.web_app_endpoint.as_deref()
    }
}
impl ListedWebApp {
    /// Creates a new builder-style object to manufacture [`ListedWebApp`](crate::types::ListedWebApp).
    pub fn builder() -> crate::types::builders::ListedWebAppBuilder {
        crate::types::builders::ListedWebAppBuilder::default()
    }
}

/// A builder for [`ListedWebApp`](crate::types::ListedWebApp).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListedWebAppBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) web_app_id: ::std::option::Option<::std::string::String>,
    pub(crate) access_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) web_app_endpoint: ::std::option::Option<::std::string::String>,
}
impl ListedWebAppBuilder {
    /// <p>The Amazon Resource Name (ARN) for the web app.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the web app.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the web app.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The unique identifier for the web app.</p>
    /// This field is required.
    pub fn web_app_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.web_app_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the web app.</p>
    pub fn set_web_app_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.web_app_id = input;
        self
    }
    /// <p>The unique identifier for the web app.</p>
    pub fn get_web_app_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.web_app_id
    }
    /// <p>The <code>AccessEndpoint</code> is the URL that you provide to your users for them to interact with the Transfer Family web app. You can specify a custom URL or use the default value.</p>
    pub fn access_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>AccessEndpoint</code> is the URL that you provide to your users for them to interact with the Transfer Family web app. You can specify a custom URL or use the default value.</p>
    pub fn set_access_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_endpoint = input;
        self
    }
    /// <p>The <code>AccessEndpoint</code> is the URL that you provide to your users for them to interact with the Transfer Family web app. You can specify a custom URL or use the default value.</p>
    pub fn get_access_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_endpoint
    }
    /// <p>The <code>WebAppEndpoint</code> is the unique URL for your Transfer Family web app. This is the value that you use when you configure <b>Origins</b> on CloudFront.</p>
    pub fn web_app_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.web_app_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>WebAppEndpoint</code> is the unique URL for your Transfer Family web app. This is the value that you use when you configure <b>Origins</b> on CloudFront.</p>
    pub fn set_web_app_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.web_app_endpoint = input;
        self
    }
    /// <p>The <code>WebAppEndpoint</code> is the unique URL for your Transfer Family web app. This is the value that you use when you configure <b>Origins</b> on CloudFront.</p>
    pub fn get_web_app_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.web_app_endpoint
    }
    /// Consumes the builder and constructs a [`ListedWebApp`](crate::types::ListedWebApp).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::ListedWebAppBuilder::arn)
    /// - [`web_app_id`](crate::types::builders::ListedWebAppBuilder::web_app_id)
    pub fn build(self) -> ::std::result::Result<crate::types::ListedWebApp, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ListedWebApp {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building ListedWebApp",
                )
            })?,
            web_app_id: self.web_app_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "web_app_id",
                    "web_app_id was not specified but it is required when building ListedWebApp",
                )
            })?,
            access_endpoint: self.access_endpoint,
            web_app_endpoint: self.web_app_endpoint,
        })
    }
}
