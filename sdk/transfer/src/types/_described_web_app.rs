// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that describes the parameters for the web app, as identified by the <code>WebAppId</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribedWebApp {
    /// <p>The Amazon Resource Name (ARN) of the web app.</p>
    pub arn: ::std::string::String,
    /// <p>The unique identifier for the web app.</p>
    pub web_app_id: ::std::string::String,
    /// <p>A structure that contains the details for the identity provider used by the web app.</p>
    pub described_identity_provider_details: ::std::option::Option<crate::types::DescribedWebAppIdentityProviderDetails>,
    /// <p>The <code>AccessEndpoint</code> is the URL that you provide to your users for them to interact with the Transfer Family web app. You can specify a custom URL or use the default value.</p>
    pub access_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The <code>WebAppEndpoint</code> is the unique URL for your Transfer Family web app. This is the value that you use when you configure <b>Origins</b> on CloudFront.</p>
    pub web_app_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>A union that contains the value for number of concurrent connections or the user sessions on your web app.</p>
    pub web_app_units: ::std::option::Option<crate::types::WebAppUnits>,
    /// <p>Key-value pairs that can be used to group and search for web apps. Tags are metadata attached to web apps for any purpose.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>Setting for the type of endpoint policy for the web app. The default value is <code>STANDARD</code>.</p>
    /// <p>If your web app was created in an Amazon Web Services GovCloud (US) Region, the value of this parameter can be <code>FIPS</code>, which indicates the web app endpoint is FIPS-compliant.</p>
    pub web_app_endpoint_policy: ::std::option::Option<crate::types::WebAppEndpointPolicy>,
}
impl DescribedWebApp {
    /// <p>The Amazon Resource Name (ARN) of the web app.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The unique identifier for the web app.</p>
    pub fn web_app_id(&self) -> &str {
        use std::ops::Deref;
        self.web_app_id.deref()
    }
    /// <p>A structure that contains the details for the identity provider used by the web app.</p>
    pub fn described_identity_provider_details(&self) -> ::std::option::Option<&crate::types::DescribedWebAppIdentityProviderDetails> {
        self.described_identity_provider_details.as_ref()
    }
    /// <p>The <code>AccessEndpoint</code> is the URL that you provide to your users for them to interact with the Transfer Family web app. You can specify a custom URL or use the default value.</p>
    pub fn access_endpoint(&self) -> ::std::option::Option<&str> {
        self.access_endpoint.as_deref()
    }
    /// <p>The <code>WebAppEndpoint</code> is the unique URL for your Transfer Family web app. This is the value that you use when you configure <b>Origins</b> on CloudFront.</p>
    pub fn web_app_endpoint(&self) -> ::std::option::Option<&str> {
        self.web_app_endpoint.as_deref()
    }
    /// <p>A union that contains the value for number of concurrent connections or the user sessions on your web app.</p>
    pub fn web_app_units(&self) -> ::std::option::Option<&crate::types::WebAppUnits> {
        self.web_app_units.as_ref()
    }
    /// <p>Key-value pairs that can be used to group and search for web apps. Tags are metadata attached to web apps for any purpose.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>Setting for the type of endpoint policy for the web app. The default value is <code>STANDARD</code>.</p>
    /// <p>If your web app was created in an Amazon Web Services GovCloud (US) Region, the value of this parameter can be <code>FIPS</code>, which indicates the web app endpoint is FIPS-compliant.</p>
    pub fn web_app_endpoint_policy(&self) -> ::std::option::Option<&crate::types::WebAppEndpointPolicy> {
        self.web_app_endpoint_policy.as_ref()
    }
}
impl DescribedWebApp {
    /// Creates a new builder-style object to manufacture [`DescribedWebApp`](crate::types::DescribedWebApp).
    pub fn builder() -> crate::types::builders::DescribedWebAppBuilder {
        crate::types::builders::DescribedWebAppBuilder::default()
    }
}

/// A builder for [`DescribedWebApp`](crate::types::DescribedWebApp).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribedWebAppBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) web_app_id: ::std::option::Option<::std::string::String>,
    pub(crate) described_identity_provider_details: ::std::option::Option<crate::types::DescribedWebAppIdentityProviderDetails>,
    pub(crate) access_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) web_app_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) web_app_units: ::std::option::Option<crate::types::WebAppUnits>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) web_app_endpoint_policy: ::std::option::Option<crate::types::WebAppEndpointPolicy>,
}
impl DescribedWebAppBuilder {
    /// <p>The Amazon Resource Name (ARN) of the web app.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the web app.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the web app.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The unique identifier for the web app.</p>
    /// This field is required.
    pub fn web_app_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.web_app_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the web app.</p>
    pub fn set_web_app_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.web_app_id = input;
        self
    }
    /// <p>The unique identifier for the web app.</p>
    pub fn get_web_app_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.web_app_id
    }
    /// <p>A structure that contains the details for the identity provider used by the web app.</p>
    pub fn described_identity_provider_details(mut self, input: crate::types::DescribedWebAppIdentityProviderDetails) -> Self {
        self.described_identity_provider_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that contains the details for the identity provider used by the web app.</p>
    pub fn set_described_identity_provider_details(
        mut self,
        input: ::std::option::Option<crate::types::DescribedWebAppIdentityProviderDetails>,
    ) -> Self {
        self.described_identity_provider_details = input;
        self
    }
    /// <p>A structure that contains the details for the identity provider used by the web app.</p>
    pub fn get_described_identity_provider_details(&self) -> &::std::option::Option<crate::types::DescribedWebAppIdentityProviderDetails> {
        &self.described_identity_provider_details
    }
    /// <p>The <code>AccessEndpoint</code> is the URL that you provide to your users for them to interact with the Transfer Family web app. You can specify a custom URL or use the default value.</p>
    pub fn access_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>AccessEndpoint</code> is the URL that you provide to your users for them to interact with the Transfer Family web app. You can specify a custom URL or use the default value.</p>
    pub fn set_access_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_endpoint = input;
        self
    }
    /// <p>The <code>AccessEndpoint</code> is the URL that you provide to your users for them to interact with the Transfer Family web app. You can specify a custom URL or use the default value.</p>
    pub fn get_access_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_endpoint
    }
    /// <p>The <code>WebAppEndpoint</code> is the unique URL for your Transfer Family web app. This is the value that you use when you configure <b>Origins</b> on CloudFront.</p>
    pub fn web_app_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.web_app_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>WebAppEndpoint</code> is the unique URL for your Transfer Family web app. This is the value that you use when you configure <b>Origins</b> on CloudFront.</p>
    pub fn set_web_app_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.web_app_endpoint = input;
        self
    }
    /// <p>The <code>WebAppEndpoint</code> is the unique URL for your Transfer Family web app. This is the value that you use when you configure <b>Origins</b> on CloudFront.</p>
    pub fn get_web_app_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.web_app_endpoint
    }
    /// <p>A union that contains the value for number of concurrent connections or the user sessions on your web app.</p>
    pub fn web_app_units(mut self, input: crate::types::WebAppUnits) -> Self {
        self.web_app_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>A union that contains the value for number of concurrent connections or the user sessions on your web app.</p>
    pub fn set_web_app_units(mut self, input: ::std::option::Option<crate::types::WebAppUnits>) -> Self {
        self.web_app_units = input;
        self
    }
    /// <p>A union that contains the value for number of concurrent connections or the user sessions on your web app.</p>
    pub fn get_web_app_units(&self) -> &::std::option::Option<crate::types::WebAppUnits> {
        &self.web_app_units
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Key-value pairs that can be used to group and search for web apps. Tags are metadata attached to web apps for any purpose.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Key-value pairs that can be used to group and search for web apps. Tags are metadata attached to web apps for any purpose.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Key-value pairs that can be used to group and search for web apps. Tags are metadata attached to web apps for any purpose.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>Setting for the type of endpoint policy for the web app. The default value is <code>STANDARD</code>.</p>
    /// <p>If your web app was created in an Amazon Web Services GovCloud (US) Region, the value of this parameter can be <code>FIPS</code>, which indicates the web app endpoint is FIPS-compliant.</p>
    pub fn web_app_endpoint_policy(mut self, input: crate::types::WebAppEndpointPolicy) -> Self {
        self.web_app_endpoint_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Setting for the type of endpoint policy for the web app. The default value is <code>STANDARD</code>.</p>
    /// <p>If your web app was created in an Amazon Web Services GovCloud (US) Region, the value of this parameter can be <code>FIPS</code>, which indicates the web app endpoint is FIPS-compliant.</p>
    pub fn set_web_app_endpoint_policy(mut self, input: ::std::option::Option<crate::types::WebAppEndpointPolicy>) -> Self {
        self.web_app_endpoint_policy = input;
        self
    }
    /// <p>Setting for the type of endpoint policy for the web app. The default value is <code>STANDARD</code>.</p>
    /// <p>If your web app was created in an Amazon Web Services GovCloud (US) Region, the value of this parameter can be <code>FIPS</code>, which indicates the web app endpoint is FIPS-compliant.</p>
    pub fn get_web_app_endpoint_policy(&self) -> &::std::option::Option<crate::types::WebAppEndpointPolicy> {
        &self.web_app_endpoint_policy
    }
    /// Consumes the builder and constructs a [`DescribedWebApp`](crate::types::DescribedWebApp).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::DescribedWebAppBuilder::arn)
    /// - [`web_app_id`](crate::types::builders::DescribedWebAppBuilder::web_app_id)
    pub fn build(self) -> ::std::result::Result<crate::types::DescribedWebApp, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DescribedWebApp {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building DescribedWebApp",
                )
            })?,
            web_app_id: self.web_app_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "web_app_id",
                    "web_app_id was not specified but it is required when building DescribedWebApp",
                )
            })?,
            described_identity_provider_details: self.described_identity_provider_details,
            access_endpoint: self.access_endpoint,
            web_app_endpoint: self.web_app_endpoint,
            web_app_units: self.web_app_units,
            tags: self.tags,
            web_app_endpoint_policy: self.web_app_endpoint_policy,
        })
    }
}
