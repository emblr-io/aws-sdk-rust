// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the details for an SFTP connector connection.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SftpConnectorConnectionDetails {
    /// <p>The SSH public key of the remote SFTP server. This is returned during the initial connection attempt when you call <code>TestConnection</code>. It allows you to retrieve the valid server host key to update the connector when you are unable to obtain it in advance.</p>
    pub host_key: ::std::option::Option<::std::string::String>,
}
impl SftpConnectorConnectionDetails {
    /// <p>The SSH public key of the remote SFTP server. This is returned during the initial connection attempt when you call <code>TestConnection</code>. It allows you to retrieve the valid server host key to update the connector when you are unable to obtain it in advance.</p>
    pub fn host_key(&self) -> ::std::option::Option<&str> {
        self.host_key.as_deref()
    }
}
impl SftpConnectorConnectionDetails {
    /// Creates a new builder-style object to manufacture [`SftpConnectorConnectionDetails`](crate::types::SftpConnectorConnectionDetails).
    pub fn builder() -> crate::types::builders::SftpConnectorConnectionDetailsBuilder {
        crate::types::builders::SftpConnectorConnectionDetailsBuilder::default()
    }
}

/// A builder for [`SftpConnectorConnectionDetails`](crate::types::SftpConnectorConnectionDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SftpConnectorConnectionDetailsBuilder {
    pub(crate) host_key: ::std::option::Option<::std::string::String>,
}
impl SftpConnectorConnectionDetailsBuilder {
    /// <p>The SSH public key of the remote SFTP server. This is returned during the initial connection attempt when you call <code>TestConnection</code>. It allows you to retrieve the valid server host key to update the connector when you are unable to obtain it in advance.</p>
    pub fn host_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.host_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The SSH public key of the remote SFTP server. This is returned during the initial connection attempt when you call <code>TestConnection</code>. It allows you to retrieve the valid server host key to update the connector when you are unable to obtain it in advance.</p>
    pub fn set_host_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.host_key = input;
        self
    }
    /// <p>The SSH public key of the remote SFTP server. This is returned during the initial connection attempt when you call <code>TestConnection</code>. It allows you to retrieve the valid server host key to update the connector when you are unable to obtain it in advance.</p>
    pub fn get_host_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.host_key
    }
    /// Consumes the builder and constructs a [`SftpConnectorConnectionDetails`](crate::types::SftpConnectorConnectionDetails).
    pub fn build(self) -> crate::types::SftpConnectorConnectionDetails {
        crate::types::SftpConnectorConnectionDetails { host_key: self.host_key }
    }
}
