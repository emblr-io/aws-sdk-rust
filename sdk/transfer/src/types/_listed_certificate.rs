// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the properties of a certificate.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListedCertificate {
    /// <p>The Amazon Resource Name (ARN) of the specified certificate.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    pub certificate_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies how this certificate is used. It can be used in the following ways:</p>
    /// <ul>
    /// <li>
    /// <p><code>SIGNING</code>: For signing AS2 messages</p></li>
    /// <li>
    /// <p><code>ENCRYPTION</code>: For encrypting AS2 messages</p></li>
    /// <li>
    /// <p><code>TLS</code>: For securing AS2 communications sent over HTTPS</p></li>
    /// </ul>
    pub usage: ::std::option::Option<crate::types::CertificateUsageType>,
    /// <p>The certificate can be either <code>ACTIVE</code>, <code>PENDING_ROTATION</code>, or <code>INACTIVE</code>. <code>PENDING_ROTATION</code> means that this certificate will replace the current certificate when it expires.</p>
    pub status: ::std::option::Option<crate::types::CertificateStatusType>,
    /// <p>An optional date that specifies when the certificate becomes active. If you do not specify a value, <code>ActiveDate</code> takes the same value as <code>NotBeforeDate</code>, which is specified by the CA.</p>
    pub active_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>An optional date that specifies when the certificate becomes inactive. If you do not specify a value, <code>InactiveDate</code> takes the same value as <code>NotAfterDate</code>, which is specified by the CA.</p>
    pub inactive_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The type for the certificate. If a private key has been specified for the certificate, its type is <code>CERTIFICATE_WITH_PRIVATE_KEY</code>. If there is no private key, the type is <code>CERTIFICATE</code>.</p>
    pub r#type: ::std::option::Option<crate::types::CertificateType>,
    /// <p>The name or short description that's used to identify the certificate.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl ListedCertificate {
    /// <p>The Amazon Resource Name (ARN) of the specified certificate.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    pub fn certificate_id(&self) -> ::std::option::Option<&str> {
        self.certificate_id.as_deref()
    }
    /// <p>Specifies how this certificate is used. It can be used in the following ways:</p>
    /// <ul>
    /// <li>
    /// <p><code>SIGNING</code>: For signing AS2 messages</p></li>
    /// <li>
    /// <p><code>ENCRYPTION</code>: For encrypting AS2 messages</p></li>
    /// <li>
    /// <p><code>TLS</code>: For securing AS2 communications sent over HTTPS</p></li>
    /// </ul>
    pub fn usage(&self) -> ::std::option::Option<&crate::types::CertificateUsageType> {
        self.usage.as_ref()
    }
    /// <p>The certificate can be either <code>ACTIVE</code>, <code>PENDING_ROTATION</code>, or <code>INACTIVE</code>. <code>PENDING_ROTATION</code> means that this certificate will replace the current certificate when it expires.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::CertificateStatusType> {
        self.status.as_ref()
    }
    /// <p>An optional date that specifies when the certificate becomes active. If you do not specify a value, <code>ActiveDate</code> takes the same value as <code>NotBeforeDate</code>, which is specified by the CA.</p>
    pub fn active_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.active_date.as_ref()
    }
    /// <p>An optional date that specifies when the certificate becomes inactive. If you do not specify a value, <code>InactiveDate</code> takes the same value as <code>NotAfterDate</code>, which is specified by the CA.</p>
    pub fn inactive_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.inactive_date.as_ref()
    }
    /// <p>The type for the certificate. If a private key has been specified for the certificate, its type is <code>CERTIFICATE_WITH_PRIVATE_KEY</code>. If there is no private key, the type is <code>CERTIFICATE</code>.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::CertificateType> {
        self.r#type.as_ref()
    }
    /// <p>The name or short description that's used to identify the certificate.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl ListedCertificate {
    /// Creates a new builder-style object to manufacture [`ListedCertificate`](crate::types::ListedCertificate).
    pub fn builder() -> crate::types::builders::ListedCertificateBuilder {
        crate::types::builders::ListedCertificateBuilder::default()
    }
}

/// A builder for [`ListedCertificate`](crate::types::ListedCertificate).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListedCertificateBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) certificate_id: ::std::option::Option<::std::string::String>,
    pub(crate) usage: ::std::option::Option<crate::types::CertificateUsageType>,
    pub(crate) status: ::std::option::Option<crate::types::CertificateStatusType>,
    pub(crate) active_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) inactive_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) r#type: ::std::option::Option<crate::types::CertificateType>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl ListedCertificateBuilder {
    /// <p>The Amazon Resource Name (ARN) of the specified certificate.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the specified certificate.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the specified certificate.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    pub fn certificate_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certificate_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    pub fn set_certificate_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certificate_id = input;
        self
    }
    /// <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    pub fn get_certificate_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.certificate_id
    }
    /// <p>Specifies how this certificate is used. It can be used in the following ways:</p>
    /// <ul>
    /// <li>
    /// <p><code>SIGNING</code>: For signing AS2 messages</p></li>
    /// <li>
    /// <p><code>ENCRYPTION</code>: For encrypting AS2 messages</p></li>
    /// <li>
    /// <p><code>TLS</code>: For securing AS2 communications sent over HTTPS</p></li>
    /// </ul>
    pub fn usage(mut self, input: crate::types::CertificateUsageType) -> Self {
        self.usage = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies how this certificate is used. It can be used in the following ways:</p>
    /// <ul>
    /// <li>
    /// <p><code>SIGNING</code>: For signing AS2 messages</p></li>
    /// <li>
    /// <p><code>ENCRYPTION</code>: For encrypting AS2 messages</p></li>
    /// <li>
    /// <p><code>TLS</code>: For securing AS2 communications sent over HTTPS</p></li>
    /// </ul>
    pub fn set_usage(mut self, input: ::std::option::Option<crate::types::CertificateUsageType>) -> Self {
        self.usage = input;
        self
    }
    /// <p>Specifies how this certificate is used. It can be used in the following ways:</p>
    /// <ul>
    /// <li>
    /// <p><code>SIGNING</code>: For signing AS2 messages</p></li>
    /// <li>
    /// <p><code>ENCRYPTION</code>: For encrypting AS2 messages</p></li>
    /// <li>
    /// <p><code>TLS</code>: For securing AS2 communications sent over HTTPS</p></li>
    /// </ul>
    pub fn get_usage(&self) -> &::std::option::Option<crate::types::CertificateUsageType> {
        &self.usage
    }
    /// <p>The certificate can be either <code>ACTIVE</code>, <code>PENDING_ROTATION</code>, or <code>INACTIVE</code>. <code>PENDING_ROTATION</code> means that this certificate will replace the current certificate when it expires.</p>
    pub fn status(mut self, input: crate::types::CertificateStatusType) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The certificate can be either <code>ACTIVE</code>, <code>PENDING_ROTATION</code>, or <code>INACTIVE</code>. <code>PENDING_ROTATION</code> means that this certificate will replace the current certificate when it expires.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::CertificateStatusType>) -> Self {
        self.status = input;
        self
    }
    /// <p>The certificate can be either <code>ACTIVE</code>, <code>PENDING_ROTATION</code>, or <code>INACTIVE</code>. <code>PENDING_ROTATION</code> means that this certificate will replace the current certificate when it expires.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::CertificateStatusType> {
        &self.status
    }
    /// <p>An optional date that specifies when the certificate becomes active. If you do not specify a value, <code>ActiveDate</code> takes the same value as <code>NotBeforeDate</code>, which is specified by the CA.</p>
    pub fn active_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.active_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>An optional date that specifies when the certificate becomes active. If you do not specify a value, <code>ActiveDate</code> takes the same value as <code>NotBeforeDate</code>, which is specified by the CA.</p>
    pub fn set_active_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.active_date = input;
        self
    }
    /// <p>An optional date that specifies when the certificate becomes active. If you do not specify a value, <code>ActiveDate</code> takes the same value as <code>NotBeforeDate</code>, which is specified by the CA.</p>
    pub fn get_active_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.active_date
    }
    /// <p>An optional date that specifies when the certificate becomes inactive. If you do not specify a value, <code>InactiveDate</code> takes the same value as <code>NotAfterDate</code>, which is specified by the CA.</p>
    pub fn inactive_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inactive_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>An optional date that specifies when the certificate becomes inactive. If you do not specify a value, <code>InactiveDate</code> takes the same value as <code>NotAfterDate</code>, which is specified by the CA.</p>
    pub fn set_inactive_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inactive_date = input;
        self
    }
    /// <p>An optional date that specifies when the certificate becomes inactive. If you do not specify a value, <code>InactiveDate</code> takes the same value as <code>NotAfterDate</code>, which is specified by the CA.</p>
    pub fn get_inactive_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.inactive_date
    }
    /// <p>The type for the certificate. If a private key has been specified for the certificate, its type is <code>CERTIFICATE_WITH_PRIVATE_KEY</code>. If there is no private key, the type is <code>CERTIFICATE</code>.</p>
    pub fn r#type(mut self, input: crate::types::CertificateType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type for the certificate. If a private key has been specified for the certificate, its type is <code>CERTIFICATE_WITH_PRIVATE_KEY</code>. If there is no private key, the type is <code>CERTIFICATE</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::CertificateType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type for the certificate. If a private key has been specified for the certificate, its type is <code>CERTIFICATE_WITH_PRIVATE_KEY</code>. If there is no private key, the type is <code>CERTIFICATE</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::CertificateType> {
        &self.r#type
    }
    /// <p>The name or short description that's used to identify the certificate.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or short description that's used to identify the certificate.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The name or short description that's used to identify the certificate.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`ListedCertificate`](crate::types::ListedCertificate).
    pub fn build(self) -> crate::types::ListedCertificate {
        crate::types::ListedCertificate {
            arn: self.arn,
            certificate_id: self.certificate_id,
            usage: self.usage,
            status: self.status,
            active_date: self.active_date,
            inactive_date: self.inactive_date,
            r#type: self.r#type,
            description: self.description,
        }
    }
}
