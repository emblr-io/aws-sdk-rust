// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains the details for files transferred using an SFTP connector, during a single transfer.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConnectorFileTransferResult {
    /// <p>The filename and path to where the file was sent to or retrieved from.</p>
    pub file_path: ::std::string::String,
    /// <p>The current status for the transfer.</p>
    pub status_code: crate::types::TransferTableStatus,
    /// <p>For transfers that fail, this parameter contains a code indicating the reason. For example, <code>RETRIEVE_FILE_NOT_FOUND</code></p>
    pub failure_code: ::std::option::Option<::std::string::String>,
    /// <p>For transfers that fail, this parameter describes the reason for the failure.</p>
    pub failure_message: ::std::option::Option<::std::string::String>,
}
impl ConnectorFileTransferResult {
    /// <p>The filename and path to where the file was sent to or retrieved from.</p>
    pub fn file_path(&self) -> &str {
        use std::ops::Deref;
        self.file_path.deref()
    }
    /// <p>The current status for the transfer.</p>
    pub fn status_code(&self) -> &crate::types::TransferTableStatus {
        &self.status_code
    }
    /// <p>For transfers that fail, this parameter contains a code indicating the reason. For example, <code>RETRIEVE_FILE_NOT_FOUND</code></p>
    pub fn failure_code(&self) -> ::std::option::Option<&str> {
        self.failure_code.as_deref()
    }
    /// <p>For transfers that fail, this parameter describes the reason for the failure.</p>
    pub fn failure_message(&self) -> ::std::option::Option<&str> {
        self.failure_message.as_deref()
    }
}
impl ConnectorFileTransferResult {
    /// Creates a new builder-style object to manufacture [`ConnectorFileTransferResult`](crate::types::ConnectorFileTransferResult).
    pub fn builder() -> crate::types::builders::ConnectorFileTransferResultBuilder {
        crate::types::builders::ConnectorFileTransferResultBuilder::default()
    }
}

/// A builder for [`ConnectorFileTransferResult`](crate::types::ConnectorFileTransferResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConnectorFileTransferResultBuilder {
    pub(crate) file_path: ::std::option::Option<::std::string::String>,
    pub(crate) status_code: ::std::option::Option<crate::types::TransferTableStatus>,
    pub(crate) failure_code: ::std::option::Option<::std::string::String>,
    pub(crate) failure_message: ::std::option::Option<::std::string::String>,
}
impl ConnectorFileTransferResultBuilder {
    /// <p>The filename and path to where the file was sent to or retrieved from.</p>
    /// This field is required.
    pub fn file_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The filename and path to where the file was sent to or retrieved from.</p>
    pub fn set_file_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_path = input;
        self
    }
    /// <p>The filename and path to where the file was sent to or retrieved from.</p>
    pub fn get_file_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_path
    }
    /// <p>The current status for the transfer.</p>
    /// This field is required.
    pub fn status_code(mut self, input: crate::types::TransferTableStatus) -> Self {
        self.status_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status for the transfer.</p>
    pub fn set_status_code(mut self, input: ::std::option::Option<crate::types::TransferTableStatus>) -> Self {
        self.status_code = input;
        self
    }
    /// <p>The current status for the transfer.</p>
    pub fn get_status_code(&self) -> &::std::option::Option<crate::types::TransferTableStatus> {
        &self.status_code
    }
    /// <p>For transfers that fail, this parameter contains a code indicating the reason. For example, <code>RETRIEVE_FILE_NOT_FOUND</code></p>
    pub fn failure_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>For transfers that fail, this parameter contains a code indicating the reason. For example, <code>RETRIEVE_FILE_NOT_FOUND</code></p>
    pub fn set_failure_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_code = input;
        self
    }
    /// <p>For transfers that fail, this parameter contains a code indicating the reason. For example, <code>RETRIEVE_FILE_NOT_FOUND</code></p>
    pub fn get_failure_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_code
    }
    /// <p>For transfers that fail, this parameter describes the reason for the failure.</p>
    pub fn failure_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>For transfers that fail, this parameter describes the reason for the failure.</p>
    pub fn set_failure_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_message = input;
        self
    }
    /// <p>For transfers that fail, this parameter describes the reason for the failure.</p>
    pub fn get_failure_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_message
    }
    /// Consumes the builder and constructs a [`ConnectorFileTransferResult`](crate::types::ConnectorFileTransferResult).
    /// This method will fail if any of the following fields are not set:
    /// - [`file_path`](crate::types::builders::ConnectorFileTransferResultBuilder::file_path)
    /// - [`status_code`](crate::types::builders::ConnectorFileTransferResultBuilder::status_code)
    pub fn build(self) -> ::std::result::Result<crate::types::ConnectorFileTransferResult, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConnectorFileTransferResult {
            file_path: self.file_path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "file_path",
                    "file_path was not specified but it is required when building ConnectorFileTransferResult",
                )
            })?,
            status_code: self.status_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status_code",
                    "status_code was not specified but it is required when building ConnectorFileTransferResult",
                )
            })?,
            failure_code: self.failure_code,
            failure_message: self.failure_message,
        })
    }
}
