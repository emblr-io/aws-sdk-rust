// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartRemoteMoveInput {
    /// <p>The unique identifier for the connector.</p>
    pub connector_id: ::std::option::Option<::std::string::String>,
    /// <p>The absolute path of the file or directory to move or rename. You can only specify one path per call to this operation.</p>
    pub source_path: ::std::option::Option<::std::string::String>,
    /// <p>The absolute path for the target of the move/rename operation.</p>
    pub target_path: ::std::option::Option<::std::string::String>,
}
impl StartRemoteMoveInput {
    /// <p>The unique identifier for the connector.</p>
    pub fn connector_id(&self) -> ::std::option::Option<&str> {
        self.connector_id.as_deref()
    }
    /// <p>The absolute path of the file or directory to move or rename. You can only specify one path per call to this operation.</p>
    pub fn source_path(&self) -> ::std::option::Option<&str> {
        self.source_path.as_deref()
    }
    /// <p>The absolute path for the target of the move/rename operation.</p>
    pub fn target_path(&self) -> ::std::option::Option<&str> {
        self.target_path.as_deref()
    }
}
impl StartRemoteMoveInput {
    /// Creates a new builder-style object to manufacture [`StartRemoteMoveInput`](crate::operation::start_remote_move::StartRemoteMoveInput).
    pub fn builder() -> crate::operation::start_remote_move::builders::StartRemoteMoveInputBuilder {
        crate::operation::start_remote_move::builders::StartRemoteMoveInputBuilder::default()
    }
}

/// A builder for [`StartRemoteMoveInput`](crate::operation::start_remote_move::StartRemoteMoveInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartRemoteMoveInputBuilder {
    pub(crate) connector_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_path: ::std::option::Option<::std::string::String>,
    pub(crate) target_path: ::std::option::Option<::std::string::String>,
}
impl StartRemoteMoveInputBuilder {
    /// <p>The unique identifier for the connector.</p>
    /// This field is required.
    pub fn connector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the connector.</p>
    pub fn set_connector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_id = input;
        self
    }
    /// <p>The unique identifier for the connector.</p>
    pub fn get_connector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_id
    }
    /// <p>The absolute path of the file or directory to move or rename. You can only specify one path per call to this operation.</p>
    /// This field is required.
    pub fn source_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The absolute path of the file or directory to move or rename. You can only specify one path per call to this operation.</p>
    pub fn set_source_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_path = input;
        self
    }
    /// <p>The absolute path of the file or directory to move or rename. You can only specify one path per call to this operation.</p>
    pub fn get_source_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_path
    }
    /// <p>The absolute path for the target of the move/rename operation.</p>
    /// This field is required.
    pub fn target_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The absolute path for the target of the move/rename operation.</p>
    pub fn set_target_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_path = input;
        self
    }
    /// <p>The absolute path for the target of the move/rename operation.</p>
    pub fn get_target_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_path
    }
    /// Consumes the builder and constructs a [`StartRemoteMoveInput`](crate::operation::start_remote_move::StartRemoteMoveInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_remote_move::StartRemoteMoveInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_remote_move::StartRemoteMoveInput {
            connector_id: self.connector_id,
            source_path: self.source_path,
            target_path: self.target_path,
        })
    }
}
