// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateAgreementInput {
    /// <p>A unique identifier for the agreement. This identifier is returned when you create an agreement.</p>
    pub agreement_id: ::std::option::Option<::std::string::String>,
    /// <p>A system-assigned unique identifier for a server instance. This is the specific server that the agreement uses.</p>
    pub server_id: ::std::option::Option<::std::string::String>,
    /// <p>To replace the existing description, provide a short description for the agreement.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>You can update the status for the agreement, either activating an inactive agreement or the reverse.</p>
    pub status: ::std::option::Option<crate::types::AgreementStatusType>,
    /// <p>A unique identifier for the AS2 local profile.</p>
    /// <p>To change the local profile identifier, provide a new value here.</p>
    pub local_profile_id: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for the partner profile. To change the partner profile identifier, provide a new value here.</p>
    pub partner_profile_id: ::std::option::Option<::std::string::String>,
    /// <p>To change the landing directory (folder) for files that are transferred, provide the bucket folder that you want to use; for example, <code>/<i>amzn-s3-demo-bucket</i>/<i>home</i>/<i>mydirectory</i> </code>.</p>
    pub base_directory: ::std::option::Option<::std::string::String>,
    /// <p>Connectors are used to send files using either the AS2 or SFTP protocol. For the access role, provide the Amazon Resource Name (ARN) of the Identity and Access Management role to use.</p>
    /// <p><b>For AS2 connectors</b></p>
    /// <p>With AS2, you can send files by calling <code>StartFileTransfer</code> and specifying the file paths in the request parameter, <code>SendFilePaths</code>. We use the file’s parent directory (for example, for <code>--send-file-paths /bucket/dir/file.txt</code>, parent directory is <code>/bucket/dir/</code>) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the <code>AccessRole</code> needs to provide read and write access to the parent directory of the file location used in the <code>StartFileTransfer</code> request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with <code>StartFileTransfer</code>.</p>
    /// <p>If you are using Basic authentication for your AS2 connector, the access role requires the <code>secretsmanager:GetSecretValue</code> permission for the secret. If the secret is encrypted using a customer-managed key instead of the Amazon Web Services managed key in Secrets Manager, then the role also needs the <code>kms:Decrypt</code> permission for that key.</p>
    /// <p><b>For SFTP connectors</b></p>
    /// <p>Make sure that the access role provides read and write access to the parent directory of the file location that's used in the <code>StartFileTransfer</code> request. Additionally, make sure that the role provides <code>secretsmanager:GetSecretValue</code> permission to Secrets Manager.</p>
    pub access_role: ::std::option::Option<::std::string::String>,
    /// <p>Determines whether or not Transfer Family appends a unique string of characters to the end of the AS2 message payload filename when saving it.</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code>: the filename provided by your trading parter is preserved when the file is saved.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> (default value): when Transfer Family saves the file, the filename is adjusted, as described in <a href="https://docs.aws.amazon.com/transfer/latest/userguide/send-as2-messages.html#file-names-as2">File names and locations</a>.</p></li>
    /// </ul>
    pub preserve_filename: ::std::option::Option<crate::types::PreserveFilenameType>,
    /// <p>Determines whether or not unsigned messages from your trading partners will be accepted.</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code>: Transfer Family rejects unsigned messages from your trading partner.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> (default value): Transfer Family accepts unsigned messages from your trading partner.</p></li>
    /// </ul>
    pub enforce_message_signing: ::std::option::Option<crate::types::EnforceMessageSigningType>,
    /// <p>A <code>CustomDirectoriesType</code> structure. This structure specifies custom directories for storing various AS2 message files. You can specify directories for the following types of files.</p>
    /// <ul>
    /// <li>
    /// <p>Failed files</p></li>
    /// <li>
    /// <p>MDN files</p></li>
    /// <li>
    /// <p>Payload files</p></li>
    /// <li>
    /// <p>Status files</p></li>
    /// <li>
    /// <p>Temporary files</p></li>
    /// </ul>
    pub custom_directories: ::std::option::Option<crate::types::CustomDirectoriesType>,
}
impl UpdateAgreementInput {
    /// <p>A unique identifier for the agreement. This identifier is returned when you create an agreement.</p>
    pub fn agreement_id(&self) -> ::std::option::Option<&str> {
        self.agreement_id.as_deref()
    }
    /// <p>A system-assigned unique identifier for a server instance. This is the specific server that the agreement uses.</p>
    pub fn server_id(&self) -> ::std::option::Option<&str> {
        self.server_id.as_deref()
    }
    /// <p>To replace the existing description, provide a short description for the agreement.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>You can update the status for the agreement, either activating an inactive agreement or the reverse.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::AgreementStatusType> {
        self.status.as_ref()
    }
    /// <p>A unique identifier for the AS2 local profile.</p>
    /// <p>To change the local profile identifier, provide a new value here.</p>
    pub fn local_profile_id(&self) -> ::std::option::Option<&str> {
        self.local_profile_id.as_deref()
    }
    /// <p>A unique identifier for the partner profile. To change the partner profile identifier, provide a new value here.</p>
    pub fn partner_profile_id(&self) -> ::std::option::Option<&str> {
        self.partner_profile_id.as_deref()
    }
    /// <p>To change the landing directory (folder) for files that are transferred, provide the bucket folder that you want to use; for example, <code>/<i>amzn-s3-demo-bucket</i>/<i>home</i>/<i>mydirectory</i> </code>.</p>
    pub fn base_directory(&self) -> ::std::option::Option<&str> {
        self.base_directory.as_deref()
    }
    /// <p>Connectors are used to send files using either the AS2 or SFTP protocol. For the access role, provide the Amazon Resource Name (ARN) of the Identity and Access Management role to use.</p>
    /// <p><b>For AS2 connectors</b></p>
    /// <p>With AS2, you can send files by calling <code>StartFileTransfer</code> and specifying the file paths in the request parameter, <code>SendFilePaths</code>. We use the file’s parent directory (for example, for <code>--send-file-paths /bucket/dir/file.txt</code>, parent directory is <code>/bucket/dir/</code>) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the <code>AccessRole</code> needs to provide read and write access to the parent directory of the file location used in the <code>StartFileTransfer</code> request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with <code>StartFileTransfer</code>.</p>
    /// <p>If you are using Basic authentication for your AS2 connector, the access role requires the <code>secretsmanager:GetSecretValue</code> permission for the secret. If the secret is encrypted using a customer-managed key instead of the Amazon Web Services managed key in Secrets Manager, then the role also needs the <code>kms:Decrypt</code> permission for that key.</p>
    /// <p><b>For SFTP connectors</b></p>
    /// <p>Make sure that the access role provides read and write access to the parent directory of the file location that's used in the <code>StartFileTransfer</code> request. Additionally, make sure that the role provides <code>secretsmanager:GetSecretValue</code> permission to Secrets Manager.</p>
    pub fn access_role(&self) -> ::std::option::Option<&str> {
        self.access_role.as_deref()
    }
    /// <p>Determines whether or not Transfer Family appends a unique string of characters to the end of the AS2 message payload filename when saving it.</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code>: the filename provided by your trading parter is preserved when the file is saved.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> (default value): when Transfer Family saves the file, the filename is adjusted, as described in <a href="https://docs.aws.amazon.com/transfer/latest/userguide/send-as2-messages.html#file-names-as2">File names and locations</a>.</p></li>
    /// </ul>
    pub fn preserve_filename(&self) -> ::std::option::Option<&crate::types::PreserveFilenameType> {
        self.preserve_filename.as_ref()
    }
    /// <p>Determines whether or not unsigned messages from your trading partners will be accepted.</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code>: Transfer Family rejects unsigned messages from your trading partner.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> (default value): Transfer Family accepts unsigned messages from your trading partner.</p></li>
    /// </ul>
    pub fn enforce_message_signing(&self) -> ::std::option::Option<&crate::types::EnforceMessageSigningType> {
        self.enforce_message_signing.as_ref()
    }
    /// <p>A <code>CustomDirectoriesType</code> structure. This structure specifies custom directories for storing various AS2 message files. You can specify directories for the following types of files.</p>
    /// <ul>
    /// <li>
    /// <p>Failed files</p></li>
    /// <li>
    /// <p>MDN files</p></li>
    /// <li>
    /// <p>Payload files</p></li>
    /// <li>
    /// <p>Status files</p></li>
    /// <li>
    /// <p>Temporary files</p></li>
    /// </ul>
    pub fn custom_directories(&self) -> ::std::option::Option<&crate::types::CustomDirectoriesType> {
        self.custom_directories.as_ref()
    }
}
impl UpdateAgreementInput {
    /// Creates a new builder-style object to manufacture [`UpdateAgreementInput`](crate::operation::update_agreement::UpdateAgreementInput).
    pub fn builder() -> crate::operation::update_agreement::builders::UpdateAgreementInputBuilder {
        crate::operation::update_agreement::builders::UpdateAgreementInputBuilder::default()
    }
}

/// A builder for [`UpdateAgreementInput`](crate::operation::update_agreement::UpdateAgreementInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateAgreementInputBuilder {
    pub(crate) agreement_id: ::std::option::Option<::std::string::String>,
    pub(crate) server_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::AgreementStatusType>,
    pub(crate) local_profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) partner_profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) base_directory: ::std::option::Option<::std::string::String>,
    pub(crate) access_role: ::std::option::Option<::std::string::String>,
    pub(crate) preserve_filename: ::std::option::Option<crate::types::PreserveFilenameType>,
    pub(crate) enforce_message_signing: ::std::option::Option<crate::types::EnforceMessageSigningType>,
    pub(crate) custom_directories: ::std::option::Option<crate::types::CustomDirectoriesType>,
}
impl UpdateAgreementInputBuilder {
    /// <p>A unique identifier for the agreement. This identifier is returned when you create an agreement.</p>
    /// This field is required.
    pub fn agreement_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agreement_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the agreement. This identifier is returned when you create an agreement.</p>
    pub fn set_agreement_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agreement_id = input;
        self
    }
    /// <p>A unique identifier for the agreement. This identifier is returned when you create an agreement.</p>
    pub fn get_agreement_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agreement_id
    }
    /// <p>A system-assigned unique identifier for a server instance. This is the specific server that the agreement uses.</p>
    /// This field is required.
    pub fn server_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.server_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A system-assigned unique identifier for a server instance. This is the specific server that the agreement uses.</p>
    pub fn set_server_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.server_id = input;
        self
    }
    /// <p>A system-assigned unique identifier for a server instance. This is the specific server that the agreement uses.</p>
    pub fn get_server_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.server_id
    }
    /// <p>To replace the existing description, provide a short description for the agreement.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>To replace the existing description, provide a short description for the agreement.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>To replace the existing description, provide a short description for the agreement.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>You can update the status for the agreement, either activating an inactive agreement or the reverse.</p>
    pub fn status(mut self, input: crate::types::AgreementStatusType) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>You can update the status for the agreement, either activating an inactive agreement or the reverse.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AgreementStatusType>) -> Self {
        self.status = input;
        self
    }
    /// <p>You can update the status for the agreement, either activating an inactive agreement or the reverse.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AgreementStatusType> {
        &self.status
    }
    /// <p>A unique identifier for the AS2 local profile.</p>
    /// <p>To change the local profile identifier, provide a new value here.</p>
    pub fn local_profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the AS2 local profile.</p>
    /// <p>To change the local profile identifier, provide a new value here.</p>
    pub fn set_local_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_profile_id = input;
        self
    }
    /// <p>A unique identifier for the AS2 local profile.</p>
    /// <p>To change the local profile identifier, provide a new value here.</p>
    pub fn get_local_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_profile_id
    }
    /// <p>A unique identifier for the partner profile. To change the partner profile identifier, provide a new value here.</p>
    pub fn partner_profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.partner_profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the partner profile. To change the partner profile identifier, provide a new value here.</p>
    pub fn set_partner_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.partner_profile_id = input;
        self
    }
    /// <p>A unique identifier for the partner profile. To change the partner profile identifier, provide a new value here.</p>
    pub fn get_partner_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.partner_profile_id
    }
    /// <p>To change the landing directory (folder) for files that are transferred, provide the bucket folder that you want to use; for example, <code>/<i>amzn-s3-demo-bucket</i>/<i>home</i>/<i>mydirectory</i> </code>.</p>
    pub fn base_directory(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.base_directory = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>To change the landing directory (folder) for files that are transferred, provide the bucket folder that you want to use; for example, <code>/<i>amzn-s3-demo-bucket</i>/<i>home</i>/<i>mydirectory</i> </code>.</p>
    pub fn set_base_directory(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.base_directory = input;
        self
    }
    /// <p>To change the landing directory (folder) for files that are transferred, provide the bucket folder that you want to use; for example, <code>/<i>amzn-s3-demo-bucket</i>/<i>home</i>/<i>mydirectory</i> </code>.</p>
    pub fn get_base_directory(&self) -> &::std::option::Option<::std::string::String> {
        &self.base_directory
    }
    /// <p>Connectors are used to send files using either the AS2 or SFTP protocol. For the access role, provide the Amazon Resource Name (ARN) of the Identity and Access Management role to use.</p>
    /// <p><b>For AS2 connectors</b></p>
    /// <p>With AS2, you can send files by calling <code>StartFileTransfer</code> and specifying the file paths in the request parameter, <code>SendFilePaths</code>. We use the file’s parent directory (for example, for <code>--send-file-paths /bucket/dir/file.txt</code>, parent directory is <code>/bucket/dir/</code>) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the <code>AccessRole</code> needs to provide read and write access to the parent directory of the file location used in the <code>StartFileTransfer</code> request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with <code>StartFileTransfer</code>.</p>
    /// <p>If you are using Basic authentication for your AS2 connector, the access role requires the <code>secretsmanager:GetSecretValue</code> permission for the secret. If the secret is encrypted using a customer-managed key instead of the Amazon Web Services managed key in Secrets Manager, then the role also needs the <code>kms:Decrypt</code> permission for that key.</p>
    /// <p><b>For SFTP connectors</b></p>
    /// <p>Make sure that the access role provides read and write access to the parent directory of the file location that's used in the <code>StartFileTransfer</code> request. Additionally, make sure that the role provides <code>secretsmanager:GetSecretValue</code> permission to Secrets Manager.</p>
    pub fn access_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Connectors are used to send files using either the AS2 or SFTP protocol. For the access role, provide the Amazon Resource Name (ARN) of the Identity and Access Management role to use.</p>
    /// <p><b>For AS2 connectors</b></p>
    /// <p>With AS2, you can send files by calling <code>StartFileTransfer</code> and specifying the file paths in the request parameter, <code>SendFilePaths</code>. We use the file’s parent directory (for example, for <code>--send-file-paths /bucket/dir/file.txt</code>, parent directory is <code>/bucket/dir/</code>) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the <code>AccessRole</code> needs to provide read and write access to the parent directory of the file location used in the <code>StartFileTransfer</code> request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with <code>StartFileTransfer</code>.</p>
    /// <p>If you are using Basic authentication for your AS2 connector, the access role requires the <code>secretsmanager:GetSecretValue</code> permission for the secret. If the secret is encrypted using a customer-managed key instead of the Amazon Web Services managed key in Secrets Manager, then the role also needs the <code>kms:Decrypt</code> permission for that key.</p>
    /// <p><b>For SFTP connectors</b></p>
    /// <p>Make sure that the access role provides read and write access to the parent directory of the file location that's used in the <code>StartFileTransfer</code> request. Additionally, make sure that the role provides <code>secretsmanager:GetSecretValue</code> permission to Secrets Manager.</p>
    pub fn set_access_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_role = input;
        self
    }
    /// <p>Connectors are used to send files using either the AS2 or SFTP protocol. For the access role, provide the Amazon Resource Name (ARN) of the Identity and Access Management role to use.</p>
    /// <p><b>For AS2 connectors</b></p>
    /// <p>With AS2, you can send files by calling <code>StartFileTransfer</code> and specifying the file paths in the request parameter, <code>SendFilePaths</code>. We use the file’s parent directory (for example, for <code>--send-file-paths /bucket/dir/file.txt</code>, parent directory is <code>/bucket/dir/</code>) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the <code>AccessRole</code> needs to provide read and write access to the parent directory of the file location used in the <code>StartFileTransfer</code> request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with <code>StartFileTransfer</code>.</p>
    /// <p>If you are using Basic authentication for your AS2 connector, the access role requires the <code>secretsmanager:GetSecretValue</code> permission for the secret. If the secret is encrypted using a customer-managed key instead of the Amazon Web Services managed key in Secrets Manager, then the role also needs the <code>kms:Decrypt</code> permission for that key.</p>
    /// <p><b>For SFTP connectors</b></p>
    /// <p>Make sure that the access role provides read and write access to the parent directory of the file location that's used in the <code>StartFileTransfer</code> request. Additionally, make sure that the role provides <code>secretsmanager:GetSecretValue</code> permission to Secrets Manager.</p>
    pub fn get_access_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_role
    }
    /// <p>Determines whether or not Transfer Family appends a unique string of characters to the end of the AS2 message payload filename when saving it.</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code>: the filename provided by your trading parter is preserved when the file is saved.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> (default value): when Transfer Family saves the file, the filename is adjusted, as described in <a href="https://docs.aws.amazon.com/transfer/latest/userguide/send-as2-messages.html#file-names-as2">File names and locations</a>.</p></li>
    /// </ul>
    pub fn preserve_filename(mut self, input: crate::types::PreserveFilenameType) -> Self {
        self.preserve_filename = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether or not Transfer Family appends a unique string of characters to the end of the AS2 message payload filename when saving it.</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code>: the filename provided by your trading parter is preserved when the file is saved.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> (default value): when Transfer Family saves the file, the filename is adjusted, as described in <a href="https://docs.aws.amazon.com/transfer/latest/userguide/send-as2-messages.html#file-names-as2">File names and locations</a>.</p></li>
    /// </ul>
    pub fn set_preserve_filename(mut self, input: ::std::option::Option<crate::types::PreserveFilenameType>) -> Self {
        self.preserve_filename = input;
        self
    }
    /// <p>Determines whether or not Transfer Family appends a unique string of characters to the end of the AS2 message payload filename when saving it.</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code>: the filename provided by your trading parter is preserved when the file is saved.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> (default value): when Transfer Family saves the file, the filename is adjusted, as described in <a href="https://docs.aws.amazon.com/transfer/latest/userguide/send-as2-messages.html#file-names-as2">File names and locations</a>.</p></li>
    /// </ul>
    pub fn get_preserve_filename(&self) -> &::std::option::Option<crate::types::PreserveFilenameType> {
        &self.preserve_filename
    }
    /// <p>Determines whether or not unsigned messages from your trading partners will be accepted.</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code>: Transfer Family rejects unsigned messages from your trading partner.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> (default value): Transfer Family accepts unsigned messages from your trading partner.</p></li>
    /// </ul>
    pub fn enforce_message_signing(mut self, input: crate::types::EnforceMessageSigningType) -> Self {
        self.enforce_message_signing = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether or not unsigned messages from your trading partners will be accepted.</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code>: Transfer Family rejects unsigned messages from your trading partner.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> (default value): Transfer Family accepts unsigned messages from your trading partner.</p></li>
    /// </ul>
    pub fn set_enforce_message_signing(mut self, input: ::std::option::Option<crate::types::EnforceMessageSigningType>) -> Self {
        self.enforce_message_signing = input;
        self
    }
    /// <p>Determines whether or not unsigned messages from your trading partners will be accepted.</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code>: Transfer Family rejects unsigned messages from your trading partner.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> (default value): Transfer Family accepts unsigned messages from your trading partner.</p></li>
    /// </ul>
    pub fn get_enforce_message_signing(&self) -> &::std::option::Option<crate::types::EnforceMessageSigningType> {
        &self.enforce_message_signing
    }
    /// <p>A <code>CustomDirectoriesType</code> structure. This structure specifies custom directories for storing various AS2 message files. You can specify directories for the following types of files.</p>
    /// <ul>
    /// <li>
    /// <p>Failed files</p></li>
    /// <li>
    /// <p>MDN files</p></li>
    /// <li>
    /// <p>Payload files</p></li>
    /// <li>
    /// <p>Status files</p></li>
    /// <li>
    /// <p>Temporary files</p></li>
    /// </ul>
    pub fn custom_directories(mut self, input: crate::types::CustomDirectoriesType) -> Self {
        self.custom_directories = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>CustomDirectoriesType</code> structure. This structure specifies custom directories for storing various AS2 message files. You can specify directories for the following types of files.</p>
    /// <ul>
    /// <li>
    /// <p>Failed files</p></li>
    /// <li>
    /// <p>MDN files</p></li>
    /// <li>
    /// <p>Payload files</p></li>
    /// <li>
    /// <p>Status files</p></li>
    /// <li>
    /// <p>Temporary files</p></li>
    /// </ul>
    pub fn set_custom_directories(mut self, input: ::std::option::Option<crate::types::CustomDirectoriesType>) -> Self {
        self.custom_directories = input;
        self
    }
    /// <p>A <code>CustomDirectoriesType</code> structure. This structure specifies custom directories for storing various AS2 message files. You can specify directories for the following types of files.</p>
    /// <ul>
    /// <li>
    /// <p>Failed files</p></li>
    /// <li>
    /// <p>MDN files</p></li>
    /// <li>
    /// <p>Payload files</p></li>
    /// <li>
    /// <p>Status files</p></li>
    /// <li>
    /// <p>Temporary files</p></li>
    /// </ul>
    pub fn get_custom_directories(&self) -> &::std::option::Option<crate::types::CustomDirectoriesType> {
        &self.custom_directories
    }
    /// Consumes the builder and constructs a [`UpdateAgreementInput`](crate::operation::update_agreement::UpdateAgreementInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_agreement::UpdateAgreementInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_agreement::UpdateAgreementInput {
            agreement_id: self.agreement_id,
            server_id: self.server_id,
            description: self.description,
            status: self.status,
            local_profile_id: self.local_profile_id,
            partner_profile_id: self.partner_profile_id,
            base_directory: self.base_directory,
            access_role: self.access_role,
            preserve_filename: self.preserve_filename,
            enforce_message_signing: self.enforce_message_signing,
            custom_directories: self.custom_directories,
        })
    }
}
