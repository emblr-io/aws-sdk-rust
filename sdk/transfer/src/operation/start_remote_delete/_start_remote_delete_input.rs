// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartRemoteDeleteInput {
    /// <p>The unique identifier for the connector.</p>
    pub connector_id: ::std::option::Option<::std::string::String>,
    /// <p>The absolute path of the file or directory to delete. You can only specify one path per call to this operation.</p>
    pub delete_path: ::std::option::Option<::std::string::String>,
}
impl StartRemoteDeleteInput {
    /// <p>The unique identifier for the connector.</p>
    pub fn connector_id(&self) -> ::std::option::Option<&str> {
        self.connector_id.as_deref()
    }
    /// <p>The absolute path of the file or directory to delete. You can only specify one path per call to this operation.</p>
    pub fn delete_path(&self) -> ::std::option::Option<&str> {
        self.delete_path.as_deref()
    }
}
impl StartRemoteDeleteInput {
    /// Creates a new builder-style object to manufacture [`StartRemoteDeleteInput`](crate::operation::start_remote_delete::StartRemoteDeleteInput).
    pub fn builder() -> crate::operation::start_remote_delete::builders::StartRemoteDeleteInputBuilder {
        crate::operation::start_remote_delete::builders::StartRemoteDeleteInputBuilder::default()
    }
}

/// A builder for [`StartRemoteDeleteInput`](crate::operation::start_remote_delete::StartRemoteDeleteInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartRemoteDeleteInputBuilder {
    pub(crate) connector_id: ::std::option::Option<::std::string::String>,
    pub(crate) delete_path: ::std::option::Option<::std::string::String>,
}
impl StartRemoteDeleteInputBuilder {
    /// <p>The unique identifier for the connector.</p>
    /// This field is required.
    pub fn connector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the connector.</p>
    pub fn set_connector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_id = input;
        self
    }
    /// <p>The unique identifier for the connector.</p>
    pub fn get_connector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_id
    }
    /// <p>The absolute path of the file or directory to delete. You can only specify one path per call to this operation.</p>
    /// This field is required.
    pub fn delete_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.delete_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The absolute path of the file or directory to delete. You can only specify one path per call to this operation.</p>
    pub fn set_delete_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.delete_path = input;
        self
    }
    /// <p>The absolute path of the file or directory to delete. You can only specify one path per call to this operation.</p>
    pub fn get_delete_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.delete_path
    }
    /// Consumes the builder and constructs a [`StartRemoteDeleteInput`](crate::operation::start_remote_delete::StartRemoteDeleteInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_remote_delete::StartRemoteDeleteInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_remote_delete::StartRemoteDeleteInput {
            connector_id: self.connector_id,
            delete_path: self.delete_path,
        })
    }
}
