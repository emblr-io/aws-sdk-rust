// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateWebAppInput {
    /// <p>Provide the identifier of the web app that you are updating.</p>
    pub web_app_id: ::std::option::Option<::std::string::String>,
    /// <p>Provide updated identity provider values in a <code>WebAppIdentityProviderDetails</code> object.</p>
    pub identity_provider_details: ::std::option::Option<crate::types::UpdateWebAppIdentityProviderDetails>,
    /// <p>The <code>AccessEndpoint</code> is the URL that you provide to your users for them to interact with the Transfer Family web app. You can specify a custom URL or use the default value.</p>
    pub access_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>A union that contains the value for number of concurrent connections or the user sessions on your web app.</p>
    pub web_app_units: ::std::option::Option<crate::types::WebAppUnits>,
}
impl UpdateWebAppInput {
    /// <p>Provide the identifier of the web app that you are updating.</p>
    pub fn web_app_id(&self) -> ::std::option::Option<&str> {
        self.web_app_id.as_deref()
    }
    /// <p>Provide updated identity provider values in a <code>WebAppIdentityProviderDetails</code> object.</p>
    pub fn identity_provider_details(&self) -> ::std::option::Option<&crate::types::UpdateWebAppIdentityProviderDetails> {
        self.identity_provider_details.as_ref()
    }
    /// <p>The <code>AccessEndpoint</code> is the URL that you provide to your users for them to interact with the Transfer Family web app. You can specify a custom URL or use the default value.</p>
    pub fn access_endpoint(&self) -> ::std::option::Option<&str> {
        self.access_endpoint.as_deref()
    }
    /// <p>A union that contains the value for number of concurrent connections or the user sessions on your web app.</p>
    pub fn web_app_units(&self) -> ::std::option::Option<&crate::types::WebAppUnits> {
        self.web_app_units.as_ref()
    }
}
impl UpdateWebAppInput {
    /// Creates a new builder-style object to manufacture [`UpdateWebAppInput`](crate::operation::update_web_app::UpdateWebAppInput).
    pub fn builder() -> crate::operation::update_web_app::builders::UpdateWebAppInputBuilder {
        crate::operation::update_web_app::builders::UpdateWebAppInputBuilder::default()
    }
}

/// A builder for [`UpdateWebAppInput`](crate::operation::update_web_app::UpdateWebAppInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateWebAppInputBuilder {
    pub(crate) web_app_id: ::std::option::Option<::std::string::String>,
    pub(crate) identity_provider_details: ::std::option::Option<crate::types::UpdateWebAppIdentityProviderDetails>,
    pub(crate) access_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) web_app_units: ::std::option::Option<crate::types::WebAppUnits>,
}
impl UpdateWebAppInputBuilder {
    /// <p>Provide the identifier of the web app that you are updating.</p>
    /// This field is required.
    pub fn web_app_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.web_app_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provide the identifier of the web app that you are updating.</p>
    pub fn set_web_app_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.web_app_id = input;
        self
    }
    /// <p>Provide the identifier of the web app that you are updating.</p>
    pub fn get_web_app_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.web_app_id
    }
    /// <p>Provide updated identity provider values in a <code>WebAppIdentityProviderDetails</code> object.</p>
    pub fn identity_provider_details(mut self, input: crate::types::UpdateWebAppIdentityProviderDetails) -> Self {
        self.identity_provider_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provide updated identity provider values in a <code>WebAppIdentityProviderDetails</code> object.</p>
    pub fn set_identity_provider_details(mut self, input: ::std::option::Option<crate::types::UpdateWebAppIdentityProviderDetails>) -> Self {
        self.identity_provider_details = input;
        self
    }
    /// <p>Provide updated identity provider values in a <code>WebAppIdentityProviderDetails</code> object.</p>
    pub fn get_identity_provider_details(&self) -> &::std::option::Option<crate::types::UpdateWebAppIdentityProviderDetails> {
        &self.identity_provider_details
    }
    /// <p>The <code>AccessEndpoint</code> is the URL that you provide to your users for them to interact with the Transfer Family web app. You can specify a custom URL or use the default value.</p>
    pub fn access_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>AccessEndpoint</code> is the URL that you provide to your users for them to interact with the Transfer Family web app. You can specify a custom URL or use the default value.</p>
    pub fn set_access_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_endpoint = input;
        self
    }
    /// <p>The <code>AccessEndpoint</code> is the URL that you provide to your users for them to interact with the Transfer Family web app. You can specify a custom URL or use the default value.</p>
    pub fn get_access_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_endpoint
    }
    /// <p>A union that contains the value for number of concurrent connections or the user sessions on your web app.</p>
    pub fn web_app_units(mut self, input: crate::types::WebAppUnits) -> Self {
        self.web_app_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>A union that contains the value for number of concurrent connections or the user sessions on your web app.</p>
    pub fn set_web_app_units(mut self, input: ::std::option::Option<crate::types::WebAppUnits>) -> Self {
        self.web_app_units = input;
        self
    }
    /// <p>A union that contains the value for number of concurrent connections or the user sessions on your web app.</p>
    pub fn get_web_app_units(&self) -> &::std::option::Option<crate::types::WebAppUnits> {
        &self.web_app_units
    }
    /// Consumes the builder and constructs a [`UpdateWebAppInput`](crate::operation::update_web_app::UpdateWebAppInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_web_app::UpdateWebAppInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_web_app::UpdateWebAppInput {
            web_app_id: self.web_app_id,
            identity_provider_details: self.identity_provider_details,
            access_endpoint: self.access_endpoint,
            web_app_units: self.web_app_units,
        })
    }
}
