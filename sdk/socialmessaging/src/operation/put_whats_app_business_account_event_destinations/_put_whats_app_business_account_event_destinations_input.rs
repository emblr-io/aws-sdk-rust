// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutWhatsAppBusinessAccountEventDestinationsInput {
    /// <p>The unique identifier of your WhatsApp Business Account. WABA identifiers are formatted as <code>waba-01234567890123456789012345678901</code>. Use <a href="https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_ListLinkedWhatsAppBusinessAccounts.html">ListLinkedWhatsAppBusinessAccounts</a> to list all WABAs and their details.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>An array of <code>WhatsAppBusinessAccountEventDestination</code> event destinations.</p>
    pub event_destinations: ::std::option::Option<::std::vec::Vec<crate::types::WhatsAppBusinessAccountEventDestination>>,
}
impl PutWhatsAppBusinessAccountEventDestinationsInput {
    /// <p>The unique identifier of your WhatsApp Business Account. WABA identifiers are formatted as <code>waba-01234567890123456789012345678901</code>. Use <a href="https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_ListLinkedWhatsAppBusinessAccounts.html">ListLinkedWhatsAppBusinessAccounts</a> to list all WABAs and their details.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>An array of <code>WhatsAppBusinessAccountEventDestination</code> event destinations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.event_destinations.is_none()`.
    pub fn event_destinations(&self) -> &[crate::types::WhatsAppBusinessAccountEventDestination] {
        self.event_destinations.as_deref().unwrap_or_default()
    }
}
impl PutWhatsAppBusinessAccountEventDestinationsInput {
    /// Creates a new builder-style object to manufacture [`PutWhatsAppBusinessAccountEventDestinationsInput`](crate::operation::put_whats_app_business_account_event_destinations::PutWhatsAppBusinessAccountEventDestinationsInput).
    pub fn builder(
    ) -> crate::operation::put_whats_app_business_account_event_destinations::builders::PutWhatsAppBusinessAccountEventDestinationsInputBuilder {
        crate::operation::put_whats_app_business_account_event_destinations::builders::PutWhatsAppBusinessAccountEventDestinationsInputBuilder::default()
    }
}

/// A builder for [`PutWhatsAppBusinessAccountEventDestinationsInput`](crate::operation::put_whats_app_business_account_event_destinations::PutWhatsAppBusinessAccountEventDestinationsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PutWhatsAppBusinessAccountEventDestinationsInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) event_destinations: ::std::option::Option<::std::vec::Vec<crate::types::WhatsAppBusinessAccountEventDestination>>,
}
impl PutWhatsAppBusinessAccountEventDestinationsInputBuilder {
    /// <p>The unique identifier of your WhatsApp Business Account. WABA identifiers are formatted as <code>waba-01234567890123456789012345678901</code>. Use <a href="https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_ListLinkedWhatsAppBusinessAccounts.html">ListLinkedWhatsAppBusinessAccounts</a> to list all WABAs and their details.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of your WhatsApp Business Account. WABA identifiers are formatted as <code>waba-01234567890123456789012345678901</code>. Use <a href="https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_ListLinkedWhatsAppBusinessAccounts.html">ListLinkedWhatsAppBusinessAccounts</a> to list all WABAs and their details.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of your WhatsApp Business Account. WABA identifiers are formatted as <code>waba-01234567890123456789012345678901</code>. Use <a href="https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_ListLinkedWhatsAppBusinessAccounts.html">ListLinkedWhatsAppBusinessAccounts</a> to list all WABAs and their details.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Appends an item to `event_destinations`.
    ///
    /// To override the contents of this collection use [`set_event_destinations`](Self::set_event_destinations).
    ///
    /// <p>An array of <code>WhatsAppBusinessAccountEventDestination</code> event destinations.</p>
    pub fn event_destinations(mut self, input: crate::types::WhatsAppBusinessAccountEventDestination) -> Self {
        let mut v = self.event_destinations.unwrap_or_default();
        v.push(input);
        self.event_destinations = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>WhatsAppBusinessAccountEventDestination</code> event destinations.</p>
    pub fn set_event_destinations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::WhatsAppBusinessAccountEventDestination>>,
    ) -> Self {
        self.event_destinations = input;
        self
    }
    /// <p>An array of <code>WhatsAppBusinessAccountEventDestination</code> event destinations.</p>
    pub fn get_event_destinations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WhatsAppBusinessAccountEventDestination>> {
        &self.event_destinations
    }
    /// Consumes the builder and constructs a [`PutWhatsAppBusinessAccountEventDestinationsInput`](crate::operation::put_whats_app_business_account_event_destinations::PutWhatsAppBusinessAccountEventDestinationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_whats_app_business_account_event_destinations::PutWhatsAppBusinessAccountEventDestinationsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::put_whats_app_business_account_event_destinations::PutWhatsAppBusinessAccountEventDestinationsInput {
                id: self.id,
                event_destinations: self.event_destinations,
            },
        )
    }
}
