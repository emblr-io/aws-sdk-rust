// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetWhatsAppMessageMediaOutput {
    /// <p>The MIME type of the media.</p>
    pub mime_type: ::std::option::Option<::std::string::String>,
    /// <p>The file size of the media, in KB.</p>
    pub file_size: ::std::option::Option<i64>,
    _request_id: Option<String>,
}
impl GetWhatsAppMessageMediaOutput {
    /// <p>The MIME type of the media.</p>
    pub fn mime_type(&self) -> ::std::option::Option<&str> {
        self.mime_type.as_deref()
    }
    /// <p>The file size of the media, in KB.</p>
    pub fn file_size(&self) -> ::std::option::Option<i64> {
        self.file_size
    }
}
impl ::aws_types::request_id::RequestId for GetWhatsAppMessageMediaOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetWhatsAppMessageMediaOutput {
    /// Creates a new builder-style object to manufacture [`GetWhatsAppMessageMediaOutput`](crate::operation::get_whats_app_message_media::GetWhatsAppMessageMediaOutput).
    pub fn builder() -> crate::operation::get_whats_app_message_media::builders::GetWhatsAppMessageMediaOutputBuilder {
        crate::operation::get_whats_app_message_media::builders::GetWhatsAppMessageMediaOutputBuilder::default()
    }
}

/// A builder for [`GetWhatsAppMessageMediaOutput`](crate::operation::get_whats_app_message_media::GetWhatsAppMessageMediaOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetWhatsAppMessageMediaOutputBuilder {
    pub(crate) mime_type: ::std::option::Option<::std::string::String>,
    pub(crate) file_size: ::std::option::Option<i64>,
    _request_id: Option<String>,
}
impl GetWhatsAppMessageMediaOutputBuilder {
    /// <p>The MIME type of the media.</p>
    pub fn mime_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mime_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The MIME type of the media.</p>
    pub fn set_mime_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mime_type = input;
        self
    }
    /// <p>The MIME type of the media.</p>
    pub fn get_mime_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.mime_type
    }
    /// <p>The file size of the media, in KB.</p>
    pub fn file_size(mut self, input: i64) -> Self {
        self.file_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The file size of the media, in KB.</p>
    pub fn set_file_size(mut self, input: ::std::option::Option<i64>) -> Self {
        self.file_size = input;
        self
    }
    /// <p>The file size of the media, in KB.</p>
    pub fn get_file_size(&self) -> &::std::option::Option<i64> {
        &self.file_size
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetWhatsAppMessageMediaOutput`](crate::operation::get_whats_app_message_media::GetWhatsAppMessageMediaOutput).
    pub fn build(self) -> crate::operation::get_whats_app_message_media::GetWhatsAppMessageMediaOutput {
        crate::operation::get_whats_app_message_media::GetWhatsAppMessageMediaOutput {
            mime_type: self.mime_type,
            file_size: self.file_size,
            _request_id: self._request_id,
        }
    }
}
