// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetWhatsAppMessageMediaInput {
    /// <p>The unique identifier for the media file.</p>
    pub media_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the originating phone number for the WhatsApp message media. The phone number identifiers are formatted as <code>phone-number-id-01234567890123456789012345678901</code>. Use <a href="https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_GetLinkedWhatsAppBusinessAccountPhoneNumber.html">GetLinkedWhatsAppBusinessAccount</a> to find a phone number's id.</p>
    pub origination_phone_number_id: ::std::option::Option<::std::string::String>,
    /// <p>Set to <code>True</code> to get only the metadata for the file.</p>
    pub metadata_only: ::std::option::Option<bool>,
    /// <p>The presign url of the media file.</p>
    pub destination_s3_presigned_url: ::std::option::Option<crate::types::S3PresignedUrl>,
    /// <p>The <code>bucketName</code> and <code>key</code> of the S3 media file.</p>
    pub destination_s3_file: ::std::option::Option<crate::types::S3File>,
}
impl GetWhatsAppMessageMediaInput {
    /// <p>The unique identifier for the media file.</p>
    pub fn media_id(&self) -> ::std::option::Option<&str> {
        self.media_id.as_deref()
    }
    /// <p>The unique identifier of the originating phone number for the WhatsApp message media. The phone number identifiers are formatted as <code>phone-number-id-01234567890123456789012345678901</code>. Use <a href="https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_GetLinkedWhatsAppBusinessAccountPhoneNumber.html">GetLinkedWhatsAppBusinessAccount</a> to find a phone number's id.</p>
    pub fn origination_phone_number_id(&self) -> ::std::option::Option<&str> {
        self.origination_phone_number_id.as_deref()
    }
    /// <p>Set to <code>True</code> to get only the metadata for the file.</p>
    pub fn metadata_only(&self) -> ::std::option::Option<bool> {
        self.metadata_only
    }
    /// <p>The presign url of the media file.</p>
    pub fn destination_s3_presigned_url(&self) -> ::std::option::Option<&crate::types::S3PresignedUrl> {
        self.destination_s3_presigned_url.as_ref()
    }
    /// <p>The <code>bucketName</code> and <code>key</code> of the S3 media file.</p>
    pub fn destination_s3_file(&self) -> ::std::option::Option<&crate::types::S3File> {
        self.destination_s3_file.as_ref()
    }
}
impl ::std::fmt::Debug for GetWhatsAppMessageMediaInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetWhatsAppMessageMediaInput");
        formatter.field("media_id", &self.media_id);
        formatter.field("origination_phone_number_id", &self.origination_phone_number_id);
        formatter.field("metadata_only", &self.metadata_only);
        formatter.field("destination_s3_presigned_url", &"*** Sensitive Data Redacted ***");
        formatter.field("destination_s3_file", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GetWhatsAppMessageMediaInput {
    /// Creates a new builder-style object to manufacture [`GetWhatsAppMessageMediaInput`](crate::operation::get_whats_app_message_media::GetWhatsAppMessageMediaInput).
    pub fn builder() -> crate::operation::get_whats_app_message_media::builders::GetWhatsAppMessageMediaInputBuilder {
        crate::operation::get_whats_app_message_media::builders::GetWhatsAppMessageMediaInputBuilder::default()
    }
}

/// A builder for [`GetWhatsAppMessageMediaInput`](crate::operation::get_whats_app_message_media::GetWhatsAppMessageMediaInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetWhatsAppMessageMediaInputBuilder {
    pub(crate) media_id: ::std::option::Option<::std::string::String>,
    pub(crate) origination_phone_number_id: ::std::option::Option<::std::string::String>,
    pub(crate) metadata_only: ::std::option::Option<bool>,
    pub(crate) destination_s3_presigned_url: ::std::option::Option<crate::types::S3PresignedUrl>,
    pub(crate) destination_s3_file: ::std::option::Option<crate::types::S3File>,
}
impl GetWhatsAppMessageMediaInputBuilder {
    /// <p>The unique identifier for the media file.</p>
    /// This field is required.
    pub fn media_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.media_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the media file.</p>
    pub fn set_media_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.media_id = input;
        self
    }
    /// <p>The unique identifier for the media file.</p>
    pub fn get_media_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.media_id
    }
    /// <p>The unique identifier of the originating phone number for the WhatsApp message media. The phone number identifiers are formatted as <code>phone-number-id-01234567890123456789012345678901</code>. Use <a href="https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_GetLinkedWhatsAppBusinessAccountPhoneNumber.html">GetLinkedWhatsAppBusinessAccount</a> to find a phone number's id.</p>
    /// This field is required.
    pub fn origination_phone_number_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.origination_phone_number_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the originating phone number for the WhatsApp message media. The phone number identifiers are formatted as <code>phone-number-id-01234567890123456789012345678901</code>. Use <a href="https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_GetLinkedWhatsAppBusinessAccountPhoneNumber.html">GetLinkedWhatsAppBusinessAccount</a> to find a phone number's id.</p>
    pub fn set_origination_phone_number_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.origination_phone_number_id = input;
        self
    }
    /// <p>The unique identifier of the originating phone number for the WhatsApp message media. The phone number identifiers are formatted as <code>phone-number-id-01234567890123456789012345678901</code>. Use <a href="https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_GetLinkedWhatsAppBusinessAccountPhoneNumber.html">GetLinkedWhatsAppBusinessAccount</a> to find a phone number's id.</p>
    pub fn get_origination_phone_number_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.origination_phone_number_id
    }
    /// <p>Set to <code>True</code> to get only the metadata for the file.</p>
    pub fn metadata_only(mut self, input: bool) -> Self {
        self.metadata_only = ::std::option::Option::Some(input);
        self
    }
    /// <p>Set to <code>True</code> to get only the metadata for the file.</p>
    pub fn set_metadata_only(mut self, input: ::std::option::Option<bool>) -> Self {
        self.metadata_only = input;
        self
    }
    /// <p>Set to <code>True</code> to get only the metadata for the file.</p>
    pub fn get_metadata_only(&self) -> &::std::option::Option<bool> {
        &self.metadata_only
    }
    /// <p>The presign url of the media file.</p>
    pub fn destination_s3_presigned_url(mut self, input: crate::types::S3PresignedUrl) -> Self {
        self.destination_s3_presigned_url = ::std::option::Option::Some(input);
        self
    }
    /// <p>The presign url of the media file.</p>
    pub fn set_destination_s3_presigned_url(mut self, input: ::std::option::Option<crate::types::S3PresignedUrl>) -> Self {
        self.destination_s3_presigned_url = input;
        self
    }
    /// <p>The presign url of the media file.</p>
    pub fn get_destination_s3_presigned_url(&self) -> &::std::option::Option<crate::types::S3PresignedUrl> {
        &self.destination_s3_presigned_url
    }
    /// <p>The <code>bucketName</code> and <code>key</code> of the S3 media file.</p>
    pub fn destination_s3_file(mut self, input: crate::types::S3File) -> Self {
        self.destination_s3_file = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>bucketName</code> and <code>key</code> of the S3 media file.</p>
    pub fn set_destination_s3_file(mut self, input: ::std::option::Option<crate::types::S3File>) -> Self {
        self.destination_s3_file = input;
        self
    }
    /// <p>The <code>bucketName</code> and <code>key</code> of the S3 media file.</p>
    pub fn get_destination_s3_file(&self) -> &::std::option::Option<crate::types::S3File> {
        &self.destination_s3_file
    }
    /// Consumes the builder and constructs a [`GetWhatsAppMessageMediaInput`](crate::operation::get_whats_app_message_media::GetWhatsAppMessageMediaInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_whats_app_message_media::GetWhatsAppMessageMediaInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_whats_app_message_media::GetWhatsAppMessageMediaInput {
            media_id: self.media_id,
            origination_phone_number_id: self.origination_phone_number_id,
            metadata_only: self.metadata_only,
            destination_s3_presigned_url: self.destination_s3_presigned_url,
            destination_s3_file: self.destination_s3_file,
        })
    }
}
impl ::std::fmt::Debug for GetWhatsAppMessageMediaInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetWhatsAppMessageMediaInputBuilder");
        formatter.field("media_id", &self.media_id);
        formatter.field("origination_phone_number_id", &self.origination_phone_number_id);
        formatter.field("metadata_only", &self.metadata_only);
        formatter.field("destination_s3_presigned_url", &"*** Sensitive Data Redacted ***");
        formatter.field("destination_s3_file", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
