// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a linked WhatsApp Business Account.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LinkedWhatsAppBusinessAccountSummary {
    /// <p>The ARN of the linked WhatsApp Business Account.</p>
    pub arn: ::std::string::String,
    /// <p>The ID of the linked WhatsApp Business Account, formatted as <code>waba-01234567890123456789012345678901</code>.</p>
    pub id: ::std::string::String,
    /// <p>The WhatsApp Business Account ID provided by Meta.</p>
    pub waba_id: ::std::string::String,
    /// <p>The registration status of the linked WhatsApp Business Account.</p>
    pub registration_status: crate::types::RegistrationStatus,
    /// <p>The date the WhatsApp Business Account was linked.</p>
    pub link_date: ::aws_smithy_types::DateTime,
    /// <p>The name of the linked WhatsApp Business Account.</p>
    pub waba_name: ::std::string::String,
    /// <p>The event destinations for the linked WhatsApp Business Account.</p>
    pub event_destinations: ::std::vec::Vec<crate::types::WhatsAppBusinessAccountEventDestination>,
}
impl LinkedWhatsAppBusinessAccountSummary {
    /// <p>The ARN of the linked WhatsApp Business Account.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The ID of the linked WhatsApp Business Account, formatted as <code>waba-01234567890123456789012345678901</code>.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The WhatsApp Business Account ID provided by Meta.</p>
    pub fn waba_id(&self) -> &str {
        use std::ops::Deref;
        self.waba_id.deref()
    }
    /// <p>The registration status of the linked WhatsApp Business Account.</p>
    pub fn registration_status(&self) -> &crate::types::RegistrationStatus {
        &self.registration_status
    }
    /// <p>The date the WhatsApp Business Account was linked.</p>
    pub fn link_date(&self) -> &::aws_smithy_types::DateTime {
        &self.link_date
    }
    /// <p>The name of the linked WhatsApp Business Account.</p>
    pub fn waba_name(&self) -> &str {
        use std::ops::Deref;
        self.waba_name.deref()
    }
    /// <p>The event destinations for the linked WhatsApp Business Account.</p>
    pub fn event_destinations(&self) -> &[crate::types::WhatsAppBusinessAccountEventDestination] {
        use std::ops::Deref;
        self.event_destinations.deref()
    }
}
impl LinkedWhatsAppBusinessAccountSummary {
    /// Creates a new builder-style object to manufacture [`LinkedWhatsAppBusinessAccountSummary`](crate::types::LinkedWhatsAppBusinessAccountSummary).
    pub fn builder() -> crate::types::builders::LinkedWhatsAppBusinessAccountSummaryBuilder {
        crate::types::builders::LinkedWhatsAppBusinessAccountSummaryBuilder::default()
    }
}

/// A builder for [`LinkedWhatsAppBusinessAccountSummary`](crate::types::LinkedWhatsAppBusinessAccountSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LinkedWhatsAppBusinessAccountSummaryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) waba_id: ::std::option::Option<::std::string::String>,
    pub(crate) registration_status: ::std::option::Option<crate::types::RegistrationStatus>,
    pub(crate) link_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) waba_name: ::std::option::Option<::std::string::String>,
    pub(crate) event_destinations: ::std::option::Option<::std::vec::Vec<crate::types::WhatsAppBusinessAccountEventDestination>>,
}
impl LinkedWhatsAppBusinessAccountSummaryBuilder {
    /// <p>The ARN of the linked WhatsApp Business Account.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the linked WhatsApp Business Account.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the linked WhatsApp Business Account.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The ID of the linked WhatsApp Business Account, formatted as <code>waba-01234567890123456789012345678901</code>.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the linked WhatsApp Business Account, formatted as <code>waba-01234567890123456789012345678901</code>.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the linked WhatsApp Business Account, formatted as <code>waba-01234567890123456789012345678901</code>.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The WhatsApp Business Account ID provided by Meta.</p>
    /// This field is required.
    pub fn waba_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.waba_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The WhatsApp Business Account ID provided by Meta.</p>
    pub fn set_waba_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.waba_id = input;
        self
    }
    /// <p>The WhatsApp Business Account ID provided by Meta.</p>
    pub fn get_waba_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.waba_id
    }
    /// <p>The registration status of the linked WhatsApp Business Account.</p>
    /// This field is required.
    pub fn registration_status(mut self, input: crate::types::RegistrationStatus) -> Self {
        self.registration_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The registration status of the linked WhatsApp Business Account.</p>
    pub fn set_registration_status(mut self, input: ::std::option::Option<crate::types::RegistrationStatus>) -> Self {
        self.registration_status = input;
        self
    }
    /// <p>The registration status of the linked WhatsApp Business Account.</p>
    pub fn get_registration_status(&self) -> &::std::option::Option<crate::types::RegistrationStatus> {
        &self.registration_status
    }
    /// <p>The date the WhatsApp Business Account was linked.</p>
    /// This field is required.
    pub fn link_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.link_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date the WhatsApp Business Account was linked.</p>
    pub fn set_link_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.link_date = input;
        self
    }
    /// <p>The date the WhatsApp Business Account was linked.</p>
    pub fn get_link_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.link_date
    }
    /// <p>The name of the linked WhatsApp Business Account.</p>
    /// This field is required.
    pub fn waba_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.waba_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the linked WhatsApp Business Account.</p>
    pub fn set_waba_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.waba_name = input;
        self
    }
    /// <p>The name of the linked WhatsApp Business Account.</p>
    pub fn get_waba_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.waba_name
    }
    /// Appends an item to `event_destinations`.
    ///
    /// To override the contents of this collection use [`set_event_destinations`](Self::set_event_destinations).
    ///
    /// <p>The event destinations for the linked WhatsApp Business Account.</p>
    pub fn event_destinations(mut self, input: crate::types::WhatsAppBusinessAccountEventDestination) -> Self {
        let mut v = self.event_destinations.unwrap_or_default();
        v.push(input);
        self.event_destinations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The event destinations for the linked WhatsApp Business Account.</p>
    pub fn set_event_destinations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::WhatsAppBusinessAccountEventDestination>>,
    ) -> Self {
        self.event_destinations = input;
        self
    }
    /// <p>The event destinations for the linked WhatsApp Business Account.</p>
    pub fn get_event_destinations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WhatsAppBusinessAccountEventDestination>> {
        &self.event_destinations
    }
    /// Consumes the builder and constructs a [`LinkedWhatsAppBusinessAccountSummary`](crate::types::LinkedWhatsAppBusinessAccountSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::LinkedWhatsAppBusinessAccountSummaryBuilder::arn)
    /// - [`id`](crate::types::builders::LinkedWhatsAppBusinessAccountSummaryBuilder::id)
    /// - [`waba_id`](crate::types::builders::LinkedWhatsAppBusinessAccountSummaryBuilder::waba_id)
    /// - [`registration_status`](crate::types::builders::LinkedWhatsAppBusinessAccountSummaryBuilder::registration_status)
    /// - [`link_date`](crate::types::builders::LinkedWhatsAppBusinessAccountSummaryBuilder::link_date)
    /// - [`waba_name`](crate::types::builders::LinkedWhatsAppBusinessAccountSummaryBuilder::waba_name)
    /// - [`event_destinations`](crate::types::builders::LinkedWhatsAppBusinessAccountSummaryBuilder::event_destinations)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::LinkedWhatsAppBusinessAccountSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LinkedWhatsAppBusinessAccountSummary {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building LinkedWhatsAppBusinessAccountSummary",
                )
            })?,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building LinkedWhatsAppBusinessAccountSummary",
                )
            })?,
            waba_id: self.waba_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "waba_id",
                    "waba_id was not specified but it is required when building LinkedWhatsAppBusinessAccountSummary",
                )
            })?,
            registration_status: self.registration_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "registration_status",
                    "registration_status was not specified but it is required when building LinkedWhatsAppBusinessAccountSummary",
                )
            })?,
            link_date: self.link_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "link_date",
                    "link_date was not specified but it is required when building LinkedWhatsAppBusinessAccountSummary",
                )
            })?,
            waba_name: self.waba_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "waba_name",
                    "waba_name was not specified but it is required when building LinkedWhatsAppBusinessAccountSummary",
                )
            })?,
            event_destinations: self.event_destinations.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_destinations",
                    "event_destinations was not specified but it is required when building LinkedWhatsAppBusinessAccountSummary",
                )
            })?,
        })
    }
}
