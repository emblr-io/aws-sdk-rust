// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>You can use presigned URLs to grant time-limited access to objects in Amazon S3 without updating your bucket policy. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-presigned-url.html">Working with presigned URLs</a> in the <i>Amazon S3 User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct S3PresignedUrl {
    /// <p>The presign url to the object.</p>
    pub url: ::std::string::String,
    /// <p>A map of headers and their values. You must specify the <code>Content-Type</code> header when using <code>PostWhatsAppMessageMedia</code>. For a list of common headers, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTCommonRequestHeaders.html">Common Request Headers</a> in the <i>Amazon S3 API Reference</i></p>
    pub headers: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl S3PresignedUrl {
    /// <p>The presign url to the object.</p>
    pub fn url(&self) -> &str {
        use std::ops::Deref;
        self.url.deref()
    }
    /// <p>A map of headers and their values. You must specify the <code>Content-Type</code> header when using <code>PostWhatsAppMessageMedia</code>. For a list of common headers, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTCommonRequestHeaders.html">Common Request Headers</a> in the <i>Amazon S3 API Reference</i></p>
    pub fn headers(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.headers
    }
}
impl ::std::fmt::Debug for S3PresignedUrl {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("S3PresignedUrl");
        formatter.field("url", &"*** Sensitive Data Redacted ***");
        formatter.field("headers", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl S3PresignedUrl {
    /// Creates a new builder-style object to manufacture [`S3PresignedUrl`](crate::types::S3PresignedUrl).
    pub fn builder() -> crate::types::builders::S3PresignedUrlBuilder {
        crate::types::builders::S3PresignedUrlBuilder::default()
    }
}

/// A builder for [`S3PresignedUrl`](crate::types::S3PresignedUrl).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct S3PresignedUrlBuilder {
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) headers: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl S3PresignedUrlBuilder {
    /// <p>The presign url to the object.</p>
    /// This field is required.
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The presign url to the object.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The presign url to the object.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// Adds a key-value pair to `headers`.
    ///
    /// To override the contents of this collection use [`set_headers`](Self::set_headers).
    ///
    /// <p>A map of headers and their values. You must specify the <code>Content-Type</code> header when using <code>PostWhatsAppMessageMedia</code>. For a list of common headers, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTCommonRequestHeaders.html">Common Request Headers</a> in the <i>Amazon S3 API Reference</i></p>
    pub fn headers(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.headers.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.headers = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of headers and their values. You must specify the <code>Content-Type</code> header when using <code>PostWhatsAppMessageMedia</code>. For a list of common headers, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTCommonRequestHeaders.html">Common Request Headers</a> in the <i>Amazon S3 API Reference</i></p>
    pub fn set_headers(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.headers = input;
        self
    }
    /// <p>A map of headers and their values. You must specify the <code>Content-Type</code> header when using <code>PostWhatsAppMessageMedia</code>. For a list of common headers, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTCommonRequestHeaders.html">Common Request Headers</a> in the <i>Amazon S3 API Reference</i></p>
    pub fn get_headers(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.headers
    }
    /// Consumes the builder and constructs a [`S3PresignedUrl`](crate::types::S3PresignedUrl).
    /// This method will fail if any of the following fields are not set:
    /// - [`url`](crate::types::builders::S3PresignedUrlBuilder::url)
    /// - [`headers`](crate::types::builders::S3PresignedUrlBuilder::headers)
    pub fn build(self) -> ::std::result::Result<crate::types::S3PresignedUrl, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::S3PresignedUrl {
            url: self.url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "url",
                    "url was not specified but it is required when building S3PresignedUrl",
                )
            })?,
            headers: self.headers.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "headers",
                    "headers was not specified but it is required when building S3PresignedUrl",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for S3PresignedUrlBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("S3PresignedUrlBuilder");
        formatter.field("url", &"*** Sensitive Data Redacted ***");
        formatter.field("headers", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
