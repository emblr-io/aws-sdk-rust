// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the results of WhatsAppSignupCallback.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct WhatsAppSignupCallbackResult {
    /// <p>An Amazon Web Services access token generated by <code>WhatsAppSignupCallback</code> and used by <code>WhatsAppSetupFinalization</code>.</p>
    pub associate_in_progress_token: ::std::option::Option<::std::string::String>,
    /// <p>A LinkedWhatsAppBusinessAccountIdMetaData object map containing the details of any WhatsAppBusiness accounts that have incomplete setup.</p>
    pub linked_accounts_with_incomplete_setup:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::LinkedWhatsAppBusinessAccountIdMetaData>>,
}
impl WhatsAppSignupCallbackResult {
    /// <p>An Amazon Web Services access token generated by <code>WhatsAppSignupCallback</code> and used by <code>WhatsAppSetupFinalization</code>.</p>
    pub fn associate_in_progress_token(&self) -> ::std::option::Option<&str> {
        self.associate_in_progress_token.as_deref()
    }
    /// <p>A LinkedWhatsAppBusinessAccountIdMetaData object map containing the details of any WhatsAppBusiness accounts that have incomplete setup.</p>
    pub fn linked_accounts_with_incomplete_setup(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::LinkedWhatsAppBusinessAccountIdMetaData>> {
        self.linked_accounts_with_incomplete_setup.as_ref()
    }
}
impl ::std::fmt::Debug for WhatsAppSignupCallbackResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("WhatsAppSignupCallbackResult");
        formatter.field("associate_in_progress_token", &"*** Sensitive Data Redacted ***");
        formatter.field("linked_accounts_with_incomplete_setup", &self.linked_accounts_with_incomplete_setup);
        formatter.finish()
    }
}
impl WhatsAppSignupCallbackResult {
    /// Creates a new builder-style object to manufacture [`WhatsAppSignupCallbackResult`](crate::types::WhatsAppSignupCallbackResult).
    pub fn builder() -> crate::types::builders::WhatsAppSignupCallbackResultBuilder {
        crate::types::builders::WhatsAppSignupCallbackResultBuilder::default()
    }
}

/// A builder for [`WhatsAppSignupCallbackResult`](crate::types::WhatsAppSignupCallbackResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct WhatsAppSignupCallbackResultBuilder {
    pub(crate) associate_in_progress_token: ::std::option::Option<::std::string::String>,
    pub(crate) linked_accounts_with_incomplete_setup:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::LinkedWhatsAppBusinessAccountIdMetaData>>,
}
impl WhatsAppSignupCallbackResultBuilder {
    /// <p>An Amazon Web Services access token generated by <code>WhatsAppSignupCallback</code> and used by <code>WhatsAppSetupFinalization</code>.</p>
    pub fn associate_in_progress_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.associate_in_progress_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An Amazon Web Services access token generated by <code>WhatsAppSignupCallback</code> and used by <code>WhatsAppSetupFinalization</code>.</p>
    pub fn set_associate_in_progress_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.associate_in_progress_token = input;
        self
    }
    /// <p>An Amazon Web Services access token generated by <code>WhatsAppSignupCallback</code> and used by <code>WhatsAppSetupFinalization</code>.</p>
    pub fn get_associate_in_progress_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.associate_in_progress_token
    }
    /// Adds a key-value pair to `linked_accounts_with_incomplete_setup`.
    ///
    /// To override the contents of this collection use [`set_linked_accounts_with_incomplete_setup`](Self::set_linked_accounts_with_incomplete_setup).
    ///
    /// <p>A LinkedWhatsAppBusinessAccountIdMetaData object map containing the details of any WhatsAppBusiness accounts that have incomplete setup.</p>
    pub fn linked_accounts_with_incomplete_setup(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: crate::types::LinkedWhatsAppBusinessAccountIdMetaData,
    ) -> Self {
        let mut hash_map = self.linked_accounts_with_incomplete_setup.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.linked_accounts_with_incomplete_setup = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A LinkedWhatsAppBusinessAccountIdMetaData object map containing the details of any WhatsAppBusiness accounts that have incomplete setup.</p>
    pub fn set_linked_accounts_with_incomplete_setup(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::LinkedWhatsAppBusinessAccountIdMetaData>>,
    ) -> Self {
        self.linked_accounts_with_incomplete_setup = input;
        self
    }
    /// <p>A LinkedWhatsAppBusinessAccountIdMetaData object map containing the details of any WhatsAppBusiness accounts that have incomplete setup.</p>
    pub fn get_linked_accounts_with_incomplete_setup(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::LinkedWhatsAppBusinessAccountIdMetaData>> {
        &self.linked_accounts_with_incomplete_setup
    }
    /// Consumes the builder and constructs a [`WhatsAppSignupCallbackResult`](crate::types::WhatsAppSignupCallbackResult).
    pub fn build(self) -> crate::types::WhatsAppSignupCallbackResult {
        crate::types::WhatsAppSignupCallbackResult {
            associate_in_progress_token: self.associate_in_progress_token,
            linked_accounts_with_incomplete_setup: self.linked_accounts_with_incomplete_setup,
        }
    }
}
impl ::std::fmt::Debug for WhatsAppSignupCallbackResultBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("WhatsAppSignupCallbackResultBuilder");
        formatter.field("associate_in_progress_token", &"*** Sensitive Data Redacted ***");
        formatter.field("linked_accounts_with_incomplete_setup", &self.linked_accounts_with_incomplete_setup);
        formatter.finish()
    }
}
