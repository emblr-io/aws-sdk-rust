// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of linking a WhatsApp Business Account to your Amazon Web Services account.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct WhatsAppSetupFinalization {
    /// <p>An Amazon Web Services access token generated by <code>WhatsAppSignupCallback</code> and used by <code>WhatsAppSetupFinalization</code>.</p>
    pub associate_in_progress_token: ::std::string::String,
    /// <p>An array of WabaPhoneNumberSetupFinalization objects containing the details of each phone number associated with the WhatsApp Business Account.</p>
    pub phone_numbers: ::std::vec::Vec<crate::types::WabaPhoneNumberSetupFinalization>,
    /// <p>Used to add a new phone number to an existing WhatsApp Business Account. This field can't be used when the <code>waba</code> field is present.</p>
    pub phone_number_parent: ::std::option::Option<::std::string::String>,
    /// <p>Used to create a new WhatsApp Business Account and add a phone number. This field can't be used when the <code>phoneNumberParent</code> field is present.</p>
    pub waba: ::std::option::Option<crate::types::WabaSetupFinalization>,
}
impl WhatsAppSetupFinalization {
    /// <p>An Amazon Web Services access token generated by <code>WhatsAppSignupCallback</code> and used by <code>WhatsAppSetupFinalization</code>.</p>
    pub fn associate_in_progress_token(&self) -> &str {
        use std::ops::Deref;
        self.associate_in_progress_token.deref()
    }
    /// <p>An array of WabaPhoneNumberSetupFinalization objects containing the details of each phone number associated with the WhatsApp Business Account.</p>
    pub fn phone_numbers(&self) -> &[crate::types::WabaPhoneNumberSetupFinalization] {
        use std::ops::Deref;
        self.phone_numbers.deref()
    }
    /// <p>Used to add a new phone number to an existing WhatsApp Business Account. This field can't be used when the <code>waba</code> field is present.</p>
    pub fn phone_number_parent(&self) -> ::std::option::Option<&str> {
        self.phone_number_parent.as_deref()
    }
    /// <p>Used to create a new WhatsApp Business Account and add a phone number. This field can't be used when the <code>phoneNumberParent</code> field is present.</p>
    pub fn waba(&self) -> ::std::option::Option<&crate::types::WabaSetupFinalization> {
        self.waba.as_ref()
    }
}
impl ::std::fmt::Debug for WhatsAppSetupFinalization {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("WhatsAppSetupFinalization");
        formatter.field("associate_in_progress_token", &"*** Sensitive Data Redacted ***");
        formatter.field("phone_numbers", &self.phone_numbers);
        formatter.field("phone_number_parent", &self.phone_number_parent);
        formatter.field("waba", &self.waba);
        formatter.finish()
    }
}
impl WhatsAppSetupFinalization {
    /// Creates a new builder-style object to manufacture [`WhatsAppSetupFinalization`](crate::types::WhatsAppSetupFinalization).
    pub fn builder() -> crate::types::builders::WhatsAppSetupFinalizationBuilder {
        crate::types::builders::WhatsAppSetupFinalizationBuilder::default()
    }
}

/// A builder for [`WhatsAppSetupFinalization`](crate::types::WhatsAppSetupFinalization).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct WhatsAppSetupFinalizationBuilder {
    pub(crate) associate_in_progress_token: ::std::option::Option<::std::string::String>,
    pub(crate) phone_numbers: ::std::option::Option<::std::vec::Vec<crate::types::WabaPhoneNumberSetupFinalization>>,
    pub(crate) phone_number_parent: ::std::option::Option<::std::string::String>,
    pub(crate) waba: ::std::option::Option<crate::types::WabaSetupFinalization>,
}
impl WhatsAppSetupFinalizationBuilder {
    /// <p>An Amazon Web Services access token generated by <code>WhatsAppSignupCallback</code> and used by <code>WhatsAppSetupFinalization</code>.</p>
    /// This field is required.
    pub fn associate_in_progress_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.associate_in_progress_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An Amazon Web Services access token generated by <code>WhatsAppSignupCallback</code> and used by <code>WhatsAppSetupFinalization</code>.</p>
    pub fn set_associate_in_progress_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.associate_in_progress_token = input;
        self
    }
    /// <p>An Amazon Web Services access token generated by <code>WhatsAppSignupCallback</code> and used by <code>WhatsAppSetupFinalization</code>.</p>
    pub fn get_associate_in_progress_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.associate_in_progress_token
    }
    /// Appends an item to `phone_numbers`.
    ///
    /// To override the contents of this collection use [`set_phone_numbers`](Self::set_phone_numbers).
    ///
    /// <p>An array of WabaPhoneNumberSetupFinalization objects containing the details of each phone number associated with the WhatsApp Business Account.</p>
    pub fn phone_numbers(mut self, input: crate::types::WabaPhoneNumberSetupFinalization) -> Self {
        let mut v = self.phone_numbers.unwrap_or_default();
        v.push(input);
        self.phone_numbers = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of WabaPhoneNumberSetupFinalization objects containing the details of each phone number associated with the WhatsApp Business Account.</p>
    pub fn set_phone_numbers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WabaPhoneNumberSetupFinalization>>) -> Self {
        self.phone_numbers = input;
        self
    }
    /// <p>An array of WabaPhoneNumberSetupFinalization objects containing the details of each phone number associated with the WhatsApp Business Account.</p>
    pub fn get_phone_numbers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WabaPhoneNumberSetupFinalization>> {
        &self.phone_numbers
    }
    /// <p>Used to add a new phone number to an existing WhatsApp Business Account. This field can't be used when the <code>waba</code> field is present.</p>
    pub fn phone_number_parent(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.phone_number_parent = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Used to add a new phone number to an existing WhatsApp Business Account. This field can't be used when the <code>waba</code> field is present.</p>
    pub fn set_phone_number_parent(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.phone_number_parent = input;
        self
    }
    /// <p>Used to add a new phone number to an existing WhatsApp Business Account. This field can't be used when the <code>waba</code> field is present.</p>
    pub fn get_phone_number_parent(&self) -> &::std::option::Option<::std::string::String> {
        &self.phone_number_parent
    }
    /// <p>Used to create a new WhatsApp Business Account and add a phone number. This field can't be used when the <code>phoneNumberParent</code> field is present.</p>
    pub fn waba(mut self, input: crate::types::WabaSetupFinalization) -> Self {
        self.waba = ::std::option::Option::Some(input);
        self
    }
    /// <p>Used to create a new WhatsApp Business Account and add a phone number. This field can't be used when the <code>phoneNumberParent</code> field is present.</p>
    pub fn set_waba(mut self, input: ::std::option::Option<crate::types::WabaSetupFinalization>) -> Self {
        self.waba = input;
        self
    }
    /// <p>Used to create a new WhatsApp Business Account and add a phone number. This field can't be used when the <code>phoneNumberParent</code> field is present.</p>
    pub fn get_waba(&self) -> &::std::option::Option<crate::types::WabaSetupFinalization> {
        &self.waba
    }
    /// Consumes the builder and constructs a [`WhatsAppSetupFinalization`](crate::types::WhatsAppSetupFinalization).
    /// This method will fail if any of the following fields are not set:
    /// - [`associate_in_progress_token`](crate::types::builders::WhatsAppSetupFinalizationBuilder::associate_in_progress_token)
    /// - [`phone_numbers`](crate::types::builders::WhatsAppSetupFinalizationBuilder::phone_numbers)
    pub fn build(self) -> ::std::result::Result<crate::types::WhatsAppSetupFinalization, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WhatsAppSetupFinalization {
            associate_in_progress_token: self.associate_in_progress_token.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "associate_in_progress_token",
                    "associate_in_progress_token was not specified but it is required when building WhatsAppSetupFinalization",
                )
            })?,
            phone_numbers: self.phone_numbers.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "phone_numbers",
                    "phone_numbers was not specified but it is required when building WhatsAppSetupFinalization",
                )
            })?,
            phone_number_parent: self.phone_number_parent,
            waba: self.waba,
        })
    }
}
impl ::std::fmt::Debug for WhatsAppSetupFinalizationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("WhatsAppSetupFinalizationBuilder");
        formatter.field("associate_in_progress_token", &"*** Sensitive Data Redacted ***");
        formatter.field("phone_numbers", &self.phone_numbers);
        formatter.field("phone_number_parent", &self.phone_number_parent);
        formatter.field("waba", &self.waba);
        formatter.finish()
    }
}
