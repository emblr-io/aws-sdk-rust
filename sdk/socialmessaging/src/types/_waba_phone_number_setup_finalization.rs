// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The registration details for a linked phone number.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct WabaPhoneNumberSetupFinalization {
    /// <p>The unique identifier of the originating phone number associated with the media. Phone number identifiers are formatted as <code>phone-number-id-01234567890123456789012345678901</code>. Use <a href="https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_GetLinkedWhatsAppBusinessAccountPhoneNumber.html">GetLinkedWhatsAppBusinessAccount</a> to find a phone number's id.</p>
    pub id: ::std::string::String,
    /// <p>The PIN to use for two-step verification. To reset your PIN follow the directions in <a href="https://developers.facebook.com/docs/whatsapp/cloud-api/reference/two-step-verification/#updating-pin">Updating PIN</a> in the <i>WhatsApp Business Platform Cloud API Reference</i>.</p>
    pub two_factor_pin: ::std::string::String,
    /// <p>The two letter ISO region for the location of where Meta will store data.</p>
    /// <p class="title"><b>Asia–Pacific (APAC)</b></p>
    /// <ul>
    /// <li>
    /// <p>Australia <b>AU</b></p></li>
    /// <li>
    /// <p>Indonesia <b>ID</b></p></li>
    /// <li>
    /// <p>India <b>IN</b></p></li>
    /// <li>
    /// <p>Japan <b>JP</b></p></li>
    /// <li>
    /// <p>Singapore <b>SG</b></p></li>
    /// <li>
    /// <p>South Korea <b>KR</b></p></li>
    /// </ul>
    /// <p class="title"><b>Europe</b></p>
    /// <ul>
    /// <li>
    /// <p>Germany <b>DE</b></p></li>
    /// <li>
    /// <p>Switzerland <b>CH</b></p></li>
    /// <li>
    /// <p>United Kingdom <b>GB</b></p></li>
    /// </ul>
    /// <p class="title"><b>Latin America (LATAM)</b></p>
    /// <ul>
    /// <li>
    /// <p>Brazil <b>BR</b></p></li>
    /// </ul>
    /// <p class="title"><b>Middle East and Africa (MEA)</b></p>
    /// <ul>
    /// <li>
    /// <p>Bahrain <b>BH</b></p></li>
    /// <li>
    /// <p>South Africa <b>ZA</b></p></li>
    /// <li>
    /// <p>United Arab Emirates <b>AE</b></p></li>
    /// </ul>
    /// <p class="title"><b>North America (NORAM)</b></p>
    /// <ul>
    /// <li>
    /// <p>Canada <b>CA</b></p></li>
    /// </ul>
    pub data_localization_region: ::std::option::Option<::std::string::String>,
    /// <p>An array of key and value pair tags.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl WabaPhoneNumberSetupFinalization {
    /// <p>The unique identifier of the originating phone number associated with the media. Phone number identifiers are formatted as <code>phone-number-id-01234567890123456789012345678901</code>. Use <a href="https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_GetLinkedWhatsAppBusinessAccountPhoneNumber.html">GetLinkedWhatsAppBusinessAccount</a> to find a phone number's id.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The PIN to use for two-step verification. To reset your PIN follow the directions in <a href="https://developers.facebook.com/docs/whatsapp/cloud-api/reference/two-step-verification/#updating-pin">Updating PIN</a> in the <i>WhatsApp Business Platform Cloud API Reference</i>.</p>
    pub fn two_factor_pin(&self) -> &str {
        use std::ops::Deref;
        self.two_factor_pin.deref()
    }
    /// <p>The two letter ISO region for the location of where Meta will store data.</p>
    /// <p class="title"><b>Asia–Pacific (APAC)</b></p>
    /// <ul>
    /// <li>
    /// <p>Australia <b>AU</b></p></li>
    /// <li>
    /// <p>Indonesia <b>ID</b></p></li>
    /// <li>
    /// <p>India <b>IN</b></p></li>
    /// <li>
    /// <p>Japan <b>JP</b></p></li>
    /// <li>
    /// <p>Singapore <b>SG</b></p></li>
    /// <li>
    /// <p>South Korea <b>KR</b></p></li>
    /// </ul>
    /// <p class="title"><b>Europe</b></p>
    /// <ul>
    /// <li>
    /// <p>Germany <b>DE</b></p></li>
    /// <li>
    /// <p>Switzerland <b>CH</b></p></li>
    /// <li>
    /// <p>United Kingdom <b>GB</b></p></li>
    /// </ul>
    /// <p class="title"><b>Latin America (LATAM)</b></p>
    /// <ul>
    /// <li>
    /// <p>Brazil <b>BR</b></p></li>
    /// </ul>
    /// <p class="title"><b>Middle East and Africa (MEA)</b></p>
    /// <ul>
    /// <li>
    /// <p>Bahrain <b>BH</b></p></li>
    /// <li>
    /// <p>South Africa <b>ZA</b></p></li>
    /// <li>
    /// <p>United Arab Emirates <b>AE</b></p></li>
    /// </ul>
    /// <p class="title"><b>North America (NORAM)</b></p>
    /// <ul>
    /// <li>
    /// <p>Canada <b>CA</b></p></li>
    /// </ul>
    pub fn data_localization_region(&self) -> ::std::option::Option<&str> {
        self.data_localization_region.as_deref()
    }
    /// <p>An array of key and value pair tags.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for WabaPhoneNumberSetupFinalization {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("WabaPhoneNumberSetupFinalization");
        formatter.field("id", &self.id);
        formatter.field("two_factor_pin", &"*** Sensitive Data Redacted ***");
        formatter.field("data_localization_region", &self.data_localization_region);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl WabaPhoneNumberSetupFinalization {
    /// Creates a new builder-style object to manufacture [`WabaPhoneNumberSetupFinalization`](crate::types::WabaPhoneNumberSetupFinalization).
    pub fn builder() -> crate::types::builders::WabaPhoneNumberSetupFinalizationBuilder {
        crate::types::builders::WabaPhoneNumberSetupFinalizationBuilder::default()
    }
}

/// A builder for [`WabaPhoneNumberSetupFinalization`](crate::types::WabaPhoneNumberSetupFinalization).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct WabaPhoneNumberSetupFinalizationBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) two_factor_pin: ::std::option::Option<::std::string::String>,
    pub(crate) data_localization_region: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl WabaPhoneNumberSetupFinalizationBuilder {
    /// <p>The unique identifier of the originating phone number associated with the media. Phone number identifiers are formatted as <code>phone-number-id-01234567890123456789012345678901</code>. Use <a href="https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_GetLinkedWhatsAppBusinessAccountPhoneNumber.html">GetLinkedWhatsAppBusinessAccount</a> to find a phone number's id.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the originating phone number associated with the media. Phone number identifiers are formatted as <code>phone-number-id-01234567890123456789012345678901</code>. Use <a href="https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_GetLinkedWhatsAppBusinessAccountPhoneNumber.html">GetLinkedWhatsAppBusinessAccount</a> to find a phone number's id.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the originating phone number associated with the media. Phone number identifiers are formatted as <code>phone-number-id-01234567890123456789012345678901</code>. Use <a href="https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_GetLinkedWhatsAppBusinessAccountPhoneNumber.html">GetLinkedWhatsAppBusinessAccount</a> to find a phone number's id.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The PIN to use for two-step verification. To reset your PIN follow the directions in <a href="https://developers.facebook.com/docs/whatsapp/cloud-api/reference/two-step-verification/#updating-pin">Updating PIN</a> in the <i>WhatsApp Business Platform Cloud API Reference</i>.</p>
    /// This field is required.
    pub fn two_factor_pin(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.two_factor_pin = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The PIN to use for two-step verification. To reset your PIN follow the directions in <a href="https://developers.facebook.com/docs/whatsapp/cloud-api/reference/two-step-verification/#updating-pin">Updating PIN</a> in the <i>WhatsApp Business Platform Cloud API Reference</i>.</p>
    pub fn set_two_factor_pin(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.two_factor_pin = input;
        self
    }
    /// <p>The PIN to use for two-step verification. To reset your PIN follow the directions in <a href="https://developers.facebook.com/docs/whatsapp/cloud-api/reference/two-step-verification/#updating-pin">Updating PIN</a> in the <i>WhatsApp Business Platform Cloud API Reference</i>.</p>
    pub fn get_two_factor_pin(&self) -> &::std::option::Option<::std::string::String> {
        &self.two_factor_pin
    }
    /// <p>The two letter ISO region for the location of where Meta will store data.</p>
    /// <p class="title"><b>Asia–Pacific (APAC)</b></p>
    /// <ul>
    /// <li>
    /// <p>Australia <b>AU</b></p></li>
    /// <li>
    /// <p>Indonesia <b>ID</b></p></li>
    /// <li>
    /// <p>India <b>IN</b></p></li>
    /// <li>
    /// <p>Japan <b>JP</b></p></li>
    /// <li>
    /// <p>Singapore <b>SG</b></p></li>
    /// <li>
    /// <p>South Korea <b>KR</b></p></li>
    /// </ul>
    /// <p class="title"><b>Europe</b></p>
    /// <ul>
    /// <li>
    /// <p>Germany <b>DE</b></p></li>
    /// <li>
    /// <p>Switzerland <b>CH</b></p></li>
    /// <li>
    /// <p>United Kingdom <b>GB</b></p></li>
    /// </ul>
    /// <p class="title"><b>Latin America (LATAM)</b></p>
    /// <ul>
    /// <li>
    /// <p>Brazil <b>BR</b></p></li>
    /// </ul>
    /// <p class="title"><b>Middle East and Africa (MEA)</b></p>
    /// <ul>
    /// <li>
    /// <p>Bahrain <b>BH</b></p></li>
    /// <li>
    /// <p>South Africa <b>ZA</b></p></li>
    /// <li>
    /// <p>United Arab Emirates <b>AE</b></p></li>
    /// </ul>
    /// <p class="title"><b>North America (NORAM)</b></p>
    /// <ul>
    /// <li>
    /// <p>Canada <b>CA</b></p></li>
    /// </ul>
    pub fn data_localization_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_localization_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The two letter ISO region for the location of where Meta will store data.</p>
    /// <p class="title"><b>Asia–Pacific (APAC)</b></p>
    /// <ul>
    /// <li>
    /// <p>Australia <b>AU</b></p></li>
    /// <li>
    /// <p>Indonesia <b>ID</b></p></li>
    /// <li>
    /// <p>India <b>IN</b></p></li>
    /// <li>
    /// <p>Japan <b>JP</b></p></li>
    /// <li>
    /// <p>Singapore <b>SG</b></p></li>
    /// <li>
    /// <p>South Korea <b>KR</b></p></li>
    /// </ul>
    /// <p class="title"><b>Europe</b></p>
    /// <ul>
    /// <li>
    /// <p>Germany <b>DE</b></p></li>
    /// <li>
    /// <p>Switzerland <b>CH</b></p></li>
    /// <li>
    /// <p>United Kingdom <b>GB</b></p></li>
    /// </ul>
    /// <p class="title"><b>Latin America (LATAM)</b></p>
    /// <ul>
    /// <li>
    /// <p>Brazil <b>BR</b></p></li>
    /// </ul>
    /// <p class="title"><b>Middle East and Africa (MEA)</b></p>
    /// <ul>
    /// <li>
    /// <p>Bahrain <b>BH</b></p></li>
    /// <li>
    /// <p>South Africa <b>ZA</b></p></li>
    /// <li>
    /// <p>United Arab Emirates <b>AE</b></p></li>
    /// </ul>
    /// <p class="title"><b>North America (NORAM)</b></p>
    /// <ul>
    /// <li>
    /// <p>Canada <b>CA</b></p></li>
    /// </ul>
    pub fn set_data_localization_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_localization_region = input;
        self
    }
    /// <p>The two letter ISO region for the location of where Meta will store data.</p>
    /// <p class="title"><b>Asia–Pacific (APAC)</b></p>
    /// <ul>
    /// <li>
    /// <p>Australia <b>AU</b></p></li>
    /// <li>
    /// <p>Indonesia <b>ID</b></p></li>
    /// <li>
    /// <p>India <b>IN</b></p></li>
    /// <li>
    /// <p>Japan <b>JP</b></p></li>
    /// <li>
    /// <p>Singapore <b>SG</b></p></li>
    /// <li>
    /// <p>South Korea <b>KR</b></p></li>
    /// </ul>
    /// <p class="title"><b>Europe</b></p>
    /// <ul>
    /// <li>
    /// <p>Germany <b>DE</b></p></li>
    /// <li>
    /// <p>Switzerland <b>CH</b></p></li>
    /// <li>
    /// <p>United Kingdom <b>GB</b></p></li>
    /// </ul>
    /// <p class="title"><b>Latin America (LATAM)</b></p>
    /// <ul>
    /// <li>
    /// <p>Brazil <b>BR</b></p></li>
    /// </ul>
    /// <p class="title"><b>Middle East and Africa (MEA)</b></p>
    /// <ul>
    /// <li>
    /// <p>Bahrain <b>BH</b></p></li>
    /// <li>
    /// <p>South Africa <b>ZA</b></p></li>
    /// <li>
    /// <p>United Arab Emirates <b>AE</b></p></li>
    /// </ul>
    /// <p class="title"><b>North America (NORAM)</b></p>
    /// <ul>
    /// <li>
    /// <p>Canada <b>CA</b></p></li>
    /// </ul>
    pub fn get_data_localization_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_localization_region
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key and value pair tags.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of key and value pair tags.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>An array of key and value pair tags.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`WabaPhoneNumberSetupFinalization`](crate::types::WabaPhoneNumberSetupFinalization).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::WabaPhoneNumberSetupFinalizationBuilder::id)
    /// - [`two_factor_pin`](crate::types::builders::WabaPhoneNumberSetupFinalizationBuilder::two_factor_pin)
    pub fn build(self) -> ::std::result::Result<crate::types::WabaPhoneNumberSetupFinalization, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WabaPhoneNumberSetupFinalization {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building WabaPhoneNumberSetupFinalization",
                )
            })?,
            two_factor_pin: self.two_factor_pin.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "two_factor_pin",
                    "two_factor_pin was not specified but it is required when building WabaPhoneNumberSetupFinalization",
                )
            })?,
            data_localization_region: self.data_localization_region,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for WabaPhoneNumberSetupFinalizationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("WabaPhoneNumberSetupFinalizationBuilder");
        formatter.field("id", &self.id);
        formatter.field("two_factor_pin", &"*** Sensitive Data Redacted ***");
        formatter.field("data_localization_region", &self.data_localization_region);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
