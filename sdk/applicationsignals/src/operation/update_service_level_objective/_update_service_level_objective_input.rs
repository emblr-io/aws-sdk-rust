// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateServiceLevelObjectiveInput {
    /// <p>The Amazon Resource Name (ARN) or name of the service level objective that you want to update.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>An optional description for the SLO.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>If this SLO is a period-based SLO, this structure defines the information about what performance metric this SLO will monitor.</p>
    pub sli_config: ::std::option::Option<crate::types::ServiceLevelIndicatorConfig>,
    /// <p>If this SLO is a request-based SLO, this structure defines the information about what performance metric this SLO will monitor.</p>
    /// <p>You can't specify both <code>SliConfig</code> and <code>RequestBasedSliConfig</code> in the same operation.</p>
    pub request_based_sli_config: ::std::option::Option<crate::types::RequestBasedServiceLevelIndicatorConfig>,
    /// <p>A structure that contains the attributes that determine the goal of the SLO. This includes the time period for evaluation and the attainment threshold.</p>
    pub goal: ::std::option::Option<crate::types::Goal>,
    /// <p>Use this array to create <i>burn rates</i> for this SLO. Each burn rate is a metric that indicates how fast the service is consuming the error budget, relative to the attainment goal of the SLO.</p>
    pub burn_rate_configurations: ::std::option::Option<::std::vec::Vec<crate::types::BurnRateConfiguration>>,
}
impl UpdateServiceLevelObjectiveInput {
    /// <p>The Amazon Resource Name (ARN) or name of the service level objective that you want to update.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>An optional description for the SLO.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>If this SLO is a period-based SLO, this structure defines the information about what performance metric this SLO will monitor.</p>
    pub fn sli_config(&self) -> ::std::option::Option<&crate::types::ServiceLevelIndicatorConfig> {
        self.sli_config.as_ref()
    }
    /// <p>If this SLO is a request-based SLO, this structure defines the information about what performance metric this SLO will monitor.</p>
    /// <p>You can't specify both <code>SliConfig</code> and <code>RequestBasedSliConfig</code> in the same operation.</p>
    pub fn request_based_sli_config(&self) -> ::std::option::Option<&crate::types::RequestBasedServiceLevelIndicatorConfig> {
        self.request_based_sli_config.as_ref()
    }
    /// <p>A structure that contains the attributes that determine the goal of the SLO. This includes the time period for evaluation and the attainment threshold.</p>
    pub fn goal(&self) -> ::std::option::Option<&crate::types::Goal> {
        self.goal.as_ref()
    }
    /// <p>Use this array to create <i>burn rates</i> for this SLO. Each burn rate is a metric that indicates how fast the service is consuming the error budget, relative to the attainment goal of the SLO.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.burn_rate_configurations.is_none()`.
    pub fn burn_rate_configurations(&self) -> &[crate::types::BurnRateConfiguration] {
        self.burn_rate_configurations.as_deref().unwrap_or_default()
    }
}
impl UpdateServiceLevelObjectiveInput {
    /// Creates a new builder-style object to manufacture [`UpdateServiceLevelObjectiveInput`](crate::operation::update_service_level_objective::UpdateServiceLevelObjectiveInput).
    pub fn builder() -> crate::operation::update_service_level_objective::builders::UpdateServiceLevelObjectiveInputBuilder {
        crate::operation::update_service_level_objective::builders::UpdateServiceLevelObjectiveInputBuilder::default()
    }
}

/// A builder for [`UpdateServiceLevelObjectiveInput`](crate::operation::update_service_level_objective::UpdateServiceLevelObjectiveInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateServiceLevelObjectiveInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) sli_config: ::std::option::Option<crate::types::ServiceLevelIndicatorConfig>,
    pub(crate) request_based_sli_config: ::std::option::Option<crate::types::RequestBasedServiceLevelIndicatorConfig>,
    pub(crate) goal: ::std::option::Option<crate::types::Goal>,
    pub(crate) burn_rate_configurations: ::std::option::Option<::std::vec::Vec<crate::types::BurnRateConfiguration>>,
}
impl UpdateServiceLevelObjectiveInputBuilder {
    /// <p>The Amazon Resource Name (ARN) or name of the service level objective that you want to update.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) or name of the service level objective that you want to update.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) or name of the service level objective that you want to update.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>An optional description for the SLO.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional description for the SLO.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>An optional description for the SLO.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>If this SLO is a period-based SLO, this structure defines the information about what performance metric this SLO will monitor.</p>
    pub fn sli_config(mut self, input: crate::types::ServiceLevelIndicatorConfig) -> Self {
        self.sli_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>If this SLO is a period-based SLO, this structure defines the information about what performance metric this SLO will monitor.</p>
    pub fn set_sli_config(mut self, input: ::std::option::Option<crate::types::ServiceLevelIndicatorConfig>) -> Self {
        self.sli_config = input;
        self
    }
    /// <p>If this SLO is a period-based SLO, this structure defines the information about what performance metric this SLO will monitor.</p>
    pub fn get_sli_config(&self) -> &::std::option::Option<crate::types::ServiceLevelIndicatorConfig> {
        &self.sli_config
    }
    /// <p>If this SLO is a request-based SLO, this structure defines the information about what performance metric this SLO will monitor.</p>
    /// <p>You can't specify both <code>SliConfig</code> and <code>RequestBasedSliConfig</code> in the same operation.</p>
    pub fn request_based_sli_config(mut self, input: crate::types::RequestBasedServiceLevelIndicatorConfig) -> Self {
        self.request_based_sli_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>If this SLO is a request-based SLO, this structure defines the information about what performance metric this SLO will monitor.</p>
    /// <p>You can't specify both <code>SliConfig</code> and <code>RequestBasedSliConfig</code> in the same operation.</p>
    pub fn set_request_based_sli_config(mut self, input: ::std::option::Option<crate::types::RequestBasedServiceLevelIndicatorConfig>) -> Self {
        self.request_based_sli_config = input;
        self
    }
    /// <p>If this SLO is a request-based SLO, this structure defines the information about what performance metric this SLO will monitor.</p>
    /// <p>You can't specify both <code>SliConfig</code> and <code>RequestBasedSliConfig</code> in the same operation.</p>
    pub fn get_request_based_sli_config(&self) -> &::std::option::Option<crate::types::RequestBasedServiceLevelIndicatorConfig> {
        &self.request_based_sli_config
    }
    /// <p>A structure that contains the attributes that determine the goal of the SLO. This includes the time period for evaluation and the attainment threshold.</p>
    pub fn goal(mut self, input: crate::types::Goal) -> Self {
        self.goal = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that contains the attributes that determine the goal of the SLO. This includes the time period for evaluation and the attainment threshold.</p>
    pub fn set_goal(mut self, input: ::std::option::Option<crate::types::Goal>) -> Self {
        self.goal = input;
        self
    }
    /// <p>A structure that contains the attributes that determine the goal of the SLO. This includes the time period for evaluation and the attainment threshold.</p>
    pub fn get_goal(&self) -> &::std::option::Option<crate::types::Goal> {
        &self.goal
    }
    /// Appends an item to `burn_rate_configurations`.
    ///
    /// To override the contents of this collection use [`set_burn_rate_configurations`](Self::set_burn_rate_configurations).
    ///
    /// <p>Use this array to create <i>burn rates</i> for this SLO. Each burn rate is a metric that indicates how fast the service is consuming the error budget, relative to the attainment goal of the SLO.</p>
    pub fn burn_rate_configurations(mut self, input: crate::types::BurnRateConfiguration) -> Self {
        let mut v = self.burn_rate_configurations.unwrap_or_default();
        v.push(input);
        self.burn_rate_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Use this array to create <i>burn rates</i> for this SLO. Each burn rate is a metric that indicates how fast the service is consuming the error budget, relative to the attainment goal of the SLO.</p>
    pub fn set_burn_rate_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BurnRateConfiguration>>) -> Self {
        self.burn_rate_configurations = input;
        self
    }
    /// <p>Use this array to create <i>burn rates</i> for this SLO. Each burn rate is a metric that indicates how fast the service is consuming the error budget, relative to the attainment goal of the SLO.</p>
    pub fn get_burn_rate_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BurnRateConfiguration>> {
        &self.burn_rate_configurations
    }
    /// Consumes the builder and constructs a [`UpdateServiceLevelObjectiveInput`](crate::operation::update_service_level_objective::UpdateServiceLevelObjectiveInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_service_level_objective::UpdateServiceLevelObjectiveInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_service_level_objective::UpdateServiceLevelObjectiveInput {
            id: self.id,
            description: self.description,
            sli_config: self.sli_config,
            request_based_sli_config: self.request_based_sli_config,
            goal: self.goal,
            burn_rate_configurations: self.burn_rate_configurations,
        })
    }
}
