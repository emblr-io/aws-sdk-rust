// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListServicesInput {
    /// <p>The start of the time period to retrieve information about. When used in a raw HTTP Query API, it is formatted as be epoch time in seconds. For example: <code>1698778057</code></p>
    /// <p>Your requested start time will be rounded to the nearest hour.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The end of the time period to retrieve information about. When used in a raw HTTP Query API, it is formatted as be epoch time in seconds. For example: <code>1698778057</code></p>
    /// <p>Your requested start time will be rounded to the nearest hour.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The maximum number of results to return in one operation. If you omit this parameter, the default of 50 is used.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of services.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>If you are using this operation in a monitoring account, specify <code>true</code> to include services from source accounts in the returned data.</p>
    pub include_linked_accounts: ::std::option::Option<bool>,
    /// <p>Amazon Web Services Account ID.</p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
}
impl ListServicesInput {
    /// <p>The start of the time period to retrieve information about. When used in a raw HTTP Query API, it is formatted as be epoch time in seconds. For example: <code>1698778057</code></p>
    /// <p>Your requested start time will be rounded to the nearest hour.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The end of the time period to retrieve information about. When used in a raw HTTP Query API, it is formatted as be epoch time in seconds. For example: <code>1698778057</code></p>
    /// <p>Your requested start time will be rounded to the nearest hour.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The maximum number of results to return in one operation. If you omit this parameter, the default of 50 is used.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of services.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>If you are using this operation in a monitoring account, specify <code>true</code> to include services from source accounts in the returned data.</p>
    pub fn include_linked_accounts(&self) -> ::std::option::Option<bool> {
        self.include_linked_accounts
    }
    /// <p>Amazon Web Services Account ID.</p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
}
impl ListServicesInput {
    /// Creates a new builder-style object to manufacture [`ListServicesInput`](crate::operation::list_services::ListServicesInput).
    pub fn builder() -> crate::operation::list_services::builders::ListServicesInputBuilder {
        crate::operation::list_services::builders::ListServicesInputBuilder::default()
    }
}

/// A builder for [`ListServicesInput`](crate::operation::list_services::ListServicesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListServicesInputBuilder {
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) include_linked_accounts: ::std::option::Option<bool>,
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
}
impl ListServicesInputBuilder {
    /// <p>The start of the time period to retrieve information about. When used in a raw HTTP Query API, it is formatted as be epoch time in seconds. For example: <code>1698778057</code></p>
    /// <p>Your requested start time will be rounded to the nearest hour.</p>
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start of the time period to retrieve information about. When used in a raw HTTP Query API, it is formatted as be epoch time in seconds. For example: <code>1698778057</code></p>
    /// <p>Your requested start time will be rounded to the nearest hour.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The start of the time period to retrieve information about. When used in a raw HTTP Query API, it is formatted as be epoch time in seconds. For example: <code>1698778057</code></p>
    /// <p>Your requested start time will be rounded to the nearest hour.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The end of the time period to retrieve information about. When used in a raw HTTP Query API, it is formatted as be epoch time in seconds. For example: <code>1698778057</code></p>
    /// <p>Your requested start time will be rounded to the nearest hour.</p>
    /// This field is required.
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end of the time period to retrieve information about. When used in a raw HTTP Query API, it is formatted as be epoch time in seconds. For example: <code>1698778057</code></p>
    /// <p>Your requested start time will be rounded to the nearest hour.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The end of the time period to retrieve information about. When used in a raw HTTP Query API, it is formatted as be epoch time in seconds. For example: <code>1698778057</code></p>
    /// <p>Your requested start time will be rounded to the nearest hour.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The maximum number of results to return in one operation. If you omit this parameter, the default of 50 is used.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return in one operation. If you omit this parameter, the default of 50 is used.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return in one operation. If you omit this parameter, the default of 50 is used.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of services.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of services.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of services.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>If you are using this operation in a monitoring account, specify <code>true</code> to include services from source accounts in the returned data.</p>
    pub fn include_linked_accounts(mut self, input: bool) -> Self {
        self.include_linked_accounts = ::std::option::Option::Some(input);
        self
    }
    /// <p>If you are using this operation in a monitoring account, specify <code>true</code> to include services from source accounts in the returned data.</p>
    pub fn set_include_linked_accounts(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_linked_accounts = input;
        self
    }
    /// <p>If you are using this operation in a monitoring account, specify <code>true</code> to include services from source accounts in the returned data.</p>
    pub fn get_include_linked_accounts(&self) -> &::std::option::Option<bool> {
        &self.include_linked_accounts
    }
    /// <p>Amazon Web Services Account ID.</p>
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Web Services Account ID.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>Amazon Web Services Account ID.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// Consumes the builder and constructs a [`ListServicesInput`](crate::operation::list_services::ListServicesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_services::ListServicesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_services::ListServicesInput {
            start_time: self.start_time,
            end_time: self.end_time,
            max_results: self.max_results,
            next_token: self.next_token,
            include_linked_accounts: self.include_linked_accounts,
            aws_account_id: self.aws_account_id,
        })
    }
}
