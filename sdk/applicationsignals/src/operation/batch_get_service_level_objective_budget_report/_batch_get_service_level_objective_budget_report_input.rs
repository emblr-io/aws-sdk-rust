// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetServiceLevelObjectiveBudgetReportInput {
    /// <p>The date and time that you want the report to be for. It is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.</p>
    pub timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>An array containing the IDs of the service level objectives that you want to include in the report.</p>
    pub slo_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl BatchGetServiceLevelObjectiveBudgetReportInput {
    /// <p>The date and time that you want the report to be for. It is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.</p>
    pub fn timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
    /// <p>An array containing the IDs of the service level objectives that you want to include in the report.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.slo_ids.is_none()`.
    pub fn slo_ids(&self) -> &[::std::string::String] {
        self.slo_ids.as_deref().unwrap_or_default()
    }
}
impl BatchGetServiceLevelObjectiveBudgetReportInput {
    /// Creates a new builder-style object to manufacture [`BatchGetServiceLevelObjectiveBudgetReportInput`](crate::operation::batch_get_service_level_objective_budget_report::BatchGetServiceLevelObjectiveBudgetReportInput).
    pub fn builder(
    ) -> crate::operation::batch_get_service_level_objective_budget_report::builders::BatchGetServiceLevelObjectiveBudgetReportInputBuilder {
        crate::operation::batch_get_service_level_objective_budget_report::builders::BatchGetServiceLevelObjectiveBudgetReportInputBuilder::default()
    }
}

/// A builder for [`BatchGetServiceLevelObjectiveBudgetReportInput`](crate::operation::batch_get_service_level_objective_budget_report::BatchGetServiceLevelObjectiveBudgetReportInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchGetServiceLevelObjectiveBudgetReportInputBuilder {
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) slo_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl BatchGetServiceLevelObjectiveBudgetReportInputBuilder {
    /// <p>The date and time that you want the report to be for. It is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.</p>
    /// This field is required.
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that you want the report to be for. It is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The date and time that you want the report to be for. It is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// Appends an item to `slo_ids`.
    ///
    /// To override the contents of this collection use [`set_slo_ids`](Self::set_slo_ids).
    ///
    /// <p>An array containing the IDs of the service level objectives that you want to include in the report.</p>
    pub fn slo_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.slo_ids.unwrap_or_default();
        v.push(input.into());
        self.slo_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array containing the IDs of the service level objectives that you want to include in the report.</p>
    pub fn set_slo_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.slo_ids = input;
        self
    }
    /// <p>An array containing the IDs of the service level objectives that you want to include in the report.</p>
    pub fn get_slo_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.slo_ids
    }
    /// Consumes the builder and constructs a [`BatchGetServiceLevelObjectiveBudgetReportInput`](crate::operation::batch_get_service_level_objective_budget_report::BatchGetServiceLevelObjectiveBudgetReportInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_get_service_level_objective_budget_report::BatchGetServiceLevelObjectiveBudgetReportInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::batch_get_service_level_objective_budget_report::BatchGetServiceLevelObjectiveBudgetReportInput {
                timestamp: self.timestamp,
                slo_ids: self.slo_ids,
            },
        )
    }
}
