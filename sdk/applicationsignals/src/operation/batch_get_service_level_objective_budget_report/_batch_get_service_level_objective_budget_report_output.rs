// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetServiceLevelObjectiveBudgetReportOutput {
    /// <p>The date and time that the report is for. It is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.</p>
    pub timestamp: ::aws_smithy_types::DateTime,
    /// <p>An array of structures, where each structure is one budget report.</p>
    pub reports: ::std::vec::Vec<crate::types::ServiceLevelObjectiveBudgetReport>,
    /// <p>An array of structures, where each structure includes an error indicating that one of the requests in the array was not valid.</p>
    pub errors: ::std::vec::Vec<crate::types::ServiceLevelObjectiveBudgetReportError>,
    _request_id: Option<String>,
}
impl BatchGetServiceLevelObjectiveBudgetReportOutput {
    /// <p>The date and time that the report is for. It is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.</p>
    pub fn timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.timestamp
    }
    /// <p>An array of structures, where each structure is one budget report.</p>
    pub fn reports(&self) -> &[crate::types::ServiceLevelObjectiveBudgetReport] {
        use std::ops::Deref;
        self.reports.deref()
    }
    /// <p>An array of structures, where each structure includes an error indicating that one of the requests in the array was not valid.</p>
    pub fn errors(&self) -> &[crate::types::ServiceLevelObjectiveBudgetReportError] {
        use std::ops::Deref;
        self.errors.deref()
    }
}
impl ::aws_types::request_id::RequestId for BatchGetServiceLevelObjectiveBudgetReportOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchGetServiceLevelObjectiveBudgetReportOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetServiceLevelObjectiveBudgetReportOutput`](crate::operation::batch_get_service_level_objective_budget_report::BatchGetServiceLevelObjectiveBudgetReportOutput).
    pub fn builder(
    ) -> crate::operation::batch_get_service_level_objective_budget_report::builders::BatchGetServiceLevelObjectiveBudgetReportOutputBuilder {
        crate::operation::batch_get_service_level_objective_budget_report::builders::BatchGetServiceLevelObjectiveBudgetReportOutputBuilder::default()
    }
}

/// A builder for [`BatchGetServiceLevelObjectiveBudgetReportOutput`](crate::operation::batch_get_service_level_objective_budget_report::BatchGetServiceLevelObjectiveBudgetReportOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchGetServiceLevelObjectiveBudgetReportOutputBuilder {
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) reports: ::std::option::Option<::std::vec::Vec<crate::types::ServiceLevelObjectiveBudgetReport>>,
    pub(crate) errors: ::std::option::Option<::std::vec::Vec<crate::types::ServiceLevelObjectiveBudgetReportError>>,
    _request_id: Option<String>,
}
impl BatchGetServiceLevelObjectiveBudgetReportOutputBuilder {
    /// <p>The date and time that the report is for. It is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.</p>
    /// This field is required.
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the report is for. It is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The date and time that the report is for. It is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// Appends an item to `reports`.
    ///
    /// To override the contents of this collection use [`set_reports`](Self::set_reports).
    ///
    /// <p>An array of structures, where each structure is one budget report.</p>
    pub fn reports(mut self, input: crate::types::ServiceLevelObjectiveBudgetReport) -> Self {
        let mut v = self.reports.unwrap_or_default();
        v.push(input);
        self.reports = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of structures, where each structure is one budget report.</p>
    pub fn set_reports(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ServiceLevelObjectiveBudgetReport>>) -> Self {
        self.reports = input;
        self
    }
    /// <p>An array of structures, where each structure is one budget report.</p>
    pub fn get_reports(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ServiceLevelObjectiveBudgetReport>> {
        &self.reports
    }
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>An array of structures, where each structure includes an error indicating that one of the requests in the array was not valid.</p>
    pub fn errors(mut self, input: crate::types::ServiceLevelObjectiveBudgetReportError) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of structures, where each structure includes an error indicating that one of the requests in the array was not valid.</p>
    pub fn set_errors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ServiceLevelObjectiveBudgetReportError>>) -> Self {
        self.errors = input;
        self
    }
    /// <p>An array of structures, where each structure includes an error indicating that one of the requests in the array was not valid.</p>
    pub fn get_errors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ServiceLevelObjectiveBudgetReportError>> {
        &self.errors
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchGetServiceLevelObjectiveBudgetReportOutput`](crate::operation::batch_get_service_level_objective_budget_report::BatchGetServiceLevelObjectiveBudgetReportOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`timestamp`](crate::operation::batch_get_service_level_objective_budget_report::builders::BatchGetServiceLevelObjectiveBudgetReportOutputBuilder::timestamp)
    /// - [`reports`](crate::operation::batch_get_service_level_objective_budget_report::builders::BatchGetServiceLevelObjectiveBudgetReportOutputBuilder::reports)
    /// - [`errors`](crate::operation::batch_get_service_level_objective_budget_report::builders::BatchGetServiceLevelObjectiveBudgetReportOutputBuilder::errors)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_get_service_level_objective_budget_report::BatchGetServiceLevelObjectiveBudgetReportOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::batch_get_service_level_objective_budget_report::BatchGetServiceLevelObjectiveBudgetReportOutput {
                timestamp: self.timestamp.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "timestamp",
                        "timestamp was not specified but it is required when building BatchGetServiceLevelObjectiveBudgetReportOutput",
                    )
                })?,
                reports: self.reports.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "reports",
                        "reports was not specified but it is required when building BatchGetServiceLevelObjectiveBudgetReportOutput",
                    )
                })?,
                errors: self.errors.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "errors",
                        "errors was not specified but it is required when building BatchGetServiceLevelObjectiveBudgetReportOutput",
                    )
                })?,
                _request_id: self._request_id,
            },
        )
    }
}
