// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchUpdateExclusionWindowsInput {
    /// <p>The list of SLO IDs to add or remove exclusion windows from.</p>
    pub slo_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of exclusion windows to add to the specified SLOs. You can add up to 10 exclusion windows per SLO.</p>
    pub add_exclusion_windows: ::std::option::Option<::std::vec::Vec<crate::types::ExclusionWindow>>,
    /// <p>A list of exclusion windows to remove from the specified SLOs. The window configuration must match an existing exclusion window.</p>
    pub remove_exclusion_windows: ::std::option::Option<::std::vec::Vec<crate::types::ExclusionWindow>>,
}
impl BatchUpdateExclusionWindowsInput {
    /// <p>The list of SLO IDs to add or remove exclusion windows from.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.slo_ids.is_none()`.
    pub fn slo_ids(&self) -> &[::std::string::String] {
        self.slo_ids.as_deref().unwrap_or_default()
    }
    /// <p>A list of exclusion windows to add to the specified SLOs. You can add up to 10 exclusion windows per SLO.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.add_exclusion_windows.is_none()`.
    pub fn add_exclusion_windows(&self) -> &[crate::types::ExclusionWindow] {
        self.add_exclusion_windows.as_deref().unwrap_or_default()
    }
    /// <p>A list of exclusion windows to remove from the specified SLOs. The window configuration must match an existing exclusion window.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.remove_exclusion_windows.is_none()`.
    pub fn remove_exclusion_windows(&self) -> &[crate::types::ExclusionWindow] {
        self.remove_exclusion_windows.as_deref().unwrap_or_default()
    }
}
impl BatchUpdateExclusionWindowsInput {
    /// Creates a new builder-style object to manufacture [`BatchUpdateExclusionWindowsInput`](crate::operation::batch_update_exclusion_windows::BatchUpdateExclusionWindowsInput).
    pub fn builder() -> crate::operation::batch_update_exclusion_windows::builders::BatchUpdateExclusionWindowsInputBuilder {
        crate::operation::batch_update_exclusion_windows::builders::BatchUpdateExclusionWindowsInputBuilder::default()
    }
}

/// A builder for [`BatchUpdateExclusionWindowsInput`](crate::operation::batch_update_exclusion_windows::BatchUpdateExclusionWindowsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchUpdateExclusionWindowsInputBuilder {
    pub(crate) slo_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) add_exclusion_windows: ::std::option::Option<::std::vec::Vec<crate::types::ExclusionWindow>>,
    pub(crate) remove_exclusion_windows: ::std::option::Option<::std::vec::Vec<crate::types::ExclusionWindow>>,
}
impl BatchUpdateExclusionWindowsInputBuilder {
    /// Appends an item to `slo_ids`.
    ///
    /// To override the contents of this collection use [`set_slo_ids`](Self::set_slo_ids).
    ///
    /// <p>The list of SLO IDs to add or remove exclusion windows from.</p>
    pub fn slo_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.slo_ids.unwrap_or_default();
        v.push(input.into());
        self.slo_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of SLO IDs to add or remove exclusion windows from.</p>
    pub fn set_slo_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.slo_ids = input;
        self
    }
    /// <p>The list of SLO IDs to add or remove exclusion windows from.</p>
    pub fn get_slo_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.slo_ids
    }
    /// Appends an item to `add_exclusion_windows`.
    ///
    /// To override the contents of this collection use [`set_add_exclusion_windows`](Self::set_add_exclusion_windows).
    ///
    /// <p>A list of exclusion windows to add to the specified SLOs. You can add up to 10 exclusion windows per SLO.</p>
    pub fn add_exclusion_windows(mut self, input: crate::types::ExclusionWindow) -> Self {
        let mut v = self.add_exclusion_windows.unwrap_or_default();
        v.push(input);
        self.add_exclusion_windows = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of exclusion windows to add to the specified SLOs. You can add up to 10 exclusion windows per SLO.</p>
    pub fn set_add_exclusion_windows(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ExclusionWindow>>) -> Self {
        self.add_exclusion_windows = input;
        self
    }
    /// <p>A list of exclusion windows to add to the specified SLOs. You can add up to 10 exclusion windows per SLO.</p>
    pub fn get_add_exclusion_windows(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ExclusionWindow>> {
        &self.add_exclusion_windows
    }
    /// Appends an item to `remove_exclusion_windows`.
    ///
    /// To override the contents of this collection use [`set_remove_exclusion_windows`](Self::set_remove_exclusion_windows).
    ///
    /// <p>A list of exclusion windows to remove from the specified SLOs. The window configuration must match an existing exclusion window.</p>
    pub fn remove_exclusion_windows(mut self, input: crate::types::ExclusionWindow) -> Self {
        let mut v = self.remove_exclusion_windows.unwrap_or_default();
        v.push(input);
        self.remove_exclusion_windows = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of exclusion windows to remove from the specified SLOs. The window configuration must match an existing exclusion window.</p>
    pub fn set_remove_exclusion_windows(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ExclusionWindow>>) -> Self {
        self.remove_exclusion_windows = input;
        self
    }
    /// <p>A list of exclusion windows to remove from the specified SLOs. The window configuration must match an existing exclusion window.</p>
    pub fn get_remove_exclusion_windows(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ExclusionWindow>> {
        &self.remove_exclusion_windows
    }
    /// Consumes the builder and constructs a [`BatchUpdateExclusionWindowsInput`](crate::operation::batch_update_exclusion_windows::BatchUpdateExclusionWindowsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_update_exclusion_windows::BatchUpdateExclusionWindowsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::batch_update_exclusion_windows::BatchUpdateExclusionWindowsInput {
            slo_ids: self.slo_ids,
            add_exclusion_windows: self.add_exclusion_windows,
            remove_exclusion_windows: self.remove_exclusion_windows,
        })
    }
}
