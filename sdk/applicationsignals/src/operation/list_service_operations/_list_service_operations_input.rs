// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListServiceOperationsInput {
    /// <p>The start of the time period to retrieve information about. When used in a raw HTTP Query API, it is formatted as be epoch time in seconds. For example: <code>1698778057</code></p>
    /// <p>Your requested start time will be rounded to the nearest hour.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The end of the time period to retrieve information about. When used in a raw HTTP Query API, it is formatted as be epoch time in seconds. For example: <code>1698778057</code></p>
    /// <p>Your requested end time will be rounded to the nearest hour.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Use this field to specify which service you want to retrieve information for. You must specify at least the <code>Type</code>, <code>Name</code>, and <code>Environment</code> attributes.</p>
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub key_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The maximum number of results to return in one operation. If you omit this parameter, the default of 50 is used.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of service operations.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListServiceOperationsInput {
    /// <p>The start of the time period to retrieve information about. When used in a raw HTTP Query API, it is formatted as be epoch time in seconds. For example: <code>1698778057</code></p>
    /// <p>Your requested start time will be rounded to the nearest hour.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The end of the time period to retrieve information about. When used in a raw HTTP Query API, it is formatted as be epoch time in seconds. For example: <code>1698778057</code></p>
    /// <p>Your requested end time will be rounded to the nearest hour.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>Use this field to specify which service you want to retrieve information for. You must specify at least the <code>Type</code>, <code>Name</code>, and <code>Environment</code> attributes.</p>
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn key_attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.key_attributes.as_ref()
    }
    /// <p>The maximum number of results to return in one operation. If you omit this parameter, the default of 50 is used.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of service operations.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListServiceOperationsInput {
    /// Creates a new builder-style object to manufacture [`ListServiceOperationsInput`](crate::operation::list_service_operations::ListServiceOperationsInput).
    pub fn builder() -> crate::operation::list_service_operations::builders::ListServiceOperationsInputBuilder {
        crate::operation::list_service_operations::builders::ListServiceOperationsInputBuilder::default()
    }
}

/// A builder for [`ListServiceOperationsInput`](crate::operation::list_service_operations::ListServiceOperationsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListServiceOperationsInputBuilder {
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) key_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListServiceOperationsInputBuilder {
    /// <p>The start of the time period to retrieve information about. When used in a raw HTTP Query API, it is formatted as be epoch time in seconds. For example: <code>1698778057</code></p>
    /// <p>Your requested start time will be rounded to the nearest hour.</p>
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start of the time period to retrieve information about. When used in a raw HTTP Query API, it is formatted as be epoch time in seconds. For example: <code>1698778057</code></p>
    /// <p>Your requested start time will be rounded to the nearest hour.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The start of the time period to retrieve information about. When used in a raw HTTP Query API, it is formatted as be epoch time in seconds. For example: <code>1698778057</code></p>
    /// <p>Your requested start time will be rounded to the nearest hour.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The end of the time period to retrieve information about. When used in a raw HTTP Query API, it is formatted as be epoch time in seconds. For example: <code>1698778057</code></p>
    /// <p>Your requested end time will be rounded to the nearest hour.</p>
    /// This field is required.
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end of the time period to retrieve information about. When used in a raw HTTP Query API, it is formatted as be epoch time in seconds. For example: <code>1698778057</code></p>
    /// <p>Your requested end time will be rounded to the nearest hour.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The end of the time period to retrieve information about. When used in a raw HTTP Query API, it is formatted as be epoch time in seconds. For example: <code>1698778057</code></p>
    /// <p>Your requested end time will be rounded to the nearest hour.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// Adds a key-value pair to `key_attributes`.
    ///
    /// To override the contents of this collection use [`set_key_attributes`](Self::set_key_attributes).
    ///
    /// <p>Use this field to specify which service you want to retrieve information for. You must specify at least the <code>Type</code>, <code>Name</code>, and <code>Environment</code> attributes.</p>
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn key_attributes(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.key_attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.key_attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Use this field to specify which service you want to retrieve information for. You must specify at least the <code>Type</code>, <code>Name</code>, and <code>Environment</code> attributes.</p>
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn set_key_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.key_attributes = input;
        self
    }
    /// <p>Use this field to specify which service you want to retrieve information for. You must specify at least the <code>Type</code>, <code>Name</code>, and <code>Environment</code> attributes.</p>
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn get_key_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.key_attributes
    }
    /// <p>The maximum number of results to return in one operation. If you omit this parameter, the default of 50 is used.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return in one operation. If you omit this parameter, the default of 50 is used.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return in one operation. If you omit this parameter, the default of 50 is used.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of service operations.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of service operations.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of service operations.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListServiceOperationsInput`](crate::operation::list_service_operations::ListServiceOperationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_service_operations::ListServiceOperationsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_service_operations::ListServiceOperationsInput {
            start_time: self.start_time,
            end_time: self.end_time,
            key_attributes: self.key_attributes,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
