// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListServiceLevelObjectivesInput {
    /// <p>You can use this optional field to specify which services you want to retrieve SLO information for.</p>
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub key_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The name of the operation that this SLO is associated with.</p>
    pub operation_name: ::std::option::Option<::std::string::String>,
    /// <p>Identifies the dependency using the <code>DependencyKeyAttributes</code> and <code>DependencyOperationName</code>.</p>
    pub dependency_config: ::std::option::Option<crate::types::DependencyConfig>,
    /// <p>The maximum number of results to return in one operation. If you omit this parameter, the default of 50 is used.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of service level objectives.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Use this optional field to only include SLOs with the specified metric source types in the output. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p>Service operation</p></li>
    /// <li>
    /// <p>Service dependency</p></li>
    /// <li>
    /// <p>CloudWatch metric</p></li>
    /// </ul>
    pub metric_source_types: ::std::option::Option<::std::vec::Vec<crate::types::MetricSourceType>>,
    /// <p>If you are using this operation in a monitoring account, specify <code>true</code> to include SLO from source accounts in the returned data.</p>
    /// <p>When you are monitoring an account, you can use Amazon Web Services account ID in <code>KeyAttribute</code> filter for service source account and <code>SloOwnerawsaccountID</code> for SLO source account with <code>IncludeLinkedAccounts</code> to filter the returned data to only a single source account.</p>
    pub include_linked_accounts: ::std::option::Option<bool>,
    /// <p>SLO's Amazon Web Services account ID.</p>
    pub slo_owner_aws_account_id: ::std::option::Option<::std::string::String>,
}
impl ListServiceLevelObjectivesInput {
    /// <p>You can use this optional field to specify which services you want to retrieve SLO information for.</p>
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn key_attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.key_attributes.as_ref()
    }
    /// <p>The name of the operation that this SLO is associated with.</p>
    pub fn operation_name(&self) -> ::std::option::Option<&str> {
        self.operation_name.as_deref()
    }
    /// <p>Identifies the dependency using the <code>DependencyKeyAttributes</code> and <code>DependencyOperationName</code>.</p>
    pub fn dependency_config(&self) -> ::std::option::Option<&crate::types::DependencyConfig> {
        self.dependency_config.as_ref()
    }
    /// <p>The maximum number of results to return in one operation. If you omit this parameter, the default of 50 is used.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of service level objectives.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Use this optional field to only include SLOs with the specified metric source types in the output. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p>Service operation</p></li>
    /// <li>
    /// <p>Service dependency</p></li>
    /// <li>
    /// <p>CloudWatch metric</p></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metric_source_types.is_none()`.
    pub fn metric_source_types(&self) -> &[crate::types::MetricSourceType] {
        self.metric_source_types.as_deref().unwrap_or_default()
    }
    /// <p>If you are using this operation in a monitoring account, specify <code>true</code> to include SLO from source accounts in the returned data.</p>
    /// <p>When you are monitoring an account, you can use Amazon Web Services account ID in <code>KeyAttribute</code> filter for service source account and <code>SloOwnerawsaccountID</code> for SLO source account with <code>IncludeLinkedAccounts</code> to filter the returned data to only a single source account.</p>
    pub fn include_linked_accounts(&self) -> ::std::option::Option<bool> {
        self.include_linked_accounts
    }
    /// <p>SLO's Amazon Web Services account ID.</p>
    pub fn slo_owner_aws_account_id(&self) -> ::std::option::Option<&str> {
        self.slo_owner_aws_account_id.as_deref()
    }
}
impl ListServiceLevelObjectivesInput {
    /// Creates a new builder-style object to manufacture [`ListServiceLevelObjectivesInput`](crate::operation::list_service_level_objectives::ListServiceLevelObjectivesInput).
    pub fn builder() -> crate::operation::list_service_level_objectives::builders::ListServiceLevelObjectivesInputBuilder {
        crate::operation::list_service_level_objectives::builders::ListServiceLevelObjectivesInputBuilder::default()
    }
}

/// A builder for [`ListServiceLevelObjectivesInput`](crate::operation::list_service_level_objectives::ListServiceLevelObjectivesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListServiceLevelObjectivesInputBuilder {
    pub(crate) key_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) operation_name: ::std::option::Option<::std::string::String>,
    pub(crate) dependency_config: ::std::option::Option<crate::types::DependencyConfig>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) metric_source_types: ::std::option::Option<::std::vec::Vec<crate::types::MetricSourceType>>,
    pub(crate) include_linked_accounts: ::std::option::Option<bool>,
    pub(crate) slo_owner_aws_account_id: ::std::option::Option<::std::string::String>,
}
impl ListServiceLevelObjectivesInputBuilder {
    /// Adds a key-value pair to `key_attributes`.
    ///
    /// To override the contents of this collection use [`set_key_attributes`](Self::set_key_attributes).
    ///
    /// <p>You can use this optional field to specify which services you want to retrieve SLO information for.</p>
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn key_attributes(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.key_attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.key_attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>You can use this optional field to specify which services you want to retrieve SLO information for.</p>
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn set_key_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.key_attributes = input;
        self
    }
    /// <p>You can use this optional field to specify which services you want to retrieve SLO information for.</p>
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn get_key_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.key_attributes
    }
    /// <p>The name of the operation that this SLO is associated with.</p>
    pub fn operation_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the operation that this SLO is associated with.</p>
    pub fn set_operation_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation_name = input;
        self
    }
    /// <p>The name of the operation that this SLO is associated with.</p>
    pub fn get_operation_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation_name
    }
    /// <p>Identifies the dependency using the <code>DependencyKeyAttributes</code> and <code>DependencyOperationName</code>.</p>
    pub fn dependency_config(mut self, input: crate::types::DependencyConfig) -> Self {
        self.dependency_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies the dependency using the <code>DependencyKeyAttributes</code> and <code>DependencyOperationName</code>.</p>
    pub fn set_dependency_config(mut self, input: ::std::option::Option<crate::types::DependencyConfig>) -> Self {
        self.dependency_config = input;
        self
    }
    /// <p>Identifies the dependency using the <code>DependencyKeyAttributes</code> and <code>DependencyOperationName</code>.</p>
    pub fn get_dependency_config(&self) -> &::std::option::Option<crate::types::DependencyConfig> {
        &self.dependency_config
    }
    /// <p>The maximum number of results to return in one operation. If you omit this parameter, the default of 50 is used.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return in one operation. If you omit this parameter, the default of 50 is used.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return in one operation. If you omit this parameter, the default of 50 is used.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of service level objectives.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of service level objectives.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of service level objectives.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `metric_source_types`.
    ///
    /// To override the contents of this collection use [`set_metric_source_types`](Self::set_metric_source_types).
    ///
    /// <p>Use this optional field to only include SLOs with the specified metric source types in the output. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p>Service operation</p></li>
    /// <li>
    /// <p>Service dependency</p></li>
    /// <li>
    /// <p>CloudWatch metric</p></li>
    /// </ul>
    pub fn metric_source_types(mut self, input: crate::types::MetricSourceType) -> Self {
        let mut v = self.metric_source_types.unwrap_or_default();
        v.push(input);
        self.metric_source_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>Use this optional field to only include SLOs with the specified metric source types in the output. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p>Service operation</p></li>
    /// <li>
    /// <p>Service dependency</p></li>
    /// <li>
    /// <p>CloudWatch metric</p></li>
    /// </ul>
    pub fn set_metric_source_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetricSourceType>>) -> Self {
        self.metric_source_types = input;
        self
    }
    /// <p>Use this optional field to only include SLOs with the specified metric source types in the output. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p>Service operation</p></li>
    /// <li>
    /// <p>Service dependency</p></li>
    /// <li>
    /// <p>CloudWatch metric</p></li>
    /// </ul>
    pub fn get_metric_source_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetricSourceType>> {
        &self.metric_source_types
    }
    /// <p>If you are using this operation in a monitoring account, specify <code>true</code> to include SLO from source accounts in the returned data.</p>
    /// <p>When you are monitoring an account, you can use Amazon Web Services account ID in <code>KeyAttribute</code> filter for service source account and <code>SloOwnerawsaccountID</code> for SLO source account with <code>IncludeLinkedAccounts</code> to filter the returned data to only a single source account.</p>
    pub fn include_linked_accounts(mut self, input: bool) -> Self {
        self.include_linked_accounts = ::std::option::Option::Some(input);
        self
    }
    /// <p>If you are using this operation in a monitoring account, specify <code>true</code> to include SLO from source accounts in the returned data.</p>
    /// <p>When you are monitoring an account, you can use Amazon Web Services account ID in <code>KeyAttribute</code> filter for service source account and <code>SloOwnerawsaccountID</code> for SLO source account with <code>IncludeLinkedAccounts</code> to filter the returned data to only a single source account.</p>
    pub fn set_include_linked_accounts(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_linked_accounts = input;
        self
    }
    /// <p>If you are using this operation in a monitoring account, specify <code>true</code> to include SLO from source accounts in the returned data.</p>
    /// <p>When you are monitoring an account, you can use Amazon Web Services account ID in <code>KeyAttribute</code> filter for service source account and <code>SloOwnerawsaccountID</code> for SLO source account with <code>IncludeLinkedAccounts</code> to filter the returned data to only a single source account.</p>
    pub fn get_include_linked_accounts(&self) -> &::std::option::Option<bool> {
        &self.include_linked_accounts
    }
    /// <p>SLO's Amazon Web Services account ID.</p>
    pub fn slo_owner_aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slo_owner_aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>SLO's Amazon Web Services account ID.</p>
    pub fn set_slo_owner_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slo_owner_aws_account_id = input;
        self
    }
    /// <p>SLO's Amazon Web Services account ID.</p>
    pub fn get_slo_owner_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.slo_owner_aws_account_id
    }
    /// Consumes the builder and constructs a [`ListServiceLevelObjectivesInput`](crate::operation::list_service_level_objectives::ListServiceLevelObjectivesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_service_level_objectives::ListServiceLevelObjectivesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_service_level_objectives::ListServiceLevelObjectivesInput {
            key_attributes: self.key_attributes,
            operation_name: self.operation_name,
            dependency_config: self.dependency_config,
            max_results: self.max_results,
            next_token: self.next_token,
            metric_source_types: self.metric_source_types,
            include_linked_accounts: self.include_linked_accounts,
            slo_owner_aws_account_id: self.slo_owner_aws_account_id,
        })
    }
}
