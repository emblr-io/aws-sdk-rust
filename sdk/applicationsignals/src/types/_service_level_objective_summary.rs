// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains information about one service level objective (SLO) created in Application Signals.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceLevelObjectiveSummary {
    /// <p>The ARN of this service level objective.</p>
    pub arn: ::std::string::String,
    /// <p>The name of the service level objective.</p>
    pub name: ::std::string::String,
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this service level objective is for.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub key_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>If this service level objective is specific to a single operation, this field displays the name of that operation.</p>
    pub operation_name: ::std::option::Option<::std::string::String>,
    /// <p>Identifies the dependency using the <code>DependencyKeyAttributes</code> and <code>DependencyOperationName</code>.</p>
    pub dependency_config: ::std::option::Option<crate::types::DependencyConfig>,
    /// <p>The date and time that this service level objective was created. It is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.</p>
    pub created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Displays whether this is a period-based SLO or a request-based SLO.</p>
    pub evaluation_type: ::std::option::Option<crate::types::EvaluationType>,
    /// <p>Displays the SLI metric source type for this SLO. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p>Service operation</p></li>
    /// <li>
    /// <p>Service dependency</p></li>
    /// <li>
    /// <p>CloudWatch metric</p></li>
    /// </ul>
    pub metric_source_type: ::std::option::Option<crate::types::MetricSourceType>,
}
impl ServiceLevelObjectiveSummary {
    /// <p>The ARN of this service level objective.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The name of the service level objective.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this service level objective is for.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn key_attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.key_attributes.as_ref()
    }
    /// <p>If this service level objective is specific to a single operation, this field displays the name of that operation.</p>
    pub fn operation_name(&self) -> ::std::option::Option<&str> {
        self.operation_name.as_deref()
    }
    /// <p>Identifies the dependency using the <code>DependencyKeyAttributes</code> and <code>DependencyOperationName</code>.</p>
    pub fn dependency_config(&self) -> ::std::option::Option<&crate::types::DependencyConfig> {
        self.dependency_config.as_ref()
    }
    /// <p>The date and time that this service level objective was created. It is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.</p>
    pub fn created_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>Displays whether this is a period-based SLO or a request-based SLO.</p>
    pub fn evaluation_type(&self) -> ::std::option::Option<&crate::types::EvaluationType> {
        self.evaluation_type.as_ref()
    }
    /// <p>Displays the SLI metric source type for this SLO. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p>Service operation</p></li>
    /// <li>
    /// <p>Service dependency</p></li>
    /// <li>
    /// <p>CloudWatch metric</p></li>
    /// </ul>
    pub fn metric_source_type(&self) -> ::std::option::Option<&crate::types::MetricSourceType> {
        self.metric_source_type.as_ref()
    }
}
impl ServiceLevelObjectiveSummary {
    /// Creates a new builder-style object to manufacture [`ServiceLevelObjectiveSummary`](crate::types::ServiceLevelObjectiveSummary).
    pub fn builder() -> crate::types::builders::ServiceLevelObjectiveSummaryBuilder {
        crate::types::builders::ServiceLevelObjectiveSummaryBuilder::default()
    }
}

/// A builder for [`ServiceLevelObjectiveSummary`](crate::types::ServiceLevelObjectiveSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceLevelObjectiveSummaryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) key_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) operation_name: ::std::option::Option<::std::string::String>,
    pub(crate) dependency_config: ::std::option::Option<crate::types::DependencyConfig>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) evaluation_type: ::std::option::Option<crate::types::EvaluationType>,
    pub(crate) metric_source_type: ::std::option::Option<crate::types::MetricSourceType>,
}
impl ServiceLevelObjectiveSummaryBuilder {
    /// <p>The ARN of this service level objective.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of this service level objective.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of this service level objective.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the service level objective.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the service level objective.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the service level objective.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Adds a key-value pair to `key_attributes`.
    ///
    /// To override the contents of this collection use [`set_key_attributes`](Self::set_key_attributes).
    ///
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this service level objective is for.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn key_attributes(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.key_attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.key_attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this service level objective is for.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn set_key_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.key_attributes = input;
        self
    }
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this service level objective is for.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn get_key_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.key_attributes
    }
    /// <p>If this service level objective is specific to a single operation, this field displays the name of that operation.</p>
    pub fn operation_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If this service level objective is specific to a single operation, this field displays the name of that operation.</p>
    pub fn set_operation_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation_name = input;
        self
    }
    /// <p>If this service level objective is specific to a single operation, this field displays the name of that operation.</p>
    pub fn get_operation_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation_name
    }
    /// <p>Identifies the dependency using the <code>DependencyKeyAttributes</code> and <code>DependencyOperationName</code>.</p>
    pub fn dependency_config(mut self, input: crate::types::DependencyConfig) -> Self {
        self.dependency_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies the dependency using the <code>DependencyKeyAttributes</code> and <code>DependencyOperationName</code>.</p>
    pub fn set_dependency_config(mut self, input: ::std::option::Option<crate::types::DependencyConfig>) -> Self {
        self.dependency_config = input;
        self
    }
    /// <p>Identifies the dependency using the <code>DependencyKeyAttributes</code> and <code>DependencyOperationName</code>.</p>
    pub fn get_dependency_config(&self) -> &::std::option::Option<crate::types::DependencyConfig> {
        &self.dependency_config
    }
    /// <p>The date and time that this service level objective was created. It is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.</p>
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that this service level objective was created. It is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The date and time that this service level objective was created. It is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>Displays whether this is a period-based SLO or a request-based SLO.</p>
    pub fn evaluation_type(mut self, input: crate::types::EvaluationType) -> Self {
        self.evaluation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Displays whether this is a period-based SLO or a request-based SLO.</p>
    pub fn set_evaluation_type(mut self, input: ::std::option::Option<crate::types::EvaluationType>) -> Self {
        self.evaluation_type = input;
        self
    }
    /// <p>Displays whether this is a period-based SLO or a request-based SLO.</p>
    pub fn get_evaluation_type(&self) -> &::std::option::Option<crate::types::EvaluationType> {
        &self.evaluation_type
    }
    /// <p>Displays the SLI metric source type for this SLO. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p>Service operation</p></li>
    /// <li>
    /// <p>Service dependency</p></li>
    /// <li>
    /// <p>CloudWatch metric</p></li>
    /// </ul>
    pub fn metric_source_type(mut self, input: crate::types::MetricSourceType) -> Self {
        self.metric_source_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Displays the SLI metric source type for this SLO. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p>Service operation</p></li>
    /// <li>
    /// <p>Service dependency</p></li>
    /// <li>
    /// <p>CloudWatch metric</p></li>
    /// </ul>
    pub fn set_metric_source_type(mut self, input: ::std::option::Option<crate::types::MetricSourceType>) -> Self {
        self.metric_source_type = input;
        self
    }
    /// <p>Displays the SLI metric source type for this SLO. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p>Service operation</p></li>
    /// <li>
    /// <p>Service dependency</p></li>
    /// <li>
    /// <p>CloudWatch metric</p></li>
    /// </ul>
    pub fn get_metric_source_type(&self) -> &::std::option::Option<crate::types::MetricSourceType> {
        &self.metric_source_type
    }
    /// Consumes the builder and constructs a [`ServiceLevelObjectiveSummary`](crate::types::ServiceLevelObjectiveSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::ServiceLevelObjectiveSummaryBuilder::arn)
    /// - [`name`](crate::types::builders::ServiceLevelObjectiveSummaryBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::ServiceLevelObjectiveSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ServiceLevelObjectiveSummary {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building ServiceLevelObjectiveSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building ServiceLevelObjectiveSummary",
                )
            })?,
            key_attributes: self.key_attributes,
            operation_name: self.operation_name,
            dependency_config: self.dependency_config,
            created_time: self.created_time,
            evaluation_type: self.evaluation_type,
            metric_source_type: self.metric_source_type,
        })
    }
}
