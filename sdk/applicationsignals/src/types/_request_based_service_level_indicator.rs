// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains information about the performance metric that a request-based SLO monitors.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RequestBasedServiceLevelIndicator {
    /// <p>A structure that contains information about the metric that the SLO monitors.</p>
    pub request_based_sli_metric: ::std::option::Option<crate::types::RequestBasedServiceLevelIndicatorMetric>,
    /// <p>This value is the threshold that the observed metric values of the SLI metric are compared to.</p>
    pub metric_threshold: ::std::option::Option<f64>,
    /// <p>The arithmetic operation used when comparing the specified metric to the threshold.</p>
    pub comparison_operator: ::std::option::Option<crate::types::ServiceLevelIndicatorComparisonOperator>,
}
impl RequestBasedServiceLevelIndicator {
    /// <p>A structure that contains information about the metric that the SLO monitors.</p>
    pub fn request_based_sli_metric(&self) -> ::std::option::Option<&crate::types::RequestBasedServiceLevelIndicatorMetric> {
        self.request_based_sli_metric.as_ref()
    }
    /// <p>This value is the threshold that the observed metric values of the SLI metric are compared to.</p>
    pub fn metric_threshold(&self) -> ::std::option::Option<f64> {
        self.metric_threshold
    }
    /// <p>The arithmetic operation used when comparing the specified metric to the threshold.</p>
    pub fn comparison_operator(&self) -> ::std::option::Option<&crate::types::ServiceLevelIndicatorComparisonOperator> {
        self.comparison_operator.as_ref()
    }
}
impl RequestBasedServiceLevelIndicator {
    /// Creates a new builder-style object to manufacture [`RequestBasedServiceLevelIndicator`](crate::types::RequestBasedServiceLevelIndicator).
    pub fn builder() -> crate::types::builders::RequestBasedServiceLevelIndicatorBuilder {
        crate::types::builders::RequestBasedServiceLevelIndicatorBuilder::default()
    }
}

/// A builder for [`RequestBasedServiceLevelIndicator`](crate::types::RequestBasedServiceLevelIndicator).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RequestBasedServiceLevelIndicatorBuilder {
    pub(crate) request_based_sli_metric: ::std::option::Option<crate::types::RequestBasedServiceLevelIndicatorMetric>,
    pub(crate) metric_threshold: ::std::option::Option<f64>,
    pub(crate) comparison_operator: ::std::option::Option<crate::types::ServiceLevelIndicatorComparisonOperator>,
}
impl RequestBasedServiceLevelIndicatorBuilder {
    /// <p>A structure that contains information about the metric that the SLO monitors.</p>
    /// This field is required.
    pub fn request_based_sli_metric(mut self, input: crate::types::RequestBasedServiceLevelIndicatorMetric) -> Self {
        self.request_based_sli_metric = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that contains information about the metric that the SLO monitors.</p>
    pub fn set_request_based_sli_metric(mut self, input: ::std::option::Option<crate::types::RequestBasedServiceLevelIndicatorMetric>) -> Self {
        self.request_based_sli_metric = input;
        self
    }
    /// <p>A structure that contains information about the metric that the SLO monitors.</p>
    pub fn get_request_based_sli_metric(&self) -> &::std::option::Option<crate::types::RequestBasedServiceLevelIndicatorMetric> {
        &self.request_based_sli_metric
    }
    /// <p>This value is the threshold that the observed metric values of the SLI metric are compared to.</p>
    pub fn metric_threshold(mut self, input: f64) -> Self {
        self.metric_threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>This value is the threshold that the observed metric values of the SLI metric are compared to.</p>
    pub fn set_metric_threshold(mut self, input: ::std::option::Option<f64>) -> Self {
        self.metric_threshold = input;
        self
    }
    /// <p>This value is the threshold that the observed metric values of the SLI metric are compared to.</p>
    pub fn get_metric_threshold(&self) -> &::std::option::Option<f64> {
        &self.metric_threshold
    }
    /// <p>The arithmetic operation used when comparing the specified metric to the threshold.</p>
    pub fn comparison_operator(mut self, input: crate::types::ServiceLevelIndicatorComparisonOperator) -> Self {
        self.comparison_operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The arithmetic operation used when comparing the specified metric to the threshold.</p>
    pub fn set_comparison_operator(mut self, input: ::std::option::Option<crate::types::ServiceLevelIndicatorComparisonOperator>) -> Self {
        self.comparison_operator = input;
        self
    }
    /// <p>The arithmetic operation used when comparing the specified metric to the threshold.</p>
    pub fn get_comparison_operator(&self) -> &::std::option::Option<crate::types::ServiceLevelIndicatorComparisonOperator> {
        &self.comparison_operator
    }
    /// Consumes the builder and constructs a [`RequestBasedServiceLevelIndicator`](crate::types::RequestBasedServiceLevelIndicator).
    pub fn build(self) -> crate::types::RequestBasedServiceLevelIndicator {
        crate::types::RequestBasedServiceLevelIndicator {
            request_based_sli_metric: self.request_based_sli_metric,
            metric_threshold: self.metric_threshold,
            comparison_operator: self.comparison_operator,
        }
    }
}
