// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The core SLO time window exclusion object that includes Window, StartTime, RecurrenceRule, and Reason.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExclusionWindow {
    /// <p>The SLO time window exclusion .</p>
    pub window: ::std::option::Option<crate::types::Window>,
    /// <p>The start of the SLO time window exclusion. Defaults to current time if not specified.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The recurrence rule for the SLO time window exclusion. Supports both cron and rate expressions.</p>
    pub recurrence_rule: ::std::option::Option<crate::types::RecurrenceRule>,
    /// <p>A description explaining why this time period should be excluded from SLO calculations.</p>
    pub reason: ::std::option::Option<::std::string::String>,
}
impl ExclusionWindow {
    /// <p>The SLO time window exclusion .</p>
    pub fn window(&self) -> ::std::option::Option<&crate::types::Window> {
        self.window.as_ref()
    }
    /// <p>The start of the SLO time window exclusion. Defaults to current time if not specified.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The recurrence rule for the SLO time window exclusion. Supports both cron and rate expressions.</p>
    pub fn recurrence_rule(&self) -> ::std::option::Option<&crate::types::RecurrenceRule> {
        self.recurrence_rule.as_ref()
    }
    /// <p>A description explaining why this time period should be excluded from SLO calculations.</p>
    pub fn reason(&self) -> ::std::option::Option<&str> {
        self.reason.as_deref()
    }
}
impl ExclusionWindow {
    /// Creates a new builder-style object to manufacture [`ExclusionWindow`](crate::types::ExclusionWindow).
    pub fn builder() -> crate::types::builders::ExclusionWindowBuilder {
        crate::types::builders::ExclusionWindowBuilder::default()
    }
}

/// A builder for [`ExclusionWindow`](crate::types::ExclusionWindow).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ExclusionWindowBuilder {
    pub(crate) window: ::std::option::Option<crate::types::Window>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) recurrence_rule: ::std::option::Option<crate::types::RecurrenceRule>,
    pub(crate) reason: ::std::option::Option<::std::string::String>,
}
impl ExclusionWindowBuilder {
    /// <p>The SLO time window exclusion .</p>
    /// This field is required.
    pub fn window(mut self, input: crate::types::Window) -> Self {
        self.window = ::std::option::Option::Some(input);
        self
    }
    /// <p>The SLO time window exclusion .</p>
    pub fn set_window(mut self, input: ::std::option::Option<crate::types::Window>) -> Self {
        self.window = input;
        self
    }
    /// <p>The SLO time window exclusion .</p>
    pub fn get_window(&self) -> &::std::option::Option<crate::types::Window> {
        &self.window
    }
    /// <p>The start of the SLO time window exclusion. Defaults to current time if not specified.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start of the SLO time window exclusion. Defaults to current time if not specified.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The start of the SLO time window exclusion. Defaults to current time if not specified.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The recurrence rule for the SLO time window exclusion. Supports both cron and rate expressions.</p>
    pub fn recurrence_rule(mut self, input: crate::types::RecurrenceRule) -> Self {
        self.recurrence_rule = ::std::option::Option::Some(input);
        self
    }
    /// <p>The recurrence rule for the SLO time window exclusion. Supports both cron and rate expressions.</p>
    pub fn set_recurrence_rule(mut self, input: ::std::option::Option<crate::types::RecurrenceRule>) -> Self {
        self.recurrence_rule = input;
        self
    }
    /// <p>The recurrence rule for the SLO time window exclusion. Supports both cron and rate expressions.</p>
    pub fn get_recurrence_rule(&self) -> &::std::option::Option<crate::types::RecurrenceRule> {
        &self.recurrence_rule
    }
    /// <p>A description explaining why this time period should be excluded from SLO calculations.</p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description explaining why this time period should be excluded from SLO calculations.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>A description explaining why this time period should be excluded from SLO calculations.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// Consumes the builder and constructs a [`ExclusionWindow`](crate::types::ExclusionWindow).
    pub fn build(self) -> crate::types::ExclusionWindow {
        crate::types::ExclusionWindow {
            window: self.window,
            start_time: self.start_time,
            recurrence_rule: self.recurrence_rule,
            reason: self.reason,
        }
    }
}
