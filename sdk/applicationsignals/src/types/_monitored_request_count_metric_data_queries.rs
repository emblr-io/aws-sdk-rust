// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure defines the metric that is used as the "good request" or "bad request" value for a request-based SLO. This value observed for the metric defined in <code>TotalRequestCountMetric</code> is divided by the number found for <code>MonitoredRequestCountMetric</code> to determine the percentage of successful requests that this SLO tracks.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum MonitoredRequestCountMetricDataQueries {
    /// <p>If you want to count "bad requests" to determine the percentage of successful requests for this request-based SLO, specify the metric to use as "bad requests" in this structure.</p>
    BadCountMetric(::std::vec::Vec<crate::types::MetricDataQuery>),
    /// <p>If you want to count "good requests" to determine the percentage of successful requests for this request-based SLO, specify the metric to use as "good requests" in this structure.</p>
    GoodCountMetric(::std::vec::Vec<crate::types::MetricDataQuery>),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl MonitoredRequestCountMetricDataQueries {
    /// Tries to convert the enum instance into [`BadCountMetric`](crate::types::MonitoredRequestCountMetricDataQueries::BadCountMetric), extracting the inner [`Vec`](::std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_bad_count_metric(&self) -> ::std::result::Result<&::std::vec::Vec<crate::types::MetricDataQuery>, &Self> {
        if let MonitoredRequestCountMetricDataQueries::BadCountMetric(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`BadCountMetric`](crate::types::MonitoredRequestCountMetricDataQueries::BadCountMetric).
    pub fn is_bad_count_metric(&self) -> bool {
        self.as_bad_count_metric().is_ok()
    }
    /// Tries to convert the enum instance into [`GoodCountMetric`](crate::types::MonitoredRequestCountMetricDataQueries::GoodCountMetric), extracting the inner [`Vec`](::std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_good_count_metric(&self) -> ::std::result::Result<&::std::vec::Vec<crate::types::MetricDataQuery>, &Self> {
        if let MonitoredRequestCountMetricDataQueries::GoodCountMetric(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`GoodCountMetric`](crate::types::MonitoredRequestCountMetricDataQueries::GoodCountMetric).
    pub fn is_good_count_metric(&self) -> bool {
        self.as_good_count_metric().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
