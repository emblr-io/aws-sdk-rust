// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains information about one CloudWatch metric associated with this entity discovered by Application Signals.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetricReference {
    /// <p>The namespace of the metric. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace">CloudWatchNamespaces</a>.</p>
    pub namespace: ::std::string::String,
    /// <p>Used to display the appropriate statistics in the CloudWatch console.</p>
    pub metric_type: ::std::string::String,
    /// <p>An array of one or more dimensions that further define the metric. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Dimension">CloudWatchDimensions</a>.</p>
    pub dimensions: ::std::option::Option<::std::vec::Vec<crate::types::Dimension>>,
    /// <p>The name of the metric.</p>
    pub metric_name: ::std::string::String,
    /// <p>Amazon Web Services account ID.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
}
impl MetricReference {
    /// <p>The namespace of the metric. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace">CloudWatchNamespaces</a>.</p>
    pub fn namespace(&self) -> &str {
        use std::ops::Deref;
        self.namespace.deref()
    }
    /// <p>Used to display the appropriate statistics in the CloudWatch console.</p>
    pub fn metric_type(&self) -> &str {
        use std::ops::Deref;
        self.metric_type.deref()
    }
    /// <p>An array of one or more dimensions that further define the metric. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Dimension">CloudWatchDimensions</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dimensions.is_none()`.
    pub fn dimensions(&self) -> &[crate::types::Dimension] {
        self.dimensions.as_deref().unwrap_or_default()
    }
    /// <p>The name of the metric.</p>
    pub fn metric_name(&self) -> &str {
        use std::ops::Deref;
        self.metric_name.deref()
    }
    /// <p>Amazon Web Services account ID.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
}
impl MetricReference {
    /// Creates a new builder-style object to manufacture [`MetricReference`](crate::types::MetricReference).
    pub fn builder() -> crate::types::builders::MetricReferenceBuilder {
        crate::types::builders::MetricReferenceBuilder::default()
    }
}

/// A builder for [`MetricReference`](crate::types::MetricReference).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MetricReferenceBuilder {
    pub(crate) namespace: ::std::option::Option<::std::string::String>,
    pub(crate) metric_type: ::std::option::Option<::std::string::String>,
    pub(crate) dimensions: ::std::option::Option<::std::vec::Vec<crate::types::Dimension>>,
    pub(crate) metric_name: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
}
impl MetricReferenceBuilder {
    /// <p>The namespace of the metric. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace">CloudWatchNamespaces</a>.</p>
    /// This field is required.
    pub fn namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.namespace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The namespace of the metric. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace">CloudWatchNamespaces</a>.</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The namespace of the metric. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace">CloudWatchNamespaces</a>.</p>
    pub fn get_namespace(&self) -> &::std::option::Option<::std::string::String> {
        &self.namespace
    }
    /// <p>Used to display the appropriate statistics in the CloudWatch console.</p>
    /// This field is required.
    pub fn metric_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metric_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Used to display the appropriate statistics in the CloudWatch console.</p>
    pub fn set_metric_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metric_type = input;
        self
    }
    /// <p>Used to display the appropriate statistics in the CloudWatch console.</p>
    pub fn get_metric_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.metric_type
    }
    /// Appends an item to `dimensions`.
    ///
    /// To override the contents of this collection use [`set_dimensions`](Self::set_dimensions).
    ///
    /// <p>An array of one or more dimensions that further define the metric. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Dimension">CloudWatchDimensions</a>.</p>
    pub fn dimensions(mut self, input: crate::types::Dimension) -> Self {
        let mut v = self.dimensions.unwrap_or_default();
        v.push(input);
        self.dimensions = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of one or more dimensions that further define the metric. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Dimension">CloudWatchDimensions</a>.</p>
    pub fn set_dimensions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Dimension>>) -> Self {
        self.dimensions = input;
        self
    }
    /// <p>An array of one or more dimensions that further define the metric. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Dimension">CloudWatchDimensions</a>.</p>
    pub fn get_dimensions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Dimension>> {
        &self.dimensions
    }
    /// <p>The name of the metric.</p>
    /// This field is required.
    pub fn metric_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metric_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the metric.</p>
    pub fn set_metric_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metric_name = input;
        self
    }
    /// <p>The name of the metric.</p>
    pub fn get_metric_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.metric_name
    }
    /// <p>Amazon Web Services account ID.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Web Services account ID.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>Amazon Web Services account ID.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// Consumes the builder and constructs a [`MetricReference`](crate::types::MetricReference).
    /// This method will fail if any of the following fields are not set:
    /// - [`namespace`](crate::types::builders::MetricReferenceBuilder::namespace)
    /// - [`metric_type`](crate::types::builders::MetricReferenceBuilder::metric_type)
    /// - [`metric_name`](crate::types::builders::MetricReferenceBuilder::metric_name)
    pub fn build(self) -> ::std::result::Result<crate::types::MetricReference, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MetricReference {
            namespace: self.namespace.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "namespace",
                    "namespace was not specified but it is required when building MetricReference",
                )
            })?,
            metric_type: self.metric_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metric_type",
                    "metric_type was not specified but it is required when building MetricReference",
                )
            })?,
            dimensions: self.dimensions,
            metric_name: self.metric_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metric_name",
                    "metric_name was not specified but it is required when building MetricReference",
                )
            })?,
            account_id: self.account_id,
        })
    }
}
