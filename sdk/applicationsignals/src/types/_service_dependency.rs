// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains information about one dependency of this service.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceDependency {
    /// <p>The name of the operation in this service that calls the dependency.</p>
    pub operation_name: ::std::string::String,
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub dependency_key_attributes: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    /// <p>The name of the called operation in the dependency.</p>
    pub dependency_operation_name: ::std::string::String,
    /// <p>An array of structures that each contain information about one metric associated with this service dependency that was discovered by Application Signals.</p>
    pub metric_references: ::std::vec::Vec<crate::types::MetricReference>,
}
impl ServiceDependency {
    /// <p>The name of the operation in this service that calls the dependency.</p>
    pub fn operation_name(&self) -> &str {
        use std::ops::Deref;
        self.operation_name.deref()
    }
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn dependency_key_attributes(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.dependency_key_attributes
    }
    /// <p>The name of the called operation in the dependency.</p>
    pub fn dependency_operation_name(&self) -> &str {
        use std::ops::Deref;
        self.dependency_operation_name.deref()
    }
    /// <p>An array of structures that each contain information about one metric associated with this service dependency that was discovered by Application Signals.</p>
    pub fn metric_references(&self) -> &[crate::types::MetricReference] {
        use std::ops::Deref;
        self.metric_references.deref()
    }
}
impl ServiceDependency {
    /// Creates a new builder-style object to manufacture [`ServiceDependency`](crate::types::ServiceDependency).
    pub fn builder() -> crate::types::builders::ServiceDependencyBuilder {
        crate::types::builders::ServiceDependencyBuilder::default()
    }
}

/// A builder for [`ServiceDependency`](crate::types::ServiceDependency).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceDependencyBuilder {
    pub(crate) operation_name: ::std::option::Option<::std::string::String>,
    pub(crate) dependency_key_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) dependency_operation_name: ::std::option::Option<::std::string::String>,
    pub(crate) metric_references: ::std::option::Option<::std::vec::Vec<crate::types::MetricReference>>,
}
impl ServiceDependencyBuilder {
    /// <p>The name of the operation in this service that calls the dependency.</p>
    /// This field is required.
    pub fn operation_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the operation in this service that calls the dependency.</p>
    pub fn set_operation_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation_name = input;
        self
    }
    /// <p>The name of the operation in this service that calls the dependency.</p>
    pub fn get_operation_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation_name
    }
    /// Adds a key-value pair to `dependency_key_attributes`.
    ///
    /// To override the contents of this collection use [`set_dependency_key_attributes`](Self::set_dependency_key_attributes).
    ///
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn dependency_key_attributes(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.dependency_key_attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.dependency_key_attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn set_dependency_key_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.dependency_key_attributes = input;
        self
    }
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn get_dependency_key_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.dependency_key_attributes
    }
    /// <p>The name of the called operation in the dependency.</p>
    /// This field is required.
    pub fn dependency_operation_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dependency_operation_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the called operation in the dependency.</p>
    pub fn set_dependency_operation_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dependency_operation_name = input;
        self
    }
    /// <p>The name of the called operation in the dependency.</p>
    pub fn get_dependency_operation_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.dependency_operation_name
    }
    /// Appends an item to `metric_references`.
    ///
    /// To override the contents of this collection use [`set_metric_references`](Self::set_metric_references).
    ///
    /// <p>An array of structures that each contain information about one metric associated with this service dependency that was discovered by Application Signals.</p>
    pub fn metric_references(mut self, input: crate::types::MetricReference) -> Self {
        let mut v = self.metric_references.unwrap_or_default();
        v.push(input);
        self.metric_references = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of structures that each contain information about one metric associated with this service dependency that was discovered by Application Signals.</p>
    pub fn set_metric_references(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetricReference>>) -> Self {
        self.metric_references = input;
        self
    }
    /// <p>An array of structures that each contain information about one metric associated with this service dependency that was discovered by Application Signals.</p>
    pub fn get_metric_references(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetricReference>> {
        &self.metric_references
    }
    /// Consumes the builder and constructs a [`ServiceDependency`](crate::types::ServiceDependency).
    /// This method will fail if any of the following fields are not set:
    /// - [`operation_name`](crate::types::builders::ServiceDependencyBuilder::operation_name)
    /// - [`dependency_key_attributes`](crate::types::builders::ServiceDependencyBuilder::dependency_key_attributes)
    /// - [`dependency_operation_name`](crate::types::builders::ServiceDependencyBuilder::dependency_operation_name)
    /// - [`metric_references`](crate::types::builders::ServiceDependencyBuilder::metric_references)
    pub fn build(self) -> ::std::result::Result<crate::types::ServiceDependency, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ServiceDependency {
            operation_name: self.operation_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operation_name",
                    "operation_name was not specified but it is required when building ServiceDependency",
                )
            })?,
            dependency_key_attributes: self.dependency_key_attributes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dependency_key_attributes",
                    "dependency_key_attributes was not specified but it is required when building ServiceDependency",
                )
            })?,
            dependency_operation_name: self.dependency_operation_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dependency_operation_name",
                    "dependency_operation_name was not specified but it is required when building ServiceDependency",
                )
            })?,
            metric_references: self.metric_references.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metric_references",
                    "metric_references was not specified but it is required when building ServiceDependency",
                )
            })?,
        })
    }
}
