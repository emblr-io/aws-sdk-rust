// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This object defines the length of the look-back window used to calculate one burn rate metric for this SLO. The burn rate measures how fast the service is consuming the error budget, relative to the attainment goal of the SLO. A burn rate of exactly 1 indicates that the SLO goal will be met exactly.</p>
/// <p>For example, if you specify 60 as the number of minutes in the look-back window, the burn rate is calculated as the following:</p>
/// <p><i>burn rate = error rate over the look-back window / (100% - attainment goal percentage)</i></p>
/// <p>For more information about burn rates, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-ServiceLevelObjectives.html#CloudWatch-ServiceLevelObjectives-burn">Calculate burn rates</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BurnRateConfiguration {
    /// <p>The number of minutes to use as the look-back window.</p>
    pub look_back_window_minutes: i32,
}
impl BurnRateConfiguration {
    /// <p>The number of minutes to use as the look-back window.</p>
    pub fn look_back_window_minutes(&self) -> i32 {
        self.look_back_window_minutes
    }
}
impl BurnRateConfiguration {
    /// Creates a new builder-style object to manufacture [`BurnRateConfiguration`](crate::types::BurnRateConfiguration).
    pub fn builder() -> crate::types::builders::BurnRateConfigurationBuilder {
        crate::types::builders::BurnRateConfigurationBuilder::default()
    }
}

/// A builder for [`BurnRateConfiguration`](crate::types::BurnRateConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BurnRateConfigurationBuilder {
    pub(crate) look_back_window_minutes: ::std::option::Option<i32>,
}
impl BurnRateConfigurationBuilder {
    /// <p>The number of minutes to use as the look-back window.</p>
    /// This field is required.
    pub fn look_back_window_minutes(mut self, input: i32) -> Self {
        self.look_back_window_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of minutes to use as the look-back window.</p>
    pub fn set_look_back_window_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.look_back_window_minutes = input;
        self
    }
    /// <p>The number of minutes to use as the look-back window.</p>
    pub fn get_look_back_window_minutes(&self) -> &::std::option::Option<i32> {
        &self.look_back_window_minutes
    }
    /// Consumes the builder and constructs a [`BurnRateConfiguration`](crate::types::BurnRateConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`look_back_window_minutes`](crate::types::builders::BurnRateConfigurationBuilder::look_back_window_minutes)
    pub fn build(self) -> ::std::result::Result<crate::types::BurnRateConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BurnRateConfiguration {
            look_back_window_minutes: self.look_back_window_minutes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "look_back_window_minutes",
                    "look_back_window_minutes was not specified but it is required when building BurnRateConfiguration",
                )
            })?,
        })
    }
}
