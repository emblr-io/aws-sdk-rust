// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure containing information about one service level objective (SLO) that has been created in Application Signals. Creating SLOs can help you ensure your services are performing to the level that you expect. SLOs help you set and track a specific target level for the reliability and availability of your applications and services. Each SLO uses a service level indicator (SLI), which is a key performance metric, to calculate how much underperformance can be tolerated before the goal that you set for the SLO is not achieved.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceLevelObjective {
    /// <p>The ARN of this SLO.</p>
    pub arn: ::std::string::String,
    /// <p>The name of this SLO.</p>
    pub name: ::std::string::String,
    /// <p>The description that you created for this SLO.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that this SLO was created. When used in a raw HTTP Query API, it is formatted as <code>yyyy-MM-dd'T'HH:mm:ss</code>. For example, <code>2019-07-01T23:59:59</code>.</p>
    pub created_time: ::aws_smithy_types::DateTime,
    /// <p>The time that this SLO was most recently updated. When used in a raw HTTP Query API, it is formatted as <code>yyyy-MM-dd'T'HH:mm:ss</code>. For example, <code>2019-07-01T23:59:59</code>.</p>
    pub last_updated_time: ::aws_smithy_types::DateTime,
    /// <p>A structure containing information about the performance metric that this SLO monitors, if this is a period-based SLO.</p>
    pub sli: ::std::option::Option<crate::types::ServiceLevelIndicator>,
    /// <p>A structure containing information about the performance metric that this SLO monitors, if this is a request-based SLO.</p>
    pub request_based_sli: ::std::option::Option<crate::types::RequestBasedServiceLevelIndicator>,
    /// <p>Displays whether this is a period-based SLO or a request-based SLO.</p>
    pub evaluation_type: ::std::option::Option<crate::types::EvaluationType>,
    /// <p>This structure contains the attributes that determine the goal of an SLO. This includes the time period for evaluation and the attainment threshold.</p>
    pub goal: ::std::option::Option<crate::types::Goal>,
    /// <p>Each object in this array defines the length of the look-back window used to calculate one burn rate metric for this SLO. The burn rate measures how fast the service is consuming the error budget, relative to the attainment goal of the SLO.</p>
    pub burn_rate_configurations: ::std::option::Option<::std::vec::Vec<crate::types::BurnRateConfiguration>>,
    /// <p>Displays the SLI metric source type for this SLO. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p>Service operation</p></li>
    /// <li>
    /// <p>Service dependency</p></li>
    /// <li>
    /// <p>CloudWatch metric</p></li>
    /// </ul>
    pub metric_source_type: ::std::option::Option<crate::types::MetricSourceType>,
}
impl ServiceLevelObjective {
    /// <p>The ARN of this SLO.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The name of this SLO.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description that you created for this SLO.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The date and time that this SLO was created. When used in a raw HTTP Query API, it is formatted as <code>yyyy-MM-dd'T'HH:mm:ss</code>. For example, <code>2019-07-01T23:59:59</code>.</p>
    pub fn created_time(&self) -> &::aws_smithy_types::DateTime {
        &self.created_time
    }
    /// <p>The time that this SLO was most recently updated. When used in a raw HTTP Query API, it is formatted as <code>yyyy-MM-dd'T'HH:mm:ss</code>. For example, <code>2019-07-01T23:59:59</code>.</p>
    pub fn last_updated_time(&self) -> &::aws_smithy_types::DateTime {
        &self.last_updated_time
    }
    /// <p>A structure containing information about the performance metric that this SLO monitors, if this is a period-based SLO.</p>
    pub fn sli(&self) -> ::std::option::Option<&crate::types::ServiceLevelIndicator> {
        self.sli.as_ref()
    }
    /// <p>A structure containing information about the performance metric that this SLO monitors, if this is a request-based SLO.</p>
    pub fn request_based_sli(&self) -> ::std::option::Option<&crate::types::RequestBasedServiceLevelIndicator> {
        self.request_based_sli.as_ref()
    }
    /// <p>Displays whether this is a period-based SLO or a request-based SLO.</p>
    pub fn evaluation_type(&self) -> ::std::option::Option<&crate::types::EvaluationType> {
        self.evaluation_type.as_ref()
    }
    /// <p>This structure contains the attributes that determine the goal of an SLO. This includes the time period for evaluation and the attainment threshold.</p>
    pub fn goal(&self) -> ::std::option::Option<&crate::types::Goal> {
        self.goal.as_ref()
    }
    /// <p>Each object in this array defines the length of the look-back window used to calculate one burn rate metric for this SLO. The burn rate measures how fast the service is consuming the error budget, relative to the attainment goal of the SLO.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.burn_rate_configurations.is_none()`.
    pub fn burn_rate_configurations(&self) -> &[crate::types::BurnRateConfiguration] {
        self.burn_rate_configurations.as_deref().unwrap_or_default()
    }
    /// <p>Displays the SLI metric source type for this SLO. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p>Service operation</p></li>
    /// <li>
    /// <p>Service dependency</p></li>
    /// <li>
    /// <p>CloudWatch metric</p></li>
    /// </ul>
    pub fn metric_source_type(&self) -> ::std::option::Option<&crate::types::MetricSourceType> {
        self.metric_source_type.as_ref()
    }
}
impl ServiceLevelObjective {
    /// Creates a new builder-style object to manufacture [`ServiceLevelObjective`](crate::types::ServiceLevelObjective).
    pub fn builder() -> crate::types::builders::ServiceLevelObjectiveBuilder {
        crate::types::builders::ServiceLevelObjectiveBuilder::default()
    }
}

/// A builder for [`ServiceLevelObjective`](crate::types::ServiceLevelObjective).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceLevelObjectiveBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) sli: ::std::option::Option<crate::types::ServiceLevelIndicator>,
    pub(crate) request_based_sli: ::std::option::Option<crate::types::RequestBasedServiceLevelIndicator>,
    pub(crate) evaluation_type: ::std::option::Option<crate::types::EvaluationType>,
    pub(crate) goal: ::std::option::Option<crate::types::Goal>,
    pub(crate) burn_rate_configurations: ::std::option::Option<::std::vec::Vec<crate::types::BurnRateConfiguration>>,
    pub(crate) metric_source_type: ::std::option::Option<crate::types::MetricSourceType>,
}
impl ServiceLevelObjectiveBuilder {
    /// <p>The ARN of this SLO.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of this SLO.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of this SLO.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of this SLO.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of this SLO.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of this SLO.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description that you created for this SLO.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description that you created for this SLO.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description that you created for this SLO.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The date and time that this SLO was created. When used in a raw HTTP Query API, it is formatted as <code>yyyy-MM-dd'T'HH:mm:ss</code>. For example, <code>2019-07-01T23:59:59</code>.</p>
    /// This field is required.
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that this SLO was created. When used in a raw HTTP Query API, it is formatted as <code>yyyy-MM-dd'T'HH:mm:ss</code>. For example, <code>2019-07-01T23:59:59</code>.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The date and time that this SLO was created. When used in a raw HTTP Query API, it is formatted as <code>yyyy-MM-dd'T'HH:mm:ss</code>. For example, <code>2019-07-01T23:59:59</code>.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The time that this SLO was most recently updated. When used in a raw HTTP Query API, it is formatted as <code>yyyy-MM-dd'T'HH:mm:ss</code>. For example, <code>2019-07-01T23:59:59</code>.</p>
    /// This field is required.
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that this SLO was most recently updated. When used in a raw HTTP Query API, it is formatted as <code>yyyy-MM-dd'T'HH:mm:ss</code>. For example, <code>2019-07-01T23:59:59</code>.</p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The time that this SLO was most recently updated. When used in a raw HTTP Query API, it is formatted as <code>yyyy-MM-dd'T'HH:mm:ss</code>. For example, <code>2019-07-01T23:59:59</code>.</p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// <p>A structure containing information about the performance metric that this SLO monitors, if this is a period-based SLO.</p>
    pub fn sli(mut self, input: crate::types::ServiceLevelIndicator) -> Self {
        self.sli = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure containing information about the performance metric that this SLO monitors, if this is a period-based SLO.</p>
    pub fn set_sli(mut self, input: ::std::option::Option<crate::types::ServiceLevelIndicator>) -> Self {
        self.sli = input;
        self
    }
    /// <p>A structure containing information about the performance metric that this SLO monitors, if this is a period-based SLO.</p>
    pub fn get_sli(&self) -> &::std::option::Option<crate::types::ServiceLevelIndicator> {
        &self.sli
    }
    /// <p>A structure containing information about the performance metric that this SLO monitors, if this is a request-based SLO.</p>
    pub fn request_based_sli(mut self, input: crate::types::RequestBasedServiceLevelIndicator) -> Self {
        self.request_based_sli = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure containing information about the performance metric that this SLO monitors, if this is a request-based SLO.</p>
    pub fn set_request_based_sli(mut self, input: ::std::option::Option<crate::types::RequestBasedServiceLevelIndicator>) -> Self {
        self.request_based_sli = input;
        self
    }
    /// <p>A structure containing information about the performance metric that this SLO monitors, if this is a request-based SLO.</p>
    pub fn get_request_based_sli(&self) -> &::std::option::Option<crate::types::RequestBasedServiceLevelIndicator> {
        &self.request_based_sli
    }
    /// <p>Displays whether this is a period-based SLO or a request-based SLO.</p>
    pub fn evaluation_type(mut self, input: crate::types::EvaluationType) -> Self {
        self.evaluation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Displays whether this is a period-based SLO or a request-based SLO.</p>
    pub fn set_evaluation_type(mut self, input: ::std::option::Option<crate::types::EvaluationType>) -> Self {
        self.evaluation_type = input;
        self
    }
    /// <p>Displays whether this is a period-based SLO or a request-based SLO.</p>
    pub fn get_evaluation_type(&self) -> &::std::option::Option<crate::types::EvaluationType> {
        &self.evaluation_type
    }
    /// <p>This structure contains the attributes that determine the goal of an SLO. This includes the time period for evaluation and the attainment threshold.</p>
    /// This field is required.
    pub fn goal(mut self, input: crate::types::Goal) -> Self {
        self.goal = ::std::option::Option::Some(input);
        self
    }
    /// <p>This structure contains the attributes that determine the goal of an SLO. This includes the time period for evaluation and the attainment threshold.</p>
    pub fn set_goal(mut self, input: ::std::option::Option<crate::types::Goal>) -> Self {
        self.goal = input;
        self
    }
    /// <p>This structure contains the attributes that determine the goal of an SLO. This includes the time period for evaluation and the attainment threshold.</p>
    pub fn get_goal(&self) -> &::std::option::Option<crate::types::Goal> {
        &self.goal
    }
    /// Appends an item to `burn_rate_configurations`.
    ///
    /// To override the contents of this collection use [`set_burn_rate_configurations`](Self::set_burn_rate_configurations).
    ///
    /// <p>Each object in this array defines the length of the look-back window used to calculate one burn rate metric for this SLO. The burn rate measures how fast the service is consuming the error budget, relative to the attainment goal of the SLO.</p>
    pub fn burn_rate_configurations(mut self, input: crate::types::BurnRateConfiguration) -> Self {
        let mut v = self.burn_rate_configurations.unwrap_or_default();
        v.push(input);
        self.burn_rate_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Each object in this array defines the length of the look-back window used to calculate one burn rate metric for this SLO. The burn rate measures how fast the service is consuming the error budget, relative to the attainment goal of the SLO.</p>
    pub fn set_burn_rate_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BurnRateConfiguration>>) -> Self {
        self.burn_rate_configurations = input;
        self
    }
    /// <p>Each object in this array defines the length of the look-back window used to calculate one burn rate metric for this SLO. The burn rate measures how fast the service is consuming the error budget, relative to the attainment goal of the SLO.</p>
    pub fn get_burn_rate_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BurnRateConfiguration>> {
        &self.burn_rate_configurations
    }
    /// <p>Displays the SLI metric source type for this SLO. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p>Service operation</p></li>
    /// <li>
    /// <p>Service dependency</p></li>
    /// <li>
    /// <p>CloudWatch metric</p></li>
    /// </ul>
    pub fn metric_source_type(mut self, input: crate::types::MetricSourceType) -> Self {
        self.metric_source_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Displays the SLI metric source type for this SLO. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p>Service operation</p></li>
    /// <li>
    /// <p>Service dependency</p></li>
    /// <li>
    /// <p>CloudWatch metric</p></li>
    /// </ul>
    pub fn set_metric_source_type(mut self, input: ::std::option::Option<crate::types::MetricSourceType>) -> Self {
        self.metric_source_type = input;
        self
    }
    /// <p>Displays the SLI metric source type for this SLO. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p>Service operation</p></li>
    /// <li>
    /// <p>Service dependency</p></li>
    /// <li>
    /// <p>CloudWatch metric</p></li>
    /// </ul>
    pub fn get_metric_source_type(&self) -> &::std::option::Option<crate::types::MetricSourceType> {
        &self.metric_source_type
    }
    /// Consumes the builder and constructs a [`ServiceLevelObjective`](crate::types::ServiceLevelObjective).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::ServiceLevelObjectiveBuilder::arn)
    /// - [`name`](crate::types::builders::ServiceLevelObjectiveBuilder::name)
    /// - [`created_time`](crate::types::builders::ServiceLevelObjectiveBuilder::created_time)
    /// - [`last_updated_time`](crate::types::builders::ServiceLevelObjectiveBuilder::last_updated_time)
    pub fn build(self) -> ::std::result::Result<crate::types::ServiceLevelObjective, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ServiceLevelObjective {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building ServiceLevelObjective",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building ServiceLevelObjective",
                )
            })?,
            description: self.description,
            created_time: self.created_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_time",
                    "created_time was not specified but it is required when building ServiceLevelObjective",
                )
            })?,
            last_updated_time: self.last_updated_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_updated_time",
                    "last_updated_time was not specified but it is required when building ServiceLevelObjective",
                )
            })?,
            sli: self.sli,
            request_based_sli: self.request_based_sli,
            evaluation_type: self.evaluation_type,
            goal: self.goal,
            burn_rate_configurations: self.burn_rate_configurations,
            metric_source_type: self.metric_source_type,
        })
    }
}
