// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains information about a service dependent that was discovered by Application Signals. A dependent is an entity that invoked the specified service during the provided time range. Dependents include other services, CloudWatch Synthetics canaries, and clients that are instrumented with CloudWatch RUM app monitors.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceDependent {
    /// <p>If the invoked entity is an operation on an entity, the name of that dependent operation is displayed here.</p>
    pub operation_name: ::std::option::Option<::std::string::String>,
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub dependent_key_attributes: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    /// <p>If the dependent invoker was a service that invoked it from an operation, the name of that dependent operation is displayed here.</p>
    pub dependent_operation_name: ::std::option::Option<::std::string::String>,
    /// <p>An array of structures that each contain information about one metric associated with this service dependent that was discovered by Application Signals.</p>
    pub metric_references: ::std::vec::Vec<crate::types::MetricReference>,
}
impl ServiceDependent {
    /// <p>If the invoked entity is an operation on an entity, the name of that dependent operation is displayed here.</p>
    pub fn operation_name(&self) -> ::std::option::Option<&str> {
        self.operation_name.as_deref()
    }
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn dependent_key_attributes(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.dependent_key_attributes
    }
    /// <p>If the dependent invoker was a service that invoked it from an operation, the name of that dependent operation is displayed here.</p>
    pub fn dependent_operation_name(&self) -> ::std::option::Option<&str> {
        self.dependent_operation_name.as_deref()
    }
    /// <p>An array of structures that each contain information about one metric associated with this service dependent that was discovered by Application Signals.</p>
    pub fn metric_references(&self) -> &[crate::types::MetricReference] {
        use std::ops::Deref;
        self.metric_references.deref()
    }
}
impl ServiceDependent {
    /// Creates a new builder-style object to manufacture [`ServiceDependent`](crate::types::ServiceDependent).
    pub fn builder() -> crate::types::builders::ServiceDependentBuilder {
        crate::types::builders::ServiceDependentBuilder::default()
    }
}

/// A builder for [`ServiceDependent`](crate::types::ServiceDependent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceDependentBuilder {
    pub(crate) operation_name: ::std::option::Option<::std::string::String>,
    pub(crate) dependent_key_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) dependent_operation_name: ::std::option::Option<::std::string::String>,
    pub(crate) metric_references: ::std::option::Option<::std::vec::Vec<crate::types::MetricReference>>,
}
impl ServiceDependentBuilder {
    /// <p>If the invoked entity is an operation on an entity, the name of that dependent operation is displayed here.</p>
    pub fn operation_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the invoked entity is an operation on an entity, the name of that dependent operation is displayed here.</p>
    pub fn set_operation_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation_name = input;
        self
    }
    /// <p>If the invoked entity is an operation on an entity, the name of that dependent operation is displayed here.</p>
    pub fn get_operation_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation_name
    }
    /// Adds a key-value pair to `dependent_key_attributes`.
    ///
    /// To override the contents of this collection use [`set_dependent_key_attributes`](Self::set_dependent_key_attributes).
    ///
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn dependent_key_attributes(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.dependent_key_attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.dependent_key_attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn set_dependent_key_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.dependent_key_attributes = input;
        self
    }
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn get_dependent_key_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.dependent_key_attributes
    }
    /// <p>If the dependent invoker was a service that invoked it from an operation, the name of that dependent operation is displayed here.</p>
    pub fn dependent_operation_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dependent_operation_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the dependent invoker was a service that invoked it from an operation, the name of that dependent operation is displayed here.</p>
    pub fn set_dependent_operation_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dependent_operation_name = input;
        self
    }
    /// <p>If the dependent invoker was a service that invoked it from an operation, the name of that dependent operation is displayed here.</p>
    pub fn get_dependent_operation_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.dependent_operation_name
    }
    /// Appends an item to `metric_references`.
    ///
    /// To override the contents of this collection use [`set_metric_references`](Self::set_metric_references).
    ///
    /// <p>An array of structures that each contain information about one metric associated with this service dependent that was discovered by Application Signals.</p>
    pub fn metric_references(mut self, input: crate::types::MetricReference) -> Self {
        let mut v = self.metric_references.unwrap_or_default();
        v.push(input);
        self.metric_references = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of structures that each contain information about one metric associated with this service dependent that was discovered by Application Signals.</p>
    pub fn set_metric_references(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetricReference>>) -> Self {
        self.metric_references = input;
        self
    }
    /// <p>An array of structures that each contain information about one metric associated with this service dependent that was discovered by Application Signals.</p>
    pub fn get_metric_references(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetricReference>> {
        &self.metric_references
    }
    /// Consumes the builder and constructs a [`ServiceDependent`](crate::types::ServiceDependent).
    /// This method will fail if any of the following fields are not set:
    /// - [`dependent_key_attributes`](crate::types::builders::ServiceDependentBuilder::dependent_key_attributes)
    /// - [`metric_references`](crate::types::builders::ServiceDependentBuilder::metric_references)
    pub fn build(self) -> ::std::result::Result<crate::types::ServiceDependent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ServiceDependent {
            operation_name: self.operation_name,
            dependent_key_attributes: self.dependent_key_attributes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dependent_key_attributes",
                    "dependent_key_attributes was not specified but it is required when building ServiceDependent",
                )
            })?,
            dependent_operation_name: self.dependent_operation_name,
            metric_references: self.metric_references.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metric_references",
                    "metric_references was not specified but it is required when building ServiceDependent",
                )
            })?,
        })
    }
}
