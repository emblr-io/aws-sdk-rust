// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An array of structures, where each structure includes an error indicating that one of the requests in the array was not valid.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchUpdateExclusionWindowsError {
    /// <p>The SLO ID in the error.</p>
    pub slo_id: ::std::string::String,
    /// <p>The error code.</p>
    pub error_code: ::std::string::String,
    /// <p>The error message.</p>
    pub error_message: ::std::string::String,
}
impl BatchUpdateExclusionWindowsError {
    /// <p>The SLO ID in the error.</p>
    pub fn slo_id(&self) -> &str {
        use std::ops::Deref;
        self.slo_id.deref()
    }
    /// <p>The error code.</p>
    pub fn error_code(&self) -> &str {
        use std::ops::Deref;
        self.error_code.deref()
    }
    /// <p>The error message.</p>
    pub fn error_message(&self) -> &str {
        use std::ops::Deref;
        self.error_message.deref()
    }
}
impl BatchUpdateExclusionWindowsError {
    /// Creates a new builder-style object to manufacture [`BatchUpdateExclusionWindowsError`](crate::types::BatchUpdateExclusionWindowsError).
    pub fn builder() -> crate::types::builders::BatchUpdateExclusionWindowsErrorBuilder {
        crate::types::builders::BatchUpdateExclusionWindowsErrorBuilder::default()
    }
}

/// A builder for [`BatchUpdateExclusionWindowsError`](crate::types::BatchUpdateExclusionWindowsError).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchUpdateExclusionWindowsErrorBuilder {
    pub(crate) slo_id: ::std::option::Option<::std::string::String>,
    pub(crate) error_code: ::std::option::Option<::std::string::String>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
}
impl BatchUpdateExclusionWindowsErrorBuilder {
    /// <p>The SLO ID in the error.</p>
    /// This field is required.
    pub fn slo_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slo_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The SLO ID in the error.</p>
    pub fn set_slo_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slo_id = input;
        self
    }
    /// <p>The SLO ID in the error.</p>
    pub fn get_slo_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.slo_id
    }
    /// <p>The error code.</p>
    /// This field is required.
    pub fn error_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error code.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The error code.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_code
    }
    /// <p>The error message.</p>
    /// This field is required.
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error message.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The error message.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// Consumes the builder and constructs a [`BatchUpdateExclusionWindowsError`](crate::types::BatchUpdateExclusionWindowsError).
    /// This method will fail if any of the following fields are not set:
    /// - [`slo_id`](crate::types::builders::BatchUpdateExclusionWindowsErrorBuilder::slo_id)
    /// - [`error_code`](crate::types::builders::BatchUpdateExclusionWindowsErrorBuilder::error_code)
    /// - [`error_message`](crate::types::builders::BatchUpdateExclusionWindowsErrorBuilder::error_message)
    pub fn build(self) -> ::std::result::Result<crate::types::BatchUpdateExclusionWindowsError, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BatchUpdateExclusionWindowsError {
            slo_id: self.slo_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "slo_id",
                    "slo_id was not specified but it is required when building BatchUpdateExclusionWindowsError",
                )
            })?,
            error_code: self.error_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "error_code",
                    "error_code was not specified but it is required when building BatchUpdateExclusionWindowsError",
                )
            })?,
            error_message: self.error_message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "error_message",
                    "error_message was not specified but it is required when building BatchUpdateExclusionWindowsError",
                )
            })?,
        })
    }
}
