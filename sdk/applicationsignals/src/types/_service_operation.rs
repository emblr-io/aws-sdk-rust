// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains information about an operation discovered by Application Signals. An operation is a specific function performed by a service that was discovered by Application Signals, and is often an API that is called by an upstream dependent.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceOperation {
    /// <p>The name of the operation, discovered by Application Signals.</p>
    pub name: ::std::string::String,
    /// <p>An array of structures that each contain information about one metric associated with this service operation that was discovered by Application Signals.</p>
    pub metric_references: ::std::vec::Vec<crate::types::MetricReference>,
}
impl ServiceOperation {
    /// <p>The name of the operation, discovered by Application Signals.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>An array of structures that each contain information about one metric associated with this service operation that was discovered by Application Signals.</p>
    pub fn metric_references(&self) -> &[crate::types::MetricReference] {
        use std::ops::Deref;
        self.metric_references.deref()
    }
}
impl ServiceOperation {
    /// Creates a new builder-style object to manufacture [`ServiceOperation`](crate::types::ServiceOperation).
    pub fn builder() -> crate::types::builders::ServiceOperationBuilder {
        crate::types::builders::ServiceOperationBuilder::default()
    }
}

/// A builder for [`ServiceOperation`](crate::types::ServiceOperation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceOperationBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) metric_references: ::std::option::Option<::std::vec::Vec<crate::types::MetricReference>>,
}
impl ServiceOperationBuilder {
    /// <p>The name of the operation, discovered by Application Signals.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the operation, discovered by Application Signals.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the operation, discovered by Application Signals.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `metric_references`.
    ///
    /// To override the contents of this collection use [`set_metric_references`](Self::set_metric_references).
    ///
    /// <p>An array of structures that each contain information about one metric associated with this service operation that was discovered by Application Signals.</p>
    pub fn metric_references(mut self, input: crate::types::MetricReference) -> Self {
        let mut v = self.metric_references.unwrap_or_default();
        v.push(input);
        self.metric_references = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of structures that each contain information about one metric associated with this service operation that was discovered by Application Signals.</p>
    pub fn set_metric_references(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetricReference>>) -> Self {
        self.metric_references = input;
        self
    }
    /// <p>An array of structures that each contain information about one metric associated with this service operation that was discovered by Application Signals.</p>
    pub fn get_metric_references(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetricReference>> {
        &self.metric_references
    }
    /// Consumes the builder and constructs a [`ServiceOperation`](crate::types::ServiceOperation).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::ServiceOperationBuilder::name)
    /// - [`metric_references`](crate::types::builders::ServiceOperationBuilder::metric_references)
    pub fn build(self) -> ::std::result::Result<crate::types::ServiceOperation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ServiceOperation {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building ServiceOperation",
                )
            })?,
            metric_references: self.metric_references.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metric_references",
                    "metric_references was not specified but it is required when building ServiceOperation",
                )
            })?,
        })
    }
}
