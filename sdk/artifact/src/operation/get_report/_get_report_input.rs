// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetReportInput {
    /// <p>Unique resource ID for the report resource.</p>
    pub report_id: ::std::option::Option<::std::string::String>,
    /// <p>Version for the report resource.</p>
    pub report_version: ::std::option::Option<i64>,
    /// <p>Unique download token provided by GetTermForReport API.</p>
    pub term_token: ::std::option::Option<::std::string::String>,
}
impl GetReportInput {
    /// <p>Unique resource ID for the report resource.</p>
    pub fn report_id(&self) -> ::std::option::Option<&str> {
        self.report_id.as_deref()
    }
    /// <p>Version for the report resource.</p>
    pub fn report_version(&self) -> ::std::option::Option<i64> {
        self.report_version
    }
    /// <p>Unique download token provided by GetTermForReport API.</p>
    pub fn term_token(&self) -> ::std::option::Option<&str> {
        self.term_token.as_deref()
    }
}
impl GetReportInput {
    /// Creates a new builder-style object to manufacture [`GetReportInput`](crate::operation::get_report::GetReportInput).
    pub fn builder() -> crate::operation::get_report::builders::GetReportInputBuilder {
        crate::operation::get_report::builders::GetReportInputBuilder::default()
    }
}

/// A builder for [`GetReportInput`](crate::operation::get_report::GetReportInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetReportInputBuilder {
    pub(crate) report_id: ::std::option::Option<::std::string::String>,
    pub(crate) report_version: ::std::option::Option<i64>,
    pub(crate) term_token: ::std::option::Option<::std::string::String>,
}
impl GetReportInputBuilder {
    /// <p>Unique resource ID for the report resource.</p>
    /// This field is required.
    pub fn report_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.report_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique resource ID for the report resource.</p>
    pub fn set_report_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.report_id = input;
        self
    }
    /// <p>Unique resource ID for the report resource.</p>
    pub fn get_report_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.report_id
    }
    /// <p>Version for the report resource.</p>
    pub fn report_version(mut self, input: i64) -> Self {
        self.report_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>Version for the report resource.</p>
    pub fn set_report_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.report_version = input;
        self
    }
    /// <p>Version for the report resource.</p>
    pub fn get_report_version(&self) -> &::std::option::Option<i64> {
        &self.report_version
    }
    /// <p>Unique download token provided by GetTermForReport API.</p>
    /// This field is required.
    pub fn term_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.term_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique download token provided by GetTermForReport API.</p>
    pub fn set_term_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.term_token = input;
        self
    }
    /// <p>Unique download token provided by GetTermForReport API.</p>
    pub fn get_term_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.term_token
    }
    /// Consumes the builder and constructs a [`GetReportInput`](crate::operation::get_report::GetReportInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::get_report::GetReportInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_report::GetReportInput {
            report_id: self.report_id,
            report_version: self.report_version,
            term_token: self.term_token,
        })
    }
}
