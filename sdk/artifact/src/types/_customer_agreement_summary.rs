// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary for customer-agreement resource.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomerAgreementSummary {
    /// <p>Name of the customer-agreement resource.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>ARN of the customer-agreement resource.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>Identifier of the customer-agreement resource.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>ARN of the agreement resource the customer-agreement resource represents.</p>
    pub agreement_arn: ::std::option::Option<::std::string::String>,
    /// <p>AWS account Id that owns the resource.</p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>ARN of the organization that owns the resource.</p>
    pub organization_arn: ::std::option::Option<::std::string::String>,
    /// <p>Timestamp indicating when the agreement became effective.</p>
    pub effective_start: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Timestamp indicating when the agreement was terminated.</p>
    pub effective_end: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>State of the resource.</p>
    pub state: ::std::option::Option<crate::types::CustomerAgreementState>,
    /// <p>Description of the resource.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Terms required to accept the agreement resource.</p>
    pub acceptance_terms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Terms required to terminate the customer-agreement resource.</p>
    pub terminate_terms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Type of the customer-agreement resource.</p>
    pub r#type: ::std::option::Option<crate::types::AgreementType>,
}
impl CustomerAgreementSummary {
    /// <p>Name of the customer-agreement resource.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>ARN of the customer-agreement resource.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>Identifier of the customer-agreement resource.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>ARN of the agreement resource the customer-agreement resource represents.</p>
    pub fn agreement_arn(&self) -> ::std::option::Option<&str> {
        self.agreement_arn.as_deref()
    }
    /// <p>AWS account Id that owns the resource.</p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>ARN of the organization that owns the resource.</p>
    pub fn organization_arn(&self) -> ::std::option::Option<&str> {
        self.organization_arn.as_deref()
    }
    /// <p>Timestamp indicating when the agreement became effective.</p>
    pub fn effective_start(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.effective_start.as_ref()
    }
    /// <p>Timestamp indicating when the agreement was terminated.</p>
    pub fn effective_end(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.effective_end.as_ref()
    }
    /// <p>State of the resource.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::CustomerAgreementState> {
        self.state.as_ref()
    }
    /// <p>Description of the resource.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Terms required to accept the agreement resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.acceptance_terms.is_none()`.
    pub fn acceptance_terms(&self) -> &[::std::string::String] {
        self.acceptance_terms.as_deref().unwrap_or_default()
    }
    /// <p>Terms required to terminate the customer-agreement resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.terminate_terms.is_none()`.
    pub fn terminate_terms(&self) -> &[::std::string::String] {
        self.terminate_terms.as_deref().unwrap_or_default()
    }
    /// <p>Type of the customer-agreement resource.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::AgreementType> {
        self.r#type.as_ref()
    }
}
impl CustomerAgreementSummary {
    /// Creates a new builder-style object to manufacture [`CustomerAgreementSummary`](crate::types::CustomerAgreementSummary).
    pub fn builder() -> crate::types::builders::CustomerAgreementSummaryBuilder {
        crate::types::builders::CustomerAgreementSummaryBuilder::default()
    }
}

/// A builder for [`CustomerAgreementSummary`](crate::types::CustomerAgreementSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CustomerAgreementSummaryBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) agreement_arn: ::std::option::Option<::std::string::String>,
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) organization_arn: ::std::option::Option<::std::string::String>,
    pub(crate) effective_start: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) effective_end: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) state: ::std::option::Option<crate::types::CustomerAgreementState>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) acceptance_terms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) terminate_terms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) r#type: ::std::option::Option<crate::types::AgreementType>,
}
impl CustomerAgreementSummaryBuilder {
    /// <p>Name of the customer-agreement resource.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the customer-agreement resource.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the customer-agreement resource.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>ARN of the customer-agreement resource.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the customer-agreement resource.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>ARN of the customer-agreement resource.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Identifier of the customer-agreement resource.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifier of the customer-agreement resource.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>Identifier of the customer-agreement resource.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>ARN of the agreement resource the customer-agreement resource represents.</p>
    pub fn agreement_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agreement_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the agreement resource the customer-agreement resource represents.</p>
    pub fn set_agreement_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agreement_arn = input;
        self
    }
    /// <p>ARN of the agreement resource the customer-agreement resource represents.</p>
    pub fn get_agreement_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.agreement_arn
    }
    /// <p>AWS account Id that owns the resource.</p>
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>AWS account Id that owns the resource.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>AWS account Id that owns the resource.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// <p>ARN of the organization that owns the resource.</p>
    pub fn organization_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organization_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the organization that owns the resource.</p>
    pub fn set_organization_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organization_arn = input;
        self
    }
    /// <p>ARN of the organization that owns the resource.</p>
    pub fn get_organization_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.organization_arn
    }
    /// <p>Timestamp indicating when the agreement became effective.</p>
    pub fn effective_start(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.effective_start = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp indicating when the agreement became effective.</p>
    pub fn set_effective_start(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.effective_start = input;
        self
    }
    /// <p>Timestamp indicating when the agreement became effective.</p>
    pub fn get_effective_start(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.effective_start
    }
    /// <p>Timestamp indicating when the agreement was terminated.</p>
    pub fn effective_end(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.effective_end = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp indicating when the agreement was terminated.</p>
    pub fn set_effective_end(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.effective_end = input;
        self
    }
    /// <p>Timestamp indicating when the agreement was terminated.</p>
    pub fn get_effective_end(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.effective_end
    }
    /// <p>State of the resource.</p>
    pub fn state(mut self, input: crate::types::CustomerAgreementState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>State of the resource.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::CustomerAgreementState>) -> Self {
        self.state = input;
        self
    }
    /// <p>State of the resource.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::CustomerAgreementState> {
        &self.state
    }
    /// <p>Description of the resource.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Description of the resource.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Description of the resource.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `acceptance_terms`.
    ///
    /// To override the contents of this collection use [`set_acceptance_terms`](Self::set_acceptance_terms).
    ///
    /// <p>Terms required to accept the agreement resource.</p>
    pub fn acceptance_terms(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.acceptance_terms.unwrap_or_default();
        v.push(input.into());
        self.acceptance_terms = ::std::option::Option::Some(v);
        self
    }
    /// <p>Terms required to accept the agreement resource.</p>
    pub fn set_acceptance_terms(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.acceptance_terms = input;
        self
    }
    /// <p>Terms required to accept the agreement resource.</p>
    pub fn get_acceptance_terms(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.acceptance_terms
    }
    /// Appends an item to `terminate_terms`.
    ///
    /// To override the contents of this collection use [`set_terminate_terms`](Self::set_terminate_terms).
    ///
    /// <p>Terms required to terminate the customer-agreement resource.</p>
    pub fn terminate_terms(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.terminate_terms.unwrap_or_default();
        v.push(input.into());
        self.terminate_terms = ::std::option::Option::Some(v);
        self
    }
    /// <p>Terms required to terminate the customer-agreement resource.</p>
    pub fn set_terminate_terms(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.terminate_terms = input;
        self
    }
    /// <p>Terms required to terminate the customer-agreement resource.</p>
    pub fn get_terminate_terms(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.terminate_terms
    }
    /// <p>Type of the customer-agreement resource.</p>
    pub fn r#type(mut self, input: crate::types::AgreementType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of the customer-agreement resource.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::AgreementType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Type of the customer-agreement resource.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::AgreementType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`CustomerAgreementSummary`](crate::types::CustomerAgreementSummary).
    pub fn build(self) -> crate::types::CustomerAgreementSummary {
        crate::types::CustomerAgreementSummary {
            name: self.name,
            arn: self.arn,
            id: self.id,
            agreement_arn: self.agreement_arn,
            aws_account_id: self.aws_account_id,
            organization_arn: self.organization_arn,
            effective_start: self.effective_start,
            effective_end: self.effective_end,
            state: self.state,
            description: self.description,
            acceptance_terms: self.acceptance_terms,
            terminate_terms: self.terminate_terms,
            r#type: self.r#type,
        }
    }
}
