// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Full detail for report resource metadata.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReportDetail {
    /// <p>Unique resource ID for the report resource.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>Name for the report resource.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Description for the report resource.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Timestamp indicating the report resource effective start.</p>
    pub period_start: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Timestamp indicating the report resource effective end.</p>
    pub period_end: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Timestamp indicating when the report resource was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Timestamp indicating when the report resource was last modified.</p>
    pub last_modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Timestamp indicating when the report resource was deleted.</p>
    pub deleted_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Current state of the report resource</p>
    pub state: ::std::option::Option<crate::types::PublishedState>,
    /// <p>ARN for the report resource.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>Series for the report resource.</p>
    pub series: ::std::option::Option<::std::string::String>,
    /// <p>Category for the report resource.</p>
    pub category: ::std::option::Option<::std::string::String>,
    /// <p>Associated company name for the report resource.</p>
    pub company_name: ::std::option::Option<::std::string::String>,
    /// <p>Associated product name for the report resource.</p>
    pub product_name: ::std::option::Option<::std::string::String>,
    /// <p>Unique resource ARN for term resource.</p>
    pub term_arn: ::std::option::Option<::std::string::String>,
    /// <p>Version for the report resource.</p>
    pub version: ::std::option::Option<i64>,
    /// <p>Acceptance type for report.</p>
    pub acceptance_type: ::std::option::Option<crate::types::AcceptanceType>,
    /// <p>Sequence number to enforce optimistic locking.</p>
    pub sequence_number: ::std::option::Option<i64>,
    /// <p>The current state of the document upload.</p>
    pub upload_state: ::std::option::Option<crate::types::UploadState>,
    /// <p>The message associated with the current upload state.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
}
impl ReportDetail {
    /// <p>Unique resource ID for the report resource.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Name for the report resource.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Description for the report resource.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Timestamp indicating the report resource effective start.</p>
    pub fn period_start(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.period_start.as_ref()
    }
    /// <p>Timestamp indicating the report resource effective end.</p>
    pub fn period_end(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.period_end.as_ref()
    }
    /// <p>Timestamp indicating when the report resource was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>Timestamp indicating when the report resource was last modified.</p>
    pub fn last_modified_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_at.as_ref()
    }
    /// <p>Timestamp indicating when the report resource was deleted.</p>
    pub fn deleted_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.deleted_at.as_ref()
    }
    /// <p>Current state of the report resource</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::PublishedState> {
        self.state.as_ref()
    }
    /// <p>ARN for the report resource.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>Series for the report resource.</p>
    pub fn series(&self) -> ::std::option::Option<&str> {
        self.series.as_deref()
    }
    /// <p>Category for the report resource.</p>
    pub fn category(&self) -> ::std::option::Option<&str> {
        self.category.as_deref()
    }
    /// <p>Associated company name for the report resource.</p>
    pub fn company_name(&self) -> ::std::option::Option<&str> {
        self.company_name.as_deref()
    }
    /// <p>Associated product name for the report resource.</p>
    pub fn product_name(&self) -> ::std::option::Option<&str> {
        self.product_name.as_deref()
    }
    /// <p>Unique resource ARN for term resource.</p>
    pub fn term_arn(&self) -> ::std::option::Option<&str> {
        self.term_arn.as_deref()
    }
    /// <p>Version for the report resource.</p>
    pub fn version(&self) -> ::std::option::Option<i64> {
        self.version
    }
    /// <p>Acceptance type for report.</p>
    pub fn acceptance_type(&self) -> ::std::option::Option<&crate::types::AcceptanceType> {
        self.acceptance_type.as_ref()
    }
    /// <p>Sequence number to enforce optimistic locking.</p>
    pub fn sequence_number(&self) -> ::std::option::Option<i64> {
        self.sequence_number
    }
    /// <p>The current state of the document upload.</p>
    pub fn upload_state(&self) -> ::std::option::Option<&crate::types::UploadState> {
        self.upload_state.as_ref()
    }
    /// <p>The message associated with the current upload state.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
}
impl ReportDetail {
    /// Creates a new builder-style object to manufacture [`ReportDetail`](crate::types::ReportDetail).
    pub fn builder() -> crate::types::builders::ReportDetailBuilder {
        crate::types::builders::ReportDetailBuilder::default()
    }
}

/// A builder for [`ReportDetail`](crate::types::ReportDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ReportDetailBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) period_start: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) period_end: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) deleted_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) state: ::std::option::Option<crate::types::PublishedState>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) series: ::std::option::Option<::std::string::String>,
    pub(crate) category: ::std::option::Option<::std::string::String>,
    pub(crate) company_name: ::std::option::Option<::std::string::String>,
    pub(crate) product_name: ::std::option::Option<::std::string::String>,
    pub(crate) term_arn: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<i64>,
    pub(crate) acceptance_type: ::std::option::Option<crate::types::AcceptanceType>,
    pub(crate) sequence_number: ::std::option::Option<i64>,
    pub(crate) upload_state: ::std::option::Option<crate::types::UploadState>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
}
impl ReportDetailBuilder {
    /// <p>Unique resource ID for the report resource.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique resource ID for the report resource.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>Unique resource ID for the report resource.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Name for the report resource.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name for the report resource.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name for the report resource.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Description for the report resource.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Description for the report resource.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Description for the report resource.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Timestamp indicating the report resource effective start.</p>
    pub fn period_start(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.period_start = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp indicating the report resource effective start.</p>
    pub fn set_period_start(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.period_start = input;
        self
    }
    /// <p>Timestamp indicating the report resource effective start.</p>
    pub fn get_period_start(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.period_start
    }
    /// <p>Timestamp indicating the report resource effective end.</p>
    pub fn period_end(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.period_end = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp indicating the report resource effective end.</p>
    pub fn set_period_end(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.period_end = input;
        self
    }
    /// <p>Timestamp indicating the report resource effective end.</p>
    pub fn get_period_end(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.period_end
    }
    /// <p>Timestamp indicating when the report resource was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp indicating when the report resource was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>Timestamp indicating when the report resource was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>Timestamp indicating when the report resource was last modified.</p>
    pub fn last_modified_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp indicating when the report resource was last modified.</p>
    pub fn set_last_modified_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_at = input;
        self
    }
    /// <p>Timestamp indicating when the report resource was last modified.</p>
    pub fn get_last_modified_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_at
    }
    /// <p>Timestamp indicating when the report resource was deleted.</p>
    pub fn deleted_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.deleted_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp indicating when the report resource was deleted.</p>
    pub fn set_deleted_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.deleted_at = input;
        self
    }
    /// <p>Timestamp indicating when the report resource was deleted.</p>
    pub fn get_deleted_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.deleted_at
    }
    /// <p>Current state of the report resource</p>
    pub fn state(mut self, input: crate::types::PublishedState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Current state of the report resource</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::PublishedState>) -> Self {
        self.state = input;
        self
    }
    /// <p>Current state of the report resource</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::PublishedState> {
        &self.state
    }
    /// <p>ARN for the report resource.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN for the report resource.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>ARN for the report resource.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Series for the report resource.</p>
    pub fn series(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.series = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Series for the report resource.</p>
    pub fn set_series(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.series = input;
        self
    }
    /// <p>Series for the report resource.</p>
    pub fn get_series(&self) -> &::std::option::Option<::std::string::String> {
        &self.series
    }
    /// <p>Category for the report resource.</p>
    pub fn category(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.category = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Category for the report resource.</p>
    pub fn set_category(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.category = input;
        self
    }
    /// <p>Category for the report resource.</p>
    pub fn get_category(&self) -> &::std::option::Option<::std::string::String> {
        &self.category
    }
    /// <p>Associated company name for the report resource.</p>
    pub fn company_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.company_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Associated company name for the report resource.</p>
    pub fn set_company_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.company_name = input;
        self
    }
    /// <p>Associated company name for the report resource.</p>
    pub fn get_company_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.company_name
    }
    /// <p>Associated product name for the report resource.</p>
    pub fn product_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.product_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Associated product name for the report resource.</p>
    pub fn set_product_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.product_name = input;
        self
    }
    /// <p>Associated product name for the report resource.</p>
    pub fn get_product_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.product_name
    }
    /// <p>Unique resource ARN for term resource.</p>
    pub fn term_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.term_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique resource ARN for term resource.</p>
    pub fn set_term_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.term_arn = input;
        self
    }
    /// <p>Unique resource ARN for term resource.</p>
    pub fn get_term_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.term_arn
    }
    /// <p>Version for the report resource.</p>
    pub fn version(mut self, input: i64) -> Self {
        self.version = ::std::option::Option::Some(input);
        self
    }
    /// <p>Version for the report resource.</p>
    pub fn set_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.version = input;
        self
    }
    /// <p>Version for the report resource.</p>
    pub fn get_version(&self) -> &::std::option::Option<i64> {
        &self.version
    }
    /// <p>Acceptance type for report.</p>
    pub fn acceptance_type(mut self, input: crate::types::AcceptanceType) -> Self {
        self.acceptance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Acceptance type for report.</p>
    pub fn set_acceptance_type(mut self, input: ::std::option::Option<crate::types::AcceptanceType>) -> Self {
        self.acceptance_type = input;
        self
    }
    /// <p>Acceptance type for report.</p>
    pub fn get_acceptance_type(&self) -> &::std::option::Option<crate::types::AcceptanceType> {
        &self.acceptance_type
    }
    /// <p>Sequence number to enforce optimistic locking.</p>
    pub fn sequence_number(mut self, input: i64) -> Self {
        self.sequence_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sequence number to enforce optimistic locking.</p>
    pub fn set_sequence_number(mut self, input: ::std::option::Option<i64>) -> Self {
        self.sequence_number = input;
        self
    }
    /// <p>Sequence number to enforce optimistic locking.</p>
    pub fn get_sequence_number(&self) -> &::std::option::Option<i64> {
        &self.sequence_number
    }
    /// <p>The current state of the document upload.</p>
    pub fn upload_state(mut self, input: crate::types::UploadState) -> Self {
        self.upload_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the document upload.</p>
    pub fn set_upload_state(mut self, input: ::std::option::Option<crate::types::UploadState>) -> Self {
        self.upload_state = input;
        self
    }
    /// <p>The current state of the document upload.</p>
    pub fn get_upload_state(&self) -> &::std::option::Option<crate::types::UploadState> {
        &self.upload_state
    }
    /// <p>The message associated with the current upload state.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message associated with the current upload state.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The message associated with the current upload state.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// Consumes the builder and constructs a [`ReportDetail`](crate::types::ReportDetail).
    pub fn build(self) -> crate::types::ReportDetail {
        crate::types::ReportDetail {
            id: self.id,
            name: self.name,
            description: self.description,
            period_start: self.period_start,
            period_end: self.period_end,
            created_at: self.created_at,
            last_modified_at: self.last_modified_at,
            deleted_at: self.deleted_at,
            state: self.state,
            arn: self.arn,
            series: self.series,
            category: self.category,
            company_name: self.company_name,
            product_name: self.product_name,
            term_arn: self.term_arn,
            version: self.version,
            acceptance_type: self.acceptance_type,
            sequence_number: self.sequence_number,
            upload_state: self.upload_state,
            status_message: self.status_message,
        }
    }
}
