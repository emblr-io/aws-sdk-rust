// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeocodeOutput {
    /// <p>The pricing bucket for which the query is charged at.</p>
    /// <p>For more information on pricing, please visit <a href="https://aws.amazon.com/location/pricing/">Amazon Location Service Pricing</a>.</p>
    pub pricing_bucket: ::std::string::String,
    /// <p>List of places or results returned for a query.</p>
    pub result_items: ::std::option::Option<::std::vec::Vec<crate::types::GeocodeResultItem>>,
    _request_id: Option<String>,
}
impl GeocodeOutput {
    /// <p>The pricing bucket for which the query is charged at.</p>
    /// <p>For more information on pricing, please visit <a href="https://aws.amazon.com/location/pricing/">Amazon Location Service Pricing</a>.</p>
    pub fn pricing_bucket(&self) -> &str {
        use std::ops::Deref;
        self.pricing_bucket.deref()
    }
    /// <p>List of places or results returned for a query.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.result_items.is_none()`.
    pub fn result_items(&self) -> &[crate::types::GeocodeResultItem] {
        self.result_items.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for GeocodeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GeocodeOutput {
    /// Creates a new builder-style object to manufacture [`GeocodeOutput`](crate::operation::geocode::GeocodeOutput).
    pub fn builder() -> crate::operation::geocode::builders::GeocodeOutputBuilder {
        crate::operation::geocode::builders::GeocodeOutputBuilder::default()
    }
}

/// A builder for [`GeocodeOutput`](crate::operation::geocode::GeocodeOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GeocodeOutputBuilder {
    pub(crate) pricing_bucket: ::std::option::Option<::std::string::String>,
    pub(crate) result_items: ::std::option::Option<::std::vec::Vec<crate::types::GeocodeResultItem>>,
    _request_id: Option<String>,
}
impl GeocodeOutputBuilder {
    /// <p>The pricing bucket for which the query is charged at.</p>
    /// <p>For more information on pricing, please visit <a href="https://aws.amazon.com/location/pricing/">Amazon Location Service Pricing</a>.</p>
    /// This field is required.
    pub fn pricing_bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pricing_bucket = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pricing bucket for which the query is charged at.</p>
    /// <p>For more information on pricing, please visit <a href="https://aws.amazon.com/location/pricing/">Amazon Location Service Pricing</a>.</p>
    pub fn set_pricing_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pricing_bucket = input;
        self
    }
    /// <p>The pricing bucket for which the query is charged at.</p>
    /// <p>For more information on pricing, please visit <a href="https://aws.amazon.com/location/pricing/">Amazon Location Service Pricing</a>.</p>
    pub fn get_pricing_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.pricing_bucket
    }
    /// Appends an item to `result_items`.
    ///
    /// To override the contents of this collection use [`set_result_items`](Self::set_result_items).
    ///
    /// <p>List of places or results returned for a query.</p>
    pub fn result_items(mut self, input: crate::types::GeocodeResultItem) -> Self {
        let mut v = self.result_items.unwrap_or_default();
        v.push(input);
        self.result_items = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of places or results returned for a query.</p>
    pub fn set_result_items(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GeocodeResultItem>>) -> Self {
        self.result_items = input;
        self
    }
    /// <p>List of places or results returned for a query.</p>
    pub fn get_result_items(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GeocodeResultItem>> {
        &self.result_items
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GeocodeOutput`](crate::operation::geocode::GeocodeOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`pricing_bucket`](crate::operation::geocode::builders::GeocodeOutputBuilder::pricing_bucket)
    pub fn build(self) -> ::std::result::Result<crate::operation::geocode::GeocodeOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::geocode::GeocodeOutput {
            pricing_bucket: self.pricing_bucket.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "pricing_bucket",
                    "pricing_bucket was not specified but it is required when building GeocodeOutput",
                )
            })?,
            result_items: self.result_items,
            _request_id: self._request_id,
        })
    }
}
