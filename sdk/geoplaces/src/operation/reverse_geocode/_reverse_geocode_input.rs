// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ReverseGeocodeInput {
    /// <p>The position, in <code>\[lng, lat\]</code> for which you are querying nearby results for. Results closer to the position will be ranked higher then results further away from the position</p>
    pub query_position: ::std::option::Option<::std::vec::Vec<f64>>,
    /// <p>The maximum distance in meters from the QueryPosition from which a result will be returned.</p>
    pub query_radius: ::std::option::Option<i64>,
    /// <p>An optional limit for the number of results returned in a single call.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>A structure which contains a set of inclusion/exclusion properties that results must possess in order to be returned as a result.</p>
    pub filter: ::std::option::Option<crate::types::ReverseGeocodeFilter>,
    /// <p>A list of optional additional parameters, such as time zone that can be requested for each result.</p>
    pub additional_features: ::std::option::Option<::std::vec::Vec<crate::types::ReverseGeocodeAdditionalFeature>>,
    /// <p>A list of <a href="https://en.wikipedia.org/wiki/IETF_language_tag">BCP 47</a> compliant language codes for the results to be rendered in. If there is no data for the result in the requested language, data will be returned in the default language for the entry.</p>
    pub language: ::std::option::Option<::std::string::String>,
    /// <p>The alpha-2 or alpha-3 character code for the political view of a country. The political view applies to the results of the request to represent unresolved territorial claims through the point of view of the specified country.</p>
    pub political_view: ::std::option::Option<::std::string::String>,
    /// <p>Indicates if the results will be stored. Defaults to <code>SingleUse</code>, if left empty.</p><note>
    /// <p>Storing the response of an ReverseGeocode query is required to comply with service terms, but charged at a higher cost per request. Please review the <a href="https://aws.amazon.com/location/sla/">user agreement</a> and <a href="https://aws.amazon.com/location/pricing/">service pricing structure</a> to determine the correct setting for your use case.</p>
    /// </note>
    pub intended_use: ::std::option::Option<crate::types::ReverseGeocodeIntendedUse>,
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub key: ::std::option::Option<::std::string::String>,
}
impl ReverseGeocodeInput {
    /// <p>The position, in <code>\[lng, lat\]</code> for which you are querying nearby results for. Results closer to the position will be ranked higher then results further away from the position</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.query_position.is_none()`.
    pub fn query_position(&self) -> &[f64] {
        self.query_position.as_deref().unwrap_or_default()
    }
    /// <p>The maximum distance in meters from the QueryPosition from which a result will be returned.</p>
    pub fn query_radius(&self) -> ::std::option::Option<i64> {
        self.query_radius
    }
    /// <p>An optional limit for the number of results returned in a single call.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>A structure which contains a set of inclusion/exclusion properties that results must possess in order to be returned as a result.</p>
    pub fn filter(&self) -> ::std::option::Option<&crate::types::ReverseGeocodeFilter> {
        self.filter.as_ref()
    }
    /// <p>A list of optional additional parameters, such as time zone that can be requested for each result.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.additional_features.is_none()`.
    pub fn additional_features(&self) -> &[crate::types::ReverseGeocodeAdditionalFeature] {
        self.additional_features.as_deref().unwrap_or_default()
    }
    /// <p>A list of <a href="https://en.wikipedia.org/wiki/IETF_language_tag">BCP 47</a> compliant language codes for the results to be rendered in. If there is no data for the result in the requested language, data will be returned in the default language for the entry.</p>
    pub fn language(&self) -> ::std::option::Option<&str> {
        self.language.as_deref()
    }
    /// <p>The alpha-2 or alpha-3 character code for the political view of a country. The political view applies to the results of the request to represent unresolved territorial claims through the point of view of the specified country.</p>
    pub fn political_view(&self) -> ::std::option::Option<&str> {
        self.political_view.as_deref()
    }
    /// <p>Indicates if the results will be stored. Defaults to <code>SingleUse</code>, if left empty.</p><note>
    /// <p>Storing the response of an ReverseGeocode query is required to comply with service terms, but charged at a higher cost per request. Please review the <a href="https://aws.amazon.com/location/sla/">user agreement</a> and <a href="https://aws.amazon.com/location/pricing/">service pricing structure</a> to determine the correct setting for your use case.</p>
    /// </note>
    pub fn intended_use(&self) -> ::std::option::Option<&crate::types::ReverseGeocodeIntendedUse> {
        self.intended_use.as_ref()
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
}
impl ::std::fmt::Debug for ReverseGeocodeInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ReverseGeocodeInput");
        formatter.field("query_position", &"*** Sensitive Data Redacted ***");
        formatter.field("query_radius", &"*** Sensitive Data Redacted ***");
        formatter.field("max_results", &self.max_results);
        formatter.field("filter", &self.filter);
        formatter.field("additional_features", &self.additional_features);
        formatter.field("language", &self.language);
        formatter.field("political_view", &"*** Sensitive Data Redacted ***");
        formatter.field("intended_use", &self.intended_use);
        formatter.field("key", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ReverseGeocodeInput {
    /// Creates a new builder-style object to manufacture [`ReverseGeocodeInput`](crate::operation::reverse_geocode::ReverseGeocodeInput).
    pub fn builder() -> crate::operation::reverse_geocode::builders::ReverseGeocodeInputBuilder {
        crate::operation::reverse_geocode::builders::ReverseGeocodeInputBuilder::default()
    }
}

/// A builder for [`ReverseGeocodeInput`](crate::operation::reverse_geocode::ReverseGeocodeInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ReverseGeocodeInputBuilder {
    pub(crate) query_position: ::std::option::Option<::std::vec::Vec<f64>>,
    pub(crate) query_radius: ::std::option::Option<i64>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) filter: ::std::option::Option<crate::types::ReverseGeocodeFilter>,
    pub(crate) additional_features: ::std::option::Option<::std::vec::Vec<crate::types::ReverseGeocodeAdditionalFeature>>,
    pub(crate) language: ::std::option::Option<::std::string::String>,
    pub(crate) political_view: ::std::option::Option<::std::string::String>,
    pub(crate) intended_use: ::std::option::Option<crate::types::ReverseGeocodeIntendedUse>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
}
impl ReverseGeocodeInputBuilder {
    /// Appends an item to `query_position`.
    ///
    /// To override the contents of this collection use [`set_query_position`](Self::set_query_position).
    ///
    /// <p>The position, in <code>\[lng, lat\]</code> for which you are querying nearby results for. Results closer to the position will be ranked higher then results further away from the position</p>
    pub fn query_position(mut self, input: f64) -> Self {
        let mut v = self.query_position.unwrap_or_default();
        v.push(input);
        self.query_position = ::std::option::Option::Some(v);
        self
    }
    /// <p>The position, in <code>\[lng, lat\]</code> for which you are querying nearby results for. Results closer to the position will be ranked higher then results further away from the position</p>
    pub fn set_query_position(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.query_position = input;
        self
    }
    /// <p>The position, in <code>\[lng, lat\]</code> for which you are querying nearby results for. Results closer to the position will be ranked higher then results further away from the position</p>
    pub fn get_query_position(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.query_position
    }
    /// <p>The maximum distance in meters from the QueryPosition from which a result will be returned.</p>
    pub fn query_radius(mut self, input: i64) -> Self {
        self.query_radius = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum distance in meters from the QueryPosition from which a result will be returned.</p>
    pub fn set_query_radius(mut self, input: ::std::option::Option<i64>) -> Self {
        self.query_radius = input;
        self
    }
    /// <p>The maximum distance in meters from the QueryPosition from which a result will be returned.</p>
    pub fn get_query_radius(&self) -> &::std::option::Option<i64> {
        &self.query_radius
    }
    /// <p>An optional limit for the number of results returned in a single call.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>An optional limit for the number of results returned in a single call.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>An optional limit for the number of results returned in a single call.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>A structure which contains a set of inclusion/exclusion properties that results must possess in order to be returned as a result.</p>
    pub fn filter(mut self, input: crate::types::ReverseGeocodeFilter) -> Self {
        self.filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure which contains a set of inclusion/exclusion properties that results must possess in order to be returned as a result.</p>
    pub fn set_filter(mut self, input: ::std::option::Option<crate::types::ReverseGeocodeFilter>) -> Self {
        self.filter = input;
        self
    }
    /// <p>A structure which contains a set of inclusion/exclusion properties that results must possess in order to be returned as a result.</p>
    pub fn get_filter(&self) -> &::std::option::Option<crate::types::ReverseGeocodeFilter> {
        &self.filter
    }
    /// Appends an item to `additional_features`.
    ///
    /// To override the contents of this collection use [`set_additional_features`](Self::set_additional_features).
    ///
    /// <p>A list of optional additional parameters, such as time zone that can be requested for each result.</p>
    pub fn additional_features(mut self, input: crate::types::ReverseGeocodeAdditionalFeature) -> Self {
        let mut v = self.additional_features.unwrap_or_default();
        v.push(input);
        self.additional_features = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of optional additional parameters, such as time zone that can be requested for each result.</p>
    pub fn set_additional_features(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ReverseGeocodeAdditionalFeature>>) -> Self {
        self.additional_features = input;
        self
    }
    /// <p>A list of optional additional parameters, such as time zone that can be requested for each result.</p>
    pub fn get_additional_features(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ReverseGeocodeAdditionalFeature>> {
        &self.additional_features
    }
    /// <p>A list of <a href="https://en.wikipedia.org/wiki/IETF_language_tag">BCP 47</a> compliant language codes for the results to be rendered in. If there is no data for the result in the requested language, data will be returned in the default language for the entry.</p>
    pub fn language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.language = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A list of <a href="https://en.wikipedia.org/wiki/IETF_language_tag">BCP 47</a> compliant language codes for the results to be rendered in. If there is no data for the result in the requested language, data will be returned in the default language for the entry.</p>
    pub fn set_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.language = input;
        self
    }
    /// <p>A list of <a href="https://en.wikipedia.org/wiki/IETF_language_tag">BCP 47</a> compliant language codes for the results to be rendered in. If there is no data for the result in the requested language, data will be returned in the default language for the entry.</p>
    pub fn get_language(&self) -> &::std::option::Option<::std::string::String> {
        &self.language
    }
    /// <p>The alpha-2 or alpha-3 character code for the political view of a country. The political view applies to the results of the request to represent unresolved territorial claims through the point of view of the specified country.</p>
    pub fn political_view(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.political_view = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The alpha-2 or alpha-3 character code for the political view of a country. The political view applies to the results of the request to represent unresolved territorial claims through the point of view of the specified country.</p>
    pub fn set_political_view(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.political_view = input;
        self
    }
    /// <p>The alpha-2 or alpha-3 character code for the political view of a country. The political view applies to the results of the request to represent unresolved territorial claims through the point of view of the specified country.</p>
    pub fn get_political_view(&self) -> &::std::option::Option<::std::string::String> {
        &self.political_view
    }
    /// <p>Indicates if the results will be stored. Defaults to <code>SingleUse</code>, if left empty.</p><note>
    /// <p>Storing the response of an ReverseGeocode query is required to comply with service terms, but charged at a higher cost per request. Please review the <a href="https://aws.amazon.com/location/sla/">user agreement</a> and <a href="https://aws.amazon.com/location/pricing/">service pricing structure</a> to determine the correct setting for your use case.</p>
    /// </note>
    pub fn intended_use(mut self, input: crate::types::ReverseGeocodeIntendedUse) -> Self {
        self.intended_use = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates if the results will be stored. Defaults to <code>SingleUse</code>, if left empty.</p><note>
    /// <p>Storing the response of an ReverseGeocode query is required to comply with service terms, but charged at a higher cost per request. Please review the <a href="https://aws.amazon.com/location/sla/">user agreement</a> and <a href="https://aws.amazon.com/location/pricing/">service pricing structure</a> to determine the correct setting for your use case.</p>
    /// </note>
    pub fn set_intended_use(mut self, input: ::std::option::Option<crate::types::ReverseGeocodeIntendedUse>) -> Self {
        self.intended_use = input;
        self
    }
    /// <p>Indicates if the results will be stored. Defaults to <code>SingleUse</code>, if left empty.</p><note>
    /// <p>Storing the response of an ReverseGeocode query is required to comply with service terms, but charged at a higher cost per request. Please review the <a href="https://aws.amazon.com/location/sla/">user agreement</a> and <a href="https://aws.amazon.com/location/pricing/">service pricing structure</a> to determine the correct setting for your use case.</p>
    /// </note>
    pub fn get_intended_use(&self) -> &::std::option::Option<crate::types::ReverseGeocodeIntendedUse> {
        &self.intended_use
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// Consumes the builder and constructs a [`ReverseGeocodeInput`](crate::operation::reverse_geocode::ReverseGeocodeInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::reverse_geocode::ReverseGeocodeInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::reverse_geocode::ReverseGeocodeInput {
            query_position: self.query_position,
            query_radius: self.query_radius,
            max_results: self.max_results,
            filter: self.filter,
            additional_features: self.additional_features,
            language: self.language,
            political_view: self.political_view,
            intended_use: self.intended_use,
            key: self.key,
        })
    }
}
impl ::std::fmt::Debug for ReverseGeocodeInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ReverseGeocodeInputBuilder");
        formatter.field("query_position", &"*** Sensitive Data Redacted ***");
        formatter.field("query_radius", &"*** Sensitive Data Redacted ***");
        formatter.field("max_results", &self.max_results);
        formatter.field("filter", &self.filter);
        formatter.field("additional_features", &self.additional_features);
        formatter.field("language", &self.language);
        formatter.field("political_view", &"*** Sensitive Data Redacted ***");
        formatter.field("intended_use", &self.intended_use);
        formatter.field("key", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
