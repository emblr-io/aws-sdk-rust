// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>SuggestFilter structure which contains a set of inclusion/exclusion properties that results must possess in order to be returned as a result.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SuggestFilter {
    /// <p>The bounding box enclosing the geometric shape (area or line) that an individual result covers.</p>
    /// <p>The bounding box formed is defined as a set 4 coordinates: <code>\[{westward lng}, {southern lat}, {eastward lng}, {northern lat}\]</code></p>
    pub bounding_box: ::std::option::Option<::std::vec::Vec<f64>>,
    /// <p>The <code>Circle</code> that all results must be in.</p>
    pub circle: ::std::option::Option<crate::types::FilterCircle>,
    /// <p>A list of countries that all results must be in. Countries are represented by either their alpha-2 or alpha-3 character codes.</p>
    pub include_countries: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SuggestFilter {
    /// <p>The bounding box enclosing the geometric shape (area or line) that an individual result covers.</p>
    /// <p>The bounding box formed is defined as a set 4 coordinates: <code>\[{westward lng}, {southern lat}, {eastward lng}, {northern lat}\]</code></p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.bounding_box.is_none()`.
    pub fn bounding_box(&self) -> &[f64] {
        self.bounding_box.as_deref().unwrap_or_default()
    }
    /// <p>The <code>Circle</code> that all results must be in.</p>
    pub fn circle(&self) -> ::std::option::Option<&crate::types::FilterCircle> {
        self.circle.as_ref()
    }
    /// <p>A list of countries that all results must be in. Countries are represented by either their alpha-2 or alpha-3 character codes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.include_countries.is_none()`.
    pub fn include_countries(&self) -> &[::std::string::String] {
        self.include_countries.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for SuggestFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SuggestFilter");
        formatter.field("bounding_box", &"*** Sensitive Data Redacted ***");
        formatter.field("circle", &"*** Sensitive Data Redacted ***");
        formatter.field("include_countries", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl SuggestFilter {
    /// Creates a new builder-style object to manufacture [`SuggestFilter`](crate::types::SuggestFilter).
    pub fn builder() -> crate::types::builders::SuggestFilterBuilder {
        crate::types::builders::SuggestFilterBuilder::default()
    }
}

/// A builder for [`SuggestFilter`](crate::types::SuggestFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct SuggestFilterBuilder {
    pub(crate) bounding_box: ::std::option::Option<::std::vec::Vec<f64>>,
    pub(crate) circle: ::std::option::Option<crate::types::FilterCircle>,
    pub(crate) include_countries: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SuggestFilterBuilder {
    /// Appends an item to `bounding_box`.
    ///
    /// To override the contents of this collection use [`set_bounding_box`](Self::set_bounding_box).
    ///
    /// <p>The bounding box enclosing the geometric shape (area or line) that an individual result covers.</p>
    /// <p>The bounding box formed is defined as a set 4 coordinates: <code>\[{westward lng}, {southern lat}, {eastward lng}, {northern lat}\]</code></p>
    pub fn bounding_box(mut self, input: f64) -> Self {
        let mut v = self.bounding_box.unwrap_or_default();
        v.push(input);
        self.bounding_box = ::std::option::Option::Some(v);
        self
    }
    /// <p>The bounding box enclosing the geometric shape (area or line) that an individual result covers.</p>
    /// <p>The bounding box formed is defined as a set 4 coordinates: <code>\[{westward lng}, {southern lat}, {eastward lng}, {northern lat}\]</code></p>
    pub fn set_bounding_box(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.bounding_box = input;
        self
    }
    /// <p>The bounding box enclosing the geometric shape (area or line) that an individual result covers.</p>
    /// <p>The bounding box formed is defined as a set 4 coordinates: <code>\[{westward lng}, {southern lat}, {eastward lng}, {northern lat}\]</code></p>
    pub fn get_bounding_box(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.bounding_box
    }
    /// <p>The <code>Circle</code> that all results must be in.</p>
    pub fn circle(mut self, input: crate::types::FilterCircle) -> Self {
        self.circle = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>Circle</code> that all results must be in.</p>
    pub fn set_circle(mut self, input: ::std::option::Option<crate::types::FilterCircle>) -> Self {
        self.circle = input;
        self
    }
    /// <p>The <code>Circle</code> that all results must be in.</p>
    pub fn get_circle(&self) -> &::std::option::Option<crate::types::FilterCircle> {
        &self.circle
    }
    /// Appends an item to `include_countries`.
    ///
    /// To override the contents of this collection use [`set_include_countries`](Self::set_include_countries).
    ///
    /// <p>A list of countries that all results must be in. Countries are represented by either their alpha-2 or alpha-3 character codes.</p>
    pub fn include_countries(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.include_countries.unwrap_or_default();
        v.push(input.into());
        self.include_countries = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of countries that all results must be in. Countries are represented by either their alpha-2 or alpha-3 character codes.</p>
    pub fn set_include_countries(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.include_countries = input;
        self
    }
    /// <p>A list of countries that all results must be in. Countries are represented by either their alpha-2 or alpha-3 character codes.</p>
    pub fn get_include_countries(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.include_countries
    }
    /// Consumes the builder and constructs a [`SuggestFilter`](crate::types::SuggestFilter).
    pub fn build(self) -> crate::types::SuggestFilter {
        crate::types::SuggestFilter {
            bounding_box: self.bounding_box,
            circle: self.circle,
            include_countries: self.include_countries,
        }
    }
}
impl ::std::fmt::Debug for SuggestFilterBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SuggestFilterBuilder");
        formatter.field("bounding_box", &"*** Sensitive Data Redacted ***");
        formatter.field("circle", &"*** Sensitive Data Redacted ***");
        formatter.field("include_countries", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
