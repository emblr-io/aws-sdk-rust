// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>List of opening hours objects.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct OpeningHours {
    /// <p>List of opening hours in the format they are displayed in. This can vary by result and in most cases represents how the result uniquely formats their opening hours.</p>
    pub display: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Boolean which indicates if the result/place is currently open.</p>
    pub open_now: ::std::option::Option<bool>,
    /// <p>Components of the opening hours object.</p>
    pub components: ::std::option::Option<::std::vec::Vec<crate::types::OpeningHoursComponents>>,
    /// <p>Categories of results that results must belong too.</p>
    pub categories: ::std::option::Option<::std::vec::Vec<crate::types::Category>>,
}
impl OpeningHours {
    /// <p>List of opening hours in the format they are displayed in. This can vary by result and in most cases represents how the result uniquely formats their opening hours.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.display.is_none()`.
    pub fn display(&self) -> &[::std::string::String] {
        self.display.as_deref().unwrap_or_default()
    }
    /// <p>Boolean which indicates if the result/place is currently open.</p>
    pub fn open_now(&self) -> ::std::option::Option<bool> {
        self.open_now
    }
    /// <p>Components of the opening hours object.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.components.is_none()`.
    pub fn components(&self) -> &[crate::types::OpeningHoursComponents] {
        self.components.as_deref().unwrap_or_default()
    }
    /// <p>Categories of results that results must belong too.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.categories.is_none()`.
    pub fn categories(&self) -> &[crate::types::Category] {
        self.categories.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for OpeningHours {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("OpeningHours");
        formatter.field("display", &"*** Sensitive Data Redacted ***");
        formatter.field("open_now", &"*** Sensitive Data Redacted ***");
        formatter.field("components", &self.components);
        formatter.field("categories", &self.categories);
        formatter.finish()
    }
}
impl OpeningHours {
    /// Creates a new builder-style object to manufacture [`OpeningHours`](crate::types::OpeningHours).
    pub fn builder() -> crate::types::builders::OpeningHoursBuilder {
        crate::types::builders::OpeningHoursBuilder::default()
    }
}

/// A builder for [`OpeningHours`](crate::types::OpeningHours).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct OpeningHoursBuilder {
    pub(crate) display: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) open_now: ::std::option::Option<bool>,
    pub(crate) components: ::std::option::Option<::std::vec::Vec<crate::types::OpeningHoursComponents>>,
    pub(crate) categories: ::std::option::Option<::std::vec::Vec<crate::types::Category>>,
}
impl OpeningHoursBuilder {
    /// Appends an item to `display`.
    ///
    /// To override the contents of this collection use [`set_display`](Self::set_display).
    ///
    /// <p>List of opening hours in the format they are displayed in. This can vary by result and in most cases represents how the result uniquely formats their opening hours.</p>
    pub fn display(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.display.unwrap_or_default();
        v.push(input.into());
        self.display = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of opening hours in the format they are displayed in. This can vary by result and in most cases represents how the result uniquely formats their opening hours.</p>
    pub fn set_display(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.display = input;
        self
    }
    /// <p>List of opening hours in the format they are displayed in. This can vary by result and in most cases represents how the result uniquely formats their opening hours.</p>
    pub fn get_display(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.display
    }
    /// <p>Boolean which indicates if the result/place is currently open.</p>
    pub fn open_now(mut self, input: bool) -> Self {
        self.open_now = ::std::option::Option::Some(input);
        self
    }
    /// <p>Boolean which indicates if the result/place is currently open.</p>
    pub fn set_open_now(mut self, input: ::std::option::Option<bool>) -> Self {
        self.open_now = input;
        self
    }
    /// <p>Boolean which indicates if the result/place is currently open.</p>
    pub fn get_open_now(&self) -> &::std::option::Option<bool> {
        &self.open_now
    }
    /// Appends an item to `components`.
    ///
    /// To override the contents of this collection use [`set_components`](Self::set_components).
    ///
    /// <p>Components of the opening hours object.</p>
    pub fn components(mut self, input: crate::types::OpeningHoursComponents) -> Self {
        let mut v = self.components.unwrap_or_default();
        v.push(input);
        self.components = ::std::option::Option::Some(v);
        self
    }
    /// <p>Components of the opening hours object.</p>
    pub fn set_components(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OpeningHoursComponents>>) -> Self {
        self.components = input;
        self
    }
    /// <p>Components of the opening hours object.</p>
    pub fn get_components(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OpeningHoursComponents>> {
        &self.components
    }
    /// Appends an item to `categories`.
    ///
    /// To override the contents of this collection use [`set_categories`](Self::set_categories).
    ///
    /// <p>Categories of results that results must belong too.</p>
    pub fn categories(mut self, input: crate::types::Category) -> Self {
        let mut v = self.categories.unwrap_or_default();
        v.push(input);
        self.categories = ::std::option::Option::Some(v);
        self
    }
    /// <p>Categories of results that results must belong too.</p>
    pub fn set_categories(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Category>>) -> Self {
        self.categories = input;
        self
    }
    /// <p>Categories of results that results must belong too.</p>
    pub fn get_categories(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Category>> {
        &self.categories
    }
    /// Consumes the builder and constructs a [`OpeningHours`](crate::types::OpeningHours).
    pub fn build(self) -> crate::types::OpeningHours {
        crate::types::OpeningHours {
            display: self.display,
            open_now: self.open_now,
            components: self.components,
            categories: self.categories,
        }
    }
}
impl ::std::fmt::Debug for OpeningHoursBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("OpeningHoursBuilder");
        formatter.field("display", &"*** Sensitive Data Redacted ***");
        formatter.field("open_now", &"*** Sensitive Data Redacted ***");
        formatter.field("components", &self.components);
        formatter.field("categories", &self.categories);
        formatter.finish()
    }
}
