// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structured free text query allows you to search for places by the name or text representation of specific properties of the place.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GeocodeQueryComponents {
    /// <p>The alpha-2 or alpha-3 character code for the country that the results will be present in.</p>
    pub country: ::std::option::Option<::std::string::String>,
    /// <p>The region or state results should be to be present in.</p>
    /// <p>Example: <code>North Rhine-Westphalia</code>.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The sub-region or county for which results should be present in.</p>
    pub sub_region: ::std::option::Option<::std::string::String>,
    /// <p>The city or locality results should be present in.</p>
    /// <p>Example: <code>Vancouver</code>.</p>
    pub locality: ::std::option::Option<::std::string::String>,
    /// <p>The district or division of a city the results should be present in.</p>
    pub district: ::std::option::Option<::std::string::String>,
    /// <p>The name of the street results should be present in.</p>
    pub street: ::std::option::Option<::std::string::String>,
    /// <p>The house number or address results should have.</p>
    pub address_number: ::std::option::Option<::std::string::String>,
    /// <p>An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code for which the result should possess.</p>
    pub postal_code: ::std::option::Option<::std::string::String>,
}
impl GeocodeQueryComponents {
    /// <p>The alpha-2 or alpha-3 character code for the country that the results will be present in.</p>
    pub fn country(&self) -> ::std::option::Option<&str> {
        self.country.as_deref()
    }
    /// <p>The region or state results should be to be present in.</p>
    /// <p>Example: <code>North Rhine-Westphalia</code>.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The sub-region or county for which results should be present in.</p>
    pub fn sub_region(&self) -> ::std::option::Option<&str> {
        self.sub_region.as_deref()
    }
    /// <p>The city or locality results should be present in.</p>
    /// <p>Example: <code>Vancouver</code>.</p>
    pub fn locality(&self) -> ::std::option::Option<&str> {
        self.locality.as_deref()
    }
    /// <p>The district or division of a city the results should be present in.</p>
    pub fn district(&self) -> ::std::option::Option<&str> {
        self.district.as_deref()
    }
    /// <p>The name of the street results should be present in.</p>
    pub fn street(&self) -> ::std::option::Option<&str> {
        self.street.as_deref()
    }
    /// <p>The house number or address results should have.</p>
    pub fn address_number(&self) -> ::std::option::Option<&str> {
        self.address_number.as_deref()
    }
    /// <p>An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code for which the result should possess.</p>
    pub fn postal_code(&self) -> ::std::option::Option<&str> {
        self.postal_code.as_deref()
    }
}
impl ::std::fmt::Debug for GeocodeQueryComponents {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GeocodeQueryComponents");
        formatter.field("country", &"*** Sensitive Data Redacted ***");
        formatter.field("region", &"*** Sensitive Data Redacted ***");
        formatter.field("sub_region", &"*** Sensitive Data Redacted ***");
        formatter.field("locality", &"*** Sensitive Data Redacted ***");
        formatter.field("district", &"*** Sensitive Data Redacted ***");
        formatter.field("street", &"*** Sensitive Data Redacted ***");
        formatter.field("address_number", &"*** Sensitive Data Redacted ***");
        formatter.field("postal_code", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GeocodeQueryComponents {
    /// Creates a new builder-style object to manufacture [`GeocodeQueryComponents`](crate::types::GeocodeQueryComponents).
    pub fn builder() -> crate::types::builders::GeocodeQueryComponentsBuilder {
        crate::types::builders::GeocodeQueryComponentsBuilder::default()
    }
}

/// A builder for [`GeocodeQueryComponents`](crate::types::GeocodeQueryComponents).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GeocodeQueryComponentsBuilder {
    pub(crate) country: ::std::option::Option<::std::string::String>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) sub_region: ::std::option::Option<::std::string::String>,
    pub(crate) locality: ::std::option::Option<::std::string::String>,
    pub(crate) district: ::std::option::Option<::std::string::String>,
    pub(crate) street: ::std::option::Option<::std::string::String>,
    pub(crate) address_number: ::std::option::Option<::std::string::String>,
    pub(crate) postal_code: ::std::option::Option<::std::string::String>,
}
impl GeocodeQueryComponentsBuilder {
    /// <p>The alpha-2 or alpha-3 character code for the country that the results will be present in.</p>
    pub fn country(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.country = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The alpha-2 or alpha-3 character code for the country that the results will be present in.</p>
    pub fn set_country(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.country = input;
        self
    }
    /// <p>The alpha-2 or alpha-3 character code for the country that the results will be present in.</p>
    pub fn get_country(&self) -> &::std::option::Option<::std::string::String> {
        &self.country
    }
    /// <p>The region or state results should be to be present in.</p>
    /// <p>Example: <code>North Rhine-Westphalia</code>.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The region or state results should be to be present in.</p>
    /// <p>Example: <code>North Rhine-Westphalia</code>.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The region or state results should be to be present in.</p>
    /// <p>Example: <code>North Rhine-Westphalia</code>.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The sub-region or county for which results should be present in.</p>
    pub fn sub_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sub_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The sub-region or county for which results should be present in.</p>
    pub fn set_sub_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sub_region = input;
        self
    }
    /// <p>The sub-region or county for which results should be present in.</p>
    pub fn get_sub_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.sub_region
    }
    /// <p>The city or locality results should be present in.</p>
    /// <p>Example: <code>Vancouver</code>.</p>
    pub fn locality(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.locality = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The city or locality results should be present in.</p>
    /// <p>Example: <code>Vancouver</code>.</p>
    pub fn set_locality(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.locality = input;
        self
    }
    /// <p>The city or locality results should be present in.</p>
    /// <p>Example: <code>Vancouver</code>.</p>
    pub fn get_locality(&self) -> &::std::option::Option<::std::string::String> {
        &self.locality
    }
    /// <p>The district or division of a city the results should be present in.</p>
    pub fn district(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.district = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The district or division of a city the results should be present in.</p>
    pub fn set_district(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.district = input;
        self
    }
    /// <p>The district or division of a city the results should be present in.</p>
    pub fn get_district(&self) -> &::std::option::Option<::std::string::String> {
        &self.district
    }
    /// <p>The name of the street results should be present in.</p>
    pub fn street(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.street = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the street results should be present in.</p>
    pub fn set_street(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.street = input;
        self
    }
    /// <p>The name of the street results should be present in.</p>
    pub fn get_street(&self) -> &::std::option::Option<::std::string::String> {
        &self.street
    }
    /// <p>The house number or address results should have.</p>
    pub fn address_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The house number or address results should have.</p>
    pub fn set_address_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address_number = input;
        self
    }
    /// <p>The house number or address results should have.</p>
    pub fn get_address_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.address_number
    }
    /// <p>An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code for which the result should possess.</p>
    pub fn postal_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.postal_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code for which the result should possess.</p>
    pub fn set_postal_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.postal_code = input;
        self
    }
    /// <p>An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code for which the result should possess.</p>
    pub fn get_postal_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.postal_code
    }
    /// Consumes the builder and constructs a [`GeocodeQueryComponents`](crate::types::GeocodeQueryComponents).
    pub fn build(self) -> crate::types::GeocodeQueryComponents {
        crate::types::GeocodeQueryComponents {
            country: self.country,
            region: self.region,
            sub_region: self.sub_region,
            locality: self.locality,
            district: self.district,
            street: self.street,
            address_number: self.address_number,
            postal_code: self.postal_code,
        }
    }
}
impl ::std::fmt::Debug for GeocodeQueryComponentsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GeocodeQueryComponentsBuilder");
        formatter.field("country", &"*** Sensitive Data Redacted ***");
        formatter.field("region", &"*** Sensitive Data Redacted ***");
        formatter.field("sub_region", &"*** Sensitive Data Redacted ***");
        formatter.field("locality", &"*** Sensitive Data Redacted ***");
        formatter.field("district", &"*** Sensitive Data Redacted ***");
        formatter.field("street", &"*** Sensitive Data Redacted ***");
        formatter.field("address_number", &"*** Sensitive Data Redacted ***");
        formatter.field("postal_code", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
