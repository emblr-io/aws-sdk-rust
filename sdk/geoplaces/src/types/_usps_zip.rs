// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The USPS zip code.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UspsZip {
    /// <p>The ZIP Classification Code, or in other words what type of postal code is it.</p>
    pub zip_classification_code: ::std::option::Option<crate::types::ZipClassificationCode>,
}
impl UspsZip {
    /// <p>The ZIP Classification Code, or in other words what type of postal code is it.</p>
    pub fn zip_classification_code(&self) -> ::std::option::Option<&crate::types::ZipClassificationCode> {
        self.zip_classification_code.as_ref()
    }
}
impl ::std::fmt::Debug for UspsZip {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UspsZip");
        formatter.field("zip_classification_code", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl UspsZip {
    /// Creates a new builder-style object to manufacture [`UspsZip`](crate::types::UspsZip).
    pub fn builder() -> crate::types::builders::UspsZipBuilder {
        crate::types::builders::UspsZipBuilder::default()
    }
}

/// A builder for [`UspsZip`](crate::types::UspsZip).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UspsZipBuilder {
    pub(crate) zip_classification_code: ::std::option::Option<crate::types::ZipClassificationCode>,
}
impl UspsZipBuilder {
    /// <p>The ZIP Classification Code, or in other words what type of postal code is it.</p>
    pub fn zip_classification_code(mut self, input: crate::types::ZipClassificationCode) -> Self {
        self.zip_classification_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ZIP Classification Code, or in other words what type of postal code is it.</p>
    pub fn set_zip_classification_code(mut self, input: ::std::option::Option<crate::types::ZipClassificationCode>) -> Self {
        self.zip_classification_code = input;
        self
    }
    /// <p>The ZIP Classification Code, or in other words what type of postal code is it.</p>
    pub fn get_zip_classification_code(&self) -> &::std::option::Option<crate::types::ZipClassificationCode> {
        &self.zip_classification_code
    }
    /// Consumes the builder and constructs a [`UspsZip`](crate::types::UspsZip).
    pub fn build(self) -> crate::types::UspsZip {
        crate::types::UspsZip {
            zip_classification_code: self.zip_classification_code,
        }
    }
}
impl ::std::fmt::Debug for UspsZipBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UspsZipBuilder");
        formatter.field("zip_classification_code", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
