// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Geocode structure which contains a set of inclusion/exclusion properties that results must possess in order to be returned as a result.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeocodeFilter {
    /// <p>A list of countries that all results must be in. Countries are represented by either their alpha-2 or alpha-3 character codes.</p>
    pub include_countries: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The included place types.</p>
    pub include_place_types: ::std::option::Option<::std::vec::Vec<crate::types::GeocodeFilterPlaceType>>,
}
impl GeocodeFilter {
    /// <p>A list of countries that all results must be in. Countries are represented by either their alpha-2 or alpha-3 character codes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.include_countries.is_none()`.
    pub fn include_countries(&self) -> &[::std::string::String] {
        self.include_countries.as_deref().unwrap_or_default()
    }
    /// <p>The included place types.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.include_place_types.is_none()`.
    pub fn include_place_types(&self) -> &[crate::types::GeocodeFilterPlaceType] {
        self.include_place_types.as_deref().unwrap_or_default()
    }
}
impl GeocodeFilter {
    /// Creates a new builder-style object to manufacture [`GeocodeFilter`](crate::types::GeocodeFilter).
    pub fn builder() -> crate::types::builders::GeocodeFilterBuilder {
        crate::types::builders::GeocodeFilterBuilder::default()
    }
}

/// A builder for [`GeocodeFilter`](crate::types::GeocodeFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GeocodeFilterBuilder {
    pub(crate) include_countries: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) include_place_types: ::std::option::Option<::std::vec::Vec<crate::types::GeocodeFilterPlaceType>>,
}
impl GeocodeFilterBuilder {
    /// Appends an item to `include_countries`.
    ///
    /// To override the contents of this collection use [`set_include_countries`](Self::set_include_countries).
    ///
    /// <p>A list of countries that all results must be in. Countries are represented by either their alpha-2 or alpha-3 character codes.</p>
    pub fn include_countries(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.include_countries.unwrap_or_default();
        v.push(input.into());
        self.include_countries = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of countries that all results must be in. Countries are represented by either their alpha-2 or alpha-3 character codes.</p>
    pub fn set_include_countries(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.include_countries = input;
        self
    }
    /// <p>A list of countries that all results must be in. Countries are represented by either their alpha-2 or alpha-3 character codes.</p>
    pub fn get_include_countries(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.include_countries
    }
    /// Appends an item to `include_place_types`.
    ///
    /// To override the contents of this collection use [`set_include_place_types`](Self::set_include_place_types).
    ///
    /// <p>The included place types.</p>
    pub fn include_place_types(mut self, input: crate::types::GeocodeFilterPlaceType) -> Self {
        let mut v = self.include_place_types.unwrap_or_default();
        v.push(input);
        self.include_place_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The included place types.</p>
    pub fn set_include_place_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GeocodeFilterPlaceType>>) -> Self {
        self.include_place_types = input;
        self
    }
    /// <p>The included place types.</p>
    pub fn get_include_place_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GeocodeFilterPlaceType>> {
        &self.include_place_types
    }
    /// Consumes the builder and constructs a [`GeocodeFilter`](crate::types::GeocodeFilter).
    pub fn build(self) -> crate::types::GeocodeFilter {
        crate::types::GeocodeFilter {
            include_countries: self.include_countries,
            include_place_types: self.include_place_types,
        }
    }
}
