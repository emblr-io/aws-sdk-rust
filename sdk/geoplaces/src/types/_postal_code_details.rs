// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the postal code of the place or result.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PostalCodeDetails {
    /// <p>An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code for which the result should possess.</p>
    pub postal_code: ::std::option::Option<::std::string::String>,
    /// <p>The postal authority or entity. This could be a governmental authority, a regulatory authority, or a designated postal operator.</p>
    pub postal_authority: ::std::option::Option<crate::types::PostalAuthority>,
    /// <p>The postal code type.</p>
    pub postal_code_type: ::std::option::Option<crate::types::PostalCodeType>,
    /// <p>The ZIP Classification Code, or in other words what type of postal code is it.</p>
    pub usps_zip: ::std::option::Option<crate::types::UspsZip>,
    /// <p>The USPS ZIP+4 Record Type Code.</p>
    pub usps_zip_plus4: ::std::option::Option<crate::types::UspsZipPlus4>,
}
impl PostalCodeDetails {
    /// <p>An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code for which the result should possess.</p>
    pub fn postal_code(&self) -> ::std::option::Option<&str> {
        self.postal_code.as_deref()
    }
    /// <p>The postal authority or entity. This could be a governmental authority, a regulatory authority, or a designated postal operator.</p>
    pub fn postal_authority(&self) -> ::std::option::Option<&crate::types::PostalAuthority> {
        self.postal_authority.as_ref()
    }
    /// <p>The postal code type.</p>
    pub fn postal_code_type(&self) -> ::std::option::Option<&crate::types::PostalCodeType> {
        self.postal_code_type.as_ref()
    }
    /// <p>The ZIP Classification Code, or in other words what type of postal code is it.</p>
    pub fn usps_zip(&self) -> ::std::option::Option<&crate::types::UspsZip> {
        self.usps_zip.as_ref()
    }
    /// <p>The USPS ZIP+4 Record Type Code.</p>
    pub fn usps_zip_plus4(&self) -> ::std::option::Option<&crate::types::UspsZipPlus4> {
        self.usps_zip_plus4.as_ref()
    }
}
impl ::std::fmt::Debug for PostalCodeDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PostalCodeDetails");
        formatter.field("postal_code", &"*** Sensitive Data Redacted ***");
        formatter.field("postal_authority", &"*** Sensitive Data Redacted ***");
        formatter.field("postal_code_type", &"*** Sensitive Data Redacted ***");
        formatter.field("usps_zip", &self.usps_zip);
        formatter.field("usps_zip_plus4", &self.usps_zip_plus4);
        formatter.finish()
    }
}
impl PostalCodeDetails {
    /// Creates a new builder-style object to manufacture [`PostalCodeDetails`](crate::types::PostalCodeDetails).
    pub fn builder() -> crate::types::builders::PostalCodeDetailsBuilder {
        crate::types::builders::PostalCodeDetailsBuilder::default()
    }
}

/// A builder for [`PostalCodeDetails`](crate::types::PostalCodeDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct PostalCodeDetailsBuilder {
    pub(crate) postal_code: ::std::option::Option<::std::string::String>,
    pub(crate) postal_authority: ::std::option::Option<crate::types::PostalAuthority>,
    pub(crate) postal_code_type: ::std::option::Option<crate::types::PostalCodeType>,
    pub(crate) usps_zip: ::std::option::Option<crate::types::UspsZip>,
    pub(crate) usps_zip_plus4: ::std::option::Option<crate::types::UspsZipPlus4>,
}
impl PostalCodeDetailsBuilder {
    /// <p>An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code for which the result should possess.</p>
    pub fn postal_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.postal_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code for which the result should possess.</p>
    pub fn set_postal_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.postal_code = input;
        self
    }
    /// <p>An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code for which the result should possess.</p>
    pub fn get_postal_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.postal_code
    }
    /// <p>The postal authority or entity. This could be a governmental authority, a regulatory authority, or a designated postal operator.</p>
    pub fn postal_authority(mut self, input: crate::types::PostalAuthority) -> Self {
        self.postal_authority = ::std::option::Option::Some(input);
        self
    }
    /// <p>The postal authority or entity. This could be a governmental authority, a regulatory authority, or a designated postal operator.</p>
    pub fn set_postal_authority(mut self, input: ::std::option::Option<crate::types::PostalAuthority>) -> Self {
        self.postal_authority = input;
        self
    }
    /// <p>The postal authority or entity. This could be a governmental authority, a regulatory authority, or a designated postal operator.</p>
    pub fn get_postal_authority(&self) -> &::std::option::Option<crate::types::PostalAuthority> {
        &self.postal_authority
    }
    /// <p>The postal code type.</p>
    pub fn postal_code_type(mut self, input: crate::types::PostalCodeType) -> Self {
        self.postal_code_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The postal code type.</p>
    pub fn set_postal_code_type(mut self, input: ::std::option::Option<crate::types::PostalCodeType>) -> Self {
        self.postal_code_type = input;
        self
    }
    /// <p>The postal code type.</p>
    pub fn get_postal_code_type(&self) -> &::std::option::Option<crate::types::PostalCodeType> {
        &self.postal_code_type
    }
    /// <p>The ZIP Classification Code, or in other words what type of postal code is it.</p>
    pub fn usps_zip(mut self, input: crate::types::UspsZip) -> Self {
        self.usps_zip = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ZIP Classification Code, or in other words what type of postal code is it.</p>
    pub fn set_usps_zip(mut self, input: ::std::option::Option<crate::types::UspsZip>) -> Self {
        self.usps_zip = input;
        self
    }
    /// <p>The ZIP Classification Code, or in other words what type of postal code is it.</p>
    pub fn get_usps_zip(&self) -> &::std::option::Option<crate::types::UspsZip> {
        &self.usps_zip
    }
    /// <p>The USPS ZIP+4 Record Type Code.</p>
    pub fn usps_zip_plus4(mut self, input: crate::types::UspsZipPlus4) -> Self {
        self.usps_zip_plus4 = ::std::option::Option::Some(input);
        self
    }
    /// <p>The USPS ZIP+4 Record Type Code.</p>
    pub fn set_usps_zip_plus4(mut self, input: ::std::option::Option<crate::types::UspsZipPlus4>) -> Self {
        self.usps_zip_plus4 = input;
        self
    }
    /// <p>The USPS ZIP+4 Record Type Code.</p>
    pub fn get_usps_zip_plus4(&self) -> &::std::option::Option<crate::types::UspsZipPlus4> {
        &self.usps_zip_plus4
    }
    /// Consumes the builder and constructs a [`PostalCodeDetails`](crate::types::PostalCodeDetails).
    pub fn build(self) -> crate::types::PostalCodeDetails {
        crate::types::PostalCodeDetails {
            postal_code: self.postal_code,
            postal_authority: self.postal_authority,
            postal_code_type: self.postal_code_type,
            usps_zip: self.usps_zip,
            usps_zip_plus4: self.usps_zip_plus4,
        }
    }
}
impl ::std::fmt::Debug for PostalCodeDetailsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PostalCodeDetailsBuilder");
        formatter.field("postal_code", &"*** Sensitive Data Redacted ***");
        formatter.field("postal_authority", &"*** Sensitive Data Redacted ***");
        formatter.field("postal_code_type", &"*** Sensitive Data Redacted ***");
        formatter.field("usps_zip", &self.usps_zip);
        formatter.field("usps_zip_plus4", &self.usps_zip_plus4);
        formatter.finish()
    }
}
