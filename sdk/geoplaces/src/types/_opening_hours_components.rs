// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Components of the opening hours object.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct OpeningHoursComponents {
    /// <p>String which represents the opening hours, such as <code>"T070000"</code>.</p>
    pub open_time: ::std::option::Option<::std::string::String>,
    /// <p>String which represents the duration of the opening period, such as <code>"PT12H00M"</code>.</p>
    pub open_duration: ::std::option::Option<::std::string::String>,
    /// <p>Days or periods when the provided opening hours are in affect.</p>
    /// <p>Example: <code>FREQ:DAILY;BYDAY:MO,TU,WE,TH,SU</code></p>
    pub recurrence: ::std::option::Option<::std::string::String>,
}
impl OpeningHoursComponents {
    /// <p>String which represents the opening hours, such as <code>"T070000"</code>.</p>
    pub fn open_time(&self) -> ::std::option::Option<&str> {
        self.open_time.as_deref()
    }
    /// <p>String which represents the duration of the opening period, such as <code>"PT12H00M"</code>.</p>
    pub fn open_duration(&self) -> ::std::option::Option<&str> {
        self.open_duration.as_deref()
    }
    /// <p>Days or periods when the provided opening hours are in affect.</p>
    /// <p>Example: <code>FREQ:DAILY;BYDAY:MO,TU,WE,TH,SU</code></p>
    pub fn recurrence(&self) -> ::std::option::Option<&str> {
        self.recurrence.as_deref()
    }
}
impl ::std::fmt::Debug for OpeningHoursComponents {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("OpeningHoursComponents");
        formatter.field("open_time", &"*** Sensitive Data Redacted ***");
        formatter.field("open_duration", &"*** Sensitive Data Redacted ***");
        formatter.field("recurrence", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl OpeningHoursComponents {
    /// Creates a new builder-style object to manufacture [`OpeningHoursComponents`](crate::types::OpeningHoursComponents).
    pub fn builder() -> crate::types::builders::OpeningHoursComponentsBuilder {
        crate::types::builders::OpeningHoursComponentsBuilder::default()
    }
}

/// A builder for [`OpeningHoursComponents`](crate::types::OpeningHoursComponents).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct OpeningHoursComponentsBuilder {
    pub(crate) open_time: ::std::option::Option<::std::string::String>,
    pub(crate) open_duration: ::std::option::Option<::std::string::String>,
    pub(crate) recurrence: ::std::option::Option<::std::string::String>,
}
impl OpeningHoursComponentsBuilder {
    /// <p>String which represents the opening hours, such as <code>"T070000"</code>.</p>
    pub fn open_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.open_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>String which represents the opening hours, such as <code>"T070000"</code>.</p>
    pub fn set_open_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.open_time = input;
        self
    }
    /// <p>String which represents the opening hours, such as <code>"T070000"</code>.</p>
    pub fn get_open_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.open_time
    }
    /// <p>String which represents the duration of the opening period, such as <code>"PT12H00M"</code>.</p>
    pub fn open_duration(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.open_duration = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>String which represents the duration of the opening period, such as <code>"PT12H00M"</code>.</p>
    pub fn set_open_duration(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.open_duration = input;
        self
    }
    /// <p>String which represents the duration of the opening period, such as <code>"PT12H00M"</code>.</p>
    pub fn get_open_duration(&self) -> &::std::option::Option<::std::string::String> {
        &self.open_duration
    }
    /// <p>Days or periods when the provided opening hours are in affect.</p>
    /// <p>Example: <code>FREQ:DAILY;BYDAY:MO,TU,WE,TH,SU</code></p>
    pub fn recurrence(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recurrence = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Days or periods when the provided opening hours are in affect.</p>
    /// <p>Example: <code>FREQ:DAILY;BYDAY:MO,TU,WE,TH,SU</code></p>
    pub fn set_recurrence(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recurrence = input;
        self
    }
    /// <p>Days or periods when the provided opening hours are in affect.</p>
    /// <p>Example: <code>FREQ:DAILY;BYDAY:MO,TU,WE,TH,SU</code></p>
    pub fn get_recurrence(&self) -> &::std::option::Option<::std::string::String> {
        &self.recurrence
    }
    /// Consumes the builder and constructs a [`OpeningHoursComponents`](crate::types::OpeningHoursComponents).
    pub fn build(self) -> crate::types::OpeningHoursComponents {
        crate::types::OpeningHoursComponents {
            open_time: self.open_time,
            open_duration: self.open_duration,
            recurrence: self.recurrence,
        }
    }
}
impl ::std::fmt::Debug for OpeningHoursComponentsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("OpeningHoursComponentsBuilder");
        formatter.field("open_time", &"*** Sensitive Data Redacted ***");
        formatter.field("open_duration", &"*** Sensitive Data Redacted ***");
        formatter.field("recurrence", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
