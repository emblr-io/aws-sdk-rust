// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Position of the access point represented by longitude and latitude for a vehicle.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AccessPoint {
    /// <p>The position, in longitude and latitude.</p>
    pub position: ::std::option::Option<::std::vec::Vec<f64>>,
}
impl AccessPoint {
    /// <p>The position, in longitude and latitude.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.position.is_none()`.
    pub fn position(&self) -> &[f64] {
        self.position.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for AccessPoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AccessPoint");
        formatter.field("position", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AccessPoint {
    /// Creates a new builder-style object to manufacture [`AccessPoint`](crate::types::AccessPoint).
    pub fn builder() -> crate::types::builders::AccessPointBuilder {
        crate::types::builders::AccessPointBuilder::default()
    }
}

/// A builder for [`AccessPoint`](crate::types::AccessPoint).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AccessPointBuilder {
    pub(crate) position: ::std::option::Option<::std::vec::Vec<f64>>,
}
impl AccessPointBuilder {
    /// Appends an item to `position`.
    ///
    /// To override the contents of this collection use [`set_position`](Self::set_position).
    ///
    /// <p>The position, in longitude and latitude.</p>
    pub fn position(mut self, input: f64) -> Self {
        let mut v = self.position.unwrap_or_default();
        v.push(input);
        self.position = ::std::option::Option::Some(v);
        self
    }
    /// <p>The position, in longitude and latitude.</p>
    pub fn set_position(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.position = input;
        self
    }
    /// <p>The position, in longitude and latitude.</p>
    pub fn get_position(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.position
    }
    /// Consumes the builder and constructs a [`AccessPoint`](crate::types::AccessPoint).
    pub fn build(self) -> crate::types::AccessPoint {
        crate::types::AccessPoint { position: self.position }
    }
}
impl ::std::fmt::Debug for AccessPointBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AccessPointBuilder");
        formatter.field("position", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
