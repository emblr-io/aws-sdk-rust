// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates how well the returned title and address components matches the input TextQuery. For each component a score is provied with 1 indicating all tokens were matched and 0 indicating no tokens were matched.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComponentMatchScores {
    /// <p>Indicates the match score of the title in the text query that match the found title.</p>
    pub title: f64,
    /// <p>The place's address.</p>
    pub address: ::std::option::Option<crate::types::AddressComponentMatchScores>,
}
impl ComponentMatchScores {
    /// <p>Indicates the match score of the title in the text query that match the found title.</p>
    pub fn title(&self) -> f64 {
        self.title
    }
    /// <p>The place's address.</p>
    pub fn address(&self) -> ::std::option::Option<&crate::types::AddressComponentMatchScores> {
        self.address.as_ref()
    }
}
impl ComponentMatchScores {
    /// Creates a new builder-style object to manufacture [`ComponentMatchScores`](crate::types::ComponentMatchScores).
    pub fn builder() -> crate::types::builders::ComponentMatchScoresBuilder {
        crate::types::builders::ComponentMatchScoresBuilder::default()
    }
}

/// A builder for [`ComponentMatchScores`](crate::types::ComponentMatchScores).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ComponentMatchScoresBuilder {
    pub(crate) title: ::std::option::Option<f64>,
    pub(crate) address: ::std::option::Option<crate::types::AddressComponentMatchScores>,
}
impl ComponentMatchScoresBuilder {
    /// <p>Indicates the match score of the title in the text query that match the found title.</p>
    pub fn title(mut self, input: f64) -> Self {
        self.title = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the match score of the title in the text query that match the found title.</p>
    pub fn set_title(mut self, input: ::std::option::Option<f64>) -> Self {
        self.title = input;
        self
    }
    /// <p>Indicates the match score of the title in the text query that match the found title.</p>
    pub fn get_title(&self) -> &::std::option::Option<f64> {
        &self.title
    }
    /// <p>The place's address.</p>
    pub fn address(mut self, input: crate::types::AddressComponentMatchScores) -> Self {
        self.address = ::std::option::Option::Some(input);
        self
    }
    /// <p>The place's address.</p>
    pub fn set_address(mut self, input: ::std::option::Option<crate::types::AddressComponentMatchScores>) -> Self {
        self.address = input;
        self
    }
    /// <p>The place's address.</p>
    pub fn get_address(&self) -> &::std::option::Option<crate::types::AddressComponentMatchScores> {
        &self.address
    }
    /// Consumes the builder and constructs a [`ComponentMatchScores`](crate::types::ComponentMatchScores).
    pub fn build(self) -> crate::types::ComponentMatchScores {
        crate::types::ComponentMatchScores {
            title: self.title.unwrap_or_default(),
            address: self.address,
        }
    }
}
