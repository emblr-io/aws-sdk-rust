// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The time zone in which the place is located.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TimeZone {
    /// <p>The time zone name.</p>
    pub name: ::std::string::String,
    /// <p>Time zone offset of the timezone from UTC.</p>
    pub offset: ::std::option::Option<::std::string::String>,
    /// <p>The offset of the time zone from UTC, in seconds.</p>
    pub offset_seconds: i64,
}
impl TimeZone {
    /// <p>The time zone name.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Time zone offset of the timezone from UTC.</p>
    pub fn offset(&self) -> ::std::option::Option<&str> {
        self.offset.as_deref()
    }
    /// <p>The offset of the time zone from UTC, in seconds.</p>
    pub fn offset_seconds(&self) -> i64 {
        self.offset_seconds
    }
}
impl ::std::fmt::Debug for TimeZone {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TimeZone");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("offset", &"*** Sensitive Data Redacted ***");
        formatter.field("offset_seconds", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl TimeZone {
    /// Creates a new builder-style object to manufacture [`TimeZone`](crate::types::TimeZone).
    pub fn builder() -> crate::types::builders::TimeZoneBuilder {
        crate::types::builders::TimeZoneBuilder::default()
    }
}

/// A builder for [`TimeZone`](crate::types::TimeZone).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct TimeZoneBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) offset: ::std::option::Option<::std::string::String>,
    pub(crate) offset_seconds: ::std::option::Option<i64>,
}
impl TimeZoneBuilder {
    /// <p>The time zone name.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time zone name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The time zone name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Time zone offset of the timezone from UTC.</p>
    pub fn offset(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.offset = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Time zone offset of the timezone from UTC.</p>
    pub fn set_offset(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.offset = input;
        self
    }
    /// <p>Time zone offset of the timezone from UTC.</p>
    pub fn get_offset(&self) -> &::std::option::Option<::std::string::String> {
        &self.offset
    }
    /// <p>The offset of the time zone from UTC, in seconds.</p>
    pub fn offset_seconds(mut self, input: i64) -> Self {
        self.offset_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The offset of the time zone from UTC, in seconds.</p>
    pub fn set_offset_seconds(mut self, input: ::std::option::Option<i64>) -> Self {
        self.offset_seconds = input;
        self
    }
    /// <p>The offset of the time zone from UTC, in seconds.</p>
    pub fn get_offset_seconds(&self) -> &::std::option::Option<i64> {
        &self.offset_seconds
    }
    /// Consumes the builder and constructs a [`TimeZone`](crate::types::TimeZone).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::TimeZoneBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::TimeZone, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TimeZone {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building TimeZone",
                )
            })?,
            offset: self.offset,
            offset_seconds: self.offset_seconds.unwrap_or_default(),
        })
    }
}
impl ::std::fmt::Debug for TimeZoneBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TimeZoneBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("offset", &"*** Sensitive Data Redacted ***");
        formatter.field("offset_seconds", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
