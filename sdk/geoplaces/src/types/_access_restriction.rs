// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates if the access location is restricted. Index correlates to that of an access point and indicates if access through this point has some form of restriction.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AccessRestriction {
    /// <p>The restriction.</p>
    pub restricted: ::std::option::Option<bool>,
    /// <p>Categories of results that results must belong too.</p>
    pub categories: ::std::option::Option<::std::vec::Vec<crate::types::Category>>,
}
impl AccessRestriction {
    /// <p>The restriction.</p>
    pub fn restricted(&self) -> ::std::option::Option<bool> {
        self.restricted
    }
    /// <p>Categories of results that results must belong too.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.categories.is_none()`.
    pub fn categories(&self) -> &[crate::types::Category] {
        self.categories.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for AccessRestriction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AccessRestriction");
        formatter.field("restricted", &"*** Sensitive Data Redacted ***");
        formatter.field("categories", &self.categories);
        formatter.finish()
    }
}
impl AccessRestriction {
    /// Creates a new builder-style object to manufacture [`AccessRestriction`](crate::types::AccessRestriction).
    pub fn builder() -> crate::types::builders::AccessRestrictionBuilder {
        crate::types::builders::AccessRestrictionBuilder::default()
    }
}

/// A builder for [`AccessRestriction`](crate::types::AccessRestriction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AccessRestrictionBuilder {
    pub(crate) restricted: ::std::option::Option<bool>,
    pub(crate) categories: ::std::option::Option<::std::vec::Vec<crate::types::Category>>,
}
impl AccessRestrictionBuilder {
    /// <p>The restriction.</p>
    pub fn restricted(mut self, input: bool) -> Self {
        self.restricted = ::std::option::Option::Some(input);
        self
    }
    /// <p>The restriction.</p>
    pub fn set_restricted(mut self, input: ::std::option::Option<bool>) -> Self {
        self.restricted = input;
        self
    }
    /// <p>The restriction.</p>
    pub fn get_restricted(&self) -> &::std::option::Option<bool> {
        &self.restricted
    }
    /// Appends an item to `categories`.
    ///
    /// To override the contents of this collection use [`set_categories`](Self::set_categories).
    ///
    /// <p>Categories of results that results must belong too.</p>
    pub fn categories(mut self, input: crate::types::Category) -> Self {
        let mut v = self.categories.unwrap_or_default();
        v.push(input);
        self.categories = ::std::option::Option::Some(v);
        self
    }
    /// <p>Categories of results that results must belong too.</p>
    pub fn set_categories(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Category>>) -> Self {
        self.categories = input;
        self
    }
    /// <p>Categories of results that results must belong too.</p>
    pub fn get_categories(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Category>> {
        &self.categories
    }
    /// Consumes the builder and constructs a [`AccessRestriction`](crate::types::AccessRestriction).
    pub fn build(self) -> crate::types::AccessRestriction {
        crate::types::AccessRestriction {
            restricted: self.restricted,
            categories: self.categories,
        }
    }
}
impl ::std::fmt::Debug for AccessRestrictionBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AccessRestrictionBuilder");
        formatter.field("restricted", &"*** Sensitive Data Redacted ***");
        formatter.field("categories", &self.categories);
        formatter.finish()
    }
}
