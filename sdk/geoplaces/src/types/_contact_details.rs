// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details related to contacts.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ContactDetails {
    /// <p>The contact's label.</p>
    pub label: ::std::option::Option<::std::string::String>,
    /// <p>The contact's value.</p>
    pub value: ::std::option::Option<::std::string::String>,
    /// <p>Categories of results that results must belong too.</p>
    pub categories: ::std::option::Option<::std::vec::Vec<crate::types::Category>>,
}
impl ContactDetails {
    /// <p>The contact's label.</p>
    pub fn label(&self) -> ::std::option::Option<&str> {
        self.label.as_deref()
    }
    /// <p>The contact's value.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>Categories of results that results must belong too.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.categories.is_none()`.
    pub fn categories(&self) -> &[crate::types::Category] {
        self.categories.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for ContactDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ContactDetails");
        formatter.field("label", &"*** Sensitive Data Redacted ***");
        formatter.field("value", &"*** Sensitive Data Redacted ***");
        formatter.field("categories", &self.categories);
        formatter.finish()
    }
}
impl ContactDetails {
    /// Creates a new builder-style object to manufacture [`ContactDetails`](crate::types::ContactDetails).
    pub fn builder() -> crate::types::builders::ContactDetailsBuilder {
        crate::types::builders::ContactDetailsBuilder::default()
    }
}

/// A builder for [`ContactDetails`](crate::types::ContactDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ContactDetailsBuilder {
    pub(crate) label: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) categories: ::std::option::Option<::std::vec::Vec<crate::types::Category>>,
}
impl ContactDetailsBuilder {
    /// <p>The contact's label.</p>
    pub fn label(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.label = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The contact's label.</p>
    pub fn set_label(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.label = input;
        self
    }
    /// <p>The contact's label.</p>
    pub fn get_label(&self) -> &::std::option::Option<::std::string::String> {
        &self.label
    }
    /// <p>The contact's value.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The contact's value.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The contact's value.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Appends an item to `categories`.
    ///
    /// To override the contents of this collection use [`set_categories`](Self::set_categories).
    ///
    /// <p>Categories of results that results must belong too.</p>
    pub fn categories(mut self, input: crate::types::Category) -> Self {
        let mut v = self.categories.unwrap_or_default();
        v.push(input);
        self.categories = ::std::option::Option::Some(v);
        self
    }
    /// <p>Categories of results that results must belong too.</p>
    pub fn set_categories(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Category>>) -> Self {
        self.categories = input;
        self
    }
    /// <p>Categories of results that results must belong too.</p>
    pub fn get_categories(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Category>> {
        &self.categories
    }
    /// Consumes the builder and constructs a [`ContactDetails`](crate::types::ContactDetails).
    pub fn build(self) -> crate::types::ContactDetails {
        crate::types::ContactDetails {
            label: self.label,
            value: self.value,
            categories: self.categories,
        }
    }
}
impl ::std::fmt::Debug for ContactDetailsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ContactDetailsBuilder");
        formatter.field("label", &"*** Sensitive Data Redacted ***");
        formatter.field("value", &"*** Sensitive Data Redacted ***");
        formatter.field("categories", &self.categories);
        formatter.finish()
    }
}
