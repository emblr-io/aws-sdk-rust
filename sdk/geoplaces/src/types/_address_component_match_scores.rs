// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates how well the entire input matches the returned. It is equal to 1 if all input tokens are recognized and matched.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AddressComponentMatchScores {
    /// <p>The alpha-2 or alpha-3 character code for the country that the results will be present in.</p>
    pub country: f64,
    /// <p>The region or state results should be to be present in.</p>
    /// <p>Example: <code>North Rhine-Westphalia</code>.</p>
    pub region: f64,
    /// <p>The sub-region or county for which results should be present in.</p>
    pub sub_region: f64,
    /// <p>The city or locality results should be present in.</p>
    /// <p>Example: <code>Vancouver</code>.</p>
    pub locality: f64,
    /// <p>The district or division of a city the results should be present in.</p>
    pub district: f64,
    /// <p>A subdivision of a district.</p>
    /// <p>Example: <code>Minden-Lübbecke</code></p>
    pub sub_district: f64,
    /// <p>An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code, for which the result should possess.</p>
    pub postal_code: f64,
    /// <p>Name of the block.</p>
    /// <p>Example: <code>Sunny Mansion 203 block: 2 Chome</code></p>
    pub block: f64,
    /// <p>Name of sub-block.</p>
    /// <p>Example: <code>Sunny Mansion 203 sub-block: 4</code></p>
    pub sub_block: f64,
    /// <p>Name of the streets in the intersection.</p>
    /// <p>Example: <code>\["Friedrichstraße","Unter den Linden"\]</code></p>
    pub intersection: ::std::option::Option<::std::vec::Vec<f64>>,
    /// <p>The house number or address results should have.</p>
    pub address_number: f64,
    /// <p>The name of the building at the address.</p>
    pub building: f64,
    /// <p>Match scores for the secondary address components in the result.</p>
    pub secondary_address_components: ::std::option::Option<::std::vec::Vec<crate::types::SecondaryAddressComponentMatchScore>>,
}
impl AddressComponentMatchScores {
    /// <p>The alpha-2 or alpha-3 character code for the country that the results will be present in.</p>
    pub fn country(&self) -> f64 {
        self.country
    }
    /// <p>The region or state results should be to be present in.</p>
    /// <p>Example: <code>North Rhine-Westphalia</code>.</p>
    pub fn region(&self) -> f64 {
        self.region
    }
    /// <p>The sub-region or county for which results should be present in.</p>
    pub fn sub_region(&self) -> f64 {
        self.sub_region
    }
    /// <p>The city or locality results should be present in.</p>
    /// <p>Example: <code>Vancouver</code>.</p>
    pub fn locality(&self) -> f64 {
        self.locality
    }
    /// <p>The district or division of a city the results should be present in.</p>
    pub fn district(&self) -> f64 {
        self.district
    }
    /// <p>A subdivision of a district.</p>
    /// <p>Example: <code>Minden-Lübbecke</code></p>
    pub fn sub_district(&self) -> f64 {
        self.sub_district
    }
    /// <p>An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code, for which the result should possess.</p>
    pub fn postal_code(&self) -> f64 {
        self.postal_code
    }
    /// <p>Name of the block.</p>
    /// <p>Example: <code>Sunny Mansion 203 block: 2 Chome</code></p>
    pub fn block(&self) -> f64 {
        self.block
    }
    /// <p>Name of sub-block.</p>
    /// <p>Example: <code>Sunny Mansion 203 sub-block: 4</code></p>
    pub fn sub_block(&self) -> f64 {
        self.sub_block
    }
    /// <p>Name of the streets in the intersection.</p>
    /// <p>Example: <code>\["Friedrichstraße","Unter den Linden"\]</code></p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.intersection.is_none()`.
    pub fn intersection(&self) -> &[f64] {
        self.intersection.as_deref().unwrap_or_default()
    }
    /// <p>The house number or address results should have.</p>
    pub fn address_number(&self) -> f64 {
        self.address_number
    }
    /// <p>The name of the building at the address.</p>
    pub fn building(&self) -> f64 {
        self.building
    }
    /// <p>Match scores for the secondary address components in the result.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.secondary_address_components.is_none()`.
    pub fn secondary_address_components(&self) -> &[crate::types::SecondaryAddressComponentMatchScore] {
        self.secondary_address_components.as_deref().unwrap_or_default()
    }
}
impl AddressComponentMatchScores {
    /// Creates a new builder-style object to manufacture [`AddressComponentMatchScores`](crate::types::AddressComponentMatchScores).
    pub fn builder() -> crate::types::builders::AddressComponentMatchScoresBuilder {
        crate::types::builders::AddressComponentMatchScoresBuilder::default()
    }
}

/// A builder for [`AddressComponentMatchScores`](crate::types::AddressComponentMatchScores).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AddressComponentMatchScoresBuilder {
    pub(crate) country: ::std::option::Option<f64>,
    pub(crate) region: ::std::option::Option<f64>,
    pub(crate) sub_region: ::std::option::Option<f64>,
    pub(crate) locality: ::std::option::Option<f64>,
    pub(crate) district: ::std::option::Option<f64>,
    pub(crate) sub_district: ::std::option::Option<f64>,
    pub(crate) postal_code: ::std::option::Option<f64>,
    pub(crate) block: ::std::option::Option<f64>,
    pub(crate) sub_block: ::std::option::Option<f64>,
    pub(crate) intersection: ::std::option::Option<::std::vec::Vec<f64>>,
    pub(crate) address_number: ::std::option::Option<f64>,
    pub(crate) building: ::std::option::Option<f64>,
    pub(crate) secondary_address_components: ::std::option::Option<::std::vec::Vec<crate::types::SecondaryAddressComponentMatchScore>>,
}
impl AddressComponentMatchScoresBuilder {
    /// <p>The alpha-2 or alpha-3 character code for the country that the results will be present in.</p>
    pub fn country(mut self, input: f64) -> Self {
        self.country = ::std::option::Option::Some(input);
        self
    }
    /// <p>The alpha-2 or alpha-3 character code for the country that the results will be present in.</p>
    pub fn set_country(mut self, input: ::std::option::Option<f64>) -> Self {
        self.country = input;
        self
    }
    /// <p>The alpha-2 or alpha-3 character code for the country that the results will be present in.</p>
    pub fn get_country(&self) -> &::std::option::Option<f64> {
        &self.country
    }
    /// <p>The region or state results should be to be present in.</p>
    /// <p>Example: <code>North Rhine-Westphalia</code>.</p>
    pub fn region(mut self, input: f64) -> Self {
        self.region = ::std::option::Option::Some(input);
        self
    }
    /// <p>The region or state results should be to be present in.</p>
    /// <p>Example: <code>North Rhine-Westphalia</code>.</p>
    pub fn set_region(mut self, input: ::std::option::Option<f64>) -> Self {
        self.region = input;
        self
    }
    /// <p>The region or state results should be to be present in.</p>
    /// <p>Example: <code>North Rhine-Westphalia</code>.</p>
    pub fn get_region(&self) -> &::std::option::Option<f64> {
        &self.region
    }
    /// <p>The sub-region or county for which results should be present in.</p>
    pub fn sub_region(mut self, input: f64) -> Self {
        self.sub_region = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sub-region or county for which results should be present in.</p>
    pub fn set_sub_region(mut self, input: ::std::option::Option<f64>) -> Self {
        self.sub_region = input;
        self
    }
    /// <p>The sub-region or county for which results should be present in.</p>
    pub fn get_sub_region(&self) -> &::std::option::Option<f64> {
        &self.sub_region
    }
    /// <p>The city or locality results should be present in.</p>
    /// <p>Example: <code>Vancouver</code>.</p>
    pub fn locality(mut self, input: f64) -> Self {
        self.locality = ::std::option::Option::Some(input);
        self
    }
    /// <p>The city or locality results should be present in.</p>
    /// <p>Example: <code>Vancouver</code>.</p>
    pub fn set_locality(mut self, input: ::std::option::Option<f64>) -> Self {
        self.locality = input;
        self
    }
    /// <p>The city or locality results should be present in.</p>
    /// <p>Example: <code>Vancouver</code>.</p>
    pub fn get_locality(&self) -> &::std::option::Option<f64> {
        &self.locality
    }
    /// <p>The district or division of a city the results should be present in.</p>
    pub fn district(mut self, input: f64) -> Self {
        self.district = ::std::option::Option::Some(input);
        self
    }
    /// <p>The district or division of a city the results should be present in.</p>
    pub fn set_district(mut self, input: ::std::option::Option<f64>) -> Self {
        self.district = input;
        self
    }
    /// <p>The district or division of a city the results should be present in.</p>
    pub fn get_district(&self) -> &::std::option::Option<f64> {
        &self.district
    }
    /// <p>A subdivision of a district.</p>
    /// <p>Example: <code>Minden-Lübbecke</code></p>
    pub fn sub_district(mut self, input: f64) -> Self {
        self.sub_district = ::std::option::Option::Some(input);
        self
    }
    /// <p>A subdivision of a district.</p>
    /// <p>Example: <code>Minden-Lübbecke</code></p>
    pub fn set_sub_district(mut self, input: ::std::option::Option<f64>) -> Self {
        self.sub_district = input;
        self
    }
    /// <p>A subdivision of a district.</p>
    /// <p>Example: <code>Minden-Lübbecke</code></p>
    pub fn get_sub_district(&self) -> &::std::option::Option<f64> {
        &self.sub_district
    }
    /// <p>An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code, for which the result should possess.</p>
    pub fn postal_code(mut self, input: f64) -> Self {
        self.postal_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code, for which the result should possess.</p>
    pub fn set_postal_code(mut self, input: ::std::option::Option<f64>) -> Self {
        self.postal_code = input;
        self
    }
    /// <p>An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code, for which the result should possess.</p>
    pub fn get_postal_code(&self) -> &::std::option::Option<f64> {
        &self.postal_code
    }
    /// <p>Name of the block.</p>
    /// <p>Example: <code>Sunny Mansion 203 block: 2 Chome</code></p>
    pub fn block(mut self, input: f64) -> Self {
        self.block = ::std::option::Option::Some(input);
        self
    }
    /// <p>Name of the block.</p>
    /// <p>Example: <code>Sunny Mansion 203 block: 2 Chome</code></p>
    pub fn set_block(mut self, input: ::std::option::Option<f64>) -> Self {
        self.block = input;
        self
    }
    /// <p>Name of the block.</p>
    /// <p>Example: <code>Sunny Mansion 203 block: 2 Chome</code></p>
    pub fn get_block(&self) -> &::std::option::Option<f64> {
        &self.block
    }
    /// <p>Name of sub-block.</p>
    /// <p>Example: <code>Sunny Mansion 203 sub-block: 4</code></p>
    pub fn sub_block(mut self, input: f64) -> Self {
        self.sub_block = ::std::option::Option::Some(input);
        self
    }
    /// <p>Name of sub-block.</p>
    /// <p>Example: <code>Sunny Mansion 203 sub-block: 4</code></p>
    pub fn set_sub_block(mut self, input: ::std::option::Option<f64>) -> Self {
        self.sub_block = input;
        self
    }
    /// <p>Name of sub-block.</p>
    /// <p>Example: <code>Sunny Mansion 203 sub-block: 4</code></p>
    pub fn get_sub_block(&self) -> &::std::option::Option<f64> {
        &self.sub_block
    }
    /// Appends an item to `intersection`.
    ///
    /// To override the contents of this collection use [`set_intersection`](Self::set_intersection).
    ///
    /// <p>Name of the streets in the intersection.</p>
    /// <p>Example: <code>\["Friedrichstraße","Unter den Linden"\]</code></p>
    pub fn intersection(mut self, input: f64) -> Self {
        let mut v = self.intersection.unwrap_or_default();
        v.push(input);
        self.intersection = ::std::option::Option::Some(v);
        self
    }
    /// <p>Name of the streets in the intersection.</p>
    /// <p>Example: <code>\["Friedrichstraße","Unter den Linden"\]</code></p>
    pub fn set_intersection(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.intersection = input;
        self
    }
    /// <p>Name of the streets in the intersection.</p>
    /// <p>Example: <code>\["Friedrichstraße","Unter den Linden"\]</code></p>
    pub fn get_intersection(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.intersection
    }
    /// <p>The house number or address results should have.</p>
    pub fn address_number(mut self, input: f64) -> Self {
        self.address_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The house number or address results should have.</p>
    pub fn set_address_number(mut self, input: ::std::option::Option<f64>) -> Self {
        self.address_number = input;
        self
    }
    /// <p>The house number or address results should have.</p>
    pub fn get_address_number(&self) -> &::std::option::Option<f64> {
        &self.address_number
    }
    /// <p>The name of the building at the address.</p>
    pub fn building(mut self, input: f64) -> Self {
        self.building = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the building at the address.</p>
    pub fn set_building(mut self, input: ::std::option::Option<f64>) -> Self {
        self.building = input;
        self
    }
    /// <p>The name of the building at the address.</p>
    pub fn get_building(&self) -> &::std::option::Option<f64> {
        &self.building
    }
    /// Appends an item to `secondary_address_components`.
    ///
    /// To override the contents of this collection use [`set_secondary_address_components`](Self::set_secondary_address_components).
    ///
    /// <p>Match scores for the secondary address components in the result.</p>
    pub fn secondary_address_components(mut self, input: crate::types::SecondaryAddressComponentMatchScore) -> Self {
        let mut v = self.secondary_address_components.unwrap_or_default();
        v.push(input);
        self.secondary_address_components = ::std::option::Option::Some(v);
        self
    }
    /// <p>Match scores for the secondary address components in the result.</p>
    pub fn set_secondary_address_components(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::SecondaryAddressComponentMatchScore>>,
    ) -> Self {
        self.secondary_address_components = input;
        self
    }
    /// <p>Match scores for the secondary address components in the result.</p>
    pub fn get_secondary_address_components(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SecondaryAddressComponentMatchScore>> {
        &self.secondary_address_components
    }
    /// Consumes the builder and constructs a [`AddressComponentMatchScores`](crate::types::AddressComponentMatchScores).
    pub fn build(self) -> crate::types::AddressComponentMatchScores {
        crate::types::AddressComponentMatchScores {
            country: self.country.unwrap_or_default(),
            region: self.region.unwrap_or_default(),
            sub_region: self.sub_region.unwrap_or_default(),
            locality: self.locality.unwrap_or_default(),
            district: self.district.unwrap_or_default(),
            sub_district: self.sub_district.unwrap_or_default(),
            postal_code: self.postal_code.unwrap_or_default(),
            block: self.block.unwrap_or_default(),
            sub_block: self.sub_block.unwrap_or_default(),
            intersection: self.intersection,
            address_number: self.address_number.unwrap_or_default(),
            building: self.building.unwrap_or_default(),
            secondary_address_components: self.secondary_address_components,
        }
    }
}
