// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A result matching the input query text.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AutocompleteResultItem {
    /// <p>The PlaceId of the place associated with this result. This can be used to look up additional details about the result via GetPlace.</p>
    pub place_id: ::std::string::String,
    /// <p>PlaceType describes the type of result entry returned.</p>
    pub place_type: crate::types::PlaceType,
    /// <p>A formatted string for display when presenting this result to an end user.</p>
    pub title: ::std::string::String,
    /// <p>The address associated with this result.</p>
    pub address: ::std::option::Option<crate::types::Address>,
    /// <p>The distance in meters between the center of the search area and this result. Useful to evaluate how far away from the original bias position the result is.</p>
    pub distance: i64,
    /// <p>A list of <a href="https://en.wikipedia.org/wiki/IETF_language_tag">BCP 47</a> compliant language codes for the results to be rendered in. If there is no data for the result in the requested language, data will be returned in the default language for the entry.</p>
    pub language: ::std::option::Option<::std::string::String>,
    /// <p>The alpha-2 or alpha-3 character code for the political view of a country. The political view applies to the results of the request to represent unresolved territorial claims through the point of view of the specified country.</p>
    pub political_view: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the starting and ending index of the place in the text query that match the found title.</p>
    pub highlights: ::std::option::Option<crate::types::AutocompleteHighlights>,
}
impl AutocompleteResultItem {
    /// <p>The PlaceId of the place associated with this result. This can be used to look up additional details about the result via GetPlace.</p>
    pub fn place_id(&self) -> &str {
        use std::ops::Deref;
        self.place_id.deref()
    }
    /// <p>PlaceType describes the type of result entry returned.</p>
    pub fn place_type(&self) -> &crate::types::PlaceType {
        &self.place_type
    }
    /// <p>A formatted string for display when presenting this result to an end user.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>The address associated with this result.</p>
    pub fn address(&self) -> ::std::option::Option<&crate::types::Address> {
        self.address.as_ref()
    }
    /// <p>The distance in meters between the center of the search area and this result. Useful to evaluate how far away from the original bias position the result is.</p>
    pub fn distance(&self) -> i64 {
        self.distance
    }
    /// <p>A list of <a href="https://en.wikipedia.org/wiki/IETF_language_tag">BCP 47</a> compliant language codes for the results to be rendered in. If there is no data for the result in the requested language, data will be returned in the default language for the entry.</p>
    pub fn language(&self) -> ::std::option::Option<&str> {
        self.language.as_deref()
    }
    /// <p>The alpha-2 or alpha-3 character code for the political view of a country. The political view applies to the results of the request to represent unresolved territorial claims through the point of view of the specified country.</p>
    pub fn political_view(&self) -> ::std::option::Option<&str> {
        self.political_view.as_deref()
    }
    /// <p>Indicates the starting and ending index of the place in the text query that match the found title.</p>
    pub fn highlights(&self) -> ::std::option::Option<&crate::types::AutocompleteHighlights> {
        self.highlights.as_ref()
    }
}
impl ::std::fmt::Debug for AutocompleteResultItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutocompleteResultItem");
        formatter.field("place_id", &"*** Sensitive Data Redacted ***");
        formatter.field("place_type", &"*** Sensitive Data Redacted ***");
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("address", &self.address);
        formatter.field("distance", &"*** Sensitive Data Redacted ***");
        formatter.field("language", &self.language);
        formatter.field("political_view", &"*** Sensitive Data Redacted ***");
        formatter.field("highlights", &self.highlights);
        formatter.finish()
    }
}
impl AutocompleteResultItem {
    /// Creates a new builder-style object to manufacture [`AutocompleteResultItem`](crate::types::AutocompleteResultItem).
    pub fn builder() -> crate::types::builders::AutocompleteResultItemBuilder {
        crate::types::builders::AutocompleteResultItemBuilder::default()
    }
}

/// A builder for [`AutocompleteResultItem`](crate::types::AutocompleteResultItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AutocompleteResultItemBuilder {
    pub(crate) place_id: ::std::option::Option<::std::string::String>,
    pub(crate) place_type: ::std::option::Option<crate::types::PlaceType>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) address: ::std::option::Option<crate::types::Address>,
    pub(crate) distance: ::std::option::Option<i64>,
    pub(crate) language: ::std::option::Option<::std::string::String>,
    pub(crate) political_view: ::std::option::Option<::std::string::String>,
    pub(crate) highlights: ::std::option::Option<crate::types::AutocompleteHighlights>,
}
impl AutocompleteResultItemBuilder {
    /// <p>The PlaceId of the place associated with this result. This can be used to look up additional details about the result via GetPlace.</p>
    /// This field is required.
    pub fn place_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.place_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The PlaceId of the place associated with this result. This can be used to look up additional details about the result via GetPlace.</p>
    pub fn set_place_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.place_id = input;
        self
    }
    /// <p>The PlaceId of the place associated with this result. This can be used to look up additional details about the result via GetPlace.</p>
    pub fn get_place_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.place_id
    }
    /// <p>PlaceType describes the type of result entry returned.</p>
    /// This field is required.
    pub fn place_type(mut self, input: crate::types::PlaceType) -> Self {
        self.place_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>PlaceType describes the type of result entry returned.</p>
    pub fn set_place_type(mut self, input: ::std::option::Option<crate::types::PlaceType>) -> Self {
        self.place_type = input;
        self
    }
    /// <p>PlaceType describes the type of result entry returned.</p>
    pub fn get_place_type(&self) -> &::std::option::Option<crate::types::PlaceType> {
        &self.place_type
    }
    /// <p>A formatted string for display when presenting this result to an end user.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A formatted string for display when presenting this result to an end user.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>A formatted string for display when presenting this result to an end user.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The address associated with this result.</p>
    pub fn address(mut self, input: crate::types::Address) -> Self {
        self.address = ::std::option::Option::Some(input);
        self
    }
    /// <p>The address associated with this result.</p>
    pub fn set_address(mut self, input: ::std::option::Option<crate::types::Address>) -> Self {
        self.address = input;
        self
    }
    /// <p>The address associated with this result.</p>
    pub fn get_address(&self) -> &::std::option::Option<crate::types::Address> {
        &self.address
    }
    /// <p>The distance in meters between the center of the search area and this result. Useful to evaluate how far away from the original bias position the result is.</p>
    pub fn distance(mut self, input: i64) -> Self {
        self.distance = ::std::option::Option::Some(input);
        self
    }
    /// <p>The distance in meters between the center of the search area and this result. Useful to evaluate how far away from the original bias position the result is.</p>
    pub fn set_distance(mut self, input: ::std::option::Option<i64>) -> Self {
        self.distance = input;
        self
    }
    /// <p>The distance in meters between the center of the search area and this result. Useful to evaluate how far away from the original bias position the result is.</p>
    pub fn get_distance(&self) -> &::std::option::Option<i64> {
        &self.distance
    }
    /// <p>A list of <a href="https://en.wikipedia.org/wiki/IETF_language_tag">BCP 47</a> compliant language codes for the results to be rendered in. If there is no data for the result in the requested language, data will be returned in the default language for the entry.</p>
    pub fn language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.language = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A list of <a href="https://en.wikipedia.org/wiki/IETF_language_tag">BCP 47</a> compliant language codes for the results to be rendered in. If there is no data for the result in the requested language, data will be returned in the default language for the entry.</p>
    pub fn set_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.language = input;
        self
    }
    /// <p>A list of <a href="https://en.wikipedia.org/wiki/IETF_language_tag">BCP 47</a> compliant language codes for the results to be rendered in. If there is no data for the result in the requested language, data will be returned in the default language for the entry.</p>
    pub fn get_language(&self) -> &::std::option::Option<::std::string::String> {
        &self.language
    }
    /// <p>The alpha-2 or alpha-3 character code for the political view of a country. The political view applies to the results of the request to represent unresolved territorial claims through the point of view of the specified country.</p>
    pub fn political_view(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.political_view = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The alpha-2 or alpha-3 character code for the political view of a country. The political view applies to the results of the request to represent unresolved territorial claims through the point of view of the specified country.</p>
    pub fn set_political_view(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.political_view = input;
        self
    }
    /// <p>The alpha-2 or alpha-3 character code for the political view of a country. The political view applies to the results of the request to represent unresolved territorial claims through the point of view of the specified country.</p>
    pub fn get_political_view(&self) -> &::std::option::Option<::std::string::String> {
        &self.political_view
    }
    /// <p>Indicates the starting and ending index of the place in the text query that match the found title.</p>
    pub fn highlights(mut self, input: crate::types::AutocompleteHighlights) -> Self {
        self.highlights = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the starting and ending index of the place in the text query that match the found title.</p>
    pub fn set_highlights(mut self, input: ::std::option::Option<crate::types::AutocompleteHighlights>) -> Self {
        self.highlights = input;
        self
    }
    /// <p>Indicates the starting and ending index of the place in the text query that match the found title.</p>
    pub fn get_highlights(&self) -> &::std::option::Option<crate::types::AutocompleteHighlights> {
        &self.highlights
    }
    /// Consumes the builder and constructs a [`AutocompleteResultItem`](crate::types::AutocompleteResultItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`place_id`](crate::types::builders::AutocompleteResultItemBuilder::place_id)
    /// - [`place_type`](crate::types::builders::AutocompleteResultItemBuilder::place_type)
    /// - [`title`](crate::types::builders::AutocompleteResultItemBuilder::title)
    pub fn build(self) -> ::std::result::Result<crate::types::AutocompleteResultItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AutocompleteResultItem {
            place_id: self.place_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "place_id",
                    "place_id was not specified but it is required when building AutocompleteResultItem",
                )
            })?,
            place_type: self.place_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "place_type",
                    "place_type was not specified but it is required when building AutocompleteResultItem",
                )
            })?,
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building AutocompleteResultItem",
                )
            })?,
            address: self.address,
            distance: self.distance.unwrap_or_default(),
            language: self.language,
            political_view: self.political_view,
            highlights: self.highlights,
        })
    }
}
impl ::std::fmt::Debug for AutocompleteResultItemBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutocompleteResultItemBuilder");
        formatter.field("place_id", &"*** Sensitive Data Redacted ***");
        formatter.field("place_type", &"*** Sensitive Data Redacted ***");
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("address", &self.address);
        formatter.field("distance", &"*** Sensitive Data Redacted ***");
        formatter.field("language", &self.language);
        formatter.field("political_view", &"*** Sensitive Data Redacted ***");
        formatter.field("highlights", &self.highlights);
        formatter.finish()
    }
}
