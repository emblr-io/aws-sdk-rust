// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The resulting item from the suggested query.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SuggestResultItem {
    /// <p>The display title that should be used when presenting this option to the end user.</p>
    pub title: ::std::string::String,
    /// <p>The result type. Place results represent the final result for a point of interest, Query results represent a follow up query which can be completed through the SearchText operation.</p>
    pub suggest_result_item_type: crate::types::SuggestResultItemType,
    /// <p>The suggested place by its unique ID.</p>
    pub place: ::std::option::Option<crate::types::SuggestPlaceResult>,
    /// <p>The suggested query results.</p>
    pub query: ::std::option::Option<crate::types::SuggestQueryResult>,
    /// <p>Describes how the parts of the response element matched the input query by returning the sections of the response which matched to input query terms.</p>
    pub highlights: ::std::option::Option<crate::types::SuggestHighlights>,
}
impl SuggestResultItem {
    /// <p>The display title that should be used when presenting this option to the end user.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>The result type. Place results represent the final result for a point of interest, Query results represent a follow up query which can be completed through the SearchText operation.</p>
    pub fn suggest_result_item_type(&self) -> &crate::types::SuggestResultItemType {
        &self.suggest_result_item_type
    }
    /// <p>The suggested place by its unique ID.</p>
    pub fn place(&self) -> ::std::option::Option<&crate::types::SuggestPlaceResult> {
        self.place.as_ref()
    }
    /// <p>The suggested query results.</p>
    pub fn query(&self) -> ::std::option::Option<&crate::types::SuggestQueryResult> {
        self.query.as_ref()
    }
    /// <p>Describes how the parts of the response element matched the input query by returning the sections of the response which matched to input query terms.</p>
    pub fn highlights(&self) -> ::std::option::Option<&crate::types::SuggestHighlights> {
        self.highlights.as_ref()
    }
}
impl ::std::fmt::Debug for SuggestResultItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SuggestResultItem");
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("suggest_result_item_type", &self.suggest_result_item_type);
        formatter.field("place", &self.place);
        formatter.field("query", &self.query);
        formatter.field("highlights", &self.highlights);
        formatter.finish()
    }
}
impl SuggestResultItem {
    /// Creates a new builder-style object to manufacture [`SuggestResultItem`](crate::types::SuggestResultItem).
    pub fn builder() -> crate::types::builders::SuggestResultItemBuilder {
        crate::types::builders::SuggestResultItemBuilder::default()
    }
}

/// A builder for [`SuggestResultItem`](crate::types::SuggestResultItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct SuggestResultItemBuilder {
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) suggest_result_item_type: ::std::option::Option<crate::types::SuggestResultItemType>,
    pub(crate) place: ::std::option::Option<crate::types::SuggestPlaceResult>,
    pub(crate) query: ::std::option::Option<crate::types::SuggestQueryResult>,
    pub(crate) highlights: ::std::option::Option<crate::types::SuggestHighlights>,
}
impl SuggestResultItemBuilder {
    /// <p>The display title that should be used when presenting this option to the end user.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display title that should be used when presenting this option to the end user.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The display title that should be used when presenting this option to the end user.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The result type. Place results represent the final result for a point of interest, Query results represent a follow up query which can be completed through the SearchText operation.</p>
    /// This field is required.
    pub fn suggest_result_item_type(mut self, input: crate::types::SuggestResultItemType) -> Self {
        self.suggest_result_item_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The result type. Place results represent the final result for a point of interest, Query results represent a follow up query which can be completed through the SearchText operation.</p>
    pub fn set_suggest_result_item_type(mut self, input: ::std::option::Option<crate::types::SuggestResultItemType>) -> Self {
        self.suggest_result_item_type = input;
        self
    }
    /// <p>The result type. Place results represent the final result for a point of interest, Query results represent a follow up query which can be completed through the SearchText operation.</p>
    pub fn get_suggest_result_item_type(&self) -> &::std::option::Option<crate::types::SuggestResultItemType> {
        &self.suggest_result_item_type
    }
    /// <p>The suggested place by its unique ID.</p>
    pub fn place(mut self, input: crate::types::SuggestPlaceResult) -> Self {
        self.place = ::std::option::Option::Some(input);
        self
    }
    /// <p>The suggested place by its unique ID.</p>
    pub fn set_place(mut self, input: ::std::option::Option<crate::types::SuggestPlaceResult>) -> Self {
        self.place = input;
        self
    }
    /// <p>The suggested place by its unique ID.</p>
    pub fn get_place(&self) -> &::std::option::Option<crate::types::SuggestPlaceResult> {
        &self.place
    }
    /// <p>The suggested query results.</p>
    pub fn query(mut self, input: crate::types::SuggestQueryResult) -> Self {
        self.query = ::std::option::Option::Some(input);
        self
    }
    /// <p>The suggested query results.</p>
    pub fn set_query(mut self, input: ::std::option::Option<crate::types::SuggestQueryResult>) -> Self {
        self.query = input;
        self
    }
    /// <p>The suggested query results.</p>
    pub fn get_query(&self) -> &::std::option::Option<crate::types::SuggestQueryResult> {
        &self.query
    }
    /// <p>Describes how the parts of the response element matched the input query by returning the sections of the response which matched to input query terms.</p>
    pub fn highlights(mut self, input: crate::types::SuggestHighlights) -> Self {
        self.highlights = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes how the parts of the response element matched the input query by returning the sections of the response which matched to input query terms.</p>
    pub fn set_highlights(mut self, input: ::std::option::Option<crate::types::SuggestHighlights>) -> Self {
        self.highlights = input;
        self
    }
    /// <p>Describes how the parts of the response element matched the input query by returning the sections of the response which matched to input query terms.</p>
    pub fn get_highlights(&self) -> &::std::option::Option<crate::types::SuggestHighlights> {
        &self.highlights
    }
    /// Consumes the builder and constructs a [`SuggestResultItem`](crate::types::SuggestResultItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`title`](crate::types::builders::SuggestResultItemBuilder::title)
    /// - [`suggest_result_item_type`](crate::types::builders::SuggestResultItemBuilder::suggest_result_item_type)
    pub fn build(self) -> ::std::result::Result<crate::types::SuggestResultItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SuggestResultItem {
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building SuggestResultItem",
                )
            })?,
            suggest_result_item_type: self.suggest_result_item_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "suggest_result_item_type",
                    "suggest_result_item_type was not specified but it is required when building SuggestResultItem",
                )
            })?,
            place: self.place,
            query: self.query,
            highlights: self.highlights,
        })
    }
}
impl ::std::fmt::Debug for SuggestResultItemBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SuggestResultItemBuilder");
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("suggest_result_item_type", &self.suggest_result_item_type);
        formatter.field("place", &self.place);
        formatter.field("query", &self.query);
        formatter.field("highlights", &self.highlights);
        formatter.finish()
    }
}
