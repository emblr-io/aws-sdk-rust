// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of potential contact methods for the result/place.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Contacts {
    /// <p>List of phone numbers for the results contact.</p>
    pub phones: ::std::option::Option<::std::vec::Vec<crate::types::ContactDetails>>,
    /// <p>List of fax addresses for the result contact.</p>
    pub faxes: ::std::option::Option<::std::vec::Vec<crate::types::ContactDetails>>,
    /// <p>List of website URLs that belong to the result.</p>
    pub websites: ::std::option::Option<::std::vec::Vec<crate::types::ContactDetails>>,
    /// <p>List of emails for contacts of the result.</p>
    pub emails: ::std::option::Option<::std::vec::Vec<crate::types::ContactDetails>>,
}
impl Contacts {
    /// <p>List of phone numbers for the results contact.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.phones.is_none()`.
    pub fn phones(&self) -> &[crate::types::ContactDetails] {
        self.phones.as_deref().unwrap_or_default()
    }
    /// <p>List of fax addresses for the result contact.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.faxes.is_none()`.
    pub fn faxes(&self) -> &[crate::types::ContactDetails] {
        self.faxes.as_deref().unwrap_or_default()
    }
    /// <p>List of website URLs that belong to the result.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.websites.is_none()`.
    pub fn websites(&self) -> &[crate::types::ContactDetails] {
        self.websites.as_deref().unwrap_or_default()
    }
    /// <p>List of emails for contacts of the result.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.emails.is_none()`.
    pub fn emails(&self) -> &[crate::types::ContactDetails] {
        self.emails.as_deref().unwrap_or_default()
    }
}
impl Contacts {
    /// Creates a new builder-style object to manufacture [`Contacts`](crate::types::Contacts).
    pub fn builder() -> crate::types::builders::ContactsBuilder {
        crate::types::builders::ContactsBuilder::default()
    }
}

/// A builder for [`Contacts`](crate::types::Contacts).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContactsBuilder {
    pub(crate) phones: ::std::option::Option<::std::vec::Vec<crate::types::ContactDetails>>,
    pub(crate) faxes: ::std::option::Option<::std::vec::Vec<crate::types::ContactDetails>>,
    pub(crate) websites: ::std::option::Option<::std::vec::Vec<crate::types::ContactDetails>>,
    pub(crate) emails: ::std::option::Option<::std::vec::Vec<crate::types::ContactDetails>>,
}
impl ContactsBuilder {
    /// Appends an item to `phones`.
    ///
    /// To override the contents of this collection use [`set_phones`](Self::set_phones).
    ///
    /// <p>List of phone numbers for the results contact.</p>
    pub fn phones(mut self, input: crate::types::ContactDetails) -> Self {
        let mut v = self.phones.unwrap_or_default();
        v.push(input);
        self.phones = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of phone numbers for the results contact.</p>
    pub fn set_phones(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContactDetails>>) -> Self {
        self.phones = input;
        self
    }
    /// <p>List of phone numbers for the results contact.</p>
    pub fn get_phones(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContactDetails>> {
        &self.phones
    }
    /// Appends an item to `faxes`.
    ///
    /// To override the contents of this collection use [`set_faxes`](Self::set_faxes).
    ///
    /// <p>List of fax addresses for the result contact.</p>
    pub fn faxes(mut self, input: crate::types::ContactDetails) -> Self {
        let mut v = self.faxes.unwrap_or_default();
        v.push(input);
        self.faxes = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of fax addresses for the result contact.</p>
    pub fn set_faxes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContactDetails>>) -> Self {
        self.faxes = input;
        self
    }
    /// <p>List of fax addresses for the result contact.</p>
    pub fn get_faxes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContactDetails>> {
        &self.faxes
    }
    /// Appends an item to `websites`.
    ///
    /// To override the contents of this collection use [`set_websites`](Self::set_websites).
    ///
    /// <p>List of website URLs that belong to the result.</p>
    pub fn websites(mut self, input: crate::types::ContactDetails) -> Self {
        let mut v = self.websites.unwrap_or_default();
        v.push(input);
        self.websites = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of website URLs that belong to the result.</p>
    pub fn set_websites(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContactDetails>>) -> Self {
        self.websites = input;
        self
    }
    /// <p>List of website URLs that belong to the result.</p>
    pub fn get_websites(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContactDetails>> {
        &self.websites
    }
    /// Appends an item to `emails`.
    ///
    /// To override the contents of this collection use [`set_emails`](Self::set_emails).
    ///
    /// <p>List of emails for contacts of the result.</p>
    pub fn emails(mut self, input: crate::types::ContactDetails) -> Self {
        let mut v = self.emails.unwrap_or_default();
        v.push(input);
        self.emails = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of emails for contacts of the result.</p>
    pub fn set_emails(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContactDetails>>) -> Self {
        self.emails = input;
        self
    }
    /// <p>List of emails for contacts of the result.</p>
    pub fn get_emails(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContactDetails>> {
        &self.emails
    }
    /// Consumes the builder and constructs a [`Contacts`](crate::types::Contacts).
    pub fn build(self) -> crate::types::Contacts {
        crate::types::Contacts {
            phones: self.phones,
            faxes: self.faxes,
            websites: self.websites,
            emails: self.emails,
        }
    }
}
