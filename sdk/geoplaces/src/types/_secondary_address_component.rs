// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Components that correspond to secondary identifiers on an address. The only component type supported currently is Unit.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SecondaryAddressComponent {
    /// <p>Number that uniquely identifies a secondary address.</p>
    pub number: ::std::string::String,
}
impl SecondaryAddressComponent {
    /// <p>Number that uniquely identifies a secondary address.</p>
    pub fn number(&self) -> &str {
        use std::ops::Deref;
        self.number.deref()
    }
}
impl ::std::fmt::Debug for SecondaryAddressComponent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SecondaryAddressComponent");
        formatter.field("number", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl SecondaryAddressComponent {
    /// Creates a new builder-style object to manufacture [`SecondaryAddressComponent`](crate::types::SecondaryAddressComponent).
    pub fn builder() -> crate::types::builders::SecondaryAddressComponentBuilder {
        crate::types::builders::SecondaryAddressComponentBuilder::default()
    }
}

/// A builder for [`SecondaryAddressComponent`](crate::types::SecondaryAddressComponent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct SecondaryAddressComponentBuilder {
    pub(crate) number: ::std::option::Option<::std::string::String>,
}
impl SecondaryAddressComponentBuilder {
    /// <p>Number that uniquely identifies a secondary address.</p>
    /// This field is required.
    pub fn number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Number that uniquely identifies a secondary address.</p>
    pub fn set_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.number = input;
        self
    }
    /// <p>Number that uniquely identifies a secondary address.</p>
    pub fn get_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.number
    }
    /// Consumes the builder and constructs a [`SecondaryAddressComponent`](crate::types::SecondaryAddressComponent).
    /// This method will fail if any of the following fields are not set:
    /// - [`number`](crate::types::builders::SecondaryAddressComponentBuilder::number)
    pub fn build(self) -> ::std::result::Result<crate::types::SecondaryAddressComponent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SecondaryAddressComponent {
            number: self.number.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "number",
                    "number was not specified but it is required when building SecondaryAddressComponent",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for SecondaryAddressComponentBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SecondaryAddressComponentBuilder");
        formatter.field("number", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
