// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Parsed components in the provided QueryText.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeocodeParsedQuery {
    /// <p>The localized display name of this result item based on request parameter <code>language</code>.</p>
    pub title: ::std::option::Option<::std::vec::Vec<crate::types::ParsedQueryComponent>>,
    /// <p>The place address.</p>
    pub address: ::std::option::Option<crate::types::GeocodeParsedQueryAddressComponents>,
}
impl GeocodeParsedQuery {
    /// <p>The localized display name of this result item based on request parameter <code>language</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.title.is_none()`.
    pub fn title(&self) -> &[crate::types::ParsedQueryComponent] {
        self.title.as_deref().unwrap_or_default()
    }
    /// <p>The place address.</p>
    pub fn address(&self) -> ::std::option::Option<&crate::types::GeocodeParsedQueryAddressComponents> {
        self.address.as_ref()
    }
}
impl GeocodeParsedQuery {
    /// Creates a new builder-style object to manufacture [`GeocodeParsedQuery`](crate::types::GeocodeParsedQuery).
    pub fn builder() -> crate::types::builders::GeocodeParsedQueryBuilder {
        crate::types::builders::GeocodeParsedQueryBuilder::default()
    }
}

/// A builder for [`GeocodeParsedQuery`](crate::types::GeocodeParsedQuery).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GeocodeParsedQueryBuilder {
    pub(crate) title: ::std::option::Option<::std::vec::Vec<crate::types::ParsedQueryComponent>>,
    pub(crate) address: ::std::option::Option<crate::types::GeocodeParsedQueryAddressComponents>,
}
impl GeocodeParsedQueryBuilder {
    /// Appends an item to `title`.
    ///
    /// To override the contents of this collection use [`set_title`](Self::set_title).
    ///
    /// <p>The localized display name of this result item based on request parameter <code>language</code>.</p>
    pub fn title(mut self, input: crate::types::ParsedQueryComponent) -> Self {
        let mut v = self.title.unwrap_or_default();
        v.push(input);
        self.title = ::std::option::Option::Some(v);
        self
    }
    /// <p>The localized display name of this result item based on request parameter <code>language</code>.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ParsedQueryComponent>>) -> Self {
        self.title = input;
        self
    }
    /// <p>The localized display name of this result item based on request parameter <code>language</code>.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ParsedQueryComponent>> {
        &self.title
    }
    /// <p>The place address.</p>
    pub fn address(mut self, input: crate::types::GeocodeParsedQueryAddressComponents) -> Self {
        self.address = ::std::option::Option::Some(input);
        self
    }
    /// <p>The place address.</p>
    pub fn set_address(mut self, input: ::std::option::Option<crate::types::GeocodeParsedQueryAddressComponents>) -> Self {
        self.address = input;
        self
    }
    /// <p>The place address.</p>
    pub fn get_address(&self) -> &::std::option::Option<crate::types::GeocodeParsedQueryAddressComponents> {
        &self.address
    }
    /// Consumes the builder and constructs a [`GeocodeParsedQuery`](crate::types::GeocodeParsedQuery).
    pub fn build(self) -> crate::types::GeocodeParsedQuery {
        crate::types::GeocodeParsedQuery {
            title: self.title,
            address: self.address,
        }
    }
}
