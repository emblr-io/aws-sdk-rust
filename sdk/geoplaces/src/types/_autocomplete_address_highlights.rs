// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes how the parts of the response element matched the input query by returning the sections of the response which matched to input query terms.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutocompleteAddressHighlights {
    /// <p>Indicates the starting and ending indexes for result items where they are identified to match the input query. This should be used to provide emphasis to output display to make selecting the correct result from a list easier for end users.</p>
    pub label: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
    /// <p>The alpha-2 or alpha-3 character code for the country that the results will be present in.</p>
    pub country: ::std::option::Option<crate::types::CountryHighlights>,
    /// <p>The region or state results should be to be present in.</p>
    /// <p>Example: <code>North Rhine-Westphalia</code>.</p>
    pub region: ::std::option::Option<crate::types::RegionHighlights>,
    /// <p>The sub-region or county for which results should be present in.</p>
    pub sub_region: ::std::option::Option<crate::types::SubRegionHighlights>,
    /// <p>The city or locality results should be present in.</p>
    /// <p>Example: <code>Vancouver</code>.</p>
    pub locality: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
    /// <p>The district or division of a city the results should be present in.</p>
    pub district: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
    /// <p>Indicates the starting and ending index of the title in the text query that match the found title.</p>
    pub sub_district: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
    /// <p>The name of the street results should be present in.</p>
    pub street: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
    /// <p>Name of the block.</p>
    /// <p>Example: <code>Sunny Mansion 203 block: 2 Chome</code></p>
    pub block: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
    /// <p>Name of sub-block.</p>
    /// <p>Example: <code>Sunny Mansion 203 sub-block: 4</code></p>
    pub sub_block: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
    /// <p>Name of the streets in the intersection. For example: e.g. \["Friedrichstraße","Unter den Linden"\]</p>
    pub intersection: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<crate::types::Highlight>>>,
    /// <p>An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code for which the result should possess.</p>
    pub postal_code: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
    /// <p>The house number or address results should have.</p>
    pub address_number: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
    /// <p>The name of the building at the address.</p>
    pub building: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
}
impl AutocompleteAddressHighlights {
    /// <p>Indicates the starting and ending indexes for result items where they are identified to match the input query. This should be used to provide emphasis to output display to make selecting the correct result from a list easier for end users.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.label.is_none()`.
    pub fn label(&self) -> &[crate::types::Highlight] {
        self.label.as_deref().unwrap_or_default()
    }
    /// <p>The alpha-2 or alpha-3 character code for the country that the results will be present in.</p>
    pub fn country(&self) -> ::std::option::Option<&crate::types::CountryHighlights> {
        self.country.as_ref()
    }
    /// <p>The region or state results should be to be present in.</p>
    /// <p>Example: <code>North Rhine-Westphalia</code>.</p>
    pub fn region(&self) -> ::std::option::Option<&crate::types::RegionHighlights> {
        self.region.as_ref()
    }
    /// <p>The sub-region or county for which results should be present in.</p>
    pub fn sub_region(&self) -> ::std::option::Option<&crate::types::SubRegionHighlights> {
        self.sub_region.as_ref()
    }
    /// <p>The city or locality results should be present in.</p>
    /// <p>Example: <code>Vancouver</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.locality.is_none()`.
    pub fn locality(&self) -> &[crate::types::Highlight] {
        self.locality.as_deref().unwrap_or_default()
    }
    /// <p>The district or division of a city the results should be present in.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.district.is_none()`.
    pub fn district(&self) -> &[crate::types::Highlight] {
        self.district.as_deref().unwrap_or_default()
    }
    /// <p>Indicates the starting and ending index of the title in the text query that match the found title.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sub_district.is_none()`.
    pub fn sub_district(&self) -> &[crate::types::Highlight] {
        self.sub_district.as_deref().unwrap_or_default()
    }
    /// <p>The name of the street results should be present in.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.street.is_none()`.
    pub fn street(&self) -> &[crate::types::Highlight] {
        self.street.as_deref().unwrap_or_default()
    }
    /// <p>Name of the block.</p>
    /// <p>Example: <code>Sunny Mansion 203 block: 2 Chome</code></p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.block.is_none()`.
    pub fn block(&self) -> &[crate::types::Highlight] {
        self.block.as_deref().unwrap_or_default()
    }
    /// <p>Name of sub-block.</p>
    /// <p>Example: <code>Sunny Mansion 203 sub-block: 4</code></p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sub_block.is_none()`.
    pub fn sub_block(&self) -> &[crate::types::Highlight] {
        self.sub_block.as_deref().unwrap_or_default()
    }
    /// <p>Name of the streets in the intersection. For example: e.g. \["Friedrichstraße","Unter den Linden"\]</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.intersection.is_none()`.
    pub fn intersection(&self) -> &[::std::vec::Vec<crate::types::Highlight>] {
        self.intersection.as_deref().unwrap_or_default()
    }
    /// <p>An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code for which the result should possess.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.postal_code.is_none()`.
    pub fn postal_code(&self) -> &[crate::types::Highlight] {
        self.postal_code.as_deref().unwrap_or_default()
    }
    /// <p>The house number or address results should have.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.address_number.is_none()`.
    pub fn address_number(&self) -> &[crate::types::Highlight] {
        self.address_number.as_deref().unwrap_or_default()
    }
    /// <p>The name of the building at the address.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.building.is_none()`.
    pub fn building(&self) -> &[crate::types::Highlight] {
        self.building.as_deref().unwrap_or_default()
    }
}
impl AutocompleteAddressHighlights {
    /// Creates a new builder-style object to manufacture [`AutocompleteAddressHighlights`](crate::types::AutocompleteAddressHighlights).
    pub fn builder() -> crate::types::builders::AutocompleteAddressHighlightsBuilder {
        crate::types::builders::AutocompleteAddressHighlightsBuilder::default()
    }
}

/// A builder for [`AutocompleteAddressHighlights`](crate::types::AutocompleteAddressHighlights).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutocompleteAddressHighlightsBuilder {
    pub(crate) label: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
    pub(crate) country: ::std::option::Option<crate::types::CountryHighlights>,
    pub(crate) region: ::std::option::Option<crate::types::RegionHighlights>,
    pub(crate) sub_region: ::std::option::Option<crate::types::SubRegionHighlights>,
    pub(crate) locality: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
    pub(crate) district: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
    pub(crate) sub_district: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
    pub(crate) street: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
    pub(crate) block: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
    pub(crate) sub_block: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
    pub(crate) intersection: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<crate::types::Highlight>>>,
    pub(crate) postal_code: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
    pub(crate) address_number: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
    pub(crate) building: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
}
impl AutocompleteAddressHighlightsBuilder {
    /// Appends an item to `label`.
    ///
    /// To override the contents of this collection use [`set_label`](Self::set_label).
    ///
    /// <p>Indicates the starting and ending indexes for result items where they are identified to match the input query. This should be used to provide emphasis to output display to make selecting the correct result from a list easier for end users.</p>
    pub fn label(mut self, input: crate::types::Highlight) -> Self {
        let mut v = self.label.unwrap_or_default();
        v.push(input);
        self.label = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates the starting and ending indexes for result items where they are identified to match the input query. This should be used to provide emphasis to output display to make selecting the correct result from a list easier for end users.</p>
    pub fn set_label(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>) -> Self {
        self.label = input;
        self
    }
    /// <p>Indicates the starting and ending indexes for result items where they are identified to match the input query. This should be used to provide emphasis to output display to make selecting the correct result from a list easier for end users.</p>
    pub fn get_label(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Highlight>> {
        &self.label
    }
    /// <p>The alpha-2 or alpha-3 character code for the country that the results will be present in.</p>
    pub fn country(mut self, input: crate::types::CountryHighlights) -> Self {
        self.country = ::std::option::Option::Some(input);
        self
    }
    /// <p>The alpha-2 or alpha-3 character code for the country that the results will be present in.</p>
    pub fn set_country(mut self, input: ::std::option::Option<crate::types::CountryHighlights>) -> Self {
        self.country = input;
        self
    }
    /// <p>The alpha-2 or alpha-3 character code for the country that the results will be present in.</p>
    pub fn get_country(&self) -> &::std::option::Option<crate::types::CountryHighlights> {
        &self.country
    }
    /// <p>The region or state results should be to be present in.</p>
    /// <p>Example: <code>North Rhine-Westphalia</code>.</p>
    pub fn region(mut self, input: crate::types::RegionHighlights) -> Self {
        self.region = ::std::option::Option::Some(input);
        self
    }
    /// <p>The region or state results should be to be present in.</p>
    /// <p>Example: <code>North Rhine-Westphalia</code>.</p>
    pub fn set_region(mut self, input: ::std::option::Option<crate::types::RegionHighlights>) -> Self {
        self.region = input;
        self
    }
    /// <p>The region or state results should be to be present in.</p>
    /// <p>Example: <code>North Rhine-Westphalia</code>.</p>
    pub fn get_region(&self) -> &::std::option::Option<crate::types::RegionHighlights> {
        &self.region
    }
    /// <p>The sub-region or county for which results should be present in.</p>
    pub fn sub_region(mut self, input: crate::types::SubRegionHighlights) -> Self {
        self.sub_region = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sub-region or county for which results should be present in.</p>
    pub fn set_sub_region(mut self, input: ::std::option::Option<crate::types::SubRegionHighlights>) -> Self {
        self.sub_region = input;
        self
    }
    /// <p>The sub-region or county for which results should be present in.</p>
    pub fn get_sub_region(&self) -> &::std::option::Option<crate::types::SubRegionHighlights> {
        &self.sub_region
    }
    /// Appends an item to `locality`.
    ///
    /// To override the contents of this collection use [`set_locality`](Self::set_locality).
    ///
    /// <p>The city or locality results should be present in.</p>
    /// <p>Example: <code>Vancouver</code>.</p>
    pub fn locality(mut self, input: crate::types::Highlight) -> Self {
        let mut v = self.locality.unwrap_or_default();
        v.push(input);
        self.locality = ::std::option::Option::Some(v);
        self
    }
    /// <p>The city or locality results should be present in.</p>
    /// <p>Example: <code>Vancouver</code>.</p>
    pub fn set_locality(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>) -> Self {
        self.locality = input;
        self
    }
    /// <p>The city or locality results should be present in.</p>
    /// <p>Example: <code>Vancouver</code>.</p>
    pub fn get_locality(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Highlight>> {
        &self.locality
    }
    /// Appends an item to `district`.
    ///
    /// To override the contents of this collection use [`set_district`](Self::set_district).
    ///
    /// <p>The district or division of a city the results should be present in.</p>
    pub fn district(mut self, input: crate::types::Highlight) -> Self {
        let mut v = self.district.unwrap_or_default();
        v.push(input);
        self.district = ::std::option::Option::Some(v);
        self
    }
    /// <p>The district or division of a city the results should be present in.</p>
    pub fn set_district(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>) -> Self {
        self.district = input;
        self
    }
    /// <p>The district or division of a city the results should be present in.</p>
    pub fn get_district(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Highlight>> {
        &self.district
    }
    /// Appends an item to `sub_district`.
    ///
    /// To override the contents of this collection use [`set_sub_district`](Self::set_sub_district).
    ///
    /// <p>Indicates the starting and ending index of the title in the text query that match the found title.</p>
    pub fn sub_district(mut self, input: crate::types::Highlight) -> Self {
        let mut v = self.sub_district.unwrap_or_default();
        v.push(input);
        self.sub_district = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates the starting and ending index of the title in the text query that match the found title.</p>
    pub fn set_sub_district(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>) -> Self {
        self.sub_district = input;
        self
    }
    /// <p>Indicates the starting and ending index of the title in the text query that match the found title.</p>
    pub fn get_sub_district(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Highlight>> {
        &self.sub_district
    }
    /// Appends an item to `street`.
    ///
    /// To override the contents of this collection use [`set_street`](Self::set_street).
    ///
    /// <p>The name of the street results should be present in.</p>
    pub fn street(mut self, input: crate::types::Highlight) -> Self {
        let mut v = self.street.unwrap_or_default();
        v.push(input);
        self.street = ::std::option::Option::Some(v);
        self
    }
    /// <p>The name of the street results should be present in.</p>
    pub fn set_street(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>) -> Self {
        self.street = input;
        self
    }
    /// <p>The name of the street results should be present in.</p>
    pub fn get_street(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Highlight>> {
        &self.street
    }
    /// Appends an item to `block`.
    ///
    /// To override the contents of this collection use [`set_block`](Self::set_block).
    ///
    /// <p>Name of the block.</p>
    /// <p>Example: <code>Sunny Mansion 203 block: 2 Chome</code></p>
    pub fn block(mut self, input: crate::types::Highlight) -> Self {
        let mut v = self.block.unwrap_or_default();
        v.push(input);
        self.block = ::std::option::Option::Some(v);
        self
    }
    /// <p>Name of the block.</p>
    /// <p>Example: <code>Sunny Mansion 203 block: 2 Chome</code></p>
    pub fn set_block(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>) -> Self {
        self.block = input;
        self
    }
    /// <p>Name of the block.</p>
    /// <p>Example: <code>Sunny Mansion 203 block: 2 Chome</code></p>
    pub fn get_block(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Highlight>> {
        &self.block
    }
    /// Appends an item to `sub_block`.
    ///
    /// To override the contents of this collection use [`set_sub_block`](Self::set_sub_block).
    ///
    /// <p>Name of sub-block.</p>
    /// <p>Example: <code>Sunny Mansion 203 sub-block: 4</code></p>
    pub fn sub_block(mut self, input: crate::types::Highlight) -> Self {
        let mut v = self.sub_block.unwrap_or_default();
        v.push(input);
        self.sub_block = ::std::option::Option::Some(v);
        self
    }
    /// <p>Name of sub-block.</p>
    /// <p>Example: <code>Sunny Mansion 203 sub-block: 4</code></p>
    pub fn set_sub_block(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>) -> Self {
        self.sub_block = input;
        self
    }
    /// <p>Name of sub-block.</p>
    /// <p>Example: <code>Sunny Mansion 203 sub-block: 4</code></p>
    pub fn get_sub_block(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Highlight>> {
        &self.sub_block
    }
    /// Appends an item to `intersection`.
    ///
    /// To override the contents of this collection use [`set_intersection`](Self::set_intersection).
    ///
    /// <p>Name of the streets in the intersection. For example: e.g. \["Friedrichstraße","Unter den Linden"\]</p>
    pub fn intersection(mut self, input: ::std::vec::Vec<crate::types::Highlight>) -> Self {
        let mut v = self.intersection.unwrap_or_default();
        v.push(input);
        self.intersection = ::std::option::Option::Some(v);
        self
    }
    /// <p>Name of the streets in the intersection. For example: e.g. \["Friedrichstraße","Unter den Linden"\]</p>
    pub fn set_intersection(mut self, input: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<crate::types::Highlight>>>) -> Self {
        self.intersection = input;
        self
    }
    /// <p>Name of the streets in the intersection. For example: e.g. \["Friedrichstraße","Unter den Linden"\]</p>
    pub fn get_intersection(&self) -> &::std::option::Option<::std::vec::Vec<::std::vec::Vec<crate::types::Highlight>>> {
        &self.intersection
    }
    /// Appends an item to `postal_code`.
    ///
    /// To override the contents of this collection use [`set_postal_code`](Self::set_postal_code).
    ///
    /// <p>An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code for which the result should possess.</p>
    pub fn postal_code(mut self, input: crate::types::Highlight) -> Self {
        let mut v = self.postal_code.unwrap_or_default();
        v.push(input);
        self.postal_code = ::std::option::Option::Some(v);
        self
    }
    /// <p>An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code for which the result should possess.</p>
    pub fn set_postal_code(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>) -> Self {
        self.postal_code = input;
        self
    }
    /// <p>An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code for which the result should possess.</p>
    pub fn get_postal_code(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Highlight>> {
        &self.postal_code
    }
    /// Appends an item to `address_number`.
    ///
    /// To override the contents of this collection use [`set_address_number`](Self::set_address_number).
    ///
    /// <p>The house number or address results should have.</p>
    pub fn address_number(mut self, input: crate::types::Highlight) -> Self {
        let mut v = self.address_number.unwrap_or_default();
        v.push(input);
        self.address_number = ::std::option::Option::Some(v);
        self
    }
    /// <p>The house number or address results should have.</p>
    pub fn set_address_number(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>) -> Self {
        self.address_number = input;
        self
    }
    /// <p>The house number or address results should have.</p>
    pub fn get_address_number(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Highlight>> {
        &self.address_number
    }
    /// Appends an item to `building`.
    ///
    /// To override the contents of this collection use [`set_building`](Self::set_building).
    ///
    /// <p>The name of the building at the address.</p>
    pub fn building(mut self, input: crate::types::Highlight) -> Self {
        let mut v = self.building.unwrap_or_default();
        v.push(input);
        self.building = ::std::option::Option::Some(v);
        self
    }
    /// <p>The name of the building at the address.</p>
    pub fn set_building(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>) -> Self {
        self.building = input;
        self
    }
    /// <p>The name of the building at the address.</p>
    pub fn get_building(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Highlight>> {
        &self.building
    }
    /// Consumes the builder and constructs a [`AutocompleteAddressHighlights`](crate::types::AutocompleteAddressHighlights).
    pub fn build(self) -> crate::types::AutocompleteAddressHighlights {
        crate::types::AutocompleteAddressHighlights {
            label: self.label,
            country: self.country,
            region: self.region,
            sub_region: self.sub_region,
            locality: self.locality,
            district: self.district,
            sub_district: self.sub_district,
            street: self.street,
            block: self.block,
            sub_block: self.sub_block,
            intersection: self.intersection,
            postal_code: self.postal_code,
            address_number: self.address_number,
            building: self.building,
        }
    }
}
