// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Match score for a secondary address component in the result.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SecondaryAddressComponentMatchScore {
    /// <p>Match score for the secondary address number.</p>
    pub number: f64,
}
impl SecondaryAddressComponentMatchScore {
    /// <p>Match score for the secondary address number.</p>
    pub fn number(&self) -> f64 {
        self.number
    }
}
impl SecondaryAddressComponentMatchScore {
    /// Creates a new builder-style object to manufacture [`SecondaryAddressComponentMatchScore`](crate::types::SecondaryAddressComponentMatchScore).
    pub fn builder() -> crate::types::builders::SecondaryAddressComponentMatchScoreBuilder {
        crate::types::builders::SecondaryAddressComponentMatchScoreBuilder::default()
    }
}

/// A builder for [`SecondaryAddressComponentMatchScore`](crate::types::SecondaryAddressComponentMatchScore).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SecondaryAddressComponentMatchScoreBuilder {
    pub(crate) number: ::std::option::Option<f64>,
}
impl SecondaryAddressComponentMatchScoreBuilder {
    /// <p>Match score for the secondary address number.</p>
    pub fn number(mut self, input: f64) -> Self {
        self.number = ::std::option::Option::Some(input);
        self
    }
    /// <p>Match score for the secondary address number.</p>
    pub fn set_number(mut self, input: ::std::option::Option<f64>) -> Self {
        self.number = input;
        self
    }
    /// <p>Match score for the secondary address number.</p>
    pub fn get_number(&self) -> &::std::option::Option<f64> {
        &self.number
    }
    /// Consumes the builder and constructs a [`SecondaryAddressComponentMatchScore`](crate::types::SecondaryAddressComponentMatchScore).
    pub fn build(self) -> crate::types::SecondaryAddressComponentMatchScore {
        crate::types::SecondaryAddressComponentMatchScore {
            number: self.number.unwrap_or_default(),
        }
    }
}
