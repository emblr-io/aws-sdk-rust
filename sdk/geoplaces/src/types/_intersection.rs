// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>All Intersections that are near the provided address.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Intersection {
    /// <p>The <code>PlaceId</code> of the place result.</p>
    pub place_id: ::std::string::String,
    /// <p>The localized display name of this result item based on request parameter <code>language</code>.</p>
    pub title: ::std::string::String,
    /// <p>The place address.</p>
    pub address: ::std::option::Option<crate::types::Address>,
    /// <p>The position, in longitude and latitude.</p>
    pub position: ::std::option::Option<::std::vec::Vec<f64>>,
    /// <p>The distance in meters from the QueryPosition.</p>
    pub distance: ::std::option::Option<i64>,
    /// <p>The distance from the routing position of the nearby address to the street result.</p>
    pub route_distance: ::std::option::Option<i64>,
    /// <p>The bounding box enclosing the geometric shape (area or line) that an individual result covers.</p>
    /// <p>The bounding box formed is defined as a set of four coordinates: <code>\[{westward lng}, {southern lat}, {eastward lng}, {northern lat}\]</code></p>
    pub map_view: ::std::option::Option<::std::vec::Vec<f64>>,
    /// <p>Position of the access point represented by longitude and latitude.</p>
    pub access_points: ::std::option::Option<::std::vec::Vec<crate::types::AccessPoint>>,
}
impl Intersection {
    /// <p>The <code>PlaceId</code> of the place result.</p>
    pub fn place_id(&self) -> &str {
        use std::ops::Deref;
        self.place_id.deref()
    }
    /// <p>The localized display name of this result item based on request parameter <code>language</code>.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>The place address.</p>
    pub fn address(&self) -> ::std::option::Option<&crate::types::Address> {
        self.address.as_ref()
    }
    /// <p>The position, in longitude and latitude.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.position.is_none()`.
    pub fn position(&self) -> &[f64] {
        self.position.as_deref().unwrap_or_default()
    }
    /// <p>The distance in meters from the QueryPosition.</p>
    pub fn distance(&self) -> ::std::option::Option<i64> {
        self.distance
    }
    /// <p>The distance from the routing position of the nearby address to the street result.</p>
    pub fn route_distance(&self) -> ::std::option::Option<i64> {
        self.route_distance
    }
    /// <p>The bounding box enclosing the geometric shape (area or line) that an individual result covers.</p>
    /// <p>The bounding box formed is defined as a set of four coordinates: <code>\[{westward lng}, {southern lat}, {eastward lng}, {northern lat}\]</code></p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.map_view.is_none()`.
    pub fn map_view(&self) -> &[f64] {
        self.map_view.as_deref().unwrap_or_default()
    }
    /// <p>Position of the access point represented by longitude and latitude.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.access_points.is_none()`.
    pub fn access_points(&self) -> &[crate::types::AccessPoint] {
        self.access_points.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for Intersection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Intersection");
        formatter.field("place_id", &"*** Sensitive Data Redacted ***");
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("address", &self.address);
        formatter.field("position", &"*** Sensitive Data Redacted ***");
        formatter.field("distance", &"*** Sensitive Data Redacted ***");
        formatter.field("route_distance", &"*** Sensitive Data Redacted ***");
        formatter.field("map_view", &"*** Sensitive Data Redacted ***");
        formatter.field("access_points", &self.access_points);
        formatter.finish()
    }
}
impl Intersection {
    /// Creates a new builder-style object to manufacture [`Intersection`](crate::types::Intersection).
    pub fn builder() -> crate::types::builders::IntersectionBuilder {
        crate::types::builders::IntersectionBuilder::default()
    }
}

/// A builder for [`Intersection`](crate::types::Intersection).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct IntersectionBuilder {
    pub(crate) place_id: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) address: ::std::option::Option<crate::types::Address>,
    pub(crate) position: ::std::option::Option<::std::vec::Vec<f64>>,
    pub(crate) distance: ::std::option::Option<i64>,
    pub(crate) route_distance: ::std::option::Option<i64>,
    pub(crate) map_view: ::std::option::Option<::std::vec::Vec<f64>>,
    pub(crate) access_points: ::std::option::Option<::std::vec::Vec<crate::types::AccessPoint>>,
}
impl IntersectionBuilder {
    /// <p>The <code>PlaceId</code> of the place result.</p>
    /// This field is required.
    pub fn place_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.place_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>PlaceId</code> of the place result.</p>
    pub fn set_place_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.place_id = input;
        self
    }
    /// <p>The <code>PlaceId</code> of the place result.</p>
    pub fn get_place_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.place_id
    }
    /// <p>The localized display name of this result item based on request parameter <code>language</code>.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The localized display name of this result item based on request parameter <code>language</code>.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The localized display name of this result item based on request parameter <code>language</code>.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The place address.</p>
    pub fn address(mut self, input: crate::types::Address) -> Self {
        self.address = ::std::option::Option::Some(input);
        self
    }
    /// <p>The place address.</p>
    pub fn set_address(mut self, input: ::std::option::Option<crate::types::Address>) -> Self {
        self.address = input;
        self
    }
    /// <p>The place address.</p>
    pub fn get_address(&self) -> &::std::option::Option<crate::types::Address> {
        &self.address
    }
    /// Appends an item to `position`.
    ///
    /// To override the contents of this collection use [`set_position`](Self::set_position).
    ///
    /// <p>The position, in longitude and latitude.</p>
    pub fn position(mut self, input: f64) -> Self {
        let mut v = self.position.unwrap_or_default();
        v.push(input);
        self.position = ::std::option::Option::Some(v);
        self
    }
    /// <p>The position, in longitude and latitude.</p>
    pub fn set_position(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.position = input;
        self
    }
    /// <p>The position, in longitude and latitude.</p>
    pub fn get_position(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.position
    }
    /// <p>The distance in meters from the QueryPosition.</p>
    pub fn distance(mut self, input: i64) -> Self {
        self.distance = ::std::option::Option::Some(input);
        self
    }
    /// <p>The distance in meters from the QueryPosition.</p>
    pub fn set_distance(mut self, input: ::std::option::Option<i64>) -> Self {
        self.distance = input;
        self
    }
    /// <p>The distance in meters from the QueryPosition.</p>
    pub fn get_distance(&self) -> &::std::option::Option<i64> {
        &self.distance
    }
    /// <p>The distance from the routing position of the nearby address to the street result.</p>
    pub fn route_distance(mut self, input: i64) -> Self {
        self.route_distance = ::std::option::Option::Some(input);
        self
    }
    /// <p>The distance from the routing position of the nearby address to the street result.</p>
    pub fn set_route_distance(mut self, input: ::std::option::Option<i64>) -> Self {
        self.route_distance = input;
        self
    }
    /// <p>The distance from the routing position of the nearby address to the street result.</p>
    pub fn get_route_distance(&self) -> &::std::option::Option<i64> {
        &self.route_distance
    }
    /// Appends an item to `map_view`.
    ///
    /// To override the contents of this collection use [`set_map_view`](Self::set_map_view).
    ///
    /// <p>The bounding box enclosing the geometric shape (area or line) that an individual result covers.</p>
    /// <p>The bounding box formed is defined as a set of four coordinates: <code>\[{westward lng}, {southern lat}, {eastward lng}, {northern lat}\]</code></p>
    pub fn map_view(mut self, input: f64) -> Self {
        let mut v = self.map_view.unwrap_or_default();
        v.push(input);
        self.map_view = ::std::option::Option::Some(v);
        self
    }
    /// <p>The bounding box enclosing the geometric shape (area or line) that an individual result covers.</p>
    /// <p>The bounding box formed is defined as a set of four coordinates: <code>\[{westward lng}, {southern lat}, {eastward lng}, {northern lat}\]</code></p>
    pub fn set_map_view(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.map_view = input;
        self
    }
    /// <p>The bounding box enclosing the geometric shape (area or line) that an individual result covers.</p>
    /// <p>The bounding box formed is defined as a set of four coordinates: <code>\[{westward lng}, {southern lat}, {eastward lng}, {northern lat}\]</code></p>
    pub fn get_map_view(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.map_view
    }
    /// Appends an item to `access_points`.
    ///
    /// To override the contents of this collection use [`set_access_points`](Self::set_access_points).
    ///
    /// <p>Position of the access point represented by longitude and latitude.</p>
    pub fn access_points(mut self, input: crate::types::AccessPoint) -> Self {
        let mut v = self.access_points.unwrap_or_default();
        v.push(input);
        self.access_points = ::std::option::Option::Some(v);
        self
    }
    /// <p>Position of the access point represented by longitude and latitude.</p>
    pub fn set_access_points(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AccessPoint>>) -> Self {
        self.access_points = input;
        self
    }
    /// <p>Position of the access point represented by longitude and latitude.</p>
    pub fn get_access_points(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AccessPoint>> {
        &self.access_points
    }
    /// Consumes the builder and constructs a [`Intersection`](crate::types::Intersection).
    /// This method will fail if any of the following fields are not set:
    /// - [`place_id`](crate::types::builders::IntersectionBuilder::place_id)
    /// - [`title`](crate::types::builders::IntersectionBuilder::title)
    pub fn build(self) -> ::std::result::Result<crate::types::Intersection, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Intersection {
            place_id: self.place_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "place_id",
                    "place_id was not specified but it is required when building Intersection",
                )
            })?,
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building Intersection",
                )
            })?,
            address: self.address,
            position: self.position,
            distance: self.distance,
            route_distance: self.route_distance,
            map_view: self.map_view,
            access_points: self.access_points,
        })
    }
}
impl ::std::fmt::Debug for IntersectionBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("IntersectionBuilder");
        formatter.field("place_id", &"*** Sensitive Data Redacted ***");
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("address", &self.address);
        formatter.field("position", &"*** Sensitive Data Redacted ***");
        formatter.field("distance", &"*** Sensitive Data Redacted ***");
        formatter.field("route_distance", &"*** Sensitive Data Redacted ***");
        formatter.field("map_view", &"*** Sensitive Data Redacted ***");
        formatter.field("access_points", &self.access_points);
        formatter.finish()
    }
}
