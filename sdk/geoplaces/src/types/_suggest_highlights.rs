// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes how the parts of the textQuery matched the input query by returning the sections of the response which matched to textQuery terms.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SuggestHighlights {
    /// <p>Indicates the starting and ending index of the title in the text query that match the found title.</p>
    pub title: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
    /// <p>The place's address.</p>
    pub address: ::std::option::Option<crate::types::SuggestAddressHighlights>,
}
impl SuggestHighlights {
    /// <p>Indicates the starting and ending index of the title in the text query that match the found title.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.title.is_none()`.
    pub fn title(&self) -> &[crate::types::Highlight] {
        self.title.as_deref().unwrap_or_default()
    }
    /// <p>The place's address.</p>
    pub fn address(&self) -> ::std::option::Option<&crate::types::SuggestAddressHighlights> {
        self.address.as_ref()
    }
}
impl SuggestHighlights {
    /// Creates a new builder-style object to manufacture [`SuggestHighlights`](crate::types::SuggestHighlights).
    pub fn builder() -> crate::types::builders::SuggestHighlightsBuilder {
        crate::types::builders::SuggestHighlightsBuilder::default()
    }
}

/// A builder for [`SuggestHighlights`](crate::types::SuggestHighlights).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SuggestHighlightsBuilder {
    pub(crate) title: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
    pub(crate) address: ::std::option::Option<crate::types::SuggestAddressHighlights>,
}
impl SuggestHighlightsBuilder {
    /// Appends an item to `title`.
    ///
    /// To override the contents of this collection use [`set_title`](Self::set_title).
    ///
    /// <p>Indicates the starting and ending index of the title in the text query that match the found title.</p>
    pub fn title(mut self, input: crate::types::Highlight) -> Self {
        let mut v = self.title.unwrap_or_default();
        v.push(input);
        self.title = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates the starting and ending index of the title in the text query that match the found title.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>) -> Self {
        self.title = input;
        self
    }
    /// <p>Indicates the starting and ending index of the title in the text query that match the found title.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Highlight>> {
        &self.title
    }
    /// <p>The place's address.</p>
    pub fn address(mut self, input: crate::types::SuggestAddressHighlights) -> Self {
        self.address = ::std::option::Option::Some(input);
        self
    }
    /// <p>The place's address.</p>
    pub fn set_address(mut self, input: ::std::option::Option<crate::types::SuggestAddressHighlights>) -> Self {
        self.address = input;
        self
    }
    /// <p>The place's address.</p>
    pub fn get_address(&self) -> &::std::option::Option<crate::types::SuggestAddressHighlights> {
        &self.address
    }
    /// Consumes the builder and constructs a [`SuggestHighlights`](crate::types::SuggestHighlights).
    pub fn build(self) -> crate::types::SuggestHighlights {
        crate::types::SuggestHighlights {
            title: self.title,
            address: self.address,
        }
    }
}
