// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Suggestions for refining individual query terms. Suggestions are returned as objects which note the term, suggested replacement, and its index in the query.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct QueryRefinement {
    /// <p>The term that will be suggested to the user.</p>
    pub refined_term: ::std::string::String,
    /// <p>The sub-string of the original query that is replaced by this query term.</p>
    pub original_term: ::std::string::String,
    /// <p>Start index of the parsed component.</p>
    pub start_index: i32,
    /// <p>End index of the parsed query.</p>
    pub end_index: i32,
}
impl QueryRefinement {
    /// <p>The term that will be suggested to the user.</p>
    pub fn refined_term(&self) -> &str {
        use std::ops::Deref;
        self.refined_term.deref()
    }
    /// <p>The sub-string of the original query that is replaced by this query term.</p>
    pub fn original_term(&self) -> &str {
        use std::ops::Deref;
        self.original_term.deref()
    }
    /// <p>Start index of the parsed component.</p>
    pub fn start_index(&self) -> i32 {
        self.start_index
    }
    /// <p>End index of the parsed query.</p>
    pub fn end_index(&self) -> i32 {
        self.end_index
    }
}
impl ::std::fmt::Debug for QueryRefinement {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("QueryRefinement");
        formatter.field("refined_term", &"*** Sensitive Data Redacted ***");
        formatter.field("original_term", &"*** Sensitive Data Redacted ***");
        formatter.field("start_index", &self.start_index);
        formatter.field("end_index", &self.end_index);
        formatter.finish()
    }
}
impl QueryRefinement {
    /// Creates a new builder-style object to manufacture [`QueryRefinement`](crate::types::QueryRefinement).
    pub fn builder() -> crate::types::builders::QueryRefinementBuilder {
        crate::types::builders::QueryRefinementBuilder::default()
    }
}

/// A builder for [`QueryRefinement`](crate::types::QueryRefinement).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct QueryRefinementBuilder {
    pub(crate) refined_term: ::std::option::Option<::std::string::String>,
    pub(crate) original_term: ::std::option::Option<::std::string::String>,
    pub(crate) start_index: ::std::option::Option<i32>,
    pub(crate) end_index: ::std::option::Option<i32>,
}
impl QueryRefinementBuilder {
    /// <p>The term that will be suggested to the user.</p>
    /// This field is required.
    pub fn refined_term(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.refined_term = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The term that will be suggested to the user.</p>
    pub fn set_refined_term(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.refined_term = input;
        self
    }
    /// <p>The term that will be suggested to the user.</p>
    pub fn get_refined_term(&self) -> &::std::option::Option<::std::string::String> {
        &self.refined_term
    }
    /// <p>The sub-string of the original query that is replaced by this query term.</p>
    /// This field is required.
    pub fn original_term(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.original_term = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The sub-string of the original query that is replaced by this query term.</p>
    pub fn set_original_term(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.original_term = input;
        self
    }
    /// <p>The sub-string of the original query that is replaced by this query term.</p>
    pub fn get_original_term(&self) -> &::std::option::Option<::std::string::String> {
        &self.original_term
    }
    /// <p>Start index of the parsed component.</p>
    /// This field is required.
    pub fn start_index(mut self, input: i32) -> Self {
        self.start_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>Start index of the parsed component.</p>
    pub fn set_start_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.start_index = input;
        self
    }
    /// <p>Start index of the parsed component.</p>
    pub fn get_start_index(&self) -> &::std::option::Option<i32> {
        &self.start_index
    }
    /// <p>End index of the parsed query.</p>
    /// This field is required.
    pub fn end_index(mut self, input: i32) -> Self {
        self.end_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>End index of the parsed query.</p>
    pub fn set_end_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.end_index = input;
        self
    }
    /// <p>End index of the parsed query.</p>
    pub fn get_end_index(&self) -> &::std::option::Option<i32> {
        &self.end_index
    }
    /// Consumes the builder and constructs a [`QueryRefinement`](crate::types::QueryRefinement).
    /// This method will fail if any of the following fields are not set:
    /// - [`refined_term`](crate::types::builders::QueryRefinementBuilder::refined_term)
    /// - [`original_term`](crate::types::builders::QueryRefinementBuilder::original_term)
    /// - [`start_index`](crate::types::builders::QueryRefinementBuilder::start_index)
    /// - [`end_index`](crate::types::builders::QueryRefinementBuilder::end_index)
    pub fn build(self) -> ::std::result::Result<crate::types::QueryRefinement, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::QueryRefinement {
            refined_term: self.refined_term.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "refined_term",
                    "refined_term was not specified but it is required when building QueryRefinement",
                )
            })?,
            original_term: self.original_term.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "original_term",
                    "original_term was not specified but it is required when building QueryRefinement",
                )
            })?,
            start_index: self.start_index.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_index",
                    "start_index was not specified but it is required when building QueryRefinement",
                )
            })?,
            end_index: self.end_index.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "end_index",
                    "end_index was not specified but it is required when building QueryRefinement",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for QueryRefinementBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("QueryRefinementBuilder");
        formatter.field("refined_term", &"*** Sensitive Data Redacted ***");
        formatter.field("original_term", &"*** Sensitive Data Redacted ***");
        formatter.field("start_index", &self.start_index);
        formatter.field("end_index", &self.end_index);
        formatter.finish()
    }
}
