// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details related to the match score.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MatchScoreDetails {
    /// <p>Indicates how well the entire input matches the returned. It is equal to 1 if all input tokens are recognized and matched.</p>
    pub overall: f64,
    /// <p>Indicates how well the component input matches the returned. It is equal to 1 if all input tokens are recognized and matched.</p>
    pub components: ::std::option::Option<crate::types::ComponentMatchScores>,
}
impl MatchScoreDetails {
    /// <p>Indicates how well the entire input matches the returned. It is equal to 1 if all input tokens are recognized and matched.</p>
    pub fn overall(&self) -> f64 {
        self.overall
    }
    /// <p>Indicates how well the component input matches the returned. It is equal to 1 if all input tokens are recognized and matched.</p>
    pub fn components(&self) -> ::std::option::Option<&crate::types::ComponentMatchScores> {
        self.components.as_ref()
    }
}
impl MatchScoreDetails {
    /// Creates a new builder-style object to manufacture [`MatchScoreDetails`](crate::types::MatchScoreDetails).
    pub fn builder() -> crate::types::builders::MatchScoreDetailsBuilder {
        crate::types::builders::MatchScoreDetailsBuilder::default()
    }
}

/// A builder for [`MatchScoreDetails`](crate::types::MatchScoreDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MatchScoreDetailsBuilder {
    pub(crate) overall: ::std::option::Option<f64>,
    pub(crate) components: ::std::option::Option<crate::types::ComponentMatchScores>,
}
impl MatchScoreDetailsBuilder {
    /// <p>Indicates how well the entire input matches the returned. It is equal to 1 if all input tokens are recognized and matched.</p>
    pub fn overall(mut self, input: f64) -> Self {
        self.overall = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates how well the entire input matches the returned. It is equal to 1 if all input tokens are recognized and matched.</p>
    pub fn set_overall(mut self, input: ::std::option::Option<f64>) -> Self {
        self.overall = input;
        self
    }
    /// <p>Indicates how well the entire input matches the returned. It is equal to 1 if all input tokens are recognized and matched.</p>
    pub fn get_overall(&self) -> &::std::option::Option<f64> {
        &self.overall
    }
    /// <p>Indicates how well the component input matches the returned. It is equal to 1 if all input tokens are recognized and matched.</p>
    pub fn components(mut self, input: crate::types::ComponentMatchScores) -> Self {
        self.components = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates how well the component input matches the returned. It is equal to 1 if all input tokens are recognized and matched.</p>
    pub fn set_components(mut self, input: ::std::option::Option<crate::types::ComponentMatchScores>) -> Self {
        self.components = input;
        self
    }
    /// <p>Indicates how well the component input matches the returned. It is equal to 1 if all input tokens are recognized and matched.</p>
    pub fn get_components(&self) -> &::std::option::Option<crate::types::ComponentMatchScores> {
        &self.components
    }
    /// Consumes the builder and constructs a [`MatchScoreDetails`](crate::types::MatchScoreDetails).
    pub fn build(self) -> crate::types::MatchScoreDetails {
        crate::types::MatchScoreDetails {
            overall: self.overall.unwrap_or_default(),
            components: self.components,
        }
    }
}
