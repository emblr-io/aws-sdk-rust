// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a secondary address component parsed from the query text.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ParsedQuerySecondaryAddressComponent {
    /// <p>Start index of the parsed secondary address component in the query text.</p>
    pub start_index: i32,
    /// <p>End index of the parsed secondary address component in the query text.</p>
    pub end_index: i32,
    /// <p>Value of the parsed secondary address component.</p>
    pub value: ::std::string::String,
    /// <p>Secondary address number provided in the query.</p>
    pub number: ::std::string::String,
    /// <p>Secondary address designator provided in the query.</p>
    pub designator: ::std::string::String,
}
impl ParsedQuerySecondaryAddressComponent {
    /// <p>Start index of the parsed secondary address component in the query text.</p>
    pub fn start_index(&self) -> i32 {
        self.start_index
    }
    /// <p>End index of the parsed secondary address component in the query text.</p>
    pub fn end_index(&self) -> i32 {
        self.end_index
    }
    /// <p>Value of the parsed secondary address component.</p>
    pub fn value(&self) -> &str {
        use std::ops::Deref;
        self.value.deref()
    }
    /// <p>Secondary address number provided in the query.</p>
    pub fn number(&self) -> &str {
        use std::ops::Deref;
        self.number.deref()
    }
    /// <p>Secondary address designator provided in the query.</p>
    pub fn designator(&self) -> &str {
        use std::ops::Deref;
        self.designator.deref()
    }
}
impl ::std::fmt::Debug for ParsedQuerySecondaryAddressComponent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ParsedQuerySecondaryAddressComponent");
        formatter.field("start_index", &self.start_index);
        formatter.field("end_index", &self.end_index);
        formatter.field("value", &"*** Sensitive Data Redacted ***");
        formatter.field("number", &"*** Sensitive Data Redacted ***");
        formatter.field("designator", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ParsedQuerySecondaryAddressComponent {
    /// Creates a new builder-style object to manufacture [`ParsedQuerySecondaryAddressComponent`](crate::types::ParsedQuerySecondaryAddressComponent).
    pub fn builder() -> crate::types::builders::ParsedQuerySecondaryAddressComponentBuilder {
        crate::types::builders::ParsedQuerySecondaryAddressComponentBuilder::default()
    }
}

/// A builder for [`ParsedQuerySecondaryAddressComponent`](crate::types::ParsedQuerySecondaryAddressComponent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ParsedQuerySecondaryAddressComponentBuilder {
    pub(crate) start_index: ::std::option::Option<i32>,
    pub(crate) end_index: ::std::option::Option<i32>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) number: ::std::option::Option<::std::string::String>,
    pub(crate) designator: ::std::option::Option<::std::string::String>,
}
impl ParsedQuerySecondaryAddressComponentBuilder {
    /// <p>Start index of the parsed secondary address component in the query text.</p>
    /// This field is required.
    pub fn start_index(mut self, input: i32) -> Self {
        self.start_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>Start index of the parsed secondary address component in the query text.</p>
    pub fn set_start_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.start_index = input;
        self
    }
    /// <p>Start index of the parsed secondary address component in the query text.</p>
    pub fn get_start_index(&self) -> &::std::option::Option<i32> {
        &self.start_index
    }
    /// <p>End index of the parsed secondary address component in the query text.</p>
    /// This field is required.
    pub fn end_index(mut self, input: i32) -> Self {
        self.end_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>End index of the parsed secondary address component in the query text.</p>
    pub fn set_end_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.end_index = input;
        self
    }
    /// <p>End index of the parsed secondary address component in the query text.</p>
    pub fn get_end_index(&self) -> &::std::option::Option<i32> {
        &self.end_index
    }
    /// <p>Value of the parsed secondary address component.</p>
    /// This field is required.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Value of the parsed secondary address component.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>Value of the parsed secondary address component.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// <p>Secondary address number provided in the query.</p>
    /// This field is required.
    pub fn number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Secondary address number provided in the query.</p>
    pub fn set_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.number = input;
        self
    }
    /// <p>Secondary address number provided in the query.</p>
    pub fn get_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.number
    }
    /// <p>Secondary address designator provided in the query.</p>
    /// This field is required.
    pub fn designator(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.designator = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Secondary address designator provided in the query.</p>
    pub fn set_designator(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.designator = input;
        self
    }
    /// <p>Secondary address designator provided in the query.</p>
    pub fn get_designator(&self) -> &::std::option::Option<::std::string::String> {
        &self.designator
    }
    /// Consumes the builder and constructs a [`ParsedQuerySecondaryAddressComponent`](crate::types::ParsedQuerySecondaryAddressComponent).
    /// This method will fail if any of the following fields are not set:
    /// - [`start_index`](crate::types::builders::ParsedQuerySecondaryAddressComponentBuilder::start_index)
    /// - [`end_index`](crate::types::builders::ParsedQuerySecondaryAddressComponentBuilder::end_index)
    /// - [`value`](crate::types::builders::ParsedQuerySecondaryAddressComponentBuilder::value)
    /// - [`number`](crate::types::builders::ParsedQuerySecondaryAddressComponentBuilder::number)
    /// - [`designator`](crate::types::builders::ParsedQuerySecondaryAddressComponentBuilder::designator)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ParsedQuerySecondaryAddressComponent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ParsedQuerySecondaryAddressComponent {
            start_index: self.start_index.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_index",
                    "start_index was not specified but it is required when building ParsedQuerySecondaryAddressComponent",
                )
            })?,
            end_index: self.end_index.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "end_index",
                    "end_index was not specified but it is required when building ParsedQuerySecondaryAddressComponent",
                )
            })?,
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building ParsedQuerySecondaryAddressComponent",
                )
            })?,
            number: self.number.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "number",
                    "number was not specified but it is required when building ParsedQuerySecondaryAddressComponent",
                )
            })?,
            designator: self.designator.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "designator",
                    "designator was not specified but it is required when building ParsedQuerySecondaryAddressComponent",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for ParsedQuerySecondaryAddressComponentBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ParsedQuerySecondaryAddressComponentBuilder");
        formatter.field("start_index", &self.start_index);
        formatter.field("end_index", &self.end_index);
        formatter.field("value", &"*** Sensitive Data Redacted ***");
        formatter.field("number", &"*** Sensitive Data Redacted ***");
        formatter.field("designator", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
