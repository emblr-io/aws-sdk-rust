// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates the starting and ending index of the sub-region in the text query that match the found title.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SubRegionHighlights {
    /// <p>Indicates the starting and ending index of the sub-region in the text query that match the found title.</p>
    pub code: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
    /// <p>Indicates the starting and ending index of the name in the text query that match the found title.</p>
    pub name: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
}
impl SubRegionHighlights {
    /// <p>Indicates the starting and ending index of the sub-region in the text query that match the found title.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.code.is_none()`.
    pub fn code(&self) -> &[crate::types::Highlight] {
        self.code.as_deref().unwrap_or_default()
    }
    /// <p>Indicates the starting and ending index of the name in the text query that match the found title.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.name.is_none()`.
    pub fn name(&self) -> &[crate::types::Highlight] {
        self.name.as_deref().unwrap_or_default()
    }
}
impl SubRegionHighlights {
    /// Creates a new builder-style object to manufacture [`SubRegionHighlights`](crate::types::SubRegionHighlights).
    pub fn builder() -> crate::types::builders::SubRegionHighlightsBuilder {
        crate::types::builders::SubRegionHighlightsBuilder::default()
    }
}

/// A builder for [`SubRegionHighlights`](crate::types::SubRegionHighlights).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SubRegionHighlightsBuilder {
    pub(crate) code: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
    pub(crate) name: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
}
impl SubRegionHighlightsBuilder {
    /// Appends an item to `code`.
    ///
    /// To override the contents of this collection use [`set_code`](Self::set_code).
    ///
    /// <p>Indicates the starting and ending index of the sub-region in the text query that match the found title.</p>
    pub fn code(mut self, input: crate::types::Highlight) -> Self {
        let mut v = self.code.unwrap_or_default();
        v.push(input);
        self.code = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates the starting and ending index of the sub-region in the text query that match the found title.</p>
    pub fn set_code(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>) -> Self {
        self.code = input;
        self
    }
    /// <p>Indicates the starting and ending index of the sub-region in the text query that match the found title.</p>
    pub fn get_code(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Highlight>> {
        &self.code
    }
    /// Appends an item to `name`.
    ///
    /// To override the contents of this collection use [`set_name`](Self::set_name).
    ///
    /// <p>Indicates the starting and ending index of the name in the text query that match the found title.</p>
    pub fn name(mut self, input: crate::types::Highlight) -> Self {
        let mut v = self.name.unwrap_or_default();
        v.push(input);
        self.name = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates the starting and ending index of the name in the text query that match the found title.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>) -> Self {
        self.name = input;
        self
    }
    /// <p>Indicates the starting and ending index of the name in the text query that match the found title.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Highlight>> {
        &self.name
    }
    /// Consumes the builder and constructs a [`SubRegionHighlights`](crate::types::SubRegionHighlights).
    pub fn build(self) -> crate::types::SubRegionHighlights {
        crate::types::SubRegionHighlights {
            code: self.code,
            name: self.name,
        }
    }
}
