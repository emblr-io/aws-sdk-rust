// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>How to pronounce the various components of the address or place.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AddressComponentPhonemes {
    /// <p>The alpha-2 or alpha-3 character code for the country that the results will be present in.</p>
    pub country: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>,
    /// <p>How to pronounce the region or state results should be to be present in.</p>
    pub region: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>,
    /// <p>How to pronounce the sub-region or county for which results should be present in.</p>
    pub sub_region: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>,
    /// <p>How to pronounce the city or locality results should be present in.</p>
    /// <p>Example: <code>Vancouver</code>.</p>
    pub locality: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>,
    /// <p>How to pronounce the district or division of a city results should be present in.</p>
    pub district: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>,
    /// <p>How to pronounce the sub-district or division of a city results should be present in.</p>
    pub sub_district: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>,
    /// <p>How to pronounce the name of the block.</p>
    pub block: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>,
    /// <p>How to pronounce the name of the sub-block.</p>
    pub sub_block: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>,
    /// <p>How to pronounce the name of the street results should be present in.</p>
    pub street: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>,
}
impl AddressComponentPhonemes {
    /// <p>The alpha-2 or alpha-3 character code for the country that the results will be present in.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.country.is_none()`.
    pub fn country(&self) -> &[crate::types::PhonemeTranscription] {
        self.country.as_deref().unwrap_or_default()
    }
    /// <p>How to pronounce the region or state results should be to be present in.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.region.is_none()`.
    pub fn region(&self) -> &[crate::types::PhonemeTranscription] {
        self.region.as_deref().unwrap_or_default()
    }
    /// <p>How to pronounce the sub-region or county for which results should be present in.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sub_region.is_none()`.
    pub fn sub_region(&self) -> &[crate::types::PhonemeTranscription] {
        self.sub_region.as_deref().unwrap_or_default()
    }
    /// <p>How to pronounce the city or locality results should be present in.</p>
    /// <p>Example: <code>Vancouver</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.locality.is_none()`.
    pub fn locality(&self) -> &[crate::types::PhonemeTranscription] {
        self.locality.as_deref().unwrap_or_default()
    }
    /// <p>How to pronounce the district or division of a city results should be present in.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.district.is_none()`.
    pub fn district(&self) -> &[crate::types::PhonemeTranscription] {
        self.district.as_deref().unwrap_or_default()
    }
    /// <p>How to pronounce the sub-district or division of a city results should be present in.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sub_district.is_none()`.
    pub fn sub_district(&self) -> &[crate::types::PhonemeTranscription] {
        self.sub_district.as_deref().unwrap_or_default()
    }
    /// <p>How to pronounce the name of the block.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.block.is_none()`.
    pub fn block(&self) -> &[crate::types::PhonemeTranscription] {
        self.block.as_deref().unwrap_or_default()
    }
    /// <p>How to pronounce the name of the sub-block.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sub_block.is_none()`.
    pub fn sub_block(&self) -> &[crate::types::PhonemeTranscription] {
        self.sub_block.as_deref().unwrap_or_default()
    }
    /// <p>How to pronounce the name of the street results should be present in.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.street.is_none()`.
    pub fn street(&self) -> &[crate::types::PhonemeTranscription] {
        self.street.as_deref().unwrap_or_default()
    }
}
impl AddressComponentPhonemes {
    /// Creates a new builder-style object to manufacture [`AddressComponentPhonemes`](crate::types::AddressComponentPhonemes).
    pub fn builder() -> crate::types::builders::AddressComponentPhonemesBuilder {
        crate::types::builders::AddressComponentPhonemesBuilder::default()
    }
}

/// A builder for [`AddressComponentPhonemes`](crate::types::AddressComponentPhonemes).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AddressComponentPhonemesBuilder {
    pub(crate) country: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>,
    pub(crate) region: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>,
    pub(crate) sub_region: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>,
    pub(crate) locality: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>,
    pub(crate) district: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>,
    pub(crate) sub_district: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>,
    pub(crate) block: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>,
    pub(crate) sub_block: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>,
    pub(crate) street: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>,
}
impl AddressComponentPhonemesBuilder {
    /// Appends an item to `country`.
    ///
    /// To override the contents of this collection use [`set_country`](Self::set_country).
    ///
    /// <p>The alpha-2 or alpha-3 character code for the country that the results will be present in.</p>
    pub fn country(mut self, input: crate::types::PhonemeTranscription) -> Self {
        let mut v = self.country.unwrap_or_default();
        v.push(input);
        self.country = ::std::option::Option::Some(v);
        self
    }
    /// <p>The alpha-2 or alpha-3 character code for the country that the results will be present in.</p>
    pub fn set_country(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>) -> Self {
        self.country = input;
        self
    }
    /// <p>The alpha-2 or alpha-3 character code for the country that the results will be present in.</p>
    pub fn get_country(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>> {
        &self.country
    }
    /// Appends an item to `region`.
    ///
    /// To override the contents of this collection use [`set_region`](Self::set_region).
    ///
    /// <p>How to pronounce the region or state results should be to be present in.</p>
    pub fn region(mut self, input: crate::types::PhonemeTranscription) -> Self {
        let mut v = self.region.unwrap_or_default();
        v.push(input);
        self.region = ::std::option::Option::Some(v);
        self
    }
    /// <p>How to pronounce the region or state results should be to be present in.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>) -> Self {
        self.region = input;
        self
    }
    /// <p>How to pronounce the region or state results should be to be present in.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>> {
        &self.region
    }
    /// Appends an item to `sub_region`.
    ///
    /// To override the contents of this collection use [`set_sub_region`](Self::set_sub_region).
    ///
    /// <p>How to pronounce the sub-region or county for which results should be present in.</p>
    pub fn sub_region(mut self, input: crate::types::PhonemeTranscription) -> Self {
        let mut v = self.sub_region.unwrap_or_default();
        v.push(input);
        self.sub_region = ::std::option::Option::Some(v);
        self
    }
    /// <p>How to pronounce the sub-region or county for which results should be present in.</p>
    pub fn set_sub_region(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>) -> Self {
        self.sub_region = input;
        self
    }
    /// <p>How to pronounce the sub-region or county for which results should be present in.</p>
    pub fn get_sub_region(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>> {
        &self.sub_region
    }
    /// Appends an item to `locality`.
    ///
    /// To override the contents of this collection use [`set_locality`](Self::set_locality).
    ///
    /// <p>How to pronounce the city or locality results should be present in.</p>
    /// <p>Example: <code>Vancouver</code>.</p>
    pub fn locality(mut self, input: crate::types::PhonemeTranscription) -> Self {
        let mut v = self.locality.unwrap_or_default();
        v.push(input);
        self.locality = ::std::option::Option::Some(v);
        self
    }
    /// <p>How to pronounce the city or locality results should be present in.</p>
    /// <p>Example: <code>Vancouver</code>.</p>
    pub fn set_locality(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>) -> Self {
        self.locality = input;
        self
    }
    /// <p>How to pronounce the city or locality results should be present in.</p>
    /// <p>Example: <code>Vancouver</code>.</p>
    pub fn get_locality(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>> {
        &self.locality
    }
    /// Appends an item to `district`.
    ///
    /// To override the contents of this collection use [`set_district`](Self::set_district).
    ///
    /// <p>How to pronounce the district or division of a city results should be present in.</p>
    pub fn district(mut self, input: crate::types::PhonemeTranscription) -> Self {
        let mut v = self.district.unwrap_or_default();
        v.push(input);
        self.district = ::std::option::Option::Some(v);
        self
    }
    /// <p>How to pronounce the district or division of a city results should be present in.</p>
    pub fn set_district(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>) -> Self {
        self.district = input;
        self
    }
    /// <p>How to pronounce the district or division of a city results should be present in.</p>
    pub fn get_district(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>> {
        &self.district
    }
    /// Appends an item to `sub_district`.
    ///
    /// To override the contents of this collection use [`set_sub_district`](Self::set_sub_district).
    ///
    /// <p>How to pronounce the sub-district or division of a city results should be present in.</p>
    pub fn sub_district(mut self, input: crate::types::PhonemeTranscription) -> Self {
        let mut v = self.sub_district.unwrap_or_default();
        v.push(input);
        self.sub_district = ::std::option::Option::Some(v);
        self
    }
    /// <p>How to pronounce the sub-district or division of a city results should be present in.</p>
    pub fn set_sub_district(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>) -> Self {
        self.sub_district = input;
        self
    }
    /// <p>How to pronounce the sub-district or division of a city results should be present in.</p>
    pub fn get_sub_district(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>> {
        &self.sub_district
    }
    /// Appends an item to `block`.
    ///
    /// To override the contents of this collection use [`set_block`](Self::set_block).
    ///
    /// <p>How to pronounce the name of the block.</p>
    pub fn block(mut self, input: crate::types::PhonemeTranscription) -> Self {
        let mut v = self.block.unwrap_or_default();
        v.push(input);
        self.block = ::std::option::Option::Some(v);
        self
    }
    /// <p>How to pronounce the name of the block.</p>
    pub fn set_block(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>) -> Self {
        self.block = input;
        self
    }
    /// <p>How to pronounce the name of the block.</p>
    pub fn get_block(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>> {
        &self.block
    }
    /// Appends an item to `sub_block`.
    ///
    /// To override the contents of this collection use [`set_sub_block`](Self::set_sub_block).
    ///
    /// <p>How to pronounce the name of the sub-block.</p>
    pub fn sub_block(mut self, input: crate::types::PhonemeTranscription) -> Self {
        let mut v = self.sub_block.unwrap_or_default();
        v.push(input);
        self.sub_block = ::std::option::Option::Some(v);
        self
    }
    /// <p>How to pronounce the name of the sub-block.</p>
    pub fn set_sub_block(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>) -> Self {
        self.sub_block = input;
        self
    }
    /// <p>How to pronounce the name of the sub-block.</p>
    pub fn get_sub_block(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>> {
        &self.sub_block
    }
    /// Appends an item to `street`.
    ///
    /// To override the contents of this collection use [`set_street`](Self::set_street).
    ///
    /// <p>How to pronounce the name of the street results should be present in.</p>
    pub fn street(mut self, input: crate::types::PhonemeTranscription) -> Self {
        let mut v = self.street.unwrap_or_default();
        v.push(input);
        self.street = ::std::option::Option::Some(v);
        self
    }
    /// <p>How to pronounce the name of the street results should be present in.</p>
    pub fn set_street(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>>) -> Self {
        self.street = input;
        self
    }
    /// <p>How to pronounce the name of the street results should be present in.</p>
    pub fn get_street(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PhonemeTranscription>> {
        &self.street
    }
    /// Consumes the builder and constructs a [`AddressComponentPhonemes`](crate::types::AddressComponentPhonemes).
    pub fn build(self) -> crate::types::AddressComponentPhonemes {
        crate::types::AddressComponentPhonemes {
            country: self.country,
            region: self.region,
            sub_region: self.sub_region,
            locality: self.locality,
            district: self.district,
            sub_district: self.sub_district,
            block: self.block,
            sub_block: self.sub_block,
            street: self.street,
        }
    }
}
