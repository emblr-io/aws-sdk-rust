// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>List of <code>Food</code> types offered by this result.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct FoodType {
    /// <p>Localized name of the food type.</p>
    pub localized_name: ::std::string::String,
    /// <p>The Food Type Id.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>Boolean which indicates if this food type is the primary offered by the place. For example, if a location serves fast food, but also dessert, he primary would likely be fast food.</p>
    pub primary: ::std::option::Option<bool>,
}
impl FoodType {
    /// <p>Localized name of the food type.</p>
    pub fn localized_name(&self) -> &str {
        use std::ops::Deref;
        self.localized_name.deref()
    }
    /// <p>The Food Type Id.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Boolean which indicates if this food type is the primary offered by the place. For example, if a location serves fast food, but also dessert, he primary would likely be fast food.</p>
    pub fn primary(&self) -> ::std::option::Option<bool> {
        self.primary
    }
}
impl ::std::fmt::Debug for FoodType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FoodType");
        formatter.field("localized_name", &"*** Sensitive Data Redacted ***");
        formatter.field("id", &"*** Sensitive Data Redacted ***");
        formatter.field("primary", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl FoodType {
    /// Creates a new builder-style object to manufacture [`FoodType`](crate::types::FoodType).
    pub fn builder() -> crate::types::builders::FoodTypeBuilder {
        crate::types::builders::FoodTypeBuilder::default()
    }
}

/// A builder for [`FoodType`](crate::types::FoodType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct FoodTypeBuilder {
    pub(crate) localized_name: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) primary: ::std::option::Option<bool>,
}
impl FoodTypeBuilder {
    /// <p>Localized name of the food type.</p>
    /// This field is required.
    pub fn localized_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.localized_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Localized name of the food type.</p>
    pub fn set_localized_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.localized_name = input;
        self
    }
    /// <p>Localized name of the food type.</p>
    pub fn get_localized_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.localized_name
    }
    /// <p>The Food Type Id.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Food Type Id.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The Food Type Id.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Boolean which indicates if this food type is the primary offered by the place. For example, if a location serves fast food, but also dessert, he primary would likely be fast food.</p>
    pub fn primary(mut self, input: bool) -> Self {
        self.primary = ::std::option::Option::Some(input);
        self
    }
    /// <p>Boolean which indicates if this food type is the primary offered by the place. For example, if a location serves fast food, but also dessert, he primary would likely be fast food.</p>
    pub fn set_primary(mut self, input: ::std::option::Option<bool>) -> Self {
        self.primary = input;
        self
    }
    /// <p>Boolean which indicates if this food type is the primary offered by the place. For example, if a location serves fast food, but also dessert, he primary would likely be fast food.</p>
    pub fn get_primary(&self) -> &::std::option::Option<bool> {
        &self.primary
    }
    /// Consumes the builder and constructs a [`FoodType`](crate::types::FoodType).
    /// This method will fail if any of the following fields are not set:
    /// - [`localized_name`](crate::types::builders::FoodTypeBuilder::localized_name)
    pub fn build(self) -> ::std::result::Result<crate::types::FoodType, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FoodType {
            localized_name: self.localized_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "localized_name",
                    "localized_name was not specified but it is required when building FoodType",
                )
            })?,
            id: self.id,
            primary: self.primary,
        })
    }
}
impl ::std::fmt::Debug for FoodTypeBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FoodTypeBuilder");
        formatter.field("localized_name", &"*** Sensitive Data Redacted ***");
        formatter.field("id", &"*** Sensitive Data Redacted ***");
        formatter.field("primary", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
