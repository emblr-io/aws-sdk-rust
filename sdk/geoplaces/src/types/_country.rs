// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The alpha-2 or alpha-3 character code for the country that the results will be present in.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Country {
    /// <p>Country, represented by its alpha 2-character code.</p>
    pub code2: ::std::option::Option<::std::string::String>,
    /// <p>Country, represented by its alpha t-character code.</p>
    pub code3: ::std::option::Option<::std::string::String>,
    /// <p>Name of the country.</p>
    pub name: ::std::option::Option<::std::string::String>,
}
impl Country {
    /// <p>Country, represented by its alpha 2-character code.</p>
    pub fn code2(&self) -> ::std::option::Option<&str> {
        self.code2.as_deref()
    }
    /// <p>Country, represented by its alpha t-character code.</p>
    pub fn code3(&self) -> ::std::option::Option<&str> {
        self.code3.as_deref()
    }
    /// <p>Name of the country.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl ::std::fmt::Debug for Country {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Country");
        formatter.field("code2", &"*** Sensitive Data Redacted ***");
        formatter.field("code3", &"*** Sensitive Data Redacted ***");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl Country {
    /// Creates a new builder-style object to manufacture [`Country`](crate::types::Country).
    pub fn builder() -> crate::types::builders::CountryBuilder {
        crate::types::builders::CountryBuilder::default()
    }
}

/// A builder for [`Country`](crate::types::Country).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CountryBuilder {
    pub(crate) code2: ::std::option::Option<::std::string::String>,
    pub(crate) code3: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
}
impl CountryBuilder {
    /// <p>Country, represented by its alpha 2-character code.</p>
    pub fn code2(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code2 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Country, represented by its alpha 2-character code.</p>
    pub fn set_code2(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code2 = input;
        self
    }
    /// <p>Country, represented by its alpha 2-character code.</p>
    pub fn get_code2(&self) -> &::std::option::Option<::std::string::String> {
        &self.code2
    }
    /// <p>Country, represented by its alpha t-character code.</p>
    pub fn code3(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code3 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Country, represented by its alpha t-character code.</p>
    pub fn set_code3(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code3 = input;
        self
    }
    /// <p>Country, represented by its alpha t-character code.</p>
    pub fn get_code3(&self) -> &::std::option::Option<::std::string::String> {
        &self.code3
    }
    /// <p>Name of the country.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the country.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the country.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Consumes the builder and constructs a [`Country`](crate::types::Country).
    pub fn build(self) -> crate::types::Country {
        crate::types::Country {
            code2: self.code2,
            code3: self.code3,
            name: self.name,
        }
    }
}
impl ::std::fmt::Debug for CountryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CountryBuilder");
        formatter.field("code2", &"*** Sensitive Data Redacted ***");
        formatter.field("code3", &"*** Sensitive Data Redacted ***");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
