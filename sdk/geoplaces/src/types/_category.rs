// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Category of the <code>Place</code> returned.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Category {
    /// <p>The category ID.</p>
    pub id: ::std::string::String,
    /// <p>The category name.</p>
    pub name: ::std::string::String,
    /// <p>Localized name of the category type.</p>
    pub localized_name: ::std::option::Option<::std::string::String>,
    /// <p>Boolean which indicates if this category is the primary offered by the place.</p>
    pub primary: ::std::option::Option<bool>,
}
impl Category {
    /// <p>The category ID.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The category name.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Localized name of the category type.</p>
    pub fn localized_name(&self) -> ::std::option::Option<&str> {
        self.localized_name.as_deref()
    }
    /// <p>Boolean which indicates if this category is the primary offered by the place.</p>
    pub fn primary(&self) -> ::std::option::Option<bool> {
        self.primary
    }
}
impl ::std::fmt::Debug for Category {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Category");
        formatter.field("id", &"*** Sensitive Data Redacted ***");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("localized_name", &"*** Sensitive Data Redacted ***");
        formatter.field("primary", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl Category {
    /// Creates a new builder-style object to manufacture [`Category`](crate::types::Category).
    pub fn builder() -> crate::types::builders::CategoryBuilder {
        crate::types::builders::CategoryBuilder::default()
    }
}

/// A builder for [`Category`](crate::types::Category).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CategoryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) localized_name: ::std::option::Option<::std::string::String>,
    pub(crate) primary: ::std::option::Option<bool>,
}
impl CategoryBuilder {
    /// <p>The category ID.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The category ID.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The category ID.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The category name.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The category name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The category name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Localized name of the category type.</p>
    pub fn localized_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.localized_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Localized name of the category type.</p>
    pub fn set_localized_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.localized_name = input;
        self
    }
    /// <p>Localized name of the category type.</p>
    pub fn get_localized_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.localized_name
    }
    /// <p>Boolean which indicates if this category is the primary offered by the place.</p>
    pub fn primary(mut self, input: bool) -> Self {
        self.primary = ::std::option::Option::Some(input);
        self
    }
    /// <p>Boolean which indicates if this category is the primary offered by the place.</p>
    pub fn set_primary(mut self, input: ::std::option::Option<bool>) -> Self {
        self.primary = input;
        self
    }
    /// <p>Boolean which indicates if this category is the primary offered by the place.</p>
    pub fn get_primary(&self) -> &::std::option::Option<bool> {
        &self.primary
    }
    /// Consumes the builder and constructs a [`Category`](crate::types::Category).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::CategoryBuilder::id)
    /// - [`name`](crate::types::builders::CategoryBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::Category, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Category {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building Category",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building Category",
                )
            })?,
            localized_name: self.localized_name,
            primary: self.primary,
        })
    }
}
impl ::std::fmt::Debug for CategoryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CategoryBuilder");
        formatter.field("id", &"*** Sensitive Data Redacted ***");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("localized_name", &"*** Sensitive Data Redacted ***");
        formatter.field("primary", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
