// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Geocoded result.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GeocodeResultItem {
    /// <p>The <code>PlaceId</code> of the place result.</p>
    pub place_id: ::std::string::String,
    /// <p>A <code>PlaceType</code> is a category that the result place must belong to.</p>
    pub place_type: crate::types::PlaceType,
    /// <p>The localized display name of this result item based on request parameter <code>language</code>.</p>
    pub title: ::std::string::String,
    /// <p>The place's address.</p>
    pub address: ::std::option::Option<crate::types::Address>,
    /// <p>Boolean indicating if the address provided has been corrected.</p>
    pub address_number_corrected: ::std::option::Option<bool>,
    /// <p>Contains details about the postal code of the place/result.</p>
    pub postal_code_details: ::std::option::Option<::std::vec::Vec<crate::types::PostalCodeDetails>>,
    /// <p>The position in longitude and latitude.</p>
    pub position: ::std::option::Option<::std::vec::Vec<f64>>,
    /// <p>The distance in meters from the QueryPosition.</p>
    pub distance: i64,
    /// <p>The bounding box enclosing the geometric shape (area or line) that an individual result covers.</p>
    /// <p>The bounding box formed is defined as a set 4 coordinates: <code>\[{westward lng}, {southern lat}, {eastward lng}, {northern lat}\]</code></p>
    pub map_view: ::std::option::Option<::std::vec::Vec<f64>>,
    /// <p>Categories of results that results must belong to.</p>
    pub categories: ::std::option::Option<::std::vec::Vec<crate::types::Category>>,
    /// <p>List of food types offered by this result.</p>
    pub food_types: ::std::option::Option<::std::vec::Vec<crate::types::FoodType>>,
    /// <p>Position of the access point represented by longitude and latitude.</p>
    pub access_points: ::std::option::Option<::std::vec::Vec<crate::types::AccessPoint>>,
    /// <p>The time zone in which the place is located.</p>
    pub time_zone: ::std::option::Option<crate::types::TimeZone>,
    /// <p>The alpha-2 or alpha-3 character code for the political view of a country. The political view applies to the results of the request to represent unresolved territorial claims through the point of view of the specified country.</p>
    pub political_view: ::std::option::Option<::std::string::String>,
    /// <p>Indicates how well the entire input matches the returned. It is equal to 1 if all input tokens are recognized and matched.</p>
    pub match_scores: ::std::option::Option<crate::types::MatchScoreDetails>,
    /// <p>Free-form text query.</p>
    pub parsed_query: ::std::option::Option<crate::types::GeocodeParsedQuery>,
    /// <p>All Intersections that are near the provided address.</p>
    pub intersections: ::std::option::Option<::std::vec::Vec<crate::types::Intersection>>,
    /// <p>The main address corresponding to a place of type Secondary Address.</p>
    pub main_address: ::std::option::Option<crate::types::RelatedPlace>,
    /// <p>All secondary addresses that are associated with a main address. A secondary address is one that includes secondary designators, such as a Suite or Unit Number, Building, or Floor information.</p>
    pub secondary_addresses: ::std::option::Option<::std::vec::Vec<crate::types::RelatedPlace>>,
}
impl GeocodeResultItem {
    /// <p>The <code>PlaceId</code> of the place result.</p>
    pub fn place_id(&self) -> &str {
        use std::ops::Deref;
        self.place_id.deref()
    }
    /// <p>A <code>PlaceType</code> is a category that the result place must belong to.</p>
    pub fn place_type(&self) -> &crate::types::PlaceType {
        &self.place_type
    }
    /// <p>The localized display name of this result item based on request parameter <code>language</code>.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>The place's address.</p>
    pub fn address(&self) -> ::std::option::Option<&crate::types::Address> {
        self.address.as_ref()
    }
    /// <p>Boolean indicating if the address provided has been corrected.</p>
    pub fn address_number_corrected(&self) -> ::std::option::Option<bool> {
        self.address_number_corrected
    }
    /// <p>Contains details about the postal code of the place/result.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.postal_code_details.is_none()`.
    pub fn postal_code_details(&self) -> &[crate::types::PostalCodeDetails] {
        self.postal_code_details.as_deref().unwrap_or_default()
    }
    /// <p>The position in longitude and latitude.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.position.is_none()`.
    pub fn position(&self) -> &[f64] {
        self.position.as_deref().unwrap_or_default()
    }
    /// <p>The distance in meters from the QueryPosition.</p>
    pub fn distance(&self) -> i64 {
        self.distance
    }
    /// <p>The bounding box enclosing the geometric shape (area or line) that an individual result covers.</p>
    /// <p>The bounding box formed is defined as a set 4 coordinates: <code>\[{westward lng}, {southern lat}, {eastward lng}, {northern lat}\]</code></p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.map_view.is_none()`.
    pub fn map_view(&self) -> &[f64] {
        self.map_view.as_deref().unwrap_or_default()
    }
    /// <p>Categories of results that results must belong to.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.categories.is_none()`.
    pub fn categories(&self) -> &[crate::types::Category] {
        self.categories.as_deref().unwrap_or_default()
    }
    /// <p>List of food types offered by this result.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.food_types.is_none()`.
    pub fn food_types(&self) -> &[crate::types::FoodType] {
        self.food_types.as_deref().unwrap_or_default()
    }
    /// <p>Position of the access point represented by longitude and latitude.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.access_points.is_none()`.
    pub fn access_points(&self) -> &[crate::types::AccessPoint] {
        self.access_points.as_deref().unwrap_or_default()
    }
    /// <p>The time zone in which the place is located.</p>
    pub fn time_zone(&self) -> ::std::option::Option<&crate::types::TimeZone> {
        self.time_zone.as_ref()
    }
    /// <p>The alpha-2 or alpha-3 character code for the political view of a country. The political view applies to the results of the request to represent unresolved territorial claims through the point of view of the specified country.</p>
    pub fn political_view(&self) -> ::std::option::Option<&str> {
        self.political_view.as_deref()
    }
    /// <p>Indicates how well the entire input matches the returned. It is equal to 1 if all input tokens are recognized and matched.</p>
    pub fn match_scores(&self) -> ::std::option::Option<&crate::types::MatchScoreDetails> {
        self.match_scores.as_ref()
    }
    /// <p>Free-form text query.</p>
    pub fn parsed_query(&self) -> ::std::option::Option<&crate::types::GeocodeParsedQuery> {
        self.parsed_query.as_ref()
    }
    /// <p>All Intersections that are near the provided address.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.intersections.is_none()`.
    pub fn intersections(&self) -> &[crate::types::Intersection] {
        self.intersections.as_deref().unwrap_or_default()
    }
    /// <p>The main address corresponding to a place of type Secondary Address.</p>
    pub fn main_address(&self) -> ::std::option::Option<&crate::types::RelatedPlace> {
        self.main_address.as_ref()
    }
    /// <p>All secondary addresses that are associated with a main address. A secondary address is one that includes secondary designators, such as a Suite or Unit Number, Building, or Floor information.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.secondary_addresses.is_none()`.
    pub fn secondary_addresses(&self) -> &[crate::types::RelatedPlace] {
        self.secondary_addresses.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for GeocodeResultItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GeocodeResultItem");
        formatter.field("place_id", &"*** Sensitive Data Redacted ***");
        formatter.field("place_type", &"*** Sensitive Data Redacted ***");
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("address", &self.address);
        formatter.field("address_number_corrected", &"*** Sensitive Data Redacted ***");
        formatter.field("postal_code_details", &self.postal_code_details);
        formatter.field("position", &"*** Sensitive Data Redacted ***");
        formatter.field("distance", &"*** Sensitive Data Redacted ***");
        formatter.field("map_view", &"*** Sensitive Data Redacted ***");
        formatter.field("categories", &self.categories);
        formatter.field("food_types", &self.food_types);
        formatter.field("access_points", &self.access_points);
        formatter.field("time_zone", &self.time_zone);
        formatter.field("political_view", &"*** Sensitive Data Redacted ***");
        formatter.field("match_scores", &self.match_scores);
        formatter.field("parsed_query", &self.parsed_query);
        formatter.field("intersections", &self.intersections);
        formatter.field("main_address", &self.main_address);
        formatter.field("secondary_addresses", &self.secondary_addresses);
        formatter.finish()
    }
}
impl GeocodeResultItem {
    /// Creates a new builder-style object to manufacture [`GeocodeResultItem`](crate::types::GeocodeResultItem).
    pub fn builder() -> crate::types::builders::GeocodeResultItemBuilder {
        crate::types::builders::GeocodeResultItemBuilder::default()
    }
}

/// A builder for [`GeocodeResultItem`](crate::types::GeocodeResultItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GeocodeResultItemBuilder {
    pub(crate) place_id: ::std::option::Option<::std::string::String>,
    pub(crate) place_type: ::std::option::Option<crate::types::PlaceType>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) address: ::std::option::Option<crate::types::Address>,
    pub(crate) address_number_corrected: ::std::option::Option<bool>,
    pub(crate) postal_code_details: ::std::option::Option<::std::vec::Vec<crate::types::PostalCodeDetails>>,
    pub(crate) position: ::std::option::Option<::std::vec::Vec<f64>>,
    pub(crate) distance: ::std::option::Option<i64>,
    pub(crate) map_view: ::std::option::Option<::std::vec::Vec<f64>>,
    pub(crate) categories: ::std::option::Option<::std::vec::Vec<crate::types::Category>>,
    pub(crate) food_types: ::std::option::Option<::std::vec::Vec<crate::types::FoodType>>,
    pub(crate) access_points: ::std::option::Option<::std::vec::Vec<crate::types::AccessPoint>>,
    pub(crate) time_zone: ::std::option::Option<crate::types::TimeZone>,
    pub(crate) political_view: ::std::option::Option<::std::string::String>,
    pub(crate) match_scores: ::std::option::Option<crate::types::MatchScoreDetails>,
    pub(crate) parsed_query: ::std::option::Option<crate::types::GeocodeParsedQuery>,
    pub(crate) intersections: ::std::option::Option<::std::vec::Vec<crate::types::Intersection>>,
    pub(crate) main_address: ::std::option::Option<crate::types::RelatedPlace>,
    pub(crate) secondary_addresses: ::std::option::Option<::std::vec::Vec<crate::types::RelatedPlace>>,
}
impl GeocodeResultItemBuilder {
    /// <p>The <code>PlaceId</code> of the place result.</p>
    /// This field is required.
    pub fn place_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.place_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>PlaceId</code> of the place result.</p>
    pub fn set_place_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.place_id = input;
        self
    }
    /// <p>The <code>PlaceId</code> of the place result.</p>
    pub fn get_place_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.place_id
    }
    /// <p>A <code>PlaceType</code> is a category that the result place must belong to.</p>
    /// This field is required.
    pub fn place_type(mut self, input: crate::types::PlaceType) -> Self {
        self.place_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>PlaceType</code> is a category that the result place must belong to.</p>
    pub fn set_place_type(mut self, input: ::std::option::Option<crate::types::PlaceType>) -> Self {
        self.place_type = input;
        self
    }
    /// <p>A <code>PlaceType</code> is a category that the result place must belong to.</p>
    pub fn get_place_type(&self) -> &::std::option::Option<crate::types::PlaceType> {
        &self.place_type
    }
    /// <p>The localized display name of this result item based on request parameter <code>language</code>.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The localized display name of this result item based on request parameter <code>language</code>.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The localized display name of this result item based on request parameter <code>language</code>.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The place's address.</p>
    pub fn address(mut self, input: crate::types::Address) -> Self {
        self.address = ::std::option::Option::Some(input);
        self
    }
    /// <p>The place's address.</p>
    pub fn set_address(mut self, input: ::std::option::Option<crate::types::Address>) -> Self {
        self.address = input;
        self
    }
    /// <p>The place's address.</p>
    pub fn get_address(&self) -> &::std::option::Option<crate::types::Address> {
        &self.address
    }
    /// <p>Boolean indicating if the address provided has been corrected.</p>
    pub fn address_number_corrected(mut self, input: bool) -> Self {
        self.address_number_corrected = ::std::option::Option::Some(input);
        self
    }
    /// <p>Boolean indicating if the address provided has been corrected.</p>
    pub fn set_address_number_corrected(mut self, input: ::std::option::Option<bool>) -> Self {
        self.address_number_corrected = input;
        self
    }
    /// <p>Boolean indicating if the address provided has been corrected.</p>
    pub fn get_address_number_corrected(&self) -> &::std::option::Option<bool> {
        &self.address_number_corrected
    }
    /// Appends an item to `postal_code_details`.
    ///
    /// To override the contents of this collection use [`set_postal_code_details`](Self::set_postal_code_details).
    ///
    /// <p>Contains details about the postal code of the place/result.</p>
    pub fn postal_code_details(mut self, input: crate::types::PostalCodeDetails) -> Self {
        let mut v = self.postal_code_details.unwrap_or_default();
        v.push(input);
        self.postal_code_details = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains details about the postal code of the place/result.</p>
    pub fn set_postal_code_details(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PostalCodeDetails>>) -> Self {
        self.postal_code_details = input;
        self
    }
    /// <p>Contains details about the postal code of the place/result.</p>
    pub fn get_postal_code_details(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PostalCodeDetails>> {
        &self.postal_code_details
    }
    /// Appends an item to `position`.
    ///
    /// To override the contents of this collection use [`set_position`](Self::set_position).
    ///
    /// <p>The position in longitude and latitude.</p>
    pub fn position(mut self, input: f64) -> Self {
        let mut v = self.position.unwrap_or_default();
        v.push(input);
        self.position = ::std::option::Option::Some(v);
        self
    }
    /// <p>The position in longitude and latitude.</p>
    pub fn set_position(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.position = input;
        self
    }
    /// <p>The position in longitude and latitude.</p>
    pub fn get_position(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.position
    }
    /// <p>The distance in meters from the QueryPosition.</p>
    pub fn distance(mut self, input: i64) -> Self {
        self.distance = ::std::option::Option::Some(input);
        self
    }
    /// <p>The distance in meters from the QueryPosition.</p>
    pub fn set_distance(mut self, input: ::std::option::Option<i64>) -> Self {
        self.distance = input;
        self
    }
    /// <p>The distance in meters from the QueryPosition.</p>
    pub fn get_distance(&self) -> &::std::option::Option<i64> {
        &self.distance
    }
    /// Appends an item to `map_view`.
    ///
    /// To override the contents of this collection use [`set_map_view`](Self::set_map_view).
    ///
    /// <p>The bounding box enclosing the geometric shape (area or line) that an individual result covers.</p>
    /// <p>The bounding box formed is defined as a set 4 coordinates: <code>\[{westward lng}, {southern lat}, {eastward lng}, {northern lat}\]</code></p>
    pub fn map_view(mut self, input: f64) -> Self {
        let mut v = self.map_view.unwrap_or_default();
        v.push(input);
        self.map_view = ::std::option::Option::Some(v);
        self
    }
    /// <p>The bounding box enclosing the geometric shape (area or line) that an individual result covers.</p>
    /// <p>The bounding box formed is defined as a set 4 coordinates: <code>\[{westward lng}, {southern lat}, {eastward lng}, {northern lat}\]</code></p>
    pub fn set_map_view(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.map_view = input;
        self
    }
    /// <p>The bounding box enclosing the geometric shape (area or line) that an individual result covers.</p>
    /// <p>The bounding box formed is defined as a set 4 coordinates: <code>\[{westward lng}, {southern lat}, {eastward lng}, {northern lat}\]</code></p>
    pub fn get_map_view(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.map_view
    }
    /// Appends an item to `categories`.
    ///
    /// To override the contents of this collection use [`set_categories`](Self::set_categories).
    ///
    /// <p>Categories of results that results must belong to.</p>
    pub fn categories(mut self, input: crate::types::Category) -> Self {
        let mut v = self.categories.unwrap_or_default();
        v.push(input);
        self.categories = ::std::option::Option::Some(v);
        self
    }
    /// <p>Categories of results that results must belong to.</p>
    pub fn set_categories(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Category>>) -> Self {
        self.categories = input;
        self
    }
    /// <p>Categories of results that results must belong to.</p>
    pub fn get_categories(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Category>> {
        &self.categories
    }
    /// Appends an item to `food_types`.
    ///
    /// To override the contents of this collection use [`set_food_types`](Self::set_food_types).
    ///
    /// <p>List of food types offered by this result.</p>
    pub fn food_types(mut self, input: crate::types::FoodType) -> Self {
        let mut v = self.food_types.unwrap_or_default();
        v.push(input);
        self.food_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of food types offered by this result.</p>
    pub fn set_food_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FoodType>>) -> Self {
        self.food_types = input;
        self
    }
    /// <p>List of food types offered by this result.</p>
    pub fn get_food_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FoodType>> {
        &self.food_types
    }
    /// Appends an item to `access_points`.
    ///
    /// To override the contents of this collection use [`set_access_points`](Self::set_access_points).
    ///
    /// <p>Position of the access point represented by longitude and latitude.</p>
    pub fn access_points(mut self, input: crate::types::AccessPoint) -> Self {
        let mut v = self.access_points.unwrap_or_default();
        v.push(input);
        self.access_points = ::std::option::Option::Some(v);
        self
    }
    /// <p>Position of the access point represented by longitude and latitude.</p>
    pub fn set_access_points(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AccessPoint>>) -> Self {
        self.access_points = input;
        self
    }
    /// <p>Position of the access point represented by longitude and latitude.</p>
    pub fn get_access_points(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AccessPoint>> {
        &self.access_points
    }
    /// <p>The time zone in which the place is located.</p>
    pub fn time_zone(mut self, input: crate::types::TimeZone) -> Self {
        self.time_zone = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time zone in which the place is located.</p>
    pub fn set_time_zone(mut self, input: ::std::option::Option<crate::types::TimeZone>) -> Self {
        self.time_zone = input;
        self
    }
    /// <p>The time zone in which the place is located.</p>
    pub fn get_time_zone(&self) -> &::std::option::Option<crate::types::TimeZone> {
        &self.time_zone
    }
    /// <p>The alpha-2 or alpha-3 character code for the political view of a country. The political view applies to the results of the request to represent unresolved territorial claims through the point of view of the specified country.</p>
    pub fn political_view(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.political_view = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The alpha-2 or alpha-3 character code for the political view of a country. The political view applies to the results of the request to represent unresolved territorial claims through the point of view of the specified country.</p>
    pub fn set_political_view(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.political_view = input;
        self
    }
    /// <p>The alpha-2 or alpha-3 character code for the political view of a country. The political view applies to the results of the request to represent unresolved territorial claims through the point of view of the specified country.</p>
    pub fn get_political_view(&self) -> &::std::option::Option<::std::string::String> {
        &self.political_view
    }
    /// <p>Indicates how well the entire input matches the returned. It is equal to 1 if all input tokens are recognized and matched.</p>
    pub fn match_scores(mut self, input: crate::types::MatchScoreDetails) -> Self {
        self.match_scores = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates how well the entire input matches the returned. It is equal to 1 if all input tokens are recognized and matched.</p>
    pub fn set_match_scores(mut self, input: ::std::option::Option<crate::types::MatchScoreDetails>) -> Self {
        self.match_scores = input;
        self
    }
    /// <p>Indicates how well the entire input matches the returned. It is equal to 1 if all input tokens are recognized and matched.</p>
    pub fn get_match_scores(&self) -> &::std::option::Option<crate::types::MatchScoreDetails> {
        &self.match_scores
    }
    /// <p>Free-form text query.</p>
    pub fn parsed_query(mut self, input: crate::types::GeocodeParsedQuery) -> Self {
        self.parsed_query = ::std::option::Option::Some(input);
        self
    }
    /// <p>Free-form text query.</p>
    pub fn set_parsed_query(mut self, input: ::std::option::Option<crate::types::GeocodeParsedQuery>) -> Self {
        self.parsed_query = input;
        self
    }
    /// <p>Free-form text query.</p>
    pub fn get_parsed_query(&self) -> &::std::option::Option<crate::types::GeocodeParsedQuery> {
        &self.parsed_query
    }
    /// Appends an item to `intersections`.
    ///
    /// To override the contents of this collection use [`set_intersections`](Self::set_intersections).
    ///
    /// <p>All Intersections that are near the provided address.</p>
    pub fn intersections(mut self, input: crate::types::Intersection) -> Self {
        let mut v = self.intersections.unwrap_or_default();
        v.push(input);
        self.intersections = ::std::option::Option::Some(v);
        self
    }
    /// <p>All Intersections that are near the provided address.</p>
    pub fn set_intersections(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Intersection>>) -> Self {
        self.intersections = input;
        self
    }
    /// <p>All Intersections that are near the provided address.</p>
    pub fn get_intersections(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Intersection>> {
        &self.intersections
    }
    /// <p>The main address corresponding to a place of type Secondary Address.</p>
    pub fn main_address(mut self, input: crate::types::RelatedPlace) -> Self {
        self.main_address = ::std::option::Option::Some(input);
        self
    }
    /// <p>The main address corresponding to a place of type Secondary Address.</p>
    pub fn set_main_address(mut self, input: ::std::option::Option<crate::types::RelatedPlace>) -> Self {
        self.main_address = input;
        self
    }
    /// <p>The main address corresponding to a place of type Secondary Address.</p>
    pub fn get_main_address(&self) -> &::std::option::Option<crate::types::RelatedPlace> {
        &self.main_address
    }
    /// Appends an item to `secondary_addresses`.
    ///
    /// To override the contents of this collection use [`set_secondary_addresses`](Self::set_secondary_addresses).
    ///
    /// <p>All secondary addresses that are associated with a main address. A secondary address is one that includes secondary designators, such as a Suite or Unit Number, Building, or Floor information.</p>
    pub fn secondary_addresses(mut self, input: crate::types::RelatedPlace) -> Self {
        let mut v = self.secondary_addresses.unwrap_or_default();
        v.push(input);
        self.secondary_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>All secondary addresses that are associated with a main address. A secondary address is one that includes secondary designators, such as a Suite or Unit Number, Building, or Floor information.</p>
    pub fn set_secondary_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RelatedPlace>>) -> Self {
        self.secondary_addresses = input;
        self
    }
    /// <p>All secondary addresses that are associated with a main address. A secondary address is one that includes secondary designators, such as a Suite or Unit Number, Building, or Floor information.</p>
    pub fn get_secondary_addresses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RelatedPlace>> {
        &self.secondary_addresses
    }
    /// Consumes the builder and constructs a [`GeocodeResultItem`](crate::types::GeocodeResultItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`place_id`](crate::types::builders::GeocodeResultItemBuilder::place_id)
    /// - [`place_type`](crate::types::builders::GeocodeResultItemBuilder::place_type)
    /// - [`title`](crate::types::builders::GeocodeResultItemBuilder::title)
    pub fn build(self) -> ::std::result::Result<crate::types::GeocodeResultItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GeocodeResultItem {
            place_id: self.place_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "place_id",
                    "place_id was not specified but it is required when building GeocodeResultItem",
                )
            })?,
            place_type: self.place_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "place_type",
                    "place_type was not specified but it is required when building GeocodeResultItem",
                )
            })?,
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building GeocodeResultItem",
                )
            })?,
            address: self.address,
            address_number_corrected: self.address_number_corrected,
            postal_code_details: self.postal_code_details,
            position: self.position,
            distance: self.distance.unwrap_or_default(),
            map_view: self.map_view,
            categories: self.categories,
            food_types: self.food_types,
            access_points: self.access_points,
            time_zone: self.time_zone,
            political_view: self.political_view,
            match_scores: self.match_scores,
            parsed_query: self.parsed_query,
            intersections: self.intersections,
            main_address: self.main_address,
            secondary_addresses: self.secondary_addresses,
        })
    }
}
impl ::std::fmt::Debug for GeocodeResultItemBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GeocodeResultItemBuilder");
        formatter.field("place_id", &"*** Sensitive Data Redacted ***");
        formatter.field("place_type", &"*** Sensitive Data Redacted ***");
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("address", &self.address);
        formatter.field("address_number_corrected", &"*** Sensitive Data Redacted ***");
        formatter.field("postal_code_details", &self.postal_code_details);
        formatter.field("position", &"*** Sensitive Data Redacted ***");
        formatter.field("distance", &"*** Sensitive Data Redacted ***");
        formatter.field("map_view", &"*** Sensitive Data Redacted ***");
        formatter.field("categories", &self.categories);
        formatter.field("food_types", &self.food_types);
        formatter.field("access_points", &self.access_points);
        formatter.field("time_zone", &self.time_zone);
        formatter.field("political_view", &"*** Sensitive Data Redacted ***");
        formatter.field("match_scores", &self.match_scores);
        formatter.field("parsed_query", &self.parsed_query);
        formatter.field("intersections", &self.intersections);
        formatter.field("main_address", &self.main_address);
        formatter.field("secondary_addresses", &self.secondary_addresses);
        formatter.finish()
    }
}
