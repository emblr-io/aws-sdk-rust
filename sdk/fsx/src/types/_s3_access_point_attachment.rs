// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An S3 access point attached to an Amazon FSx volume.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3AccessPointAttachment {
    /// <p>The lifecycle status of the S3 access point attachment. The lifecycle can have the following values:</p>
    /// <ul>
    /// <li>
    /// <p>AVAILABLE - the S3 access point attachment is available for use</p></li>
    /// <li>
    /// <p>CREATING - Amazon FSx is creating the S3 access point and attachment</p></li>
    /// <li>
    /// <p>DELETING - Amazon FSx is deleting the S3 access point and attachment</p></li>
    /// <li>
    /// <p>FAILED - The S3 access point attachment is in a failed state. Delete and detach the S3 access point attachment, and create a new one.</p></li>
    /// <li>
    /// <p>UPDATING - Amazon FSx is updating the S3 access point attachment</p></li>
    /// </ul>
    pub lifecycle: ::std::option::Option<crate::types::S3AccessPointAttachmentLifecycle>,
    /// <p>Describes why a resource lifecycle state changed.</p>
    pub lifecycle_transition_reason: ::std::option::Option<crate::types::LifecycleTransitionReason>,
    /// <p>The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The name of the S3 access point attachment; also used for the name of the S3 access point.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The type of Amazon FSx volume that the S3 access point is attached to.</p>
    pub r#type: ::std::option::Option<crate::types::S3AccessPointAttachmentType>,
    /// <p>The OpenZFSConfiguration of the S3 access point attachment.</p>
    pub open_zfs_configuration: ::std::option::Option<crate::types::S3AccessPointOpenZfsConfiguration>,
    /// <p>The S3 access point configuration of the S3 access point attachment.</p>
    pub s3_access_point: ::std::option::Option<crate::types::S3AccessPoint>,
}
impl S3AccessPointAttachment {
    /// <p>The lifecycle status of the S3 access point attachment. The lifecycle can have the following values:</p>
    /// <ul>
    /// <li>
    /// <p>AVAILABLE - the S3 access point attachment is available for use</p></li>
    /// <li>
    /// <p>CREATING - Amazon FSx is creating the S3 access point and attachment</p></li>
    /// <li>
    /// <p>DELETING - Amazon FSx is deleting the S3 access point and attachment</p></li>
    /// <li>
    /// <p>FAILED - The S3 access point attachment is in a failed state. Delete and detach the S3 access point attachment, and create a new one.</p></li>
    /// <li>
    /// <p>UPDATING - Amazon FSx is updating the S3 access point attachment</p></li>
    /// </ul>
    pub fn lifecycle(&self) -> ::std::option::Option<&crate::types::S3AccessPointAttachmentLifecycle> {
        self.lifecycle.as_ref()
    }
    /// <p>Describes why a resource lifecycle state changed.</p>
    pub fn lifecycle_transition_reason(&self) -> ::std::option::Option<&crate::types::LifecycleTransitionReason> {
        self.lifecycle_transition_reason.as_ref()
    }
    /// <p>The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The name of the S3 access point attachment; also used for the name of the S3 access point.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of Amazon FSx volume that the S3 access point is attached to.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::S3AccessPointAttachmentType> {
        self.r#type.as_ref()
    }
    /// <p>The OpenZFSConfiguration of the S3 access point attachment.</p>
    pub fn open_zfs_configuration(&self) -> ::std::option::Option<&crate::types::S3AccessPointOpenZfsConfiguration> {
        self.open_zfs_configuration.as_ref()
    }
    /// <p>The S3 access point configuration of the S3 access point attachment.</p>
    pub fn s3_access_point(&self) -> ::std::option::Option<&crate::types::S3AccessPoint> {
        self.s3_access_point.as_ref()
    }
}
impl S3AccessPointAttachment {
    /// Creates a new builder-style object to manufacture [`S3AccessPointAttachment`](crate::types::S3AccessPointAttachment).
    pub fn builder() -> crate::types::builders::S3AccessPointAttachmentBuilder {
        crate::types::builders::S3AccessPointAttachmentBuilder::default()
    }
}

/// A builder for [`S3AccessPointAttachment`](crate::types::S3AccessPointAttachment).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct S3AccessPointAttachmentBuilder {
    pub(crate) lifecycle: ::std::option::Option<crate::types::S3AccessPointAttachmentLifecycle>,
    pub(crate) lifecycle_transition_reason: ::std::option::Option<crate::types::LifecycleTransitionReason>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::S3AccessPointAttachmentType>,
    pub(crate) open_zfs_configuration: ::std::option::Option<crate::types::S3AccessPointOpenZfsConfiguration>,
    pub(crate) s3_access_point: ::std::option::Option<crate::types::S3AccessPoint>,
}
impl S3AccessPointAttachmentBuilder {
    /// <p>The lifecycle status of the S3 access point attachment. The lifecycle can have the following values:</p>
    /// <ul>
    /// <li>
    /// <p>AVAILABLE - the S3 access point attachment is available for use</p></li>
    /// <li>
    /// <p>CREATING - Amazon FSx is creating the S3 access point and attachment</p></li>
    /// <li>
    /// <p>DELETING - Amazon FSx is deleting the S3 access point and attachment</p></li>
    /// <li>
    /// <p>FAILED - The S3 access point attachment is in a failed state. Delete and detach the S3 access point attachment, and create a new one.</p></li>
    /// <li>
    /// <p>UPDATING - Amazon FSx is updating the S3 access point attachment</p></li>
    /// </ul>
    pub fn lifecycle(mut self, input: crate::types::S3AccessPointAttachmentLifecycle) -> Self {
        self.lifecycle = ::std::option::Option::Some(input);
        self
    }
    /// <p>The lifecycle status of the S3 access point attachment. The lifecycle can have the following values:</p>
    /// <ul>
    /// <li>
    /// <p>AVAILABLE - the S3 access point attachment is available for use</p></li>
    /// <li>
    /// <p>CREATING - Amazon FSx is creating the S3 access point and attachment</p></li>
    /// <li>
    /// <p>DELETING - Amazon FSx is deleting the S3 access point and attachment</p></li>
    /// <li>
    /// <p>FAILED - The S3 access point attachment is in a failed state. Delete and detach the S3 access point attachment, and create a new one.</p></li>
    /// <li>
    /// <p>UPDATING - Amazon FSx is updating the S3 access point attachment</p></li>
    /// </ul>
    pub fn set_lifecycle(mut self, input: ::std::option::Option<crate::types::S3AccessPointAttachmentLifecycle>) -> Self {
        self.lifecycle = input;
        self
    }
    /// <p>The lifecycle status of the S3 access point attachment. The lifecycle can have the following values:</p>
    /// <ul>
    /// <li>
    /// <p>AVAILABLE - the S3 access point attachment is available for use</p></li>
    /// <li>
    /// <p>CREATING - Amazon FSx is creating the S3 access point and attachment</p></li>
    /// <li>
    /// <p>DELETING - Amazon FSx is deleting the S3 access point and attachment</p></li>
    /// <li>
    /// <p>FAILED - The S3 access point attachment is in a failed state. Delete and detach the S3 access point attachment, and create a new one.</p></li>
    /// <li>
    /// <p>UPDATING - Amazon FSx is updating the S3 access point attachment</p></li>
    /// </ul>
    pub fn get_lifecycle(&self) -> &::std::option::Option<crate::types::S3AccessPointAttachmentLifecycle> {
        &self.lifecycle
    }
    /// <p>Describes why a resource lifecycle state changed.</p>
    pub fn lifecycle_transition_reason(mut self, input: crate::types::LifecycleTransitionReason) -> Self {
        self.lifecycle_transition_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes why a resource lifecycle state changed.</p>
    pub fn set_lifecycle_transition_reason(mut self, input: ::std::option::Option<crate::types::LifecycleTransitionReason>) -> Self {
        self.lifecycle_transition_reason = input;
        self
    }
    /// <p>Describes why a resource lifecycle state changed.</p>
    pub fn get_lifecycle_transition_reason(&self) -> &::std::option::Option<crate::types::LifecycleTransitionReason> {
        &self.lifecycle_transition_reason
    }
    /// <p>The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The name of the S3 access point attachment; also used for the name of the S3 access point.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the S3 access point attachment; also used for the name of the S3 access point.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the S3 access point attachment; also used for the name of the S3 access point.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of Amazon FSx volume that the S3 access point is attached to.</p>
    pub fn r#type(mut self, input: crate::types::S3AccessPointAttachmentType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of Amazon FSx volume that the S3 access point is attached to.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::S3AccessPointAttachmentType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of Amazon FSx volume that the S3 access point is attached to.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::S3AccessPointAttachmentType> {
        &self.r#type
    }
    /// <p>The OpenZFSConfiguration of the S3 access point attachment.</p>
    pub fn open_zfs_configuration(mut self, input: crate::types::S3AccessPointOpenZfsConfiguration) -> Self {
        self.open_zfs_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The OpenZFSConfiguration of the S3 access point attachment.</p>
    pub fn set_open_zfs_configuration(mut self, input: ::std::option::Option<crate::types::S3AccessPointOpenZfsConfiguration>) -> Self {
        self.open_zfs_configuration = input;
        self
    }
    /// <p>The OpenZFSConfiguration of the S3 access point attachment.</p>
    pub fn get_open_zfs_configuration(&self) -> &::std::option::Option<crate::types::S3AccessPointOpenZfsConfiguration> {
        &self.open_zfs_configuration
    }
    /// <p>The S3 access point configuration of the S3 access point attachment.</p>
    pub fn s3_access_point(mut self, input: crate::types::S3AccessPoint) -> Self {
        self.s3_access_point = ::std::option::Option::Some(input);
        self
    }
    /// <p>The S3 access point configuration of the S3 access point attachment.</p>
    pub fn set_s3_access_point(mut self, input: ::std::option::Option<crate::types::S3AccessPoint>) -> Self {
        self.s3_access_point = input;
        self
    }
    /// <p>The S3 access point configuration of the S3 access point attachment.</p>
    pub fn get_s3_access_point(&self) -> &::std::option::Option<crate::types::S3AccessPoint> {
        &self.s3_access_point
    }
    /// Consumes the builder and constructs a [`S3AccessPointAttachment`](crate::types::S3AccessPointAttachment).
    pub fn build(self) -> crate::types::S3AccessPointAttachment {
        crate::types::S3AccessPointAttachment {
            lifecycle: self.lifecycle,
            lifecycle_transition_reason: self.lifecycle_transition_reason,
            creation_time: self.creation_time,
            name: self.name,
            r#type: self.r#type,
            open_zfs_configuration: self.open_zfs_configuration,
            s3_access_point: self.s3_access_point,
        }
    }
}
