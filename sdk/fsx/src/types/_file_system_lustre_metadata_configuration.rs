// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Lustre metadata performance configuration of an Amazon FSx for Lustre file system using a <code>PERSISTENT_2</code> deployment type. The configuration enables the file system to support increasing metadata performance.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FileSystemLustreMetadataConfiguration {
    /// <p>The number of Metadata IOPS provisioned for the file system.</p>
    /// <ul>
    /// <li>
    /// <p>For SSD file systems, valid values are <code>1500</code>, <code>3000</code>, <code>6000</code>, <code>12000</code>, and multiples of <code>12000</code> up to a maximum of <code>192000</code>.</p></li>
    /// <li>
    /// <p>For Intelligent-Tiering file systems, valid values are <code>6000</code> and <code>12000</code>.</p></li>
    /// </ul>
    pub iops: ::std::option::Option<i32>,
    /// <p>The metadata configuration mode for provisioning Metadata IOPS for the file system.</p>
    /// <ul>
    /// <li>
    /// <p>In AUTOMATIC mode (supported only on SSD file systems), FSx for Lustre automatically provisions and scales the number of Metadata IOPS on your file system based on your file system storage capacity.</p></li>
    /// <li>
    /// <p>In USER_PROVISIONED mode, you can choose to specify the number of Metadata IOPS to provision for your file system.</p></li>
    /// </ul>
    pub mode: ::std::option::Option<crate::types::MetadataConfigurationMode>,
}
impl FileSystemLustreMetadataConfiguration {
    /// <p>The number of Metadata IOPS provisioned for the file system.</p>
    /// <ul>
    /// <li>
    /// <p>For SSD file systems, valid values are <code>1500</code>, <code>3000</code>, <code>6000</code>, <code>12000</code>, and multiples of <code>12000</code> up to a maximum of <code>192000</code>.</p></li>
    /// <li>
    /// <p>For Intelligent-Tiering file systems, valid values are <code>6000</code> and <code>12000</code>.</p></li>
    /// </ul>
    pub fn iops(&self) -> ::std::option::Option<i32> {
        self.iops
    }
    /// <p>The metadata configuration mode for provisioning Metadata IOPS for the file system.</p>
    /// <ul>
    /// <li>
    /// <p>In AUTOMATIC mode (supported only on SSD file systems), FSx for Lustre automatically provisions and scales the number of Metadata IOPS on your file system based on your file system storage capacity.</p></li>
    /// <li>
    /// <p>In USER_PROVISIONED mode, you can choose to specify the number of Metadata IOPS to provision for your file system.</p></li>
    /// </ul>
    pub fn mode(&self) -> ::std::option::Option<&crate::types::MetadataConfigurationMode> {
        self.mode.as_ref()
    }
}
impl FileSystemLustreMetadataConfiguration {
    /// Creates a new builder-style object to manufacture [`FileSystemLustreMetadataConfiguration`](crate::types::FileSystemLustreMetadataConfiguration).
    pub fn builder() -> crate::types::builders::FileSystemLustreMetadataConfigurationBuilder {
        crate::types::builders::FileSystemLustreMetadataConfigurationBuilder::default()
    }
}

/// A builder for [`FileSystemLustreMetadataConfiguration`](crate::types::FileSystemLustreMetadataConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FileSystemLustreMetadataConfigurationBuilder {
    pub(crate) iops: ::std::option::Option<i32>,
    pub(crate) mode: ::std::option::Option<crate::types::MetadataConfigurationMode>,
}
impl FileSystemLustreMetadataConfigurationBuilder {
    /// <p>The number of Metadata IOPS provisioned for the file system.</p>
    /// <ul>
    /// <li>
    /// <p>For SSD file systems, valid values are <code>1500</code>, <code>3000</code>, <code>6000</code>, <code>12000</code>, and multiples of <code>12000</code> up to a maximum of <code>192000</code>.</p></li>
    /// <li>
    /// <p>For Intelligent-Tiering file systems, valid values are <code>6000</code> and <code>12000</code>.</p></li>
    /// </ul>
    pub fn iops(mut self, input: i32) -> Self {
        self.iops = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of Metadata IOPS provisioned for the file system.</p>
    /// <ul>
    /// <li>
    /// <p>For SSD file systems, valid values are <code>1500</code>, <code>3000</code>, <code>6000</code>, <code>12000</code>, and multiples of <code>12000</code> up to a maximum of <code>192000</code>.</p></li>
    /// <li>
    /// <p>For Intelligent-Tiering file systems, valid values are <code>6000</code> and <code>12000</code>.</p></li>
    /// </ul>
    pub fn set_iops(mut self, input: ::std::option::Option<i32>) -> Self {
        self.iops = input;
        self
    }
    /// <p>The number of Metadata IOPS provisioned for the file system.</p>
    /// <ul>
    /// <li>
    /// <p>For SSD file systems, valid values are <code>1500</code>, <code>3000</code>, <code>6000</code>, <code>12000</code>, and multiples of <code>12000</code> up to a maximum of <code>192000</code>.</p></li>
    /// <li>
    /// <p>For Intelligent-Tiering file systems, valid values are <code>6000</code> and <code>12000</code>.</p></li>
    /// </ul>
    pub fn get_iops(&self) -> &::std::option::Option<i32> {
        &self.iops
    }
    /// <p>The metadata configuration mode for provisioning Metadata IOPS for the file system.</p>
    /// <ul>
    /// <li>
    /// <p>In AUTOMATIC mode (supported only on SSD file systems), FSx for Lustre automatically provisions and scales the number of Metadata IOPS on your file system based on your file system storage capacity.</p></li>
    /// <li>
    /// <p>In USER_PROVISIONED mode, you can choose to specify the number of Metadata IOPS to provision for your file system.</p></li>
    /// </ul>
    /// This field is required.
    pub fn mode(mut self, input: crate::types::MetadataConfigurationMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metadata configuration mode for provisioning Metadata IOPS for the file system.</p>
    /// <ul>
    /// <li>
    /// <p>In AUTOMATIC mode (supported only on SSD file systems), FSx for Lustre automatically provisions and scales the number of Metadata IOPS on your file system based on your file system storage capacity.</p></li>
    /// <li>
    /// <p>In USER_PROVISIONED mode, you can choose to specify the number of Metadata IOPS to provision for your file system.</p></li>
    /// </ul>
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::MetadataConfigurationMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>The metadata configuration mode for provisioning Metadata IOPS for the file system.</p>
    /// <ul>
    /// <li>
    /// <p>In AUTOMATIC mode (supported only on SSD file systems), FSx for Lustre automatically provisions and scales the number of Metadata IOPS on your file system based on your file system storage capacity.</p></li>
    /// <li>
    /// <p>In USER_PROVISIONED mode, you can choose to specify the number of Metadata IOPS to provision for your file system.</p></li>
    /// </ul>
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::MetadataConfigurationMode> {
        &self.mode
    }
    /// Consumes the builder and constructs a [`FileSystemLustreMetadataConfiguration`](crate::types::FileSystemLustreMetadataConfiguration).
    pub fn build(self) -> crate::types::FileSystemLustreMetadataConfiguration {
        crate::types::FileSystemLustreMetadataConfiguration {
            iops: self.iops,
            mode: self.mode,
        }
    }
}
