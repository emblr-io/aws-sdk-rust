// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>If included, Amazon S3 restricts access to this access point to requests from the specified virtual private cloud (VPC).</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3AccessPointVpcConfiguration {
    /// <p>Specifies the virtual private cloud (VPC) for the S3 access point VPC configuration, if one exists.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
}
impl S3AccessPointVpcConfiguration {
    /// <p>Specifies the virtual private cloud (VPC) for the S3 access point VPC configuration, if one exists.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
}
impl S3AccessPointVpcConfiguration {
    /// Creates a new builder-style object to manufacture [`S3AccessPointVpcConfiguration`](crate::types::S3AccessPointVpcConfiguration).
    pub fn builder() -> crate::types::builders::S3AccessPointVpcConfigurationBuilder {
        crate::types::builders::S3AccessPointVpcConfigurationBuilder::default()
    }
}

/// A builder for [`S3AccessPointVpcConfiguration`](crate::types::S3AccessPointVpcConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct S3AccessPointVpcConfigurationBuilder {
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
}
impl S3AccessPointVpcConfigurationBuilder {
    /// <p>Specifies the virtual private cloud (VPC) for the S3 access point VPC configuration, if one exists.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the virtual private cloud (VPC) for the S3 access point VPC configuration, if one exists.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>Specifies the virtual private cloud (VPC) for the S3 access point VPC configuration, if one exists.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// Consumes the builder and constructs a [`S3AccessPointVpcConfiguration`](crate::types::S3AccessPointVpcConfiguration).
    pub fn build(self) -> crate::types::S3AccessPointVpcConfiguration {
        crate::types::S3AccessPointVpcConfiguration { vpc_id: self.vpc_id }
    }
}
