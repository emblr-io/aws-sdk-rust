// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Used to create an S3 access point that accepts requests only from a virtual private cloud (VPC) to restrict data access to a private network.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateAndAttachS3AccessPointS3Configuration {
    /// <p>If included, Amazon S3 restricts access to this S3 access point to requests made from the specified virtual private cloud (VPC).</p>
    pub vpc_configuration: ::std::option::Option<crate::types::S3AccessPointVpcConfiguration>,
    /// <p>Specifies an access policy to associate with the S3 access point configuration. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points-policies.html">Configuring IAM policies for using access points</a> in the Amazon Simple Storage Service User Guide.</p>
    pub policy: ::std::option::Option<::std::string::String>,
}
impl CreateAndAttachS3AccessPointS3Configuration {
    /// <p>If included, Amazon S3 restricts access to this S3 access point to requests made from the specified virtual private cloud (VPC).</p>
    pub fn vpc_configuration(&self) -> ::std::option::Option<&crate::types::S3AccessPointVpcConfiguration> {
        self.vpc_configuration.as_ref()
    }
    /// <p>Specifies an access policy to associate with the S3 access point configuration. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points-policies.html">Configuring IAM policies for using access points</a> in the Amazon Simple Storage Service User Guide.</p>
    pub fn policy(&self) -> ::std::option::Option<&str> {
        self.policy.as_deref()
    }
}
impl CreateAndAttachS3AccessPointS3Configuration {
    /// Creates a new builder-style object to manufacture [`CreateAndAttachS3AccessPointS3Configuration`](crate::types::CreateAndAttachS3AccessPointS3Configuration).
    pub fn builder() -> crate::types::builders::CreateAndAttachS3AccessPointS3ConfigurationBuilder {
        crate::types::builders::CreateAndAttachS3AccessPointS3ConfigurationBuilder::default()
    }
}

/// A builder for [`CreateAndAttachS3AccessPointS3Configuration`](crate::types::CreateAndAttachS3AccessPointS3Configuration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateAndAttachS3AccessPointS3ConfigurationBuilder {
    pub(crate) vpc_configuration: ::std::option::Option<crate::types::S3AccessPointVpcConfiguration>,
    pub(crate) policy: ::std::option::Option<::std::string::String>,
}
impl CreateAndAttachS3AccessPointS3ConfigurationBuilder {
    /// <p>If included, Amazon S3 restricts access to this S3 access point to requests made from the specified virtual private cloud (VPC).</p>
    pub fn vpc_configuration(mut self, input: crate::types::S3AccessPointVpcConfiguration) -> Self {
        self.vpc_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>If included, Amazon S3 restricts access to this S3 access point to requests made from the specified virtual private cloud (VPC).</p>
    pub fn set_vpc_configuration(mut self, input: ::std::option::Option<crate::types::S3AccessPointVpcConfiguration>) -> Self {
        self.vpc_configuration = input;
        self
    }
    /// <p>If included, Amazon S3 restricts access to this S3 access point to requests made from the specified virtual private cloud (VPC).</p>
    pub fn get_vpc_configuration(&self) -> &::std::option::Option<crate::types::S3AccessPointVpcConfiguration> {
        &self.vpc_configuration
    }
    /// <p>Specifies an access policy to associate with the S3 access point configuration. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points-policies.html">Configuring IAM policies for using access points</a> in the Amazon Simple Storage Service User Guide.</p>
    pub fn policy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies an access policy to associate with the S3 access point configuration. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points-policies.html">Configuring IAM policies for using access points</a> in the Amazon Simple Storage Service User Guide.</p>
    pub fn set_policy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy = input;
        self
    }
    /// <p>Specifies an access policy to associate with the S3 access point configuration. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points-policies.html">Configuring IAM policies for using access points</a> in the Amazon Simple Storage Service User Guide.</p>
    pub fn get_policy(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy
    }
    /// Consumes the builder and constructs a [`CreateAndAttachS3AccessPointS3Configuration`](crate::types::CreateAndAttachS3AccessPointS3Configuration).
    pub fn build(self) -> crate::types::CreateAndAttachS3AccessPointS3Configuration {
        crate::types::CreateAndAttachS3AccessPointS3Configuration {
            vpc_configuration: self.vpc_configuration,
            policy: self.policy,
        }
    }
}
