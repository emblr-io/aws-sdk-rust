// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the file system user identity that will be used for authorizing all file access requests that are made using the S3 access point.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OpenZfsFileSystemIdentity {
    /// <p>Specifies the FSx for OpenZFS user identity type, accepts only <code>POSIX</code>.</p>
    pub r#type: ::std::option::Option<crate::types::OpenZfsFileSystemUserType>,
    /// <p>Specifies the UID and GIDs of the file system POSIX user.</p>
    pub posix_user: ::std::option::Option<crate::types::OpenZfsPosixFileSystemUser>,
}
impl OpenZfsFileSystemIdentity {
    /// <p>Specifies the FSx for OpenZFS user identity type, accepts only <code>POSIX</code>.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::OpenZfsFileSystemUserType> {
        self.r#type.as_ref()
    }
    /// <p>Specifies the UID and GIDs of the file system POSIX user.</p>
    pub fn posix_user(&self) -> ::std::option::Option<&crate::types::OpenZfsPosixFileSystemUser> {
        self.posix_user.as_ref()
    }
}
impl OpenZfsFileSystemIdentity {
    /// Creates a new builder-style object to manufacture [`OpenZfsFileSystemIdentity`](crate::types::OpenZfsFileSystemIdentity).
    pub fn builder() -> crate::types::builders::OpenZfsFileSystemIdentityBuilder {
        crate::types::builders::OpenZfsFileSystemIdentityBuilder::default()
    }
}

/// A builder for [`OpenZfsFileSystemIdentity`](crate::types::OpenZfsFileSystemIdentity).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OpenZfsFileSystemIdentityBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::OpenZfsFileSystemUserType>,
    pub(crate) posix_user: ::std::option::Option<crate::types::OpenZfsPosixFileSystemUser>,
}
impl OpenZfsFileSystemIdentityBuilder {
    /// <p>Specifies the FSx for OpenZFS user identity type, accepts only <code>POSIX</code>.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::OpenZfsFileSystemUserType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the FSx for OpenZFS user identity type, accepts only <code>POSIX</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::OpenZfsFileSystemUserType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Specifies the FSx for OpenZFS user identity type, accepts only <code>POSIX</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::OpenZfsFileSystemUserType> {
        &self.r#type
    }
    /// <p>Specifies the UID and GIDs of the file system POSIX user.</p>
    pub fn posix_user(mut self, input: crate::types::OpenZfsPosixFileSystemUser) -> Self {
        self.posix_user = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the UID and GIDs of the file system POSIX user.</p>
    pub fn set_posix_user(mut self, input: ::std::option::Option<crate::types::OpenZfsPosixFileSystemUser>) -> Self {
        self.posix_user = input;
        self
    }
    /// <p>Specifies the UID and GIDs of the file system POSIX user.</p>
    pub fn get_posix_user(&self) -> &::std::option::Option<crate::types::OpenZfsPosixFileSystemUser> {
        &self.posix_user
    }
    /// Consumes the builder and constructs a [`OpenZfsFileSystemIdentity`](crate::types::OpenZfsFileSystemIdentity).
    pub fn build(self) -> crate::types::OpenZfsFileSystemIdentity {
        crate::types::OpenZfsFileSystemIdentity {
            r#type: self.r#type,
            posix_user: self.posix_user,
        }
    }
}
