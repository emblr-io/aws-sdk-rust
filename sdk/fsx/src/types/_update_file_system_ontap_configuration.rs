// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration updates for an Amazon FSx for NetApp ONTAP file system.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateFileSystemOntapConfiguration {
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>30</code>.</p>
    pub automatic_backup_retention_days: ::std::option::Option<i32>,
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily.</p>
    pub daily_automatic_backup_start_time: ::std::option::Option<::std::string::String>,
    /// <p>Update the password for the <code>fsxadmin</code> user by entering a new password. You use the <code>fsxadmin</code> user to access the NetApp ONTAP CLI and REST API to manage your file system resources. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-resources-ontap-apps.html">Managing resources using NetApp Application</a>.</p>
    pub fsx_admin_password: ::std::option::Option<::std::string::String>,
    /// <p>The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone, where d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.</p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    pub weekly_maintenance_start_time: ::std::option::Option<::std::string::String>,
    /// <p>The SSD IOPS (input output operations per second) configuration for an Amazon FSx for NetApp ONTAP file system. The default is 3 IOPS per GB of storage capacity, but you can provision additional IOPS per GB of storage. The configuration consists of an IOPS mode (<code>AUTOMATIC</code> or <code>USER_PROVISIONED</code>), and in the case of <code>USER_PROVISIONED</code> IOPS, the total number of SSD IOPS provisioned. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/increase-primary-storage.html">Updating SSD storage capacity and IOPS</a>.</p>
    pub disk_iops_configuration: ::std::option::Option<crate::types::DiskIopsConfiguration>,
    /// <p>Enter a new value to change the amount of throughput capacity for the file system in megabytes per second (MBps). For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-throughput-capacity.html">Managing throughput capacity</a> in the FSx for ONTAP User Guide.</p>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> and <code>ThroughputCapacityPerHAPair</code> are not the same value.</p></li>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> when divided by the value of <code>HAPairs</code> is outside of the valid range for <code>ThroughputCapacity</code>.</p></li>
    /// </ul>
    pub throughput_capacity: ::std::option::Option<i32>,
    /// <p>(Multi-AZ only) A list of IDs of new virtual private cloud (VPC) route tables to associate (add) with your Amazon FSx for NetApp ONTAP file system.</p>
    pub add_route_table_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>(Multi-AZ only) A list of IDs of existing virtual private cloud (VPC) route tables to disassociate (remove) from your Amazon FSx for NetApp ONTAP file system. You can use the API operation to retrieve the list of VPC route table IDs for a file system.</p>
    pub remove_route_table_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Use to choose the throughput capacity per HA pair, rather than the total throughput for the file system.</p>
    /// <p>This field and <code>ThroughputCapacity</code> cannot be defined in the same API call, but one is required.</p>
    /// <p>This field and <code>ThroughputCapacity</code> are the same for file systems with one HA pair.</p>
    /// <ul>
    /// <li>
    /// <p>For <code>SINGLE_AZ_1</code> and <code>MULTI_AZ_1</code> file systems, valid values are 128, 256, 512, 1024, 2048, or 4096 MBps.</p></li>
    /// <li>
    /// <p>For <code>SINGLE_AZ_2</code>, valid values are 1536, 3072, or 6144 MBps.</p></li>
    /// <li>
    /// <p>For <code>MULTI_AZ_2</code>, valid values are 384, 768, 1536, 3072, or 6144 MBps.</p></li>
    /// </ul>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> and <code>ThroughputCapacityPerHAPair</code> are not the same value for file systems with one HA pair.</p></li>
    /// <li>
    /// <p>The value of deployment type is <code>SINGLE_AZ_2</code> and <code>ThroughputCapacity</code> / <code>ThroughputCapacityPerHAPair</code> is not a valid HA pair (a value between 1 and 12).</p></li>
    /// <li>
    /// <p>The value of <code>ThroughputCapacityPerHAPair</code> is not a valid value.</p></li>
    /// </ul>
    pub throughput_capacity_per_ha_pair: ::std::option::Option<i32>,
    /// <p>Use to update the number of high-availability (HA) pairs for a second-generation single-AZ file system. If you increase the number of HA pairs for your file system, you must specify proportional increases for <code>StorageCapacity</code>, <code>Iops</code>, and <code>ThroughputCapacity</code>. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/administering-file-systems.html#HA-pairs">High-availability (HA) pairs</a> in the FSx for ONTAP user guide. Block storage protocol support (iSCSI and NVMe over TCP) is disabled on file systems with more than 6 HA pairs. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/supported-fsx-clients.html#using-block-storage">Using block storage protocols</a>.</p>
    pub ha_pairs: ::std::option::Option<i32>,
}
impl UpdateFileSystemOntapConfiguration {
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>30</code>.</p>
    pub fn automatic_backup_retention_days(&self) -> ::std::option::Option<i32> {
        self.automatic_backup_retention_days
    }
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily.</p>
    pub fn daily_automatic_backup_start_time(&self) -> ::std::option::Option<&str> {
        self.daily_automatic_backup_start_time.as_deref()
    }
    /// <p>Update the password for the <code>fsxadmin</code> user by entering a new password. You use the <code>fsxadmin</code> user to access the NetApp ONTAP CLI and REST API to manage your file system resources. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-resources-ontap-apps.html">Managing resources using NetApp Application</a>.</p>
    pub fn fsx_admin_password(&self) -> ::std::option::Option<&str> {
        self.fsx_admin_password.as_deref()
    }
    /// <p>The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone, where d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.</p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    pub fn weekly_maintenance_start_time(&self) -> ::std::option::Option<&str> {
        self.weekly_maintenance_start_time.as_deref()
    }
    /// <p>The SSD IOPS (input output operations per second) configuration for an Amazon FSx for NetApp ONTAP file system. The default is 3 IOPS per GB of storage capacity, but you can provision additional IOPS per GB of storage. The configuration consists of an IOPS mode (<code>AUTOMATIC</code> or <code>USER_PROVISIONED</code>), and in the case of <code>USER_PROVISIONED</code> IOPS, the total number of SSD IOPS provisioned. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/increase-primary-storage.html">Updating SSD storage capacity and IOPS</a>.</p>
    pub fn disk_iops_configuration(&self) -> ::std::option::Option<&crate::types::DiskIopsConfiguration> {
        self.disk_iops_configuration.as_ref()
    }
    /// <p>Enter a new value to change the amount of throughput capacity for the file system in megabytes per second (MBps). For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-throughput-capacity.html">Managing throughput capacity</a> in the FSx for ONTAP User Guide.</p>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> and <code>ThroughputCapacityPerHAPair</code> are not the same value.</p></li>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> when divided by the value of <code>HAPairs</code> is outside of the valid range for <code>ThroughputCapacity</code>.</p></li>
    /// </ul>
    pub fn throughput_capacity(&self) -> ::std::option::Option<i32> {
        self.throughput_capacity
    }
    /// <p>(Multi-AZ only) A list of IDs of new virtual private cloud (VPC) route tables to associate (add) with your Amazon FSx for NetApp ONTAP file system.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.add_route_table_ids.is_none()`.
    pub fn add_route_table_ids(&self) -> &[::std::string::String] {
        self.add_route_table_ids.as_deref().unwrap_or_default()
    }
    /// <p>(Multi-AZ only) A list of IDs of existing virtual private cloud (VPC) route tables to disassociate (remove) from your Amazon FSx for NetApp ONTAP file system. You can use the API operation to retrieve the list of VPC route table IDs for a file system.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.remove_route_table_ids.is_none()`.
    pub fn remove_route_table_ids(&self) -> &[::std::string::String] {
        self.remove_route_table_ids.as_deref().unwrap_or_default()
    }
    /// <p>Use to choose the throughput capacity per HA pair, rather than the total throughput for the file system.</p>
    /// <p>This field and <code>ThroughputCapacity</code> cannot be defined in the same API call, but one is required.</p>
    /// <p>This field and <code>ThroughputCapacity</code> are the same for file systems with one HA pair.</p>
    /// <ul>
    /// <li>
    /// <p>For <code>SINGLE_AZ_1</code> and <code>MULTI_AZ_1</code> file systems, valid values are 128, 256, 512, 1024, 2048, or 4096 MBps.</p></li>
    /// <li>
    /// <p>For <code>SINGLE_AZ_2</code>, valid values are 1536, 3072, or 6144 MBps.</p></li>
    /// <li>
    /// <p>For <code>MULTI_AZ_2</code>, valid values are 384, 768, 1536, 3072, or 6144 MBps.</p></li>
    /// </ul>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> and <code>ThroughputCapacityPerHAPair</code> are not the same value for file systems with one HA pair.</p></li>
    /// <li>
    /// <p>The value of deployment type is <code>SINGLE_AZ_2</code> and <code>ThroughputCapacity</code> / <code>ThroughputCapacityPerHAPair</code> is not a valid HA pair (a value between 1 and 12).</p></li>
    /// <li>
    /// <p>The value of <code>ThroughputCapacityPerHAPair</code> is not a valid value.</p></li>
    /// </ul>
    pub fn throughput_capacity_per_ha_pair(&self) -> ::std::option::Option<i32> {
        self.throughput_capacity_per_ha_pair
    }
    /// <p>Use to update the number of high-availability (HA) pairs for a second-generation single-AZ file system. If you increase the number of HA pairs for your file system, you must specify proportional increases for <code>StorageCapacity</code>, <code>Iops</code>, and <code>ThroughputCapacity</code>. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/administering-file-systems.html#HA-pairs">High-availability (HA) pairs</a> in the FSx for ONTAP user guide. Block storage protocol support (iSCSI and NVMe over TCP) is disabled on file systems with more than 6 HA pairs. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/supported-fsx-clients.html#using-block-storage">Using block storage protocols</a>.</p>
    pub fn ha_pairs(&self) -> ::std::option::Option<i32> {
        self.ha_pairs
    }
}
impl ::std::fmt::Debug for UpdateFileSystemOntapConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateFileSystemOntapConfiguration");
        formatter.field("automatic_backup_retention_days", &self.automatic_backup_retention_days);
        formatter.field("daily_automatic_backup_start_time", &self.daily_automatic_backup_start_time);
        formatter.field("fsx_admin_password", &"*** Sensitive Data Redacted ***");
        formatter.field("weekly_maintenance_start_time", &self.weekly_maintenance_start_time);
        formatter.field("disk_iops_configuration", &self.disk_iops_configuration);
        formatter.field("throughput_capacity", &self.throughput_capacity);
        formatter.field("add_route_table_ids", &self.add_route_table_ids);
        formatter.field("remove_route_table_ids", &self.remove_route_table_ids);
        formatter.field("throughput_capacity_per_ha_pair", &self.throughput_capacity_per_ha_pair);
        formatter.field("ha_pairs", &self.ha_pairs);
        formatter.finish()
    }
}
impl UpdateFileSystemOntapConfiguration {
    /// Creates a new builder-style object to manufacture [`UpdateFileSystemOntapConfiguration`](crate::types::UpdateFileSystemOntapConfiguration).
    pub fn builder() -> crate::types::builders::UpdateFileSystemOntapConfigurationBuilder {
        crate::types::builders::UpdateFileSystemOntapConfigurationBuilder::default()
    }
}

/// A builder for [`UpdateFileSystemOntapConfiguration`](crate::types::UpdateFileSystemOntapConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateFileSystemOntapConfigurationBuilder {
    pub(crate) automatic_backup_retention_days: ::std::option::Option<i32>,
    pub(crate) daily_automatic_backup_start_time: ::std::option::Option<::std::string::String>,
    pub(crate) fsx_admin_password: ::std::option::Option<::std::string::String>,
    pub(crate) weekly_maintenance_start_time: ::std::option::Option<::std::string::String>,
    pub(crate) disk_iops_configuration: ::std::option::Option<crate::types::DiskIopsConfiguration>,
    pub(crate) throughput_capacity: ::std::option::Option<i32>,
    pub(crate) add_route_table_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) remove_route_table_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) throughput_capacity_per_ha_pair: ::std::option::Option<i32>,
    pub(crate) ha_pairs: ::std::option::Option<i32>,
}
impl UpdateFileSystemOntapConfigurationBuilder {
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>30</code>.</p>
    pub fn automatic_backup_retention_days(mut self, input: i32) -> Self {
        self.automatic_backup_retention_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>30</code>.</p>
    pub fn set_automatic_backup_retention_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.automatic_backup_retention_days = input;
        self
    }
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>30</code>.</p>
    pub fn get_automatic_backup_retention_days(&self) -> &::std::option::Option<i32> {
        &self.automatic_backup_retention_days
    }
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily.</p>
    pub fn daily_automatic_backup_start_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.daily_automatic_backup_start_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily.</p>
    pub fn set_daily_automatic_backup_start_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.daily_automatic_backup_start_time = input;
        self
    }
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily.</p>
    pub fn get_daily_automatic_backup_start_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.daily_automatic_backup_start_time
    }
    /// <p>Update the password for the <code>fsxadmin</code> user by entering a new password. You use the <code>fsxadmin</code> user to access the NetApp ONTAP CLI and REST API to manage your file system resources. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-resources-ontap-apps.html">Managing resources using NetApp Application</a>.</p>
    pub fn fsx_admin_password(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fsx_admin_password = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Update the password for the <code>fsxadmin</code> user by entering a new password. You use the <code>fsxadmin</code> user to access the NetApp ONTAP CLI and REST API to manage your file system resources. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-resources-ontap-apps.html">Managing resources using NetApp Application</a>.</p>
    pub fn set_fsx_admin_password(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fsx_admin_password = input;
        self
    }
    /// <p>Update the password for the <code>fsxadmin</code> user by entering a new password. You use the <code>fsxadmin</code> user to access the NetApp ONTAP CLI and REST API to manage your file system resources. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-resources-ontap-apps.html">Managing resources using NetApp Application</a>.</p>
    pub fn get_fsx_admin_password(&self) -> &::std::option::Option<::std::string::String> {
        &self.fsx_admin_password
    }
    /// <p>The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone, where d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.</p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    pub fn weekly_maintenance_start_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.weekly_maintenance_start_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone, where d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.</p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    pub fn set_weekly_maintenance_start_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.weekly_maintenance_start_time = input;
        self
    }
    /// <p>The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone, where d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.</p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    pub fn get_weekly_maintenance_start_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.weekly_maintenance_start_time
    }
    /// <p>The SSD IOPS (input output operations per second) configuration for an Amazon FSx for NetApp ONTAP file system. The default is 3 IOPS per GB of storage capacity, but you can provision additional IOPS per GB of storage. The configuration consists of an IOPS mode (<code>AUTOMATIC</code> or <code>USER_PROVISIONED</code>), and in the case of <code>USER_PROVISIONED</code> IOPS, the total number of SSD IOPS provisioned. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/increase-primary-storage.html">Updating SSD storage capacity and IOPS</a>.</p>
    pub fn disk_iops_configuration(mut self, input: crate::types::DiskIopsConfiguration) -> Self {
        self.disk_iops_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The SSD IOPS (input output operations per second) configuration for an Amazon FSx for NetApp ONTAP file system. The default is 3 IOPS per GB of storage capacity, but you can provision additional IOPS per GB of storage. The configuration consists of an IOPS mode (<code>AUTOMATIC</code> or <code>USER_PROVISIONED</code>), and in the case of <code>USER_PROVISIONED</code> IOPS, the total number of SSD IOPS provisioned. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/increase-primary-storage.html">Updating SSD storage capacity and IOPS</a>.</p>
    pub fn set_disk_iops_configuration(mut self, input: ::std::option::Option<crate::types::DiskIopsConfiguration>) -> Self {
        self.disk_iops_configuration = input;
        self
    }
    /// <p>The SSD IOPS (input output operations per second) configuration for an Amazon FSx for NetApp ONTAP file system. The default is 3 IOPS per GB of storage capacity, but you can provision additional IOPS per GB of storage. The configuration consists of an IOPS mode (<code>AUTOMATIC</code> or <code>USER_PROVISIONED</code>), and in the case of <code>USER_PROVISIONED</code> IOPS, the total number of SSD IOPS provisioned. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/increase-primary-storage.html">Updating SSD storage capacity and IOPS</a>.</p>
    pub fn get_disk_iops_configuration(&self) -> &::std::option::Option<crate::types::DiskIopsConfiguration> {
        &self.disk_iops_configuration
    }
    /// <p>Enter a new value to change the amount of throughput capacity for the file system in megabytes per second (MBps). For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-throughput-capacity.html">Managing throughput capacity</a> in the FSx for ONTAP User Guide.</p>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> and <code>ThroughputCapacityPerHAPair</code> are not the same value.</p></li>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> when divided by the value of <code>HAPairs</code> is outside of the valid range for <code>ThroughputCapacity</code>.</p></li>
    /// </ul>
    pub fn throughput_capacity(mut self, input: i32) -> Self {
        self.throughput_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enter a new value to change the amount of throughput capacity for the file system in megabytes per second (MBps). For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-throughput-capacity.html">Managing throughput capacity</a> in the FSx for ONTAP User Guide.</p>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> and <code>ThroughputCapacityPerHAPair</code> are not the same value.</p></li>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> when divided by the value of <code>HAPairs</code> is outside of the valid range for <code>ThroughputCapacity</code>.</p></li>
    /// </ul>
    pub fn set_throughput_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.throughput_capacity = input;
        self
    }
    /// <p>Enter a new value to change the amount of throughput capacity for the file system in megabytes per second (MBps). For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-throughput-capacity.html">Managing throughput capacity</a> in the FSx for ONTAP User Guide.</p>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> and <code>ThroughputCapacityPerHAPair</code> are not the same value.</p></li>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> when divided by the value of <code>HAPairs</code> is outside of the valid range for <code>ThroughputCapacity</code>.</p></li>
    /// </ul>
    pub fn get_throughput_capacity(&self) -> &::std::option::Option<i32> {
        &self.throughput_capacity
    }
    /// Appends an item to `add_route_table_ids`.
    ///
    /// To override the contents of this collection use [`set_add_route_table_ids`](Self::set_add_route_table_ids).
    ///
    /// <p>(Multi-AZ only) A list of IDs of new virtual private cloud (VPC) route tables to associate (add) with your Amazon FSx for NetApp ONTAP file system.</p>
    pub fn add_route_table_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.add_route_table_ids.unwrap_or_default();
        v.push(input.into());
        self.add_route_table_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>(Multi-AZ only) A list of IDs of new virtual private cloud (VPC) route tables to associate (add) with your Amazon FSx for NetApp ONTAP file system.</p>
    pub fn set_add_route_table_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.add_route_table_ids = input;
        self
    }
    /// <p>(Multi-AZ only) A list of IDs of new virtual private cloud (VPC) route tables to associate (add) with your Amazon FSx for NetApp ONTAP file system.</p>
    pub fn get_add_route_table_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.add_route_table_ids
    }
    /// Appends an item to `remove_route_table_ids`.
    ///
    /// To override the contents of this collection use [`set_remove_route_table_ids`](Self::set_remove_route_table_ids).
    ///
    /// <p>(Multi-AZ only) A list of IDs of existing virtual private cloud (VPC) route tables to disassociate (remove) from your Amazon FSx for NetApp ONTAP file system. You can use the API operation to retrieve the list of VPC route table IDs for a file system.</p>
    pub fn remove_route_table_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.remove_route_table_ids.unwrap_or_default();
        v.push(input.into());
        self.remove_route_table_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>(Multi-AZ only) A list of IDs of existing virtual private cloud (VPC) route tables to disassociate (remove) from your Amazon FSx for NetApp ONTAP file system. You can use the API operation to retrieve the list of VPC route table IDs for a file system.</p>
    pub fn set_remove_route_table_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.remove_route_table_ids = input;
        self
    }
    /// <p>(Multi-AZ only) A list of IDs of existing virtual private cloud (VPC) route tables to disassociate (remove) from your Amazon FSx for NetApp ONTAP file system. You can use the API operation to retrieve the list of VPC route table IDs for a file system.</p>
    pub fn get_remove_route_table_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.remove_route_table_ids
    }
    /// <p>Use to choose the throughput capacity per HA pair, rather than the total throughput for the file system.</p>
    /// <p>This field and <code>ThroughputCapacity</code> cannot be defined in the same API call, but one is required.</p>
    /// <p>This field and <code>ThroughputCapacity</code> are the same for file systems with one HA pair.</p>
    /// <ul>
    /// <li>
    /// <p>For <code>SINGLE_AZ_1</code> and <code>MULTI_AZ_1</code> file systems, valid values are 128, 256, 512, 1024, 2048, or 4096 MBps.</p></li>
    /// <li>
    /// <p>For <code>SINGLE_AZ_2</code>, valid values are 1536, 3072, or 6144 MBps.</p></li>
    /// <li>
    /// <p>For <code>MULTI_AZ_2</code>, valid values are 384, 768, 1536, 3072, or 6144 MBps.</p></li>
    /// </ul>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> and <code>ThroughputCapacityPerHAPair</code> are not the same value for file systems with one HA pair.</p></li>
    /// <li>
    /// <p>The value of deployment type is <code>SINGLE_AZ_2</code> and <code>ThroughputCapacity</code> / <code>ThroughputCapacityPerHAPair</code> is not a valid HA pair (a value between 1 and 12).</p></li>
    /// <li>
    /// <p>The value of <code>ThroughputCapacityPerHAPair</code> is not a valid value.</p></li>
    /// </ul>
    pub fn throughput_capacity_per_ha_pair(mut self, input: i32) -> Self {
        self.throughput_capacity_per_ha_pair = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use to choose the throughput capacity per HA pair, rather than the total throughput for the file system.</p>
    /// <p>This field and <code>ThroughputCapacity</code> cannot be defined in the same API call, but one is required.</p>
    /// <p>This field and <code>ThroughputCapacity</code> are the same for file systems with one HA pair.</p>
    /// <ul>
    /// <li>
    /// <p>For <code>SINGLE_AZ_1</code> and <code>MULTI_AZ_1</code> file systems, valid values are 128, 256, 512, 1024, 2048, or 4096 MBps.</p></li>
    /// <li>
    /// <p>For <code>SINGLE_AZ_2</code>, valid values are 1536, 3072, or 6144 MBps.</p></li>
    /// <li>
    /// <p>For <code>MULTI_AZ_2</code>, valid values are 384, 768, 1536, 3072, or 6144 MBps.</p></li>
    /// </ul>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> and <code>ThroughputCapacityPerHAPair</code> are not the same value for file systems with one HA pair.</p></li>
    /// <li>
    /// <p>The value of deployment type is <code>SINGLE_AZ_2</code> and <code>ThroughputCapacity</code> / <code>ThroughputCapacityPerHAPair</code> is not a valid HA pair (a value between 1 and 12).</p></li>
    /// <li>
    /// <p>The value of <code>ThroughputCapacityPerHAPair</code> is not a valid value.</p></li>
    /// </ul>
    pub fn set_throughput_capacity_per_ha_pair(mut self, input: ::std::option::Option<i32>) -> Self {
        self.throughput_capacity_per_ha_pair = input;
        self
    }
    /// <p>Use to choose the throughput capacity per HA pair, rather than the total throughput for the file system.</p>
    /// <p>This field and <code>ThroughputCapacity</code> cannot be defined in the same API call, but one is required.</p>
    /// <p>This field and <code>ThroughputCapacity</code> are the same for file systems with one HA pair.</p>
    /// <ul>
    /// <li>
    /// <p>For <code>SINGLE_AZ_1</code> and <code>MULTI_AZ_1</code> file systems, valid values are 128, 256, 512, 1024, 2048, or 4096 MBps.</p></li>
    /// <li>
    /// <p>For <code>SINGLE_AZ_2</code>, valid values are 1536, 3072, or 6144 MBps.</p></li>
    /// <li>
    /// <p>For <code>MULTI_AZ_2</code>, valid values are 384, 768, 1536, 3072, or 6144 MBps.</p></li>
    /// </ul>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> and <code>ThroughputCapacityPerHAPair</code> are not the same value for file systems with one HA pair.</p></li>
    /// <li>
    /// <p>The value of deployment type is <code>SINGLE_AZ_2</code> and <code>ThroughputCapacity</code> / <code>ThroughputCapacityPerHAPair</code> is not a valid HA pair (a value between 1 and 12).</p></li>
    /// <li>
    /// <p>The value of <code>ThroughputCapacityPerHAPair</code> is not a valid value.</p></li>
    /// </ul>
    pub fn get_throughput_capacity_per_ha_pair(&self) -> &::std::option::Option<i32> {
        &self.throughput_capacity_per_ha_pair
    }
    /// <p>Use to update the number of high-availability (HA) pairs for a second-generation single-AZ file system. If you increase the number of HA pairs for your file system, you must specify proportional increases for <code>StorageCapacity</code>, <code>Iops</code>, and <code>ThroughputCapacity</code>. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/administering-file-systems.html#HA-pairs">High-availability (HA) pairs</a> in the FSx for ONTAP user guide. Block storage protocol support (iSCSI and NVMe over TCP) is disabled on file systems with more than 6 HA pairs. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/supported-fsx-clients.html#using-block-storage">Using block storage protocols</a>.</p>
    pub fn ha_pairs(mut self, input: i32) -> Self {
        self.ha_pairs = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use to update the number of high-availability (HA) pairs for a second-generation single-AZ file system. If you increase the number of HA pairs for your file system, you must specify proportional increases for <code>StorageCapacity</code>, <code>Iops</code>, and <code>ThroughputCapacity</code>. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/administering-file-systems.html#HA-pairs">High-availability (HA) pairs</a> in the FSx for ONTAP user guide. Block storage protocol support (iSCSI and NVMe over TCP) is disabled on file systems with more than 6 HA pairs. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/supported-fsx-clients.html#using-block-storage">Using block storage protocols</a>.</p>
    pub fn set_ha_pairs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.ha_pairs = input;
        self
    }
    /// <p>Use to update the number of high-availability (HA) pairs for a second-generation single-AZ file system. If you increase the number of HA pairs for your file system, you must specify proportional increases for <code>StorageCapacity</code>, <code>Iops</code>, and <code>ThroughputCapacity</code>. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/administering-file-systems.html#HA-pairs">High-availability (HA) pairs</a> in the FSx for ONTAP user guide. Block storage protocol support (iSCSI and NVMe over TCP) is disabled on file systems with more than 6 HA pairs. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/supported-fsx-clients.html#using-block-storage">Using block storage protocols</a>.</p>
    pub fn get_ha_pairs(&self) -> &::std::option::Option<i32> {
        &self.ha_pairs
    }
    /// Consumes the builder and constructs a [`UpdateFileSystemOntapConfiguration`](crate::types::UpdateFileSystemOntapConfiguration).
    pub fn build(self) -> crate::types::UpdateFileSystemOntapConfiguration {
        crate::types::UpdateFileSystemOntapConfiguration {
            automatic_backup_retention_days: self.automatic_backup_retention_days,
            daily_automatic_backup_start_time: self.daily_automatic_backup_start_time,
            fsx_admin_password: self.fsx_admin_password,
            weekly_maintenance_start_time: self.weekly_maintenance_start_time,
            disk_iops_configuration: self.disk_iops_configuration,
            throughput_capacity: self.throughput_capacity,
            add_route_table_ids: self.add_route_table_ids,
            remove_route_table_ids: self.remove_route_table_ids,
            throughput_capacity_per_ha_pair: self.throughput_capacity_per_ha_pair,
            ha_pairs: self.ha_pairs,
        }
    }
}
impl ::std::fmt::Debug for UpdateFileSystemOntapConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateFileSystemOntapConfigurationBuilder");
        formatter.field("automatic_backup_retention_days", &self.automatic_backup_retention_days);
        formatter.field("daily_automatic_backup_start_time", &self.daily_automatic_backup_start_time);
        formatter.field("fsx_admin_password", &"*** Sensitive Data Redacted ***");
        formatter.field("weekly_maintenance_start_time", &self.weekly_maintenance_start_time);
        formatter.field("disk_iops_configuration", &self.disk_iops_configuration);
        formatter.field("throughput_capacity", &self.throughput_capacity);
        formatter.field("add_route_table_ids", &self.add_route_table_ids);
        formatter.field("remove_route_table_ids", &self.remove_route_table_ids);
        formatter.field("throughput_capacity_per_ha_pair", &self.throughput_capacity_per_ha_pair);
        formatter.field("ha_pairs", &self.ha_pairs);
        formatter.finish()
    }
}
