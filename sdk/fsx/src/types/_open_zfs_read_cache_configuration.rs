// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for the optional provisioned SSD read cache on Amazon FSx for OpenZFS file systems that use the Intelligent-Tiering storage class.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OpenZfsReadCacheConfiguration {
    /// <p>Specifies how the provisioned SSD read cache is sized, as follows:</p>
    /// <ul>
    /// <li>
    /// <p>Set to <code>NO_CACHE</code> if you do not want to use an SSD read cache with your Intelligent-Tiering file system.</p></li>
    /// <li>
    /// <p>Set to <code>USER_PROVISIONED</code> to specify the exact size of your SSD read cache.</p></li>
    /// <li>
    /// <p>Set to <code>PROPORTIONAL_TO_THROUGHPUT_CAPACITY</code> to have your SSD read cache automatically sized based on your throughput capacity.</p></li>
    /// </ul>
    pub sizing_mode: ::std::option::Option<crate::types::OpenZfsReadCacheSizingMode>,
    /// <p>Required if <code>SizingMode</code> is set to <code>USER_PROVISIONED</code>. Specifies the size of the file system's SSD read cache, in gibibytes (GiB).</p>
    pub size_gib: ::std::option::Option<i32>,
}
impl OpenZfsReadCacheConfiguration {
    /// <p>Specifies how the provisioned SSD read cache is sized, as follows:</p>
    /// <ul>
    /// <li>
    /// <p>Set to <code>NO_CACHE</code> if you do not want to use an SSD read cache with your Intelligent-Tiering file system.</p></li>
    /// <li>
    /// <p>Set to <code>USER_PROVISIONED</code> to specify the exact size of your SSD read cache.</p></li>
    /// <li>
    /// <p>Set to <code>PROPORTIONAL_TO_THROUGHPUT_CAPACITY</code> to have your SSD read cache automatically sized based on your throughput capacity.</p></li>
    /// </ul>
    pub fn sizing_mode(&self) -> ::std::option::Option<&crate::types::OpenZfsReadCacheSizingMode> {
        self.sizing_mode.as_ref()
    }
    /// <p>Required if <code>SizingMode</code> is set to <code>USER_PROVISIONED</code>. Specifies the size of the file system's SSD read cache, in gibibytes (GiB).</p>
    pub fn size_gib(&self) -> ::std::option::Option<i32> {
        self.size_gib
    }
}
impl OpenZfsReadCacheConfiguration {
    /// Creates a new builder-style object to manufacture [`OpenZfsReadCacheConfiguration`](crate::types::OpenZfsReadCacheConfiguration).
    pub fn builder() -> crate::types::builders::OpenZfsReadCacheConfigurationBuilder {
        crate::types::builders::OpenZfsReadCacheConfigurationBuilder::default()
    }
}

/// A builder for [`OpenZfsReadCacheConfiguration`](crate::types::OpenZfsReadCacheConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OpenZfsReadCacheConfigurationBuilder {
    pub(crate) sizing_mode: ::std::option::Option<crate::types::OpenZfsReadCacheSizingMode>,
    pub(crate) size_gib: ::std::option::Option<i32>,
}
impl OpenZfsReadCacheConfigurationBuilder {
    /// <p>Specifies how the provisioned SSD read cache is sized, as follows:</p>
    /// <ul>
    /// <li>
    /// <p>Set to <code>NO_CACHE</code> if you do not want to use an SSD read cache with your Intelligent-Tiering file system.</p></li>
    /// <li>
    /// <p>Set to <code>USER_PROVISIONED</code> to specify the exact size of your SSD read cache.</p></li>
    /// <li>
    /// <p>Set to <code>PROPORTIONAL_TO_THROUGHPUT_CAPACITY</code> to have your SSD read cache automatically sized based on your throughput capacity.</p></li>
    /// </ul>
    pub fn sizing_mode(mut self, input: crate::types::OpenZfsReadCacheSizingMode) -> Self {
        self.sizing_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies how the provisioned SSD read cache is sized, as follows:</p>
    /// <ul>
    /// <li>
    /// <p>Set to <code>NO_CACHE</code> if you do not want to use an SSD read cache with your Intelligent-Tiering file system.</p></li>
    /// <li>
    /// <p>Set to <code>USER_PROVISIONED</code> to specify the exact size of your SSD read cache.</p></li>
    /// <li>
    /// <p>Set to <code>PROPORTIONAL_TO_THROUGHPUT_CAPACITY</code> to have your SSD read cache automatically sized based on your throughput capacity.</p></li>
    /// </ul>
    pub fn set_sizing_mode(mut self, input: ::std::option::Option<crate::types::OpenZfsReadCacheSizingMode>) -> Self {
        self.sizing_mode = input;
        self
    }
    /// <p>Specifies how the provisioned SSD read cache is sized, as follows:</p>
    /// <ul>
    /// <li>
    /// <p>Set to <code>NO_CACHE</code> if you do not want to use an SSD read cache with your Intelligent-Tiering file system.</p></li>
    /// <li>
    /// <p>Set to <code>USER_PROVISIONED</code> to specify the exact size of your SSD read cache.</p></li>
    /// <li>
    /// <p>Set to <code>PROPORTIONAL_TO_THROUGHPUT_CAPACITY</code> to have your SSD read cache automatically sized based on your throughput capacity.</p></li>
    /// </ul>
    pub fn get_sizing_mode(&self) -> &::std::option::Option<crate::types::OpenZfsReadCacheSizingMode> {
        &self.sizing_mode
    }
    /// <p>Required if <code>SizingMode</code> is set to <code>USER_PROVISIONED</code>. Specifies the size of the file system's SSD read cache, in gibibytes (GiB).</p>
    pub fn size_gib(mut self, input: i32) -> Self {
        self.size_gib = ::std::option::Option::Some(input);
        self
    }
    /// <p>Required if <code>SizingMode</code> is set to <code>USER_PROVISIONED</code>. Specifies the size of the file system's SSD read cache, in gibibytes (GiB).</p>
    pub fn set_size_gib(mut self, input: ::std::option::Option<i32>) -> Self {
        self.size_gib = input;
        self
    }
    /// <p>Required if <code>SizingMode</code> is set to <code>USER_PROVISIONED</code>. Specifies the size of the file system's SSD read cache, in gibibytes (GiB).</p>
    pub fn get_size_gib(&self) -> &::std::option::Option<i32> {
        &self.size_gib
    }
    /// Consumes the builder and constructs a [`OpenZfsReadCacheConfiguration`](crate::types::OpenZfsReadCacheConfiguration).
    pub fn build(self) -> crate::types::OpenZfsReadCacheConfiguration {
        crate::types::OpenZfsReadCacheConfiguration {
            sizing_mode: self.sizing_mode,
            size_gib: self.size_gib,
        }
    }
}
