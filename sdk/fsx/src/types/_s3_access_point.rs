// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the S3 access point configuration of the S3 access point attachment.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3AccessPoint {
    /// <p>he S3 access point's ARN.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The S3 access point's alias.</p>
    pub alias: ::std::option::Option<::std::string::String>,
    /// <p>The S3 access point's virtual private cloud (VPC) configuration.</p>
    pub vpc_configuration: ::std::option::Option<crate::types::S3AccessPointVpcConfiguration>,
}
impl S3AccessPoint {
    /// <p>he S3 access point's ARN.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The S3 access point's alias.</p>
    pub fn alias(&self) -> ::std::option::Option<&str> {
        self.alias.as_deref()
    }
    /// <p>The S3 access point's virtual private cloud (VPC) configuration.</p>
    pub fn vpc_configuration(&self) -> ::std::option::Option<&crate::types::S3AccessPointVpcConfiguration> {
        self.vpc_configuration.as_ref()
    }
}
impl S3AccessPoint {
    /// Creates a new builder-style object to manufacture [`S3AccessPoint`](crate::types::S3AccessPoint).
    pub fn builder() -> crate::types::builders::S3AccessPointBuilder {
        crate::types::builders::S3AccessPointBuilder::default()
    }
}

/// A builder for [`S3AccessPoint`](crate::types::S3AccessPoint).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct S3AccessPointBuilder {
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) alias: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_configuration: ::std::option::Option<crate::types::S3AccessPointVpcConfiguration>,
}
impl S3AccessPointBuilder {
    /// <p>he S3 access point's ARN.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>he S3 access point's ARN.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>he S3 access point's ARN.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p>The S3 access point's alias.</p>
    pub fn alias(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.alias = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 access point's alias.</p>
    pub fn set_alias(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.alias = input;
        self
    }
    /// <p>The S3 access point's alias.</p>
    pub fn get_alias(&self) -> &::std::option::Option<::std::string::String> {
        &self.alias
    }
    /// <p>The S3 access point's virtual private cloud (VPC) configuration.</p>
    pub fn vpc_configuration(mut self, input: crate::types::S3AccessPointVpcConfiguration) -> Self {
        self.vpc_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The S3 access point's virtual private cloud (VPC) configuration.</p>
    pub fn set_vpc_configuration(mut self, input: ::std::option::Option<crate::types::S3AccessPointVpcConfiguration>) -> Self {
        self.vpc_configuration = input;
        self
    }
    /// <p>The S3 access point's virtual private cloud (VPC) configuration.</p>
    pub fn get_vpc_configuration(&self) -> &::std::option::Option<crate::types::S3AccessPointVpcConfiguration> {
        &self.vpc_configuration
    }
    /// Consumes the builder and constructs a [`S3AccessPoint`](crate::types::S3AccessPoint).
    pub fn build(self) -> crate::types::S3AccessPoint {
        crate::types::S3AccessPoint {
            resource_arn: self.resource_arn,
            alias: self.alias,
            vpc_configuration: self.vpc_configuration,
        }
    }
}
