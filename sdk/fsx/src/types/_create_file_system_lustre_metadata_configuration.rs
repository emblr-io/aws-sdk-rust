// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Lustre metadata performance configuration for the creation of an Amazon FSx for Lustre file system using a <code>PERSISTENT_2</code> deployment type. The configuration uses a Metadata IOPS value to set the maximum rate of metadata disk IOPS supported by the file system.</p>
/// <p>After creation, the file system supports increasing metadata performance. For more information on Metadata IOPS, see <a href="https://docs.aws.amazon.com/fsx/latest/LustreGuide/managing-metadata-performance.html#metadata-configuration">Lustre metadata performance configuration</a> in the <i>Amazon FSx for Lustre User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateFileSystemLustreMetadataConfiguration {
    /// <p>(USER_PROVISIONED mode only) Specifies the number of Metadata IOPS to provision for the file system. This parameter sets the maximum rate of metadata disk IOPS supported by the file system.</p>
    /// <ul>
    /// <li>
    /// <p>For SSD file systems, valid values are <code>1500</code>, <code>3000</code>, <code>6000</code>, <code>12000</code>, and multiples of <code>12000</code> up to a maximum of <code>192000</code>.</p></li>
    /// <li>
    /// <p>For Intelligent-Tiering file systems, valid values are <code>6000</code> and <code>12000</code>.</p></li>
    /// </ul><note>
    /// <p><code>Iops</code> doesn’t have a default value. If you're using USER_PROVISIONED mode, you can choose to specify a valid value. If you're using AUTOMATIC mode, you cannot specify a value because FSx for Lustre automatically sets the value based on your file system storage capacity.</p>
    /// </note>
    pub iops: ::std::option::Option<i32>,
    /// <p>The metadata configuration mode for provisioning Metadata IOPS for an FSx for Lustre file system using a <code>PERSISTENT_2</code> deployment type.</p>
    /// <ul>
    /// <li>
    /// <p>In AUTOMATIC mode (supported only on SSD file systems), FSx for Lustre automatically provisions and scales the number of Metadata IOPS for your file system based on your file system storage capacity.</p></li>
    /// <li>
    /// <p>In USER_PROVISIONED mode, you specify the number of Metadata IOPS to provision for your file system.</p></li>
    /// </ul>
    pub mode: ::std::option::Option<crate::types::MetadataConfigurationMode>,
}
impl CreateFileSystemLustreMetadataConfiguration {
    /// <p>(USER_PROVISIONED mode only) Specifies the number of Metadata IOPS to provision for the file system. This parameter sets the maximum rate of metadata disk IOPS supported by the file system.</p>
    /// <ul>
    /// <li>
    /// <p>For SSD file systems, valid values are <code>1500</code>, <code>3000</code>, <code>6000</code>, <code>12000</code>, and multiples of <code>12000</code> up to a maximum of <code>192000</code>.</p></li>
    /// <li>
    /// <p>For Intelligent-Tiering file systems, valid values are <code>6000</code> and <code>12000</code>.</p></li>
    /// </ul><note>
    /// <p><code>Iops</code> doesn’t have a default value. If you're using USER_PROVISIONED mode, you can choose to specify a valid value. If you're using AUTOMATIC mode, you cannot specify a value because FSx for Lustre automatically sets the value based on your file system storage capacity.</p>
    /// </note>
    pub fn iops(&self) -> ::std::option::Option<i32> {
        self.iops
    }
    /// <p>The metadata configuration mode for provisioning Metadata IOPS for an FSx for Lustre file system using a <code>PERSISTENT_2</code> deployment type.</p>
    /// <ul>
    /// <li>
    /// <p>In AUTOMATIC mode (supported only on SSD file systems), FSx for Lustre automatically provisions and scales the number of Metadata IOPS for your file system based on your file system storage capacity.</p></li>
    /// <li>
    /// <p>In USER_PROVISIONED mode, you specify the number of Metadata IOPS to provision for your file system.</p></li>
    /// </ul>
    pub fn mode(&self) -> ::std::option::Option<&crate::types::MetadataConfigurationMode> {
        self.mode.as_ref()
    }
}
impl CreateFileSystemLustreMetadataConfiguration {
    /// Creates a new builder-style object to manufacture [`CreateFileSystemLustreMetadataConfiguration`](crate::types::CreateFileSystemLustreMetadataConfiguration).
    pub fn builder() -> crate::types::builders::CreateFileSystemLustreMetadataConfigurationBuilder {
        crate::types::builders::CreateFileSystemLustreMetadataConfigurationBuilder::default()
    }
}

/// A builder for [`CreateFileSystemLustreMetadataConfiguration`](crate::types::CreateFileSystemLustreMetadataConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateFileSystemLustreMetadataConfigurationBuilder {
    pub(crate) iops: ::std::option::Option<i32>,
    pub(crate) mode: ::std::option::Option<crate::types::MetadataConfigurationMode>,
}
impl CreateFileSystemLustreMetadataConfigurationBuilder {
    /// <p>(USER_PROVISIONED mode only) Specifies the number of Metadata IOPS to provision for the file system. This parameter sets the maximum rate of metadata disk IOPS supported by the file system.</p>
    /// <ul>
    /// <li>
    /// <p>For SSD file systems, valid values are <code>1500</code>, <code>3000</code>, <code>6000</code>, <code>12000</code>, and multiples of <code>12000</code> up to a maximum of <code>192000</code>.</p></li>
    /// <li>
    /// <p>For Intelligent-Tiering file systems, valid values are <code>6000</code> and <code>12000</code>.</p></li>
    /// </ul><note>
    /// <p><code>Iops</code> doesn’t have a default value. If you're using USER_PROVISIONED mode, you can choose to specify a valid value. If you're using AUTOMATIC mode, you cannot specify a value because FSx for Lustre automatically sets the value based on your file system storage capacity.</p>
    /// </note>
    pub fn iops(mut self, input: i32) -> Self {
        self.iops = ::std::option::Option::Some(input);
        self
    }
    /// <p>(USER_PROVISIONED mode only) Specifies the number of Metadata IOPS to provision for the file system. This parameter sets the maximum rate of metadata disk IOPS supported by the file system.</p>
    /// <ul>
    /// <li>
    /// <p>For SSD file systems, valid values are <code>1500</code>, <code>3000</code>, <code>6000</code>, <code>12000</code>, and multiples of <code>12000</code> up to a maximum of <code>192000</code>.</p></li>
    /// <li>
    /// <p>For Intelligent-Tiering file systems, valid values are <code>6000</code> and <code>12000</code>.</p></li>
    /// </ul><note>
    /// <p><code>Iops</code> doesn’t have a default value. If you're using USER_PROVISIONED mode, you can choose to specify a valid value. If you're using AUTOMATIC mode, you cannot specify a value because FSx for Lustre automatically sets the value based on your file system storage capacity.</p>
    /// </note>
    pub fn set_iops(mut self, input: ::std::option::Option<i32>) -> Self {
        self.iops = input;
        self
    }
    /// <p>(USER_PROVISIONED mode only) Specifies the number of Metadata IOPS to provision for the file system. This parameter sets the maximum rate of metadata disk IOPS supported by the file system.</p>
    /// <ul>
    /// <li>
    /// <p>For SSD file systems, valid values are <code>1500</code>, <code>3000</code>, <code>6000</code>, <code>12000</code>, and multiples of <code>12000</code> up to a maximum of <code>192000</code>.</p></li>
    /// <li>
    /// <p>For Intelligent-Tiering file systems, valid values are <code>6000</code> and <code>12000</code>.</p></li>
    /// </ul><note>
    /// <p><code>Iops</code> doesn’t have a default value. If you're using USER_PROVISIONED mode, you can choose to specify a valid value. If you're using AUTOMATIC mode, you cannot specify a value because FSx for Lustre automatically sets the value based on your file system storage capacity.</p>
    /// </note>
    pub fn get_iops(&self) -> &::std::option::Option<i32> {
        &self.iops
    }
    /// <p>The metadata configuration mode for provisioning Metadata IOPS for an FSx for Lustre file system using a <code>PERSISTENT_2</code> deployment type.</p>
    /// <ul>
    /// <li>
    /// <p>In AUTOMATIC mode (supported only on SSD file systems), FSx for Lustre automatically provisions and scales the number of Metadata IOPS for your file system based on your file system storage capacity.</p></li>
    /// <li>
    /// <p>In USER_PROVISIONED mode, you specify the number of Metadata IOPS to provision for your file system.</p></li>
    /// </ul>
    /// This field is required.
    pub fn mode(mut self, input: crate::types::MetadataConfigurationMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metadata configuration mode for provisioning Metadata IOPS for an FSx for Lustre file system using a <code>PERSISTENT_2</code> deployment type.</p>
    /// <ul>
    /// <li>
    /// <p>In AUTOMATIC mode (supported only on SSD file systems), FSx for Lustre automatically provisions and scales the number of Metadata IOPS for your file system based on your file system storage capacity.</p></li>
    /// <li>
    /// <p>In USER_PROVISIONED mode, you specify the number of Metadata IOPS to provision for your file system.</p></li>
    /// </ul>
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::MetadataConfigurationMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>The metadata configuration mode for provisioning Metadata IOPS for an FSx for Lustre file system using a <code>PERSISTENT_2</code> deployment type.</p>
    /// <ul>
    /// <li>
    /// <p>In AUTOMATIC mode (supported only on SSD file systems), FSx for Lustre automatically provisions and scales the number of Metadata IOPS for your file system based on your file system storage capacity.</p></li>
    /// <li>
    /// <p>In USER_PROVISIONED mode, you specify the number of Metadata IOPS to provision for your file system.</p></li>
    /// </ul>
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::MetadataConfigurationMode> {
        &self.mode
    }
    /// Consumes the builder and constructs a [`CreateFileSystemLustreMetadataConfiguration`](crate::types::CreateFileSystemLustreMetadataConfiguration).
    pub fn build(self) -> crate::types::CreateFileSystemLustreMetadataConfiguration {
        crate::types::CreateFileSystemLustreMetadataConfiguration {
            iops: self.iops,
            mode: self.mode,
        }
    }
}
