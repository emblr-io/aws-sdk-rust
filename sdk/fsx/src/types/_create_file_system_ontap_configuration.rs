// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The ONTAP configuration properties of the FSx for ONTAP file system that you are creating.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateFileSystemOntapConfiguration {
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>30</code>.</p>
    pub automatic_backup_retention_days: ::std::option::Option<i32>,
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily.</p>
    pub daily_automatic_backup_start_time: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the FSx for ONTAP file system deployment type to use in creating the file system.</p>
    /// <ul>
    /// <li>
    /// <p><code>MULTI_AZ_1</code> - A high availability file system configured for Multi-AZ redundancy to tolerate temporary Availability Zone (AZ) unavailability. This is a first-generation FSx for ONTAP file system.</p></li>
    /// <li>
    /// <p><code>MULTI_AZ_2</code> - A high availability file system configured for Multi-AZ redundancy to tolerate temporary AZ unavailability. This is a second-generation FSx for ONTAP file system.</p></li>
    /// <li>
    /// <p><code>SINGLE_AZ_1</code> - A file system configured for Single-AZ redundancy. This is a first-generation FSx for ONTAP file system.</p></li>
    /// <li>
    /// <p><code>SINGLE_AZ_2</code> - A file system configured with multiple high-availability (HA) pairs for Single-AZ redundancy. This is a second-generation FSx for ONTAP file system.</p></li>
    /// </ul>
    /// <p>For information about the use cases for Multi-AZ and Single-AZ deployments, refer to <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/high-availability-AZ.html">Choosing a file system deployment type</a>.</p>
    pub deployment_type: ::std::option::Option<crate::types::OntapDeploymentType>,
    /// <p>(Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system will be created. By default in the Amazon FSx API, Amazon FSx selects an unused IP address range for you from the 198.19.* range. By default in the Amazon FSx console, Amazon FSx chooses the last 64 IP addresses from the VPCâ€™s primary CIDR range to use as the endpoint IP address range for the file system. You can have overlapping endpoint IP addresses for file systems deployed in the same VPC/route tables, as long as they don't overlap with any subnet.</p>
    pub endpoint_ip_address_range: ::std::option::Option<::std::string::String>,
    /// <p>The ONTAP administrative password for the <code>fsxadmin</code> user with which you administer your file system using the NetApp ONTAP CLI and REST API.</p>
    pub fsx_admin_password: ::std::option::Option<::std::string::String>,
    /// <p>The SSD IOPS configuration for the FSx for ONTAP file system.</p>
    pub disk_iops_configuration: ::std::option::Option<crate::types::DiskIopsConfiguration>,
    /// <p>Required when <code>DeploymentType</code> is set to <code>MULTI_AZ_1</code> or <code>MULTI_AZ_2</code>. This specifies the subnet in which you want the preferred file server to be located.</p>
    pub preferred_subnet_id: ::std::option::Option<::std::string::String>,
    /// <p>(Multi-AZ only) Specifies the route tables in which Amazon FSx creates the rules for routing traffic to the correct file server. You should specify all virtual private cloud (VPC) route tables associated with the subnets in which your clients are located. By default, Amazon FSx selects your VPC's default route table.</p><note>
    /// <p>Amazon FSx manages these route tables for Multi-AZ file systems using tag-based authentication. These route tables are tagged with <code>Key: AmazonFSx; Value: ManagedByAmazonFSx</code>. When creating FSx for ONTAP Multi-AZ file systems using CloudFormation we recommend that you add the <code>Key: AmazonFSx; Value: ManagedByAmazonFSx</code> tag manually.</p>
    /// </note>
    pub route_table_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Sets the throughput capacity for the file system that you're creating in megabytes per second (MBps). For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-throughput-capacity.html">Managing throughput capacity</a> in the FSx for ONTAP User Guide.</p>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> and <code>ThroughputCapacityPerHAPair</code> are not the same value.</p></li>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> when divided by the value of <code>HAPairs</code> is outside of the valid range for <code>ThroughputCapacity</code>.</p></li>
    /// </ul>
    pub throughput_capacity: ::std::option::Option<i32>,
    /// <p>The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone, where d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.</p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    pub weekly_maintenance_start_time: ::std::option::Option<::std::string::String>,
    /// <p>Specifies how many high-availability (HA) pairs of file servers will power your file system. First-generation file systems are powered by 1 HA pair. Second-generation multi-AZ file systems are powered by 1 HA pair. Second generation single-AZ file systems are powered by up to 12 HA pairs. The default value is 1. The value of this property affects the values of <code>StorageCapacity</code>, <code>Iops</code>, and <code>ThroughputCapacity</code>. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/administering-file-systems.html#HA-pairs">High-availability (HA) pairs</a> in the FSx for ONTAP user guide. Block storage protocol support (iSCSI and NVMe over TCP) is disabled on file systems with more than 6 HA pairs. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/supported-fsx-clients.html#using-block-storage">Using block storage protocols</a>.</p>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>HAPairs</code> is less than 1 or greater than 12.</p></li>
    /// <li>
    /// <p>The value of <code>HAPairs</code> is greater than 1 and the value of <code>DeploymentType</code> is <code>SINGLE_AZ_1</code>, <code>MULTI_AZ_1</code>, or <code>MULTI_AZ_2</code>.</p></li>
    /// </ul>
    pub ha_pairs: ::std::option::Option<i32>,
    /// <p>Use to choose the throughput capacity per HA pair, rather than the total throughput for the file system.</p>
    /// <p>You can define either the <code>ThroughputCapacityPerHAPair</code> or the <code>ThroughputCapacity</code> when creating a file system, but not both.</p>
    /// <p>This field and <code>ThroughputCapacity</code> are the same for file systems powered by one HA pair.</p>
    /// <ul>
    /// <li>
    /// <p>For <code>SINGLE_AZ_1</code> and <code>MULTI_AZ_1</code> file systems, valid values are 128, 256, 512, 1024, 2048, or 4096 MBps.</p></li>
    /// <li>
    /// <p>For <code>SINGLE_AZ_2</code>, valid values are 1536, 3072, or 6144 MBps.</p></li>
    /// <li>
    /// <p>For <code>MULTI_AZ_2</code>, valid values are 384, 768, 1536, 3072, or 6144 MBps.</p></li>
    /// </ul>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> and <code>ThroughputCapacityPerHAPair</code> are not the same value for file systems with one HA pair.</p></li>
    /// <li>
    /// <p>The value of deployment type is <code>SINGLE_AZ_2</code> and <code>ThroughputCapacity</code> / <code>ThroughputCapacityPerHAPair</code> is not a valid HA pair (a value between 1 and 12).</p></li>
    /// <li>
    /// <p>The value of <code>ThroughputCapacityPerHAPair</code> is not a valid value.</p></li>
    /// </ul>
    pub throughput_capacity_per_ha_pair: ::std::option::Option<i32>,
}
impl CreateFileSystemOntapConfiguration {
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>30</code>.</p>
    pub fn automatic_backup_retention_days(&self) -> ::std::option::Option<i32> {
        self.automatic_backup_retention_days
    }
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily.</p>
    pub fn daily_automatic_backup_start_time(&self) -> ::std::option::Option<&str> {
        self.daily_automatic_backup_start_time.as_deref()
    }
    /// <p>Specifies the FSx for ONTAP file system deployment type to use in creating the file system.</p>
    /// <ul>
    /// <li>
    /// <p><code>MULTI_AZ_1</code> - A high availability file system configured for Multi-AZ redundancy to tolerate temporary Availability Zone (AZ) unavailability. This is a first-generation FSx for ONTAP file system.</p></li>
    /// <li>
    /// <p><code>MULTI_AZ_2</code> - A high availability file system configured for Multi-AZ redundancy to tolerate temporary AZ unavailability. This is a second-generation FSx for ONTAP file system.</p></li>
    /// <li>
    /// <p><code>SINGLE_AZ_1</code> - A file system configured for Single-AZ redundancy. This is a first-generation FSx for ONTAP file system.</p></li>
    /// <li>
    /// <p><code>SINGLE_AZ_2</code> - A file system configured with multiple high-availability (HA) pairs for Single-AZ redundancy. This is a second-generation FSx for ONTAP file system.</p></li>
    /// </ul>
    /// <p>For information about the use cases for Multi-AZ and Single-AZ deployments, refer to <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/high-availability-AZ.html">Choosing a file system deployment type</a>.</p>
    pub fn deployment_type(&self) -> ::std::option::Option<&crate::types::OntapDeploymentType> {
        self.deployment_type.as_ref()
    }
    /// <p>(Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system will be created. By default in the Amazon FSx API, Amazon FSx selects an unused IP address range for you from the 198.19.* range. By default in the Amazon FSx console, Amazon FSx chooses the last 64 IP addresses from the VPCâ€™s primary CIDR range to use as the endpoint IP address range for the file system. You can have overlapping endpoint IP addresses for file systems deployed in the same VPC/route tables, as long as they don't overlap with any subnet.</p>
    pub fn endpoint_ip_address_range(&self) -> ::std::option::Option<&str> {
        self.endpoint_ip_address_range.as_deref()
    }
    /// <p>The ONTAP administrative password for the <code>fsxadmin</code> user with which you administer your file system using the NetApp ONTAP CLI and REST API.</p>
    pub fn fsx_admin_password(&self) -> ::std::option::Option<&str> {
        self.fsx_admin_password.as_deref()
    }
    /// <p>The SSD IOPS configuration for the FSx for ONTAP file system.</p>
    pub fn disk_iops_configuration(&self) -> ::std::option::Option<&crate::types::DiskIopsConfiguration> {
        self.disk_iops_configuration.as_ref()
    }
    /// <p>Required when <code>DeploymentType</code> is set to <code>MULTI_AZ_1</code> or <code>MULTI_AZ_2</code>. This specifies the subnet in which you want the preferred file server to be located.</p>
    pub fn preferred_subnet_id(&self) -> ::std::option::Option<&str> {
        self.preferred_subnet_id.as_deref()
    }
    /// <p>(Multi-AZ only) Specifies the route tables in which Amazon FSx creates the rules for routing traffic to the correct file server. You should specify all virtual private cloud (VPC) route tables associated with the subnets in which your clients are located. By default, Amazon FSx selects your VPC's default route table.</p><note>
    /// <p>Amazon FSx manages these route tables for Multi-AZ file systems using tag-based authentication. These route tables are tagged with <code>Key: AmazonFSx; Value: ManagedByAmazonFSx</code>. When creating FSx for ONTAP Multi-AZ file systems using CloudFormation we recommend that you add the <code>Key: AmazonFSx; Value: ManagedByAmazonFSx</code> tag manually.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.route_table_ids.is_none()`.
    pub fn route_table_ids(&self) -> &[::std::string::String] {
        self.route_table_ids.as_deref().unwrap_or_default()
    }
    /// <p>Sets the throughput capacity for the file system that you're creating in megabytes per second (MBps). For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-throughput-capacity.html">Managing throughput capacity</a> in the FSx for ONTAP User Guide.</p>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> and <code>ThroughputCapacityPerHAPair</code> are not the same value.</p></li>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> when divided by the value of <code>HAPairs</code> is outside of the valid range for <code>ThroughputCapacity</code>.</p></li>
    /// </ul>
    pub fn throughput_capacity(&self) -> ::std::option::Option<i32> {
        self.throughput_capacity
    }
    /// <p>The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone, where d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.</p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    pub fn weekly_maintenance_start_time(&self) -> ::std::option::Option<&str> {
        self.weekly_maintenance_start_time.as_deref()
    }
    /// <p>Specifies how many high-availability (HA) pairs of file servers will power your file system. First-generation file systems are powered by 1 HA pair. Second-generation multi-AZ file systems are powered by 1 HA pair. Second generation single-AZ file systems are powered by up to 12 HA pairs. The default value is 1. The value of this property affects the values of <code>StorageCapacity</code>, <code>Iops</code>, and <code>ThroughputCapacity</code>. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/administering-file-systems.html#HA-pairs">High-availability (HA) pairs</a> in the FSx for ONTAP user guide. Block storage protocol support (iSCSI and NVMe over TCP) is disabled on file systems with more than 6 HA pairs. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/supported-fsx-clients.html#using-block-storage">Using block storage protocols</a>.</p>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>HAPairs</code> is less than 1 or greater than 12.</p></li>
    /// <li>
    /// <p>The value of <code>HAPairs</code> is greater than 1 and the value of <code>DeploymentType</code> is <code>SINGLE_AZ_1</code>, <code>MULTI_AZ_1</code>, or <code>MULTI_AZ_2</code>.</p></li>
    /// </ul>
    pub fn ha_pairs(&self) -> ::std::option::Option<i32> {
        self.ha_pairs
    }
    /// <p>Use to choose the throughput capacity per HA pair, rather than the total throughput for the file system.</p>
    /// <p>You can define either the <code>ThroughputCapacityPerHAPair</code> or the <code>ThroughputCapacity</code> when creating a file system, but not both.</p>
    /// <p>This field and <code>ThroughputCapacity</code> are the same for file systems powered by one HA pair.</p>
    /// <ul>
    /// <li>
    /// <p>For <code>SINGLE_AZ_1</code> and <code>MULTI_AZ_1</code> file systems, valid values are 128, 256, 512, 1024, 2048, or 4096 MBps.</p></li>
    /// <li>
    /// <p>For <code>SINGLE_AZ_2</code>, valid values are 1536, 3072, or 6144 MBps.</p></li>
    /// <li>
    /// <p>For <code>MULTI_AZ_2</code>, valid values are 384, 768, 1536, 3072, or 6144 MBps.</p></li>
    /// </ul>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> and <code>ThroughputCapacityPerHAPair</code> are not the same value for file systems with one HA pair.</p></li>
    /// <li>
    /// <p>The value of deployment type is <code>SINGLE_AZ_2</code> and <code>ThroughputCapacity</code> / <code>ThroughputCapacityPerHAPair</code> is not a valid HA pair (a value between 1 and 12).</p></li>
    /// <li>
    /// <p>The value of <code>ThroughputCapacityPerHAPair</code> is not a valid value.</p></li>
    /// </ul>
    pub fn throughput_capacity_per_ha_pair(&self) -> ::std::option::Option<i32> {
        self.throughput_capacity_per_ha_pair
    }
}
impl ::std::fmt::Debug for CreateFileSystemOntapConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateFileSystemOntapConfiguration");
        formatter.field("automatic_backup_retention_days", &self.automatic_backup_retention_days);
        formatter.field("daily_automatic_backup_start_time", &self.daily_automatic_backup_start_time);
        formatter.field("deployment_type", &self.deployment_type);
        formatter.field("endpoint_ip_address_range", &self.endpoint_ip_address_range);
        formatter.field("fsx_admin_password", &"*** Sensitive Data Redacted ***");
        formatter.field("disk_iops_configuration", &self.disk_iops_configuration);
        formatter.field("preferred_subnet_id", &self.preferred_subnet_id);
        formatter.field("route_table_ids", &self.route_table_ids);
        formatter.field("throughput_capacity", &self.throughput_capacity);
        formatter.field("weekly_maintenance_start_time", &self.weekly_maintenance_start_time);
        formatter.field("ha_pairs", &self.ha_pairs);
        formatter.field("throughput_capacity_per_ha_pair", &self.throughput_capacity_per_ha_pair);
        formatter.finish()
    }
}
impl CreateFileSystemOntapConfiguration {
    /// Creates a new builder-style object to manufacture [`CreateFileSystemOntapConfiguration`](crate::types::CreateFileSystemOntapConfiguration).
    pub fn builder() -> crate::types::builders::CreateFileSystemOntapConfigurationBuilder {
        crate::types::builders::CreateFileSystemOntapConfigurationBuilder::default()
    }
}

/// A builder for [`CreateFileSystemOntapConfiguration`](crate::types::CreateFileSystemOntapConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateFileSystemOntapConfigurationBuilder {
    pub(crate) automatic_backup_retention_days: ::std::option::Option<i32>,
    pub(crate) daily_automatic_backup_start_time: ::std::option::Option<::std::string::String>,
    pub(crate) deployment_type: ::std::option::Option<crate::types::OntapDeploymentType>,
    pub(crate) endpoint_ip_address_range: ::std::option::Option<::std::string::String>,
    pub(crate) fsx_admin_password: ::std::option::Option<::std::string::String>,
    pub(crate) disk_iops_configuration: ::std::option::Option<crate::types::DiskIopsConfiguration>,
    pub(crate) preferred_subnet_id: ::std::option::Option<::std::string::String>,
    pub(crate) route_table_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) throughput_capacity: ::std::option::Option<i32>,
    pub(crate) weekly_maintenance_start_time: ::std::option::Option<::std::string::String>,
    pub(crate) ha_pairs: ::std::option::Option<i32>,
    pub(crate) throughput_capacity_per_ha_pair: ::std::option::Option<i32>,
}
impl CreateFileSystemOntapConfigurationBuilder {
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>30</code>.</p>
    pub fn automatic_backup_retention_days(mut self, input: i32) -> Self {
        self.automatic_backup_retention_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>30</code>.</p>
    pub fn set_automatic_backup_retention_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.automatic_backup_retention_days = input;
        self
    }
    /// <p>The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>30</code>.</p>
    pub fn get_automatic_backup_retention_days(&self) -> &::std::option::Option<i32> {
        &self.automatic_backup_retention_days
    }
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily.</p>
    pub fn daily_automatic_backup_start_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.daily_automatic_backup_start_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily.</p>
    pub fn set_daily_automatic_backup_start_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.daily_automatic_backup_start_time = input;
        self
    }
    /// <p>A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily.</p>
    pub fn get_daily_automatic_backup_start_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.daily_automatic_backup_start_time
    }
    /// <p>Specifies the FSx for ONTAP file system deployment type to use in creating the file system.</p>
    /// <ul>
    /// <li>
    /// <p><code>MULTI_AZ_1</code> - A high availability file system configured for Multi-AZ redundancy to tolerate temporary Availability Zone (AZ) unavailability. This is a first-generation FSx for ONTAP file system.</p></li>
    /// <li>
    /// <p><code>MULTI_AZ_2</code> - A high availability file system configured for Multi-AZ redundancy to tolerate temporary AZ unavailability. This is a second-generation FSx for ONTAP file system.</p></li>
    /// <li>
    /// <p><code>SINGLE_AZ_1</code> - A file system configured for Single-AZ redundancy. This is a first-generation FSx for ONTAP file system.</p></li>
    /// <li>
    /// <p><code>SINGLE_AZ_2</code> - A file system configured with multiple high-availability (HA) pairs for Single-AZ redundancy. This is a second-generation FSx for ONTAP file system.</p></li>
    /// </ul>
    /// <p>For information about the use cases for Multi-AZ and Single-AZ deployments, refer to <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/high-availability-AZ.html">Choosing a file system deployment type</a>.</p>
    /// This field is required.
    pub fn deployment_type(mut self, input: crate::types::OntapDeploymentType) -> Self {
        self.deployment_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the FSx for ONTAP file system deployment type to use in creating the file system.</p>
    /// <ul>
    /// <li>
    /// <p><code>MULTI_AZ_1</code> - A high availability file system configured for Multi-AZ redundancy to tolerate temporary Availability Zone (AZ) unavailability. This is a first-generation FSx for ONTAP file system.</p></li>
    /// <li>
    /// <p><code>MULTI_AZ_2</code> - A high availability file system configured for Multi-AZ redundancy to tolerate temporary AZ unavailability. This is a second-generation FSx for ONTAP file system.</p></li>
    /// <li>
    /// <p><code>SINGLE_AZ_1</code> - A file system configured for Single-AZ redundancy. This is a first-generation FSx for ONTAP file system.</p></li>
    /// <li>
    /// <p><code>SINGLE_AZ_2</code> - A file system configured with multiple high-availability (HA) pairs for Single-AZ redundancy. This is a second-generation FSx for ONTAP file system.</p></li>
    /// </ul>
    /// <p>For information about the use cases for Multi-AZ and Single-AZ deployments, refer to <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/high-availability-AZ.html">Choosing a file system deployment type</a>.</p>
    pub fn set_deployment_type(mut self, input: ::std::option::Option<crate::types::OntapDeploymentType>) -> Self {
        self.deployment_type = input;
        self
    }
    /// <p>Specifies the FSx for ONTAP file system deployment type to use in creating the file system.</p>
    /// <ul>
    /// <li>
    /// <p><code>MULTI_AZ_1</code> - A high availability file system configured for Multi-AZ redundancy to tolerate temporary Availability Zone (AZ) unavailability. This is a first-generation FSx for ONTAP file system.</p></li>
    /// <li>
    /// <p><code>MULTI_AZ_2</code> - A high availability file system configured for Multi-AZ redundancy to tolerate temporary AZ unavailability. This is a second-generation FSx for ONTAP file system.</p></li>
    /// <li>
    /// <p><code>SINGLE_AZ_1</code> - A file system configured for Single-AZ redundancy. This is a first-generation FSx for ONTAP file system.</p></li>
    /// <li>
    /// <p><code>SINGLE_AZ_2</code> - A file system configured with multiple high-availability (HA) pairs for Single-AZ redundancy. This is a second-generation FSx for ONTAP file system.</p></li>
    /// </ul>
    /// <p>For information about the use cases for Multi-AZ and Single-AZ deployments, refer to <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/high-availability-AZ.html">Choosing a file system deployment type</a>.</p>
    pub fn get_deployment_type(&self) -> &::std::option::Option<crate::types::OntapDeploymentType> {
        &self.deployment_type
    }
    /// <p>(Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system will be created. By default in the Amazon FSx API, Amazon FSx selects an unused IP address range for you from the 198.19.* range. By default in the Amazon FSx console, Amazon FSx chooses the last 64 IP addresses from the VPCâ€™s primary CIDR range to use as the endpoint IP address range for the file system. You can have overlapping endpoint IP addresses for file systems deployed in the same VPC/route tables, as long as they don't overlap with any subnet.</p>
    pub fn endpoint_ip_address_range(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint_ip_address_range = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>(Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system will be created. By default in the Amazon FSx API, Amazon FSx selects an unused IP address range for you from the 198.19.* range. By default in the Amazon FSx console, Amazon FSx chooses the last 64 IP addresses from the VPCâ€™s primary CIDR range to use as the endpoint IP address range for the file system. You can have overlapping endpoint IP addresses for file systems deployed in the same VPC/route tables, as long as they don't overlap with any subnet.</p>
    pub fn set_endpoint_ip_address_range(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint_ip_address_range = input;
        self
    }
    /// <p>(Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system will be created. By default in the Amazon FSx API, Amazon FSx selects an unused IP address range for you from the 198.19.* range. By default in the Amazon FSx console, Amazon FSx chooses the last 64 IP addresses from the VPCâ€™s primary CIDR range to use as the endpoint IP address range for the file system. You can have overlapping endpoint IP addresses for file systems deployed in the same VPC/route tables, as long as they don't overlap with any subnet.</p>
    pub fn get_endpoint_ip_address_range(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint_ip_address_range
    }
    /// <p>The ONTAP administrative password for the <code>fsxadmin</code> user with which you administer your file system using the NetApp ONTAP CLI and REST API.</p>
    pub fn fsx_admin_password(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fsx_admin_password = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ONTAP administrative password for the <code>fsxadmin</code> user with which you administer your file system using the NetApp ONTAP CLI and REST API.</p>
    pub fn set_fsx_admin_password(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fsx_admin_password = input;
        self
    }
    /// <p>The ONTAP administrative password for the <code>fsxadmin</code> user with which you administer your file system using the NetApp ONTAP CLI and REST API.</p>
    pub fn get_fsx_admin_password(&self) -> &::std::option::Option<::std::string::String> {
        &self.fsx_admin_password
    }
    /// <p>The SSD IOPS configuration for the FSx for ONTAP file system.</p>
    pub fn disk_iops_configuration(mut self, input: crate::types::DiskIopsConfiguration) -> Self {
        self.disk_iops_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The SSD IOPS configuration for the FSx for ONTAP file system.</p>
    pub fn set_disk_iops_configuration(mut self, input: ::std::option::Option<crate::types::DiskIopsConfiguration>) -> Self {
        self.disk_iops_configuration = input;
        self
    }
    /// <p>The SSD IOPS configuration for the FSx for ONTAP file system.</p>
    pub fn get_disk_iops_configuration(&self) -> &::std::option::Option<crate::types::DiskIopsConfiguration> {
        &self.disk_iops_configuration
    }
    /// <p>Required when <code>DeploymentType</code> is set to <code>MULTI_AZ_1</code> or <code>MULTI_AZ_2</code>. This specifies the subnet in which you want the preferred file server to be located.</p>
    pub fn preferred_subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.preferred_subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Required when <code>DeploymentType</code> is set to <code>MULTI_AZ_1</code> or <code>MULTI_AZ_2</code>. This specifies the subnet in which you want the preferred file server to be located.</p>
    pub fn set_preferred_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.preferred_subnet_id = input;
        self
    }
    /// <p>Required when <code>DeploymentType</code> is set to <code>MULTI_AZ_1</code> or <code>MULTI_AZ_2</code>. This specifies the subnet in which you want the preferred file server to be located.</p>
    pub fn get_preferred_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.preferred_subnet_id
    }
    /// Appends an item to `route_table_ids`.
    ///
    /// To override the contents of this collection use [`set_route_table_ids`](Self::set_route_table_ids).
    ///
    /// <p>(Multi-AZ only) Specifies the route tables in which Amazon FSx creates the rules for routing traffic to the correct file server. You should specify all virtual private cloud (VPC) route tables associated with the subnets in which your clients are located. By default, Amazon FSx selects your VPC's default route table.</p><note>
    /// <p>Amazon FSx manages these route tables for Multi-AZ file systems using tag-based authentication. These route tables are tagged with <code>Key: AmazonFSx; Value: ManagedByAmazonFSx</code>. When creating FSx for ONTAP Multi-AZ file systems using CloudFormation we recommend that you add the <code>Key: AmazonFSx; Value: ManagedByAmazonFSx</code> tag manually.</p>
    /// </note>
    pub fn route_table_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.route_table_ids.unwrap_or_default();
        v.push(input.into());
        self.route_table_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>(Multi-AZ only) Specifies the route tables in which Amazon FSx creates the rules for routing traffic to the correct file server. You should specify all virtual private cloud (VPC) route tables associated with the subnets in which your clients are located. By default, Amazon FSx selects your VPC's default route table.</p><note>
    /// <p>Amazon FSx manages these route tables for Multi-AZ file systems using tag-based authentication. These route tables are tagged with <code>Key: AmazonFSx; Value: ManagedByAmazonFSx</code>. When creating FSx for ONTAP Multi-AZ file systems using CloudFormation we recommend that you add the <code>Key: AmazonFSx; Value: ManagedByAmazonFSx</code> tag manually.</p>
    /// </note>
    pub fn set_route_table_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.route_table_ids = input;
        self
    }
    /// <p>(Multi-AZ only) Specifies the route tables in which Amazon FSx creates the rules for routing traffic to the correct file server. You should specify all virtual private cloud (VPC) route tables associated with the subnets in which your clients are located. By default, Amazon FSx selects your VPC's default route table.</p><note>
    /// <p>Amazon FSx manages these route tables for Multi-AZ file systems using tag-based authentication. These route tables are tagged with <code>Key: AmazonFSx; Value: ManagedByAmazonFSx</code>. When creating FSx for ONTAP Multi-AZ file systems using CloudFormation we recommend that you add the <code>Key: AmazonFSx; Value: ManagedByAmazonFSx</code> tag manually.</p>
    /// </note>
    pub fn get_route_table_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.route_table_ids
    }
    /// <p>Sets the throughput capacity for the file system that you're creating in megabytes per second (MBps). For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-throughput-capacity.html">Managing throughput capacity</a> in the FSx for ONTAP User Guide.</p>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> and <code>ThroughputCapacityPerHAPair</code> are not the same value.</p></li>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> when divided by the value of <code>HAPairs</code> is outside of the valid range for <code>ThroughputCapacity</code>.</p></li>
    /// </ul>
    pub fn throughput_capacity(mut self, input: i32) -> Self {
        self.throughput_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sets the throughput capacity for the file system that you're creating in megabytes per second (MBps). For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-throughput-capacity.html">Managing throughput capacity</a> in the FSx for ONTAP User Guide.</p>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> and <code>ThroughputCapacityPerHAPair</code> are not the same value.</p></li>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> when divided by the value of <code>HAPairs</code> is outside of the valid range for <code>ThroughputCapacity</code>.</p></li>
    /// </ul>
    pub fn set_throughput_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.throughput_capacity = input;
        self
    }
    /// <p>Sets the throughput capacity for the file system that you're creating in megabytes per second (MBps). For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-throughput-capacity.html">Managing throughput capacity</a> in the FSx for ONTAP User Guide.</p>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> and <code>ThroughputCapacityPerHAPair</code> are not the same value.</p></li>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> when divided by the value of <code>HAPairs</code> is outside of the valid range for <code>ThroughputCapacity</code>.</p></li>
    /// </ul>
    pub fn get_throughput_capacity(&self) -> &::std::option::Option<i32> {
        &self.throughput_capacity
    }
    /// <p>The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone, where d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.</p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    pub fn weekly_maintenance_start_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.weekly_maintenance_start_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone, where d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.</p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    pub fn set_weekly_maintenance_start_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.weekly_maintenance_start_time = input;
        self
    }
    /// <p>The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone, where d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.</p>
    /// <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>
    pub fn get_weekly_maintenance_start_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.weekly_maintenance_start_time
    }
    /// <p>Specifies how many high-availability (HA) pairs of file servers will power your file system. First-generation file systems are powered by 1 HA pair. Second-generation multi-AZ file systems are powered by 1 HA pair. Second generation single-AZ file systems are powered by up to 12 HA pairs. The default value is 1. The value of this property affects the values of <code>StorageCapacity</code>, <code>Iops</code>, and <code>ThroughputCapacity</code>. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/administering-file-systems.html#HA-pairs">High-availability (HA) pairs</a> in the FSx for ONTAP user guide. Block storage protocol support (iSCSI and NVMe over TCP) is disabled on file systems with more than 6 HA pairs. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/supported-fsx-clients.html#using-block-storage">Using block storage protocols</a>.</p>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>HAPairs</code> is less than 1 or greater than 12.</p></li>
    /// <li>
    /// <p>The value of <code>HAPairs</code> is greater than 1 and the value of <code>DeploymentType</code> is <code>SINGLE_AZ_1</code>, <code>MULTI_AZ_1</code>, or <code>MULTI_AZ_2</code>.</p></li>
    /// </ul>
    pub fn ha_pairs(mut self, input: i32) -> Self {
        self.ha_pairs = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies how many high-availability (HA) pairs of file servers will power your file system. First-generation file systems are powered by 1 HA pair. Second-generation multi-AZ file systems are powered by 1 HA pair. Second generation single-AZ file systems are powered by up to 12 HA pairs. The default value is 1. The value of this property affects the values of <code>StorageCapacity</code>, <code>Iops</code>, and <code>ThroughputCapacity</code>. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/administering-file-systems.html#HA-pairs">High-availability (HA) pairs</a> in the FSx for ONTAP user guide. Block storage protocol support (iSCSI and NVMe over TCP) is disabled on file systems with more than 6 HA pairs. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/supported-fsx-clients.html#using-block-storage">Using block storage protocols</a>.</p>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>HAPairs</code> is less than 1 or greater than 12.</p></li>
    /// <li>
    /// <p>The value of <code>HAPairs</code> is greater than 1 and the value of <code>DeploymentType</code> is <code>SINGLE_AZ_1</code>, <code>MULTI_AZ_1</code>, or <code>MULTI_AZ_2</code>.</p></li>
    /// </ul>
    pub fn set_ha_pairs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.ha_pairs = input;
        self
    }
    /// <p>Specifies how many high-availability (HA) pairs of file servers will power your file system. First-generation file systems are powered by 1 HA pair. Second-generation multi-AZ file systems are powered by 1 HA pair. Second generation single-AZ file systems are powered by up to 12 HA pairs. The default value is 1. The value of this property affects the values of <code>StorageCapacity</code>, <code>Iops</code>, and <code>ThroughputCapacity</code>. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/administering-file-systems.html#HA-pairs">High-availability (HA) pairs</a> in the FSx for ONTAP user guide. Block storage protocol support (iSCSI and NVMe over TCP) is disabled on file systems with more than 6 HA pairs. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/supported-fsx-clients.html#using-block-storage">Using block storage protocols</a>.</p>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>HAPairs</code> is less than 1 or greater than 12.</p></li>
    /// <li>
    /// <p>The value of <code>HAPairs</code> is greater than 1 and the value of <code>DeploymentType</code> is <code>SINGLE_AZ_1</code>, <code>MULTI_AZ_1</code>, or <code>MULTI_AZ_2</code>.</p></li>
    /// </ul>
    pub fn get_ha_pairs(&self) -> &::std::option::Option<i32> {
        &self.ha_pairs
    }
    /// <p>Use to choose the throughput capacity per HA pair, rather than the total throughput for the file system.</p>
    /// <p>You can define either the <code>ThroughputCapacityPerHAPair</code> or the <code>ThroughputCapacity</code> when creating a file system, but not both.</p>
    /// <p>This field and <code>ThroughputCapacity</code> are the same for file systems powered by one HA pair.</p>
    /// <ul>
    /// <li>
    /// <p>For <code>SINGLE_AZ_1</code> and <code>MULTI_AZ_1</code> file systems, valid values are 128, 256, 512, 1024, 2048, or 4096 MBps.</p></li>
    /// <li>
    /// <p>For <code>SINGLE_AZ_2</code>, valid values are 1536, 3072, or 6144 MBps.</p></li>
    /// <li>
    /// <p>For <code>MULTI_AZ_2</code>, valid values are 384, 768, 1536, 3072, or 6144 MBps.</p></li>
    /// </ul>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> and <code>ThroughputCapacityPerHAPair</code> are not the same value for file systems with one HA pair.</p></li>
    /// <li>
    /// <p>The value of deployment type is <code>SINGLE_AZ_2</code> and <code>ThroughputCapacity</code> / <code>ThroughputCapacityPerHAPair</code> is not a valid HA pair (a value between 1 and 12).</p></li>
    /// <li>
    /// <p>The value of <code>ThroughputCapacityPerHAPair</code> is not a valid value.</p></li>
    /// </ul>
    pub fn throughput_capacity_per_ha_pair(mut self, input: i32) -> Self {
        self.throughput_capacity_per_ha_pair = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use to choose the throughput capacity per HA pair, rather than the total throughput for the file system.</p>
    /// <p>You can define either the <code>ThroughputCapacityPerHAPair</code> or the <code>ThroughputCapacity</code> when creating a file system, but not both.</p>
    /// <p>This field and <code>ThroughputCapacity</code> are the same for file systems powered by one HA pair.</p>
    /// <ul>
    /// <li>
    /// <p>For <code>SINGLE_AZ_1</code> and <code>MULTI_AZ_1</code> file systems, valid values are 128, 256, 512, 1024, 2048, or 4096 MBps.</p></li>
    /// <li>
    /// <p>For <code>SINGLE_AZ_2</code>, valid values are 1536, 3072, or 6144 MBps.</p></li>
    /// <li>
    /// <p>For <code>MULTI_AZ_2</code>, valid values are 384, 768, 1536, 3072, or 6144 MBps.</p></li>
    /// </ul>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> and <code>ThroughputCapacityPerHAPair</code> are not the same value for file systems with one HA pair.</p></li>
    /// <li>
    /// <p>The value of deployment type is <code>SINGLE_AZ_2</code> and <code>ThroughputCapacity</code> / <code>ThroughputCapacityPerHAPair</code> is not a valid HA pair (a value between 1 and 12).</p></li>
    /// <li>
    /// <p>The value of <code>ThroughputCapacityPerHAPair</code> is not a valid value.</p></li>
    /// </ul>
    pub fn set_throughput_capacity_per_ha_pair(mut self, input: ::std::option::Option<i32>) -> Self {
        self.throughput_capacity_per_ha_pair = input;
        self
    }
    /// <p>Use to choose the throughput capacity per HA pair, rather than the total throughput for the file system.</p>
    /// <p>You can define either the <code>ThroughputCapacityPerHAPair</code> or the <code>ThroughputCapacity</code> when creating a file system, but not both.</p>
    /// <p>This field and <code>ThroughputCapacity</code> are the same for file systems powered by one HA pair.</p>
    /// <ul>
    /// <li>
    /// <p>For <code>SINGLE_AZ_1</code> and <code>MULTI_AZ_1</code> file systems, valid values are 128, 256, 512, 1024, 2048, or 4096 MBps.</p></li>
    /// <li>
    /// <p>For <code>SINGLE_AZ_2</code>, valid values are 1536, 3072, or 6144 MBps.</p></li>
    /// <li>
    /// <p>For <code>MULTI_AZ_2</code>, valid values are 384, 768, 1536, 3072, or 6144 MBps.</p></li>
    /// </ul>
    /// <p>Amazon FSx responds with an HTTP status code 400 (Bad Request) for the following conditions:</p>
    /// <ul>
    /// <li>
    /// <p>The value of <code>ThroughputCapacity</code> and <code>ThroughputCapacityPerHAPair</code> are not the same value for file systems with one HA pair.</p></li>
    /// <li>
    /// <p>The value of deployment type is <code>SINGLE_AZ_2</code> and <code>ThroughputCapacity</code> / <code>ThroughputCapacityPerHAPair</code> is not a valid HA pair (a value between 1 and 12).</p></li>
    /// <li>
    /// <p>The value of <code>ThroughputCapacityPerHAPair</code> is not a valid value.</p></li>
    /// </ul>
    pub fn get_throughput_capacity_per_ha_pair(&self) -> &::std::option::Option<i32> {
        &self.throughput_capacity_per_ha_pair
    }
    /// Consumes the builder and constructs a [`CreateFileSystemOntapConfiguration`](crate::types::CreateFileSystemOntapConfiguration).
    pub fn build(self) -> crate::types::CreateFileSystemOntapConfiguration {
        crate::types::CreateFileSystemOntapConfiguration {
            automatic_backup_retention_days: self.automatic_backup_retention_days,
            daily_automatic_backup_start_time: self.daily_automatic_backup_start_time,
            deployment_type: self.deployment_type,
            endpoint_ip_address_range: self.endpoint_ip_address_range,
            fsx_admin_password: self.fsx_admin_password,
            disk_iops_configuration: self.disk_iops_configuration,
            preferred_subnet_id: self.preferred_subnet_id,
            route_table_ids: self.route_table_ids,
            throughput_capacity: self.throughput_capacity,
            weekly_maintenance_start_time: self.weekly_maintenance_start_time,
            ha_pairs: self.ha_pairs,
            throughput_capacity_per_ha_pair: self.throughput_capacity_per_ha_pair,
        }
    }
}
impl ::std::fmt::Debug for CreateFileSystemOntapConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateFileSystemOntapConfigurationBuilder");
        formatter.field("automatic_backup_retention_days", &self.automatic_backup_retention_days);
        formatter.field("daily_automatic_backup_start_time", &self.daily_automatic_backup_start_time);
        formatter.field("deployment_type", &self.deployment_type);
        formatter.field("endpoint_ip_address_range", &self.endpoint_ip_address_range);
        formatter.field("fsx_admin_password", &"*** Sensitive Data Redacted ***");
        formatter.field("disk_iops_configuration", &self.disk_iops_configuration);
        formatter.field("preferred_subnet_id", &self.preferred_subnet_id);
        formatter.field("route_table_ids", &self.route_table_ids);
        formatter.field("throughput_capacity", &self.throughput_capacity);
        formatter.field("weekly_maintenance_start_time", &self.weekly_maintenance_start_time);
        formatter.field("ha_pairs", &self.ha_pairs);
        formatter.field("throughput_capacity_per_ha_pair", &self.throughput_capacity_per_ha_pair);
        formatter.finish()
    }
}
