// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the FSx for OpenZFS volume that the S3 access point will be attached to, and the file system user identity.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateAndAttachS3AccessPointOpenZfsConfiguration {
    /// <p>The ID of the FSx for OpenZFS volume to which you want the S3 access point attached.</p>
    pub volume_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the file system user identity to use for authorizing file read and write requests that are made using this S3 access point.</p>
    pub file_system_identity: ::std::option::Option<crate::types::OpenZfsFileSystemIdentity>,
}
impl CreateAndAttachS3AccessPointOpenZfsConfiguration {
    /// <p>The ID of the FSx for OpenZFS volume to which you want the S3 access point attached.</p>
    pub fn volume_id(&self) -> ::std::option::Option<&str> {
        self.volume_id.as_deref()
    }
    /// <p>Specifies the file system user identity to use for authorizing file read and write requests that are made using this S3 access point.</p>
    pub fn file_system_identity(&self) -> ::std::option::Option<&crate::types::OpenZfsFileSystemIdentity> {
        self.file_system_identity.as_ref()
    }
}
impl CreateAndAttachS3AccessPointOpenZfsConfiguration {
    /// Creates a new builder-style object to manufacture [`CreateAndAttachS3AccessPointOpenZfsConfiguration`](crate::types::CreateAndAttachS3AccessPointOpenZfsConfiguration).
    pub fn builder() -> crate::types::builders::CreateAndAttachS3AccessPointOpenZfsConfigurationBuilder {
        crate::types::builders::CreateAndAttachS3AccessPointOpenZfsConfigurationBuilder::default()
    }
}

/// A builder for [`CreateAndAttachS3AccessPointOpenZfsConfiguration`](crate::types::CreateAndAttachS3AccessPointOpenZfsConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateAndAttachS3AccessPointOpenZfsConfigurationBuilder {
    pub(crate) volume_id: ::std::option::Option<::std::string::String>,
    pub(crate) file_system_identity: ::std::option::Option<crate::types::OpenZfsFileSystemIdentity>,
}
impl CreateAndAttachS3AccessPointOpenZfsConfigurationBuilder {
    /// <p>The ID of the FSx for OpenZFS volume to which you want the S3 access point attached.</p>
    /// This field is required.
    pub fn volume_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.volume_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the FSx for OpenZFS volume to which you want the S3 access point attached.</p>
    pub fn set_volume_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.volume_id = input;
        self
    }
    /// <p>The ID of the FSx for OpenZFS volume to which you want the S3 access point attached.</p>
    pub fn get_volume_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.volume_id
    }
    /// <p>Specifies the file system user identity to use for authorizing file read and write requests that are made using this S3 access point.</p>
    /// This field is required.
    pub fn file_system_identity(mut self, input: crate::types::OpenZfsFileSystemIdentity) -> Self {
        self.file_system_identity = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the file system user identity to use for authorizing file read and write requests that are made using this S3 access point.</p>
    pub fn set_file_system_identity(mut self, input: ::std::option::Option<crate::types::OpenZfsFileSystemIdentity>) -> Self {
        self.file_system_identity = input;
        self
    }
    /// <p>Specifies the file system user identity to use for authorizing file read and write requests that are made using this S3 access point.</p>
    pub fn get_file_system_identity(&self) -> &::std::option::Option<crate::types::OpenZfsFileSystemIdentity> {
        &self.file_system_identity
    }
    /// Consumes the builder and constructs a [`CreateAndAttachS3AccessPointOpenZfsConfiguration`](crate::types::CreateAndAttachS3AccessPointOpenZfsConfiguration).
    pub fn build(self) -> crate::types::CreateAndAttachS3AccessPointOpenZfsConfiguration {
        crate::types::CreateAndAttachS3AccessPointOpenZfsConfiguration {
            volume_id: self.volume_id,
            file_system_identity: self.file_system_identity,
        }
    }
}
