// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The FSx for OpenZFS file system user that is used for authorizing all file access requests that are made using the S3 access point.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OpenZfsPosixFileSystemUser {
    /// <p>The UID of the file system user.</p>
    pub uid: ::std::option::Option<i64>,
    /// <p>The GID of the file system user.</p>
    pub gid: ::std::option::Option<i64>,
    /// <p>The list of secondary GIDs for the file system user.</p>
    pub secondary_gids: ::std::option::Option<::std::vec::Vec<i64>>,
}
impl OpenZfsPosixFileSystemUser {
    /// <p>The UID of the file system user.</p>
    pub fn uid(&self) -> ::std::option::Option<i64> {
        self.uid
    }
    /// <p>The GID of the file system user.</p>
    pub fn gid(&self) -> ::std::option::Option<i64> {
        self.gid
    }
    /// <p>The list of secondary GIDs for the file system user.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.secondary_gids.is_none()`.
    pub fn secondary_gids(&self) -> &[i64] {
        self.secondary_gids.as_deref().unwrap_or_default()
    }
}
impl OpenZfsPosixFileSystemUser {
    /// Creates a new builder-style object to manufacture [`OpenZfsPosixFileSystemUser`](crate::types::OpenZfsPosixFileSystemUser).
    pub fn builder() -> crate::types::builders::OpenZfsPosixFileSystemUserBuilder {
        crate::types::builders::OpenZfsPosixFileSystemUserBuilder::default()
    }
}

/// A builder for [`OpenZfsPosixFileSystemUser`](crate::types::OpenZfsPosixFileSystemUser).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OpenZfsPosixFileSystemUserBuilder {
    pub(crate) uid: ::std::option::Option<i64>,
    pub(crate) gid: ::std::option::Option<i64>,
    pub(crate) secondary_gids: ::std::option::Option<::std::vec::Vec<i64>>,
}
impl OpenZfsPosixFileSystemUserBuilder {
    /// <p>The UID of the file system user.</p>
    /// This field is required.
    pub fn uid(mut self, input: i64) -> Self {
        self.uid = ::std::option::Option::Some(input);
        self
    }
    /// <p>The UID of the file system user.</p>
    pub fn set_uid(mut self, input: ::std::option::Option<i64>) -> Self {
        self.uid = input;
        self
    }
    /// <p>The UID of the file system user.</p>
    pub fn get_uid(&self) -> &::std::option::Option<i64> {
        &self.uid
    }
    /// <p>The GID of the file system user.</p>
    /// This field is required.
    pub fn gid(mut self, input: i64) -> Self {
        self.gid = ::std::option::Option::Some(input);
        self
    }
    /// <p>The GID of the file system user.</p>
    pub fn set_gid(mut self, input: ::std::option::Option<i64>) -> Self {
        self.gid = input;
        self
    }
    /// <p>The GID of the file system user.</p>
    pub fn get_gid(&self) -> &::std::option::Option<i64> {
        &self.gid
    }
    /// Appends an item to `secondary_gids`.
    ///
    /// To override the contents of this collection use [`set_secondary_gids`](Self::set_secondary_gids).
    ///
    /// <p>The list of secondary GIDs for the file system user.</p>
    pub fn secondary_gids(mut self, input: i64) -> Self {
        let mut v = self.secondary_gids.unwrap_or_default();
        v.push(input);
        self.secondary_gids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of secondary GIDs for the file system user.</p>
    pub fn set_secondary_gids(mut self, input: ::std::option::Option<::std::vec::Vec<i64>>) -> Self {
        self.secondary_gids = input;
        self
    }
    /// <p>The list of secondary GIDs for the file system user.</p>
    pub fn get_secondary_gids(&self) -> &::std::option::Option<::std::vec::Vec<i64>> {
        &self.secondary_gids
    }
    /// Consumes the builder and constructs a [`OpenZfsPosixFileSystemUser`](crate::types::OpenZfsPosixFileSystemUser).
    pub fn build(self) -> crate::types::OpenZfsPosixFileSystemUser {
        crate::types::OpenZfsPosixFileSystemUser {
            uid: self.uid,
            gid: self.gid,
            secondary_gids: self.secondary_gids,
        }
    }
}
