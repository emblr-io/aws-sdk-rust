// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeS3AccessPointAttachmentsInput {
    /// <p>The names of the S3 access point attachments whose descriptions you want to retrieve.</p>
    pub names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Enter a filter Name and Values pair to view a select set of S3 access point attachments.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::S3AccessPointAttachmentsFilter>>,
    /// <p>The maximum number of resources to return in the response. This value must be an integer greater than zero.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>(Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous <code>NextToken</code> value left off.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl DescribeS3AccessPointAttachmentsInput {
    /// <p>The names of the S3 access point attachments whose descriptions you want to retrieve.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.names.is_none()`.
    pub fn names(&self) -> &[::std::string::String] {
        self.names.as_deref().unwrap_or_default()
    }
    /// <p>Enter a filter Name and Values pair to view a select set of S3 access point attachments.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::S3AccessPointAttachmentsFilter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>The maximum number of resources to return in the response. This value must be an integer greater than zero.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>(Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous <code>NextToken</code> value left off.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl DescribeS3AccessPointAttachmentsInput {
    /// Creates a new builder-style object to manufacture [`DescribeS3AccessPointAttachmentsInput`](crate::operation::describe_s3_access_point_attachments::DescribeS3AccessPointAttachmentsInput).
    pub fn builder() -> crate::operation::describe_s3_access_point_attachments::builders::DescribeS3AccessPointAttachmentsInputBuilder {
        crate::operation::describe_s3_access_point_attachments::builders::DescribeS3AccessPointAttachmentsInputBuilder::default()
    }
}

/// A builder for [`DescribeS3AccessPointAttachmentsInput`](crate::operation::describe_s3_access_point_attachments::DescribeS3AccessPointAttachmentsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeS3AccessPointAttachmentsInputBuilder {
    pub(crate) names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::S3AccessPointAttachmentsFilter>>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl DescribeS3AccessPointAttachmentsInputBuilder {
    /// Appends an item to `names`.
    ///
    /// To override the contents of this collection use [`set_names`](Self::set_names).
    ///
    /// <p>The names of the S3 access point attachments whose descriptions you want to retrieve.</p>
    pub fn names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.names.unwrap_or_default();
        v.push(input.into());
        self.names = ::std::option::Option::Some(v);
        self
    }
    /// <p>The names of the S3 access point attachments whose descriptions you want to retrieve.</p>
    pub fn set_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.names = input;
        self
    }
    /// <p>The names of the S3 access point attachments whose descriptions you want to retrieve.</p>
    pub fn get_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.names
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>Enter a filter Name and Values pair to view a select set of S3 access point attachments.</p>
    pub fn filters(mut self, input: crate::types::S3AccessPointAttachmentsFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Enter a filter Name and Values pair to view a select set of S3 access point attachments.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::S3AccessPointAttachmentsFilter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>Enter a filter Name and Values pair to view a select set of S3 access point attachments.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::S3AccessPointAttachmentsFilter>> {
        &self.filters
    }
    /// <p>The maximum number of resources to return in the response. This value must be an integer greater than zero.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of resources to return in the response. This value must be an integer greater than zero.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of resources to return in the response. This value must be an integer greater than zero.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>(Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous <code>NextToken</code> value left off.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>(Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous <code>NextToken</code> value left off.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>(Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous <code>NextToken</code> value left off.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`DescribeS3AccessPointAttachmentsInput`](crate::operation::describe_s3_access_point_attachments::DescribeS3AccessPointAttachmentsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_s3_access_point_attachments::DescribeS3AccessPointAttachmentsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::describe_s3_access_point_attachments::DescribeS3AccessPointAttachmentsInput {
                names: self.names,
                filters: self.filters,
                max_results: self.max_results,
                next_token: self.next_token,
            },
        )
    }
}
