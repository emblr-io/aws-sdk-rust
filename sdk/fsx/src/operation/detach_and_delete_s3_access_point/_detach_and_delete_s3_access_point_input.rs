// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DetachAndDeleteS3AccessPointInput {
    /// <p>(Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
    /// <p>The name of the S3 access point attachment that you want to delete.</p>
    pub name: ::std::option::Option<::std::string::String>,
}
impl DetachAndDeleteS3AccessPointInput {
    /// <p>(Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>The name of the S3 access point attachment that you want to delete.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl DetachAndDeleteS3AccessPointInput {
    /// Creates a new builder-style object to manufacture [`DetachAndDeleteS3AccessPointInput`](crate::operation::detach_and_delete_s3_access_point::DetachAndDeleteS3AccessPointInput).
    pub fn builder() -> crate::operation::detach_and_delete_s3_access_point::builders::DetachAndDeleteS3AccessPointInputBuilder {
        crate::operation::detach_and_delete_s3_access_point::builders::DetachAndDeleteS3AccessPointInputBuilder::default()
    }
}

/// A builder for [`DetachAndDeleteS3AccessPointInput`](crate::operation::detach_and_delete_s3_access_point::DetachAndDeleteS3AccessPointInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DetachAndDeleteS3AccessPointInputBuilder {
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
}
impl DetachAndDeleteS3AccessPointInputBuilder {
    /// <p>(Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>(Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>(Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// <p>The name of the S3 access point attachment that you want to delete.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the S3 access point attachment that you want to delete.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the S3 access point attachment that you want to delete.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Consumes the builder and constructs a [`DetachAndDeleteS3AccessPointInput`](crate::operation::detach_and_delete_s3_access_point::DetachAndDeleteS3AccessPointInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::detach_and_delete_s3_access_point::DetachAndDeleteS3AccessPointInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::detach_and_delete_s3_access_point::DetachAndDeleteS3AccessPointInput {
            client_request_token: self.client_request_token,
            name: self.name,
        })
    }
}
