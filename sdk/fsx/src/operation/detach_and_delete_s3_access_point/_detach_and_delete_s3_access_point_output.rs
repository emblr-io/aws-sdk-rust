// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DetachAndDeleteS3AccessPointOutput {
    /// <p>The lifecycle status of the S3 access point attachment.</p>
    pub lifecycle: ::std::option::Option<crate::types::S3AccessPointAttachmentLifecycle>,
    /// <p>The name of the S3 access point attachment being deleted.</p>
    pub name: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DetachAndDeleteS3AccessPointOutput {
    /// <p>The lifecycle status of the S3 access point attachment.</p>
    pub fn lifecycle(&self) -> ::std::option::Option<&crate::types::S3AccessPointAttachmentLifecycle> {
        self.lifecycle.as_ref()
    }
    /// <p>The name of the S3 access point attachment being deleted.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for DetachAndDeleteS3AccessPointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DetachAndDeleteS3AccessPointOutput {
    /// Creates a new builder-style object to manufacture [`DetachAndDeleteS3AccessPointOutput`](crate::operation::detach_and_delete_s3_access_point::DetachAndDeleteS3AccessPointOutput).
    pub fn builder() -> crate::operation::detach_and_delete_s3_access_point::builders::DetachAndDeleteS3AccessPointOutputBuilder {
        crate::operation::detach_and_delete_s3_access_point::builders::DetachAndDeleteS3AccessPointOutputBuilder::default()
    }
}

/// A builder for [`DetachAndDeleteS3AccessPointOutput`](crate::operation::detach_and_delete_s3_access_point::DetachAndDeleteS3AccessPointOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DetachAndDeleteS3AccessPointOutputBuilder {
    pub(crate) lifecycle: ::std::option::Option<crate::types::S3AccessPointAttachmentLifecycle>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DetachAndDeleteS3AccessPointOutputBuilder {
    /// <p>The lifecycle status of the S3 access point attachment.</p>
    pub fn lifecycle(mut self, input: crate::types::S3AccessPointAttachmentLifecycle) -> Self {
        self.lifecycle = ::std::option::Option::Some(input);
        self
    }
    /// <p>The lifecycle status of the S3 access point attachment.</p>
    pub fn set_lifecycle(mut self, input: ::std::option::Option<crate::types::S3AccessPointAttachmentLifecycle>) -> Self {
        self.lifecycle = input;
        self
    }
    /// <p>The lifecycle status of the S3 access point attachment.</p>
    pub fn get_lifecycle(&self) -> &::std::option::Option<crate::types::S3AccessPointAttachmentLifecycle> {
        &self.lifecycle
    }
    /// <p>The name of the S3 access point attachment being deleted.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the S3 access point attachment being deleted.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the S3 access point attachment being deleted.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DetachAndDeleteS3AccessPointOutput`](crate::operation::detach_and_delete_s3_access_point::DetachAndDeleteS3AccessPointOutput).
    pub fn build(self) -> crate::operation::detach_and_delete_s3_access_point::DetachAndDeleteS3AccessPointOutput {
        crate::operation::detach_and_delete_s3_access_point::DetachAndDeleteS3AccessPointOutput {
            lifecycle: self.lifecycle,
            name: self.name,
            _request_id: self._request_id,
        }
    }
}
