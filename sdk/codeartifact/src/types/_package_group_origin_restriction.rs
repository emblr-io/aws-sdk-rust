// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the configured restrictions of the origin controls of a package group.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PackageGroupOriginRestriction {
    /// <p>The package group origin restriction setting. If the value of <code>mode</code> is <code>ALLOW</code>, <code>ALLOW_SPECIFIC_REPOSITORIES</code>, or <code>BLOCK</code>, then the value of <code>effectiveMode</code> is the same. Otherwise, when the value is <code>INHERIT</code>, then the value of <code>effectiveMode</code> is the value of <code>mode</code> of the first parent group which does not have a value of <code>INHERIT</code>.</p>
    pub mode: ::std::option::Option<crate::types::PackageGroupOriginRestrictionMode>,
    /// <p>The effective package group origin restriction setting. If the value of <code>mode</code> is <code>ALLOW</code>, <code>ALLOW_SPECIFIC_REPOSITORIES</code>, or <code>BLOCK</code>, then the value of <code>effectiveMode</code> is the same. Otherwise, when the value of <code>mode</code> is <code>INHERIT</code>, then the value of <code>effectiveMode</code> is the value of <code>mode</code> of the first parent group which does not have a value of <code>INHERIT</code>.</p>
    pub effective_mode: ::std::option::Option<crate::types::PackageGroupOriginRestrictionMode>,
    /// <p>The parent package group that the package group origin restrictions are inherited from.</p>
    pub inherited_from: ::std::option::Option<crate::types::PackageGroupReference>,
    /// <p>The number of repositories in the allowed repository list.</p>
    pub repositories_count: ::std::option::Option<i64>,
}
impl PackageGroupOriginRestriction {
    /// <p>The package group origin restriction setting. If the value of <code>mode</code> is <code>ALLOW</code>, <code>ALLOW_SPECIFIC_REPOSITORIES</code>, or <code>BLOCK</code>, then the value of <code>effectiveMode</code> is the same. Otherwise, when the value is <code>INHERIT</code>, then the value of <code>effectiveMode</code> is the value of <code>mode</code> of the first parent group which does not have a value of <code>INHERIT</code>.</p>
    pub fn mode(&self) -> ::std::option::Option<&crate::types::PackageGroupOriginRestrictionMode> {
        self.mode.as_ref()
    }
    /// <p>The effective package group origin restriction setting. If the value of <code>mode</code> is <code>ALLOW</code>, <code>ALLOW_SPECIFIC_REPOSITORIES</code>, or <code>BLOCK</code>, then the value of <code>effectiveMode</code> is the same. Otherwise, when the value of <code>mode</code> is <code>INHERIT</code>, then the value of <code>effectiveMode</code> is the value of <code>mode</code> of the first parent group which does not have a value of <code>INHERIT</code>.</p>
    pub fn effective_mode(&self) -> ::std::option::Option<&crate::types::PackageGroupOriginRestrictionMode> {
        self.effective_mode.as_ref()
    }
    /// <p>The parent package group that the package group origin restrictions are inherited from.</p>
    pub fn inherited_from(&self) -> ::std::option::Option<&crate::types::PackageGroupReference> {
        self.inherited_from.as_ref()
    }
    /// <p>The number of repositories in the allowed repository list.</p>
    pub fn repositories_count(&self) -> ::std::option::Option<i64> {
        self.repositories_count
    }
}
impl PackageGroupOriginRestriction {
    /// Creates a new builder-style object to manufacture [`PackageGroupOriginRestriction`](crate::types::PackageGroupOriginRestriction).
    pub fn builder() -> crate::types::builders::PackageGroupOriginRestrictionBuilder {
        crate::types::builders::PackageGroupOriginRestrictionBuilder::default()
    }
}

/// A builder for [`PackageGroupOriginRestriction`](crate::types::PackageGroupOriginRestriction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PackageGroupOriginRestrictionBuilder {
    pub(crate) mode: ::std::option::Option<crate::types::PackageGroupOriginRestrictionMode>,
    pub(crate) effective_mode: ::std::option::Option<crate::types::PackageGroupOriginRestrictionMode>,
    pub(crate) inherited_from: ::std::option::Option<crate::types::PackageGroupReference>,
    pub(crate) repositories_count: ::std::option::Option<i64>,
}
impl PackageGroupOriginRestrictionBuilder {
    /// <p>The package group origin restriction setting. If the value of <code>mode</code> is <code>ALLOW</code>, <code>ALLOW_SPECIFIC_REPOSITORIES</code>, or <code>BLOCK</code>, then the value of <code>effectiveMode</code> is the same. Otherwise, when the value is <code>INHERIT</code>, then the value of <code>effectiveMode</code> is the value of <code>mode</code> of the first parent group which does not have a value of <code>INHERIT</code>.</p>
    pub fn mode(mut self, input: crate::types::PackageGroupOriginRestrictionMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The package group origin restriction setting. If the value of <code>mode</code> is <code>ALLOW</code>, <code>ALLOW_SPECIFIC_REPOSITORIES</code>, or <code>BLOCK</code>, then the value of <code>effectiveMode</code> is the same. Otherwise, when the value is <code>INHERIT</code>, then the value of <code>effectiveMode</code> is the value of <code>mode</code> of the first parent group which does not have a value of <code>INHERIT</code>.</p>
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::PackageGroupOriginRestrictionMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>The package group origin restriction setting. If the value of <code>mode</code> is <code>ALLOW</code>, <code>ALLOW_SPECIFIC_REPOSITORIES</code>, or <code>BLOCK</code>, then the value of <code>effectiveMode</code> is the same. Otherwise, when the value is <code>INHERIT</code>, then the value of <code>effectiveMode</code> is the value of <code>mode</code> of the first parent group which does not have a value of <code>INHERIT</code>.</p>
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::PackageGroupOriginRestrictionMode> {
        &self.mode
    }
    /// <p>The effective package group origin restriction setting. If the value of <code>mode</code> is <code>ALLOW</code>, <code>ALLOW_SPECIFIC_REPOSITORIES</code>, or <code>BLOCK</code>, then the value of <code>effectiveMode</code> is the same. Otherwise, when the value of <code>mode</code> is <code>INHERIT</code>, then the value of <code>effectiveMode</code> is the value of <code>mode</code> of the first parent group which does not have a value of <code>INHERIT</code>.</p>
    pub fn effective_mode(mut self, input: crate::types::PackageGroupOriginRestrictionMode) -> Self {
        self.effective_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The effective package group origin restriction setting. If the value of <code>mode</code> is <code>ALLOW</code>, <code>ALLOW_SPECIFIC_REPOSITORIES</code>, or <code>BLOCK</code>, then the value of <code>effectiveMode</code> is the same. Otherwise, when the value of <code>mode</code> is <code>INHERIT</code>, then the value of <code>effectiveMode</code> is the value of <code>mode</code> of the first parent group which does not have a value of <code>INHERIT</code>.</p>
    pub fn set_effective_mode(mut self, input: ::std::option::Option<crate::types::PackageGroupOriginRestrictionMode>) -> Self {
        self.effective_mode = input;
        self
    }
    /// <p>The effective package group origin restriction setting. If the value of <code>mode</code> is <code>ALLOW</code>, <code>ALLOW_SPECIFIC_REPOSITORIES</code>, or <code>BLOCK</code>, then the value of <code>effectiveMode</code> is the same. Otherwise, when the value of <code>mode</code> is <code>INHERIT</code>, then the value of <code>effectiveMode</code> is the value of <code>mode</code> of the first parent group which does not have a value of <code>INHERIT</code>.</p>
    pub fn get_effective_mode(&self) -> &::std::option::Option<crate::types::PackageGroupOriginRestrictionMode> {
        &self.effective_mode
    }
    /// <p>The parent package group that the package group origin restrictions are inherited from.</p>
    pub fn inherited_from(mut self, input: crate::types::PackageGroupReference) -> Self {
        self.inherited_from = ::std::option::Option::Some(input);
        self
    }
    /// <p>The parent package group that the package group origin restrictions are inherited from.</p>
    pub fn set_inherited_from(mut self, input: ::std::option::Option<crate::types::PackageGroupReference>) -> Self {
        self.inherited_from = input;
        self
    }
    /// <p>The parent package group that the package group origin restrictions are inherited from.</p>
    pub fn get_inherited_from(&self) -> &::std::option::Option<crate::types::PackageGroupReference> {
        &self.inherited_from
    }
    /// <p>The number of repositories in the allowed repository list.</p>
    pub fn repositories_count(mut self, input: i64) -> Self {
        self.repositories_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of repositories in the allowed repository list.</p>
    pub fn set_repositories_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.repositories_count = input;
        self
    }
    /// <p>The number of repositories in the allowed repository list.</p>
    pub fn get_repositories_count(&self) -> &::std::option::Option<i64> {
        &self.repositories_count
    }
    /// Consumes the builder and constructs a [`PackageGroupOriginRestriction`](crate::types::PackageGroupOriginRestriction).
    pub fn build(self) -> crate::types::PackageGroupOriginRestriction {
        crate::types::PackageGroupOriginRestriction {
            mode: self.mode,
            effective_mode: self.effective_mode,
            inherited_from: self.inherited_from,
            repositories_count: self.repositories_count,
        }
    }
}
