// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The package group origin configuration that determines how package versions can enter repositories.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PackageGroupOriginConfiguration {
    /// <p>The origin configuration settings that determine how package versions can enter repositories.</p>
    pub restrictions: ::std::option::Option<
        ::std::collections::HashMap<crate::types::PackageGroupOriginRestrictionType, crate::types::PackageGroupOriginRestriction>,
    >,
}
impl PackageGroupOriginConfiguration {
    /// <p>The origin configuration settings that determine how package versions can enter repositories.</p>
    pub fn restrictions(
        &self,
    ) -> ::std::option::Option<
        &::std::collections::HashMap<crate::types::PackageGroupOriginRestrictionType, crate::types::PackageGroupOriginRestriction>,
    > {
        self.restrictions.as_ref()
    }
}
impl PackageGroupOriginConfiguration {
    /// Creates a new builder-style object to manufacture [`PackageGroupOriginConfiguration`](crate::types::PackageGroupOriginConfiguration).
    pub fn builder() -> crate::types::builders::PackageGroupOriginConfigurationBuilder {
        crate::types::builders::PackageGroupOriginConfigurationBuilder::default()
    }
}

/// A builder for [`PackageGroupOriginConfiguration`](crate::types::PackageGroupOriginConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PackageGroupOriginConfigurationBuilder {
    pub(crate) restrictions: ::std::option::Option<
        ::std::collections::HashMap<crate::types::PackageGroupOriginRestrictionType, crate::types::PackageGroupOriginRestriction>,
    >,
}
impl PackageGroupOriginConfigurationBuilder {
    /// Adds a key-value pair to `restrictions`.
    ///
    /// To override the contents of this collection use [`set_restrictions`](Self::set_restrictions).
    ///
    /// <p>The origin configuration settings that determine how package versions can enter repositories.</p>
    pub fn restrictions(mut self, k: crate::types::PackageGroupOriginRestrictionType, v: crate::types::PackageGroupOriginRestriction) -> Self {
        let mut hash_map = self.restrictions.unwrap_or_default();
        hash_map.insert(k, v);
        self.restrictions = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The origin configuration settings that determine how package versions can enter repositories.</p>
    pub fn set_restrictions(
        mut self,
        input: ::std::option::Option<
            ::std::collections::HashMap<crate::types::PackageGroupOriginRestrictionType, crate::types::PackageGroupOriginRestriction>,
        >,
    ) -> Self {
        self.restrictions = input;
        self
    }
    /// <p>The origin configuration settings that determine how package versions can enter repositories.</p>
    pub fn get_restrictions(
        &self,
    ) -> &::std::option::Option<
        ::std::collections::HashMap<crate::types::PackageGroupOriginRestrictionType, crate::types::PackageGroupOriginRestriction>,
    > {
        &self.restrictions
    }
    /// Consumes the builder and constructs a [`PackageGroupOriginConfiguration`](crate::types::PackageGroupOriginConfiguration).
    pub fn build(self) -> crate::types::PackageGroupOriginConfiguration {
        crate::types::PackageGroupOriginConfiguration {
            restrictions: self.restrictions,
        }
    }
}
