// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A package associated with a package group.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociatedPackage {
    /// <p>A format that specifies the type of the associated package.</p>
    pub format: ::std::option::Option<crate::types::PackageFormat>,
    /// <p>The namespace of the associated package. The package component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li>
    /// <p>The namespace of a Maven package version is its <code>groupId</code>.</p></li>
    /// <li>
    /// <p>The namespace of an npm or Swift package version is its <code>scope</code>.</p></li>
    /// <li>
    /// <p>The namespace of a generic package is its <code>namespace</code>.</p></li>
    /// <li>
    /// <p>Python, NuGet, Ruby, and Cargo package versions do not contain a corresponding component, package versions of those formats do not have a namespace.</p></li>
    /// </ul>
    pub namespace: ::std::option::Option<::std::string::String>,
    /// <p>The name of the associated package.</p>
    pub package: ::std::option::Option<::std::string::String>,
    /// <p>Describes the strength of the association between the package and package group. A strong match can be thought of as an exact match, and a weak match can be thought of as a variation match, for example, the package name matches a variation of the package group pattern. For more information about package group pattern matching, including strong and weak matches, see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/package-group-definition-syntax-matching-behavior.html">Package group definition syntax and matching behavior</a> in the <i>CodeArtifact User Guide</i>.</p>
    pub association_type: ::std::option::Option<crate::types::PackageGroupAssociationType>,
}
impl AssociatedPackage {
    /// <p>A format that specifies the type of the associated package.</p>
    pub fn format(&self) -> ::std::option::Option<&crate::types::PackageFormat> {
        self.format.as_ref()
    }
    /// <p>The namespace of the associated package. The package component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li>
    /// <p>The namespace of a Maven package version is its <code>groupId</code>.</p></li>
    /// <li>
    /// <p>The namespace of an npm or Swift package version is its <code>scope</code>.</p></li>
    /// <li>
    /// <p>The namespace of a generic package is its <code>namespace</code>.</p></li>
    /// <li>
    /// <p>Python, NuGet, Ruby, and Cargo package versions do not contain a corresponding component, package versions of those formats do not have a namespace.</p></li>
    /// </ul>
    pub fn namespace(&self) -> ::std::option::Option<&str> {
        self.namespace.as_deref()
    }
    /// <p>The name of the associated package.</p>
    pub fn package(&self) -> ::std::option::Option<&str> {
        self.package.as_deref()
    }
    /// <p>Describes the strength of the association between the package and package group. A strong match can be thought of as an exact match, and a weak match can be thought of as a variation match, for example, the package name matches a variation of the package group pattern. For more information about package group pattern matching, including strong and weak matches, see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/package-group-definition-syntax-matching-behavior.html">Package group definition syntax and matching behavior</a> in the <i>CodeArtifact User Guide</i>.</p>
    pub fn association_type(&self) -> ::std::option::Option<&crate::types::PackageGroupAssociationType> {
        self.association_type.as_ref()
    }
}
impl AssociatedPackage {
    /// Creates a new builder-style object to manufacture [`AssociatedPackage`](crate::types::AssociatedPackage).
    pub fn builder() -> crate::types::builders::AssociatedPackageBuilder {
        crate::types::builders::AssociatedPackageBuilder::default()
    }
}

/// A builder for [`AssociatedPackage`](crate::types::AssociatedPackage).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssociatedPackageBuilder {
    pub(crate) format: ::std::option::Option<crate::types::PackageFormat>,
    pub(crate) namespace: ::std::option::Option<::std::string::String>,
    pub(crate) package: ::std::option::Option<::std::string::String>,
    pub(crate) association_type: ::std::option::Option<crate::types::PackageGroupAssociationType>,
}
impl AssociatedPackageBuilder {
    /// <p>A format that specifies the type of the associated package.</p>
    pub fn format(mut self, input: crate::types::PackageFormat) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>A format that specifies the type of the associated package.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::PackageFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>A format that specifies the type of the associated package.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::PackageFormat> {
        &self.format
    }
    /// <p>The namespace of the associated package. The package component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li>
    /// <p>The namespace of a Maven package version is its <code>groupId</code>.</p></li>
    /// <li>
    /// <p>The namespace of an npm or Swift package version is its <code>scope</code>.</p></li>
    /// <li>
    /// <p>The namespace of a generic package is its <code>namespace</code>.</p></li>
    /// <li>
    /// <p>Python, NuGet, Ruby, and Cargo package versions do not contain a corresponding component, package versions of those formats do not have a namespace.</p></li>
    /// </ul>
    pub fn namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.namespace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The namespace of the associated package. The package component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li>
    /// <p>The namespace of a Maven package version is its <code>groupId</code>.</p></li>
    /// <li>
    /// <p>The namespace of an npm or Swift package version is its <code>scope</code>.</p></li>
    /// <li>
    /// <p>The namespace of a generic package is its <code>namespace</code>.</p></li>
    /// <li>
    /// <p>Python, NuGet, Ruby, and Cargo package versions do not contain a corresponding component, package versions of those formats do not have a namespace.</p></li>
    /// </ul>
    pub fn set_namespace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The namespace of the associated package. The package component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li>
    /// <p>The namespace of a Maven package version is its <code>groupId</code>.</p></li>
    /// <li>
    /// <p>The namespace of an npm or Swift package version is its <code>scope</code>.</p></li>
    /// <li>
    /// <p>The namespace of a generic package is its <code>namespace</code>.</p></li>
    /// <li>
    /// <p>Python, NuGet, Ruby, and Cargo package versions do not contain a corresponding component, package versions of those formats do not have a namespace.</p></li>
    /// </ul>
    pub fn get_namespace(&self) -> &::std::option::Option<::std::string::String> {
        &self.namespace
    }
    /// <p>The name of the associated package.</p>
    pub fn package(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the associated package.</p>
    pub fn set_package(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package = input;
        self
    }
    /// <p>The name of the associated package.</p>
    pub fn get_package(&self) -> &::std::option::Option<::std::string::String> {
        &self.package
    }
    /// <p>Describes the strength of the association between the package and package group. A strong match can be thought of as an exact match, and a weak match can be thought of as a variation match, for example, the package name matches a variation of the package group pattern. For more information about package group pattern matching, including strong and weak matches, see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/package-group-definition-syntax-matching-behavior.html">Package group definition syntax and matching behavior</a> in the <i>CodeArtifact User Guide</i>.</p>
    pub fn association_type(mut self, input: crate::types::PackageGroupAssociationType) -> Self {
        self.association_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the strength of the association between the package and package group. A strong match can be thought of as an exact match, and a weak match can be thought of as a variation match, for example, the package name matches a variation of the package group pattern. For more information about package group pattern matching, including strong and weak matches, see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/package-group-definition-syntax-matching-behavior.html">Package group definition syntax and matching behavior</a> in the <i>CodeArtifact User Guide</i>.</p>
    pub fn set_association_type(mut self, input: ::std::option::Option<crate::types::PackageGroupAssociationType>) -> Self {
        self.association_type = input;
        self
    }
    /// <p>Describes the strength of the association between the package and package group. A strong match can be thought of as an exact match, and a weak match can be thought of as a variation match, for example, the package name matches a variation of the package group pattern. For more information about package group pattern matching, including strong and weak matches, see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/package-group-definition-syntax-matching-behavior.html">Package group definition syntax and matching behavior</a> in the <i>CodeArtifact User Guide</i>.</p>
    pub fn get_association_type(&self) -> &::std::option::Option<crate::types::PackageGroupAssociationType> {
        &self.association_type
    }
    /// Consumes the builder and constructs a [`AssociatedPackage`](crate::types::AssociatedPackage).
    pub fn build(self) -> crate::types::AssociatedPackage {
        crate::types::AssociatedPackage {
            format: self.format,
            namespace: self.namespace,
            package: self.package,
            association_type: self.association_type,
        }
    }
}
