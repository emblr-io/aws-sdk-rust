// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a package group.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PackageGroupSummary {
    /// <p>The ARN of the package group.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The pattern of the package group. The pattern determines which packages are associated with the package group.</p>
    pub pattern: ::std::option::Option<::std::string::String>,
    /// <p>The domain that contains the package group.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub domain_owner: ::std::option::Option<::std::string::String>,
    /// <p>A timestamp that represents the date and time the repository was created.</p>
    pub created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The contact information of the package group.</p>
    pub contact_info: ::std::option::Option<::std::string::String>,
    /// <p>The description of the package group.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Details about the package origin configuration of a package group.</p>
    pub origin_configuration: ::std::option::Option<crate::types::PackageGroupOriginConfiguration>,
    /// <p>The direct parent package group of the package group.</p>
    pub parent: ::std::option::Option<crate::types::PackageGroupReference>,
}
impl PackageGroupSummary {
    /// <p>The ARN of the package group.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The pattern of the package group. The pattern determines which packages are associated with the package group.</p>
    pub fn pattern(&self) -> ::std::option::Option<&str> {
        self.pattern.as_deref()
    }
    /// <p>The domain that contains the package group.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn domain_owner(&self) -> ::std::option::Option<&str> {
        self.domain_owner.as_deref()
    }
    /// <p>A timestamp that represents the date and time the repository was created.</p>
    pub fn created_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The contact information of the package group.</p>
    pub fn contact_info(&self) -> ::std::option::Option<&str> {
        self.contact_info.as_deref()
    }
    /// <p>The description of the package group.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Details about the package origin configuration of a package group.</p>
    pub fn origin_configuration(&self) -> ::std::option::Option<&crate::types::PackageGroupOriginConfiguration> {
        self.origin_configuration.as_ref()
    }
    /// <p>The direct parent package group of the package group.</p>
    pub fn parent(&self) -> ::std::option::Option<&crate::types::PackageGroupReference> {
        self.parent.as_ref()
    }
}
impl PackageGroupSummary {
    /// Creates a new builder-style object to manufacture [`PackageGroupSummary`](crate::types::PackageGroupSummary).
    pub fn builder() -> crate::types::builders::PackageGroupSummaryBuilder {
        crate::types::builders::PackageGroupSummaryBuilder::default()
    }
}

/// A builder for [`PackageGroupSummary`](crate::types::PackageGroupSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PackageGroupSummaryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) pattern: ::std::option::Option<::std::string::String>,
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) domain_owner: ::std::option::Option<::std::string::String>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) contact_info: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) origin_configuration: ::std::option::Option<crate::types::PackageGroupOriginConfiguration>,
    pub(crate) parent: ::std::option::Option<crate::types::PackageGroupReference>,
}
impl PackageGroupSummaryBuilder {
    /// <p>The ARN of the package group.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the package group.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the package group.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The pattern of the package group. The pattern determines which packages are associated with the package group.</p>
    pub fn pattern(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pattern = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pattern of the package group. The pattern determines which packages are associated with the package group.</p>
    pub fn set_pattern(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pattern = input;
        self
    }
    /// <p>The pattern of the package group. The pattern determines which packages are associated with the package group.</p>
    pub fn get_pattern(&self) -> &::std::option::Option<::std::string::String> {
        &self.pattern
    }
    /// <p>The domain that contains the package group.</p>
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain that contains the package group.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The domain that contains the package group.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn domain_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn set_domain_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_owner = input;
        self
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn get_domain_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_owner
    }
    /// <p>A timestamp that represents the date and time the repository was created.</p>
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp that represents the date and time the repository was created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>A timestamp that represents the date and time the repository was created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The contact information of the package group.</p>
    pub fn contact_info(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.contact_info = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The contact information of the package group.</p>
    pub fn set_contact_info(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.contact_info = input;
        self
    }
    /// <p>The contact information of the package group.</p>
    pub fn get_contact_info(&self) -> &::std::option::Option<::std::string::String> {
        &self.contact_info
    }
    /// <p>The description of the package group.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the package group.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the package group.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Details about the package origin configuration of a package group.</p>
    pub fn origin_configuration(mut self, input: crate::types::PackageGroupOriginConfiguration) -> Self {
        self.origin_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the package origin configuration of a package group.</p>
    pub fn set_origin_configuration(mut self, input: ::std::option::Option<crate::types::PackageGroupOriginConfiguration>) -> Self {
        self.origin_configuration = input;
        self
    }
    /// <p>Details about the package origin configuration of a package group.</p>
    pub fn get_origin_configuration(&self) -> &::std::option::Option<crate::types::PackageGroupOriginConfiguration> {
        &self.origin_configuration
    }
    /// <p>The direct parent package group of the package group.</p>
    pub fn parent(mut self, input: crate::types::PackageGroupReference) -> Self {
        self.parent = ::std::option::Option::Some(input);
        self
    }
    /// <p>The direct parent package group of the package group.</p>
    pub fn set_parent(mut self, input: ::std::option::Option<crate::types::PackageGroupReference>) -> Self {
        self.parent = input;
        self
    }
    /// <p>The direct parent package group of the package group.</p>
    pub fn get_parent(&self) -> &::std::option::Option<crate::types::PackageGroupReference> {
        &self.parent
    }
    /// Consumes the builder and constructs a [`PackageGroupSummary`](crate::types::PackageGroupSummary).
    pub fn build(self) -> crate::types::PackageGroupSummary {
        crate::types::PackageGroupSummary {
            arn: self.arn,
            pattern: self.pattern,
            domain_name: self.domain_name,
            domain_owner: self.domain_owner,
            created_time: self.created_time,
            contact_info: self.contact_info,
            description: self.description,
            origin_configuration: self.origin_configuration,
            parent: self.parent,
        }
    }
}
