// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribePackageGroupInput {
    /// <p>The name of the domain that contains the package group.</p>
    pub domain: ::std::option::Option<::std::string::String>,
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub domain_owner: ::std::option::Option<::std::string::String>,
    /// <p>The pattern of the requested package group.</p>
    pub package_group: ::std::option::Option<::std::string::String>,
}
impl DescribePackageGroupInput {
    /// <p>The name of the domain that contains the package group.</p>
    pub fn domain(&self) -> ::std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn domain_owner(&self) -> ::std::option::Option<&str> {
        self.domain_owner.as_deref()
    }
    /// <p>The pattern of the requested package group.</p>
    pub fn package_group(&self) -> ::std::option::Option<&str> {
        self.package_group.as_deref()
    }
}
impl DescribePackageGroupInput {
    /// Creates a new builder-style object to manufacture [`DescribePackageGroupInput`](crate::operation::describe_package_group::DescribePackageGroupInput).
    pub fn builder() -> crate::operation::describe_package_group::builders::DescribePackageGroupInputBuilder {
        crate::operation::describe_package_group::builders::DescribePackageGroupInputBuilder::default()
    }
}

/// A builder for [`DescribePackageGroupInput`](crate::operation::describe_package_group::DescribePackageGroupInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribePackageGroupInputBuilder {
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) domain_owner: ::std::option::Option<::std::string::String>,
    pub(crate) package_group: ::std::option::Option<::std::string::String>,
}
impl DescribePackageGroupInputBuilder {
    /// <p>The name of the domain that contains the package group.</p>
    /// This field is required.
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the domain that contains the package group.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The name of the domain that contains the package group.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn domain_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn set_domain_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_owner = input;
        self
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn get_domain_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_owner
    }
    /// <p>The pattern of the requested package group.</p>
    /// This field is required.
    pub fn package_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pattern of the requested package group.</p>
    pub fn set_package_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_group = input;
        self
    }
    /// <p>The pattern of the requested package group.</p>
    pub fn get_package_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_group
    }
    /// Consumes the builder and constructs a [`DescribePackageGroupInput`](crate::operation::describe_package_group::DescribePackageGroupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_package_group::DescribePackageGroupInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::describe_package_group::DescribePackageGroupInput {
            domain: self.domain,
            domain_owner: self.domain_owner,
            package_group: self.package_group,
        })
    }
}
