// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListAssociatedPackagesInput {
    /// <p>The name of the domain that contains the package group from which to list associated packages.</p>
    pub domain: ::std::option::Option<::std::string::String>,
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub domain_owner: ::std::option::Option<::std::string::String>,
    /// <p>The pattern of the package group from which to list associated packages.</p>
    pub package_group: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return per page.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>When this flag is included, <code>ListAssociatedPackages</code> will return a list of packages that would be associated with a package group, even if it does not exist.</p>
    pub preview: ::std::option::Option<bool>,
}
impl ListAssociatedPackagesInput {
    /// <p>The name of the domain that contains the package group from which to list associated packages.</p>
    pub fn domain(&self) -> ::std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn domain_owner(&self) -> ::std::option::Option<&str> {
        self.domain_owner.as_deref()
    }
    /// <p>The pattern of the package group from which to list associated packages.</p>
    pub fn package_group(&self) -> ::std::option::Option<&str> {
        self.package_group.as_deref()
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>When this flag is included, <code>ListAssociatedPackages</code> will return a list of packages that would be associated with a package group, even if it does not exist.</p>
    pub fn preview(&self) -> ::std::option::Option<bool> {
        self.preview
    }
}
impl ListAssociatedPackagesInput {
    /// Creates a new builder-style object to manufacture [`ListAssociatedPackagesInput`](crate::operation::list_associated_packages::ListAssociatedPackagesInput).
    pub fn builder() -> crate::operation::list_associated_packages::builders::ListAssociatedPackagesInputBuilder {
        crate::operation::list_associated_packages::builders::ListAssociatedPackagesInputBuilder::default()
    }
}

/// A builder for [`ListAssociatedPackagesInput`](crate::operation::list_associated_packages::ListAssociatedPackagesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListAssociatedPackagesInputBuilder {
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) domain_owner: ::std::option::Option<::std::string::String>,
    pub(crate) package_group: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) preview: ::std::option::Option<bool>,
}
impl ListAssociatedPackagesInputBuilder {
    /// <p>The name of the domain that contains the package group from which to list associated packages.</p>
    /// This field is required.
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the domain that contains the package group from which to list associated packages.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The name of the domain that contains the package group from which to list associated packages.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn domain_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn set_domain_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_owner = input;
        self
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn get_domain_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_owner
    }
    /// <p>The pattern of the package group from which to list associated packages.</p>
    /// This field is required.
    pub fn package_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pattern of the package group from which to list associated packages.</p>
    pub fn set_package_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_group = input;
        self
    }
    /// <p>The pattern of the package group from which to list associated packages.</p>
    pub fn get_package_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_group
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>When this flag is included, <code>ListAssociatedPackages</code> will return a list of packages that would be associated with a package group, even if it does not exist.</p>
    pub fn preview(mut self, input: bool) -> Self {
        self.preview = ::std::option::Option::Some(input);
        self
    }
    /// <p>When this flag is included, <code>ListAssociatedPackages</code> will return a list of packages that would be associated with a package group, even if it does not exist.</p>
    pub fn set_preview(mut self, input: ::std::option::Option<bool>) -> Self {
        self.preview = input;
        self
    }
    /// <p>When this flag is included, <code>ListAssociatedPackages</code> will return a list of packages that would be associated with a package group, even if it does not exist.</p>
    pub fn get_preview(&self) -> &::std::option::Option<bool> {
        &self.preview
    }
    /// Consumes the builder and constructs a [`ListAssociatedPackagesInput`](crate::operation::list_associated_packages::ListAssociatedPackagesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_associated_packages::ListAssociatedPackagesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_associated_packages::ListAssociatedPackagesInput {
            domain: self.domain,
            domain_owner: self.domain_owner,
            package_group: self.package_group,
            max_results: self.max_results,
            next_token: self.next_token,
            preview: self.preview,
        })
    }
}
