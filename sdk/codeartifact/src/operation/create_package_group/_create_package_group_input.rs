// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreatePackageGroupInput {
    /// <p>The name of the domain in which you want to create a package group.</p>
    pub domain: ::std::option::Option<::std::string::String>,
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub domain_owner: ::std::option::Option<::std::string::String>,
    /// <p>The pattern of the package group to create. The pattern is also the identifier of the package group.</p>
    pub package_group: ::std::option::Option<::std::string::String>,
    /// <p>The contact information for the created package group.</p>
    pub contact_info: ::std::option::Option<::std::string::String>,
    /// <p>A description of the package group.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>One or more tag key-value pairs for the package group.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreatePackageGroupInput {
    /// <p>The name of the domain in which you want to create a package group.</p>
    pub fn domain(&self) -> ::std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn domain_owner(&self) -> ::std::option::Option<&str> {
        self.domain_owner.as_deref()
    }
    /// <p>The pattern of the package group to create. The pattern is also the identifier of the package group.</p>
    pub fn package_group(&self) -> ::std::option::Option<&str> {
        self.package_group.as_deref()
    }
    /// <p>The contact information for the created package group.</p>
    pub fn contact_info(&self) -> ::std::option::Option<&str> {
        self.contact_info.as_deref()
    }
    /// <p>A description of the package group.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>One or more tag key-value pairs for the package group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreatePackageGroupInput {
    /// Creates a new builder-style object to manufacture [`CreatePackageGroupInput`](crate::operation::create_package_group::CreatePackageGroupInput).
    pub fn builder() -> crate::operation::create_package_group::builders::CreatePackageGroupInputBuilder {
        crate::operation::create_package_group::builders::CreatePackageGroupInputBuilder::default()
    }
}

/// A builder for [`CreatePackageGroupInput`](crate::operation::create_package_group::CreatePackageGroupInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreatePackageGroupInputBuilder {
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) domain_owner: ::std::option::Option<::std::string::String>,
    pub(crate) package_group: ::std::option::Option<::std::string::String>,
    pub(crate) contact_info: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreatePackageGroupInputBuilder {
    /// <p>The name of the domain in which you want to create a package group.</p>
    /// This field is required.
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the domain in which you want to create a package group.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The name of the domain in which you want to create a package group.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn domain_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn set_domain_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_owner = input;
        self
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn get_domain_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_owner
    }
    /// <p>The pattern of the package group to create. The pattern is also the identifier of the package group.</p>
    /// This field is required.
    pub fn package_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pattern of the package group to create. The pattern is also the identifier of the package group.</p>
    pub fn set_package_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_group = input;
        self
    }
    /// <p>The pattern of the package group to create. The pattern is also the identifier of the package group.</p>
    pub fn get_package_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_group
    }
    /// <p>The contact information for the created package group.</p>
    pub fn contact_info(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.contact_info = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The contact information for the created package group.</p>
    pub fn set_contact_info(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.contact_info = input;
        self
    }
    /// <p>The contact information for the created package group.</p>
    pub fn get_contact_info(&self) -> &::std::option::Option<::std::string::String> {
        &self.contact_info
    }
    /// <p>A description of the package group.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the package group.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the package group.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>One or more tag key-value pairs for the package group.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more tag key-value pairs for the package group.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>One or more tag key-value pairs for the package group.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreatePackageGroupInput`](crate::operation::create_package_group::CreatePackageGroupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_package_group::CreatePackageGroupInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_package_group::CreatePackageGroupInput {
            domain: self.domain,
            domain_owner: self.domain_owner,
            package_group: self.package_group,
            contact_info: self.contact_info,
            description: self.description,
            tags: self.tags,
        })
    }
}
