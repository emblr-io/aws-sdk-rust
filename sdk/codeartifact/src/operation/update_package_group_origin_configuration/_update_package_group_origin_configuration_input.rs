// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdatePackageGroupOriginConfigurationInput {
    /// <p>The name of the domain which contains the package group for which to update the origin configuration.</p>
    pub domain: ::std::option::Option<::std::string::String>,
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub domain_owner: ::std::option::Option<::std::string::String>,
    /// <p>The pattern of the package group for which to update the origin configuration.</p>
    pub package_group: ::std::option::Option<::std::string::String>,
    /// <p>The origin configuration settings that determine how package versions can enter repositories.</p>
    pub restrictions: ::std::option::Option<
        ::std::collections::HashMap<crate::types::PackageGroupOriginRestrictionType, crate::types::PackageGroupOriginRestrictionMode>,
    >,
    /// <p>The repository name and restrictions to add to the allowed repository list of the specified package group.</p>
    pub add_allowed_repositories: ::std::option::Option<::std::vec::Vec<crate::types::PackageGroupAllowedRepository>>,
    /// <p>The repository name and restrictions to remove from the allowed repository list of the specified package group.</p>
    pub remove_allowed_repositories: ::std::option::Option<::std::vec::Vec<crate::types::PackageGroupAllowedRepository>>,
}
impl UpdatePackageGroupOriginConfigurationInput {
    /// <p>The name of the domain which contains the package group for which to update the origin configuration.</p>
    pub fn domain(&self) -> ::std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn domain_owner(&self) -> ::std::option::Option<&str> {
        self.domain_owner.as_deref()
    }
    /// <p>The pattern of the package group for which to update the origin configuration.</p>
    pub fn package_group(&self) -> ::std::option::Option<&str> {
        self.package_group.as_deref()
    }
    /// <p>The origin configuration settings that determine how package versions can enter repositories.</p>
    pub fn restrictions(
        &self,
    ) -> ::std::option::Option<
        &::std::collections::HashMap<crate::types::PackageGroupOriginRestrictionType, crate::types::PackageGroupOriginRestrictionMode>,
    > {
        self.restrictions.as_ref()
    }
    /// <p>The repository name and restrictions to add to the allowed repository list of the specified package group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.add_allowed_repositories.is_none()`.
    pub fn add_allowed_repositories(&self) -> &[crate::types::PackageGroupAllowedRepository] {
        self.add_allowed_repositories.as_deref().unwrap_or_default()
    }
    /// <p>The repository name and restrictions to remove from the allowed repository list of the specified package group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.remove_allowed_repositories.is_none()`.
    pub fn remove_allowed_repositories(&self) -> &[crate::types::PackageGroupAllowedRepository] {
        self.remove_allowed_repositories.as_deref().unwrap_or_default()
    }
}
impl UpdatePackageGroupOriginConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdatePackageGroupOriginConfigurationInput`](crate::operation::update_package_group_origin_configuration::UpdatePackageGroupOriginConfigurationInput).
    pub fn builder() -> crate::operation::update_package_group_origin_configuration::builders::UpdatePackageGroupOriginConfigurationInputBuilder {
        crate::operation::update_package_group_origin_configuration::builders::UpdatePackageGroupOriginConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdatePackageGroupOriginConfigurationInput`](crate::operation::update_package_group_origin_configuration::UpdatePackageGroupOriginConfigurationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdatePackageGroupOriginConfigurationInputBuilder {
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) domain_owner: ::std::option::Option<::std::string::String>,
    pub(crate) package_group: ::std::option::Option<::std::string::String>,
    pub(crate) restrictions: ::std::option::Option<
        ::std::collections::HashMap<crate::types::PackageGroupOriginRestrictionType, crate::types::PackageGroupOriginRestrictionMode>,
    >,
    pub(crate) add_allowed_repositories: ::std::option::Option<::std::vec::Vec<crate::types::PackageGroupAllowedRepository>>,
    pub(crate) remove_allowed_repositories: ::std::option::Option<::std::vec::Vec<crate::types::PackageGroupAllowedRepository>>,
}
impl UpdatePackageGroupOriginConfigurationInputBuilder {
    /// <p>The name of the domain which contains the package group for which to update the origin configuration.</p>
    /// This field is required.
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the domain which contains the package group for which to update the origin configuration.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The name of the domain which contains the package group for which to update the origin configuration.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn domain_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn set_domain_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_owner = input;
        self
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn get_domain_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_owner
    }
    /// <p>The pattern of the package group for which to update the origin configuration.</p>
    /// This field is required.
    pub fn package_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pattern of the package group for which to update the origin configuration.</p>
    pub fn set_package_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_group = input;
        self
    }
    /// <p>The pattern of the package group for which to update the origin configuration.</p>
    pub fn get_package_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_group
    }
    /// Adds a key-value pair to `restrictions`.
    ///
    /// To override the contents of this collection use [`set_restrictions`](Self::set_restrictions).
    ///
    /// <p>The origin configuration settings that determine how package versions can enter repositories.</p>
    pub fn restrictions(mut self, k: crate::types::PackageGroupOriginRestrictionType, v: crate::types::PackageGroupOriginRestrictionMode) -> Self {
        let mut hash_map = self.restrictions.unwrap_or_default();
        hash_map.insert(k, v);
        self.restrictions = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The origin configuration settings that determine how package versions can enter repositories.</p>
    pub fn set_restrictions(
        mut self,
        input: ::std::option::Option<
            ::std::collections::HashMap<crate::types::PackageGroupOriginRestrictionType, crate::types::PackageGroupOriginRestrictionMode>,
        >,
    ) -> Self {
        self.restrictions = input;
        self
    }
    /// <p>The origin configuration settings that determine how package versions can enter repositories.</p>
    pub fn get_restrictions(
        &self,
    ) -> &::std::option::Option<
        ::std::collections::HashMap<crate::types::PackageGroupOriginRestrictionType, crate::types::PackageGroupOriginRestrictionMode>,
    > {
        &self.restrictions
    }
    /// Appends an item to `add_allowed_repositories`.
    ///
    /// To override the contents of this collection use [`set_add_allowed_repositories`](Self::set_add_allowed_repositories).
    ///
    /// <p>The repository name and restrictions to add to the allowed repository list of the specified package group.</p>
    pub fn add_allowed_repositories(mut self, input: crate::types::PackageGroupAllowedRepository) -> Self {
        let mut v = self.add_allowed_repositories.unwrap_or_default();
        v.push(input);
        self.add_allowed_repositories = ::std::option::Option::Some(v);
        self
    }
    /// <p>The repository name and restrictions to add to the allowed repository list of the specified package group.</p>
    pub fn set_add_allowed_repositories(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::PackageGroupAllowedRepository>>,
    ) -> Self {
        self.add_allowed_repositories = input;
        self
    }
    /// <p>The repository name and restrictions to add to the allowed repository list of the specified package group.</p>
    pub fn get_add_allowed_repositories(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PackageGroupAllowedRepository>> {
        &self.add_allowed_repositories
    }
    /// Appends an item to `remove_allowed_repositories`.
    ///
    /// To override the contents of this collection use [`set_remove_allowed_repositories`](Self::set_remove_allowed_repositories).
    ///
    /// <p>The repository name and restrictions to remove from the allowed repository list of the specified package group.</p>
    pub fn remove_allowed_repositories(mut self, input: crate::types::PackageGroupAllowedRepository) -> Self {
        let mut v = self.remove_allowed_repositories.unwrap_or_default();
        v.push(input);
        self.remove_allowed_repositories = ::std::option::Option::Some(v);
        self
    }
    /// <p>The repository name and restrictions to remove from the allowed repository list of the specified package group.</p>
    pub fn set_remove_allowed_repositories(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::PackageGroupAllowedRepository>>,
    ) -> Self {
        self.remove_allowed_repositories = input;
        self
    }
    /// <p>The repository name and restrictions to remove from the allowed repository list of the specified package group.</p>
    pub fn get_remove_allowed_repositories(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PackageGroupAllowedRepository>> {
        &self.remove_allowed_repositories
    }
    /// Consumes the builder and constructs a [`UpdatePackageGroupOriginConfigurationInput`](crate::operation::update_package_group_origin_configuration::UpdatePackageGroupOriginConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_package_group_origin_configuration::UpdatePackageGroupOriginConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_package_group_origin_configuration::UpdatePackageGroupOriginConfigurationInput {
                domain: self.domain,
                domain_owner: self.domain_owner,
                package_group: self.package_group,
                restrictions: self.restrictions,
                add_allowed_repositories: self.add_allowed_repositories,
                remove_allowed_repositories: self.remove_allowed_repositories,
            },
        )
    }
}
