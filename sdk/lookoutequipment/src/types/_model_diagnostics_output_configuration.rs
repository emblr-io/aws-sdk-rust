// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Output configuration information for the pointwise model diagnostics for an Amazon Lookout for Equipment model.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModelDiagnosticsOutputConfiguration {
    /// <p>The Amazon S3 location for the pointwise model diagnostics.</p>
    pub s3_output_configuration: ::std::option::Option<crate::types::ModelDiagnosticsS3OutputConfiguration>,
    /// <p>The Amazon Web Services Key Management Service (KMS) key identifier to encrypt the pointwise model diagnostics files.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
}
impl ModelDiagnosticsOutputConfiguration {
    /// <p>The Amazon S3 location for the pointwise model diagnostics.</p>
    pub fn s3_output_configuration(&self) -> ::std::option::Option<&crate::types::ModelDiagnosticsS3OutputConfiguration> {
        self.s3_output_configuration.as_ref()
    }
    /// <p>The Amazon Web Services Key Management Service (KMS) key identifier to encrypt the pointwise model diagnostics files.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
}
impl ModelDiagnosticsOutputConfiguration {
    /// Creates a new builder-style object to manufacture [`ModelDiagnosticsOutputConfiguration`](crate::types::ModelDiagnosticsOutputConfiguration).
    pub fn builder() -> crate::types::builders::ModelDiagnosticsOutputConfigurationBuilder {
        crate::types::builders::ModelDiagnosticsOutputConfigurationBuilder::default()
    }
}

/// A builder for [`ModelDiagnosticsOutputConfiguration`](crate::types::ModelDiagnosticsOutputConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ModelDiagnosticsOutputConfigurationBuilder {
    pub(crate) s3_output_configuration: ::std::option::Option<crate::types::ModelDiagnosticsS3OutputConfiguration>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
}
impl ModelDiagnosticsOutputConfigurationBuilder {
    /// <p>The Amazon S3 location for the pointwise model diagnostics.</p>
    /// This field is required.
    pub fn s3_output_configuration(mut self, input: crate::types::ModelDiagnosticsS3OutputConfiguration) -> Self {
        self.s3_output_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon S3 location for the pointwise model diagnostics.</p>
    pub fn set_s3_output_configuration(mut self, input: ::std::option::Option<crate::types::ModelDiagnosticsS3OutputConfiguration>) -> Self {
        self.s3_output_configuration = input;
        self
    }
    /// <p>The Amazon S3 location for the pointwise model diagnostics.</p>
    pub fn get_s3_output_configuration(&self) -> &::std::option::Option<crate::types::ModelDiagnosticsS3OutputConfiguration> {
        &self.s3_output_configuration
    }
    /// <p>The Amazon Web Services Key Management Service (KMS) key identifier to encrypt the pointwise model diagnostics files.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Key Management Service (KMS) key identifier to encrypt the pointwise model diagnostics files.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The Amazon Web Services Key Management Service (KMS) key identifier to encrypt the pointwise model diagnostics files.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// Consumes the builder and constructs a [`ModelDiagnosticsOutputConfiguration`](crate::types::ModelDiagnosticsOutputConfiguration).
    pub fn build(self) -> crate::types::ModelDiagnosticsOutputConfiguration {
        crate::types::ModelDiagnosticsOutputConfiguration {
            s3_output_configuration: self.s3_output_configuration,
            kms_key_id: self.kms_key_id,
        }
    }
}
