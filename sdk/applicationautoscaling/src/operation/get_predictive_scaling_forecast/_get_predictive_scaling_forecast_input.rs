// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetPredictiveScalingForecastInput {
    /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided by your own application or service, use <code>custom-resource</code> instead.</p>
    pub service_namespace: ::std::option::Option<crate::types::ServiceNamespace>,
    /// <p>The identifier of the resource.</p>
    pub resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The scalable dimension.</p>
    pub scalable_dimension: ::std::option::Option<crate::types::ScalableDimension>,
    /// <p>The name of the policy.</p>
    pub policy_name: ::std::option::Option<::std::string::String>,
    /// <p>The inclusive start time of the time range for the forecast data to get. At most, the date and time can be one year before the current date and time</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is 30 days.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl GetPredictiveScalingForecastInput {
    /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided by your own application or service, use <code>custom-resource</code> instead.</p>
    pub fn service_namespace(&self) -> ::std::option::Option<&crate::types::ServiceNamespace> {
        self.service_namespace.as_ref()
    }
    /// <p>The identifier of the resource.</p>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The scalable dimension.</p>
    pub fn scalable_dimension(&self) -> ::std::option::Option<&crate::types::ScalableDimension> {
        self.scalable_dimension.as_ref()
    }
    /// <p>The name of the policy.</p>
    pub fn policy_name(&self) -> ::std::option::Option<&str> {
        self.policy_name.as_deref()
    }
    /// <p>The inclusive start time of the time range for the forecast data to get. At most, the date and time can be one year before the current date and time</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is 30 days.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
}
impl GetPredictiveScalingForecastInput {
    /// Creates a new builder-style object to manufacture [`GetPredictiveScalingForecastInput`](crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastInput).
    pub fn builder() -> crate::operation::get_predictive_scaling_forecast::builders::GetPredictiveScalingForecastInputBuilder {
        crate::operation::get_predictive_scaling_forecast::builders::GetPredictiveScalingForecastInputBuilder::default()
    }
}

/// A builder for [`GetPredictiveScalingForecastInput`](crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetPredictiveScalingForecastInputBuilder {
    pub(crate) service_namespace: ::std::option::Option<crate::types::ServiceNamespace>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) scalable_dimension: ::std::option::Option<crate::types::ScalableDimension>,
    pub(crate) policy_name: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl GetPredictiveScalingForecastInputBuilder {
    /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided by your own application or service, use <code>custom-resource</code> instead.</p>
    /// This field is required.
    pub fn service_namespace(mut self, input: crate::types::ServiceNamespace) -> Self {
        self.service_namespace = ::std::option::Option::Some(input);
        self
    }
    /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided by your own application or service, use <code>custom-resource</code> instead.</p>
    pub fn set_service_namespace(mut self, input: ::std::option::Option<crate::types::ServiceNamespace>) -> Self {
        self.service_namespace = input;
        self
    }
    /// <p>The namespace of the Amazon Web Services service that provides the resource. For a resource provided by your own application or service, use <code>custom-resource</code> instead.</p>
    pub fn get_service_namespace(&self) -> &::std::option::Option<crate::types::ServiceNamespace> {
        &self.service_namespace
    }
    /// <p>The identifier of the resource.</p>
    /// This field is required.
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the resource.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The identifier of the resource.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>The scalable dimension.</p>
    /// This field is required.
    pub fn scalable_dimension(mut self, input: crate::types::ScalableDimension) -> Self {
        self.scalable_dimension = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scalable dimension.</p>
    pub fn set_scalable_dimension(mut self, input: ::std::option::Option<crate::types::ScalableDimension>) -> Self {
        self.scalable_dimension = input;
        self
    }
    /// <p>The scalable dimension.</p>
    pub fn get_scalable_dimension(&self) -> &::std::option::Option<crate::types::ScalableDimension> {
        &self.scalable_dimension
    }
    /// <p>The name of the policy.</p>
    /// This field is required.
    pub fn policy_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the policy.</p>
    pub fn set_policy_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_name = input;
        self
    }
    /// <p>The name of the policy.</p>
    pub fn get_policy_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_name
    }
    /// <p>The inclusive start time of the time range for the forecast data to get. At most, the date and time can be one year before the current date and time</p>
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The inclusive start time of the time range for the forecast data to get. At most, the date and time can be one year before the current date and time</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The inclusive start time of the time range for the forecast data to get. At most, the date and time can be one year before the current date and time</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is 30 days.</p>
    /// This field is required.
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is 30 days.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is 30 days.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// Consumes the builder and constructs a [`GetPredictiveScalingForecastInput`](crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastInput {
            service_namespace: self.service_namespace,
            resource_id: self.resource_id,
            scalable_dimension: self.scalable_dimension,
            policy_name: self.policy_name,
            start_time: self.start_time,
            end_time: self.end_time,
        })
    }
}
