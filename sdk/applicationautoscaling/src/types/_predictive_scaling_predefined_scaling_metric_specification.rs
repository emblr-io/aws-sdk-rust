// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a scaling metric for a predictive scaling policy.</p>
/// <p>When returned in the output of <code>DescribePolicies</code>, it indicates that a predictive scaling policy uses individually specified load and scaling metrics instead of a metric pair.</p>
/// <p>The following predefined metrics are available for predictive scaling:</p>
/// <ul>
/// <li>
/// <p><code>ECSServiceAverageCPUUtilization</code></p></li>
/// <li>
/// <p><code>ECSServiceAverageMemoryUtilization</code></p></li>
/// <li>
/// <p><code>ECSServiceCPUUtilization</code></p></li>
/// <li>
/// <p><code>ECSServiceMemoryUtilization</code></p></li>
/// <li>
/// <p><code>ECSServiceTotalCPUUtilization</code></p></li>
/// <li>
/// <p><code>ECSServiceTotalMemoryUtilization</code></p></li>
/// <li>
/// <p><code>ALBRequestCount</code></p></li>
/// <li>
/// <p><code>ALBRequestCountPerTarget</code></p></li>
/// <li>
/// <p><code>TotalALBRequestCount</code></p></li>
/// </ul>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PredictiveScalingPredefinedScalingMetricSpecification {
    /// <p>The metric type.</p>
    pub predefined_metric_type: ::std::string::String,
    /// <p>A label that uniquely identifies a specific target group from which to determine the average request count.</p>
    pub resource_label: ::std::option::Option<::std::string::String>,
}
impl PredictiveScalingPredefinedScalingMetricSpecification {
    /// <p>The metric type.</p>
    pub fn predefined_metric_type(&self) -> &str {
        use std::ops::Deref;
        self.predefined_metric_type.deref()
    }
    /// <p>A label that uniquely identifies a specific target group from which to determine the average request count.</p>
    pub fn resource_label(&self) -> ::std::option::Option<&str> {
        self.resource_label.as_deref()
    }
}
impl PredictiveScalingPredefinedScalingMetricSpecification {
    /// Creates a new builder-style object to manufacture [`PredictiveScalingPredefinedScalingMetricSpecification`](crate::types::PredictiveScalingPredefinedScalingMetricSpecification).
    pub fn builder() -> crate::types::builders::PredictiveScalingPredefinedScalingMetricSpecificationBuilder {
        crate::types::builders::PredictiveScalingPredefinedScalingMetricSpecificationBuilder::default()
    }
}

/// A builder for [`PredictiveScalingPredefinedScalingMetricSpecification`](crate::types::PredictiveScalingPredefinedScalingMetricSpecification).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PredictiveScalingPredefinedScalingMetricSpecificationBuilder {
    pub(crate) predefined_metric_type: ::std::option::Option<::std::string::String>,
    pub(crate) resource_label: ::std::option::Option<::std::string::String>,
}
impl PredictiveScalingPredefinedScalingMetricSpecificationBuilder {
    /// <p>The metric type.</p>
    /// This field is required.
    pub fn predefined_metric_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.predefined_metric_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The metric type.</p>
    pub fn set_predefined_metric_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.predefined_metric_type = input;
        self
    }
    /// <p>The metric type.</p>
    pub fn get_predefined_metric_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.predefined_metric_type
    }
    /// <p>A label that uniquely identifies a specific target group from which to determine the average request count.</p>
    pub fn resource_label(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_label = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A label that uniquely identifies a specific target group from which to determine the average request count.</p>
    pub fn set_resource_label(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_label = input;
        self
    }
    /// <p>A label that uniquely identifies a specific target group from which to determine the average request count.</p>
    pub fn get_resource_label(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_label
    }
    /// Consumes the builder and constructs a [`PredictiveScalingPredefinedScalingMetricSpecification`](crate::types::PredictiveScalingPredefinedScalingMetricSpecification).
    /// This method will fail if any of the following fields are not set:
    /// - [`predefined_metric_type`](crate::types::builders::PredictiveScalingPredefinedScalingMetricSpecificationBuilder::predefined_metric_type)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::PredictiveScalingPredefinedScalingMetricSpecification, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::types::PredictiveScalingPredefinedScalingMetricSpecification {
            predefined_metric_type: self.predefined_metric_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "predefined_metric_type",
                    "predefined_metric_type was not specified but it is required when building PredictiveScalingPredefinedScalingMetricSpecification",
                )
            })?,
            resource_label: self.resource_label,
        })
    }
}
