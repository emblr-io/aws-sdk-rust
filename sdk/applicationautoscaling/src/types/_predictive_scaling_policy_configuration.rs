// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a predictive scaling policy configuration. Predictive scaling is supported on Amazon ECS services.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PredictiveScalingPolicyConfiguration {
    /// <p>This structure includes the metrics and target utilization to use for predictive scaling.</p>
    /// <p>This is an array, but we currently only support a single metric specification. That is, you can specify a target value and a single metric pair, or a target value and one scaling metric and one load metric.</p>
    pub metric_specifications: ::std::vec::Vec<crate::types::PredictiveScalingMetricSpecification>,
    /// <p>The predictive scaling mode. Defaults to <code>ForecastOnly</code> if not specified.</p>
    pub mode: ::std::option::Option<crate::types::PredictiveScalingMode>,
    /// <p>The amount of time, in seconds, that the start time can be advanced.</p>
    /// <p>The value must be less than the forecast interval duration of 3600 seconds (60 minutes). Defaults to 300 seconds if not specified.</p>
    pub scheduling_buffer_time: ::std::option::Option<i32>,
    /// <p>Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity. Defaults to <code>HonorMaxCapacity</code> if not specified.</p>
    pub max_capacity_breach_behavior: ::std::option::Option<crate::types::PredictiveScalingMaxCapacityBreachBehavior>,
    /// <p>The size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. For example, if the buffer is 10, this means a 10 percent buffer, such that if the forecast capacity is 50, and the maximum capacity is 40, then the effective maximum capacity is 55.</p>
    /// <p>Required if the <code>MaxCapacityBreachBehavior</code> property is set to <code>IncreaseMaxCapacity</code>, and cannot be used otherwise.</p>
    pub max_capacity_buffer: ::std::option::Option<i32>,
}
impl PredictiveScalingPolicyConfiguration {
    /// <p>This structure includes the metrics and target utilization to use for predictive scaling.</p>
    /// <p>This is an array, but we currently only support a single metric specification. That is, you can specify a target value and a single metric pair, or a target value and one scaling metric and one load metric.</p>
    pub fn metric_specifications(&self) -> &[crate::types::PredictiveScalingMetricSpecification] {
        use std::ops::Deref;
        self.metric_specifications.deref()
    }
    /// <p>The predictive scaling mode. Defaults to <code>ForecastOnly</code> if not specified.</p>
    pub fn mode(&self) -> ::std::option::Option<&crate::types::PredictiveScalingMode> {
        self.mode.as_ref()
    }
    /// <p>The amount of time, in seconds, that the start time can be advanced.</p>
    /// <p>The value must be less than the forecast interval duration of 3600 seconds (60 minutes). Defaults to 300 seconds if not specified.</p>
    pub fn scheduling_buffer_time(&self) -> ::std::option::Option<i32> {
        self.scheduling_buffer_time
    }
    /// <p>Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity. Defaults to <code>HonorMaxCapacity</code> if not specified.</p>
    pub fn max_capacity_breach_behavior(&self) -> ::std::option::Option<&crate::types::PredictiveScalingMaxCapacityBreachBehavior> {
        self.max_capacity_breach_behavior.as_ref()
    }
    /// <p>The size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. For example, if the buffer is 10, this means a 10 percent buffer, such that if the forecast capacity is 50, and the maximum capacity is 40, then the effective maximum capacity is 55.</p>
    /// <p>Required if the <code>MaxCapacityBreachBehavior</code> property is set to <code>IncreaseMaxCapacity</code>, and cannot be used otherwise.</p>
    pub fn max_capacity_buffer(&self) -> ::std::option::Option<i32> {
        self.max_capacity_buffer
    }
}
impl PredictiveScalingPolicyConfiguration {
    /// Creates a new builder-style object to manufacture [`PredictiveScalingPolicyConfiguration`](crate::types::PredictiveScalingPolicyConfiguration).
    pub fn builder() -> crate::types::builders::PredictiveScalingPolicyConfigurationBuilder {
        crate::types::builders::PredictiveScalingPolicyConfigurationBuilder::default()
    }
}

/// A builder for [`PredictiveScalingPolicyConfiguration`](crate::types::PredictiveScalingPolicyConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PredictiveScalingPolicyConfigurationBuilder {
    pub(crate) metric_specifications: ::std::option::Option<::std::vec::Vec<crate::types::PredictiveScalingMetricSpecification>>,
    pub(crate) mode: ::std::option::Option<crate::types::PredictiveScalingMode>,
    pub(crate) scheduling_buffer_time: ::std::option::Option<i32>,
    pub(crate) max_capacity_breach_behavior: ::std::option::Option<crate::types::PredictiveScalingMaxCapacityBreachBehavior>,
    pub(crate) max_capacity_buffer: ::std::option::Option<i32>,
}
impl PredictiveScalingPolicyConfigurationBuilder {
    /// Appends an item to `metric_specifications`.
    ///
    /// To override the contents of this collection use [`set_metric_specifications`](Self::set_metric_specifications).
    ///
    /// <p>This structure includes the metrics and target utilization to use for predictive scaling.</p>
    /// <p>This is an array, but we currently only support a single metric specification. That is, you can specify a target value and a single metric pair, or a target value and one scaling metric and one load metric.</p>
    pub fn metric_specifications(mut self, input: crate::types::PredictiveScalingMetricSpecification) -> Self {
        let mut v = self.metric_specifications.unwrap_or_default();
        v.push(input);
        self.metric_specifications = ::std::option::Option::Some(v);
        self
    }
    /// <p>This structure includes the metrics and target utilization to use for predictive scaling.</p>
    /// <p>This is an array, but we currently only support a single metric specification. That is, you can specify a target value and a single metric pair, or a target value and one scaling metric and one load metric.</p>
    pub fn set_metric_specifications(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::PredictiveScalingMetricSpecification>>,
    ) -> Self {
        self.metric_specifications = input;
        self
    }
    /// <p>This structure includes the metrics and target utilization to use for predictive scaling.</p>
    /// <p>This is an array, but we currently only support a single metric specification. That is, you can specify a target value and a single metric pair, or a target value and one scaling metric and one load metric.</p>
    pub fn get_metric_specifications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PredictiveScalingMetricSpecification>> {
        &self.metric_specifications
    }
    /// <p>The predictive scaling mode. Defaults to <code>ForecastOnly</code> if not specified.</p>
    pub fn mode(mut self, input: crate::types::PredictiveScalingMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The predictive scaling mode. Defaults to <code>ForecastOnly</code> if not specified.</p>
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::PredictiveScalingMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>The predictive scaling mode. Defaults to <code>ForecastOnly</code> if not specified.</p>
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::PredictiveScalingMode> {
        &self.mode
    }
    /// <p>The amount of time, in seconds, that the start time can be advanced.</p>
    /// <p>The value must be less than the forecast interval duration of 3600 seconds (60 minutes). Defaults to 300 seconds if not specified.</p>
    pub fn scheduling_buffer_time(mut self, input: i32) -> Self {
        self.scheduling_buffer_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of time, in seconds, that the start time can be advanced.</p>
    /// <p>The value must be less than the forecast interval duration of 3600 seconds (60 minutes). Defaults to 300 seconds if not specified.</p>
    pub fn set_scheduling_buffer_time(mut self, input: ::std::option::Option<i32>) -> Self {
        self.scheduling_buffer_time = input;
        self
    }
    /// <p>The amount of time, in seconds, that the start time can be advanced.</p>
    /// <p>The value must be less than the forecast interval duration of 3600 seconds (60 minutes). Defaults to 300 seconds if not specified.</p>
    pub fn get_scheduling_buffer_time(&self) -> &::std::option::Option<i32> {
        &self.scheduling_buffer_time
    }
    /// <p>Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity. Defaults to <code>HonorMaxCapacity</code> if not specified.</p>
    pub fn max_capacity_breach_behavior(mut self, input: crate::types::PredictiveScalingMaxCapacityBreachBehavior) -> Self {
        self.max_capacity_breach_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity. Defaults to <code>HonorMaxCapacity</code> if not specified.</p>
    pub fn set_max_capacity_breach_behavior(
        mut self,
        input: ::std::option::Option<crate::types::PredictiveScalingMaxCapacityBreachBehavior>,
    ) -> Self {
        self.max_capacity_breach_behavior = input;
        self
    }
    /// <p>Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity. Defaults to <code>HonorMaxCapacity</code> if not specified.</p>
    pub fn get_max_capacity_breach_behavior(&self) -> &::std::option::Option<crate::types::PredictiveScalingMaxCapacityBreachBehavior> {
        &self.max_capacity_breach_behavior
    }
    /// <p>The size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. For example, if the buffer is 10, this means a 10 percent buffer, such that if the forecast capacity is 50, and the maximum capacity is 40, then the effective maximum capacity is 55.</p>
    /// <p>Required if the <code>MaxCapacityBreachBehavior</code> property is set to <code>IncreaseMaxCapacity</code>, and cannot be used otherwise.</p>
    pub fn max_capacity_buffer(mut self, input: i32) -> Self {
        self.max_capacity_buffer = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. For example, if the buffer is 10, this means a 10 percent buffer, such that if the forecast capacity is 50, and the maximum capacity is 40, then the effective maximum capacity is 55.</p>
    /// <p>Required if the <code>MaxCapacityBreachBehavior</code> property is set to <code>IncreaseMaxCapacity</code>, and cannot be used otherwise.</p>
    pub fn set_max_capacity_buffer(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_capacity_buffer = input;
        self
    }
    /// <p>The size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. For example, if the buffer is 10, this means a 10 percent buffer, such that if the forecast capacity is 50, and the maximum capacity is 40, then the effective maximum capacity is 55.</p>
    /// <p>Required if the <code>MaxCapacityBreachBehavior</code> property is set to <code>IncreaseMaxCapacity</code>, and cannot be used otherwise.</p>
    pub fn get_max_capacity_buffer(&self) -> &::std::option::Option<i32> {
        &self.max_capacity_buffer
    }
    /// Consumes the builder and constructs a [`PredictiveScalingPolicyConfiguration`](crate::types::PredictiveScalingPolicyConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`metric_specifications`](crate::types::builders::PredictiveScalingPolicyConfigurationBuilder::metric_specifications)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::PredictiveScalingPolicyConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PredictiveScalingPolicyConfiguration {
            metric_specifications: self.metric_specifications.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metric_specifications",
                    "metric_specifications was not specified but it is required when building PredictiveScalingPolicyConfiguration",
                )
            })?,
            mode: self.mode,
            scheduling_buffer_time: self.scheduling_buffer_time,
            max_capacity_breach_behavior: self.max_capacity_breach_behavior,
            max_capacity_buffer: self.max_capacity_buffer,
        })
    }
}
