// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure specifies the metrics and target utilization settings for a predictive scaling policy.</p>
/// <p>You must specify either a metric pair, or a load metric and a scaling metric individually. Specifying a metric pair instead of individual metrics provides a simpler way to configure metrics for a scaling policy. You choose the metric pair, and the policy automatically knows the correct sum and average statistics to use for the load metric and the scaling metric.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PredictiveScalingMetricSpecification {
    /// <p>Specifies the target utilization.</p>
    pub target_value: f64,
    /// <p>The predefined metric pair specification that determines the appropriate scaling metric and load metric to use.</p>
    pub predefined_metric_pair_specification: ::std::option::Option<crate::types::PredictiveScalingPredefinedMetricPairSpecification>,
    /// <p>The predefined scaling metric specification.</p>
    pub predefined_scaling_metric_specification: ::std::option::Option<crate::types::PredictiveScalingPredefinedScalingMetricSpecification>,
    /// <p>The predefined load metric specification.</p>
    pub predefined_load_metric_specification: ::std::option::Option<crate::types::PredictiveScalingPredefinedLoadMetricSpecification>,
    /// <p>The customized scaling metric specification.</p>
    pub customized_scaling_metric_specification: ::std::option::Option<crate::types::PredictiveScalingCustomizedMetricSpecification>,
    /// <p>The customized load metric specification.</p>
    pub customized_load_metric_specification: ::std::option::Option<crate::types::PredictiveScalingCustomizedMetricSpecification>,
    /// <p>The customized capacity metric specification.</p>
    pub customized_capacity_metric_specification: ::std::option::Option<crate::types::PredictiveScalingCustomizedMetricSpecification>,
}
impl PredictiveScalingMetricSpecification {
    /// <p>Specifies the target utilization.</p>
    pub fn target_value(&self) -> f64 {
        self.target_value
    }
    /// <p>The predefined metric pair specification that determines the appropriate scaling metric and load metric to use.</p>
    pub fn predefined_metric_pair_specification(&self) -> ::std::option::Option<&crate::types::PredictiveScalingPredefinedMetricPairSpecification> {
        self.predefined_metric_pair_specification.as_ref()
    }
    /// <p>The predefined scaling metric specification.</p>
    pub fn predefined_scaling_metric_specification(
        &self,
    ) -> ::std::option::Option<&crate::types::PredictiveScalingPredefinedScalingMetricSpecification> {
        self.predefined_scaling_metric_specification.as_ref()
    }
    /// <p>The predefined load metric specification.</p>
    pub fn predefined_load_metric_specification(&self) -> ::std::option::Option<&crate::types::PredictiveScalingPredefinedLoadMetricSpecification> {
        self.predefined_load_metric_specification.as_ref()
    }
    /// <p>The customized scaling metric specification.</p>
    pub fn customized_scaling_metric_specification(&self) -> ::std::option::Option<&crate::types::PredictiveScalingCustomizedMetricSpecification> {
        self.customized_scaling_metric_specification.as_ref()
    }
    /// <p>The customized load metric specification.</p>
    pub fn customized_load_metric_specification(&self) -> ::std::option::Option<&crate::types::PredictiveScalingCustomizedMetricSpecification> {
        self.customized_load_metric_specification.as_ref()
    }
    /// <p>The customized capacity metric specification.</p>
    pub fn customized_capacity_metric_specification(&self) -> ::std::option::Option<&crate::types::PredictiveScalingCustomizedMetricSpecification> {
        self.customized_capacity_metric_specification.as_ref()
    }
}
impl PredictiveScalingMetricSpecification {
    /// Creates a new builder-style object to manufacture [`PredictiveScalingMetricSpecification`](crate::types::PredictiveScalingMetricSpecification).
    pub fn builder() -> crate::types::builders::PredictiveScalingMetricSpecificationBuilder {
        crate::types::builders::PredictiveScalingMetricSpecificationBuilder::default()
    }
}

/// A builder for [`PredictiveScalingMetricSpecification`](crate::types::PredictiveScalingMetricSpecification).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PredictiveScalingMetricSpecificationBuilder {
    pub(crate) target_value: ::std::option::Option<f64>,
    pub(crate) predefined_metric_pair_specification: ::std::option::Option<crate::types::PredictiveScalingPredefinedMetricPairSpecification>,
    pub(crate) predefined_scaling_metric_specification: ::std::option::Option<crate::types::PredictiveScalingPredefinedScalingMetricSpecification>,
    pub(crate) predefined_load_metric_specification: ::std::option::Option<crate::types::PredictiveScalingPredefinedLoadMetricSpecification>,
    pub(crate) customized_scaling_metric_specification: ::std::option::Option<crate::types::PredictiveScalingCustomizedMetricSpecification>,
    pub(crate) customized_load_metric_specification: ::std::option::Option<crate::types::PredictiveScalingCustomizedMetricSpecification>,
    pub(crate) customized_capacity_metric_specification: ::std::option::Option<crate::types::PredictiveScalingCustomizedMetricSpecification>,
}
impl PredictiveScalingMetricSpecificationBuilder {
    /// <p>Specifies the target utilization.</p>
    /// This field is required.
    pub fn target_value(mut self, input: f64) -> Self {
        self.target_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the target utilization.</p>
    pub fn set_target_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.target_value = input;
        self
    }
    /// <p>Specifies the target utilization.</p>
    pub fn get_target_value(&self) -> &::std::option::Option<f64> {
        &self.target_value
    }
    /// <p>The predefined metric pair specification that determines the appropriate scaling metric and load metric to use.</p>
    pub fn predefined_metric_pair_specification(mut self, input: crate::types::PredictiveScalingPredefinedMetricPairSpecification) -> Self {
        self.predefined_metric_pair_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>The predefined metric pair specification that determines the appropriate scaling metric and load metric to use.</p>
    pub fn set_predefined_metric_pair_specification(
        mut self,
        input: ::std::option::Option<crate::types::PredictiveScalingPredefinedMetricPairSpecification>,
    ) -> Self {
        self.predefined_metric_pair_specification = input;
        self
    }
    /// <p>The predefined metric pair specification that determines the appropriate scaling metric and load metric to use.</p>
    pub fn get_predefined_metric_pair_specification(
        &self,
    ) -> &::std::option::Option<crate::types::PredictiveScalingPredefinedMetricPairSpecification> {
        &self.predefined_metric_pair_specification
    }
    /// <p>The predefined scaling metric specification.</p>
    pub fn predefined_scaling_metric_specification(mut self, input: crate::types::PredictiveScalingPredefinedScalingMetricSpecification) -> Self {
        self.predefined_scaling_metric_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>The predefined scaling metric specification.</p>
    pub fn set_predefined_scaling_metric_specification(
        mut self,
        input: ::std::option::Option<crate::types::PredictiveScalingPredefinedScalingMetricSpecification>,
    ) -> Self {
        self.predefined_scaling_metric_specification = input;
        self
    }
    /// <p>The predefined scaling metric specification.</p>
    pub fn get_predefined_scaling_metric_specification(
        &self,
    ) -> &::std::option::Option<crate::types::PredictiveScalingPredefinedScalingMetricSpecification> {
        &self.predefined_scaling_metric_specification
    }
    /// <p>The predefined load metric specification.</p>
    pub fn predefined_load_metric_specification(mut self, input: crate::types::PredictiveScalingPredefinedLoadMetricSpecification) -> Self {
        self.predefined_load_metric_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>The predefined load metric specification.</p>
    pub fn set_predefined_load_metric_specification(
        mut self,
        input: ::std::option::Option<crate::types::PredictiveScalingPredefinedLoadMetricSpecification>,
    ) -> Self {
        self.predefined_load_metric_specification = input;
        self
    }
    /// <p>The predefined load metric specification.</p>
    pub fn get_predefined_load_metric_specification(
        &self,
    ) -> &::std::option::Option<crate::types::PredictiveScalingPredefinedLoadMetricSpecification> {
        &self.predefined_load_metric_specification
    }
    /// <p>The customized scaling metric specification.</p>
    pub fn customized_scaling_metric_specification(mut self, input: crate::types::PredictiveScalingCustomizedMetricSpecification) -> Self {
        self.customized_scaling_metric_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>The customized scaling metric specification.</p>
    pub fn set_customized_scaling_metric_specification(
        mut self,
        input: ::std::option::Option<crate::types::PredictiveScalingCustomizedMetricSpecification>,
    ) -> Self {
        self.customized_scaling_metric_specification = input;
        self
    }
    /// <p>The customized scaling metric specification.</p>
    pub fn get_customized_scaling_metric_specification(
        &self,
    ) -> &::std::option::Option<crate::types::PredictiveScalingCustomizedMetricSpecification> {
        &self.customized_scaling_metric_specification
    }
    /// <p>The customized load metric specification.</p>
    pub fn customized_load_metric_specification(mut self, input: crate::types::PredictiveScalingCustomizedMetricSpecification) -> Self {
        self.customized_load_metric_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>The customized load metric specification.</p>
    pub fn set_customized_load_metric_specification(
        mut self,
        input: ::std::option::Option<crate::types::PredictiveScalingCustomizedMetricSpecification>,
    ) -> Self {
        self.customized_load_metric_specification = input;
        self
    }
    /// <p>The customized load metric specification.</p>
    pub fn get_customized_load_metric_specification(&self) -> &::std::option::Option<crate::types::PredictiveScalingCustomizedMetricSpecification> {
        &self.customized_load_metric_specification
    }
    /// <p>The customized capacity metric specification.</p>
    pub fn customized_capacity_metric_specification(mut self, input: crate::types::PredictiveScalingCustomizedMetricSpecification) -> Self {
        self.customized_capacity_metric_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>The customized capacity metric specification.</p>
    pub fn set_customized_capacity_metric_specification(
        mut self,
        input: ::std::option::Option<crate::types::PredictiveScalingCustomizedMetricSpecification>,
    ) -> Self {
        self.customized_capacity_metric_specification = input;
        self
    }
    /// <p>The customized capacity metric specification.</p>
    pub fn get_customized_capacity_metric_specification(
        &self,
    ) -> &::std::option::Option<crate::types::PredictiveScalingCustomizedMetricSpecification> {
        &self.customized_capacity_metric_specification
    }
    /// Consumes the builder and constructs a [`PredictiveScalingMetricSpecification`](crate::types::PredictiveScalingMetricSpecification).
    /// This method will fail if any of the following fields are not set:
    /// - [`target_value`](crate::types::builders::PredictiveScalingMetricSpecificationBuilder::target_value)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::PredictiveScalingMetricSpecification, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PredictiveScalingMetricSpecification {
            target_value: self.target_value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target_value",
                    "target_value was not specified but it is required when building PredictiveScalingMetricSpecification",
                )
            })?,
            predefined_metric_pair_specification: self.predefined_metric_pair_specification,
            predefined_scaling_metric_specification: self.predefined_scaling_metric_specification,
            predefined_load_metric_specification: self.predefined_load_metric_specification,
            customized_scaling_metric_specification: self.customized_scaling_metric_specification,
            customized_load_metric_specification: self.customized_load_metric_specification,
            customized_capacity_metric_specification: self.customized_capacity_metric_specification,
        })
    }
}
