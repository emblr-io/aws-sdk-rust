// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Holds persistent application user interface information. Applications installed on the Amazon EMR cluster publish user interfaces as web sites to monitor cluster activity.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PersistentAppUi {
    /// <p>The identifier for the persistent application user interface object.</p>
    pub persistent_app_ui_id: ::std::option::Option<::std::string::String>,
    /// <p>The type list for the persistent application user interface object. Valid values include SHS, YTS, or TEZ.</p>
    pub persistent_app_ui_type_list: ::std::option::Option<::std::vec::Vec<crate::types::PersistentAppUiType>>,
    /// <p>The status for the persistent application user interface object.</p>
    pub persistent_app_ui_status: ::std::option::Option<::std::string::String>,
    /// <p>The author ID for the persistent application user interface object.</p>
    pub author_id: ::std::option::Option<::std::string::String>,
    /// <p>The creation date and time for the persistent application user interface object.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time the persistent application user interface object was last changed.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The reason the persistent application user interface object was last changed.</p>
    pub last_state_change_reason: ::std::option::Option<::std::string::String>,
    /// <p>A collection of tags for the persistent application user interface object.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl PersistentAppUi {
    /// <p>The identifier for the persistent application user interface object.</p>
    pub fn persistent_app_ui_id(&self) -> ::std::option::Option<&str> {
        self.persistent_app_ui_id.as_deref()
    }
    /// <p>The type list for the persistent application user interface object. Valid values include SHS, YTS, or TEZ.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.persistent_app_ui_type_list.is_none()`.
    pub fn persistent_app_ui_type_list(&self) -> &[crate::types::PersistentAppUiType] {
        self.persistent_app_ui_type_list.as_deref().unwrap_or_default()
    }
    /// <p>The status for the persistent application user interface object.</p>
    pub fn persistent_app_ui_status(&self) -> ::std::option::Option<&str> {
        self.persistent_app_ui_status.as_deref()
    }
    /// <p>The author ID for the persistent application user interface object.</p>
    pub fn author_id(&self) -> ::std::option::Option<&str> {
        self.author_id.as_deref()
    }
    /// <p>The creation date and time for the persistent application user interface object.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The date and time the persistent application user interface object was last changed.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The reason the persistent application user interface object was last changed.</p>
    pub fn last_state_change_reason(&self) -> ::std::option::Option<&str> {
        self.last_state_change_reason.as_deref()
    }
    /// <p>A collection of tags for the persistent application user interface object.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl PersistentAppUi {
    /// Creates a new builder-style object to manufacture [`PersistentAppUi`](crate::types::PersistentAppUi).
    pub fn builder() -> crate::types::builders::PersistentAppUiBuilder {
        crate::types::builders::PersistentAppUiBuilder::default()
    }
}

/// A builder for [`PersistentAppUi`](crate::types::PersistentAppUi).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PersistentAppUiBuilder {
    pub(crate) persistent_app_ui_id: ::std::option::Option<::std::string::String>,
    pub(crate) persistent_app_ui_type_list: ::std::option::Option<::std::vec::Vec<crate::types::PersistentAppUiType>>,
    pub(crate) persistent_app_ui_status: ::std::option::Option<::std::string::String>,
    pub(crate) author_id: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_state_change_reason: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl PersistentAppUiBuilder {
    /// <p>The identifier for the persistent application user interface object.</p>
    pub fn persistent_app_ui_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.persistent_app_ui_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the persistent application user interface object.</p>
    pub fn set_persistent_app_ui_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.persistent_app_ui_id = input;
        self
    }
    /// <p>The identifier for the persistent application user interface object.</p>
    pub fn get_persistent_app_ui_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.persistent_app_ui_id
    }
    /// Appends an item to `persistent_app_ui_type_list`.
    ///
    /// To override the contents of this collection use [`set_persistent_app_ui_type_list`](Self::set_persistent_app_ui_type_list).
    ///
    /// <p>The type list for the persistent application user interface object. Valid values include SHS, YTS, or TEZ.</p>
    pub fn persistent_app_ui_type_list(mut self, input: crate::types::PersistentAppUiType) -> Self {
        let mut v = self.persistent_app_ui_type_list.unwrap_or_default();
        v.push(input);
        self.persistent_app_ui_type_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The type list for the persistent application user interface object. Valid values include SHS, YTS, or TEZ.</p>
    pub fn set_persistent_app_ui_type_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PersistentAppUiType>>) -> Self {
        self.persistent_app_ui_type_list = input;
        self
    }
    /// <p>The type list for the persistent application user interface object. Valid values include SHS, YTS, or TEZ.</p>
    pub fn get_persistent_app_ui_type_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PersistentAppUiType>> {
        &self.persistent_app_ui_type_list
    }
    /// <p>The status for the persistent application user interface object.</p>
    pub fn persistent_app_ui_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.persistent_app_ui_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status for the persistent application user interface object.</p>
    pub fn set_persistent_app_ui_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.persistent_app_ui_status = input;
        self
    }
    /// <p>The status for the persistent application user interface object.</p>
    pub fn get_persistent_app_ui_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.persistent_app_ui_status
    }
    /// <p>The author ID for the persistent application user interface object.</p>
    pub fn author_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.author_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The author ID for the persistent application user interface object.</p>
    pub fn set_author_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.author_id = input;
        self
    }
    /// <p>The author ID for the persistent application user interface object.</p>
    pub fn get_author_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.author_id
    }
    /// <p>The creation date and time for the persistent application user interface object.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation date and time for the persistent application user interface object.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The creation date and time for the persistent application user interface object.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The date and time the persistent application user interface object was last changed.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the persistent application user interface object was last changed.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The date and time the persistent application user interface object was last changed.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The reason the persistent application user interface object was last changed.</p>
    pub fn last_state_change_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_state_change_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason the persistent application user interface object was last changed.</p>
    pub fn set_last_state_change_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_state_change_reason = input;
        self
    }
    /// <p>The reason the persistent application user interface object was last changed.</p>
    pub fn get_last_state_change_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_state_change_reason
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A collection of tags for the persistent application user interface object.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A collection of tags for the persistent application user interface object.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A collection of tags for the persistent application user interface object.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`PersistentAppUi`](crate::types::PersistentAppUi).
    pub fn build(self) -> crate::types::PersistentAppUi {
        crate::types::PersistentAppUi {
            persistent_app_ui_id: self.persistent_app_ui_id,
            persistent_app_ui_type_list: self.persistent_app_ui_type_list,
            persistent_app_ui_status: self.persistent_app_ui_status,
            author_id: self.author_id,
            creation_time: self.creation_time,
            last_modified_time: self.last_modified_time,
            last_state_change_reason: self.last_state_change_reason,
            tags: self.tags,
        }
    }
}
