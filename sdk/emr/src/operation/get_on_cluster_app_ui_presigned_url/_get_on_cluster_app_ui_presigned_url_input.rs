// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetOnClusterAppUiPresignedUrlInput {
    /// <p>The cluster ID associated with the cluster's application user interface presigned URL.</p>
    pub cluster_id: ::std::option::Option<::std::string::String>,
    /// <p>The application UI type associated with the cluster's application user interface presigned URL.</p>
    pub on_cluster_app_ui_type: ::std::option::Option<crate::types::OnClusterAppUiType>,
    /// <p>The application ID associated with the cluster's application user interface presigned URL.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>Determines if the user interface presigned URL is for a dry run.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>The execution role ARN associated with the cluster's application user interface presigned URL.</p>
    pub execution_role_arn: ::std::option::Option<::std::string::String>,
}
impl GetOnClusterAppUiPresignedUrlInput {
    /// <p>The cluster ID associated with the cluster's application user interface presigned URL.</p>
    pub fn cluster_id(&self) -> ::std::option::Option<&str> {
        self.cluster_id.as_deref()
    }
    /// <p>The application UI type associated with the cluster's application user interface presigned URL.</p>
    pub fn on_cluster_app_ui_type(&self) -> ::std::option::Option<&crate::types::OnClusterAppUiType> {
        self.on_cluster_app_ui_type.as_ref()
    }
    /// <p>The application ID associated with the cluster's application user interface presigned URL.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>Determines if the user interface presigned URL is for a dry run.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The execution role ARN associated with the cluster's application user interface presigned URL.</p>
    pub fn execution_role_arn(&self) -> ::std::option::Option<&str> {
        self.execution_role_arn.as_deref()
    }
}
impl GetOnClusterAppUiPresignedUrlInput {
    /// Creates a new builder-style object to manufacture [`GetOnClusterAppUiPresignedUrlInput`](crate::operation::get_on_cluster_app_ui_presigned_url::GetOnClusterAppUiPresignedUrlInput).
    pub fn builder() -> crate::operation::get_on_cluster_app_ui_presigned_url::builders::GetOnClusterAppUiPresignedUrlInputBuilder {
        crate::operation::get_on_cluster_app_ui_presigned_url::builders::GetOnClusterAppUiPresignedUrlInputBuilder::default()
    }
}

/// A builder for [`GetOnClusterAppUiPresignedUrlInput`](crate::operation::get_on_cluster_app_ui_presigned_url::GetOnClusterAppUiPresignedUrlInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetOnClusterAppUiPresignedUrlInputBuilder {
    pub(crate) cluster_id: ::std::option::Option<::std::string::String>,
    pub(crate) on_cluster_app_ui_type: ::std::option::Option<crate::types::OnClusterAppUiType>,
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) execution_role_arn: ::std::option::Option<::std::string::String>,
}
impl GetOnClusterAppUiPresignedUrlInputBuilder {
    /// <p>The cluster ID associated with the cluster's application user interface presigned URL.</p>
    /// This field is required.
    pub fn cluster_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cluster ID associated with the cluster's application user interface presigned URL.</p>
    pub fn set_cluster_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_id = input;
        self
    }
    /// <p>The cluster ID associated with the cluster's application user interface presigned URL.</p>
    pub fn get_cluster_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_id
    }
    /// <p>The application UI type associated with the cluster's application user interface presigned URL.</p>
    pub fn on_cluster_app_ui_type(mut self, input: crate::types::OnClusterAppUiType) -> Self {
        self.on_cluster_app_ui_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The application UI type associated with the cluster's application user interface presigned URL.</p>
    pub fn set_on_cluster_app_ui_type(mut self, input: ::std::option::Option<crate::types::OnClusterAppUiType>) -> Self {
        self.on_cluster_app_ui_type = input;
        self
    }
    /// <p>The application UI type associated with the cluster's application user interface presigned URL.</p>
    pub fn get_on_cluster_app_ui_type(&self) -> &::std::option::Option<crate::types::OnClusterAppUiType> {
        &self.on_cluster_app_ui_type
    }
    /// <p>The application ID associated with the cluster's application user interface presigned URL.</p>
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The application ID associated with the cluster's application user interface presigned URL.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The application ID associated with the cluster's application user interface presigned URL.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>Determines if the user interface presigned URL is for a dry run.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines if the user interface presigned URL is for a dry run.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Determines if the user interface presigned URL is for a dry run.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>The execution role ARN associated with the cluster's application user interface presigned URL.</p>
    pub fn execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The execution role ARN associated with the cluster's application user interface presigned URL.</p>
    pub fn set_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role_arn = input;
        self
    }
    /// <p>The execution role ARN associated with the cluster's application user interface presigned URL.</p>
    pub fn get_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role_arn
    }
    /// Consumes the builder and constructs a [`GetOnClusterAppUiPresignedUrlInput`](crate::operation::get_on_cluster_app_ui_presigned_url::GetOnClusterAppUiPresignedUrlInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_on_cluster_app_ui_presigned_url::GetOnClusterAppUiPresignedUrlInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::get_on_cluster_app_ui_presigned_url::GetOnClusterAppUiPresignedUrlInput {
                cluster_id: self.cluster_id,
                on_cluster_app_ui_type: self.on_cluster_app_ui_type,
                application_id: self.application_id,
                dry_run: self.dry_run,
                execution_role_arn: self.execution_role_arn,
            },
        )
    }
}
