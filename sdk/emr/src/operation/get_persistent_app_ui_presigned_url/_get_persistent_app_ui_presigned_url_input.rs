// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetPersistentAppUiPresignedUrlInput {
    /// <p>The persistent application user interface ID associated with the presigned URL.</p>
    pub persistent_app_ui_id: ::std::option::Option<::std::string::String>,
    /// <p>The persistent application user interface type associated with the presigned URL.</p>
    pub persistent_app_ui_type: ::std::option::Option<crate::types::PersistentAppUiType>,
    /// <p>The application ID associated with the presigned URL.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>A boolean that represents if the caller is an authentication proxy call.</p>
    pub auth_proxy_call: ::std::option::Option<bool>,
    /// <p>The execution role ARN associated with the presigned URL.</p>
    pub execution_role_arn: ::std::option::Option<::std::string::String>,
}
impl GetPersistentAppUiPresignedUrlInput {
    /// <p>The persistent application user interface ID associated with the presigned URL.</p>
    pub fn persistent_app_ui_id(&self) -> ::std::option::Option<&str> {
        self.persistent_app_ui_id.as_deref()
    }
    /// <p>The persistent application user interface type associated with the presigned URL.</p>
    pub fn persistent_app_ui_type(&self) -> ::std::option::Option<&crate::types::PersistentAppUiType> {
        self.persistent_app_ui_type.as_ref()
    }
    /// <p>The application ID associated with the presigned URL.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>A boolean that represents if the caller is an authentication proxy call.</p>
    pub fn auth_proxy_call(&self) -> ::std::option::Option<bool> {
        self.auth_proxy_call
    }
    /// <p>The execution role ARN associated with the presigned URL.</p>
    pub fn execution_role_arn(&self) -> ::std::option::Option<&str> {
        self.execution_role_arn.as_deref()
    }
}
impl GetPersistentAppUiPresignedUrlInput {
    /// Creates a new builder-style object to manufacture [`GetPersistentAppUiPresignedUrlInput`](crate::operation::get_persistent_app_ui_presigned_url::GetPersistentAppUiPresignedUrlInput).
    pub fn builder() -> crate::operation::get_persistent_app_ui_presigned_url::builders::GetPersistentAppUiPresignedUrlInputBuilder {
        crate::operation::get_persistent_app_ui_presigned_url::builders::GetPersistentAppUiPresignedUrlInputBuilder::default()
    }
}

/// A builder for [`GetPersistentAppUiPresignedUrlInput`](crate::operation::get_persistent_app_ui_presigned_url::GetPersistentAppUiPresignedUrlInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetPersistentAppUiPresignedUrlInputBuilder {
    pub(crate) persistent_app_ui_id: ::std::option::Option<::std::string::String>,
    pub(crate) persistent_app_ui_type: ::std::option::Option<crate::types::PersistentAppUiType>,
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) auth_proxy_call: ::std::option::Option<bool>,
    pub(crate) execution_role_arn: ::std::option::Option<::std::string::String>,
}
impl GetPersistentAppUiPresignedUrlInputBuilder {
    /// <p>The persistent application user interface ID associated with the presigned URL.</p>
    /// This field is required.
    pub fn persistent_app_ui_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.persistent_app_ui_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The persistent application user interface ID associated with the presigned URL.</p>
    pub fn set_persistent_app_ui_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.persistent_app_ui_id = input;
        self
    }
    /// <p>The persistent application user interface ID associated with the presigned URL.</p>
    pub fn get_persistent_app_ui_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.persistent_app_ui_id
    }
    /// <p>The persistent application user interface type associated with the presigned URL.</p>
    pub fn persistent_app_ui_type(mut self, input: crate::types::PersistentAppUiType) -> Self {
        self.persistent_app_ui_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The persistent application user interface type associated with the presigned URL.</p>
    pub fn set_persistent_app_ui_type(mut self, input: ::std::option::Option<crate::types::PersistentAppUiType>) -> Self {
        self.persistent_app_ui_type = input;
        self
    }
    /// <p>The persistent application user interface type associated with the presigned URL.</p>
    pub fn get_persistent_app_ui_type(&self) -> &::std::option::Option<crate::types::PersistentAppUiType> {
        &self.persistent_app_ui_type
    }
    /// <p>The application ID associated with the presigned URL.</p>
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The application ID associated with the presigned URL.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The application ID associated with the presigned URL.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>A boolean that represents if the caller is an authentication proxy call.</p>
    pub fn auth_proxy_call(mut self, input: bool) -> Self {
        self.auth_proxy_call = ::std::option::Option::Some(input);
        self
    }
    /// <p>A boolean that represents if the caller is an authentication proxy call.</p>
    pub fn set_auth_proxy_call(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auth_proxy_call = input;
        self
    }
    /// <p>A boolean that represents if the caller is an authentication proxy call.</p>
    pub fn get_auth_proxy_call(&self) -> &::std::option::Option<bool> {
        &self.auth_proxy_call
    }
    /// <p>The execution role ARN associated with the presigned URL.</p>
    pub fn execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The execution role ARN associated with the presigned URL.</p>
    pub fn set_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role_arn = input;
        self
    }
    /// <p>The execution role ARN associated with the presigned URL.</p>
    pub fn get_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role_arn
    }
    /// Consumes the builder and constructs a [`GetPersistentAppUiPresignedUrlInput`](crate::operation::get_persistent_app_ui_presigned_url::GetPersistentAppUiPresignedUrlInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_persistent_app_ui_presigned_url::GetPersistentAppUiPresignedUrlInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::get_persistent_app_ui_presigned_url::GetPersistentAppUiPresignedUrlInput {
                persistent_app_ui_id: self.persistent_app_ui_id,
                persistent_app_ui_type: self.persistent_app_ui_type,
                application_id: self.application_id,
                auth_proxy_call: self.auth_proxy_call,
                execution_role_arn: self.execution_role_arn,
            },
        )
    }
}
