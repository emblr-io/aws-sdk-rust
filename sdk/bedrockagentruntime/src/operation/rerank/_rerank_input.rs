// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RerankInput {
    /// <p>An array of objects, each of which contains information about a query to submit to the reranker model.</p>
    pub queries: ::std::option::Option<::std::vec::Vec<crate::types::RerankQuery>>,
    /// <p>An array of objects, each of which contains information about the sources to rerank.</p>
    pub sources: ::std::option::Option<::std::vec::Vec<crate::types::RerankSource>>,
    /// <p>Contains configurations for reranking.</p>
    pub reranking_configuration: ::std::option::Option<crate::types::RerankingConfiguration>,
    /// <p>If the total number of results was greater than could fit in a response, a token is returned in the <code>nextToken</code> field. You can enter that token in this field to return the next batch of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl RerankInput {
    /// <p>An array of objects, each of which contains information about a query to submit to the reranker model.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.queries.is_none()`.
    pub fn queries(&self) -> &[crate::types::RerankQuery] {
        self.queries.as_deref().unwrap_or_default()
    }
    /// <p>An array of objects, each of which contains information about the sources to rerank.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sources.is_none()`.
    pub fn sources(&self) -> &[crate::types::RerankSource] {
        self.sources.as_deref().unwrap_or_default()
    }
    /// <p>Contains configurations for reranking.</p>
    pub fn reranking_configuration(&self) -> ::std::option::Option<&crate::types::RerankingConfiguration> {
        self.reranking_configuration.as_ref()
    }
    /// <p>If the total number of results was greater than could fit in a response, a token is returned in the <code>nextToken</code> field. You can enter that token in this field to return the next batch of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::std::fmt::Debug for RerankInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RerankInput");
        formatter.field("queries", &"*** Sensitive Data Redacted ***");
        formatter.field("sources", &"*** Sensitive Data Redacted ***");
        formatter.field("reranking_configuration", &self.reranking_configuration);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
impl RerankInput {
    /// Creates a new builder-style object to manufacture [`RerankInput`](crate::operation::rerank::RerankInput).
    pub fn builder() -> crate::operation::rerank::builders::RerankInputBuilder {
        crate::operation::rerank::builders::RerankInputBuilder::default()
    }
}

/// A builder for [`RerankInput`](crate::operation::rerank::RerankInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RerankInputBuilder {
    pub(crate) queries: ::std::option::Option<::std::vec::Vec<crate::types::RerankQuery>>,
    pub(crate) sources: ::std::option::Option<::std::vec::Vec<crate::types::RerankSource>>,
    pub(crate) reranking_configuration: ::std::option::Option<crate::types::RerankingConfiguration>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl RerankInputBuilder {
    /// Appends an item to `queries`.
    ///
    /// To override the contents of this collection use [`set_queries`](Self::set_queries).
    ///
    /// <p>An array of objects, each of which contains information about a query to submit to the reranker model.</p>
    pub fn queries(mut self, input: crate::types::RerankQuery) -> Self {
        let mut v = self.queries.unwrap_or_default();
        v.push(input);
        self.queries = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects, each of which contains information about a query to submit to the reranker model.</p>
    pub fn set_queries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RerankQuery>>) -> Self {
        self.queries = input;
        self
    }
    /// <p>An array of objects, each of which contains information about a query to submit to the reranker model.</p>
    pub fn get_queries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RerankQuery>> {
        &self.queries
    }
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>An array of objects, each of which contains information about the sources to rerank.</p>
    pub fn sources(mut self, input: crate::types::RerankSource) -> Self {
        let mut v = self.sources.unwrap_or_default();
        v.push(input);
        self.sources = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects, each of which contains information about the sources to rerank.</p>
    pub fn set_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RerankSource>>) -> Self {
        self.sources = input;
        self
    }
    /// <p>An array of objects, each of which contains information about the sources to rerank.</p>
    pub fn get_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RerankSource>> {
        &self.sources
    }
    /// <p>Contains configurations for reranking.</p>
    /// This field is required.
    pub fn reranking_configuration(mut self, input: crate::types::RerankingConfiguration) -> Self {
        self.reranking_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains configurations for reranking.</p>
    pub fn set_reranking_configuration(mut self, input: ::std::option::Option<crate::types::RerankingConfiguration>) -> Self {
        self.reranking_configuration = input;
        self
    }
    /// <p>Contains configurations for reranking.</p>
    pub fn get_reranking_configuration(&self) -> &::std::option::Option<crate::types::RerankingConfiguration> {
        &self.reranking_configuration
    }
    /// <p>If the total number of results was greater than could fit in a response, a token is returned in the <code>nextToken</code> field. You can enter that token in this field to return the next batch of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the total number of results was greater than could fit in a response, a token is returned in the <code>nextToken</code> field. You can enter that token in this field to return the next batch of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If the total number of results was greater than could fit in a response, a token is returned in the <code>nextToken</code> field. You can enter that token in this field to return the next batch of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`RerankInput`](crate::operation::rerank::RerankInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::rerank::RerankInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::rerank::RerankInput {
            queries: self.queries,
            sources: self.sources,
            reranking_configuration: self.reranking_configuration,
            next_token: self.next_token,
        })
    }
}
impl ::std::fmt::Debug for RerankInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RerankInputBuilder");
        formatter.field("queries", &"*** Sensitive Data Redacted ***");
        formatter.field("sources", &"*** Sensitive Data Redacted ***");
        formatter.field("reranking_configuration", &self.reranking_configuration);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
