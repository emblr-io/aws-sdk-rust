// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GenerateQueryInput {
    /// <p>Specifies information about a natural language query to transform into SQL.</p>
    pub query_generation_input: ::std::option::Option<crate::types::QueryGenerationInput>,
    /// <p>Specifies configurations for transforming the natural language query into SQL.</p>
    pub transformation_configuration: ::std::option::Option<crate::types::TransformationConfiguration>,
}
impl GenerateQueryInput {
    /// <p>Specifies information about a natural language query to transform into SQL.</p>
    pub fn query_generation_input(&self) -> ::std::option::Option<&crate::types::QueryGenerationInput> {
        self.query_generation_input.as_ref()
    }
    /// <p>Specifies configurations for transforming the natural language query into SQL.</p>
    pub fn transformation_configuration(&self) -> ::std::option::Option<&crate::types::TransformationConfiguration> {
        self.transformation_configuration.as_ref()
    }
}
impl ::std::fmt::Debug for GenerateQueryInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GenerateQueryInput");
        formatter.field("query_generation_input", &"*** Sensitive Data Redacted ***");
        formatter.field("transformation_configuration", &self.transformation_configuration);
        formatter.finish()
    }
}
impl GenerateQueryInput {
    /// Creates a new builder-style object to manufacture [`GenerateQueryInput`](crate::operation::generate_query::GenerateQueryInput).
    pub fn builder() -> crate::operation::generate_query::builders::GenerateQueryInputBuilder {
        crate::operation::generate_query::builders::GenerateQueryInputBuilder::default()
    }
}

/// A builder for [`GenerateQueryInput`](crate::operation::generate_query::GenerateQueryInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GenerateQueryInputBuilder {
    pub(crate) query_generation_input: ::std::option::Option<crate::types::QueryGenerationInput>,
    pub(crate) transformation_configuration: ::std::option::Option<crate::types::TransformationConfiguration>,
}
impl GenerateQueryInputBuilder {
    /// <p>Specifies information about a natural language query to transform into SQL.</p>
    /// This field is required.
    pub fn query_generation_input(mut self, input: crate::types::QueryGenerationInput) -> Self {
        self.query_generation_input = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies information about a natural language query to transform into SQL.</p>
    pub fn set_query_generation_input(mut self, input: ::std::option::Option<crate::types::QueryGenerationInput>) -> Self {
        self.query_generation_input = input;
        self
    }
    /// <p>Specifies information about a natural language query to transform into SQL.</p>
    pub fn get_query_generation_input(&self) -> &::std::option::Option<crate::types::QueryGenerationInput> {
        &self.query_generation_input
    }
    /// <p>Specifies configurations for transforming the natural language query into SQL.</p>
    /// This field is required.
    pub fn transformation_configuration(mut self, input: crate::types::TransformationConfiguration) -> Self {
        self.transformation_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies configurations for transforming the natural language query into SQL.</p>
    pub fn set_transformation_configuration(mut self, input: ::std::option::Option<crate::types::TransformationConfiguration>) -> Self {
        self.transformation_configuration = input;
        self
    }
    /// <p>Specifies configurations for transforming the natural language query into SQL.</p>
    pub fn get_transformation_configuration(&self) -> &::std::option::Option<crate::types::TransformationConfiguration> {
        &self.transformation_configuration
    }
    /// Consumes the builder and constructs a [`GenerateQueryInput`](crate::operation::generate_query::GenerateQueryInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::generate_query::GenerateQueryInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::generate_query::GenerateQueryInput {
            query_generation_input: self.query_generation_input,
            transformation_configuration: self.transformation_configuration,
        })
    }
}
impl ::std::fmt::Debug for GenerateQueryInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GenerateQueryInputBuilder");
        formatter.field("query_generation_input", &"*** Sensitive Data Redacted ***");
        formatter.field("transformation_configuration", &self.transformation_configuration);
        formatter.finish()
    }
}
