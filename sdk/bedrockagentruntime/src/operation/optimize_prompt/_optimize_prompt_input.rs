// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OptimizePromptInput {
    /// <p>Contains the prompt to optimize.</p>
    pub input: ::std::option::Option<crate::types::InputPrompt>,
    /// <p>The unique identifier of the model that you want to optimize the prompt for.</p>
    pub target_model_id: ::std::option::Option<::std::string::String>,
}
impl OptimizePromptInput {
    /// <p>Contains the prompt to optimize.</p>
    pub fn input(&self) -> ::std::option::Option<&crate::types::InputPrompt> {
        self.input.as_ref()
    }
    /// <p>The unique identifier of the model that you want to optimize the prompt for.</p>
    pub fn target_model_id(&self) -> ::std::option::Option<&str> {
        self.target_model_id.as_deref()
    }
}
impl OptimizePromptInput {
    /// Creates a new builder-style object to manufacture [`OptimizePromptInput`](crate::operation::optimize_prompt::OptimizePromptInput).
    pub fn builder() -> crate::operation::optimize_prompt::builders::OptimizePromptInputBuilder {
        crate::operation::optimize_prompt::builders::OptimizePromptInputBuilder::default()
    }
}

/// A builder for [`OptimizePromptInput`](crate::operation::optimize_prompt::OptimizePromptInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OptimizePromptInputBuilder {
    pub(crate) input: ::std::option::Option<crate::types::InputPrompt>,
    pub(crate) target_model_id: ::std::option::Option<::std::string::String>,
}
impl OptimizePromptInputBuilder {
    /// <p>Contains the prompt to optimize.</p>
    /// This field is required.
    pub fn input(mut self, input: crate::types::InputPrompt) -> Self {
        self.input = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the prompt to optimize.</p>
    pub fn set_input(mut self, input: ::std::option::Option<crate::types::InputPrompt>) -> Self {
        self.input = input;
        self
    }
    /// <p>Contains the prompt to optimize.</p>
    pub fn get_input(&self) -> &::std::option::Option<crate::types::InputPrompt> {
        &self.input
    }
    /// <p>The unique identifier of the model that you want to optimize the prompt for.</p>
    /// This field is required.
    pub fn target_model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_model_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the model that you want to optimize the prompt for.</p>
    pub fn set_target_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_model_id = input;
        self
    }
    /// <p>The unique identifier of the model that you want to optimize the prompt for.</p>
    pub fn get_target_model_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_model_id
    }
    /// Consumes the builder and constructs a [`OptimizePromptInput`](crate::operation::optimize_prompt::OptimizePromptInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::optimize_prompt::OptimizePromptInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::optimize_prompt::OptimizePromptInput {
            input: self.input,
            target_model_id: self.target_model_id,
        })
    }
}
