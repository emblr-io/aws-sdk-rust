// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetAgentMemoryInput {
    /// <p>If the total number of results is greater than the maxItems value provided in the request, enter the token returned in the <code>nextToken</code> field in the response in this field to return the next batch of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of items to return in the response. If the total number of results is greater than this value, use the token returned in the response in the <code>nextToken</code> field when making another request to return the next batch of results.</p>
    pub max_items: ::std::option::Option<i32>,
    /// <p>The unique identifier of the agent to which the alias belongs.</p>
    pub agent_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of an alias of an agent.</p>
    pub agent_alias_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of memory.</p>
    pub memory_type: ::std::option::Option<crate::types::MemoryType>,
    /// <p>The unique identifier of the memory.</p>
    pub memory_id: ::std::option::Option<::std::string::String>,
}
impl GetAgentMemoryInput {
    /// <p>If the total number of results is greater than the maxItems value provided in the request, enter the token returned in the <code>nextToken</code> field in the response in this field to return the next batch of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of items to return in the response. If the total number of results is greater than this value, use the token returned in the response in the <code>nextToken</code> field when making another request to return the next batch of results.</p>
    pub fn max_items(&self) -> ::std::option::Option<i32> {
        self.max_items
    }
    /// <p>The unique identifier of the agent to which the alias belongs.</p>
    pub fn agent_id(&self) -> ::std::option::Option<&str> {
        self.agent_id.as_deref()
    }
    /// <p>The unique identifier of an alias of an agent.</p>
    pub fn agent_alias_id(&self) -> ::std::option::Option<&str> {
        self.agent_alias_id.as_deref()
    }
    /// <p>The type of memory.</p>
    pub fn memory_type(&self) -> ::std::option::Option<&crate::types::MemoryType> {
        self.memory_type.as_ref()
    }
    /// <p>The unique identifier of the memory.</p>
    pub fn memory_id(&self) -> ::std::option::Option<&str> {
        self.memory_id.as_deref()
    }
}
impl GetAgentMemoryInput {
    /// Creates a new builder-style object to manufacture [`GetAgentMemoryInput`](crate::operation::get_agent_memory::GetAgentMemoryInput).
    pub fn builder() -> crate::operation::get_agent_memory::builders::GetAgentMemoryInputBuilder {
        crate::operation::get_agent_memory::builders::GetAgentMemoryInputBuilder::default()
    }
}

/// A builder for [`GetAgentMemoryInput`](crate::operation::get_agent_memory::GetAgentMemoryInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetAgentMemoryInputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_items: ::std::option::Option<i32>,
    pub(crate) agent_id: ::std::option::Option<::std::string::String>,
    pub(crate) agent_alias_id: ::std::option::Option<::std::string::String>,
    pub(crate) memory_type: ::std::option::Option<crate::types::MemoryType>,
    pub(crate) memory_id: ::std::option::Option<::std::string::String>,
}
impl GetAgentMemoryInputBuilder {
    /// <p>If the total number of results is greater than the maxItems value provided in the request, enter the token returned in the <code>nextToken</code> field in the response in this field to return the next batch of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the total number of results is greater than the maxItems value provided in the request, enter the token returned in the <code>nextToken</code> field in the response in this field to return the next batch of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If the total number of results is greater than the maxItems value provided in the request, enter the token returned in the <code>nextToken</code> field in the response in this field to return the next batch of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of items to return in the response. If the total number of results is greater than this value, use the token returned in the response in the <code>nextToken</code> field when making another request to return the next batch of results.</p>
    pub fn max_items(mut self, input: i32) -> Self {
        self.max_items = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of items to return in the response. If the total number of results is greater than this value, use the token returned in the response in the <code>nextToken</code> field when making another request to return the next batch of results.</p>
    pub fn set_max_items(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_items = input;
        self
    }
    /// <p>The maximum number of items to return in the response. If the total number of results is greater than this value, use the token returned in the response in the <code>nextToken</code> field when making another request to return the next batch of results.</p>
    pub fn get_max_items(&self) -> &::std::option::Option<i32> {
        &self.max_items
    }
    /// <p>The unique identifier of the agent to which the alias belongs.</p>
    /// This field is required.
    pub fn agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the agent to which the alias belongs.</p>
    pub fn set_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_id = input;
        self
    }
    /// <p>The unique identifier of the agent to which the alias belongs.</p>
    pub fn get_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_id
    }
    /// <p>The unique identifier of an alias of an agent.</p>
    /// This field is required.
    pub fn agent_alias_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_alias_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of an alias of an agent.</p>
    pub fn set_agent_alias_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_alias_id = input;
        self
    }
    /// <p>The unique identifier of an alias of an agent.</p>
    pub fn get_agent_alias_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_alias_id
    }
    /// <p>The type of memory.</p>
    /// This field is required.
    pub fn memory_type(mut self, input: crate::types::MemoryType) -> Self {
        self.memory_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of memory.</p>
    pub fn set_memory_type(mut self, input: ::std::option::Option<crate::types::MemoryType>) -> Self {
        self.memory_type = input;
        self
    }
    /// <p>The type of memory.</p>
    pub fn get_memory_type(&self) -> &::std::option::Option<crate::types::MemoryType> {
        &self.memory_type
    }
    /// <p>The unique identifier of the memory.</p>
    /// This field is required.
    pub fn memory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.memory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the memory.</p>
    pub fn set_memory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.memory_id = input;
        self
    }
    /// <p>The unique identifier of the memory.</p>
    pub fn get_memory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.memory_id
    }
    /// Consumes the builder and constructs a [`GetAgentMemoryInput`](crate::operation::get_agent_memory::GetAgentMemoryInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_agent_memory::GetAgentMemoryInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_agent_memory::GetAgentMemoryInput {
            next_token: self.next_token,
            max_items: self.max_items,
            agent_id: self.agent_id,
            agent_alias_id: self.agent_alias_id,
            memory_type: self.memory_type,
            memory_id: self.memory_id,
        })
    }
}
