// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RetrieveAndGenerateStreamInput {
    /// <p>The unique identifier of the session. When you first make a <code>RetrieveAndGenerate</code> request, Amazon Bedrock automatically generates this value. You must reuse this value for all subsequent requests in the same conversational session. This value allows Amazon Bedrock to maintain context and knowledge from previous interactions. You can't explicitly set the <code>sessionId</code> yourself.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>Contains the query to be made to the knowledge base.</p>
    pub input: ::std::option::Option<crate::types::RetrieveAndGenerateInput>,
    /// <p>Contains configurations for the knowledge base query and retrieval process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/kb-test-config.html">Query configurations</a>.</p>
    pub retrieve_and_generate_configuration: ::std::option::Option<crate::types::RetrieveAndGenerateConfiguration>,
    /// <p>Contains details about the session with the knowledge base.</p>
    pub session_configuration: ::std::option::Option<crate::types::RetrieveAndGenerateSessionConfiguration>,
}
impl RetrieveAndGenerateStreamInput {
    /// <p>The unique identifier of the session. When you first make a <code>RetrieveAndGenerate</code> request, Amazon Bedrock automatically generates this value. You must reuse this value for all subsequent requests in the same conversational session. This value allows Amazon Bedrock to maintain context and knowledge from previous interactions. You can't explicitly set the <code>sessionId</code> yourself.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>Contains the query to be made to the knowledge base.</p>
    pub fn input(&self) -> ::std::option::Option<&crate::types::RetrieveAndGenerateInput> {
        self.input.as_ref()
    }
    /// <p>Contains configurations for the knowledge base query and retrieval process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/kb-test-config.html">Query configurations</a>.</p>
    pub fn retrieve_and_generate_configuration(&self) -> ::std::option::Option<&crate::types::RetrieveAndGenerateConfiguration> {
        self.retrieve_and_generate_configuration.as_ref()
    }
    /// <p>Contains details about the session with the knowledge base.</p>
    pub fn session_configuration(&self) -> ::std::option::Option<&crate::types::RetrieveAndGenerateSessionConfiguration> {
        self.session_configuration.as_ref()
    }
}
impl ::std::fmt::Debug for RetrieveAndGenerateStreamInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RetrieveAndGenerateStreamInput");
        formatter.field("session_id", &self.session_id);
        formatter.field("input", &"*** Sensitive Data Redacted ***");
        formatter.field("retrieve_and_generate_configuration", &self.retrieve_and_generate_configuration);
        formatter.field("session_configuration", &self.session_configuration);
        formatter.finish()
    }
}
impl RetrieveAndGenerateStreamInput {
    /// Creates a new builder-style object to manufacture [`RetrieveAndGenerateStreamInput`](crate::operation::retrieve_and_generate_stream::RetrieveAndGenerateStreamInput).
    pub fn builder() -> crate::operation::retrieve_and_generate_stream::builders::RetrieveAndGenerateStreamInputBuilder {
        crate::operation::retrieve_and_generate_stream::builders::RetrieveAndGenerateStreamInputBuilder::default()
    }
}

/// A builder for [`RetrieveAndGenerateStreamInput`](crate::operation::retrieve_and_generate_stream::RetrieveAndGenerateStreamInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RetrieveAndGenerateStreamInputBuilder {
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) input: ::std::option::Option<crate::types::RetrieveAndGenerateInput>,
    pub(crate) retrieve_and_generate_configuration: ::std::option::Option<crate::types::RetrieveAndGenerateConfiguration>,
    pub(crate) session_configuration: ::std::option::Option<crate::types::RetrieveAndGenerateSessionConfiguration>,
}
impl RetrieveAndGenerateStreamInputBuilder {
    /// <p>The unique identifier of the session. When you first make a <code>RetrieveAndGenerate</code> request, Amazon Bedrock automatically generates this value. You must reuse this value for all subsequent requests in the same conversational session. This value allows Amazon Bedrock to maintain context and knowledge from previous interactions. You can't explicitly set the <code>sessionId</code> yourself.</p>
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the session. When you first make a <code>RetrieveAndGenerate</code> request, Amazon Bedrock automatically generates this value. You must reuse this value for all subsequent requests in the same conversational session. This value allows Amazon Bedrock to maintain context and knowledge from previous interactions. You can't explicitly set the <code>sessionId</code> yourself.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The unique identifier of the session. When you first make a <code>RetrieveAndGenerate</code> request, Amazon Bedrock automatically generates this value. You must reuse this value for all subsequent requests in the same conversational session. This value allows Amazon Bedrock to maintain context and knowledge from previous interactions. You can't explicitly set the <code>sessionId</code> yourself.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>Contains the query to be made to the knowledge base.</p>
    /// This field is required.
    pub fn input(mut self, input: crate::types::RetrieveAndGenerateInput) -> Self {
        self.input = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the query to be made to the knowledge base.</p>
    pub fn set_input(mut self, input: ::std::option::Option<crate::types::RetrieveAndGenerateInput>) -> Self {
        self.input = input;
        self
    }
    /// <p>Contains the query to be made to the knowledge base.</p>
    pub fn get_input(&self) -> &::std::option::Option<crate::types::RetrieveAndGenerateInput> {
        &self.input
    }
    /// <p>Contains configurations for the knowledge base query and retrieval process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/kb-test-config.html">Query configurations</a>.</p>
    pub fn retrieve_and_generate_configuration(mut self, input: crate::types::RetrieveAndGenerateConfiguration) -> Self {
        self.retrieve_and_generate_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains configurations for the knowledge base query and retrieval process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/kb-test-config.html">Query configurations</a>.</p>
    pub fn set_retrieve_and_generate_configuration(mut self, input: ::std::option::Option<crate::types::RetrieveAndGenerateConfiguration>) -> Self {
        self.retrieve_and_generate_configuration = input;
        self
    }
    /// <p>Contains configurations for the knowledge base query and retrieval process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/kb-test-config.html">Query configurations</a>.</p>
    pub fn get_retrieve_and_generate_configuration(&self) -> &::std::option::Option<crate::types::RetrieveAndGenerateConfiguration> {
        &self.retrieve_and_generate_configuration
    }
    /// <p>Contains details about the session with the knowledge base.</p>
    pub fn session_configuration(mut self, input: crate::types::RetrieveAndGenerateSessionConfiguration) -> Self {
        self.session_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the session with the knowledge base.</p>
    pub fn set_session_configuration(mut self, input: ::std::option::Option<crate::types::RetrieveAndGenerateSessionConfiguration>) -> Self {
        self.session_configuration = input;
        self
    }
    /// <p>Contains details about the session with the knowledge base.</p>
    pub fn get_session_configuration(&self) -> &::std::option::Option<crate::types::RetrieveAndGenerateSessionConfiguration> {
        &self.session_configuration
    }
    /// Consumes the builder and constructs a [`RetrieveAndGenerateStreamInput`](crate::operation::retrieve_and_generate_stream::RetrieveAndGenerateStreamInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::retrieve_and_generate_stream::RetrieveAndGenerateStreamInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::retrieve_and_generate_stream::RetrieveAndGenerateStreamInput {
            session_id: self.session_id,
            input: self.input,
            retrieve_and_generate_configuration: self.retrieve_and_generate_configuration,
            session_configuration: self.session_configuration,
        })
    }
}
impl ::std::fmt::Debug for RetrieveAndGenerateStreamInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RetrieveAndGenerateStreamInputBuilder");
        formatter.field("session_id", &self.session_id);
        formatter.field("input", &"*** Sensitive Data Redacted ***");
        formatter.field("retrieve_and_generate_configuration", &self.retrieve_and_generate_configuration);
        formatter.field("session_configuration", &self.session_configuration);
        formatter.finish()
    }
}
