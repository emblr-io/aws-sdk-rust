// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StopFlowExecutionOutput {
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the flow execution that was stopped.</p>
    pub execution_arn: ::std::option::Option<::std::string::String>,
    /// <p>The updated status of the flow execution after the stop request. This will typically be ABORTED if the execution was successfully stopped.</p>
    pub status: crate::types::FlowExecutionStatus,
    _request_id: Option<String>,
}
impl StopFlowExecutionOutput {
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the flow execution that was stopped.</p>
    pub fn execution_arn(&self) -> ::std::option::Option<&str> {
        self.execution_arn.as_deref()
    }
    /// <p>The updated status of the flow execution after the stop request. This will typically be ABORTED if the execution was successfully stopped.</p>
    pub fn status(&self) -> &crate::types::FlowExecutionStatus {
        &self.status
    }
}
impl ::aws_types::request_id::RequestId for StopFlowExecutionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StopFlowExecutionOutput {
    /// Creates a new builder-style object to manufacture [`StopFlowExecutionOutput`](crate::operation::stop_flow_execution::StopFlowExecutionOutput).
    pub fn builder() -> crate::operation::stop_flow_execution::builders::StopFlowExecutionOutputBuilder {
        crate::operation::stop_flow_execution::builders::StopFlowExecutionOutputBuilder::default()
    }
}

/// A builder for [`StopFlowExecutionOutput`](crate::operation::stop_flow_execution::StopFlowExecutionOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StopFlowExecutionOutputBuilder {
    pub(crate) execution_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::FlowExecutionStatus>,
    _request_id: Option<String>,
}
impl StopFlowExecutionOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the flow execution that was stopped.</p>
    pub fn execution_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the flow execution that was stopped.</p>
    pub fn set_execution_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the flow execution that was stopped.</p>
    pub fn get_execution_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_arn
    }
    /// <p>The updated status of the flow execution after the stop request. This will typically be ABORTED if the execution was successfully stopped.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::FlowExecutionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated status of the flow execution after the stop request. This will typically be ABORTED if the execution was successfully stopped.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::FlowExecutionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The updated status of the flow execution after the stop request. This will typically be ABORTED if the execution was successfully stopped.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::FlowExecutionStatus> {
        &self.status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StopFlowExecutionOutput`](crate::operation::stop_flow_execution::StopFlowExecutionOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::operation::stop_flow_execution::builders::StopFlowExecutionOutputBuilder::status)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::stop_flow_execution::StopFlowExecutionOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::stop_flow_execution::StopFlowExecutionOutput {
            execution_arn: self.execution_arn,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building StopFlowExecutionOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
