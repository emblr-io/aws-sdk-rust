// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListInvocationStepsInput {
    /// <p>The unique identifier (in UUID format) for the invocation to list invocation steps for.</p>
    pub invocation_identifier: ::std::option::Option<::std::string::String>,
    /// <p>If the total number of results is greater than the <code>maxResults</code> value provided in the request, enter the token returned in the <code>nextToken</code> field in the response in this field to return the next batch of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return in the response. If the total number of results is greater than this value, use the token returned in the response in the <code>nextToken</code> field when making another request to return the next batch of results.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The unique identifier for the session associated with the invocation steps. You can specify either the session's <code>sessionId</code> or its Amazon Resource Name (ARN).</p>
    pub session_identifier: ::std::option::Option<::std::string::String>,
}
impl ListInvocationStepsInput {
    /// <p>The unique identifier (in UUID format) for the invocation to list invocation steps for.</p>
    pub fn invocation_identifier(&self) -> ::std::option::Option<&str> {
        self.invocation_identifier.as_deref()
    }
    /// <p>If the total number of results is greater than the <code>maxResults</code> value provided in the request, enter the token returned in the <code>nextToken</code> field in the response in this field to return the next batch of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return in the response. If the total number of results is greater than this value, use the token returned in the response in the <code>nextToken</code> field when making another request to return the next batch of results.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The unique identifier for the session associated with the invocation steps. You can specify either the session's <code>sessionId</code> or its Amazon Resource Name (ARN).</p>
    pub fn session_identifier(&self) -> ::std::option::Option<&str> {
        self.session_identifier.as_deref()
    }
}
impl ListInvocationStepsInput {
    /// Creates a new builder-style object to manufacture [`ListInvocationStepsInput`](crate::operation::list_invocation_steps::ListInvocationStepsInput).
    pub fn builder() -> crate::operation::list_invocation_steps::builders::ListInvocationStepsInputBuilder {
        crate::operation::list_invocation_steps::builders::ListInvocationStepsInputBuilder::default()
    }
}

/// A builder for [`ListInvocationStepsInput`](crate::operation::list_invocation_steps::ListInvocationStepsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListInvocationStepsInputBuilder {
    pub(crate) invocation_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) session_identifier: ::std::option::Option<::std::string::String>,
}
impl ListInvocationStepsInputBuilder {
    /// <p>The unique identifier (in UUID format) for the invocation to list invocation steps for.</p>
    pub fn invocation_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.invocation_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier (in UUID format) for the invocation to list invocation steps for.</p>
    pub fn set_invocation_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.invocation_identifier = input;
        self
    }
    /// <p>The unique identifier (in UUID format) for the invocation to list invocation steps for.</p>
    pub fn get_invocation_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.invocation_identifier
    }
    /// <p>If the total number of results is greater than the <code>maxResults</code> value provided in the request, enter the token returned in the <code>nextToken</code> field in the response in this field to return the next batch of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the total number of results is greater than the <code>maxResults</code> value provided in the request, enter the token returned in the <code>nextToken</code> field in the response in this field to return the next batch of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If the total number of results is greater than the <code>maxResults</code> value provided in the request, enter the token returned in the <code>nextToken</code> field in the response in this field to return the next batch of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return in the response. If the total number of results is greater than this value, use the token returned in the response in the <code>nextToken</code> field when making another request to return the next batch of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return in the response. If the total number of results is greater than this value, use the token returned in the response in the <code>nextToken</code> field when making another request to return the next batch of results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return in the response. If the total number of results is greater than this value, use the token returned in the response in the <code>nextToken</code> field when making another request to return the next batch of results.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The unique identifier for the session associated with the invocation steps. You can specify either the session's <code>sessionId</code> or its Amazon Resource Name (ARN).</p>
    /// This field is required.
    pub fn session_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the session associated with the invocation steps. You can specify either the session's <code>sessionId</code> or its Amazon Resource Name (ARN).</p>
    pub fn set_session_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_identifier = input;
        self
    }
    /// <p>The unique identifier for the session associated with the invocation steps. You can specify either the session's <code>sessionId</code> or its Amazon Resource Name (ARN).</p>
    pub fn get_session_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_identifier
    }
    /// Consumes the builder and constructs a [`ListInvocationStepsInput`](crate::operation::list_invocation_steps::ListInvocationStepsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_invocation_steps::ListInvocationStepsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_invocation_steps::ListInvocationStepsInput {
            invocation_identifier: self.invocation_identifier,
            next_token: self.next_token,
            max_results: self.max_results,
            session_identifier: self.session_identifier,
        })
    }
}
