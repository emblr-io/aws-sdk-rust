// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct InvokeInlineAgentInput {
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services KMS key to use to encrypt your inline agent.</p>
    pub customer_encryption_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html#model-ids-arns">model identifier (ID)</a> of the model to use for orchestration by the inline agent. For example, <code>meta.llama3-1-70b-instruct-v1:0</code>.</p>
    pub foundation_model: ::std::option::Option<::std::string::String>,
    /// <p>The instructions that tell the inline agent what it should do and how it should interact with users.</p>
    pub instruction: ::std::option::Option<::std::string::String>,
    /// <p>The number of seconds for which the inline agent should maintain session information. After this time expires, the subsequent <code>InvokeInlineAgent</code> request begins a new session.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and the data provided before the timeout is deleted.</p>
    pub idle_session_ttl_in_seconds: ::std::option::Option<i32>,
    /// <p>A list of action groups with each action group defining the action the inline agent needs to carry out.</p>
    pub action_groups: ::std::option::Option<::std::vec::Vec<crate::types::AgentActionGroup>>,
    /// <p>Contains information of the knowledge bases to associate with.</p>
    pub knowledge_bases: ::std::option::Option<::std::vec::Vec<crate::types::KnowledgeBase>>,
    /// <p>The <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/guardrails.html">guardrails</a> to assign to the inline agent.</p>
    pub guardrail_configuration: ::std::option::Option<crate::types::GuardrailConfigurationWithArn>,
    /// <p>Configurations for advanced prompts used to override the default prompts to enhance the accuracy of the inline agent.</p>
    pub prompt_override_configuration: ::std::option::Option<crate::types::PromptOverrideConfiguration>,
    /// <p>Defines how the inline collaborator agent handles information across multiple collaborator agents to coordinate a final response. The inline collaborator agent can also be the supervisor.</p>
    pub agent_collaboration: ::std::option::Option<crate::types::AgentCollaboration>,
    /// <p>Settings for an inline agent collaborator called with <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeInlineAgent.html">InvokeInlineAgent</a>.</p>
    pub collaborator_configurations: ::std::option::Option<::std::vec::Vec<crate::types::CollaboratorConfiguration>>,
    /// <p>The name for the agent.</p>
    pub agent_name: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the session. Use the same value across requests to continue the same conversation.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether to end the session with the inline agent or not.</p>
    pub end_session: ::std::option::Option<bool>,
    /// <p>Specifies whether to turn on the trace or not to track the agent's reasoning process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/trace-events.html">Using trace</a>.</p>
    pub enable_trace: ::std::option::Option<bool>,
    /// <p>The prompt text to send to the agent.</p><note>
    /// <p>If you include <code>returnControlInvocationResults</code> in the <code>sessionState</code> field, the <code>inputText</code> field will be ignored.</p>
    /// </note>
    pub input_text: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the configurations for streaming.</p><note>
    /// <p>To use agent streaming, you need permissions to perform the <code>bedrock:InvokeModelWithResponseStream</code> action.</p>
    /// </note>
    pub streaming_configurations: ::std::option::Option<crate::types::StreamingConfigurations>,
    /// <p>Specifies parameters that control how the service populates the agent prompt for an <code>InvokeInlineAgent</code> request. You can control which aspects of previous invocations in the same agent session the service uses to populate the agent prompt. This gives you more granular control over the contextual history that is used to process the current request.</p>
    pub prompt_creation_configurations: ::std::option::Option<crate::types::PromptCreationConfigurations>,
    /// <p>Parameters that specify the various attributes of a sessions. You can include attributes for the session or prompt or, if you configured an action group to return control, results from invocation of the action group. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html">Control session context</a>.</p><note>
    /// <p>If you include <code>returnControlInvocationResults</code> in the <code>sessionState</code> field, the <code>inputText</code> field will be ignored.</p>
    /// </note>
    pub inline_session_state: ::std::option::Option<crate::types::InlineSessionState>,
    /// <p>List of collaborator inline agents.</p>
    pub collaborators: ::std::option::Option<::std::vec::Vec<crate::types::Collaborator>>,
    /// <p>Model settings for the request.</p>
    pub bedrock_model_configurations: ::std::option::Option<crate::types::InlineBedrockModelConfigurations>,
    /// <p>Specifies the type of orchestration strategy for the agent. This is set to DEFAULT orchestration type, by default.</p>
    pub orchestration_type: ::std::option::Option<crate::types::OrchestrationType>,
    /// <p>Contains details of the custom orchestration configured for the agent.</p>
    pub custom_orchestration: ::std::option::Option<crate::types::CustomOrchestration>,
}
impl InvokeInlineAgentInput {
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services KMS key to use to encrypt your inline agent.</p>
    pub fn customer_encryption_key_arn(&self) -> ::std::option::Option<&str> {
        self.customer_encryption_key_arn.as_deref()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html#model-ids-arns">model identifier (ID)</a> of the model to use for orchestration by the inline agent. For example, <code>meta.llama3-1-70b-instruct-v1:0</code>.</p>
    pub fn foundation_model(&self) -> ::std::option::Option<&str> {
        self.foundation_model.as_deref()
    }
    /// <p>The instructions that tell the inline agent what it should do and how it should interact with users.</p>
    pub fn instruction(&self) -> ::std::option::Option<&str> {
        self.instruction.as_deref()
    }
    /// <p>The number of seconds for which the inline agent should maintain session information. After this time expires, the subsequent <code>InvokeInlineAgent</code> request begins a new session.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and the data provided before the timeout is deleted.</p>
    pub fn idle_session_ttl_in_seconds(&self) -> ::std::option::Option<i32> {
        self.idle_session_ttl_in_seconds
    }
    /// <p>A list of action groups with each action group defining the action the inline agent needs to carry out.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.action_groups.is_none()`.
    pub fn action_groups(&self) -> &[crate::types::AgentActionGroup] {
        self.action_groups.as_deref().unwrap_or_default()
    }
    /// <p>Contains information of the knowledge bases to associate with.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.knowledge_bases.is_none()`.
    pub fn knowledge_bases(&self) -> &[crate::types::KnowledgeBase] {
        self.knowledge_bases.as_deref().unwrap_or_default()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/guardrails.html">guardrails</a> to assign to the inline agent.</p>
    pub fn guardrail_configuration(&self) -> ::std::option::Option<&crate::types::GuardrailConfigurationWithArn> {
        self.guardrail_configuration.as_ref()
    }
    /// <p>Configurations for advanced prompts used to override the default prompts to enhance the accuracy of the inline agent.</p>
    pub fn prompt_override_configuration(&self) -> ::std::option::Option<&crate::types::PromptOverrideConfiguration> {
        self.prompt_override_configuration.as_ref()
    }
    /// <p>Defines how the inline collaborator agent handles information across multiple collaborator agents to coordinate a final response. The inline collaborator agent can also be the supervisor.</p>
    pub fn agent_collaboration(&self) -> ::std::option::Option<&crate::types::AgentCollaboration> {
        self.agent_collaboration.as_ref()
    }
    /// <p>Settings for an inline agent collaborator called with <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeInlineAgent.html">InvokeInlineAgent</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.collaborator_configurations.is_none()`.
    pub fn collaborator_configurations(&self) -> &[crate::types::CollaboratorConfiguration] {
        self.collaborator_configurations.as_deref().unwrap_or_default()
    }
    /// <p>The name for the agent.</p>
    pub fn agent_name(&self) -> ::std::option::Option<&str> {
        self.agent_name.as_deref()
    }
    /// <p>The unique identifier of the session. Use the same value across requests to continue the same conversation.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>Specifies whether to end the session with the inline agent or not.</p>
    pub fn end_session(&self) -> ::std::option::Option<bool> {
        self.end_session
    }
    /// <p>Specifies whether to turn on the trace or not to track the agent's reasoning process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/trace-events.html">Using trace</a>.</p>
    pub fn enable_trace(&self) -> ::std::option::Option<bool> {
        self.enable_trace
    }
    /// <p>The prompt text to send to the agent.</p><note>
    /// <p>If you include <code>returnControlInvocationResults</code> in the <code>sessionState</code> field, the <code>inputText</code> field will be ignored.</p>
    /// </note>
    pub fn input_text(&self) -> ::std::option::Option<&str> {
        self.input_text.as_deref()
    }
    /// <p>Specifies the configurations for streaming.</p><note>
    /// <p>To use agent streaming, you need permissions to perform the <code>bedrock:InvokeModelWithResponseStream</code> action.</p>
    /// </note>
    pub fn streaming_configurations(&self) -> ::std::option::Option<&crate::types::StreamingConfigurations> {
        self.streaming_configurations.as_ref()
    }
    /// <p>Specifies parameters that control how the service populates the agent prompt for an <code>InvokeInlineAgent</code> request. You can control which aspects of previous invocations in the same agent session the service uses to populate the agent prompt. This gives you more granular control over the contextual history that is used to process the current request.</p>
    pub fn prompt_creation_configurations(&self) -> ::std::option::Option<&crate::types::PromptCreationConfigurations> {
        self.prompt_creation_configurations.as_ref()
    }
    /// <p>Parameters that specify the various attributes of a sessions. You can include attributes for the session or prompt or, if you configured an action group to return control, results from invocation of the action group. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html">Control session context</a>.</p><note>
    /// <p>If you include <code>returnControlInvocationResults</code> in the <code>sessionState</code> field, the <code>inputText</code> field will be ignored.</p>
    /// </note>
    pub fn inline_session_state(&self) -> ::std::option::Option<&crate::types::InlineSessionState> {
        self.inline_session_state.as_ref()
    }
    /// <p>List of collaborator inline agents.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.collaborators.is_none()`.
    pub fn collaborators(&self) -> &[crate::types::Collaborator] {
        self.collaborators.as_deref().unwrap_or_default()
    }
    /// <p>Model settings for the request.</p>
    pub fn bedrock_model_configurations(&self) -> ::std::option::Option<&crate::types::InlineBedrockModelConfigurations> {
        self.bedrock_model_configurations.as_ref()
    }
    /// <p>Specifies the type of orchestration strategy for the agent. This is set to DEFAULT orchestration type, by default.</p>
    pub fn orchestration_type(&self) -> ::std::option::Option<&crate::types::OrchestrationType> {
        self.orchestration_type.as_ref()
    }
    /// <p>Contains details of the custom orchestration configured for the agent.</p>
    pub fn custom_orchestration(&self) -> ::std::option::Option<&crate::types::CustomOrchestration> {
        self.custom_orchestration.as_ref()
    }
}
impl ::std::fmt::Debug for InvokeInlineAgentInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InvokeInlineAgentInput");
        formatter.field("customer_encryption_key_arn", &self.customer_encryption_key_arn);
        formatter.field("foundation_model", &self.foundation_model);
        formatter.field("instruction", &"*** Sensitive Data Redacted ***");
        formatter.field("idle_session_ttl_in_seconds", &self.idle_session_ttl_in_seconds);
        formatter.field("action_groups", &self.action_groups);
        formatter.field("knowledge_bases", &self.knowledge_bases);
        formatter.field("guardrail_configuration", &self.guardrail_configuration);
        formatter.field("prompt_override_configuration", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_collaboration", &self.agent_collaboration);
        formatter.field("collaborator_configurations", &self.collaborator_configurations);
        formatter.field("agent_name", &"*** Sensitive Data Redacted ***");
        formatter.field("session_id", &self.session_id);
        formatter.field("end_session", &self.end_session);
        formatter.field("enable_trace", &self.enable_trace);
        formatter.field("input_text", &"*** Sensitive Data Redacted ***");
        formatter.field("streaming_configurations", &self.streaming_configurations);
        formatter.field("prompt_creation_configurations", &self.prompt_creation_configurations);
        formatter.field("inline_session_state", &self.inline_session_state);
        formatter.field("collaborators", &self.collaborators);
        formatter.field("bedrock_model_configurations", &self.bedrock_model_configurations);
        formatter.field("orchestration_type", &self.orchestration_type);
        formatter.field("custom_orchestration", &self.custom_orchestration);
        formatter.finish()
    }
}
impl InvokeInlineAgentInput {
    /// Creates a new builder-style object to manufacture [`InvokeInlineAgentInput`](crate::operation::invoke_inline_agent::InvokeInlineAgentInput).
    pub fn builder() -> crate::operation::invoke_inline_agent::builders::InvokeInlineAgentInputBuilder {
        crate::operation::invoke_inline_agent::builders::InvokeInlineAgentInputBuilder::default()
    }
}

/// A builder for [`InvokeInlineAgentInput`](crate::operation::invoke_inline_agent::InvokeInlineAgentInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct InvokeInlineAgentInputBuilder {
    pub(crate) customer_encryption_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) foundation_model: ::std::option::Option<::std::string::String>,
    pub(crate) instruction: ::std::option::Option<::std::string::String>,
    pub(crate) idle_session_ttl_in_seconds: ::std::option::Option<i32>,
    pub(crate) action_groups: ::std::option::Option<::std::vec::Vec<crate::types::AgentActionGroup>>,
    pub(crate) knowledge_bases: ::std::option::Option<::std::vec::Vec<crate::types::KnowledgeBase>>,
    pub(crate) guardrail_configuration: ::std::option::Option<crate::types::GuardrailConfigurationWithArn>,
    pub(crate) prompt_override_configuration: ::std::option::Option<crate::types::PromptOverrideConfiguration>,
    pub(crate) agent_collaboration: ::std::option::Option<crate::types::AgentCollaboration>,
    pub(crate) collaborator_configurations: ::std::option::Option<::std::vec::Vec<crate::types::CollaboratorConfiguration>>,
    pub(crate) agent_name: ::std::option::Option<::std::string::String>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) end_session: ::std::option::Option<bool>,
    pub(crate) enable_trace: ::std::option::Option<bool>,
    pub(crate) input_text: ::std::option::Option<::std::string::String>,
    pub(crate) streaming_configurations: ::std::option::Option<crate::types::StreamingConfigurations>,
    pub(crate) prompt_creation_configurations: ::std::option::Option<crate::types::PromptCreationConfigurations>,
    pub(crate) inline_session_state: ::std::option::Option<crate::types::InlineSessionState>,
    pub(crate) collaborators: ::std::option::Option<::std::vec::Vec<crate::types::Collaborator>>,
    pub(crate) bedrock_model_configurations: ::std::option::Option<crate::types::InlineBedrockModelConfigurations>,
    pub(crate) orchestration_type: ::std::option::Option<crate::types::OrchestrationType>,
    pub(crate) custom_orchestration: ::std::option::Option<crate::types::CustomOrchestration>,
}
impl InvokeInlineAgentInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services KMS key to use to encrypt your inline agent.</p>
    pub fn customer_encryption_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_encryption_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services KMS key to use to encrypt your inline agent.</p>
    pub fn set_customer_encryption_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_encryption_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services KMS key to use to encrypt your inline agent.</p>
    pub fn get_customer_encryption_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_encryption_key_arn
    }
    /// <p>The <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html#model-ids-arns">model identifier (ID)</a> of the model to use for orchestration by the inline agent. For example, <code>meta.llama3-1-70b-instruct-v1:0</code>.</p>
    /// This field is required.
    pub fn foundation_model(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.foundation_model = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html#model-ids-arns">model identifier (ID)</a> of the model to use for orchestration by the inline agent. For example, <code>meta.llama3-1-70b-instruct-v1:0</code>.</p>
    pub fn set_foundation_model(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.foundation_model = input;
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html#model-ids-arns">model identifier (ID)</a> of the model to use for orchestration by the inline agent. For example, <code>meta.llama3-1-70b-instruct-v1:0</code>.</p>
    pub fn get_foundation_model(&self) -> &::std::option::Option<::std::string::String> {
        &self.foundation_model
    }
    /// <p>The instructions that tell the inline agent what it should do and how it should interact with users.</p>
    /// This field is required.
    pub fn instruction(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instruction = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instructions that tell the inline agent what it should do and how it should interact with users.</p>
    pub fn set_instruction(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instruction = input;
        self
    }
    /// <p>The instructions that tell the inline agent what it should do and how it should interact with users.</p>
    pub fn get_instruction(&self) -> &::std::option::Option<::std::string::String> {
        &self.instruction
    }
    /// <p>The number of seconds for which the inline agent should maintain session information. After this time expires, the subsequent <code>InvokeInlineAgent</code> request begins a new session.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and the data provided before the timeout is deleted.</p>
    pub fn idle_session_ttl_in_seconds(mut self, input: i32) -> Self {
        self.idle_session_ttl_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of seconds for which the inline agent should maintain session information. After this time expires, the subsequent <code>InvokeInlineAgent</code> request begins a new session.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and the data provided before the timeout is deleted.</p>
    pub fn set_idle_session_ttl_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.idle_session_ttl_in_seconds = input;
        self
    }
    /// <p>The number of seconds for which the inline agent should maintain session information. After this time expires, the subsequent <code>InvokeInlineAgent</code> request begins a new session.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and the data provided before the timeout is deleted.</p>
    pub fn get_idle_session_ttl_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.idle_session_ttl_in_seconds
    }
    /// Appends an item to `action_groups`.
    ///
    /// To override the contents of this collection use [`set_action_groups`](Self::set_action_groups).
    ///
    /// <p>A list of action groups with each action group defining the action the inline agent needs to carry out.</p>
    pub fn action_groups(mut self, input: crate::types::AgentActionGroup) -> Self {
        let mut v = self.action_groups.unwrap_or_default();
        v.push(input);
        self.action_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of action groups with each action group defining the action the inline agent needs to carry out.</p>
    pub fn set_action_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AgentActionGroup>>) -> Self {
        self.action_groups = input;
        self
    }
    /// <p>A list of action groups with each action group defining the action the inline agent needs to carry out.</p>
    pub fn get_action_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AgentActionGroup>> {
        &self.action_groups
    }
    /// Appends an item to `knowledge_bases`.
    ///
    /// To override the contents of this collection use [`set_knowledge_bases`](Self::set_knowledge_bases).
    ///
    /// <p>Contains information of the knowledge bases to associate with.</p>
    pub fn knowledge_bases(mut self, input: crate::types::KnowledgeBase) -> Self {
        let mut v = self.knowledge_bases.unwrap_or_default();
        v.push(input);
        self.knowledge_bases = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains information of the knowledge bases to associate with.</p>
    pub fn set_knowledge_bases(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::KnowledgeBase>>) -> Self {
        self.knowledge_bases = input;
        self
    }
    /// <p>Contains information of the knowledge bases to associate with.</p>
    pub fn get_knowledge_bases(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::KnowledgeBase>> {
        &self.knowledge_bases
    }
    /// <p>The <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/guardrails.html">guardrails</a> to assign to the inline agent.</p>
    pub fn guardrail_configuration(mut self, input: crate::types::GuardrailConfigurationWithArn) -> Self {
        self.guardrail_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/guardrails.html">guardrails</a> to assign to the inline agent.</p>
    pub fn set_guardrail_configuration(mut self, input: ::std::option::Option<crate::types::GuardrailConfigurationWithArn>) -> Self {
        self.guardrail_configuration = input;
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/guardrails.html">guardrails</a> to assign to the inline agent.</p>
    pub fn get_guardrail_configuration(&self) -> &::std::option::Option<crate::types::GuardrailConfigurationWithArn> {
        &self.guardrail_configuration
    }
    /// <p>Configurations for advanced prompts used to override the default prompts to enhance the accuracy of the inline agent.</p>
    pub fn prompt_override_configuration(mut self, input: crate::types::PromptOverrideConfiguration) -> Self {
        self.prompt_override_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configurations for advanced prompts used to override the default prompts to enhance the accuracy of the inline agent.</p>
    pub fn set_prompt_override_configuration(mut self, input: ::std::option::Option<crate::types::PromptOverrideConfiguration>) -> Self {
        self.prompt_override_configuration = input;
        self
    }
    /// <p>Configurations for advanced prompts used to override the default prompts to enhance the accuracy of the inline agent.</p>
    pub fn get_prompt_override_configuration(&self) -> &::std::option::Option<crate::types::PromptOverrideConfiguration> {
        &self.prompt_override_configuration
    }
    /// <p>Defines how the inline collaborator agent handles information across multiple collaborator agents to coordinate a final response. The inline collaborator agent can also be the supervisor.</p>
    pub fn agent_collaboration(mut self, input: crate::types::AgentCollaboration) -> Self {
        self.agent_collaboration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines how the inline collaborator agent handles information across multiple collaborator agents to coordinate a final response. The inline collaborator agent can also be the supervisor.</p>
    pub fn set_agent_collaboration(mut self, input: ::std::option::Option<crate::types::AgentCollaboration>) -> Self {
        self.agent_collaboration = input;
        self
    }
    /// <p>Defines how the inline collaborator agent handles information across multiple collaborator agents to coordinate a final response. The inline collaborator agent can also be the supervisor.</p>
    pub fn get_agent_collaboration(&self) -> &::std::option::Option<crate::types::AgentCollaboration> {
        &self.agent_collaboration
    }
    /// Appends an item to `collaborator_configurations`.
    ///
    /// To override the contents of this collection use [`set_collaborator_configurations`](Self::set_collaborator_configurations).
    ///
    /// <p>Settings for an inline agent collaborator called with <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeInlineAgent.html">InvokeInlineAgent</a>.</p>
    pub fn collaborator_configurations(mut self, input: crate::types::CollaboratorConfiguration) -> Self {
        let mut v = self.collaborator_configurations.unwrap_or_default();
        v.push(input);
        self.collaborator_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Settings for an inline agent collaborator called with <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeInlineAgent.html">InvokeInlineAgent</a>.</p>
    pub fn set_collaborator_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CollaboratorConfiguration>>) -> Self {
        self.collaborator_configurations = input;
        self
    }
    /// <p>Settings for an inline agent collaborator called with <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeInlineAgent.html">InvokeInlineAgent</a>.</p>
    pub fn get_collaborator_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CollaboratorConfiguration>> {
        &self.collaborator_configurations
    }
    /// <p>The name for the agent.</p>
    pub fn agent_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for the agent.</p>
    pub fn set_agent_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_name = input;
        self
    }
    /// <p>The name for the agent.</p>
    pub fn get_agent_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_name
    }
    /// <p>The unique identifier of the session. Use the same value across requests to continue the same conversation.</p>
    /// This field is required.
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the session. Use the same value across requests to continue the same conversation.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The unique identifier of the session. Use the same value across requests to continue the same conversation.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>Specifies whether to end the session with the inline agent or not.</p>
    pub fn end_session(mut self, input: bool) -> Self {
        self.end_session = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to end the session with the inline agent or not.</p>
    pub fn set_end_session(mut self, input: ::std::option::Option<bool>) -> Self {
        self.end_session = input;
        self
    }
    /// <p>Specifies whether to end the session with the inline agent or not.</p>
    pub fn get_end_session(&self) -> &::std::option::Option<bool> {
        &self.end_session
    }
    /// <p>Specifies whether to turn on the trace or not to track the agent's reasoning process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/trace-events.html">Using trace</a>.</p>
    pub fn enable_trace(mut self, input: bool) -> Self {
        self.enable_trace = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to turn on the trace or not to track the agent's reasoning process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/trace-events.html">Using trace</a>.</p>
    pub fn set_enable_trace(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_trace = input;
        self
    }
    /// <p>Specifies whether to turn on the trace or not to track the agent's reasoning process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/trace-events.html">Using trace</a>.</p>
    pub fn get_enable_trace(&self) -> &::std::option::Option<bool> {
        &self.enable_trace
    }
    /// <p>The prompt text to send to the agent.</p><note>
    /// <p>If you include <code>returnControlInvocationResults</code> in the <code>sessionState</code> field, the <code>inputText</code> field will be ignored.</p>
    /// </note>
    pub fn input_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The prompt text to send to the agent.</p><note>
    /// <p>If you include <code>returnControlInvocationResults</code> in the <code>sessionState</code> field, the <code>inputText</code> field will be ignored.</p>
    /// </note>
    pub fn set_input_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_text = input;
        self
    }
    /// <p>The prompt text to send to the agent.</p><note>
    /// <p>If you include <code>returnControlInvocationResults</code> in the <code>sessionState</code> field, the <code>inputText</code> field will be ignored.</p>
    /// </note>
    pub fn get_input_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_text
    }
    /// <p>Specifies the configurations for streaming.</p><note>
    /// <p>To use agent streaming, you need permissions to perform the <code>bedrock:InvokeModelWithResponseStream</code> action.</p>
    /// </note>
    pub fn streaming_configurations(mut self, input: crate::types::StreamingConfigurations) -> Self {
        self.streaming_configurations = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the configurations for streaming.</p><note>
    /// <p>To use agent streaming, you need permissions to perform the <code>bedrock:InvokeModelWithResponseStream</code> action.</p>
    /// </note>
    pub fn set_streaming_configurations(mut self, input: ::std::option::Option<crate::types::StreamingConfigurations>) -> Self {
        self.streaming_configurations = input;
        self
    }
    /// <p>Specifies the configurations for streaming.</p><note>
    /// <p>To use agent streaming, you need permissions to perform the <code>bedrock:InvokeModelWithResponseStream</code> action.</p>
    /// </note>
    pub fn get_streaming_configurations(&self) -> &::std::option::Option<crate::types::StreamingConfigurations> {
        &self.streaming_configurations
    }
    /// <p>Specifies parameters that control how the service populates the agent prompt for an <code>InvokeInlineAgent</code> request. You can control which aspects of previous invocations in the same agent session the service uses to populate the agent prompt. This gives you more granular control over the contextual history that is used to process the current request.</p>
    pub fn prompt_creation_configurations(mut self, input: crate::types::PromptCreationConfigurations) -> Self {
        self.prompt_creation_configurations = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies parameters that control how the service populates the agent prompt for an <code>InvokeInlineAgent</code> request. You can control which aspects of previous invocations in the same agent session the service uses to populate the agent prompt. This gives you more granular control over the contextual history that is used to process the current request.</p>
    pub fn set_prompt_creation_configurations(mut self, input: ::std::option::Option<crate::types::PromptCreationConfigurations>) -> Self {
        self.prompt_creation_configurations = input;
        self
    }
    /// <p>Specifies parameters that control how the service populates the agent prompt for an <code>InvokeInlineAgent</code> request. You can control which aspects of previous invocations in the same agent session the service uses to populate the agent prompt. This gives you more granular control over the contextual history that is used to process the current request.</p>
    pub fn get_prompt_creation_configurations(&self) -> &::std::option::Option<crate::types::PromptCreationConfigurations> {
        &self.prompt_creation_configurations
    }
    /// <p>Parameters that specify the various attributes of a sessions. You can include attributes for the session or prompt or, if you configured an action group to return control, results from invocation of the action group. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html">Control session context</a>.</p><note>
    /// <p>If you include <code>returnControlInvocationResults</code> in the <code>sessionState</code> field, the <code>inputText</code> field will be ignored.</p>
    /// </note>
    pub fn inline_session_state(mut self, input: crate::types::InlineSessionState) -> Self {
        self.inline_session_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Parameters that specify the various attributes of a sessions. You can include attributes for the session or prompt or, if you configured an action group to return control, results from invocation of the action group. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html">Control session context</a>.</p><note>
    /// <p>If you include <code>returnControlInvocationResults</code> in the <code>sessionState</code> field, the <code>inputText</code> field will be ignored.</p>
    /// </note>
    pub fn set_inline_session_state(mut self, input: ::std::option::Option<crate::types::InlineSessionState>) -> Self {
        self.inline_session_state = input;
        self
    }
    /// <p>Parameters that specify the various attributes of a sessions. You can include attributes for the session or prompt or, if you configured an action group to return control, results from invocation of the action group. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html">Control session context</a>.</p><note>
    /// <p>If you include <code>returnControlInvocationResults</code> in the <code>sessionState</code> field, the <code>inputText</code> field will be ignored.</p>
    /// </note>
    pub fn get_inline_session_state(&self) -> &::std::option::Option<crate::types::InlineSessionState> {
        &self.inline_session_state
    }
    /// Appends an item to `collaborators`.
    ///
    /// To override the contents of this collection use [`set_collaborators`](Self::set_collaborators).
    ///
    /// <p>List of collaborator inline agents.</p>
    pub fn collaborators(mut self, input: crate::types::Collaborator) -> Self {
        let mut v = self.collaborators.unwrap_or_default();
        v.push(input);
        self.collaborators = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of collaborator inline agents.</p>
    pub fn set_collaborators(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Collaborator>>) -> Self {
        self.collaborators = input;
        self
    }
    /// <p>List of collaborator inline agents.</p>
    pub fn get_collaborators(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Collaborator>> {
        &self.collaborators
    }
    /// <p>Model settings for the request.</p>
    pub fn bedrock_model_configurations(mut self, input: crate::types::InlineBedrockModelConfigurations) -> Self {
        self.bedrock_model_configurations = ::std::option::Option::Some(input);
        self
    }
    /// <p>Model settings for the request.</p>
    pub fn set_bedrock_model_configurations(mut self, input: ::std::option::Option<crate::types::InlineBedrockModelConfigurations>) -> Self {
        self.bedrock_model_configurations = input;
        self
    }
    /// <p>Model settings for the request.</p>
    pub fn get_bedrock_model_configurations(&self) -> &::std::option::Option<crate::types::InlineBedrockModelConfigurations> {
        &self.bedrock_model_configurations
    }
    /// <p>Specifies the type of orchestration strategy for the agent. This is set to DEFAULT orchestration type, by default.</p>
    pub fn orchestration_type(mut self, input: crate::types::OrchestrationType) -> Self {
        self.orchestration_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of orchestration strategy for the agent. This is set to DEFAULT orchestration type, by default.</p>
    pub fn set_orchestration_type(mut self, input: ::std::option::Option<crate::types::OrchestrationType>) -> Self {
        self.orchestration_type = input;
        self
    }
    /// <p>Specifies the type of orchestration strategy for the agent. This is set to DEFAULT orchestration type, by default.</p>
    pub fn get_orchestration_type(&self) -> &::std::option::Option<crate::types::OrchestrationType> {
        &self.orchestration_type
    }
    /// <p>Contains details of the custom orchestration configured for the agent.</p>
    pub fn custom_orchestration(mut self, input: crate::types::CustomOrchestration) -> Self {
        self.custom_orchestration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details of the custom orchestration configured for the agent.</p>
    pub fn set_custom_orchestration(mut self, input: ::std::option::Option<crate::types::CustomOrchestration>) -> Self {
        self.custom_orchestration = input;
        self
    }
    /// <p>Contains details of the custom orchestration configured for the agent.</p>
    pub fn get_custom_orchestration(&self) -> &::std::option::Option<crate::types::CustomOrchestration> {
        &self.custom_orchestration
    }
    /// Consumes the builder and constructs a [`InvokeInlineAgentInput`](crate::operation::invoke_inline_agent::InvokeInlineAgentInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::invoke_inline_agent::InvokeInlineAgentInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::invoke_inline_agent::InvokeInlineAgentInput {
            customer_encryption_key_arn: self.customer_encryption_key_arn,
            foundation_model: self.foundation_model,
            instruction: self.instruction,
            idle_session_ttl_in_seconds: self.idle_session_ttl_in_seconds,
            action_groups: self.action_groups,
            knowledge_bases: self.knowledge_bases,
            guardrail_configuration: self.guardrail_configuration,
            prompt_override_configuration: self.prompt_override_configuration,
            agent_collaboration: self.agent_collaboration,
            collaborator_configurations: self.collaborator_configurations,
            agent_name: self.agent_name,
            session_id: self.session_id,
            end_session: self.end_session,
            enable_trace: self.enable_trace,
            input_text: self.input_text,
            streaming_configurations: self.streaming_configurations,
            prompt_creation_configurations: self.prompt_creation_configurations,
            inline_session_state: self.inline_session_state,
            collaborators: self.collaborators,
            bedrock_model_configurations: self.bedrock_model_configurations,
            orchestration_type: self.orchestration_type,
            custom_orchestration: self.custom_orchestration,
        })
    }
}
impl ::std::fmt::Debug for InvokeInlineAgentInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InvokeInlineAgentInputBuilder");
        formatter.field("customer_encryption_key_arn", &self.customer_encryption_key_arn);
        formatter.field("foundation_model", &self.foundation_model);
        formatter.field("instruction", &"*** Sensitive Data Redacted ***");
        formatter.field("idle_session_ttl_in_seconds", &self.idle_session_ttl_in_seconds);
        formatter.field("action_groups", &self.action_groups);
        formatter.field("knowledge_bases", &self.knowledge_bases);
        formatter.field("guardrail_configuration", &self.guardrail_configuration);
        formatter.field("prompt_override_configuration", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_collaboration", &self.agent_collaboration);
        formatter.field("collaborator_configurations", &self.collaborator_configurations);
        formatter.field("agent_name", &"*** Sensitive Data Redacted ***");
        formatter.field("session_id", &self.session_id);
        formatter.field("end_session", &self.end_session);
        formatter.field("enable_trace", &self.enable_trace);
        formatter.field("input_text", &"*** Sensitive Data Redacted ***");
        formatter.field("streaming_configurations", &self.streaming_configurations);
        formatter.field("prompt_creation_configurations", &self.prompt_creation_configurations);
        formatter.field("inline_session_state", &self.inline_session_state);
        formatter.field("collaborators", &self.collaborators);
        formatter.field("bedrock_model_configurations", &self.bedrock_model_configurations);
        formatter.field("orchestration_type", &self.orchestration_type);
        formatter.field("custom_orchestration", &self.custom_orchestration);
        formatter.finish()
    }
}
