// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListFlowExecutionEventsInput {
    /// <p>The unique identifier of the flow.</p>
    pub flow_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the flow alias used for the execution.</p>
    pub flow_alias_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the flow execution.</p>
    pub execution_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of events to return in a single response. If more events exist than the specified maxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>A token to retrieve the next set of results. This value is returned in the response if more results are available.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The type of events to retrieve. Specify <code>Node</code> for node-level events or <code>Flow</code> for flow-level events.</p>
    pub event_type: ::std::option::Option<crate::types::FlowExecutionEventType>,
}
impl ListFlowExecutionEventsInput {
    /// <p>The unique identifier of the flow.</p>
    pub fn flow_identifier(&self) -> ::std::option::Option<&str> {
        self.flow_identifier.as_deref()
    }
    /// <p>The unique identifier of the flow alias used for the execution.</p>
    pub fn flow_alias_identifier(&self) -> ::std::option::Option<&str> {
        self.flow_alias_identifier.as_deref()
    }
    /// <p>The unique identifier of the flow execution.</p>
    pub fn execution_identifier(&self) -> ::std::option::Option<&str> {
        self.execution_identifier.as_deref()
    }
    /// <p>The maximum number of events to return in a single response. If more events exist than the specified maxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>A token to retrieve the next set of results. This value is returned in the response if more results are available.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The type of events to retrieve. Specify <code>Node</code> for node-level events or <code>Flow</code> for flow-level events.</p>
    pub fn event_type(&self) -> ::std::option::Option<&crate::types::FlowExecutionEventType> {
        self.event_type.as_ref()
    }
}
impl ListFlowExecutionEventsInput {
    /// Creates a new builder-style object to manufacture [`ListFlowExecutionEventsInput`](crate::operation::list_flow_execution_events::ListFlowExecutionEventsInput).
    pub fn builder() -> crate::operation::list_flow_execution_events::builders::ListFlowExecutionEventsInputBuilder {
        crate::operation::list_flow_execution_events::builders::ListFlowExecutionEventsInputBuilder::default()
    }
}

/// A builder for [`ListFlowExecutionEventsInput`](crate::operation::list_flow_execution_events::ListFlowExecutionEventsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListFlowExecutionEventsInputBuilder {
    pub(crate) flow_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) flow_alias_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) execution_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) event_type: ::std::option::Option<crate::types::FlowExecutionEventType>,
}
impl ListFlowExecutionEventsInputBuilder {
    /// <p>The unique identifier of the flow.</p>
    /// This field is required.
    pub fn flow_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.flow_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the flow.</p>
    pub fn set_flow_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.flow_identifier = input;
        self
    }
    /// <p>The unique identifier of the flow.</p>
    pub fn get_flow_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.flow_identifier
    }
    /// <p>The unique identifier of the flow alias used for the execution.</p>
    /// This field is required.
    pub fn flow_alias_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.flow_alias_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the flow alias used for the execution.</p>
    pub fn set_flow_alias_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.flow_alias_identifier = input;
        self
    }
    /// <p>The unique identifier of the flow alias used for the execution.</p>
    pub fn get_flow_alias_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.flow_alias_identifier
    }
    /// <p>The unique identifier of the flow execution.</p>
    /// This field is required.
    pub fn execution_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the flow execution.</p>
    pub fn set_execution_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_identifier = input;
        self
    }
    /// <p>The unique identifier of the flow execution.</p>
    pub fn get_execution_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_identifier
    }
    /// <p>The maximum number of events to return in a single response. If more events exist than the specified maxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of events to return in a single response. If more events exist than the specified maxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of events to return in a single response. If more events exist than the specified maxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>A token to retrieve the next set of results. This value is returned in the response if more results are available.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token to retrieve the next set of results. This value is returned in the response if more results are available.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token to retrieve the next set of results. This value is returned in the response if more results are available.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The type of events to retrieve. Specify <code>Node</code> for node-level events or <code>Flow</code> for flow-level events.</p>
    /// This field is required.
    pub fn event_type(mut self, input: crate::types::FlowExecutionEventType) -> Self {
        self.event_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of events to retrieve. Specify <code>Node</code> for node-level events or <code>Flow</code> for flow-level events.</p>
    pub fn set_event_type(mut self, input: ::std::option::Option<crate::types::FlowExecutionEventType>) -> Self {
        self.event_type = input;
        self
    }
    /// <p>The type of events to retrieve. Specify <code>Node</code> for node-level events or <code>Flow</code> for flow-level events.</p>
    pub fn get_event_type(&self) -> &::std::option::Option<crate::types::FlowExecutionEventType> {
        &self.event_type
    }
    /// Consumes the builder and constructs a [`ListFlowExecutionEventsInput`](crate::operation::list_flow_execution_events::ListFlowExecutionEventsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_flow_execution_events::ListFlowExecutionEventsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_flow_execution_events::ListFlowExecutionEventsInput {
            flow_identifier: self.flow_identifier,
            flow_alias_identifier: self.flow_alias_identifier,
            execution_identifier: self.execution_identifier,
            max_results: self.max_results,
            next_token: self.next_token,
            event_type: self.event_type,
        })
    }
}
