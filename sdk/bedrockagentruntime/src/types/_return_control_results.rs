// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An action invocation result.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReturnControlResults {
    /// <p>The action's invocation ID.</p>
    pub invocation_id: ::std::option::Option<::std::string::String>,
    /// <p>The action invocation result.</p>
    pub return_control_invocation_results: ::std::option::Option<::std::vec::Vec<crate::types::InvocationResultMember>>,
}
impl ReturnControlResults {
    /// <p>The action's invocation ID.</p>
    pub fn invocation_id(&self) -> ::std::option::Option<&str> {
        self.invocation_id.as_deref()
    }
    /// <p>The action invocation result.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.return_control_invocation_results.is_none()`.
    pub fn return_control_invocation_results(&self) -> &[crate::types::InvocationResultMember] {
        self.return_control_invocation_results.as_deref().unwrap_or_default()
    }
}
impl ReturnControlResults {
    /// Creates a new builder-style object to manufacture [`ReturnControlResults`](crate::types::ReturnControlResults).
    pub fn builder() -> crate::types::builders::ReturnControlResultsBuilder {
        crate::types::builders::ReturnControlResultsBuilder::default()
    }
}

/// A builder for [`ReturnControlResults`](crate::types::ReturnControlResults).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ReturnControlResultsBuilder {
    pub(crate) invocation_id: ::std::option::Option<::std::string::String>,
    pub(crate) return_control_invocation_results: ::std::option::Option<::std::vec::Vec<crate::types::InvocationResultMember>>,
}
impl ReturnControlResultsBuilder {
    /// <p>The action's invocation ID.</p>
    pub fn invocation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.invocation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The action's invocation ID.</p>
    pub fn set_invocation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.invocation_id = input;
        self
    }
    /// <p>The action's invocation ID.</p>
    pub fn get_invocation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.invocation_id
    }
    /// Appends an item to `return_control_invocation_results`.
    ///
    /// To override the contents of this collection use [`set_return_control_invocation_results`](Self::set_return_control_invocation_results).
    ///
    /// <p>The action invocation result.</p>
    pub fn return_control_invocation_results(mut self, input: crate::types::InvocationResultMember) -> Self {
        let mut v = self.return_control_invocation_results.unwrap_or_default();
        v.push(input);
        self.return_control_invocation_results = ::std::option::Option::Some(v);
        self
    }
    /// <p>The action invocation result.</p>
    pub fn set_return_control_invocation_results(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::InvocationResultMember>>,
    ) -> Self {
        self.return_control_invocation_results = input;
        self
    }
    /// <p>The action invocation result.</p>
    pub fn get_return_control_invocation_results(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InvocationResultMember>> {
        &self.return_control_invocation_results
    }
    /// Consumes the builder and constructs a [`ReturnControlResults`](crate::types::ReturnControlResults).
    pub fn build(self) -> crate::types::ReturnControlResults {
        crate::types::ReturnControlResults {
            invocation_id: self.invocation_id,
            return_control_invocation_results: self.return_control_invocation_results,
        }
    }
}
