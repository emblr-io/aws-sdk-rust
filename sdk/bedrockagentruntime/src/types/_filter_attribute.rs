// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the name that the metadata attribute must match and the value to which to compare the value of the metadata attribute. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/kb-test-config.html">Query configurations</a>.</p>
/// <p>This data type is used in the following API operations:</p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_RetrieveAndGenerate.html#API_agent-runtime_RetrieveAndGenerate_RequestSyntax">RetrieveAndGenerate request</a></p></li>
/// </ul>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FilterAttribute {
    /// <p>The name that the metadata attribute must match.</p>
    pub key: ::std::string::String,
    /// <p>The value to whcih to compare the value of the metadata attribute.</p>
    pub value: ::aws_smithy_types::Document,
}
impl FilterAttribute {
    /// <p>The name that the metadata attribute must match.</p>
    pub fn key(&self) -> &str {
        use std::ops::Deref;
        self.key.deref()
    }
    /// <p>The value to whcih to compare the value of the metadata attribute.</p>
    pub fn value(&self) -> &::aws_smithy_types::Document {
        &self.value
    }
}
impl FilterAttribute {
    /// Creates a new builder-style object to manufacture [`FilterAttribute`](crate::types::FilterAttribute).
    pub fn builder() -> crate::types::builders::FilterAttributeBuilder {
        crate::types::builders::FilterAttributeBuilder::default()
    }
}

/// A builder for [`FilterAttribute`](crate::types::FilterAttribute).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FilterAttributeBuilder {
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::aws_smithy_types::Document>,
}
impl FilterAttributeBuilder {
    /// <p>The name that the metadata attribute must match.</p>
    /// This field is required.
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name that the metadata attribute must match.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The name that the metadata attribute must match.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>The value to whcih to compare the value of the metadata attribute.</p>
    /// This field is required.
    pub fn value(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value to whcih to compare the value of the metadata attribute.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value to whcih to compare the value of the metadata attribute.</p>
    pub fn get_value(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.value
    }
    /// Consumes the builder and constructs a [`FilterAttribute`](crate::types::FilterAttribute).
    /// This method will fail if any of the following fields are not set:
    /// - [`key`](crate::types::builders::FilterAttributeBuilder::key)
    /// - [`value`](crate::types::builders::FilterAttributeBuilder::value)
    pub fn build(self) -> ::std::result::Result<crate::types::FilterAttribute, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FilterAttribute {
            key: self.key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key",
                    "key was not specified but it is required when building FilterAttribute",
                )
            })?,
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building FilterAttribute",
                )
            })?,
        })
    }
}
