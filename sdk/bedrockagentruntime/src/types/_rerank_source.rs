// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a source for reranking.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RerankSource {
    /// <p>The type of the source.</p>
    pub r#type: crate::types::RerankSourceType,
    /// <p>Contains an inline definition of a source for reranking.</p>
    pub inline_document_source: ::std::option::Option<crate::types::RerankDocument>,
}
impl RerankSource {
    /// <p>The type of the source.</p>
    pub fn r#type(&self) -> &crate::types::RerankSourceType {
        &self.r#type
    }
    /// <p>Contains an inline definition of a source for reranking.</p>
    pub fn inline_document_source(&self) -> ::std::option::Option<&crate::types::RerankDocument> {
        self.inline_document_source.as_ref()
    }
}
impl ::std::fmt::Debug for RerankSource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RerankSource");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("inline_document_source", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RerankSource {
    /// Creates a new builder-style object to manufacture [`RerankSource`](crate::types::RerankSource).
    pub fn builder() -> crate::types::builders::RerankSourceBuilder {
        crate::types::builders::RerankSourceBuilder::default()
    }
}

/// A builder for [`RerankSource`](crate::types::RerankSource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RerankSourceBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::RerankSourceType>,
    pub(crate) inline_document_source: ::std::option::Option<crate::types::RerankDocument>,
}
impl RerankSourceBuilder {
    /// <p>The type of the source.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::RerankSourceType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the source.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RerankSourceType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the source.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RerankSourceType> {
        &self.r#type
    }
    /// <p>Contains an inline definition of a source for reranking.</p>
    /// This field is required.
    pub fn inline_document_source(mut self, input: crate::types::RerankDocument) -> Self {
        self.inline_document_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains an inline definition of a source for reranking.</p>
    pub fn set_inline_document_source(mut self, input: ::std::option::Option<crate::types::RerankDocument>) -> Self {
        self.inline_document_source = input;
        self
    }
    /// <p>Contains an inline definition of a source for reranking.</p>
    pub fn get_inline_document_source(&self) -> &::std::option::Option<crate::types::RerankDocument> {
        &self.inline_document_source
    }
    /// Consumes the builder and constructs a [`RerankSource`](crate::types::RerankSource).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::RerankSourceBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::RerankSource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RerankSource {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building RerankSource",
                )
            })?,
            inline_document_source: self.inline_document_source,
        })
    }
}
impl ::std::fmt::Debug for RerankSourceBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RerankSourceBuilder");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("inline_document_source", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
