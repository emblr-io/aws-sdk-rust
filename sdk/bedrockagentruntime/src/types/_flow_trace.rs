// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an input or output for a node in the flow. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/flows-trace.html">Track each step in your prompt flow by viewing its trace in Amazon Bedrock</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub enum FlowTrace {
    /// <p>Contains information about an output from a condition node.</p>
    ConditionNodeResultTrace(crate::types::FlowTraceConditionNodeResultEvent),
    /// <p>Contains information about an action (operation) called by a node. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/flows-trace.html">Track each step in your prompt flow by viewing its trace in Amazon Bedrock</a>.</p>
    NodeActionTrace(crate::types::FlowTraceNodeActionEvent),
    /// <p>Contains information about the input into a node.</p>
    NodeInputTrace(crate::types::FlowTraceNodeInputEvent),
    /// <p>Contains information about the output from a node.</p>
    NodeOutputTrace(crate::types::FlowTraceNodeOutputEvent),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl FlowTrace {
    /// Tries to convert the enum instance into [`ConditionNodeResultTrace`](crate::types::FlowTrace::ConditionNodeResultTrace), extracting the inner [`FlowTraceConditionNodeResultEvent`](crate::types::FlowTraceConditionNodeResultEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_condition_node_result_trace(&self) -> ::std::result::Result<&crate::types::FlowTraceConditionNodeResultEvent, &Self> {
        if let FlowTrace::ConditionNodeResultTrace(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ConditionNodeResultTrace`](crate::types::FlowTrace::ConditionNodeResultTrace).
    pub fn is_condition_node_result_trace(&self) -> bool {
        self.as_condition_node_result_trace().is_ok()
    }
    /// Tries to convert the enum instance into [`NodeActionTrace`](crate::types::FlowTrace::NodeActionTrace), extracting the inner [`FlowTraceNodeActionEvent`](crate::types::FlowTraceNodeActionEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_node_action_trace(&self) -> ::std::result::Result<&crate::types::FlowTraceNodeActionEvent, &Self> {
        if let FlowTrace::NodeActionTrace(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`NodeActionTrace`](crate::types::FlowTrace::NodeActionTrace).
    pub fn is_node_action_trace(&self) -> bool {
        self.as_node_action_trace().is_ok()
    }
    /// Tries to convert the enum instance into [`NodeInputTrace`](crate::types::FlowTrace::NodeInputTrace), extracting the inner [`FlowTraceNodeInputEvent`](crate::types::FlowTraceNodeInputEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_node_input_trace(&self) -> ::std::result::Result<&crate::types::FlowTraceNodeInputEvent, &Self> {
        if let FlowTrace::NodeInputTrace(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`NodeInputTrace`](crate::types::FlowTrace::NodeInputTrace).
    pub fn is_node_input_trace(&self) -> bool {
        self.as_node_input_trace().is_ok()
    }
    /// Tries to convert the enum instance into [`NodeOutputTrace`](crate::types::FlowTrace::NodeOutputTrace), extracting the inner [`FlowTraceNodeOutputEvent`](crate::types::FlowTraceNodeOutputEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_node_output_trace(&self) -> ::std::result::Result<&crate::types::FlowTraceNodeOutputEvent, &Self> {
        if let FlowTrace::NodeOutputTrace(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`NodeOutputTrace`](crate::types::FlowTrace::NodeOutputTrace).
    pub fn is_node_output_trace(&self) -> bool {
        self.as_node_output_trace().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
impl ::std::fmt::Debug for FlowTrace {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::std::write!(f, "*** Sensitive Data Redacted ***")
    }
}
