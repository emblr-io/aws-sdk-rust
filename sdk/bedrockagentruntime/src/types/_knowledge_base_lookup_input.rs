// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the knowledge base to look up and the query to be made.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct KnowledgeBaseLookupInput {
    /// <p>The query made to the knowledge base.</p>
    pub text: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the knowledge base to look up.</p>
    pub knowledge_base_id: ::std::option::Option<::std::string::String>,
}
impl KnowledgeBaseLookupInput {
    /// <p>The query made to the knowledge base.</p>
    pub fn text(&self) -> ::std::option::Option<&str> {
        self.text.as_deref()
    }
    /// <p>The unique identifier of the knowledge base to look up.</p>
    pub fn knowledge_base_id(&self) -> ::std::option::Option<&str> {
        self.knowledge_base_id.as_deref()
    }
}
impl ::std::fmt::Debug for KnowledgeBaseLookupInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("KnowledgeBaseLookupInput");
        formatter.field("text", &"*** Sensitive Data Redacted ***");
        formatter.field("knowledge_base_id", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl KnowledgeBaseLookupInput {
    /// Creates a new builder-style object to manufacture [`KnowledgeBaseLookupInput`](crate::types::KnowledgeBaseLookupInput).
    pub fn builder() -> crate::types::builders::KnowledgeBaseLookupInputBuilder {
        crate::types::builders::KnowledgeBaseLookupInputBuilder::default()
    }
}

/// A builder for [`KnowledgeBaseLookupInput`](crate::types::KnowledgeBaseLookupInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct KnowledgeBaseLookupInputBuilder {
    pub(crate) text: ::std::option::Option<::std::string::String>,
    pub(crate) knowledge_base_id: ::std::option::Option<::std::string::String>,
}
impl KnowledgeBaseLookupInputBuilder {
    /// <p>The query made to the knowledge base.</p>
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The query made to the knowledge base.</p>
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>The query made to the knowledge base.</p>
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }
    /// <p>The unique identifier of the knowledge base to look up.</p>
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the knowledge base to look up.</p>
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// <p>The unique identifier of the knowledge base to look up.</p>
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_id
    }
    /// Consumes the builder and constructs a [`KnowledgeBaseLookupInput`](crate::types::KnowledgeBaseLookupInput).
    pub fn build(self) -> crate::types::KnowledgeBaseLookupInput {
        crate::types::KnowledgeBaseLookupInput {
            text: self.text,
            knowledge_base_id: self.knowledge_base_id,
        }
    }
}
impl ::std::fmt::Debug for KnowledgeBaseLookupInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("KnowledgeBaseLookupInputBuilder");
        formatter.field("text", &"*** Sensitive Data Redacted ***");
        formatter.field("knowledge_base_id", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
