// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the response from the Lambda parsing of the output from the pre-processing step.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PreProcessingParsedResponse {
    /// <p>The text returned by the parsing of the pre-processing step, explaining the steps that the agent plans to take in orchestration, if the user input is valid.</p>
    pub rationale: ::std::option::Option<::std::string::String>,
    /// <p>Whether the user input is valid or not. If <code>false</code>, the agent doesn't proceed to orchestration.</p>
    pub is_valid: ::std::option::Option<bool>,
}
impl PreProcessingParsedResponse {
    /// <p>The text returned by the parsing of the pre-processing step, explaining the steps that the agent plans to take in orchestration, if the user input is valid.</p>
    pub fn rationale(&self) -> ::std::option::Option<&str> {
        self.rationale.as_deref()
    }
    /// <p>Whether the user input is valid or not. If <code>false</code>, the agent doesn't proceed to orchestration.</p>
    pub fn is_valid(&self) -> ::std::option::Option<bool> {
        self.is_valid
    }
}
impl ::std::fmt::Debug for PreProcessingParsedResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PreProcessingParsedResponse");
        formatter.field("rationale", &"*** Sensitive Data Redacted ***");
        formatter.field("is_valid", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl PreProcessingParsedResponse {
    /// Creates a new builder-style object to manufacture [`PreProcessingParsedResponse`](crate::types::PreProcessingParsedResponse).
    pub fn builder() -> crate::types::builders::PreProcessingParsedResponseBuilder {
        crate::types::builders::PreProcessingParsedResponseBuilder::default()
    }
}

/// A builder for [`PreProcessingParsedResponse`](crate::types::PreProcessingParsedResponse).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct PreProcessingParsedResponseBuilder {
    pub(crate) rationale: ::std::option::Option<::std::string::String>,
    pub(crate) is_valid: ::std::option::Option<bool>,
}
impl PreProcessingParsedResponseBuilder {
    /// <p>The text returned by the parsing of the pre-processing step, explaining the steps that the agent plans to take in orchestration, if the user input is valid.</p>
    pub fn rationale(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rationale = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text returned by the parsing of the pre-processing step, explaining the steps that the agent plans to take in orchestration, if the user input is valid.</p>
    pub fn set_rationale(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rationale = input;
        self
    }
    /// <p>The text returned by the parsing of the pre-processing step, explaining the steps that the agent plans to take in orchestration, if the user input is valid.</p>
    pub fn get_rationale(&self) -> &::std::option::Option<::std::string::String> {
        &self.rationale
    }
    /// <p>Whether the user input is valid or not. If <code>false</code>, the agent doesn't proceed to orchestration.</p>
    pub fn is_valid(mut self, input: bool) -> Self {
        self.is_valid = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the user input is valid or not. If <code>false</code>, the agent doesn't proceed to orchestration.</p>
    pub fn set_is_valid(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_valid = input;
        self
    }
    /// <p>Whether the user input is valid or not. If <code>false</code>, the agent doesn't proceed to orchestration.</p>
    pub fn get_is_valid(&self) -> &::std::option::Option<bool> {
        &self.is_valid
    }
    /// Consumes the builder and constructs a [`PreProcessingParsedResponse`](crate::types::PreProcessingParsedResponse).
    pub fn build(self) -> crate::types::PreProcessingParsedResponse {
        crate::types::PreProcessingParsedResponse {
            rationale: self.rationale,
            is_valid: self.is_valid,
        }
    }
}
impl ::std::fmt::Debug for PreProcessingParsedResponseBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PreProcessingParsedResponseBuilder");
        formatter.field("rationale", &"*** Sensitive Data Redacted ***");
        formatter.field("is_valid", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
