// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Stores fine-grained state checkpoints, including text and images, for each interaction in an invocation in a session. For more information about sessions, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/sessions.html">Store and retrieve conversation history and context with Amazon Bedrock sessions</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InvocationStep {
    /// <p>The unique identifier of the session containing the invocation step.</p>
    pub session_id: ::std::string::String,
    /// <p>The unique identifier (in UUID format) for the invocation that includes the invocation step.</p>
    pub invocation_id: ::std::string::String,
    /// <p>The unique identifier (in UUID format) for the invocation step.</p>
    pub invocation_step_id: ::std::string::String,
    /// <p>The timestamp for when the invocation step was created.</p>
    pub invocation_step_time: ::aws_smithy_types::DateTime,
    /// <p>Payload content, such as text and images, for the invocation step.</p>
    pub payload: ::std::option::Option<crate::types::InvocationStepPayload>,
}
impl InvocationStep {
    /// <p>The unique identifier of the session containing the invocation step.</p>
    pub fn session_id(&self) -> &str {
        use std::ops::Deref;
        self.session_id.deref()
    }
    /// <p>The unique identifier (in UUID format) for the invocation that includes the invocation step.</p>
    pub fn invocation_id(&self) -> &str {
        use std::ops::Deref;
        self.invocation_id.deref()
    }
    /// <p>The unique identifier (in UUID format) for the invocation step.</p>
    pub fn invocation_step_id(&self) -> &str {
        use std::ops::Deref;
        self.invocation_step_id.deref()
    }
    /// <p>The timestamp for when the invocation step was created.</p>
    pub fn invocation_step_time(&self) -> &::aws_smithy_types::DateTime {
        &self.invocation_step_time
    }
    /// <p>Payload content, such as text and images, for the invocation step.</p>
    pub fn payload(&self) -> ::std::option::Option<&crate::types::InvocationStepPayload> {
        self.payload.as_ref()
    }
}
impl InvocationStep {
    /// Creates a new builder-style object to manufacture [`InvocationStep`](crate::types::InvocationStep).
    pub fn builder() -> crate::types::builders::InvocationStepBuilder {
        crate::types::builders::InvocationStepBuilder::default()
    }
}

/// A builder for [`InvocationStep`](crate::types::InvocationStep).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InvocationStepBuilder {
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) invocation_id: ::std::option::Option<::std::string::String>,
    pub(crate) invocation_step_id: ::std::option::Option<::std::string::String>,
    pub(crate) invocation_step_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) payload: ::std::option::Option<crate::types::InvocationStepPayload>,
}
impl InvocationStepBuilder {
    /// <p>The unique identifier of the session containing the invocation step.</p>
    /// This field is required.
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the session containing the invocation step.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The unique identifier of the session containing the invocation step.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>The unique identifier (in UUID format) for the invocation that includes the invocation step.</p>
    /// This field is required.
    pub fn invocation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.invocation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier (in UUID format) for the invocation that includes the invocation step.</p>
    pub fn set_invocation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.invocation_id = input;
        self
    }
    /// <p>The unique identifier (in UUID format) for the invocation that includes the invocation step.</p>
    pub fn get_invocation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.invocation_id
    }
    /// <p>The unique identifier (in UUID format) for the invocation step.</p>
    /// This field is required.
    pub fn invocation_step_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.invocation_step_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier (in UUID format) for the invocation step.</p>
    pub fn set_invocation_step_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.invocation_step_id = input;
        self
    }
    /// <p>The unique identifier (in UUID format) for the invocation step.</p>
    pub fn get_invocation_step_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.invocation_step_id
    }
    /// <p>The timestamp for when the invocation step was created.</p>
    /// This field is required.
    pub fn invocation_step_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.invocation_step_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp for when the invocation step was created.</p>
    pub fn set_invocation_step_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.invocation_step_time = input;
        self
    }
    /// <p>The timestamp for when the invocation step was created.</p>
    pub fn get_invocation_step_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.invocation_step_time
    }
    /// <p>Payload content, such as text and images, for the invocation step.</p>
    /// This field is required.
    pub fn payload(mut self, input: crate::types::InvocationStepPayload) -> Self {
        self.payload = ::std::option::Option::Some(input);
        self
    }
    /// <p>Payload content, such as text and images, for the invocation step.</p>
    pub fn set_payload(mut self, input: ::std::option::Option<crate::types::InvocationStepPayload>) -> Self {
        self.payload = input;
        self
    }
    /// <p>Payload content, such as text and images, for the invocation step.</p>
    pub fn get_payload(&self) -> &::std::option::Option<crate::types::InvocationStepPayload> {
        &self.payload
    }
    /// Consumes the builder and constructs a [`InvocationStep`](crate::types::InvocationStep).
    /// This method will fail if any of the following fields are not set:
    /// - [`session_id`](crate::types::builders::InvocationStepBuilder::session_id)
    /// - [`invocation_id`](crate::types::builders::InvocationStepBuilder::invocation_id)
    /// - [`invocation_step_id`](crate::types::builders::InvocationStepBuilder::invocation_step_id)
    /// - [`invocation_step_time`](crate::types::builders::InvocationStepBuilder::invocation_step_time)
    pub fn build(self) -> ::std::result::Result<crate::types::InvocationStep, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::InvocationStep {
            session_id: self.session_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "session_id",
                    "session_id was not specified but it is required when building InvocationStep",
                )
            })?,
            invocation_id: self.invocation_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "invocation_id",
                    "invocation_id was not specified but it is required when building InvocationStep",
                )
            })?,
            invocation_step_id: self.invocation_step_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "invocation_step_id",
                    "invocation_step_id was not specified but it is required when building InvocationStep",
                )
            })?,
            invocation_step_time: self.invocation_step_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "invocation_step_time",
                    "invocation_step_time was not specified but it is required when building InvocationStep",
                )
            })?,
            payload: self.payload,
        })
    }
}
