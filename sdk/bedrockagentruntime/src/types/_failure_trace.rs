// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the failure of the interaction.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct FailureTrace {
    /// <p>The unique identifier of the trace.</p>
    pub trace_id: ::std::option::Option<::std::string::String>,
    /// <p>The reason the interaction failed.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>The failure code for the trace.</p>
    pub failure_code: ::std::option::Option<i32>,
    /// <p>Information about the failure that occurred.</p>
    pub metadata: ::std::option::Option<crate::types::Metadata>,
}
impl FailureTrace {
    /// <p>The unique identifier of the trace.</p>
    pub fn trace_id(&self) -> ::std::option::Option<&str> {
        self.trace_id.as_deref()
    }
    /// <p>The reason the interaction failed.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The failure code for the trace.</p>
    pub fn failure_code(&self) -> ::std::option::Option<i32> {
        self.failure_code
    }
    /// <p>Information about the failure that occurred.</p>
    pub fn metadata(&self) -> ::std::option::Option<&crate::types::Metadata> {
        self.metadata.as_ref()
    }
}
impl ::std::fmt::Debug for FailureTrace {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FailureTrace");
        formatter.field("trace_id", &"*** Sensitive Data Redacted ***");
        formatter.field("failure_reason", &"*** Sensitive Data Redacted ***");
        formatter.field("failure_code", &"*** Sensitive Data Redacted ***");
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl FailureTrace {
    /// Creates a new builder-style object to manufacture [`FailureTrace`](crate::types::FailureTrace).
    pub fn builder() -> crate::types::builders::FailureTraceBuilder {
        crate::types::builders::FailureTraceBuilder::default()
    }
}

/// A builder for [`FailureTrace`](crate::types::FailureTrace).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct FailureTraceBuilder {
    pub(crate) trace_id: ::std::option::Option<::std::string::String>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) failure_code: ::std::option::Option<i32>,
    pub(crate) metadata: ::std::option::Option<crate::types::Metadata>,
}
impl FailureTraceBuilder {
    /// <p>The unique identifier of the trace.</p>
    pub fn trace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the trace.</p>
    pub fn set_trace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trace_id = input;
        self
    }
    /// <p>The unique identifier of the trace.</p>
    pub fn get_trace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.trace_id
    }
    /// <p>The reason the interaction failed.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason the interaction failed.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The reason the interaction failed.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// <p>The failure code for the trace.</p>
    pub fn failure_code(mut self, input: i32) -> Self {
        self.failure_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The failure code for the trace.</p>
    pub fn set_failure_code(mut self, input: ::std::option::Option<i32>) -> Self {
        self.failure_code = input;
        self
    }
    /// <p>The failure code for the trace.</p>
    pub fn get_failure_code(&self) -> &::std::option::Option<i32> {
        &self.failure_code
    }
    /// <p>Information about the failure that occurred.</p>
    pub fn metadata(mut self, input: crate::types::Metadata) -> Self {
        self.metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the failure that occurred.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<crate::types::Metadata>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>Information about the failure that occurred.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<crate::types::Metadata> {
        &self.metadata
    }
    /// Consumes the builder and constructs a [`FailureTrace`](crate::types::FailureTrace).
    pub fn build(self) -> crate::types::FailureTrace {
        crate::types::FailureTrace {
            trace_id: self.trace_id,
            failure_reason: self.failure_reason,
            failure_code: self.failure_code,
            metadata: self.metadata,
        }
    }
}
impl ::std::fmt::Debug for FailureTraceBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FailureTraceBuilder");
        formatter.field("trace_id", &"*** Sensitive Data Redacted ***");
        formatter.field("failure_reason", &"*** Sensitive Data Redacted ***");
        formatter.field("failure_code", &"*** Sensitive Data Redacted ***");
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
