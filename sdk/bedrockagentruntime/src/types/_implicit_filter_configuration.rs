// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings for implicit filtering, where a model generates a metadata filter based on the prompt.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImplicitFilterConfiguration {
    /// <p>Metadata that can be used in a filter.</p>
    pub metadata_attributes: ::std::vec::Vec<crate::types::MetadataAttributeSchema>,
    /// <p>The model that generates the filter.</p>
    pub model_arn: ::std::string::String,
}
impl ImplicitFilterConfiguration {
    /// <p>Metadata that can be used in a filter.</p>
    pub fn metadata_attributes(&self) -> &[crate::types::MetadataAttributeSchema] {
        use std::ops::Deref;
        self.metadata_attributes.deref()
    }
    /// <p>The model that generates the filter.</p>
    pub fn model_arn(&self) -> &str {
        use std::ops::Deref;
        self.model_arn.deref()
    }
}
impl ImplicitFilterConfiguration {
    /// Creates a new builder-style object to manufacture [`ImplicitFilterConfiguration`](crate::types::ImplicitFilterConfiguration).
    pub fn builder() -> crate::types::builders::ImplicitFilterConfigurationBuilder {
        crate::types::builders::ImplicitFilterConfigurationBuilder::default()
    }
}

/// A builder for [`ImplicitFilterConfiguration`](crate::types::ImplicitFilterConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ImplicitFilterConfigurationBuilder {
    pub(crate) metadata_attributes: ::std::option::Option<::std::vec::Vec<crate::types::MetadataAttributeSchema>>,
    pub(crate) model_arn: ::std::option::Option<::std::string::String>,
}
impl ImplicitFilterConfigurationBuilder {
    /// Appends an item to `metadata_attributes`.
    ///
    /// To override the contents of this collection use [`set_metadata_attributes`](Self::set_metadata_attributes).
    ///
    /// <p>Metadata that can be used in a filter.</p>
    pub fn metadata_attributes(mut self, input: crate::types::MetadataAttributeSchema) -> Self {
        let mut v = self.metadata_attributes.unwrap_or_default();
        v.push(input);
        self.metadata_attributes = ::std::option::Option::Some(v);
        self
    }
    /// <p>Metadata that can be used in a filter.</p>
    pub fn set_metadata_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetadataAttributeSchema>>) -> Self {
        self.metadata_attributes = input;
        self
    }
    /// <p>Metadata that can be used in a filter.</p>
    pub fn get_metadata_attributes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetadataAttributeSchema>> {
        &self.metadata_attributes
    }
    /// <p>The model that generates the filter.</p>
    /// This field is required.
    pub fn model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The model that generates the filter.</p>
    pub fn set_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_arn = input;
        self
    }
    /// <p>The model that generates the filter.</p>
    pub fn get_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_arn
    }
    /// Consumes the builder and constructs a [`ImplicitFilterConfiguration`](crate::types::ImplicitFilterConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`metadata_attributes`](crate::types::builders::ImplicitFilterConfigurationBuilder::metadata_attributes)
    /// - [`model_arn`](crate::types::builders::ImplicitFilterConfigurationBuilder::model_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::ImplicitFilterConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ImplicitFilterConfiguration {
            metadata_attributes: self.metadata_attributes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metadata_attributes",
                    "metadata_attributes was not specified but it is required when building ImplicitFilterConfiguration",
                )
            })?,
            model_arn: self.model_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "model_arn",
                    "model_arn was not specified but it is required when building ImplicitFilterConfiguration",
                )
            })?,
        })
    }
}
