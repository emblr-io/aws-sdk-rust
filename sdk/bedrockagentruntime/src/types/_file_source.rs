// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The source file of the content contained in the wrapper object.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FileSource {
    /// <p>The source type of the files to attach.</p>
    pub source_type: crate::types::FileSourceType,
    /// <p>The s3 location of the files to attach.</p>
    pub s3_location: ::std::option::Option<crate::types::S3ObjectFile>,
    /// <p>The data and the text of the attached files.</p>
    pub byte_content: ::std::option::Option<crate::types::ByteContentFile>,
}
impl FileSource {
    /// <p>The source type of the files to attach.</p>
    pub fn source_type(&self) -> &crate::types::FileSourceType {
        &self.source_type
    }
    /// <p>The s3 location of the files to attach.</p>
    pub fn s3_location(&self) -> ::std::option::Option<&crate::types::S3ObjectFile> {
        self.s3_location.as_ref()
    }
    /// <p>The data and the text of the attached files.</p>
    pub fn byte_content(&self) -> ::std::option::Option<&crate::types::ByteContentFile> {
        self.byte_content.as_ref()
    }
}
impl FileSource {
    /// Creates a new builder-style object to manufacture [`FileSource`](crate::types::FileSource).
    pub fn builder() -> crate::types::builders::FileSourceBuilder {
        crate::types::builders::FileSourceBuilder::default()
    }
}

/// A builder for [`FileSource`](crate::types::FileSource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FileSourceBuilder {
    pub(crate) source_type: ::std::option::Option<crate::types::FileSourceType>,
    pub(crate) s3_location: ::std::option::Option<crate::types::S3ObjectFile>,
    pub(crate) byte_content: ::std::option::Option<crate::types::ByteContentFile>,
}
impl FileSourceBuilder {
    /// <p>The source type of the files to attach.</p>
    /// This field is required.
    pub fn source_type(mut self, input: crate::types::FileSourceType) -> Self {
        self.source_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source type of the files to attach.</p>
    pub fn set_source_type(mut self, input: ::std::option::Option<crate::types::FileSourceType>) -> Self {
        self.source_type = input;
        self
    }
    /// <p>The source type of the files to attach.</p>
    pub fn get_source_type(&self) -> &::std::option::Option<crate::types::FileSourceType> {
        &self.source_type
    }
    /// <p>The s3 location of the files to attach.</p>
    pub fn s3_location(mut self, input: crate::types::S3ObjectFile) -> Self {
        self.s3_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The s3 location of the files to attach.</p>
    pub fn set_s3_location(mut self, input: ::std::option::Option<crate::types::S3ObjectFile>) -> Self {
        self.s3_location = input;
        self
    }
    /// <p>The s3 location of the files to attach.</p>
    pub fn get_s3_location(&self) -> &::std::option::Option<crate::types::S3ObjectFile> {
        &self.s3_location
    }
    /// <p>The data and the text of the attached files.</p>
    pub fn byte_content(mut self, input: crate::types::ByteContentFile) -> Self {
        self.byte_content = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data and the text of the attached files.</p>
    pub fn set_byte_content(mut self, input: ::std::option::Option<crate::types::ByteContentFile>) -> Self {
        self.byte_content = input;
        self
    }
    /// <p>The data and the text of the attached files.</p>
    pub fn get_byte_content(&self) -> &::std::option::Option<crate::types::ByteContentFile> {
        &self.byte_content
    }
    /// Consumes the builder and constructs a [`FileSource`](crate::types::FileSource).
    /// This method will fail if any of the following fields are not set:
    /// - [`source_type`](crate::types::builders::FileSourceBuilder::source_type)
    pub fn build(self) -> ::std::result::Result<crate::types::FileSource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FileSource {
            source_type: self.source_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_type",
                    "source_type was not specified but it is required when building FileSource",
                )
            })?,
            s3_location: self.s3_location,
            byte_content: self.byte_content,
        })
    }
}
