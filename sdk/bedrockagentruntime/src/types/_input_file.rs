// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details of the source files.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InputFile {
    /// <p>The name of the source file.</p>
    pub name: ::std::string::String,
    /// <p>Specifies where the files are located.</p>
    pub source: ::std::option::Option<crate::types::FileSource>,
    /// <p>Specifies how the source files will be used by the code interpreter.</p>
    pub use_case: crate::types::FileUseCase,
}
impl InputFile {
    /// <p>The name of the source file.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Specifies where the files are located.</p>
    pub fn source(&self) -> ::std::option::Option<&crate::types::FileSource> {
        self.source.as_ref()
    }
    /// <p>Specifies how the source files will be used by the code interpreter.</p>
    pub fn use_case(&self) -> &crate::types::FileUseCase {
        &self.use_case
    }
}
impl InputFile {
    /// Creates a new builder-style object to manufacture [`InputFile`](crate::types::InputFile).
    pub fn builder() -> crate::types::builders::InputFileBuilder {
        crate::types::builders::InputFileBuilder::default()
    }
}

/// A builder for [`InputFile`](crate::types::InputFile).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InputFileBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) source: ::std::option::Option<crate::types::FileSource>,
    pub(crate) use_case: ::std::option::Option<crate::types::FileUseCase>,
}
impl InputFileBuilder {
    /// <p>The name of the source file.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the source file.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the source file.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Specifies where the files are located.</p>
    /// This field is required.
    pub fn source(mut self, input: crate::types::FileSource) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies where the files are located.</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::FileSource>) -> Self {
        self.source = input;
        self
    }
    /// <p>Specifies where the files are located.</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::FileSource> {
        &self.source
    }
    /// <p>Specifies how the source files will be used by the code interpreter.</p>
    /// This field is required.
    pub fn use_case(mut self, input: crate::types::FileUseCase) -> Self {
        self.use_case = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies how the source files will be used by the code interpreter.</p>
    pub fn set_use_case(mut self, input: ::std::option::Option<crate::types::FileUseCase>) -> Self {
        self.use_case = input;
        self
    }
    /// <p>Specifies how the source files will be used by the code interpreter.</p>
    pub fn get_use_case(&self) -> &::std::option::Option<crate::types::FileUseCase> {
        &self.use_case
    }
    /// Consumes the builder and constructs a [`InputFile`](crate::types::InputFile).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::InputFileBuilder::name)
    /// - [`use_case`](crate::types::builders::InputFileBuilder::use_case)
    pub fn build(self) -> ::std::result::Result<crate::types::InputFile, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::InputFile {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building InputFile",
                )
            })?,
            source: self.source,
            use_case: self.use_case.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "use_case",
                    "use_case was not specified but it is required when building InputFile",
                )
            })?,
        })
    }
}
