// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a chunk of text from a data source in the knowledge base. If the result is from a structured data source, the cell in the database and the type of the value is also identified.</p>
/// <p>This data type is used in the following API operations:</p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_Retrieve.html#API_agent-runtime_Retrieve_ResponseSyntax">Retrieve response</a> – in the <code>content</code> field</p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_RetrieveAndGenerate.html#API_agent-runtime_RetrieveAndGenerate_ResponseSyntax">RetrieveAndGenerate response</a> – in the <code>content</code> field</p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html#API_agent-runtime_InvokeAgent_ResponseSyntax">InvokeAgent response</a> – in the <code>content</code> field</p></li>
/// </ul>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RetrievalResultContent {
    /// <p>The type of content in the retrieval result.</p>
    pub r#type: ::std::option::Option<crate::types::RetrievalResultContentType>,
    /// <p>The cited text from the data source.</p>
    pub text: ::std::string::String,
    /// <p>A data URI with base64-encoded content from the data source. The URI is in the following format: returned in the following format: <code>data:image/jpeg;base64,${base64-encoded string}</code>.</p>
    pub byte_content: ::std::option::Option<::std::string::String>,
    /// <p>Specifies information about the rows with the cells to return in retrieval.</p>
    pub row: ::std::option::Option<::std::vec::Vec<crate::types::RetrievalResultContentColumn>>,
}
impl RetrievalResultContent {
    /// <p>The type of content in the retrieval result.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::RetrievalResultContentType> {
        self.r#type.as_ref()
    }
    /// <p>The cited text from the data source.</p>
    pub fn text(&self) -> &str {
        use std::ops::Deref;
        self.text.deref()
    }
    /// <p>A data URI with base64-encoded content from the data source. The URI is in the following format: returned in the following format: <code>data:image/jpeg;base64,${base64-encoded string}</code>.</p>
    pub fn byte_content(&self) -> ::std::option::Option<&str> {
        self.byte_content.as_deref()
    }
    /// <p>Specifies information about the rows with the cells to return in retrieval.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.row.is_none()`.
    pub fn row(&self) -> &[crate::types::RetrievalResultContentColumn] {
        self.row.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for RetrievalResultContent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RetrievalResultContent");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("text", &"*** Sensitive Data Redacted ***");
        formatter.field("byte_content", &"*** Sensitive Data Redacted ***");
        formatter.field("row", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RetrievalResultContent {
    /// Creates a new builder-style object to manufacture [`RetrievalResultContent`](crate::types::RetrievalResultContent).
    pub fn builder() -> crate::types::builders::RetrievalResultContentBuilder {
        crate::types::builders::RetrievalResultContentBuilder::default()
    }
}

/// A builder for [`RetrievalResultContent`](crate::types::RetrievalResultContent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RetrievalResultContentBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::RetrievalResultContentType>,
    pub(crate) text: ::std::option::Option<::std::string::String>,
    pub(crate) byte_content: ::std::option::Option<::std::string::String>,
    pub(crate) row: ::std::option::Option<::std::vec::Vec<crate::types::RetrievalResultContentColumn>>,
}
impl RetrievalResultContentBuilder {
    /// <p>The type of content in the retrieval result.</p>
    pub fn r#type(mut self, input: crate::types::RetrievalResultContentType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of content in the retrieval result.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RetrievalResultContentType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of content in the retrieval result.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RetrievalResultContentType> {
        &self.r#type
    }
    /// <p>The cited text from the data source.</p>
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cited text from the data source.</p>
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>The cited text from the data source.</p>
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }
    /// <p>A data URI with base64-encoded content from the data source. The URI is in the following format: returned in the following format: <code>data:image/jpeg;base64,${base64-encoded string}</code>.</p>
    pub fn byte_content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.byte_content = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A data URI with base64-encoded content from the data source. The URI is in the following format: returned in the following format: <code>data:image/jpeg;base64,${base64-encoded string}</code>.</p>
    pub fn set_byte_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.byte_content = input;
        self
    }
    /// <p>A data URI with base64-encoded content from the data source. The URI is in the following format: returned in the following format: <code>data:image/jpeg;base64,${base64-encoded string}</code>.</p>
    pub fn get_byte_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.byte_content
    }
    /// Appends an item to `row`.
    ///
    /// To override the contents of this collection use [`set_row`](Self::set_row).
    ///
    /// <p>Specifies information about the rows with the cells to return in retrieval.</p>
    pub fn row(mut self, input: crate::types::RetrievalResultContentColumn) -> Self {
        let mut v = self.row.unwrap_or_default();
        v.push(input);
        self.row = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies information about the rows with the cells to return in retrieval.</p>
    pub fn set_row(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RetrievalResultContentColumn>>) -> Self {
        self.row = input;
        self
    }
    /// <p>Specifies information about the rows with the cells to return in retrieval.</p>
    pub fn get_row(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RetrievalResultContentColumn>> {
        &self.row
    }
    /// Consumes the builder and constructs a [`RetrievalResultContent`](crate::types::RetrievalResultContent).
    pub fn build(self) -> crate::types::RetrievalResultContent {
        crate::types::RetrievalResultContent {
            r#type: self.r#type,
            text: self.text.unwrap_or_default(),
            byte_content: self.byte_content,
            row: self.row,
        }
    }
}
impl ::std::fmt::Debug for RetrievalResultContentBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RetrievalResultContentBuilder");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("text", &"*** Sensitive Data Redacted ***");
        formatter.field("byte_content", &"*** Sensitive Data Redacted ***");
        formatter.field("row", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
