// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a query to submit to the reranker model.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RerankQuery {
    /// <p>The type of the query.</p>
    pub r#type: crate::types::RerankQueryContentType,
    /// <p>Contains information about a text query.</p>
    pub text_query: ::std::option::Option<crate::types::RerankTextDocument>,
}
impl RerankQuery {
    /// <p>The type of the query.</p>
    pub fn r#type(&self) -> &crate::types::RerankQueryContentType {
        &self.r#type
    }
    /// <p>Contains information about a text query.</p>
    pub fn text_query(&self) -> ::std::option::Option<&crate::types::RerankTextDocument> {
        self.text_query.as_ref()
    }
}
impl ::std::fmt::Debug for RerankQuery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RerankQuery");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("text_query", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RerankQuery {
    /// Creates a new builder-style object to manufacture [`RerankQuery`](crate::types::RerankQuery).
    pub fn builder() -> crate::types::builders::RerankQueryBuilder {
        crate::types::builders::RerankQueryBuilder::default()
    }
}

/// A builder for [`RerankQuery`](crate::types::RerankQuery).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RerankQueryBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::RerankQueryContentType>,
    pub(crate) text_query: ::std::option::Option<crate::types::RerankTextDocument>,
}
impl RerankQueryBuilder {
    /// <p>The type of the query.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::RerankQueryContentType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the query.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RerankQueryContentType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the query.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RerankQueryContentType> {
        &self.r#type
    }
    /// <p>Contains information about a text query.</p>
    /// This field is required.
    pub fn text_query(mut self, input: crate::types::RerankTextDocument) -> Self {
        self.text_query = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about a text query.</p>
    pub fn set_text_query(mut self, input: ::std::option::Option<crate::types::RerankTextDocument>) -> Self {
        self.text_query = input;
        self
    }
    /// <p>Contains information about a text query.</p>
    pub fn get_text_query(&self) -> &::std::option::Option<crate::types::RerankTextDocument> {
        &self.text_query
    }
    /// Consumes the builder and constructs a [`RerankQuery`](crate::types::RerankQuery).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::RerankQueryBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::RerankQuery, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RerankQuery {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building RerankQuery",
                )
            })?,
            text_query: self.text_query,
        })
    }
}
impl ::std::fmt::Debug for RerankQueryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RerankQueryBuilder");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("text_query", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
