// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An event in which the prompt was analyzed in preparation for optimization.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AnalyzePromptEvent {
    /// <p>A message describing the analysis of the prompt.</p>
    pub message: ::std::option::Option<::std::string::String>,
}
impl AnalyzePromptEvent {
    /// <p>A message describing the analysis of the prompt.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl ::std::fmt::Debug for AnalyzePromptEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AnalyzePromptEvent");
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AnalyzePromptEvent {
    /// Creates a new builder-style object to manufacture [`AnalyzePromptEvent`](crate::types::AnalyzePromptEvent).
    pub fn builder() -> crate::types::builders::AnalyzePromptEventBuilder {
        crate::types::builders::AnalyzePromptEventBuilder::default()
    }
}

/// A builder for [`AnalyzePromptEvent`](crate::types::AnalyzePromptEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AnalyzePromptEventBuilder {
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl AnalyzePromptEventBuilder {
    /// <p>A message describing the analysis of the prompt.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message describing the analysis of the prompt.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>A message describing the analysis of the prompt.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Consumes the builder and constructs a [`AnalyzePromptEvent`](crate::types::AnalyzePromptEvent).
    pub fn build(self) -> crate::types::AnalyzePromptEvent {
        crate::types::AnalyzePromptEvent { message: self.message }
    }
}
impl ::std::fmt::Debug for AnalyzePromptEventBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AnalyzePromptEventBuilder");
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
