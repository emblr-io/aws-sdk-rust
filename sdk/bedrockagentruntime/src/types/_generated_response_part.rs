// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains metadata about a part of the generated response that is accompanied by a citation.</p>
/// <p>This data type is used in the following API operations:</p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html#API_agent-runtime_InvokeAgent_ResponseSyntax">InvokeAgent response</a> – in the <code>generatedResponsePart</code> field</p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_RetrieveAndGenerate.html#API_agent-runtime_RetrieveAndGenerate_ResponseSyntax">RetrieveAndGenerate response</a> – in the <code>generatedResponsePart</code> field</p></li>
/// </ul>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GeneratedResponsePart {
    /// <p>Contains metadata about a textual part of the generated response that is accompanied by a citation.</p>
    pub text_response_part: ::std::option::Option<crate::types::TextResponsePart>,
}
impl GeneratedResponsePart {
    /// <p>Contains metadata about a textual part of the generated response that is accompanied by a citation.</p>
    pub fn text_response_part(&self) -> ::std::option::Option<&crate::types::TextResponsePart> {
        self.text_response_part.as_ref()
    }
}
impl ::std::fmt::Debug for GeneratedResponsePart {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GeneratedResponsePart");
        formatter.field("text_response_part", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GeneratedResponsePart {
    /// Creates a new builder-style object to manufacture [`GeneratedResponsePart`](crate::types::GeneratedResponsePart).
    pub fn builder() -> crate::types::builders::GeneratedResponsePartBuilder {
        crate::types::builders::GeneratedResponsePartBuilder::default()
    }
}

/// A builder for [`GeneratedResponsePart`](crate::types::GeneratedResponsePart).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GeneratedResponsePartBuilder {
    pub(crate) text_response_part: ::std::option::Option<crate::types::TextResponsePart>,
}
impl GeneratedResponsePartBuilder {
    /// <p>Contains metadata about a textual part of the generated response that is accompanied by a citation.</p>
    pub fn text_response_part(mut self, input: crate::types::TextResponsePart) -> Self {
        self.text_response_part = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains metadata about a textual part of the generated response that is accompanied by a citation.</p>
    pub fn set_text_response_part(mut self, input: ::std::option::Option<crate::types::TextResponsePart>) -> Self {
        self.text_response_part = input;
        self
    }
    /// <p>Contains metadata about a textual part of the generated response that is accompanied by a citation.</p>
    pub fn get_text_response_part(&self) -> &::std::option::Option<crate::types::TextResponsePart> {
        &self.text_response_part
    }
    /// Consumes the builder and constructs a [`GeneratedResponsePart`](crate::types::GeneratedResponsePart).
    pub fn build(self) -> crate::types::GeneratedResponsePart {
        crate::types::GeneratedResponsePart {
            text_response_part: self.text_response_part,
        }
    }
}
impl ::std::fmt::Debug for GeneratedResponsePartBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GeneratedResponsePartBuilder");
        formatter.field("text_response_part", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
