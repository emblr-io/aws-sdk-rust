// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The output of the flow.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub enum FlowResponseStream {
    /// <p>Contains information about why the flow completed.</p>
    FlowCompletionEvent(crate::types::FlowCompletionEvent),
    /// <p>The event stream containing the multi-turn input request information from the flow.</p>
    FlowMultiTurnInputRequestEvent(crate::types::FlowMultiTurnInputRequestEvent),
    /// <p>Contains information about an output from flow invocation.</p>
    FlowOutputEvent(crate::types::FlowOutputEvent),
    /// <p>Contains information about a trace, which tracks an input or output for a node in the flow.</p>
    FlowTraceEvent(crate::types::FlowTraceEvent),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl FlowResponseStream {
    /// Tries to convert the enum instance into [`FlowCompletionEvent`](crate::types::FlowResponseStream::FlowCompletionEvent), extracting the inner [`FlowCompletionEvent`](crate::types::FlowCompletionEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_flow_completion_event(&self) -> ::std::result::Result<&crate::types::FlowCompletionEvent, &Self> {
        if let FlowResponseStream::FlowCompletionEvent(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`FlowCompletionEvent`](crate::types::FlowResponseStream::FlowCompletionEvent).
    pub fn is_flow_completion_event(&self) -> bool {
        self.as_flow_completion_event().is_ok()
    }
    /// Tries to convert the enum instance into [`FlowMultiTurnInputRequestEvent`](crate::types::FlowResponseStream::FlowMultiTurnInputRequestEvent), extracting the inner [`FlowMultiTurnInputRequestEvent`](crate::types::FlowMultiTurnInputRequestEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_flow_multi_turn_input_request_event(&self) -> ::std::result::Result<&crate::types::FlowMultiTurnInputRequestEvent, &Self> {
        if let FlowResponseStream::FlowMultiTurnInputRequestEvent(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`FlowMultiTurnInputRequestEvent`](crate::types::FlowResponseStream::FlowMultiTurnInputRequestEvent).
    pub fn is_flow_multi_turn_input_request_event(&self) -> bool {
        self.as_flow_multi_turn_input_request_event().is_ok()
    }
    /// Tries to convert the enum instance into [`FlowOutputEvent`](crate::types::FlowResponseStream::FlowOutputEvent), extracting the inner [`FlowOutputEvent`](crate::types::FlowOutputEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_flow_output_event(&self) -> ::std::result::Result<&crate::types::FlowOutputEvent, &Self> {
        if let FlowResponseStream::FlowOutputEvent(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`FlowOutputEvent`](crate::types::FlowResponseStream::FlowOutputEvent).
    pub fn is_flow_output_event(&self) -> bool {
        self.as_flow_output_event().is_ok()
    }
    /// Tries to convert the enum instance into [`FlowTraceEvent`](crate::types::FlowResponseStream::FlowTraceEvent), extracting the inner [`FlowTraceEvent`](crate::types::FlowTraceEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_flow_trace_event(&self) -> ::std::result::Result<&crate::types::FlowTraceEvent, &Self> {
        if let FlowResponseStream::FlowTraceEvent(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`FlowTraceEvent`](crate::types::FlowResponseStream::FlowTraceEvent).
    pub fn is_flow_trace_event(&self) -> bool {
        self.as_flow_trace_event().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
impl ::std::fmt::Debug for FlowResponseStream {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            FlowResponseStream::FlowCompletionEvent(_) => f.debug_tuple("*** Sensitive Data Redacted ***").finish(),
            FlowResponseStream::FlowMultiTurnInputRequestEvent(_) => f.debug_tuple("*** Sensitive Data Redacted ***").finish(),
            FlowResponseStream::FlowOutputEvent(_) => f.debug_tuple("*** Sensitive Data Redacted ***").finish(),
            FlowResponseStream::FlowTraceEvent(val) => f.debug_tuple("FlowTraceEvent").field(&val).finish(),
            FlowResponseStream::Unknown => f.debug_tuple("Unknown").finish(),
        }
    }
}
