// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the code interpreter being invoked.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeInterpreterInvocationInput {
    /// <p>The code for the code interpreter to use.</p>
    pub code: ::std::option::Option<::std::string::String>,
    /// <p>Files that are uploaded for code interpreter to use.</p>
    pub files: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CodeInterpreterInvocationInput {
    /// <p>The code for the code interpreter to use.</p>
    pub fn code(&self) -> ::std::option::Option<&str> {
        self.code.as_deref()
    }
    /// <p>Files that are uploaded for code interpreter to use.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.files.is_none()`.
    pub fn files(&self) -> &[::std::string::String] {
        self.files.as_deref().unwrap_or_default()
    }
}
impl CodeInterpreterInvocationInput {
    /// Creates a new builder-style object to manufacture [`CodeInterpreterInvocationInput`](crate::types::CodeInterpreterInvocationInput).
    pub fn builder() -> crate::types::builders::CodeInterpreterInvocationInputBuilder {
        crate::types::builders::CodeInterpreterInvocationInputBuilder::default()
    }
}

/// A builder for [`CodeInterpreterInvocationInput`](crate::types::CodeInterpreterInvocationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CodeInterpreterInvocationInputBuilder {
    pub(crate) code: ::std::option::Option<::std::string::String>,
    pub(crate) files: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CodeInterpreterInvocationInputBuilder {
    /// <p>The code for the code interpreter to use.</p>
    pub fn code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The code for the code interpreter to use.</p>
    pub fn set_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>The code for the code interpreter to use.</p>
    pub fn get_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.code
    }
    /// Appends an item to `files`.
    ///
    /// To override the contents of this collection use [`set_files`](Self::set_files).
    ///
    /// <p>Files that are uploaded for code interpreter to use.</p>
    pub fn files(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.files.unwrap_or_default();
        v.push(input.into());
        self.files = ::std::option::Option::Some(v);
        self
    }
    /// <p>Files that are uploaded for code interpreter to use.</p>
    pub fn set_files(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.files = input;
        self
    }
    /// <p>Files that are uploaded for code interpreter to use.</p>
    pub fn get_files(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.files
    }
    /// Consumes the builder and constructs a [`CodeInterpreterInvocationInput`](crate::types::CodeInterpreterInvocationInput).
    pub fn build(self) -> crate::types::CodeInterpreterInvocationInput {
        crate::types::CodeInterpreterInvocationInput {
            code: self.code,
            files: self.files,
        }
    }
}
