// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings of an inline collaborator agent.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CollaboratorConfiguration {
    /// <p>Name of the inline collaborator agent which must be the same name as specified for <code>agentName</code>.</p>
    pub collaborator_name: ::std::string::String,
    /// <p>Instructions that tell the inline collaborator agent what it should do and how it should interact with users.</p>
    pub collaborator_instruction: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the inline collaborator agent.</p>
    pub agent_alias_arn: ::std::option::Option<::std::string::String>,
    /// <p>A relay conversation history for the inline collaborator agent.</p>
    pub relay_conversation_history: ::std::option::Option<crate::types::RelayConversationHistory>,
}
impl CollaboratorConfiguration {
    /// <p>Name of the inline collaborator agent which must be the same name as specified for <code>agentName</code>.</p>
    pub fn collaborator_name(&self) -> &str {
        use std::ops::Deref;
        self.collaborator_name.deref()
    }
    /// <p>Instructions that tell the inline collaborator agent what it should do and how it should interact with users.</p>
    pub fn collaborator_instruction(&self) -> &str {
        use std::ops::Deref;
        self.collaborator_instruction.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the inline collaborator agent.</p>
    pub fn agent_alias_arn(&self) -> ::std::option::Option<&str> {
        self.agent_alias_arn.as_deref()
    }
    /// <p>A relay conversation history for the inline collaborator agent.</p>
    pub fn relay_conversation_history(&self) -> ::std::option::Option<&crate::types::RelayConversationHistory> {
        self.relay_conversation_history.as_ref()
    }
}
impl ::std::fmt::Debug for CollaboratorConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CollaboratorConfiguration");
        formatter.field("collaborator_name", &"*** Sensitive Data Redacted ***");
        formatter.field("collaborator_instruction", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_alias_arn", &self.agent_alias_arn);
        formatter.field("relay_conversation_history", &self.relay_conversation_history);
        formatter.finish()
    }
}
impl CollaboratorConfiguration {
    /// Creates a new builder-style object to manufacture [`CollaboratorConfiguration`](crate::types::CollaboratorConfiguration).
    pub fn builder() -> crate::types::builders::CollaboratorConfigurationBuilder {
        crate::types::builders::CollaboratorConfigurationBuilder::default()
    }
}

/// A builder for [`CollaboratorConfiguration`](crate::types::CollaboratorConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CollaboratorConfigurationBuilder {
    pub(crate) collaborator_name: ::std::option::Option<::std::string::String>,
    pub(crate) collaborator_instruction: ::std::option::Option<::std::string::String>,
    pub(crate) agent_alias_arn: ::std::option::Option<::std::string::String>,
    pub(crate) relay_conversation_history: ::std::option::Option<crate::types::RelayConversationHistory>,
}
impl CollaboratorConfigurationBuilder {
    /// <p>Name of the inline collaborator agent which must be the same name as specified for <code>agentName</code>.</p>
    /// This field is required.
    pub fn collaborator_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaborator_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the inline collaborator agent which must be the same name as specified for <code>agentName</code>.</p>
    pub fn set_collaborator_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaborator_name = input;
        self
    }
    /// <p>Name of the inline collaborator agent which must be the same name as specified for <code>agentName</code>.</p>
    pub fn get_collaborator_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaborator_name
    }
    /// <p>Instructions that tell the inline collaborator agent what it should do and how it should interact with users.</p>
    /// This field is required.
    pub fn collaborator_instruction(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaborator_instruction = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Instructions that tell the inline collaborator agent what it should do and how it should interact with users.</p>
    pub fn set_collaborator_instruction(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaborator_instruction = input;
        self
    }
    /// <p>Instructions that tell the inline collaborator agent what it should do and how it should interact with users.</p>
    pub fn get_collaborator_instruction(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaborator_instruction
    }
    /// <p>The Amazon Resource Name (ARN) of the inline collaborator agent.</p>
    pub fn agent_alias_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_alias_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the inline collaborator agent.</p>
    pub fn set_agent_alias_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_alias_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the inline collaborator agent.</p>
    pub fn get_agent_alias_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_alias_arn
    }
    /// <p>A relay conversation history for the inline collaborator agent.</p>
    pub fn relay_conversation_history(mut self, input: crate::types::RelayConversationHistory) -> Self {
        self.relay_conversation_history = ::std::option::Option::Some(input);
        self
    }
    /// <p>A relay conversation history for the inline collaborator agent.</p>
    pub fn set_relay_conversation_history(mut self, input: ::std::option::Option<crate::types::RelayConversationHistory>) -> Self {
        self.relay_conversation_history = input;
        self
    }
    /// <p>A relay conversation history for the inline collaborator agent.</p>
    pub fn get_relay_conversation_history(&self) -> &::std::option::Option<crate::types::RelayConversationHistory> {
        &self.relay_conversation_history
    }
    /// Consumes the builder and constructs a [`CollaboratorConfiguration`](crate::types::CollaboratorConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`collaborator_name`](crate::types::builders::CollaboratorConfigurationBuilder::collaborator_name)
    /// - [`collaborator_instruction`](crate::types::builders::CollaboratorConfigurationBuilder::collaborator_instruction)
    pub fn build(self) -> ::std::result::Result<crate::types::CollaboratorConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CollaboratorConfiguration {
            collaborator_name: self.collaborator_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "collaborator_name",
                    "collaborator_name was not specified but it is required when building CollaboratorConfiguration",
                )
            })?,
            collaborator_instruction: self.collaborator_instruction.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "collaborator_instruction",
                    "collaborator_instruction was not specified but it is required when building CollaboratorConfiguration",
                )
            })?,
            agent_alias_arn: self.agent_alias_arn,
            relay_conversation_history: self.relay_conversation_history,
        })
    }
}
impl ::std::fmt::Debug for CollaboratorConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CollaboratorConfigurationBuilder");
        formatter.field("collaborator_name", &"*** Sensitive Data Redacted ***");
        formatter.field("collaborator_instruction", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_alias_arn", &self.agent_alias_arn);
        formatter.field("relay_conversation_history", &self.relay_conversation_history);
        formatter.finish()
    }
}
