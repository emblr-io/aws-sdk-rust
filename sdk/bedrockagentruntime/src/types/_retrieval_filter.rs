// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the filters to use on the metadata attributes in the knowledge base data sources before returning results. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/kb-test-config.html">Query configurations</a>. See the examples below to see how to use these filters.</p>
/// <p>This data type is used in the following API operations:</p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_Retrieve.html#API_agent-runtime_Retrieve_RequestSyntax">Retrieve request</a> – in the <code>filter</code> field</p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_RetrieveAndGenerate.html#API_agent-runtime_RetrieveAndGenerate_RequestSyntax">RetrieveAndGenerate request</a> – in the <code>filter</code> field</p></li>
/// </ul>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub enum RetrievalFilter {
    /// <p>Knowledge base data sources are returned if their metadata attributes fulfill all the filter conditions inside this list.</p>
    AndAll(::std::vec::Vec<crate::types::RetrievalFilter>),
    /// <p>Knowledge base data sources are returned if they contain a metadata attribute whose name matches the <code>key</code> and whose value matches the <code>value</code> in this object.</p>
    /// <p>The following example would return data sources with an <code>animal</code> attribute whose value is <code>cat</code>:</p>
    /// <p><code>"equals": { "key": "animal", "value": "cat" }</code></p>
    Equals(crate::types::FilterAttribute),
    /// <p>Knowledge base data sources are returned if they contain a metadata attribute whose name matches the <code>key</code> and whose value is greater than the <code>value</code> in this object.</p>
    /// <p>The following example would return data sources with an <code>year</code> attribute whose value is greater than <code>1989</code>:</p>
    /// <p><code>"greaterThan": { "key": "year", "value": 1989 }</code></p>
    GreaterThan(crate::types::FilterAttribute),
    /// <p>Knowledge base data sources are returned if they contain a metadata attribute whose name matches the <code>key</code> and whose value is greater than or equal to the <code>value</code> in this object.</p>
    /// <p>The following example would return data sources with an <code>year</code> attribute whose value is greater than or equal to <code>1989</code>:</p>
    /// <p><code>"greaterThanOrEquals": { "key": "year", "value": 1989 }</code></p>
    GreaterThanOrEquals(crate::types::FilterAttribute),
    /// <p>Knowledge base data sources are returned if they contain a metadata attribute whose name matches the <code>key</code> and whose value is in the list specified in the <code>value</code> in this object.</p>
    /// <p>The following example would return data sources with an <code>animal</code> attribute that is either <code>cat</code> or <code>dog</code>:</p>
    /// <p><code>"in": { "key": "animal", "value": \["cat", "dog"\] }</code></p>
    In(crate::types::FilterAttribute),
    /// <p>Knowledge base data sources are returned if they contain a metadata attribute whose name matches the <code>key</code> and whose value is less than the <code>value</code> in this object.</p>
    /// <p>The following example would return data sources with an <code>year</code> attribute whose value is less than to <code>1989</code>.</p>
    /// <p><code>"lessThan": { "key": "year", "value": 1989 }</code></p>
    LessThan(crate::types::FilterAttribute),
    /// <p>Knowledge base data sources are returned if they contain a metadata attribute whose name matches the <code>key</code> and whose value is less than or equal to the <code>value</code> in this object.</p>
    /// <p>The following example would return data sources with an <code>year</code> attribute whose value is less than or equal to <code>1989</code>.</p>
    /// <p><code>"lessThanOrEquals": { "key": "year", "value": 1989 }</code></p>
    LessThanOrEquals(crate::types::FilterAttribute),
    /// <p>Knowledge base data sources are returned if they contain a metadata attribute whose name matches the <code>key</code> and whose value is a list that contains the <code>value</code> as one of its members.</p>
    /// <p>The following example would return data sources with an <code>animals</code> attribute that is a list containing a <code>cat</code> member (for example <code>\["dog", "cat"\]</code>).</p>
    /// <p><code>"listContains": { "key": "animals", "value": "cat" }</code></p>
    ListContains(crate::types::FilterAttribute),
    /// <p>Knowledge base data sources are returned when:</p>
    /// <ul>
    /// <li>
    /// <p>It contains a metadata attribute whose name matches the <code>key</code> and whose value doesn't match the <code>value</code> in this object.</p></li>
    /// <li>
    /// <p>The key is not present in the document.</p></li>
    /// </ul>
    /// <p>The following example would return data sources that don't contain an <code>animal</code> attribute whose value is <code>cat</code>.</p>
    /// <p><code>"notEquals": { "key": "animal", "value": "cat" }</code></p>
    NotEquals(crate::types::FilterAttribute),
    /// <p>Knowledge base data sources are returned if they contain a metadata attribute whose name matches the <code>key</code> and whose value isn't in the list specified in the <code>value</code> in this object.</p>
    /// <p>The following example would return data sources whose <code>animal</code> attribute is neither <code>cat</code> nor <code>dog</code>.</p>
    /// <p><code>"notIn": { "key": "animal", "value": \["cat", "dog"\] }</code></p>
    NotIn(crate::types::FilterAttribute),
    /// <p>Knowledge base data sources are returned if their metadata attributes fulfill at least one of the filter conditions inside this list.</p>
    OrAll(::std::vec::Vec<crate::types::RetrievalFilter>),
    /// <p>Knowledge base data sources are returned if they contain a metadata attribute whose name matches the <code>key</code> and whose value starts with the <code>value</code> in this object. This filter is currently only supported for Amazon OpenSearch Serverless vector stores.</p>
    /// <p>The following example would return data sources with an <code>animal</code> attribute starts with <code>ca</code> (for example, <code>cat</code> or <code>camel</code>).</p>
    /// <p><code>"startsWith": { "key": "animal", "value": "ca" }</code></p>
    StartsWith(crate::types::FilterAttribute),
    /// <p>Knowledge base data sources are returned if they contain a metadata attribute whose name matches the <code>key</code> and whose value is one of the following:</p>
    /// <ul>
    /// <li>
    /// <p>A string that contains the <code>value</code> as a substring. The following example would return data sources with an <code>animal</code> attribute that contains the substring <code>at</code> (for example <code>cat</code>).</p>
    /// <p><code>"stringContains": { "key": "animal", "value": "at" }</code></p></li>
    /// <li>
    /// <p>A list with a member that contains the <code>value</code> as a substring. The following example would return data sources with an <code>animals</code> attribute that is a list containing a member that contains the substring <code>at</code> (for example <code>\["dog", "cat"\]</code>).</p>
    /// <p><code>"stringContains": { "key": "animals", "value": "at" }</code></p></li>
    /// </ul>
    StringContains(crate::types::FilterAttribute),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl RetrievalFilter {
    /// Tries to convert the enum instance into [`AndAll`](crate::types::RetrievalFilter::AndAll), extracting the inner [`Vec`](::std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_and_all(&self) -> ::std::result::Result<&::std::vec::Vec<crate::types::RetrievalFilter>, &Self> {
        if let RetrievalFilter::AndAll(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AndAll`](crate::types::RetrievalFilter::AndAll).
    pub fn is_and_all(&self) -> bool {
        self.as_and_all().is_ok()
    }
    /// Tries to convert the enum instance into [`Equals`](crate::types::RetrievalFilter::Equals), extracting the inner [`FilterAttribute`](crate::types::FilterAttribute).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_equals(&self) -> ::std::result::Result<&crate::types::FilterAttribute, &Self> {
        if let RetrievalFilter::Equals(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Equals`](crate::types::RetrievalFilter::Equals).
    pub fn is_equals(&self) -> bool {
        self.as_equals().is_ok()
    }
    /// Tries to convert the enum instance into [`GreaterThan`](crate::types::RetrievalFilter::GreaterThan), extracting the inner [`FilterAttribute`](crate::types::FilterAttribute).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_greater_than(&self) -> ::std::result::Result<&crate::types::FilterAttribute, &Self> {
        if let RetrievalFilter::GreaterThan(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`GreaterThan`](crate::types::RetrievalFilter::GreaterThan).
    pub fn is_greater_than(&self) -> bool {
        self.as_greater_than().is_ok()
    }
    /// Tries to convert the enum instance into [`GreaterThanOrEquals`](crate::types::RetrievalFilter::GreaterThanOrEquals), extracting the inner [`FilterAttribute`](crate::types::FilterAttribute).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_greater_than_or_equals(&self) -> ::std::result::Result<&crate::types::FilterAttribute, &Self> {
        if let RetrievalFilter::GreaterThanOrEquals(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`GreaterThanOrEquals`](crate::types::RetrievalFilter::GreaterThanOrEquals).
    pub fn is_greater_than_or_equals(&self) -> bool {
        self.as_greater_than_or_equals().is_ok()
    }
    /// Tries to convert the enum instance into [`In`](crate::types::RetrievalFilter::In), extracting the inner [`FilterAttribute`](crate::types::FilterAttribute).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_in(&self) -> ::std::result::Result<&crate::types::FilterAttribute, &Self> {
        if let RetrievalFilter::In(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`In`](crate::types::RetrievalFilter::In).
    pub fn is_in(&self) -> bool {
        self.as_in().is_ok()
    }
    /// Tries to convert the enum instance into [`LessThan`](crate::types::RetrievalFilter::LessThan), extracting the inner [`FilterAttribute`](crate::types::FilterAttribute).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_less_than(&self) -> ::std::result::Result<&crate::types::FilterAttribute, &Self> {
        if let RetrievalFilter::LessThan(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`LessThan`](crate::types::RetrievalFilter::LessThan).
    pub fn is_less_than(&self) -> bool {
        self.as_less_than().is_ok()
    }
    /// Tries to convert the enum instance into [`LessThanOrEquals`](crate::types::RetrievalFilter::LessThanOrEquals), extracting the inner [`FilterAttribute`](crate::types::FilterAttribute).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_less_than_or_equals(&self) -> ::std::result::Result<&crate::types::FilterAttribute, &Self> {
        if let RetrievalFilter::LessThanOrEquals(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`LessThanOrEquals`](crate::types::RetrievalFilter::LessThanOrEquals).
    pub fn is_less_than_or_equals(&self) -> bool {
        self.as_less_than_or_equals().is_ok()
    }
    /// Tries to convert the enum instance into [`ListContains`](crate::types::RetrievalFilter::ListContains), extracting the inner [`FilterAttribute`](crate::types::FilterAttribute).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_list_contains(&self) -> ::std::result::Result<&crate::types::FilterAttribute, &Self> {
        if let RetrievalFilter::ListContains(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ListContains`](crate::types::RetrievalFilter::ListContains).
    pub fn is_list_contains(&self) -> bool {
        self.as_list_contains().is_ok()
    }
    /// Tries to convert the enum instance into [`NotEquals`](crate::types::RetrievalFilter::NotEquals), extracting the inner [`FilterAttribute`](crate::types::FilterAttribute).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_not_equals(&self) -> ::std::result::Result<&crate::types::FilterAttribute, &Self> {
        if let RetrievalFilter::NotEquals(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`NotEquals`](crate::types::RetrievalFilter::NotEquals).
    pub fn is_not_equals(&self) -> bool {
        self.as_not_equals().is_ok()
    }
    /// Tries to convert the enum instance into [`NotIn`](crate::types::RetrievalFilter::NotIn), extracting the inner [`FilterAttribute`](crate::types::FilterAttribute).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_not_in(&self) -> ::std::result::Result<&crate::types::FilterAttribute, &Self> {
        if let RetrievalFilter::NotIn(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`NotIn`](crate::types::RetrievalFilter::NotIn).
    pub fn is_not_in(&self) -> bool {
        self.as_not_in().is_ok()
    }
    /// Tries to convert the enum instance into [`OrAll`](crate::types::RetrievalFilter::OrAll), extracting the inner [`Vec`](::std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_or_all(&self) -> ::std::result::Result<&::std::vec::Vec<crate::types::RetrievalFilter>, &Self> {
        if let RetrievalFilter::OrAll(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`OrAll`](crate::types::RetrievalFilter::OrAll).
    pub fn is_or_all(&self) -> bool {
        self.as_or_all().is_ok()
    }
    /// Tries to convert the enum instance into [`StartsWith`](crate::types::RetrievalFilter::StartsWith), extracting the inner [`FilterAttribute`](crate::types::FilterAttribute).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_starts_with(&self) -> ::std::result::Result<&crate::types::FilterAttribute, &Self> {
        if let RetrievalFilter::StartsWith(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`StartsWith`](crate::types::RetrievalFilter::StartsWith).
    pub fn is_starts_with(&self) -> bool {
        self.as_starts_with().is_ok()
    }
    /// Tries to convert the enum instance into [`StringContains`](crate::types::RetrievalFilter::StringContains), extracting the inner [`FilterAttribute`](crate::types::FilterAttribute).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_string_contains(&self) -> ::std::result::Result<&crate::types::FilterAttribute, &Self> {
        if let RetrievalFilter::StringContains(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`StringContains`](crate::types::RetrievalFilter::StringContains).
    pub fn is_string_contains(&self) -> bool {
        self.as_string_contains().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
impl ::std::fmt::Debug for RetrievalFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::std::write!(f, "*** Sensitive Data Redacted ***")
    }
}
