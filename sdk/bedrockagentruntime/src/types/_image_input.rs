// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about an image in the result from a function in the action group invocation. You can specify images only when the function is a computer use action. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agent-computer-use.html">Configure an Amazon Bedrock Agent to complete tasks with computer use tools</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImageInput {
    /// <p>The type of image in the result.</p>
    pub format: crate::types::ImageInputFormat,
    /// <p>The source of the image in the result.</p>
    pub source: ::std::option::Option<crate::types::ImageInputSource>,
}
impl ImageInput {
    /// <p>The type of image in the result.</p>
    pub fn format(&self) -> &crate::types::ImageInputFormat {
        &self.format
    }
    /// <p>The source of the image in the result.</p>
    pub fn source(&self) -> ::std::option::Option<&crate::types::ImageInputSource> {
        self.source.as_ref()
    }
}
impl ImageInput {
    /// Creates a new builder-style object to manufacture [`ImageInput`](crate::types::ImageInput).
    pub fn builder() -> crate::types::builders::ImageInputBuilder {
        crate::types::builders::ImageInputBuilder::default()
    }
}

/// A builder for [`ImageInput`](crate::types::ImageInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ImageInputBuilder {
    pub(crate) format: ::std::option::Option<crate::types::ImageInputFormat>,
    pub(crate) source: ::std::option::Option<crate::types::ImageInputSource>,
}
impl ImageInputBuilder {
    /// <p>The type of image in the result.</p>
    /// This field is required.
    pub fn format(mut self, input: crate::types::ImageInputFormat) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of image in the result.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::ImageInputFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>The type of image in the result.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::ImageInputFormat> {
        &self.format
    }
    /// <p>The source of the image in the result.</p>
    /// This field is required.
    pub fn source(mut self, input: crate::types::ImageInputSource) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source of the image in the result.</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::ImageInputSource>) -> Self {
        self.source = input;
        self
    }
    /// <p>The source of the image in the result.</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::ImageInputSource> {
        &self.source
    }
    /// Consumes the builder and constructs a [`ImageInput`](crate::types::ImageInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`format`](crate::types::builders::ImageInputBuilder::format)
    pub fn build(self) -> ::std::result::Result<crate::types::ImageInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ImageInput {
            format: self.format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "format",
                    "format was not specified but it is required when building ImageInput",
                )
            })?,
            source: self.source,
        })
    }
}
