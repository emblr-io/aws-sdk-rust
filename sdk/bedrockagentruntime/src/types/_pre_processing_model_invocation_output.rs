// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The foundation model output from the pre-processing step.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PreProcessingModelInvocationOutput {
    /// <p>The unique identifier of the trace.</p>
    pub trace_id: ::std::option::Option<::std::string::String>,
    /// <p>Details about the response from the Lambda parsing of the output of the pre-processing step.</p>
    pub parsed_response: ::std::option::Option<crate::types::PreProcessingParsedResponse>,
    /// <p>Details of the raw response from the foundation model output.</p>
    pub raw_response: ::std::option::Option<crate::types::RawResponse>,
    /// <p>Contains information about the foundation model output from the pre-processing step.</p>
    pub metadata: ::std::option::Option<crate::types::Metadata>,
    /// <p>Contains content about the reasoning that the model made during the pre-processing step.</p>
    pub reasoning_content: ::std::option::Option<crate::types::ReasoningContentBlock>,
}
impl PreProcessingModelInvocationOutput {
    /// <p>The unique identifier of the trace.</p>
    pub fn trace_id(&self) -> ::std::option::Option<&str> {
        self.trace_id.as_deref()
    }
    /// <p>Details about the response from the Lambda parsing of the output of the pre-processing step.</p>
    pub fn parsed_response(&self) -> ::std::option::Option<&crate::types::PreProcessingParsedResponse> {
        self.parsed_response.as_ref()
    }
    /// <p>Details of the raw response from the foundation model output.</p>
    pub fn raw_response(&self) -> ::std::option::Option<&crate::types::RawResponse> {
        self.raw_response.as_ref()
    }
    /// <p>Contains information about the foundation model output from the pre-processing step.</p>
    pub fn metadata(&self) -> ::std::option::Option<&crate::types::Metadata> {
        self.metadata.as_ref()
    }
    /// <p>Contains content about the reasoning that the model made during the pre-processing step.</p>
    pub fn reasoning_content(&self) -> ::std::option::Option<&crate::types::ReasoningContentBlock> {
        self.reasoning_content.as_ref()
    }
}
impl ::std::fmt::Debug for PreProcessingModelInvocationOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PreProcessingModelInvocationOutput");
        formatter.field("trace_id", &"*** Sensitive Data Redacted ***");
        formatter.field("parsed_response", &"*** Sensitive Data Redacted ***");
        formatter.field("raw_response", &"*** Sensitive Data Redacted ***");
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.field("reasoning_content", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl PreProcessingModelInvocationOutput {
    /// Creates a new builder-style object to manufacture [`PreProcessingModelInvocationOutput`](crate::types::PreProcessingModelInvocationOutput).
    pub fn builder() -> crate::types::builders::PreProcessingModelInvocationOutputBuilder {
        crate::types::builders::PreProcessingModelInvocationOutputBuilder::default()
    }
}

/// A builder for [`PreProcessingModelInvocationOutput`](crate::types::PreProcessingModelInvocationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct PreProcessingModelInvocationOutputBuilder {
    pub(crate) trace_id: ::std::option::Option<::std::string::String>,
    pub(crate) parsed_response: ::std::option::Option<crate::types::PreProcessingParsedResponse>,
    pub(crate) raw_response: ::std::option::Option<crate::types::RawResponse>,
    pub(crate) metadata: ::std::option::Option<crate::types::Metadata>,
    pub(crate) reasoning_content: ::std::option::Option<crate::types::ReasoningContentBlock>,
}
impl PreProcessingModelInvocationOutputBuilder {
    /// <p>The unique identifier of the trace.</p>
    pub fn trace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the trace.</p>
    pub fn set_trace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trace_id = input;
        self
    }
    /// <p>The unique identifier of the trace.</p>
    pub fn get_trace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.trace_id
    }
    /// <p>Details about the response from the Lambda parsing of the output of the pre-processing step.</p>
    pub fn parsed_response(mut self, input: crate::types::PreProcessingParsedResponse) -> Self {
        self.parsed_response = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the response from the Lambda parsing of the output of the pre-processing step.</p>
    pub fn set_parsed_response(mut self, input: ::std::option::Option<crate::types::PreProcessingParsedResponse>) -> Self {
        self.parsed_response = input;
        self
    }
    /// <p>Details about the response from the Lambda parsing of the output of the pre-processing step.</p>
    pub fn get_parsed_response(&self) -> &::std::option::Option<crate::types::PreProcessingParsedResponse> {
        &self.parsed_response
    }
    /// <p>Details of the raw response from the foundation model output.</p>
    pub fn raw_response(mut self, input: crate::types::RawResponse) -> Self {
        self.raw_response = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details of the raw response from the foundation model output.</p>
    pub fn set_raw_response(mut self, input: ::std::option::Option<crate::types::RawResponse>) -> Self {
        self.raw_response = input;
        self
    }
    /// <p>Details of the raw response from the foundation model output.</p>
    pub fn get_raw_response(&self) -> &::std::option::Option<crate::types::RawResponse> {
        &self.raw_response
    }
    /// <p>Contains information about the foundation model output from the pre-processing step.</p>
    pub fn metadata(mut self, input: crate::types::Metadata) -> Self {
        self.metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the foundation model output from the pre-processing step.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<crate::types::Metadata>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>Contains information about the foundation model output from the pre-processing step.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<crate::types::Metadata> {
        &self.metadata
    }
    /// <p>Contains content about the reasoning that the model made during the pre-processing step.</p>
    pub fn reasoning_content(mut self, input: crate::types::ReasoningContentBlock) -> Self {
        self.reasoning_content = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains content about the reasoning that the model made during the pre-processing step.</p>
    pub fn set_reasoning_content(mut self, input: ::std::option::Option<crate::types::ReasoningContentBlock>) -> Self {
        self.reasoning_content = input;
        self
    }
    /// <p>Contains content about the reasoning that the model made during the pre-processing step.</p>
    pub fn get_reasoning_content(&self) -> &::std::option::Option<crate::types::ReasoningContentBlock> {
        &self.reasoning_content
    }
    /// Consumes the builder and constructs a [`PreProcessingModelInvocationOutput`](crate::types::PreProcessingModelInvocationOutput).
    pub fn build(self) -> crate::types::PreProcessingModelInvocationOutput {
        crate::types::PreProcessingModelInvocationOutput {
            trace_id: self.trace_id,
            parsed_response: self.parsed_response,
            raw_response: self.raw_response,
            metadata: self.metadata,
            reasoning_content: self.reasoning_content,
        }
    }
}
impl ::std::fmt::Debug for PreProcessingModelInvocationOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PreProcessingModelInvocationOutputBuilder");
        formatter.field("trace_id", &"*** Sensitive Data Redacted ***");
        formatter.field("parsed_response", &"*** Sensitive Data Redacted ***");
        formatter.field("raw_response", &"*** Sensitive Data Redacted ***");
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.field("reasoning_content", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
