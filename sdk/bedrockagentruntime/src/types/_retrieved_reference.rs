// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains metadata about a source cited for the generated response.</p>
/// <p>This data type is used in the following API operations:</p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_RetrieveAndGenerate.html#API_agent-runtime_RetrieveAndGenerate_ResponseSyntax">RetrieveAndGenerate response</a> – in the <code>retrievedReferences</code> field</p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html#API_agent-runtime_InvokeAgent_ResponseSyntax">InvokeAgent response</a> – in the <code>retrievedReferences</code> field</p></li>
/// </ul>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RetrievedReference {
    /// <p>Contains the cited text from the data source.</p>
    pub content: ::std::option::Option<crate::types::RetrievalResultContent>,
    /// <p>Contains information about the location of the data source.</p>
    pub location: ::std::option::Option<crate::types::RetrievalResultLocation>,
    /// <p>Contains metadata attributes and their values for the file in the data source. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-ds.html#kb-ds-metadata">Metadata and filtering</a>.</p>
    pub metadata: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::aws_smithy_types::Document>>,
}
impl RetrievedReference {
    /// <p>Contains the cited text from the data source.</p>
    pub fn content(&self) -> ::std::option::Option<&crate::types::RetrievalResultContent> {
        self.content.as_ref()
    }
    /// <p>Contains information about the location of the data source.</p>
    pub fn location(&self) -> ::std::option::Option<&crate::types::RetrievalResultLocation> {
        self.location.as_ref()
    }
    /// <p>Contains metadata attributes and their values for the file in the data source. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-ds.html#kb-ds-metadata">Metadata and filtering</a>.</p>
    pub fn metadata(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::aws_smithy_types::Document>> {
        self.metadata.as_ref()
    }
}
impl ::std::fmt::Debug for RetrievedReference {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RetrievedReference");
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.field("location", &"*** Sensitive Data Redacted ***");
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RetrievedReference {
    /// Creates a new builder-style object to manufacture [`RetrievedReference`](crate::types::RetrievedReference).
    pub fn builder() -> crate::types::builders::RetrievedReferenceBuilder {
        crate::types::builders::RetrievedReferenceBuilder::default()
    }
}

/// A builder for [`RetrievedReference`](crate::types::RetrievedReference).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RetrievedReferenceBuilder {
    pub(crate) content: ::std::option::Option<crate::types::RetrievalResultContent>,
    pub(crate) location: ::std::option::Option<crate::types::RetrievalResultLocation>,
    pub(crate) metadata: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::aws_smithy_types::Document>>,
}
impl RetrievedReferenceBuilder {
    /// <p>Contains the cited text from the data source.</p>
    pub fn content(mut self, input: crate::types::RetrievalResultContent) -> Self {
        self.content = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the cited text from the data source.</p>
    pub fn set_content(mut self, input: ::std::option::Option<crate::types::RetrievalResultContent>) -> Self {
        self.content = input;
        self
    }
    /// <p>Contains the cited text from the data source.</p>
    pub fn get_content(&self) -> &::std::option::Option<crate::types::RetrievalResultContent> {
        &self.content
    }
    /// <p>Contains information about the location of the data source.</p>
    pub fn location(mut self, input: crate::types::RetrievalResultLocation) -> Self {
        self.location = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the location of the data source.</p>
    pub fn set_location(mut self, input: ::std::option::Option<crate::types::RetrievalResultLocation>) -> Self {
        self.location = input;
        self
    }
    /// <p>Contains information about the location of the data source.</p>
    pub fn get_location(&self) -> &::std::option::Option<crate::types::RetrievalResultLocation> {
        &self.location
    }
    /// Adds a key-value pair to `metadata`.
    ///
    /// To override the contents of this collection use [`set_metadata`](Self::set_metadata).
    ///
    /// <p>Contains metadata attributes and their values for the file in the data source. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-ds.html#kb-ds-metadata">Metadata and filtering</a>.</p>
    pub fn metadata(mut self, k: impl ::std::convert::Into<::std::string::String>, v: ::aws_smithy_types::Document) -> Self {
        let mut hash_map = self.metadata.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.metadata = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Contains metadata attributes and their values for the file in the data source. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-ds.html#kb-ds-metadata">Metadata and filtering</a>.</p>
    pub fn set_metadata(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::aws_smithy_types::Document>>,
    ) -> Self {
        self.metadata = input;
        self
    }
    /// <p>Contains metadata attributes and their values for the file in the data source. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-ds.html#kb-ds-metadata">Metadata and filtering</a>.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::aws_smithy_types::Document>> {
        &self.metadata
    }
    /// Consumes the builder and constructs a [`RetrievedReference`](crate::types::RetrievedReference).
    pub fn build(self) -> crate::types::RetrievedReference {
        crate::types::RetrievedReference {
            content: self.content,
            location: self.location,
            metadata: self.metadata,
        }
    }
}
impl ::std::fmt::Debug for RetrievedReferenceBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RetrievedReferenceBuilder");
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.field("location", &"*** Sensitive Data Redacted ***");
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
