// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The property contains the file to chat with, along with its attributes.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ByteContentFile {
    /// <p>The MIME type of data contained in the file used for chat.</p>
    pub media_type: ::std::string::String,
    /// <p>The raw bytes of the file to attach. The maximum size of all files that is attached is 10MB. You can attach a maximum of 5 files.</p>
    pub data: ::aws_smithy_types::Blob,
}
impl ByteContentFile {
    /// <p>The MIME type of data contained in the file used for chat.</p>
    pub fn media_type(&self) -> &str {
        use std::ops::Deref;
        self.media_type.deref()
    }
    /// <p>The raw bytes of the file to attach. The maximum size of all files that is attached is 10MB. You can attach a maximum of 5 files.</p>
    pub fn data(&self) -> &::aws_smithy_types::Blob {
        &self.data
    }
}
impl ::std::fmt::Debug for ByteContentFile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ByteContentFile");
        formatter.field("media_type", &self.media_type);
        formatter.field("data", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ByteContentFile {
    /// Creates a new builder-style object to manufacture [`ByteContentFile`](crate::types::ByteContentFile).
    pub fn builder() -> crate::types::builders::ByteContentFileBuilder {
        crate::types::builders::ByteContentFileBuilder::default()
    }
}

/// A builder for [`ByteContentFile`](crate::types::ByteContentFile).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ByteContentFileBuilder {
    pub(crate) media_type: ::std::option::Option<::std::string::String>,
    pub(crate) data: ::std::option::Option<::aws_smithy_types::Blob>,
}
impl ByteContentFileBuilder {
    /// <p>The MIME type of data contained in the file used for chat.</p>
    /// This field is required.
    pub fn media_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.media_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The MIME type of data contained in the file used for chat.</p>
    pub fn set_media_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.media_type = input;
        self
    }
    /// <p>The MIME type of data contained in the file used for chat.</p>
    pub fn get_media_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.media_type
    }
    /// <p>The raw bytes of the file to attach. The maximum size of all files that is attached is 10MB. You can attach a maximum of 5 files.</p>
    /// This field is required.
    pub fn data(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.data = ::std::option::Option::Some(input);
        self
    }
    /// <p>The raw bytes of the file to attach. The maximum size of all files that is attached is 10MB. You can attach a maximum of 5 files.</p>
    pub fn set_data(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.data = input;
        self
    }
    /// <p>The raw bytes of the file to attach. The maximum size of all files that is attached is 10MB. You can attach a maximum of 5 files.</p>
    pub fn get_data(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.data
    }
    /// Consumes the builder and constructs a [`ByteContentFile`](crate::types::ByteContentFile).
    /// This method will fail if any of the following fields are not set:
    /// - [`media_type`](crate::types::builders::ByteContentFileBuilder::media_type)
    /// - [`data`](crate::types::builders::ByteContentFileBuilder::data)
    pub fn build(self) -> ::std::result::Result<crate::types::ByteContentFile, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ByteContentFile {
            media_type: self.media_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "media_type",
                    "media_type was not specified but it is required when building ByteContentFile",
                )
            })?,
            data: self.data.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "data",
                    "data was not specified but it is required when building ByteContentFile",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for ByteContentFileBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ByteContentFileBuilder");
        formatter.field("media_type", &self.media_type);
        formatter.field("data", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
