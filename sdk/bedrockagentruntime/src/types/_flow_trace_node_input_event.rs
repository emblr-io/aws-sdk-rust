// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the input into a node. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/flows-trace.html">Track each step in your prompt flow by viewing its trace in Amazon Bedrock</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct FlowTraceNodeInputEvent {
    /// <p>The name of the node that received the input.</p>
    pub node_name: ::std::string::String,
    /// <p>The date and time that the trace was returned.</p>
    pub timestamp: ::aws_smithy_types::DateTime,
    /// <p>An array of objects containing information about each field in the input.</p>
    pub fields: ::std::vec::Vec<crate::types::FlowTraceNodeInputField>,
}
impl FlowTraceNodeInputEvent {
    /// <p>The name of the node that received the input.</p>
    pub fn node_name(&self) -> &str {
        use std::ops::Deref;
        self.node_name.deref()
    }
    /// <p>The date and time that the trace was returned.</p>
    pub fn timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.timestamp
    }
    /// <p>An array of objects containing information about each field in the input.</p>
    pub fn fields(&self) -> &[crate::types::FlowTraceNodeInputField] {
        use std::ops::Deref;
        self.fields.deref()
    }
}
impl ::std::fmt::Debug for FlowTraceNodeInputEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FlowTraceNodeInputEvent");
        formatter.field("node_name", &"*** Sensitive Data Redacted ***");
        formatter.field("timestamp", &"*** Sensitive Data Redacted ***");
        formatter.field("fields", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl FlowTraceNodeInputEvent {
    /// Creates a new builder-style object to manufacture [`FlowTraceNodeInputEvent`](crate::types::FlowTraceNodeInputEvent).
    pub fn builder() -> crate::types::builders::FlowTraceNodeInputEventBuilder {
        crate::types::builders::FlowTraceNodeInputEventBuilder::default()
    }
}

/// A builder for [`FlowTraceNodeInputEvent`](crate::types::FlowTraceNodeInputEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct FlowTraceNodeInputEventBuilder {
    pub(crate) node_name: ::std::option::Option<::std::string::String>,
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) fields: ::std::option::Option<::std::vec::Vec<crate::types::FlowTraceNodeInputField>>,
}
impl FlowTraceNodeInputEventBuilder {
    /// <p>The name of the node that received the input.</p>
    /// This field is required.
    pub fn node_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the node that received the input.</p>
    pub fn set_node_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_name = input;
        self
    }
    /// <p>The name of the node that received the input.</p>
    pub fn get_node_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_name
    }
    /// <p>The date and time that the trace was returned.</p>
    /// This field is required.
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the trace was returned.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The date and time that the trace was returned.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// Appends an item to `fields`.
    ///
    /// To override the contents of this collection use [`set_fields`](Self::set_fields).
    ///
    /// <p>An array of objects containing information about each field in the input.</p>
    pub fn fields(mut self, input: crate::types::FlowTraceNodeInputField) -> Self {
        let mut v = self.fields.unwrap_or_default();
        v.push(input);
        self.fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects containing information about each field in the input.</p>
    pub fn set_fields(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FlowTraceNodeInputField>>) -> Self {
        self.fields = input;
        self
    }
    /// <p>An array of objects containing information about each field in the input.</p>
    pub fn get_fields(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FlowTraceNodeInputField>> {
        &self.fields
    }
    /// Consumes the builder and constructs a [`FlowTraceNodeInputEvent`](crate::types::FlowTraceNodeInputEvent).
    /// This method will fail if any of the following fields are not set:
    /// - [`node_name`](crate::types::builders::FlowTraceNodeInputEventBuilder::node_name)
    /// - [`timestamp`](crate::types::builders::FlowTraceNodeInputEventBuilder::timestamp)
    /// - [`fields`](crate::types::builders::FlowTraceNodeInputEventBuilder::fields)
    pub fn build(self) -> ::std::result::Result<crate::types::FlowTraceNodeInputEvent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FlowTraceNodeInputEvent {
            node_name: self.node_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "node_name",
                    "node_name was not specified but it is required when building FlowTraceNodeInputEvent",
                )
            })?,
            timestamp: self.timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "timestamp",
                    "timestamp was not specified but it is required when building FlowTraceNodeInputEvent",
                )
            })?,
            fields: self.fields.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "fields",
                    "fields was not specified but it is required when building FlowTraceNodeInputEvent",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for FlowTraceNodeInputEventBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FlowTraceNodeInputEventBuilder");
        formatter.field("node_name", &"*** Sensitive Data Redacted ***");
        formatter.field("timestamp", &"*** Sensitive Data Redacted ***");
        formatter.field("fields", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
