// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A conversation history.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConversationHistory {
    /// <p>The conversation's messages.</p>
    pub messages: ::std::option::Option<::std::vec::Vec<crate::types::Message>>,
}
impl ConversationHistory {
    /// <p>The conversation's messages.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.messages.is_none()`.
    pub fn messages(&self) -> &[crate::types::Message] {
        self.messages.as_deref().unwrap_or_default()
    }
}
impl ConversationHistory {
    /// Creates a new builder-style object to manufacture [`ConversationHistory`](crate::types::ConversationHistory).
    pub fn builder() -> crate::types::builders::ConversationHistoryBuilder {
        crate::types::builders::ConversationHistoryBuilder::default()
    }
}

/// A builder for [`ConversationHistory`](crate::types::ConversationHistory).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConversationHistoryBuilder {
    pub(crate) messages: ::std::option::Option<::std::vec::Vec<crate::types::Message>>,
}
impl ConversationHistoryBuilder {
    /// Appends an item to `messages`.
    ///
    /// To override the contents of this collection use [`set_messages`](Self::set_messages).
    ///
    /// <p>The conversation's messages.</p>
    pub fn messages(mut self, input: crate::types::Message) -> Self {
        let mut v = self.messages.unwrap_or_default();
        v.push(input);
        self.messages = ::std::option::Option::Some(v);
        self
    }
    /// <p>The conversation's messages.</p>
    pub fn set_messages(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Message>>) -> Self {
        self.messages = input;
        self
    }
    /// <p>The conversation's messages.</p>
    pub fn get_messages(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Message>> {
        &self.messages
    }
    /// Consumes the builder and constructs a [`ConversationHistory`](crate::types::ConversationHistory).
    pub fn build(self) -> crate::types::ConversationHistory {
        crate::types::ConversationHistory { messages: self.messages }
    }
}
