// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configurations for transforming the natural language query into SQL.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TransformationConfiguration {
    /// <p>The mode of the transformation.</p>
    pub mode: crate::types::QueryTransformationMode,
    /// <p>Specifies configurations for transforming text to SQL.</p>
    pub text_to_sql_configuration: ::std::option::Option<crate::types::TextToSqlConfiguration>,
}
impl TransformationConfiguration {
    /// <p>The mode of the transformation.</p>
    pub fn mode(&self) -> &crate::types::QueryTransformationMode {
        &self.mode
    }
    /// <p>Specifies configurations for transforming text to SQL.</p>
    pub fn text_to_sql_configuration(&self) -> ::std::option::Option<&crate::types::TextToSqlConfiguration> {
        self.text_to_sql_configuration.as_ref()
    }
}
impl TransformationConfiguration {
    /// Creates a new builder-style object to manufacture [`TransformationConfiguration`](crate::types::TransformationConfiguration).
    pub fn builder() -> crate::types::builders::TransformationConfigurationBuilder {
        crate::types::builders::TransformationConfigurationBuilder::default()
    }
}

/// A builder for [`TransformationConfiguration`](crate::types::TransformationConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TransformationConfigurationBuilder {
    pub(crate) mode: ::std::option::Option<crate::types::QueryTransformationMode>,
    pub(crate) text_to_sql_configuration: ::std::option::Option<crate::types::TextToSqlConfiguration>,
}
impl TransformationConfigurationBuilder {
    /// <p>The mode of the transformation.</p>
    /// This field is required.
    pub fn mode(mut self, input: crate::types::QueryTransformationMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The mode of the transformation.</p>
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::QueryTransformationMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>The mode of the transformation.</p>
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::QueryTransformationMode> {
        &self.mode
    }
    /// <p>Specifies configurations for transforming text to SQL.</p>
    pub fn text_to_sql_configuration(mut self, input: crate::types::TextToSqlConfiguration) -> Self {
        self.text_to_sql_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies configurations for transforming text to SQL.</p>
    pub fn set_text_to_sql_configuration(mut self, input: ::std::option::Option<crate::types::TextToSqlConfiguration>) -> Self {
        self.text_to_sql_configuration = input;
        self
    }
    /// <p>Specifies configurations for transforming text to SQL.</p>
    pub fn get_text_to_sql_configuration(&self) -> &::std::option::Option<crate::types::TextToSqlConfiguration> {
        &self.text_to_sql_configuration
    }
    /// Consumes the builder and constructs a [`TransformationConfiguration`](crate::types::TransformationConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`mode`](crate::types::builders::TransformationConfigurationBuilder::mode)
    pub fn build(self) -> ::std::result::Result<crate::types::TransformationConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TransformationConfiguration {
            mode: self.mode.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mode",
                    "mode was not specified but it is required when building TransformationConfiguration",
                )
            })?,
            text_to_sql_configuration: self.text_to_sql_configuration,
        })
    }
}
