// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the JSON-formatted string returned by the API invoked by the code interpreter.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CodeInterpreterInvocationOutput {
    /// <p>Contains the successful output returned from code execution</p>
    pub execution_output: ::std::option::Option<::std::string::String>,
    /// <p>Contains the error returned from code execution.</p>
    pub execution_error: ::std::option::Option<::std::string::String>,
    /// <p>Contains output files, if generated by code execution.</p>
    pub files: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Indicates if the execution of the code timed out.</p>
    pub execution_timeout: ::std::option::Option<bool>,
    /// <p>Contains information about the output from the code interpreter.</p>
    pub metadata: ::std::option::Option<crate::types::Metadata>,
}
impl CodeInterpreterInvocationOutput {
    /// <p>Contains the successful output returned from code execution</p>
    pub fn execution_output(&self) -> ::std::option::Option<&str> {
        self.execution_output.as_deref()
    }
    /// <p>Contains the error returned from code execution.</p>
    pub fn execution_error(&self) -> ::std::option::Option<&str> {
        self.execution_error.as_deref()
    }
    /// <p>Contains output files, if generated by code execution.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.files.is_none()`.
    pub fn files(&self) -> &[::std::string::String] {
        self.files.as_deref().unwrap_or_default()
    }
    /// <p>Indicates if the execution of the code timed out.</p>
    pub fn execution_timeout(&self) -> ::std::option::Option<bool> {
        self.execution_timeout
    }
    /// <p>Contains information about the output from the code interpreter.</p>
    pub fn metadata(&self) -> ::std::option::Option<&crate::types::Metadata> {
        self.metadata.as_ref()
    }
}
impl ::std::fmt::Debug for CodeInterpreterInvocationOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CodeInterpreterInvocationOutput");
        formatter.field("execution_output", &self.execution_output);
        formatter.field("execution_error", &self.execution_error);
        formatter.field("files", &self.files);
        formatter.field("execution_timeout", &self.execution_timeout);
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CodeInterpreterInvocationOutput {
    /// Creates a new builder-style object to manufacture [`CodeInterpreterInvocationOutput`](crate::types::CodeInterpreterInvocationOutput).
    pub fn builder() -> crate::types::builders::CodeInterpreterInvocationOutputBuilder {
        crate::types::builders::CodeInterpreterInvocationOutputBuilder::default()
    }
}

/// A builder for [`CodeInterpreterInvocationOutput`](crate::types::CodeInterpreterInvocationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CodeInterpreterInvocationOutputBuilder {
    pub(crate) execution_output: ::std::option::Option<::std::string::String>,
    pub(crate) execution_error: ::std::option::Option<::std::string::String>,
    pub(crate) files: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) execution_timeout: ::std::option::Option<bool>,
    pub(crate) metadata: ::std::option::Option<crate::types::Metadata>,
}
impl CodeInterpreterInvocationOutputBuilder {
    /// <p>Contains the successful output returned from code execution</p>
    pub fn execution_output(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_output = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Contains the successful output returned from code execution</p>
    pub fn set_execution_output(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_output = input;
        self
    }
    /// <p>Contains the successful output returned from code execution</p>
    pub fn get_execution_output(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_output
    }
    /// <p>Contains the error returned from code execution.</p>
    pub fn execution_error(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_error = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Contains the error returned from code execution.</p>
    pub fn set_execution_error(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_error = input;
        self
    }
    /// <p>Contains the error returned from code execution.</p>
    pub fn get_execution_error(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_error
    }
    /// Appends an item to `files`.
    ///
    /// To override the contents of this collection use [`set_files`](Self::set_files).
    ///
    /// <p>Contains output files, if generated by code execution.</p>
    pub fn files(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.files.unwrap_or_default();
        v.push(input.into());
        self.files = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains output files, if generated by code execution.</p>
    pub fn set_files(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.files = input;
        self
    }
    /// <p>Contains output files, if generated by code execution.</p>
    pub fn get_files(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.files
    }
    /// <p>Indicates if the execution of the code timed out.</p>
    pub fn execution_timeout(mut self, input: bool) -> Self {
        self.execution_timeout = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates if the execution of the code timed out.</p>
    pub fn set_execution_timeout(mut self, input: ::std::option::Option<bool>) -> Self {
        self.execution_timeout = input;
        self
    }
    /// <p>Indicates if the execution of the code timed out.</p>
    pub fn get_execution_timeout(&self) -> &::std::option::Option<bool> {
        &self.execution_timeout
    }
    /// <p>Contains information about the output from the code interpreter.</p>
    pub fn metadata(mut self, input: crate::types::Metadata) -> Self {
        self.metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the output from the code interpreter.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<crate::types::Metadata>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>Contains information about the output from the code interpreter.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<crate::types::Metadata> {
        &self.metadata
    }
    /// Consumes the builder and constructs a [`CodeInterpreterInvocationOutput`](crate::types::CodeInterpreterInvocationOutput).
    pub fn build(self) -> crate::types::CodeInterpreterInvocationOutput {
        crate::types::CodeInterpreterInvocationOutput {
            execution_output: self.execution_output,
            execution_error: self.execution_error,
            files: self.files,
            execution_timeout: self.execution_timeout,
            metadata: self.metadata,
        }
    }
}
impl ::std::fmt::Debug for CodeInterpreterInvocationOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CodeInterpreterInvocationOutputBuilder");
        formatter.field("execution_output", &self.execution_output);
        formatter.field("execution_error", &self.execution_error);
        formatter.field("files", &self.files);
        formatter.field("execution_timeout", &self.execution_timeout);
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
