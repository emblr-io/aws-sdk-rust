// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the template for the prompt that's sent to the model for response generation. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/kb-test-config.html#kb-test-config-sysprompt">Knowledge base prompt templates</a>.</p>
/// <p>This data type is used in the following API operations:</p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_RetrieveAndGenerate.html#API_agent-runtime_RetrieveAndGenerate_RequestSyntax">RetrieveAndGenerate request</a> â€“ in the <code>filter</code> field</p></li>
/// </ul>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PromptTemplate {
    /// <p>The template for the prompt that's sent to the model for response generation. You can include prompt placeholders, which become replaced before the prompt is sent to the model to provide instructions and context to the model. In addition, you can include XML tags to delineate meaningful sections of the prompt template.</p>
    /// <p>For more information, see the following resources:</p>
    /// <ul>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/bedrock/latest/userguide/kb-test-config.html#kb-test-config-sysprompt">Knowledge base prompt templates</a></p></li>
    /// <li>
    /// <p><a href="https://docs.anthropic.com/claude/docs/use-xml-tags">Use XML tags with Anthropic Claude models</a></p></li>
    /// </ul>
    pub text_prompt_template: ::std::option::Option<::std::string::String>,
}
impl PromptTemplate {
    /// <p>The template for the prompt that's sent to the model for response generation. You can include prompt placeholders, which become replaced before the prompt is sent to the model to provide instructions and context to the model. In addition, you can include XML tags to delineate meaningful sections of the prompt template.</p>
    /// <p>For more information, see the following resources:</p>
    /// <ul>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/bedrock/latest/userguide/kb-test-config.html#kb-test-config-sysprompt">Knowledge base prompt templates</a></p></li>
    /// <li>
    /// <p><a href="https://docs.anthropic.com/claude/docs/use-xml-tags">Use XML tags with Anthropic Claude models</a></p></li>
    /// </ul>
    pub fn text_prompt_template(&self) -> ::std::option::Option<&str> {
        self.text_prompt_template.as_deref()
    }
}
impl ::std::fmt::Debug for PromptTemplate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PromptTemplate");
        formatter.field("text_prompt_template", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl PromptTemplate {
    /// Creates a new builder-style object to manufacture [`PromptTemplate`](crate::types::PromptTemplate).
    pub fn builder() -> crate::types::builders::PromptTemplateBuilder {
        crate::types::builders::PromptTemplateBuilder::default()
    }
}

/// A builder for [`PromptTemplate`](crate::types::PromptTemplate).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct PromptTemplateBuilder {
    pub(crate) text_prompt_template: ::std::option::Option<::std::string::String>,
}
impl PromptTemplateBuilder {
    /// <p>The template for the prompt that's sent to the model for response generation. You can include prompt placeholders, which become replaced before the prompt is sent to the model to provide instructions and context to the model. In addition, you can include XML tags to delineate meaningful sections of the prompt template.</p>
    /// <p>For more information, see the following resources:</p>
    /// <ul>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/bedrock/latest/userguide/kb-test-config.html#kb-test-config-sysprompt">Knowledge base prompt templates</a></p></li>
    /// <li>
    /// <p><a href="https://docs.anthropic.com/claude/docs/use-xml-tags">Use XML tags with Anthropic Claude models</a></p></li>
    /// </ul>
    pub fn text_prompt_template(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text_prompt_template = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The template for the prompt that's sent to the model for response generation. You can include prompt placeholders, which become replaced before the prompt is sent to the model to provide instructions and context to the model. In addition, you can include XML tags to delineate meaningful sections of the prompt template.</p>
    /// <p>For more information, see the following resources:</p>
    /// <ul>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/bedrock/latest/userguide/kb-test-config.html#kb-test-config-sysprompt">Knowledge base prompt templates</a></p></li>
    /// <li>
    /// <p><a href="https://docs.anthropic.com/claude/docs/use-xml-tags">Use XML tags with Anthropic Claude models</a></p></li>
    /// </ul>
    pub fn set_text_prompt_template(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text_prompt_template = input;
        self
    }
    /// <p>The template for the prompt that's sent to the model for response generation. You can include prompt placeholders, which become replaced before the prompt is sent to the model to provide instructions and context to the model. In addition, you can include XML tags to delineate meaningful sections of the prompt template.</p>
    /// <p>For more information, see the following resources:</p>
    /// <ul>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/bedrock/latest/userguide/kb-test-config.html#kb-test-config-sysprompt">Knowledge base prompt templates</a></p></li>
    /// <li>
    /// <p><a href="https://docs.anthropic.com/claude/docs/use-xml-tags">Use XML tags with Anthropic Claude models</a></p></li>
    /// </ul>
    pub fn get_text_prompt_template(&self) -> &::std::option::Option<::std::string::String> {
        &self.text_prompt_template
    }
    /// Consumes the builder and constructs a [`PromptTemplate`](crate::types::PromptTemplate).
    pub fn build(self) -> crate::types::PromptTemplate {
        crate::types::PromptTemplate {
            text_prompt_template: self.text_prompt_template,
        }
    }
}
impl ::std::fmt::Debug for PromptTemplateBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PromptTemplateBuilder");
        formatter.field("text_prompt_template", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
