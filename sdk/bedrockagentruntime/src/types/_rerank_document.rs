// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a document to rerank. Choose the <code>type</code> to define and include the field that corresponds to the type.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RerankDocument {
    /// <p>The type of document to rerank.</p>
    pub r#type: crate::types::RerankDocumentType,
    /// <p>Contains information about a text document to rerank.</p>
    pub text_document: ::std::option::Option<crate::types::RerankTextDocument>,
    /// <p>Contains a JSON document to rerank.</p>
    pub json_document: ::std::option::Option<::aws_smithy_types::Document>,
}
impl RerankDocument {
    /// <p>The type of document to rerank.</p>
    pub fn r#type(&self) -> &crate::types::RerankDocumentType {
        &self.r#type
    }
    /// <p>Contains information about a text document to rerank.</p>
    pub fn text_document(&self) -> ::std::option::Option<&crate::types::RerankTextDocument> {
        self.text_document.as_ref()
    }
    /// <p>Contains a JSON document to rerank.</p>
    pub fn json_document(&self) -> ::std::option::Option<&::aws_smithy_types::Document> {
        self.json_document.as_ref()
    }
}
impl ::std::fmt::Debug for RerankDocument {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RerankDocument");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("text_document", &"*** Sensitive Data Redacted ***");
        formatter.field("json_document", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RerankDocument {
    /// Creates a new builder-style object to manufacture [`RerankDocument`](crate::types::RerankDocument).
    pub fn builder() -> crate::types::builders::RerankDocumentBuilder {
        crate::types::builders::RerankDocumentBuilder::default()
    }
}

/// A builder for [`RerankDocument`](crate::types::RerankDocument).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RerankDocumentBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::RerankDocumentType>,
    pub(crate) text_document: ::std::option::Option<crate::types::RerankTextDocument>,
    pub(crate) json_document: ::std::option::Option<::aws_smithy_types::Document>,
}
impl RerankDocumentBuilder {
    /// <p>The type of document to rerank.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::RerankDocumentType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of document to rerank.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RerankDocumentType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of document to rerank.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RerankDocumentType> {
        &self.r#type
    }
    /// <p>Contains information about a text document to rerank.</p>
    pub fn text_document(mut self, input: crate::types::RerankTextDocument) -> Self {
        self.text_document = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about a text document to rerank.</p>
    pub fn set_text_document(mut self, input: ::std::option::Option<crate::types::RerankTextDocument>) -> Self {
        self.text_document = input;
        self
    }
    /// <p>Contains information about a text document to rerank.</p>
    pub fn get_text_document(&self) -> &::std::option::Option<crate::types::RerankTextDocument> {
        &self.text_document
    }
    /// <p>Contains a JSON document to rerank.</p>
    pub fn json_document(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.json_document = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains a JSON document to rerank.</p>
    pub fn set_json_document(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.json_document = input;
        self
    }
    /// <p>Contains a JSON document to rerank.</p>
    pub fn get_json_document(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.json_document
    }
    /// Consumes the builder and constructs a [`RerankDocument`](crate::types::RerankDocument).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::RerankDocumentBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::RerankDocument, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RerankDocument {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building RerankDocument",
                )
            })?,
            text_document: self.text_document,
            json_document: self.json_document,
        })
    }
}
impl ::std::fmt::Debug for RerankDocumentBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RerankDocumentBuilder");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("text_document", &"*** Sensitive Data Redacted ***");
        formatter.field("json_document", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
