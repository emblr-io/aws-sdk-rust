// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the agent and session, alongside the agent's reasoning process and results from calling API actions and querying knowledge bases and metadata about the trace. You can use the trace to understand how the agent arrived at the response it provided the customer. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-test.html#trace-enablement">Trace enablement</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TracePart {
    /// <p>The unique identifier of the session with the agent.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>Contains one part of the agent's reasoning process and results from calling API actions and querying knowledge bases. You can use the trace to understand how the agent arrived at the response it provided the customer. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-test.html#trace-enablement">Trace enablement</a>.</p>
    pub trace: ::std::option::Option<crate::types::Trace>,
    /// <p>The part's caller chain.</p>
    pub caller_chain: ::std::option::Option<::std::vec::Vec<crate::types::Caller>>,
    /// <p>The time of the trace.</p>
    pub event_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The part's collaborator name.</p>
    pub collaborator_name: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the agent.</p>
    pub agent_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the alias of the agent.</p>
    pub agent_alias_id: ::std::option::Option<::std::string::String>,
    /// <p>The version of the agent.</p>
    pub agent_version: ::std::option::Option<::std::string::String>,
}
impl TracePart {
    /// <p>The unique identifier of the session with the agent.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>Contains one part of the agent's reasoning process and results from calling API actions and querying knowledge bases. You can use the trace to understand how the agent arrived at the response it provided the customer. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-test.html#trace-enablement">Trace enablement</a>.</p>
    pub fn trace(&self) -> ::std::option::Option<&crate::types::Trace> {
        self.trace.as_ref()
    }
    /// <p>The part's caller chain.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.caller_chain.is_none()`.
    pub fn caller_chain(&self) -> &[crate::types::Caller] {
        self.caller_chain.as_deref().unwrap_or_default()
    }
    /// <p>The time of the trace.</p>
    pub fn event_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.event_time.as_ref()
    }
    /// <p>The part's collaborator name.</p>
    pub fn collaborator_name(&self) -> ::std::option::Option<&str> {
        self.collaborator_name.as_deref()
    }
    /// <p>The unique identifier of the agent.</p>
    pub fn agent_id(&self) -> ::std::option::Option<&str> {
        self.agent_id.as_deref()
    }
    /// <p>The unique identifier of the alias of the agent.</p>
    pub fn agent_alias_id(&self) -> ::std::option::Option<&str> {
        self.agent_alias_id.as_deref()
    }
    /// <p>The version of the agent.</p>
    pub fn agent_version(&self) -> ::std::option::Option<&str> {
        self.agent_version.as_deref()
    }
}
impl ::std::fmt::Debug for TracePart {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TracePart");
        formatter.field("session_id", &"*** Sensitive Data Redacted ***");
        formatter.field("trace", &"*** Sensitive Data Redacted ***");
        formatter.field("caller_chain", &"*** Sensitive Data Redacted ***");
        formatter.field("event_time", &"*** Sensitive Data Redacted ***");
        formatter.field("collaborator_name", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_id", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_alias_id", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_version", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl TracePart {
    /// Creates a new builder-style object to manufacture [`TracePart`](crate::types::TracePart).
    pub fn builder() -> crate::types::builders::TracePartBuilder {
        crate::types::builders::TracePartBuilder::default()
    }
}

/// A builder for [`TracePart`](crate::types::TracePart).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct TracePartBuilder {
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) trace: ::std::option::Option<crate::types::Trace>,
    pub(crate) caller_chain: ::std::option::Option<::std::vec::Vec<crate::types::Caller>>,
    pub(crate) event_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) collaborator_name: ::std::option::Option<::std::string::String>,
    pub(crate) agent_id: ::std::option::Option<::std::string::String>,
    pub(crate) agent_alias_id: ::std::option::Option<::std::string::String>,
    pub(crate) agent_version: ::std::option::Option<::std::string::String>,
}
impl TracePartBuilder {
    /// <p>The unique identifier of the session with the agent.</p>
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the session with the agent.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The unique identifier of the session with the agent.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>Contains one part of the agent's reasoning process and results from calling API actions and querying knowledge bases. You can use the trace to understand how the agent arrived at the response it provided the customer. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-test.html#trace-enablement">Trace enablement</a>.</p>
    pub fn trace(mut self, input: crate::types::Trace) -> Self {
        self.trace = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains one part of the agent's reasoning process and results from calling API actions and querying knowledge bases. You can use the trace to understand how the agent arrived at the response it provided the customer. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-test.html#trace-enablement">Trace enablement</a>.</p>
    pub fn set_trace(mut self, input: ::std::option::Option<crate::types::Trace>) -> Self {
        self.trace = input;
        self
    }
    /// <p>Contains one part of the agent's reasoning process and results from calling API actions and querying knowledge bases. You can use the trace to understand how the agent arrived at the response it provided the customer. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-test.html#trace-enablement">Trace enablement</a>.</p>
    pub fn get_trace(&self) -> &::std::option::Option<crate::types::Trace> {
        &self.trace
    }
    /// Appends an item to `caller_chain`.
    ///
    /// To override the contents of this collection use [`set_caller_chain`](Self::set_caller_chain).
    ///
    /// <p>The part's caller chain.</p>
    pub fn caller_chain(mut self, input: crate::types::Caller) -> Self {
        let mut v = self.caller_chain.unwrap_or_default();
        v.push(input);
        self.caller_chain = ::std::option::Option::Some(v);
        self
    }
    /// <p>The part's caller chain.</p>
    pub fn set_caller_chain(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Caller>>) -> Self {
        self.caller_chain = input;
        self
    }
    /// <p>The part's caller chain.</p>
    pub fn get_caller_chain(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Caller>> {
        &self.caller_chain
    }
    /// <p>The time of the trace.</p>
    pub fn event_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.event_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time of the trace.</p>
    pub fn set_event_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.event_time = input;
        self
    }
    /// <p>The time of the trace.</p>
    pub fn get_event_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.event_time
    }
    /// <p>The part's collaborator name.</p>
    pub fn collaborator_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaborator_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The part's collaborator name.</p>
    pub fn set_collaborator_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaborator_name = input;
        self
    }
    /// <p>The part's collaborator name.</p>
    pub fn get_collaborator_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaborator_name
    }
    /// <p>The unique identifier of the agent.</p>
    pub fn agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the agent.</p>
    pub fn set_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_id = input;
        self
    }
    /// <p>The unique identifier of the agent.</p>
    pub fn get_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_id
    }
    /// <p>The unique identifier of the alias of the agent.</p>
    pub fn agent_alias_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_alias_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the alias of the agent.</p>
    pub fn set_agent_alias_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_alias_id = input;
        self
    }
    /// <p>The unique identifier of the alias of the agent.</p>
    pub fn get_agent_alias_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_alias_id
    }
    /// <p>The version of the agent.</p>
    pub fn agent_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the agent.</p>
    pub fn set_agent_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_version = input;
        self
    }
    /// <p>The version of the agent.</p>
    pub fn get_agent_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_version
    }
    /// Consumes the builder and constructs a [`TracePart`](crate::types::TracePart).
    pub fn build(self) -> crate::types::TracePart {
        crate::types::TracePart {
            session_id: self.session_id,
            trace: self.trace,
            caller_chain: self.caller_chain,
            event_time: self.event_time,
            collaborator_name: self.collaborator_name,
            agent_id: self.agent_id,
            agent_alias_id: self.agent_alias_id,
            agent_version: self.agent_version,
        }
    }
}
impl ::std::fmt::Debug for TracePartBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TracePartBuilder");
        formatter.field("session_id", &"*** Sensitive Data Redacted ***");
        formatter.field("trace", &"*** Sensitive Data Redacted ***");
        formatter.field("caller_chain", &"*** Sensitive Data Redacted ***");
        formatter.field("event_time", &"*** Sensitive Data Redacted ***");
        formatter.field("collaborator_name", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_id", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_alias_id", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_version", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
