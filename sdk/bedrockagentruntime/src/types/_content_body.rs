// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the body of the API response.</p>
/// <p>This data type is used in the following API operations:</p>
/// <ul>
/// <li>
/// <p>In the <code>returnControlInvocationResults</code> field of the <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html#API_agent-runtime_InvokeAgent_RequestSyntax">InvokeAgent request</a></p></li>
/// </ul>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContentBody {
    /// <p>The body of the API response.</p>
    pub body: ::std::option::Option<::std::string::String>,
    /// <p>Lists details, including format and source, for the image in the response from the function call. You can specify only one image and the function in the <code>returnControlInvocationResults</code> must be a computer use action. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agent-computer-use.html">Configure an Amazon Bedrock Agent to complete tasks with computer use tools</a>.</p>
    pub images: ::std::option::Option<::std::vec::Vec<crate::types::ImageInput>>,
}
impl ContentBody {
    /// <p>The body of the API response.</p>
    pub fn body(&self) -> ::std::option::Option<&str> {
        self.body.as_deref()
    }
    /// <p>Lists details, including format and source, for the image in the response from the function call. You can specify only one image and the function in the <code>returnControlInvocationResults</code> must be a computer use action. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agent-computer-use.html">Configure an Amazon Bedrock Agent to complete tasks with computer use tools</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.images.is_none()`.
    pub fn images(&self) -> &[crate::types::ImageInput] {
        self.images.as_deref().unwrap_or_default()
    }
}
impl ContentBody {
    /// Creates a new builder-style object to manufacture [`ContentBody`](crate::types::ContentBody).
    pub fn builder() -> crate::types::builders::ContentBodyBuilder {
        crate::types::builders::ContentBodyBuilder::default()
    }
}

/// A builder for [`ContentBody`](crate::types::ContentBody).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContentBodyBuilder {
    pub(crate) body: ::std::option::Option<::std::string::String>,
    pub(crate) images: ::std::option::Option<::std::vec::Vec<crate::types::ImageInput>>,
}
impl ContentBodyBuilder {
    /// <p>The body of the API response.</p>
    pub fn body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The body of the API response.</p>
    pub fn set_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// <p>The body of the API response.</p>
    pub fn get_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.body
    }
    /// Appends an item to `images`.
    ///
    /// To override the contents of this collection use [`set_images`](Self::set_images).
    ///
    /// <p>Lists details, including format and source, for the image in the response from the function call. You can specify only one image and the function in the <code>returnControlInvocationResults</code> must be a computer use action. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agent-computer-use.html">Configure an Amazon Bedrock Agent to complete tasks with computer use tools</a>.</p>
    pub fn images(mut self, input: crate::types::ImageInput) -> Self {
        let mut v = self.images.unwrap_or_default();
        v.push(input);
        self.images = ::std::option::Option::Some(v);
        self
    }
    /// <p>Lists details, including format and source, for the image in the response from the function call. You can specify only one image and the function in the <code>returnControlInvocationResults</code> must be a computer use action. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agent-computer-use.html">Configure an Amazon Bedrock Agent to complete tasks with computer use tools</a>.</p>
    pub fn set_images(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ImageInput>>) -> Self {
        self.images = input;
        self
    }
    /// <p>Lists details, including format and source, for the image in the response from the function call. You can specify only one image and the function in the <code>returnControlInvocationResults</code> must be a computer use action. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agent-computer-use.html">Configure an Amazon Bedrock Agent to complete tasks with computer use tools</a>.</p>
    pub fn get_images(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ImageInput>> {
        &self.images
    }
    /// Consumes the builder and constructs a [`ContentBody`](crate::types::ContentBody).
    pub fn build(self) -> crate::types::ContentBody {
        crate::types::ContentBody {
            body: self.body,
            images: self.images,
        }
    }
}
