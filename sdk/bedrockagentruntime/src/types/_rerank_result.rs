// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a document that was reranked.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RerankResult {
    /// <p>The ranking of the document. The lower a number, the higher the document is ranked.</p>
    pub index: i32,
    /// <p>The relevance score of the document.</p>
    pub relevance_score: f32,
    /// <p>Contains information about the document.</p>
    pub document: ::std::option::Option<crate::types::RerankDocument>,
}
impl RerankResult {
    /// <p>The ranking of the document. The lower a number, the higher the document is ranked.</p>
    pub fn index(&self) -> i32 {
        self.index
    }
    /// <p>The relevance score of the document.</p>
    pub fn relevance_score(&self) -> f32 {
        self.relevance_score
    }
    /// <p>Contains information about the document.</p>
    pub fn document(&self) -> ::std::option::Option<&crate::types::RerankDocument> {
        self.document.as_ref()
    }
}
impl ::std::fmt::Debug for RerankResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RerankResult");
        formatter.field("index", &self.index);
        formatter.field("relevance_score", &self.relevance_score);
        formatter.field("document", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RerankResult {
    /// Creates a new builder-style object to manufacture [`RerankResult`](crate::types::RerankResult).
    pub fn builder() -> crate::types::builders::RerankResultBuilder {
        crate::types::builders::RerankResultBuilder::default()
    }
}

/// A builder for [`RerankResult`](crate::types::RerankResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RerankResultBuilder {
    pub(crate) index: ::std::option::Option<i32>,
    pub(crate) relevance_score: ::std::option::Option<f32>,
    pub(crate) document: ::std::option::Option<crate::types::RerankDocument>,
}
impl RerankResultBuilder {
    /// <p>The ranking of the document. The lower a number, the higher the document is ranked.</p>
    /// This field is required.
    pub fn index(mut self, input: i32) -> Self {
        self.index = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ranking of the document. The lower a number, the higher the document is ranked.</p>
    pub fn set_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.index = input;
        self
    }
    /// <p>The ranking of the document. The lower a number, the higher the document is ranked.</p>
    pub fn get_index(&self) -> &::std::option::Option<i32> {
        &self.index
    }
    /// <p>The relevance score of the document.</p>
    /// This field is required.
    pub fn relevance_score(mut self, input: f32) -> Self {
        self.relevance_score = ::std::option::Option::Some(input);
        self
    }
    /// <p>The relevance score of the document.</p>
    pub fn set_relevance_score(mut self, input: ::std::option::Option<f32>) -> Self {
        self.relevance_score = input;
        self
    }
    /// <p>The relevance score of the document.</p>
    pub fn get_relevance_score(&self) -> &::std::option::Option<f32> {
        &self.relevance_score
    }
    /// <p>Contains information about the document.</p>
    pub fn document(mut self, input: crate::types::RerankDocument) -> Self {
        self.document = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the document.</p>
    pub fn set_document(mut self, input: ::std::option::Option<crate::types::RerankDocument>) -> Self {
        self.document = input;
        self
    }
    /// <p>Contains information about the document.</p>
    pub fn get_document(&self) -> &::std::option::Option<crate::types::RerankDocument> {
        &self.document
    }
    /// Consumes the builder and constructs a [`RerankResult`](crate::types::RerankResult).
    /// This method will fail if any of the following fields are not set:
    /// - [`index`](crate::types::builders::RerankResultBuilder::index)
    /// - [`relevance_score`](crate::types::builders::RerankResultBuilder::relevance_score)
    pub fn build(self) -> ::std::result::Result<crate::types::RerankResult, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RerankResult {
            index: self.index.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "index",
                    "index was not specified but it is required when building RerankResult",
                )
            })?,
            relevance_score: self.relevance_score.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "relevance_score",
                    "relevance_score was not specified but it is required when building RerankResult",
                )
            })?,
            document: self.document,
        })
    }
}
impl ::std::fmt::Debug for RerankResultBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RerankResultBuilder");
        formatter.field("index", &self.index);
        formatter.field("relevance_score", &self.relevance_score);
        formatter.field("document", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
