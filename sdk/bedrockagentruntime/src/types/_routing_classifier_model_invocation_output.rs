// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Invocation output from a routing classifier model.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RoutingClassifierModelInvocationOutput {
    /// <p>The invocation's trace ID.</p>
    pub trace_id: ::std::option::Option<::std::string::String>,
    /// <p>The invocation's raw response.</p>
    pub raw_response: ::std::option::Option<crate::types::RawResponse>,
    /// <p>The invocation's metadata.</p>
    pub metadata: ::std::option::Option<crate::types::Metadata>,
}
impl RoutingClassifierModelInvocationOutput {
    /// <p>The invocation's trace ID.</p>
    pub fn trace_id(&self) -> ::std::option::Option<&str> {
        self.trace_id.as_deref()
    }
    /// <p>The invocation's raw response.</p>
    pub fn raw_response(&self) -> ::std::option::Option<&crate::types::RawResponse> {
        self.raw_response.as_ref()
    }
    /// <p>The invocation's metadata.</p>
    pub fn metadata(&self) -> ::std::option::Option<&crate::types::Metadata> {
        self.metadata.as_ref()
    }
}
impl ::std::fmt::Debug for RoutingClassifierModelInvocationOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RoutingClassifierModelInvocationOutput");
        formatter.field("trace_id", &"*** Sensitive Data Redacted ***");
        formatter.field("raw_response", &"*** Sensitive Data Redacted ***");
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RoutingClassifierModelInvocationOutput {
    /// Creates a new builder-style object to manufacture [`RoutingClassifierModelInvocationOutput`](crate::types::RoutingClassifierModelInvocationOutput).
    pub fn builder() -> crate::types::builders::RoutingClassifierModelInvocationOutputBuilder {
        crate::types::builders::RoutingClassifierModelInvocationOutputBuilder::default()
    }
}

/// A builder for [`RoutingClassifierModelInvocationOutput`](crate::types::RoutingClassifierModelInvocationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RoutingClassifierModelInvocationOutputBuilder {
    pub(crate) trace_id: ::std::option::Option<::std::string::String>,
    pub(crate) raw_response: ::std::option::Option<crate::types::RawResponse>,
    pub(crate) metadata: ::std::option::Option<crate::types::Metadata>,
}
impl RoutingClassifierModelInvocationOutputBuilder {
    /// <p>The invocation's trace ID.</p>
    pub fn trace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The invocation's trace ID.</p>
    pub fn set_trace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trace_id = input;
        self
    }
    /// <p>The invocation's trace ID.</p>
    pub fn get_trace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.trace_id
    }
    /// <p>The invocation's raw response.</p>
    pub fn raw_response(mut self, input: crate::types::RawResponse) -> Self {
        self.raw_response = ::std::option::Option::Some(input);
        self
    }
    /// <p>The invocation's raw response.</p>
    pub fn set_raw_response(mut self, input: ::std::option::Option<crate::types::RawResponse>) -> Self {
        self.raw_response = input;
        self
    }
    /// <p>The invocation's raw response.</p>
    pub fn get_raw_response(&self) -> &::std::option::Option<crate::types::RawResponse> {
        &self.raw_response
    }
    /// <p>The invocation's metadata.</p>
    pub fn metadata(mut self, input: crate::types::Metadata) -> Self {
        self.metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>The invocation's metadata.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<crate::types::Metadata>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>The invocation's metadata.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<crate::types::Metadata> {
        &self.metadata
    }
    /// Consumes the builder and constructs a [`RoutingClassifierModelInvocationOutput`](crate::types::RoutingClassifierModelInvocationOutput).
    pub fn build(self) -> crate::types::RoutingClassifierModelInvocationOutput {
        crate::types::RoutingClassifierModelInvocationOutput {
            trace_id: self.trace_id,
            raw_response: self.raw_response,
            metadata: self.metadata,
        }
    }
}
impl ::std::fmt::Debug for RoutingClassifierModelInvocationOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RoutingClassifierModelInvocationOutputBuilder");
        formatter.field("trace_id", &"*** Sensitive Data Redacted ***");
        formatter.field("raw_response", &"*** Sensitive Data Redacted ***");
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
