// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configurations for streaming.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StreamingConfigurations {
    /// <p>Specifies whether to enable streaming for the final response. This is set to <code>false</code> by default.</p>
    pub stream_final_response: bool,
    /// <p>The guardrail interval to apply as response is generated. By default, the guardrail interval is set to 50 characters. If a larger interval is specified, the response will be generated in larger chunks with fewer <code>ApplyGuardrail</code> calls. The following examples show the response generated for <i>Hello, I am an agent</i> input string.</p>
    /// <p><b>Example response in chunks: Interval set to 3 characters</b></p>
    /// <p><code>'Hel', 'lo, ','I am', ' an', ' Age', 'nt'</code></p>
    /// <p>Each chunk has at least 3 characters except for the last chunk</p>
    /// <p><b>Example response in chunks: Interval set to 20 or more characters</b></p>
    /// <p><code>Hello, I am an Agent</code></p>
    pub apply_guardrail_interval: ::std::option::Option<i32>,
}
impl StreamingConfigurations {
    /// <p>Specifies whether to enable streaming for the final response. This is set to <code>false</code> by default.</p>
    pub fn stream_final_response(&self) -> bool {
        self.stream_final_response
    }
    /// <p>The guardrail interval to apply as response is generated. By default, the guardrail interval is set to 50 characters. If a larger interval is specified, the response will be generated in larger chunks with fewer <code>ApplyGuardrail</code> calls. The following examples show the response generated for <i>Hello, I am an agent</i> input string.</p>
    /// <p><b>Example response in chunks: Interval set to 3 characters</b></p>
    /// <p><code>'Hel', 'lo, ','I am', ' an', ' Age', 'nt'</code></p>
    /// <p>Each chunk has at least 3 characters except for the last chunk</p>
    /// <p><b>Example response in chunks: Interval set to 20 or more characters</b></p>
    /// <p><code>Hello, I am an Agent</code></p>
    pub fn apply_guardrail_interval(&self) -> ::std::option::Option<i32> {
        self.apply_guardrail_interval
    }
}
impl StreamingConfigurations {
    /// Creates a new builder-style object to manufacture [`StreamingConfigurations`](crate::types::StreamingConfigurations).
    pub fn builder() -> crate::types::builders::StreamingConfigurationsBuilder {
        crate::types::builders::StreamingConfigurationsBuilder::default()
    }
}

/// A builder for [`StreamingConfigurations`](crate::types::StreamingConfigurations).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StreamingConfigurationsBuilder {
    pub(crate) stream_final_response: ::std::option::Option<bool>,
    pub(crate) apply_guardrail_interval: ::std::option::Option<i32>,
}
impl StreamingConfigurationsBuilder {
    /// <p>Specifies whether to enable streaming for the final response. This is set to <code>false</code> by default.</p>
    pub fn stream_final_response(mut self, input: bool) -> Self {
        self.stream_final_response = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to enable streaming for the final response. This is set to <code>false</code> by default.</p>
    pub fn set_stream_final_response(mut self, input: ::std::option::Option<bool>) -> Self {
        self.stream_final_response = input;
        self
    }
    /// <p>Specifies whether to enable streaming for the final response. This is set to <code>false</code> by default.</p>
    pub fn get_stream_final_response(&self) -> &::std::option::Option<bool> {
        &self.stream_final_response
    }
    /// <p>The guardrail interval to apply as response is generated. By default, the guardrail interval is set to 50 characters. If a larger interval is specified, the response will be generated in larger chunks with fewer <code>ApplyGuardrail</code> calls. The following examples show the response generated for <i>Hello, I am an agent</i> input string.</p>
    /// <p><b>Example response in chunks: Interval set to 3 characters</b></p>
    /// <p><code>'Hel', 'lo, ','I am', ' an', ' Age', 'nt'</code></p>
    /// <p>Each chunk has at least 3 characters except for the last chunk</p>
    /// <p><b>Example response in chunks: Interval set to 20 or more characters</b></p>
    /// <p><code>Hello, I am an Agent</code></p>
    pub fn apply_guardrail_interval(mut self, input: i32) -> Self {
        self.apply_guardrail_interval = ::std::option::Option::Some(input);
        self
    }
    /// <p>The guardrail interval to apply as response is generated. By default, the guardrail interval is set to 50 characters. If a larger interval is specified, the response will be generated in larger chunks with fewer <code>ApplyGuardrail</code> calls. The following examples show the response generated for <i>Hello, I am an agent</i> input string.</p>
    /// <p><b>Example response in chunks: Interval set to 3 characters</b></p>
    /// <p><code>'Hel', 'lo, ','I am', ' an', ' Age', 'nt'</code></p>
    /// <p>Each chunk has at least 3 characters except for the last chunk</p>
    /// <p><b>Example response in chunks: Interval set to 20 or more characters</b></p>
    /// <p><code>Hello, I am an Agent</code></p>
    pub fn set_apply_guardrail_interval(mut self, input: ::std::option::Option<i32>) -> Self {
        self.apply_guardrail_interval = input;
        self
    }
    /// <p>The guardrail interval to apply as response is generated. By default, the guardrail interval is set to 50 characters. If a larger interval is specified, the response will be generated in larger chunks with fewer <code>ApplyGuardrail</code> calls. The following examples show the response generated for <i>Hello, I am an agent</i> input string.</p>
    /// <p><b>Example response in chunks: Interval set to 3 characters</b></p>
    /// <p><code>'Hel', 'lo, ','I am', ' an', ' Age', 'nt'</code></p>
    /// <p>Each chunk has at least 3 characters except for the last chunk</p>
    /// <p><b>Example response in chunks: Interval set to 20 or more characters</b></p>
    /// <p><code>Hello, I am an Agent</code></p>
    pub fn get_apply_guardrail_interval(&self) -> &::std::option::Option<i32> {
        &self.apply_guardrail_interval
    }
    /// Consumes the builder and constructs a [`StreamingConfigurations`](crate::types::StreamingConfigurations).
    pub fn build(self) -> crate::types::StreamingConfigurations {
        crate::types::StreamingConfigurations {
            stream_final_response: self.stream_final_response.unwrap_or_default(),
            apply_guardrail_interval: self.apply_guardrail_interval,
        }
    }
}
