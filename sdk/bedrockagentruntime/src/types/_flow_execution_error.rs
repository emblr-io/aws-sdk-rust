// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an error that occurred during an flow execution.</p><note>
/// <p>Flow executions is in preview release for Amazon Bedrock and is subject to change.</p>
/// </note>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FlowExecutionError {
    /// <p>The name of the node in the flow where the error occurred (if applicable).</p>
    pub node_name: ::std::option::Option<::std::string::String>,
    /// <p>The error code for the type of error that occurred.</p>
    pub error: ::std::option::Option<crate::types::FlowExecutionErrorType>,
    /// <p>A descriptive message that provides details about the error.</p>
    pub message: ::std::option::Option<::std::string::String>,
}
impl FlowExecutionError {
    /// <p>The name of the node in the flow where the error occurred (if applicable).</p>
    pub fn node_name(&self) -> ::std::option::Option<&str> {
        self.node_name.as_deref()
    }
    /// <p>The error code for the type of error that occurred.</p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::FlowExecutionErrorType> {
        self.error.as_ref()
    }
    /// <p>A descriptive message that provides details about the error.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl FlowExecutionError {
    /// Creates a new builder-style object to manufacture [`FlowExecutionError`](crate::types::FlowExecutionError).
    pub fn builder() -> crate::types::builders::FlowExecutionErrorBuilder {
        crate::types::builders::FlowExecutionErrorBuilder::default()
    }
}

/// A builder for [`FlowExecutionError`](crate::types::FlowExecutionError).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FlowExecutionErrorBuilder {
    pub(crate) node_name: ::std::option::Option<::std::string::String>,
    pub(crate) error: ::std::option::Option<crate::types::FlowExecutionErrorType>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl FlowExecutionErrorBuilder {
    /// <p>The name of the node in the flow where the error occurred (if applicable).</p>
    pub fn node_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the node in the flow where the error occurred (if applicable).</p>
    pub fn set_node_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_name = input;
        self
    }
    /// <p>The name of the node in the flow where the error occurred (if applicable).</p>
    pub fn get_node_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_name
    }
    /// <p>The error code for the type of error that occurred.</p>
    pub fn error(mut self, input: crate::types::FlowExecutionErrorType) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>The error code for the type of error that occurred.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::FlowExecutionErrorType>) -> Self {
        self.error = input;
        self
    }
    /// <p>The error code for the type of error that occurred.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::FlowExecutionErrorType> {
        &self.error
    }
    /// <p>A descriptive message that provides details about the error.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A descriptive message that provides details about the error.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>A descriptive message that provides details about the error.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Consumes the builder and constructs a [`FlowExecutionError`](crate::types::FlowExecutionError).
    pub fn build(self) -> crate::types::FlowExecutionError {
        crate::types::FlowExecutionError {
            node_name: self.node_name,
            error: self.error,
            message: self.message,
        }
    }
}
