// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the function that the agent predicts should be called.</p>
/// <p>This data type is used in the following API operations:</p>
/// <ul>
/// <li>
/// <p>In the <code>returnControl</code> field of the <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html#API_agent-runtime_InvokeAgent_ResponseSyntax">InvokeAgent response</a></p></li>
/// </ul>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct FunctionInvocationInput {
    /// <p>The action group that the function belongs to.</p>
    pub action_group: ::std::string::String,
    /// <p>A list of parameters of the function.</p>
    pub parameters: ::std::option::Option<::std::vec::Vec<crate::types::FunctionParameter>>,
    /// <p>The name of the function.</p>
    pub function: ::std::option::Option<::std::string::String>,
    /// <p>Contains information about the function to invoke,</p>
    pub action_invocation_type: ::std::option::Option<crate::types::ActionInvocationType>,
    /// <p>The agent's ID.</p>
    pub agent_id: ::std::option::Option<::std::string::String>,
    /// <p>The collaborator's name.</p>
    pub collaborator_name: ::std::option::Option<::std::string::String>,
}
impl FunctionInvocationInput {
    /// <p>The action group that the function belongs to.</p>
    pub fn action_group(&self) -> &str {
        use std::ops::Deref;
        self.action_group.deref()
    }
    /// <p>A list of parameters of the function.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.parameters.is_none()`.
    pub fn parameters(&self) -> &[crate::types::FunctionParameter] {
        self.parameters.as_deref().unwrap_or_default()
    }
    /// <p>The name of the function.</p>
    pub fn function(&self) -> ::std::option::Option<&str> {
        self.function.as_deref()
    }
    /// <p>Contains information about the function to invoke,</p>
    pub fn action_invocation_type(&self) -> ::std::option::Option<&crate::types::ActionInvocationType> {
        self.action_invocation_type.as_ref()
    }
    /// <p>The agent's ID.</p>
    pub fn agent_id(&self) -> ::std::option::Option<&str> {
        self.agent_id.as_deref()
    }
    /// <p>The collaborator's name.</p>
    pub fn collaborator_name(&self) -> ::std::option::Option<&str> {
        self.collaborator_name.as_deref()
    }
}
impl ::std::fmt::Debug for FunctionInvocationInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FunctionInvocationInput");
        formatter.field("action_group", &self.action_group);
        formatter.field("parameters", &self.parameters);
        formatter.field("function", &self.function);
        formatter.field("action_invocation_type", &self.action_invocation_type);
        formatter.field("agent_id", &self.agent_id);
        formatter.field("collaborator_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl FunctionInvocationInput {
    /// Creates a new builder-style object to manufacture [`FunctionInvocationInput`](crate::types::FunctionInvocationInput).
    pub fn builder() -> crate::types::builders::FunctionInvocationInputBuilder {
        crate::types::builders::FunctionInvocationInputBuilder::default()
    }
}

/// A builder for [`FunctionInvocationInput`](crate::types::FunctionInvocationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct FunctionInvocationInputBuilder {
    pub(crate) action_group: ::std::option::Option<::std::string::String>,
    pub(crate) parameters: ::std::option::Option<::std::vec::Vec<crate::types::FunctionParameter>>,
    pub(crate) function: ::std::option::Option<::std::string::String>,
    pub(crate) action_invocation_type: ::std::option::Option<crate::types::ActionInvocationType>,
    pub(crate) agent_id: ::std::option::Option<::std::string::String>,
    pub(crate) collaborator_name: ::std::option::Option<::std::string::String>,
}
impl FunctionInvocationInputBuilder {
    /// <p>The action group that the function belongs to.</p>
    /// This field is required.
    pub fn action_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The action group that the function belongs to.</p>
    pub fn set_action_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_group = input;
        self
    }
    /// <p>The action group that the function belongs to.</p>
    pub fn get_action_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_group
    }
    /// Appends an item to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>A list of parameters of the function.</p>
    pub fn parameters(mut self, input: crate::types::FunctionParameter) -> Self {
        let mut v = self.parameters.unwrap_or_default();
        v.push(input);
        self.parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of parameters of the function.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FunctionParameter>>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>A list of parameters of the function.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FunctionParameter>> {
        &self.parameters
    }
    /// <p>The name of the function.</p>
    pub fn function(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.function = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the function.</p>
    pub fn set_function(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.function = input;
        self
    }
    /// <p>The name of the function.</p>
    pub fn get_function(&self) -> &::std::option::Option<::std::string::String> {
        &self.function
    }
    /// <p>Contains information about the function to invoke,</p>
    pub fn action_invocation_type(mut self, input: crate::types::ActionInvocationType) -> Self {
        self.action_invocation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the function to invoke,</p>
    pub fn set_action_invocation_type(mut self, input: ::std::option::Option<crate::types::ActionInvocationType>) -> Self {
        self.action_invocation_type = input;
        self
    }
    /// <p>Contains information about the function to invoke,</p>
    pub fn get_action_invocation_type(&self) -> &::std::option::Option<crate::types::ActionInvocationType> {
        &self.action_invocation_type
    }
    /// <p>The agent's ID.</p>
    pub fn agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The agent's ID.</p>
    pub fn set_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_id = input;
        self
    }
    /// <p>The agent's ID.</p>
    pub fn get_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_id
    }
    /// <p>The collaborator's name.</p>
    pub fn collaborator_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaborator_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The collaborator's name.</p>
    pub fn set_collaborator_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaborator_name = input;
        self
    }
    /// <p>The collaborator's name.</p>
    pub fn get_collaborator_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaborator_name
    }
    /// Consumes the builder and constructs a [`FunctionInvocationInput`](crate::types::FunctionInvocationInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`action_group`](crate::types::builders::FunctionInvocationInputBuilder::action_group)
    pub fn build(self) -> ::std::result::Result<crate::types::FunctionInvocationInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FunctionInvocationInput {
            action_group: self.action_group.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action_group",
                    "action_group was not specified but it is required when building FunctionInvocationInput",
                )
            })?,
            parameters: self.parameters,
            function: self.function,
            action_invocation_type: self.action_invocation_type,
            agent_id: self.agent_id,
            collaborator_name: self.collaborator_name,
        })
    }
}
impl ::std::fmt::Debug for FunctionInvocationInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FunctionInvocationInputBuilder");
        formatter.field("action_group", &self.action_group);
        formatter.field("parameters", &self.parameters);
        formatter.field("function", &self.function);
        formatter.field("action_invocation_type", &self.action_invocation_type);
        formatter.field("agent_id", &self.agent_id);
        formatter.field("collaborator_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
