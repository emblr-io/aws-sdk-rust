// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The trace behavior for the custom orchestration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CustomOrchestrationTrace {
    /// <p>The unique identifier of the trace.</p>
    pub trace_id: ::std::option::Option<::std::string::String>,
    /// <p>The event details used with the custom orchestration.</p>
    pub event: ::std::option::Option<crate::types::CustomOrchestrationTraceEvent>,
}
impl CustomOrchestrationTrace {
    /// <p>The unique identifier of the trace.</p>
    pub fn trace_id(&self) -> ::std::option::Option<&str> {
        self.trace_id.as_deref()
    }
    /// <p>The event details used with the custom orchestration.</p>
    pub fn event(&self) -> ::std::option::Option<&crate::types::CustomOrchestrationTraceEvent> {
        self.event.as_ref()
    }
}
impl ::std::fmt::Debug for CustomOrchestrationTrace {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CustomOrchestrationTrace");
        formatter.field("trace_id", &"*** Sensitive Data Redacted ***");
        formatter.field("event", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CustomOrchestrationTrace {
    /// Creates a new builder-style object to manufacture [`CustomOrchestrationTrace`](crate::types::CustomOrchestrationTrace).
    pub fn builder() -> crate::types::builders::CustomOrchestrationTraceBuilder {
        crate::types::builders::CustomOrchestrationTraceBuilder::default()
    }
}

/// A builder for [`CustomOrchestrationTrace`](crate::types::CustomOrchestrationTrace).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CustomOrchestrationTraceBuilder {
    pub(crate) trace_id: ::std::option::Option<::std::string::String>,
    pub(crate) event: ::std::option::Option<crate::types::CustomOrchestrationTraceEvent>,
}
impl CustomOrchestrationTraceBuilder {
    /// <p>The unique identifier of the trace.</p>
    pub fn trace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the trace.</p>
    pub fn set_trace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trace_id = input;
        self
    }
    /// <p>The unique identifier of the trace.</p>
    pub fn get_trace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.trace_id
    }
    /// <p>The event details used with the custom orchestration.</p>
    pub fn event(mut self, input: crate::types::CustomOrchestrationTraceEvent) -> Self {
        self.event = ::std::option::Option::Some(input);
        self
    }
    /// <p>The event details used with the custom orchestration.</p>
    pub fn set_event(mut self, input: ::std::option::Option<crate::types::CustomOrchestrationTraceEvent>) -> Self {
        self.event = input;
        self
    }
    /// <p>The event details used with the custom orchestration.</p>
    pub fn get_event(&self) -> &::std::option::Option<crate::types::CustomOrchestrationTraceEvent> {
        &self.event
    }
    /// Consumes the builder and constructs a [`CustomOrchestrationTrace`](crate::types::CustomOrchestrationTrace).
    pub fn build(self) -> crate::types::CustomOrchestrationTrace {
        crate::types::CustomOrchestrationTrace {
            trace_id: self.trace_id,
            event: self.event,
        }
    }
}
impl ::std::fmt::Debug for CustomOrchestrationTraceBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CustomOrchestrationTraceBuilder");
        formatter.field("trace_id", &"*** Sensitive Data Redacted ***");
        formatter.field("event", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
