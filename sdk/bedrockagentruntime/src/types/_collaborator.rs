// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>List of inline collaborators.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Collaborator {
    /// <p>The Amazon Resource Name (ARN) of the AWS KMS key that encrypts the inline collaborator.</p>
    pub customer_encryption_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The foundation model used by the inline collaborator agent.</p>
    pub foundation_model: ::std::string::String,
    /// <p>Instruction that tell the inline collaborator agent what it should do and how it should interact with users.</p>
    pub instruction: ::std::string::String,
    /// <p>The number of seconds for which the Amazon Bedrock keeps information about the user's conversation with the inline collaborator agent.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Bedrock deletes any data provided before the timeout.</p>
    pub idle_session_ttl_in_seconds: ::std::option::Option<i32>,
    /// <p>List of action groups with each action group defining tasks the inline collaborator agent needs to carry out.</p>
    pub action_groups: ::std::option::Option<::std::vec::Vec<crate::types::AgentActionGroup>>,
    /// <p>Knowledge base associated with the inline collaborator agent.</p>
    pub knowledge_bases: ::std::option::Option<::std::vec::Vec<crate::types::KnowledgeBase>>,
    /// <p>Details of the guardwrail associated with the inline collaborator.</p>
    pub guardrail_configuration: ::std::option::Option<crate::types::GuardrailConfigurationWithArn>,
    /// <p>Contains configurations to override prompt templates in different parts of an inline collaborator sequence. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html">Advanced prompts</a>.</p>
    pub prompt_override_configuration: ::std::option::Option<crate::types::PromptOverrideConfiguration>,
    /// <p>Defines how the inline supervisor agent handles information across multiple collaborator agents to coordinate a final response.</p>
    pub agent_collaboration: ::std::option::Option<crate::types::AgentCollaboration>,
    /// <p>Settings of the collaborator agent.</p>
    pub collaborator_configurations: ::std::option::Option<::std::vec::Vec<crate::types::CollaboratorConfiguration>>,
    /// <p>Name of the inline collaborator agent which must be the same name as specified for <code>collaboratorName</code>.</p>
    pub agent_name: ::std::option::Option<::std::string::String>,
}
impl Collaborator {
    /// <p>The Amazon Resource Name (ARN) of the AWS KMS key that encrypts the inline collaborator.</p>
    pub fn customer_encryption_key_arn(&self) -> ::std::option::Option<&str> {
        self.customer_encryption_key_arn.as_deref()
    }
    /// <p>The foundation model used by the inline collaborator agent.</p>
    pub fn foundation_model(&self) -> &str {
        use std::ops::Deref;
        self.foundation_model.deref()
    }
    /// <p>Instruction that tell the inline collaborator agent what it should do and how it should interact with users.</p>
    pub fn instruction(&self) -> &str {
        use std::ops::Deref;
        self.instruction.deref()
    }
    /// <p>The number of seconds for which the Amazon Bedrock keeps information about the user's conversation with the inline collaborator agent.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Bedrock deletes any data provided before the timeout.</p>
    pub fn idle_session_ttl_in_seconds(&self) -> ::std::option::Option<i32> {
        self.idle_session_ttl_in_seconds
    }
    /// <p>List of action groups with each action group defining tasks the inline collaborator agent needs to carry out.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.action_groups.is_none()`.
    pub fn action_groups(&self) -> &[crate::types::AgentActionGroup] {
        self.action_groups.as_deref().unwrap_or_default()
    }
    /// <p>Knowledge base associated with the inline collaborator agent.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.knowledge_bases.is_none()`.
    pub fn knowledge_bases(&self) -> &[crate::types::KnowledgeBase] {
        self.knowledge_bases.as_deref().unwrap_or_default()
    }
    /// <p>Details of the guardwrail associated with the inline collaborator.</p>
    pub fn guardrail_configuration(&self) -> ::std::option::Option<&crate::types::GuardrailConfigurationWithArn> {
        self.guardrail_configuration.as_ref()
    }
    /// <p>Contains configurations to override prompt templates in different parts of an inline collaborator sequence. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html">Advanced prompts</a>.</p>
    pub fn prompt_override_configuration(&self) -> ::std::option::Option<&crate::types::PromptOverrideConfiguration> {
        self.prompt_override_configuration.as_ref()
    }
    /// <p>Defines how the inline supervisor agent handles information across multiple collaborator agents to coordinate a final response.</p>
    pub fn agent_collaboration(&self) -> ::std::option::Option<&crate::types::AgentCollaboration> {
        self.agent_collaboration.as_ref()
    }
    /// <p>Settings of the collaborator agent.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.collaborator_configurations.is_none()`.
    pub fn collaborator_configurations(&self) -> &[crate::types::CollaboratorConfiguration] {
        self.collaborator_configurations.as_deref().unwrap_or_default()
    }
    /// <p>Name of the inline collaborator agent which must be the same name as specified for <code>collaboratorName</code>.</p>
    pub fn agent_name(&self) -> ::std::option::Option<&str> {
        self.agent_name.as_deref()
    }
}
impl ::std::fmt::Debug for Collaborator {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Collaborator");
        formatter.field("customer_encryption_key_arn", &self.customer_encryption_key_arn);
        formatter.field("foundation_model", &self.foundation_model);
        formatter.field("instruction", &"*** Sensitive Data Redacted ***");
        formatter.field("idle_session_ttl_in_seconds", &self.idle_session_ttl_in_seconds);
        formatter.field("action_groups", &self.action_groups);
        formatter.field("knowledge_bases", &self.knowledge_bases);
        formatter.field("guardrail_configuration", &self.guardrail_configuration);
        formatter.field("prompt_override_configuration", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_collaboration", &self.agent_collaboration);
        formatter.field("collaborator_configurations", &self.collaborator_configurations);
        formatter.field("agent_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl Collaborator {
    /// Creates a new builder-style object to manufacture [`Collaborator`](crate::types::Collaborator).
    pub fn builder() -> crate::types::builders::CollaboratorBuilder {
        crate::types::builders::CollaboratorBuilder::default()
    }
}

/// A builder for [`Collaborator`](crate::types::Collaborator).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CollaboratorBuilder {
    pub(crate) customer_encryption_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) foundation_model: ::std::option::Option<::std::string::String>,
    pub(crate) instruction: ::std::option::Option<::std::string::String>,
    pub(crate) idle_session_ttl_in_seconds: ::std::option::Option<i32>,
    pub(crate) action_groups: ::std::option::Option<::std::vec::Vec<crate::types::AgentActionGroup>>,
    pub(crate) knowledge_bases: ::std::option::Option<::std::vec::Vec<crate::types::KnowledgeBase>>,
    pub(crate) guardrail_configuration: ::std::option::Option<crate::types::GuardrailConfigurationWithArn>,
    pub(crate) prompt_override_configuration: ::std::option::Option<crate::types::PromptOverrideConfiguration>,
    pub(crate) agent_collaboration: ::std::option::Option<crate::types::AgentCollaboration>,
    pub(crate) collaborator_configurations: ::std::option::Option<::std::vec::Vec<crate::types::CollaboratorConfiguration>>,
    pub(crate) agent_name: ::std::option::Option<::std::string::String>,
}
impl CollaboratorBuilder {
    /// <p>The Amazon Resource Name (ARN) of the AWS KMS key that encrypts the inline collaborator.</p>
    pub fn customer_encryption_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_encryption_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AWS KMS key that encrypts the inline collaborator.</p>
    pub fn set_customer_encryption_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_encryption_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AWS KMS key that encrypts the inline collaborator.</p>
    pub fn get_customer_encryption_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_encryption_key_arn
    }
    /// <p>The foundation model used by the inline collaborator agent.</p>
    /// This field is required.
    pub fn foundation_model(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.foundation_model = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The foundation model used by the inline collaborator agent.</p>
    pub fn set_foundation_model(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.foundation_model = input;
        self
    }
    /// <p>The foundation model used by the inline collaborator agent.</p>
    pub fn get_foundation_model(&self) -> &::std::option::Option<::std::string::String> {
        &self.foundation_model
    }
    /// <p>Instruction that tell the inline collaborator agent what it should do and how it should interact with users.</p>
    /// This field is required.
    pub fn instruction(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instruction = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Instruction that tell the inline collaborator agent what it should do and how it should interact with users.</p>
    pub fn set_instruction(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instruction = input;
        self
    }
    /// <p>Instruction that tell the inline collaborator agent what it should do and how it should interact with users.</p>
    pub fn get_instruction(&self) -> &::std::option::Option<::std::string::String> {
        &self.instruction
    }
    /// <p>The number of seconds for which the Amazon Bedrock keeps information about the user's conversation with the inline collaborator agent.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Bedrock deletes any data provided before the timeout.</p>
    pub fn idle_session_ttl_in_seconds(mut self, input: i32) -> Self {
        self.idle_session_ttl_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of seconds for which the Amazon Bedrock keeps information about the user's conversation with the inline collaborator agent.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Bedrock deletes any data provided before the timeout.</p>
    pub fn set_idle_session_ttl_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.idle_session_ttl_in_seconds = input;
        self
    }
    /// <p>The number of seconds for which the Amazon Bedrock keeps information about the user's conversation with the inline collaborator agent.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Bedrock deletes any data provided before the timeout.</p>
    pub fn get_idle_session_ttl_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.idle_session_ttl_in_seconds
    }
    /// Appends an item to `action_groups`.
    ///
    /// To override the contents of this collection use [`set_action_groups`](Self::set_action_groups).
    ///
    /// <p>List of action groups with each action group defining tasks the inline collaborator agent needs to carry out.</p>
    pub fn action_groups(mut self, input: crate::types::AgentActionGroup) -> Self {
        let mut v = self.action_groups.unwrap_or_default();
        v.push(input);
        self.action_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of action groups with each action group defining tasks the inline collaborator agent needs to carry out.</p>
    pub fn set_action_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AgentActionGroup>>) -> Self {
        self.action_groups = input;
        self
    }
    /// <p>List of action groups with each action group defining tasks the inline collaborator agent needs to carry out.</p>
    pub fn get_action_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AgentActionGroup>> {
        &self.action_groups
    }
    /// Appends an item to `knowledge_bases`.
    ///
    /// To override the contents of this collection use [`set_knowledge_bases`](Self::set_knowledge_bases).
    ///
    /// <p>Knowledge base associated with the inline collaborator agent.</p>
    pub fn knowledge_bases(mut self, input: crate::types::KnowledgeBase) -> Self {
        let mut v = self.knowledge_bases.unwrap_or_default();
        v.push(input);
        self.knowledge_bases = ::std::option::Option::Some(v);
        self
    }
    /// <p>Knowledge base associated with the inline collaborator agent.</p>
    pub fn set_knowledge_bases(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::KnowledgeBase>>) -> Self {
        self.knowledge_bases = input;
        self
    }
    /// <p>Knowledge base associated with the inline collaborator agent.</p>
    pub fn get_knowledge_bases(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::KnowledgeBase>> {
        &self.knowledge_bases
    }
    /// <p>Details of the guardwrail associated with the inline collaborator.</p>
    pub fn guardrail_configuration(mut self, input: crate::types::GuardrailConfigurationWithArn) -> Self {
        self.guardrail_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details of the guardwrail associated with the inline collaborator.</p>
    pub fn set_guardrail_configuration(mut self, input: ::std::option::Option<crate::types::GuardrailConfigurationWithArn>) -> Self {
        self.guardrail_configuration = input;
        self
    }
    /// <p>Details of the guardwrail associated with the inline collaborator.</p>
    pub fn get_guardrail_configuration(&self) -> &::std::option::Option<crate::types::GuardrailConfigurationWithArn> {
        &self.guardrail_configuration
    }
    /// <p>Contains configurations to override prompt templates in different parts of an inline collaborator sequence. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html">Advanced prompts</a>.</p>
    pub fn prompt_override_configuration(mut self, input: crate::types::PromptOverrideConfiguration) -> Self {
        self.prompt_override_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains configurations to override prompt templates in different parts of an inline collaborator sequence. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html">Advanced prompts</a>.</p>
    pub fn set_prompt_override_configuration(mut self, input: ::std::option::Option<crate::types::PromptOverrideConfiguration>) -> Self {
        self.prompt_override_configuration = input;
        self
    }
    /// <p>Contains configurations to override prompt templates in different parts of an inline collaborator sequence. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html">Advanced prompts</a>.</p>
    pub fn get_prompt_override_configuration(&self) -> &::std::option::Option<crate::types::PromptOverrideConfiguration> {
        &self.prompt_override_configuration
    }
    /// <p>Defines how the inline supervisor agent handles information across multiple collaborator agents to coordinate a final response.</p>
    pub fn agent_collaboration(mut self, input: crate::types::AgentCollaboration) -> Self {
        self.agent_collaboration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines how the inline supervisor agent handles information across multiple collaborator agents to coordinate a final response.</p>
    pub fn set_agent_collaboration(mut self, input: ::std::option::Option<crate::types::AgentCollaboration>) -> Self {
        self.agent_collaboration = input;
        self
    }
    /// <p>Defines how the inline supervisor agent handles information across multiple collaborator agents to coordinate a final response.</p>
    pub fn get_agent_collaboration(&self) -> &::std::option::Option<crate::types::AgentCollaboration> {
        &self.agent_collaboration
    }
    /// Appends an item to `collaborator_configurations`.
    ///
    /// To override the contents of this collection use [`set_collaborator_configurations`](Self::set_collaborator_configurations).
    ///
    /// <p>Settings of the collaborator agent.</p>
    pub fn collaborator_configurations(mut self, input: crate::types::CollaboratorConfiguration) -> Self {
        let mut v = self.collaborator_configurations.unwrap_or_default();
        v.push(input);
        self.collaborator_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Settings of the collaborator agent.</p>
    pub fn set_collaborator_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CollaboratorConfiguration>>) -> Self {
        self.collaborator_configurations = input;
        self
    }
    /// <p>Settings of the collaborator agent.</p>
    pub fn get_collaborator_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CollaboratorConfiguration>> {
        &self.collaborator_configurations
    }
    /// <p>Name of the inline collaborator agent which must be the same name as specified for <code>collaboratorName</code>.</p>
    pub fn agent_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the inline collaborator agent which must be the same name as specified for <code>collaboratorName</code>.</p>
    pub fn set_agent_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_name = input;
        self
    }
    /// <p>Name of the inline collaborator agent which must be the same name as specified for <code>collaboratorName</code>.</p>
    pub fn get_agent_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_name
    }
    /// Consumes the builder and constructs a [`Collaborator`](crate::types::Collaborator).
    /// This method will fail if any of the following fields are not set:
    /// - [`foundation_model`](crate::types::builders::CollaboratorBuilder::foundation_model)
    /// - [`instruction`](crate::types::builders::CollaboratorBuilder::instruction)
    pub fn build(self) -> ::std::result::Result<crate::types::Collaborator, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Collaborator {
            customer_encryption_key_arn: self.customer_encryption_key_arn,
            foundation_model: self.foundation_model.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "foundation_model",
                    "foundation_model was not specified but it is required when building Collaborator",
                )
            })?,
            instruction: self.instruction.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "instruction",
                    "instruction was not specified but it is required when building Collaborator",
                )
            })?,
            idle_session_ttl_in_seconds: self.idle_session_ttl_in_seconds,
            action_groups: self.action_groups,
            knowledge_bases: self.knowledge_bases,
            guardrail_configuration: self.guardrail_configuration,
            prompt_override_configuration: self.prompt_override_configuration,
            agent_collaboration: self.agent_collaboration,
            collaborator_configurations: self.collaborator_configurations,
            agent_name: self.agent_name,
        })
    }
}
impl ::std::fmt::Debug for CollaboratorBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CollaboratorBuilder");
        formatter.field("customer_encryption_key_arn", &self.customer_encryption_key_arn);
        formatter.field("foundation_model", &self.foundation_model);
        formatter.field("instruction", &"*** Sensitive Data Redacted ***");
        formatter.field("idle_session_ttl_in_seconds", &self.idle_session_ttl_in_seconds);
        formatter.field("action_groups", &self.action_groups);
        formatter.field("knowledge_bases", &self.knowledge_bases);
        formatter.field("guardrail_configuration", &self.guardrail_configuration);
        formatter.field("prompt_override_configuration", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_collaboration", &self.agent_collaboration);
        formatter.field("collaborator_configurations", &self.collaborator_configurations);
        formatter.field("agent_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
