// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a query generated for a natural language query.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GeneratedQuery {
    /// <p>The type of transformed query.</p>
    pub r#type: ::std::option::Option<crate::types::GeneratedQueryType>,
    /// <p>An SQL query that corresponds to the natural language query.</p>
    pub sql: ::std::option::Option<::std::string::String>,
}
impl GeneratedQuery {
    /// <p>The type of transformed query.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::GeneratedQueryType> {
        self.r#type.as_ref()
    }
    /// <p>An SQL query that corresponds to the natural language query.</p>
    pub fn sql(&self) -> ::std::option::Option<&str> {
        self.sql.as_deref()
    }
}
impl ::std::fmt::Debug for GeneratedQuery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GeneratedQuery");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("sql", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GeneratedQuery {
    /// Creates a new builder-style object to manufacture [`GeneratedQuery`](crate::types::GeneratedQuery).
    pub fn builder() -> crate::types::builders::GeneratedQueryBuilder {
        crate::types::builders::GeneratedQueryBuilder::default()
    }
}

/// A builder for [`GeneratedQuery`](crate::types::GeneratedQuery).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GeneratedQueryBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::GeneratedQueryType>,
    pub(crate) sql: ::std::option::Option<::std::string::String>,
}
impl GeneratedQueryBuilder {
    /// <p>The type of transformed query.</p>
    pub fn r#type(mut self, input: crate::types::GeneratedQueryType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of transformed query.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::GeneratedQueryType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of transformed query.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::GeneratedQueryType> {
        &self.r#type
    }
    /// <p>An SQL query that corresponds to the natural language query.</p>
    pub fn sql(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sql = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An SQL query that corresponds to the natural language query.</p>
    pub fn set_sql(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sql = input;
        self
    }
    /// <p>An SQL query that corresponds to the natural language query.</p>
    pub fn get_sql(&self) -> &::std::option::Option<::std::string::String> {
        &self.sql
    }
    /// Consumes the builder and constructs a [`GeneratedQuery`](crate::types::GeneratedQuery).
    pub fn build(self) -> crate::types::GeneratedQuery {
        crate::types::GeneratedQuery {
            r#type: self.r#type,
            sql: self.sql,
        }
    }
}
impl ::std::fmt::Debug for GeneratedQueryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GeneratedQueryBuilder");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("sql", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
