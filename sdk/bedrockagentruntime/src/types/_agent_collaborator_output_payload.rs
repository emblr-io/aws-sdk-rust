// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Output from an agent collaborator. The output can be text or an action invocation result.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AgentCollaboratorOutputPayload {
    /// <p>The type of output.</p>
    pub r#type: ::std::option::Option<crate::types::PayloadType>,
    /// <p>Text output.</p>
    pub text: ::std::option::Option<::std::string::String>,
    /// <p>An action invocation result.</p>
    pub return_control_payload: ::std::option::Option<crate::types::ReturnControlPayload>,
}
impl AgentCollaboratorOutputPayload {
    /// <p>The type of output.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::PayloadType> {
        self.r#type.as_ref()
    }
    /// <p>Text output.</p>
    pub fn text(&self) -> ::std::option::Option<&str> {
        self.text.as_deref()
    }
    /// <p>An action invocation result.</p>
    pub fn return_control_payload(&self) -> ::std::option::Option<&crate::types::ReturnControlPayload> {
        self.return_control_payload.as_ref()
    }
}
impl ::std::fmt::Debug for AgentCollaboratorOutputPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AgentCollaboratorOutputPayload");
        formatter.field("r#type", &self.r#type);
        formatter.field("text", &"*** Sensitive Data Redacted ***");
        formatter.field("return_control_payload", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AgentCollaboratorOutputPayload {
    /// Creates a new builder-style object to manufacture [`AgentCollaboratorOutputPayload`](crate::types::AgentCollaboratorOutputPayload).
    pub fn builder() -> crate::types::builders::AgentCollaboratorOutputPayloadBuilder {
        crate::types::builders::AgentCollaboratorOutputPayloadBuilder::default()
    }
}

/// A builder for [`AgentCollaboratorOutputPayload`](crate::types::AgentCollaboratorOutputPayload).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AgentCollaboratorOutputPayloadBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::PayloadType>,
    pub(crate) text: ::std::option::Option<::std::string::String>,
    pub(crate) return_control_payload: ::std::option::Option<crate::types::ReturnControlPayload>,
}
impl AgentCollaboratorOutputPayloadBuilder {
    /// <p>The type of output.</p>
    pub fn r#type(mut self, input: crate::types::PayloadType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of output.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::PayloadType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of output.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::PayloadType> {
        &self.r#type
    }
    /// <p>Text output.</p>
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Text output.</p>
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>Text output.</p>
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }
    /// <p>An action invocation result.</p>
    pub fn return_control_payload(mut self, input: crate::types::ReturnControlPayload) -> Self {
        self.return_control_payload = ::std::option::Option::Some(input);
        self
    }
    /// <p>An action invocation result.</p>
    pub fn set_return_control_payload(mut self, input: ::std::option::Option<crate::types::ReturnControlPayload>) -> Self {
        self.return_control_payload = input;
        self
    }
    /// <p>An action invocation result.</p>
    pub fn get_return_control_payload(&self) -> &::std::option::Option<crate::types::ReturnControlPayload> {
        &self.return_control_payload
    }
    /// Consumes the builder and constructs a [`AgentCollaboratorOutputPayload`](crate::types::AgentCollaboratorOutputPayload).
    pub fn build(self) -> crate::types::AgentCollaboratorOutputPayload {
        crate::types::AgentCollaboratorOutputPayload {
            r#type: self.r#type,
            text: self.text,
            return_control_payload: self.return_control_payload,
        }
    }
}
impl ::std::fmt::Debug for AgentCollaboratorOutputPayloadBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AgentCollaboratorOutputPayloadBuilder");
        formatter.field("r#type", &self.r#type);
        formatter.field("text", &"*** Sensitive Data Redacted ***");
        formatter.field("return_control_payload", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
