// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents an output field produced by a flow during a flow execution.</p><note>
/// <p>Flow executions is in preview release for Amazon Bedrock and is subject to change.</p>
/// </note>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct FlowOutputField {
    /// <p>The name of the output field as defined in the flow's output schema.</p>
    pub name: ::std::string::String,
    /// <p>The content of the output field, which can contain text or structured data.</p>
    pub content: ::std::option::Option<crate::types::FlowExecutionContent>,
}
impl FlowOutputField {
    /// <p>The name of the output field as defined in the flow's output schema.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The content of the output field, which can contain text or structured data.</p>
    pub fn content(&self) -> ::std::option::Option<&crate::types::FlowExecutionContent> {
        self.content.as_ref()
    }
}
impl ::std::fmt::Debug for FlowOutputField {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FlowOutputField");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl FlowOutputField {
    /// Creates a new builder-style object to manufacture [`FlowOutputField`](crate::types::FlowOutputField).
    pub fn builder() -> crate::types::builders::FlowOutputFieldBuilder {
        crate::types::builders::FlowOutputFieldBuilder::default()
    }
}

/// A builder for [`FlowOutputField`](crate::types::FlowOutputField).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct FlowOutputFieldBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) content: ::std::option::Option<crate::types::FlowExecutionContent>,
}
impl FlowOutputFieldBuilder {
    /// <p>The name of the output field as defined in the flow's output schema.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the output field as defined in the flow's output schema.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the output field as defined in the flow's output schema.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The content of the output field, which can contain text or structured data.</p>
    /// This field is required.
    pub fn content(mut self, input: crate::types::FlowExecutionContent) -> Self {
        self.content = ::std::option::Option::Some(input);
        self
    }
    /// <p>The content of the output field, which can contain text or structured data.</p>
    pub fn set_content(mut self, input: ::std::option::Option<crate::types::FlowExecutionContent>) -> Self {
        self.content = input;
        self
    }
    /// <p>The content of the output field, which can contain text or structured data.</p>
    pub fn get_content(&self) -> &::std::option::Option<crate::types::FlowExecutionContent> {
        &self.content
    }
    /// Consumes the builder and constructs a [`FlowOutputField`](crate::types::FlowOutputField).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::FlowOutputFieldBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::FlowOutputField, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FlowOutputField {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building FlowOutputField",
                )
            })?,
            content: self.content,
        })
    }
}
impl ::std::fmt::Debug for FlowOutputFieldBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FlowOutputFieldBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
