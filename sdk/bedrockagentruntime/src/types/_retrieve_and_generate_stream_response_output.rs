// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A retrieve and generate stream response output.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub enum RetrieveAndGenerateStreamResponseOutput {
    /// <p>A citation event.</p>
    Citation(crate::types::CitationEvent),
    /// <p>A guardrail event.</p>
    Guardrail(crate::types::GuardrailEvent),
    /// <p>An output event.</p>
    Output(crate::types::RetrieveAndGenerateOutputEvent),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl RetrieveAndGenerateStreamResponseOutput {
    /// Tries to convert the enum instance into [`Citation`](crate::types::RetrieveAndGenerateStreamResponseOutput::Citation), extracting the inner [`CitationEvent`](crate::types::CitationEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_citation(&self) -> ::std::result::Result<&crate::types::CitationEvent, &Self> {
        if let RetrieveAndGenerateStreamResponseOutput::Citation(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Citation`](crate::types::RetrieveAndGenerateStreamResponseOutput::Citation).
    pub fn is_citation(&self) -> bool {
        self.as_citation().is_ok()
    }
    /// Tries to convert the enum instance into [`Guardrail`](crate::types::RetrieveAndGenerateStreamResponseOutput::Guardrail), extracting the inner [`GuardrailEvent`](crate::types::GuardrailEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_guardrail(&self) -> ::std::result::Result<&crate::types::GuardrailEvent, &Self> {
        if let RetrieveAndGenerateStreamResponseOutput::Guardrail(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Guardrail`](crate::types::RetrieveAndGenerateStreamResponseOutput::Guardrail).
    pub fn is_guardrail(&self) -> bool {
        self.as_guardrail().is_ok()
    }
    /// Tries to convert the enum instance into [`Output`](crate::types::RetrieveAndGenerateStreamResponseOutput::Output), extracting the inner [`RetrieveAndGenerateOutputEvent`](crate::types::RetrieveAndGenerateOutputEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_output(&self) -> ::std::result::Result<&crate::types::RetrieveAndGenerateOutputEvent, &Self> {
        if let RetrieveAndGenerateStreamResponseOutput::Output(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Output`](crate::types::RetrieveAndGenerateStreamResponseOutput::Output).
    pub fn is_output(&self) -> bool {
        self.as_output().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
impl ::std::fmt::Debug for RetrieveAndGenerateStreamResponseOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            RetrieveAndGenerateStreamResponseOutput::Citation(val) => f.debug_tuple("Citation").field(&val).finish(),
            RetrieveAndGenerateStreamResponseOutput::Guardrail(val) => f.debug_tuple("Guardrail").field(&val).finish(),
            RetrieveAndGenerateStreamResponseOutput::Output(_) => f.debug_tuple("*** Sensitive Data Redacted ***").finish(),
            RetrieveAndGenerateStreamResponseOutput::Unknown => f.debug_tuple("Unknown").finish(),
        }
    }
}
