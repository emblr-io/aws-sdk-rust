// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An event in which the prompt was optimized.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct OptimizedPromptEvent {
    /// <p>Contains information about the optimized prompt.</p>
    pub optimized_prompt: ::std::option::Option<crate::types::OptimizedPrompt>,
}
impl OptimizedPromptEvent {
    /// <p>Contains information about the optimized prompt.</p>
    pub fn optimized_prompt(&self) -> ::std::option::Option<&crate::types::OptimizedPrompt> {
        self.optimized_prompt.as_ref()
    }
}
impl ::std::fmt::Debug for OptimizedPromptEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("OptimizedPromptEvent");
        formatter.field("optimized_prompt", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl OptimizedPromptEvent {
    /// Creates a new builder-style object to manufacture [`OptimizedPromptEvent`](crate::types::OptimizedPromptEvent).
    pub fn builder() -> crate::types::builders::OptimizedPromptEventBuilder {
        crate::types::builders::OptimizedPromptEventBuilder::default()
    }
}

/// A builder for [`OptimizedPromptEvent`](crate::types::OptimizedPromptEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct OptimizedPromptEventBuilder {
    pub(crate) optimized_prompt: ::std::option::Option<crate::types::OptimizedPrompt>,
}
impl OptimizedPromptEventBuilder {
    /// <p>Contains information about the optimized prompt.</p>
    pub fn optimized_prompt(mut self, input: crate::types::OptimizedPrompt) -> Self {
        self.optimized_prompt = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the optimized prompt.</p>
    pub fn set_optimized_prompt(mut self, input: ::std::option::Option<crate::types::OptimizedPrompt>) -> Self {
        self.optimized_prompt = input;
        self
    }
    /// <p>Contains information about the optimized prompt.</p>
    pub fn get_optimized_prompt(&self) -> &::std::option::Option<crate::types::OptimizedPrompt> {
        &self.optimized_prompt
    }
    /// Consumes the builder and constructs a [`OptimizedPromptEvent`](crate::types::OptimizedPromptEvent).
    pub fn build(self) -> crate::types::OptimizedPromptEvent {
        crate::types::OptimizedPromptEvent {
            optimized_prompt: self.optimized_prompt,
        }
    }
}
impl ::std::fmt::Debug for OptimizedPromptEventBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("OptimizedPromptEventBuilder");
        formatter.field("optimized_prompt", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
