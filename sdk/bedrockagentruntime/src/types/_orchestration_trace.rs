// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the orchestration step, in which the agent determines the order in which actions are executed and which knowledge bases are retrieved.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub enum OrchestrationTrace {
    /// <p>Contains information pertaining to the action group or knowledge base that is being invoked.</p>
    InvocationInput(crate::types::InvocationInput),
    /// <p>The input for the orchestration step.</p>
    /// <ul>
    /// <li>
    /// <p>The <code>type</code> is <code>ORCHESTRATION</code>.</p></li>
    /// <li>
    /// <p>The <code>text</code> contains the prompt.</p></li>
    /// <li>
    /// <p>The <code>inferenceConfiguration</code>, <code>parserMode</code>, and <code>overrideLambda</code> values are set in the <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_PromptOverrideConfiguration.html">PromptOverrideConfiguration</a> object that was set when the agent was created or updated.</p></li>
    /// </ul>
    ModelInvocationInput(crate::types::ModelInvocationInput),
    /// <p>Contains information pertaining to the output from the foundation model that is being invoked.</p>
    ModelInvocationOutput(crate::types::OrchestrationModelInvocationOutput),
    /// <p>Details about the observation (the output of the action group Lambda or knowledge base) made by the agent.</p>
    Observation(crate::types::Observation),
    /// <p>Details about the reasoning, based on the input, that the agent uses to justify carrying out an action group or getting information from a knowledge base.</p>
    Rationale(crate::types::Rationale),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl OrchestrationTrace {
    /// Tries to convert the enum instance into [`InvocationInput`](crate::types::OrchestrationTrace::InvocationInput), extracting the inner [`InvocationInput`](crate::types::InvocationInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_invocation_input(&self) -> ::std::result::Result<&crate::types::InvocationInput, &Self> {
        if let OrchestrationTrace::InvocationInput(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`InvocationInput`](crate::types::OrchestrationTrace::InvocationInput).
    pub fn is_invocation_input(&self) -> bool {
        self.as_invocation_input().is_ok()
    }
    /// Tries to convert the enum instance into [`ModelInvocationInput`](crate::types::OrchestrationTrace::ModelInvocationInput), extracting the inner [`ModelInvocationInput`](crate::types::ModelInvocationInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_model_invocation_input(&self) -> ::std::result::Result<&crate::types::ModelInvocationInput, &Self> {
        if let OrchestrationTrace::ModelInvocationInput(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ModelInvocationInput`](crate::types::OrchestrationTrace::ModelInvocationInput).
    pub fn is_model_invocation_input(&self) -> bool {
        self.as_model_invocation_input().is_ok()
    }
    /// Tries to convert the enum instance into [`ModelInvocationOutput`](crate::types::OrchestrationTrace::ModelInvocationOutput), extracting the inner [`OrchestrationModelInvocationOutput`](crate::types::OrchestrationModelInvocationOutput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_model_invocation_output(&self) -> ::std::result::Result<&crate::types::OrchestrationModelInvocationOutput, &Self> {
        if let OrchestrationTrace::ModelInvocationOutput(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ModelInvocationOutput`](crate::types::OrchestrationTrace::ModelInvocationOutput).
    pub fn is_model_invocation_output(&self) -> bool {
        self.as_model_invocation_output().is_ok()
    }
    /// Tries to convert the enum instance into [`Observation`](crate::types::OrchestrationTrace::Observation), extracting the inner [`Observation`](crate::types::Observation).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_observation(&self) -> ::std::result::Result<&crate::types::Observation, &Self> {
        if let OrchestrationTrace::Observation(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Observation`](crate::types::OrchestrationTrace::Observation).
    pub fn is_observation(&self) -> bool {
        self.as_observation().is_ok()
    }
    /// Tries to convert the enum instance into [`Rationale`](crate::types::OrchestrationTrace::Rationale), extracting the inner [`Rationale`](crate::types::Rationale).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_rationale(&self) -> ::std::result::Result<&crate::types::Rationale, &Self> {
        if let OrchestrationTrace::Rationale(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Rationale`](crate::types::OrchestrationTrace::Rationale).
    pub fn is_rationale(&self) -> bool {
        self.as_rationale().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
impl ::std::fmt::Debug for OrchestrationTrace {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::std::write!(f, "*** Sensitive Data Redacted ***")
    }
}
