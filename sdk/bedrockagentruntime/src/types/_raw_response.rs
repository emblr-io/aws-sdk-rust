// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the raw output from the foundation model.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RawResponse {
    /// <p>The foundation model's raw output content.</p>
    pub content: ::std::option::Option<::std::string::String>,
}
impl RawResponse {
    /// <p>The foundation model's raw output content.</p>
    pub fn content(&self) -> ::std::option::Option<&str> {
        self.content.as_deref()
    }
}
impl ::std::fmt::Debug for RawResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RawResponse");
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RawResponse {
    /// Creates a new builder-style object to manufacture [`RawResponse`](crate::types::RawResponse).
    pub fn builder() -> crate::types::builders::RawResponseBuilder {
        crate::types::builders::RawResponseBuilder::default()
    }
}

/// A builder for [`RawResponse`](crate::types::RawResponse).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RawResponseBuilder {
    pub(crate) content: ::std::option::Option<::std::string::String>,
}
impl RawResponseBuilder {
    /// <p>The foundation model's raw output content.</p>
    pub fn content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The foundation model's raw output content.</p>
    pub fn set_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// <p>The foundation model's raw output content.</p>
    pub fn get_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.content
    }
    /// Consumes the builder and constructs a [`RawResponse`](crate::types::RawResponse).
    pub fn build(self) -> crate::types::RawResponse {
        crate::types::RawResponse { content: self.content }
    }
}
impl ::std::fmt::Debug for RawResponseBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RawResponseBuilder");
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
