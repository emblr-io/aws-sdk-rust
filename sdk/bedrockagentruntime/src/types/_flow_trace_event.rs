// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a trace, which tracks an input or output for a node in the flow. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/flows-trace.html">Track each step in your prompt flow by viewing its trace in Amazon Bedrock</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct FlowTraceEvent {
    /// <p>The trace object containing information about an input or output for a node in the flow.</p>
    pub trace: ::std::option::Option<crate::types::FlowTrace>,
}
impl FlowTraceEvent {
    /// <p>The trace object containing information about an input or output for a node in the flow.</p>
    pub fn trace(&self) -> ::std::option::Option<&crate::types::FlowTrace> {
        self.trace.as_ref()
    }
}
impl ::std::fmt::Debug for FlowTraceEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FlowTraceEvent");
        formatter.field("trace", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl FlowTraceEvent {
    /// Creates a new builder-style object to manufacture [`FlowTraceEvent`](crate::types::FlowTraceEvent).
    pub fn builder() -> crate::types::builders::FlowTraceEventBuilder {
        crate::types::builders::FlowTraceEventBuilder::default()
    }
}

/// A builder for [`FlowTraceEvent`](crate::types::FlowTraceEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct FlowTraceEventBuilder {
    pub(crate) trace: ::std::option::Option<crate::types::FlowTrace>,
}
impl FlowTraceEventBuilder {
    /// <p>The trace object containing information about an input or output for a node in the flow.</p>
    /// This field is required.
    pub fn trace(mut self, input: crate::types::FlowTrace) -> Self {
        self.trace = ::std::option::Option::Some(input);
        self
    }
    /// <p>The trace object containing information about an input or output for a node in the flow.</p>
    pub fn set_trace(mut self, input: ::std::option::Option<crate::types::FlowTrace>) -> Self {
        self.trace = input;
        self
    }
    /// <p>The trace object containing information about an input or output for a node in the flow.</p>
    pub fn get_trace(&self) -> &::std::option::Option<crate::types::FlowTrace> {
        &self.trace
    }
    /// Consumes the builder and constructs a [`FlowTraceEvent`](crate::types::FlowTraceEvent).
    pub fn build(self) -> crate::types::FlowTraceEvent {
        crate::types::FlowTraceEvent { trace: self.trace }
    }
}
impl ::std::fmt::Debug for FlowTraceEventBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FlowTraceEventBuilder");
        formatter.field("trace", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
