// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a column with a cell to return in retrieval.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RetrievalResultContentColumn {
    /// <p>The name of the column.</p>
    pub column_name: ::std::option::Option<::std::string::String>,
    /// <p>The value in the column.</p>
    pub column_value: ::std::option::Option<::std::string::String>,
    /// <p>The data type of the value.</p>
    pub r#type: ::std::option::Option<crate::types::RetrievalResultContentColumnType>,
}
impl RetrievalResultContentColumn {
    /// <p>The name of the column.</p>
    pub fn column_name(&self) -> ::std::option::Option<&str> {
        self.column_name.as_deref()
    }
    /// <p>The value in the column.</p>
    pub fn column_value(&self) -> ::std::option::Option<&str> {
        self.column_value.as_deref()
    }
    /// <p>The data type of the value.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::RetrievalResultContentColumnType> {
        self.r#type.as_ref()
    }
}
impl ::std::fmt::Debug for RetrievalResultContentColumn {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RetrievalResultContentColumn");
        formatter.field("column_name", &"*** Sensitive Data Redacted ***");
        formatter.field("column_value", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RetrievalResultContentColumn {
    /// Creates a new builder-style object to manufacture [`RetrievalResultContentColumn`](crate::types::RetrievalResultContentColumn).
    pub fn builder() -> crate::types::builders::RetrievalResultContentColumnBuilder {
        crate::types::builders::RetrievalResultContentColumnBuilder::default()
    }
}

/// A builder for [`RetrievalResultContentColumn`](crate::types::RetrievalResultContentColumn).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RetrievalResultContentColumnBuilder {
    pub(crate) column_name: ::std::option::Option<::std::string::String>,
    pub(crate) column_value: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::RetrievalResultContentColumnType>,
}
impl RetrievalResultContentColumnBuilder {
    /// <p>The name of the column.</p>
    pub fn column_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.column_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the column.</p>
    pub fn set_column_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.column_name = input;
        self
    }
    /// <p>The name of the column.</p>
    pub fn get_column_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.column_name
    }
    /// <p>The value in the column.</p>
    pub fn column_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.column_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value in the column.</p>
    pub fn set_column_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.column_value = input;
        self
    }
    /// <p>The value in the column.</p>
    pub fn get_column_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.column_value
    }
    /// <p>The data type of the value.</p>
    pub fn r#type(mut self, input: crate::types::RetrievalResultContentColumnType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data type of the value.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RetrievalResultContentColumnType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The data type of the value.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RetrievalResultContentColumnType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`RetrievalResultContentColumn`](crate::types::RetrievalResultContentColumn).
    pub fn build(self) -> crate::types::RetrievalResultContentColumn {
        crate::types::RetrievalResultContentColumn {
            column_name: self.column_name,
            column_value: self.column_value,
            r#type: self.r#type,
        }
    }
}
impl ::std::fmt::Debug for RetrievalResultContentColumnBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RetrievalResultContentColumnBuilder");
        formatter.field("column_name", &"*** Sensitive Data Redacted ***");
        formatter.field("column_value", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
