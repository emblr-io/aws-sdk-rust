// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The detail of the partition field.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataLakeDatasetPartitionField {
    /// <p>The name of the partition field.</p>
    pub name: ::std::string::String,
    /// <p>The transformation of the partition field. A transformation specifies how to partition on a given field. For example, with timestamp you can specify that you'd like to partition fields by day, e.g. data record with value 2025-01-03T00:00:00Z in partition field is in 2025-01-03 partition. Also noted that data record without any value in optional partition field is in NULL partition.</p>
    pub transform: ::std::option::Option<crate::types::DataLakeDatasetPartitionFieldTransform>,
}
impl DataLakeDatasetPartitionField {
    /// <p>The name of the partition field.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The transformation of the partition field. A transformation specifies how to partition on a given field. For example, with timestamp you can specify that you'd like to partition fields by day, e.g. data record with value 2025-01-03T00:00:00Z in partition field is in 2025-01-03 partition. Also noted that data record without any value in optional partition field is in NULL partition.</p>
    pub fn transform(&self) -> ::std::option::Option<&crate::types::DataLakeDatasetPartitionFieldTransform> {
        self.transform.as_ref()
    }
}
impl DataLakeDatasetPartitionField {
    /// Creates a new builder-style object to manufacture [`DataLakeDatasetPartitionField`](crate::types::DataLakeDatasetPartitionField).
    pub fn builder() -> crate::types::builders::DataLakeDatasetPartitionFieldBuilder {
        crate::types::builders::DataLakeDatasetPartitionFieldBuilder::default()
    }
}

/// A builder for [`DataLakeDatasetPartitionField`](crate::types::DataLakeDatasetPartitionField).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataLakeDatasetPartitionFieldBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) transform: ::std::option::Option<crate::types::DataLakeDatasetPartitionFieldTransform>,
}
impl DataLakeDatasetPartitionFieldBuilder {
    /// <p>The name of the partition field.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the partition field.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the partition field.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The transformation of the partition field. A transformation specifies how to partition on a given field. For example, with timestamp you can specify that you'd like to partition fields by day, e.g. data record with value 2025-01-03T00:00:00Z in partition field is in 2025-01-03 partition. Also noted that data record without any value in optional partition field is in NULL partition.</p>
    /// This field is required.
    pub fn transform(mut self, input: crate::types::DataLakeDatasetPartitionFieldTransform) -> Self {
        self.transform = ::std::option::Option::Some(input);
        self
    }
    /// <p>The transformation of the partition field. A transformation specifies how to partition on a given field. For example, with timestamp you can specify that you'd like to partition fields by day, e.g. data record with value 2025-01-03T00:00:00Z in partition field is in 2025-01-03 partition. Also noted that data record without any value in optional partition field is in NULL partition.</p>
    pub fn set_transform(mut self, input: ::std::option::Option<crate::types::DataLakeDatasetPartitionFieldTransform>) -> Self {
        self.transform = input;
        self
    }
    /// <p>The transformation of the partition field. A transformation specifies how to partition on a given field. For example, with timestamp you can specify that you'd like to partition fields by day, e.g. data record with value 2025-01-03T00:00:00Z in partition field is in 2025-01-03 partition. Also noted that data record without any value in optional partition field is in NULL partition.</p>
    pub fn get_transform(&self) -> &::std::option::Option<crate::types::DataLakeDatasetPartitionFieldTransform> {
        &self.transform
    }
    /// Consumes the builder and constructs a [`DataLakeDatasetPartitionField`](crate::types::DataLakeDatasetPartitionField).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::DataLakeDatasetPartitionFieldBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::DataLakeDatasetPartitionField, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataLakeDatasetPartitionField {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building DataLakeDatasetPartitionField",
                )
            })?,
            transform: self.transform,
        })
    }
}
