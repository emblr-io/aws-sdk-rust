// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The DataIntegrationFlow transformation parameters.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataIntegrationFlowTransformation {
    /// <p>The DataIntegrationFlow transformation type.</p>
    pub transformation_type: crate::types::DataIntegrationFlowTransformationType,
    /// <p>The SQL DataIntegrationFlow transformation configuration.</p>
    pub sql_transformation: ::std::option::Option<crate::types::DataIntegrationFlowSqlTransformationConfiguration>,
}
impl DataIntegrationFlowTransformation {
    /// <p>The DataIntegrationFlow transformation type.</p>
    pub fn transformation_type(&self) -> &crate::types::DataIntegrationFlowTransformationType {
        &self.transformation_type
    }
    /// <p>The SQL DataIntegrationFlow transformation configuration.</p>
    pub fn sql_transformation(&self) -> ::std::option::Option<&crate::types::DataIntegrationFlowSqlTransformationConfiguration> {
        self.sql_transformation.as_ref()
    }
}
impl DataIntegrationFlowTransformation {
    /// Creates a new builder-style object to manufacture [`DataIntegrationFlowTransformation`](crate::types::DataIntegrationFlowTransformation).
    pub fn builder() -> crate::types::builders::DataIntegrationFlowTransformationBuilder {
        crate::types::builders::DataIntegrationFlowTransformationBuilder::default()
    }
}

/// A builder for [`DataIntegrationFlowTransformation`](crate::types::DataIntegrationFlowTransformation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataIntegrationFlowTransformationBuilder {
    pub(crate) transformation_type: ::std::option::Option<crate::types::DataIntegrationFlowTransformationType>,
    pub(crate) sql_transformation: ::std::option::Option<crate::types::DataIntegrationFlowSqlTransformationConfiguration>,
}
impl DataIntegrationFlowTransformationBuilder {
    /// <p>The DataIntegrationFlow transformation type.</p>
    /// This field is required.
    pub fn transformation_type(mut self, input: crate::types::DataIntegrationFlowTransformationType) -> Self {
        self.transformation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The DataIntegrationFlow transformation type.</p>
    pub fn set_transformation_type(mut self, input: ::std::option::Option<crate::types::DataIntegrationFlowTransformationType>) -> Self {
        self.transformation_type = input;
        self
    }
    /// <p>The DataIntegrationFlow transformation type.</p>
    pub fn get_transformation_type(&self) -> &::std::option::Option<crate::types::DataIntegrationFlowTransformationType> {
        &self.transformation_type
    }
    /// <p>The SQL DataIntegrationFlow transformation configuration.</p>
    pub fn sql_transformation(mut self, input: crate::types::DataIntegrationFlowSqlTransformationConfiguration) -> Self {
        self.sql_transformation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The SQL DataIntegrationFlow transformation configuration.</p>
    pub fn set_sql_transformation(mut self, input: ::std::option::Option<crate::types::DataIntegrationFlowSqlTransformationConfiguration>) -> Self {
        self.sql_transformation = input;
        self
    }
    /// <p>The SQL DataIntegrationFlow transformation configuration.</p>
    pub fn get_sql_transformation(&self) -> &::std::option::Option<crate::types::DataIntegrationFlowSqlTransformationConfiguration> {
        &self.sql_transformation
    }
    /// Consumes the builder and constructs a [`DataIntegrationFlowTransformation`](crate::types::DataIntegrationFlowTransformation).
    /// This method will fail if any of the following fields are not set:
    /// - [`transformation_type`](crate::types::builders::DataIntegrationFlowTransformationBuilder::transformation_type)
    pub fn build(self) -> ::std::result::Result<crate::types::DataIntegrationFlowTransformation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataIntegrationFlowTransformation {
            transformation_type: self.transformation_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "transformation_type",
                    "transformation_type was not specified but it is required when building DataIntegrationFlowTransformation",
                )
            })?,
            sql_transformation: self.sql_transformation,
        })
    }
}
