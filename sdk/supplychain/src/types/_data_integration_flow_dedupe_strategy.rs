// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The deduplication strategy details.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataIntegrationFlowDedupeStrategy {
    /// <p>The type of the deduplication strategy.</p>
    /// <ul>
    /// <li>
    /// <p><b>FIELD_PRIORITY</b> - Field priority configuration for the deduplication strategy specifies an ordered list of fields used to tie-break the data records sharing the same primary key values. Fields earlier in the list have higher priority for evaluation. For each field, the sort order determines whether to retain data record with larger or smaller field value.</p></li>
    /// </ul>
    pub r#type: crate::types::DataIntegrationFlowDedupeStrategyType,
    /// <p>The field priority deduplication strategy.</p>
    pub field_priority: ::std::option::Option<crate::types::DataIntegrationFlowFieldPriorityDedupeStrategyConfiguration>,
}
impl DataIntegrationFlowDedupeStrategy {
    /// <p>The type of the deduplication strategy.</p>
    /// <ul>
    /// <li>
    /// <p><b>FIELD_PRIORITY</b> - Field priority configuration for the deduplication strategy specifies an ordered list of fields used to tie-break the data records sharing the same primary key values. Fields earlier in the list have higher priority for evaluation. For each field, the sort order determines whether to retain data record with larger or smaller field value.</p></li>
    /// </ul>
    pub fn r#type(&self) -> &crate::types::DataIntegrationFlowDedupeStrategyType {
        &self.r#type
    }
    /// <p>The field priority deduplication strategy.</p>
    pub fn field_priority(&self) -> ::std::option::Option<&crate::types::DataIntegrationFlowFieldPriorityDedupeStrategyConfiguration> {
        self.field_priority.as_ref()
    }
}
impl DataIntegrationFlowDedupeStrategy {
    /// Creates a new builder-style object to manufacture [`DataIntegrationFlowDedupeStrategy`](crate::types::DataIntegrationFlowDedupeStrategy).
    pub fn builder() -> crate::types::builders::DataIntegrationFlowDedupeStrategyBuilder {
        crate::types::builders::DataIntegrationFlowDedupeStrategyBuilder::default()
    }
}

/// A builder for [`DataIntegrationFlowDedupeStrategy`](crate::types::DataIntegrationFlowDedupeStrategy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataIntegrationFlowDedupeStrategyBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::DataIntegrationFlowDedupeStrategyType>,
    pub(crate) field_priority: ::std::option::Option<crate::types::DataIntegrationFlowFieldPriorityDedupeStrategyConfiguration>,
}
impl DataIntegrationFlowDedupeStrategyBuilder {
    /// <p>The type of the deduplication strategy.</p>
    /// <ul>
    /// <li>
    /// <p><b>FIELD_PRIORITY</b> - Field priority configuration for the deduplication strategy specifies an ordered list of fields used to tie-break the data records sharing the same primary key values. Fields earlier in the list have higher priority for evaluation. For each field, the sort order determines whether to retain data record with larger or smaller field value.</p></li>
    /// </ul>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::DataIntegrationFlowDedupeStrategyType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the deduplication strategy.</p>
    /// <ul>
    /// <li>
    /// <p><b>FIELD_PRIORITY</b> - Field priority configuration for the deduplication strategy specifies an ordered list of fields used to tie-break the data records sharing the same primary key values. Fields earlier in the list have higher priority for evaluation. For each field, the sort order determines whether to retain data record with larger or smaller field value.</p></li>
    /// </ul>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::DataIntegrationFlowDedupeStrategyType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the deduplication strategy.</p>
    /// <ul>
    /// <li>
    /// <p><b>FIELD_PRIORITY</b> - Field priority configuration for the deduplication strategy specifies an ordered list of fields used to tie-break the data records sharing the same primary key values. Fields earlier in the list have higher priority for evaluation. For each field, the sort order determines whether to retain data record with larger or smaller field value.</p></li>
    /// </ul>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::DataIntegrationFlowDedupeStrategyType> {
        &self.r#type
    }
    /// <p>The field priority deduplication strategy.</p>
    pub fn field_priority(mut self, input: crate::types::DataIntegrationFlowFieldPriorityDedupeStrategyConfiguration) -> Self {
        self.field_priority = ::std::option::Option::Some(input);
        self
    }
    /// <p>The field priority deduplication strategy.</p>
    pub fn set_field_priority(
        mut self,
        input: ::std::option::Option<crate::types::DataIntegrationFlowFieldPriorityDedupeStrategyConfiguration>,
    ) -> Self {
        self.field_priority = input;
        self
    }
    /// <p>The field priority deduplication strategy.</p>
    pub fn get_field_priority(&self) -> &::std::option::Option<crate::types::DataIntegrationFlowFieldPriorityDedupeStrategyConfiguration> {
        &self.field_priority
    }
    /// Consumes the builder and constructs a [`DataIntegrationFlowDedupeStrategy`](crate::types::DataIntegrationFlowDedupeStrategy).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::DataIntegrationFlowDedupeStrategyBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::DataIntegrationFlowDedupeStrategy, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataIntegrationFlowDedupeStrategy {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building DataIntegrationFlowDedupeStrategy",
                )
            })?,
            field_priority: self.field_priority,
        })
    }
}
