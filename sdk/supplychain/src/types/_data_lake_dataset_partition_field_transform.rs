// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The detail of the partition field transformation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataLakeDatasetPartitionFieldTransform {
    /// <p>The type of partitioning transformation for this field. The available options are:</p>
    /// <ul>
    /// <li>
    /// <p><b>IDENTITY</b> - Partitions data on a given field by its exact values.</p></li>
    /// <li>
    /// <p><b>YEAR</b> - Partitions data on a timestamp field using year granularity.</p></li>
    /// <li>
    /// <p><b>MONTH</b> - Partitions data on a timestamp field using month granularity.</p></li>
    /// <li>
    /// <p><b>DAY</b> - Partitions data on a timestamp field using day granularity.</p></li>
    /// <li>
    /// <p><b>HOUR</b> - Partitions data on a timestamp field using hour granularity.</p></li>
    /// </ul>
    pub r#type: crate::types::DataLakeDatasetPartitionTransformType,
}
impl DataLakeDatasetPartitionFieldTransform {
    /// <p>The type of partitioning transformation for this field. The available options are:</p>
    /// <ul>
    /// <li>
    /// <p><b>IDENTITY</b> - Partitions data on a given field by its exact values.</p></li>
    /// <li>
    /// <p><b>YEAR</b> - Partitions data on a timestamp field using year granularity.</p></li>
    /// <li>
    /// <p><b>MONTH</b> - Partitions data on a timestamp field using month granularity.</p></li>
    /// <li>
    /// <p><b>DAY</b> - Partitions data on a timestamp field using day granularity.</p></li>
    /// <li>
    /// <p><b>HOUR</b> - Partitions data on a timestamp field using hour granularity.</p></li>
    /// </ul>
    pub fn r#type(&self) -> &crate::types::DataLakeDatasetPartitionTransformType {
        &self.r#type
    }
}
impl DataLakeDatasetPartitionFieldTransform {
    /// Creates a new builder-style object to manufacture [`DataLakeDatasetPartitionFieldTransform`](crate::types::DataLakeDatasetPartitionFieldTransform).
    pub fn builder() -> crate::types::builders::DataLakeDatasetPartitionFieldTransformBuilder {
        crate::types::builders::DataLakeDatasetPartitionFieldTransformBuilder::default()
    }
}

/// A builder for [`DataLakeDatasetPartitionFieldTransform`](crate::types::DataLakeDatasetPartitionFieldTransform).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataLakeDatasetPartitionFieldTransformBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::DataLakeDatasetPartitionTransformType>,
}
impl DataLakeDatasetPartitionFieldTransformBuilder {
    /// <p>The type of partitioning transformation for this field. The available options are:</p>
    /// <ul>
    /// <li>
    /// <p><b>IDENTITY</b> - Partitions data on a given field by its exact values.</p></li>
    /// <li>
    /// <p><b>YEAR</b> - Partitions data on a timestamp field using year granularity.</p></li>
    /// <li>
    /// <p><b>MONTH</b> - Partitions data on a timestamp field using month granularity.</p></li>
    /// <li>
    /// <p><b>DAY</b> - Partitions data on a timestamp field using day granularity.</p></li>
    /// <li>
    /// <p><b>HOUR</b> - Partitions data on a timestamp field using hour granularity.</p></li>
    /// </ul>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::DataLakeDatasetPartitionTransformType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of partitioning transformation for this field. The available options are:</p>
    /// <ul>
    /// <li>
    /// <p><b>IDENTITY</b> - Partitions data on a given field by its exact values.</p></li>
    /// <li>
    /// <p><b>YEAR</b> - Partitions data on a timestamp field using year granularity.</p></li>
    /// <li>
    /// <p><b>MONTH</b> - Partitions data on a timestamp field using month granularity.</p></li>
    /// <li>
    /// <p><b>DAY</b> - Partitions data on a timestamp field using day granularity.</p></li>
    /// <li>
    /// <p><b>HOUR</b> - Partitions data on a timestamp field using hour granularity.</p></li>
    /// </ul>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::DataLakeDatasetPartitionTransformType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of partitioning transformation for this field. The available options are:</p>
    /// <ul>
    /// <li>
    /// <p><b>IDENTITY</b> - Partitions data on a given field by its exact values.</p></li>
    /// <li>
    /// <p><b>YEAR</b> - Partitions data on a timestamp field using year granularity.</p></li>
    /// <li>
    /// <p><b>MONTH</b> - Partitions data on a timestamp field using month granularity.</p></li>
    /// <li>
    /// <p><b>DAY</b> - Partitions data on a timestamp field using day granularity.</p></li>
    /// <li>
    /// <p><b>HOUR</b> - Partitions data on a timestamp field using hour granularity.</p></li>
    /// </ul>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::DataLakeDatasetPartitionTransformType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`DataLakeDatasetPartitionFieldTransform`](crate::types::DataLakeDatasetPartitionFieldTransform).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::DataLakeDatasetPartitionFieldTransformBuilder::type)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::DataLakeDatasetPartitionFieldTransform, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataLakeDatasetPartitionFieldTransform {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building DataLakeDatasetPartitionFieldTransform",
                )
            })?,
        })
    }
}
