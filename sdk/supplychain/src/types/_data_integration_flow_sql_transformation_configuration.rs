// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The SQL DataIntegrationFlow transformation configuration parameters.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DataIntegrationFlowSqlTransformationConfiguration {
    /// <p>The transformation SQL query body based on SparkSQL.</p>
    pub query: ::std::string::String,
}
impl DataIntegrationFlowSqlTransformationConfiguration {
    /// <p>The transformation SQL query body based on SparkSQL.</p>
    pub fn query(&self) -> &str {
        use std::ops::Deref;
        self.query.deref()
    }
}
impl ::std::fmt::Debug for DataIntegrationFlowSqlTransformationConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DataIntegrationFlowSqlTransformationConfiguration");
        formatter.field("query", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl DataIntegrationFlowSqlTransformationConfiguration {
    /// Creates a new builder-style object to manufacture [`DataIntegrationFlowSqlTransformationConfiguration`](crate::types::DataIntegrationFlowSqlTransformationConfiguration).
    pub fn builder() -> crate::types::builders::DataIntegrationFlowSqlTransformationConfigurationBuilder {
        crate::types::builders::DataIntegrationFlowSqlTransformationConfigurationBuilder::default()
    }
}

/// A builder for [`DataIntegrationFlowSqlTransformationConfiguration`](crate::types::DataIntegrationFlowSqlTransformationConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct DataIntegrationFlowSqlTransformationConfigurationBuilder {
    pub(crate) query: ::std::option::Option<::std::string::String>,
}
impl DataIntegrationFlowSqlTransformationConfigurationBuilder {
    /// <p>The transformation SQL query body based on SparkSQL.</p>
    /// This field is required.
    pub fn query(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The transformation SQL query body based on SparkSQL.</p>
    pub fn set_query(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query = input;
        self
    }
    /// <p>The transformation SQL query body based on SparkSQL.</p>
    pub fn get_query(&self) -> &::std::option::Option<::std::string::String> {
        &self.query
    }
    /// Consumes the builder and constructs a [`DataIntegrationFlowSqlTransformationConfiguration`](crate::types::DataIntegrationFlowSqlTransformationConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`query`](crate::types::builders::DataIntegrationFlowSqlTransformationConfigurationBuilder::query)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::DataIntegrationFlowSqlTransformationConfiguration, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::types::DataIntegrationFlowSqlTransformationConfiguration {
            query: self.query.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "query",
                    "query was not specified but it is required when building DataIntegrationFlowSqlTransformationConfiguration",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for DataIntegrationFlowSqlTransformationConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DataIntegrationFlowSqlTransformationConfigurationBuilder");
        formatter.field("query", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
