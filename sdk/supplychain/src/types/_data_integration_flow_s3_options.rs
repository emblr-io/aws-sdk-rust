// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon S3 options used in S3 source and target configurations.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataIntegrationFlowS3Options {
    /// <p>The Amazon S3 file type in S3 options.</p>
    pub file_type: ::std::option::Option<crate::types::DataIntegrationFlowFileType>,
}
impl DataIntegrationFlowS3Options {
    /// <p>The Amazon S3 file type in S3 options.</p>
    pub fn file_type(&self) -> ::std::option::Option<&crate::types::DataIntegrationFlowFileType> {
        self.file_type.as_ref()
    }
}
impl DataIntegrationFlowS3Options {
    /// Creates a new builder-style object to manufacture [`DataIntegrationFlowS3Options`](crate::types::DataIntegrationFlowS3Options).
    pub fn builder() -> crate::types::builders::DataIntegrationFlowS3OptionsBuilder {
        crate::types::builders::DataIntegrationFlowS3OptionsBuilder::default()
    }
}

/// A builder for [`DataIntegrationFlowS3Options`](crate::types::DataIntegrationFlowS3Options).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataIntegrationFlowS3OptionsBuilder {
    pub(crate) file_type: ::std::option::Option<crate::types::DataIntegrationFlowFileType>,
}
impl DataIntegrationFlowS3OptionsBuilder {
    /// <p>The Amazon S3 file type in S3 options.</p>
    pub fn file_type(mut self, input: crate::types::DataIntegrationFlowFileType) -> Self {
        self.file_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon S3 file type in S3 options.</p>
    pub fn set_file_type(mut self, input: ::std::option::Option<crate::types::DataIntegrationFlowFileType>) -> Self {
        self.file_type = input;
        self
    }
    /// <p>The Amazon S3 file type in S3 options.</p>
    pub fn get_file_type(&self) -> &::std::option::Option<crate::types::DataIntegrationFlowFileType> {
        &self.file_type
    }
    /// Consumes the builder and constructs a [`DataIntegrationFlowS3Options`](crate::types::DataIntegrationFlowS3Options).
    pub fn build(self) -> crate::types::DataIntegrationFlowS3Options {
        crate::types::DataIntegrationFlowS3Options { file_type: self.file_type }
    }
}
