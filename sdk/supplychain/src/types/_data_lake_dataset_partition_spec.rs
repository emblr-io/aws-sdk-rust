// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The partition specification for a dataset.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataLakeDatasetPartitionSpec {
    /// <p>The fields on which to partition a dataset. The partitions will be applied hierarchically based on the order of this list.</p>
    pub fields: ::std::vec::Vec<crate::types::DataLakeDatasetPartitionField>,
}
impl DataLakeDatasetPartitionSpec {
    /// <p>The fields on which to partition a dataset. The partitions will be applied hierarchically based on the order of this list.</p>
    pub fn fields(&self) -> &[crate::types::DataLakeDatasetPartitionField] {
        use std::ops::Deref;
        self.fields.deref()
    }
}
impl DataLakeDatasetPartitionSpec {
    /// Creates a new builder-style object to manufacture [`DataLakeDatasetPartitionSpec`](crate::types::DataLakeDatasetPartitionSpec).
    pub fn builder() -> crate::types::builders::DataLakeDatasetPartitionSpecBuilder {
        crate::types::builders::DataLakeDatasetPartitionSpecBuilder::default()
    }
}

/// A builder for [`DataLakeDatasetPartitionSpec`](crate::types::DataLakeDatasetPartitionSpec).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataLakeDatasetPartitionSpecBuilder {
    pub(crate) fields: ::std::option::Option<::std::vec::Vec<crate::types::DataLakeDatasetPartitionField>>,
}
impl DataLakeDatasetPartitionSpecBuilder {
    /// Appends an item to `fields`.
    ///
    /// To override the contents of this collection use [`set_fields`](Self::set_fields).
    ///
    /// <p>The fields on which to partition a dataset. The partitions will be applied hierarchically based on the order of this list.</p>
    pub fn fields(mut self, input: crate::types::DataLakeDatasetPartitionField) -> Self {
        let mut v = self.fields.unwrap_or_default();
        v.push(input);
        self.fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>The fields on which to partition a dataset. The partitions will be applied hierarchically based on the order of this list.</p>
    pub fn set_fields(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DataLakeDatasetPartitionField>>) -> Self {
        self.fields = input;
        self
    }
    /// <p>The fields on which to partition a dataset. The partitions will be applied hierarchically based on the order of this list.</p>
    pub fn get_fields(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DataLakeDatasetPartitionField>> {
        &self.fields
    }
    /// Consumes the builder and constructs a [`DataLakeDatasetPartitionSpec`](crate::types::DataLakeDatasetPartitionSpec).
    /// This method will fail if any of the following fields are not set:
    /// - [`fields`](crate::types::builders::DataLakeDatasetPartitionSpecBuilder::fields)
    pub fn build(self) -> ::std::result::Result<crate::types::DataLakeDatasetPartitionSpec, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataLakeDatasetPartitionSpec {
            fields: self.fields.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "fields",
                    "fields was not specified but it is required when building DataLakeDatasetPartitionSpec",
                )
            })?,
        })
    }
}
