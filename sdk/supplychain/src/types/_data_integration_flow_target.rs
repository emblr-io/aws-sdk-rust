// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The DataIntegrationFlow target parameters.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataIntegrationFlowTarget {
    /// <p>The DataIntegrationFlow target type.</p>
    pub target_type: crate::types::DataIntegrationFlowTargetType,
    /// <p>The S3 DataIntegrationFlow target.</p>
    pub s3_target: ::std::option::Option<crate::types::DataIntegrationFlowS3TargetConfiguration>,
    /// <p>The dataset DataIntegrationFlow target. Note that for AWS Supply Chain dataset under <b>asc</b> namespace, it has a connection_id internal field that is not allowed to be provided by client directly, they will be auto populated.</p>
    pub dataset_target: ::std::option::Option<crate::types::DataIntegrationFlowDatasetTargetConfiguration>,
}
impl DataIntegrationFlowTarget {
    /// <p>The DataIntegrationFlow target type.</p>
    pub fn target_type(&self) -> &crate::types::DataIntegrationFlowTargetType {
        &self.target_type
    }
    /// <p>The S3 DataIntegrationFlow target.</p>
    pub fn s3_target(&self) -> ::std::option::Option<&crate::types::DataIntegrationFlowS3TargetConfiguration> {
        self.s3_target.as_ref()
    }
    /// <p>The dataset DataIntegrationFlow target. Note that for AWS Supply Chain dataset under <b>asc</b> namespace, it has a connection_id internal field that is not allowed to be provided by client directly, they will be auto populated.</p>
    pub fn dataset_target(&self) -> ::std::option::Option<&crate::types::DataIntegrationFlowDatasetTargetConfiguration> {
        self.dataset_target.as_ref()
    }
}
impl DataIntegrationFlowTarget {
    /// Creates a new builder-style object to manufacture [`DataIntegrationFlowTarget`](crate::types::DataIntegrationFlowTarget).
    pub fn builder() -> crate::types::builders::DataIntegrationFlowTargetBuilder {
        crate::types::builders::DataIntegrationFlowTargetBuilder::default()
    }
}

/// A builder for [`DataIntegrationFlowTarget`](crate::types::DataIntegrationFlowTarget).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataIntegrationFlowTargetBuilder {
    pub(crate) target_type: ::std::option::Option<crate::types::DataIntegrationFlowTargetType>,
    pub(crate) s3_target: ::std::option::Option<crate::types::DataIntegrationFlowS3TargetConfiguration>,
    pub(crate) dataset_target: ::std::option::Option<crate::types::DataIntegrationFlowDatasetTargetConfiguration>,
}
impl DataIntegrationFlowTargetBuilder {
    /// <p>The DataIntegrationFlow target type.</p>
    /// This field is required.
    pub fn target_type(mut self, input: crate::types::DataIntegrationFlowTargetType) -> Self {
        self.target_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The DataIntegrationFlow target type.</p>
    pub fn set_target_type(mut self, input: ::std::option::Option<crate::types::DataIntegrationFlowTargetType>) -> Self {
        self.target_type = input;
        self
    }
    /// <p>The DataIntegrationFlow target type.</p>
    pub fn get_target_type(&self) -> &::std::option::Option<crate::types::DataIntegrationFlowTargetType> {
        &self.target_type
    }
    /// <p>The S3 DataIntegrationFlow target.</p>
    pub fn s3_target(mut self, input: crate::types::DataIntegrationFlowS3TargetConfiguration) -> Self {
        self.s3_target = ::std::option::Option::Some(input);
        self
    }
    /// <p>The S3 DataIntegrationFlow target.</p>
    pub fn set_s3_target(mut self, input: ::std::option::Option<crate::types::DataIntegrationFlowS3TargetConfiguration>) -> Self {
        self.s3_target = input;
        self
    }
    /// <p>The S3 DataIntegrationFlow target.</p>
    pub fn get_s3_target(&self) -> &::std::option::Option<crate::types::DataIntegrationFlowS3TargetConfiguration> {
        &self.s3_target
    }
    /// <p>The dataset DataIntegrationFlow target. Note that for AWS Supply Chain dataset under <b>asc</b> namespace, it has a connection_id internal field that is not allowed to be provided by client directly, they will be auto populated.</p>
    pub fn dataset_target(mut self, input: crate::types::DataIntegrationFlowDatasetTargetConfiguration) -> Self {
        self.dataset_target = ::std::option::Option::Some(input);
        self
    }
    /// <p>The dataset DataIntegrationFlow target. Note that for AWS Supply Chain dataset under <b>asc</b> namespace, it has a connection_id internal field that is not allowed to be provided by client directly, they will be auto populated.</p>
    pub fn set_dataset_target(mut self, input: ::std::option::Option<crate::types::DataIntegrationFlowDatasetTargetConfiguration>) -> Self {
        self.dataset_target = input;
        self
    }
    /// <p>The dataset DataIntegrationFlow target. Note that for AWS Supply Chain dataset under <b>asc</b> namespace, it has a connection_id internal field that is not allowed to be provided by client directly, they will be auto populated.</p>
    pub fn get_dataset_target(&self) -> &::std::option::Option<crate::types::DataIntegrationFlowDatasetTargetConfiguration> {
        &self.dataset_target
    }
    /// Consumes the builder and constructs a [`DataIntegrationFlowTarget`](crate::types::DataIntegrationFlowTarget).
    /// This method will fail if any of the following fields are not set:
    /// - [`target_type`](crate::types::builders::DataIntegrationFlowTargetBuilder::target_type)
    pub fn build(self) -> ::std::result::Result<crate::types::DataIntegrationFlowTarget, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataIntegrationFlowTarget {
            target_type: self.target_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target_type",
                    "target_type was not specified but it is required when building DataIntegrationFlowTarget",
                )
            })?,
            s3_target: self.s3_target,
            dataset_target: self.dataset_target,
        })
    }
}
