// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The source information of a flow execution.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataIntegrationFlowExecutionSourceInfo {
    /// <p>The data integration flow execution source type.</p>
    pub source_type: crate::types::DataIntegrationFlowSourceType,
    /// <p>The source details of a flow execution with S3 source.</p>
    pub s3_source: ::std::option::Option<crate::types::DataIntegrationFlowS3Source>,
    /// <p>The source details of a flow execution with dataset source.</p>
    pub dataset_source: ::std::option::Option<crate::types::DataIntegrationFlowDatasetSource>,
}
impl DataIntegrationFlowExecutionSourceInfo {
    /// <p>The data integration flow execution source type.</p>
    pub fn source_type(&self) -> &crate::types::DataIntegrationFlowSourceType {
        &self.source_type
    }
    /// <p>The source details of a flow execution with S3 source.</p>
    pub fn s3_source(&self) -> ::std::option::Option<&crate::types::DataIntegrationFlowS3Source> {
        self.s3_source.as_ref()
    }
    /// <p>The source details of a flow execution with dataset source.</p>
    pub fn dataset_source(&self) -> ::std::option::Option<&crate::types::DataIntegrationFlowDatasetSource> {
        self.dataset_source.as_ref()
    }
}
impl DataIntegrationFlowExecutionSourceInfo {
    /// Creates a new builder-style object to manufacture [`DataIntegrationFlowExecutionSourceInfo`](crate::types::DataIntegrationFlowExecutionSourceInfo).
    pub fn builder() -> crate::types::builders::DataIntegrationFlowExecutionSourceInfoBuilder {
        crate::types::builders::DataIntegrationFlowExecutionSourceInfoBuilder::default()
    }
}

/// A builder for [`DataIntegrationFlowExecutionSourceInfo`](crate::types::DataIntegrationFlowExecutionSourceInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataIntegrationFlowExecutionSourceInfoBuilder {
    pub(crate) source_type: ::std::option::Option<crate::types::DataIntegrationFlowSourceType>,
    pub(crate) s3_source: ::std::option::Option<crate::types::DataIntegrationFlowS3Source>,
    pub(crate) dataset_source: ::std::option::Option<crate::types::DataIntegrationFlowDatasetSource>,
}
impl DataIntegrationFlowExecutionSourceInfoBuilder {
    /// <p>The data integration flow execution source type.</p>
    /// This field is required.
    pub fn source_type(mut self, input: crate::types::DataIntegrationFlowSourceType) -> Self {
        self.source_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data integration flow execution source type.</p>
    pub fn set_source_type(mut self, input: ::std::option::Option<crate::types::DataIntegrationFlowSourceType>) -> Self {
        self.source_type = input;
        self
    }
    /// <p>The data integration flow execution source type.</p>
    pub fn get_source_type(&self) -> &::std::option::Option<crate::types::DataIntegrationFlowSourceType> {
        &self.source_type
    }
    /// <p>The source details of a flow execution with S3 source.</p>
    pub fn s3_source(mut self, input: crate::types::DataIntegrationFlowS3Source) -> Self {
        self.s3_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source details of a flow execution with S3 source.</p>
    pub fn set_s3_source(mut self, input: ::std::option::Option<crate::types::DataIntegrationFlowS3Source>) -> Self {
        self.s3_source = input;
        self
    }
    /// <p>The source details of a flow execution with S3 source.</p>
    pub fn get_s3_source(&self) -> &::std::option::Option<crate::types::DataIntegrationFlowS3Source> {
        &self.s3_source
    }
    /// <p>The source details of a flow execution with dataset source.</p>
    pub fn dataset_source(mut self, input: crate::types::DataIntegrationFlowDatasetSource) -> Self {
        self.dataset_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source details of a flow execution with dataset source.</p>
    pub fn set_dataset_source(mut self, input: ::std::option::Option<crate::types::DataIntegrationFlowDatasetSource>) -> Self {
        self.dataset_source = input;
        self
    }
    /// <p>The source details of a flow execution with dataset source.</p>
    pub fn get_dataset_source(&self) -> &::std::option::Option<crate::types::DataIntegrationFlowDatasetSource> {
        &self.dataset_source
    }
    /// Consumes the builder and constructs a [`DataIntegrationFlowExecutionSourceInfo`](crate::types::DataIntegrationFlowExecutionSourceInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`source_type`](crate::types::builders::DataIntegrationFlowExecutionSourceInfoBuilder::source_type)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::DataIntegrationFlowExecutionSourceInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataIntegrationFlowExecutionSourceInfo {
            source_type: self.source_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_type",
                    "source_type was not specified but it is required when building DataIntegrationFlowExecutionSourceInfo",
                )
            })?,
            s3_source: self.s3_source,
            dataset_source: self.dataset_source,
        })
    }
}
