// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The flow execution details.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataIntegrationFlowExecution {
    /// <p>The flow execution's instanceId.</p>
    pub instance_id: ::std::string::String,
    /// <p>The flow execution's flowName.</p>
    pub flow_name: ::std::string::String,
    /// <p>The flow executionId.</p>
    pub execution_id: ::std::string::String,
    /// <p>The status of flow execution.</p>
    pub status: ::std::option::Option<crate::types::DataIntegrationFlowExecutionStatus>,
    /// <p>The source information for a flow execution.</p>
    pub source_info: ::std::option::Option<crate::types::DataIntegrationFlowExecutionSourceInfo>,
    /// <p>The failure message (if any) of failed flow execution.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>The flow execution start timestamp.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The flow execution end timestamp.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The flow execution output metadata.</p>
    pub output_metadata: ::std::option::Option<crate::types::DataIntegrationFlowExecutionOutputMetadata>,
}
impl DataIntegrationFlowExecution {
    /// <p>The flow execution's instanceId.</p>
    pub fn instance_id(&self) -> &str {
        use std::ops::Deref;
        self.instance_id.deref()
    }
    /// <p>The flow execution's flowName.</p>
    pub fn flow_name(&self) -> &str {
        use std::ops::Deref;
        self.flow_name.deref()
    }
    /// <p>The flow executionId.</p>
    pub fn execution_id(&self) -> &str {
        use std::ops::Deref;
        self.execution_id.deref()
    }
    /// <p>The status of flow execution.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::DataIntegrationFlowExecutionStatus> {
        self.status.as_ref()
    }
    /// <p>The source information for a flow execution.</p>
    pub fn source_info(&self) -> ::std::option::Option<&crate::types::DataIntegrationFlowExecutionSourceInfo> {
        self.source_info.as_ref()
    }
    /// <p>The failure message (if any) of failed flow execution.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The flow execution start timestamp.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The flow execution end timestamp.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The flow execution output metadata.</p>
    pub fn output_metadata(&self) -> ::std::option::Option<&crate::types::DataIntegrationFlowExecutionOutputMetadata> {
        self.output_metadata.as_ref()
    }
}
impl DataIntegrationFlowExecution {
    /// Creates a new builder-style object to manufacture [`DataIntegrationFlowExecution`](crate::types::DataIntegrationFlowExecution).
    pub fn builder() -> crate::types::builders::DataIntegrationFlowExecutionBuilder {
        crate::types::builders::DataIntegrationFlowExecutionBuilder::default()
    }
}

/// A builder for [`DataIntegrationFlowExecution`](crate::types::DataIntegrationFlowExecution).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataIntegrationFlowExecutionBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) flow_name: ::std::option::Option<::std::string::String>,
    pub(crate) execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::DataIntegrationFlowExecutionStatus>,
    pub(crate) source_info: ::std::option::Option<crate::types::DataIntegrationFlowExecutionSourceInfo>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) output_metadata: ::std::option::Option<crate::types::DataIntegrationFlowExecutionOutputMetadata>,
}
impl DataIntegrationFlowExecutionBuilder {
    /// <p>The flow execution's instanceId.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The flow execution's instanceId.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The flow execution's instanceId.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The flow execution's flowName.</p>
    /// This field is required.
    pub fn flow_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.flow_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The flow execution's flowName.</p>
    pub fn set_flow_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.flow_name = input;
        self
    }
    /// <p>The flow execution's flowName.</p>
    pub fn get_flow_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.flow_name
    }
    /// <p>The flow executionId.</p>
    /// This field is required.
    pub fn execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The flow executionId.</p>
    pub fn set_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_id = input;
        self
    }
    /// <p>The flow executionId.</p>
    pub fn get_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_id
    }
    /// <p>The status of flow execution.</p>
    pub fn status(mut self, input: crate::types::DataIntegrationFlowExecutionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of flow execution.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DataIntegrationFlowExecutionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of flow execution.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DataIntegrationFlowExecutionStatus> {
        &self.status
    }
    /// <p>The source information for a flow execution.</p>
    pub fn source_info(mut self, input: crate::types::DataIntegrationFlowExecutionSourceInfo) -> Self {
        self.source_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source information for a flow execution.</p>
    pub fn set_source_info(mut self, input: ::std::option::Option<crate::types::DataIntegrationFlowExecutionSourceInfo>) -> Self {
        self.source_info = input;
        self
    }
    /// <p>The source information for a flow execution.</p>
    pub fn get_source_info(&self) -> &::std::option::Option<crate::types::DataIntegrationFlowExecutionSourceInfo> {
        &self.source_info
    }
    /// <p>The failure message (if any) of failed flow execution.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The failure message (if any) of failed flow execution.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The failure message (if any) of failed flow execution.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>The flow execution start timestamp.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The flow execution start timestamp.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The flow execution start timestamp.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The flow execution end timestamp.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The flow execution end timestamp.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The flow execution end timestamp.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The flow execution output metadata.</p>
    pub fn output_metadata(mut self, input: crate::types::DataIntegrationFlowExecutionOutputMetadata) -> Self {
        self.output_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>The flow execution output metadata.</p>
    pub fn set_output_metadata(mut self, input: ::std::option::Option<crate::types::DataIntegrationFlowExecutionOutputMetadata>) -> Self {
        self.output_metadata = input;
        self
    }
    /// <p>The flow execution output metadata.</p>
    pub fn get_output_metadata(&self) -> &::std::option::Option<crate::types::DataIntegrationFlowExecutionOutputMetadata> {
        &self.output_metadata
    }
    /// Consumes the builder and constructs a [`DataIntegrationFlowExecution`](crate::types::DataIntegrationFlowExecution).
    /// This method will fail if any of the following fields are not set:
    /// - [`instance_id`](crate::types::builders::DataIntegrationFlowExecutionBuilder::instance_id)
    /// - [`flow_name`](crate::types::builders::DataIntegrationFlowExecutionBuilder::flow_name)
    /// - [`execution_id`](crate::types::builders::DataIntegrationFlowExecutionBuilder::execution_id)
    pub fn build(self) -> ::std::result::Result<crate::types::DataIntegrationFlowExecution, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataIntegrationFlowExecution {
            instance_id: self.instance_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "instance_id",
                    "instance_id was not specified but it is required when building DataIntegrationFlowExecution",
                )
            })?,
            flow_name: self.flow_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "flow_name",
                    "flow_name was not specified but it is required when building DataIntegrationFlowExecution",
                )
            })?,
            execution_id: self.execution_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "execution_id",
                    "execution_id was not specified but it is required when building DataIntegrationFlowExecution",
                )
            })?,
            status: self.status,
            source_info: self.source_info,
            message: self.message,
            start_time: self.start_time,
            end_time: self.end_time,
            output_metadata: self.output_metadata,
        })
    }
}
