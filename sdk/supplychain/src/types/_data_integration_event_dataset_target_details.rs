// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The target dataset details for a DATASET event type.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataIntegrationEventDatasetTargetDetails {
    /// <p>The datalake dataset ARN identifier.</p>
    pub dataset_identifier: ::std::string::String,
    /// <p>The target dataset load operation type. The available options are:</p>
    /// <ul>
    /// <li>
    /// <p><b>APPEND</b> - Add new records to the dataset. Noted that this operation type will just try to append records as-is without any primary key or partition constraints.</p></li>
    /// <li>
    /// <p><b>UPSERT</b> - Modify existing records in the dataset with primary key configured, events for datasets without primary keys are not allowed. If event data contains primary keys that match records in the dataset within same partition, then those existing records (in that partition) will be updated. If primary keys do not match, new records will be added. Note that if dataset contain records with duplicate primary key values in the same partition, those duplicate records will be deduped into one updated record.</p></li>
    /// <li>
    /// <p><b>DELETE</b> - Remove existing records in the dataset with primary key configured, events for datasets without primary keys are not allowed. If event data contains primary keys that match records in the dataset within same partition, then those existing records (in that partition) will be deleted. If primary keys do not match, no actions will be done. Note that if dataset contain records with duplicate primary key values in the same partition, all those duplicates will be removed.</p></li>
    /// </ul>
    pub operation_type: crate::types::DataIntegrationEventDatasetOperationType,
    /// <p>The target dataset load execution.</p>
    pub dataset_load_execution: ::std::option::Option<crate::types::DataIntegrationEventDatasetLoadExecutionDetails>,
}
impl DataIntegrationEventDatasetTargetDetails {
    /// <p>The datalake dataset ARN identifier.</p>
    pub fn dataset_identifier(&self) -> &str {
        use std::ops::Deref;
        self.dataset_identifier.deref()
    }
    /// <p>The target dataset load operation type. The available options are:</p>
    /// <ul>
    /// <li>
    /// <p><b>APPEND</b> - Add new records to the dataset. Noted that this operation type will just try to append records as-is without any primary key or partition constraints.</p></li>
    /// <li>
    /// <p><b>UPSERT</b> - Modify existing records in the dataset with primary key configured, events for datasets without primary keys are not allowed. If event data contains primary keys that match records in the dataset within same partition, then those existing records (in that partition) will be updated. If primary keys do not match, new records will be added. Note that if dataset contain records with duplicate primary key values in the same partition, those duplicate records will be deduped into one updated record.</p></li>
    /// <li>
    /// <p><b>DELETE</b> - Remove existing records in the dataset with primary key configured, events for datasets without primary keys are not allowed. If event data contains primary keys that match records in the dataset within same partition, then those existing records (in that partition) will be deleted. If primary keys do not match, no actions will be done. Note that if dataset contain records with duplicate primary key values in the same partition, all those duplicates will be removed.</p></li>
    /// </ul>
    pub fn operation_type(&self) -> &crate::types::DataIntegrationEventDatasetOperationType {
        &self.operation_type
    }
    /// <p>The target dataset load execution.</p>
    pub fn dataset_load_execution(&self) -> ::std::option::Option<&crate::types::DataIntegrationEventDatasetLoadExecutionDetails> {
        self.dataset_load_execution.as_ref()
    }
}
impl DataIntegrationEventDatasetTargetDetails {
    /// Creates a new builder-style object to manufacture [`DataIntegrationEventDatasetTargetDetails`](crate::types::DataIntegrationEventDatasetTargetDetails).
    pub fn builder() -> crate::types::builders::DataIntegrationEventDatasetTargetDetailsBuilder {
        crate::types::builders::DataIntegrationEventDatasetTargetDetailsBuilder::default()
    }
}

/// A builder for [`DataIntegrationEventDatasetTargetDetails`](crate::types::DataIntegrationEventDatasetTargetDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataIntegrationEventDatasetTargetDetailsBuilder {
    pub(crate) dataset_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) operation_type: ::std::option::Option<crate::types::DataIntegrationEventDatasetOperationType>,
    pub(crate) dataset_load_execution: ::std::option::Option<crate::types::DataIntegrationEventDatasetLoadExecutionDetails>,
}
impl DataIntegrationEventDatasetTargetDetailsBuilder {
    /// <p>The datalake dataset ARN identifier.</p>
    /// This field is required.
    pub fn dataset_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The datalake dataset ARN identifier.</p>
    pub fn set_dataset_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_identifier = input;
        self
    }
    /// <p>The datalake dataset ARN identifier.</p>
    pub fn get_dataset_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_identifier
    }
    /// <p>The target dataset load operation type. The available options are:</p>
    /// <ul>
    /// <li>
    /// <p><b>APPEND</b> - Add new records to the dataset. Noted that this operation type will just try to append records as-is without any primary key or partition constraints.</p></li>
    /// <li>
    /// <p><b>UPSERT</b> - Modify existing records in the dataset with primary key configured, events for datasets without primary keys are not allowed. If event data contains primary keys that match records in the dataset within same partition, then those existing records (in that partition) will be updated. If primary keys do not match, new records will be added. Note that if dataset contain records with duplicate primary key values in the same partition, those duplicate records will be deduped into one updated record.</p></li>
    /// <li>
    /// <p><b>DELETE</b> - Remove existing records in the dataset with primary key configured, events for datasets without primary keys are not allowed. If event data contains primary keys that match records in the dataset within same partition, then those existing records (in that partition) will be deleted. If primary keys do not match, no actions will be done. Note that if dataset contain records with duplicate primary key values in the same partition, all those duplicates will be removed.</p></li>
    /// </ul>
    /// This field is required.
    pub fn operation_type(mut self, input: crate::types::DataIntegrationEventDatasetOperationType) -> Self {
        self.operation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target dataset load operation type. The available options are:</p>
    /// <ul>
    /// <li>
    /// <p><b>APPEND</b> - Add new records to the dataset. Noted that this operation type will just try to append records as-is without any primary key or partition constraints.</p></li>
    /// <li>
    /// <p><b>UPSERT</b> - Modify existing records in the dataset with primary key configured, events for datasets without primary keys are not allowed. If event data contains primary keys that match records in the dataset within same partition, then those existing records (in that partition) will be updated. If primary keys do not match, new records will be added. Note that if dataset contain records with duplicate primary key values in the same partition, those duplicate records will be deduped into one updated record.</p></li>
    /// <li>
    /// <p><b>DELETE</b> - Remove existing records in the dataset with primary key configured, events for datasets without primary keys are not allowed. If event data contains primary keys that match records in the dataset within same partition, then those existing records (in that partition) will be deleted. If primary keys do not match, no actions will be done. Note that if dataset contain records with duplicate primary key values in the same partition, all those duplicates will be removed.</p></li>
    /// </ul>
    pub fn set_operation_type(mut self, input: ::std::option::Option<crate::types::DataIntegrationEventDatasetOperationType>) -> Self {
        self.operation_type = input;
        self
    }
    /// <p>The target dataset load operation type. The available options are:</p>
    /// <ul>
    /// <li>
    /// <p><b>APPEND</b> - Add new records to the dataset. Noted that this operation type will just try to append records as-is without any primary key or partition constraints.</p></li>
    /// <li>
    /// <p><b>UPSERT</b> - Modify existing records in the dataset with primary key configured, events for datasets without primary keys are not allowed. If event data contains primary keys that match records in the dataset within same partition, then those existing records (in that partition) will be updated. If primary keys do not match, new records will be added. Note that if dataset contain records with duplicate primary key values in the same partition, those duplicate records will be deduped into one updated record.</p></li>
    /// <li>
    /// <p><b>DELETE</b> - Remove existing records in the dataset with primary key configured, events for datasets without primary keys are not allowed. If event data contains primary keys that match records in the dataset within same partition, then those existing records (in that partition) will be deleted. If primary keys do not match, no actions will be done. Note that if dataset contain records with duplicate primary key values in the same partition, all those duplicates will be removed.</p></li>
    /// </ul>
    pub fn get_operation_type(&self) -> &::std::option::Option<crate::types::DataIntegrationEventDatasetOperationType> {
        &self.operation_type
    }
    /// <p>The target dataset load execution.</p>
    /// This field is required.
    pub fn dataset_load_execution(mut self, input: crate::types::DataIntegrationEventDatasetLoadExecutionDetails) -> Self {
        self.dataset_load_execution = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target dataset load execution.</p>
    pub fn set_dataset_load_execution(mut self, input: ::std::option::Option<crate::types::DataIntegrationEventDatasetLoadExecutionDetails>) -> Self {
        self.dataset_load_execution = input;
        self
    }
    /// <p>The target dataset load execution.</p>
    pub fn get_dataset_load_execution(&self) -> &::std::option::Option<crate::types::DataIntegrationEventDatasetLoadExecutionDetails> {
        &self.dataset_load_execution
    }
    /// Consumes the builder and constructs a [`DataIntegrationEventDatasetTargetDetails`](crate::types::DataIntegrationEventDatasetTargetDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`dataset_identifier`](crate::types::builders::DataIntegrationEventDatasetTargetDetailsBuilder::dataset_identifier)
    /// - [`operation_type`](crate::types::builders::DataIntegrationEventDatasetTargetDetailsBuilder::operation_type)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::DataIntegrationEventDatasetTargetDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataIntegrationEventDatasetTargetDetails {
            dataset_identifier: self.dataset_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dataset_identifier",
                    "dataset_identifier was not specified but it is required when building DataIntegrationEventDatasetTargetDetails",
                )
            })?,
            operation_type: self.operation_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operation_type",
                    "operation_type was not specified but it is required when building DataIntegrationEventDatasetTargetDetails",
                )
            })?,
            dataset_load_execution: self.dataset_load_execution,
        })
    }
}
