// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The data integration event details.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataIntegrationEvent {
    /// <p>The AWS Supply Chain instance identifier.</p>
    pub instance_id: ::std::string::String,
    /// <p>The unique event identifier.</p>
    pub event_id: ::std::string::String,
    /// <p>The data event type.</p>
    pub event_type: crate::types::DataIntegrationEventType,
    /// <p>Event identifier (for example, orderId for InboundOrder) used for data sharding or partitioning.</p>
    pub event_group_id: ::std::string::String,
    /// <p>The event timestamp (in epoch seconds).</p>
    pub event_timestamp: ::aws_smithy_types::DateTime,
    /// <p>The target dataset details for a DATASET event type.</p>
    pub dataset_target_details: ::std::option::Option<crate::types::DataIntegrationEventDatasetTargetDetails>,
}
impl DataIntegrationEvent {
    /// <p>The AWS Supply Chain instance identifier.</p>
    pub fn instance_id(&self) -> &str {
        use std::ops::Deref;
        self.instance_id.deref()
    }
    /// <p>The unique event identifier.</p>
    pub fn event_id(&self) -> &str {
        use std::ops::Deref;
        self.event_id.deref()
    }
    /// <p>The data event type.</p>
    pub fn event_type(&self) -> &crate::types::DataIntegrationEventType {
        &self.event_type
    }
    /// <p>Event identifier (for example, orderId for InboundOrder) used for data sharding or partitioning.</p>
    pub fn event_group_id(&self) -> &str {
        use std::ops::Deref;
        self.event_group_id.deref()
    }
    /// <p>The event timestamp (in epoch seconds).</p>
    pub fn event_timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.event_timestamp
    }
    /// <p>The target dataset details for a DATASET event type.</p>
    pub fn dataset_target_details(&self) -> ::std::option::Option<&crate::types::DataIntegrationEventDatasetTargetDetails> {
        self.dataset_target_details.as_ref()
    }
}
impl DataIntegrationEvent {
    /// Creates a new builder-style object to manufacture [`DataIntegrationEvent`](crate::types::DataIntegrationEvent).
    pub fn builder() -> crate::types::builders::DataIntegrationEventBuilder {
        crate::types::builders::DataIntegrationEventBuilder::default()
    }
}

/// A builder for [`DataIntegrationEvent`](crate::types::DataIntegrationEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataIntegrationEventBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) event_id: ::std::option::Option<::std::string::String>,
    pub(crate) event_type: ::std::option::Option<crate::types::DataIntegrationEventType>,
    pub(crate) event_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) event_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) dataset_target_details: ::std::option::Option<crate::types::DataIntegrationEventDatasetTargetDetails>,
}
impl DataIntegrationEventBuilder {
    /// <p>The AWS Supply Chain instance identifier.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS Supply Chain instance identifier.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The AWS Supply Chain instance identifier.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The unique event identifier.</p>
    /// This field is required.
    pub fn event_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique event identifier.</p>
    pub fn set_event_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>The unique event identifier.</p>
    pub fn get_event_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_id
    }
    /// <p>The data event type.</p>
    /// This field is required.
    pub fn event_type(mut self, input: crate::types::DataIntegrationEventType) -> Self {
        self.event_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data event type.</p>
    pub fn set_event_type(mut self, input: ::std::option::Option<crate::types::DataIntegrationEventType>) -> Self {
        self.event_type = input;
        self
    }
    /// <p>The data event type.</p>
    pub fn get_event_type(&self) -> &::std::option::Option<crate::types::DataIntegrationEventType> {
        &self.event_type
    }
    /// <p>Event identifier (for example, orderId for InboundOrder) used for data sharding or partitioning.</p>
    /// This field is required.
    pub fn event_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Event identifier (for example, orderId for InboundOrder) used for data sharding or partitioning.</p>
    pub fn set_event_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_group_id = input;
        self
    }
    /// <p>Event identifier (for example, orderId for InboundOrder) used for data sharding or partitioning.</p>
    pub fn get_event_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_group_id
    }
    /// <p>The event timestamp (in epoch seconds).</p>
    /// This field is required.
    pub fn event_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.event_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The event timestamp (in epoch seconds).</p>
    pub fn set_event_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.event_timestamp = input;
        self
    }
    /// <p>The event timestamp (in epoch seconds).</p>
    pub fn get_event_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.event_timestamp
    }
    /// <p>The target dataset details for a DATASET event type.</p>
    pub fn dataset_target_details(mut self, input: crate::types::DataIntegrationEventDatasetTargetDetails) -> Self {
        self.dataset_target_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target dataset details for a DATASET event type.</p>
    pub fn set_dataset_target_details(mut self, input: ::std::option::Option<crate::types::DataIntegrationEventDatasetTargetDetails>) -> Self {
        self.dataset_target_details = input;
        self
    }
    /// <p>The target dataset details for a DATASET event type.</p>
    pub fn get_dataset_target_details(&self) -> &::std::option::Option<crate::types::DataIntegrationEventDatasetTargetDetails> {
        &self.dataset_target_details
    }
    /// Consumes the builder and constructs a [`DataIntegrationEvent`](crate::types::DataIntegrationEvent).
    /// This method will fail if any of the following fields are not set:
    /// - [`instance_id`](crate::types::builders::DataIntegrationEventBuilder::instance_id)
    /// - [`event_id`](crate::types::builders::DataIntegrationEventBuilder::event_id)
    /// - [`event_type`](crate::types::builders::DataIntegrationEventBuilder::event_type)
    /// - [`event_group_id`](crate::types::builders::DataIntegrationEventBuilder::event_group_id)
    /// - [`event_timestamp`](crate::types::builders::DataIntegrationEventBuilder::event_timestamp)
    pub fn build(self) -> ::std::result::Result<crate::types::DataIntegrationEvent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataIntegrationEvent {
            instance_id: self.instance_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "instance_id",
                    "instance_id was not specified but it is required when building DataIntegrationEvent",
                )
            })?,
            event_id: self.event_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_id",
                    "event_id was not specified but it is required when building DataIntegrationEvent",
                )
            })?,
            event_type: self.event_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_type",
                    "event_type was not specified but it is required when building DataIntegrationEvent",
                )
            })?,
            event_group_id: self.event_group_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_group_id",
                    "event_group_id was not specified but it is required when building DataIntegrationEvent",
                )
            })?,
            event_timestamp: self.event_timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_timestamp",
                    "event_timestamp was not specified but it is required when building DataIntegrationEvent",
                )
            })?,
            dataset_target_details: self.dataset_target_details,
        })
    }
}
