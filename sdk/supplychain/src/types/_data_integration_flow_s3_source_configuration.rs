// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The S3 DataIntegrationFlow source configuration parameters.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataIntegrationFlowS3SourceConfiguration {
    /// <p>The bucketName of the S3 source objects.</p>
    pub bucket_name: ::std::string::String,
    /// <p>The prefix of the S3 source objects. To trigger data ingestion, S3 files need to be put under <code>s3://<i>bucketName</i>/<i>prefix</i>/</code>.</p>
    pub prefix: ::std::string::String,
    /// <p>The other options of the S3 DataIntegrationFlow source.</p>
    pub options: ::std::option::Option<crate::types::DataIntegrationFlowS3Options>,
}
impl DataIntegrationFlowS3SourceConfiguration {
    /// <p>The bucketName of the S3 source objects.</p>
    pub fn bucket_name(&self) -> &str {
        use std::ops::Deref;
        self.bucket_name.deref()
    }
    /// <p>The prefix of the S3 source objects. To trigger data ingestion, S3 files need to be put under <code>s3://<i>bucketName</i>/<i>prefix</i>/</code>.</p>
    pub fn prefix(&self) -> &str {
        use std::ops::Deref;
        self.prefix.deref()
    }
    /// <p>The other options of the S3 DataIntegrationFlow source.</p>
    pub fn options(&self) -> ::std::option::Option<&crate::types::DataIntegrationFlowS3Options> {
        self.options.as_ref()
    }
}
impl DataIntegrationFlowS3SourceConfiguration {
    /// Creates a new builder-style object to manufacture [`DataIntegrationFlowS3SourceConfiguration`](crate::types::DataIntegrationFlowS3SourceConfiguration).
    pub fn builder() -> crate::types::builders::DataIntegrationFlowS3SourceConfigurationBuilder {
        crate::types::builders::DataIntegrationFlowS3SourceConfigurationBuilder::default()
    }
}

/// A builder for [`DataIntegrationFlowS3SourceConfiguration`](crate::types::DataIntegrationFlowS3SourceConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataIntegrationFlowS3SourceConfigurationBuilder {
    pub(crate) bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) prefix: ::std::option::Option<::std::string::String>,
    pub(crate) options: ::std::option::Option<crate::types::DataIntegrationFlowS3Options>,
}
impl DataIntegrationFlowS3SourceConfigurationBuilder {
    /// <p>The bucketName of the S3 source objects.</p>
    /// This field is required.
    pub fn bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The bucketName of the S3 source objects.</p>
    pub fn set_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_name = input;
        self
    }
    /// <p>The bucketName of the S3 source objects.</p>
    pub fn get_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_name
    }
    /// <p>The prefix of the S3 source objects. To trigger data ingestion, S3 files need to be put under <code>s3://<i>bucketName</i>/<i>prefix</i>/</code>.</p>
    /// This field is required.
    pub fn prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The prefix of the S3 source objects. To trigger data ingestion, S3 files need to be put under <code>s3://<i>bucketName</i>/<i>prefix</i>/</code>.</p>
    pub fn set_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prefix = input;
        self
    }
    /// <p>The prefix of the S3 source objects. To trigger data ingestion, S3 files need to be put under <code>s3://<i>bucketName</i>/<i>prefix</i>/</code>.</p>
    pub fn get_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.prefix
    }
    /// <p>The other options of the S3 DataIntegrationFlow source.</p>
    pub fn options(mut self, input: crate::types::DataIntegrationFlowS3Options) -> Self {
        self.options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The other options of the S3 DataIntegrationFlow source.</p>
    pub fn set_options(mut self, input: ::std::option::Option<crate::types::DataIntegrationFlowS3Options>) -> Self {
        self.options = input;
        self
    }
    /// <p>The other options of the S3 DataIntegrationFlow source.</p>
    pub fn get_options(&self) -> &::std::option::Option<crate::types::DataIntegrationFlowS3Options> {
        &self.options
    }
    /// Consumes the builder and constructs a [`DataIntegrationFlowS3SourceConfiguration`](crate::types::DataIntegrationFlowS3SourceConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`bucket_name`](crate::types::builders::DataIntegrationFlowS3SourceConfigurationBuilder::bucket_name)
    /// - [`prefix`](crate::types::builders::DataIntegrationFlowS3SourceConfigurationBuilder::prefix)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::DataIntegrationFlowS3SourceConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataIntegrationFlowS3SourceConfiguration {
            bucket_name: self.bucket_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bucket_name",
                    "bucket_name was not specified but it is required when building DataIntegrationFlowS3SourceConfiguration",
                )
            })?,
            prefix: self.prefix.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "prefix",
                    "prefix was not specified but it is required when building DataIntegrationFlowS3SourceConfiguration",
                )
            })?,
            options: self.options,
        })
    }
}
