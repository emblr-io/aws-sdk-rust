// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListReceivedDataGrantsInput {
    /// <p>The maximum number of results to be included in the next page.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The acceptance state of the data grants to list.</p>
    pub acceptance_state: ::std::option::Option<::std::vec::Vec<crate::types::AcceptanceStateFilterValue>>,
}
impl ListReceivedDataGrantsInput {
    /// <p>The maximum number of results to be included in the next page.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The acceptance state of the data grants to list.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.acceptance_state.is_none()`.
    pub fn acceptance_state(&self) -> &[crate::types::AcceptanceStateFilterValue] {
        self.acceptance_state.as_deref().unwrap_or_default()
    }
}
impl ListReceivedDataGrantsInput {
    /// Creates a new builder-style object to manufacture [`ListReceivedDataGrantsInput`](crate::operation::list_received_data_grants::ListReceivedDataGrantsInput).
    pub fn builder() -> crate::operation::list_received_data_grants::builders::ListReceivedDataGrantsInputBuilder {
        crate::operation::list_received_data_grants::builders::ListReceivedDataGrantsInputBuilder::default()
    }
}

/// A builder for [`ListReceivedDataGrantsInput`](crate::operation::list_received_data_grants::ListReceivedDataGrantsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListReceivedDataGrantsInputBuilder {
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) acceptance_state: ::std::option::Option<::std::vec::Vec<crate::types::AcceptanceStateFilterValue>>,
}
impl ListReceivedDataGrantsInputBuilder {
    /// <p>The maximum number of results to be included in the next page.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to be included in the next page.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to be included in the next page.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `acceptance_state`.
    ///
    /// To override the contents of this collection use [`set_acceptance_state`](Self::set_acceptance_state).
    ///
    /// <p>The acceptance state of the data grants to list.</p>
    pub fn acceptance_state(mut self, input: crate::types::AcceptanceStateFilterValue) -> Self {
        let mut v = self.acceptance_state.unwrap_or_default();
        v.push(input);
        self.acceptance_state = ::std::option::Option::Some(v);
        self
    }
    /// <p>The acceptance state of the data grants to list.</p>
    pub fn set_acceptance_state(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AcceptanceStateFilterValue>>) -> Self {
        self.acceptance_state = input;
        self
    }
    /// <p>The acceptance state of the data grants to list.</p>
    pub fn get_acceptance_state(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AcceptanceStateFilterValue>> {
        &self.acceptance_state
    }
    /// Consumes the builder and constructs a [`ListReceivedDataGrantsInput`](crate::operation::list_received_data_grants::ListReceivedDataGrantsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_received_data_grants::ListReceivedDataGrantsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_received_data_grants::ListReceivedDataGrantsInput {
            max_results: self.max_results,
            next_token: self.next_token,
            acceptance_state: self.acceptance_state,
        })
    }
}
