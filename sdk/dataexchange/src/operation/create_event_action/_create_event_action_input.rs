// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateEventActionInput {
    /// <p>What occurs after a certain event.</p>
    pub action: ::std::option::Option<crate::types::Action>,
    /// <p>What occurs to start an action.</p>
    pub event: ::std::option::Option<crate::types::Event>,
    /// <p>Key-value pairs that you can associate with the event action.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateEventActionInput {
    /// <p>What occurs after a certain event.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::Action> {
        self.action.as_ref()
    }
    /// <p>What occurs to start an action.</p>
    pub fn event(&self) -> ::std::option::Option<&crate::types::Event> {
        self.event.as_ref()
    }
    /// <p>Key-value pairs that you can associate with the event action.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateEventActionInput {
    /// Creates a new builder-style object to manufacture [`CreateEventActionInput`](crate::operation::create_event_action::CreateEventActionInput).
    pub fn builder() -> crate::operation::create_event_action::builders::CreateEventActionInputBuilder {
        crate::operation::create_event_action::builders::CreateEventActionInputBuilder::default()
    }
}

/// A builder for [`CreateEventActionInput`](crate::operation::create_event_action::CreateEventActionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateEventActionInputBuilder {
    pub(crate) action: ::std::option::Option<crate::types::Action>,
    pub(crate) event: ::std::option::Option<crate::types::Event>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateEventActionInputBuilder {
    /// <p>What occurs after a certain event.</p>
    /// This field is required.
    pub fn action(mut self, input: crate::types::Action) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>What occurs after a certain event.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::Action>) -> Self {
        self.action = input;
        self
    }
    /// <p>What occurs after a certain event.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::Action> {
        &self.action
    }
    /// <p>What occurs to start an action.</p>
    /// This field is required.
    pub fn event(mut self, input: crate::types::Event) -> Self {
        self.event = ::std::option::Option::Some(input);
        self
    }
    /// <p>What occurs to start an action.</p>
    pub fn set_event(mut self, input: ::std::option::Option<crate::types::Event>) -> Self {
        self.event = input;
        self
    }
    /// <p>What occurs to start an action.</p>
    pub fn get_event(&self) -> &::std::option::Option<crate::types::Event> {
        &self.event
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Key-value pairs that you can associate with the event action.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Key-value pairs that you can associate with the event action.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Key-value pairs that you can associate with the event action.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateEventActionInput`](crate::operation::create_event_action::CreateEventActionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_event_action::CreateEventActionInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_event_action::CreateEventActionInput {
            action: self.action,
            event: self.event,
            tags: self.tags,
        })
    }
}
