// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This processor deletes entries from a log event. These entries are key-value pairs.</p>
/// <p>For more information about this processor including examples, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-deleteKeys"> deleteKeys</a> in the <i>CloudWatch Logs User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteKeys {
    /// <p>The list of keys to delete.</p>
    pub with_keys: ::std::vec::Vec<::std::string::String>,
}
impl DeleteKeys {
    /// <p>The list of keys to delete.</p>
    pub fn with_keys(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.with_keys.deref()
    }
}
impl DeleteKeys {
    /// Creates a new builder-style object to manufacture [`DeleteKeys`](crate::types::DeleteKeys).
    pub fn builder() -> crate::types::builders::DeleteKeysBuilder {
        crate::types::builders::DeleteKeysBuilder::default()
    }
}

/// A builder for [`DeleteKeys`](crate::types::DeleteKeys).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeleteKeysBuilder {
    pub(crate) with_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DeleteKeysBuilder {
    /// Appends an item to `with_keys`.
    ///
    /// To override the contents of this collection use [`set_with_keys`](Self::set_with_keys).
    ///
    /// <p>The list of keys to delete.</p>
    pub fn with_keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.with_keys.unwrap_or_default();
        v.push(input.into());
        self.with_keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of keys to delete.</p>
    pub fn set_with_keys(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.with_keys = input;
        self
    }
    /// <p>The list of keys to delete.</p>
    pub fn get_with_keys(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.with_keys
    }
    /// Consumes the builder and constructs a [`DeleteKeys`](crate::types::DeleteKeys).
    /// This method will fail if any of the following fields are not set:
    /// - [`with_keys`](crate::types::builders::DeleteKeysBuilder::with_keys)
    pub fn build(self) -> ::std::result::Result<crate::types::DeleteKeys, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DeleteKeys {
            with_keys: self.with_keys.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "with_keys",
                    "with_keys was not specified but it is required when building DeleteKeys",
                )
            })?,
        })
    }
}
