// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This object contains information about this Live Tail session, including the log groups included and the log stream filters, if any.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LiveTailSessionStart {
    /// <p>The unique ID generated by CloudWatch Logs to identify this Live Tail session request.</p>
    pub request_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique ID generated by CloudWatch Logs to identify this Live Tail session.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>An array of the names and ARNs of the log groups included in this Live Tail session.</p>
    pub log_group_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>If your StartLiveTail operation request included a <code>logStreamNames</code> parameter that filtered the session to only include certain log streams, these streams are listed here.</p>
    pub log_stream_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>If your StartLiveTail operation request included a <code>logStreamNamePrefixes</code> parameter that filtered the session to only include log streams that have names that start with certain prefixes, these prefixes are listed here.</p>
    pub log_stream_name_prefixes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>An optional pattern to filter the results to include only log events that match the pattern. For example, a filter pattern of <code>error 404</code> displays only log events that include both <code>error</code> and <code>404</code>.</p>
    /// <p>For more information about filter pattern syntax, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html">Filter and Pattern Syntax</a>.</p>
    pub log_event_filter_pattern: ::std::option::Option<::std::string::String>,
}
impl LiveTailSessionStart {
    /// <p>The unique ID generated by CloudWatch Logs to identify this Live Tail session request.</p>
    pub fn request_id(&self) -> ::std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>The unique ID generated by CloudWatch Logs to identify this Live Tail session.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>An array of the names and ARNs of the log groups included in this Live Tail session.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.log_group_identifiers.is_none()`.
    pub fn log_group_identifiers(&self) -> &[::std::string::String] {
        self.log_group_identifiers.as_deref().unwrap_or_default()
    }
    /// <p>If your StartLiveTail operation request included a <code>logStreamNames</code> parameter that filtered the session to only include certain log streams, these streams are listed here.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.log_stream_names.is_none()`.
    pub fn log_stream_names(&self) -> &[::std::string::String] {
        self.log_stream_names.as_deref().unwrap_or_default()
    }
    /// <p>If your StartLiveTail operation request included a <code>logStreamNamePrefixes</code> parameter that filtered the session to only include log streams that have names that start with certain prefixes, these prefixes are listed here.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.log_stream_name_prefixes.is_none()`.
    pub fn log_stream_name_prefixes(&self) -> &[::std::string::String] {
        self.log_stream_name_prefixes.as_deref().unwrap_or_default()
    }
    /// <p>An optional pattern to filter the results to include only log events that match the pattern. For example, a filter pattern of <code>error 404</code> displays only log events that include both <code>error</code> and <code>404</code>.</p>
    /// <p>For more information about filter pattern syntax, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html">Filter and Pattern Syntax</a>.</p>
    pub fn log_event_filter_pattern(&self) -> ::std::option::Option<&str> {
        self.log_event_filter_pattern.as_deref()
    }
}
impl LiveTailSessionStart {
    /// Creates a new builder-style object to manufacture [`LiveTailSessionStart`](crate::types::LiveTailSessionStart).
    pub fn builder() -> crate::types::builders::LiveTailSessionStartBuilder {
        crate::types::builders::LiveTailSessionStartBuilder::default()
    }
}

/// A builder for [`LiveTailSessionStart`](crate::types::LiveTailSessionStart).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LiveTailSessionStartBuilder {
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) log_group_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) log_stream_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) log_stream_name_prefixes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) log_event_filter_pattern: ::std::option::Option<::std::string::String>,
}
impl LiveTailSessionStartBuilder {
    /// <p>The unique ID generated by CloudWatch Logs to identify this Live Tail session request.</p>
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID generated by CloudWatch Logs to identify this Live Tail session request.</p>
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>The unique ID generated by CloudWatch Logs to identify this Live Tail session request.</p>
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    /// <p>The unique ID generated by CloudWatch Logs to identify this Live Tail session.</p>
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID generated by CloudWatch Logs to identify this Live Tail session.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The unique ID generated by CloudWatch Logs to identify this Live Tail session.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// Appends an item to `log_group_identifiers`.
    ///
    /// To override the contents of this collection use [`set_log_group_identifiers`](Self::set_log_group_identifiers).
    ///
    /// <p>An array of the names and ARNs of the log groups included in this Live Tail session.</p>
    pub fn log_group_identifiers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.log_group_identifiers.unwrap_or_default();
        v.push(input.into());
        self.log_group_identifiers = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of the names and ARNs of the log groups included in this Live Tail session.</p>
    pub fn set_log_group_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.log_group_identifiers = input;
        self
    }
    /// <p>An array of the names and ARNs of the log groups included in this Live Tail session.</p>
    pub fn get_log_group_identifiers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.log_group_identifiers
    }
    /// Appends an item to `log_stream_names`.
    ///
    /// To override the contents of this collection use [`set_log_stream_names`](Self::set_log_stream_names).
    ///
    /// <p>If your StartLiveTail operation request included a <code>logStreamNames</code> parameter that filtered the session to only include certain log streams, these streams are listed here.</p>
    pub fn log_stream_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.log_stream_names.unwrap_or_default();
        v.push(input.into());
        self.log_stream_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>If your StartLiveTail operation request included a <code>logStreamNames</code> parameter that filtered the session to only include certain log streams, these streams are listed here.</p>
    pub fn set_log_stream_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.log_stream_names = input;
        self
    }
    /// <p>If your StartLiveTail operation request included a <code>logStreamNames</code> parameter that filtered the session to only include certain log streams, these streams are listed here.</p>
    pub fn get_log_stream_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.log_stream_names
    }
    /// Appends an item to `log_stream_name_prefixes`.
    ///
    /// To override the contents of this collection use [`set_log_stream_name_prefixes`](Self::set_log_stream_name_prefixes).
    ///
    /// <p>If your StartLiveTail operation request included a <code>logStreamNamePrefixes</code> parameter that filtered the session to only include log streams that have names that start with certain prefixes, these prefixes are listed here.</p>
    pub fn log_stream_name_prefixes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.log_stream_name_prefixes.unwrap_or_default();
        v.push(input.into());
        self.log_stream_name_prefixes = ::std::option::Option::Some(v);
        self
    }
    /// <p>If your StartLiveTail operation request included a <code>logStreamNamePrefixes</code> parameter that filtered the session to only include log streams that have names that start with certain prefixes, these prefixes are listed here.</p>
    pub fn set_log_stream_name_prefixes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.log_stream_name_prefixes = input;
        self
    }
    /// <p>If your StartLiveTail operation request included a <code>logStreamNamePrefixes</code> parameter that filtered the session to only include log streams that have names that start with certain prefixes, these prefixes are listed here.</p>
    pub fn get_log_stream_name_prefixes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.log_stream_name_prefixes
    }
    /// <p>An optional pattern to filter the results to include only log events that match the pattern. For example, a filter pattern of <code>error 404</code> displays only log events that include both <code>error</code> and <code>404</code>.</p>
    /// <p>For more information about filter pattern syntax, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html">Filter and Pattern Syntax</a>.</p>
    pub fn log_event_filter_pattern(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_event_filter_pattern = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional pattern to filter the results to include only log events that match the pattern. For example, a filter pattern of <code>error 404</code> displays only log events that include both <code>error</code> and <code>404</code>.</p>
    /// <p>For more information about filter pattern syntax, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html">Filter and Pattern Syntax</a>.</p>
    pub fn set_log_event_filter_pattern(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_event_filter_pattern = input;
        self
    }
    /// <p>An optional pattern to filter the results to include only log events that match the pattern. For example, a filter pattern of <code>error 404</code> displays only log events that include both <code>error</code> and <code>404</code>.</p>
    /// <p>For more information about filter pattern syntax, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html">Filter and Pattern Syntax</a>.</p>
    pub fn get_log_event_filter_pattern(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_event_filter_pattern
    }
    /// Consumes the builder and constructs a [`LiveTailSessionStart`](crate::types::LiveTailSessionStart).
    pub fn build(self) -> crate::types::LiveTailSessionStart {
        crate::types::LiveTailSessionStart {
            request_id: self.request_id,
            session_id: self.session_id,
            log_group_identifiers: self.log_group_identifiers,
            log_stream_names: self.log_stream_names,
            log_stream_name_prefixes: self.log_stream_name_prefixes,
            log_event_filter_pattern: self.log_event_filter_pattern,
        }
    }
}
