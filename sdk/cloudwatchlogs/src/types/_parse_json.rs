// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This processor parses log events that are in JSON format. It can extract JSON key-value pairs and place them under a destination that you specify.</p>
/// <p>Additionally, because you must have at least one parse-type processor in a transformer, you can use <code>ParseJSON</code> as that processor for JSON-format logs, so that you can also apply other processors, such as mutate processors, to these logs.</p>
/// <p>For more information about this processor including examples, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseJSON"> parseJSON</a> in the <i>CloudWatch Logs User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParseJson {
    /// <p>Path to the field in the log event that will be parsed. Use dot notation to access child fields. For example, <code>store.book</code></p>
    pub source: ::std::option::Option<::std::string::String>,
    /// <p>The location to put the parsed key value pair into. If you omit this parameter, it is placed under the root node.</p>
    pub destination: ::std::option::Option<::std::string::String>,
}
impl ParseJson {
    /// <p>Path to the field in the log event that will be parsed. Use dot notation to access child fields. For example, <code>store.book</code></p>
    pub fn source(&self) -> ::std::option::Option<&str> {
        self.source.as_deref()
    }
    /// <p>The location to put the parsed key value pair into. If you omit this parameter, it is placed under the root node.</p>
    pub fn destination(&self) -> ::std::option::Option<&str> {
        self.destination.as_deref()
    }
}
impl ParseJson {
    /// Creates a new builder-style object to manufacture [`ParseJson`](crate::types::ParseJson).
    pub fn builder() -> crate::types::builders::ParseJsonBuilder {
        crate::types::builders::ParseJsonBuilder::default()
    }
}

/// A builder for [`ParseJson`](crate::types::ParseJson).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ParseJsonBuilder {
    pub(crate) source: ::std::option::Option<::std::string::String>,
    pub(crate) destination: ::std::option::Option<::std::string::String>,
}
impl ParseJsonBuilder {
    /// <p>Path to the field in the log event that will be parsed. Use dot notation to access child fields. For example, <code>store.book</code></p>
    pub fn source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Path to the field in the log event that will be parsed. Use dot notation to access child fields. For example, <code>store.book</code></p>
    pub fn set_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// <p>Path to the field in the log event that will be parsed. Use dot notation to access child fields. For example, <code>store.book</code></p>
    pub fn get_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.source
    }
    /// <p>The location to put the parsed key value pair into. If you omit this parameter, it is placed under the root node.</p>
    pub fn destination(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The location to put the parsed key value pair into. If you omit this parameter, it is placed under the root node.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The location to put the parsed key value pair into. If you omit this parameter, it is placed under the root node.</p>
    pub fn get_destination(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination
    }
    /// Consumes the builder and constructs a [`ParseJson`](crate::types::ParseJson).
    pub fn build(self) -> crate::types::ParseJson {
        crate::types::ParseJson {
            source: self.source,
            destination: self.destination,
        }
    }
}
