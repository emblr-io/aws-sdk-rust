// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure describes one log event field that is used as an index in at least one index policy in this account.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FieldIndex {
    /// <p>If this field index appears in an index policy that applies only to a single log group, the ARN of that log group is displayed here.</p>
    pub log_group_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The string that this field index matches.</p>
    pub field_index_name: ::std::option::Option<::std::string::String>,
    /// <p>The most recent time that CloudWatch Logs scanned ingested log events to search for this field index to improve the speed of future CloudWatch Logs Insights queries that search for this field index.</p>
    pub last_scan_time: ::std::option::Option<i64>,
    /// <p>The time and date of the earliest log event that matches this field index, after the index policy that contains it was created.</p>
    pub first_event_time: ::std::option::Option<i64>,
    /// <p>The time and date of the most recent log event that matches this field index.</p>
    pub last_event_time: ::std::option::Option<i64>,
}
impl FieldIndex {
    /// <p>If this field index appears in an index policy that applies only to a single log group, the ARN of that log group is displayed here.</p>
    pub fn log_group_identifier(&self) -> ::std::option::Option<&str> {
        self.log_group_identifier.as_deref()
    }
    /// <p>The string that this field index matches.</p>
    pub fn field_index_name(&self) -> ::std::option::Option<&str> {
        self.field_index_name.as_deref()
    }
    /// <p>The most recent time that CloudWatch Logs scanned ingested log events to search for this field index to improve the speed of future CloudWatch Logs Insights queries that search for this field index.</p>
    pub fn last_scan_time(&self) -> ::std::option::Option<i64> {
        self.last_scan_time
    }
    /// <p>The time and date of the earliest log event that matches this field index, after the index policy that contains it was created.</p>
    pub fn first_event_time(&self) -> ::std::option::Option<i64> {
        self.first_event_time
    }
    /// <p>The time and date of the most recent log event that matches this field index.</p>
    pub fn last_event_time(&self) -> ::std::option::Option<i64> {
        self.last_event_time
    }
}
impl FieldIndex {
    /// Creates a new builder-style object to manufacture [`FieldIndex`](crate::types::FieldIndex).
    pub fn builder() -> crate::types::builders::FieldIndexBuilder {
        crate::types::builders::FieldIndexBuilder::default()
    }
}

/// A builder for [`FieldIndex`](crate::types::FieldIndex).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FieldIndexBuilder {
    pub(crate) log_group_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) field_index_name: ::std::option::Option<::std::string::String>,
    pub(crate) last_scan_time: ::std::option::Option<i64>,
    pub(crate) first_event_time: ::std::option::Option<i64>,
    pub(crate) last_event_time: ::std::option::Option<i64>,
}
impl FieldIndexBuilder {
    /// <p>If this field index appears in an index policy that applies only to a single log group, the ARN of that log group is displayed here.</p>
    pub fn log_group_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_group_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If this field index appears in an index policy that applies only to a single log group, the ARN of that log group is displayed here.</p>
    pub fn set_log_group_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_group_identifier = input;
        self
    }
    /// <p>If this field index appears in an index policy that applies only to a single log group, the ARN of that log group is displayed here.</p>
    pub fn get_log_group_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_group_identifier
    }
    /// <p>The string that this field index matches.</p>
    pub fn field_index_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_index_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The string that this field index matches.</p>
    pub fn set_field_index_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_index_name = input;
        self
    }
    /// <p>The string that this field index matches.</p>
    pub fn get_field_index_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_index_name
    }
    /// <p>The most recent time that CloudWatch Logs scanned ingested log events to search for this field index to improve the speed of future CloudWatch Logs Insights queries that search for this field index.</p>
    pub fn last_scan_time(mut self, input: i64) -> Self {
        self.last_scan_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The most recent time that CloudWatch Logs scanned ingested log events to search for this field index to improve the speed of future CloudWatch Logs Insights queries that search for this field index.</p>
    pub fn set_last_scan_time(mut self, input: ::std::option::Option<i64>) -> Self {
        self.last_scan_time = input;
        self
    }
    /// <p>The most recent time that CloudWatch Logs scanned ingested log events to search for this field index to improve the speed of future CloudWatch Logs Insights queries that search for this field index.</p>
    pub fn get_last_scan_time(&self) -> &::std::option::Option<i64> {
        &self.last_scan_time
    }
    /// <p>The time and date of the earliest log event that matches this field index, after the index policy that contains it was created.</p>
    pub fn first_event_time(mut self, input: i64) -> Self {
        self.first_event_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time and date of the earliest log event that matches this field index, after the index policy that contains it was created.</p>
    pub fn set_first_event_time(mut self, input: ::std::option::Option<i64>) -> Self {
        self.first_event_time = input;
        self
    }
    /// <p>The time and date of the earliest log event that matches this field index, after the index policy that contains it was created.</p>
    pub fn get_first_event_time(&self) -> &::std::option::Option<i64> {
        &self.first_event_time
    }
    /// <p>The time and date of the most recent log event that matches this field index.</p>
    pub fn last_event_time(mut self, input: i64) -> Self {
        self.last_event_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time and date of the most recent log event that matches this field index.</p>
    pub fn set_last_event_time(mut self, input: ::std::option::Option<i64>) -> Self {
        self.last_event_time = input;
        self
    }
    /// <p>The time and date of the most recent log event that matches this field index.</p>
    pub fn get_last_event_time(&self) -> &::std::option::Option<i64> {
        &self.last_event_time
    }
    /// Consumes the builder and constructs a [`FieldIndex`](crate::types::FieldIndex).
    pub fn build(self) -> crate::types::FieldIndex {
        crate::types::FieldIndex {
            log_group_identifier: self.log_group_identifier,
            field_index_name: self.field_index_name,
            last_scan_time: self.last_scan_time,
            first_event_time: self.first_event_time,
            last_event_time: self.last_event_time,
        }
    }
}
