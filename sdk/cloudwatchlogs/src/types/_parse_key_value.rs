// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This processor parses a specified field in the original log event into key-value pairs.</p>
/// <p>For more information about this processor including examples, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseKeyValue"> parseKeyValue</a> in the <i>CloudWatch Logs User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParseKeyValue {
    /// <p>Path to the field in the log event that will be parsed. Use dot notation to access child fields. For example, <code>store.book</code></p>
    pub source: ::std::option::Option<::std::string::String>,
    /// <p>The destination field to put the extracted key-value pairs into</p>
    pub destination: ::std::option::Option<::std::string::String>,
    /// <p>The field delimiter string that is used between key-value pairs in the original log events. If you omit this, the ampersand <code>&amp;</code> character is used.</p>
    pub field_delimiter: ::std::option::Option<::std::string::String>,
    /// <p>The delimiter string to use between the key and value in each pair in the transformed log event.</p>
    /// <p>If you omit this, the equal <code>=</code> character is used.</p>
    pub key_value_delimiter: ::std::option::Option<::std::string::String>,
    /// <p>If you want to add a prefix to all transformed keys, specify it here.</p>
    pub key_prefix: ::std::option::Option<::std::string::String>,
    /// <p>A value to insert into the value field in the result, when a key-value pair is not successfully split.</p>
    pub non_match_value: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether to overwrite the value if the destination key already exists. If you omit this, the default is <code>false</code>.</p>
    pub overwrite_if_exists: bool,
}
impl ParseKeyValue {
    /// <p>Path to the field in the log event that will be parsed. Use dot notation to access child fields. For example, <code>store.book</code></p>
    pub fn source(&self) -> ::std::option::Option<&str> {
        self.source.as_deref()
    }
    /// <p>The destination field to put the extracted key-value pairs into</p>
    pub fn destination(&self) -> ::std::option::Option<&str> {
        self.destination.as_deref()
    }
    /// <p>The field delimiter string that is used between key-value pairs in the original log events. If you omit this, the ampersand <code>&amp;</code> character is used.</p>
    pub fn field_delimiter(&self) -> ::std::option::Option<&str> {
        self.field_delimiter.as_deref()
    }
    /// <p>The delimiter string to use between the key and value in each pair in the transformed log event.</p>
    /// <p>If you omit this, the equal <code>=</code> character is used.</p>
    pub fn key_value_delimiter(&self) -> ::std::option::Option<&str> {
        self.key_value_delimiter.as_deref()
    }
    /// <p>If you want to add a prefix to all transformed keys, specify it here.</p>
    pub fn key_prefix(&self) -> ::std::option::Option<&str> {
        self.key_prefix.as_deref()
    }
    /// <p>A value to insert into the value field in the result, when a key-value pair is not successfully split.</p>
    pub fn non_match_value(&self) -> ::std::option::Option<&str> {
        self.non_match_value.as_deref()
    }
    /// <p>Specifies whether to overwrite the value if the destination key already exists. If you omit this, the default is <code>false</code>.</p>
    pub fn overwrite_if_exists(&self) -> bool {
        self.overwrite_if_exists
    }
}
impl ParseKeyValue {
    /// Creates a new builder-style object to manufacture [`ParseKeyValue`](crate::types::ParseKeyValue).
    pub fn builder() -> crate::types::builders::ParseKeyValueBuilder {
        crate::types::builders::ParseKeyValueBuilder::default()
    }
}

/// A builder for [`ParseKeyValue`](crate::types::ParseKeyValue).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ParseKeyValueBuilder {
    pub(crate) source: ::std::option::Option<::std::string::String>,
    pub(crate) destination: ::std::option::Option<::std::string::String>,
    pub(crate) field_delimiter: ::std::option::Option<::std::string::String>,
    pub(crate) key_value_delimiter: ::std::option::Option<::std::string::String>,
    pub(crate) key_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) non_match_value: ::std::option::Option<::std::string::String>,
    pub(crate) overwrite_if_exists: ::std::option::Option<bool>,
}
impl ParseKeyValueBuilder {
    /// <p>Path to the field in the log event that will be parsed. Use dot notation to access child fields. For example, <code>store.book</code></p>
    pub fn source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Path to the field in the log event that will be parsed. Use dot notation to access child fields. For example, <code>store.book</code></p>
    pub fn set_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// <p>Path to the field in the log event that will be parsed. Use dot notation to access child fields. For example, <code>store.book</code></p>
    pub fn get_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.source
    }
    /// <p>The destination field to put the extracted key-value pairs into</p>
    pub fn destination(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The destination field to put the extracted key-value pairs into</p>
    pub fn set_destination(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The destination field to put the extracted key-value pairs into</p>
    pub fn get_destination(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination
    }
    /// <p>The field delimiter string that is used between key-value pairs in the original log events. If you omit this, the ampersand <code>&amp;</code> character is used.</p>
    pub fn field_delimiter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_delimiter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The field delimiter string that is used between key-value pairs in the original log events. If you omit this, the ampersand <code>&amp;</code> character is used.</p>
    pub fn set_field_delimiter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_delimiter = input;
        self
    }
    /// <p>The field delimiter string that is used between key-value pairs in the original log events. If you omit this, the ampersand <code>&amp;</code> character is used.</p>
    pub fn get_field_delimiter(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_delimiter
    }
    /// <p>The delimiter string to use between the key and value in each pair in the transformed log event.</p>
    /// <p>If you omit this, the equal <code>=</code> character is used.</p>
    pub fn key_value_delimiter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_value_delimiter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The delimiter string to use between the key and value in each pair in the transformed log event.</p>
    /// <p>If you omit this, the equal <code>=</code> character is used.</p>
    pub fn set_key_value_delimiter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_value_delimiter = input;
        self
    }
    /// <p>The delimiter string to use between the key and value in each pair in the transformed log event.</p>
    /// <p>If you omit this, the equal <code>=</code> character is used.</p>
    pub fn get_key_value_delimiter(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_value_delimiter
    }
    /// <p>If you want to add a prefix to all transformed keys, specify it here.</p>
    pub fn key_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If you want to add a prefix to all transformed keys, specify it here.</p>
    pub fn set_key_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_prefix = input;
        self
    }
    /// <p>If you want to add a prefix to all transformed keys, specify it here.</p>
    pub fn get_key_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_prefix
    }
    /// <p>A value to insert into the value field in the result, when a key-value pair is not successfully split.</p>
    pub fn non_match_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.non_match_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A value to insert into the value field in the result, when a key-value pair is not successfully split.</p>
    pub fn set_non_match_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.non_match_value = input;
        self
    }
    /// <p>A value to insert into the value field in the result, when a key-value pair is not successfully split.</p>
    pub fn get_non_match_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.non_match_value
    }
    /// <p>Specifies whether to overwrite the value if the destination key already exists. If you omit this, the default is <code>false</code>.</p>
    pub fn overwrite_if_exists(mut self, input: bool) -> Self {
        self.overwrite_if_exists = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to overwrite the value if the destination key already exists. If you omit this, the default is <code>false</code>.</p>
    pub fn set_overwrite_if_exists(mut self, input: ::std::option::Option<bool>) -> Self {
        self.overwrite_if_exists = input;
        self
    }
    /// <p>Specifies whether to overwrite the value if the destination key already exists. If you omit this, the default is <code>false</code>.</p>
    pub fn get_overwrite_if_exists(&self) -> &::std::option::Option<bool> {
        &self.overwrite_if_exists
    }
    /// Consumes the builder and constructs a [`ParseKeyValue`](crate::types::ParseKeyValue).
    pub fn build(self) -> crate::types::ParseKeyValue {
        crate::types::ParseKeyValue {
            source: self.source,
            destination: self.destination,
            field_delimiter: self.field_delimiter,
            key_value_delimiter: self.key_value_delimiter,
            key_prefix: self.key_prefix,
            non_match_value: self.non_match_value,
            overwrite_if_exists: self.overwrite_if_exists.unwrap_or_default(),
        }
    }
}
