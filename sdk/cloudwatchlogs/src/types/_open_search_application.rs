// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains information about the OpenSearch Service application used for this integration. An OpenSearch Service application is the web application created by the integration with CloudWatch Logs. It hosts the vended logs dashboards.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OpenSearchApplication {
    /// <p>The endpoint of the application.</p>
    pub application_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub application_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the application.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>This structure contains information about the status of this OpenSearch Service resource.</p>
    pub status: ::std::option::Option<crate::types::OpenSearchResourceStatus>,
}
impl OpenSearchApplication {
    /// <p>The endpoint of the application.</p>
    pub fn application_endpoint(&self) -> ::std::option::Option<&str> {
        self.application_endpoint.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn application_arn(&self) -> ::std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>The ID of the application.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>This structure contains information about the status of this OpenSearch Service resource.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::OpenSearchResourceStatus> {
        self.status.as_ref()
    }
}
impl OpenSearchApplication {
    /// Creates a new builder-style object to manufacture [`OpenSearchApplication`](crate::types::OpenSearchApplication).
    pub fn builder() -> crate::types::builders::OpenSearchApplicationBuilder {
        crate::types::builders::OpenSearchApplicationBuilder::default()
    }
}

/// A builder for [`OpenSearchApplication`](crate::types::OpenSearchApplication).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OpenSearchApplicationBuilder {
    pub(crate) application_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) application_arn: ::std::option::Option<::std::string::String>,
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::OpenSearchResourceStatus>,
}
impl OpenSearchApplicationBuilder {
    /// <p>The endpoint of the application.</p>
    pub fn application_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The endpoint of the application.</p>
    pub fn set_application_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_endpoint = input;
        self
    }
    /// <p>The endpoint of the application.</p>
    pub fn get_application_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_endpoint
    }
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn application_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn set_application_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn get_application_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_arn
    }
    /// <p>The ID of the application.</p>
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the application.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The ID of the application.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>This structure contains information about the status of this OpenSearch Service resource.</p>
    pub fn status(mut self, input: crate::types::OpenSearchResourceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>This structure contains information about the status of this OpenSearch Service resource.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::OpenSearchResourceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>This structure contains information about the status of this OpenSearch Service resource.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::OpenSearchResourceStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`OpenSearchApplication`](crate::types::OpenSearchApplication).
    pub fn build(self) -> crate::types::OpenSearchApplication {
        crate::types::OpenSearchApplication {
            application_endpoint: self.application_endpoint,
            application_arn: self.application_arn,
            application_id: self.application_id,
            status: self.status,
        }
    }
}
