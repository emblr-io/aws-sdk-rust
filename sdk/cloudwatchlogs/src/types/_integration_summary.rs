// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains information about one CloudWatch Logs integration. This structure is returned by a <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_ListIntegrations.html">ListIntegrations</a> operation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IntegrationSummary {
    /// <p>The name of this integration.</p>
    pub integration_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of integration. Integrations with OpenSearch Service have the type <code>OPENSEARCH</code>.</p>
    pub integration_type: ::std::option::Option<crate::types::IntegrationType>,
    /// <p>The current status of this integration.</p>
    pub integration_status: ::std::option::Option<crate::types::IntegrationStatus>,
}
impl IntegrationSummary {
    /// <p>The name of this integration.</p>
    pub fn integration_name(&self) -> ::std::option::Option<&str> {
        self.integration_name.as_deref()
    }
    /// <p>The type of integration. Integrations with OpenSearch Service have the type <code>OPENSEARCH</code>.</p>
    pub fn integration_type(&self) -> ::std::option::Option<&crate::types::IntegrationType> {
        self.integration_type.as_ref()
    }
    /// <p>The current status of this integration.</p>
    pub fn integration_status(&self) -> ::std::option::Option<&crate::types::IntegrationStatus> {
        self.integration_status.as_ref()
    }
}
impl IntegrationSummary {
    /// Creates a new builder-style object to manufacture [`IntegrationSummary`](crate::types::IntegrationSummary).
    pub fn builder() -> crate::types::builders::IntegrationSummaryBuilder {
        crate::types::builders::IntegrationSummaryBuilder::default()
    }
}

/// A builder for [`IntegrationSummary`](crate::types::IntegrationSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IntegrationSummaryBuilder {
    pub(crate) integration_name: ::std::option::Option<::std::string::String>,
    pub(crate) integration_type: ::std::option::Option<crate::types::IntegrationType>,
    pub(crate) integration_status: ::std::option::Option<crate::types::IntegrationStatus>,
}
impl IntegrationSummaryBuilder {
    /// <p>The name of this integration.</p>
    pub fn integration_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.integration_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of this integration.</p>
    pub fn set_integration_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.integration_name = input;
        self
    }
    /// <p>The name of this integration.</p>
    pub fn get_integration_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.integration_name
    }
    /// <p>The type of integration. Integrations with OpenSearch Service have the type <code>OPENSEARCH</code>.</p>
    pub fn integration_type(mut self, input: crate::types::IntegrationType) -> Self {
        self.integration_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of integration. Integrations with OpenSearch Service have the type <code>OPENSEARCH</code>.</p>
    pub fn set_integration_type(mut self, input: ::std::option::Option<crate::types::IntegrationType>) -> Self {
        self.integration_type = input;
        self
    }
    /// <p>The type of integration. Integrations with OpenSearch Service have the type <code>OPENSEARCH</code>.</p>
    pub fn get_integration_type(&self) -> &::std::option::Option<crate::types::IntegrationType> {
        &self.integration_type
    }
    /// <p>The current status of this integration.</p>
    pub fn integration_status(mut self, input: crate::types::IntegrationStatus) -> Self {
        self.integration_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of this integration.</p>
    pub fn set_integration_status(mut self, input: ::std::option::Option<crate::types::IntegrationStatus>) -> Self {
        self.integration_status = input;
        self
    }
    /// <p>The current status of this integration.</p>
    pub fn get_integration_status(&self) -> &::std::option::Option<crate::types::IntegrationStatus> {
        &self.integration_status
    }
    /// Consumes the builder and constructs a [`IntegrationSummary`](crate::types::IntegrationSummary).
    pub fn build(self) -> crate::types::IntegrationSummary {
        crate::types::IntegrationSummary {
            integration_name: self.integration_name,
            integration_type: self.integration_type,
            integration_status: self.integration_status,
        }
    }
}
