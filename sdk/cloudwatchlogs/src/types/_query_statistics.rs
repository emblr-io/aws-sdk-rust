// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the number of log events scanned by the query, the number of log events that matched the query criteria, and the total number of bytes in the log events that were scanned.</p>
/// <p>If the query involved log groups that have field index policies, the estimated number of skipped log events and the total bytes of those skipped log events are included. Using field indexes to skip log events in queries reduces scan volume and improves performance. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatchLogs-Field-Indexing.html">Create field indexes to improve query performance and reduce scan volume</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QueryStatistics {
    /// <p>The number of log events that matched the query string.</p>
    pub records_matched: f64,
    /// <p>The total number of log events scanned during the query.</p>
    pub records_scanned: f64,
    /// <p>An estimate of the number of log events that were skipped when processing this query, because the query contained an indexed field. Skipping these entries lowers query costs and improves the query performance time. For more information about field indexes, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutIndexPolicy.html">PutIndexPolicy</a>.</p>
    pub estimated_records_skipped: f64,
    /// <p>The total number of bytes in the log events scanned during the query.</p>
    pub bytes_scanned: f64,
    /// <p>An estimate of the number of bytes in the log events that were skipped when processing this query, because the query contained an indexed field. Skipping these entries lowers query costs and improves the query performance time. For more information about field indexes, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutIndexPolicy.html">PutIndexPolicy</a>.</p>
    pub estimated_bytes_skipped: f64,
    /// <p>The number of log groups that were scanned by this query.</p>
    pub log_groups_scanned: f64,
}
impl QueryStatistics {
    /// <p>The number of log events that matched the query string.</p>
    pub fn records_matched(&self) -> f64 {
        self.records_matched
    }
    /// <p>The total number of log events scanned during the query.</p>
    pub fn records_scanned(&self) -> f64 {
        self.records_scanned
    }
    /// <p>An estimate of the number of log events that were skipped when processing this query, because the query contained an indexed field. Skipping these entries lowers query costs and improves the query performance time. For more information about field indexes, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutIndexPolicy.html">PutIndexPolicy</a>.</p>
    pub fn estimated_records_skipped(&self) -> f64 {
        self.estimated_records_skipped
    }
    /// <p>The total number of bytes in the log events scanned during the query.</p>
    pub fn bytes_scanned(&self) -> f64 {
        self.bytes_scanned
    }
    /// <p>An estimate of the number of bytes in the log events that were skipped when processing this query, because the query contained an indexed field. Skipping these entries lowers query costs and improves the query performance time. For more information about field indexes, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutIndexPolicy.html">PutIndexPolicy</a>.</p>
    pub fn estimated_bytes_skipped(&self) -> f64 {
        self.estimated_bytes_skipped
    }
    /// <p>The number of log groups that were scanned by this query.</p>
    pub fn log_groups_scanned(&self) -> f64 {
        self.log_groups_scanned
    }
}
impl QueryStatistics {
    /// Creates a new builder-style object to manufacture [`QueryStatistics`](crate::types::QueryStatistics).
    pub fn builder() -> crate::types::builders::QueryStatisticsBuilder {
        crate::types::builders::QueryStatisticsBuilder::default()
    }
}

/// A builder for [`QueryStatistics`](crate::types::QueryStatistics).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QueryStatisticsBuilder {
    pub(crate) records_matched: ::std::option::Option<f64>,
    pub(crate) records_scanned: ::std::option::Option<f64>,
    pub(crate) estimated_records_skipped: ::std::option::Option<f64>,
    pub(crate) bytes_scanned: ::std::option::Option<f64>,
    pub(crate) estimated_bytes_skipped: ::std::option::Option<f64>,
    pub(crate) log_groups_scanned: ::std::option::Option<f64>,
}
impl QueryStatisticsBuilder {
    /// <p>The number of log events that matched the query string.</p>
    pub fn records_matched(mut self, input: f64) -> Self {
        self.records_matched = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of log events that matched the query string.</p>
    pub fn set_records_matched(mut self, input: ::std::option::Option<f64>) -> Self {
        self.records_matched = input;
        self
    }
    /// <p>The number of log events that matched the query string.</p>
    pub fn get_records_matched(&self) -> &::std::option::Option<f64> {
        &self.records_matched
    }
    /// <p>The total number of log events scanned during the query.</p>
    pub fn records_scanned(mut self, input: f64) -> Self {
        self.records_scanned = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of log events scanned during the query.</p>
    pub fn set_records_scanned(mut self, input: ::std::option::Option<f64>) -> Self {
        self.records_scanned = input;
        self
    }
    /// <p>The total number of log events scanned during the query.</p>
    pub fn get_records_scanned(&self) -> &::std::option::Option<f64> {
        &self.records_scanned
    }
    /// <p>An estimate of the number of log events that were skipped when processing this query, because the query contained an indexed field. Skipping these entries lowers query costs and improves the query performance time. For more information about field indexes, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutIndexPolicy.html">PutIndexPolicy</a>.</p>
    pub fn estimated_records_skipped(mut self, input: f64) -> Self {
        self.estimated_records_skipped = ::std::option::Option::Some(input);
        self
    }
    /// <p>An estimate of the number of log events that were skipped when processing this query, because the query contained an indexed field. Skipping these entries lowers query costs and improves the query performance time. For more information about field indexes, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutIndexPolicy.html">PutIndexPolicy</a>.</p>
    pub fn set_estimated_records_skipped(mut self, input: ::std::option::Option<f64>) -> Self {
        self.estimated_records_skipped = input;
        self
    }
    /// <p>An estimate of the number of log events that were skipped when processing this query, because the query contained an indexed field. Skipping these entries lowers query costs and improves the query performance time. For more information about field indexes, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutIndexPolicy.html">PutIndexPolicy</a>.</p>
    pub fn get_estimated_records_skipped(&self) -> &::std::option::Option<f64> {
        &self.estimated_records_skipped
    }
    /// <p>The total number of bytes in the log events scanned during the query.</p>
    pub fn bytes_scanned(mut self, input: f64) -> Self {
        self.bytes_scanned = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of bytes in the log events scanned during the query.</p>
    pub fn set_bytes_scanned(mut self, input: ::std::option::Option<f64>) -> Self {
        self.bytes_scanned = input;
        self
    }
    /// <p>The total number of bytes in the log events scanned during the query.</p>
    pub fn get_bytes_scanned(&self) -> &::std::option::Option<f64> {
        &self.bytes_scanned
    }
    /// <p>An estimate of the number of bytes in the log events that were skipped when processing this query, because the query contained an indexed field. Skipping these entries lowers query costs and improves the query performance time. For more information about field indexes, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutIndexPolicy.html">PutIndexPolicy</a>.</p>
    pub fn estimated_bytes_skipped(mut self, input: f64) -> Self {
        self.estimated_bytes_skipped = ::std::option::Option::Some(input);
        self
    }
    /// <p>An estimate of the number of bytes in the log events that were skipped when processing this query, because the query contained an indexed field. Skipping these entries lowers query costs and improves the query performance time. For more information about field indexes, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutIndexPolicy.html">PutIndexPolicy</a>.</p>
    pub fn set_estimated_bytes_skipped(mut self, input: ::std::option::Option<f64>) -> Self {
        self.estimated_bytes_skipped = input;
        self
    }
    /// <p>An estimate of the number of bytes in the log events that were skipped when processing this query, because the query contained an indexed field. Skipping these entries lowers query costs and improves the query performance time. For more information about field indexes, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutIndexPolicy.html">PutIndexPolicy</a>.</p>
    pub fn get_estimated_bytes_skipped(&self) -> &::std::option::Option<f64> {
        &self.estimated_bytes_skipped
    }
    /// <p>The number of log groups that were scanned by this query.</p>
    pub fn log_groups_scanned(mut self, input: f64) -> Self {
        self.log_groups_scanned = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of log groups that were scanned by this query.</p>
    pub fn set_log_groups_scanned(mut self, input: ::std::option::Option<f64>) -> Self {
        self.log_groups_scanned = input;
        self
    }
    /// <p>The number of log groups that were scanned by this query.</p>
    pub fn get_log_groups_scanned(&self) -> &::std::option::Option<f64> {
        &self.log_groups_scanned
    }
    /// Consumes the builder and constructs a [`QueryStatistics`](crate::types::QueryStatistics).
    pub fn build(self) -> crate::types::QueryStatistics {
        crate::types::QueryStatistics {
            records_matched: self.records_matched.unwrap_or_default(),
            records_scanned: self.records_scanned.unwrap_or_default(),
            estimated_records_skipped: self.estimated_records_skipped.unwrap_or_default(),
            bytes_scanned: self.bytes_scanned.unwrap_or_default(),
            estimated_bytes_skipped: self.estimated_bytes_skipped.unwrap_or_default(),
            log_groups_scanned: self.log_groups_scanned.unwrap_or_default(),
        }
    }
}
