// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains information for one log event that has been processed by a log transformer.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TransformedLogRecord {
    /// <p>The event number.</p>
    pub event_number: i64,
    /// <p>The original log event message before it was transformed.</p>
    pub event_message: ::std::option::Option<::std::string::String>,
    /// <p>The log event message after being transformed.</p>
    pub transformed_event_message: ::std::option::Option<::std::string::String>,
}
impl TransformedLogRecord {
    /// <p>The event number.</p>
    pub fn event_number(&self) -> i64 {
        self.event_number
    }
    /// <p>The original log event message before it was transformed.</p>
    pub fn event_message(&self) -> ::std::option::Option<&str> {
        self.event_message.as_deref()
    }
    /// <p>The log event message after being transformed.</p>
    pub fn transformed_event_message(&self) -> ::std::option::Option<&str> {
        self.transformed_event_message.as_deref()
    }
}
impl TransformedLogRecord {
    /// Creates a new builder-style object to manufacture [`TransformedLogRecord`](crate::types::TransformedLogRecord).
    pub fn builder() -> crate::types::builders::TransformedLogRecordBuilder {
        crate::types::builders::TransformedLogRecordBuilder::default()
    }
}

/// A builder for [`TransformedLogRecord`](crate::types::TransformedLogRecord).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TransformedLogRecordBuilder {
    pub(crate) event_number: ::std::option::Option<i64>,
    pub(crate) event_message: ::std::option::Option<::std::string::String>,
    pub(crate) transformed_event_message: ::std::option::Option<::std::string::String>,
}
impl TransformedLogRecordBuilder {
    /// <p>The event number.</p>
    pub fn event_number(mut self, input: i64) -> Self {
        self.event_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The event number.</p>
    pub fn set_event_number(mut self, input: ::std::option::Option<i64>) -> Self {
        self.event_number = input;
        self
    }
    /// <p>The event number.</p>
    pub fn get_event_number(&self) -> &::std::option::Option<i64> {
        &self.event_number
    }
    /// <p>The original log event message before it was transformed.</p>
    pub fn event_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The original log event message before it was transformed.</p>
    pub fn set_event_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_message = input;
        self
    }
    /// <p>The original log event message before it was transformed.</p>
    pub fn get_event_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_message
    }
    /// <p>The log event message after being transformed.</p>
    pub fn transformed_event_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.transformed_event_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The log event message after being transformed.</p>
    pub fn set_transformed_event_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.transformed_event_message = input;
        self
    }
    /// <p>The log event message after being transformed.</p>
    pub fn get_transformed_event_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.transformed_event_message
    }
    /// Consumes the builder and constructs a [`TransformedLogRecord`](crate::types::TransformedLogRecord).
    pub fn build(self) -> crate::types::TransformedLogRecord {
        crate::types::TransformedLogRecord {
            event_number: self.event_number.unwrap_or_default(),
            event_message: self.event_message,
            transformed_event_message: self.transformed_event_message,
        }
    }
}
