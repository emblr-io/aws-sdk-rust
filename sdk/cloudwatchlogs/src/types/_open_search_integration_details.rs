// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains complete information about one CloudWatch Logs integration. This structure is returned by a <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_GetIntegration.html">GetIntegration</a> operation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OpenSearchIntegrationDetails {
    /// <p>This structure contains information about the OpenSearch Service data source used for this integration. This data source was created as part of the integration setup. An OpenSearch Service data source defines the source and destination for OpenSearch Service queries. It includes the role required to execute queries and write to collections.</p>
    /// <p>For more information about OpenSearch Service data sources , see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/direct-query-s3-creating.html">Creating OpenSearch Service data source integrations with Amazon S3.</a></p>
    pub data_source: ::std::option::Option<crate::types::OpenSearchDataSource>,
    /// <p>This structure contains information about the OpenSearch Service application used for this integration. An OpenSearch Service application is the web application that was created by the integration with CloudWatch Logs. It hosts the vended logs dashboards.</p>
    pub application: ::std::option::Option<crate::types::OpenSearchApplication>,
    /// <p>This structure contains information about the OpenSearch Service collection used for this integration. This collection was created as part of the integration setup. An OpenSearch Service collection is a logical grouping of one or more indexes that represent an analytics workload. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-collections.html">Creating and managing OpenSearch Service Serverless collections</a>.</p>
    pub collection: ::std::option::Option<crate::types::OpenSearchCollection>,
    /// <p>This structure contains information about the OpenSearch Service workspace used for this integration. An OpenSearch Service workspace is the collection of dashboards along with other OpenSearch Service tools. This workspace was created automatically as part of the integration setup. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/application.html">Centralized OpenSearch user interface (Dashboards) with OpenSearch Service</a>.</p>
    pub workspace: ::std::option::Option<crate::types::OpenSearchWorkspace>,
    /// <p>This structure contains information about the OpenSearch Service encryption policy used for this integration. The encryption policy was created automatically when you created the integration. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-encryption.html#serverless-encryption-policies">Encryption policies</a> in the OpenSearch Service Developer Guide.</p>
    pub encryption_policy: ::std::option::Option<crate::types::OpenSearchEncryptionPolicy>,
    /// <p>This structure contains information about the OpenSearch Service network policy used for this integration. The network policy assigns network access settings to collections. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-network.html#serverless-network-policies">Network policies</a> in the OpenSearch Service Developer Guide.</p>
    pub network_policy: ::std::option::Option<crate::types::OpenSearchNetworkPolicy>,
    /// <p>This structure contains information about the OpenSearch Service data access policy used for this integration. The access policy defines the access controls for the collection. This data access policy was automatically created as part of the integration setup. For more information about OpenSearch Service data access policies, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-data-access.html">Data access control for Amazon OpenSearch Serverless</a> in the OpenSearch Service Developer Guide.</p>
    pub access_policy: ::std::option::Option<crate::types::OpenSearchDataAccessPolicy>,
    /// <p>This structure contains information about the OpenSearch Service data lifecycle policy used for this integration. The lifecycle policy determines the lifespan of the data in the collection. It was automatically created as part of the integration setup.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-lifecycle.html">Using data lifecycle policies with OpenSearch Service Serverless</a> in the OpenSearch Service Developer Guide.</p>
    pub lifecycle_policy: ::std::option::Option<crate::types::OpenSearchLifecyclePolicy>,
}
impl OpenSearchIntegrationDetails {
    /// <p>This structure contains information about the OpenSearch Service data source used for this integration. This data source was created as part of the integration setup. An OpenSearch Service data source defines the source and destination for OpenSearch Service queries. It includes the role required to execute queries and write to collections.</p>
    /// <p>For more information about OpenSearch Service data sources , see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/direct-query-s3-creating.html">Creating OpenSearch Service data source integrations with Amazon S3.</a></p>
    pub fn data_source(&self) -> ::std::option::Option<&crate::types::OpenSearchDataSource> {
        self.data_source.as_ref()
    }
    /// <p>This structure contains information about the OpenSearch Service application used for this integration. An OpenSearch Service application is the web application that was created by the integration with CloudWatch Logs. It hosts the vended logs dashboards.</p>
    pub fn application(&self) -> ::std::option::Option<&crate::types::OpenSearchApplication> {
        self.application.as_ref()
    }
    /// <p>This structure contains information about the OpenSearch Service collection used for this integration. This collection was created as part of the integration setup. An OpenSearch Service collection is a logical grouping of one or more indexes that represent an analytics workload. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-collections.html">Creating and managing OpenSearch Service Serverless collections</a>.</p>
    pub fn collection(&self) -> ::std::option::Option<&crate::types::OpenSearchCollection> {
        self.collection.as_ref()
    }
    /// <p>This structure contains information about the OpenSearch Service workspace used for this integration. An OpenSearch Service workspace is the collection of dashboards along with other OpenSearch Service tools. This workspace was created automatically as part of the integration setup. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/application.html">Centralized OpenSearch user interface (Dashboards) with OpenSearch Service</a>.</p>
    pub fn workspace(&self) -> ::std::option::Option<&crate::types::OpenSearchWorkspace> {
        self.workspace.as_ref()
    }
    /// <p>This structure contains information about the OpenSearch Service encryption policy used for this integration. The encryption policy was created automatically when you created the integration. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-encryption.html#serverless-encryption-policies">Encryption policies</a> in the OpenSearch Service Developer Guide.</p>
    pub fn encryption_policy(&self) -> ::std::option::Option<&crate::types::OpenSearchEncryptionPolicy> {
        self.encryption_policy.as_ref()
    }
    /// <p>This structure contains information about the OpenSearch Service network policy used for this integration. The network policy assigns network access settings to collections. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-network.html#serverless-network-policies">Network policies</a> in the OpenSearch Service Developer Guide.</p>
    pub fn network_policy(&self) -> ::std::option::Option<&crate::types::OpenSearchNetworkPolicy> {
        self.network_policy.as_ref()
    }
    /// <p>This structure contains information about the OpenSearch Service data access policy used for this integration. The access policy defines the access controls for the collection. This data access policy was automatically created as part of the integration setup. For more information about OpenSearch Service data access policies, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-data-access.html">Data access control for Amazon OpenSearch Serverless</a> in the OpenSearch Service Developer Guide.</p>
    pub fn access_policy(&self) -> ::std::option::Option<&crate::types::OpenSearchDataAccessPolicy> {
        self.access_policy.as_ref()
    }
    /// <p>This structure contains information about the OpenSearch Service data lifecycle policy used for this integration. The lifecycle policy determines the lifespan of the data in the collection. It was automatically created as part of the integration setup.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-lifecycle.html">Using data lifecycle policies with OpenSearch Service Serverless</a> in the OpenSearch Service Developer Guide.</p>
    pub fn lifecycle_policy(&self) -> ::std::option::Option<&crate::types::OpenSearchLifecyclePolicy> {
        self.lifecycle_policy.as_ref()
    }
}
impl OpenSearchIntegrationDetails {
    /// Creates a new builder-style object to manufacture [`OpenSearchIntegrationDetails`](crate::types::OpenSearchIntegrationDetails).
    pub fn builder() -> crate::types::builders::OpenSearchIntegrationDetailsBuilder {
        crate::types::builders::OpenSearchIntegrationDetailsBuilder::default()
    }
}

/// A builder for [`OpenSearchIntegrationDetails`](crate::types::OpenSearchIntegrationDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OpenSearchIntegrationDetailsBuilder {
    pub(crate) data_source: ::std::option::Option<crate::types::OpenSearchDataSource>,
    pub(crate) application: ::std::option::Option<crate::types::OpenSearchApplication>,
    pub(crate) collection: ::std::option::Option<crate::types::OpenSearchCollection>,
    pub(crate) workspace: ::std::option::Option<crate::types::OpenSearchWorkspace>,
    pub(crate) encryption_policy: ::std::option::Option<crate::types::OpenSearchEncryptionPolicy>,
    pub(crate) network_policy: ::std::option::Option<crate::types::OpenSearchNetworkPolicy>,
    pub(crate) access_policy: ::std::option::Option<crate::types::OpenSearchDataAccessPolicy>,
    pub(crate) lifecycle_policy: ::std::option::Option<crate::types::OpenSearchLifecyclePolicy>,
}
impl OpenSearchIntegrationDetailsBuilder {
    /// <p>This structure contains information about the OpenSearch Service data source used for this integration. This data source was created as part of the integration setup. An OpenSearch Service data source defines the source and destination for OpenSearch Service queries. It includes the role required to execute queries and write to collections.</p>
    /// <p>For more information about OpenSearch Service data sources , see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/direct-query-s3-creating.html">Creating OpenSearch Service data source integrations with Amazon S3.</a></p>
    pub fn data_source(mut self, input: crate::types::OpenSearchDataSource) -> Self {
        self.data_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>This structure contains information about the OpenSearch Service data source used for this integration. This data source was created as part of the integration setup. An OpenSearch Service data source defines the source and destination for OpenSearch Service queries. It includes the role required to execute queries and write to collections.</p>
    /// <p>For more information about OpenSearch Service data sources , see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/direct-query-s3-creating.html">Creating OpenSearch Service data source integrations with Amazon S3.</a></p>
    pub fn set_data_source(mut self, input: ::std::option::Option<crate::types::OpenSearchDataSource>) -> Self {
        self.data_source = input;
        self
    }
    /// <p>This structure contains information about the OpenSearch Service data source used for this integration. This data source was created as part of the integration setup. An OpenSearch Service data source defines the source and destination for OpenSearch Service queries. It includes the role required to execute queries and write to collections.</p>
    /// <p>For more information about OpenSearch Service data sources , see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/direct-query-s3-creating.html">Creating OpenSearch Service data source integrations with Amazon S3.</a></p>
    pub fn get_data_source(&self) -> &::std::option::Option<crate::types::OpenSearchDataSource> {
        &self.data_source
    }
    /// <p>This structure contains information about the OpenSearch Service application used for this integration. An OpenSearch Service application is the web application that was created by the integration with CloudWatch Logs. It hosts the vended logs dashboards.</p>
    pub fn application(mut self, input: crate::types::OpenSearchApplication) -> Self {
        self.application = ::std::option::Option::Some(input);
        self
    }
    /// <p>This structure contains information about the OpenSearch Service application used for this integration. An OpenSearch Service application is the web application that was created by the integration with CloudWatch Logs. It hosts the vended logs dashboards.</p>
    pub fn set_application(mut self, input: ::std::option::Option<crate::types::OpenSearchApplication>) -> Self {
        self.application = input;
        self
    }
    /// <p>This structure contains information about the OpenSearch Service application used for this integration. An OpenSearch Service application is the web application that was created by the integration with CloudWatch Logs. It hosts the vended logs dashboards.</p>
    pub fn get_application(&self) -> &::std::option::Option<crate::types::OpenSearchApplication> {
        &self.application
    }
    /// <p>This structure contains information about the OpenSearch Service collection used for this integration. This collection was created as part of the integration setup. An OpenSearch Service collection is a logical grouping of one or more indexes that represent an analytics workload. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-collections.html">Creating and managing OpenSearch Service Serverless collections</a>.</p>
    pub fn collection(mut self, input: crate::types::OpenSearchCollection) -> Self {
        self.collection = ::std::option::Option::Some(input);
        self
    }
    /// <p>This structure contains information about the OpenSearch Service collection used for this integration. This collection was created as part of the integration setup. An OpenSearch Service collection is a logical grouping of one or more indexes that represent an analytics workload. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-collections.html">Creating and managing OpenSearch Service Serverless collections</a>.</p>
    pub fn set_collection(mut self, input: ::std::option::Option<crate::types::OpenSearchCollection>) -> Self {
        self.collection = input;
        self
    }
    /// <p>This structure contains information about the OpenSearch Service collection used for this integration. This collection was created as part of the integration setup. An OpenSearch Service collection is a logical grouping of one or more indexes that represent an analytics workload. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-collections.html">Creating and managing OpenSearch Service Serverless collections</a>.</p>
    pub fn get_collection(&self) -> &::std::option::Option<crate::types::OpenSearchCollection> {
        &self.collection
    }
    /// <p>This structure contains information about the OpenSearch Service workspace used for this integration. An OpenSearch Service workspace is the collection of dashboards along with other OpenSearch Service tools. This workspace was created automatically as part of the integration setup. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/application.html">Centralized OpenSearch user interface (Dashboards) with OpenSearch Service</a>.</p>
    pub fn workspace(mut self, input: crate::types::OpenSearchWorkspace) -> Self {
        self.workspace = ::std::option::Option::Some(input);
        self
    }
    /// <p>This structure contains information about the OpenSearch Service workspace used for this integration. An OpenSearch Service workspace is the collection of dashboards along with other OpenSearch Service tools. This workspace was created automatically as part of the integration setup. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/application.html">Centralized OpenSearch user interface (Dashboards) with OpenSearch Service</a>.</p>
    pub fn set_workspace(mut self, input: ::std::option::Option<crate::types::OpenSearchWorkspace>) -> Self {
        self.workspace = input;
        self
    }
    /// <p>This structure contains information about the OpenSearch Service workspace used for this integration. An OpenSearch Service workspace is the collection of dashboards along with other OpenSearch Service tools. This workspace was created automatically as part of the integration setup. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/application.html">Centralized OpenSearch user interface (Dashboards) with OpenSearch Service</a>.</p>
    pub fn get_workspace(&self) -> &::std::option::Option<crate::types::OpenSearchWorkspace> {
        &self.workspace
    }
    /// <p>This structure contains information about the OpenSearch Service encryption policy used for this integration. The encryption policy was created automatically when you created the integration. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-encryption.html#serverless-encryption-policies">Encryption policies</a> in the OpenSearch Service Developer Guide.</p>
    pub fn encryption_policy(mut self, input: crate::types::OpenSearchEncryptionPolicy) -> Self {
        self.encryption_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>This structure contains information about the OpenSearch Service encryption policy used for this integration. The encryption policy was created automatically when you created the integration. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-encryption.html#serverless-encryption-policies">Encryption policies</a> in the OpenSearch Service Developer Guide.</p>
    pub fn set_encryption_policy(mut self, input: ::std::option::Option<crate::types::OpenSearchEncryptionPolicy>) -> Self {
        self.encryption_policy = input;
        self
    }
    /// <p>This structure contains information about the OpenSearch Service encryption policy used for this integration. The encryption policy was created automatically when you created the integration. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-encryption.html#serverless-encryption-policies">Encryption policies</a> in the OpenSearch Service Developer Guide.</p>
    pub fn get_encryption_policy(&self) -> &::std::option::Option<crate::types::OpenSearchEncryptionPolicy> {
        &self.encryption_policy
    }
    /// <p>This structure contains information about the OpenSearch Service network policy used for this integration. The network policy assigns network access settings to collections. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-network.html#serverless-network-policies">Network policies</a> in the OpenSearch Service Developer Guide.</p>
    pub fn network_policy(mut self, input: crate::types::OpenSearchNetworkPolicy) -> Self {
        self.network_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>This structure contains information about the OpenSearch Service network policy used for this integration. The network policy assigns network access settings to collections. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-network.html#serverless-network-policies">Network policies</a> in the OpenSearch Service Developer Guide.</p>
    pub fn set_network_policy(mut self, input: ::std::option::Option<crate::types::OpenSearchNetworkPolicy>) -> Self {
        self.network_policy = input;
        self
    }
    /// <p>This structure contains information about the OpenSearch Service network policy used for this integration. The network policy assigns network access settings to collections. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-network.html#serverless-network-policies">Network policies</a> in the OpenSearch Service Developer Guide.</p>
    pub fn get_network_policy(&self) -> &::std::option::Option<crate::types::OpenSearchNetworkPolicy> {
        &self.network_policy
    }
    /// <p>This structure contains information about the OpenSearch Service data access policy used for this integration. The access policy defines the access controls for the collection. This data access policy was automatically created as part of the integration setup. For more information about OpenSearch Service data access policies, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-data-access.html">Data access control for Amazon OpenSearch Serverless</a> in the OpenSearch Service Developer Guide.</p>
    pub fn access_policy(mut self, input: crate::types::OpenSearchDataAccessPolicy) -> Self {
        self.access_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>This structure contains information about the OpenSearch Service data access policy used for this integration. The access policy defines the access controls for the collection. This data access policy was automatically created as part of the integration setup. For more information about OpenSearch Service data access policies, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-data-access.html">Data access control for Amazon OpenSearch Serverless</a> in the OpenSearch Service Developer Guide.</p>
    pub fn set_access_policy(mut self, input: ::std::option::Option<crate::types::OpenSearchDataAccessPolicy>) -> Self {
        self.access_policy = input;
        self
    }
    /// <p>This structure contains information about the OpenSearch Service data access policy used for this integration. The access policy defines the access controls for the collection. This data access policy was automatically created as part of the integration setup. For more information about OpenSearch Service data access policies, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-data-access.html">Data access control for Amazon OpenSearch Serverless</a> in the OpenSearch Service Developer Guide.</p>
    pub fn get_access_policy(&self) -> &::std::option::Option<crate::types::OpenSearchDataAccessPolicy> {
        &self.access_policy
    }
    /// <p>This structure contains information about the OpenSearch Service data lifecycle policy used for this integration. The lifecycle policy determines the lifespan of the data in the collection. It was automatically created as part of the integration setup.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-lifecycle.html">Using data lifecycle policies with OpenSearch Service Serverless</a> in the OpenSearch Service Developer Guide.</p>
    pub fn lifecycle_policy(mut self, input: crate::types::OpenSearchLifecyclePolicy) -> Self {
        self.lifecycle_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>This structure contains information about the OpenSearch Service data lifecycle policy used for this integration. The lifecycle policy determines the lifespan of the data in the collection. It was automatically created as part of the integration setup.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-lifecycle.html">Using data lifecycle policies with OpenSearch Service Serverless</a> in the OpenSearch Service Developer Guide.</p>
    pub fn set_lifecycle_policy(mut self, input: ::std::option::Option<crate::types::OpenSearchLifecyclePolicy>) -> Self {
        self.lifecycle_policy = input;
        self
    }
    /// <p>This structure contains information about the OpenSearch Service data lifecycle policy used for this integration. The lifecycle policy determines the lifespan of the data in the collection. It was automatically created as part of the integration setup.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-lifecycle.html">Using data lifecycle policies with OpenSearch Service Serverless</a> in the OpenSearch Service Developer Guide.</p>
    pub fn get_lifecycle_policy(&self) -> &::std::option::Option<crate::types::OpenSearchLifecyclePolicy> {
        &self.lifecycle_policy
    }
    /// Consumes the builder and constructs a [`OpenSearchIntegrationDetails`](crate::types::OpenSearchIntegrationDetails).
    pub fn build(self) -> crate::types::OpenSearchIntegrationDetails {
        crate::types::OpenSearchIntegrationDetails {
            data_source: self.data_source,
            application: self.application,
            collection: self.collection,
            workspace: self.workspace,
            encryption_policy: self.encryption_policy,
            network_policy: self.network_policy,
            access_policy: self.access_policy,
            lifecycle_policy: self.lifecycle_policy,
        }
    }
}
