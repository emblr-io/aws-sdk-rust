// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This processor copies values within a log event. You can also use this processor to add metadata to log events by copying the values of the following metadata keys into the log events: <code>@logGroupName</code>, <code>@logGroupStream</code>, <code>@accountId</code>, <code>@regionName</code>.</p>
/// <p>For more information about this processor including examples, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-copyValue"> copyValue</a> in the <i>CloudWatch Logs User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CopyValue {
    /// <p>An array of <code>CopyValueEntry</code> objects, where each object contains the information about one field value to copy.</p>
    pub entries: ::std::vec::Vec<crate::types::CopyValueEntry>,
}
impl CopyValue {
    /// <p>An array of <code>CopyValueEntry</code> objects, where each object contains the information about one field value to copy.</p>
    pub fn entries(&self) -> &[crate::types::CopyValueEntry] {
        use std::ops::Deref;
        self.entries.deref()
    }
}
impl CopyValue {
    /// Creates a new builder-style object to manufacture [`CopyValue`](crate::types::CopyValue).
    pub fn builder() -> crate::types::builders::CopyValueBuilder {
        crate::types::builders::CopyValueBuilder::default()
    }
}

/// A builder for [`CopyValue`](crate::types::CopyValue).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CopyValueBuilder {
    pub(crate) entries: ::std::option::Option<::std::vec::Vec<crate::types::CopyValueEntry>>,
}
impl CopyValueBuilder {
    /// Appends an item to `entries`.
    ///
    /// To override the contents of this collection use [`set_entries`](Self::set_entries).
    ///
    /// <p>An array of <code>CopyValueEntry</code> objects, where each object contains the information about one field value to copy.</p>
    pub fn entries(mut self, input: crate::types::CopyValueEntry) -> Self {
        let mut v = self.entries.unwrap_or_default();
        v.push(input);
        self.entries = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>CopyValueEntry</code> objects, where each object contains the information about one field value to copy.</p>
    pub fn set_entries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CopyValueEntry>>) -> Self {
        self.entries = input;
        self
    }
    /// <p>An array of <code>CopyValueEntry</code> objects, where each object contains the information about one field value to copy.</p>
    pub fn get_entries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CopyValueEntry>> {
        &self.entries
    }
    /// Consumes the builder and constructs a [`CopyValue`](crate::types::CopyValue).
    /// This method will fail if any of the following fields are not set:
    /// - [`entries`](crate::types::builders::CopyValueBuilder::entries)
    pub fn build(self) -> ::std::result::Result<crate::types::CopyValue, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CopyValue {
            entries: self.entries.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "entries",
                    "entries was not specified but it is required when building CopyValue",
                )
            })?,
        })
    }
}
