// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This processor converts logs into <a href="https://ocsf.io">Open Cybersecurity Schema Framework (OCSF)</a> events.</p>
/// <p>For more information about this processor including examples, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseToOCSF"> parseToOSCF</a> in the <i>CloudWatch Logs User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParseToOcsf {
    /// <p>The path to the field in the log event that you want to parse. If you omit this value, the whole log message is parsed.</p>
    pub source: ::std::option::Option<::std::string::String>,
    /// <p>Specify the service or process that produces the log events that will be converted with this processor.</p>
    pub event_source: crate::types::EventSource,
    /// <p>Specify which version of the OCSF schema to use for the transformed log events.</p>
    pub ocsf_version: crate::types::OcsfVersion,
}
impl ParseToOcsf {
    /// <p>The path to the field in the log event that you want to parse. If you omit this value, the whole log message is parsed.</p>
    pub fn source(&self) -> ::std::option::Option<&str> {
        self.source.as_deref()
    }
    /// <p>Specify the service or process that produces the log events that will be converted with this processor.</p>
    pub fn event_source(&self) -> &crate::types::EventSource {
        &self.event_source
    }
    /// <p>Specify which version of the OCSF schema to use for the transformed log events.</p>
    pub fn ocsf_version(&self) -> &crate::types::OcsfVersion {
        &self.ocsf_version
    }
}
impl ParseToOcsf {
    /// Creates a new builder-style object to manufacture [`ParseToOcsf`](crate::types::ParseToOcsf).
    pub fn builder() -> crate::types::builders::ParseToOcsfBuilder {
        crate::types::builders::ParseToOcsfBuilder::default()
    }
}

/// A builder for [`ParseToOcsf`](crate::types::ParseToOcsf).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ParseToOcsfBuilder {
    pub(crate) source: ::std::option::Option<::std::string::String>,
    pub(crate) event_source: ::std::option::Option<crate::types::EventSource>,
    pub(crate) ocsf_version: ::std::option::Option<crate::types::OcsfVersion>,
}
impl ParseToOcsfBuilder {
    /// <p>The path to the field in the log event that you want to parse. If you omit this value, the whole log message is parsed.</p>
    pub fn source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path to the field in the log event that you want to parse. If you omit this value, the whole log message is parsed.</p>
    pub fn set_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// <p>The path to the field in the log event that you want to parse. If you omit this value, the whole log message is parsed.</p>
    pub fn get_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.source
    }
    /// <p>Specify the service or process that produces the log events that will be converted with this processor.</p>
    /// This field is required.
    pub fn event_source(mut self, input: crate::types::EventSource) -> Self {
        self.event_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify the service or process that produces the log events that will be converted with this processor.</p>
    pub fn set_event_source(mut self, input: ::std::option::Option<crate::types::EventSource>) -> Self {
        self.event_source = input;
        self
    }
    /// <p>Specify the service or process that produces the log events that will be converted with this processor.</p>
    pub fn get_event_source(&self) -> &::std::option::Option<crate::types::EventSource> {
        &self.event_source
    }
    /// <p>Specify which version of the OCSF schema to use for the transformed log events.</p>
    /// This field is required.
    pub fn ocsf_version(mut self, input: crate::types::OcsfVersion) -> Self {
        self.ocsf_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify which version of the OCSF schema to use for the transformed log events.</p>
    pub fn set_ocsf_version(mut self, input: ::std::option::Option<crate::types::OcsfVersion>) -> Self {
        self.ocsf_version = input;
        self
    }
    /// <p>Specify which version of the OCSF schema to use for the transformed log events.</p>
    pub fn get_ocsf_version(&self) -> &::std::option::Option<crate::types::OcsfVersion> {
        &self.ocsf_version
    }
    /// Consumes the builder and constructs a [`ParseToOcsf`](crate::types::ParseToOcsf).
    /// This method will fail if any of the following fields are not set:
    /// - [`event_source`](crate::types::builders::ParseToOcsfBuilder::event_source)
    /// - [`ocsf_version`](crate::types::builders::ParseToOcsfBuilder::ocsf_version)
    pub fn build(self) -> ::std::result::Result<crate::types::ParseToOcsf, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ParseToOcsf {
            source: self.source,
            event_source: self.event_source.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_source",
                    "event_source was not specified but it is required when building ParseToOcsf",
                )
            })?,
            ocsf_version: self.ocsf_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ocsf_version",
                    "ocsf_version was not specified but it is required when building ParseToOcsf",
                )
            })?,
        })
    }
}
