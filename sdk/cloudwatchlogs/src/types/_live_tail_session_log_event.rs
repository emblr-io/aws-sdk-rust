// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This object contains the information for one log event returned in a Live Tail stream.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LiveTailSessionLogEvent {
    /// <p>The name of the log stream that ingested this log event.</p>
    pub log_stream_name: ::std::option::Option<::std::string::String>,
    /// <p>The name or ARN of the log group that ingested this log event.</p>
    pub log_group_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The log event message text.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp specifying when this log event was created.</p>
    pub timestamp: ::std::option::Option<i64>,
    /// <p>The timestamp specifying when this log event was ingested into the log group.</p>
    pub ingestion_time: ::std::option::Option<i64>,
}
impl LiveTailSessionLogEvent {
    /// <p>The name of the log stream that ingested this log event.</p>
    pub fn log_stream_name(&self) -> ::std::option::Option<&str> {
        self.log_stream_name.as_deref()
    }
    /// <p>The name or ARN of the log group that ingested this log event.</p>
    pub fn log_group_identifier(&self) -> ::std::option::Option<&str> {
        self.log_group_identifier.as_deref()
    }
    /// <p>The log event message text.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The timestamp specifying when this log event was created.</p>
    pub fn timestamp(&self) -> ::std::option::Option<i64> {
        self.timestamp
    }
    /// <p>The timestamp specifying when this log event was ingested into the log group.</p>
    pub fn ingestion_time(&self) -> ::std::option::Option<i64> {
        self.ingestion_time
    }
}
impl LiveTailSessionLogEvent {
    /// Creates a new builder-style object to manufacture [`LiveTailSessionLogEvent`](crate::types::LiveTailSessionLogEvent).
    pub fn builder() -> crate::types::builders::LiveTailSessionLogEventBuilder {
        crate::types::builders::LiveTailSessionLogEventBuilder::default()
    }
}

/// A builder for [`LiveTailSessionLogEvent`](crate::types::LiveTailSessionLogEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LiveTailSessionLogEventBuilder {
    pub(crate) log_stream_name: ::std::option::Option<::std::string::String>,
    pub(crate) log_group_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) timestamp: ::std::option::Option<i64>,
    pub(crate) ingestion_time: ::std::option::Option<i64>,
}
impl LiveTailSessionLogEventBuilder {
    /// <p>The name of the log stream that ingested this log event.</p>
    pub fn log_stream_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_stream_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the log stream that ingested this log event.</p>
    pub fn set_log_stream_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_stream_name = input;
        self
    }
    /// <p>The name of the log stream that ingested this log event.</p>
    pub fn get_log_stream_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_stream_name
    }
    /// <p>The name or ARN of the log group that ingested this log event.</p>
    pub fn log_group_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_group_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or ARN of the log group that ingested this log event.</p>
    pub fn set_log_group_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_group_identifier = input;
        self
    }
    /// <p>The name or ARN of the log group that ingested this log event.</p>
    pub fn get_log_group_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_group_identifier
    }
    /// <p>The log event message text.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The log event message text.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The log event message text.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>The timestamp specifying when this log event was created.</p>
    pub fn timestamp(mut self, input: i64) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp specifying when this log event was created.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<i64>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The timestamp specifying when this log event was created.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<i64> {
        &self.timestamp
    }
    /// <p>The timestamp specifying when this log event was ingested into the log group.</p>
    pub fn ingestion_time(mut self, input: i64) -> Self {
        self.ingestion_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp specifying when this log event was ingested into the log group.</p>
    pub fn set_ingestion_time(mut self, input: ::std::option::Option<i64>) -> Self {
        self.ingestion_time = input;
        self
    }
    /// <p>The timestamp specifying when this log event was ingested into the log group.</p>
    pub fn get_ingestion_time(&self) -> &::std::option::Option<i64> {
        &self.ingestion_time
    }
    /// Consumes the builder and constructs a [`LiveTailSessionLogEvent`](crate::types::LiveTailSessionLogEvent).
    pub fn build(self) -> crate::types::LiveTailSessionLogEvent {
        crate::types::LiveTailSessionLogEvent {
            log_stream_name: self.log_stream_name,
            log_group_identifier: self.log_group_identifier,
            message: self.message,
            timestamp: self.timestamp,
            ingestion_time: self.ingestion_time,
        }
    }
}
