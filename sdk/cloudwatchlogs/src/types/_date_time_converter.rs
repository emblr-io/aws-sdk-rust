// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This processor converts a datetime string into a format that you specify.</p>
/// <p>For more information about this processor including examples, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-datetimeConverter"> datetimeConverter</a> in the <i>CloudWatch Logs User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DateTimeConverter {
    /// <p>The key to apply the date conversion to.</p>
    pub source: ::std::string::String,
    /// <p>The JSON field to store the result in.</p>
    pub target: ::std::string::String,
    /// <p>The datetime format to use for the converted data in the target field.</p>
    /// <p>If you omit this, the default of <code> yyyy-MM-dd'T'HH:mm:ss.SSS'Z</code> is used.</p>
    pub target_format: ::std::option::Option<::std::string::String>,
    /// <p>A list of patterns to match against the <code>source</code> field.</p>
    pub match_patterns: ::std::vec::Vec<::std::string::String>,
    /// <p>The time zone of the source field. If you omit this, the default used is the UTC zone.</p>
    pub source_timezone: ::std::option::Option<::std::string::String>,
    /// <p>The time zone of the target field. If you omit this, the default used is the UTC zone.</p>
    pub target_timezone: ::std::option::Option<::std::string::String>,
    /// <p>The locale of the source field. If you omit this, the default of <code>locale.ROOT</code> is used.</p>
    pub locale: ::std::option::Option<::std::string::String>,
}
impl DateTimeConverter {
    /// <p>The key to apply the date conversion to.</p>
    pub fn source(&self) -> &str {
        use std::ops::Deref;
        self.source.deref()
    }
    /// <p>The JSON field to store the result in.</p>
    pub fn target(&self) -> &str {
        use std::ops::Deref;
        self.target.deref()
    }
    /// <p>The datetime format to use for the converted data in the target field.</p>
    /// <p>If you omit this, the default of <code> yyyy-MM-dd'T'HH:mm:ss.SSS'Z</code> is used.</p>
    pub fn target_format(&self) -> ::std::option::Option<&str> {
        self.target_format.as_deref()
    }
    /// <p>A list of patterns to match against the <code>source</code> field.</p>
    pub fn match_patterns(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.match_patterns.deref()
    }
    /// <p>The time zone of the source field. If you omit this, the default used is the UTC zone.</p>
    pub fn source_timezone(&self) -> ::std::option::Option<&str> {
        self.source_timezone.as_deref()
    }
    /// <p>The time zone of the target field. If you omit this, the default used is the UTC zone.</p>
    pub fn target_timezone(&self) -> ::std::option::Option<&str> {
        self.target_timezone.as_deref()
    }
    /// <p>The locale of the source field. If you omit this, the default of <code>locale.ROOT</code> is used.</p>
    pub fn locale(&self) -> ::std::option::Option<&str> {
        self.locale.as_deref()
    }
}
impl DateTimeConverter {
    /// Creates a new builder-style object to manufacture [`DateTimeConverter`](crate::types::DateTimeConverter).
    pub fn builder() -> crate::types::builders::DateTimeConverterBuilder {
        crate::types::builders::DateTimeConverterBuilder::default()
    }
}

/// A builder for [`DateTimeConverter`](crate::types::DateTimeConverter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DateTimeConverterBuilder {
    pub(crate) source: ::std::option::Option<::std::string::String>,
    pub(crate) target: ::std::option::Option<::std::string::String>,
    pub(crate) target_format: ::std::option::Option<::std::string::String>,
    pub(crate) match_patterns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) source_timezone: ::std::option::Option<::std::string::String>,
    pub(crate) target_timezone: ::std::option::Option<::std::string::String>,
    pub(crate) locale: ::std::option::Option<::std::string::String>,
}
impl DateTimeConverterBuilder {
    /// <p>The key to apply the date conversion to.</p>
    /// This field is required.
    pub fn source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key to apply the date conversion to.</p>
    pub fn set_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// <p>The key to apply the date conversion to.</p>
    pub fn get_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.source
    }
    /// <p>The JSON field to store the result in.</p>
    /// This field is required.
    pub fn target(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The JSON field to store the result in.</p>
    pub fn set_target(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target = input;
        self
    }
    /// <p>The JSON field to store the result in.</p>
    pub fn get_target(&self) -> &::std::option::Option<::std::string::String> {
        &self.target
    }
    /// <p>The datetime format to use for the converted data in the target field.</p>
    /// <p>If you omit this, the default of <code> yyyy-MM-dd'T'HH:mm:ss.SSS'Z</code> is used.</p>
    pub fn target_format(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_format = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The datetime format to use for the converted data in the target field.</p>
    /// <p>If you omit this, the default of <code> yyyy-MM-dd'T'HH:mm:ss.SSS'Z</code> is used.</p>
    pub fn set_target_format(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_format = input;
        self
    }
    /// <p>The datetime format to use for the converted data in the target field.</p>
    /// <p>If you omit this, the default of <code> yyyy-MM-dd'T'HH:mm:ss.SSS'Z</code> is used.</p>
    pub fn get_target_format(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_format
    }
    /// Appends an item to `match_patterns`.
    ///
    /// To override the contents of this collection use [`set_match_patterns`](Self::set_match_patterns).
    ///
    /// <p>A list of patterns to match against the <code>source</code> field.</p>
    pub fn match_patterns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.match_patterns.unwrap_or_default();
        v.push(input.into());
        self.match_patterns = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of patterns to match against the <code>source</code> field.</p>
    pub fn set_match_patterns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.match_patterns = input;
        self
    }
    /// <p>A list of patterns to match against the <code>source</code> field.</p>
    pub fn get_match_patterns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.match_patterns
    }
    /// <p>The time zone of the source field. If you omit this, the default used is the UTC zone.</p>
    pub fn source_timezone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_timezone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time zone of the source field. If you omit this, the default used is the UTC zone.</p>
    pub fn set_source_timezone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_timezone = input;
        self
    }
    /// <p>The time zone of the source field. If you omit this, the default used is the UTC zone.</p>
    pub fn get_source_timezone(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_timezone
    }
    /// <p>The time zone of the target field. If you omit this, the default used is the UTC zone.</p>
    pub fn target_timezone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_timezone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time zone of the target field. If you omit this, the default used is the UTC zone.</p>
    pub fn set_target_timezone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_timezone = input;
        self
    }
    /// <p>The time zone of the target field. If you omit this, the default used is the UTC zone.</p>
    pub fn get_target_timezone(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_timezone
    }
    /// <p>The locale of the source field. If you omit this, the default of <code>locale.ROOT</code> is used.</p>
    pub fn locale(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.locale = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The locale of the source field. If you omit this, the default of <code>locale.ROOT</code> is used.</p>
    pub fn set_locale(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.locale = input;
        self
    }
    /// <p>The locale of the source field. If you omit this, the default of <code>locale.ROOT</code> is used.</p>
    pub fn get_locale(&self) -> &::std::option::Option<::std::string::String> {
        &self.locale
    }
    /// Consumes the builder and constructs a [`DateTimeConverter`](crate::types::DateTimeConverter).
    /// This method will fail if any of the following fields are not set:
    /// - [`source`](crate::types::builders::DateTimeConverterBuilder::source)
    /// - [`target`](crate::types::builders::DateTimeConverterBuilder::target)
    /// - [`match_patterns`](crate::types::builders::DateTimeConverterBuilder::match_patterns)
    pub fn build(self) -> ::std::result::Result<crate::types::DateTimeConverter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DateTimeConverter {
            source: self.source.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source",
                    "source was not specified but it is required when building DateTimeConverter",
                )
            })?,
            target: self.target.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target",
                    "target was not specified but it is required when building DateTimeConverter",
                )
            })?,
            target_format: self.target_format,
            match_patterns: self.match_patterns.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "match_patterns",
                    "match_patterns was not specified but it is required when building DateTimeConverter",
                )
            })?,
            source_timezone: self.source_timezone,
            target_timezone: self.target_timezone,
            locale: self.locale,
        })
    }
}
