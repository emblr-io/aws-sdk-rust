// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This object defines one value type that will be converted using the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-typeConverter"> typeConverter</a> processor.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TypeConverterEntry {
    /// <p>The key with the value that is to be converted to a different type.</p>
    pub key: ::std::string::String,
    /// <p>The type to convert the field value to. Valid values are <code>integer</code>, <code>double</code>, <code>string</code> and <code>boolean</code>.</p>
    pub r#type: crate::types::Type,
}
impl TypeConverterEntry {
    /// <p>The key with the value that is to be converted to a different type.</p>
    pub fn key(&self) -> &str {
        use std::ops::Deref;
        self.key.deref()
    }
    /// <p>The type to convert the field value to. Valid values are <code>integer</code>, <code>double</code>, <code>string</code> and <code>boolean</code>.</p>
    pub fn r#type(&self) -> &crate::types::Type {
        &self.r#type
    }
}
impl TypeConverterEntry {
    /// Creates a new builder-style object to manufacture [`TypeConverterEntry`](crate::types::TypeConverterEntry).
    pub fn builder() -> crate::types::builders::TypeConverterEntryBuilder {
        crate::types::builders::TypeConverterEntryBuilder::default()
    }
}

/// A builder for [`TypeConverterEntry`](crate::types::TypeConverterEntry).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TypeConverterEntryBuilder {
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::Type>,
}
impl TypeConverterEntryBuilder {
    /// <p>The key with the value that is to be converted to a different type.</p>
    /// This field is required.
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key with the value that is to be converted to a different type.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The key with the value that is to be converted to a different type.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>The type to convert the field value to. Valid values are <code>integer</code>, <code>double</code>, <code>string</code> and <code>boolean</code>.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::Type) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type to convert the field value to. Valid values are <code>integer</code>, <code>double</code>, <code>string</code> and <code>boolean</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::Type>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type to convert the field value to. Valid values are <code>integer</code>, <code>double</code>, <code>string</code> and <code>boolean</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::Type> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`TypeConverterEntry`](crate::types::TypeConverterEntry).
    /// This method will fail if any of the following fields are not set:
    /// - [`key`](crate::types::builders::TypeConverterEntryBuilder::key)
    /// - [`r#type`](crate::types::builders::TypeConverterEntryBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::TypeConverterEntry, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TypeConverterEntry {
            key: self.key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key",
                    "key was not specified but it is required when building TypeConverterEntry",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building TypeConverterEntry",
                )
            })?,
        })
    }
}
