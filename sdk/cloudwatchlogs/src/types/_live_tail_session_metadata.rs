// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This object contains the metadata for one <code>LiveTailSessionUpdate</code> structure. It indicates whether that update includes only a sample of 500 log events out of a larger number of ingested log events, or if it contains all of the matching log events ingested during that second of time.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LiveTailSessionMetadata {
    /// <p>If this is <code>true</code>, then more than 500 log events matched the request for this update, and the <code>sessionResults</code> includes a sample of 500 of those events.</p>
    /// <p>If this is <code>false</code>, then 500 or fewer log events matched the request for this update, so no sampling was necessary. In this case, the <code>sessionResults</code> array includes all log events that matched your request during this time.</p>
    pub sampled: bool,
}
impl LiveTailSessionMetadata {
    /// <p>If this is <code>true</code>, then more than 500 log events matched the request for this update, and the <code>sessionResults</code> includes a sample of 500 of those events.</p>
    /// <p>If this is <code>false</code>, then 500 or fewer log events matched the request for this update, so no sampling was necessary. In this case, the <code>sessionResults</code> array includes all log events that matched your request during this time.</p>
    pub fn sampled(&self) -> bool {
        self.sampled
    }
}
impl LiveTailSessionMetadata {
    /// Creates a new builder-style object to manufacture [`LiveTailSessionMetadata`](crate::types::LiveTailSessionMetadata).
    pub fn builder() -> crate::types::builders::LiveTailSessionMetadataBuilder {
        crate::types::builders::LiveTailSessionMetadataBuilder::default()
    }
}

/// A builder for [`LiveTailSessionMetadata`](crate::types::LiveTailSessionMetadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LiveTailSessionMetadataBuilder {
    pub(crate) sampled: ::std::option::Option<bool>,
}
impl LiveTailSessionMetadataBuilder {
    /// <p>If this is <code>true</code>, then more than 500 log events matched the request for this update, and the <code>sessionResults</code> includes a sample of 500 of those events.</p>
    /// <p>If this is <code>false</code>, then 500 or fewer log events matched the request for this update, so no sampling was necessary. In this case, the <code>sessionResults</code> array includes all log events that matched your request during this time.</p>
    pub fn sampled(mut self, input: bool) -> Self {
        self.sampled = ::std::option::Option::Some(input);
        self
    }
    /// <p>If this is <code>true</code>, then more than 500 log events matched the request for this update, and the <code>sessionResults</code> includes a sample of 500 of those events.</p>
    /// <p>If this is <code>false</code>, then 500 or fewer log events matched the request for this update, so no sampling was necessary. In this case, the <code>sessionResults</code> array includes all log events that matched your request during this time.</p>
    pub fn set_sampled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.sampled = input;
        self
    }
    /// <p>If this is <code>true</code>, then more than 500 log events matched the request for this update, and the <code>sessionResults</code> includes a sample of 500 of those events.</p>
    /// <p>If this is <code>false</code>, then 500 or fewer log events matched the request for this update, so no sampling was necessary. In this case, the <code>sessionResults</code> array includes all log events that matched your request during this time.</p>
    pub fn get_sampled(&self) -> &::std::option::Option<bool> {
        &self.sampled
    }
    /// Consumes the builder and constructs a [`LiveTailSessionMetadata`](crate::types::LiveTailSessionMetadata).
    pub fn build(self) -> crate::types::LiveTailSessionMetadata {
        crate::types::LiveTailSessionMetadata {
            sampled: self.sampled.unwrap_or_default(),
        }
    }
}
