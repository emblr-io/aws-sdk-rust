// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This processor matches a keyâ€™s value against a regular expression and replaces all matches with a replacement string.</p>
/// <p>For more information about this processor including examples, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-substituteString"> substituteString</a> in the <i>CloudWatch Logs User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SubstituteString {
    /// <p>An array of objects, where each object contains the information about one key to match and replace.</p>
    pub entries: ::std::vec::Vec<crate::types::SubstituteStringEntry>,
}
impl SubstituteString {
    /// <p>An array of objects, where each object contains the information about one key to match and replace.</p>
    pub fn entries(&self) -> &[crate::types::SubstituteStringEntry] {
        use std::ops::Deref;
        self.entries.deref()
    }
}
impl SubstituteString {
    /// Creates a new builder-style object to manufacture [`SubstituteString`](crate::types::SubstituteString).
    pub fn builder() -> crate::types::builders::SubstituteStringBuilder {
        crate::types::builders::SubstituteStringBuilder::default()
    }
}

/// A builder for [`SubstituteString`](crate::types::SubstituteString).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SubstituteStringBuilder {
    pub(crate) entries: ::std::option::Option<::std::vec::Vec<crate::types::SubstituteStringEntry>>,
}
impl SubstituteStringBuilder {
    /// Appends an item to `entries`.
    ///
    /// To override the contents of this collection use [`set_entries`](Self::set_entries).
    ///
    /// <p>An array of objects, where each object contains the information about one key to match and replace.</p>
    pub fn entries(mut self, input: crate::types::SubstituteStringEntry) -> Self {
        let mut v = self.entries.unwrap_or_default();
        v.push(input);
        self.entries = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects, where each object contains the information about one key to match and replace.</p>
    pub fn set_entries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SubstituteStringEntry>>) -> Self {
        self.entries = input;
        self
    }
    /// <p>An array of objects, where each object contains the information about one key to match and replace.</p>
    pub fn get_entries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SubstituteStringEntry>> {
        &self.entries
    }
    /// Consumes the builder and constructs a [`SubstituteString`](crate::types::SubstituteString).
    /// This method will fail if any of the following fields are not set:
    /// - [`entries`](crate::types::builders::SubstituteStringBuilder::entries)
    pub fn build(self) -> ::std::result::Result<crate::types::SubstituteString, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SubstituteString {
            entries: self.entries.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "entries",
                    "entries was not specified but it is required when building SubstituteString",
                )
            })?,
        })
    }
}
