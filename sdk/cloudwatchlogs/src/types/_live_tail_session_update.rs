// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This object contains the log events and metadata for a Live Tail session.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LiveTailSessionUpdate {
    /// <p>This object contains the session metadata for a Live Tail session.</p>
    pub session_metadata: ::std::option::Option<crate::types::LiveTailSessionMetadata>,
    /// <p>An array, where each member of the array includes the information for one log event in the Live Tail session.</p>
    /// <p>A <code>sessionResults</code> array can include as many as 500 log events. If the number of log events matching the request exceeds 500 per second, the log events are sampled down to 500 log events to be included in each <code>sessionUpdate</code> structure.</p>
    pub session_results: ::std::option::Option<::std::vec::Vec<crate::types::LiveTailSessionLogEvent>>,
}
impl LiveTailSessionUpdate {
    /// <p>This object contains the session metadata for a Live Tail session.</p>
    pub fn session_metadata(&self) -> ::std::option::Option<&crate::types::LiveTailSessionMetadata> {
        self.session_metadata.as_ref()
    }
    /// <p>An array, where each member of the array includes the information for one log event in the Live Tail session.</p>
    /// <p>A <code>sessionResults</code> array can include as many as 500 log events. If the number of log events matching the request exceeds 500 per second, the log events are sampled down to 500 log events to be included in each <code>sessionUpdate</code> structure.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.session_results.is_none()`.
    pub fn session_results(&self) -> &[crate::types::LiveTailSessionLogEvent] {
        self.session_results.as_deref().unwrap_or_default()
    }
}
impl LiveTailSessionUpdate {
    /// Creates a new builder-style object to manufacture [`LiveTailSessionUpdate`](crate::types::LiveTailSessionUpdate).
    pub fn builder() -> crate::types::builders::LiveTailSessionUpdateBuilder {
        crate::types::builders::LiveTailSessionUpdateBuilder::default()
    }
}

/// A builder for [`LiveTailSessionUpdate`](crate::types::LiveTailSessionUpdate).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LiveTailSessionUpdateBuilder {
    pub(crate) session_metadata: ::std::option::Option<crate::types::LiveTailSessionMetadata>,
    pub(crate) session_results: ::std::option::Option<::std::vec::Vec<crate::types::LiveTailSessionLogEvent>>,
}
impl LiveTailSessionUpdateBuilder {
    /// <p>This object contains the session metadata for a Live Tail session.</p>
    pub fn session_metadata(mut self, input: crate::types::LiveTailSessionMetadata) -> Self {
        self.session_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>This object contains the session metadata for a Live Tail session.</p>
    pub fn set_session_metadata(mut self, input: ::std::option::Option<crate::types::LiveTailSessionMetadata>) -> Self {
        self.session_metadata = input;
        self
    }
    /// <p>This object contains the session metadata for a Live Tail session.</p>
    pub fn get_session_metadata(&self) -> &::std::option::Option<crate::types::LiveTailSessionMetadata> {
        &self.session_metadata
    }
    /// Appends an item to `session_results`.
    ///
    /// To override the contents of this collection use [`set_session_results`](Self::set_session_results).
    ///
    /// <p>An array, where each member of the array includes the information for one log event in the Live Tail session.</p>
    /// <p>A <code>sessionResults</code> array can include as many as 500 log events. If the number of log events matching the request exceeds 500 per second, the log events are sampled down to 500 log events to be included in each <code>sessionUpdate</code> structure.</p>
    pub fn session_results(mut self, input: crate::types::LiveTailSessionLogEvent) -> Self {
        let mut v = self.session_results.unwrap_or_default();
        v.push(input);
        self.session_results = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array, where each member of the array includes the information for one log event in the Live Tail session.</p>
    /// <p>A <code>sessionResults</code> array can include as many as 500 log events. If the number of log events matching the request exceeds 500 per second, the log events are sampled down to 500 log events to be included in each <code>sessionUpdate</code> structure.</p>
    pub fn set_session_results(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LiveTailSessionLogEvent>>) -> Self {
        self.session_results = input;
        self
    }
    /// <p>An array, where each member of the array includes the information for one log event in the Live Tail session.</p>
    /// <p>A <code>sessionResults</code> array can include as many as 500 log events. If the number of log events matching the request exceeds 500 per second, the log events are sampled down to 500 log events to be included in each <code>sessionUpdate</code> structure.</p>
    pub fn get_session_results(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LiveTailSessionLogEvent>> {
        &self.session_results
    }
    /// Consumes the builder and constructs a [`LiveTailSessionUpdate`](crate::types::LiveTailSessionUpdate).
    pub fn build(self) -> crate::types::LiveTailSessionUpdate {
        crate::types::LiveTailSessionUpdate {
            session_metadata: self.session_metadata,
            session_results: self.session_results,
        }
    }
}
