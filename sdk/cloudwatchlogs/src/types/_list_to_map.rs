// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This processor takes a list of objects that contain key fields, and converts them into a map of target keys.</p>
/// <p>For more information about this processor including examples, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-listToMap"> listToMap</a> in the <i>CloudWatch Logs User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListToMap {
    /// <p>The key in the log event that has a list of objects that will be converted to a map.</p>
    pub source: ::std::string::String,
    /// <p>The key of the field to be extracted as keys in the generated map</p>
    pub key: ::std::string::String,
    /// <p>If this is specified, the values that you specify in this parameter will be extracted from the <code>source</code> objects and put into the values of the generated map. Otherwise, original objects in the source list will be put into the values of the generated map.</p>
    pub value_key: ::std::option::Option<::std::string::String>,
    /// <p>The key of the field that will hold the generated map</p>
    pub target: ::std::option::Option<::std::string::String>,
    /// <p>A Boolean value to indicate whether the list will be flattened into single items. Specify <code>true</code> to flatten the list. The default is <code>false</code></p>
    pub flatten: bool,
    /// <p>If you set <code>flatten</code> to <code>true</code>, use <code>flattenedElement</code> to specify which element, <code>first</code> or <code>last</code>, to keep.</p>
    /// <p>You must specify this parameter if <code>flatten</code> is <code>true</code></p>
    pub flattened_element: ::std::option::Option<crate::types::FlattenedElement>,
}
impl ListToMap {
    /// <p>The key in the log event that has a list of objects that will be converted to a map.</p>
    pub fn source(&self) -> &str {
        use std::ops::Deref;
        self.source.deref()
    }
    /// <p>The key of the field to be extracted as keys in the generated map</p>
    pub fn key(&self) -> &str {
        use std::ops::Deref;
        self.key.deref()
    }
    /// <p>If this is specified, the values that you specify in this parameter will be extracted from the <code>source</code> objects and put into the values of the generated map. Otherwise, original objects in the source list will be put into the values of the generated map.</p>
    pub fn value_key(&self) -> ::std::option::Option<&str> {
        self.value_key.as_deref()
    }
    /// <p>The key of the field that will hold the generated map</p>
    pub fn target(&self) -> ::std::option::Option<&str> {
        self.target.as_deref()
    }
    /// <p>A Boolean value to indicate whether the list will be flattened into single items. Specify <code>true</code> to flatten the list. The default is <code>false</code></p>
    pub fn flatten(&self) -> bool {
        self.flatten
    }
    /// <p>If you set <code>flatten</code> to <code>true</code>, use <code>flattenedElement</code> to specify which element, <code>first</code> or <code>last</code>, to keep.</p>
    /// <p>You must specify this parameter if <code>flatten</code> is <code>true</code></p>
    pub fn flattened_element(&self) -> ::std::option::Option<&crate::types::FlattenedElement> {
        self.flattened_element.as_ref()
    }
}
impl ListToMap {
    /// Creates a new builder-style object to manufacture [`ListToMap`](crate::types::ListToMap).
    pub fn builder() -> crate::types::builders::ListToMapBuilder {
        crate::types::builders::ListToMapBuilder::default()
    }
}

/// A builder for [`ListToMap`](crate::types::ListToMap).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListToMapBuilder {
    pub(crate) source: ::std::option::Option<::std::string::String>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) value_key: ::std::option::Option<::std::string::String>,
    pub(crate) target: ::std::option::Option<::std::string::String>,
    pub(crate) flatten: ::std::option::Option<bool>,
    pub(crate) flattened_element: ::std::option::Option<crate::types::FlattenedElement>,
}
impl ListToMapBuilder {
    /// <p>The key in the log event that has a list of objects that will be converted to a map.</p>
    /// This field is required.
    pub fn source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key in the log event that has a list of objects that will be converted to a map.</p>
    pub fn set_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// <p>The key in the log event that has a list of objects that will be converted to a map.</p>
    pub fn get_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.source
    }
    /// <p>The key of the field to be extracted as keys in the generated map</p>
    /// This field is required.
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key of the field to be extracted as keys in the generated map</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The key of the field to be extracted as keys in the generated map</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>If this is specified, the values that you specify in this parameter will be extracted from the <code>source</code> objects and put into the values of the generated map. Otherwise, original objects in the source list will be put into the values of the generated map.</p>
    pub fn value_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If this is specified, the values that you specify in this parameter will be extracted from the <code>source</code> objects and put into the values of the generated map. Otherwise, original objects in the source list will be put into the values of the generated map.</p>
    pub fn set_value_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value_key = input;
        self
    }
    /// <p>If this is specified, the values that you specify in this parameter will be extracted from the <code>source</code> objects and put into the values of the generated map. Otherwise, original objects in the source list will be put into the values of the generated map.</p>
    pub fn get_value_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.value_key
    }
    /// <p>The key of the field that will hold the generated map</p>
    pub fn target(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key of the field that will hold the generated map</p>
    pub fn set_target(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target = input;
        self
    }
    /// <p>The key of the field that will hold the generated map</p>
    pub fn get_target(&self) -> &::std::option::Option<::std::string::String> {
        &self.target
    }
    /// <p>A Boolean value to indicate whether the list will be flattened into single items. Specify <code>true</code> to flatten the list. The default is <code>false</code></p>
    pub fn flatten(mut self, input: bool) -> Self {
        self.flatten = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Boolean value to indicate whether the list will be flattened into single items. Specify <code>true</code> to flatten the list. The default is <code>false</code></p>
    pub fn set_flatten(mut self, input: ::std::option::Option<bool>) -> Self {
        self.flatten = input;
        self
    }
    /// <p>A Boolean value to indicate whether the list will be flattened into single items. Specify <code>true</code> to flatten the list. The default is <code>false</code></p>
    pub fn get_flatten(&self) -> &::std::option::Option<bool> {
        &self.flatten
    }
    /// <p>If you set <code>flatten</code> to <code>true</code>, use <code>flattenedElement</code> to specify which element, <code>first</code> or <code>last</code>, to keep.</p>
    /// <p>You must specify this parameter if <code>flatten</code> is <code>true</code></p>
    pub fn flattened_element(mut self, input: crate::types::FlattenedElement) -> Self {
        self.flattened_element = ::std::option::Option::Some(input);
        self
    }
    /// <p>If you set <code>flatten</code> to <code>true</code>, use <code>flattenedElement</code> to specify which element, <code>first</code> or <code>last</code>, to keep.</p>
    /// <p>You must specify this parameter if <code>flatten</code> is <code>true</code></p>
    pub fn set_flattened_element(mut self, input: ::std::option::Option<crate::types::FlattenedElement>) -> Self {
        self.flattened_element = input;
        self
    }
    /// <p>If you set <code>flatten</code> to <code>true</code>, use <code>flattenedElement</code> to specify which element, <code>first</code> or <code>last</code>, to keep.</p>
    /// <p>You must specify this parameter if <code>flatten</code> is <code>true</code></p>
    pub fn get_flattened_element(&self) -> &::std::option::Option<crate::types::FlattenedElement> {
        &self.flattened_element
    }
    /// Consumes the builder and constructs a [`ListToMap`](crate::types::ListToMap).
    /// This method will fail if any of the following fields are not set:
    /// - [`source`](crate::types::builders::ListToMapBuilder::source)
    /// - [`key`](crate::types::builders::ListToMapBuilder::key)
    pub fn build(self) -> ::std::result::Result<crate::types::ListToMap, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ListToMap {
            source: self.source.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source",
                    "source was not specified but it is required when building ListToMap",
                )
            })?,
            key: self.key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key",
                    "key was not specified but it is required when building ListToMap",
                )
            })?,
            value_key: self.value_key,
            target: self.target,
            flatten: self.flatten.unwrap_or_default(),
            flattened_element: self.flattened_element,
        })
    }
}
