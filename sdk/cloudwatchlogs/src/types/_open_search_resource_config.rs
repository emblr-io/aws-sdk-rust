// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains configuration details about an integration between CloudWatch Logs and OpenSearch Service.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OpenSearchResourceConfig {
    /// <p>To have the vended dashboard data encrypted with KMS instead of the CloudWatch Logs default encryption method, specify the ARN of the KMS key that you want to use.</p>
    pub kms_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specify the ARN of an IAM role that CloudWatch Logs will use to create the integration. This role must have the permissions necessary to access the OpenSearch Service collection to be able to create the dashboards. For more information about the permissions needed, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/OpenSearch-Dashboards-CreateRole.html">Permissions that the integration needs</a> in the CloudWatch Logs User Guide.</p>
    pub data_source_role_arn: ::std::string::String,
    /// <p>Specify the ARNs of IAM roles and IAM users who you want to grant permission to for viewing the dashboards.</p><important>
    /// <p>In addition to specifying these users here, you must also grant them the <b>CloudWatchOpenSearchDashboardAccess</b> IAM policy. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/OpenSearch-Dashboards-UserRoles.html">IAM policies for users</a>.</p>
    /// </important>
    pub dashboard_viewer_principals: ::std::vec::Vec<::std::string::String>,
    /// <p>If you want to use an existing OpenSearch Service application for your integration with OpenSearch Service, specify it here. If you omit this, a new application will be created.</p>
    pub application_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specify how many days that you want the data derived by OpenSearch Service to be retained in the index that the dashboard refers to. This also sets the maximum time period that you can choose when viewing data in the dashboard. Choosing a longer time frame will incur additional costs.</p>
    pub retention_days: i32,
}
impl OpenSearchResourceConfig {
    /// <p>To have the vended dashboard data encrypted with KMS instead of the CloudWatch Logs default encryption method, specify the ARN of the KMS key that you want to use.</p>
    pub fn kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
    /// <p>Specify the ARN of an IAM role that CloudWatch Logs will use to create the integration. This role must have the permissions necessary to access the OpenSearch Service collection to be able to create the dashboards. For more information about the permissions needed, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/OpenSearch-Dashboards-CreateRole.html">Permissions that the integration needs</a> in the CloudWatch Logs User Guide.</p>
    pub fn data_source_role_arn(&self) -> &str {
        use std::ops::Deref;
        self.data_source_role_arn.deref()
    }
    /// <p>Specify the ARNs of IAM roles and IAM users who you want to grant permission to for viewing the dashboards.</p><important>
    /// <p>In addition to specifying these users here, you must also grant them the <b>CloudWatchOpenSearchDashboardAccess</b> IAM policy. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/OpenSearch-Dashboards-UserRoles.html">IAM policies for users</a>.</p>
    /// </important>
    pub fn dashboard_viewer_principals(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.dashboard_viewer_principals.deref()
    }
    /// <p>If you want to use an existing OpenSearch Service application for your integration with OpenSearch Service, specify it here. If you omit this, a new application will be created.</p>
    pub fn application_arn(&self) -> ::std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>Specify how many days that you want the data derived by OpenSearch Service to be retained in the index that the dashboard refers to. This also sets the maximum time period that you can choose when viewing data in the dashboard. Choosing a longer time frame will incur additional costs.</p>
    pub fn retention_days(&self) -> i32 {
        self.retention_days
    }
}
impl OpenSearchResourceConfig {
    /// Creates a new builder-style object to manufacture [`OpenSearchResourceConfig`](crate::types::OpenSearchResourceConfig).
    pub fn builder() -> crate::types::builders::OpenSearchResourceConfigBuilder {
        crate::types::builders::OpenSearchResourceConfigBuilder::default()
    }
}

/// A builder for [`OpenSearchResourceConfig`](crate::types::OpenSearchResourceConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OpenSearchResourceConfigBuilder {
    pub(crate) kms_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) data_source_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) dashboard_viewer_principals: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) application_arn: ::std::option::Option<::std::string::String>,
    pub(crate) retention_days: ::std::option::Option<i32>,
}
impl OpenSearchResourceConfigBuilder {
    /// <p>To have the vended dashboard data encrypted with KMS instead of the CloudWatch Logs default encryption method, specify the ARN of the KMS key that you want to use.</p>
    pub fn kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>To have the vended dashboard data encrypted with KMS instead of the CloudWatch Logs default encryption method, specify the ARN of the KMS key that you want to use.</p>
    pub fn set_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>To have the vended dashboard data encrypted with KMS instead of the CloudWatch Logs default encryption method, specify the ARN of the KMS key that you want to use.</p>
    pub fn get_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_arn
    }
    /// <p>Specify the ARN of an IAM role that CloudWatch Logs will use to create the integration. This role must have the permissions necessary to access the OpenSearch Service collection to be able to create the dashboards. For more information about the permissions needed, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/OpenSearch-Dashboards-CreateRole.html">Permissions that the integration needs</a> in the CloudWatch Logs User Guide.</p>
    /// This field is required.
    pub fn data_source_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_source_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify the ARN of an IAM role that CloudWatch Logs will use to create the integration. This role must have the permissions necessary to access the OpenSearch Service collection to be able to create the dashboards. For more information about the permissions needed, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/OpenSearch-Dashboards-CreateRole.html">Permissions that the integration needs</a> in the CloudWatch Logs User Guide.</p>
    pub fn set_data_source_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_source_role_arn = input;
        self
    }
    /// <p>Specify the ARN of an IAM role that CloudWatch Logs will use to create the integration. This role must have the permissions necessary to access the OpenSearch Service collection to be able to create the dashboards. For more information about the permissions needed, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/OpenSearch-Dashboards-CreateRole.html">Permissions that the integration needs</a> in the CloudWatch Logs User Guide.</p>
    pub fn get_data_source_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_source_role_arn
    }
    /// Appends an item to `dashboard_viewer_principals`.
    ///
    /// To override the contents of this collection use [`set_dashboard_viewer_principals`](Self::set_dashboard_viewer_principals).
    ///
    /// <p>Specify the ARNs of IAM roles and IAM users who you want to grant permission to for viewing the dashboards.</p><important>
    /// <p>In addition to specifying these users here, you must also grant them the <b>CloudWatchOpenSearchDashboardAccess</b> IAM policy. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/OpenSearch-Dashboards-UserRoles.html">IAM policies for users</a>.</p>
    /// </important>
    pub fn dashboard_viewer_principals(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.dashboard_viewer_principals.unwrap_or_default();
        v.push(input.into());
        self.dashboard_viewer_principals = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specify the ARNs of IAM roles and IAM users who you want to grant permission to for viewing the dashboards.</p><important>
    /// <p>In addition to specifying these users here, you must also grant them the <b>CloudWatchOpenSearchDashboardAccess</b> IAM policy. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/OpenSearch-Dashboards-UserRoles.html">IAM policies for users</a>.</p>
    /// </important>
    pub fn set_dashboard_viewer_principals(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.dashboard_viewer_principals = input;
        self
    }
    /// <p>Specify the ARNs of IAM roles and IAM users who you want to grant permission to for viewing the dashboards.</p><important>
    /// <p>In addition to specifying these users here, you must also grant them the <b>CloudWatchOpenSearchDashboardAccess</b> IAM policy. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/OpenSearch-Dashboards-UserRoles.html">IAM policies for users</a>.</p>
    /// </important>
    pub fn get_dashboard_viewer_principals(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.dashboard_viewer_principals
    }
    /// <p>If you want to use an existing OpenSearch Service application for your integration with OpenSearch Service, specify it here. If you omit this, a new application will be created.</p>
    pub fn application_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If you want to use an existing OpenSearch Service application for your integration with OpenSearch Service, specify it here. If you omit this, a new application will be created.</p>
    pub fn set_application_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_arn = input;
        self
    }
    /// <p>If you want to use an existing OpenSearch Service application for your integration with OpenSearch Service, specify it here. If you omit this, a new application will be created.</p>
    pub fn get_application_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_arn
    }
    /// <p>Specify how many days that you want the data derived by OpenSearch Service to be retained in the index that the dashboard refers to. This also sets the maximum time period that you can choose when viewing data in the dashboard. Choosing a longer time frame will incur additional costs.</p>
    /// This field is required.
    pub fn retention_days(mut self, input: i32) -> Self {
        self.retention_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify how many days that you want the data derived by OpenSearch Service to be retained in the index that the dashboard refers to. This also sets the maximum time period that you can choose when viewing data in the dashboard. Choosing a longer time frame will incur additional costs.</p>
    pub fn set_retention_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.retention_days = input;
        self
    }
    /// <p>Specify how many days that you want the data derived by OpenSearch Service to be retained in the index that the dashboard refers to. This also sets the maximum time period that you can choose when viewing data in the dashboard. Choosing a longer time frame will incur additional costs.</p>
    pub fn get_retention_days(&self) -> &::std::option::Option<i32> {
        &self.retention_days
    }
    /// Consumes the builder and constructs a [`OpenSearchResourceConfig`](crate::types::OpenSearchResourceConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`data_source_role_arn`](crate::types::builders::OpenSearchResourceConfigBuilder::data_source_role_arn)
    /// - [`dashboard_viewer_principals`](crate::types::builders::OpenSearchResourceConfigBuilder::dashboard_viewer_principals)
    /// - [`retention_days`](crate::types::builders::OpenSearchResourceConfigBuilder::retention_days)
    pub fn build(self) -> ::std::result::Result<crate::types::OpenSearchResourceConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OpenSearchResourceConfig {
            kms_key_arn: self.kms_key_arn,
            data_source_role_arn: self.data_source_role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "data_source_role_arn",
                    "data_source_role_arn was not specified but it is required when building OpenSearchResourceConfig",
                )
            })?,
            dashboard_viewer_principals: self.dashboard_viewer_principals.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dashboard_viewer_principals",
                    "dashboard_viewer_principals was not specified but it is required when building OpenSearchResourceConfig",
                )
            })?,
            application_arn: self.application_arn,
            retention_days: self.retention_days.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "retention_days",
                    "retention_days was not specified but it is required when building OpenSearchResourceConfig",
                )
            })?,
        })
    }
}
