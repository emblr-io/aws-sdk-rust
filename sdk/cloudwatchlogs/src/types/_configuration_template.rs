// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure containing information about the deafult settings and available settings that you can use to configure a <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_Delivery.html">delivery</a> or a <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeliveryDestination.html">delivery destination</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfigurationTemplate {
    /// <p>A string specifying which service this configuration template applies to. For more information about supported services see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AWS-logs-and-resource-policy.html">Enable logging from Amazon Web Services services.</a>.</p>
    pub service: ::std::option::Option<::std::string::String>,
    /// <p>A string specifying which log type this configuration template applies to.</p>
    pub log_type: ::std::option::Option<::std::string::String>,
    /// <p>A string specifying which resource type this configuration template applies to.</p>
    pub resource_type: ::std::option::Option<::std::string::String>,
    /// <p>A string specifying which destination type this configuration template applies to.</p>
    pub delivery_destination_type: ::std::option::Option<crate::types::DeliveryDestinationType>,
    /// <p>A mapping that displays the default value of each property within a delivery's configuration, if it is not specified in the request.</p>
    pub default_delivery_config_values: ::std::option::Option<crate::types::ConfigurationTemplateDeliveryConfigValues>,
    /// <p>The allowed fields that a caller can use in the <code>recordFields</code> parameter of a <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html">CreateDelivery</a> or <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UpdateDeliveryConfiguration.html">UpdateDeliveryConfiguration</a> operation.</p>
    pub allowed_fields: ::std::option::Option<::std::vec::Vec<crate::types::RecordField>>,
    /// <p>The list of delivery destination output formats that are supported by this log source.</p>
    pub allowed_output_formats: ::std::option::Option<::std::vec::Vec<crate::types::OutputFormat>>,
    /// <p>The action permissions that a caller needs to have to be able to successfully create a delivery source on the desired resource type when calling <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDeliverySource.html">PutDeliverySource</a>.</p>
    pub allowed_action_for_allow_vended_logs_delivery_for_resource: ::std::option::Option<::std::string::String>,
    /// <p>The valid values that a caller can use as field delimiters when calling <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html">CreateDelivery</a> or <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UpdateDeliveryConfiguration.html">UpdateDeliveryConfiguration</a> on a delivery that delivers in <code>Plain</code>, <code>W3C</code>, or <code>Raw</code> format.</p>
    pub allowed_field_delimiters: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The list of variable fields that can be used in the suffix path of a delivery that delivers to an S3 bucket.</p>
    pub allowed_suffix_path_fields: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ConfigurationTemplate {
    /// <p>A string specifying which service this configuration template applies to. For more information about supported services see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AWS-logs-and-resource-policy.html">Enable logging from Amazon Web Services services.</a>.</p>
    pub fn service(&self) -> ::std::option::Option<&str> {
        self.service.as_deref()
    }
    /// <p>A string specifying which log type this configuration template applies to.</p>
    pub fn log_type(&self) -> ::std::option::Option<&str> {
        self.log_type.as_deref()
    }
    /// <p>A string specifying which resource type this configuration template applies to.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>A string specifying which destination type this configuration template applies to.</p>
    pub fn delivery_destination_type(&self) -> ::std::option::Option<&crate::types::DeliveryDestinationType> {
        self.delivery_destination_type.as_ref()
    }
    /// <p>A mapping that displays the default value of each property within a delivery's configuration, if it is not specified in the request.</p>
    pub fn default_delivery_config_values(&self) -> ::std::option::Option<&crate::types::ConfigurationTemplateDeliveryConfigValues> {
        self.default_delivery_config_values.as_ref()
    }
    /// <p>The allowed fields that a caller can use in the <code>recordFields</code> parameter of a <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html">CreateDelivery</a> or <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UpdateDeliveryConfiguration.html">UpdateDeliveryConfiguration</a> operation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_fields.is_none()`.
    pub fn allowed_fields(&self) -> &[crate::types::RecordField] {
        self.allowed_fields.as_deref().unwrap_or_default()
    }
    /// <p>The list of delivery destination output formats that are supported by this log source.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_output_formats.is_none()`.
    pub fn allowed_output_formats(&self) -> &[crate::types::OutputFormat] {
        self.allowed_output_formats.as_deref().unwrap_or_default()
    }
    /// <p>The action permissions that a caller needs to have to be able to successfully create a delivery source on the desired resource type when calling <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDeliverySource.html">PutDeliverySource</a>.</p>
    pub fn allowed_action_for_allow_vended_logs_delivery_for_resource(&self) -> ::std::option::Option<&str> {
        self.allowed_action_for_allow_vended_logs_delivery_for_resource.as_deref()
    }
    /// <p>The valid values that a caller can use as field delimiters when calling <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html">CreateDelivery</a> or <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UpdateDeliveryConfiguration.html">UpdateDeliveryConfiguration</a> on a delivery that delivers in <code>Plain</code>, <code>W3C</code>, or <code>Raw</code> format.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_field_delimiters.is_none()`.
    pub fn allowed_field_delimiters(&self) -> &[::std::string::String] {
        self.allowed_field_delimiters.as_deref().unwrap_or_default()
    }
    /// <p>The list of variable fields that can be used in the suffix path of a delivery that delivers to an S3 bucket.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_suffix_path_fields.is_none()`.
    pub fn allowed_suffix_path_fields(&self) -> &[::std::string::String] {
        self.allowed_suffix_path_fields.as_deref().unwrap_or_default()
    }
}
impl ConfigurationTemplate {
    /// Creates a new builder-style object to manufacture [`ConfigurationTemplate`](crate::types::ConfigurationTemplate).
    pub fn builder() -> crate::types::builders::ConfigurationTemplateBuilder {
        crate::types::builders::ConfigurationTemplateBuilder::default()
    }
}

/// A builder for [`ConfigurationTemplate`](crate::types::ConfigurationTemplate).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConfigurationTemplateBuilder {
    pub(crate) service: ::std::option::Option<::std::string::String>,
    pub(crate) log_type: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) delivery_destination_type: ::std::option::Option<crate::types::DeliveryDestinationType>,
    pub(crate) default_delivery_config_values: ::std::option::Option<crate::types::ConfigurationTemplateDeliveryConfigValues>,
    pub(crate) allowed_fields: ::std::option::Option<::std::vec::Vec<crate::types::RecordField>>,
    pub(crate) allowed_output_formats: ::std::option::Option<::std::vec::Vec<crate::types::OutputFormat>>,
    pub(crate) allowed_action_for_allow_vended_logs_delivery_for_resource: ::std::option::Option<::std::string::String>,
    pub(crate) allowed_field_delimiters: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) allowed_suffix_path_fields: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ConfigurationTemplateBuilder {
    /// <p>A string specifying which service this configuration template applies to. For more information about supported services see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AWS-logs-and-resource-policy.html">Enable logging from Amazon Web Services services.</a>.</p>
    pub fn service(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string specifying which service this configuration template applies to. For more information about supported services see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AWS-logs-and-resource-policy.html">Enable logging from Amazon Web Services services.</a>.</p>
    pub fn set_service(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service = input;
        self
    }
    /// <p>A string specifying which service this configuration template applies to. For more information about supported services see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AWS-logs-and-resource-policy.html">Enable logging from Amazon Web Services services.</a>.</p>
    pub fn get_service(&self) -> &::std::option::Option<::std::string::String> {
        &self.service
    }
    /// <p>A string specifying which log type this configuration template applies to.</p>
    pub fn log_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string specifying which log type this configuration template applies to.</p>
    pub fn set_log_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_type = input;
        self
    }
    /// <p>A string specifying which log type this configuration template applies to.</p>
    pub fn get_log_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_type
    }
    /// <p>A string specifying which resource type this configuration template applies to.</p>
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string specifying which resource type this configuration template applies to.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>A string specifying which resource type this configuration template applies to.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// <p>A string specifying which destination type this configuration template applies to.</p>
    pub fn delivery_destination_type(mut self, input: crate::types::DeliveryDestinationType) -> Self {
        self.delivery_destination_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>A string specifying which destination type this configuration template applies to.</p>
    pub fn set_delivery_destination_type(mut self, input: ::std::option::Option<crate::types::DeliveryDestinationType>) -> Self {
        self.delivery_destination_type = input;
        self
    }
    /// <p>A string specifying which destination type this configuration template applies to.</p>
    pub fn get_delivery_destination_type(&self) -> &::std::option::Option<crate::types::DeliveryDestinationType> {
        &self.delivery_destination_type
    }
    /// <p>A mapping that displays the default value of each property within a delivery's configuration, if it is not specified in the request.</p>
    pub fn default_delivery_config_values(mut self, input: crate::types::ConfigurationTemplateDeliveryConfigValues) -> Self {
        self.default_delivery_config_values = ::std::option::Option::Some(input);
        self
    }
    /// <p>A mapping that displays the default value of each property within a delivery's configuration, if it is not specified in the request.</p>
    pub fn set_default_delivery_config_values(
        mut self,
        input: ::std::option::Option<crate::types::ConfigurationTemplateDeliveryConfigValues>,
    ) -> Self {
        self.default_delivery_config_values = input;
        self
    }
    /// <p>A mapping that displays the default value of each property within a delivery's configuration, if it is not specified in the request.</p>
    pub fn get_default_delivery_config_values(&self) -> &::std::option::Option<crate::types::ConfigurationTemplateDeliveryConfigValues> {
        &self.default_delivery_config_values
    }
    /// Appends an item to `allowed_fields`.
    ///
    /// To override the contents of this collection use [`set_allowed_fields`](Self::set_allowed_fields).
    ///
    /// <p>The allowed fields that a caller can use in the <code>recordFields</code> parameter of a <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html">CreateDelivery</a> or <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UpdateDeliveryConfiguration.html">UpdateDeliveryConfiguration</a> operation.</p>
    pub fn allowed_fields(mut self, input: crate::types::RecordField) -> Self {
        let mut v = self.allowed_fields.unwrap_or_default();
        v.push(input);
        self.allowed_fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>The allowed fields that a caller can use in the <code>recordFields</code> parameter of a <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html">CreateDelivery</a> or <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UpdateDeliveryConfiguration.html">UpdateDeliveryConfiguration</a> operation.</p>
    pub fn set_allowed_fields(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RecordField>>) -> Self {
        self.allowed_fields = input;
        self
    }
    /// <p>The allowed fields that a caller can use in the <code>recordFields</code> parameter of a <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html">CreateDelivery</a> or <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UpdateDeliveryConfiguration.html">UpdateDeliveryConfiguration</a> operation.</p>
    pub fn get_allowed_fields(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RecordField>> {
        &self.allowed_fields
    }
    /// Appends an item to `allowed_output_formats`.
    ///
    /// To override the contents of this collection use [`set_allowed_output_formats`](Self::set_allowed_output_formats).
    ///
    /// <p>The list of delivery destination output formats that are supported by this log source.</p>
    pub fn allowed_output_formats(mut self, input: crate::types::OutputFormat) -> Self {
        let mut v = self.allowed_output_formats.unwrap_or_default();
        v.push(input);
        self.allowed_output_formats = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of delivery destination output formats that are supported by this log source.</p>
    pub fn set_allowed_output_formats(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OutputFormat>>) -> Self {
        self.allowed_output_formats = input;
        self
    }
    /// <p>The list of delivery destination output formats that are supported by this log source.</p>
    pub fn get_allowed_output_formats(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OutputFormat>> {
        &self.allowed_output_formats
    }
    /// <p>The action permissions that a caller needs to have to be able to successfully create a delivery source on the desired resource type when calling <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDeliverySource.html">PutDeliverySource</a>.</p>
    pub fn allowed_action_for_allow_vended_logs_delivery_for_resource(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.allowed_action_for_allow_vended_logs_delivery_for_resource = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The action permissions that a caller needs to have to be able to successfully create a delivery source on the desired resource type when calling <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDeliverySource.html">PutDeliverySource</a>.</p>
    pub fn set_allowed_action_for_allow_vended_logs_delivery_for_resource(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.allowed_action_for_allow_vended_logs_delivery_for_resource = input;
        self
    }
    /// <p>The action permissions that a caller needs to have to be able to successfully create a delivery source on the desired resource type when calling <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDeliverySource.html">PutDeliverySource</a>.</p>
    pub fn get_allowed_action_for_allow_vended_logs_delivery_for_resource(&self) -> &::std::option::Option<::std::string::String> {
        &self.allowed_action_for_allow_vended_logs_delivery_for_resource
    }
    /// Appends an item to `allowed_field_delimiters`.
    ///
    /// To override the contents of this collection use [`set_allowed_field_delimiters`](Self::set_allowed_field_delimiters).
    ///
    /// <p>The valid values that a caller can use as field delimiters when calling <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html">CreateDelivery</a> or <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UpdateDeliveryConfiguration.html">UpdateDeliveryConfiguration</a> on a delivery that delivers in <code>Plain</code>, <code>W3C</code>, or <code>Raw</code> format.</p>
    pub fn allowed_field_delimiters(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_field_delimiters.unwrap_or_default();
        v.push(input.into());
        self.allowed_field_delimiters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The valid values that a caller can use as field delimiters when calling <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html">CreateDelivery</a> or <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UpdateDeliveryConfiguration.html">UpdateDeliveryConfiguration</a> on a delivery that delivers in <code>Plain</code>, <code>W3C</code>, or <code>Raw</code> format.</p>
    pub fn set_allowed_field_delimiters(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allowed_field_delimiters = input;
        self
    }
    /// <p>The valid values that a caller can use as field delimiters when calling <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html">CreateDelivery</a> or <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UpdateDeliveryConfiguration.html">UpdateDeliveryConfiguration</a> on a delivery that delivers in <code>Plain</code>, <code>W3C</code>, or <code>Raw</code> format.</p>
    pub fn get_allowed_field_delimiters(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allowed_field_delimiters
    }
    /// Appends an item to `allowed_suffix_path_fields`.
    ///
    /// To override the contents of this collection use [`set_allowed_suffix_path_fields`](Self::set_allowed_suffix_path_fields).
    ///
    /// <p>The list of variable fields that can be used in the suffix path of a delivery that delivers to an S3 bucket.</p>
    pub fn allowed_suffix_path_fields(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_suffix_path_fields.unwrap_or_default();
        v.push(input.into());
        self.allowed_suffix_path_fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of variable fields that can be used in the suffix path of a delivery that delivers to an S3 bucket.</p>
    pub fn set_allowed_suffix_path_fields(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allowed_suffix_path_fields = input;
        self
    }
    /// <p>The list of variable fields that can be used in the suffix path of a delivery that delivers to an S3 bucket.</p>
    pub fn get_allowed_suffix_path_fields(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allowed_suffix_path_fields
    }
    /// Consumes the builder and constructs a [`ConfigurationTemplate`](crate::types::ConfigurationTemplate).
    pub fn build(self) -> crate::types::ConfigurationTemplate {
        crate::types::ConfigurationTemplate {
            service: self.service,
            log_type: self.log_type,
            resource_type: self.resource_type,
            delivery_destination_type: self.delivery_destination_type,
            default_delivery_config_values: self.default_delivery_config_values,
            allowed_fields: self.allowed_fields,
            allowed_output_formats: self.allowed_output_formats,
            allowed_action_for_allow_vended_logs_delivery_for_resource: self.allowed_action_for_allow_vended_logs_delivery_for_resource,
            allowed_field_delimiters: self.allowed_field_delimiters,
            allowed_suffix_path_fields: self.allowed_suffix_path_fields,
        }
    }
}
