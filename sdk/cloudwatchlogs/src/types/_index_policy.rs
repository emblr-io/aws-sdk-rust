// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains information about one field index policy in this account.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IndexPolicy {
    /// <p>The ARN of the log group that this index policy applies to.</p>
    pub log_group_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that this index policy was most recently updated.</p>
    pub last_update_time: ::std::option::Option<i64>,
    /// <p>The policy document for this index policy, in JSON format.</p>
    pub policy_document: ::std::option::Option<::std::string::String>,
    /// <p>The name of this policy. Responses about log group-level field index policies don't have this field, because those policies don't have names.</p>
    pub policy_name: ::std::option::Option<::std::string::String>,
    /// <p>This field indicates whether this is an account-level index policy or an index policy that applies only to a single log group.</p>
    pub source: ::std::option::Option<crate::types::IndexSource>,
}
impl IndexPolicy {
    /// <p>The ARN of the log group that this index policy applies to.</p>
    pub fn log_group_identifier(&self) -> ::std::option::Option<&str> {
        self.log_group_identifier.as_deref()
    }
    /// <p>The date and time that this index policy was most recently updated.</p>
    pub fn last_update_time(&self) -> ::std::option::Option<i64> {
        self.last_update_time
    }
    /// <p>The policy document for this index policy, in JSON format.</p>
    pub fn policy_document(&self) -> ::std::option::Option<&str> {
        self.policy_document.as_deref()
    }
    /// <p>The name of this policy. Responses about log group-level field index policies don't have this field, because those policies don't have names.</p>
    pub fn policy_name(&self) -> ::std::option::Option<&str> {
        self.policy_name.as_deref()
    }
    /// <p>This field indicates whether this is an account-level index policy or an index policy that applies only to a single log group.</p>
    pub fn source(&self) -> ::std::option::Option<&crate::types::IndexSource> {
        self.source.as_ref()
    }
}
impl IndexPolicy {
    /// Creates a new builder-style object to manufacture [`IndexPolicy`](crate::types::IndexPolicy).
    pub fn builder() -> crate::types::builders::IndexPolicyBuilder {
        crate::types::builders::IndexPolicyBuilder::default()
    }
}

/// A builder for [`IndexPolicy`](crate::types::IndexPolicy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IndexPolicyBuilder {
    pub(crate) log_group_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) last_update_time: ::std::option::Option<i64>,
    pub(crate) policy_document: ::std::option::Option<::std::string::String>,
    pub(crate) policy_name: ::std::option::Option<::std::string::String>,
    pub(crate) source: ::std::option::Option<crate::types::IndexSource>,
}
impl IndexPolicyBuilder {
    /// <p>The ARN of the log group that this index policy applies to.</p>
    pub fn log_group_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_group_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the log group that this index policy applies to.</p>
    pub fn set_log_group_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_group_identifier = input;
        self
    }
    /// <p>The ARN of the log group that this index policy applies to.</p>
    pub fn get_log_group_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_group_identifier
    }
    /// <p>The date and time that this index policy was most recently updated.</p>
    pub fn last_update_time(mut self, input: i64) -> Self {
        self.last_update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that this index policy was most recently updated.</p>
    pub fn set_last_update_time(mut self, input: ::std::option::Option<i64>) -> Self {
        self.last_update_time = input;
        self
    }
    /// <p>The date and time that this index policy was most recently updated.</p>
    pub fn get_last_update_time(&self) -> &::std::option::Option<i64> {
        &self.last_update_time
    }
    /// <p>The policy document for this index policy, in JSON format.</p>
    pub fn policy_document(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_document = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The policy document for this index policy, in JSON format.</p>
    pub fn set_policy_document(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_document = input;
        self
    }
    /// <p>The policy document for this index policy, in JSON format.</p>
    pub fn get_policy_document(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_document
    }
    /// <p>The name of this policy. Responses about log group-level field index policies don't have this field, because those policies don't have names.</p>
    pub fn policy_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of this policy. Responses about log group-level field index policies don't have this field, because those policies don't have names.</p>
    pub fn set_policy_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_name = input;
        self
    }
    /// <p>The name of this policy. Responses about log group-level field index policies don't have this field, because those policies don't have names.</p>
    pub fn get_policy_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_name
    }
    /// <p>This field indicates whether this is an account-level index policy or an index policy that applies only to a single log group.</p>
    pub fn source(mut self, input: crate::types::IndexSource) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// <p>This field indicates whether this is an account-level index policy or an index policy that applies only to a single log group.</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::IndexSource>) -> Self {
        self.source = input;
        self
    }
    /// <p>This field indicates whether this is an account-level index policy or an index policy that applies only to a single log group.</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::IndexSource> {
        &self.source
    }
    /// Consumes the builder and constructs a [`IndexPolicy`](crate::types::IndexPolicy).
    pub fn build(self) -> crate::types::IndexPolicy {
        crate::types::IndexPolicy {
            log_group_identifier: self.log_group_identifier,
            last_update_time: self.last_update_time,
            policy_document: self.policy_document,
            policy_name: self.policy_name,
            source: self.source,
        }
    }
}
