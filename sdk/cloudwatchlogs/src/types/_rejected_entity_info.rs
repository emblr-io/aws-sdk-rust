// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>If an entity is rejected when a <code>PutLogEvents</code> request was made, this includes details about the reason for the rejection.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RejectedEntityInfo {
    /// <p>The type of error that caused the rejection of the entity when calling <code>PutLogEvents</code>.</p>
    pub error_type: crate::types::EntityRejectionErrorType,
}
impl RejectedEntityInfo {
    /// <p>The type of error that caused the rejection of the entity when calling <code>PutLogEvents</code>.</p>
    pub fn error_type(&self) -> &crate::types::EntityRejectionErrorType {
        &self.error_type
    }
}
impl RejectedEntityInfo {
    /// Creates a new builder-style object to manufacture [`RejectedEntityInfo`](crate::types::RejectedEntityInfo).
    pub fn builder() -> crate::types::builders::RejectedEntityInfoBuilder {
        crate::types::builders::RejectedEntityInfoBuilder::default()
    }
}

/// A builder for [`RejectedEntityInfo`](crate::types::RejectedEntityInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RejectedEntityInfoBuilder {
    pub(crate) error_type: ::std::option::Option<crate::types::EntityRejectionErrorType>,
}
impl RejectedEntityInfoBuilder {
    /// <p>The type of error that caused the rejection of the entity when calling <code>PutLogEvents</code>.</p>
    /// This field is required.
    pub fn error_type(mut self, input: crate::types::EntityRejectionErrorType) -> Self {
        self.error_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of error that caused the rejection of the entity when calling <code>PutLogEvents</code>.</p>
    pub fn set_error_type(mut self, input: ::std::option::Option<crate::types::EntityRejectionErrorType>) -> Self {
        self.error_type = input;
        self
    }
    /// <p>The type of error that caused the rejection of the entity when calling <code>PutLogEvents</code>.</p>
    pub fn get_error_type(&self) -> &::std::option::Option<crate::types::EntityRejectionErrorType> {
        &self.error_type
    }
    /// Consumes the builder and constructs a [`RejectedEntityInfo`](crate::types::RejectedEntityInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`error_type`](crate::types::builders::RejectedEntityInfoBuilder::error_type)
    pub fn build(self) -> ::std::result::Result<crate::types::RejectedEntityInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RejectedEntityInfo {
            error_type: self.error_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "error_type",
                    "error_type was not specified but it is required when building RejectedEntityInfo",
                )
            })?,
        })
    }
}
