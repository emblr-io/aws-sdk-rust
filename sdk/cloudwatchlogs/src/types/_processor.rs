// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains the information about one processor in a log transformer.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Processor {
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-addKeys"> addKeys</a> processor in your transformer.</p>
    pub add_keys: ::std::option::Option<crate::types::AddKeys>,
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-copyValue"> copyValue</a> processor in your transformer.</p>
    pub copy_value: ::std::option::Option<crate::types::CopyValue>,
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-CSV"> CSV</a> processor in your transformer.</p>
    pub csv: ::std::option::Option<crate::types::Csv>,
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-datetimeConverter"> datetimeConverter</a> processor in your transformer.</p>
    pub date_time_converter: ::std::option::Option<crate::types::DateTimeConverter>,
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-deleteKeys"> deleteKeys</a> processor in your transformer.</p>
    pub delete_keys: ::std::option::Option<crate::types::DeleteKeys>,
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-grok"> grok</a> processor in your transformer.</p>
    pub grok: ::std::option::Option<crate::types::Grok>,
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-listToMap"> listToMap</a> processor in your transformer.</p>
    pub list_to_map: ::std::option::Option<crate::types::ListToMap>,
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-lowerCaseString"> lowerCaseString</a> processor in your transformer.</p>
    pub lower_case_string: ::std::option::Option<crate::types::LowerCaseString>,
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-moveKeys"> moveKeys</a> processor in your transformer.</p>
    pub move_keys: ::std::option::Option<crate::types::MoveKeys>,
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseCloudfront"> parseCloudfront</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub parse_cloudfront: ::std::option::Option<crate::types::ParseCloudfront>,
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseJSON"> parseJSON</a> processor in your transformer.</p>
    pub parse_json: ::std::option::Option<crate::types::ParseJson>,
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseKeyValue"> parseKeyValue</a> processor in your transformer.</p>
    pub parse_key_value: ::std::option::Option<crate::types::ParseKeyValue>,
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseRoute53"> parseRoute53</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub parse_route53: ::std::option::Option<crate::types::ParseRoute53>,
    /// <p>Use this processor to convert logs into Open Cybersecurity Schema Framework (OCSF) format</p>
    pub parse_to_ocsf: ::std::option::Option<crate::types::ParseToOcsf>,
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parsePostGres"> parsePostGres</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub parse_postgres: ::std::option::Option<crate::types::ParsePostgres>,
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseVPC"> parseVPC</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub parse_vpc: ::std::option::Option<crate::types::ParseVpc>,
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseWAF"> parseWAF</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub parse_waf: ::std::option::Option<crate::types::ParseWaf>,
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-renameKeys"> renameKeys</a> processor in your transformer.</p>
    pub rename_keys: ::std::option::Option<crate::types::RenameKeys>,
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-splitString"> splitString</a> processor in your transformer.</p>
    pub split_string: ::std::option::Option<crate::types::SplitString>,
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-substituteString"> substituteString</a> processor in your transformer.</p>
    pub substitute_string: ::std::option::Option<crate::types::SubstituteString>,
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-trimString"> trimString</a> processor in your transformer.</p>
    pub trim_string: ::std::option::Option<crate::types::TrimString>,
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-typeConverter"> typeConverter</a> processor in your transformer.</p>
    pub type_converter: ::std::option::Option<crate::types::TypeConverter>,
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-upperCaseString"> upperCaseString</a> processor in your transformer.</p>
    pub upper_case_string: ::std::option::Option<crate::types::UpperCaseString>,
}
impl Processor {
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-addKeys"> addKeys</a> processor in your transformer.</p>
    pub fn add_keys(&self) -> ::std::option::Option<&crate::types::AddKeys> {
        self.add_keys.as_ref()
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-copyValue"> copyValue</a> processor in your transformer.</p>
    pub fn copy_value(&self) -> ::std::option::Option<&crate::types::CopyValue> {
        self.copy_value.as_ref()
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-CSV"> CSV</a> processor in your transformer.</p>
    pub fn csv(&self) -> ::std::option::Option<&crate::types::Csv> {
        self.csv.as_ref()
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-datetimeConverter"> datetimeConverter</a> processor in your transformer.</p>
    pub fn date_time_converter(&self) -> ::std::option::Option<&crate::types::DateTimeConverter> {
        self.date_time_converter.as_ref()
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-deleteKeys"> deleteKeys</a> processor in your transformer.</p>
    pub fn delete_keys(&self) -> ::std::option::Option<&crate::types::DeleteKeys> {
        self.delete_keys.as_ref()
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-grok"> grok</a> processor in your transformer.</p>
    pub fn grok(&self) -> ::std::option::Option<&crate::types::Grok> {
        self.grok.as_ref()
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-listToMap"> listToMap</a> processor in your transformer.</p>
    pub fn list_to_map(&self) -> ::std::option::Option<&crate::types::ListToMap> {
        self.list_to_map.as_ref()
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-lowerCaseString"> lowerCaseString</a> processor in your transformer.</p>
    pub fn lower_case_string(&self) -> ::std::option::Option<&crate::types::LowerCaseString> {
        self.lower_case_string.as_ref()
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-moveKeys"> moveKeys</a> processor in your transformer.</p>
    pub fn move_keys(&self) -> ::std::option::Option<&crate::types::MoveKeys> {
        self.move_keys.as_ref()
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseCloudfront"> parseCloudfront</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub fn parse_cloudfront(&self) -> ::std::option::Option<&crate::types::ParseCloudfront> {
        self.parse_cloudfront.as_ref()
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseJSON"> parseJSON</a> processor in your transformer.</p>
    pub fn parse_json(&self) -> ::std::option::Option<&crate::types::ParseJson> {
        self.parse_json.as_ref()
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseKeyValue"> parseKeyValue</a> processor in your transformer.</p>
    pub fn parse_key_value(&self) -> ::std::option::Option<&crate::types::ParseKeyValue> {
        self.parse_key_value.as_ref()
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseRoute53"> parseRoute53</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub fn parse_route53(&self) -> ::std::option::Option<&crate::types::ParseRoute53> {
        self.parse_route53.as_ref()
    }
    /// <p>Use this processor to convert logs into Open Cybersecurity Schema Framework (OCSF) format</p>
    pub fn parse_to_ocsf(&self) -> ::std::option::Option<&crate::types::ParseToOcsf> {
        self.parse_to_ocsf.as_ref()
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parsePostGres"> parsePostGres</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub fn parse_postgres(&self) -> ::std::option::Option<&crate::types::ParsePostgres> {
        self.parse_postgres.as_ref()
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseVPC"> parseVPC</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub fn parse_vpc(&self) -> ::std::option::Option<&crate::types::ParseVpc> {
        self.parse_vpc.as_ref()
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseWAF"> parseWAF</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub fn parse_waf(&self) -> ::std::option::Option<&crate::types::ParseWaf> {
        self.parse_waf.as_ref()
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-renameKeys"> renameKeys</a> processor in your transformer.</p>
    pub fn rename_keys(&self) -> ::std::option::Option<&crate::types::RenameKeys> {
        self.rename_keys.as_ref()
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-splitString"> splitString</a> processor in your transformer.</p>
    pub fn split_string(&self) -> ::std::option::Option<&crate::types::SplitString> {
        self.split_string.as_ref()
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-substituteString"> substituteString</a> processor in your transformer.</p>
    pub fn substitute_string(&self) -> ::std::option::Option<&crate::types::SubstituteString> {
        self.substitute_string.as_ref()
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-trimString"> trimString</a> processor in your transformer.</p>
    pub fn trim_string(&self) -> ::std::option::Option<&crate::types::TrimString> {
        self.trim_string.as_ref()
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-typeConverter"> typeConverter</a> processor in your transformer.</p>
    pub fn type_converter(&self) -> ::std::option::Option<&crate::types::TypeConverter> {
        self.type_converter.as_ref()
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-upperCaseString"> upperCaseString</a> processor in your transformer.</p>
    pub fn upper_case_string(&self) -> ::std::option::Option<&crate::types::UpperCaseString> {
        self.upper_case_string.as_ref()
    }
}
impl Processor {
    /// Creates a new builder-style object to manufacture [`Processor`](crate::types::Processor).
    pub fn builder() -> crate::types::builders::ProcessorBuilder {
        crate::types::builders::ProcessorBuilder::default()
    }
}

/// A builder for [`Processor`](crate::types::Processor).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProcessorBuilder {
    pub(crate) add_keys: ::std::option::Option<crate::types::AddKeys>,
    pub(crate) copy_value: ::std::option::Option<crate::types::CopyValue>,
    pub(crate) csv: ::std::option::Option<crate::types::Csv>,
    pub(crate) date_time_converter: ::std::option::Option<crate::types::DateTimeConverter>,
    pub(crate) delete_keys: ::std::option::Option<crate::types::DeleteKeys>,
    pub(crate) grok: ::std::option::Option<crate::types::Grok>,
    pub(crate) list_to_map: ::std::option::Option<crate::types::ListToMap>,
    pub(crate) lower_case_string: ::std::option::Option<crate::types::LowerCaseString>,
    pub(crate) move_keys: ::std::option::Option<crate::types::MoveKeys>,
    pub(crate) parse_cloudfront: ::std::option::Option<crate::types::ParseCloudfront>,
    pub(crate) parse_json: ::std::option::Option<crate::types::ParseJson>,
    pub(crate) parse_key_value: ::std::option::Option<crate::types::ParseKeyValue>,
    pub(crate) parse_route53: ::std::option::Option<crate::types::ParseRoute53>,
    pub(crate) parse_to_ocsf: ::std::option::Option<crate::types::ParseToOcsf>,
    pub(crate) parse_postgres: ::std::option::Option<crate::types::ParsePostgres>,
    pub(crate) parse_vpc: ::std::option::Option<crate::types::ParseVpc>,
    pub(crate) parse_waf: ::std::option::Option<crate::types::ParseWaf>,
    pub(crate) rename_keys: ::std::option::Option<crate::types::RenameKeys>,
    pub(crate) split_string: ::std::option::Option<crate::types::SplitString>,
    pub(crate) substitute_string: ::std::option::Option<crate::types::SubstituteString>,
    pub(crate) trim_string: ::std::option::Option<crate::types::TrimString>,
    pub(crate) type_converter: ::std::option::Option<crate::types::TypeConverter>,
    pub(crate) upper_case_string: ::std::option::Option<crate::types::UpperCaseString>,
}
impl ProcessorBuilder {
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-addKeys"> addKeys</a> processor in your transformer.</p>
    pub fn add_keys(mut self, input: crate::types::AddKeys) -> Self {
        self.add_keys = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-addKeys"> addKeys</a> processor in your transformer.</p>
    pub fn set_add_keys(mut self, input: ::std::option::Option<crate::types::AddKeys>) -> Self {
        self.add_keys = input;
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-addKeys"> addKeys</a> processor in your transformer.</p>
    pub fn get_add_keys(&self) -> &::std::option::Option<crate::types::AddKeys> {
        &self.add_keys
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-copyValue"> copyValue</a> processor in your transformer.</p>
    pub fn copy_value(mut self, input: crate::types::CopyValue) -> Self {
        self.copy_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-copyValue"> copyValue</a> processor in your transformer.</p>
    pub fn set_copy_value(mut self, input: ::std::option::Option<crate::types::CopyValue>) -> Self {
        self.copy_value = input;
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-copyValue"> copyValue</a> processor in your transformer.</p>
    pub fn get_copy_value(&self) -> &::std::option::Option<crate::types::CopyValue> {
        &self.copy_value
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-CSV"> CSV</a> processor in your transformer.</p>
    pub fn csv(mut self, input: crate::types::Csv) -> Self {
        self.csv = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-CSV"> CSV</a> processor in your transformer.</p>
    pub fn set_csv(mut self, input: ::std::option::Option<crate::types::Csv>) -> Self {
        self.csv = input;
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-CSV"> CSV</a> processor in your transformer.</p>
    pub fn get_csv(&self) -> &::std::option::Option<crate::types::Csv> {
        &self.csv
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-datetimeConverter"> datetimeConverter</a> processor in your transformer.</p>
    pub fn date_time_converter(mut self, input: crate::types::DateTimeConverter) -> Self {
        self.date_time_converter = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-datetimeConverter"> datetimeConverter</a> processor in your transformer.</p>
    pub fn set_date_time_converter(mut self, input: ::std::option::Option<crate::types::DateTimeConverter>) -> Self {
        self.date_time_converter = input;
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-datetimeConverter"> datetimeConverter</a> processor in your transformer.</p>
    pub fn get_date_time_converter(&self) -> &::std::option::Option<crate::types::DateTimeConverter> {
        &self.date_time_converter
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-deleteKeys"> deleteKeys</a> processor in your transformer.</p>
    pub fn delete_keys(mut self, input: crate::types::DeleteKeys) -> Self {
        self.delete_keys = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-deleteKeys"> deleteKeys</a> processor in your transformer.</p>
    pub fn set_delete_keys(mut self, input: ::std::option::Option<crate::types::DeleteKeys>) -> Self {
        self.delete_keys = input;
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-deleteKeys"> deleteKeys</a> processor in your transformer.</p>
    pub fn get_delete_keys(&self) -> &::std::option::Option<crate::types::DeleteKeys> {
        &self.delete_keys
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-grok"> grok</a> processor in your transformer.</p>
    pub fn grok(mut self, input: crate::types::Grok) -> Self {
        self.grok = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-grok"> grok</a> processor in your transformer.</p>
    pub fn set_grok(mut self, input: ::std::option::Option<crate::types::Grok>) -> Self {
        self.grok = input;
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-grok"> grok</a> processor in your transformer.</p>
    pub fn get_grok(&self) -> &::std::option::Option<crate::types::Grok> {
        &self.grok
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-listToMap"> listToMap</a> processor in your transformer.</p>
    pub fn list_to_map(mut self, input: crate::types::ListToMap) -> Self {
        self.list_to_map = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-listToMap"> listToMap</a> processor in your transformer.</p>
    pub fn set_list_to_map(mut self, input: ::std::option::Option<crate::types::ListToMap>) -> Self {
        self.list_to_map = input;
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-listToMap"> listToMap</a> processor in your transformer.</p>
    pub fn get_list_to_map(&self) -> &::std::option::Option<crate::types::ListToMap> {
        &self.list_to_map
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-lowerCaseString"> lowerCaseString</a> processor in your transformer.</p>
    pub fn lower_case_string(mut self, input: crate::types::LowerCaseString) -> Self {
        self.lower_case_string = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-lowerCaseString"> lowerCaseString</a> processor in your transformer.</p>
    pub fn set_lower_case_string(mut self, input: ::std::option::Option<crate::types::LowerCaseString>) -> Self {
        self.lower_case_string = input;
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-lowerCaseString"> lowerCaseString</a> processor in your transformer.</p>
    pub fn get_lower_case_string(&self) -> &::std::option::Option<crate::types::LowerCaseString> {
        &self.lower_case_string
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-moveKeys"> moveKeys</a> processor in your transformer.</p>
    pub fn move_keys(mut self, input: crate::types::MoveKeys) -> Self {
        self.move_keys = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-moveKeys"> moveKeys</a> processor in your transformer.</p>
    pub fn set_move_keys(mut self, input: ::std::option::Option<crate::types::MoveKeys>) -> Self {
        self.move_keys = input;
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-moveKeys"> moveKeys</a> processor in your transformer.</p>
    pub fn get_move_keys(&self) -> &::std::option::Option<crate::types::MoveKeys> {
        &self.move_keys
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseCloudfront"> parseCloudfront</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub fn parse_cloudfront(mut self, input: crate::types::ParseCloudfront) -> Self {
        self.parse_cloudfront = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseCloudfront"> parseCloudfront</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub fn set_parse_cloudfront(mut self, input: ::std::option::Option<crate::types::ParseCloudfront>) -> Self {
        self.parse_cloudfront = input;
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseCloudfront"> parseCloudfront</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub fn get_parse_cloudfront(&self) -> &::std::option::Option<crate::types::ParseCloudfront> {
        &self.parse_cloudfront
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseJSON"> parseJSON</a> processor in your transformer.</p>
    pub fn parse_json(mut self, input: crate::types::ParseJson) -> Self {
        self.parse_json = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseJSON"> parseJSON</a> processor in your transformer.</p>
    pub fn set_parse_json(mut self, input: ::std::option::Option<crate::types::ParseJson>) -> Self {
        self.parse_json = input;
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseJSON"> parseJSON</a> processor in your transformer.</p>
    pub fn get_parse_json(&self) -> &::std::option::Option<crate::types::ParseJson> {
        &self.parse_json
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseKeyValue"> parseKeyValue</a> processor in your transformer.</p>
    pub fn parse_key_value(mut self, input: crate::types::ParseKeyValue) -> Self {
        self.parse_key_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseKeyValue"> parseKeyValue</a> processor in your transformer.</p>
    pub fn set_parse_key_value(mut self, input: ::std::option::Option<crate::types::ParseKeyValue>) -> Self {
        self.parse_key_value = input;
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseKeyValue"> parseKeyValue</a> processor in your transformer.</p>
    pub fn get_parse_key_value(&self) -> &::std::option::Option<crate::types::ParseKeyValue> {
        &self.parse_key_value
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseRoute53"> parseRoute53</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub fn parse_route53(mut self, input: crate::types::ParseRoute53) -> Self {
        self.parse_route53 = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseRoute53"> parseRoute53</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub fn set_parse_route53(mut self, input: ::std::option::Option<crate::types::ParseRoute53>) -> Self {
        self.parse_route53 = input;
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseRoute53"> parseRoute53</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub fn get_parse_route53(&self) -> &::std::option::Option<crate::types::ParseRoute53> {
        &self.parse_route53
    }
    /// <p>Use this processor to convert logs into Open Cybersecurity Schema Framework (OCSF) format</p>
    pub fn parse_to_ocsf(mut self, input: crate::types::ParseToOcsf) -> Self {
        self.parse_to_ocsf = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this processor to convert logs into Open Cybersecurity Schema Framework (OCSF) format</p>
    pub fn set_parse_to_ocsf(mut self, input: ::std::option::Option<crate::types::ParseToOcsf>) -> Self {
        self.parse_to_ocsf = input;
        self
    }
    /// <p>Use this processor to convert logs into Open Cybersecurity Schema Framework (OCSF) format</p>
    pub fn get_parse_to_ocsf(&self) -> &::std::option::Option<crate::types::ParseToOcsf> {
        &self.parse_to_ocsf
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parsePostGres"> parsePostGres</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub fn parse_postgres(mut self, input: crate::types::ParsePostgres) -> Self {
        self.parse_postgres = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parsePostGres"> parsePostGres</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub fn set_parse_postgres(mut self, input: ::std::option::Option<crate::types::ParsePostgres>) -> Self {
        self.parse_postgres = input;
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parsePostGres"> parsePostGres</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub fn get_parse_postgres(&self) -> &::std::option::Option<crate::types::ParsePostgres> {
        &self.parse_postgres
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseVPC"> parseVPC</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub fn parse_vpc(mut self, input: crate::types::ParseVpc) -> Self {
        self.parse_vpc = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseVPC"> parseVPC</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub fn set_parse_vpc(mut self, input: ::std::option::Option<crate::types::ParseVpc>) -> Self {
        self.parse_vpc = input;
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseVPC"> parseVPC</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub fn get_parse_vpc(&self) -> &::std::option::Option<crate::types::ParseVpc> {
        &self.parse_vpc
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseWAF"> parseWAF</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub fn parse_waf(mut self, input: crate::types::ParseWaf) -> Self {
        self.parse_waf = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseWAF"> parseWAF</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub fn set_parse_waf(mut self, input: ::std::option::Option<crate::types::ParseWaf>) -> Self {
        self.parse_waf = input;
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseWAF"> parseWAF</a> processor in your transformer.</p>
    /// <p>If you use this processor, it must be the first processor in your transformer.</p>
    pub fn get_parse_waf(&self) -> &::std::option::Option<crate::types::ParseWaf> {
        &self.parse_waf
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-renameKeys"> renameKeys</a> processor in your transformer.</p>
    pub fn rename_keys(mut self, input: crate::types::RenameKeys) -> Self {
        self.rename_keys = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-renameKeys"> renameKeys</a> processor in your transformer.</p>
    pub fn set_rename_keys(mut self, input: ::std::option::Option<crate::types::RenameKeys>) -> Self {
        self.rename_keys = input;
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-renameKeys"> renameKeys</a> processor in your transformer.</p>
    pub fn get_rename_keys(&self) -> &::std::option::Option<crate::types::RenameKeys> {
        &self.rename_keys
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-splitString"> splitString</a> processor in your transformer.</p>
    pub fn split_string(mut self, input: crate::types::SplitString) -> Self {
        self.split_string = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-splitString"> splitString</a> processor in your transformer.</p>
    pub fn set_split_string(mut self, input: ::std::option::Option<crate::types::SplitString>) -> Self {
        self.split_string = input;
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-splitString"> splitString</a> processor in your transformer.</p>
    pub fn get_split_string(&self) -> &::std::option::Option<crate::types::SplitString> {
        &self.split_string
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-substituteString"> substituteString</a> processor in your transformer.</p>
    pub fn substitute_string(mut self, input: crate::types::SubstituteString) -> Self {
        self.substitute_string = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-substituteString"> substituteString</a> processor in your transformer.</p>
    pub fn set_substitute_string(mut self, input: ::std::option::Option<crate::types::SubstituteString>) -> Self {
        self.substitute_string = input;
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-substituteString"> substituteString</a> processor in your transformer.</p>
    pub fn get_substitute_string(&self) -> &::std::option::Option<crate::types::SubstituteString> {
        &self.substitute_string
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-trimString"> trimString</a> processor in your transformer.</p>
    pub fn trim_string(mut self, input: crate::types::TrimString) -> Self {
        self.trim_string = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-trimString"> trimString</a> processor in your transformer.</p>
    pub fn set_trim_string(mut self, input: ::std::option::Option<crate::types::TrimString>) -> Self {
        self.trim_string = input;
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-trimString"> trimString</a> processor in your transformer.</p>
    pub fn get_trim_string(&self) -> &::std::option::Option<crate::types::TrimString> {
        &self.trim_string
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-typeConverter"> typeConverter</a> processor in your transformer.</p>
    pub fn type_converter(mut self, input: crate::types::TypeConverter) -> Self {
        self.type_converter = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-typeConverter"> typeConverter</a> processor in your transformer.</p>
    pub fn set_type_converter(mut self, input: ::std::option::Option<crate::types::TypeConverter>) -> Self {
        self.type_converter = input;
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-typeConverter"> typeConverter</a> processor in your transformer.</p>
    pub fn get_type_converter(&self) -> &::std::option::Option<crate::types::TypeConverter> {
        &self.type_converter
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-upperCaseString"> upperCaseString</a> processor in your transformer.</p>
    pub fn upper_case_string(mut self, input: crate::types::UpperCaseString) -> Self {
        self.upper_case_string = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-upperCaseString"> upperCaseString</a> processor in your transformer.</p>
    pub fn set_upper_case_string(mut self, input: ::std::option::Option<crate::types::UpperCaseString>) -> Self {
        self.upper_case_string = input;
        self
    }
    /// <p>Use this parameter to include the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-upperCaseString"> upperCaseString</a> processor in your transformer.</p>
    pub fn get_upper_case_string(&self) -> &::std::option::Option<crate::types::UpperCaseString> {
        &self.upper_case_string
    }
    /// Consumes the builder and constructs a [`Processor`](crate::types::Processor).
    pub fn build(self) -> crate::types::Processor {
        crate::types::Processor {
            add_keys: self.add_keys,
            copy_value: self.copy_value,
            csv: self.csv,
            date_time_converter: self.date_time_converter,
            delete_keys: self.delete_keys,
            grok: self.grok,
            list_to_map: self.list_to_map,
            lower_case_string: self.lower_case_string,
            move_keys: self.move_keys,
            parse_cloudfront: self.parse_cloudfront,
            parse_json: self.parse_json,
            parse_key_value: self.parse_key_value,
            parse_route53: self.parse_route53,
            parse_to_ocsf: self.parse_to_ocsf,
            parse_postgres: self.parse_postgres,
            parse_vpc: self.parse_vpc,
            parse_waf: self.parse_waf,
            rename_keys: self.rename_keys,
            split_string: self.split_string,
            substitute_string: self.substitute_string,
            trim_string: self.trim_string,
            type_converter: self.type_converter,
            upper_case_string: self.upper_case_string,
        }
    }
}
