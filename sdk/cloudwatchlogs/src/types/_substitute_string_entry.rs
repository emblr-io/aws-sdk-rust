// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This object defines one log field key that will be replaced using the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-substituteString"> substituteString</a> processor.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SubstituteStringEntry {
    /// <p>The key to modify</p>
    pub source: ::std::string::String,
    /// <p>The regular expression string to be replaced. Special regex characters such as \[ and \] must be escaped using \\ when using double quotes and with \ when using single quotes. For more information, see Class Pattern on the Oracle web site.</p>
    pub from: ::std::string::String,
    /// <p>The string to be substituted for each match of <code>from</code></p>
    pub to: ::std::string::String,
}
impl SubstituteStringEntry {
    /// <p>The key to modify</p>
    pub fn source(&self) -> &str {
        use std::ops::Deref;
        self.source.deref()
    }
    /// <p>The regular expression string to be replaced. Special regex characters such as \[ and \] must be escaped using \\ when using double quotes and with \ when using single quotes. For more information, see Class Pattern on the Oracle web site.</p>
    pub fn from(&self) -> &str {
        use std::ops::Deref;
        self.from.deref()
    }
    /// <p>The string to be substituted for each match of <code>from</code></p>
    pub fn to(&self) -> &str {
        use std::ops::Deref;
        self.to.deref()
    }
}
impl SubstituteStringEntry {
    /// Creates a new builder-style object to manufacture [`SubstituteStringEntry`](crate::types::SubstituteStringEntry).
    pub fn builder() -> crate::types::builders::SubstituteStringEntryBuilder {
        crate::types::builders::SubstituteStringEntryBuilder::default()
    }
}

/// A builder for [`SubstituteStringEntry`](crate::types::SubstituteStringEntry).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SubstituteStringEntryBuilder {
    pub(crate) source: ::std::option::Option<::std::string::String>,
    pub(crate) from: ::std::option::Option<::std::string::String>,
    pub(crate) to: ::std::option::Option<::std::string::String>,
}
impl SubstituteStringEntryBuilder {
    /// <p>The key to modify</p>
    /// This field is required.
    pub fn source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key to modify</p>
    pub fn set_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// <p>The key to modify</p>
    pub fn get_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.source
    }
    /// <p>The regular expression string to be replaced. Special regex characters such as \[ and \] must be escaped using \\ when using double quotes and with \ when using single quotes. For more information, see Class Pattern on the Oracle web site.</p>
    /// This field is required.
    pub fn from(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.from = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The regular expression string to be replaced. Special regex characters such as \[ and \] must be escaped using \\ when using double quotes and with \ when using single quotes. For more information, see Class Pattern on the Oracle web site.</p>
    pub fn set_from(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.from = input;
        self
    }
    /// <p>The regular expression string to be replaced. Special regex characters such as \[ and \] must be escaped using \\ when using double quotes and with \ when using single quotes. For more information, see Class Pattern on the Oracle web site.</p>
    pub fn get_from(&self) -> &::std::option::Option<::std::string::String> {
        &self.from
    }
    /// <p>The string to be substituted for each match of <code>from</code></p>
    /// This field is required.
    pub fn to(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.to = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The string to be substituted for each match of <code>from</code></p>
    pub fn set_to(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.to = input;
        self
    }
    /// <p>The string to be substituted for each match of <code>from</code></p>
    pub fn get_to(&self) -> &::std::option::Option<::std::string::String> {
        &self.to
    }
    /// Consumes the builder and constructs a [`SubstituteStringEntry`](crate::types::SubstituteStringEntry).
    /// This method will fail if any of the following fields are not set:
    /// - [`source`](crate::types::builders::SubstituteStringEntryBuilder::source)
    /// - [`from`](crate::types::builders::SubstituteStringEntryBuilder::from)
    /// - [`to`](crate::types::builders::SubstituteStringEntryBuilder::to)
    pub fn build(self) -> ::std::result::Result<crate::types::SubstituteStringEntry, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SubstituteStringEntry {
            source: self.source.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source",
                    "source was not specified but it is required when building SubstituteStringEntry",
                )
            })?,
            from: self.from.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "from",
                    "from was not specified but it is required when building SubstituteStringEntry",
                )
            })?,
            to: self.to.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "to",
                    "to was not specified but it is required when building SubstituteStringEntry",
                )
            })?,
        })
    }
}
