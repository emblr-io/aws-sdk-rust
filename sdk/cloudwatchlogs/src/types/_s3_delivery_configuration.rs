// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains delivery configurations that apply only when the delivery destination resource is an S3 bucket.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3DeliveryConfiguration {
    /// <p>This string allows re-configuring the S3 object prefix to contain either static or variable sections. The valid variables to use in the suffix path will vary by each log source. To find the values supported for the suffix path for each log source, use the <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeConfigurationTemplates.html">DescribeConfigurationTemplates</a> operation and check the <code>allowedSuffixPathFields</code> field in the response.</p>
    pub suffix_path: ::std::option::Option<::std::string::String>,
    /// <p>This parameter causes the S3 objects that contain delivered logs to use a prefix structure that allows for integration with Apache Hive.</p>
    pub enable_hive_compatible_path: ::std::option::Option<bool>,
}
impl S3DeliveryConfiguration {
    /// <p>This string allows re-configuring the S3 object prefix to contain either static or variable sections. The valid variables to use in the suffix path will vary by each log source. To find the values supported for the suffix path for each log source, use the <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeConfigurationTemplates.html">DescribeConfigurationTemplates</a> operation and check the <code>allowedSuffixPathFields</code> field in the response.</p>
    pub fn suffix_path(&self) -> ::std::option::Option<&str> {
        self.suffix_path.as_deref()
    }
    /// <p>This parameter causes the S3 objects that contain delivered logs to use a prefix structure that allows for integration with Apache Hive.</p>
    pub fn enable_hive_compatible_path(&self) -> ::std::option::Option<bool> {
        self.enable_hive_compatible_path
    }
}
impl S3DeliveryConfiguration {
    /// Creates a new builder-style object to manufacture [`S3DeliveryConfiguration`](crate::types::S3DeliveryConfiguration).
    pub fn builder() -> crate::types::builders::S3DeliveryConfigurationBuilder {
        crate::types::builders::S3DeliveryConfigurationBuilder::default()
    }
}

/// A builder for [`S3DeliveryConfiguration`](crate::types::S3DeliveryConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct S3DeliveryConfigurationBuilder {
    pub(crate) suffix_path: ::std::option::Option<::std::string::String>,
    pub(crate) enable_hive_compatible_path: ::std::option::Option<bool>,
}
impl S3DeliveryConfigurationBuilder {
    /// <p>This string allows re-configuring the S3 object prefix to contain either static or variable sections. The valid variables to use in the suffix path will vary by each log source. To find the values supported for the suffix path for each log source, use the <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeConfigurationTemplates.html">DescribeConfigurationTemplates</a> operation and check the <code>allowedSuffixPathFields</code> field in the response.</p>
    pub fn suffix_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.suffix_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This string allows re-configuring the S3 object prefix to contain either static or variable sections. The valid variables to use in the suffix path will vary by each log source. To find the values supported for the suffix path for each log source, use the <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeConfigurationTemplates.html">DescribeConfigurationTemplates</a> operation and check the <code>allowedSuffixPathFields</code> field in the response.</p>
    pub fn set_suffix_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.suffix_path = input;
        self
    }
    /// <p>This string allows re-configuring the S3 object prefix to contain either static or variable sections. The valid variables to use in the suffix path will vary by each log source. To find the values supported for the suffix path for each log source, use the <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeConfigurationTemplates.html">DescribeConfigurationTemplates</a> operation and check the <code>allowedSuffixPathFields</code> field in the response.</p>
    pub fn get_suffix_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.suffix_path
    }
    /// <p>This parameter causes the S3 objects that contain delivered logs to use a prefix structure that allows for integration with Apache Hive.</p>
    pub fn enable_hive_compatible_path(mut self, input: bool) -> Self {
        self.enable_hive_compatible_path = ::std::option::Option::Some(input);
        self
    }
    /// <p>This parameter causes the S3 objects that contain delivered logs to use a prefix structure that allows for integration with Apache Hive.</p>
    pub fn set_enable_hive_compatible_path(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_hive_compatible_path = input;
        self
    }
    /// <p>This parameter causes the S3 objects that contain delivered logs to use a prefix structure that allows for integration with Apache Hive.</p>
    pub fn get_enable_hive_compatible_path(&self) -> &::std::option::Option<bool> {
        &self.enable_hive_compatible_path
    }
    /// Consumes the builder and constructs a [`S3DeliveryConfiguration`](crate::types::S3DeliveryConfiguration).
    pub fn build(self) -> crate::types::S3DeliveryConfiguration {
        crate::types::S3DeliveryConfiguration {
            suffix_path: self.suffix_path,
            enable_hive_compatible_path: self.enable_hive_compatible_path,
        }
    }
}
