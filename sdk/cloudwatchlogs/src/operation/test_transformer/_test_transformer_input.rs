// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TestTransformerInput {
    /// <p>This structure contains the configuration of this log transformer that you want to test. A log transformer is an array of processors, where each processor applies one type of transformation to the log events that are ingested.</p>
    pub transformer_config: ::std::option::Option<::std::vec::Vec<crate::types::Processor>>,
    /// <p>An array of the raw log events that you want to use to test this transformer.</p>
    pub log_event_messages: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl TestTransformerInput {
    /// <p>This structure contains the configuration of this log transformer that you want to test. A log transformer is an array of processors, where each processor applies one type of transformation to the log events that are ingested.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.transformer_config.is_none()`.
    pub fn transformer_config(&self) -> &[crate::types::Processor] {
        self.transformer_config.as_deref().unwrap_or_default()
    }
    /// <p>An array of the raw log events that you want to use to test this transformer.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.log_event_messages.is_none()`.
    pub fn log_event_messages(&self) -> &[::std::string::String] {
        self.log_event_messages.as_deref().unwrap_or_default()
    }
}
impl TestTransformerInput {
    /// Creates a new builder-style object to manufacture [`TestTransformerInput`](crate::operation::test_transformer::TestTransformerInput).
    pub fn builder() -> crate::operation::test_transformer::builders::TestTransformerInputBuilder {
        crate::operation::test_transformer::builders::TestTransformerInputBuilder::default()
    }
}

/// A builder for [`TestTransformerInput`](crate::operation::test_transformer::TestTransformerInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TestTransformerInputBuilder {
    pub(crate) transformer_config: ::std::option::Option<::std::vec::Vec<crate::types::Processor>>,
    pub(crate) log_event_messages: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl TestTransformerInputBuilder {
    /// Appends an item to `transformer_config`.
    ///
    /// To override the contents of this collection use [`set_transformer_config`](Self::set_transformer_config).
    ///
    /// <p>This structure contains the configuration of this log transformer that you want to test. A log transformer is an array of processors, where each processor applies one type of transformation to the log events that are ingested.</p>
    pub fn transformer_config(mut self, input: crate::types::Processor) -> Self {
        let mut v = self.transformer_config.unwrap_or_default();
        v.push(input);
        self.transformer_config = ::std::option::Option::Some(v);
        self
    }
    /// <p>This structure contains the configuration of this log transformer that you want to test. A log transformer is an array of processors, where each processor applies one type of transformation to the log events that are ingested.</p>
    pub fn set_transformer_config(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Processor>>) -> Self {
        self.transformer_config = input;
        self
    }
    /// <p>This structure contains the configuration of this log transformer that you want to test. A log transformer is an array of processors, where each processor applies one type of transformation to the log events that are ingested.</p>
    pub fn get_transformer_config(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Processor>> {
        &self.transformer_config
    }
    /// Appends an item to `log_event_messages`.
    ///
    /// To override the contents of this collection use [`set_log_event_messages`](Self::set_log_event_messages).
    ///
    /// <p>An array of the raw log events that you want to use to test this transformer.</p>
    pub fn log_event_messages(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.log_event_messages.unwrap_or_default();
        v.push(input.into());
        self.log_event_messages = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of the raw log events that you want to use to test this transformer.</p>
    pub fn set_log_event_messages(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.log_event_messages = input;
        self
    }
    /// <p>An array of the raw log events that you want to use to test this transformer.</p>
    pub fn get_log_event_messages(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.log_event_messages
    }
    /// Consumes the builder and constructs a [`TestTransformerInput`](crate::operation::test_transformer::TestTransformerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::test_transformer::TestTransformerInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::test_transformer::TestTransformerInput {
            transformer_config: self.transformer_config,
            log_event_messages: self.log_event_messages,
        })
    }
}
