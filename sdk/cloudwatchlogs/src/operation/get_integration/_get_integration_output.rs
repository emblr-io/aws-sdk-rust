// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetIntegrationOutput {
    /// <p>The name of the integration.</p>
    pub integration_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of integration. Integrations with OpenSearch Service have the type <code>OPENSEARCH</code>.</p>
    pub integration_type: ::std::option::Option<crate::types::IntegrationType>,
    /// <p>The current status of this integration.</p>
    pub integration_status: ::std::option::Option<crate::types::IntegrationStatus>,
    /// <p>A structure that contains information about the integration configuration. For an integration with OpenSearch Service, this includes information about OpenSearch Service resources such as the collection, the workspace, and policies.</p>
    pub integration_details: ::std::option::Option<crate::types::IntegrationDetails>,
    _request_id: Option<String>,
}
impl GetIntegrationOutput {
    /// <p>The name of the integration.</p>
    pub fn integration_name(&self) -> ::std::option::Option<&str> {
        self.integration_name.as_deref()
    }
    /// <p>The type of integration. Integrations with OpenSearch Service have the type <code>OPENSEARCH</code>.</p>
    pub fn integration_type(&self) -> ::std::option::Option<&crate::types::IntegrationType> {
        self.integration_type.as_ref()
    }
    /// <p>The current status of this integration.</p>
    pub fn integration_status(&self) -> ::std::option::Option<&crate::types::IntegrationStatus> {
        self.integration_status.as_ref()
    }
    /// <p>A structure that contains information about the integration configuration. For an integration with OpenSearch Service, this includes information about OpenSearch Service resources such as the collection, the workspace, and policies.</p>
    pub fn integration_details(&self) -> ::std::option::Option<&crate::types::IntegrationDetails> {
        self.integration_details.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetIntegrationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetIntegrationOutput {
    /// Creates a new builder-style object to manufacture [`GetIntegrationOutput`](crate::operation::get_integration::GetIntegrationOutput).
    pub fn builder() -> crate::operation::get_integration::builders::GetIntegrationOutputBuilder {
        crate::operation::get_integration::builders::GetIntegrationOutputBuilder::default()
    }
}

/// A builder for [`GetIntegrationOutput`](crate::operation::get_integration::GetIntegrationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetIntegrationOutputBuilder {
    pub(crate) integration_name: ::std::option::Option<::std::string::String>,
    pub(crate) integration_type: ::std::option::Option<crate::types::IntegrationType>,
    pub(crate) integration_status: ::std::option::Option<crate::types::IntegrationStatus>,
    pub(crate) integration_details: ::std::option::Option<crate::types::IntegrationDetails>,
    _request_id: Option<String>,
}
impl GetIntegrationOutputBuilder {
    /// <p>The name of the integration.</p>
    pub fn integration_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.integration_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the integration.</p>
    pub fn set_integration_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.integration_name = input;
        self
    }
    /// <p>The name of the integration.</p>
    pub fn get_integration_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.integration_name
    }
    /// <p>The type of integration. Integrations with OpenSearch Service have the type <code>OPENSEARCH</code>.</p>
    pub fn integration_type(mut self, input: crate::types::IntegrationType) -> Self {
        self.integration_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of integration. Integrations with OpenSearch Service have the type <code>OPENSEARCH</code>.</p>
    pub fn set_integration_type(mut self, input: ::std::option::Option<crate::types::IntegrationType>) -> Self {
        self.integration_type = input;
        self
    }
    /// <p>The type of integration. Integrations with OpenSearch Service have the type <code>OPENSEARCH</code>.</p>
    pub fn get_integration_type(&self) -> &::std::option::Option<crate::types::IntegrationType> {
        &self.integration_type
    }
    /// <p>The current status of this integration.</p>
    pub fn integration_status(mut self, input: crate::types::IntegrationStatus) -> Self {
        self.integration_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of this integration.</p>
    pub fn set_integration_status(mut self, input: ::std::option::Option<crate::types::IntegrationStatus>) -> Self {
        self.integration_status = input;
        self
    }
    /// <p>The current status of this integration.</p>
    pub fn get_integration_status(&self) -> &::std::option::Option<crate::types::IntegrationStatus> {
        &self.integration_status
    }
    /// <p>A structure that contains information about the integration configuration. For an integration with OpenSearch Service, this includes information about OpenSearch Service resources such as the collection, the workspace, and policies.</p>
    pub fn integration_details(mut self, input: crate::types::IntegrationDetails) -> Self {
        self.integration_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that contains information about the integration configuration. For an integration with OpenSearch Service, this includes information about OpenSearch Service resources such as the collection, the workspace, and policies.</p>
    pub fn set_integration_details(mut self, input: ::std::option::Option<crate::types::IntegrationDetails>) -> Self {
        self.integration_details = input;
        self
    }
    /// <p>A structure that contains information about the integration configuration. For an integration with OpenSearch Service, this includes information about OpenSearch Service resources such as the collection, the workspace, and policies.</p>
    pub fn get_integration_details(&self) -> &::std::option::Option<crate::types::IntegrationDetails> {
        &self.integration_details
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetIntegrationOutput`](crate::operation::get_integration::GetIntegrationOutput).
    pub fn build(self) -> crate::operation::get_integration::GetIntegrationOutput {
        crate::operation::get_integration::GetIntegrationOutput {
            integration_name: self.integration_name,
            integration_type: self.integration_type,
            integration_status: self.integration_status,
            integration_details: self.integration_details,
            _request_id: self._request_id,
        }
    }
}
