// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateDeliveryConfigurationInput {
    /// <p>The ID of the delivery to be updated by this request.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The list of record fields to be delivered to the destination, in order. If the delivery's log source has mandatory fields, they must be included in this list.</p>
    pub record_fields: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The field delimiter to use between record fields when the final output format of a delivery is in <code>Plain</code>, <code>W3C</code>, or <code>Raw</code> format.</p>
    pub field_delimiter: ::std::option::Option<::std::string::String>,
    /// <p>This structure contains parameters that are valid only when the delivery's delivery destination is an S3 bucket.</p>
    pub s3_delivery_configuration: ::std::option::Option<crate::types::S3DeliveryConfiguration>,
}
impl UpdateDeliveryConfigurationInput {
    /// <p>The ID of the delivery to be updated by this request.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The list of record fields to be delivered to the destination, in order. If the delivery's log source has mandatory fields, they must be included in this list.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.record_fields.is_none()`.
    pub fn record_fields(&self) -> &[::std::string::String] {
        self.record_fields.as_deref().unwrap_or_default()
    }
    /// <p>The field delimiter to use between record fields when the final output format of a delivery is in <code>Plain</code>, <code>W3C</code>, or <code>Raw</code> format.</p>
    pub fn field_delimiter(&self) -> ::std::option::Option<&str> {
        self.field_delimiter.as_deref()
    }
    /// <p>This structure contains parameters that are valid only when the delivery's delivery destination is an S3 bucket.</p>
    pub fn s3_delivery_configuration(&self) -> ::std::option::Option<&crate::types::S3DeliveryConfiguration> {
        self.s3_delivery_configuration.as_ref()
    }
}
impl UpdateDeliveryConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateDeliveryConfigurationInput`](crate::operation::update_delivery_configuration::UpdateDeliveryConfigurationInput).
    pub fn builder() -> crate::operation::update_delivery_configuration::builders::UpdateDeliveryConfigurationInputBuilder {
        crate::operation::update_delivery_configuration::builders::UpdateDeliveryConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateDeliveryConfigurationInput`](crate::operation::update_delivery_configuration::UpdateDeliveryConfigurationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateDeliveryConfigurationInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) record_fields: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) field_delimiter: ::std::option::Option<::std::string::String>,
    pub(crate) s3_delivery_configuration: ::std::option::Option<crate::types::S3DeliveryConfiguration>,
}
impl UpdateDeliveryConfigurationInputBuilder {
    /// <p>The ID of the delivery to be updated by this request.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the delivery to be updated by this request.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the delivery to be updated by this request.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Appends an item to `record_fields`.
    ///
    /// To override the contents of this collection use [`set_record_fields`](Self::set_record_fields).
    ///
    /// <p>The list of record fields to be delivered to the destination, in order. If the delivery's log source has mandatory fields, they must be included in this list.</p>
    pub fn record_fields(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.record_fields.unwrap_or_default();
        v.push(input.into());
        self.record_fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of record fields to be delivered to the destination, in order. If the delivery's log source has mandatory fields, they must be included in this list.</p>
    pub fn set_record_fields(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.record_fields = input;
        self
    }
    /// <p>The list of record fields to be delivered to the destination, in order. If the delivery's log source has mandatory fields, they must be included in this list.</p>
    pub fn get_record_fields(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.record_fields
    }
    /// <p>The field delimiter to use between record fields when the final output format of a delivery is in <code>Plain</code>, <code>W3C</code>, or <code>Raw</code> format.</p>
    pub fn field_delimiter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_delimiter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The field delimiter to use between record fields when the final output format of a delivery is in <code>Plain</code>, <code>W3C</code>, or <code>Raw</code> format.</p>
    pub fn set_field_delimiter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_delimiter = input;
        self
    }
    /// <p>The field delimiter to use between record fields when the final output format of a delivery is in <code>Plain</code>, <code>W3C</code>, or <code>Raw</code> format.</p>
    pub fn get_field_delimiter(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_delimiter
    }
    /// <p>This structure contains parameters that are valid only when the delivery's delivery destination is an S3 bucket.</p>
    pub fn s3_delivery_configuration(mut self, input: crate::types::S3DeliveryConfiguration) -> Self {
        self.s3_delivery_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>This structure contains parameters that are valid only when the delivery's delivery destination is an S3 bucket.</p>
    pub fn set_s3_delivery_configuration(mut self, input: ::std::option::Option<crate::types::S3DeliveryConfiguration>) -> Self {
        self.s3_delivery_configuration = input;
        self
    }
    /// <p>This structure contains parameters that are valid only when the delivery's delivery destination is an S3 bucket.</p>
    pub fn get_s3_delivery_configuration(&self) -> &::std::option::Option<crate::types::S3DeliveryConfiguration> {
        &self.s3_delivery_configuration
    }
    /// Consumes the builder and constructs a [`UpdateDeliveryConfigurationInput`](crate::operation::update_delivery_configuration::UpdateDeliveryConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_delivery_configuration::UpdateDeliveryConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_delivery_configuration::UpdateDeliveryConfigurationInput {
            id: self.id,
            record_fields: self.record_fields,
            field_delimiter: self.field_delimiter,
            s3_delivery_configuration: self.s3_delivery_configuration,
        })
    }
}
