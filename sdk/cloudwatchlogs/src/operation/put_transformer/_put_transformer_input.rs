// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutTransformerInput {
    /// <p>Specify either the name or ARN of the log group to create the transformer for.</p>
    pub log_group_identifier: ::std::option::Option<::std::string::String>,
    /// <p>This structure contains the configuration of this log transformer. A log transformer is an array of processors, where each processor applies one type of transformation to the log events that are ingested.</p>
    pub transformer_config: ::std::option::Option<::std::vec::Vec<crate::types::Processor>>,
}
impl PutTransformerInput {
    /// <p>Specify either the name or ARN of the log group to create the transformer for.</p>
    pub fn log_group_identifier(&self) -> ::std::option::Option<&str> {
        self.log_group_identifier.as_deref()
    }
    /// <p>This structure contains the configuration of this log transformer. A log transformer is an array of processors, where each processor applies one type of transformation to the log events that are ingested.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.transformer_config.is_none()`.
    pub fn transformer_config(&self) -> &[crate::types::Processor] {
        self.transformer_config.as_deref().unwrap_or_default()
    }
}
impl PutTransformerInput {
    /// Creates a new builder-style object to manufacture [`PutTransformerInput`](crate::operation::put_transformer::PutTransformerInput).
    pub fn builder() -> crate::operation::put_transformer::builders::PutTransformerInputBuilder {
        crate::operation::put_transformer::builders::PutTransformerInputBuilder::default()
    }
}

/// A builder for [`PutTransformerInput`](crate::operation::put_transformer::PutTransformerInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PutTransformerInputBuilder {
    pub(crate) log_group_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) transformer_config: ::std::option::Option<::std::vec::Vec<crate::types::Processor>>,
}
impl PutTransformerInputBuilder {
    /// <p>Specify either the name or ARN of the log group to create the transformer for.</p>
    /// This field is required.
    pub fn log_group_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_group_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify either the name or ARN of the log group to create the transformer for.</p>
    pub fn set_log_group_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_group_identifier = input;
        self
    }
    /// <p>Specify either the name or ARN of the log group to create the transformer for.</p>
    pub fn get_log_group_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_group_identifier
    }
    /// Appends an item to `transformer_config`.
    ///
    /// To override the contents of this collection use [`set_transformer_config`](Self::set_transformer_config).
    ///
    /// <p>This structure contains the configuration of this log transformer. A log transformer is an array of processors, where each processor applies one type of transformation to the log events that are ingested.</p>
    pub fn transformer_config(mut self, input: crate::types::Processor) -> Self {
        let mut v = self.transformer_config.unwrap_or_default();
        v.push(input);
        self.transformer_config = ::std::option::Option::Some(v);
        self
    }
    /// <p>This structure contains the configuration of this log transformer. A log transformer is an array of processors, where each processor applies one type of transformation to the log events that are ingested.</p>
    pub fn set_transformer_config(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Processor>>) -> Self {
        self.transformer_config = input;
        self
    }
    /// <p>This structure contains the configuration of this log transformer. A log transformer is an array of processors, where each processor applies one type of transformation to the log events that are ingested.</p>
    pub fn get_transformer_config(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Processor>> {
        &self.transformer_config
    }
    /// Consumes the builder and constructs a [`PutTransformerInput`](crate::operation::put_transformer::PutTransformerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::put_transformer::PutTransformerInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::put_transformer::PutTransformerInput {
            log_group_identifier: self.log_group_identifier,
            transformer_config: self.transformer_config,
        })
    }
}
