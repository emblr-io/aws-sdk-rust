// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListIntegrationsInput {
    /// <p>To limit the results to integrations that start with a certain name prefix, specify that name prefix here.</p>
    pub integration_name_prefix: ::std::option::Option<::std::string::String>,
    /// <p>To limit the results to integrations of a certain type, specify that type here.</p>
    pub integration_type: ::std::option::Option<crate::types::IntegrationType>,
    /// <p>To limit the results to integrations with a certain status, specify that status here.</p>
    pub integration_status: ::std::option::Option<crate::types::IntegrationStatus>,
}
impl ListIntegrationsInput {
    /// <p>To limit the results to integrations that start with a certain name prefix, specify that name prefix here.</p>
    pub fn integration_name_prefix(&self) -> ::std::option::Option<&str> {
        self.integration_name_prefix.as_deref()
    }
    /// <p>To limit the results to integrations of a certain type, specify that type here.</p>
    pub fn integration_type(&self) -> ::std::option::Option<&crate::types::IntegrationType> {
        self.integration_type.as_ref()
    }
    /// <p>To limit the results to integrations with a certain status, specify that status here.</p>
    pub fn integration_status(&self) -> ::std::option::Option<&crate::types::IntegrationStatus> {
        self.integration_status.as_ref()
    }
}
impl ListIntegrationsInput {
    /// Creates a new builder-style object to manufacture [`ListIntegrationsInput`](crate::operation::list_integrations::ListIntegrationsInput).
    pub fn builder() -> crate::operation::list_integrations::builders::ListIntegrationsInputBuilder {
        crate::operation::list_integrations::builders::ListIntegrationsInputBuilder::default()
    }
}

/// A builder for [`ListIntegrationsInput`](crate::operation::list_integrations::ListIntegrationsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListIntegrationsInputBuilder {
    pub(crate) integration_name_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) integration_type: ::std::option::Option<crate::types::IntegrationType>,
    pub(crate) integration_status: ::std::option::Option<crate::types::IntegrationStatus>,
}
impl ListIntegrationsInputBuilder {
    /// <p>To limit the results to integrations that start with a certain name prefix, specify that name prefix here.</p>
    pub fn integration_name_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.integration_name_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>To limit the results to integrations that start with a certain name prefix, specify that name prefix here.</p>
    pub fn set_integration_name_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.integration_name_prefix = input;
        self
    }
    /// <p>To limit the results to integrations that start with a certain name prefix, specify that name prefix here.</p>
    pub fn get_integration_name_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.integration_name_prefix
    }
    /// <p>To limit the results to integrations of a certain type, specify that type here.</p>
    pub fn integration_type(mut self, input: crate::types::IntegrationType) -> Self {
        self.integration_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>To limit the results to integrations of a certain type, specify that type here.</p>
    pub fn set_integration_type(mut self, input: ::std::option::Option<crate::types::IntegrationType>) -> Self {
        self.integration_type = input;
        self
    }
    /// <p>To limit the results to integrations of a certain type, specify that type here.</p>
    pub fn get_integration_type(&self) -> &::std::option::Option<crate::types::IntegrationType> {
        &self.integration_type
    }
    /// <p>To limit the results to integrations with a certain status, specify that status here.</p>
    pub fn integration_status(mut self, input: crate::types::IntegrationStatus) -> Self {
        self.integration_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>To limit the results to integrations with a certain status, specify that status here.</p>
    pub fn set_integration_status(mut self, input: ::std::option::Option<crate::types::IntegrationStatus>) -> Self {
        self.integration_status = input;
        self
    }
    /// <p>To limit the results to integrations with a certain status, specify that status here.</p>
    pub fn get_integration_status(&self) -> &::std::option::Option<crate::types::IntegrationStatus> {
        &self.integration_status
    }
    /// Consumes the builder and constructs a [`ListIntegrationsInput`](crate::operation::list_integrations::ListIntegrationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_integrations::ListIntegrationsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_integrations::ListIntegrationsInput {
            integration_name_prefix: self.integration_name_prefix,
            integration_type: self.integration_type,
            integration_status: self.integration_status,
        })
    }
}
