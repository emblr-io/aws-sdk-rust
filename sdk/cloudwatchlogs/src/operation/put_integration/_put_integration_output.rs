// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutIntegrationOutput {
    /// <p>The name of the integration that you just created.</p>
    pub integration_name: ::std::option::Option<::std::string::String>,
    /// <p>The status of the integration that you just created.</p>
    /// <p>After you create an integration, it takes a few minutes to complete. During this time, you'll see the status as <code>PROVISIONING</code>.</p>
    pub integration_status: ::std::option::Option<crate::types::IntegrationStatus>,
    _request_id: Option<String>,
}
impl PutIntegrationOutput {
    /// <p>The name of the integration that you just created.</p>
    pub fn integration_name(&self) -> ::std::option::Option<&str> {
        self.integration_name.as_deref()
    }
    /// <p>The status of the integration that you just created.</p>
    /// <p>After you create an integration, it takes a few minutes to complete. During this time, you'll see the status as <code>PROVISIONING</code>.</p>
    pub fn integration_status(&self) -> ::std::option::Option<&crate::types::IntegrationStatus> {
        self.integration_status.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for PutIntegrationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutIntegrationOutput {
    /// Creates a new builder-style object to manufacture [`PutIntegrationOutput`](crate::operation::put_integration::PutIntegrationOutput).
    pub fn builder() -> crate::operation::put_integration::builders::PutIntegrationOutputBuilder {
        crate::operation::put_integration::builders::PutIntegrationOutputBuilder::default()
    }
}

/// A builder for [`PutIntegrationOutput`](crate::operation::put_integration::PutIntegrationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PutIntegrationOutputBuilder {
    pub(crate) integration_name: ::std::option::Option<::std::string::String>,
    pub(crate) integration_status: ::std::option::Option<crate::types::IntegrationStatus>,
    _request_id: Option<String>,
}
impl PutIntegrationOutputBuilder {
    /// <p>The name of the integration that you just created.</p>
    pub fn integration_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.integration_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the integration that you just created.</p>
    pub fn set_integration_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.integration_name = input;
        self
    }
    /// <p>The name of the integration that you just created.</p>
    pub fn get_integration_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.integration_name
    }
    /// <p>The status of the integration that you just created.</p>
    /// <p>After you create an integration, it takes a few minutes to complete. During this time, you'll see the status as <code>PROVISIONING</code>.</p>
    pub fn integration_status(mut self, input: crate::types::IntegrationStatus) -> Self {
        self.integration_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the integration that you just created.</p>
    /// <p>After you create an integration, it takes a few minutes to complete. During this time, you'll see the status as <code>PROVISIONING</code>.</p>
    pub fn set_integration_status(mut self, input: ::std::option::Option<crate::types::IntegrationStatus>) -> Self {
        self.integration_status = input;
        self
    }
    /// <p>The status of the integration that you just created.</p>
    /// <p>After you create an integration, it takes a few minutes to complete. During this time, you'll see the status as <code>PROVISIONING</code>.</p>
    pub fn get_integration_status(&self) -> &::std::option::Option<crate::types::IntegrationStatus> {
        &self.integration_status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`PutIntegrationOutput`](crate::operation::put_integration::PutIntegrationOutput).
    pub fn build(self) -> crate::operation::put_integration::PutIntegrationOutput {
        crate::operation::put_integration::PutIntegrationOutput {
            integration_name: self.integration_name,
            integration_status: self.integration_status,
            _request_id: self._request_id,
        }
    }
}
