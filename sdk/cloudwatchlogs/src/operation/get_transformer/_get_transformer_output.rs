// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTransformerOutput {
    /// <p>The ARN of the log group that you specified in your request.</p>
    pub log_group_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The creation time of the transformer, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.</p>
    pub creation_time: ::std::option::Option<i64>,
    /// <p>The date and time when this transformer was most recently modified, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.</p>
    pub last_modified_time: ::std::option::Option<i64>,
    /// <p>This sructure contains the configuration of the requested transformer.</p>
    pub transformer_config: ::std::option::Option<::std::vec::Vec<crate::types::Processor>>,
    _request_id: Option<String>,
}
impl GetTransformerOutput {
    /// <p>The ARN of the log group that you specified in your request.</p>
    pub fn log_group_identifier(&self) -> ::std::option::Option<&str> {
        self.log_group_identifier.as_deref()
    }
    /// <p>The creation time of the transformer, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.</p>
    pub fn creation_time(&self) -> ::std::option::Option<i64> {
        self.creation_time
    }
    /// <p>The date and time when this transformer was most recently modified, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<i64> {
        self.last_modified_time
    }
    /// <p>This sructure contains the configuration of the requested transformer.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.transformer_config.is_none()`.
    pub fn transformer_config(&self) -> &[crate::types::Processor] {
        self.transformer_config.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for GetTransformerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTransformerOutput {
    /// Creates a new builder-style object to manufacture [`GetTransformerOutput`](crate::operation::get_transformer::GetTransformerOutput).
    pub fn builder() -> crate::operation::get_transformer::builders::GetTransformerOutputBuilder {
        crate::operation::get_transformer::builders::GetTransformerOutputBuilder::default()
    }
}

/// A builder for [`GetTransformerOutput`](crate::operation::get_transformer::GetTransformerOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetTransformerOutputBuilder {
    pub(crate) log_group_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<i64>,
    pub(crate) last_modified_time: ::std::option::Option<i64>,
    pub(crate) transformer_config: ::std::option::Option<::std::vec::Vec<crate::types::Processor>>,
    _request_id: Option<String>,
}
impl GetTransformerOutputBuilder {
    /// <p>The ARN of the log group that you specified in your request.</p>
    pub fn log_group_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_group_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the log group that you specified in your request.</p>
    pub fn set_log_group_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_group_identifier = input;
        self
    }
    /// <p>The ARN of the log group that you specified in your request.</p>
    pub fn get_log_group_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_group_identifier
    }
    /// <p>The creation time of the transformer, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.</p>
    pub fn creation_time(mut self, input: i64) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation time of the transformer, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<i64>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The creation time of the transformer, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<i64> {
        &self.creation_time
    }
    /// <p>The date and time when this transformer was most recently modified, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.</p>
    pub fn last_modified_time(mut self, input: i64) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when this transformer was most recently modified, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<i64>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The date and time when this transformer was most recently modified, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<i64> {
        &self.last_modified_time
    }
    /// Appends an item to `transformer_config`.
    ///
    /// To override the contents of this collection use [`set_transformer_config`](Self::set_transformer_config).
    ///
    /// <p>This sructure contains the configuration of the requested transformer.</p>
    pub fn transformer_config(mut self, input: crate::types::Processor) -> Self {
        let mut v = self.transformer_config.unwrap_or_default();
        v.push(input);
        self.transformer_config = ::std::option::Option::Some(v);
        self
    }
    /// <p>This sructure contains the configuration of the requested transformer.</p>
    pub fn set_transformer_config(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Processor>>) -> Self {
        self.transformer_config = input;
        self
    }
    /// <p>This sructure contains the configuration of the requested transformer.</p>
    pub fn get_transformer_config(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Processor>> {
        &self.transformer_config
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetTransformerOutput`](crate::operation::get_transformer::GetTransformerOutput).
    pub fn build(self) -> crate::operation::get_transformer::GetTransformerOutput {
        crate::operation::get_transformer::GetTransformerOutput {
            log_group_identifier: self.log_group_identifier,
            creation_time: self.creation_time,
            last_modified_time: self.last_modified_time,
            transformer_config: self.transformer_config,
            _request_id: self._request_id,
        }
    }
}
