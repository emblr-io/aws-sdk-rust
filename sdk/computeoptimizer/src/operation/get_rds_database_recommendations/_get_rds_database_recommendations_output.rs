// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetRdsDatabaseRecommendationsOutput {
    /// <p>The token to advance to the next page of Amazon Aurora and RDS database recommendations.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>An array of objects that describe the Amazon Aurora and RDS database recommendations.</p>
    pub rds_db_recommendations: ::std::option::Option<::std::vec::Vec<crate::types::RdsdbRecommendation>>,
    /// <p>An array of objects that describe errors of the request.</p>
    pub errors: ::std::option::Option<::std::vec::Vec<crate::types::GetRecommendationError>>,
    _request_id: Option<String>,
}
impl GetRdsDatabaseRecommendationsOutput {
    /// <p>The token to advance to the next page of Amazon Aurora and RDS database recommendations.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>An array of objects that describe the Amazon Aurora and RDS database recommendations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rds_db_recommendations.is_none()`.
    pub fn rds_db_recommendations(&self) -> &[crate::types::RdsdbRecommendation] {
        self.rds_db_recommendations.as_deref().unwrap_or_default()
    }
    /// <p>An array of objects that describe errors of the request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.errors.is_none()`.
    pub fn errors(&self) -> &[crate::types::GetRecommendationError] {
        self.errors.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for GetRdsDatabaseRecommendationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetRdsDatabaseRecommendationsOutput {
    /// Creates a new builder-style object to manufacture [`GetRdsDatabaseRecommendationsOutput`](crate::operation::get_rds_database_recommendations::GetRdsDatabaseRecommendationsOutput).
    pub fn builder() -> crate::operation::get_rds_database_recommendations::builders::GetRdsDatabaseRecommendationsOutputBuilder {
        crate::operation::get_rds_database_recommendations::builders::GetRdsDatabaseRecommendationsOutputBuilder::default()
    }
}

/// A builder for [`GetRdsDatabaseRecommendationsOutput`](crate::operation::get_rds_database_recommendations::GetRdsDatabaseRecommendationsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetRdsDatabaseRecommendationsOutputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) rds_db_recommendations: ::std::option::Option<::std::vec::Vec<crate::types::RdsdbRecommendation>>,
    pub(crate) errors: ::std::option::Option<::std::vec::Vec<crate::types::GetRecommendationError>>,
    _request_id: Option<String>,
}
impl GetRdsDatabaseRecommendationsOutputBuilder {
    /// <p>The token to advance to the next page of Amazon Aurora and RDS database recommendations.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to advance to the next page of Amazon Aurora and RDS database recommendations.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token to advance to the next page of Amazon Aurora and RDS database recommendations.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `rds_db_recommendations`.
    ///
    /// To override the contents of this collection use [`set_rds_db_recommendations`](Self::set_rds_db_recommendations).
    ///
    /// <p>An array of objects that describe the Amazon Aurora and RDS database recommendations.</p>
    pub fn rds_db_recommendations(mut self, input: crate::types::RdsdbRecommendation) -> Self {
        let mut v = self.rds_db_recommendations.unwrap_or_default();
        v.push(input);
        self.rds_db_recommendations = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects that describe the Amazon Aurora and RDS database recommendations.</p>
    pub fn set_rds_db_recommendations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RdsdbRecommendation>>) -> Self {
        self.rds_db_recommendations = input;
        self
    }
    /// <p>An array of objects that describe the Amazon Aurora and RDS database recommendations.</p>
    pub fn get_rds_db_recommendations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RdsdbRecommendation>> {
        &self.rds_db_recommendations
    }
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>An array of objects that describe errors of the request.</p>
    pub fn errors(mut self, input: crate::types::GetRecommendationError) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects that describe errors of the request.</p>
    pub fn set_errors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GetRecommendationError>>) -> Self {
        self.errors = input;
        self
    }
    /// <p>An array of objects that describe errors of the request.</p>
    pub fn get_errors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GetRecommendationError>> {
        &self.errors
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetRdsDatabaseRecommendationsOutput`](crate::operation::get_rds_database_recommendations::GetRdsDatabaseRecommendationsOutput).
    pub fn build(self) -> crate::operation::get_rds_database_recommendations::GetRdsDatabaseRecommendationsOutput {
        crate::operation::get_rds_database_recommendations::GetRdsDatabaseRecommendationsOutput {
            next_token: self.next_token,
            rds_db_recommendations: self.rds_db_recommendations,
            errors: self.errors,
            _request_id: self._request_id,
        }
    }
}
