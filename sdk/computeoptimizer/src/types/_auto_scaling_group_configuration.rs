// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration of an EC2 Auto Scaling group.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutoScalingGroupConfiguration {
    /// <p>The desired capacity, or number of instances, for the EC2 Auto Scaling group.</p>
    pub desired_capacity: i32,
    /// <p>The minimum size, or minimum number of instances, for the EC2 Auto Scaling group.</p>
    pub min_size: i32,
    /// <p>The maximum size, or maximum number of instances, for the EC2 Auto Scaling group.</p>
    pub max_size: i32,
    /// <p>The instance type for the EC2 Auto Scaling group.</p>
    pub instance_type: ::std::option::Option<::std::string::String>,
    /// <p>Describes the allocation strategy that the EC2 Auto Scaling group uses. This field is only available for EC2 Auto Scaling groups with mixed instance types.</p>
    pub allocation_strategy: ::std::option::Option<crate::types::AllocationStrategy>,
    /// <p>Describes the projected percentage reduction in instance hours after adopting the recommended configuration. This field is only available for EC2 Auto Scaling groups with scaling policies.</p>
    pub estimated_instance_hour_reduction_percentage: ::std::option::Option<f64>,
    /// <p>Describes whether the EC2 Auto Scaling group has a single instance type or a mixed instance type configuration.</p>
    pub r#type: ::std::option::Option<crate::types::AsgType>,
    /// <p>List the instance types within an EC2 Auto Scaling group that has mixed instance types.</p>
    pub mixed_instance_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AutoScalingGroupConfiguration {
    /// <p>The desired capacity, or number of instances, for the EC2 Auto Scaling group.</p>
    pub fn desired_capacity(&self) -> i32 {
        self.desired_capacity
    }
    /// <p>The minimum size, or minimum number of instances, for the EC2 Auto Scaling group.</p>
    pub fn min_size(&self) -> i32 {
        self.min_size
    }
    /// <p>The maximum size, or maximum number of instances, for the EC2 Auto Scaling group.</p>
    pub fn max_size(&self) -> i32 {
        self.max_size
    }
    /// <p>The instance type for the EC2 Auto Scaling group.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>Describes the allocation strategy that the EC2 Auto Scaling group uses. This field is only available for EC2 Auto Scaling groups with mixed instance types.</p>
    pub fn allocation_strategy(&self) -> ::std::option::Option<&crate::types::AllocationStrategy> {
        self.allocation_strategy.as_ref()
    }
    /// <p>Describes the projected percentage reduction in instance hours after adopting the recommended configuration. This field is only available for EC2 Auto Scaling groups with scaling policies.</p>
    pub fn estimated_instance_hour_reduction_percentage(&self) -> ::std::option::Option<f64> {
        self.estimated_instance_hour_reduction_percentage
    }
    /// <p>Describes whether the EC2 Auto Scaling group has a single instance type or a mixed instance type configuration.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::AsgType> {
        self.r#type.as_ref()
    }
    /// <p>List the instance types within an EC2 Auto Scaling group that has mixed instance types.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.mixed_instance_types.is_none()`.
    pub fn mixed_instance_types(&self) -> &[::std::string::String] {
        self.mixed_instance_types.as_deref().unwrap_or_default()
    }
}
impl AutoScalingGroupConfiguration {
    /// Creates a new builder-style object to manufacture [`AutoScalingGroupConfiguration`](crate::types::AutoScalingGroupConfiguration).
    pub fn builder() -> crate::types::builders::AutoScalingGroupConfigurationBuilder {
        crate::types::builders::AutoScalingGroupConfigurationBuilder::default()
    }
}

/// A builder for [`AutoScalingGroupConfiguration`](crate::types::AutoScalingGroupConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutoScalingGroupConfigurationBuilder {
    pub(crate) desired_capacity: ::std::option::Option<i32>,
    pub(crate) min_size: ::std::option::Option<i32>,
    pub(crate) max_size: ::std::option::Option<i32>,
    pub(crate) instance_type: ::std::option::Option<::std::string::String>,
    pub(crate) allocation_strategy: ::std::option::Option<crate::types::AllocationStrategy>,
    pub(crate) estimated_instance_hour_reduction_percentage: ::std::option::Option<f64>,
    pub(crate) r#type: ::std::option::Option<crate::types::AsgType>,
    pub(crate) mixed_instance_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AutoScalingGroupConfigurationBuilder {
    /// <p>The desired capacity, or number of instances, for the EC2 Auto Scaling group.</p>
    pub fn desired_capacity(mut self, input: i32) -> Self {
        self.desired_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The desired capacity, or number of instances, for the EC2 Auto Scaling group.</p>
    pub fn set_desired_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.desired_capacity = input;
        self
    }
    /// <p>The desired capacity, or number of instances, for the EC2 Auto Scaling group.</p>
    pub fn get_desired_capacity(&self) -> &::std::option::Option<i32> {
        &self.desired_capacity
    }
    /// <p>The minimum size, or minimum number of instances, for the EC2 Auto Scaling group.</p>
    pub fn min_size(mut self, input: i32) -> Self {
        self.min_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum size, or minimum number of instances, for the EC2 Auto Scaling group.</p>
    pub fn set_min_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.min_size = input;
        self
    }
    /// <p>The minimum size, or minimum number of instances, for the EC2 Auto Scaling group.</p>
    pub fn get_min_size(&self) -> &::std::option::Option<i32> {
        &self.min_size
    }
    /// <p>The maximum size, or maximum number of instances, for the EC2 Auto Scaling group.</p>
    pub fn max_size(mut self, input: i32) -> Self {
        self.max_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum size, or maximum number of instances, for the EC2 Auto Scaling group.</p>
    pub fn set_max_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_size = input;
        self
    }
    /// <p>The maximum size, or maximum number of instances, for the EC2 Auto Scaling group.</p>
    pub fn get_max_size(&self) -> &::std::option::Option<i32> {
        &self.max_size
    }
    /// <p>The instance type for the EC2 Auto Scaling group.</p>
    pub fn instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance type for the EC2 Auto Scaling group.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The instance type for the EC2 Auto Scaling group.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_type
    }
    /// <p>Describes the allocation strategy that the EC2 Auto Scaling group uses. This field is only available for EC2 Auto Scaling groups with mixed instance types.</p>
    pub fn allocation_strategy(mut self, input: crate::types::AllocationStrategy) -> Self {
        self.allocation_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the allocation strategy that the EC2 Auto Scaling group uses. This field is only available for EC2 Auto Scaling groups with mixed instance types.</p>
    pub fn set_allocation_strategy(mut self, input: ::std::option::Option<crate::types::AllocationStrategy>) -> Self {
        self.allocation_strategy = input;
        self
    }
    /// <p>Describes the allocation strategy that the EC2 Auto Scaling group uses. This field is only available for EC2 Auto Scaling groups with mixed instance types.</p>
    pub fn get_allocation_strategy(&self) -> &::std::option::Option<crate::types::AllocationStrategy> {
        &self.allocation_strategy
    }
    /// <p>Describes the projected percentage reduction in instance hours after adopting the recommended configuration. This field is only available for EC2 Auto Scaling groups with scaling policies.</p>
    pub fn estimated_instance_hour_reduction_percentage(mut self, input: f64) -> Self {
        self.estimated_instance_hour_reduction_percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the projected percentage reduction in instance hours after adopting the recommended configuration. This field is only available for EC2 Auto Scaling groups with scaling policies.</p>
    pub fn set_estimated_instance_hour_reduction_percentage(mut self, input: ::std::option::Option<f64>) -> Self {
        self.estimated_instance_hour_reduction_percentage = input;
        self
    }
    /// <p>Describes the projected percentage reduction in instance hours after adopting the recommended configuration. This field is only available for EC2 Auto Scaling groups with scaling policies.</p>
    pub fn get_estimated_instance_hour_reduction_percentage(&self) -> &::std::option::Option<f64> {
        &self.estimated_instance_hour_reduction_percentage
    }
    /// <p>Describes whether the EC2 Auto Scaling group has a single instance type or a mixed instance type configuration.</p>
    pub fn r#type(mut self, input: crate::types::AsgType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes whether the EC2 Auto Scaling group has a single instance type or a mixed instance type configuration.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::AsgType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Describes whether the EC2 Auto Scaling group has a single instance type or a mixed instance type configuration.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::AsgType> {
        &self.r#type
    }
    /// Appends an item to `mixed_instance_types`.
    ///
    /// To override the contents of this collection use [`set_mixed_instance_types`](Self::set_mixed_instance_types).
    ///
    /// <p>List the instance types within an EC2 Auto Scaling group that has mixed instance types.</p>
    pub fn mixed_instance_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.mixed_instance_types.unwrap_or_default();
        v.push(input.into());
        self.mixed_instance_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>List the instance types within an EC2 Auto Scaling group that has mixed instance types.</p>
    pub fn set_mixed_instance_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.mixed_instance_types = input;
        self
    }
    /// <p>List the instance types within an EC2 Auto Scaling group that has mixed instance types.</p>
    pub fn get_mixed_instance_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.mixed_instance_types
    }
    /// Consumes the builder and constructs a [`AutoScalingGroupConfiguration`](crate::types::AutoScalingGroupConfiguration).
    pub fn build(self) -> crate::types::AutoScalingGroupConfiguration {
        crate::types::AutoScalingGroupConfiguration {
            desired_capacity: self.desired_capacity.unwrap_or_default(),
            min_size: self.min_size.unwrap_or_default(),
            max_size: self.max_size.unwrap_or_default(),
            instance_type: self.instance_type,
            allocation_strategy: self.allocation_strategy,
            estimated_instance_hour_reduction_percentage: self.estimated_instance_hour_reduction_percentage,
            r#type: self.r#type,
            mixed_instance_types: self.mixed_instance_types,
        }
    }
}
