// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the recommendation options for a DB instance.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RdsdbInstanceRecommendationOption {
    /// <p>Describes the DB instance class recommendation option for your Amazon Aurora or RDS database.</p>
    pub db_instance_class: ::std::option::Option<::std::string::String>,
    /// <p>An array of objects that describe the projected utilization metrics of the DB instance recommendation option.</p>
    pub projected_utilization_metrics: ::std::option::Option<::std::vec::Vec<crate::types::RdsdbUtilizationMetric>>,
    /// <p>The performance risk of the DB instance recommendation option.</p>
    pub performance_risk: f64,
    /// <p>The rank identifier of the DB instance recommendation option.</p>
    pub rank: i32,
    /// <p>Describes the savings opportunity for recommendations of a given resource type or for the recommendation option of an individual resource.</p>
    /// <p>Savings opportunity represents the estimated monthly savings you can achieve by implementing a given Compute Optimizer recommendation.</p><important>
    /// <p>Savings opportunity data requires that you opt in to Cost Explorer, as well as activate <b>Receive Amazon EC2 resource recommendations</b> in the Cost Explorer preferences page. That creates a connection between Cost Explorer and Compute Optimizer. With this connection, Cost Explorer generates savings estimates considering the price of existing resources, the price of recommended resources, and historical usage data. Estimated monthly savings reflects the projected dollar savings associated with each of the recommendations generated. For more information, see <a href="https://docs.aws.amazon.com/cost-management/latest/userguide/ce-enable.html">Enabling Cost Explorer</a> and <a href="https://docs.aws.amazon.com/cost-management/latest/userguide/ce-rightsizing.html">Optimizing your cost with Rightsizing Recommendations</a> in the <i>Cost Management User Guide</i>.</p>
    /// </important>
    pub savings_opportunity: ::std::option::Option<crate::types::SavingsOpportunity>,
    /// <p>Describes the savings opportunity for Amazon Aurora and RDS database recommendations or for the recommendation option.</p>
    /// <p>Savings opportunity represents the estimated monthly savings after applying Savings Plans discounts. You can achieve this by implementing a given Compute Optimizer recommendation.</p>
    pub savings_opportunity_after_discounts: ::std::option::Option<crate::types::RdsInstanceSavingsOpportunityAfterDiscounts>,
}
impl RdsdbInstanceRecommendationOption {
    /// <p>Describes the DB instance class recommendation option for your Amazon Aurora or RDS database.</p>
    pub fn db_instance_class(&self) -> ::std::option::Option<&str> {
        self.db_instance_class.as_deref()
    }
    /// <p>An array of objects that describe the projected utilization metrics of the DB instance recommendation option.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.projected_utilization_metrics.is_none()`.
    pub fn projected_utilization_metrics(&self) -> &[crate::types::RdsdbUtilizationMetric] {
        self.projected_utilization_metrics.as_deref().unwrap_or_default()
    }
    /// <p>The performance risk of the DB instance recommendation option.</p>
    pub fn performance_risk(&self) -> f64 {
        self.performance_risk
    }
    /// <p>The rank identifier of the DB instance recommendation option.</p>
    pub fn rank(&self) -> i32 {
        self.rank
    }
    /// <p>Describes the savings opportunity for recommendations of a given resource type or for the recommendation option of an individual resource.</p>
    /// <p>Savings opportunity represents the estimated monthly savings you can achieve by implementing a given Compute Optimizer recommendation.</p><important>
    /// <p>Savings opportunity data requires that you opt in to Cost Explorer, as well as activate <b>Receive Amazon EC2 resource recommendations</b> in the Cost Explorer preferences page. That creates a connection between Cost Explorer and Compute Optimizer. With this connection, Cost Explorer generates savings estimates considering the price of existing resources, the price of recommended resources, and historical usage data. Estimated monthly savings reflects the projected dollar savings associated with each of the recommendations generated. For more information, see <a href="https://docs.aws.amazon.com/cost-management/latest/userguide/ce-enable.html">Enabling Cost Explorer</a> and <a href="https://docs.aws.amazon.com/cost-management/latest/userguide/ce-rightsizing.html">Optimizing your cost with Rightsizing Recommendations</a> in the <i>Cost Management User Guide</i>.</p>
    /// </important>
    pub fn savings_opportunity(&self) -> ::std::option::Option<&crate::types::SavingsOpportunity> {
        self.savings_opportunity.as_ref()
    }
    /// <p>Describes the savings opportunity for Amazon Aurora and RDS database recommendations or for the recommendation option.</p>
    /// <p>Savings opportunity represents the estimated monthly savings after applying Savings Plans discounts. You can achieve this by implementing a given Compute Optimizer recommendation.</p>
    pub fn savings_opportunity_after_discounts(&self) -> ::std::option::Option<&crate::types::RdsInstanceSavingsOpportunityAfterDiscounts> {
        self.savings_opportunity_after_discounts.as_ref()
    }
}
impl RdsdbInstanceRecommendationOption {
    /// Creates a new builder-style object to manufacture [`RdsdbInstanceRecommendationOption`](crate::types::RdsdbInstanceRecommendationOption).
    pub fn builder() -> crate::types::builders::RdsdbInstanceRecommendationOptionBuilder {
        crate::types::builders::RdsdbInstanceRecommendationOptionBuilder::default()
    }
}

/// A builder for [`RdsdbInstanceRecommendationOption`](crate::types::RdsdbInstanceRecommendationOption).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RdsdbInstanceRecommendationOptionBuilder {
    pub(crate) db_instance_class: ::std::option::Option<::std::string::String>,
    pub(crate) projected_utilization_metrics: ::std::option::Option<::std::vec::Vec<crate::types::RdsdbUtilizationMetric>>,
    pub(crate) performance_risk: ::std::option::Option<f64>,
    pub(crate) rank: ::std::option::Option<i32>,
    pub(crate) savings_opportunity: ::std::option::Option<crate::types::SavingsOpportunity>,
    pub(crate) savings_opportunity_after_discounts: ::std::option::Option<crate::types::RdsInstanceSavingsOpportunityAfterDiscounts>,
}
impl RdsdbInstanceRecommendationOptionBuilder {
    /// <p>Describes the DB instance class recommendation option for your Amazon Aurora or RDS database.</p>
    pub fn db_instance_class(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_instance_class = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes the DB instance class recommendation option for your Amazon Aurora or RDS database.</p>
    pub fn set_db_instance_class(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_instance_class = input;
        self
    }
    /// <p>Describes the DB instance class recommendation option for your Amazon Aurora or RDS database.</p>
    pub fn get_db_instance_class(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_instance_class
    }
    /// Appends an item to `projected_utilization_metrics`.
    ///
    /// To override the contents of this collection use [`set_projected_utilization_metrics`](Self::set_projected_utilization_metrics).
    ///
    /// <p>An array of objects that describe the projected utilization metrics of the DB instance recommendation option.</p>
    pub fn projected_utilization_metrics(mut self, input: crate::types::RdsdbUtilizationMetric) -> Self {
        let mut v = self.projected_utilization_metrics.unwrap_or_default();
        v.push(input);
        self.projected_utilization_metrics = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects that describe the projected utilization metrics of the DB instance recommendation option.</p>
    pub fn set_projected_utilization_metrics(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RdsdbUtilizationMetric>>) -> Self {
        self.projected_utilization_metrics = input;
        self
    }
    /// <p>An array of objects that describe the projected utilization metrics of the DB instance recommendation option.</p>
    pub fn get_projected_utilization_metrics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RdsdbUtilizationMetric>> {
        &self.projected_utilization_metrics
    }
    /// <p>The performance risk of the DB instance recommendation option.</p>
    pub fn performance_risk(mut self, input: f64) -> Self {
        self.performance_risk = ::std::option::Option::Some(input);
        self
    }
    /// <p>The performance risk of the DB instance recommendation option.</p>
    pub fn set_performance_risk(mut self, input: ::std::option::Option<f64>) -> Self {
        self.performance_risk = input;
        self
    }
    /// <p>The performance risk of the DB instance recommendation option.</p>
    pub fn get_performance_risk(&self) -> &::std::option::Option<f64> {
        &self.performance_risk
    }
    /// <p>The rank identifier of the DB instance recommendation option.</p>
    pub fn rank(mut self, input: i32) -> Self {
        self.rank = ::std::option::Option::Some(input);
        self
    }
    /// <p>The rank identifier of the DB instance recommendation option.</p>
    pub fn set_rank(mut self, input: ::std::option::Option<i32>) -> Self {
        self.rank = input;
        self
    }
    /// <p>The rank identifier of the DB instance recommendation option.</p>
    pub fn get_rank(&self) -> &::std::option::Option<i32> {
        &self.rank
    }
    /// <p>Describes the savings opportunity for recommendations of a given resource type or for the recommendation option of an individual resource.</p>
    /// <p>Savings opportunity represents the estimated monthly savings you can achieve by implementing a given Compute Optimizer recommendation.</p><important>
    /// <p>Savings opportunity data requires that you opt in to Cost Explorer, as well as activate <b>Receive Amazon EC2 resource recommendations</b> in the Cost Explorer preferences page. That creates a connection between Cost Explorer and Compute Optimizer. With this connection, Cost Explorer generates savings estimates considering the price of existing resources, the price of recommended resources, and historical usage data. Estimated monthly savings reflects the projected dollar savings associated with each of the recommendations generated. For more information, see <a href="https://docs.aws.amazon.com/cost-management/latest/userguide/ce-enable.html">Enabling Cost Explorer</a> and <a href="https://docs.aws.amazon.com/cost-management/latest/userguide/ce-rightsizing.html">Optimizing your cost with Rightsizing Recommendations</a> in the <i>Cost Management User Guide</i>.</p>
    /// </important>
    pub fn savings_opportunity(mut self, input: crate::types::SavingsOpportunity) -> Self {
        self.savings_opportunity = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the savings opportunity for recommendations of a given resource type or for the recommendation option of an individual resource.</p>
    /// <p>Savings opportunity represents the estimated monthly savings you can achieve by implementing a given Compute Optimizer recommendation.</p><important>
    /// <p>Savings opportunity data requires that you opt in to Cost Explorer, as well as activate <b>Receive Amazon EC2 resource recommendations</b> in the Cost Explorer preferences page. That creates a connection between Cost Explorer and Compute Optimizer. With this connection, Cost Explorer generates savings estimates considering the price of existing resources, the price of recommended resources, and historical usage data. Estimated monthly savings reflects the projected dollar savings associated with each of the recommendations generated. For more information, see <a href="https://docs.aws.amazon.com/cost-management/latest/userguide/ce-enable.html">Enabling Cost Explorer</a> and <a href="https://docs.aws.amazon.com/cost-management/latest/userguide/ce-rightsizing.html">Optimizing your cost with Rightsizing Recommendations</a> in the <i>Cost Management User Guide</i>.</p>
    /// </important>
    pub fn set_savings_opportunity(mut self, input: ::std::option::Option<crate::types::SavingsOpportunity>) -> Self {
        self.savings_opportunity = input;
        self
    }
    /// <p>Describes the savings opportunity for recommendations of a given resource type or for the recommendation option of an individual resource.</p>
    /// <p>Savings opportunity represents the estimated monthly savings you can achieve by implementing a given Compute Optimizer recommendation.</p><important>
    /// <p>Savings opportunity data requires that you opt in to Cost Explorer, as well as activate <b>Receive Amazon EC2 resource recommendations</b> in the Cost Explorer preferences page. That creates a connection between Cost Explorer and Compute Optimizer. With this connection, Cost Explorer generates savings estimates considering the price of existing resources, the price of recommended resources, and historical usage data. Estimated monthly savings reflects the projected dollar savings associated with each of the recommendations generated. For more information, see <a href="https://docs.aws.amazon.com/cost-management/latest/userguide/ce-enable.html">Enabling Cost Explorer</a> and <a href="https://docs.aws.amazon.com/cost-management/latest/userguide/ce-rightsizing.html">Optimizing your cost with Rightsizing Recommendations</a> in the <i>Cost Management User Guide</i>.</p>
    /// </important>
    pub fn get_savings_opportunity(&self) -> &::std::option::Option<crate::types::SavingsOpportunity> {
        &self.savings_opportunity
    }
    /// <p>Describes the savings opportunity for Amazon Aurora and RDS database recommendations or for the recommendation option.</p>
    /// <p>Savings opportunity represents the estimated monthly savings after applying Savings Plans discounts. You can achieve this by implementing a given Compute Optimizer recommendation.</p>
    pub fn savings_opportunity_after_discounts(mut self, input: crate::types::RdsInstanceSavingsOpportunityAfterDiscounts) -> Self {
        self.savings_opportunity_after_discounts = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the savings opportunity for Amazon Aurora and RDS database recommendations or for the recommendation option.</p>
    /// <p>Savings opportunity represents the estimated monthly savings after applying Savings Plans discounts. You can achieve this by implementing a given Compute Optimizer recommendation.</p>
    pub fn set_savings_opportunity_after_discounts(
        mut self,
        input: ::std::option::Option<crate::types::RdsInstanceSavingsOpportunityAfterDiscounts>,
    ) -> Self {
        self.savings_opportunity_after_discounts = input;
        self
    }
    /// <p>Describes the savings opportunity for Amazon Aurora and RDS database recommendations or for the recommendation option.</p>
    /// <p>Savings opportunity represents the estimated monthly savings after applying Savings Plans discounts. You can achieve this by implementing a given Compute Optimizer recommendation.</p>
    pub fn get_savings_opportunity_after_discounts(&self) -> &::std::option::Option<crate::types::RdsInstanceSavingsOpportunityAfterDiscounts> {
        &self.savings_opportunity_after_discounts
    }
    /// Consumes the builder and constructs a [`RdsdbInstanceRecommendationOption`](crate::types::RdsdbInstanceRecommendationOption).
    pub fn build(self) -> crate::types::RdsdbInstanceRecommendationOption {
        crate::types::RdsdbInstanceRecommendationOption {
            db_instance_class: self.db_instance_class,
            projected_utilization_metrics: self.projected_utilization_metrics,
            performance_risk: self.performance_risk.unwrap_or_default(),
            rank: self.rank.unwrap_or_default(),
            savings_opportunity: self.savings_opportunity,
            savings_opportunity_after_discounts: self.savings_opportunity_after_discounts,
        }
    }
}
