// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the recommendation options for DB storage.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RdsdbStorageRecommendationOption {
    /// <p>The recommended storage configuration.</p>
    pub storage_configuration: ::std::option::Option<crate::types::DbStorageConfiguration>,
    /// <p>The rank identifier of the DB storage recommendation option.</p>
    pub rank: i32,
    /// <p>Describes the savings opportunity for recommendations of a given resource type or for the recommendation option of an individual resource.</p>
    /// <p>Savings opportunity represents the estimated monthly savings you can achieve by implementing a given Compute Optimizer recommendation.</p><important>
    /// <p>Savings opportunity data requires that you opt in to Cost Explorer, as well as activate <b>Receive Amazon EC2 resource recommendations</b> in the Cost Explorer preferences page. That creates a connection between Cost Explorer and Compute Optimizer. With this connection, Cost Explorer generates savings estimates considering the price of existing resources, the price of recommended resources, and historical usage data. Estimated monthly savings reflects the projected dollar savings associated with each of the recommendations generated. For more information, see <a href="https://docs.aws.amazon.com/cost-management/latest/userguide/ce-enable.html">Enabling Cost Explorer</a> and <a href="https://docs.aws.amazon.com/cost-management/latest/userguide/ce-rightsizing.html">Optimizing your cost with Rightsizing Recommendations</a> in the <i>Cost Management User Guide</i>.</p>
    /// </important>
    pub savings_opportunity: ::std::option::Option<crate::types::SavingsOpportunity>,
    /// <p>Describes the savings opportunity for DB storage recommendations or for the recommendation option.</p>
    /// <p>Savings opportunity represents the estimated monthly savings after applying Savings Plans discounts. You can achieve this by implementing a given Compute Optimizer recommendation.</p>
    pub savings_opportunity_after_discounts: ::std::option::Option<crate::types::RdsStorageSavingsOpportunityAfterDiscounts>,
    /// <p>The projected level of variation in monthly I/O costs for the DB storage recommendation option.</p>
    pub estimated_monthly_volume_iops_cost_variation: ::std::option::Option<crate::types::RdsEstimatedMonthlyVolumeIoPsCostVariation>,
}
impl RdsdbStorageRecommendationOption {
    /// <p>The recommended storage configuration.</p>
    pub fn storage_configuration(&self) -> ::std::option::Option<&crate::types::DbStorageConfiguration> {
        self.storage_configuration.as_ref()
    }
    /// <p>The rank identifier of the DB storage recommendation option.</p>
    pub fn rank(&self) -> i32 {
        self.rank
    }
    /// <p>Describes the savings opportunity for recommendations of a given resource type or for the recommendation option of an individual resource.</p>
    /// <p>Savings opportunity represents the estimated monthly savings you can achieve by implementing a given Compute Optimizer recommendation.</p><important>
    /// <p>Savings opportunity data requires that you opt in to Cost Explorer, as well as activate <b>Receive Amazon EC2 resource recommendations</b> in the Cost Explorer preferences page. That creates a connection between Cost Explorer and Compute Optimizer. With this connection, Cost Explorer generates savings estimates considering the price of existing resources, the price of recommended resources, and historical usage data. Estimated monthly savings reflects the projected dollar savings associated with each of the recommendations generated. For more information, see <a href="https://docs.aws.amazon.com/cost-management/latest/userguide/ce-enable.html">Enabling Cost Explorer</a> and <a href="https://docs.aws.amazon.com/cost-management/latest/userguide/ce-rightsizing.html">Optimizing your cost with Rightsizing Recommendations</a> in the <i>Cost Management User Guide</i>.</p>
    /// </important>
    pub fn savings_opportunity(&self) -> ::std::option::Option<&crate::types::SavingsOpportunity> {
        self.savings_opportunity.as_ref()
    }
    /// <p>Describes the savings opportunity for DB storage recommendations or for the recommendation option.</p>
    /// <p>Savings opportunity represents the estimated monthly savings after applying Savings Plans discounts. You can achieve this by implementing a given Compute Optimizer recommendation.</p>
    pub fn savings_opportunity_after_discounts(&self) -> ::std::option::Option<&crate::types::RdsStorageSavingsOpportunityAfterDiscounts> {
        self.savings_opportunity_after_discounts.as_ref()
    }
    /// <p>The projected level of variation in monthly I/O costs for the DB storage recommendation option.</p>
    pub fn estimated_monthly_volume_iops_cost_variation(&self) -> ::std::option::Option<&crate::types::RdsEstimatedMonthlyVolumeIoPsCostVariation> {
        self.estimated_monthly_volume_iops_cost_variation.as_ref()
    }
}
impl RdsdbStorageRecommendationOption {
    /// Creates a new builder-style object to manufacture [`RdsdbStorageRecommendationOption`](crate::types::RdsdbStorageRecommendationOption).
    pub fn builder() -> crate::types::builders::RdsdbStorageRecommendationOptionBuilder {
        crate::types::builders::RdsdbStorageRecommendationOptionBuilder::default()
    }
}

/// A builder for [`RdsdbStorageRecommendationOption`](crate::types::RdsdbStorageRecommendationOption).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RdsdbStorageRecommendationOptionBuilder {
    pub(crate) storage_configuration: ::std::option::Option<crate::types::DbStorageConfiguration>,
    pub(crate) rank: ::std::option::Option<i32>,
    pub(crate) savings_opportunity: ::std::option::Option<crate::types::SavingsOpportunity>,
    pub(crate) savings_opportunity_after_discounts: ::std::option::Option<crate::types::RdsStorageSavingsOpportunityAfterDiscounts>,
    pub(crate) estimated_monthly_volume_iops_cost_variation: ::std::option::Option<crate::types::RdsEstimatedMonthlyVolumeIoPsCostVariation>,
}
impl RdsdbStorageRecommendationOptionBuilder {
    /// <p>The recommended storage configuration.</p>
    pub fn storage_configuration(mut self, input: crate::types::DbStorageConfiguration) -> Self {
        self.storage_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The recommended storage configuration.</p>
    pub fn set_storage_configuration(mut self, input: ::std::option::Option<crate::types::DbStorageConfiguration>) -> Self {
        self.storage_configuration = input;
        self
    }
    /// <p>The recommended storage configuration.</p>
    pub fn get_storage_configuration(&self) -> &::std::option::Option<crate::types::DbStorageConfiguration> {
        &self.storage_configuration
    }
    /// <p>The rank identifier of the DB storage recommendation option.</p>
    pub fn rank(mut self, input: i32) -> Self {
        self.rank = ::std::option::Option::Some(input);
        self
    }
    /// <p>The rank identifier of the DB storage recommendation option.</p>
    pub fn set_rank(mut self, input: ::std::option::Option<i32>) -> Self {
        self.rank = input;
        self
    }
    /// <p>The rank identifier of the DB storage recommendation option.</p>
    pub fn get_rank(&self) -> &::std::option::Option<i32> {
        &self.rank
    }
    /// <p>Describes the savings opportunity for recommendations of a given resource type or for the recommendation option of an individual resource.</p>
    /// <p>Savings opportunity represents the estimated monthly savings you can achieve by implementing a given Compute Optimizer recommendation.</p><important>
    /// <p>Savings opportunity data requires that you opt in to Cost Explorer, as well as activate <b>Receive Amazon EC2 resource recommendations</b> in the Cost Explorer preferences page. That creates a connection between Cost Explorer and Compute Optimizer. With this connection, Cost Explorer generates savings estimates considering the price of existing resources, the price of recommended resources, and historical usage data. Estimated monthly savings reflects the projected dollar savings associated with each of the recommendations generated. For more information, see <a href="https://docs.aws.amazon.com/cost-management/latest/userguide/ce-enable.html">Enabling Cost Explorer</a> and <a href="https://docs.aws.amazon.com/cost-management/latest/userguide/ce-rightsizing.html">Optimizing your cost with Rightsizing Recommendations</a> in the <i>Cost Management User Guide</i>.</p>
    /// </important>
    pub fn savings_opportunity(mut self, input: crate::types::SavingsOpportunity) -> Self {
        self.savings_opportunity = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the savings opportunity for recommendations of a given resource type or for the recommendation option of an individual resource.</p>
    /// <p>Savings opportunity represents the estimated monthly savings you can achieve by implementing a given Compute Optimizer recommendation.</p><important>
    /// <p>Savings opportunity data requires that you opt in to Cost Explorer, as well as activate <b>Receive Amazon EC2 resource recommendations</b> in the Cost Explorer preferences page. That creates a connection between Cost Explorer and Compute Optimizer. With this connection, Cost Explorer generates savings estimates considering the price of existing resources, the price of recommended resources, and historical usage data. Estimated monthly savings reflects the projected dollar savings associated with each of the recommendations generated. For more information, see <a href="https://docs.aws.amazon.com/cost-management/latest/userguide/ce-enable.html">Enabling Cost Explorer</a> and <a href="https://docs.aws.amazon.com/cost-management/latest/userguide/ce-rightsizing.html">Optimizing your cost with Rightsizing Recommendations</a> in the <i>Cost Management User Guide</i>.</p>
    /// </important>
    pub fn set_savings_opportunity(mut self, input: ::std::option::Option<crate::types::SavingsOpportunity>) -> Self {
        self.savings_opportunity = input;
        self
    }
    /// <p>Describes the savings opportunity for recommendations of a given resource type or for the recommendation option of an individual resource.</p>
    /// <p>Savings opportunity represents the estimated monthly savings you can achieve by implementing a given Compute Optimizer recommendation.</p><important>
    /// <p>Savings opportunity data requires that you opt in to Cost Explorer, as well as activate <b>Receive Amazon EC2 resource recommendations</b> in the Cost Explorer preferences page. That creates a connection between Cost Explorer and Compute Optimizer. With this connection, Cost Explorer generates savings estimates considering the price of existing resources, the price of recommended resources, and historical usage data. Estimated monthly savings reflects the projected dollar savings associated with each of the recommendations generated. For more information, see <a href="https://docs.aws.amazon.com/cost-management/latest/userguide/ce-enable.html">Enabling Cost Explorer</a> and <a href="https://docs.aws.amazon.com/cost-management/latest/userguide/ce-rightsizing.html">Optimizing your cost with Rightsizing Recommendations</a> in the <i>Cost Management User Guide</i>.</p>
    /// </important>
    pub fn get_savings_opportunity(&self) -> &::std::option::Option<crate::types::SavingsOpportunity> {
        &self.savings_opportunity
    }
    /// <p>Describes the savings opportunity for DB storage recommendations or for the recommendation option.</p>
    /// <p>Savings opportunity represents the estimated monthly savings after applying Savings Plans discounts. You can achieve this by implementing a given Compute Optimizer recommendation.</p>
    pub fn savings_opportunity_after_discounts(mut self, input: crate::types::RdsStorageSavingsOpportunityAfterDiscounts) -> Self {
        self.savings_opportunity_after_discounts = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the savings opportunity for DB storage recommendations or for the recommendation option.</p>
    /// <p>Savings opportunity represents the estimated monthly savings after applying Savings Plans discounts. You can achieve this by implementing a given Compute Optimizer recommendation.</p>
    pub fn set_savings_opportunity_after_discounts(
        mut self,
        input: ::std::option::Option<crate::types::RdsStorageSavingsOpportunityAfterDiscounts>,
    ) -> Self {
        self.savings_opportunity_after_discounts = input;
        self
    }
    /// <p>Describes the savings opportunity for DB storage recommendations or for the recommendation option.</p>
    /// <p>Savings opportunity represents the estimated monthly savings after applying Savings Plans discounts. You can achieve this by implementing a given Compute Optimizer recommendation.</p>
    pub fn get_savings_opportunity_after_discounts(&self) -> &::std::option::Option<crate::types::RdsStorageSavingsOpportunityAfterDiscounts> {
        &self.savings_opportunity_after_discounts
    }
    /// <p>The projected level of variation in monthly I/O costs for the DB storage recommendation option.</p>
    pub fn estimated_monthly_volume_iops_cost_variation(mut self, input: crate::types::RdsEstimatedMonthlyVolumeIoPsCostVariation) -> Self {
        self.estimated_monthly_volume_iops_cost_variation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The projected level of variation in monthly I/O costs for the DB storage recommendation option.</p>
    pub fn set_estimated_monthly_volume_iops_cost_variation(
        mut self,
        input: ::std::option::Option<crate::types::RdsEstimatedMonthlyVolumeIoPsCostVariation>,
    ) -> Self {
        self.estimated_monthly_volume_iops_cost_variation = input;
        self
    }
    /// <p>The projected level of variation in monthly I/O costs for the DB storage recommendation option.</p>
    pub fn get_estimated_monthly_volume_iops_cost_variation(
        &self,
    ) -> &::std::option::Option<crate::types::RdsEstimatedMonthlyVolumeIoPsCostVariation> {
        &self.estimated_monthly_volume_iops_cost_variation
    }
    /// Consumes the builder and constructs a [`RdsdbStorageRecommendationOption`](crate::types::RdsdbStorageRecommendationOption).
    pub fn build(self) -> crate::types::RdsdbStorageRecommendationOption {
        crate::types::RdsdbStorageRecommendationOption {
            storage_configuration: self.storage_configuration,
            rank: self.rank.unwrap_or_default(),
            savings_opportunity: self.savings_opportunity,
            savings_opportunity_after_discounts: self.savings_opportunity_after_discounts,
            estimated_monthly_volume_iops_cost_variation: self.estimated_monthly_volume_iops_cost_variation,
        }
    }
}
