// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the projected metrics of an Amazon Aurora and RDS database recommendation option.</p>
/// <p>To determine the performance difference between your current Amazon Aurora and RDS database and the recommended option, compare the metric data of your service against its projected metric data.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RdsDatabaseRecommendedOptionProjectedMetric {
    /// <p>The recommended DB instance class for the Amazon Aurora or RDS database.</p>
    pub recommended_db_instance_class: ::std::option::Option<::std::string::String>,
    /// <p>The rank identifier of the Amazon Aurora or RDS DB instance recommendation option.</p>
    pub rank: i32,
    /// <p>An array of objects that describe the projected metric.</p>
    pub projected_metrics: ::std::option::Option<::std::vec::Vec<crate::types::RdsDatabaseProjectedMetric>>,
}
impl RdsDatabaseRecommendedOptionProjectedMetric {
    /// <p>The recommended DB instance class for the Amazon Aurora or RDS database.</p>
    pub fn recommended_db_instance_class(&self) -> ::std::option::Option<&str> {
        self.recommended_db_instance_class.as_deref()
    }
    /// <p>The rank identifier of the Amazon Aurora or RDS DB instance recommendation option.</p>
    pub fn rank(&self) -> i32 {
        self.rank
    }
    /// <p>An array of objects that describe the projected metric.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.projected_metrics.is_none()`.
    pub fn projected_metrics(&self) -> &[crate::types::RdsDatabaseProjectedMetric] {
        self.projected_metrics.as_deref().unwrap_or_default()
    }
}
impl RdsDatabaseRecommendedOptionProjectedMetric {
    /// Creates a new builder-style object to manufacture [`RdsDatabaseRecommendedOptionProjectedMetric`](crate::types::RdsDatabaseRecommendedOptionProjectedMetric).
    pub fn builder() -> crate::types::builders::RdsDatabaseRecommendedOptionProjectedMetricBuilder {
        crate::types::builders::RdsDatabaseRecommendedOptionProjectedMetricBuilder::default()
    }
}

/// A builder for [`RdsDatabaseRecommendedOptionProjectedMetric`](crate::types::RdsDatabaseRecommendedOptionProjectedMetric).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RdsDatabaseRecommendedOptionProjectedMetricBuilder {
    pub(crate) recommended_db_instance_class: ::std::option::Option<::std::string::String>,
    pub(crate) rank: ::std::option::Option<i32>,
    pub(crate) projected_metrics: ::std::option::Option<::std::vec::Vec<crate::types::RdsDatabaseProjectedMetric>>,
}
impl RdsDatabaseRecommendedOptionProjectedMetricBuilder {
    /// <p>The recommended DB instance class for the Amazon Aurora or RDS database.</p>
    pub fn recommended_db_instance_class(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recommended_db_instance_class = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The recommended DB instance class for the Amazon Aurora or RDS database.</p>
    pub fn set_recommended_db_instance_class(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recommended_db_instance_class = input;
        self
    }
    /// <p>The recommended DB instance class for the Amazon Aurora or RDS database.</p>
    pub fn get_recommended_db_instance_class(&self) -> &::std::option::Option<::std::string::String> {
        &self.recommended_db_instance_class
    }
    /// <p>The rank identifier of the Amazon Aurora or RDS DB instance recommendation option.</p>
    pub fn rank(mut self, input: i32) -> Self {
        self.rank = ::std::option::Option::Some(input);
        self
    }
    /// <p>The rank identifier of the Amazon Aurora or RDS DB instance recommendation option.</p>
    pub fn set_rank(mut self, input: ::std::option::Option<i32>) -> Self {
        self.rank = input;
        self
    }
    /// <p>The rank identifier of the Amazon Aurora or RDS DB instance recommendation option.</p>
    pub fn get_rank(&self) -> &::std::option::Option<i32> {
        &self.rank
    }
    /// Appends an item to `projected_metrics`.
    ///
    /// To override the contents of this collection use [`set_projected_metrics`](Self::set_projected_metrics).
    ///
    /// <p>An array of objects that describe the projected metric.</p>
    pub fn projected_metrics(mut self, input: crate::types::RdsDatabaseProjectedMetric) -> Self {
        let mut v = self.projected_metrics.unwrap_or_default();
        v.push(input);
        self.projected_metrics = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects that describe the projected metric.</p>
    pub fn set_projected_metrics(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RdsDatabaseProjectedMetric>>) -> Self {
        self.projected_metrics = input;
        self
    }
    /// <p>An array of objects that describe the projected metric.</p>
    pub fn get_projected_metrics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RdsDatabaseProjectedMetric>> {
        &self.projected_metrics
    }
    /// Consumes the builder and constructs a [`RdsDatabaseRecommendedOptionProjectedMetric`](crate::types::RdsDatabaseRecommendedOptionProjectedMetric).
    pub fn build(self) -> crate::types::RdsDatabaseRecommendedOptionProjectedMetric {
        crate::types::RdsDatabaseRecommendedOptionProjectedMetric {
            recommended_db_instance_class: self.recommended_db_instance_class,
            rank: self.rank.unwrap_or_default(),
            projected_metrics: self.projected_metrics,
        }
    }
}
