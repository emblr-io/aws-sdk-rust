// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the projected metrics of an Amazon Aurora and RDS database recommendation option.</p>
/// <p>To determine the performance difference between your current Amazon Aurora and RDS database and the recommended option, compare the metric data of your service against its projected metric data.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RdsDatabaseProjectedMetric {
    /// <p>The name of the projected metric.</p>
    pub name: ::std::option::Option<crate::types::RdsdbMetricName>,
    /// <p>The timestamps of the projected metric.</p>
    pub timestamps: ::std::option::Option<::std::vec::Vec<::aws_smithy_types::DateTime>>,
    /// <p>The values for the projected metric.</p>
    pub values: ::std::option::Option<::std::vec::Vec<f64>>,
}
impl RdsDatabaseProjectedMetric {
    /// <p>The name of the projected metric.</p>
    pub fn name(&self) -> ::std::option::Option<&crate::types::RdsdbMetricName> {
        self.name.as_ref()
    }
    /// <p>The timestamps of the projected metric.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.timestamps.is_none()`.
    pub fn timestamps(&self) -> &[::aws_smithy_types::DateTime] {
        self.timestamps.as_deref().unwrap_or_default()
    }
    /// <p>The values for the projected metric.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.values.is_none()`.
    pub fn values(&self) -> &[f64] {
        self.values.as_deref().unwrap_or_default()
    }
}
impl RdsDatabaseProjectedMetric {
    /// Creates a new builder-style object to manufacture [`RdsDatabaseProjectedMetric`](crate::types::RdsDatabaseProjectedMetric).
    pub fn builder() -> crate::types::builders::RdsDatabaseProjectedMetricBuilder {
        crate::types::builders::RdsDatabaseProjectedMetricBuilder::default()
    }
}

/// A builder for [`RdsDatabaseProjectedMetric`](crate::types::RdsDatabaseProjectedMetric).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RdsDatabaseProjectedMetricBuilder {
    pub(crate) name: ::std::option::Option<crate::types::RdsdbMetricName>,
    pub(crate) timestamps: ::std::option::Option<::std::vec::Vec<::aws_smithy_types::DateTime>>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<f64>>,
}
impl RdsDatabaseProjectedMetricBuilder {
    /// <p>The name of the projected metric.</p>
    pub fn name(mut self, input: crate::types::RdsdbMetricName) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the projected metric.</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::RdsdbMetricName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the projected metric.</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::RdsdbMetricName> {
        &self.name
    }
    /// Appends an item to `timestamps`.
    ///
    /// To override the contents of this collection use [`set_timestamps`](Self::set_timestamps).
    ///
    /// <p>The timestamps of the projected metric.</p>
    pub fn timestamps(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        let mut v = self.timestamps.unwrap_or_default();
        v.push(input);
        self.timestamps = ::std::option::Option::Some(v);
        self
    }
    /// <p>The timestamps of the projected metric.</p>
    pub fn set_timestamps(mut self, input: ::std::option::Option<::std::vec::Vec<::aws_smithy_types::DateTime>>) -> Self {
        self.timestamps = input;
        self
    }
    /// <p>The timestamps of the projected metric.</p>
    pub fn get_timestamps(&self) -> &::std::option::Option<::std::vec::Vec<::aws_smithy_types::DateTime>> {
        &self.timestamps
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The values for the projected metric.</p>
    pub fn values(mut self, input: f64) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input);
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The values for the projected metric.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The values for the projected metric.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`RdsDatabaseProjectedMetric`](crate::types::RdsDatabaseProjectedMetric).
    pub fn build(self) -> crate::types::RdsDatabaseProjectedMetric {
        crate::types::RdsDatabaseProjectedMetric {
            name: self.name,
            timestamps: self.timestamps,
            values: self.values,
        }
    }
}
