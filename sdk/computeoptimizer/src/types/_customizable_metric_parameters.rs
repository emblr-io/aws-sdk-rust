// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the various metric parameters that can be customized, such as threshold and headroom.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomizableMetricParameters {
    /// <p>The threshold value used for the specified metric parameter.</p><note>
    /// <p>You can only specify the threshold value for CPU utilization.</p>
    /// </note>
    pub threshold: ::std::option::Option<crate::types::CustomizableMetricThreshold>,
    /// <p>The headroom value in percentage used for the specified metric parameter.</p>
    /// <p>The following lists the valid values for CPU and memory utilization.</p>
    /// <ul>
    /// <li>
    /// <p>CPU utilization: <code>PERCENT_30 | PERCENT_20 | PERCENT_0</code></p></li>
    /// <li>
    /// <p>Memory utilization: <code>PERCENT_30 | PERCENT_20 | PERCENT_10</code></p></li>
    /// </ul>
    pub headroom: ::std::option::Option<crate::types::CustomizableMetricHeadroom>,
}
impl CustomizableMetricParameters {
    /// <p>The threshold value used for the specified metric parameter.</p><note>
    /// <p>You can only specify the threshold value for CPU utilization.</p>
    /// </note>
    pub fn threshold(&self) -> ::std::option::Option<&crate::types::CustomizableMetricThreshold> {
        self.threshold.as_ref()
    }
    /// <p>The headroom value in percentage used for the specified metric parameter.</p>
    /// <p>The following lists the valid values for CPU and memory utilization.</p>
    /// <ul>
    /// <li>
    /// <p>CPU utilization: <code>PERCENT_30 | PERCENT_20 | PERCENT_0</code></p></li>
    /// <li>
    /// <p>Memory utilization: <code>PERCENT_30 | PERCENT_20 | PERCENT_10</code></p></li>
    /// </ul>
    pub fn headroom(&self) -> ::std::option::Option<&crate::types::CustomizableMetricHeadroom> {
        self.headroom.as_ref()
    }
}
impl CustomizableMetricParameters {
    /// Creates a new builder-style object to manufacture [`CustomizableMetricParameters`](crate::types::CustomizableMetricParameters).
    pub fn builder() -> crate::types::builders::CustomizableMetricParametersBuilder {
        crate::types::builders::CustomizableMetricParametersBuilder::default()
    }
}

/// A builder for [`CustomizableMetricParameters`](crate::types::CustomizableMetricParameters).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CustomizableMetricParametersBuilder {
    pub(crate) threshold: ::std::option::Option<crate::types::CustomizableMetricThreshold>,
    pub(crate) headroom: ::std::option::Option<crate::types::CustomizableMetricHeadroom>,
}
impl CustomizableMetricParametersBuilder {
    /// <p>The threshold value used for the specified metric parameter.</p><note>
    /// <p>You can only specify the threshold value for CPU utilization.</p>
    /// </note>
    pub fn threshold(mut self, input: crate::types::CustomizableMetricThreshold) -> Self {
        self.threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>The threshold value used for the specified metric parameter.</p><note>
    /// <p>You can only specify the threshold value for CPU utilization.</p>
    /// </note>
    pub fn set_threshold(mut self, input: ::std::option::Option<crate::types::CustomizableMetricThreshold>) -> Self {
        self.threshold = input;
        self
    }
    /// <p>The threshold value used for the specified metric parameter.</p><note>
    /// <p>You can only specify the threshold value for CPU utilization.</p>
    /// </note>
    pub fn get_threshold(&self) -> &::std::option::Option<crate::types::CustomizableMetricThreshold> {
        &self.threshold
    }
    /// <p>The headroom value in percentage used for the specified metric parameter.</p>
    /// <p>The following lists the valid values for CPU and memory utilization.</p>
    /// <ul>
    /// <li>
    /// <p>CPU utilization: <code>PERCENT_30 | PERCENT_20 | PERCENT_0</code></p></li>
    /// <li>
    /// <p>Memory utilization: <code>PERCENT_30 | PERCENT_20 | PERCENT_10</code></p></li>
    /// </ul>
    pub fn headroom(mut self, input: crate::types::CustomizableMetricHeadroom) -> Self {
        self.headroom = ::std::option::Option::Some(input);
        self
    }
    /// <p>The headroom value in percentage used for the specified metric parameter.</p>
    /// <p>The following lists the valid values for CPU and memory utilization.</p>
    /// <ul>
    /// <li>
    /// <p>CPU utilization: <code>PERCENT_30 | PERCENT_20 | PERCENT_0</code></p></li>
    /// <li>
    /// <p>Memory utilization: <code>PERCENT_30 | PERCENT_20 | PERCENT_10</code></p></li>
    /// </ul>
    pub fn set_headroom(mut self, input: ::std::option::Option<crate::types::CustomizableMetricHeadroom>) -> Self {
        self.headroom = input;
        self
    }
    /// <p>The headroom value in percentage used for the specified metric parameter.</p>
    /// <p>The following lists the valid values for CPU and memory utilization.</p>
    /// <ul>
    /// <li>
    /// <p>CPU utilization: <code>PERCENT_30 | PERCENT_20 | PERCENT_0</code></p></li>
    /// <li>
    /// <p>Memory utilization: <code>PERCENT_30 | PERCENT_20 | PERCENT_10</code></p></li>
    /// </ul>
    pub fn get_headroom(&self) -> &::std::option::Option<crate::types::CustomizableMetricHeadroom> {
        &self.headroom
    }
    /// Consumes the builder and constructs a [`CustomizableMetricParameters`](crate::types::CustomizableMetricParameters).
    pub fn build(self) -> crate::types::CustomizableMetricParameters {
        crate::types::CustomizableMetricParameters {
            threshold: self.threshold,
            headroom: self.headroom,
        }
    }
}
