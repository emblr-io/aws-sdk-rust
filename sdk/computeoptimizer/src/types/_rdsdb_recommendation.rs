// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an Amazon Aurora and RDS database recommendation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RdsdbRecommendation {
    /// <p>The ARN of the current Amazon Aurora or RDS database.</p>
    /// <p>The following is the format of the ARN:</p>
    /// <p><code>arn:aws:rds:{region}:{accountId}:db:{resourceName}</code></p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID of the Amazon Aurora or RDS database.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The engine of the DB instance.</p>
    pub engine: ::std::option::Option<::std::string::String>,
    /// <p>The database engine version.</p>
    pub engine_version: ::std::option::Option<::std::string::String>,
    /// <p>The promotion tier for the Aurora instance.</p>
    pub promotion_tier: ::std::option::Option<i32>,
    /// <p>The DB instance class of the current Aurora or RDS DB instance.</p>
    pub current_db_instance_class: ::std::option::Option<::std::string::String>,
    /// <p>The configuration of the current DB storage.</p>
    pub current_storage_configuration: ::std::option::Option<crate::types::DbStorageConfiguration>,
    /// <p>The identifier for DB cluster.</p>
    pub db_cluster_identifier: ::std::option::Option<::std::string::String>,
    /// <p>This indicates if the DB instance is idle or not.</p>
    pub idle: ::std::option::Option<crate::types::Idle>,
    /// <p>The finding classification of an Amazon Aurora and RDS DB instance.</p>
    /// <p>For more information about finding classifications, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/view-rds-recommendations.html#rds-recommendations-findings"> Finding classifications for Aurora and RDS databases</a> in the <i>Compute Optimizer User Guide</i>.</p>
    pub instance_finding: ::std::option::Option<crate::types::RdsInstanceFinding>,
    /// <p>The finding classification of Amazon RDS DB instance storage.</p>
    /// <p>For more information about finding classifications, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/view-rds-recommendations.html#rds-recommendations-findings"> Finding classifications for Aurora and RDS databases</a> in the <i>Compute Optimizer User Guide</i>.</p>
    pub storage_finding: ::std::option::Option<crate::types::RdsStorageFinding>,
    /// <p>The reason for the finding classification of a DB instance.</p>
    pub instance_finding_reason_codes: ::std::option::Option<::std::vec::Vec<crate::types::RdsInstanceFindingReasonCode>>,
    /// <p>The performance risk for the current DB instance.</p>
    pub current_instance_performance_risk: ::std::option::Option<crate::types::RdsCurrentInstancePerformanceRisk>,
    /// <p>The level of variation in monthly I/O costs for the current DB storage configuration.</p>
    pub current_storage_estimated_monthly_volume_iops_cost_variation: ::std::option::Option<crate::types::RdsEstimatedMonthlyVolumeIoPsCostVariation>,
    /// <p>The reason for the finding classification of RDS DB instance storage.</p>
    pub storage_finding_reason_codes: ::std::option::Option<::std::vec::Vec<crate::types::RdsStorageFindingReasonCode>>,
    /// <p>An array of objects that describe the recommendation options for the RDS DB instance.</p>
    pub instance_recommendation_options: ::std::option::Option<::std::vec::Vec<crate::types::RdsdbInstanceRecommendationOption>>,
    /// <p>An array of objects that describe the recommendation options for DB instance storage.</p>
    pub storage_recommendation_options: ::std::option::Option<::std::vec::Vec<crate::types::RdsdbStorageRecommendationOption>>,
    /// <p>An array of objects that describe the utilization metrics of the DB instance.</p>
    pub utilization_metrics: ::std::option::Option<::std::vec::Vec<crate::types::RdsdbUtilizationMetric>>,
    /// <p>Describes the effective recommendation preferences for DB instances.</p>
    pub effective_recommendation_preferences: ::std::option::Option<crate::types::RdsEffectiveRecommendationPreferences>,
    /// <p>The number of days the DB instance utilization metrics were analyzed.</p>
    pub lookback_period_in_days: f64,
    /// <p>The timestamp of when the DB instance recommendation was last generated.</p>
    pub last_refresh_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A list of tags assigned to your DB instance recommendations.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl RdsdbRecommendation {
    /// <p>The ARN of the current Amazon Aurora or RDS database.</p>
    /// <p>The following is the format of the ARN:</p>
    /// <p><code>arn:aws:rds:{region}:{accountId}:db:{resourceName}</code></p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The Amazon Web Services account ID of the Amazon Aurora or RDS database.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The engine of the DB instance.</p>
    pub fn engine(&self) -> ::std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>The database engine version.</p>
    pub fn engine_version(&self) -> ::std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The promotion tier for the Aurora instance.</p>
    pub fn promotion_tier(&self) -> ::std::option::Option<i32> {
        self.promotion_tier
    }
    /// <p>The DB instance class of the current Aurora or RDS DB instance.</p>
    pub fn current_db_instance_class(&self) -> ::std::option::Option<&str> {
        self.current_db_instance_class.as_deref()
    }
    /// <p>The configuration of the current DB storage.</p>
    pub fn current_storage_configuration(&self) -> ::std::option::Option<&crate::types::DbStorageConfiguration> {
        self.current_storage_configuration.as_ref()
    }
    /// <p>The identifier for DB cluster.</p>
    pub fn db_cluster_identifier(&self) -> ::std::option::Option<&str> {
        self.db_cluster_identifier.as_deref()
    }
    /// <p>This indicates if the DB instance is idle or not.</p>
    pub fn idle(&self) -> ::std::option::Option<&crate::types::Idle> {
        self.idle.as_ref()
    }
    /// <p>The finding classification of an Amazon Aurora and RDS DB instance.</p>
    /// <p>For more information about finding classifications, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/view-rds-recommendations.html#rds-recommendations-findings"> Finding classifications for Aurora and RDS databases</a> in the <i>Compute Optimizer User Guide</i>.</p>
    pub fn instance_finding(&self) -> ::std::option::Option<&crate::types::RdsInstanceFinding> {
        self.instance_finding.as_ref()
    }
    /// <p>The finding classification of Amazon RDS DB instance storage.</p>
    /// <p>For more information about finding classifications, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/view-rds-recommendations.html#rds-recommendations-findings"> Finding classifications for Aurora and RDS databases</a> in the <i>Compute Optimizer User Guide</i>.</p>
    pub fn storage_finding(&self) -> ::std::option::Option<&crate::types::RdsStorageFinding> {
        self.storage_finding.as_ref()
    }
    /// <p>The reason for the finding classification of a DB instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instance_finding_reason_codes.is_none()`.
    pub fn instance_finding_reason_codes(&self) -> &[crate::types::RdsInstanceFindingReasonCode] {
        self.instance_finding_reason_codes.as_deref().unwrap_or_default()
    }
    /// <p>The performance risk for the current DB instance.</p>
    pub fn current_instance_performance_risk(&self) -> ::std::option::Option<&crate::types::RdsCurrentInstancePerformanceRisk> {
        self.current_instance_performance_risk.as_ref()
    }
    /// <p>The level of variation in monthly I/O costs for the current DB storage configuration.</p>
    pub fn current_storage_estimated_monthly_volume_iops_cost_variation(
        &self,
    ) -> ::std::option::Option<&crate::types::RdsEstimatedMonthlyVolumeIoPsCostVariation> {
        self.current_storage_estimated_monthly_volume_iops_cost_variation.as_ref()
    }
    /// <p>The reason for the finding classification of RDS DB instance storage.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.storage_finding_reason_codes.is_none()`.
    pub fn storage_finding_reason_codes(&self) -> &[crate::types::RdsStorageFindingReasonCode] {
        self.storage_finding_reason_codes.as_deref().unwrap_or_default()
    }
    /// <p>An array of objects that describe the recommendation options for the RDS DB instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instance_recommendation_options.is_none()`.
    pub fn instance_recommendation_options(&self) -> &[crate::types::RdsdbInstanceRecommendationOption] {
        self.instance_recommendation_options.as_deref().unwrap_or_default()
    }
    /// <p>An array of objects that describe the recommendation options for DB instance storage.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.storage_recommendation_options.is_none()`.
    pub fn storage_recommendation_options(&self) -> &[crate::types::RdsdbStorageRecommendationOption] {
        self.storage_recommendation_options.as_deref().unwrap_or_default()
    }
    /// <p>An array of objects that describe the utilization metrics of the DB instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.utilization_metrics.is_none()`.
    pub fn utilization_metrics(&self) -> &[crate::types::RdsdbUtilizationMetric] {
        self.utilization_metrics.as_deref().unwrap_or_default()
    }
    /// <p>Describes the effective recommendation preferences for DB instances.</p>
    pub fn effective_recommendation_preferences(&self) -> ::std::option::Option<&crate::types::RdsEffectiveRecommendationPreferences> {
        self.effective_recommendation_preferences.as_ref()
    }
    /// <p>The number of days the DB instance utilization metrics were analyzed.</p>
    pub fn lookback_period_in_days(&self) -> f64 {
        self.lookback_period_in_days
    }
    /// <p>The timestamp of when the DB instance recommendation was last generated.</p>
    pub fn last_refresh_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_refresh_timestamp.as_ref()
    }
    /// <p>A list of tags assigned to your DB instance recommendations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl RdsdbRecommendation {
    /// Creates a new builder-style object to manufacture [`RdsdbRecommendation`](crate::types::RdsdbRecommendation).
    pub fn builder() -> crate::types::builders::RdsdbRecommendationBuilder {
        crate::types::builders::RdsdbRecommendationBuilder::default()
    }
}

/// A builder for [`RdsdbRecommendation`](crate::types::RdsdbRecommendation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RdsdbRecommendationBuilder {
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) engine: ::std::option::Option<::std::string::String>,
    pub(crate) engine_version: ::std::option::Option<::std::string::String>,
    pub(crate) promotion_tier: ::std::option::Option<i32>,
    pub(crate) current_db_instance_class: ::std::option::Option<::std::string::String>,
    pub(crate) current_storage_configuration: ::std::option::Option<crate::types::DbStorageConfiguration>,
    pub(crate) db_cluster_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) idle: ::std::option::Option<crate::types::Idle>,
    pub(crate) instance_finding: ::std::option::Option<crate::types::RdsInstanceFinding>,
    pub(crate) storage_finding: ::std::option::Option<crate::types::RdsStorageFinding>,
    pub(crate) instance_finding_reason_codes: ::std::option::Option<::std::vec::Vec<crate::types::RdsInstanceFindingReasonCode>>,
    pub(crate) current_instance_performance_risk: ::std::option::Option<crate::types::RdsCurrentInstancePerformanceRisk>,
    pub(crate) current_storage_estimated_monthly_volume_iops_cost_variation:
        ::std::option::Option<crate::types::RdsEstimatedMonthlyVolumeIoPsCostVariation>,
    pub(crate) storage_finding_reason_codes: ::std::option::Option<::std::vec::Vec<crate::types::RdsStorageFindingReasonCode>>,
    pub(crate) instance_recommendation_options: ::std::option::Option<::std::vec::Vec<crate::types::RdsdbInstanceRecommendationOption>>,
    pub(crate) storage_recommendation_options: ::std::option::Option<::std::vec::Vec<crate::types::RdsdbStorageRecommendationOption>>,
    pub(crate) utilization_metrics: ::std::option::Option<::std::vec::Vec<crate::types::RdsdbUtilizationMetric>>,
    pub(crate) effective_recommendation_preferences: ::std::option::Option<crate::types::RdsEffectiveRecommendationPreferences>,
    pub(crate) lookback_period_in_days: ::std::option::Option<f64>,
    pub(crate) last_refresh_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl RdsdbRecommendationBuilder {
    /// <p>The ARN of the current Amazon Aurora or RDS database.</p>
    /// <p>The following is the format of the ARN:</p>
    /// <p><code>arn:aws:rds:{region}:{accountId}:db:{resourceName}</code></p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the current Amazon Aurora or RDS database.</p>
    /// <p>The following is the format of the ARN:</p>
    /// <p><code>arn:aws:rds:{region}:{accountId}:db:{resourceName}</code></p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The ARN of the current Amazon Aurora or RDS database.</p>
    /// <p>The following is the format of the ARN:</p>
    /// <p><code>arn:aws:rds:{region}:{accountId}:db:{resourceName}</code></p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p>The Amazon Web Services account ID of the Amazon Aurora or RDS database.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the Amazon Aurora or RDS database.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the Amazon Aurora or RDS database.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The engine of the DB instance.</p>
    pub fn engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The engine of the DB instance.</p>
    pub fn set_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>The engine of the DB instance.</p>
    pub fn get_engine(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine
    }
    /// <p>The database engine version.</p>
    pub fn engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database engine version.</p>
    pub fn set_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The database engine version.</p>
    pub fn get_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_version
    }
    /// <p>The promotion tier for the Aurora instance.</p>
    pub fn promotion_tier(mut self, input: i32) -> Self {
        self.promotion_tier = ::std::option::Option::Some(input);
        self
    }
    /// <p>The promotion tier for the Aurora instance.</p>
    pub fn set_promotion_tier(mut self, input: ::std::option::Option<i32>) -> Self {
        self.promotion_tier = input;
        self
    }
    /// <p>The promotion tier for the Aurora instance.</p>
    pub fn get_promotion_tier(&self) -> &::std::option::Option<i32> {
        &self.promotion_tier
    }
    /// <p>The DB instance class of the current Aurora or RDS DB instance.</p>
    pub fn current_db_instance_class(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_db_instance_class = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DB instance class of the current Aurora or RDS DB instance.</p>
    pub fn set_current_db_instance_class(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_db_instance_class = input;
        self
    }
    /// <p>The DB instance class of the current Aurora or RDS DB instance.</p>
    pub fn get_current_db_instance_class(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_db_instance_class
    }
    /// <p>The configuration of the current DB storage.</p>
    pub fn current_storage_configuration(mut self, input: crate::types::DbStorageConfiguration) -> Self {
        self.current_storage_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the current DB storage.</p>
    pub fn set_current_storage_configuration(mut self, input: ::std::option::Option<crate::types::DbStorageConfiguration>) -> Self {
        self.current_storage_configuration = input;
        self
    }
    /// <p>The configuration of the current DB storage.</p>
    pub fn get_current_storage_configuration(&self) -> &::std::option::Option<crate::types::DbStorageConfiguration> {
        &self.current_storage_configuration
    }
    /// <p>The identifier for DB cluster.</p>
    pub fn db_cluster_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_cluster_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for DB cluster.</p>
    pub fn set_db_cluster_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_cluster_identifier = input;
        self
    }
    /// <p>The identifier for DB cluster.</p>
    pub fn get_db_cluster_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_cluster_identifier
    }
    /// <p>This indicates if the DB instance is idle or not.</p>
    pub fn idle(mut self, input: crate::types::Idle) -> Self {
        self.idle = ::std::option::Option::Some(input);
        self
    }
    /// <p>This indicates if the DB instance is idle or not.</p>
    pub fn set_idle(mut self, input: ::std::option::Option<crate::types::Idle>) -> Self {
        self.idle = input;
        self
    }
    /// <p>This indicates if the DB instance is idle or not.</p>
    pub fn get_idle(&self) -> &::std::option::Option<crate::types::Idle> {
        &self.idle
    }
    /// <p>The finding classification of an Amazon Aurora and RDS DB instance.</p>
    /// <p>For more information about finding classifications, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/view-rds-recommendations.html#rds-recommendations-findings"> Finding classifications for Aurora and RDS databases</a> in the <i>Compute Optimizer User Guide</i>.</p>
    pub fn instance_finding(mut self, input: crate::types::RdsInstanceFinding) -> Self {
        self.instance_finding = ::std::option::Option::Some(input);
        self
    }
    /// <p>The finding classification of an Amazon Aurora and RDS DB instance.</p>
    /// <p>For more information about finding classifications, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/view-rds-recommendations.html#rds-recommendations-findings"> Finding classifications for Aurora and RDS databases</a> in the <i>Compute Optimizer User Guide</i>.</p>
    pub fn set_instance_finding(mut self, input: ::std::option::Option<crate::types::RdsInstanceFinding>) -> Self {
        self.instance_finding = input;
        self
    }
    /// <p>The finding classification of an Amazon Aurora and RDS DB instance.</p>
    /// <p>For more information about finding classifications, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/view-rds-recommendations.html#rds-recommendations-findings"> Finding classifications for Aurora and RDS databases</a> in the <i>Compute Optimizer User Guide</i>.</p>
    pub fn get_instance_finding(&self) -> &::std::option::Option<crate::types::RdsInstanceFinding> {
        &self.instance_finding
    }
    /// <p>The finding classification of Amazon RDS DB instance storage.</p>
    /// <p>For more information about finding classifications, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/view-rds-recommendations.html#rds-recommendations-findings"> Finding classifications for Aurora and RDS databases</a> in the <i>Compute Optimizer User Guide</i>.</p>
    pub fn storage_finding(mut self, input: crate::types::RdsStorageFinding) -> Self {
        self.storage_finding = ::std::option::Option::Some(input);
        self
    }
    /// <p>The finding classification of Amazon RDS DB instance storage.</p>
    /// <p>For more information about finding classifications, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/view-rds-recommendations.html#rds-recommendations-findings"> Finding classifications for Aurora and RDS databases</a> in the <i>Compute Optimizer User Guide</i>.</p>
    pub fn set_storage_finding(mut self, input: ::std::option::Option<crate::types::RdsStorageFinding>) -> Self {
        self.storage_finding = input;
        self
    }
    /// <p>The finding classification of Amazon RDS DB instance storage.</p>
    /// <p>For more information about finding classifications, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/view-rds-recommendations.html#rds-recommendations-findings"> Finding classifications for Aurora and RDS databases</a> in the <i>Compute Optimizer User Guide</i>.</p>
    pub fn get_storage_finding(&self) -> &::std::option::Option<crate::types::RdsStorageFinding> {
        &self.storage_finding
    }
    /// Appends an item to `instance_finding_reason_codes`.
    ///
    /// To override the contents of this collection use [`set_instance_finding_reason_codes`](Self::set_instance_finding_reason_codes).
    ///
    /// <p>The reason for the finding classification of a DB instance.</p>
    pub fn instance_finding_reason_codes(mut self, input: crate::types::RdsInstanceFindingReasonCode) -> Self {
        let mut v = self.instance_finding_reason_codes.unwrap_or_default();
        v.push(input);
        self.instance_finding_reason_codes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The reason for the finding classification of a DB instance.</p>
    pub fn set_instance_finding_reason_codes(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::RdsInstanceFindingReasonCode>>,
    ) -> Self {
        self.instance_finding_reason_codes = input;
        self
    }
    /// <p>The reason for the finding classification of a DB instance.</p>
    pub fn get_instance_finding_reason_codes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RdsInstanceFindingReasonCode>> {
        &self.instance_finding_reason_codes
    }
    /// <p>The performance risk for the current DB instance.</p>
    pub fn current_instance_performance_risk(mut self, input: crate::types::RdsCurrentInstancePerformanceRisk) -> Self {
        self.current_instance_performance_risk = ::std::option::Option::Some(input);
        self
    }
    /// <p>The performance risk for the current DB instance.</p>
    pub fn set_current_instance_performance_risk(mut self, input: ::std::option::Option<crate::types::RdsCurrentInstancePerformanceRisk>) -> Self {
        self.current_instance_performance_risk = input;
        self
    }
    /// <p>The performance risk for the current DB instance.</p>
    pub fn get_current_instance_performance_risk(&self) -> &::std::option::Option<crate::types::RdsCurrentInstancePerformanceRisk> {
        &self.current_instance_performance_risk
    }
    /// <p>The level of variation in monthly I/O costs for the current DB storage configuration.</p>
    pub fn current_storage_estimated_monthly_volume_iops_cost_variation(
        mut self,
        input: crate::types::RdsEstimatedMonthlyVolumeIoPsCostVariation,
    ) -> Self {
        self.current_storage_estimated_monthly_volume_iops_cost_variation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The level of variation in monthly I/O costs for the current DB storage configuration.</p>
    pub fn set_current_storage_estimated_monthly_volume_iops_cost_variation(
        mut self,
        input: ::std::option::Option<crate::types::RdsEstimatedMonthlyVolumeIoPsCostVariation>,
    ) -> Self {
        self.current_storage_estimated_monthly_volume_iops_cost_variation = input;
        self
    }
    /// <p>The level of variation in monthly I/O costs for the current DB storage configuration.</p>
    pub fn get_current_storage_estimated_monthly_volume_iops_cost_variation(
        &self,
    ) -> &::std::option::Option<crate::types::RdsEstimatedMonthlyVolumeIoPsCostVariation> {
        &self.current_storage_estimated_monthly_volume_iops_cost_variation
    }
    /// Appends an item to `storage_finding_reason_codes`.
    ///
    /// To override the contents of this collection use [`set_storage_finding_reason_codes`](Self::set_storage_finding_reason_codes).
    ///
    /// <p>The reason for the finding classification of RDS DB instance storage.</p>
    pub fn storage_finding_reason_codes(mut self, input: crate::types::RdsStorageFindingReasonCode) -> Self {
        let mut v = self.storage_finding_reason_codes.unwrap_or_default();
        v.push(input);
        self.storage_finding_reason_codes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The reason for the finding classification of RDS DB instance storage.</p>
    pub fn set_storage_finding_reason_codes(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::RdsStorageFindingReasonCode>>,
    ) -> Self {
        self.storage_finding_reason_codes = input;
        self
    }
    /// <p>The reason for the finding classification of RDS DB instance storage.</p>
    pub fn get_storage_finding_reason_codes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RdsStorageFindingReasonCode>> {
        &self.storage_finding_reason_codes
    }
    /// Appends an item to `instance_recommendation_options`.
    ///
    /// To override the contents of this collection use [`set_instance_recommendation_options`](Self::set_instance_recommendation_options).
    ///
    /// <p>An array of objects that describe the recommendation options for the RDS DB instance.</p>
    pub fn instance_recommendation_options(mut self, input: crate::types::RdsdbInstanceRecommendationOption) -> Self {
        let mut v = self.instance_recommendation_options.unwrap_or_default();
        v.push(input);
        self.instance_recommendation_options = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects that describe the recommendation options for the RDS DB instance.</p>
    pub fn set_instance_recommendation_options(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::RdsdbInstanceRecommendationOption>>,
    ) -> Self {
        self.instance_recommendation_options = input;
        self
    }
    /// <p>An array of objects that describe the recommendation options for the RDS DB instance.</p>
    pub fn get_instance_recommendation_options(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RdsdbInstanceRecommendationOption>> {
        &self.instance_recommendation_options
    }
    /// Appends an item to `storage_recommendation_options`.
    ///
    /// To override the contents of this collection use [`set_storage_recommendation_options`](Self::set_storage_recommendation_options).
    ///
    /// <p>An array of objects that describe the recommendation options for DB instance storage.</p>
    pub fn storage_recommendation_options(mut self, input: crate::types::RdsdbStorageRecommendationOption) -> Self {
        let mut v = self.storage_recommendation_options.unwrap_or_default();
        v.push(input);
        self.storage_recommendation_options = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects that describe the recommendation options for DB instance storage.</p>
    pub fn set_storage_recommendation_options(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::RdsdbStorageRecommendationOption>>,
    ) -> Self {
        self.storage_recommendation_options = input;
        self
    }
    /// <p>An array of objects that describe the recommendation options for DB instance storage.</p>
    pub fn get_storage_recommendation_options(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RdsdbStorageRecommendationOption>> {
        &self.storage_recommendation_options
    }
    /// Appends an item to `utilization_metrics`.
    ///
    /// To override the contents of this collection use [`set_utilization_metrics`](Self::set_utilization_metrics).
    ///
    /// <p>An array of objects that describe the utilization metrics of the DB instance.</p>
    pub fn utilization_metrics(mut self, input: crate::types::RdsdbUtilizationMetric) -> Self {
        let mut v = self.utilization_metrics.unwrap_or_default();
        v.push(input);
        self.utilization_metrics = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects that describe the utilization metrics of the DB instance.</p>
    pub fn set_utilization_metrics(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RdsdbUtilizationMetric>>) -> Self {
        self.utilization_metrics = input;
        self
    }
    /// <p>An array of objects that describe the utilization metrics of the DB instance.</p>
    pub fn get_utilization_metrics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RdsdbUtilizationMetric>> {
        &self.utilization_metrics
    }
    /// <p>Describes the effective recommendation preferences for DB instances.</p>
    pub fn effective_recommendation_preferences(mut self, input: crate::types::RdsEffectiveRecommendationPreferences) -> Self {
        self.effective_recommendation_preferences = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the effective recommendation preferences for DB instances.</p>
    pub fn set_effective_recommendation_preferences(
        mut self,
        input: ::std::option::Option<crate::types::RdsEffectiveRecommendationPreferences>,
    ) -> Self {
        self.effective_recommendation_preferences = input;
        self
    }
    /// <p>Describes the effective recommendation preferences for DB instances.</p>
    pub fn get_effective_recommendation_preferences(&self) -> &::std::option::Option<crate::types::RdsEffectiveRecommendationPreferences> {
        &self.effective_recommendation_preferences
    }
    /// <p>The number of days the DB instance utilization metrics were analyzed.</p>
    pub fn lookback_period_in_days(mut self, input: f64) -> Self {
        self.lookback_period_in_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of days the DB instance utilization metrics were analyzed.</p>
    pub fn set_lookback_period_in_days(mut self, input: ::std::option::Option<f64>) -> Self {
        self.lookback_period_in_days = input;
        self
    }
    /// <p>The number of days the DB instance utilization metrics were analyzed.</p>
    pub fn get_lookback_period_in_days(&self) -> &::std::option::Option<f64> {
        &self.lookback_period_in_days
    }
    /// <p>The timestamp of when the DB instance recommendation was last generated.</p>
    pub fn last_refresh_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_refresh_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the DB instance recommendation was last generated.</p>
    pub fn set_last_refresh_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_refresh_timestamp = input;
        self
    }
    /// <p>The timestamp of when the DB instance recommendation was last generated.</p>
    pub fn get_last_refresh_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_refresh_timestamp
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags assigned to your DB instance recommendations.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of tags assigned to your DB instance recommendations.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of tags assigned to your DB instance recommendations.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`RdsdbRecommendation`](crate::types::RdsdbRecommendation).
    pub fn build(self) -> crate::types::RdsdbRecommendation {
        crate::types::RdsdbRecommendation {
            resource_arn: self.resource_arn,
            account_id: self.account_id,
            engine: self.engine,
            engine_version: self.engine_version,
            promotion_tier: self.promotion_tier,
            current_db_instance_class: self.current_db_instance_class,
            current_storage_configuration: self.current_storage_configuration,
            db_cluster_identifier: self.db_cluster_identifier,
            idle: self.idle,
            instance_finding: self.instance_finding,
            storage_finding: self.storage_finding,
            instance_finding_reason_codes: self.instance_finding_reason_codes,
            current_instance_performance_risk: self.current_instance_performance_risk,
            current_storage_estimated_monthly_volume_iops_cost_variation: self.current_storage_estimated_monthly_volume_iops_cost_variation,
            storage_finding_reason_codes: self.storage_finding_reason_codes,
            instance_recommendation_options: self.instance_recommendation_options,
            storage_recommendation_options: self.storage_recommendation_options,
            utilization_metrics: self.utilization_metrics,
            effective_recommendation_preferences: self.effective_recommendation_preferences,
            lookback_period_in_days: self.lookback_period_in_days.unwrap_or_default(),
            last_refresh_timestamp: self.last_refresh_timestamp,
            tags: self.tags,
        }
    }
}
