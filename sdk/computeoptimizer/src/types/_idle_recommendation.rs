// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an Idle resource recommendation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IdleRecommendation {
    /// <p>The ARN of the current idle resource.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the resource.</p>
    pub resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of resource that is idle.</p>
    pub resource_type: ::std::option::Option<crate::types::IdleRecommendationResourceType>,
    /// <p>The Amazon Web Services account ID of the idle resource.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The finding classification of an idle resource.</p>
    pub finding: ::std::option::Option<crate::types::IdleFinding>,
    /// <p>A summary of the findings for the resource.</p>
    pub finding_description: ::std::option::Option<::std::string::String>,
    /// <p>The savings opportunity for the idle resource.</p>
    pub savings_opportunity: ::std::option::Option<crate::types::IdleSavingsOpportunity>,
    /// <p>The savings opportunity for the idle resource after any applying discounts.</p>
    pub savings_opportunity_after_discounts: ::std::option::Option<crate::types::IdleSavingsOpportunityAfterDiscounts>,
    /// <p>An array of objects that describe the utilization metrics of the idle resource.</p>
    pub utilization_metrics: ::std::option::Option<::std::vec::Vec<crate::types::IdleUtilizationMetric>>,
    /// <p>The number of days the idle resource utilization metrics were analyzed.</p>
    pub look_back_period_in_days: f64,
    /// <p>The timestamp of when the idle resource recommendation was last generated.</p>
    pub last_refresh_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A list of tags assigned to your idle resource recommendations.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl IdleRecommendation {
    /// <p>The ARN of the current idle resource.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The unique identifier for the resource.</p>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The type of resource that is idle.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::IdleRecommendationResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The Amazon Web Services account ID of the idle resource.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The finding classification of an idle resource.</p>
    pub fn finding(&self) -> ::std::option::Option<&crate::types::IdleFinding> {
        self.finding.as_ref()
    }
    /// <p>A summary of the findings for the resource.</p>
    pub fn finding_description(&self) -> ::std::option::Option<&str> {
        self.finding_description.as_deref()
    }
    /// <p>The savings opportunity for the idle resource.</p>
    pub fn savings_opportunity(&self) -> ::std::option::Option<&crate::types::IdleSavingsOpportunity> {
        self.savings_opportunity.as_ref()
    }
    /// <p>The savings opportunity for the idle resource after any applying discounts.</p>
    pub fn savings_opportunity_after_discounts(&self) -> ::std::option::Option<&crate::types::IdleSavingsOpportunityAfterDiscounts> {
        self.savings_opportunity_after_discounts.as_ref()
    }
    /// <p>An array of objects that describe the utilization metrics of the idle resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.utilization_metrics.is_none()`.
    pub fn utilization_metrics(&self) -> &[crate::types::IdleUtilizationMetric] {
        self.utilization_metrics.as_deref().unwrap_or_default()
    }
    /// <p>The number of days the idle resource utilization metrics were analyzed.</p>
    pub fn look_back_period_in_days(&self) -> f64 {
        self.look_back_period_in_days
    }
    /// <p>The timestamp of when the idle resource recommendation was last generated.</p>
    pub fn last_refresh_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_refresh_timestamp.as_ref()
    }
    /// <p>A list of tags assigned to your idle resource recommendations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl IdleRecommendation {
    /// Creates a new builder-style object to manufacture [`IdleRecommendation`](crate::types::IdleRecommendation).
    pub fn builder() -> crate::types::builders::IdleRecommendationBuilder {
        crate::types::builders::IdleRecommendationBuilder::default()
    }
}

/// A builder for [`IdleRecommendation`](crate::types::IdleRecommendation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IdleRecommendationBuilder {
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<crate::types::IdleRecommendationResourceType>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) finding: ::std::option::Option<crate::types::IdleFinding>,
    pub(crate) finding_description: ::std::option::Option<::std::string::String>,
    pub(crate) savings_opportunity: ::std::option::Option<crate::types::IdleSavingsOpportunity>,
    pub(crate) savings_opportunity_after_discounts: ::std::option::Option<crate::types::IdleSavingsOpportunityAfterDiscounts>,
    pub(crate) utilization_metrics: ::std::option::Option<::std::vec::Vec<crate::types::IdleUtilizationMetric>>,
    pub(crate) look_back_period_in_days: ::std::option::Option<f64>,
    pub(crate) last_refresh_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl IdleRecommendationBuilder {
    /// <p>The ARN of the current idle resource.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the current idle resource.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The ARN of the current idle resource.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p>The unique identifier for the resource.</p>
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the resource.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The unique identifier for the resource.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>The type of resource that is idle.</p>
    pub fn resource_type(mut self, input: crate::types::IdleRecommendationResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of resource that is idle.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::IdleRecommendationResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of resource that is idle.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::IdleRecommendationResourceType> {
        &self.resource_type
    }
    /// <p>The Amazon Web Services account ID of the idle resource.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the idle resource.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the idle resource.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The finding classification of an idle resource.</p>
    pub fn finding(mut self, input: crate::types::IdleFinding) -> Self {
        self.finding = ::std::option::Option::Some(input);
        self
    }
    /// <p>The finding classification of an idle resource.</p>
    pub fn set_finding(mut self, input: ::std::option::Option<crate::types::IdleFinding>) -> Self {
        self.finding = input;
        self
    }
    /// <p>The finding classification of an idle resource.</p>
    pub fn get_finding(&self) -> &::std::option::Option<crate::types::IdleFinding> {
        &self.finding
    }
    /// <p>A summary of the findings for the resource.</p>
    pub fn finding_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.finding_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A summary of the findings for the resource.</p>
    pub fn set_finding_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.finding_description = input;
        self
    }
    /// <p>A summary of the findings for the resource.</p>
    pub fn get_finding_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.finding_description
    }
    /// <p>The savings opportunity for the idle resource.</p>
    pub fn savings_opportunity(mut self, input: crate::types::IdleSavingsOpportunity) -> Self {
        self.savings_opportunity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The savings opportunity for the idle resource.</p>
    pub fn set_savings_opportunity(mut self, input: ::std::option::Option<crate::types::IdleSavingsOpportunity>) -> Self {
        self.savings_opportunity = input;
        self
    }
    /// <p>The savings opportunity for the idle resource.</p>
    pub fn get_savings_opportunity(&self) -> &::std::option::Option<crate::types::IdleSavingsOpportunity> {
        &self.savings_opportunity
    }
    /// <p>The savings opportunity for the idle resource after any applying discounts.</p>
    pub fn savings_opportunity_after_discounts(mut self, input: crate::types::IdleSavingsOpportunityAfterDiscounts) -> Self {
        self.savings_opportunity_after_discounts = ::std::option::Option::Some(input);
        self
    }
    /// <p>The savings opportunity for the idle resource after any applying discounts.</p>
    pub fn set_savings_opportunity_after_discounts(
        mut self,
        input: ::std::option::Option<crate::types::IdleSavingsOpportunityAfterDiscounts>,
    ) -> Self {
        self.savings_opportunity_after_discounts = input;
        self
    }
    /// <p>The savings opportunity for the idle resource after any applying discounts.</p>
    pub fn get_savings_opportunity_after_discounts(&self) -> &::std::option::Option<crate::types::IdleSavingsOpportunityAfterDiscounts> {
        &self.savings_opportunity_after_discounts
    }
    /// Appends an item to `utilization_metrics`.
    ///
    /// To override the contents of this collection use [`set_utilization_metrics`](Self::set_utilization_metrics).
    ///
    /// <p>An array of objects that describe the utilization metrics of the idle resource.</p>
    pub fn utilization_metrics(mut self, input: crate::types::IdleUtilizationMetric) -> Self {
        let mut v = self.utilization_metrics.unwrap_or_default();
        v.push(input);
        self.utilization_metrics = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects that describe the utilization metrics of the idle resource.</p>
    pub fn set_utilization_metrics(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IdleUtilizationMetric>>) -> Self {
        self.utilization_metrics = input;
        self
    }
    /// <p>An array of objects that describe the utilization metrics of the idle resource.</p>
    pub fn get_utilization_metrics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IdleUtilizationMetric>> {
        &self.utilization_metrics
    }
    /// <p>The number of days the idle resource utilization metrics were analyzed.</p>
    pub fn look_back_period_in_days(mut self, input: f64) -> Self {
        self.look_back_period_in_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of days the idle resource utilization metrics were analyzed.</p>
    pub fn set_look_back_period_in_days(mut self, input: ::std::option::Option<f64>) -> Self {
        self.look_back_period_in_days = input;
        self
    }
    /// <p>The number of days the idle resource utilization metrics were analyzed.</p>
    pub fn get_look_back_period_in_days(&self) -> &::std::option::Option<f64> {
        &self.look_back_period_in_days
    }
    /// <p>The timestamp of when the idle resource recommendation was last generated.</p>
    pub fn last_refresh_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_refresh_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the idle resource recommendation was last generated.</p>
    pub fn set_last_refresh_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_refresh_timestamp = input;
        self
    }
    /// <p>The timestamp of when the idle resource recommendation was last generated.</p>
    pub fn get_last_refresh_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_refresh_timestamp
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags assigned to your idle resource recommendations.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of tags assigned to your idle resource recommendations.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of tags assigned to your idle resource recommendations.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`IdleRecommendation`](crate::types::IdleRecommendation).
    pub fn build(self) -> crate::types::IdleRecommendation {
        crate::types::IdleRecommendation {
            resource_arn: self.resource_arn,
            resource_id: self.resource_id,
            resource_type: self.resource_type,
            account_id: self.account_id,
            finding: self.finding,
            finding_description: self.finding_description,
            savings_opportunity: self.savings_opportunity,
            savings_opportunity_after_discounts: self.savings_opportunity_after_discounts,
            utilization_metrics: self.utilization_metrics,
            look_back_period_in_days: self.look_back_period_in_days.unwrap_or_default(),
            last_refresh_timestamp: self.last_refresh_timestamp,
            tags: self.tags,
        }
    }
}
