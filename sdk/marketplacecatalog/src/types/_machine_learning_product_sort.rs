// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The sort options for machine learning products.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MachineLearningProductSort {
    /// <p>The field to sort by. Valid values: <code>EntityId</code>, <code>LastModifiedDate</code>, <code>ProductTitle</code>, and <code>Visibility</code>.</p>
    pub sort_by: ::std::option::Option<crate::types::MachineLearningProductSortBy>,
    /// <p>The sort order. Valid values are <code>ASC</code> (ascending) and <code>DESC</code> (descending).</p>
    pub sort_order: ::std::option::Option<crate::types::SortOrder>,
}
impl MachineLearningProductSort {
    /// <p>The field to sort by. Valid values: <code>EntityId</code>, <code>LastModifiedDate</code>, <code>ProductTitle</code>, and <code>Visibility</code>.</p>
    pub fn sort_by(&self) -> ::std::option::Option<&crate::types::MachineLearningProductSortBy> {
        self.sort_by.as_ref()
    }
    /// <p>The sort order. Valid values are <code>ASC</code> (ascending) and <code>DESC</code> (descending).</p>
    pub fn sort_order(&self) -> ::std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
}
impl MachineLearningProductSort {
    /// Creates a new builder-style object to manufacture [`MachineLearningProductSort`](crate::types::MachineLearningProductSort).
    pub fn builder() -> crate::types::builders::MachineLearningProductSortBuilder {
        crate::types::builders::MachineLearningProductSortBuilder::default()
    }
}

/// A builder for [`MachineLearningProductSort`](crate::types::MachineLearningProductSort).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MachineLearningProductSortBuilder {
    pub(crate) sort_by: ::std::option::Option<crate::types::MachineLearningProductSortBy>,
    pub(crate) sort_order: ::std::option::Option<crate::types::SortOrder>,
}
impl MachineLearningProductSortBuilder {
    /// <p>The field to sort by. Valid values: <code>EntityId</code>, <code>LastModifiedDate</code>, <code>ProductTitle</code>, and <code>Visibility</code>.</p>
    pub fn sort_by(mut self, input: crate::types::MachineLearningProductSortBy) -> Self {
        self.sort_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>The field to sort by. Valid values: <code>EntityId</code>, <code>LastModifiedDate</code>, <code>ProductTitle</code>, and <code>Visibility</code>.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::MachineLearningProductSortBy>) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>The field to sort by. Valid values: <code>EntityId</code>, <code>LastModifiedDate</code>, <code>ProductTitle</code>, and <code>Visibility</code>.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::MachineLearningProductSortBy> {
        &self.sort_by
    }
    /// <p>The sort order. Valid values are <code>ASC</code> (ascending) and <code>DESC</code> (descending).</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sort order. Valid values are <code>ASC</code> (ascending) and <code>DESC</code> (descending).</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The sort order. Valid values are <code>ASC</code> (ascending) and <code>DESC</code> (descending).</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortOrder> {
        &self.sort_order
    }
    /// Consumes the builder and constructs a [`MachineLearningProductSort`](crate::types::MachineLearningProductSort).
    pub fn build(self) -> crate::types::MachineLearningProductSort {
        crate::types::MachineLearningProductSort {
            sort_by: self.sort_by,
            sort_order: self.sort_order,
        }
    }
}
