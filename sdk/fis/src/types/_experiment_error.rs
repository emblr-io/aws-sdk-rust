// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the error when an experiment has <code>failed</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExperimentError {
    /// <p>The Amazon Web Services Account ID where the experiment failure occurred.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The error code for the failed experiment.</p>
    pub code: ::std::option::Option<::std::string::String>,
    /// <p>Context for the section of the experiment template that failed.</p>
    pub location: ::std::option::Option<::std::string::String>,
}
impl ExperimentError {
    /// <p>The Amazon Web Services Account ID where the experiment failure occurred.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The error code for the failed experiment.</p>
    pub fn code(&self) -> ::std::option::Option<&str> {
        self.code.as_deref()
    }
    /// <p>Context for the section of the experiment template that failed.</p>
    pub fn location(&self) -> ::std::option::Option<&str> {
        self.location.as_deref()
    }
}
impl ExperimentError {
    /// Creates a new builder-style object to manufacture [`ExperimentError`](crate::types::ExperimentError).
    pub fn builder() -> crate::types::builders::ExperimentErrorBuilder {
        crate::types::builders::ExperimentErrorBuilder::default()
    }
}

/// A builder for [`ExperimentError`](crate::types::ExperimentError).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ExperimentErrorBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) code: ::std::option::Option<::std::string::String>,
    pub(crate) location: ::std::option::Option<::std::string::String>,
}
impl ExperimentErrorBuilder {
    /// <p>The Amazon Web Services Account ID where the experiment failure occurred.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Account ID where the experiment failure occurred.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services Account ID where the experiment failure occurred.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The error code for the failed experiment.</p>
    pub fn code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error code for the failed experiment.</p>
    pub fn set_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>The error code for the failed experiment.</p>
    pub fn get_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.code
    }
    /// <p>Context for the section of the experiment template that failed.</p>
    pub fn location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Context for the section of the experiment template that failed.</p>
    pub fn set_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>Context for the section of the experiment template that failed.</p>
    pub fn get_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.location
    }
    /// Consumes the builder and constructs a [`ExperimentError`](crate::types::ExperimentError).
    pub fn build(self) -> crate::types::ExperimentError {
        crate::types::ExperimentError {
            account_id: self.account_id,
            code: self.code,
            location: self.location,
        }
    }
}
