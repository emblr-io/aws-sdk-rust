// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the data sources for the experiment report.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExperimentTemplateReportConfigurationDataSources {
    /// <p>The CloudWatch dashboards to include as data sources in the experiment report.</p>
    pub cloud_watch_dashboards: ::std::option::Option<::std::vec::Vec<crate::types::ExperimentTemplateReportConfigurationCloudWatchDashboard>>,
}
impl ExperimentTemplateReportConfigurationDataSources {
    /// <p>The CloudWatch dashboards to include as data sources in the experiment report.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cloud_watch_dashboards.is_none()`.
    pub fn cloud_watch_dashboards(&self) -> &[crate::types::ExperimentTemplateReportConfigurationCloudWatchDashboard] {
        self.cloud_watch_dashboards.as_deref().unwrap_or_default()
    }
}
impl ExperimentTemplateReportConfigurationDataSources {
    /// Creates a new builder-style object to manufacture [`ExperimentTemplateReportConfigurationDataSources`](crate::types::ExperimentTemplateReportConfigurationDataSources).
    pub fn builder() -> crate::types::builders::ExperimentTemplateReportConfigurationDataSourcesBuilder {
        crate::types::builders::ExperimentTemplateReportConfigurationDataSourcesBuilder::default()
    }
}

/// A builder for [`ExperimentTemplateReportConfigurationDataSources`](crate::types::ExperimentTemplateReportConfigurationDataSources).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ExperimentTemplateReportConfigurationDataSourcesBuilder {
    pub(crate) cloud_watch_dashboards: ::std::option::Option<::std::vec::Vec<crate::types::ExperimentTemplateReportConfigurationCloudWatchDashboard>>,
}
impl ExperimentTemplateReportConfigurationDataSourcesBuilder {
    /// Appends an item to `cloud_watch_dashboards`.
    ///
    /// To override the contents of this collection use [`set_cloud_watch_dashboards`](Self::set_cloud_watch_dashboards).
    ///
    /// <p>The CloudWatch dashboards to include as data sources in the experiment report.</p>
    pub fn cloud_watch_dashboards(mut self, input: crate::types::ExperimentTemplateReportConfigurationCloudWatchDashboard) -> Self {
        let mut v = self.cloud_watch_dashboards.unwrap_or_default();
        v.push(input);
        self.cloud_watch_dashboards = ::std::option::Option::Some(v);
        self
    }
    /// <p>The CloudWatch dashboards to include as data sources in the experiment report.</p>
    pub fn set_cloud_watch_dashboards(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ExperimentTemplateReportConfigurationCloudWatchDashboard>>,
    ) -> Self {
        self.cloud_watch_dashboards = input;
        self
    }
    /// <p>The CloudWatch dashboards to include as data sources in the experiment report.</p>
    pub fn get_cloud_watch_dashboards(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::ExperimentTemplateReportConfigurationCloudWatchDashboard>> {
        &self.cloud_watch_dashboards
    }
    /// Consumes the builder and constructs a [`ExperimentTemplateReportConfigurationDataSources`](crate::types::ExperimentTemplateReportConfigurationDataSources).
    pub fn build(self) -> crate::types::ExperimentTemplateReportConfigurationDataSources {
        crate::types::ExperimentTemplateReportConfigurationDataSources {
            cloud_watch_dashboards: self.cloud_watch_dashboards,
        }
    }
}
