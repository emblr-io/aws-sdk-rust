// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a safety lever.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SafetyLever {
    /// <p>The ID of the safety lever.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the safety lever.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The state of the safety lever.</p>
    pub state: ::std::option::Option<crate::types::SafetyLeverState>,
}
impl SafetyLever {
    /// <p>The ID of the safety lever.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the safety lever.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The state of the safety lever.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::SafetyLeverState> {
        self.state.as_ref()
    }
}
impl SafetyLever {
    /// Creates a new builder-style object to manufacture [`SafetyLever`](crate::types::SafetyLever).
    pub fn builder() -> crate::types::builders::SafetyLeverBuilder {
        crate::types::builders::SafetyLeverBuilder::default()
    }
}

/// A builder for [`SafetyLever`](crate::types::SafetyLever).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SafetyLeverBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::SafetyLeverState>,
}
impl SafetyLeverBuilder {
    /// <p>The ID of the safety lever.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the safety lever.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the safety lever.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The Amazon Resource Name (ARN) of the safety lever.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the safety lever.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the safety lever.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The state of the safety lever.</p>
    pub fn state(mut self, input: crate::types::SafetyLeverState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the safety lever.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::SafetyLeverState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the safety lever.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::SafetyLeverState> {
        &self.state
    }
    /// Consumes the builder and constructs a [`SafetyLever`](crate::types::SafetyLever).
    pub fn build(self) -> crate::types::SafetyLever {
        crate::types::SafetyLever {
            id: self.id,
            arn: self.arn,
            state: self.state,
        }
    }
}
