// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the experiment report.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExperimentReport {
    /// <p>The state of the experiment report.</p>
    pub state: ::std::option::Option<crate::types::ExperimentReportState>,
    /// <p>The S3 destination of the experiment report.</p>
    pub s3_reports: ::std::option::Option<::std::vec::Vec<crate::types::ExperimentReportS3Report>>,
}
impl ExperimentReport {
    /// <p>The state of the experiment report.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::ExperimentReportState> {
        self.state.as_ref()
    }
    /// <p>The S3 destination of the experiment report.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.s3_reports.is_none()`.
    pub fn s3_reports(&self) -> &[crate::types::ExperimentReportS3Report] {
        self.s3_reports.as_deref().unwrap_or_default()
    }
}
impl ExperimentReport {
    /// Creates a new builder-style object to manufacture [`ExperimentReport`](crate::types::ExperimentReport).
    pub fn builder() -> crate::types::builders::ExperimentReportBuilder {
        crate::types::builders::ExperimentReportBuilder::default()
    }
}

/// A builder for [`ExperimentReport`](crate::types::ExperimentReport).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ExperimentReportBuilder {
    pub(crate) state: ::std::option::Option<crate::types::ExperimentReportState>,
    pub(crate) s3_reports: ::std::option::Option<::std::vec::Vec<crate::types::ExperimentReportS3Report>>,
}
impl ExperimentReportBuilder {
    /// <p>The state of the experiment report.</p>
    pub fn state(mut self, input: crate::types::ExperimentReportState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the experiment report.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::ExperimentReportState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the experiment report.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::ExperimentReportState> {
        &self.state
    }
    /// Appends an item to `s3_reports`.
    ///
    /// To override the contents of this collection use [`set_s3_reports`](Self::set_s3_reports).
    ///
    /// <p>The S3 destination of the experiment report.</p>
    pub fn s3_reports(mut self, input: crate::types::ExperimentReportS3Report) -> Self {
        let mut v = self.s3_reports.unwrap_or_default();
        v.push(input);
        self.s3_reports = ::std::option::Option::Some(v);
        self
    }
    /// <p>The S3 destination of the experiment report.</p>
    pub fn set_s3_reports(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ExperimentReportS3Report>>) -> Self {
        self.s3_reports = input;
        self
    }
    /// <p>The S3 destination of the experiment report.</p>
    pub fn get_s3_reports(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ExperimentReportS3Report>> {
        &self.s3_reports
    }
    /// Consumes the builder and constructs a [`ExperimentReport`](crate::types::ExperimentReport).
    pub fn build(self) -> crate::types::ExperimentReport {
        crate::types::ExperimentReport {
            state: self.state,
            s3_reports: self.s3_reports,
        }
    }
}
