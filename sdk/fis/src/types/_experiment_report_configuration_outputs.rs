// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the output destinations of the experiment report.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExperimentReportConfigurationOutputs {
    /// <p>The S3 destination for the experiment report.</p>
    pub s3_configuration: ::std::option::Option<crate::types::ExperimentReportConfigurationOutputsS3Configuration>,
}
impl ExperimentReportConfigurationOutputs {
    /// <p>The S3 destination for the experiment report.</p>
    pub fn s3_configuration(&self) -> ::std::option::Option<&crate::types::ExperimentReportConfigurationOutputsS3Configuration> {
        self.s3_configuration.as_ref()
    }
}
impl ExperimentReportConfigurationOutputs {
    /// Creates a new builder-style object to manufacture [`ExperimentReportConfigurationOutputs`](crate::types::ExperimentReportConfigurationOutputs).
    pub fn builder() -> crate::types::builders::ExperimentReportConfigurationOutputsBuilder {
        crate::types::builders::ExperimentReportConfigurationOutputsBuilder::default()
    }
}

/// A builder for [`ExperimentReportConfigurationOutputs`](crate::types::ExperimentReportConfigurationOutputs).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ExperimentReportConfigurationOutputsBuilder {
    pub(crate) s3_configuration: ::std::option::Option<crate::types::ExperimentReportConfigurationOutputsS3Configuration>,
}
impl ExperimentReportConfigurationOutputsBuilder {
    /// <p>The S3 destination for the experiment report.</p>
    pub fn s3_configuration(mut self, input: crate::types::ExperimentReportConfigurationOutputsS3Configuration) -> Self {
        self.s3_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The S3 destination for the experiment report.</p>
    pub fn set_s3_configuration(mut self, input: ::std::option::Option<crate::types::ExperimentReportConfigurationOutputsS3Configuration>) -> Self {
        self.s3_configuration = input;
        self
    }
    /// <p>The S3 destination for the experiment report.</p>
    pub fn get_s3_configuration(&self) -> &::std::option::Option<crate::types::ExperimentReportConfigurationOutputsS3Configuration> {
        &self.s3_configuration
    }
    /// Consumes the builder and constructs a [`ExperimentReportConfigurationOutputs`](crate::types::ExperimentReportConfigurationOutputs).
    pub fn build(self) -> crate::types::ExperimentReportConfigurationOutputs {
        crate::types::ExperimentReportConfigurationOutputs {
            s3_configuration: self.s3_configuration,
        }
    }
}
