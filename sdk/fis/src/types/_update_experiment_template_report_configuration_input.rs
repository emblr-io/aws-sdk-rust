// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the input for the experiment report configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateExperimentTemplateReportConfigurationInput {
    /// <p>Describes the output destinations of the experiment report.</p>
    pub outputs: ::std::option::Option<crate::types::ExperimentTemplateReportConfigurationOutputsInput>,
    /// <p>The data sources for the experiment report.</p>
    pub data_sources: ::std::option::Option<crate::types::ExperimentTemplateReportConfigurationDataSourcesInput>,
    /// <p>The duration before the experiment start time for the data sources to include in the report.</p>
    pub pre_experiment_duration: ::std::option::Option<::std::string::String>,
    /// <p>The duration after the experiment end time for the data sources to include in the report.</p>
    pub post_experiment_duration: ::std::option::Option<::std::string::String>,
}
impl UpdateExperimentTemplateReportConfigurationInput {
    /// <p>Describes the output destinations of the experiment report.</p>
    pub fn outputs(&self) -> ::std::option::Option<&crate::types::ExperimentTemplateReportConfigurationOutputsInput> {
        self.outputs.as_ref()
    }
    /// <p>The data sources for the experiment report.</p>
    pub fn data_sources(&self) -> ::std::option::Option<&crate::types::ExperimentTemplateReportConfigurationDataSourcesInput> {
        self.data_sources.as_ref()
    }
    /// <p>The duration before the experiment start time for the data sources to include in the report.</p>
    pub fn pre_experiment_duration(&self) -> ::std::option::Option<&str> {
        self.pre_experiment_duration.as_deref()
    }
    /// <p>The duration after the experiment end time for the data sources to include in the report.</p>
    pub fn post_experiment_duration(&self) -> ::std::option::Option<&str> {
        self.post_experiment_duration.as_deref()
    }
}
impl UpdateExperimentTemplateReportConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateExperimentTemplateReportConfigurationInput`](crate::types::UpdateExperimentTemplateReportConfigurationInput).
    pub fn builder() -> crate::types::builders::UpdateExperimentTemplateReportConfigurationInputBuilder {
        crate::types::builders::UpdateExperimentTemplateReportConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateExperimentTemplateReportConfigurationInput`](crate::types::UpdateExperimentTemplateReportConfigurationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateExperimentTemplateReportConfigurationInputBuilder {
    pub(crate) outputs: ::std::option::Option<crate::types::ExperimentTemplateReportConfigurationOutputsInput>,
    pub(crate) data_sources: ::std::option::Option<crate::types::ExperimentTemplateReportConfigurationDataSourcesInput>,
    pub(crate) pre_experiment_duration: ::std::option::Option<::std::string::String>,
    pub(crate) post_experiment_duration: ::std::option::Option<::std::string::String>,
}
impl UpdateExperimentTemplateReportConfigurationInputBuilder {
    /// <p>Describes the output destinations of the experiment report.</p>
    pub fn outputs(mut self, input: crate::types::ExperimentTemplateReportConfigurationOutputsInput) -> Self {
        self.outputs = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the output destinations of the experiment report.</p>
    pub fn set_outputs(mut self, input: ::std::option::Option<crate::types::ExperimentTemplateReportConfigurationOutputsInput>) -> Self {
        self.outputs = input;
        self
    }
    /// <p>Describes the output destinations of the experiment report.</p>
    pub fn get_outputs(&self) -> &::std::option::Option<crate::types::ExperimentTemplateReportConfigurationOutputsInput> {
        &self.outputs
    }
    /// <p>The data sources for the experiment report.</p>
    pub fn data_sources(mut self, input: crate::types::ExperimentTemplateReportConfigurationDataSourcesInput) -> Self {
        self.data_sources = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data sources for the experiment report.</p>
    pub fn set_data_sources(mut self, input: ::std::option::Option<crate::types::ExperimentTemplateReportConfigurationDataSourcesInput>) -> Self {
        self.data_sources = input;
        self
    }
    /// <p>The data sources for the experiment report.</p>
    pub fn get_data_sources(&self) -> &::std::option::Option<crate::types::ExperimentTemplateReportConfigurationDataSourcesInput> {
        &self.data_sources
    }
    /// <p>The duration before the experiment start time for the data sources to include in the report.</p>
    pub fn pre_experiment_duration(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pre_experiment_duration = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The duration before the experiment start time for the data sources to include in the report.</p>
    pub fn set_pre_experiment_duration(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pre_experiment_duration = input;
        self
    }
    /// <p>The duration before the experiment start time for the data sources to include in the report.</p>
    pub fn get_pre_experiment_duration(&self) -> &::std::option::Option<::std::string::String> {
        &self.pre_experiment_duration
    }
    /// <p>The duration after the experiment end time for the data sources to include in the report.</p>
    pub fn post_experiment_duration(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.post_experiment_duration = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The duration after the experiment end time for the data sources to include in the report.</p>
    pub fn set_post_experiment_duration(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.post_experiment_duration = input;
        self
    }
    /// <p>The duration after the experiment end time for the data sources to include in the report.</p>
    pub fn get_post_experiment_duration(&self) -> &::std::option::Option<::std::string::String> {
        &self.post_experiment_duration
    }
    /// Consumes the builder and constructs a [`UpdateExperimentTemplateReportConfigurationInput`](crate::types::UpdateExperimentTemplateReportConfigurationInput).
    pub fn build(self) -> crate::types::UpdateExperimentTemplateReportConfigurationInput {
        crate::types::UpdateExperimentTemplateReportConfigurationInput {
            outputs: self.outputs,
            data_sources: self.data_sources,
            pre_experiment_duration: self.pre_experiment_duration,
            post_experiment_duration: self.post_experiment_duration,
        }
    }
}
