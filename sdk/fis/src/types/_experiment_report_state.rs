// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the state of the experiment report generation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExperimentReportState {
    /// <p>The state of the experiment report generation.</p>
    pub status: ::std::option::Option<crate::types::ExperimentReportStatus>,
    /// <p>The reason for the state of the experiment report generation.</p>
    pub reason: ::std::option::Option<::std::string::String>,
    /// <p>The error information of the experiment when the experiment report generation has failed.</p>
    pub error: ::std::option::Option<crate::types::ExperimentReportError>,
}
impl ExperimentReportState {
    /// <p>The state of the experiment report generation.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ExperimentReportStatus> {
        self.status.as_ref()
    }
    /// <p>The reason for the state of the experiment report generation.</p>
    pub fn reason(&self) -> ::std::option::Option<&str> {
        self.reason.as_deref()
    }
    /// <p>The error information of the experiment when the experiment report generation has failed.</p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::ExperimentReportError> {
        self.error.as_ref()
    }
}
impl ExperimentReportState {
    /// Creates a new builder-style object to manufacture [`ExperimentReportState`](crate::types::ExperimentReportState).
    pub fn builder() -> crate::types::builders::ExperimentReportStateBuilder {
        crate::types::builders::ExperimentReportStateBuilder::default()
    }
}

/// A builder for [`ExperimentReportState`](crate::types::ExperimentReportState).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ExperimentReportStateBuilder {
    pub(crate) status: ::std::option::Option<crate::types::ExperimentReportStatus>,
    pub(crate) reason: ::std::option::Option<::std::string::String>,
    pub(crate) error: ::std::option::Option<crate::types::ExperimentReportError>,
}
impl ExperimentReportStateBuilder {
    /// <p>The state of the experiment report generation.</p>
    pub fn status(mut self, input: crate::types::ExperimentReportStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the experiment report generation.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ExperimentReportStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The state of the experiment report generation.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ExperimentReportStatus> {
        &self.status
    }
    /// <p>The reason for the state of the experiment report generation.</p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the state of the experiment report generation.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>The reason for the state of the experiment report generation.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// <p>The error information of the experiment when the experiment report generation has failed.</p>
    pub fn error(mut self, input: crate::types::ExperimentReportError) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>The error information of the experiment when the experiment report generation has failed.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::ExperimentReportError>) -> Self {
        self.error = input;
        self
    }
    /// <p>The error information of the experiment when the experiment report generation has failed.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::ExperimentReportError> {
        &self.error
    }
    /// Consumes the builder and constructs a [`ExperimentReportState`](crate::types::ExperimentReportState).
    pub fn build(self) -> crate::types::ExperimentReportState {
        crate::types::ExperimentReportState {
            status: self.status,
            reason: self.reason,
            error: self.error,
        }
    }
}
