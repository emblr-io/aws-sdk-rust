// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A map of key-value pairs that describe the command.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CommandParameter {
    /// <p>The name of a specific parameter used in a command and command execution.</p>
    pub name: ::std::string::String,
    /// <p>The value used to describe the command. When you assign a value to a parameter, it will override any default value that you had already specified.</p>
    pub value: ::std::option::Option<crate::types::CommandParameterValue>,
    /// <p>The default value used to describe the command. This is the value assumed by the parameter if no other value is assigned to it.</p>
    pub default_value: ::std::option::Option<crate::types::CommandParameterValue>,
    /// <p>The description of the command parameter.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl CommandParameter {
    /// <p>The name of a specific parameter used in a command and command execution.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The value used to describe the command. When you assign a value to a parameter, it will override any default value that you had already specified.</p>
    pub fn value(&self) -> ::std::option::Option<&crate::types::CommandParameterValue> {
        self.value.as_ref()
    }
    /// <p>The default value used to describe the command. This is the value assumed by the parameter if no other value is assigned to it.</p>
    pub fn default_value(&self) -> ::std::option::Option<&crate::types::CommandParameterValue> {
        self.default_value.as_ref()
    }
    /// <p>The description of the command parameter.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl CommandParameter {
    /// Creates a new builder-style object to manufacture [`CommandParameter`](crate::types::CommandParameter).
    pub fn builder() -> crate::types::builders::CommandParameterBuilder {
        crate::types::builders::CommandParameterBuilder::default()
    }
}

/// A builder for [`CommandParameter`](crate::types::CommandParameter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CommandParameterBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<crate::types::CommandParameterValue>,
    pub(crate) default_value: ::std::option::Option<crate::types::CommandParameterValue>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl CommandParameterBuilder {
    /// <p>The name of a specific parameter used in a command and command execution.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a specific parameter used in a command and command execution.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of a specific parameter used in a command and command execution.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The value used to describe the command. When you assign a value to a parameter, it will override any default value that you had already specified.</p>
    pub fn value(mut self, input: crate::types::CommandParameterValue) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value used to describe the command. When you assign a value to a parameter, it will override any default value that you had already specified.</p>
    pub fn set_value(mut self, input: ::std::option::Option<crate::types::CommandParameterValue>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value used to describe the command. When you assign a value to a parameter, it will override any default value that you had already specified.</p>
    pub fn get_value(&self) -> &::std::option::Option<crate::types::CommandParameterValue> {
        &self.value
    }
    /// <p>The default value used to describe the command. This is the value assumed by the parameter if no other value is assigned to it.</p>
    pub fn default_value(mut self, input: crate::types::CommandParameterValue) -> Self {
        self.default_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default value used to describe the command. This is the value assumed by the parameter if no other value is assigned to it.</p>
    pub fn set_default_value(mut self, input: ::std::option::Option<crate::types::CommandParameterValue>) -> Self {
        self.default_value = input;
        self
    }
    /// <p>The default value used to describe the command. This is the value assumed by the parameter if no other value is assigned to it.</p>
    pub fn get_default_value(&self) -> &::std::option::Option<crate::types::CommandParameterValue> {
        &self.default_value
    }
    /// <p>The description of the command parameter.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the command parameter.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the command parameter.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`CommandParameter`](crate::types::CommandParameter).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::CommandParameterBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::CommandParameter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CommandParameter {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CommandParameter",
                )
            })?,
            value: self.value,
            default_value: self.default_value,
            description: self.description,
        })
    }
}
