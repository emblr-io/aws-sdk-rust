// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the principal and the type of relation it has with the thing.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ThingPrincipalObject {
    /// <p>The principal of the thing principal object.</p>
    pub principal: ::std::string::String,
    /// <p>The type of the relation you want to specify when you attach a principal to a thing. The value defaults to <code>NON_EXCLUSIVE_THING</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>EXCLUSIVE_THING</code> - Attaches the specified principal to the specified thing, exclusively. The thing will be the only thing that’s attached to the principal.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>NON_EXCLUSIVE_THING</code> - Attaches the specified principal to the specified thing. Multiple things can be attached to the principal.</p></li>
    /// </ul>
    pub thing_principal_type: ::std::option::Option<crate::types::ThingPrincipalType>,
}
impl ThingPrincipalObject {
    /// <p>The principal of the thing principal object.</p>
    pub fn principal(&self) -> &str {
        use std::ops::Deref;
        self.principal.deref()
    }
    /// <p>The type of the relation you want to specify when you attach a principal to a thing. The value defaults to <code>NON_EXCLUSIVE_THING</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>EXCLUSIVE_THING</code> - Attaches the specified principal to the specified thing, exclusively. The thing will be the only thing that’s attached to the principal.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>NON_EXCLUSIVE_THING</code> - Attaches the specified principal to the specified thing. Multiple things can be attached to the principal.</p></li>
    /// </ul>
    pub fn thing_principal_type(&self) -> ::std::option::Option<&crate::types::ThingPrincipalType> {
        self.thing_principal_type.as_ref()
    }
}
impl ThingPrincipalObject {
    /// Creates a new builder-style object to manufacture [`ThingPrincipalObject`](crate::types::ThingPrincipalObject).
    pub fn builder() -> crate::types::builders::ThingPrincipalObjectBuilder {
        crate::types::builders::ThingPrincipalObjectBuilder::default()
    }
}

/// A builder for [`ThingPrincipalObject`](crate::types::ThingPrincipalObject).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ThingPrincipalObjectBuilder {
    pub(crate) principal: ::std::option::Option<::std::string::String>,
    pub(crate) thing_principal_type: ::std::option::Option<crate::types::ThingPrincipalType>,
}
impl ThingPrincipalObjectBuilder {
    /// <p>The principal of the thing principal object.</p>
    /// This field is required.
    pub fn principal(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The principal of the thing principal object.</p>
    pub fn set_principal(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal = input;
        self
    }
    /// <p>The principal of the thing principal object.</p>
    pub fn get_principal(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal
    }
    /// <p>The type of the relation you want to specify when you attach a principal to a thing. The value defaults to <code>NON_EXCLUSIVE_THING</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>EXCLUSIVE_THING</code> - Attaches the specified principal to the specified thing, exclusively. The thing will be the only thing that’s attached to the principal.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>NON_EXCLUSIVE_THING</code> - Attaches the specified principal to the specified thing. Multiple things can be attached to the principal.</p></li>
    /// </ul>
    pub fn thing_principal_type(mut self, input: crate::types::ThingPrincipalType) -> Self {
        self.thing_principal_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the relation you want to specify when you attach a principal to a thing. The value defaults to <code>NON_EXCLUSIVE_THING</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>EXCLUSIVE_THING</code> - Attaches the specified principal to the specified thing, exclusively. The thing will be the only thing that’s attached to the principal.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>NON_EXCLUSIVE_THING</code> - Attaches the specified principal to the specified thing. Multiple things can be attached to the principal.</p></li>
    /// </ul>
    pub fn set_thing_principal_type(mut self, input: ::std::option::Option<crate::types::ThingPrincipalType>) -> Self {
        self.thing_principal_type = input;
        self
    }
    /// <p>The type of the relation you want to specify when you attach a principal to a thing. The value defaults to <code>NON_EXCLUSIVE_THING</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>EXCLUSIVE_THING</code> - Attaches the specified principal to the specified thing, exclusively. The thing will be the only thing that’s attached to the principal.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>NON_EXCLUSIVE_THING</code> - Attaches the specified principal to the specified thing. Multiple things can be attached to the principal.</p></li>
    /// </ul>
    pub fn get_thing_principal_type(&self) -> &::std::option::Option<crate::types::ThingPrincipalType> {
        &self.thing_principal_type
    }
    /// Consumes the builder and constructs a [`ThingPrincipalObject`](crate::types::ThingPrincipalObject).
    /// This method will fail if any of the following fields are not set:
    /// - [`principal`](crate::types::builders::ThingPrincipalObjectBuilder::principal)
    pub fn build(self) -> ::std::result::Result<crate::types::ThingPrincipalObject, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ThingPrincipalObject {
            principal: self.principal.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "principal",
                    "principal was not specified but it is required when building ThingPrincipalObject",
                )
            })?,
            thing_principal_type: self.thing_principal_type,
        })
    }
}
