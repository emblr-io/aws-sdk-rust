// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information about a particular command execution.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CommandExecutionSummary {
    /// <p>The Amazon Resource Name (ARN) of the command execution.</p>
    pub command_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the command execution.</p>
    pub execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the target device for which the command is being executed.</p>
    pub target_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the command executions.</p>
    pub status: ::std::option::Option<crate::types::CommandExecutionStatus>,
    /// <p>The date and time at which the command execution was created for the target device.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time at which the command started executing on the target device.</p>
    pub started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time at which the command completed executing on the target device.</p>
    pub completed_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl CommandExecutionSummary {
    /// <p>The Amazon Resource Name (ARN) of the command execution.</p>
    pub fn command_arn(&self) -> ::std::option::Option<&str> {
        self.command_arn.as_deref()
    }
    /// <p>The unique identifier of the command execution.</p>
    pub fn execution_id(&self) -> ::std::option::Option<&str> {
        self.execution_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the target device for which the command is being executed.</p>
    pub fn target_arn(&self) -> ::std::option::Option<&str> {
        self.target_arn.as_deref()
    }
    /// <p>The status of the command executions.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::CommandExecutionStatus> {
        self.status.as_ref()
    }
    /// <p>The date and time at which the command execution was created for the target device.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The date and time at which the command started executing on the target device.</p>
    pub fn started_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.started_at.as_ref()
    }
    /// <p>The date and time at which the command completed executing on the target device.</p>
    pub fn completed_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.completed_at.as_ref()
    }
}
impl CommandExecutionSummary {
    /// Creates a new builder-style object to manufacture [`CommandExecutionSummary`](crate::types::CommandExecutionSummary).
    pub fn builder() -> crate::types::builders::CommandExecutionSummaryBuilder {
        crate::types::builders::CommandExecutionSummaryBuilder::default()
    }
}

/// A builder for [`CommandExecutionSummary`](crate::types::CommandExecutionSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CommandExecutionSummaryBuilder {
    pub(crate) command_arn: ::std::option::Option<::std::string::String>,
    pub(crate) execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) target_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::CommandExecutionStatus>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) completed_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl CommandExecutionSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the command execution.</p>
    pub fn command_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.command_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the command execution.</p>
    pub fn set_command_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.command_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the command execution.</p>
    pub fn get_command_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.command_arn
    }
    /// <p>The unique identifier of the command execution.</p>
    pub fn execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the command execution.</p>
    pub fn set_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_id = input;
        self
    }
    /// <p>The unique identifier of the command execution.</p>
    pub fn get_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_id
    }
    /// <p>The Amazon Resource Name (ARN) of the target device for which the command is being executed.</p>
    pub fn target_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the target device for which the command is being executed.</p>
    pub fn set_target_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the target device for which the command is being executed.</p>
    pub fn get_target_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_arn
    }
    /// <p>The status of the command executions.</p>
    pub fn status(mut self, input: crate::types::CommandExecutionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the command executions.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::CommandExecutionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the command executions.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::CommandExecutionStatus> {
        &self.status
    }
    /// <p>The date and time at which the command execution was created for the target device.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time at which the command execution was created for the target device.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time at which the command execution was created for the target device.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The date and time at which the command started executing on the target device.</p>
    pub fn started_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time at which the command started executing on the target device.</p>
    pub fn set_started_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The date and time at which the command started executing on the target device.</p>
    pub fn get_started_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_at
    }
    /// <p>The date and time at which the command completed executing on the target device.</p>
    pub fn completed_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.completed_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time at which the command completed executing on the target device.</p>
    pub fn set_completed_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.completed_at = input;
        self
    }
    /// <p>The date and time at which the command completed executing on the target device.</p>
    pub fn get_completed_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.completed_at
    }
    /// Consumes the builder and constructs a [`CommandExecutionSummary`](crate::types::CommandExecutionSummary).
    pub fn build(self) -> crate::types::CommandExecutionSummary {
        crate::types::CommandExecutionSummary {
            command_arn: self.command_arn,
            execution_id: self.execution_id,
            target_arn: self.target_arn,
            status: self.status,
            created_at: self.created_at,
            started_at: self.started_at,
            completed_at: self.completed_at,
        }
    }
}
