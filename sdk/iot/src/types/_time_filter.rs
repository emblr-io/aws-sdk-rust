// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filter that can be used to list command executions for a device that started or completed before or after a particular date and time.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TimeFilter {
    /// <p>Filter to display command executions that started or completed only after a particular date and time.</p>
    pub after: ::std::option::Option<::std::string::String>,
    /// <p>Filter to display command executions that started or completed only before a particular date and time.</p>
    pub before: ::std::option::Option<::std::string::String>,
}
impl TimeFilter {
    /// <p>Filter to display command executions that started or completed only after a particular date and time.</p>
    pub fn after(&self) -> ::std::option::Option<&str> {
        self.after.as_deref()
    }
    /// <p>Filter to display command executions that started or completed only before a particular date and time.</p>
    pub fn before(&self) -> ::std::option::Option<&str> {
        self.before.as_deref()
    }
}
impl TimeFilter {
    /// Creates a new builder-style object to manufacture [`TimeFilter`](crate::types::TimeFilter).
    pub fn builder() -> crate::types::builders::TimeFilterBuilder {
        crate::types::builders::TimeFilterBuilder::default()
    }
}

/// A builder for [`TimeFilter`](crate::types::TimeFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TimeFilterBuilder {
    pub(crate) after: ::std::option::Option<::std::string::String>,
    pub(crate) before: ::std::option::Option<::std::string::String>,
}
impl TimeFilterBuilder {
    /// <p>Filter to display command executions that started or completed only after a particular date and time.</p>
    pub fn after(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.after = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filter to display command executions that started or completed only after a particular date and time.</p>
    pub fn set_after(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.after = input;
        self
    }
    /// <p>Filter to display command executions that started or completed only after a particular date and time.</p>
    pub fn get_after(&self) -> &::std::option::Option<::std::string::String> {
        &self.after
    }
    /// <p>Filter to display command executions that started or completed only before a particular date and time.</p>
    pub fn before(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.before = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filter to display command executions that started or completed only before a particular date and time.</p>
    pub fn set_before(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.before = input;
        self
    }
    /// <p>Filter to display command executions that started or completed only before a particular date and time.</p>
    pub fn get_before(&self) -> &::std::option::Option<::std::string::String> {
        &self.before
    }
    /// Consumes the builder and constructs a [`TimeFilter`](crate::types::TimeFilter).
    pub fn build(self) -> crate::types::TimeFilter {
        crate::types::TimeFilter {
            after: self.after,
            before: self.before,
        }
    }
}
