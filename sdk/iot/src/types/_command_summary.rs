// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information about a particular command resource.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CommandSummary {
    /// <p>The Amazon Resource Name (ARN) of the command.</p>
    pub command_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the command.</p>
    pub command_id: ::std::option::Option<::std::string::String>,
    /// <p>The display name of the command.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the command has been deprecated.</p>
    pub deprecated: ::std::option::Option<bool>,
    /// <p>The timestamp, when the command was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp, when the command was last updated.</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Indicates whether the command is pending deletion.</p>
    pub pending_deletion: ::std::option::Option<bool>,
}
impl CommandSummary {
    /// <p>The Amazon Resource Name (ARN) of the command.</p>
    pub fn command_arn(&self) -> ::std::option::Option<&str> {
        self.command_arn.as_deref()
    }
    /// <p>The unique identifier of the command.</p>
    pub fn command_id(&self) -> ::std::option::Option<&str> {
        self.command_id.as_deref()
    }
    /// <p>The display name of the command.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>Indicates whether the command has been deprecated.</p>
    pub fn deprecated(&self) -> ::std::option::Option<bool> {
        self.deprecated
    }
    /// <p>The timestamp, when the command was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp, when the command was last updated.</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p>Indicates whether the command is pending deletion.</p>
    pub fn pending_deletion(&self) -> ::std::option::Option<bool> {
        self.pending_deletion
    }
}
impl CommandSummary {
    /// Creates a new builder-style object to manufacture [`CommandSummary`](crate::types::CommandSummary).
    pub fn builder() -> crate::types::builders::CommandSummaryBuilder {
        crate::types::builders::CommandSummaryBuilder::default()
    }
}

/// A builder for [`CommandSummary`](crate::types::CommandSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CommandSummaryBuilder {
    pub(crate) command_arn: ::std::option::Option<::std::string::String>,
    pub(crate) command_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) deprecated: ::std::option::Option<bool>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) pending_deletion: ::std::option::Option<bool>,
}
impl CommandSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the command.</p>
    pub fn command_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.command_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the command.</p>
    pub fn set_command_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.command_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the command.</p>
    pub fn get_command_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.command_arn
    }
    /// <p>The unique identifier of the command.</p>
    pub fn command_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.command_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the command.</p>
    pub fn set_command_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.command_id = input;
        self
    }
    /// <p>The unique identifier of the command.</p>
    pub fn get_command_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.command_id
    }
    /// <p>The display name of the command.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the command.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name of the command.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>Indicates whether the command has been deprecated.</p>
    pub fn deprecated(mut self, input: bool) -> Self {
        self.deprecated = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the command has been deprecated.</p>
    pub fn set_deprecated(mut self, input: ::std::option::Option<bool>) -> Self {
        self.deprecated = input;
        self
    }
    /// <p>Indicates whether the command has been deprecated.</p>
    pub fn get_deprecated(&self) -> &::std::option::Option<bool> {
        &self.deprecated
    }
    /// <p>The timestamp, when the command was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp, when the command was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp, when the command was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp, when the command was last updated.</p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp, when the command was last updated.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>The timestamp, when the command was last updated.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// <p>Indicates whether the command is pending deletion.</p>
    pub fn pending_deletion(mut self, input: bool) -> Self {
        self.pending_deletion = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the command is pending deletion.</p>
    pub fn set_pending_deletion(mut self, input: ::std::option::Option<bool>) -> Self {
        self.pending_deletion = input;
        self
    }
    /// <p>Indicates whether the command is pending deletion.</p>
    pub fn get_pending_deletion(&self) -> &::std::option::Option<bool> {
        &self.pending_deletion
    }
    /// Consumes the builder and constructs a [`CommandSummary`](crate::types::CommandSummary).
    pub fn build(self) -> crate::types::CommandSummary {
        crate::types::CommandSummary {
            command_arn: self.command_arn,
            command_id: self.command_id,
            display_name: self.display_name,
            deprecated: self.deprecated,
            created_at: self.created_at,
            last_updated_at: self.last_updated_at,
            pending_deletion: self.pending_deletion,
        }
    }
}
