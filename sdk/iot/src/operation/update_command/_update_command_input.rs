// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateCommandInput {
    /// <p>The unique identifier of the command to be updated.</p>
    pub command_id: ::std::option::Option<::std::string::String>,
    /// <p>The new user-friendly name to use in the console for the command.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>A short text description of the command.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A boolean that you can use to specify whether to deprecate a command.</p>
    pub deprecated: ::std::option::Option<bool>,
}
impl UpdateCommandInput {
    /// <p>The unique identifier of the command to be updated.</p>
    pub fn command_id(&self) -> ::std::option::Option<&str> {
        self.command_id.as_deref()
    }
    /// <p>The new user-friendly name to use in the console for the command.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>A short text description of the command.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A boolean that you can use to specify whether to deprecate a command.</p>
    pub fn deprecated(&self) -> ::std::option::Option<bool> {
        self.deprecated
    }
}
impl UpdateCommandInput {
    /// Creates a new builder-style object to manufacture [`UpdateCommandInput`](crate::operation::update_command::UpdateCommandInput).
    pub fn builder() -> crate::operation::update_command::builders::UpdateCommandInputBuilder {
        crate::operation::update_command::builders::UpdateCommandInputBuilder::default()
    }
}

/// A builder for [`UpdateCommandInput`](crate::operation::update_command::UpdateCommandInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateCommandInputBuilder {
    pub(crate) command_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) deprecated: ::std::option::Option<bool>,
}
impl UpdateCommandInputBuilder {
    /// <p>The unique identifier of the command to be updated.</p>
    /// This field is required.
    pub fn command_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.command_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the command to be updated.</p>
    pub fn set_command_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.command_id = input;
        self
    }
    /// <p>The unique identifier of the command to be updated.</p>
    pub fn get_command_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.command_id
    }
    /// <p>The new user-friendly name to use in the console for the command.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new user-friendly name to use in the console for the command.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The new user-friendly name to use in the console for the command.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>A short text description of the command.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A short text description of the command.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A short text description of the command.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>A boolean that you can use to specify whether to deprecate a command.</p>
    pub fn deprecated(mut self, input: bool) -> Self {
        self.deprecated = ::std::option::Option::Some(input);
        self
    }
    /// <p>A boolean that you can use to specify whether to deprecate a command.</p>
    pub fn set_deprecated(mut self, input: ::std::option::Option<bool>) -> Self {
        self.deprecated = input;
        self
    }
    /// <p>A boolean that you can use to specify whether to deprecate a command.</p>
    pub fn get_deprecated(&self) -> &::std::option::Option<bool> {
        &self.deprecated
    }
    /// Consumes the builder and constructs a [`UpdateCommandInput`](crate::operation::update_command::UpdateCommandInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_command::UpdateCommandInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_command::UpdateCommandInput {
            command_id: self.command_id,
            display_name: self.display_name,
            description: self.description,
            deprecated: self.deprecated,
        })
    }
}
