// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateCommandOutput {
    /// <p>The unique identifier of the command.</p>
    pub command_id: ::std::option::Option<::std::string::String>,
    /// <p>The updated user-friendly display name in the console for the command.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The updated text description of the command.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The boolean that indicates whether the command was deprecated.</p>
    pub deprecated: ::std::option::Option<bool>,
    /// <p>The date and time (epoch timestamp in seconds) when the command was last updated.</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl UpdateCommandOutput {
    /// <p>The unique identifier of the command.</p>
    pub fn command_id(&self) -> ::std::option::Option<&str> {
        self.command_id.as_deref()
    }
    /// <p>The updated user-friendly display name in the console for the command.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The updated text description of the command.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The boolean that indicates whether the command was deprecated.</p>
    pub fn deprecated(&self) -> ::std::option::Option<bool> {
        self.deprecated
    }
    /// <p>The date and time (epoch timestamp in seconds) when the command was last updated.</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for UpdateCommandOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateCommandOutput {
    /// Creates a new builder-style object to manufacture [`UpdateCommandOutput`](crate::operation::update_command::UpdateCommandOutput).
    pub fn builder() -> crate::operation::update_command::builders::UpdateCommandOutputBuilder {
        crate::operation::update_command::builders::UpdateCommandOutputBuilder::default()
    }
}

/// A builder for [`UpdateCommandOutput`](crate::operation::update_command::UpdateCommandOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateCommandOutputBuilder {
    pub(crate) command_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) deprecated: ::std::option::Option<bool>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl UpdateCommandOutputBuilder {
    /// <p>The unique identifier of the command.</p>
    pub fn command_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.command_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the command.</p>
    pub fn set_command_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.command_id = input;
        self
    }
    /// <p>The unique identifier of the command.</p>
    pub fn get_command_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.command_id
    }
    /// <p>The updated user-friendly display name in the console for the command.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated user-friendly display name in the console for the command.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The updated user-friendly display name in the console for the command.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The updated text description of the command.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated text description of the command.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The updated text description of the command.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The boolean that indicates whether the command was deprecated.</p>
    pub fn deprecated(mut self, input: bool) -> Self {
        self.deprecated = ::std::option::Option::Some(input);
        self
    }
    /// <p>The boolean that indicates whether the command was deprecated.</p>
    pub fn set_deprecated(mut self, input: ::std::option::Option<bool>) -> Self {
        self.deprecated = input;
        self
    }
    /// <p>The boolean that indicates whether the command was deprecated.</p>
    pub fn get_deprecated(&self) -> &::std::option::Option<bool> {
        &self.deprecated
    }
    /// <p>The date and time (epoch timestamp in seconds) when the command was last updated.</p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time (epoch timestamp in seconds) when the command was last updated.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>The date and time (epoch timestamp in seconds) when the command was last updated.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateCommandOutput`](crate::operation::update_command::UpdateCommandOutput).
    pub fn build(self) -> crate::operation::update_command::UpdateCommandOutput {
        crate::operation::update_command::UpdateCommandOutput {
            command_id: self.command_id,
            display_name: self.display_name,
            description: self.description,
            deprecated: self.deprecated,
            last_updated_at: self.last_updated_at,
            _request_id: self._request_id,
        }
    }
}
