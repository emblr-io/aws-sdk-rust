// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListCommandExecutionsInput {
    /// <p>The maximum number of results to return in this operation.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <code>null</code> to receive the first set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The namespace of the command.</p>
    pub namespace: ::std::option::Option<crate::types::CommandNamespace>,
    /// <p>List all command executions for the device that have a particular status. For example, you can filter the list to display only command executions that have failed or timed out.</p>
    pub status: ::std::option::Option<crate::types::CommandExecutionStatus>,
    /// <p>Specify whether to list the command executions that were created in the ascending or descending order. By default, the API returns all commands in the descending order based on the start time or completion time of the executions, that are determined by the <code>startTimeFilter</code> and <code>completeTimeFilter</code> parameters.</p>
    pub sort_order: ::std::option::Option<crate::types::SortOrder>,
    /// <p>List all command executions that started any time before or after the date and time that you specify. The date and time uses the format <code>yyyy-MM-dd'T'HH:mm</code>.</p>
    pub started_time_filter: ::std::option::Option<crate::types::TimeFilter>,
    /// <p>List all command executions that completed any time before or after the date and time that you specify. The date and time uses the format <code>yyyy-MM-dd'T'HH:mm</code>.</p>
    pub completed_time_filter: ::std::option::Option<crate::types::TimeFilter>,
    /// <p>The Amazon Resource Number (ARN) of the target device. You can use this information to list all command executions for a particular device.</p>
    pub target_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Number (ARN) of the command. You can use this information to list all command executions for a particular command.</p>
    pub command_arn: ::std::option::Option<::std::string::String>,
}
impl ListCommandExecutionsInput {
    /// <p>The maximum number of results to return in this operation.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <code>null</code> to receive the first set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The namespace of the command.</p>
    pub fn namespace(&self) -> ::std::option::Option<&crate::types::CommandNamespace> {
        self.namespace.as_ref()
    }
    /// <p>List all command executions for the device that have a particular status. For example, you can filter the list to display only command executions that have failed or timed out.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::CommandExecutionStatus> {
        self.status.as_ref()
    }
    /// <p>Specify whether to list the command executions that were created in the ascending or descending order. By default, the API returns all commands in the descending order based on the start time or completion time of the executions, that are determined by the <code>startTimeFilter</code> and <code>completeTimeFilter</code> parameters.</p>
    pub fn sort_order(&self) -> ::std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
    /// <p>List all command executions that started any time before or after the date and time that you specify. The date and time uses the format <code>yyyy-MM-dd'T'HH:mm</code>.</p>
    pub fn started_time_filter(&self) -> ::std::option::Option<&crate::types::TimeFilter> {
        self.started_time_filter.as_ref()
    }
    /// <p>List all command executions that completed any time before or after the date and time that you specify. The date and time uses the format <code>yyyy-MM-dd'T'HH:mm</code>.</p>
    pub fn completed_time_filter(&self) -> ::std::option::Option<&crate::types::TimeFilter> {
        self.completed_time_filter.as_ref()
    }
    /// <p>The Amazon Resource Number (ARN) of the target device. You can use this information to list all command executions for a particular device.</p>
    pub fn target_arn(&self) -> ::std::option::Option<&str> {
        self.target_arn.as_deref()
    }
    /// <p>The Amazon Resource Number (ARN) of the command. You can use this information to list all command executions for a particular command.</p>
    pub fn command_arn(&self) -> ::std::option::Option<&str> {
        self.command_arn.as_deref()
    }
}
impl ListCommandExecutionsInput {
    /// Creates a new builder-style object to manufacture [`ListCommandExecutionsInput`](crate::operation::list_command_executions::ListCommandExecutionsInput).
    pub fn builder() -> crate::operation::list_command_executions::builders::ListCommandExecutionsInputBuilder {
        crate::operation::list_command_executions::builders::ListCommandExecutionsInputBuilder::default()
    }
}

/// A builder for [`ListCommandExecutionsInput`](crate::operation::list_command_executions::ListCommandExecutionsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListCommandExecutionsInputBuilder {
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) namespace: ::std::option::Option<crate::types::CommandNamespace>,
    pub(crate) status: ::std::option::Option<crate::types::CommandExecutionStatus>,
    pub(crate) sort_order: ::std::option::Option<crate::types::SortOrder>,
    pub(crate) started_time_filter: ::std::option::Option<crate::types::TimeFilter>,
    pub(crate) completed_time_filter: ::std::option::Option<crate::types::TimeFilter>,
    pub(crate) target_arn: ::std::option::Option<::std::string::String>,
    pub(crate) command_arn: ::std::option::Option<::std::string::String>,
}
impl ListCommandExecutionsInputBuilder {
    /// <p>The maximum number of results to return in this operation.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return in this operation.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return in this operation.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <code>null</code> to receive the first set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <code>null</code> to receive the first set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <code>null</code> to receive the first set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The namespace of the command.</p>
    pub fn namespace(mut self, input: crate::types::CommandNamespace) -> Self {
        self.namespace = ::std::option::Option::Some(input);
        self
    }
    /// <p>The namespace of the command.</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<crate::types::CommandNamespace>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The namespace of the command.</p>
    pub fn get_namespace(&self) -> &::std::option::Option<crate::types::CommandNamespace> {
        &self.namespace
    }
    /// <p>List all command executions for the device that have a particular status. For example, you can filter the list to display only command executions that have failed or timed out.</p>
    pub fn status(mut self, input: crate::types::CommandExecutionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>List all command executions for the device that have a particular status. For example, you can filter the list to display only command executions that have failed or timed out.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::CommandExecutionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>List all command executions for the device that have a particular status. For example, you can filter the list to display only command executions that have failed or timed out.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::CommandExecutionStatus> {
        &self.status
    }
    /// <p>Specify whether to list the command executions that were created in the ascending or descending order. By default, the API returns all commands in the descending order based on the start time or completion time of the executions, that are determined by the <code>startTimeFilter</code> and <code>completeTimeFilter</code> parameters.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify whether to list the command executions that were created in the ascending or descending order. By default, the API returns all commands in the descending order based on the start time or completion time of the executions, that are determined by the <code>startTimeFilter</code> and <code>completeTimeFilter</code> parameters.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>Specify whether to list the command executions that were created in the ascending or descending order. By default, the API returns all commands in the descending order based on the start time or completion time of the executions, that are determined by the <code>startTimeFilter</code> and <code>completeTimeFilter</code> parameters.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortOrder> {
        &self.sort_order
    }
    /// <p>List all command executions that started any time before or after the date and time that you specify. The date and time uses the format <code>yyyy-MM-dd'T'HH:mm</code>.</p>
    pub fn started_time_filter(mut self, input: crate::types::TimeFilter) -> Self {
        self.started_time_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>List all command executions that started any time before or after the date and time that you specify. The date and time uses the format <code>yyyy-MM-dd'T'HH:mm</code>.</p>
    pub fn set_started_time_filter(mut self, input: ::std::option::Option<crate::types::TimeFilter>) -> Self {
        self.started_time_filter = input;
        self
    }
    /// <p>List all command executions that started any time before or after the date and time that you specify. The date and time uses the format <code>yyyy-MM-dd'T'HH:mm</code>.</p>
    pub fn get_started_time_filter(&self) -> &::std::option::Option<crate::types::TimeFilter> {
        &self.started_time_filter
    }
    /// <p>List all command executions that completed any time before or after the date and time that you specify. The date and time uses the format <code>yyyy-MM-dd'T'HH:mm</code>.</p>
    pub fn completed_time_filter(mut self, input: crate::types::TimeFilter) -> Self {
        self.completed_time_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>List all command executions that completed any time before or after the date and time that you specify. The date and time uses the format <code>yyyy-MM-dd'T'HH:mm</code>.</p>
    pub fn set_completed_time_filter(mut self, input: ::std::option::Option<crate::types::TimeFilter>) -> Self {
        self.completed_time_filter = input;
        self
    }
    /// <p>List all command executions that completed any time before or after the date and time that you specify. The date and time uses the format <code>yyyy-MM-dd'T'HH:mm</code>.</p>
    pub fn get_completed_time_filter(&self) -> &::std::option::Option<crate::types::TimeFilter> {
        &self.completed_time_filter
    }
    /// <p>The Amazon Resource Number (ARN) of the target device. You can use this information to list all command executions for a particular device.</p>
    pub fn target_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the target device. You can use this information to list all command executions for a particular device.</p>
    pub fn set_target_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_arn = input;
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the target device. You can use this information to list all command executions for a particular device.</p>
    pub fn get_target_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_arn
    }
    /// <p>The Amazon Resource Number (ARN) of the command. You can use this information to list all command executions for a particular command.</p>
    pub fn command_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.command_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the command. You can use this information to list all command executions for a particular command.</p>
    pub fn set_command_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.command_arn = input;
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the command. You can use this information to list all command executions for a particular command.</p>
    pub fn get_command_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.command_arn
    }
    /// Consumes the builder and constructs a [`ListCommandExecutionsInput`](crate::operation::list_command_executions::ListCommandExecutionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_command_executions::ListCommandExecutionsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_command_executions::ListCommandExecutionsInput {
            max_results: self.max_results,
            next_token: self.next_token,
            namespace: self.namespace,
            status: self.status,
            sort_order: self.sort_order,
            started_time_filter: self.started_time_filter,
            completed_time_filter: self.completed_time_filter,
            target_arn: self.target_arn,
            command_arn: self.command_arn,
        })
    }
}
