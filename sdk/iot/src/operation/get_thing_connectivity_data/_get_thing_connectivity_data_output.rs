// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetThingConnectivityDataOutput {
    /// <p>The name of your IoT thing.</p>
    pub thing_name: ::std::option::Option<::std::string::String>,
    /// <p>A Boolean that indicates the connectivity status.</p>
    pub connected: ::std::option::Option<bool>,
    /// <p>The timestamp of when the event occurred.</p>
    pub timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The reason why the client is disconnecting.</p>
    pub disconnect_reason: ::std::option::Option<crate::types::DisconnectReasonValue>,
    _request_id: Option<String>,
}
impl GetThingConnectivityDataOutput {
    /// <p>The name of your IoT thing.</p>
    pub fn thing_name(&self) -> ::std::option::Option<&str> {
        self.thing_name.as_deref()
    }
    /// <p>A Boolean that indicates the connectivity status.</p>
    pub fn connected(&self) -> ::std::option::Option<bool> {
        self.connected
    }
    /// <p>The timestamp of when the event occurred.</p>
    pub fn timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
    /// <p>The reason why the client is disconnecting.</p>
    pub fn disconnect_reason(&self) -> ::std::option::Option<&crate::types::DisconnectReasonValue> {
        self.disconnect_reason.as_ref()
    }
}
impl ::std::fmt::Debug for GetThingConnectivityDataOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetThingConnectivityDataOutput");
        formatter.field("thing_name", &"*** Sensitive Data Redacted ***");
        formatter.field("connected", &self.connected);
        formatter.field("timestamp", &self.timestamp);
        formatter.field("disconnect_reason", &self.disconnect_reason);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetThingConnectivityDataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetThingConnectivityDataOutput {
    /// Creates a new builder-style object to manufacture [`GetThingConnectivityDataOutput`](crate::operation::get_thing_connectivity_data::GetThingConnectivityDataOutput).
    pub fn builder() -> crate::operation::get_thing_connectivity_data::builders::GetThingConnectivityDataOutputBuilder {
        crate::operation::get_thing_connectivity_data::builders::GetThingConnectivityDataOutputBuilder::default()
    }
}

/// A builder for [`GetThingConnectivityDataOutput`](crate::operation::get_thing_connectivity_data::GetThingConnectivityDataOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetThingConnectivityDataOutputBuilder {
    pub(crate) thing_name: ::std::option::Option<::std::string::String>,
    pub(crate) connected: ::std::option::Option<bool>,
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) disconnect_reason: ::std::option::Option<crate::types::DisconnectReasonValue>,
    _request_id: Option<String>,
}
impl GetThingConnectivityDataOutputBuilder {
    /// <p>The name of your IoT thing.</p>
    pub fn thing_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.thing_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of your IoT thing.</p>
    pub fn set_thing_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.thing_name = input;
        self
    }
    /// <p>The name of your IoT thing.</p>
    pub fn get_thing_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.thing_name
    }
    /// <p>A Boolean that indicates the connectivity status.</p>
    pub fn connected(mut self, input: bool) -> Self {
        self.connected = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Boolean that indicates the connectivity status.</p>
    pub fn set_connected(mut self, input: ::std::option::Option<bool>) -> Self {
        self.connected = input;
        self
    }
    /// <p>A Boolean that indicates the connectivity status.</p>
    pub fn get_connected(&self) -> &::std::option::Option<bool> {
        &self.connected
    }
    /// <p>The timestamp of when the event occurred.</p>
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the event occurred.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The timestamp of when the event occurred.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// <p>The reason why the client is disconnecting.</p>
    pub fn disconnect_reason(mut self, input: crate::types::DisconnectReasonValue) -> Self {
        self.disconnect_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>The reason why the client is disconnecting.</p>
    pub fn set_disconnect_reason(mut self, input: ::std::option::Option<crate::types::DisconnectReasonValue>) -> Self {
        self.disconnect_reason = input;
        self
    }
    /// <p>The reason why the client is disconnecting.</p>
    pub fn get_disconnect_reason(&self) -> &::std::option::Option<crate::types::DisconnectReasonValue> {
        &self.disconnect_reason
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetThingConnectivityDataOutput`](crate::operation::get_thing_connectivity_data::GetThingConnectivityDataOutput).
    pub fn build(self) -> crate::operation::get_thing_connectivity_data::GetThingConnectivityDataOutput {
        crate::operation::get_thing_connectivity_data::GetThingConnectivityDataOutput {
            thing_name: self.thing_name,
            connected: self.connected,
            timestamp: self.timestamp,
            disconnect_reason: self.disconnect_reason,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for GetThingConnectivityDataOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetThingConnectivityDataOutputBuilder");
        formatter.field("thing_name", &"*** Sensitive Data Redacted ***");
        formatter.field("connected", &self.connected);
        formatter.field("timestamp", &self.timestamp);
        formatter.field("disconnect_reason", &self.disconnect_reason);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
