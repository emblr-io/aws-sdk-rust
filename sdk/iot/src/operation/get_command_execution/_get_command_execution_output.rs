// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetCommandExecutionOutput {
    /// <p>The unique identifier of the command execution.</p>
    pub execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Number (ARN) of the command. For example, <code></code>arn:aws:iot:<region>
    /// :
    /// <accountid>
    /// :command/
    /// <commandid></commandid>
    /// </accountid>
    /// </region></p>
    pub command_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Number (ARN) of the device on which the command execution is being performed.</p>
    pub target_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the command execution. After your devices receive the command and start performing the operations specified in the command, it can use the <code>UpdateCommandExecution</code> MQTT API to update the status information.</p>
    pub status: ::std::option::Option<crate::types::CommandExecutionStatus>,
    /// <p>Your devices can use this parameter to provide additional context about the status of a command execution using a reason code and description.</p>
    pub status_reason: ::std::option::Option<crate::types::StatusReason>,
    /// <p>The result value for the current state of the command execution. The status provides information about the progress of the command execution. The device can use the result field to share additional details about the execution such as a return value of a remote function call.</p><note>
    /// <p>If you use the <code>AWS-IoT-FleetWise</code> namespace, then this field is not applicable in the API response.</p>
    /// </note>
    pub result: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CommandExecutionResult>>,
    /// <p>The list of parameters that the <code>StartCommandExecution</code> API used when performing the command on the device.</p>
    pub parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CommandParameterValue>>,
    /// <p>Specifies the amount of time in seconds that the device can take to finish a command execution. A timer starts when the command execution is created. If the command execution status is not set to another terminal state before the timer expires, it will automatically update to <code>TIMED_OUT</code>.</p>
    pub execution_timeout_seconds: ::std::option::Option<i64>,
    /// <p>The timestamp, when the command execution was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp, when the command execution was last updated.</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp, when the command execution was started.</p>
    pub started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp, when the command execution was completed.</p>
    pub completed_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time to live (TTL) parameter that indicates the duration for which executions will be retained in your account. The default value is six months.</p>
    pub time_to_live: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetCommandExecutionOutput {
    /// <p>The unique identifier of the command execution.</p>
    pub fn execution_id(&self) -> ::std::option::Option<&str> {
        self.execution_id.as_deref()
    }
    /// <p>The Amazon Resource Number (ARN) of the command. For example, <code></code>arn:aws:iot:<region>
    /// :
    /// <accountid>
    /// :command/
    /// <commandid></commandid>
    /// </accountid>
    /// </region></p>
    pub fn command_arn(&self) -> ::std::option::Option<&str> {
        self.command_arn.as_deref()
    }
    /// <p>The Amazon Resource Number (ARN) of the device on which the command execution is being performed.</p>
    pub fn target_arn(&self) -> ::std::option::Option<&str> {
        self.target_arn.as_deref()
    }
    /// <p>The status of the command execution. After your devices receive the command and start performing the operations specified in the command, it can use the <code>UpdateCommandExecution</code> MQTT API to update the status information.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::CommandExecutionStatus> {
        self.status.as_ref()
    }
    /// <p>Your devices can use this parameter to provide additional context about the status of a command execution using a reason code and description.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&crate::types::StatusReason> {
        self.status_reason.as_ref()
    }
    /// <p>The result value for the current state of the command execution. The status provides information about the progress of the command execution. The device can use the result field to share additional details about the execution such as a return value of a remote function call.</p><note>
    /// <p>If you use the <code>AWS-IoT-FleetWise</code> namespace, then this field is not applicable in the API response.</p>
    /// </note>
    pub fn result(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::CommandExecutionResult>> {
        self.result.as_ref()
    }
    /// <p>The list of parameters that the <code>StartCommandExecution</code> API used when performing the command on the device.</p>
    pub fn parameters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::CommandParameterValue>> {
        self.parameters.as_ref()
    }
    /// <p>Specifies the amount of time in seconds that the device can take to finish a command execution. A timer starts when the command execution is created. If the command execution status is not set to another terminal state before the timer expires, it will automatically update to <code>TIMED_OUT</code>.</p>
    pub fn execution_timeout_seconds(&self) -> ::std::option::Option<i64> {
        self.execution_timeout_seconds
    }
    /// <p>The timestamp, when the command execution was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp, when the command execution was last updated.</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p>The timestamp, when the command execution was started.</p>
    pub fn started_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.started_at.as_ref()
    }
    /// <p>The timestamp, when the command execution was completed.</p>
    pub fn completed_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.completed_at.as_ref()
    }
    /// <p>The time to live (TTL) parameter that indicates the duration for which executions will be retained in your account. The default value is six months.</p>
    pub fn time_to_live(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.time_to_live.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetCommandExecutionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetCommandExecutionOutput {
    /// Creates a new builder-style object to manufacture [`GetCommandExecutionOutput`](crate::operation::get_command_execution::GetCommandExecutionOutput).
    pub fn builder() -> crate::operation::get_command_execution::builders::GetCommandExecutionOutputBuilder {
        crate::operation::get_command_execution::builders::GetCommandExecutionOutputBuilder::default()
    }
}

/// A builder for [`GetCommandExecutionOutput`](crate::operation::get_command_execution::GetCommandExecutionOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetCommandExecutionOutputBuilder {
    pub(crate) execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) command_arn: ::std::option::Option<::std::string::String>,
    pub(crate) target_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::CommandExecutionStatus>,
    pub(crate) status_reason: ::std::option::Option<crate::types::StatusReason>,
    pub(crate) result: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CommandExecutionResult>>,
    pub(crate) parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CommandParameterValue>>,
    pub(crate) execution_timeout_seconds: ::std::option::Option<i64>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) completed_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) time_to_live: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetCommandExecutionOutputBuilder {
    /// <p>The unique identifier of the command execution.</p>
    pub fn execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the command execution.</p>
    pub fn set_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_id = input;
        self
    }
    /// <p>The unique identifier of the command execution.</p>
    pub fn get_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_id
    }
    /// <p>The Amazon Resource Number (ARN) of the command. For example, <code></code>arn:aws:iot:<region>
    /// :
    /// <accountid>
    /// :command/
    /// <commandid></commandid>
    /// </accountid>
    /// </region></p>
    pub fn command_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.command_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the command. For example, <code></code>arn:aws:iot:<region>
    /// :
    /// <accountid>
    /// :command/
    /// <commandid></commandid>
    /// </accountid>
    /// </region></p>
    pub fn set_command_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.command_arn = input;
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the command. For example, <code></code>arn:aws:iot:<region>
    /// :
    /// <accountid>
    /// :command/
    /// <commandid></commandid>
    /// </accountid>
    /// </region></p>
    pub fn get_command_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.command_arn
    }
    /// <p>The Amazon Resource Number (ARN) of the device on which the command execution is being performed.</p>
    pub fn target_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the device on which the command execution is being performed.</p>
    pub fn set_target_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_arn = input;
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the device on which the command execution is being performed.</p>
    pub fn get_target_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_arn
    }
    /// <p>The status of the command execution. After your devices receive the command and start performing the operations specified in the command, it can use the <code>UpdateCommandExecution</code> MQTT API to update the status information.</p>
    pub fn status(mut self, input: crate::types::CommandExecutionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the command execution. After your devices receive the command and start performing the operations specified in the command, it can use the <code>UpdateCommandExecution</code> MQTT API to update the status information.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::CommandExecutionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the command execution. After your devices receive the command and start performing the operations specified in the command, it can use the <code>UpdateCommandExecution</code> MQTT API to update the status information.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::CommandExecutionStatus> {
        &self.status
    }
    /// <p>Your devices can use this parameter to provide additional context about the status of a command execution using a reason code and description.</p>
    pub fn status_reason(mut self, input: crate::types::StatusReason) -> Self {
        self.status_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>Your devices can use this parameter to provide additional context about the status of a command execution using a reason code and description.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<crate::types::StatusReason>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>Your devices can use this parameter to provide additional context about the status of a command execution using a reason code and description.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<crate::types::StatusReason> {
        &self.status_reason
    }
    /// Adds a key-value pair to `result`.
    ///
    /// To override the contents of this collection use [`set_result`](Self::set_result).
    ///
    /// <p>The result value for the current state of the command execution. The status provides information about the progress of the command execution. The device can use the result field to share additional details about the execution such as a return value of a remote function call.</p><note>
    /// <p>If you use the <code>AWS-IoT-FleetWise</code> namespace, then this field is not applicable in the API response.</p>
    /// </note>
    pub fn result(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::CommandExecutionResult) -> Self {
        let mut hash_map = self.result.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.result = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The result value for the current state of the command execution. The status provides information about the progress of the command execution. The device can use the result field to share additional details about the execution such as a return value of a remote function call.</p><note>
    /// <p>If you use the <code>AWS-IoT-FleetWise</code> namespace, then this field is not applicable in the API response.</p>
    /// </note>
    pub fn set_result(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CommandExecutionResult>>,
    ) -> Self {
        self.result = input;
        self
    }
    /// <p>The result value for the current state of the command execution. The status provides information about the progress of the command execution. The device can use the result field to share additional details about the execution such as a return value of a remote function call.</p><note>
    /// <p>If you use the <code>AWS-IoT-FleetWise</code> namespace, then this field is not applicable in the API response.</p>
    /// </note>
    pub fn get_result(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CommandExecutionResult>> {
        &self.result
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>The list of parameters that the <code>StartCommandExecution</code> API used when performing the command on the device.</p>
    pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::CommandParameterValue) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The list of parameters that the <code>StartCommandExecution</code> API used when performing the command on the device.</p>
    pub fn set_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CommandParameterValue>>,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// <p>The list of parameters that the <code>StartCommandExecution</code> API used when performing the command on the device.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CommandParameterValue>> {
        &self.parameters
    }
    /// <p>Specifies the amount of time in seconds that the device can take to finish a command execution. A timer starts when the command execution is created. If the command execution status is not set to another terminal state before the timer expires, it will automatically update to <code>TIMED_OUT</code>.</p>
    pub fn execution_timeout_seconds(mut self, input: i64) -> Self {
        self.execution_timeout_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the amount of time in seconds that the device can take to finish a command execution. A timer starts when the command execution is created. If the command execution status is not set to another terminal state before the timer expires, it will automatically update to <code>TIMED_OUT</code>.</p>
    pub fn set_execution_timeout_seconds(mut self, input: ::std::option::Option<i64>) -> Self {
        self.execution_timeout_seconds = input;
        self
    }
    /// <p>Specifies the amount of time in seconds that the device can take to finish a command execution. A timer starts when the command execution is created. If the command execution status is not set to another terminal state before the timer expires, it will automatically update to <code>TIMED_OUT</code>.</p>
    pub fn get_execution_timeout_seconds(&self) -> &::std::option::Option<i64> {
        &self.execution_timeout_seconds
    }
    /// <p>The timestamp, when the command execution was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp, when the command execution was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp, when the command execution was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp, when the command execution was last updated.</p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp, when the command execution was last updated.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>The timestamp, when the command execution was last updated.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// <p>The timestamp, when the command execution was started.</p>
    pub fn started_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp, when the command execution was started.</p>
    pub fn set_started_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The timestamp, when the command execution was started.</p>
    pub fn get_started_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_at
    }
    /// <p>The timestamp, when the command execution was completed.</p>
    pub fn completed_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.completed_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp, when the command execution was completed.</p>
    pub fn set_completed_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.completed_at = input;
        self
    }
    /// <p>The timestamp, when the command execution was completed.</p>
    pub fn get_completed_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.completed_at
    }
    /// <p>The time to live (TTL) parameter that indicates the duration for which executions will be retained in your account. The default value is six months.</p>
    pub fn time_to_live(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.time_to_live = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time to live (TTL) parameter that indicates the duration for which executions will be retained in your account. The default value is six months.</p>
    pub fn set_time_to_live(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.time_to_live = input;
        self
    }
    /// <p>The time to live (TTL) parameter that indicates the duration for which executions will be retained in your account. The default value is six months.</p>
    pub fn get_time_to_live(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.time_to_live
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetCommandExecutionOutput`](crate::operation::get_command_execution::GetCommandExecutionOutput).
    pub fn build(self) -> crate::operation::get_command_execution::GetCommandExecutionOutput {
        crate::operation::get_command_execution::GetCommandExecutionOutput {
            execution_id: self.execution_id,
            command_arn: self.command_arn,
            target_arn: self.target_arn,
            status: self.status,
            status_reason: self.status_reason,
            result: self.result,
            parameters: self.parameters,
            execution_timeout_seconds: self.execution_timeout_seconds,
            created_at: self.created_at,
            last_updated_at: self.last_updated_at,
            started_at: self.started_at,
            completed_at: self.completed_at,
            time_to_live: self.time_to_live,
            _request_id: self._request_id,
        }
    }
}
