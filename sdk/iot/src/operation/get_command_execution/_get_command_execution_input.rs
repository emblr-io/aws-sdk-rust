// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetCommandExecutionInput {
    /// <p>The unique identifier for the command execution. This information is returned as a response of the <code>StartCommandExecution</code> API request.</p>
    pub execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Number (ARN) of the device on which the command execution is being performed.</p>
    pub target_arn: ::std::option::Option<::std::string::String>,
    /// <p>Can be used to specify whether to include the result of the command execution in the <code>GetCommandExecution</code> API response. Your device can use this field to provide additional information about the command execution. You only need to specify this field when using the <code>AWS-IoT</code> namespace.</p>
    pub include_result: ::std::option::Option<bool>,
}
impl GetCommandExecutionInput {
    /// <p>The unique identifier for the command execution. This information is returned as a response of the <code>StartCommandExecution</code> API request.</p>
    pub fn execution_id(&self) -> ::std::option::Option<&str> {
        self.execution_id.as_deref()
    }
    /// <p>The Amazon Resource Number (ARN) of the device on which the command execution is being performed.</p>
    pub fn target_arn(&self) -> ::std::option::Option<&str> {
        self.target_arn.as_deref()
    }
    /// <p>Can be used to specify whether to include the result of the command execution in the <code>GetCommandExecution</code> API response. Your device can use this field to provide additional information about the command execution. You only need to specify this field when using the <code>AWS-IoT</code> namespace.</p>
    pub fn include_result(&self) -> ::std::option::Option<bool> {
        self.include_result
    }
}
impl GetCommandExecutionInput {
    /// Creates a new builder-style object to manufacture [`GetCommandExecutionInput`](crate::operation::get_command_execution::GetCommandExecutionInput).
    pub fn builder() -> crate::operation::get_command_execution::builders::GetCommandExecutionInputBuilder {
        crate::operation::get_command_execution::builders::GetCommandExecutionInputBuilder::default()
    }
}

/// A builder for [`GetCommandExecutionInput`](crate::operation::get_command_execution::GetCommandExecutionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetCommandExecutionInputBuilder {
    pub(crate) execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) target_arn: ::std::option::Option<::std::string::String>,
    pub(crate) include_result: ::std::option::Option<bool>,
}
impl GetCommandExecutionInputBuilder {
    /// <p>The unique identifier for the command execution. This information is returned as a response of the <code>StartCommandExecution</code> API request.</p>
    /// This field is required.
    pub fn execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the command execution. This information is returned as a response of the <code>StartCommandExecution</code> API request.</p>
    pub fn set_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_id = input;
        self
    }
    /// <p>The unique identifier for the command execution. This information is returned as a response of the <code>StartCommandExecution</code> API request.</p>
    pub fn get_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_id
    }
    /// <p>The Amazon Resource Number (ARN) of the device on which the command execution is being performed.</p>
    /// This field is required.
    pub fn target_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the device on which the command execution is being performed.</p>
    pub fn set_target_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_arn = input;
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the device on which the command execution is being performed.</p>
    pub fn get_target_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_arn
    }
    /// <p>Can be used to specify whether to include the result of the command execution in the <code>GetCommandExecution</code> API response. Your device can use this field to provide additional information about the command execution. You only need to specify this field when using the <code>AWS-IoT</code> namespace.</p>
    pub fn include_result(mut self, input: bool) -> Self {
        self.include_result = ::std::option::Option::Some(input);
        self
    }
    /// <p>Can be used to specify whether to include the result of the command execution in the <code>GetCommandExecution</code> API response. Your device can use this field to provide additional information about the command execution. You only need to specify this field when using the <code>AWS-IoT</code> namespace.</p>
    pub fn set_include_result(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_result = input;
        self
    }
    /// <p>Can be used to specify whether to include the result of the command execution in the <code>GetCommandExecution</code> API response. Your device can use this field to provide additional information about the command execution. You only need to specify this field when using the <code>AWS-IoT</code> namespace.</p>
    pub fn get_include_result(&self) -> &::std::option::Option<bool> {
        &self.include_result
    }
    /// Consumes the builder and constructs a [`GetCommandExecutionInput`](crate::operation::get_command_execution::GetCommandExecutionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_command_execution::GetCommandExecutionInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_command_execution::GetCommandExecutionInput {
            execution_id: self.execution_id,
            target_arn: self.target_arn,
            include_result: self.include_result,
        })
    }
}
