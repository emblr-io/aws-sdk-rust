// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateDomainConfigurationInput {
    /// <p>The name of the domain configuration to be updated.</p>
    pub domain_configuration_name: ::std::option::Option<::std::string::String>,
    /// <p>An object that specifies the authorization service for a domain.</p>
    pub authorizer_config: ::std::option::Option<crate::types::AuthorizerConfig>,
    /// <p>The status to which the domain configuration should be updated.</p>
    pub domain_configuration_status: ::std::option::Option<crate::types::DomainConfigurationStatus>,
    /// <p>Removes the authorization configuration from a domain.</p>
    pub remove_authorizer_config: ::std::option::Option<bool>,
    /// <p>An object that specifies the TLS configuration for a domain.</p>
    pub tls_config: ::std::option::Option<crate::types::TlsConfig>,
    /// <p>The server certificate configuration.</p>
    pub server_certificate_config: ::std::option::Option<crate::types::ServerCertificateConfig>,
    /// <p>An enumerated string that speciﬁes the authentication type.</p>
    /// <ul>
    /// <li>
    /// <p><code>CUSTOM_AUTH_X509</code> - Use custom authentication and authorization with additional details from the X.509 client certificate.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>CUSTOM_AUTH</code> - Use custom authentication and authorization. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/custom-authentication.html">Custom authentication and authorization</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>AWS_X509</code> - Use X.509 client certificates without custom authentication and authorization. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/x509-client-certs.html">X.509 client certificates</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>AWS_SIGV4</code> - Use Amazon Web Services Signature Version 4. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/custom-authentication.html">IAM users, groups, and roles</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>DEFAULT </code> - Use a combination of port and Application Layer Protocol Negotiation (ALPN) to specify authentication type. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/protocols.html">Device communication protocols</a>.</p></li>
    /// </ul>
    pub authentication_type: ::std::option::Option<crate::types::AuthenticationType>,
    /// <p>An enumerated string that speciﬁes the application-layer protocol.</p>
    /// <ul>
    /// <li>
    /// <p><code>SECURE_MQTT</code> - MQTT over TLS.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>MQTT_WSS</code> - MQTT over WebSocket.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>HTTPS</code> - HTTP over TLS.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>DEFAULT</code> - Use a combination of port and Application Layer Protocol Negotiation (ALPN) to specify application_layer protocol. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/protocols.html">Device communication protocols</a>.</p></li>
    /// </ul>
    pub application_protocol: ::std::option::Option<crate::types::ApplicationProtocol>,
    /// <p>An object that speciﬁes the client certificate conﬁguration for a domain.</p>
    pub client_certificate_config: ::std::option::Option<crate::types::ClientCertificateConfig>,
}
impl UpdateDomainConfigurationInput {
    /// <p>The name of the domain configuration to be updated.</p>
    pub fn domain_configuration_name(&self) -> ::std::option::Option<&str> {
        self.domain_configuration_name.as_deref()
    }
    /// <p>An object that specifies the authorization service for a domain.</p>
    pub fn authorizer_config(&self) -> ::std::option::Option<&crate::types::AuthorizerConfig> {
        self.authorizer_config.as_ref()
    }
    /// <p>The status to which the domain configuration should be updated.</p>
    pub fn domain_configuration_status(&self) -> ::std::option::Option<&crate::types::DomainConfigurationStatus> {
        self.domain_configuration_status.as_ref()
    }
    /// <p>Removes the authorization configuration from a domain.</p>
    pub fn remove_authorizer_config(&self) -> ::std::option::Option<bool> {
        self.remove_authorizer_config
    }
    /// <p>An object that specifies the TLS configuration for a domain.</p>
    pub fn tls_config(&self) -> ::std::option::Option<&crate::types::TlsConfig> {
        self.tls_config.as_ref()
    }
    /// <p>The server certificate configuration.</p>
    pub fn server_certificate_config(&self) -> ::std::option::Option<&crate::types::ServerCertificateConfig> {
        self.server_certificate_config.as_ref()
    }
    /// <p>An enumerated string that speciﬁes the authentication type.</p>
    /// <ul>
    /// <li>
    /// <p><code>CUSTOM_AUTH_X509</code> - Use custom authentication and authorization with additional details from the X.509 client certificate.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>CUSTOM_AUTH</code> - Use custom authentication and authorization. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/custom-authentication.html">Custom authentication and authorization</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>AWS_X509</code> - Use X.509 client certificates without custom authentication and authorization. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/x509-client-certs.html">X.509 client certificates</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>AWS_SIGV4</code> - Use Amazon Web Services Signature Version 4. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/custom-authentication.html">IAM users, groups, and roles</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>DEFAULT </code> - Use a combination of port and Application Layer Protocol Negotiation (ALPN) to specify authentication type. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/protocols.html">Device communication protocols</a>.</p></li>
    /// </ul>
    pub fn authentication_type(&self) -> ::std::option::Option<&crate::types::AuthenticationType> {
        self.authentication_type.as_ref()
    }
    /// <p>An enumerated string that speciﬁes the application-layer protocol.</p>
    /// <ul>
    /// <li>
    /// <p><code>SECURE_MQTT</code> - MQTT over TLS.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>MQTT_WSS</code> - MQTT over WebSocket.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>HTTPS</code> - HTTP over TLS.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>DEFAULT</code> - Use a combination of port and Application Layer Protocol Negotiation (ALPN) to specify application_layer protocol. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/protocols.html">Device communication protocols</a>.</p></li>
    /// </ul>
    pub fn application_protocol(&self) -> ::std::option::Option<&crate::types::ApplicationProtocol> {
        self.application_protocol.as_ref()
    }
    /// <p>An object that speciﬁes the client certificate conﬁguration for a domain.</p>
    pub fn client_certificate_config(&self) -> ::std::option::Option<&crate::types::ClientCertificateConfig> {
        self.client_certificate_config.as_ref()
    }
}
impl UpdateDomainConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateDomainConfigurationInput`](crate::operation::update_domain_configuration::UpdateDomainConfigurationInput).
    pub fn builder() -> crate::operation::update_domain_configuration::builders::UpdateDomainConfigurationInputBuilder {
        crate::operation::update_domain_configuration::builders::UpdateDomainConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateDomainConfigurationInput`](crate::operation::update_domain_configuration::UpdateDomainConfigurationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateDomainConfigurationInputBuilder {
    pub(crate) domain_configuration_name: ::std::option::Option<::std::string::String>,
    pub(crate) authorizer_config: ::std::option::Option<crate::types::AuthorizerConfig>,
    pub(crate) domain_configuration_status: ::std::option::Option<crate::types::DomainConfigurationStatus>,
    pub(crate) remove_authorizer_config: ::std::option::Option<bool>,
    pub(crate) tls_config: ::std::option::Option<crate::types::TlsConfig>,
    pub(crate) server_certificate_config: ::std::option::Option<crate::types::ServerCertificateConfig>,
    pub(crate) authentication_type: ::std::option::Option<crate::types::AuthenticationType>,
    pub(crate) application_protocol: ::std::option::Option<crate::types::ApplicationProtocol>,
    pub(crate) client_certificate_config: ::std::option::Option<crate::types::ClientCertificateConfig>,
}
impl UpdateDomainConfigurationInputBuilder {
    /// <p>The name of the domain configuration to be updated.</p>
    /// This field is required.
    pub fn domain_configuration_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_configuration_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the domain configuration to be updated.</p>
    pub fn set_domain_configuration_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_configuration_name = input;
        self
    }
    /// <p>The name of the domain configuration to be updated.</p>
    pub fn get_domain_configuration_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_configuration_name
    }
    /// <p>An object that specifies the authorization service for a domain.</p>
    pub fn authorizer_config(mut self, input: crate::types::AuthorizerConfig) -> Self {
        self.authorizer_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that specifies the authorization service for a domain.</p>
    pub fn set_authorizer_config(mut self, input: ::std::option::Option<crate::types::AuthorizerConfig>) -> Self {
        self.authorizer_config = input;
        self
    }
    /// <p>An object that specifies the authorization service for a domain.</p>
    pub fn get_authorizer_config(&self) -> &::std::option::Option<crate::types::AuthorizerConfig> {
        &self.authorizer_config
    }
    /// <p>The status to which the domain configuration should be updated.</p>
    pub fn domain_configuration_status(mut self, input: crate::types::DomainConfigurationStatus) -> Self {
        self.domain_configuration_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status to which the domain configuration should be updated.</p>
    pub fn set_domain_configuration_status(mut self, input: ::std::option::Option<crate::types::DomainConfigurationStatus>) -> Self {
        self.domain_configuration_status = input;
        self
    }
    /// <p>The status to which the domain configuration should be updated.</p>
    pub fn get_domain_configuration_status(&self) -> &::std::option::Option<crate::types::DomainConfigurationStatus> {
        &self.domain_configuration_status
    }
    /// <p>Removes the authorization configuration from a domain.</p>
    pub fn remove_authorizer_config(mut self, input: bool) -> Self {
        self.remove_authorizer_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Removes the authorization configuration from a domain.</p>
    pub fn set_remove_authorizer_config(mut self, input: ::std::option::Option<bool>) -> Self {
        self.remove_authorizer_config = input;
        self
    }
    /// <p>Removes the authorization configuration from a domain.</p>
    pub fn get_remove_authorizer_config(&self) -> &::std::option::Option<bool> {
        &self.remove_authorizer_config
    }
    /// <p>An object that specifies the TLS configuration for a domain.</p>
    pub fn tls_config(mut self, input: crate::types::TlsConfig) -> Self {
        self.tls_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that specifies the TLS configuration for a domain.</p>
    pub fn set_tls_config(mut self, input: ::std::option::Option<crate::types::TlsConfig>) -> Self {
        self.tls_config = input;
        self
    }
    /// <p>An object that specifies the TLS configuration for a domain.</p>
    pub fn get_tls_config(&self) -> &::std::option::Option<crate::types::TlsConfig> {
        &self.tls_config
    }
    /// <p>The server certificate configuration.</p>
    pub fn server_certificate_config(mut self, input: crate::types::ServerCertificateConfig) -> Self {
        self.server_certificate_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The server certificate configuration.</p>
    pub fn set_server_certificate_config(mut self, input: ::std::option::Option<crate::types::ServerCertificateConfig>) -> Self {
        self.server_certificate_config = input;
        self
    }
    /// <p>The server certificate configuration.</p>
    pub fn get_server_certificate_config(&self) -> &::std::option::Option<crate::types::ServerCertificateConfig> {
        &self.server_certificate_config
    }
    /// <p>An enumerated string that speciﬁes the authentication type.</p>
    /// <ul>
    /// <li>
    /// <p><code>CUSTOM_AUTH_X509</code> - Use custom authentication and authorization with additional details from the X.509 client certificate.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>CUSTOM_AUTH</code> - Use custom authentication and authorization. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/custom-authentication.html">Custom authentication and authorization</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>AWS_X509</code> - Use X.509 client certificates without custom authentication and authorization. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/x509-client-certs.html">X.509 client certificates</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>AWS_SIGV4</code> - Use Amazon Web Services Signature Version 4. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/custom-authentication.html">IAM users, groups, and roles</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>DEFAULT </code> - Use a combination of port and Application Layer Protocol Negotiation (ALPN) to specify authentication type. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/protocols.html">Device communication protocols</a>.</p></li>
    /// </ul>
    pub fn authentication_type(mut self, input: crate::types::AuthenticationType) -> Self {
        self.authentication_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>An enumerated string that speciﬁes the authentication type.</p>
    /// <ul>
    /// <li>
    /// <p><code>CUSTOM_AUTH_X509</code> - Use custom authentication and authorization with additional details from the X.509 client certificate.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>CUSTOM_AUTH</code> - Use custom authentication and authorization. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/custom-authentication.html">Custom authentication and authorization</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>AWS_X509</code> - Use X.509 client certificates without custom authentication and authorization. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/x509-client-certs.html">X.509 client certificates</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>AWS_SIGV4</code> - Use Amazon Web Services Signature Version 4. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/custom-authentication.html">IAM users, groups, and roles</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>DEFAULT </code> - Use a combination of port and Application Layer Protocol Negotiation (ALPN) to specify authentication type. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/protocols.html">Device communication protocols</a>.</p></li>
    /// </ul>
    pub fn set_authentication_type(mut self, input: ::std::option::Option<crate::types::AuthenticationType>) -> Self {
        self.authentication_type = input;
        self
    }
    /// <p>An enumerated string that speciﬁes the authentication type.</p>
    /// <ul>
    /// <li>
    /// <p><code>CUSTOM_AUTH_X509</code> - Use custom authentication and authorization with additional details from the X.509 client certificate.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>CUSTOM_AUTH</code> - Use custom authentication and authorization. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/custom-authentication.html">Custom authentication and authorization</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>AWS_X509</code> - Use X.509 client certificates without custom authentication and authorization. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/x509-client-certs.html">X.509 client certificates</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>AWS_SIGV4</code> - Use Amazon Web Services Signature Version 4. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/custom-authentication.html">IAM users, groups, and roles</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>DEFAULT </code> - Use a combination of port and Application Layer Protocol Negotiation (ALPN) to specify authentication type. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/protocols.html">Device communication protocols</a>.</p></li>
    /// </ul>
    pub fn get_authentication_type(&self) -> &::std::option::Option<crate::types::AuthenticationType> {
        &self.authentication_type
    }
    /// <p>An enumerated string that speciﬁes the application-layer protocol.</p>
    /// <ul>
    /// <li>
    /// <p><code>SECURE_MQTT</code> - MQTT over TLS.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>MQTT_WSS</code> - MQTT over WebSocket.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>HTTPS</code> - HTTP over TLS.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>DEFAULT</code> - Use a combination of port and Application Layer Protocol Negotiation (ALPN) to specify application_layer protocol. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/protocols.html">Device communication protocols</a>.</p></li>
    /// </ul>
    pub fn application_protocol(mut self, input: crate::types::ApplicationProtocol) -> Self {
        self.application_protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>An enumerated string that speciﬁes the application-layer protocol.</p>
    /// <ul>
    /// <li>
    /// <p><code>SECURE_MQTT</code> - MQTT over TLS.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>MQTT_WSS</code> - MQTT over WebSocket.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>HTTPS</code> - HTTP over TLS.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>DEFAULT</code> - Use a combination of port and Application Layer Protocol Negotiation (ALPN) to specify application_layer protocol. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/protocols.html">Device communication protocols</a>.</p></li>
    /// </ul>
    pub fn set_application_protocol(mut self, input: ::std::option::Option<crate::types::ApplicationProtocol>) -> Self {
        self.application_protocol = input;
        self
    }
    /// <p>An enumerated string that speciﬁes the application-layer protocol.</p>
    /// <ul>
    /// <li>
    /// <p><code>SECURE_MQTT</code> - MQTT over TLS.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>MQTT_WSS</code> - MQTT over WebSocket.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>HTTPS</code> - HTTP over TLS.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>DEFAULT</code> - Use a combination of port and Application Layer Protocol Negotiation (ALPN) to specify application_layer protocol. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/protocols.html">Device communication protocols</a>.</p></li>
    /// </ul>
    pub fn get_application_protocol(&self) -> &::std::option::Option<crate::types::ApplicationProtocol> {
        &self.application_protocol
    }
    /// <p>An object that speciﬁes the client certificate conﬁguration for a domain.</p>
    pub fn client_certificate_config(mut self, input: crate::types::ClientCertificateConfig) -> Self {
        self.client_certificate_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that speciﬁes the client certificate conﬁguration for a domain.</p>
    pub fn set_client_certificate_config(mut self, input: ::std::option::Option<crate::types::ClientCertificateConfig>) -> Self {
        self.client_certificate_config = input;
        self
    }
    /// <p>An object that speciﬁes the client certificate conﬁguration for a domain.</p>
    pub fn get_client_certificate_config(&self) -> &::std::option::Option<crate::types::ClientCertificateConfig> {
        &self.client_certificate_config
    }
    /// Consumes the builder and constructs a [`UpdateDomainConfigurationInput`](crate::operation::update_domain_configuration::UpdateDomainConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_domain_configuration::UpdateDomainConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_domain_configuration::UpdateDomainConfigurationInput {
            domain_configuration_name: self.domain_configuration_name,
            authorizer_config: self.authorizer_config,
            domain_configuration_status: self.domain_configuration_status,
            remove_authorizer_config: self.remove_authorizer_config,
            tls_config: self.tls_config,
            server_certificate_config: self.server_certificate_config,
            authentication_type: self.authentication_type,
            application_protocol: self.application_protocol,
            client_certificate_config: self.client_certificate_config,
        })
    }
}
