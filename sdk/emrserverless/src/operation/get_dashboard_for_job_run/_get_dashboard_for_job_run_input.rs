// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDashboardForJobRunInput {
    /// <p>The ID of the application.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the job run.</p>
    pub job_run_id: ::std::option::Option<::std::string::String>,
    /// <p>An optimal parameter that indicates the amount of attempts for the job. If not specified, this value defaults to the attempt of the latest job.</p>
    pub attempt: ::std::option::Option<i32>,
    /// <p>Allows access to system profile logs for Lake Formation-enabled jobs. Default is false.</p>
    pub access_system_profile_logs: ::std::option::Option<bool>,
}
impl GetDashboardForJobRunInput {
    /// <p>The ID of the application.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The ID of the job run.</p>
    pub fn job_run_id(&self) -> ::std::option::Option<&str> {
        self.job_run_id.as_deref()
    }
    /// <p>An optimal parameter that indicates the amount of attempts for the job. If not specified, this value defaults to the attempt of the latest job.</p>
    pub fn attempt(&self) -> ::std::option::Option<i32> {
        self.attempt
    }
    /// <p>Allows access to system profile logs for Lake Formation-enabled jobs. Default is false.</p>
    pub fn access_system_profile_logs(&self) -> ::std::option::Option<bool> {
        self.access_system_profile_logs
    }
}
impl GetDashboardForJobRunInput {
    /// Creates a new builder-style object to manufacture [`GetDashboardForJobRunInput`](crate::operation::get_dashboard_for_job_run::GetDashboardForJobRunInput).
    pub fn builder() -> crate::operation::get_dashboard_for_job_run::builders::GetDashboardForJobRunInputBuilder {
        crate::operation::get_dashboard_for_job_run::builders::GetDashboardForJobRunInputBuilder::default()
    }
}

/// A builder for [`GetDashboardForJobRunInput`](crate::operation::get_dashboard_for_job_run::GetDashboardForJobRunInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetDashboardForJobRunInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) job_run_id: ::std::option::Option<::std::string::String>,
    pub(crate) attempt: ::std::option::Option<i32>,
    pub(crate) access_system_profile_logs: ::std::option::Option<bool>,
}
impl GetDashboardForJobRunInputBuilder {
    /// <p>The ID of the application.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the application.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The ID of the application.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The ID of the job run.</p>
    /// This field is required.
    pub fn job_run_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_run_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the job run.</p>
    pub fn set_job_run_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_run_id = input;
        self
    }
    /// <p>The ID of the job run.</p>
    pub fn get_job_run_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_run_id
    }
    /// <p>An optimal parameter that indicates the amount of attempts for the job. If not specified, this value defaults to the attempt of the latest job.</p>
    pub fn attempt(mut self, input: i32) -> Self {
        self.attempt = ::std::option::Option::Some(input);
        self
    }
    /// <p>An optimal parameter that indicates the amount of attempts for the job. If not specified, this value defaults to the attempt of the latest job.</p>
    pub fn set_attempt(mut self, input: ::std::option::Option<i32>) -> Self {
        self.attempt = input;
        self
    }
    /// <p>An optimal parameter that indicates the amount of attempts for the job. If not specified, this value defaults to the attempt of the latest job.</p>
    pub fn get_attempt(&self) -> &::std::option::Option<i32> {
        &self.attempt
    }
    /// <p>Allows access to system profile logs for Lake Formation-enabled jobs. Default is false.</p>
    pub fn access_system_profile_logs(mut self, input: bool) -> Self {
        self.access_system_profile_logs = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allows access to system profile logs for Lake Formation-enabled jobs. Default is false.</p>
    pub fn set_access_system_profile_logs(mut self, input: ::std::option::Option<bool>) -> Self {
        self.access_system_profile_logs = input;
        self
    }
    /// <p>Allows access to system profile logs for Lake Formation-enabled jobs. Default is false.</p>
    pub fn get_access_system_profile_logs(&self) -> &::std::option::Option<bool> {
        &self.access_system_profile_logs
    }
    /// Consumes the builder and constructs a [`GetDashboardForJobRunInput`](crate::operation::get_dashboard_for_job_run::GetDashboardForJobRunInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_dashboard_for_job_run::GetDashboardForJobRunInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_dashboard_for_job_run::GetDashboardForJobRunInput {
            application_id: self.application_id,
            job_run_id: self.job_run_id,
            attempt: self.attempt,
            access_system_profile_logs: self.access_system_profile_logs,
        })
    }
}
