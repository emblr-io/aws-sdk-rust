// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The retry policy to use for a job run.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RetryPolicy {
    /// <p>Maximum number of attempts for the job run. This parameter is only applicable for <code>BATCH</code> mode.</p>
    pub max_attempts: ::std::option::Option<i32>,
    /// <p>Maximum number of failed attempts per hour. This \[arameter is only applicable for STREAMING mode.</p>
    pub max_failed_attempts_per_hour: ::std::option::Option<i32>,
}
impl RetryPolicy {
    /// <p>Maximum number of attempts for the job run. This parameter is only applicable for <code>BATCH</code> mode.</p>
    pub fn max_attempts(&self) -> ::std::option::Option<i32> {
        self.max_attempts
    }
    /// <p>Maximum number of failed attempts per hour. This \[arameter is only applicable for STREAMING mode.</p>
    pub fn max_failed_attempts_per_hour(&self) -> ::std::option::Option<i32> {
        self.max_failed_attempts_per_hour
    }
}
impl RetryPolicy {
    /// Creates a new builder-style object to manufacture [`RetryPolicy`](crate::types::RetryPolicy).
    pub fn builder() -> crate::types::builders::RetryPolicyBuilder {
        crate::types::builders::RetryPolicyBuilder::default()
    }
}

/// A builder for [`RetryPolicy`](crate::types::RetryPolicy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RetryPolicyBuilder {
    pub(crate) max_attempts: ::std::option::Option<i32>,
    pub(crate) max_failed_attempts_per_hour: ::std::option::Option<i32>,
}
impl RetryPolicyBuilder {
    /// <p>Maximum number of attempts for the job run. This parameter is only applicable for <code>BATCH</code> mode.</p>
    pub fn max_attempts(mut self, input: i32) -> Self {
        self.max_attempts = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maximum number of attempts for the job run. This parameter is only applicable for <code>BATCH</code> mode.</p>
    pub fn set_max_attempts(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_attempts = input;
        self
    }
    /// <p>Maximum number of attempts for the job run. This parameter is only applicable for <code>BATCH</code> mode.</p>
    pub fn get_max_attempts(&self) -> &::std::option::Option<i32> {
        &self.max_attempts
    }
    /// <p>Maximum number of failed attempts per hour. This \[arameter is only applicable for STREAMING mode.</p>
    pub fn max_failed_attempts_per_hour(mut self, input: i32) -> Self {
        self.max_failed_attempts_per_hour = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maximum number of failed attempts per hour. This \[arameter is only applicable for STREAMING mode.</p>
    pub fn set_max_failed_attempts_per_hour(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_failed_attempts_per_hour = input;
        self
    }
    /// <p>Maximum number of failed attempts per hour. This \[arameter is only applicable for STREAMING mode.</p>
    pub fn get_max_failed_attempts_per_hour(&self) -> &::std::option::Option<i32> {
        &self.max_failed_attempts_per_hour
    }
    /// Consumes the builder and constructs a [`RetryPolicy`](crate::types::RetryPolicy).
    pub fn build(self) -> crate::types::RetryPolicy {
        crate::types::RetryPolicy {
            max_attempts: self.max_attempts,
            max_failed_attempts_per_hour: self.max_failed_attempts_per_hour,
        }
    }
}
