// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Optional IAM policy. The resulting job IAM role permissions will be an intersection of the policies passed and the policy associated with your job execution role.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JobRunExecutionIamPolicy {
    /// <p>An IAM inline policy to use as an execution IAM policy.</p>
    pub policy: ::std::option::Option<::std::string::String>,
    /// <p>A list of Amazon Resource Names (ARNs) to use as an execution IAM policy.</p>
    pub policy_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl JobRunExecutionIamPolicy {
    /// <p>An IAM inline policy to use as an execution IAM policy.</p>
    pub fn policy(&self) -> ::std::option::Option<&str> {
        self.policy.as_deref()
    }
    /// <p>A list of Amazon Resource Names (ARNs) to use as an execution IAM policy.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.policy_arns.is_none()`.
    pub fn policy_arns(&self) -> &[::std::string::String] {
        self.policy_arns.as_deref().unwrap_or_default()
    }
}
impl JobRunExecutionIamPolicy {
    /// Creates a new builder-style object to manufacture [`JobRunExecutionIamPolicy`](crate::types::JobRunExecutionIamPolicy).
    pub fn builder() -> crate::types::builders::JobRunExecutionIamPolicyBuilder {
        crate::types::builders::JobRunExecutionIamPolicyBuilder::default()
    }
}

/// A builder for [`JobRunExecutionIamPolicy`](crate::types::JobRunExecutionIamPolicy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct JobRunExecutionIamPolicyBuilder {
    pub(crate) policy: ::std::option::Option<::std::string::String>,
    pub(crate) policy_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl JobRunExecutionIamPolicyBuilder {
    /// <p>An IAM inline policy to use as an execution IAM policy.</p>
    pub fn policy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An IAM inline policy to use as an execution IAM policy.</p>
    pub fn set_policy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy = input;
        self
    }
    /// <p>An IAM inline policy to use as an execution IAM policy.</p>
    pub fn get_policy(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy
    }
    /// Appends an item to `policy_arns`.
    ///
    /// To override the contents of this collection use [`set_policy_arns`](Self::set_policy_arns).
    ///
    /// <p>A list of Amazon Resource Names (ARNs) to use as an execution IAM policy.</p>
    pub fn policy_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.policy_arns.unwrap_or_default();
        v.push(input.into());
        self.policy_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Amazon Resource Names (ARNs) to use as an execution IAM policy.</p>
    pub fn set_policy_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.policy_arns = input;
        self
    }
    /// <p>A list of Amazon Resource Names (ARNs) to use as an execution IAM policy.</p>
    pub fn get_policy_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.policy_arns
    }
    /// Consumes the builder and constructs a [`JobRunExecutionIamPolicy`](crate::types::JobRunExecutionIamPolicy).
    pub fn build(self) -> crate::types::JobRunExecutionIamPolicy {
        crate::types::JobRunExecutionIamPolicy {
            policy: self.policy,
            policy_arns: self.policy_arns,
        }
    }
}
