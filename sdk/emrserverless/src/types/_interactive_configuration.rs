// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration to use to enable the different types of interactive use cases in an application.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InteractiveConfiguration {
    /// <p>Enables you to connect an application to Amazon EMR Studio to run interactive workloads in a notebook.</p>
    pub studio_enabled: ::std::option::Option<bool>,
    /// <p>Enables an Apache Livy endpoint that you can connect to and run interactive jobs.</p>
    pub livy_endpoint_enabled: ::std::option::Option<bool>,
}
impl InteractiveConfiguration {
    /// <p>Enables you to connect an application to Amazon EMR Studio to run interactive workloads in a notebook.</p>
    pub fn studio_enabled(&self) -> ::std::option::Option<bool> {
        self.studio_enabled
    }
    /// <p>Enables an Apache Livy endpoint that you can connect to and run interactive jobs.</p>
    pub fn livy_endpoint_enabled(&self) -> ::std::option::Option<bool> {
        self.livy_endpoint_enabled
    }
}
impl InteractiveConfiguration {
    /// Creates a new builder-style object to manufacture [`InteractiveConfiguration`](crate::types::InteractiveConfiguration).
    pub fn builder() -> crate::types::builders::InteractiveConfigurationBuilder {
        crate::types::builders::InteractiveConfigurationBuilder::default()
    }
}

/// A builder for [`InteractiveConfiguration`](crate::types::InteractiveConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InteractiveConfigurationBuilder {
    pub(crate) studio_enabled: ::std::option::Option<bool>,
    pub(crate) livy_endpoint_enabled: ::std::option::Option<bool>,
}
impl InteractiveConfigurationBuilder {
    /// <p>Enables you to connect an application to Amazon EMR Studio to run interactive workloads in a notebook.</p>
    pub fn studio_enabled(mut self, input: bool) -> Self {
        self.studio_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables you to connect an application to Amazon EMR Studio to run interactive workloads in a notebook.</p>
    pub fn set_studio_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.studio_enabled = input;
        self
    }
    /// <p>Enables you to connect an application to Amazon EMR Studio to run interactive workloads in a notebook.</p>
    pub fn get_studio_enabled(&self) -> &::std::option::Option<bool> {
        &self.studio_enabled
    }
    /// <p>Enables an Apache Livy endpoint that you can connect to and run interactive jobs.</p>
    pub fn livy_endpoint_enabled(mut self, input: bool) -> Self {
        self.livy_endpoint_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables an Apache Livy endpoint that you can connect to and run interactive jobs.</p>
    pub fn set_livy_endpoint_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.livy_endpoint_enabled = input;
        self
    }
    /// <p>Enables an Apache Livy endpoint that you can connect to and run interactive jobs.</p>
    pub fn get_livy_endpoint_enabled(&self) -> &::std::option::Option<bool> {
        &self.livy_endpoint_enabled
    }
    /// Consumes the builder and constructs a [`InteractiveConfiguration`](crate::types::InteractiveConfiguration).
    pub fn build(self) -> crate::types::InteractiveConfiguration {
        crate::types::InteractiveConfiguration {
            studio_enabled: self.studio_enabled,
            livy_endpoint_enabled: self.livy_endpoint_enabled,
        }
    }
}
