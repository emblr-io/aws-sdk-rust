// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metrics configuration for your event source. Use this configuration object to define which metrics you want your event source mapping to produce.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EventSourceMappingMetricsConfig {
    /// <p>The metrics you want your event source mapping to produce. Include <code>EventCount</code> to receive event source mapping metrics related to the number of events processed by your event source mapping. For more information about these metrics, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/monitoring-metrics-types.html#event-source-mapping-metrics"> Event source mapping metrics</a>.</p>
    pub metrics: ::std::option::Option<::std::vec::Vec<crate::types::EventSourceMappingMetric>>,
}
impl EventSourceMappingMetricsConfig {
    /// <p>The metrics you want your event source mapping to produce. Include <code>EventCount</code> to receive event source mapping metrics related to the number of events processed by your event source mapping. For more information about these metrics, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/monitoring-metrics-types.html#event-source-mapping-metrics"> Event source mapping metrics</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metrics.is_none()`.
    pub fn metrics(&self) -> &[crate::types::EventSourceMappingMetric] {
        self.metrics.as_deref().unwrap_or_default()
    }
}
impl EventSourceMappingMetricsConfig {
    /// Creates a new builder-style object to manufacture [`EventSourceMappingMetricsConfig`](crate::types::EventSourceMappingMetricsConfig).
    pub fn builder() -> crate::types::builders::EventSourceMappingMetricsConfigBuilder {
        crate::types::builders::EventSourceMappingMetricsConfigBuilder::default()
    }
}

/// A builder for [`EventSourceMappingMetricsConfig`](crate::types::EventSourceMappingMetricsConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EventSourceMappingMetricsConfigBuilder {
    pub(crate) metrics: ::std::option::Option<::std::vec::Vec<crate::types::EventSourceMappingMetric>>,
}
impl EventSourceMappingMetricsConfigBuilder {
    /// Appends an item to `metrics`.
    ///
    /// To override the contents of this collection use [`set_metrics`](Self::set_metrics).
    ///
    /// <p>The metrics you want your event source mapping to produce. Include <code>EventCount</code> to receive event source mapping metrics related to the number of events processed by your event source mapping. For more information about these metrics, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/monitoring-metrics-types.html#event-source-mapping-metrics"> Event source mapping metrics</a>.</p>
    pub fn metrics(mut self, input: crate::types::EventSourceMappingMetric) -> Self {
        let mut v = self.metrics.unwrap_or_default();
        v.push(input);
        self.metrics = ::std::option::Option::Some(v);
        self
    }
    /// <p>The metrics you want your event source mapping to produce. Include <code>EventCount</code> to receive event source mapping metrics related to the number of events processed by your event source mapping. For more information about these metrics, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/monitoring-metrics-types.html#event-source-mapping-metrics"> Event source mapping metrics</a>.</p>
    pub fn set_metrics(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EventSourceMappingMetric>>) -> Self {
        self.metrics = input;
        self
    }
    /// <p>The metrics you want your event source mapping to produce. Include <code>EventCount</code> to receive event source mapping metrics related to the number of events processed by your event source mapping. For more information about these metrics, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/monitoring-metrics-types.html#event-source-mapping-metrics"> Event source mapping metrics</a>.</p>
    pub fn get_metrics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EventSourceMappingMetric>> {
        &self.metrics
    }
    /// Consumes the builder and constructs a [`EventSourceMappingMetricsConfig`](crate::types::EventSourceMappingMetricsConfig).
    pub fn build(self) -> crate::types::EventSourceMappingMetricsConfig {
        crate::types::EventSourceMappingMetricsConfig { metrics: self.metrics }
    }
}
