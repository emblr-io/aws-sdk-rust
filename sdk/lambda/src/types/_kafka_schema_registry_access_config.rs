// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specific access configuration settings that tell Lambda how to authenticate with your schema registry.</p>
/// <p>If you're working with an Glue schema registry, don't provide authentication details in this object. Instead, ensure that your execution role has the required permissions for Lambda to access your cluster.</p>
/// <p>If you're working with a Confluent schema registry, choose the authentication method in the <code>Type</code> field, and provide the Secrets Manager secret ARN in the <code>URI</code> field.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KafkaSchemaRegistryAccessConfig {
    /// <p>The type of authentication Lambda uses to access your schema registry.</p>
    pub r#type: ::std::option::Option<crate::types::KafkaSchemaRegistryAuthType>,
    /// <p>The URI of the secret (Secrets Manager secret ARN) to authenticate with your schema registry.</p>
    pub uri: ::std::option::Option<::std::string::String>,
}
impl KafkaSchemaRegistryAccessConfig {
    /// <p>The type of authentication Lambda uses to access your schema registry.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::KafkaSchemaRegistryAuthType> {
        self.r#type.as_ref()
    }
    /// <p>The URI of the secret (Secrets Manager secret ARN) to authenticate with your schema registry.</p>
    pub fn uri(&self) -> ::std::option::Option<&str> {
        self.uri.as_deref()
    }
}
impl KafkaSchemaRegistryAccessConfig {
    /// Creates a new builder-style object to manufacture [`KafkaSchemaRegistryAccessConfig`](crate::types::KafkaSchemaRegistryAccessConfig).
    pub fn builder() -> crate::types::builders::KafkaSchemaRegistryAccessConfigBuilder {
        crate::types::builders::KafkaSchemaRegistryAccessConfigBuilder::default()
    }
}

/// A builder for [`KafkaSchemaRegistryAccessConfig`](crate::types::KafkaSchemaRegistryAccessConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct KafkaSchemaRegistryAccessConfigBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::KafkaSchemaRegistryAuthType>,
    pub(crate) uri: ::std::option::Option<::std::string::String>,
}
impl KafkaSchemaRegistryAccessConfigBuilder {
    /// <p>The type of authentication Lambda uses to access your schema registry.</p>
    pub fn r#type(mut self, input: crate::types::KafkaSchemaRegistryAuthType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of authentication Lambda uses to access your schema registry.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::KafkaSchemaRegistryAuthType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of authentication Lambda uses to access your schema registry.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::KafkaSchemaRegistryAuthType> {
        &self.r#type
    }
    /// <p>The URI of the secret (Secrets Manager secret ARN) to authenticate with your schema registry.</p>
    pub fn uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URI of the secret (Secrets Manager secret ARN) to authenticate with your schema registry.</p>
    pub fn set_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.uri = input;
        self
    }
    /// <p>The URI of the secret (Secrets Manager secret ARN) to authenticate with your schema registry.</p>
    pub fn get_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.uri
    }
    /// Consumes the builder and constructs a [`KafkaSchemaRegistryAccessConfig`](crate::types::KafkaSchemaRegistryAccessConfig).
    pub fn build(self) -> crate::types::KafkaSchemaRegistryAccessConfig {
        crate::types::KafkaSchemaRegistryAccessConfig {
            r#type: self.r#type,
            uri: self.uri,
        }
    }
}
