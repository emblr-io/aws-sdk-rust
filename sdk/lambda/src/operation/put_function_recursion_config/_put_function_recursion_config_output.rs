// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutFunctionRecursionConfigOutput {
    /// <p>The status of your function's recursive loop detection configuration.</p>
    /// <p>When this value is set to <code>Allow</code>and Lambda detects your function being invoked as part of a recursive loop, it doesn't take any action.</p>
    /// <p>When this value is set to <code>Terminate</code> and Lambda detects your function being invoked as part of a recursive loop, it stops your function being invoked and notifies you.</p>
    pub recursive_loop: ::std::option::Option<crate::types::RecursiveLoop>,
    _request_id: Option<String>,
}
impl PutFunctionRecursionConfigOutput {
    /// <p>The status of your function's recursive loop detection configuration.</p>
    /// <p>When this value is set to <code>Allow</code>and Lambda detects your function being invoked as part of a recursive loop, it doesn't take any action.</p>
    /// <p>When this value is set to <code>Terminate</code> and Lambda detects your function being invoked as part of a recursive loop, it stops your function being invoked and notifies you.</p>
    pub fn recursive_loop(&self) -> ::std::option::Option<&crate::types::RecursiveLoop> {
        self.recursive_loop.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for PutFunctionRecursionConfigOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutFunctionRecursionConfigOutput {
    /// Creates a new builder-style object to manufacture [`PutFunctionRecursionConfigOutput`](crate::operation::put_function_recursion_config::PutFunctionRecursionConfigOutput).
    pub fn builder() -> crate::operation::put_function_recursion_config::builders::PutFunctionRecursionConfigOutputBuilder {
        crate::operation::put_function_recursion_config::builders::PutFunctionRecursionConfigOutputBuilder::default()
    }
}

/// A builder for [`PutFunctionRecursionConfigOutput`](crate::operation::put_function_recursion_config::PutFunctionRecursionConfigOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PutFunctionRecursionConfigOutputBuilder {
    pub(crate) recursive_loop: ::std::option::Option<crate::types::RecursiveLoop>,
    _request_id: Option<String>,
}
impl PutFunctionRecursionConfigOutputBuilder {
    /// <p>The status of your function's recursive loop detection configuration.</p>
    /// <p>When this value is set to <code>Allow</code>and Lambda detects your function being invoked as part of a recursive loop, it doesn't take any action.</p>
    /// <p>When this value is set to <code>Terminate</code> and Lambda detects your function being invoked as part of a recursive loop, it stops your function being invoked and notifies you.</p>
    pub fn recursive_loop(mut self, input: crate::types::RecursiveLoop) -> Self {
        self.recursive_loop = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of your function's recursive loop detection configuration.</p>
    /// <p>When this value is set to <code>Allow</code>and Lambda detects your function being invoked as part of a recursive loop, it doesn't take any action.</p>
    /// <p>When this value is set to <code>Terminate</code> and Lambda detects your function being invoked as part of a recursive loop, it stops your function being invoked and notifies you.</p>
    pub fn set_recursive_loop(mut self, input: ::std::option::Option<crate::types::RecursiveLoop>) -> Self {
        self.recursive_loop = input;
        self
    }
    /// <p>The status of your function's recursive loop detection configuration.</p>
    /// <p>When this value is set to <code>Allow</code>and Lambda detects your function being invoked as part of a recursive loop, it doesn't take any action.</p>
    /// <p>When this value is set to <code>Terminate</code> and Lambda detects your function being invoked as part of a recursive loop, it stops your function being invoked and notifies you.</p>
    pub fn get_recursive_loop(&self) -> &::std::option::Option<crate::types::RecursiveLoop> {
        &self.recursive_loop
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`PutFunctionRecursionConfigOutput`](crate::operation::put_function_recursion_config::PutFunctionRecursionConfigOutput).
    pub fn build(self) -> crate::operation::put_function_recursion_config::PutFunctionRecursionConfigOutput {
        crate::operation::put_function_recursion_config::PutFunctionRecursionConfigOutput {
            recursive_loop: self.recursive_loop,
            _request_id: self._request_id,
        }
    }
}
