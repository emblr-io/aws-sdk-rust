// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetFunctionRecursionConfigOutput {
    /// <p>If your function's recursive loop detection configuration is <code>Allow</code>, Lambda doesn't take any action when it detects your function being invoked as part of a recursive loop.</p>
    /// <p>If your function's recursive loop detection configuration is <code>Terminate</code>, Lambda stops your function being invoked and notifies you when it detects your function being invoked as part of a recursive loop.</p>
    /// <p>By default, Lambda sets your function's configuration to <code>Terminate</code>. You can update this configuration using the <code>PutFunctionRecursionConfig</code> action.</p>
    pub recursive_loop: ::std::option::Option<crate::types::RecursiveLoop>,
    _request_id: Option<String>,
}
impl GetFunctionRecursionConfigOutput {
    /// <p>If your function's recursive loop detection configuration is <code>Allow</code>, Lambda doesn't take any action when it detects your function being invoked as part of a recursive loop.</p>
    /// <p>If your function's recursive loop detection configuration is <code>Terminate</code>, Lambda stops your function being invoked and notifies you when it detects your function being invoked as part of a recursive loop.</p>
    /// <p>By default, Lambda sets your function's configuration to <code>Terminate</code>. You can update this configuration using the <code>PutFunctionRecursionConfig</code> action.</p>
    pub fn recursive_loop(&self) -> ::std::option::Option<&crate::types::RecursiveLoop> {
        self.recursive_loop.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetFunctionRecursionConfigOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetFunctionRecursionConfigOutput {
    /// Creates a new builder-style object to manufacture [`GetFunctionRecursionConfigOutput`](crate::operation::get_function_recursion_config::GetFunctionRecursionConfigOutput).
    pub fn builder() -> crate::operation::get_function_recursion_config::builders::GetFunctionRecursionConfigOutputBuilder {
        crate::operation::get_function_recursion_config::builders::GetFunctionRecursionConfigOutputBuilder::default()
    }
}

/// A builder for [`GetFunctionRecursionConfigOutput`](crate::operation::get_function_recursion_config::GetFunctionRecursionConfigOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetFunctionRecursionConfigOutputBuilder {
    pub(crate) recursive_loop: ::std::option::Option<crate::types::RecursiveLoop>,
    _request_id: Option<String>,
}
impl GetFunctionRecursionConfigOutputBuilder {
    /// <p>If your function's recursive loop detection configuration is <code>Allow</code>, Lambda doesn't take any action when it detects your function being invoked as part of a recursive loop.</p>
    /// <p>If your function's recursive loop detection configuration is <code>Terminate</code>, Lambda stops your function being invoked and notifies you when it detects your function being invoked as part of a recursive loop.</p>
    /// <p>By default, Lambda sets your function's configuration to <code>Terminate</code>. You can update this configuration using the <code>PutFunctionRecursionConfig</code> action.</p>
    pub fn recursive_loop(mut self, input: crate::types::RecursiveLoop) -> Self {
        self.recursive_loop = ::std::option::Option::Some(input);
        self
    }
    /// <p>If your function's recursive loop detection configuration is <code>Allow</code>, Lambda doesn't take any action when it detects your function being invoked as part of a recursive loop.</p>
    /// <p>If your function's recursive loop detection configuration is <code>Terminate</code>, Lambda stops your function being invoked and notifies you when it detects your function being invoked as part of a recursive loop.</p>
    /// <p>By default, Lambda sets your function's configuration to <code>Terminate</code>. You can update this configuration using the <code>PutFunctionRecursionConfig</code> action.</p>
    pub fn set_recursive_loop(mut self, input: ::std::option::Option<crate::types::RecursiveLoop>) -> Self {
        self.recursive_loop = input;
        self
    }
    /// <p>If your function's recursive loop detection configuration is <code>Allow</code>, Lambda doesn't take any action when it detects your function being invoked as part of a recursive loop.</p>
    /// <p>If your function's recursive loop detection configuration is <code>Terminate</code>, Lambda stops your function being invoked and notifies you when it detects your function being invoked as part of a recursive loop.</p>
    /// <p>By default, Lambda sets your function's configuration to <code>Terminate</code>. You can update this configuration using the <code>PutFunctionRecursionConfig</code> action.</p>
    pub fn get_recursive_loop(&self) -> &::std::option::Option<crate::types::RecursiveLoop> {
        &self.recursive_loop
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetFunctionRecursionConfigOutput`](crate::operation::get_function_recursion_config::GetFunctionRecursionConfigOutput).
    pub fn build(self) -> crate::operation::get_function_recursion_config::GetFunctionRecursionConfigOutput {
        crate::operation::get_function_recursion_config::GetFunctionRecursionConfigOutput {
            recursive_loop: self.recursive_loop,
            _request_id: self._request_id,
        }
    }
}
