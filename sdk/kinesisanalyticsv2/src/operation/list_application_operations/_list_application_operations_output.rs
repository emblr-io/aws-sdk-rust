// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Response with the list of operations for an application
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListApplicationOperationsOutput {
    /// List of ApplicationOperationInfo for an application
    pub application_operation_info_list: ::std::option::Option<::std::vec::Vec<crate::types::ApplicationOperationInfo>>,
    /// If a previous command returned a pagination token, pass it into this value to retrieve the next set of results
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListApplicationOperationsOutput {
    /// List of ApplicationOperationInfo for an application
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.application_operation_info_list.is_none()`.
    pub fn application_operation_info_list(&self) -> &[crate::types::ApplicationOperationInfo] {
        self.application_operation_info_list.as_deref().unwrap_or_default()
    }
    /// If a previous command returned a pagination token, pass it into this value to retrieve the next set of results
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListApplicationOperationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListApplicationOperationsOutput {
    /// Creates a new builder-style object to manufacture [`ListApplicationOperationsOutput`](crate::operation::list_application_operations::ListApplicationOperationsOutput).
    pub fn builder() -> crate::operation::list_application_operations::builders::ListApplicationOperationsOutputBuilder {
        crate::operation::list_application_operations::builders::ListApplicationOperationsOutputBuilder::default()
    }
}

/// A builder for [`ListApplicationOperationsOutput`](crate::operation::list_application_operations::ListApplicationOperationsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListApplicationOperationsOutputBuilder {
    pub(crate) application_operation_info_list: ::std::option::Option<::std::vec::Vec<crate::types::ApplicationOperationInfo>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListApplicationOperationsOutputBuilder {
    /// Appends an item to `application_operation_info_list`.
    ///
    /// To override the contents of this collection use [`set_application_operation_info_list`](Self::set_application_operation_info_list).
    ///
    /// List of ApplicationOperationInfo for an application
    pub fn application_operation_info_list(mut self, input: crate::types::ApplicationOperationInfo) -> Self {
        let mut v = self.application_operation_info_list.unwrap_or_default();
        v.push(input);
        self.application_operation_info_list = ::std::option::Option::Some(v);
        self
    }
    /// List of ApplicationOperationInfo for an application
    pub fn set_application_operation_info_list(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ApplicationOperationInfo>>,
    ) -> Self {
        self.application_operation_info_list = input;
        self
    }
    /// List of ApplicationOperationInfo for an application
    pub fn get_application_operation_info_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ApplicationOperationInfo>> {
        &self.application_operation_info_list
    }
    /// If a previous command returned a pagination token, pass it into this value to retrieve the next set of results
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// If a previous command returned a pagination token, pass it into this value to retrieve the next set of results
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// If a previous command returned a pagination token, pass it into this value to retrieve the next set of results
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListApplicationOperationsOutput`](crate::operation::list_application_operations::ListApplicationOperationsOutput).
    pub fn build(self) -> crate::operation::list_application_operations::ListApplicationOperationsOutput {
        crate::operation::list_application_operations::ListApplicationOperationsOutput {
            application_operation_info_list: self.application_operation_info_list,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
