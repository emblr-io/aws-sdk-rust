// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteApplicationVpcConfigurationOutput {
    /// <p>The ARN of the Managed Service for Apache Flink application.</p>
    pub application_arn: ::std::option::Option<::std::string::String>,
    /// <p>The updated version ID of the application.</p>
    pub application_version_id: ::std::option::Option<i64>,
    /// Operation ID for tracking DeleteApplicationVpcConfiguration request
    pub operation_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DeleteApplicationVpcConfigurationOutput {
    /// <p>The ARN of the Managed Service for Apache Flink application.</p>
    pub fn application_arn(&self) -> ::std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>The updated version ID of the application.</p>
    pub fn application_version_id(&self) -> ::std::option::Option<i64> {
        self.application_version_id
    }
    /// Operation ID for tracking DeleteApplicationVpcConfiguration request
    pub fn operation_id(&self) -> ::std::option::Option<&str> {
        self.operation_id.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for DeleteApplicationVpcConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteApplicationVpcConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteApplicationVpcConfigurationOutput`](crate::operation::delete_application_vpc_configuration::DeleteApplicationVpcConfigurationOutput).
    pub fn builder() -> crate::operation::delete_application_vpc_configuration::builders::DeleteApplicationVpcConfigurationOutputBuilder {
        crate::operation::delete_application_vpc_configuration::builders::DeleteApplicationVpcConfigurationOutputBuilder::default()
    }
}

/// A builder for [`DeleteApplicationVpcConfigurationOutput`](crate::operation::delete_application_vpc_configuration::DeleteApplicationVpcConfigurationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeleteApplicationVpcConfigurationOutputBuilder {
    pub(crate) application_arn: ::std::option::Option<::std::string::String>,
    pub(crate) application_version_id: ::std::option::Option<i64>,
    pub(crate) operation_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DeleteApplicationVpcConfigurationOutputBuilder {
    /// <p>The ARN of the Managed Service for Apache Flink application.</p>
    pub fn application_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Managed Service for Apache Flink application.</p>
    pub fn set_application_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_arn = input;
        self
    }
    /// <p>The ARN of the Managed Service for Apache Flink application.</p>
    pub fn get_application_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_arn
    }
    /// <p>The updated version ID of the application.</p>
    pub fn application_version_id(mut self, input: i64) -> Self {
        self.application_version_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated version ID of the application.</p>
    pub fn set_application_version_id(mut self, input: ::std::option::Option<i64>) -> Self {
        self.application_version_id = input;
        self
    }
    /// <p>The updated version ID of the application.</p>
    pub fn get_application_version_id(&self) -> &::std::option::Option<i64> {
        &self.application_version_id
    }
    /// Operation ID for tracking DeleteApplicationVpcConfiguration request
    pub fn operation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Operation ID for tracking DeleteApplicationVpcConfiguration request
    pub fn set_operation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation_id = input;
        self
    }
    /// Operation ID for tracking DeleteApplicationVpcConfiguration request
    pub fn get_operation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation_id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DeleteApplicationVpcConfigurationOutput`](crate::operation::delete_application_vpc_configuration::DeleteApplicationVpcConfigurationOutput).
    pub fn build(self) -> crate::operation::delete_application_vpc_configuration::DeleteApplicationVpcConfigurationOutput {
        crate::operation::delete_application_vpc_configuration::DeleteApplicationVpcConfigurationOutput {
            application_arn: self.application_arn,
            application_version_id: self.application_version_id,
            operation_id: self.operation_id,
            _request_id: self._request_id,
        }
    }
}
