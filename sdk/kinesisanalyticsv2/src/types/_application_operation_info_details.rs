// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Provides a description of the operation, such as the operation-type and status
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApplicationOperationInfoDetails {
    /// Type of operation performed on an application
    pub operation: ::std::string::String,
    /// The timestamp at which the operation was created
    pub start_time: ::aws_smithy_types::DateTime,
    /// The timestamp at which the operation finished for the application
    pub end_time: ::aws_smithy_types::DateTime,
    /// Status of the operation performed on an application
    pub operation_status: crate::types::OperationStatus,
    /// Contains information about the application version changes due to an operation
    pub application_version_change_details: ::std::option::Option<crate::types::ApplicationVersionChangeDetails>,
    /// Provides a description of the operation failure
    pub operation_failure_details: ::std::option::Option<crate::types::OperationFailureDetails>,
}
impl ApplicationOperationInfoDetails {
    /// Type of operation performed on an application
    pub fn operation(&self) -> &str {
        use std::ops::Deref;
        self.operation.deref()
    }
    /// The timestamp at which the operation was created
    pub fn start_time(&self) -> &::aws_smithy_types::DateTime {
        &self.start_time
    }
    /// The timestamp at which the operation finished for the application
    pub fn end_time(&self) -> &::aws_smithy_types::DateTime {
        &self.end_time
    }
    /// Status of the operation performed on an application
    pub fn operation_status(&self) -> &crate::types::OperationStatus {
        &self.operation_status
    }
    /// Contains information about the application version changes due to an operation
    pub fn application_version_change_details(&self) -> ::std::option::Option<&crate::types::ApplicationVersionChangeDetails> {
        self.application_version_change_details.as_ref()
    }
    /// Provides a description of the operation failure
    pub fn operation_failure_details(&self) -> ::std::option::Option<&crate::types::OperationFailureDetails> {
        self.operation_failure_details.as_ref()
    }
}
impl ApplicationOperationInfoDetails {
    /// Creates a new builder-style object to manufacture [`ApplicationOperationInfoDetails`](crate::types::ApplicationOperationInfoDetails).
    pub fn builder() -> crate::types::builders::ApplicationOperationInfoDetailsBuilder {
        crate::types::builders::ApplicationOperationInfoDetailsBuilder::default()
    }
}

/// A builder for [`ApplicationOperationInfoDetails`](crate::types::ApplicationOperationInfoDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ApplicationOperationInfoDetailsBuilder {
    pub(crate) operation: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) operation_status: ::std::option::Option<crate::types::OperationStatus>,
    pub(crate) application_version_change_details: ::std::option::Option<crate::types::ApplicationVersionChangeDetails>,
    pub(crate) operation_failure_details: ::std::option::Option<crate::types::OperationFailureDetails>,
}
impl ApplicationOperationInfoDetailsBuilder {
    /// Type of operation performed on an application
    /// This field is required.
    pub fn operation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation = ::std::option::Option::Some(input.into());
        self
    }
    /// Type of operation performed on an application
    pub fn set_operation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation = input;
        self
    }
    /// Type of operation performed on an application
    pub fn get_operation(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation
    }
    /// The timestamp at which the operation was created
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// The timestamp at which the operation was created
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// The timestamp at which the operation was created
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// The timestamp at which the operation finished for the application
    /// This field is required.
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// The timestamp at which the operation finished for the application
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// The timestamp at which the operation finished for the application
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// Status of the operation performed on an application
    /// This field is required.
    pub fn operation_status(mut self, input: crate::types::OperationStatus) -> Self {
        self.operation_status = ::std::option::Option::Some(input);
        self
    }
    /// Status of the operation performed on an application
    pub fn set_operation_status(mut self, input: ::std::option::Option<crate::types::OperationStatus>) -> Self {
        self.operation_status = input;
        self
    }
    /// Status of the operation performed on an application
    pub fn get_operation_status(&self) -> &::std::option::Option<crate::types::OperationStatus> {
        &self.operation_status
    }
    /// Contains information about the application version changes due to an operation
    pub fn application_version_change_details(mut self, input: crate::types::ApplicationVersionChangeDetails) -> Self {
        self.application_version_change_details = ::std::option::Option::Some(input);
        self
    }
    /// Contains information about the application version changes due to an operation
    pub fn set_application_version_change_details(mut self, input: ::std::option::Option<crate::types::ApplicationVersionChangeDetails>) -> Self {
        self.application_version_change_details = input;
        self
    }
    /// Contains information about the application version changes due to an operation
    pub fn get_application_version_change_details(&self) -> &::std::option::Option<crate::types::ApplicationVersionChangeDetails> {
        &self.application_version_change_details
    }
    /// Provides a description of the operation failure
    pub fn operation_failure_details(mut self, input: crate::types::OperationFailureDetails) -> Self {
        self.operation_failure_details = ::std::option::Option::Some(input);
        self
    }
    /// Provides a description of the operation failure
    pub fn set_operation_failure_details(mut self, input: ::std::option::Option<crate::types::OperationFailureDetails>) -> Self {
        self.operation_failure_details = input;
        self
    }
    /// Provides a description of the operation failure
    pub fn get_operation_failure_details(&self) -> &::std::option::Option<crate::types::OperationFailureDetails> {
        &self.operation_failure_details
    }
    /// Consumes the builder and constructs a [`ApplicationOperationInfoDetails`](crate::types::ApplicationOperationInfoDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`operation`](crate::types::builders::ApplicationOperationInfoDetailsBuilder::operation)
    /// - [`start_time`](crate::types::builders::ApplicationOperationInfoDetailsBuilder::start_time)
    /// - [`end_time`](crate::types::builders::ApplicationOperationInfoDetailsBuilder::end_time)
    /// - [`operation_status`](crate::types::builders::ApplicationOperationInfoDetailsBuilder::operation_status)
    pub fn build(self) -> ::std::result::Result<crate::types::ApplicationOperationInfoDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ApplicationOperationInfoDetails {
            operation: self.operation.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operation",
                    "operation was not specified but it is required when building ApplicationOperationInfoDetails",
                )
            })?,
            start_time: self.start_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_time",
                    "start_time was not specified but it is required when building ApplicationOperationInfoDetails",
                )
            })?,
            end_time: self.end_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "end_time",
                    "end_time was not specified but it is required when building ApplicationOperationInfoDetails",
                )
            })?,
            operation_status: self.operation_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operation_status",
                    "operation_status was not specified but it is required when building ApplicationOperationInfoDetails",
                )
            })?,
            application_version_change_details: self.application_version_change_details,
            operation_failure_details: self.operation_failure_details,
        })
    }
}
