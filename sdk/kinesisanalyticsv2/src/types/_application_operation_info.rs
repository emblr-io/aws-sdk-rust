// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Provides a description of the operation, such as the type and status of operation
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApplicationOperationInfo {
    /// Type of operation performed on an application
    pub operation: ::std::option::Option<::std::string::String>,
    /// Identifier of the Operation
    pub operation_id: ::std::option::Option<::std::string::String>,
    /// The timestamp at which the operation was created
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// The timestamp at which the operation finished for the application
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// Status of the operation performed on an application
    pub operation_status: ::std::option::Option<crate::types::OperationStatus>,
}
impl ApplicationOperationInfo {
    /// Type of operation performed on an application
    pub fn operation(&self) -> ::std::option::Option<&str> {
        self.operation.as_deref()
    }
    /// Identifier of the Operation
    pub fn operation_id(&self) -> ::std::option::Option<&str> {
        self.operation_id.as_deref()
    }
    /// The timestamp at which the operation was created
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// The timestamp at which the operation finished for the application
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// Status of the operation performed on an application
    pub fn operation_status(&self) -> ::std::option::Option<&crate::types::OperationStatus> {
        self.operation_status.as_ref()
    }
}
impl ApplicationOperationInfo {
    /// Creates a new builder-style object to manufacture [`ApplicationOperationInfo`](crate::types::ApplicationOperationInfo).
    pub fn builder() -> crate::types::builders::ApplicationOperationInfoBuilder {
        crate::types::builders::ApplicationOperationInfoBuilder::default()
    }
}

/// A builder for [`ApplicationOperationInfo`](crate::types::ApplicationOperationInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ApplicationOperationInfoBuilder {
    pub(crate) operation: ::std::option::Option<::std::string::String>,
    pub(crate) operation_id: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) operation_status: ::std::option::Option<crate::types::OperationStatus>,
}
impl ApplicationOperationInfoBuilder {
    /// Type of operation performed on an application
    pub fn operation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation = ::std::option::Option::Some(input.into());
        self
    }
    /// Type of operation performed on an application
    pub fn set_operation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation = input;
        self
    }
    /// Type of operation performed on an application
    pub fn get_operation(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation
    }
    /// Identifier of the Operation
    pub fn operation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Identifier of the Operation
    pub fn set_operation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation_id = input;
        self
    }
    /// Identifier of the Operation
    pub fn get_operation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation_id
    }
    /// The timestamp at which the operation was created
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// The timestamp at which the operation was created
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// The timestamp at which the operation was created
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// The timestamp at which the operation finished for the application
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// The timestamp at which the operation finished for the application
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// The timestamp at which the operation finished for the application
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// Status of the operation performed on an application
    pub fn operation_status(mut self, input: crate::types::OperationStatus) -> Self {
        self.operation_status = ::std::option::Option::Some(input);
        self
    }
    /// Status of the operation performed on an application
    pub fn set_operation_status(mut self, input: ::std::option::Option<crate::types::OperationStatus>) -> Self {
        self.operation_status = input;
        self
    }
    /// Status of the operation performed on an application
    pub fn get_operation_status(&self) -> &::std::option::Option<crate::types::OperationStatus> {
        &self.operation_status
    }
    /// Consumes the builder and constructs a [`ApplicationOperationInfo`](crate::types::ApplicationOperationInfo).
    pub fn build(self) -> crate::types::ApplicationOperationInfo {
        crate::types::ApplicationOperationInfo {
            operation: self.operation,
            operation_id: self.operation_id,
            start_time: self.start_time,
            end_time: self.end_time,
            operation_status: self.operation_status,
        }
    }
}
