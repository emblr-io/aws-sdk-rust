// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Provides a description of the operation failure error
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ErrorInfo {
    /// Error message resulting in failure of the operation
    pub error_string: ::std::option::Option<::std::string::String>,
}
impl ErrorInfo {
    /// Error message resulting in failure of the operation
    pub fn error_string(&self) -> ::std::option::Option<&str> {
        self.error_string.as_deref()
    }
}
impl ErrorInfo {
    /// Creates a new builder-style object to manufacture [`ErrorInfo`](crate::types::ErrorInfo).
    pub fn builder() -> crate::types::builders::ErrorInfoBuilder {
        crate::types::builders::ErrorInfoBuilder::default()
    }
}

/// A builder for [`ErrorInfo`](crate::types::ErrorInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ErrorInfoBuilder {
    pub(crate) error_string: ::std::option::Option<::std::string::String>,
}
impl ErrorInfoBuilder {
    /// Error message resulting in failure of the operation
    pub fn error_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_string = ::std::option::Option::Some(input.into());
        self
    }
    /// Error message resulting in failure of the operation
    pub fn set_error_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_string = input;
        self
    }
    /// Error message resulting in failure of the operation
    pub fn get_error_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_string
    }
    /// Consumes the builder and constructs a [`ErrorInfo`](crate::types::ErrorInfo).
    pub fn build(self) -> crate::types::ErrorInfo {
        crate::types::ErrorInfo {
            error_string: self.error_string,
        }
    }
}
