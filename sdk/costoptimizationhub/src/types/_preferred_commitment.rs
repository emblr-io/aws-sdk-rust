// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The preferred configuration for Reserved Instances and Savings Plans commitment-based discounts, consisting of a payment option and a commitment duration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PreferredCommitment {
    /// <p>The preferred length of the commitment period. If the value is null, it will default to <code>ThreeYears</code> (highest savings) where applicable.</p>
    pub term: ::std::option::Option<crate::types::Term>,
    /// <p>The preferred upfront payment structure for commitments. If the value is null, it will default to <code>AllUpfront</code> (highest savings) where applicable.</p>
    pub payment_option: ::std::option::Option<crate::types::PaymentOption>,
}
impl PreferredCommitment {
    /// <p>The preferred length of the commitment period. If the value is null, it will default to <code>ThreeYears</code> (highest savings) where applicable.</p>
    pub fn term(&self) -> ::std::option::Option<&crate::types::Term> {
        self.term.as_ref()
    }
    /// <p>The preferred upfront payment structure for commitments. If the value is null, it will default to <code>AllUpfront</code> (highest savings) where applicable.</p>
    pub fn payment_option(&self) -> ::std::option::Option<&crate::types::PaymentOption> {
        self.payment_option.as_ref()
    }
}
impl PreferredCommitment {
    /// Creates a new builder-style object to manufacture [`PreferredCommitment`](crate::types::PreferredCommitment).
    pub fn builder() -> crate::types::builders::PreferredCommitmentBuilder {
        crate::types::builders::PreferredCommitmentBuilder::default()
    }
}

/// A builder for [`PreferredCommitment`](crate::types::PreferredCommitment).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PreferredCommitmentBuilder {
    pub(crate) term: ::std::option::Option<crate::types::Term>,
    pub(crate) payment_option: ::std::option::Option<crate::types::PaymentOption>,
}
impl PreferredCommitmentBuilder {
    /// <p>The preferred length of the commitment period. If the value is null, it will default to <code>ThreeYears</code> (highest savings) where applicable.</p>
    pub fn term(mut self, input: crate::types::Term) -> Self {
        self.term = ::std::option::Option::Some(input);
        self
    }
    /// <p>The preferred length of the commitment period. If the value is null, it will default to <code>ThreeYears</code> (highest savings) where applicable.</p>
    pub fn set_term(mut self, input: ::std::option::Option<crate::types::Term>) -> Self {
        self.term = input;
        self
    }
    /// <p>The preferred length of the commitment period. If the value is null, it will default to <code>ThreeYears</code> (highest savings) where applicable.</p>
    pub fn get_term(&self) -> &::std::option::Option<crate::types::Term> {
        &self.term
    }
    /// <p>The preferred upfront payment structure for commitments. If the value is null, it will default to <code>AllUpfront</code> (highest savings) where applicable.</p>
    pub fn payment_option(mut self, input: crate::types::PaymentOption) -> Self {
        self.payment_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>The preferred upfront payment structure for commitments. If the value is null, it will default to <code>AllUpfront</code> (highest savings) where applicable.</p>
    pub fn set_payment_option(mut self, input: ::std::option::Option<crate::types::PaymentOption>) -> Self {
        self.payment_option = input;
        self
    }
    /// <p>The preferred upfront payment structure for commitments. If the value is null, it will default to <code>AllUpfront</code> (highest savings) where applicable.</p>
    pub fn get_payment_option(&self) -> &::std::option::Option<crate::types::PaymentOption> {
        &self.payment_option
    }
    /// Consumes the builder and constructs a [`PreferredCommitment`](crate::types::PreferredCommitment).
    pub fn build(self) -> crate::types::PreferredCommitment {
        crate::types::PreferredCommitment {
            term: self.term,
            payment_option: self.payment_option,
        }
    }
}
