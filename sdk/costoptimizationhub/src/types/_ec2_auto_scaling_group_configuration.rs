// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The EC2 Auto Scaling group configuration used for recommendations.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Ec2AutoScalingGroupConfiguration {
    /// <p>Details about the instance for the EC2 Auto Scaling group with a single instance type.</p>
    pub instance: ::std::option::Option<crate::types::InstanceConfiguration>,
    /// <p>A list of instance types for an EC2 Auto Scaling group with mixed instance types.</p>
    pub mixed_instances: ::std::option::Option<::std::vec::Vec<crate::types::MixedInstanceConfiguration>>,
    /// <p>The type of EC2 Auto Scaling group, showing whether it consists of a single instance type or mixed instance types.</p>
    pub r#type: ::std::option::Option<crate::types::Ec2AutoScalingGroupType>,
    /// <p>The strategy used for allocating instances, based on a predefined priority order or based on the lowest available price.</p>
    pub allocation_strategy: ::std::option::Option<crate::types::AllocationStrategy>,
}
impl Ec2AutoScalingGroupConfiguration {
    /// <p>Details about the instance for the EC2 Auto Scaling group with a single instance type.</p>
    pub fn instance(&self) -> ::std::option::Option<&crate::types::InstanceConfiguration> {
        self.instance.as_ref()
    }
    /// <p>A list of instance types for an EC2 Auto Scaling group with mixed instance types.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.mixed_instances.is_none()`.
    pub fn mixed_instances(&self) -> &[crate::types::MixedInstanceConfiguration] {
        self.mixed_instances.as_deref().unwrap_or_default()
    }
    /// <p>The type of EC2 Auto Scaling group, showing whether it consists of a single instance type or mixed instance types.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::Ec2AutoScalingGroupType> {
        self.r#type.as_ref()
    }
    /// <p>The strategy used for allocating instances, based on a predefined priority order or based on the lowest available price.</p>
    pub fn allocation_strategy(&self) -> ::std::option::Option<&crate::types::AllocationStrategy> {
        self.allocation_strategy.as_ref()
    }
}
impl Ec2AutoScalingGroupConfiguration {
    /// Creates a new builder-style object to manufacture [`Ec2AutoScalingGroupConfiguration`](crate::types::Ec2AutoScalingGroupConfiguration).
    pub fn builder() -> crate::types::builders::Ec2AutoScalingGroupConfigurationBuilder {
        crate::types::builders::Ec2AutoScalingGroupConfigurationBuilder::default()
    }
}

/// A builder for [`Ec2AutoScalingGroupConfiguration`](crate::types::Ec2AutoScalingGroupConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct Ec2AutoScalingGroupConfigurationBuilder {
    pub(crate) instance: ::std::option::Option<crate::types::InstanceConfiguration>,
    pub(crate) mixed_instances: ::std::option::Option<::std::vec::Vec<crate::types::MixedInstanceConfiguration>>,
    pub(crate) r#type: ::std::option::Option<crate::types::Ec2AutoScalingGroupType>,
    pub(crate) allocation_strategy: ::std::option::Option<crate::types::AllocationStrategy>,
}
impl Ec2AutoScalingGroupConfigurationBuilder {
    /// <p>Details about the instance for the EC2 Auto Scaling group with a single instance type.</p>
    pub fn instance(mut self, input: crate::types::InstanceConfiguration) -> Self {
        self.instance = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the instance for the EC2 Auto Scaling group with a single instance type.</p>
    pub fn set_instance(mut self, input: ::std::option::Option<crate::types::InstanceConfiguration>) -> Self {
        self.instance = input;
        self
    }
    /// <p>Details about the instance for the EC2 Auto Scaling group with a single instance type.</p>
    pub fn get_instance(&self) -> &::std::option::Option<crate::types::InstanceConfiguration> {
        &self.instance
    }
    /// Appends an item to `mixed_instances`.
    ///
    /// To override the contents of this collection use [`set_mixed_instances`](Self::set_mixed_instances).
    ///
    /// <p>A list of instance types for an EC2 Auto Scaling group with mixed instance types.</p>
    pub fn mixed_instances(mut self, input: crate::types::MixedInstanceConfiguration) -> Self {
        let mut v = self.mixed_instances.unwrap_or_default();
        v.push(input);
        self.mixed_instances = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of instance types for an EC2 Auto Scaling group with mixed instance types.</p>
    pub fn set_mixed_instances(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MixedInstanceConfiguration>>) -> Self {
        self.mixed_instances = input;
        self
    }
    /// <p>A list of instance types for an EC2 Auto Scaling group with mixed instance types.</p>
    pub fn get_mixed_instances(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MixedInstanceConfiguration>> {
        &self.mixed_instances
    }
    /// <p>The type of EC2 Auto Scaling group, showing whether it consists of a single instance type or mixed instance types.</p>
    pub fn r#type(mut self, input: crate::types::Ec2AutoScalingGroupType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of EC2 Auto Scaling group, showing whether it consists of a single instance type or mixed instance types.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::Ec2AutoScalingGroupType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of EC2 Auto Scaling group, showing whether it consists of a single instance type or mixed instance types.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::Ec2AutoScalingGroupType> {
        &self.r#type
    }
    /// <p>The strategy used for allocating instances, based on a predefined priority order or based on the lowest available price.</p>
    pub fn allocation_strategy(mut self, input: crate::types::AllocationStrategy) -> Self {
        self.allocation_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The strategy used for allocating instances, based on a predefined priority order or based on the lowest available price.</p>
    pub fn set_allocation_strategy(mut self, input: ::std::option::Option<crate::types::AllocationStrategy>) -> Self {
        self.allocation_strategy = input;
        self
    }
    /// <p>The strategy used for allocating instances, based on a predefined priority order or based on the lowest available price.</p>
    pub fn get_allocation_strategy(&self) -> &::std::option::Option<crate::types::AllocationStrategy> {
        &self.allocation_strategy
    }
    /// Consumes the builder and constructs a [`Ec2AutoScalingGroupConfiguration`](crate::types::Ec2AutoScalingGroupConfiguration).
    pub fn build(self) -> crate::types::Ec2AutoScalingGroupConfiguration {
        crate::types::Ec2AutoScalingGroupConfiguration {
            instance: self.instance,
            mixed_instances: self.mixed_instances,
            r#type: self.r#type,
            allocation_strategy: self.allocation_strategy,
        }
    }
}
