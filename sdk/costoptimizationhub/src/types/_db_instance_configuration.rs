// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The DB instance configuration used for recommendations.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DbInstanceConfiguration {
    /// <p>The DB instance class of the DB instance.</p>
    pub db_instance_class: ::std::option::Option<::std::string::String>,
}
impl DbInstanceConfiguration {
    /// <p>The DB instance class of the DB instance.</p>
    pub fn db_instance_class(&self) -> ::std::option::Option<&str> {
        self.db_instance_class.as_deref()
    }
}
impl DbInstanceConfiguration {
    /// Creates a new builder-style object to manufacture [`DbInstanceConfiguration`](crate::types::DbInstanceConfiguration).
    pub fn builder() -> crate::types::builders::DbInstanceConfigurationBuilder {
        crate::types::builders::DbInstanceConfigurationBuilder::default()
    }
}

/// A builder for [`DbInstanceConfiguration`](crate::types::DbInstanceConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DbInstanceConfigurationBuilder {
    pub(crate) db_instance_class: ::std::option::Option<::std::string::String>,
}
impl DbInstanceConfigurationBuilder {
    /// <p>The DB instance class of the DB instance.</p>
    pub fn db_instance_class(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_instance_class = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DB instance class of the DB instance.</p>
    pub fn set_db_instance_class(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_instance_class = input;
        self
    }
    /// <p>The DB instance class of the DB instance.</p>
    pub fn get_db_instance_class(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_instance_class
    }
    /// Consumes the builder and constructs a [`DbInstanceConfiguration`](crate::types::DbInstanceConfiguration).
    pub fn build(self) -> crate::types::DbInstanceConfiguration {
        crate::types::DbInstanceConfiguration {
            db_instance_class: self.db_instance_class,
        }
    }
}
