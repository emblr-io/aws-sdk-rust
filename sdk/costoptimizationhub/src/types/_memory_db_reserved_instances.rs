// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The MemoryDB reserved instances recommendation details.</p><note>
/// <p>While the API reference uses "MemoryDB reserved instances", the user guide and other documentation refer to them as "MemoryDB reserved nodes", as the terms are used interchangeably.</p>
/// </note>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MemoryDbReservedInstances {
    /// <p>The MemoryDB reserved instances configuration used for recommendations.</p>
    pub configuration: ::std::option::Option<crate::types::MemoryDbReservedInstancesConfiguration>,
    /// <p>Cost impact of the purchase recommendation.</p>
    pub cost_calculation: ::std::option::Option<crate::types::ReservedInstancesCostCalculation>,
}
impl MemoryDbReservedInstances {
    /// <p>The MemoryDB reserved instances configuration used for recommendations.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::MemoryDbReservedInstancesConfiguration> {
        self.configuration.as_ref()
    }
    /// <p>Cost impact of the purchase recommendation.</p>
    pub fn cost_calculation(&self) -> ::std::option::Option<&crate::types::ReservedInstancesCostCalculation> {
        self.cost_calculation.as_ref()
    }
}
impl MemoryDbReservedInstances {
    /// Creates a new builder-style object to manufacture [`MemoryDbReservedInstances`](crate::types::MemoryDbReservedInstances).
    pub fn builder() -> crate::types::builders::MemoryDbReservedInstancesBuilder {
        crate::types::builders::MemoryDbReservedInstancesBuilder::default()
    }
}

/// A builder for [`MemoryDbReservedInstances`](crate::types::MemoryDbReservedInstances).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MemoryDbReservedInstancesBuilder {
    pub(crate) configuration: ::std::option::Option<crate::types::MemoryDbReservedInstancesConfiguration>,
    pub(crate) cost_calculation: ::std::option::Option<crate::types::ReservedInstancesCostCalculation>,
}
impl MemoryDbReservedInstancesBuilder {
    /// <p>The MemoryDB reserved instances configuration used for recommendations.</p>
    pub fn configuration(mut self, input: crate::types::MemoryDbReservedInstancesConfiguration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The MemoryDB reserved instances configuration used for recommendations.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::MemoryDbReservedInstancesConfiguration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>The MemoryDB reserved instances configuration used for recommendations.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::MemoryDbReservedInstancesConfiguration> {
        &self.configuration
    }
    /// <p>Cost impact of the purchase recommendation.</p>
    pub fn cost_calculation(mut self, input: crate::types::ReservedInstancesCostCalculation) -> Self {
        self.cost_calculation = ::std::option::Option::Some(input);
        self
    }
    /// <p>Cost impact of the purchase recommendation.</p>
    pub fn set_cost_calculation(mut self, input: ::std::option::Option<crate::types::ReservedInstancesCostCalculation>) -> Self {
        self.cost_calculation = input;
        self
    }
    /// <p>Cost impact of the purchase recommendation.</p>
    pub fn get_cost_calculation(&self) -> &::std::option::Option<crate::types::ReservedInstancesCostCalculation> {
        &self.cost_calculation
    }
    /// Consumes the builder and constructs a [`MemoryDbReservedInstances`](crate::types::MemoryDbReservedInstances).
    pub fn build(self) -> crate::types::MemoryDbReservedInstances {
        crate::types::MemoryDbReservedInstances {
            configuration: self.configuration,
            cost_calculation: self.cost_calculation,
        }
    }
}
