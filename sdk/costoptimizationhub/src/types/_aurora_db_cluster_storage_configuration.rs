// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Aurora DB cluster storage configuration used for recommendations.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuroraDbClusterStorageConfiguration {
    /// <p>The storage type to associate with the Aurora DB cluster.</p>
    pub storage_type: ::std::option::Option<::std::string::String>,
}
impl AuroraDbClusterStorageConfiguration {
    /// <p>The storage type to associate with the Aurora DB cluster.</p>
    pub fn storage_type(&self) -> ::std::option::Option<&str> {
        self.storage_type.as_deref()
    }
}
impl AuroraDbClusterStorageConfiguration {
    /// Creates a new builder-style object to manufacture [`AuroraDbClusterStorageConfiguration`](crate::types::AuroraDbClusterStorageConfiguration).
    pub fn builder() -> crate::types::builders::AuroraDbClusterStorageConfigurationBuilder {
        crate::types::builders::AuroraDbClusterStorageConfigurationBuilder::default()
    }
}

/// A builder for [`AuroraDbClusterStorageConfiguration`](crate::types::AuroraDbClusterStorageConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AuroraDbClusterStorageConfigurationBuilder {
    pub(crate) storage_type: ::std::option::Option<::std::string::String>,
}
impl AuroraDbClusterStorageConfigurationBuilder {
    /// <p>The storage type to associate with the Aurora DB cluster.</p>
    pub fn storage_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.storage_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The storage type to associate with the Aurora DB cluster.</p>
    pub fn set_storage_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.storage_type = input;
        self
    }
    /// <p>The storage type to associate with the Aurora DB cluster.</p>
    pub fn get_storage_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.storage_type
    }
    /// Consumes the builder and constructs a [`AuroraDbClusterStorageConfiguration`](crate::types::AuroraDbClusterStorageConfiguration).
    pub fn build(self) -> crate::types::AuroraDbClusterStorageConfiguration {
        crate::types::AuroraDbClusterStorageConfiguration {
            storage_type: self.storage_type,
        }
    }
}
