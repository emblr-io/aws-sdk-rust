// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListRecommendationSummariesInput {
    /// <p>Describes a filter that returns a more specific list of recommendations. Filters recommendations by different dimensions.</p>
    pub filter: ::std::option::Option<crate::types::Filter>,
    /// <p>The grouping of recommendations by a dimension.</p>
    pub group_by: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of recommendations to be returned for the request.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Additional metrics to be returned for the request. The only valid value is <code>savingsPercentage</code>.</p>
    pub metrics: ::std::option::Option<::std::vec::Vec<crate::types::SummaryMetrics>>,
    /// <p>The token to retrieve the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListRecommendationSummariesInput {
    /// <p>Describes a filter that returns a more specific list of recommendations. Filters recommendations by different dimensions.</p>
    pub fn filter(&self) -> ::std::option::Option<&crate::types::Filter> {
        self.filter.as_ref()
    }
    /// <p>The grouping of recommendations by a dimension.</p>
    pub fn group_by(&self) -> ::std::option::Option<&str> {
        self.group_by.as_deref()
    }
    /// <p>The maximum number of recommendations to be returned for the request.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Additional metrics to be returned for the request. The only valid value is <code>savingsPercentage</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metrics.is_none()`.
    pub fn metrics(&self) -> &[crate::types::SummaryMetrics] {
        self.metrics.as_deref().unwrap_or_default()
    }
    /// <p>The token to retrieve the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListRecommendationSummariesInput {
    /// Creates a new builder-style object to manufacture [`ListRecommendationSummariesInput`](crate::operation::list_recommendation_summaries::ListRecommendationSummariesInput).
    pub fn builder() -> crate::operation::list_recommendation_summaries::builders::ListRecommendationSummariesInputBuilder {
        crate::operation::list_recommendation_summaries::builders::ListRecommendationSummariesInputBuilder::default()
    }
}

/// A builder for [`ListRecommendationSummariesInput`](crate::operation::list_recommendation_summaries::ListRecommendationSummariesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListRecommendationSummariesInputBuilder {
    pub(crate) filter: ::std::option::Option<crate::types::Filter>,
    pub(crate) group_by: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) metrics: ::std::option::Option<::std::vec::Vec<crate::types::SummaryMetrics>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListRecommendationSummariesInputBuilder {
    /// <p>Describes a filter that returns a more specific list of recommendations. Filters recommendations by different dimensions.</p>
    pub fn filter(mut self, input: crate::types::Filter) -> Self {
        self.filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes a filter that returns a more specific list of recommendations. Filters recommendations by different dimensions.</p>
    pub fn set_filter(mut self, input: ::std::option::Option<crate::types::Filter>) -> Self {
        self.filter = input;
        self
    }
    /// <p>Describes a filter that returns a more specific list of recommendations. Filters recommendations by different dimensions.</p>
    pub fn get_filter(&self) -> &::std::option::Option<crate::types::Filter> {
        &self.filter
    }
    /// <p>The grouping of recommendations by a dimension.</p>
    /// This field is required.
    pub fn group_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The grouping of recommendations by a dimension.</p>
    pub fn set_group_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_by = input;
        self
    }
    /// <p>The grouping of recommendations by a dimension.</p>
    pub fn get_group_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_by
    }
    /// <p>The maximum number of recommendations to be returned for the request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of recommendations to be returned for the request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of recommendations to be returned for the request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Appends an item to `metrics`.
    ///
    /// To override the contents of this collection use [`set_metrics`](Self::set_metrics).
    ///
    /// <p>Additional metrics to be returned for the request. The only valid value is <code>savingsPercentage</code>.</p>
    pub fn metrics(mut self, input: crate::types::SummaryMetrics) -> Self {
        let mut v = self.metrics.unwrap_or_default();
        v.push(input);
        self.metrics = ::std::option::Option::Some(v);
        self
    }
    /// <p>Additional metrics to be returned for the request. The only valid value is <code>savingsPercentage</code>.</p>
    pub fn set_metrics(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SummaryMetrics>>) -> Self {
        self.metrics = input;
        self
    }
    /// <p>Additional metrics to be returned for the request. The only valid value is <code>savingsPercentage</code>.</p>
    pub fn get_metrics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SummaryMetrics>> {
        &self.metrics
    }
    /// <p>The token to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token to retrieve the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListRecommendationSummariesInput`](crate::operation::list_recommendation_summaries::ListRecommendationSummariesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_recommendation_summaries::ListRecommendationSummariesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_recommendation_summaries::ListRecommendationSummariesInput {
            filter: self.filter,
            group_by: self.group_by,
            max_results: self.max_results,
            metrics: self.metrics,
            next_token: self.next_token,
        })
    }
}
