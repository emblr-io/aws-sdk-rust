// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for using Amazon Bedrock foundation models to rerank Knowledge Base vector search results. This enables more sophisticated relevance ranking using large language models.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VectorSearchBedrockRerankingConfiguration {
    /// <p>Configuration for the Amazon Bedrock foundation model used for reranking. This includes the model ARN and any additional request fields required by the model.</p>
    pub model_configuration: ::std::option::Option<crate::types::VectorSearchBedrockRerankingModelConfiguration>,
    /// <p>The maximum number of results to rerank. This limits how many of the initial vector search results will be processed by the reranking model. A smaller number improves performance but may exclude potentially relevant results.</p>
    pub number_of_reranked_results: ::std::option::Option<i32>,
    /// <p>Configuration for how document metadata should be used during the reranking process. This determines which metadata fields are included when reordering search results.</p>
    pub metadata_configuration: ::std::option::Option<crate::types::MetadataConfigurationForReranking>,
}
impl VectorSearchBedrockRerankingConfiguration {
    /// <p>Configuration for the Amazon Bedrock foundation model used for reranking. This includes the model ARN and any additional request fields required by the model.</p>
    pub fn model_configuration(&self) -> ::std::option::Option<&crate::types::VectorSearchBedrockRerankingModelConfiguration> {
        self.model_configuration.as_ref()
    }
    /// <p>The maximum number of results to rerank. This limits how many of the initial vector search results will be processed by the reranking model. A smaller number improves performance but may exclude potentially relevant results.</p>
    pub fn number_of_reranked_results(&self) -> ::std::option::Option<i32> {
        self.number_of_reranked_results
    }
    /// <p>Configuration for how document metadata should be used during the reranking process. This determines which metadata fields are included when reordering search results.</p>
    pub fn metadata_configuration(&self) -> ::std::option::Option<&crate::types::MetadataConfigurationForReranking> {
        self.metadata_configuration.as_ref()
    }
}
impl VectorSearchBedrockRerankingConfiguration {
    /// Creates a new builder-style object to manufacture [`VectorSearchBedrockRerankingConfiguration`](crate::types::VectorSearchBedrockRerankingConfiguration).
    pub fn builder() -> crate::types::builders::VectorSearchBedrockRerankingConfigurationBuilder {
        crate::types::builders::VectorSearchBedrockRerankingConfigurationBuilder::default()
    }
}

/// A builder for [`VectorSearchBedrockRerankingConfiguration`](crate::types::VectorSearchBedrockRerankingConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VectorSearchBedrockRerankingConfigurationBuilder {
    pub(crate) model_configuration: ::std::option::Option<crate::types::VectorSearchBedrockRerankingModelConfiguration>,
    pub(crate) number_of_reranked_results: ::std::option::Option<i32>,
    pub(crate) metadata_configuration: ::std::option::Option<crate::types::MetadataConfigurationForReranking>,
}
impl VectorSearchBedrockRerankingConfigurationBuilder {
    /// <p>Configuration for the Amazon Bedrock foundation model used for reranking. This includes the model ARN and any additional request fields required by the model.</p>
    /// This field is required.
    pub fn model_configuration(mut self, input: crate::types::VectorSearchBedrockRerankingModelConfiguration) -> Self {
        self.model_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration for the Amazon Bedrock foundation model used for reranking. This includes the model ARN and any additional request fields required by the model.</p>
    pub fn set_model_configuration(mut self, input: ::std::option::Option<crate::types::VectorSearchBedrockRerankingModelConfiguration>) -> Self {
        self.model_configuration = input;
        self
    }
    /// <p>Configuration for the Amazon Bedrock foundation model used for reranking. This includes the model ARN and any additional request fields required by the model.</p>
    pub fn get_model_configuration(&self) -> &::std::option::Option<crate::types::VectorSearchBedrockRerankingModelConfiguration> {
        &self.model_configuration
    }
    /// <p>The maximum number of results to rerank. This limits how many of the initial vector search results will be processed by the reranking model. A smaller number improves performance but may exclude potentially relevant results.</p>
    pub fn number_of_reranked_results(mut self, input: i32) -> Self {
        self.number_of_reranked_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to rerank. This limits how many of the initial vector search results will be processed by the reranking model. A smaller number improves performance but may exclude potentially relevant results.</p>
    pub fn set_number_of_reranked_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_reranked_results = input;
        self
    }
    /// <p>The maximum number of results to rerank. This limits how many of the initial vector search results will be processed by the reranking model. A smaller number improves performance but may exclude potentially relevant results.</p>
    pub fn get_number_of_reranked_results(&self) -> &::std::option::Option<i32> {
        &self.number_of_reranked_results
    }
    /// <p>Configuration for how document metadata should be used during the reranking process. This determines which metadata fields are included when reordering search results.</p>
    pub fn metadata_configuration(mut self, input: crate::types::MetadataConfigurationForReranking) -> Self {
        self.metadata_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration for how document metadata should be used during the reranking process. This determines which metadata fields are included when reordering search results.</p>
    pub fn set_metadata_configuration(mut self, input: ::std::option::Option<crate::types::MetadataConfigurationForReranking>) -> Self {
        self.metadata_configuration = input;
        self
    }
    /// <p>Configuration for how document metadata should be used during the reranking process. This determines which metadata fields are included when reordering search results.</p>
    pub fn get_metadata_configuration(&self) -> &::std::option::Option<crate::types::MetadataConfigurationForReranking> {
        &self.metadata_configuration
    }
    /// Consumes the builder and constructs a [`VectorSearchBedrockRerankingConfiguration`](crate::types::VectorSearchBedrockRerankingConfiguration).
    pub fn build(self) -> crate::types::VectorSearchBedrockRerankingConfiguration {
        crate::types::VectorSearchBedrockRerankingConfiguration {
            model_configuration: self.model_configuration,
            number_of_reranked_results: self.number_of_reranked_results,
            metadata_configuration: self.metadata_configuration,
        }
    }
}
