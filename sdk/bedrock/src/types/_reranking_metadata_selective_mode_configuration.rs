// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for selectively including or excluding metadata fields during the reranking process. This allows you to control which metadata attributes are considered when reordering search results.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub enum RerankingMetadataSelectiveModeConfiguration {
    /// <p>A list of metadata field names to explicitly exclude from the reranking process. All metadata fields except these will be considered when reordering search results. This parameter cannot be used together with fieldsToInclude.</p>
    FieldsToExclude(::std::vec::Vec<crate::types::FieldForReranking>),
    /// <p>A list of metadata field names to explicitly include in the reranking process. Only these fields will be considered when reordering search results. This parameter cannot be used together with fieldsToExclude.</p>
    FieldsToInclude(::std::vec::Vec<crate::types::FieldForReranking>),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl RerankingMetadataSelectiveModeConfiguration {
    /// Tries to convert the enum instance into [`FieldsToExclude`](crate::types::RerankingMetadataSelectiveModeConfiguration::FieldsToExclude), extracting the inner [`Vec`](::std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_fields_to_exclude(&self) -> ::std::result::Result<&::std::vec::Vec<crate::types::FieldForReranking>, &Self> {
        if let RerankingMetadataSelectiveModeConfiguration::FieldsToExclude(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`FieldsToExclude`](crate::types::RerankingMetadataSelectiveModeConfiguration::FieldsToExclude).
    pub fn is_fields_to_exclude(&self) -> bool {
        self.as_fields_to_exclude().is_ok()
    }
    /// Tries to convert the enum instance into [`FieldsToInclude`](crate::types::RerankingMetadataSelectiveModeConfiguration::FieldsToInclude), extracting the inner [`Vec`](::std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_fields_to_include(&self) -> ::std::result::Result<&::std::vec::Vec<crate::types::FieldForReranking>, &Self> {
        if let RerankingMetadataSelectiveModeConfiguration::FieldsToInclude(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`FieldsToInclude`](crate::types::RerankingMetadataSelectiveModeConfiguration::FieldsToInclude).
    pub fn is_fields_to_include(&self) -> bool {
        self.as_fields_to_include().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
impl ::std::fmt::Debug for RerankingMetadataSelectiveModeConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            RerankingMetadataSelectiveModeConfiguration::FieldsToExclude(_) => f.debug_tuple("*** Sensitive Data Redacted ***").finish(),
            RerankingMetadataSelectiveModeConfiguration::FieldsToInclude(_) => f.debug_tuple("*** Sensitive Data Redacted ***").finish(),
            RerankingMetadataSelectiveModeConfiguration::Unknown => f.debug_tuple("Unknown").finish(),
        }
    }
}
