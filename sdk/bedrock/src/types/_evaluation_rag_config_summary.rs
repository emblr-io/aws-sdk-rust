// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of the RAG resources used in an Amazon Bedrock Knowledge Base evaluation job. These resources can be Knowledge Bases in Amazon Bedrock or RAG sources outside of Amazon Bedrock that you use to generate your own inference response data.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EvaluationRagConfigSummary {
    /// <p>The Amazon Resource Names (ARNs) of the Knowledge Base resources used for a Knowledge Base evaluation job where Amazon Bedrock invokes the Knowledge Base for you.</p>
    pub bedrock_knowledge_base_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A label that identifies the RAG sources used for a Knowledge Base evaluation job where you provide your own inference response data.</p>
    pub precomputed_rag_source_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl EvaluationRagConfigSummary {
    /// <p>The Amazon Resource Names (ARNs) of the Knowledge Base resources used for a Knowledge Base evaluation job where Amazon Bedrock invokes the Knowledge Base for you.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.bedrock_knowledge_base_identifiers.is_none()`.
    pub fn bedrock_knowledge_base_identifiers(&self) -> &[::std::string::String] {
        self.bedrock_knowledge_base_identifiers.as_deref().unwrap_or_default()
    }
    /// <p>A label that identifies the RAG sources used for a Knowledge Base evaluation job where you provide your own inference response data.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.precomputed_rag_source_identifiers.is_none()`.
    pub fn precomputed_rag_source_identifiers(&self) -> &[::std::string::String] {
        self.precomputed_rag_source_identifiers.as_deref().unwrap_or_default()
    }
}
impl EvaluationRagConfigSummary {
    /// Creates a new builder-style object to manufacture [`EvaluationRagConfigSummary`](crate::types::EvaluationRagConfigSummary).
    pub fn builder() -> crate::types::builders::EvaluationRagConfigSummaryBuilder {
        crate::types::builders::EvaluationRagConfigSummaryBuilder::default()
    }
}

/// A builder for [`EvaluationRagConfigSummary`](crate::types::EvaluationRagConfigSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EvaluationRagConfigSummaryBuilder {
    pub(crate) bedrock_knowledge_base_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) precomputed_rag_source_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl EvaluationRagConfigSummaryBuilder {
    /// Appends an item to `bedrock_knowledge_base_identifiers`.
    ///
    /// To override the contents of this collection use [`set_bedrock_knowledge_base_identifiers`](Self::set_bedrock_knowledge_base_identifiers).
    ///
    /// <p>The Amazon Resource Names (ARNs) of the Knowledge Base resources used for a Knowledge Base evaluation job where Amazon Bedrock invokes the Knowledge Base for you.</p>
    pub fn bedrock_knowledge_base_identifiers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.bedrock_knowledge_base_identifiers.unwrap_or_default();
        v.push(input.into());
        self.bedrock_knowledge_base_identifiers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the Knowledge Base resources used for a Knowledge Base evaluation job where Amazon Bedrock invokes the Knowledge Base for you.</p>
    pub fn set_bedrock_knowledge_base_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.bedrock_knowledge_base_identifiers = input;
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the Knowledge Base resources used for a Knowledge Base evaluation job where Amazon Bedrock invokes the Knowledge Base for you.</p>
    pub fn get_bedrock_knowledge_base_identifiers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.bedrock_knowledge_base_identifiers
    }
    /// Appends an item to `precomputed_rag_source_identifiers`.
    ///
    /// To override the contents of this collection use [`set_precomputed_rag_source_identifiers`](Self::set_precomputed_rag_source_identifiers).
    ///
    /// <p>A label that identifies the RAG sources used for a Knowledge Base evaluation job where you provide your own inference response data.</p>
    pub fn precomputed_rag_source_identifiers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.precomputed_rag_source_identifiers.unwrap_or_default();
        v.push(input.into());
        self.precomputed_rag_source_identifiers = ::std::option::Option::Some(v);
        self
    }
    /// <p>A label that identifies the RAG sources used for a Knowledge Base evaluation job where you provide your own inference response data.</p>
    pub fn set_precomputed_rag_source_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.precomputed_rag_source_identifiers = input;
        self
    }
    /// <p>A label that identifies the RAG sources used for a Knowledge Base evaluation job where you provide your own inference response data.</p>
    pub fn get_precomputed_rag_source_identifiers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.precomputed_rag_source_identifiers
    }
    /// Consumes the builder and constructs a [`EvaluationRagConfigSummary`](crate::types::EvaluationRagConfigSummary).
    pub fn build(self) -> crate::types::EvaluationRagConfigSummary {
        crate::types::EvaluationRagConfigSummary {
            bedrock_knowledge_base_identifiers: self.bedrock_knowledge_base_identifiers,
            precomputed_rag_source_identifiers: self.precomputed_rag_source_identifiers,
        }
    }
}
