// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings for using invocation logs to customize a model.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InvocationLogsConfig {
    /// <p>Whether to use the model's response for training, or just the prompt. The default value is <code>False</code>.</p>
    pub use_prompt_response: bool,
    /// <p>The source of the invocation logs.</p>
    pub invocation_log_source: ::std::option::Option<crate::types::InvocationLogSource>,
    /// <p>Rules for filtering invocation logs based on request metadata.</p>
    pub request_metadata_filters: ::std::option::Option<crate::types::RequestMetadataFilters>,
}
impl InvocationLogsConfig {
    /// <p>Whether to use the model's response for training, or just the prompt. The default value is <code>False</code>.</p>
    pub fn use_prompt_response(&self) -> bool {
        self.use_prompt_response
    }
    /// <p>The source of the invocation logs.</p>
    pub fn invocation_log_source(&self) -> ::std::option::Option<&crate::types::InvocationLogSource> {
        self.invocation_log_source.as_ref()
    }
    /// <p>Rules for filtering invocation logs based on request metadata.</p>
    pub fn request_metadata_filters(&self) -> ::std::option::Option<&crate::types::RequestMetadataFilters> {
        self.request_metadata_filters.as_ref()
    }
}
impl InvocationLogsConfig {
    /// Creates a new builder-style object to manufacture [`InvocationLogsConfig`](crate::types::InvocationLogsConfig).
    pub fn builder() -> crate::types::builders::InvocationLogsConfigBuilder {
        crate::types::builders::InvocationLogsConfigBuilder::default()
    }
}

/// A builder for [`InvocationLogsConfig`](crate::types::InvocationLogsConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InvocationLogsConfigBuilder {
    pub(crate) use_prompt_response: ::std::option::Option<bool>,
    pub(crate) invocation_log_source: ::std::option::Option<crate::types::InvocationLogSource>,
    pub(crate) request_metadata_filters: ::std::option::Option<crate::types::RequestMetadataFilters>,
}
impl InvocationLogsConfigBuilder {
    /// <p>Whether to use the model's response for training, or just the prompt. The default value is <code>False</code>.</p>
    pub fn use_prompt_response(mut self, input: bool) -> Self {
        self.use_prompt_response = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to use the model's response for training, or just the prompt. The default value is <code>False</code>.</p>
    pub fn set_use_prompt_response(mut self, input: ::std::option::Option<bool>) -> Self {
        self.use_prompt_response = input;
        self
    }
    /// <p>Whether to use the model's response for training, or just the prompt. The default value is <code>False</code>.</p>
    pub fn get_use_prompt_response(&self) -> &::std::option::Option<bool> {
        &self.use_prompt_response
    }
    /// <p>The source of the invocation logs.</p>
    /// This field is required.
    pub fn invocation_log_source(mut self, input: crate::types::InvocationLogSource) -> Self {
        self.invocation_log_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source of the invocation logs.</p>
    pub fn set_invocation_log_source(mut self, input: ::std::option::Option<crate::types::InvocationLogSource>) -> Self {
        self.invocation_log_source = input;
        self
    }
    /// <p>The source of the invocation logs.</p>
    pub fn get_invocation_log_source(&self) -> &::std::option::Option<crate::types::InvocationLogSource> {
        &self.invocation_log_source
    }
    /// <p>Rules for filtering invocation logs based on request metadata.</p>
    pub fn request_metadata_filters(mut self, input: crate::types::RequestMetadataFilters) -> Self {
        self.request_metadata_filters = ::std::option::Option::Some(input);
        self
    }
    /// <p>Rules for filtering invocation logs based on request metadata.</p>
    pub fn set_request_metadata_filters(mut self, input: ::std::option::Option<crate::types::RequestMetadataFilters>) -> Self {
        self.request_metadata_filters = input;
        self
    }
    /// <p>Rules for filtering invocation logs based on request metadata.</p>
    pub fn get_request_metadata_filters(&self) -> &::std::option::Option<crate::types::RequestMetadataFilters> {
        &self.request_metadata_filters
    }
    /// Consumes the builder and constructs a [`InvocationLogsConfig`](crate::types::InvocationLogsConfig).
    pub fn build(self) -> crate::types::InvocationLogsConfig {
        crate::types::InvocationLogsConfig {
            use_prompt_response: self.use_prompt_response.unwrap_or_default(),
            invocation_log_source: self.invocation_log_source,
            request_metadata_filters: self.request_metadata_filters,
        }
    }
}
