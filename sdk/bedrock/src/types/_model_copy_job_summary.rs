// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about each model copy job.</p>
/// <p>This data type is used in the following API operations:</p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_ListModelCopyJobs.html#API_ListModelCopyJobs_ResponseSyntax">ListModelCopyJobs response</a></p></li>
/// </ul>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModelCopyJobSummary {
    /// <p>The Amazon Resoource Name (ARN) of the model copy job.</p>
    pub job_arn: ::std::string::String,
    /// <p>The status of the model copy job.</p>
    pub status: crate::types::ModelCopyJobStatus,
    /// <p>The time that the model copy job was created.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>The Amazon Resource Name (ARN) of the copied model.</p>
    pub target_model_arn: ::std::string::String,
    /// <p>The name of the copied model.</p>
    pub target_model_name: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the account that the model being copied originated from.</p>
    pub source_account_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the original model being copied.</p>
    pub source_model_arn: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the copied model.</p>
    pub target_model_kms_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>Tags associated with the copied model.</p>
    pub target_model_tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>If a model fails to be copied, a message describing why the job failed is included here.</p>
    pub failure_message: ::std::option::Option<::std::string::String>,
    /// <p>The name of the original model being copied.</p>
    pub source_model_name: ::std::option::Option<::std::string::String>,
}
impl ModelCopyJobSummary {
    /// <p>The Amazon Resoource Name (ARN) of the model copy job.</p>
    pub fn job_arn(&self) -> &str {
        use std::ops::Deref;
        self.job_arn.deref()
    }
    /// <p>The status of the model copy job.</p>
    pub fn status(&self) -> &crate::types::ModelCopyJobStatus {
        &self.status
    }
    /// <p>The time that the model copy job was created.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>The Amazon Resource Name (ARN) of the copied model.</p>
    pub fn target_model_arn(&self) -> &str {
        use std::ops::Deref;
        self.target_model_arn.deref()
    }
    /// <p>The name of the copied model.</p>
    pub fn target_model_name(&self) -> ::std::option::Option<&str> {
        self.target_model_name.as_deref()
    }
    /// <p>The unique identifier of the account that the model being copied originated from.</p>
    pub fn source_account_id(&self) -> &str {
        use std::ops::Deref;
        self.source_account_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the original model being copied.</p>
    pub fn source_model_arn(&self) -> &str {
        use std::ops::Deref;
        self.source_model_arn.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the copied model.</p>
    pub fn target_model_kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.target_model_kms_key_arn.as_deref()
    }
    /// <p>Tags associated with the copied model.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.target_model_tags.is_none()`.
    pub fn target_model_tags(&self) -> &[crate::types::Tag] {
        self.target_model_tags.as_deref().unwrap_or_default()
    }
    /// <p>If a model fails to be copied, a message describing why the job failed is included here.</p>
    pub fn failure_message(&self) -> ::std::option::Option<&str> {
        self.failure_message.as_deref()
    }
    /// <p>The name of the original model being copied.</p>
    pub fn source_model_name(&self) -> ::std::option::Option<&str> {
        self.source_model_name.as_deref()
    }
}
impl ModelCopyJobSummary {
    /// Creates a new builder-style object to manufacture [`ModelCopyJobSummary`](crate::types::ModelCopyJobSummary).
    pub fn builder() -> crate::types::builders::ModelCopyJobSummaryBuilder {
        crate::types::builders::ModelCopyJobSummaryBuilder::default()
    }
}

/// A builder for [`ModelCopyJobSummary`](crate::types::ModelCopyJobSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ModelCopyJobSummaryBuilder {
    pub(crate) job_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ModelCopyJobStatus>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) target_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) target_model_name: ::std::option::Option<::std::string::String>,
    pub(crate) source_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) target_model_kms_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) target_model_tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) failure_message: ::std::option::Option<::std::string::String>,
    pub(crate) source_model_name: ::std::option::Option<::std::string::String>,
}
impl ModelCopyJobSummaryBuilder {
    /// <p>The Amazon Resoource Name (ARN) of the model copy job.</p>
    /// This field is required.
    pub fn job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resoource Name (ARN) of the model copy job.</p>
    pub fn set_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_arn = input;
        self
    }
    /// <p>The Amazon Resoource Name (ARN) of the model copy job.</p>
    pub fn get_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_arn
    }
    /// <p>The status of the model copy job.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ModelCopyJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the model copy job.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ModelCopyJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the model copy job.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ModelCopyJobStatus> {
        &self.status
    }
    /// <p>The time that the model copy job was created.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the model copy job was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time that the model copy job was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The Amazon Resource Name (ARN) of the copied model.</p>
    /// This field is required.
    pub fn target_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the copied model.</p>
    pub fn set_target_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the copied model.</p>
    pub fn get_target_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_model_arn
    }
    /// <p>The name of the copied model.</p>
    pub fn target_model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the copied model.</p>
    pub fn set_target_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_model_name = input;
        self
    }
    /// <p>The name of the copied model.</p>
    pub fn get_target_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_model_name
    }
    /// <p>The unique identifier of the account that the model being copied originated from.</p>
    /// This field is required.
    pub fn source_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the account that the model being copied originated from.</p>
    pub fn set_source_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_account_id = input;
        self
    }
    /// <p>The unique identifier of the account that the model being copied originated from.</p>
    pub fn get_source_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_account_id
    }
    /// <p>The Amazon Resource Name (ARN) of the original model being copied.</p>
    /// This field is required.
    pub fn source_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the original model being copied.</p>
    pub fn set_source_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the original model being copied.</p>
    pub fn get_source_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_model_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the copied model.</p>
    pub fn target_model_kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_model_kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the copied model.</p>
    pub fn set_target_model_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_model_kms_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the copied model.</p>
    pub fn get_target_model_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_model_kms_key_arn
    }
    /// Appends an item to `target_model_tags`.
    ///
    /// To override the contents of this collection use [`set_target_model_tags`](Self::set_target_model_tags).
    ///
    /// <p>Tags associated with the copied model.</p>
    pub fn target_model_tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.target_model_tags.unwrap_or_default();
        v.push(input);
        self.target_model_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Tags associated with the copied model.</p>
    pub fn set_target_model_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.target_model_tags = input;
        self
    }
    /// <p>Tags associated with the copied model.</p>
    pub fn get_target_model_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.target_model_tags
    }
    /// <p>If a model fails to be copied, a message describing why the job failed is included here.</p>
    pub fn failure_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If a model fails to be copied, a message describing why the job failed is included here.</p>
    pub fn set_failure_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_message = input;
        self
    }
    /// <p>If a model fails to be copied, a message describing why the job failed is included here.</p>
    pub fn get_failure_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_message
    }
    /// <p>The name of the original model being copied.</p>
    pub fn source_model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the original model being copied.</p>
    pub fn set_source_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_model_name = input;
        self
    }
    /// <p>The name of the original model being copied.</p>
    pub fn get_source_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_model_name
    }
    /// Consumes the builder and constructs a [`ModelCopyJobSummary`](crate::types::ModelCopyJobSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`job_arn`](crate::types::builders::ModelCopyJobSummaryBuilder::job_arn)
    /// - [`status`](crate::types::builders::ModelCopyJobSummaryBuilder::status)
    /// - [`creation_time`](crate::types::builders::ModelCopyJobSummaryBuilder::creation_time)
    /// - [`target_model_arn`](crate::types::builders::ModelCopyJobSummaryBuilder::target_model_arn)
    /// - [`source_account_id`](crate::types::builders::ModelCopyJobSummaryBuilder::source_account_id)
    /// - [`source_model_arn`](crate::types::builders::ModelCopyJobSummaryBuilder::source_model_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::ModelCopyJobSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ModelCopyJobSummary {
            job_arn: self.job_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_arn",
                    "job_arn was not specified but it is required when building ModelCopyJobSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ModelCopyJobSummary",
                )
            })?,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building ModelCopyJobSummary",
                )
            })?,
            target_model_arn: self.target_model_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target_model_arn",
                    "target_model_arn was not specified but it is required when building ModelCopyJobSummary",
                )
            })?,
            target_model_name: self.target_model_name,
            source_account_id: self.source_account_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_account_id",
                    "source_account_id was not specified but it is required when building ModelCopyJobSummary",
                )
            })?,
            source_model_arn: self.source_model_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_model_arn",
                    "source_model_arn was not specified but it is required when building ModelCopyJobSummary",
                )
            })?,
            target_model_kms_key_arn: self.target_model_kms_key_arn,
            target_model_tags: self.target_model_tags,
            failure_message: self.failure_message,
            source_model_name: self.source_model_name,
        })
    }
}
