// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The filter configuration details for the guardrails contextual grounding filter.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GuardrailContextualGroundingFilterConfig {
    /// <p>The filter details for the guardrails contextual grounding filter.</p>
    pub r#type: crate::types::GuardrailContextualGroundingFilterType,
    /// <p>The threshold details for the guardrails contextual grounding filter.</p>
    pub threshold: f64,
    /// <p>Specifies the action to take when content fails the contextual grounding evaluation. Supported values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>BLOCK</code> – Block the content and replace it with blocked messaging.</p></li>
    /// <li>
    /// <p><code>NONE</code> – Take no action but return detection information in the trace response.</p></li>
    /// </ul>
    pub action: ::std::option::Option<crate::types::GuardrailContextualGroundingAction>,
    /// <p>Specifies whether to enable contextual grounding evaluation. When disabled, you aren't charged for the evaluation. The evaluation doesn't appear in the response.</p>
    pub enabled: ::std::option::Option<bool>,
}
impl GuardrailContextualGroundingFilterConfig {
    /// <p>The filter details for the guardrails contextual grounding filter.</p>
    pub fn r#type(&self) -> &crate::types::GuardrailContextualGroundingFilterType {
        &self.r#type
    }
    /// <p>The threshold details for the guardrails contextual grounding filter.</p>
    pub fn threshold(&self) -> f64 {
        self.threshold
    }
    /// <p>Specifies the action to take when content fails the contextual grounding evaluation. Supported values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>BLOCK</code> – Block the content and replace it with blocked messaging.</p></li>
    /// <li>
    /// <p><code>NONE</code> – Take no action but return detection information in the trace response.</p></li>
    /// </ul>
    pub fn action(&self) -> ::std::option::Option<&crate::types::GuardrailContextualGroundingAction> {
        self.action.as_ref()
    }
    /// <p>Specifies whether to enable contextual grounding evaluation. When disabled, you aren't charged for the evaluation. The evaluation doesn't appear in the response.</p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
}
impl ::std::fmt::Debug for GuardrailContextualGroundingFilterConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailContextualGroundingFilterConfig");
        formatter.field("r#type", &self.r#type);
        formatter.field("threshold", &self.threshold);
        formatter.field("action", &"*** Sensitive Data Redacted ***");
        formatter.field("enabled", &self.enabled);
        formatter.finish()
    }
}
impl GuardrailContextualGroundingFilterConfig {
    /// Creates a new builder-style object to manufacture [`GuardrailContextualGroundingFilterConfig`](crate::types::GuardrailContextualGroundingFilterConfig).
    pub fn builder() -> crate::types::builders::GuardrailContextualGroundingFilterConfigBuilder {
        crate::types::builders::GuardrailContextualGroundingFilterConfigBuilder::default()
    }
}

/// A builder for [`GuardrailContextualGroundingFilterConfig`](crate::types::GuardrailContextualGroundingFilterConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GuardrailContextualGroundingFilterConfigBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::GuardrailContextualGroundingFilterType>,
    pub(crate) threshold: ::std::option::Option<f64>,
    pub(crate) action: ::std::option::Option<crate::types::GuardrailContextualGroundingAction>,
    pub(crate) enabled: ::std::option::Option<bool>,
}
impl GuardrailContextualGroundingFilterConfigBuilder {
    /// <p>The filter details for the guardrails contextual grounding filter.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::GuardrailContextualGroundingFilterType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The filter details for the guardrails contextual grounding filter.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::GuardrailContextualGroundingFilterType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The filter details for the guardrails contextual grounding filter.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::GuardrailContextualGroundingFilterType> {
        &self.r#type
    }
    /// <p>The threshold details for the guardrails contextual grounding filter.</p>
    /// This field is required.
    pub fn threshold(mut self, input: f64) -> Self {
        self.threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>The threshold details for the guardrails contextual grounding filter.</p>
    pub fn set_threshold(mut self, input: ::std::option::Option<f64>) -> Self {
        self.threshold = input;
        self
    }
    /// <p>The threshold details for the guardrails contextual grounding filter.</p>
    pub fn get_threshold(&self) -> &::std::option::Option<f64> {
        &self.threshold
    }
    /// <p>Specifies the action to take when content fails the contextual grounding evaluation. Supported values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>BLOCK</code> – Block the content and replace it with blocked messaging.</p></li>
    /// <li>
    /// <p><code>NONE</code> – Take no action but return detection information in the trace response.</p></li>
    /// </ul>
    pub fn action(mut self, input: crate::types::GuardrailContextualGroundingAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the action to take when content fails the contextual grounding evaluation. Supported values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>BLOCK</code> – Block the content and replace it with blocked messaging.</p></li>
    /// <li>
    /// <p><code>NONE</code> – Take no action but return detection information in the trace response.</p></li>
    /// </ul>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::GuardrailContextualGroundingAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>Specifies the action to take when content fails the contextual grounding evaluation. Supported values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>BLOCK</code> – Block the content and replace it with blocked messaging.</p></li>
    /// <li>
    /// <p><code>NONE</code> – Take no action but return detection information in the trace response.</p></li>
    /// </ul>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::GuardrailContextualGroundingAction> {
        &self.action
    }
    /// <p>Specifies whether to enable contextual grounding evaluation. When disabled, you aren't charged for the evaluation. The evaluation doesn't appear in the response.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to enable contextual grounding evaluation. When disabled, you aren't charged for the evaluation. The evaluation doesn't appear in the response.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Specifies whether to enable contextual grounding evaluation. When disabled, you aren't charged for the evaluation. The evaluation doesn't appear in the response.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// Consumes the builder and constructs a [`GuardrailContextualGroundingFilterConfig`](crate::types::GuardrailContextualGroundingFilterConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::GuardrailContextualGroundingFilterConfigBuilder::type)
    /// - [`threshold`](crate::types::builders::GuardrailContextualGroundingFilterConfigBuilder::threshold)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::GuardrailContextualGroundingFilterConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GuardrailContextualGroundingFilterConfig {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building GuardrailContextualGroundingFilterConfig",
                )
            })?,
            threshold: self.threshold.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "threshold",
                    "threshold was not specified but it is required when building GuardrailContextualGroundingFilterConfig",
                )
            })?,
            action: self.action,
            enabled: self.enabled,
        })
    }
}
impl ::std::fmt::Debug for GuardrailContextualGroundingFilterConfigBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailContextualGroundingFilterConfigBuilder");
        formatter.field("r#type", &self.r#type);
        formatter.field("threshold", &self.threshold);
        formatter.field("action", &"*** Sensitive Data Redacted ***");
        formatter.field("enabled", &self.enabled);
        formatter.finish()
    }
}
