// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a prompt router.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PromptRouterSummary {
    /// <p>The router's name.</p>
    pub prompt_router_name: ::std::string::String,
    /// <p>The router's routing criteria.</p>
    pub routing_criteria: ::std::option::Option<crate::types::RoutingCriteria>,
    /// <p>The router's description.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>When the router was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>When the router was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The router's ARN.</p>
    pub prompt_router_arn: ::std::string::String,
    /// <p>The router's models.</p>
    pub models: ::std::vec::Vec<crate::types::PromptRouterTargetModel>,
    /// <p>The router's fallback model.</p>
    pub fallback_model: ::std::option::Option<crate::types::PromptRouterTargetModel>,
    /// <p>The router's status.</p>
    pub status: crate::types::PromptRouterStatus,
    /// <p>The summary's type.</p>
    pub r#type: crate::types::PromptRouterType,
}
impl PromptRouterSummary {
    /// <p>The router's name.</p>
    pub fn prompt_router_name(&self) -> &str {
        use std::ops::Deref;
        self.prompt_router_name.deref()
    }
    /// <p>The router's routing criteria.</p>
    pub fn routing_criteria(&self) -> ::std::option::Option<&crate::types::RoutingCriteria> {
        self.routing_criteria.as_ref()
    }
    /// <p>The router's description.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>When the router was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>When the router was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The router's ARN.</p>
    pub fn prompt_router_arn(&self) -> &str {
        use std::ops::Deref;
        self.prompt_router_arn.deref()
    }
    /// <p>The router's models.</p>
    pub fn models(&self) -> &[crate::types::PromptRouterTargetModel] {
        use std::ops::Deref;
        self.models.deref()
    }
    /// <p>The router's fallback model.</p>
    pub fn fallback_model(&self) -> ::std::option::Option<&crate::types::PromptRouterTargetModel> {
        self.fallback_model.as_ref()
    }
    /// <p>The router's status.</p>
    pub fn status(&self) -> &crate::types::PromptRouterStatus {
        &self.status
    }
    /// <p>The summary's type.</p>
    pub fn r#type(&self) -> &crate::types::PromptRouterType {
        &self.r#type
    }
}
impl ::std::fmt::Debug for PromptRouterSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PromptRouterSummary");
        formatter.field("prompt_router_name", &self.prompt_router_name);
        formatter.field("routing_criteria", &self.routing_criteria);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("prompt_router_arn", &self.prompt_router_arn);
        formatter.field("models", &self.models);
        formatter.field("fallback_model", &self.fallback_model);
        formatter.field("status", &self.status);
        formatter.field("r#type", &self.r#type);
        formatter.finish()
    }
}
impl PromptRouterSummary {
    /// Creates a new builder-style object to manufacture [`PromptRouterSummary`](crate::types::PromptRouterSummary).
    pub fn builder() -> crate::types::builders::PromptRouterSummaryBuilder {
        crate::types::builders::PromptRouterSummaryBuilder::default()
    }
}

/// A builder for [`PromptRouterSummary`](crate::types::PromptRouterSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct PromptRouterSummaryBuilder {
    pub(crate) prompt_router_name: ::std::option::Option<::std::string::String>,
    pub(crate) routing_criteria: ::std::option::Option<crate::types::RoutingCriteria>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) prompt_router_arn: ::std::option::Option<::std::string::String>,
    pub(crate) models: ::std::option::Option<::std::vec::Vec<crate::types::PromptRouterTargetModel>>,
    pub(crate) fallback_model: ::std::option::Option<crate::types::PromptRouterTargetModel>,
    pub(crate) status: ::std::option::Option<crate::types::PromptRouterStatus>,
    pub(crate) r#type: ::std::option::Option<crate::types::PromptRouterType>,
}
impl PromptRouterSummaryBuilder {
    /// <p>The router's name.</p>
    /// This field is required.
    pub fn prompt_router_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prompt_router_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The router's name.</p>
    pub fn set_prompt_router_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prompt_router_name = input;
        self
    }
    /// <p>The router's name.</p>
    pub fn get_prompt_router_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.prompt_router_name
    }
    /// <p>The router's routing criteria.</p>
    /// This field is required.
    pub fn routing_criteria(mut self, input: crate::types::RoutingCriteria) -> Self {
        self.routing_criteria = ::std::option::Option::Some(input);
        self
    }
    /// <p>The router's routing criteria.</p>
    pub fn set_routing_criteria(mut self, input: ::std::option::Option<crate::types::RoutingCriteria>) -> Self {
        self.routing_criteria = input;
        self
    }
    /// <p>The router's routing criteria.</p>
    pub fn get_routing_criteria(&self) -> &::std::option::Option<crate::types::RoutingCriteria> {
        &self.routing_criteria
    }
    /// <p>The router's description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The router's description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The router's description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>When the router was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the router was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>When the router was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>When the router was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the router was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>When the router was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The router's ARN.</p>
    /// This field is required.
    pub fn prompt_router_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prompt_router_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The router's ARN.</p>
    pub fn set_prompt_router_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prompt_router_arn = input;
        self
    }
    /// <p>The router's ARN.</p>
    pub fn get_prompt_router_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.prompt_router_arn
    }
    /// Appends an item to `models`.
    ///
    /// To override the contents of this collection use [`set_models`](Self::set_models).
    ///
    /// <p>The router's models.</p>
    pub fn models(mut self, input: crate::types::PromptRouterTargetModel) -> Self {
        let mut v = self.models.unwrap_or_default();
        v.push(input);
        self.models = ::std::option::Option::Some(v);
        self
    }
    /// <p>The router's models.</p>
    pub fn set_models(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PromptRouterTargetModel>>) -> Self {
        self.models = input;
        self
    }
    /// <p>The router's models.</p>
    pub fn get_models(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PromptRouterTargetModel>> {
        &self.models
    }
    /// <p>The router's fallback model.</p>
    /// This field is required.
    pub fn fallback_model(mut self, input: crate::types::PromptRouterTargetModel) -> Self {
        self.fallback_model = ::std::option::Option::Some(input);
        self
    }
    /// <p>The router's fallback model.</p>
    pub fn set_fallback_model(mut self, input: ::std::option::Option<crate::types::PromptRouterTargetModel>) -> Self {
        self.fallback_model = input;
        self
    }
    /// <p>The router's fallback model.</p>
    pub fn get_fallback_model(&self) -> &::std::option::Option<crate::types::PromptRouterTargetModel> {
        &self.fallback_model
    }
    /// <p>The router's status.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::PromptRouterStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The router's status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::PromptRouterStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The router's status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::PromptRouterStatus> {
        &self.status
    }
    /// <p>The summary's type.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::PromptRouterType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The summary's type.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::PromptRouterType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The summary's type.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::PromptRouterType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`PromptRouterSummary`](crate::types::PromptRouterSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`prompt_router_name`](crate::types::builders::PromptRouterSummaryBuilder::prompt_router_name)
    /// - [`prompt_router_arn`](crate::types::builders::PromptRouterSummaryBuilder::prompt_router_arn)
    /// - [`models`](crate::types::builders::PromptRouterSummaryBuilder::models)
    /// - [`status`](crate::types::builders::PromptRouterSummaryBuilder::status)
    /// - [`r#type`](crate::types::builders::PromptRouterSummaryBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::PromptRouterSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PromptRouterSummary {
            prompt_router_name: self.prompt_router_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "prompt_router_name",
                    "prompt_router_name was not specified but it is required when building PromptRouterSummary",
                )
            })?,
            routing_criteria: self.routing_criteria,
            description: self.description,
            created_at: self.created_at,
            updated_at: self.updated_at,
            prompt_router_arn: self.prompt_router_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "prompt_router_arn",
                    "prompt_router_arn was not specified but it is required when building PromptRouterSummary",
                )
            })?,
            models: self.models.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "models",
                    "models was not specified but it is required when building PromptRouterSummary",
                )
            })?,
            fallback_model: self.fallback_model,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building PromptRouterSummary",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building PromptRouterSummary",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for PromptRouterSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PromptRouterSummaryBuilder");
        formatter.field("prompt_router_name", &self.prompt_router_name);
        formatter.field("routing_criteria", &self.routing_criteria);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("prompt_router_arn", &self.prompt_router_arn);
        formatter.field("models", &self.models);
        formatter.field("fallback_model", &self.fallback_model);
        formatter.field("status", &self.status);
        formatter.field("r#type", &self.r#type);
        formatter.finish()
    }
}
