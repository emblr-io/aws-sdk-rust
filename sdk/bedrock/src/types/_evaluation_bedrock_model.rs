// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the ARN of the Amazon Bedrock model or <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html">inference profile</a> specified in your evaluation job. Each Amazon Bedrock model supports different <code>inferenceParams</code>. To learn more about supported inference parameters for Amazon Bedrock models, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters.html">Inference parameters for foundation models</a>.</p>
/// <p>The <code>inferenceParams</code> are specified using JSON. To successfully insert JSON as string make sure that all quotations are properly escaped. For example, <code>"temperature":"0.25"</code> key value pair would need to be formatted as <code>\"temperature\":\"0.25\"</code> to successfully accepted in the request.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EvaluationBedrockModel {
    /// <p>The ARN of the Amazon Bedrock model or inference profile specified.</p>
    pub model_identifier: ::std::string::String,
    /// <p>Each Amazon Bedrock support different inference parameters that change how the model behaves during inference.</p>
    pub inference_params: ::std::string::String,
    /// <p>Specifies performance settings for the model or inference profile.</p>
    pub performance_config: ::std::option::Option<crate::types::PerformanceConfiguration>,
}
impl EvaluationBedrockModel {
    /// <p>The ARN of the Amazon Bedrock model or inference profile specified.</p>
    pub fn model_identifier(&self) -> &str {
        use std::ops::Deref;
        self.model_identifier.deref()
    }
    /// <p>Each Amazon Bedrock support different inference parameters that change how the model behaves during inference.</p>
    pub fn inference_params(&self) -> &str {
        use std::ops::Deref;
        self.inference_params.deref()
    }
    /// <p>Specifies performance settings for the model or inference profile.</p>
    pub fn performance_config(&self) -> ::std::option::Option<&crate::types::PerformanceConfiguration> {
        self.performance_config.as_ref()
    }
}
impl ::std::fmt::Debug for EvaluationBedrockModel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EvaluationBedrockModel");
        formatter.field("model_identifier", &self.model_identifier);
        formatter.field("inference_params", &"*** Sensitive Data Redacted ***");
        formatter.field("performance_config", &self.performance_config);
        formatter.finish()
    }
}
impl EvaluationBedrockModel {
    /// Creates a new builder-style object to manufacture [`EvaluationBedrockModel`](crate::types::EvaluationBedrockModel).
    pub fn builder() -> crate::types::builders::EvaluationBedrockModelBuilder {
        crate::types::builders::EvaluationBedrockModelBuilder::default()
    }
}

/// A builder for [`EvaluationBedrockModel`](crate::types::EvaluationBedrockModel).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct EvaluationBedrockModelBuilder {
    pub(crate) model_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) inference_params: ::std::option::Option<::std::string::String>,
    pub(crate) performance_config: ::std::option::Option<crate::types::PerformanceConfiguration>,
}
impl EvaluationBedrockModelBuilder {
    /// <p>The ARN of the Amazon Bedrock model or inference profile specified.</p>
    /// This field is required.
    pub fn model_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Amazon Bedrock model or inference profile specified.</p>
    pub fn set_model_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_identifier = input;
        self
    }
    /// <p>The ARN of the Amazon Bedrock model or inference profile specified.</p>
    pub fn get_model_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_identifier
    }
    /// <p>Each Amazon Bedrock support different inference parameters that change how the model behaves during inference.</p>
    pub fn inference_params(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inference_params = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Each Amazon Bedrock support different inference parameters that change how the model behaves during inference.</p>
    pub fn set_inference_params(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inference_params = input;
        self
    }
    /// <p>Each Amazon Bedrock support different inference parameters that change how the model behaves during inference.</p>
    pub fn get_inference_params(&self) -> &::std::option::Option<::std::string::String> {
        &self.inference_params
    }
    /// <p>Specifies performance settings for the model or inference profile.</p>
    pub fn performance_config(mut self, input: crate::types::PerformanceConfiguration) -> Self {
        self.performance_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies performance settings for the model or inference profile.</p>
    pub fn set_performance_config(mut self, input: ::std::option::Option<crate::types::PerformanceConfiguration>) -> Self {
        self.performance_config = input;
        self
    }
    /// <p>Specifies performance settings for the model or inference profile.</p>
    pub fn get_performance_config(&self) -> &::std::option::Option<crate::types::PerformanceConfiguration> {
        &self.performance_config
    }
    /// Consumes the builder and constructs a [`EvaluationBedrockModel`](crate::types::EvaluationBedrockModel).
    /// This method will fail if any of the following fields are not set:
    /// - [`model_identifier`](crate::types::builders::EvaluationBedrockModelBuilder::model_identifier)
    pub fn build(self) -> ::std::result::Result<crate::types::EvaluationBedrockModel, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EvaluationBedrockModel {
            model_identifier: self.model_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "model_identifier",
                    "model_identifier was not specified but it is required when building EvaluationBedrockModel",
                )
            })?,
            inference_params: self.inference_params.unwrap_or_else(|| "{}".to_owned()),
            performance_config: self.performance_config,
        })
    }
}
impl ::std::fmt::Debug for EvaluationBedrockModelBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EvaluationBedrockModelBuilder");
        formatter.field("model_identifier", &self.model_identifier);
        formatter.field("inference_params", &"*** Sensitive Data Redacted ***");
        formatter.field("performance_config", &self.performance_config);
        formatter.finish()
    }
}
