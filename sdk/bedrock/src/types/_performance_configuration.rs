// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains performance settings for a model.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PerformanceConfiguration {
    /// <p>Specifies whether to use the latency-optimized or standard version of a model or inference profile.</p>
    pub latency: ::std::option::Option<crate::types::PerformanceConfigLatency>,
}
impl PerformanceConfiguration {
    /// <p>Specifies whether to use the latency-optimized or standard version of a model or inference profile.</p>
    pub fn latency(&self) -> ::std::option::Option<&crate::types::PerformanceConfigLatency> {
        self.latency.as_ref()
    }
}
impl PerformanceConfiguration {
    /// Creates a new builder-style object to manufacture [`PerformanceConfiguration`](crate::types::PerformanceConfiguration).
    pub fn builder() -> crate::types::builders::PerformanceConfigurationBuilder {
        crate::types::builders::PerformanceConfigurationBuilder::default()
    }
}

/// A builder for [`PerformanceConfiguration`](crate::types::PerformanceConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PerformanceConfigurationBuilder {
    pub(crate) latency: ::std::option::Option<crate::types::PerformanceConfigLatency>,
}
impl PerformanceConfigurationBuilder {
    /// <p>Specifies whether to use the latency-optimized or standard version of a model or inference profile.</p>
    pub fn latency(mut self, input: crate::types::PerformanceConfigLatency) -> Self {
        self.latency = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to use the latency-optimized or standard version of a model or inference profile.</p>
    pub fn set_latency(mut self, input: ::std::option::Option<crate::types::PerformanceConfigLatency>) -> Self {
        self.latency = input;
        self
    }
    /// <p>Specifies whether to use the latency-optimized or standard version of a model or inference profile.</p>
    pub fn get_latency(&self) -> &::std::option::Option<crate::types::PerformanceConfigLatency> {
        &self.latency
    }
    /// Consumes the builder and constructs a [`PerformanceConfiguration`](crate::types::PerformanceConfiguration).
    pub fn build(self) -> crate::types::PerformanceConfiguration {
        crate::types::PerformanceConfiguration { latency: self.latency }
    }
}
