// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Rules for filtering invocation logs. A filter can be a mapping of a metadata key to a value that it should or should not equal (a base filter), or a list of base filters that are all applied with <code>AND</code> or <code>OR</code> logical operators</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub enum RequestMetadataFilters {
    /// <p>Include results where all of the based filters match.</p>
    AndAll(::std::vec::Vec<crate::types::RequestMetadataBaseFilters>),
    /// <p>Include results where the key equals the value.</p>
    Equals(::std::collections::HashMap<::std::string::String, ::std::string::String>),
    /// <p>Include results where the key does not equal the value.</p>
    NotEquals(::std::collections::HashMap<::std::string::String, ::std::string::String>),
    /// <p>Include results where any of the base filters match.</p>
    OrAll(::std::vec::Vec<crate::types::RequestMetadataBaseFilters>),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl RequestMetadataFilters {
    /// Tries to convert the enum instance into [`AndAll`](crate::types::RequestMetadataFilters::AndAll), extracting the inner [`Vec`](::std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_and_all(&self) -> ::std::result::Result<&::std::vec::Vec<crate::types::RequestMetadataBaseFilters>, &Self> {
        if let RequestMetadataFilters::AndAll(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AndAll`](crate::types::RequestMetadataFilters::AndAll).
    pub fn is_and_all(&self) -> bool {
        self.as_and_all().is_ok()
    }
    /// Tries to convert the enum instance into [`Equals`](crate::types::RequestMetadataFilters::Equals), extracting the inner [`HashMap`](::std::collections::HashMap).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_equals(&self) -> ::std::result::Result<&::std::collections::HashMap<::std::string::String, ::std::string::String>, &Self> {
        if let RequestMetadataFilters::Equals(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Equals`](crate::types::RequestMetadataFilters::Equals).
    pub fn is_equals(&self) -> bool {
        self.as_equals().is_ok()
    }
    /// Tries to convert the enum instance into [`NotEquals`](crate::types::RequestMetadataFilters::NotEquals), extracting the inner [`HashMap`](::std::collections::HashMap).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_not_equals(&self) -> ::std::result::Result<&::std::collections::HashMap<::std::string::String, ::std::string::String>, &Self> {
        if let RequestMetadataFilters::NotEquals(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`NotEquals`](crate::types::RequestMetadataFilters::NotEquals).
    pub fn is_not_equals(&self) -> bool {
        self.as_not_equals().is_ok()
    }
    /// Tries to convert the enum instance into [`OrAll`](crate::types::RequestMetadataFilters::OrAll), extracting the inner [`Vec`](::std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_or_all(&self) -> ::std::result::Result<&::std::vec::Vec<crate::types::RequestMetadataBaseFilters>, &Self> {
        if let RequestMetadataFilters::OrAll(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`OrAll`](crate::types::RequestMetadataFilters::OrAll).
    pub fn is_or_all(&self) -> bool {
        self.as_or_all().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
impl ::std::fmt::Debug for RequestMetadataFilters {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            RequestMetadataFilters::AndAll(val) => f.debug_tuple("AndAll").field(&val).finish(),
            RequestMetadataFilters::Equals(_) => f.debug_tuple("*** Sensitive Data Redacted ***").finish(),
            RequestMetadataFilters::NotEquals(_) => f.debug_tuple("*** Sensitive Data Redacted ***").finish(),
            RequestMetadataFilters::OrAll(val) => f.debug_tuple("OrAll").field(&val).finish(),
            RequestMetadataFilters::Unknown => f.debug_tuple("Unknown").finish(),
        }
    }
}
