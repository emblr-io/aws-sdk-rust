// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition of a custom metric for use in an Amazon Bedrock evaluation job. A custom metric definition includes a metric name, prompt (instructions) and optionally, a rating scale. Your prompt must include a task description and input variables. The required input variables are different for model-as-a-judge and RAG evaluations.</p>
/// <p>For more information about how to define a custom metric in Amazon Bedrock, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-evaluation-custom-metrics-prompt-formats.html">Create a prompt for a custom metrics (LLM-as-a-judge model evaluations)</a> and <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/kb-evaluation-custom-metrics-prompt-formats.html">Create a prompt for a custom metrics (RAG evaluations)</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CustomMetricDefinition {
    /// <p>The name for a custom metric. Names must be unique in your Amazon Web Services region.</p>
    pub name: ::std::string::String,
    /// <p>The prompt for a custom metric that instructs the evaluator model how to rate the model or RAG source under evaluation.</p>
    pub instructions: ::std::string::String,
    /// <p>Defines the rating scale to be used for a custom metric. We recommend that you always define a ratings scale when creating a custom metric. If you don't define a scale, Amazon Bedrock won't be able to visually display the results of the evaluation in the console or calculate average values of numerical scores. For more information on specifying a rating scale, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-evaluation-custom-metrics-prompt-formats.html#model-evaluation-custom-metrics-prompt-formats-schema">Specifying an output schema (rating scale)</a>.</p>
    pub rating_scale: ::std::option::Option<::std::vec::Vec<crate::types::RatingScaleItem>>,
}
impl CustomMetricDefinition {
    /// <p>The name for a custom metric. Names must be unique in your Amazon Web Services region.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The prompt for a custom metric that instructs the evaluator model how to rate the model or RAG source under evaluation.</p>
    pub fn instructions(&self) -> &str {
        use std::ops::Deref;
        self.instructions.deref()
    }
    /// <p>Defines the rating scale to be used for a custom metric. We recommend that you always define a ratings scale when creating a custom metric. If you don't define a scale, Amazon Bedrock won't be able to visually display the results of the evaluation in the console or calculate average values of numerical scores. For more information on specifying a rating scale, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-evaluation-custom-metrics-prompt-formats.html#model-evaluation-custom-metrics-prompt-formats-schema">Specifying an output schema (rating scale)</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rating_scale.is_none()`.
    pub fn rating_scale(&self) -> &[crate::types::RatingScaleItem] {
        self.rating_scale.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for CustomMetricDefinition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CustomMetricDefinition");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("instructions", &"*** Sensitive Data Redacted ***");
        formatter.field("rating_scale", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CustomMetricDefinition {
    /// Creates a new builder-style object to manufacture [`CustomMetricDefinition`](crate::types::CustomMetricDefinition).
    pub fn builder() -> crate::types::builders::CustomMetricDefinitionBuilder {
        crate::types::builders::CustomMetricDefinitionBuilder::default()
    }
}

/// A builder for [`CustomMetricDefinition`](crate::types::CustomMetricDefinition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CustomMetricDefinitionBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) instructions: ::std::option::Option<::std::string::String>,
    pub(crate) rating_scale: ::std::option::Option<::std::vec::Vec<crate::types::RatingScaleItem>>,
}
impl CustomMetricDefinitionBuilder {
    /// <p>The name for a custom metric. Names must be unique in your Amazon Web Services region.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for a custom metric. Names must be unique in your Amazon Web Services region.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name for a custom metric. Names must be unique in your Amazon Web Services region.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The prompt for a custom metric that instructs the evaluator model how to rate the model or RAG source under evaluation.</p>
    /// This field is required.
    pub fn instructions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instructions = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The prompt for a custom metric that instructs the evaluator model how to rate the model or RAG source under evaluation.</p>
    pub fn set_instructions(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instructions = input;
        self
    }
    /// <p>The prompt for a custom metric that instructs the evaluator model how to rate the model or RAG source under evaluation.</p>
    pub fn get_instructions(&self) -> &::std::option::Option<::std::string::String> {
        &self.instructions
    }
    /// Appends an item to `rating_scale`.
    ///
    /// To override the contents of this collection use [`set_rating_scale`](Self::set_rating_scale).
    ///
    /// <p>Defines the rating scale to be used for a custom metric. We recommend that you always define a ratings scale when creating a custom metric. If you don't define a scale, Amazon Bedrock won't be able to visually display the results of the evaluation in the console or calculate average values of numerical scores. For more information on specifying a rating scale, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-evaluation-custom-metrics-prompt-formats.html#model-evaluation-custom-metrics-prompt-formats-schema">Specifying an output schema (rating scale)</a>.</p>
    pub fn rating_scale(mut self, input: crate::types::RatingScaleItem) -> Self {
        let mut v = self.rating_scale.unwrap_or_default();
        v.push(input);
        self.rating_scale = ::std::option::Option::Some(v);
        self
    }
    /// <p>Defines the rating scale to be used for a custom metric. We recommend that you always define a ratings scale when creating a custom metric. If you don't define a scale, Amazon Bedrock won't be able to visually display the results of the evaluation in the console or calculate average values of numerical scores. For more information on specifying a rating scale, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-evaluation-custom-metrics-prompt-formats.html#model-evaluation-custom-metrics-prompt-formats-schema">Specifying an output schema (rating scale)</a>.</p>
    pub fn set_rating_scale(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RatingScaleItem>>) -> Self {
        self.rating_scale = input;
        self
    }
    /// <p>Defines the rating scale to be used for a custom metric. We recommend that you always define a ratings scale when creating a custom metric. If you don't define a scale, Amazon Bedrock won't be able to visually display the results of the evaluation in the console or calculate average values of numerical scores. For more information on specifying a rating scale, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-evaluation-custom-metrics-prompt-formats.html#model-evaluation-custom-metrics-prompt-formats-schema">Specifying an output schema (rating scale)</a>.</p>
    pub fn get_rating_scale(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RatingScaleItem>> {
        &self.rating_scale
    }
    /// Consumes the builder and constructs a [`CustomMetricDefinition`](crate::types::CustomMetricDefinition).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::CustomMetricDefinitionBuilder::name)
    /// - [`instructions`](crate::types::builders::CustomMetricDefinitionBuilder::instructions)
    pub fn build(self) -> ::std::result::Result<crate::types::CustomMetricDefinition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CustomMetricDefinition {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CustomMetricDefinition",
                )
            })?,
            instructions: self.instructions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "instructions",
                    "instructions was not specified but it is required when building CustomMetricDefinition",
                )
            })?,
            rating_scale: self.rating_scale,
        })
    }
}
impl ::std::fmt::Debug for CustomMetricDefinitionBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CustomMetricDefinitionBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("instructions", &"*** Sensitive Data Redacted ***");
        formatter.field("rating_scale", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
