// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>For a Distillation job, the status details for sub-tasks of the job. Possible statuses for each sub-task include the following:</p>
/// <ul>
/// <li>
/// <p>NotStarted</p></li>
/// <li>
/// <p>InProgress</p></li>
/// <li>
/// <p>Completed</p></li>
/// <li>
/// <p>Stopping</p></li>
/// <li>
/// <p>Stopped</p></li>
/// <li>
/// <p>Failed</p></li>
/// </ul>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StatusDetails {
    /// <p>The status details for the validation sub-task of the job.</p>
    pub validation_details: ::std::option::Option<crate::types::ValidationDetails>,
    /// <p>The status details for the data processing sub-task of the job.</p>
    pub data_processing_details: ::std::option::Option<crate::types::DataProcessingDetails>,
    /// <p>The status details for the training sub-task of the job.</p>
    pub training_details: ::std::option::Option<crate::types::TrainingDetails>,
}
impl StatusDetails {
    /// <p>The status details for the validation sub-task of the job.</p>
    pub fn validation_details(&self) -> ::std::option::Option<&crate::types::ValidationDetails> {
        self.validation_details.as_ref()
    }
    /// <p>The status details for the data processing sub-task of the job.</p>
    pub fn data_processing_details(&self) -> ::std::option::Option<&crate::types::DataProcessingDetails> {
        self.data_processing_details.as_ref()
    }
    /// <p>The status details for the training sub-task of the job.</p>
    pub fn training_details(&self) -> ::std::option::Option<&crate::types::TrainingDetails> {
        self.training_details.as_ref()
    }
}
impl StatusDetails {
    /// Creates a new builder-style object to manufacture [`StatusDetails`](crate::types::StatusDetails).
    pub fn builder() -> crate::types::builders::StatusDetailsBuilder {
        crate::types::builders::StatusDetailsBuilder::default()
    }
}

/// A builder for [`StatusDetails`](crate::types::StatusDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StatusDetailsBuilder {
    pub(crate) validation_details: ::std::option::Option<crate::types::ValidationDetails>,
    pub(crate) data_processing_details: ::std::option::Option<crate::types::DataProcessingDetails>,
    pub(crate) training_details: ::std::option::Option<crate::types::TrainingDetails>,
}
impl StatusDetailsBuilder {
    /// <p>The status details for the validation sub-task of the job.</p>
    pub fn validation_details(mut self, input: crate::types::ValidationDetails) -> Self {
        self.validation_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status details for the validation sub-task of the job.</p>
    pub fn set_validation_details(mut self, input: ::std::option::Option<crate::types::ValidationDetails>) -> Self {
        self.validation_details = input;
        self
    }
    /// <p>The status details for the validation sub-task of the job.</p>
    pub fn get_validation_details(&self) -> &::std::option::Option<crate::types::ValidationDetails> {
        &self.validation_details
    }
    /// <p>The status details for the data processing sub-task of the job.</p>
    pub fn data_processing_details(mut self, input: crate::types::DataProcessingDetails) -> Self {
        self.data_processing_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status details for the data processing sub-task of the job.</p>
    pub fn set_data_processing_details(mut self, input: ::std::option::Option<crate::types::DataProcessingDetails>) -> Self {
        self.data_processing_details = input;
        self
    }
    /// <p>The status details for the data processing sub-task of the job.</p>
    pub fn get_data_processing_details(&self) -> &::std::option::Option<crate::types::DataProcessingDetails> {
        &self.data_processing_details
    }
    /// <p>The status details for the training sub-task of the job.</p>
    pub fn training_details(mut self, input: crate::types::TrainingDetails) -> Self {
        self.training_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status details for the training sub-task of the job.</p>
    pub fn set_training_details(mut self, input: ::std::option::Option<crate::types::TrainingDetails>) -> Self {
        self.training_details = input;
        self
    }
    /// <p>The status details for the training sub-task of the job.</p>
    pub fn get_training_details(&self) -> &::std::option::Option<crate::types::TrainingDetails> {
        &self.training_details
    }
    /// Consumes the builder and constructs a [`StatusDetails`](crate::types::StatusDetails).
    pub fn build(self) -> crate::types::StatusDetails {
        crate::types::StatusDetails {
            validation_details: self.validation_details,
            data_processing_details: self.data_processing_details,
            training_details: self.training_details,
        }
    }
}
