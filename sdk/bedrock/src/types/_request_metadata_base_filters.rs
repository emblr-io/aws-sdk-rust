// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A mapping of a metadata key to a value that it should or should not equal.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RequestMetadataBaseFilters {
    /// <p>Include results where the key equals the value.</p>
    pub equals: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Include results where the key does not equal the value.</p>
    pub not_equals: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl RequestMetadataBaseFilters {
    /// <p>Include results where the key equals the value.</p>
    pub fn equals(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.equals.as_ref()
    }
    /// <p>Include results where the key does not equal the value.</p>
    pub fn not_equals(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.not_equals.as_ref()
    }
}
impl ::std::fmt::Debug for RequestMetadataBaseFilters {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RequestMetadataBaseFilters");
        formatter.field("equals", &"*** Sensitive Data Redacted ***");
        formatter.field("not_equals", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RequestMetadataBaseFilters {
    /// Creates a new builder-style object to manufacture [`RequestMetadataBaseFilters`](crate::types::RequestMetadataBaseFilters).
    pub fn builder() -> crate::types::builders::RequestMetadataBaseFiltersBuilder {
        crate::types::builders::RequestMetadataBaseFiltersBuilder::default()
    }
}

/// A builder for [`RequestMetadataBaseFilters`](crate::types::RequestMetadataBaseFilters).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RequestMetadataBaseFiltersBuilder {
    pub(crate) equals: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) not_equals: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl RequestMetadataBaseFiltersBuilder {
    /// Adds a key-value pair to `equals`.
    ///
    /// To override the contents of this collection use [`set_equals`](Self::set_equals).
    ///
    /// <p>Include results where the key equals the value.</p>
    pub fn equals(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.equals.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.equals = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Include results where the key equals the value.</p>
    pub fn set_equals(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.equals = input;
        self
    }
    /// <p>Include results where the key equals the value.</p>
    pub fn get_equals(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.equals
    }
    /// Adds a key-value pair to `not_equals`.
    ///
    /// To override the contents of this collection use [`set_not_equals`](Self::set_not_equals).
    ///
    /// <p>Include results where the key does not equal the value.</p>
    pub fn not_equals(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.not_equals.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.not_equals = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Include results where the key does not equal the value.</p>
    pub fn set_not_equals(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.not_equals = input;
        self
    }
    /// <p>Include results where the key does not equal the value.</p>
    pub fn get_not_equals(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.not_equals
    }
    /// Consumes the builder and constructs a [`RequestMetadataBaseFilters`](crate::types::RequestMetadataBaseFilters).
    pub fn build(self) -> crate::types::RequestMetadataBaseFilters {
        crate::types::RequestMetadataBaseFilters {
            equals: self.equals,
            not_equals: self.not_equals,
        }
    }
}
impl ::std::fmt::Debug for RequestMetadataBaseFiltersBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RequestMetadataBaseFiltersBuilder");
        formatter.field("equals", &"*** Sensitive Data Redacted ***");
        formatter.field("not_equals", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
