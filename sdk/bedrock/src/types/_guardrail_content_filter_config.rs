// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains filter strengths for harmful content. Guardrails support the following content filters to detect and filter harmful user inputs and FM-generated outputs.</p>
/// <ul>
/// <li>
/// <p><b>Hate</b> – Describes language or a statement that discriminates, criticizes, insults, denounces, or dehumanizes a person or group on the basis of an identity (such as race, ethnicity, gender, religion, sexual orientation, ability, and national origin).</p></li>
/// <li>
/// <p><b>Insults</b> – Describes language or a statement that includes demeaning, humiliating, mocking, insulting, or belittling language. This type of language is also labeled as bullying.</p></li>
/// <li>
/// <p><b>Sexual</b> – Describes language or a statement that indicates sexual interest, activity, or arousal using direct or indirect references to body parts, physical traits, or sex.</p></li>
/// <li>
/// <p><b>Violence</b> – Describes language or a statement that includes glorification of or threats to inflict physical pain, hurt, or injury toward a person, group or thing.</p></li>
/// </ul>
/// <p>Content filtering depends on the confidence classification of user inputs and FM responses across each of the four harmful categories. All input and output statements are classified into one of four confidence levels (NONE, LOW, MEDIUM, HIGH) for each harmful category. For example, if a statement is classified as <i>Hate</i> with HIGH confidence, the likelihood of the statement representing hateful content is high. A single statement can be classified across multiple categories with varying confidence levels. For example, a single statement can be classified as <i>Hate</i> with HIGH confidence, <i>Insults</i> with LOW confidence, <i>Sexual</i> with NONE confidence, and <i>Violence</i> with MEDIUM confidence.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/guardrails-filters.html">Guardrails content filters</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GuardrailContentFilterConfig {
    /// <p>The harmful category that the content filter is applied to.</p>
    pub r#type: crate::types::GuardrailContentFilterType,
    /// <p>The strength of the content filter to apply to prompts. As you increase the filter strength, the likelihood of filtering harmful content increases and the probability of seeing harmful content in your application reduces.</p>
    pub input_strength: crate::types::GuardrailFilterStrength,
    /// <p>The strength of the content filter to apply to model responses. As you increase the filter strength, the likelihood of filtering harmful content increases and the probability of seeing harmful content in your application reduces.</p>
    pub output_strength: crate::types::GuardrailFilterStrength,
    /// <p>The input modalities selected for the guardrail content filter configuration.</p>
    pub input_modalities: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailModality>>,
    /// <p>The output modalities selected for the guardrail content filter configuration.</p>
    pub output_modalities: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailModality>>,
    /// <p>Specifies the action to take when harmful content is detected. Supported values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>BLOCK</code> – Block the content and replace it with blocked messaging.</p></li>
    /// <li>
    /// <p><code>NONE</code> – Take no action but return detection information in the trace response.</p></li>
    /// </ul>
    pub input_action: ::std::option::Option<crate::types::GuardrailContentFilterAction>,
    /// <p>Specifies the action to take when harmful content is detected in the output. Supported values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>BLOCK</code> – Block the content and replace it with blocked messaging.</p></li>
    /// <li>
    /// <p><code>NONE</code> – Take no action but return detection information in the trace response.</p></li>
    /// </ul>
    pub output_action: ::std::option::Option<crate::types::GuardrailContentFilterAction>,
    /// <p>Specifies whether to enable guardrail evaluation on the input. When disabled, you aren't charged for the evaluation. The evaluation doesn't appear in the response.</p>
    pub input_enabled: ::std::option::Option<bool>,
    /// <p>Specifies whether to enable guardrail evaluation on the output. When disabled, you aren't charged for the evaluation. The evaluation doesn't appear in the response.</p>
    pub output_enabled: ::std::option::Option<bool>,
}
impl GuardrailContentFilterConfig {
    /// <p>The harmful category that the content filter is applied to.</p>
    pub fn r#type(&self) -> &crate::types::GuardrailContentFilterType {
        &self.r#type
    }
    /// <p>The strength of the content filter to apply to prompts. As you increase the filter strength, the likelihood of filtering harmful content increases and the probability of seeing harmful content in your application reduces.</p>
    pub fn input_strength(&self) -> &crate::types::GuardrailFilterStrength {
        &self.input_strength
    }
    /// <p>The strength of the content filter to apply to model responses. As you increase the filter strength, the likelihood of filtering harmful content increases and the probability of seeing harmful content in your application reduces.</p>
    pub fn output_strength(&self) -> &crate::types::GuardrailFilterStrength {
        &self.output_strength
    }
    /// <p>The input modalities selected for the guardrail content filter configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.input_modalities.is_none()`.
    pub fn input_modalities(&self) -> &[crate::types::GuardrailModality] {
        self.input_modalities.as_deref().unwrap_or_default()
    }
    /// <p>The output modalities selected for the guardrail content filter configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.output_modalities.is_none()`.
    pub fn output_modalities(&self) -> &[crate::types::GuardrailModality] {
        self.output_modalities.as_deref().unwrap_or_default()
    }
    /// <p>Specifies the action to take when harmful content is detected. Supported values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>BLOCK</code> – Block the content and replace it with blocked messaging.</p></li>
    /// <li>
    /// <p><code>NONE</code> – Take no action but return detection information in the trace response.</p></li>
    /// </ul>
    pub fn input_action(&self) -> ::std::option::Option<&crate::types::GuardrailContentFilterAction> {
        self.input_action.as_ref()
    }
    /// <p>Specifies the action to take when harmful content is detected in the output. Supported values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>BLOCK</code> – Block the content and replace it with blocked messaging.</p></li>
    /// <li>
    /// <p><code>NONE</code> – Take no action but return detection information in the trace response.</p></li>
    /// </ul>
    pub fn output_action(&self) -> ::std::option::Option<&crate::types::GuardrailContentFilterAction> {
        self.output_action.as_ref()
    }
    /// <p>Specifies whether to enable guardrail evaluation on the input. When disabled, you aren't charged for the evaluation. The evaluation doesn't appear in the response.</p>
    pub fn input_enabled(&self) -> ::std::option::Option<bool> {
        self.input_enabled
    }
    /// <p>Specifies whether to enable guardrail evaluation on the output. When disabled, you aren't charged for the evaluation. The evaluation doesn't appear in the response.</p>
    pub fn output_enabled(&self) -> ::std::option::Option<bool> {
        self.output_enabled
    }
}
impl ::std::fmt::Debug for GuardrailContentFilterConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailContentFilterConfig");
        formatter.field("r#type", &self.r#type);
        formatter.field("input_strength", &self.input_strength);
        formatter.field("output_strength", &self.output_strength);
        formatter.field("input_modalities", &"*** Sensitive Data Redacted ***");
        formatter.field("output_modalities", &"*** Sensitive Data Redacted ***");
        formatter.field("input_action", &"*** Sensitive Data Redacted ***");
        formatter.field("output_action", &"*** Sensitive Data Redacted ***");
        formatter.field("input_enabled", &self.input_enabled);
        formatter.field("output_enabled", &self.output_enabled);
        formatter.finish()
    }
}
impl GuardrailContentFilterConfig {
    /// Creates a new builder-style object to manufacture [`GuardrailContentFilterConfig`](crate::types::GuardrailContentFilterConfig).
    pub fn builder() -> crate::types::builders::GuardrailContentFilterConfigBuilder {
        crate::types::builders::GuardrailContentFilterConfigBuilder::default()
    }
}

/// A builder for [`GuardrailContentFilterConfig`](crate::types::GuardrailContentFilterConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GuardrailContentFilterConfigBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::GuardrailContentFilterType>,
    pub(crate) input_strength: ::std::option::Option<crate::types::GuardrailFilterStrength>,
    pub(crate) output_strength: ::std::option::Option<crate::types::GuardrailFilterStrength>,
    pub(crate) input_modalities: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailModality>>,
    pub(crate) output_modalities: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailModality>>,
    pub(crate) input_action: ::std::option::Option<crate::types::GuardrailContentFilterAction>,
    pub(crate) output_action: ::std::option::Option<crate::types::GuardrailContentFilterAction>,
    pub(crate) input_enabled: ::std::option::Option<bool>,
    pub(crate) output_enabled: ::std::option::Option<bool>,
}
impl GuardrailContentFilterConfigBuilder {
    /// <p>The harmful category that the content filter is applied to.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::GuardrailContentFilterType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The harmful category that the content filter is applied to.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::GuardrailContentFilterType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The harmful category that the content filter is applied to.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::GuardrailContentFilterType> {
        &self.r#type
    }
    /// <p>The strength of the content filter to apply to prompts. As you increase the filter strength, the likelihood of filtering harmful content increases and the probability of seeing harmful content in your application reduces.</p>
    /// This field is required.
    pub fn input_strength(mut self, input: crate::types::GuardrailFilterStrength) -> Self {
        self.input_strength = ::std::option::Option::Some(input);
        self
    }
    /// <p>The strength of the content filter to apply to prompts. As you increase the filter strength, the likelihood of filtering harmful content increases and the probability of seeing harmful content in your application reduces.</p>
    pub fn set_input_strength(mut self, input: ::std::option::Option<crate::types::GuardrailFilterStrength>) -> Self {
        self.input_strength = input;
        self
    }
    /// <p>The strength of the content filter to apply to prompts. As you increase the filter strength, the likelihood of filtering harmful content increases and the probability of seeing harmful content in your application reduces.</p>
    pub fn get_input_strength(&self) -> &::std::option::Option<crate::types::GuardrailFilterStrength> {
        &self.input_strength
    }
    /// <p>The strength of the content filter to apply to model responses. As you increase the filter strength, the likelihood of filtering harmful content increases and the probability of seeing harmful content in your application reduces.</p>
    /// This field is required.
    pub fn output_strength(mut self, input: crate::types::GuardrailFilterStrength) -> Self {
        self.output_strength = ::std::option::Option::Some(input);
        self
    }
    /// <p>The strength of the content filter to apply to model responses. As you increase the filter strength, the likelihood of filtering harmful content increases and the probability of seeing harmful content in your application reduces.</p>
    pub fn set_output_strength(mut self, input: ::std::option::Option<crate::types::GuardrailFilterStrength>) -> Self {
        self.output_strength = input;
        self
    }
    /// <p>The strength of the content filter to apply to model responses. As you increase the filter strength, the likelihood of filtering harmful content increases and the probability of seeing harmful content in your application reduces.</p>
    pub fn get_output_strength(&self) -> &::std::option::Option<crate::types::GuardrailFilterStrength> {
        &self.output_strength
    }
    /// Appends an item to `input_modalities`.
    ///
    /// To override the contents of this collection use [`set_input_modalities`](Self::set_input_modalities).
    ///
    /// <p>The input modalities selected for the guardrail content filter configuration.</p>
    pub fn input_modalities(mut self, input: crate::types::GuardrailModality) -> Self {
        let mut v = self.input_modalities.unwrap_or_default();
        v.push(input);
        self.input_modalities = ::std::option::Option::Some(v);
        self
    }
    /// <p>The input modalities selected for the guardrail content filter configuration.</p>
    pub fn set_input_modalities(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailModality>>) -> Self {
        self.input_modalities = input;
        self
    }
    /// <p>The input modalities selected for the guardrail content filter configuration.</p>
    pub fn get_input_modalities(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GuardrailModality>> {
        &self.input_modalities
    }
    /// Appends an item to `output_modalities`.
    ///
    /// To override the contents of this collection use [`set_output_modalities`](Self::set_output_modalities).
    ///
    /// <p>The output modalities selected for the guardrail content filter configuration.</p>
    pub fn output_modalities(mut self, input: crate::types::GuardrailModality) -> Self {
        let mut v = self.output_modalities.unwrap_or_default();
        v.push(input);
        self.output_modalities = ::std::option::Option::Some(v);
        self
    }
    /// <p>The output modalities selected for the guardrail content filter configuration.</p>
    pub fn set_output_modalities(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailModality>>) -> Self {
        self.output_modalities = input;
        self
    }
    /// <p>The output modalities selected for the guardrail content filter configuration.</p>
    pub fn get_output_modalities(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GuardrailModality>> {
        &self.output_modalities
    }
    /// <p>Specifies the action to take when harmful content is detected. Supported values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>BLOCK</code> – Block the content and replace it with blocked messaging.</p></li>
    /// <li>
    /// <p><code>NONE</code> – Take no action but return detection information in the trace response.</p></li>
    /// </ul>
    pub fn input_action(mut self, input: crate::types::GuardrailContentFilterAction) -> Self {
        self.input_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the action to take when harmful content is detected. Supported values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>BLOCK</code> – Block the content and replace it with blocked messaging.</p></li>
    /// <li>
    /// <p><code>NONE</code> – Take no action but return detection information in the trace response.</p></li>
    /// </ul>
    pub fn set_input_action(mut self, input: ::std::option::Option<crate::types::GuardrailContentFilterAction>) -> Self {
        self.input_action = input;
        self
    }
    /// <p>Specifies the action to take when harmful content is detected. Supported values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>BLOCK</code> – Block the content and replace it with blocked messaging.</p></li>
    /// <li>
    /// <p><code>NONE</code> – Take no action but return detection information in the trace response.</p></li>
    /// </ul>
    pub fn get_input_action(&self) -> &::std::option::Option<crate::types::GuardrailContentFilterAction> {
        &self.input_action
    }
    /// <p>Specifies the action to take when harmful content is detected in the output. Supported values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>BLOCK</code> – Block the content and replace it with blocked messaging.</p></li>
    /// <li>
    /// <p><code>NONE</code> – Take no action but return detection information in the trace response.</p></li>
    /// </ul>
    pub fn output_action(mut self, input: crate::types::GuardrailContentFilterAction) -> Self {
        self.output_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the action to take when harmful content is detected in the output. Supported values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>BLOCK</code> – Block the content and replace it with blocked messaging.</p></li>
    /// <li>
    /// <p><code>NONE</code> – Take no action but return detection information in the trace response.</p></li>
    /// </ul>
    pub fn set_output_action(mut self, input: ::std::option::Option<crate::types::GuardrailContentFilterAction>) -> Self {
        self.output_action = input;
        self
    }
    /// <p>Specifies the action to take when harmful content is detected in the output. Supported values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>BLOCK</code> – Block the content and replace it with blocked messaging.</p></li>
    /// <li>
    /// <p><code>NONE</code> – Take no action but return detection information in the trace response.</p></li>
    /// </ul>
    pub fn get_output_action(&self) -> &::std::option::Option<crate::types::GuardrailContentFilterAction> {
        &self.output_action
    }
    /// <p>Specifies whether to enable guardrail evaluation on the input. When disabled, you aren't charged for the evaluation. The evaluation doesn't appear in the response.</p>
    pub fn input_enabled(mut self, input: bool) -> Self {
        self.input_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to enable guardrail evaluation on the input. When disabled, you aren't charged for the evaluation. The evaluation doesn't appear in the response.</p>
    pub fn set_input_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.input_enabled = input;
        self
    }
    /// <p>Specifies whether to enable guardrail evaluation on the input. When disabled, you aren't charged for the evaluation. The evaluation doesn't appear in the response.</p>
    pub fn get_input_enabled(&self) -> &::std::option::Option<bool> {
        &self.input_enabled
    }
    /// <p>Specifies whether to enable guardrail evaluation on the output. When disabled, you aren't charged for the evaluation. The evaluation doesn't appear in the response.</p>
    pub fn output_enabled(mut self, input: bool) -> Self {
        self.output_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to enable guardrail evaluation on the output. When disabled, you aren't charged for the evaluation. The evaluation doesn't appear in the response.</p>
    pub fn set_output_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.output_enabled = input;
        self
    }
    /// <p>Specifies whether to enable guardrail evaluation on the output. When disabled, you aren't charged for the evaluation. The evaluation doesn't appear in the response.</p>
    pub fn get_output_enabled(&self) -> &::std::option::Option<bool> {
        &self.output_enabled
    }
    /// Consumes the builder and constructs a [`GuardrailContentFilterConfig`](crate::types::GuardrailContentFilterConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::GuardrailContentFilterConfigBuilder::type)
    /// - [`input_strength`](crate::types::builders::GuardrailContentFilterConfigBuilder::input_strength)
    /// - [`output_strength`](crate::types::builders::GuardrailContentFilterConfigBuilder::output_strength)
    pub fn build(self) -> ::std::result::Result<crate::types::GuardrailContentFilterConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GuardrailContentFilterConfig {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building GuardrailContentFilterConfig",
                )
            })?,
            input_strength: self.input_strength.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "input_strength",
                    "input_strength was not specified but it is required when building GuardrailContentFilterConfig",
                )
            })?,
            output_strength: self.output_strength.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "output_strength",
                    "output_strength was not specified but it is required when building GuardrailContentFilterConfig",
                )
            })?,
            input_modalities: self.input_modalities,
            output_modalities: self.output_modalities,
            input_action: self.input_action,
            output_action: self.output_action,
            input_enabled: self.input_enabled,
            output_enabled: self.output_enabled,
        })
    }
}
impl ::std::fmt::Debug for GuardrailContentFilterConfigBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailContentFilterConfigBuilder");
        formatter.field("r#type", &self.r#type);
        formatter.field("input_strength", &self.input_strength);
        formatter.field("output_strength", &self.output_strength);
        formatter.field("input_modalities", &"*** Sensitive Data Redacted ***");
        formatter.field("output_modalities", &"*** Sensitive Data Redacted ***");
        formatter.field("input_action", &"*** Sensitive Data Redacted ***");
        formatter.field("output_action", &"*** Sensitive Data Redacted ***");
        formatter.field("input_enabled", &self.input_enabled);
        formatter.field("output_enabled", &self.output_enabled);
        formatter.finish()
    }
}
