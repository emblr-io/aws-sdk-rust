// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information of an evaluation job.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EvaluationSummary {
    /// <p>The Amazon Resource Name (ARN) of the evaluation job.</p>
    pub job_arn: ::std::string::String,
    /// <p>The name for the evaluation job.</p>
    pub job_name: ::std::string::String,
    /// <p>The current status of the evaluation job.</p>
    pub status: crate::types::EvaluationJobStatus,
    /// <p>The time the evaluation job was created.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>Specifies whether the evaluation job is automated or human-based.</p>
    pub job_type: crate::types::EvaluationJobType,
    /// <p>The type of task for model evaluation.</p>
    pub evaluation_task_types: ::std::vec::Vec<crate::types::EvaluationTaskType>,
    /// <p>The Amazon Resource Names (ARNs) of the model(s) used for the evaluation job.</p>
    #[deprecated(note = "Inference identifiers should be retrieved from the inferenceConfigSummary", since = "2025-03-07")]
    pub model_identifiers: ::std::vec::Vec<::std::string::String>,
    /// <p>The Amazon Resource Names (ARNs) of the knowledge base resources used for a knowledge base evaluation job.</p>
    #[deprecated(note = "Inference identifiers should be retrieved from the inferenceConfigSummary", since = "2025-03-07")]
    pub rag_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The Amazon Resource Names (ARNs) of the models used to compute the metrics for a knowledge base evaluation job.</p>
    pub evaluator_model_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The Amazon Resource Names (ARNs) of the models used to compute custom metrics in an Amazon Bedrock evaluation job.</p>
    pub custom_metrics_evaluator_model_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Identifies the models, Knowledge Bases, or other RAG sources evaluated in a model or Knowledge Base evaluation job.</p>
    pub inference_config_summary: ::std::option::Option<crate::types::EvaluationInferenceConfigSummary>,
    /// <p>Specifies whether the evaluation job is for evaluating a model or evaluating a knowledge base (retrieval and response generation).</p>
    pub application_type: ::std::option::Option<crate::types::ApplicationType>,
}
impl EvaluationSummary {
    /// <p>The Amazon Resource Name (ARN) of the evaluation job.</p>
    pub fn job_arn(&self) -> &str {
        use std::ops::Deref;
        self.job_arn.deref()
    }
    /// <p>The name for the evaluation job.</p>
    pub fn job_name(&self) -> &str {
        use std::ops::Deref;
        self.job_name.deref()
    }
    /// <p>The current status of the evaluation job.</p>
    pub fn status(&self) -> &crate::types::EvaluationJobStatus {
        &self.status
    }
    /// <p>The time the evaluation job was created.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>Specifies whether the evaluation job is automated or human-based.</p>
    pub fn job_type(&self) -> &crate::types::EvaluationJobType {
        &self.job_type
    }
    /// <p>The type of task for model evaluation.</p>
    pub fn evaluation_task_types(&self) -> &[crate::types::EvaluationTaskType] {
        use std::ops::Deref;
        self.evaluation_task_types.deref()
    }
    /// <p>The Amazon Resource Names (ARNs) of the model(s) used for the evaluation job.</p>
    #[deprecated(note = "Inference identifiers should be retrieved from the inferenceConfigSummary", since = "2025-03-07")]
    pub fn model_identifiers(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.model_identifiers.deref()
    }
    /// <p>The Amazon Resource Names (ARNs) of the knowledge base resources used for a knowledge base evaluation job.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rag_identifiers.is_none()`.
    #[deprecated(note = "Inference identifiers should be retrieved from the inferenceConfigSummary", since = "2025-03-07")]
    pub fn rag_identifiers(&self) -> &[::std::string::String] {
        self.rag_identifiers.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Resource Names (ARNs) of the models used to compute the metrics for a knowledge base evaluation job.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.evaluator_model_identifiers.is_none()`.
    pub fn evaluator_model_identifiers(&self) -> &[::std::string::String] {
        self.evaluator_model_identifiers.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Resource Names (ARNs) of the models used to compute custom metrics in an Amazon Bedrock evaluation job.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.custom_metrics_evaluator_model_identifiers.is_none()`.
    pub fn custom_metrics_evaluator_model_identifiers(&self) -> &[::std::string::String] {
        self.custom_metrics_evaluator_model_identifiers.as_deref().unwrap_or_default()
    }
    /// <p>Identifies the models, Knowledge Bases, or other RAG sources evaluated in a model or Knowledge Base evaluation job.</p>
    pub fn inference_config_summary(&self) -> ::std::option::Option<&crate::types::EvaluationInferenceConfigSummary> {
        self.inference_config_summary.as_ref()
    }
    /// <p>Specifies whether the evaluation job is for evaluating a model or evaluating a knowledge base (retrieval and response generation).</p>
    pub fn application_type(&self) -> ::std::option::Option<&crate::types::ApplicationType> {
        self.application_type.as_ref()
    }
}
impl EvaluationSummary {
    /// Creates a new builder-style object to manufacture [`EvaluationSummary`](crate::types::EvaluationSummary).
    pub fn builder() -> crate::types::builders::EvaluationSummaryBuilder {
        crate::types::builders::EvaluationSummaryBuilder::default()
    }
}

/// A builder for [`EvaluationSummary`](crate::types::EvaluationSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EvaluationSummaryBuilder {
    pub(crate) job_arn: ::std::option::Option<::std::string::String>,
    pub(crate) job_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::EvaluationJobStatus>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) job_type: ::std::option::Option<crate::types::EvaluationJobType>,
    pub(crate) evaluation_task_types: ::std::option::Option<::std::vec::Vec<crate::types::EvaluationTaskType>>,
    pub(crate) model_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) rag_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) evaluator_model_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) custom_metrics_evaluator_model_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) inference_config_summary: ::std::option::Option<crate::types::EvaluationInferenceConfigSummary>,
    pub(crate) application_type: ::std::option::Option<crate::types::ApplicationType>,
}
impl EvaluationSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the evaluation job.</p>
    /// This field is required.
    pub fn job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the evaluation job.</p>
    pub fn set_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the evaluation job.</p>
    pub fn get_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_arn
    }
    /// <p>The name for the evaluation job.</p>
    /// This field is required.
    pub fn job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for the evaluation job.</p>
    pub fn set_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>The name for the evaluation job.</p>
    pub fn get_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_name
    }
    /// <p>The current status of the evaluation job.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::EvaluationJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the evaluation job.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::EvaluationJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the evaluation job.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::EvaluationJobStatus> {
        &self.status
    }
    /// <p>The time the evaluation job was created.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the evaluation job was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time the evaluation job was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>Specifies whether the evaluation job is automated or human-based.</p>
    /// This field is required.
    pub fn job_type(mut self, input: crate::types::EvaluationJobType) -> Self {
        self.job_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the evaluation job is automated or human-based.</p>
    pub fn set_job_type(mut self, input: ::std::option::Option<crate::types::EvaluationJobType>) -> Self {
        self.job_type = input;
        self
    }
    /// <p>Specifies whether the evaluation job is automated or human-based.</p>
    pub fn get_job_type(&self) -> &::std::option::Option<crate::types::EvaluationJobType> {
        &self.job_type
    }
    /// Appends an item to `evaluation_task_types`.
    ///
    /// To override the contents of this collection use [`set_evaluation_task_types`](Self::set_evaluation_task_types).
    ///
    /// <p>The type of task for model evaluation.</p>
    pub fn evaluation_task_types(mut self, input: crate::types::EvaluationTaskType) -> Self {
        let mut v = self.evaluation_task_types.unwrap_or_default();
        v.push(input);
        self.evaluation_task_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The type of task for model evaluation.</p>
    pub fn set_evaluation_task_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EvaluationTaskType>>) -> Self {
        self.evaluation_task_types = input;
        self
    }
    /// <p>The type of task for model evaluation.</p>
    pub fn get_evaluation_task_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EvaluationTaskType>> {
        &self.evaluation_task_types
    }
    /// Appends an item to `model_identifiers`.
    ///
    /// To override the contents of this collection use [`set_model_identifiers`](Self::set_model_identifiers).
    ///
    /// <p>The Amazon Resource Names (ARNs) of the model(s) used for the evaluation job.</p>
    #[deprecated(note = "Inference identifiers should be retrieved from the inferenceConfigSummary", since = "2025-03-07")]
    pub fn model_identifiers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.model_identifiers.unwrap_or_default();
        v.push(input.into());
        self.model_identifiers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the model(s) used for the evaluation job.</p>
    #[deprecated(note = "Inference identifiers should be retrieved from the inferenceConfigSummary", since = "2025-03-07")]
    pub fn set_model_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.model_identifiers = input;
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the model(s) used for the evaluation job.</p>
    #[deprecated(note = "Inference identifiers should be retrieved from the inferenceConfigSummary", since = "2025-03-07")]
    pub fn get_model_identifiers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.model_identifiers
    }
    /// Appends an item to `rag_identifiers`.
    ///
    /// To override the contents of this collection use [`set_rag_identifiers`](Self::set_rag_identifiers).
    ///
    /// <p>The Amazon Resource Names (ARNs) of the knowledge base resources used for a knowledge base evaluation job.</p>
    #[deprecated(note = "Inference identifiers should be retrieved from the inferenceConfigSummary", since = "2025-03-07")]
    pub fn rag_identifiers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.rag_identifiers.unwrap_or_default();
        v.push(input.into());
        self.rag_identifiers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the knowledge base resources used for a knowledge base evaluation job.</p>
    #[deprecated(note = "Inference identifiers should be retrieved from the inferenceConfigSummary", since = "2025-03-07")]
    pub fn set_rag_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.rag_identifiers = input;
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the knowledge base resources used for a knowledge base evaluation job.</p>
    #[deprecated(note = "Inference identifiers should be retrieved from the inferenceConfigSummary", since = "2025-03-07")]
    pub fn get_rag_identifiers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.rag_identifiers
    }
    /// Appends an item to `evaluator_model_identifiers`.
    ///
    /// To override the contents of this collection use [`set_evaluator_model_identifiers`](Self::set_evaluator_model_identifiers).
    ///
    /// <p>The Amazon Resource Names (ARNs) of the models used to compute the metrics for a knowledge base evaluation job.</p>
    pub fn evaluator_model_identifiers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.evaluator_model_identifiers.unwrap_or_default();
        v.push(input.into());
        self.evaluator_model_identifiers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the models used to compute the metrics for a knowledge base evaluation job.</p>
    pub fn set_evaluator_model_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.evaluator_model_identifiers = input;
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the models used to compute the metrics for a knowledge base evaluation job.</p>
    pub fn get_evaluator_model_identifiers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.evaluator_model_identifiers
    }
    /// Appends an item to `custom_metrics_evaluator_model_identifiers`.
    ///
    /// To override the contents of this collection use [`set_custom_metrics_evaluator_model_identifiers`](Self::set_custom_metrics_evaluator_model_identifiers).
    ///
    /// <p>The Amazon Resource Names (ARNs) of the models used to compute custom metrics in an Amazon Bedrock evaluation job.</p>
    pub fn custom_metrics_evaluator_model_identifiers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.custom_metrics_evaluator_model_identifiers.unwrap_or_default();
        v.push(input.into());
        self.custom_metrics_evaluator_model_identifiers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the models used to compute custom metrics in an Amazon Bedrock evaluation job.</p>
    pub fn set_custom_metrics_evaluator_model_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.custom_metrics_evaluator_model_identifiers = input;
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the models used to compute custom metrics in an Amazon Bedrock evaluation job.</p>
    pub fn get_custom_metrics_evaluator_model_identifiers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.custom_metrics_evaluator_model_identifiers
    }
    /// <p>Identifies the models, Knowledge Bases, or other RAG sources evaluated in a model or Knowledge Base evaluation job.</p>
    pub fn inference_config_summary(mut self, input: crate::types::EvaluationInferenceConfigSummary) -> Self {
        self.inference_config_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies the models, Knowledge Bases, or other RAG sources evaluated in a model or Knowledge Base evaluation job.</p>
    pub fn set_inference_config_summary(mut self, input: ::std::option::Option<crate::types::EvaluationInferenceConfigSummary>) -> Self {
        self.inference_config_summary = input;
        self
    }
    /// <p>Identifies the models, Knowledge Bases, or other RAG sources evaluated in a model or Knowledge Base evaluation job.</p>
    pub fn get_inference_config_summary(&self) -> &::std::option::Option<crate::types::EvaluationInferenceConfigSummary> {
        &self.inference_config_summary
    }
    /// <p>Specifies whether the evaluation job is for evaluating a model or evaluating a knowledge base (retrieval and response generation).</p>
    pub fn application_type(mut self, input: crate::types::ApplicationType) -> Self {
        self.application_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the evaluation job is for evaluating a model or evaluating a knowledge base (retrieval and response generation).</p>
    pub fn set_application_type(mut self, input: ::std::option::Option<crate::types::ApplicationType>) -> Self {
        self.application_type = input;
        self
    }
    /// <p>Specifies whether the evaluation job is for evaluating a model or evaluating a knowledge base (retrieval and response generation).</p>
    pub fn get_application_type(&self) -> &::std::option::Option<crate::types::ApplicationType> {
        &self.application_type
    }
    /// Consumes the builder and constructs a [`EvaluationSummary`](crate::types::EvaluationSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`job_arn`](crate::types::builders::EvaluationSummaryBuilder::job_arn)
    /// - [`job_name`](crate::types::builders::EvaluationSummaryBuilder::job_name)
    /// - [`status`](crate::types::builders::EvaluationSummaryBuilder::status)
    /// - [`creation_time`](crate::types::builders::EvaluationSummaryBuilder::creation_time)
    /// - [`job_type`](crate::types::builders::EvaluationSummaryBuilder::job_type)
    /// - [`evaluation_task_types`](crate::types::builders::EvaluationSummaryBuilder::evaluation_task_types)
    pub fn build(self) -> ::std::result::Result<crate::types::EvaluationSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EvaluationSummary {
            job_arn: self.job_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_arn",
                    "job_arn was not specified but it is required when building EvaluationSummary",
                )
            })?,
            job_name: self.job_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_name",
                    "job_name was not specified but it is required when building EvaluationSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building EvaluationSummary",
                )
            })?,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building EvaluationSummary",
                )
            })?,
            job_type: self.job_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_type",
                    "job_type was not specified but it is required when building EvaluationSummary",
                )
            })?,
            evaluation_task_types: self.evaluation_task_types.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "evaluation_task_types",
                    "evaluation_task_types was not specified but it is required when building EvaluationSummary",
                )
            })?,
            model_identifiers: self.model_identifiers.unwrap_or_default(),
            rag_identifiers: self.rag_identifiers,
            evaluator_model_identifiers: self.evaluator_model_identifiers,
            custom_metrics_evaluator_model_identifiers: self.custom_metrics_evaluator_model_identifiers,
            inference_config_summary: self.inference_config_summary,
            application_type: self.application_type,
        })
    }
}
