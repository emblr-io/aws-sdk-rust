// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configuration details for retrieving information from a knowledge base and generating responses.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KnowledgeBaseRetrieveAndGenerateConfiguration {
    /// <p>The unique identifier of the knowledge base.</p>
    pub knowledge_base_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the foundation model or <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html">inference profile</a> used to generate responses.</p>
    pub model_arn: ::std::string::String,
    /// <p>Contains configuration details for retrieving text chunks.</p>
    pub retrieval_configuration: ::std::option::Option<crate::types::KnowledgeBaseRetrievalConfiguration>,
    /// <p>Contains configurations details for response generation based on retrieved text chunks.</p>
    pub generation_configuration: ::std::option::Option<crate::types::GenerationConfiguration>,
    /// <p>Contains configuration details for the model to process the prompt prior to retrieval and response generation.</p>
    pub orchestration_configuration: ::std::option::Option<crate::types::OrchestrationConfiguration>,
}
impl KnowledgeBaseRetrieveAndGenerateConfiguration {
    /// <p>The unique identifier of the knowledge base.</p>
    pub fn knowledge_base_id(&self) -> &str {
        use std::ops::Deref;
        self.knowledge_base_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the foundation model or <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html">inference profile</a> used to generate responses.</p>
    pub fn model_arn(&self) -> &str {
        use std::ops::Deref;
        self.model_arn.deref()
    }
    /// <p>Contains configuration details for retrieving text chunks.</p>
    pub fn retrieval_configuration(&self) -> ::std::option::Option<&crate::types::KnowledgeBaseRetrievalConfiguration> {
        self.retrieval_configuration.as_ref()
    }
    /// <p>Contains configurations details for response generation based on retrieved text chunks.</p>
    pub fn generation_configuration(&self) -> ::std::option::Option<&crate::types::GenerationConfiguration> {
        self.generation_configuration.as_ref()
    }
    /// <p>Contains configuration details for the model to process the prompt prior to retrieval and response generation.</p>
    pub fn orchestration_configuration(&self) -> ::std::option::Option<&crate::types::OrchestrationConfiguration> {
        self.orchestration_configuration.as_ref()
    }
}
impl KnowledgeBaseRetrieveAndGenerateConfiguration {
    /// Creates a new builder-style object to manufacture [`KnowledgeBaseRetrieveAndGenerateConfiguration`](crate::types::KnowledgeBaseRetrieveAndGenerateConfiguration).
    pub fn builder() -> crate::types::builders::KnowledgeBaseRetrieveAndGenerateConfigurationBuilder {
        crate::types::builders::KnowledgeBaseRetrieveAndGenerateConfigurationBuilder::default()
    }
}

/// A builder for [`KnowledgeBaseRetrieveAndGenerateConfiguration`](crate::types::KnowledgeBaseRetrieveAndGenerateConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct KnowledgeBaseRetrieveAndGenerateConfigurationBuilder {
    pub(crate) knowledge_base_id: ::std::option::Option<::std::string::String>,
    pub(crate) model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) retrieval_configuration: ::std::option::Option<crate::types::KnowledgeBaseRetrievalConfiguration>,
    pub(crate) generation_configuration: ::std::option::Option<crate::types::GenerationConfiguration>,
    pub(crate) orchestration_configuration: ::std::option::Option<crate::types::OrchestrationConfiguration>,
}
impl KnowledgeBaseRetrieveAndGenerateConfigurationBuilder {
    /// <p>The unique identifier of the knowledge base.</p>
    /// This field is required.
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the knowledge base.</p>
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// <p>The unique identifier of the knowledge base.</p>
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_id
    }
    /// <p>The Amazon Resource Name (ARN) of the foundation model or <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html">inference profile</a> used to generate responses.</p>
    /// This field is required.
    pub fn model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the foundation model or <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html">inference profile</a> used to generate responses.</p>
    pub fn set_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the foundation model or <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html">inference profile</a> used to generate responses.</p>
    pub fn get_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_arn
    }
    /// <p>Contains configuration details for retrieving text chunks.</p>
    pub fn retrieval_configuration(mut self, input: crate::types::KnowledgeBaseRetrievalConfiguration) -> Self {
        self.retrieval_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains configuration details for retrieving text chunks.</p>
    pub fn set_retrieval_configuration(mut self, input: ::std::option::Option<crate::types::KnowledgeBaseRetrievalConfiguration>) -> Self {
        self.retrieval_configuration = input;
        self
    }
    /// <p>Contains configuration details for retrieving text chunks.</p>
    pub fn get_retrieval_configuration(&self) -> &::std::option::Option<crate::types::KnowledgeBaseRetrievalConfiguration> {
        &self.retrieval_configuration
    }
    /// <p>Contains configurations details for response generation based on retrieved text chunks.</p>
    pub fn generation_configuration(mut self, input: crate::types::GenerationConfiguration) -> Self {
        self.generation_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains configurations details for response generation based on retrieved text chunks.</p>
    pub fn set_generation_configuration(mut self, input: ::std::option::Option<crate::types::GenerationConfiguration>) -> Self {
        self.generation_configuration = input;
        self
    }
    /// <p>Contains configurations details for response generation based on retrieved text chunks.</p>
    pub fn get_generation_configuration(&self) -> &::std::option::Option<crate::types::GenerationConfiguration> {
        &self.generation_configuration
    }
    /// <p>Contains configuration details for the model to process the prompt prior to retrieval and response generation.</p>
    pub fn orchestration_configuration(mut self, input: crate::types::OrchestrationConfiguration) -> Self {
        self.orchestration_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains configuration details for the model to process the prompt prior to retrieval and response generation.</p>
    pub fn set_orchestration_configuration(mut self, input: ::std::option::Option<crate::types::OrchestrationConfiguration>) -> Self {
        self.orchestration_configuration = input;
        self
    }
    /// <p>Contains configuration details for the model to process the prompt prior to retrieval and response generation.</p>
    pub fn get_orchestration_configuration(&self) -> &::std::option::Option<crate::types::OrchestrationConfiguration> {
        &self.orchestration_configuration
    }
    /// Consumes the builder and constructs a [`KnowledgeBaseRetrieveAndGenerateConfiguration`](crate::types::KnowledgeBaseRetrieveAndGenerateConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`knowledge_base_id`](crate::types::builders::KnowledgeBaseRetrieveAndGenerateConfigurationBuilder::knowledge_base_id)
    /// - [`model_arn`](crate::types::builders::KnowledgeBaseRetrieveAndGenerateConfigurationBuilder::model_arn)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::KnowledgeBaseRetrieveAndGenerateConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::KnowledgeBaseRetrieveAndGenerateConfiguration {
            knowledge_base_id: self.knowledge_base_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "knowledge_base_id",
                    "knowledge_base_id was not specified but it is required when building KnowledgeBaseRetrieveAndGenerateConfiguration",
                )
            })?,
            model_arn: self.model_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "model_arn",
                    "model_arn was not specified but it is required when building KnowledgeBaseRetrieveAndGenerateConfiguration",
                )
            })?,
            retrieval_configuration: self.retrieval_configuration,
            generation_configuration: self.generation_configuration,
            orchestration_configuration: self.orchestration_configuration,
        })
    }
}
