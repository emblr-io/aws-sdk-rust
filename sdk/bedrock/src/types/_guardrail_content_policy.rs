// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about how to handle harmful content.</p>
/// <p>This data type is used in the following API operations:</p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_GetGuardrail.html#API_GetGuardrail_ResponseSyntax">GetGuardrail response body</a></p></li>
/// </ul>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GuardrailContentPolicy {
    /// <p>Contains the type of the content filter and how strongly it should apply to prompts and model responses.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailContentFilter>>,
    /// <p>The tier that your guardrail uses for content filters.</p>
    pub tier: ::std::option::Option<crate::types::GuardrailContentFiltersTier>,
}
impl GuardrailContentPolicy {
    /// <p>Contains the type of the content filter and how strongly it should apply to prompts and model responses.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::GuardrailContentFilter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>The tier that your guardrail uses for content filters.</p>
    pub fn tier(&self) -> ::std::option::Option<&crate::types::GuardrailContentFiltersTier> {
        self.tier.as_ref()
    }
}
impl GuardrailContentPolicy {
    /// Creates a new builder-style object to manufacture [`GuardrailContentPolicy`](crate::types::GuardrailContentPolicy).
    pub fn builder() -> crate::types::builders::GuardrailContentPolicyBuilder {
        crate::types::builders::GuardrailContentPolicyBuilder::default()
    }
}

/// A builder for [`GuardrailContentPolicy`](crate::types::GuardrailContentPolicy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GuardrailContentPolicyBuilder {
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailContentFilter>>,
    pub(crate) tier: ::std::option::Option<crate::types::GuardrailContentFiltersTier>,
}
impl GuardrailContentPolicyBuilder {
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>Contains the type of the content filter and how strongly it should apply to prompts and model responses.</p>
    pub fn filters(mut self, input: crate::types::GuardrailContentFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains the type of the content filter and how strongly it should apply to prompts and model responses.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailContentFilter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>Contains the type of the content filter and how strongly it should apply to prompts and model responses.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GuardrailContentFilter>> {
        &self.filters
    }
    /// <p>The tier that your guardrail uses for content filters.</p>
    pub fn tier(mut self, input: crate::types::GuardrailContentFiltersTier) -> Self {
        self.tier = ::std::option::Option::Some(input);
        self
    }
    /// <p>The tier that your guardrail uses for content filters.</p>
    pub fn set_tier(mut self, input: ::std::option::Option<crate::types::GuardrailContentFiltersTier>) -> Self {
        self.tier = input;
        self
    }
    /// <p>The tier that your guardrail uses for content filters.</p>
    pub fn get_tier(&self) -> &::std::option::Option<crate::types::GuardrailContentFiltersTier> {
        &self.tier
    }
    /// Consumes the builder and constructs a [`GuardrailContentPolicy`](crate::types::GuardrailContentPolicy).
    pub fn build(self) -> crate::types::GuardrailContentPolicy {
        crate::types::GuardrailContentPolicy {
            filters: self.filters,
            tier: self.tier,
        }
    }
}
