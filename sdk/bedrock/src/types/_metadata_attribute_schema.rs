// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the schema for a metadata attribute used in Knowledge Base vector searches. Metadata attributes provide additional context for documents and can be used for filtering and reranking search results.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct MetadataAttributeSchema {
    /// <p>The unique identifier for the metadata attribute. This key is used to reference the attribute in filter expressions and reranking configurations.</p>
    pub key: ::std::string::String,
    /// <p>The data type of the metadata attribute. The type determines how the attribute can be used in filter expressions and reranking.</p>
    pub r#type: crate::types::AttributeType,
    /// <p>An optional description of the metadata attribute that provides additional context about its purpose and usage.</p>
    pub description: ::std::string::String,
}
impl MetadataAttributeSchema {
    /// <p>The unique identifier for the metadata attribute. This key is used to reference the attribute in filter expressions and reranking configurations.</p>
    pub fn key(&self) -> &str {
        use std::ops::Deref;
        self.key.deref()
    }
    /// <p>The data type of the metadata attribute. The type determines how the attribute can be used in filter expressions and reranking.</p>
    pub fn r#type(&self) -> &crate::types::AttributeType {
        &self.r#type
    }
    /// <p>An optional description of the metadata attribute that provides additional context about its purpose and usage.</p>
    pub fn description(&self) -> &str {
        use std::ops::Deref;
        self.description.deref()
    }
}
impl ::std::fmt::Debug for MetadataAttributeSchema {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MetadataAttributeSchema");
        formatter.field("key", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl MetadataAttributeSchema {
    /// Creates a new builder-style object to manufacture [`MetadataAttributeSchema`](crate::types::MetadataAttributeSchema).
    pub fn builder() -> crate::types::builders::MetadataAttributeSchemaBuilder {
        crate::types::builders::MetadataAttributeSchemaBuilder::default()
    }
}

/// A builder for [`MetadataAttributeSchema`](crate::types::MetadataAttributeSchema).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct MetadataAttributeSchemaBuilder {
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::AttributeType>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl MetadataAttributeSchemaBuilder {
    /// <p>The unique identifier for the metadata attribute. This key is used to reference the attribute in filter expressions and reranking configurations.</p>
    /// This field is required.
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the metadata attribute. This key is used to reference the attribute in filter expressions and reranking configurations.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The unique identifier for the metadata attribute. This key is used to reference the attribute in filter expressions and reranking configurations.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>The data type of the metadata attribute. The type determines how the attribute can be used in filter expressions and reranking.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::AttributeType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data type of the metadata attribute. The type determines how the attribute can be used in filter expressions and reranking.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::AttributeType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The data type of the metadata attribute. The type determines how the attribute can be used in filter expressions and reranking.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::AttributeType> {
        &self.r#type
    }
    /// <p>An optional description of the metadata attribute that provides additional context about its purpose and usage.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional description of the metadata attribute that provides additional context about its purpose and usage.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>An optional description of the metadata attribute that provides additional context about its purpose and usage.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`MetadataAttributeSchema`](crate::types::MetadataAttributeSchema).
    /// This method will fail if any of the following fields are not set:
    /// - [`key`](crate::types::builders::MetadataAttributeSchemaBuilder::key)
    /// - [`r#type`](crate::types::builders::MetadataAttributeSchemaBuilder::type)
    /// - [`description`](crate::types::builders::MetadataAttributeSchemaBuilder::description)
    pub fn build(self) -> ::std::result::Result<crate::types::MetadataAttributeSchema, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MetadataAttributeSchema {
            key: self.key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key",
                    "key was not specified but it is required when building MetadataAttributeSchema",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building MetadataAttributeSchema",
                )
            })?,
            description: self.description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "description",
                    "description was not specified but it is required when building MetadataAttributeSchema",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for MetadataAttributeSchemaBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MetadataAttributeSchemaBuilder");
        formatter.field("key", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
