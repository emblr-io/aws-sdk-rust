// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configuration details for retrieval of information and response generation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum RagConfig {
    /// <p>Contains configuration details for knowledge base retrieval and response generation.</p>
    KnowledgeBaseConfig(crate::types::KnowledgeBaseConfig),
    /// <p>Contains configuration details about the RAG source used to generate inference response data for a Knowledge Base evaluation job.</p>
    PrecomputedRagSourceConfig(crate::types::EvaluationPrecomputedRagSourceConfig),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl RagConfig {
    /// Tries to convert the enum instance into [`KnowledgeBaseConfig`](crate::types::RagConfig::KnowledgeBaseConfig), extracting the inner [`KnowledgeBaseConfig`](crate::types::KnowledgeBaseConfig).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_knowledge_base_config(&self) -> ::std::result::Result<&crate::types::KnowledgeBaseConfig, &Self> {
        if let RagConfig::KnowledgeBaseConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`KnowledgeBaseConfig`](crate::types::RagConfig::KnowledgeBaseConfig).
    pub fn is_knowledge_base_config(&self) -> bool {
        self.as_knowledge_base_config().is_ok()
    }
    /// Tries to convert the enum instance into [`PrecomputedRagSourceConfig`](crate::types::RagConfig::PrecomputedRagSourceConfig), extracting the inner [`EvaluationPrecomputedRagSourceConfig`](crate::types::EvaluationPrecomputedRagSourceConfig).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_precomputed_rag_source_config(&self) -> ::std::result::Result<&crate::types::EvaluationPrecomputedRagSourceConfig, &Self> {
        if let RagConfig::PrecomputedRagSourceConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`PrecomputedRagSourceConfig`](crate::types::RagConfig::PrecomputedRagSourceConfig).
    pub fn is_precomputed_rag_source_config(&self) -> bool {
        self.as_precomputed_rag_source_config().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
