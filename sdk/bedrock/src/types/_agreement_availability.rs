// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the agreement availability</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AgreementAvailability {
    /// <p>Status of the agreement.</p>
    pub status: crate::types::AgreementStatus,
    /// <p>Error message.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
}
impl AgreementAvailability {
    /// <p>Status of the agreement.</p>
    pub fn status(&self) -> &crate::types::AgreementStatus {
        &self.status
    }
    /// <p>Error message.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl AgreementAvailability {
    /// Creates a new builder-style object to manufacture [`AgreementAvailability`](crate::types::AgreementAvailability).
    pub fn builder() -> crate::types::builders::AgreementAvailabilityBuilder {
        crate::types::builders::AgreementAvailabilityBuilder::default()
    }
}

/// A builder for [`AgreementAvailability`](crate::types::AgreementAvailability).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AgreementAvailabilityBuilder {
    pub(crate) status: ::std::option::Option<crate::types::AgreementStatus>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
}
impl AgreementAvailabilityBuilder {
    /// <p>Status of the agreement.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::AgreementStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of the agreement.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AgreementStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Status of the agreement.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AgreementStatus> {
        &self.status
    }
    /// <p>Error message.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Error message.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>Error message.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// Consumes the builder and constructs a [`AgreementAvailability`](crate::types::AgreementAvailability).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::types::builders::AgreementAvailabilityBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::AgreementAvailability, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AgreementAvailability {
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building AgreementAvailability",
                )
            })?,
            error_message: self.error_message,
        })
    }
}
