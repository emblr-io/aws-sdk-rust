// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A JSON array that provides the status of the evaluation jobs being deleted.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct BatchDeleteEvaluationJobError {
    /// <p>The ARN of the evaluation job being deleted.</p>
    pub job_identifier: ::std::string::String,
    /// <p>A HTTP status code of the evaluation job being deleted.</p>
    pub code: ::std::string::String,
    /// <p>A status message about the evaluation job deletion.</p>
    pub message: ::std::option::Option<::std::string::String>,
}
impl BatchDeleteEvaluationJobError {
    /// <p>The ARN of the evaluation job being deleted.</p>
    pub fn job_identifier(&self) -> &str {
        use std::ops::Deref;
        self.job_identifier.deref()
    }
    /// <p>A HTTP status code of the evaluation job being deleted.</p>
    pub fn code(&self) -> &str {
        use std::ops::Deref;
        self.code.deref()
    }
    /// <p>A status message about the evaluation job deletion.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl ::std::fmt::Debug for BatchDeleteEvaluationJobError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BatchDeleteEvaluationJobError");
        formatter.field("job_identifier", &"*** Sensitive Data Redacted ***");
        formatter.field("code", &self.code);
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl BatchDeleteEvaluationJobError {
    /// Creates a new builder-style object to manufacture [`BatchDeleteEvaluationJobError`](crate::types::BatchDeleteEvaluationJobError).
    pub fn builder() -> crate::types::builders::BatchDeleteEvaluationJobErrorBuilder {
        crate::types::builders::BatchDeleteEvaluationJobErrorBuilder::default()
    }
}

/// A builder for [`BatchDeleteEvaluationJobError`](crate::types::BatchDeleteEvaluationJobError).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct BatchDeleteEvaluationJobErrorBuilder {
    pub(crate) job_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) code: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl BatchDeleteEvaluationJobErrorBuilder {
    /// <p>The ARN of the evaluation job being deleted.</p>
    /// This field is required.
    pub fn job_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the evaluation job being deleted.</p>
    pub fn set_job_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_identifier = input;
        self
    }
    /// <p>The ARN of the evaluation job being deleted.</p>
    pub fn get_job_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_identifier
    }
    /// <p>A HTTP status code of the evaluation job being deleted.</p>
    /// This field is required.
    pub fn code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A HTTP status code of the evaluation job being deleted.</p>
    pub fn set_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>A HTTP status code of the evaluation job being deleted.</p>
    pub fn get_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.code
    }
    /// <p>A status message about the evaluation job deletion.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A status message about the evaluation job deletion.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>A status message about the evaluation job deletion.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Consumes the builder and constructs a [`BatchDeleteEvaluationJobError`](crate::types::BatchDeleteEvaluationJobError).
    /// This method will fail if any of the following fields are not set:
    /// - [`job_identifier`](crate::types::builders::BatchDeleteEvaluationJobErrorBuilder::job_identifier)
    /// - [`code`](crate::types::builders::BatchDeleteEvaluationJobErrorBuilder::code)
    pub fn build(self) -> ::std::result::Result<crate::types::BatchDeleteEvaluationJobError, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BatchDeleteEvaluationJobError {
            job_identifier: self.job_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_identifier",
                    "job_identifier was not specified but it is required when building BatchDeleteEvaluationJobError",
                )
            })?,
            code: self.code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "code",
                    "code was not specified but it is required when building BatchDeleteEvaluationJobError",
                )
            })?,
            message: self.message,
        })
    }
}
impl ::std::fmt::Debug for BatchDeleteEvaluationJobErrorBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BatchDeleteEvaluationJobErrorBuilder");
        formatter.field("job_identifier", &"*** Sensitive Data Redacted ***");
        formatter.field("code", &self.code);
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
