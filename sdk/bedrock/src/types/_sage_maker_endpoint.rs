// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the configuration for a Amazon SageMaker endpoint.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SageMakerEndpoint {
    /// <p>The number of Amazon EC2 compute instances to deploy for initial endpoint creation.</p>
    pub initial_instance_count: i32,
    /// <p>The Amazon EC2 compute instance type to deploy for hosting the model.</p>
    pub instance_type: ::std::string::String,
    /// <p>The ARN of the IAM role that Amazon SageMaker can assume to access model artifacts and docker image for deployment on Amazon EC2 compute instances or for batch transform jobs.</p>
    pub execution_role: ::std::string::String,
    /// <p>The Amazon Web Services KMS key that Amazon SageMaker uses to encrypt data on the storage volume attached to the Amazon EC2 compute instance that hosts the endpoint.</p>
    pub kms_encryption_key: ::std::option::Option<::std::string::String>,
    /// <p>The VPC configuration for the endpoint.</p>
    pub vpc: ::std::option::Option<crate::types::VpcConfig>,
}
impl SageMakerEndpoint {
    /// <p>The number of Amazon EC2 compute instances to deploy for initial endpoint creation.</p>
    pub fn initial_instance_count(&self) -> i32 {
        self.initial_instance_count
    }
    /// <p>The Amazon EC2 compute instance type to deploy for hosting the model.</p>
    pub fn instance_type(&self) -> &str {
        use std::ops::Deref;
        self.instance_type.deref()
    }
    /// <p>The ARN of the IAM role that Amazon SageMaker can assume to access model artifacts and docker image for deployment on Amazon EC2 compute instances or for batch transform jobs.</p>
    pub fn execution_role(&self) -> &str {
        use std::ops::Deref;
        self.execution_role.deref()
    }
    /// <p>The Amazon Web Services KMS key that Amazon SageMaker uses to encrypt data on the storage volume attached to the Amazon EC2 compute instance that hosts the endpoint.</p>
    pub fn kms_encryption_key(&self) -> ::std::option::Option<&str> {
        self.kms_encryption_key.as_deref()
    }
    /// <p>The VPC configuration for the endpoint.</p>
    pub fn vpc(&self) -> ::std::option::Option<&crate::types::VpcConfig> {
        self.vpc.as_ref()
    }
}
impl SageMakerEndpoint {
    /// Creates a new builder-style object to manufacture [`SageMakerEndpoint`](crate::types::SageMakerEndpoint).
    pub fn builder() -> crate::types::builders::SageMakerEndpointBuilder {
        crate::types::builders::SageMakerEndpointBuilder::default()
    }
}

/// A builder for [`SageMakerEndpoint`](crate::types::SageMakerEndpoint).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SageMakerEndpointBuilder {
    pub(crate) initial_instance_count: ::std::option::Option<i32>,
    pub(crate) instance_type: ::std::option::Option<::std::string::String>,
    pub(crate) execution_role: ::std::option::Option<::std::string::String>,
    pub(crate) kms_encryption_key: ::std::option::Option<::std::string::String>,
    pub(crate) vpc: ::std::option::Option<crate::types::VpcConfig>,
}
impl SageMakerEndpointBuilder {
    /// <p>The number of Amazon EC2 compute instances to deploy for initial endpoint creation.</p>
    /// This field is required.
    pub fn initial_instance_count(mut self, input: i32) -> Self {
        self.initial_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of Amazon EC2 compute instances to deploy for initial endpoint creation.</p>
    pub fn set_initial_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.initial_instance_count = input;
        self
    }
    /// <p>The number of Amazon EC2 compute instances to deploy for initial endpoint creation.</p>
    pub fn get_initial_instance_count(&self) -> &::std::option::Option<i32> {
        &self.initial_instance_count
    }
    /// <p>The Amazon EC2 compute instance type to deploy for hosting the model.</p>
    /// This field is required.
    pub fn instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon EC2 compute instance type to deploy for hosting the model.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The Amazon EC2 compute instance type to deploy for hosting the model.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_type
    }
    /// <p>The ARN of the IAM role that Amazon SageMaker can assume to access model artifacts and docker image for deployment on Amazon EC2 compute instances or for batch transform jobs.</p>
    /// This field is required.
    pub fn execution_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that Amazon SageMaker can assume to access model artifacts and docker image for deployment on Amazon EC2 compute instances or for batch transform jobs.</p>
    pub fn set_execution_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role = input;
        self
    }
    /// <p>The ARN of the IAM role that Amazon SageMaker can assume to access model artifacts and docker image for deployment on Amazon EC2 compute instances or for batch transform jobs.</p>
    pub fn get_execution_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role
    }
    /// <p>The Amazon Web Services KMS key that Amazon SageMaker uses to encrypt data on the storage volume attached to the Amazon EC2 compute instance that hosts the endpoint.</p>
    pub fn kms_encryption_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_encryption_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services KMS key that Amazon SageMaker uses to encrypt data on the storage volume attached to the Amazon EC2 compute instance that hosts the endpoint.</p>
    pub fn set_kms_encryption_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_encryption_key = input;
        self
    }
    /// <p>The Amazon Web Services KMS key that Amazon SageMaker uses to encrypt data on the storage volume attached to the Amazon EC2 compute instance that hosts the endpoint.</p>
    pub fn get_kms_encryption_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_encryption_key
    }
    /// <p>The VPC configuration for the endpoint.</p>
    pub fn vpc(mut self, input: crate::types::VpcConfig) -> Self {
        self.vpc = ::std::option::Option::Some(input);
        self
    }
    /// <p>The VPC configuration for the endpoint.</p>
    pub fn set_vpc(mut self, input: ::std::option::Option<crate::types::VpcConfig>) -> Self {
        self.vpc = input;
        self
    }
    /// <p>The VPC configuration for the endpoint.</p>
    pub fn get_vpc(&self) -> &::std::option::Option<crate::types::VpcConfig> {
        &self.vpc
    }
    /// Consumes the builder and constructs a [`SageMakerEndpoint`](crate::types::SageMakerEndpoint).
    /// This method will fail if any of the following fields are not set:
    /// - [`initial_instance_count`](crate::types::builders::SageMakerEndpointBuilder::initial_instance_count)
    /// - [`instance_type`](crate::types::builders::SageMakerEndpointBuilder::instance_type)
    /// - [`execution_role`](crate::types::builders::SageMakerEndpointBuilder::execution_role)
    pub fn build(self) -> ::std::result::Result<crate::types::SageMakerEndpoint, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SageMakerEndpoint {
            initial_instance_count: self.initial_instance_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "initial_instance_count",
                    "initial_instance_count was not specified but it is required when building SageMakerEndpoint",
                )
            })?,
            instance_type: self.instance_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "instance_type",
                    "instance_type was not specified but it is required when building SageMakerEndpoint",
                )
            })?,
            execution_role: self.execution_role.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "execution_role",
                    "execution_role was not specified but it is required when building SageMakerEndpoint",
                )
            })?,
            kms_encryption_key: self.kms_encryption_key,
            vpc: self.vpc,
        })
    }
}
