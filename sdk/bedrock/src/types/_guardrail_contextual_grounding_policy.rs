// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details for the guardrails contextual grounding policy.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GuardrailContextualGroundingPolicy {
    /// <p>The filter details for the guardrails contextual grounding policy.</p>
    pub filters: ::std::vec::Vec<crate::types::GuardrailContextualGroundingFilter>,
}
impl GuardrailContextualGroundingPolicy {
    /// <p>The filter details for the guardrails contextual grounding policy.</p>
    pub fn filters(&self) -> &[crate::types::GuardrailContextualGroundingFilter] {
        use std::ops::Deref;
        self.filters.deref()
    }
}
impl GuardrailContextualGroundingPolicy {
    /// Creates a new builder-style object to manufacture [`GuardrailContextualGroundingPolicy`](crate::types::GuardrailContextualGroundingPolicy).
    pub fn builder() -> crate::types::builders::GuardrailContextualGroundingPolicyBuilder {
        crate::types::builders::GuardrailContextualGroundingPolicyBuilder::default()
    }
}

/// A builder for [`GuardrailContextualGroundingPolicy`](crate::types::GuardrailContextualGroundingPolicy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GuardrailContextualGroundingPolicyBuilder {
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailContextualGroundingFilter>>,
}
impl GuardrailContextualGroundingPolicyBuilder {
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filter details for the guardrails contextual grounding policy.</p>
    pub fn filters(mut self, input: crate::types::GuardrailContextualGroundingFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The filter details for the guardrails contextual grounding policy.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailContextualGroundingFilter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>The filter details for the guardrails contextual grounding policy.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GuardrailContextualGroundingFilter>> {
        &self.filters
    }
    /// Consumes the builder and constructs a [`GuardrailContextualGroundingPolicy`](crate::types::GuardrailContextualGroundingPolicy).
    /// This method will fail if any of the following fields are not set:
    /// - [`filters`](crate::types::builders::GuardrailContextualGroundingPolicyBuilder::filters)
    pub fn build(self) -> ::std::result::Result<crate::types::GuardrailContextualGroundingPolicy, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GuardrailContextualGroundingPolicy {
            filters: self.filters.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "filters",
                    "filters was not specified but it is required when building GuardrailContextualGroundingPolicy",
                )
            })?,
        })
    }
}
