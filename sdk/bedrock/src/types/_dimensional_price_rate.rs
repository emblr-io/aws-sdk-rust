// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Dimensional price rate.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DimensionalPriceRate {
    /// <p>Dimension for the price rate.</p>
    pub dimension: ::std::option::Option<::std::string::String>,
    /// <p>Single-dimensional rate information.</p>
    pub price: ::std::option::Option<::std::string::String>,
    /// <p>Description of the price rate.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Unit associated with the price.</p>
    pub unit: ::std::option::Option<::std::string::String>,
}
impl DimensionalPriceRate {
    /// <p>Dimension for the price rate.</p>
    pub fn dimension(&self) -> ::std::option::Option<&str> {
        self.dimension.as_deref()
    }
    /// <p>Single-dimensional rate information.</p>
    pub fn price(&self) -> ::std::option::Option<&str> {
        self.price.as_deref()
    }
    /// <p>Description of the price rate.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Unit associated with the price.</p>
    pub fn unit(&self) -> ::std::option::Option<&str> {
        self.unit.as_deref()
    }
}
impl DimensionalPriceRate {
    /// Creates a new builder-style object to manufacture [`DimensionalPriceRate`](crate::types::DimensionalPriceRate).
    pub fn builder() -> crate::types::builders::DimensionalPriceRateBuilder {
        crate::types::builders::DimensionalPriceRateBuilder::default()
    }
}

/// A builder for [`DimensionalPriceRate`](crate::types::DimensionalPriceRate).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DimensionalPriceRateBuilder {
    pub(crate) dimension: ::std::option::Option<::std::string::String>,
    pub(crate) price: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) unit: ::std::option::Option<::std::string::String>,
}
impl DimensionalPriceRateBuilder {
    /// <p>Dimension for the price rate.</p>
    pub fn dimension(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dimension = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Dimension for the price rate.</p>
    pub fn set_dimension(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dimension = input;
        self
    }
    /// <p>Dimension for the price rate.</p>
    pub fn get_dimension(&self) -> &::std::option::Option<::std::string::String> {
        &self.dimension
    }
    /// <p>Single-dimensional rate information.</p>
    pub fn price(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.price = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Single-dimensional rate information.</p>
    pub fn set_price(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.price = input;
        self
    }
    /// <p>Single-dimensional rate information.</p>
    pub fn get_price(&self) -> &::std::option::Option<::std::string::String> {
        &self.price
    }
    /// <p>Description of the price rate.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Description of the price rate.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Description of the price rate.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Unit associated with the price.</p>
    pub fn unit(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.unit = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unit associated with the price.</p>
    pub fn set_unit(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.unit = input;
        self
    }
    /// <p>Unit associated with the price.</p>
    pub fn get_unit(&self) -> &::std::option::Option<::std::string::String> {
        &self.unit
    }
    /// Consumes the builder and constructs a [`DimensionalPriceRate`](crate::types::DimensionalPriceRate).
    pub fn build(self) -> crate::types::DimensionalPriceRate {
        crate::types::DimensionalPriceRate {
            dimension: self.dimension,
            price: self.price,
            description: self.description,
            unit: self.unit,
        }
    }
}
