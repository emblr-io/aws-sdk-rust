// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetModelImportJobOutput {
    /// <p>The Amazon Resource Name (ARN) of the import job.</p>
    pub job_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the import job.</p>
    pub job_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the imported model.</p>
    pub imported_model_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the imported model.</p>
    pub imported_model_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role associated with this job.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The data source for the imported model.</p>
    pub model_data_source: ::std::option::Option<crate::types::ModelDataSource>,
    /// <p>The status of the job. A successful job transitions from in-progress to completed when the imported model is ready to use. If the job failed, the failure message contains information about why the job failed.</p>
    pub status: ::std::option::Option<crate::types::ModelImportJobStatus>,
    /// <p>Information about why the import job failed.</p>
    pub failure_message: ::std::option::Option<::std::string::String>,
    /// <p>The time the resource was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Time the resource was last modified.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Time that the resource transitioned to terminal state.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Virtual Private Cloud (VPC) configuration of the import model job.</p>
    pub vpc_config: ::std::option::Option<crate::types::VpcConfig>,
    /// <p>The imported model is encrypted at rest using this key.</p>
    pub imported_model_kms_key_arn: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetModelImportJobOutput {
    /// <p>The Amazon Resource Name (ARN) of the import job.</p>
    pub fn job_arn(&self) -> ::std::option::Option<&str> {
        self.job_arn.as_deref()
    }
    /// <p>The name of the import job.</p>
    pub fn job_name(&self) -> ::std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>The name of the imported model.</p>
    pub fn imported_model_name(&self) -> ::std::option::Option<&str> {
        self.imported_model_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the imported model.</p>
    pub fn imported_model_arn(&self) -> ::std::option::Option<&str> {
        self.imported_model_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role associated with this job.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The data source for the imported model.</p>
    pub fn model_data_source(&self) -> ::std::option::Option<&crate::types::ModelDataSource> {
        self.model_data_source.as_ref()
    }
    /// <p>The status of the job. A successful job transitions from in-progress to completed when the imported model is ready to use. If the job failed, the failure message contains information about why the job failed.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ModelImportJobStatus> {
        self.status.as_ref()
    }
    /// <p>Information about why the import job failed.</p>
    pub fn failure_message(&self) -> ::std::option::Option<&str> {
        self.failure_message.as_deref()
    }
    /// <p>The time the resource was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>Time the resource was last modified.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>Time that the resource transitioned to terminal state.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The Virtual Private Cloud (VPC) configuration of the import model job.</p>
    pub fn vpc_config(&self) -> ::std::option::Option<&crate::types::VpcConfig> {
        self.vpc_config.as_ref()
    }
    /// <p>The imported model is encrypted at rest using this key.</p>
    pub fn imported_model_kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.imported_model_kms_key_arn.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetModelImportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetModelImportJobOutput {
    /// Creates a new builder-style object to manufacture [`GetModelImportJobOutput`](crate::operation::get_model_import_job::GetModelImportJobOutput).
    pub fn builder() -> crate::operation::get_model_import_job::builders::GetModelImportJobOutputBuilder {
        crate::operation::get_model_import_job::builders::GetModelImportJobOutputBuilder::default()
    }
}

/// A builder for [`GetModelImportJobOutput`](crate::operation::get_model_import_job::GetModelImportJobOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetModelImportJobOutputBuilder {
    pub(crate) job_arn: ::std::option::Option<::std::string::String>,
    pub(crate) job_name: ::std::option::Option<::std::string::String>,
    pub(crate) imported_model_name: ::std::option::Option<::std::string::String>,
    pub(crate) imported_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) model_data_source: ::std::option::Option<crate::types::ModelDataSource>,
    pub(crate) status: ::std::option::Option<crate::types::ModelImportJobStatus>,
    pub(crate) failure_message: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) vpc_config: ::std::option::Option<crate::types::VpcConfig>,
    pub(crate) imported_model_kms_key_arn: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetModelImportJobOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the import job.</p>
    pub fn job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the import job.</p>
    pub fn set_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the import job.</p>
    pub fn get_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_arn
    }
    /// <p>The name of the import job.</p>
    pub fn job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the import job.</p>
    pub fn set_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>The name of the import job.</p>
    pub fn get_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_name
    }
    /// <p>The name of the imported model.</p>
    pub fn imported_model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.imported_model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the imported model.</p>
    pub fn set_imported_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.imported_model_name = input;
        self
    }
    /// <p>The name of the imported model.</p>
    pub fn get_imported_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.imported_model_name
    }
    /// <p>The Amazon Resource Name (ARN) of the imported model.</p>
    pub fn imported_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.imported_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the imported model.</p>
    pub fn set_imported_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.imported_model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the imported model.</p>
    pub fn get_imported_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.imported_model_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role associated with this job.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role associated with this job.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role associated with this job.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The data source for the imported model.</p>
    pub fn model_data_source(mut self, input: crate::types::ModelDataSource) -> Self {
        self.model_data_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data source for the imported model.</p>
    pub fn set_model_data_source(mut self, input: ::std::option::Option<crate::types::ModelDataSource>) -> Self {
        self.model_data_source = input;
        self
    }
    /// <p>The data source for the imported model.</p>
    pub fn get_model_data_source(&self) -> &::std::option::Option<crate::types::ModelDataSource> {
        &self.model_data_source
    }
    /// <p>The status of the job. A successful job transitions from in-progress to completed when the imported model is ready to use. If the job failed, the failure message contains information about why the job failed.</p>
    pub fn status(mut self, input: crate::types::ModelImportJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the job. A successful job transitions from in-progress to completed when the imported model is ready to use. If the job failed, the failure message contains information about why the job failed.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ModelImportJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the job. A successful job transitions from in-progress to completed when the imported model is ready to use. If the job failed, the failure message contains information about why the job failed.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ModelImportJobStatus> {
        &self.status
    }
    /// <p>Information about why the import job failed.</p>
    pub fn failure_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Information about why the import job failed.</p>
    pub fn set_failure_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_message = input;
        self
    }
    /// <p>Information about why the import job failed.</p>
    pub fn get_failure_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_message
    }
    /// <p>The time the resource was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the resource was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time the resource was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>Time the resource was last modified.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Time the resource was last modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>Time the resource was last modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>Time that the resource transitioned to terminal state.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Time that the resource transitioned to terminal state.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>Time that the resource transitioned to terminal state.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The Virtual Private Cloud (VPC) configuration of the import model job.</p>
    pub fn vpc_config(mut self, input: crate::types::VpcConfig) -> Self {
        self.vpc_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Virtual Private Cloud (VPC) configuration of the import model job.</p>
    pub fn set_vpc_config(mut self, input: ::std::option::Option<crate::types::VpcConfig>) -> Self {
        self.vpc_config = input;
        self
    }
    /// <p>The Virtual Private Cloud (VPC) configuration of the import model job.</p>
    pub fn get_vpc_config(&self) -> &::std::option::Option<crate::types::VpcConfig> {
        &self.vpc_config
    }
    /// <p>The imported model is encrypted at rest using this key.</p>
    pub fn imported_model_kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.imported_model_kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The imported model is encrypted at rest using this key.</p>
    pub fn set_imported_model_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.imported_model_kms_key_arn = input;
        self
    }
    /// <p>The imported model is encrypted at rest using this key.</p>
    pub fn get_imported_model_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.imported_model_kms_key_arn
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetModelImportJobOutput`](crate::operation::get_model_import_job::GetModelImportJobOutput).
    pub fn build(self) -> crate::operation::get_model_import_job::GetModelImportJobOutput {
        crate::operation::get_model_import_job::GetModelImportJobOutput {
            job_arn: self.job_arn,
            job_name: self.job_name,
            imported_model_name: self.imported_model_name,
            imported_model_arn: self.imported_model_arn,
            role_arn: self.role_arn,
            model_data_source: self.model_data_source,
            status: self.status,
            failure_message: self.failure_message,
            creation_time: self.creation_time,
            last_modified_time: self.last_modified_time,
            end_time: self.end_time,
            vpc_config: self.vpc_config,
            imported_model_kms_key_arn: self.imported_model_kms_key_arn,
            _request_id: self._request_id,
        }
    }
}
