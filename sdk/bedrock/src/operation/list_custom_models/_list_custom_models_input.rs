// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListCustomModelsInput {
    /// <p>Return custom models created before the specified time.</p>
    pub creation_time_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Return custom models created after the specified time.</p>
    pub creation_time_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Return custom models only if the job name contains these characters.</p>
    pub name_contains: ::std::option::Option<::std::string::String>,
    /// <p>Return custom models only if the base model Amazon Resource Name (ARN) matches this parameter.</p>
    pub base_model_arn_equals: ::std::option::Option<::std::string::String>,
    /// <p>Return custom models only if the foundation model Amazon Resource Name (ARN) matches this parameter.</p>
    pub foundation_model_arn_equals: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return in the response. If the total number of results is greater than this value, use the token returned in the response in the <code>nextToken</code> field when making another request to return the next batch of results.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>If the total number of results is greater than the <code>maxResults</code> value provided in the request, enter the token returned in the <code>nextToken</code> field in the response in this field to return the next batch of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The field to sort by in the returned list of models.</p>
    pub sort_by: ::std::option::Option<crate::types::SortModelsBy>,
    /// <p>The sort order of the results.</p>
    pub sort_order: ::std::option::Option<crate::types::SortOrder>,
    /// <p>Return custom models depending on if the current account owns them (<code>true</code>) or if they were shared with the current account (<code>false</code>).</p>
    pub is_owned: ::std::option::Option<bool>,
    /// <p>The status of them model to filter results by. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>Creating</code> - Include only models that are currently being created and validated.</p></li>
    /// <li>
    /// <p><code>Active</code> - Include only models that have been successfully created and are ready for use.</p></li>
    /// <li>
    /// <p><code>Failed</code> - Include only models where the creation process failed.</p></li>
    /// </ul>
    /// <p>If you don't specify a status, the API returns models in all states.</p>
    pub model_status: ::std::option::Option<crate::types::ModelStatus>,
}
impl ListCustomModelsInput {
    /// <p>Return custom models created before the specified time.</p>
    pub fn creation_time_before(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time_before.as_ref()
    }
    /// <p>Return custom models created after the specified time.</p>
    pub fn creation_time_after(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time_after.as_ref()
    }
    /// <p>Return custom models only if the job name contains these characters.</p>
    pub fn name_contains(&self) -> ::std::option::Option<&str> {
        self.name_contains.as_deref()
    }
    /// <p>Return custom models only if the base model Amazon Resource Name (ARN) matches this parameter.</p>
    pub fn base_model_arn_equals(&self) -> ::std::option::Option<&str> {
        self.base_model_arn_equals.as_deref()
    }
    /// <p>Return custom models only if the foundation model Amazon Resource Name (ARN) matches this parameter.</p>
    pub fn foundation_model_arn_equals(&self) -> ::std::option::Option<&str> {
        self.foundation_model_arn_equals.as_deref()
    }
    /// <p>The maximum number of results to return in the response. If the total number of results is greater than this value, use the token returned in the response in the <code>nextToken</code> field when making another request to return the next batch of results.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>If the total number of results is greater than the <code>maxResults</code> value provided in the request, enter the token returned in the <code>nextToken</code> field in the response in this field to return the next batch of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The field to sort by in the returned list of models.</p>
    pub fn sort_by(&self) -> ::std::option::Option<&crate::types::SortModelsBy> {
        self.sort_by.as_ref()
    }
    /// <p>The sort order of the results.</p>
    pub fn sort_order(&self) -> ::std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
    /// <p>Return custom models depending on if the current account owns them (<code>true</code>) or if they were shared with the current account (<code>false</code>).</p>
    pub fn is_owned(&self) -> ::std::option::Option<bool> {
        self.is_owned
    }
    /// <p>The status of them model to filter results by. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>Creating</code> - Include only models that are currently being created and validated.</p></li>
    /// <li>
    /// <p><code>Active</code> - Include only models that have been successfully created and are ready for use.</p></li>
    /// <li>
    /// <p><code>Failed</code> - Include only models where the creation process failed.</p></li>
    /// </ul>
    /// <p>If you don't specify a status, the API returns models in all states.</p>
    pub fn model_status(&self) -> ::std::option::Option<&crate::types::ModelStatus> {
        self.model_status.as_ref()
    }
}
impl ListCustomModelsInput {
    /// Creates a new builder-style object to manufacture [`ListCustomModelsInput`](crate::operation::list_custom_models::ListCustomModelsInput).
    pub fn builder() -> crate::operation::list_custom_models::builders::ListCustomModelsInputBuilder {
        crate::operation::list_custom_models::builders::ListCustomModelsInputBuilder::default()
    }
}

/// A builder for [`ListCustomModelsInput`](crate::operation::list_custom_models::ListCustomModelsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListCustomModelsInputBuilder {
    pub(crate) creation_time_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) creation_time_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) name_contains: ::std::option::Option<::std::string::String>,
    pub(crate) base_model_arn_equals: ::std::option::Option<::std::string::String>,
    pub(crate) foundation_model_arn_equals: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) sort_by: ::std::option::Option<crate::types::SortModelsBy>,
    pub(crate) sort_order: ::std::option::Option<crate::types::SortOrder>,
    pub(crate) is_owned: ::std::option::Option<bool>,
    pub(crate) model_status: ::std::option::Option<crate::types::ModelStatus>,
}
impl ListCustomModelsInputBuilder {
    /// <p>Return custom models created before the specified time.</p>
    pub fn creation_time_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time_before = ::std::option::Option::Some(input);
        self
    }
    /// <p>Return custom models created before the specified time.</p>
    pub fn set_creation_time_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time_before = input;
        self
    }
    /// <p>Return custom models created before the specified time.</p>
    pub fn get_creation_time_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time_before
    }
    /// <p>Return custom models created after the specified time.</p>
    pub fn creation_time_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time_after = ::std::option::Option::Some(input);
        self
    }
    /// <p>Return custom models created after the specified time.</p>
    pub fn set_creation_time_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time_after = input;
        self
    }
    /// <p>Return custom models created after the specified time.</p>
    pub fn get_creation_time_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time_after
    }
    /// <p>Return custom models only if the job name contains these characters.</p>
    pub fn name_contains(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name_contains = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Return custom models only if the job name contains these characters.</p>
    pub fn set_name_contains(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name_contains = input;
        self
    }
    /// <p>Return custom models only if the job name contains these characters.</p>
    pub fn get_name_contains(&self) -> &::std::option::Option<::std::string::String> {
        &self.name_contains
    }
    /// <p>Return custom models only if the base model Amazon Resource Name (ARN) matches this parameter.</p>
    pub fn base_model_arn_equals(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.base_model_arn_equals = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Return custom models only if the base model Amazon Resource Name (ARN) matches this parameter.</p>
    pub fn set_base_model_arn_equals(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.base_model_arn_equals = input;
        self
    }
    /// <p>Return custom models only if the base model Amazon Resource Name (ARN) matches this parameter.</p>
    pub fn get_base_model_arn_equals(&self) -> &::std::option::Option<::std::string::String> {
        &self.base_model_arn_equals
    }
    /// <p>Return custom models only if the foundation model Amazon Resource Name (ARN) matches this parameter.</p>
    pub fn foundation_model_arn_equals(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.foundation_model_arn_equals = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Return custom models only if the foundation model Amazon Resource Name (ARN) matches this parameter.</p>
    pub fn set_foundation_model_arn_equals(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.foundation_model_arn_equals = input;
        self
    }
    /// <p>Return custom models only if the foundation model Amazon Resource Name (ARN) matches this parameter.</p>
    pub fn get_foundation_model_arn_equals(&self) -> &::std::option::Option<::std::string::String> {
        &self.foundation_model_arn_equals
    }
    /// <p>The maximum number of results to return in the response. If the total number of results is greater than this value, use the token returned in the response in the <code>nextToken</code> field when making another request to return the next batch of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return in the response. If the total number of results is greater than this value, use the token returned in the response in the <code>nextToken</code> field when making another request to return the next batch of results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return in the response. If the total number of results is greater than this value, use the token returned in the response in the <code>nextToken</code> field when making another request to return the next batch of results.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>If the total number of results is greater than the <code>maxResults</code> value provided in the request, enter the token returned in the <code>nextToken</code> field in the response in this field to return the next batch of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the total number of results is greater than the <code>maxResults</code> value provided in the request, enter the token returned in the <code>nextToken</code> field in the response in this field to return the next batch of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If the total number of results is greater than the <code>maxResults</code> value provided in the request, enter the token returned in the <code>nextToken</code> field in the response in this field to return the next batch of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The field to sort by in the returned list of models.</p>
    pub fn sort_by(mut self, input: crate::types::SortModelsBy) -> Self {
        self.sort_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>The field to sort by in the returned list of models.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::SortModelsBy>) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>The field to sort by in the returned list of models.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::SortModelsBy> {
        &self.sort_by
    }
    /// <p>The sort order of the results.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sort order of the results.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The sort order of the results.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortOrder> {
        &self.sort_order
    }
    /// <p>Return custom models depending on if the current account owns them (<code>true</code>) or if they were shared with the current account (<code>false</code>).</p>
    pub fn is_owned(mut self, input: bool) -> Self {
        self.is_owned = ::std::option::Option::Some(input);
        self
    }
    /// <p>Return custom models depending on if the current account owns them (<code>true</code>) or if they were shared with the current account (<code>false</code>).</p>
    pub fn set_is_owned(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_owned = input;
        self
    }
    /// <p>Return custom models depending on if the current account owns them (<code>true</code>) or if they were shared with the current account (<code>false</code>).</p>
    pub fn get_is_owned(&self) -> &::std::option::Option<bool> {
        &self.is_owned
    }
    /// <p>The status of them model to filter results by. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>Creating</code> - Include only models that are currently being created and validated.</p></li>
    /// <li>
    /// <p><code>Active</code> - Include only models that have been successfully created and are ready for use.</p></li>
    /// <li>
    /// <p><code>Failed</code> - Include only models where the creation process failed.</p></li>
    /// </ul>
    /// <p>If you don't specify a status, the API returns models in all states.</p>
    pub fn model_status(mut self, input: crate::types::ModelStatus) -> Self {
        self.model_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of them model to filter results by. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>Creating</code> - Include only models that are currently being created and validated.</p></li>
    /// <li>
    /// <p><code>Active</code> - Include only models that have been successfully created and are ready for use.</p></li>
    /// <li>
    /// <p><code>Failed</code> - Include only models where the creation process failed.</p></li>
    /// </ul>
    /// <p>If you don't specify a status, the API returns models in all states.</p>
    pub fn set_model_status(mut self, input: ::std::option::Option<crate::types::ModelStatus>) -> Self {
        self.model_status = input;
        self
    }
    /// <p>The status of them model to filter results by. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>Creating</code> - Include only models that are currently being created and validated.</p></li>
    /// <li>
    /// <p><code>Active</code> - Include only models that have been successfully created and are ready for use.</p></li>
    /// <li>
    /// <p><code>Failed</code> - Include only models where the creation process failed.</p></li>
    /// </ul>
    /// <p>If you don't specify a status, the API returns models in all states.</p>
    pub fn get_model_status(&self) -> &::std::option::Option<crate::types::ModelStatus> {
        &self.model_status
    }
    /// Consumes the builder and constructs a [`ListCustomModelsInput`](crate::operation::list_custom_models::ListCustomModelsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_custom_models::ListCustomModelsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_custom_models::ListCustomModelsInput {
            creation_time_before: self.creation_time_before,
            creation_time_after: self.creation_time_after,
            name_contains: self.name_contains,
            base_model_arn_equals: self.base_model_arn_equals,
            foundation_model_arn_equals: self.foundation_model_arn_equals,
            max_results: self.max_results,
            next_token: self.next_token,
            sort_by: self.sort_by,
            sort_order: self.sort_order,
            is_owned: self.is_owned,
            model_status: self.model_status,
        })
    }
}
