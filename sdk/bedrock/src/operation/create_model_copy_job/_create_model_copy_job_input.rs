// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateModelCopyJobInput {
    /// <p>The Amazon Resource Name (ARN) of the model to be copied.</p>
    pub source_model_arn: ::std::option::Option<::std::string::String>,
    /// <p>A name for the copied model.</p>
    pub target_model_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the KMS key that you use to encrypt the model copy.</p>
    pub model_kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>Tags to associate with the target model. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/tagging.html">Tag resources</a> in the <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-service.html">Amazon Bedrock User Guide</a>.</p>
    pub target_model_tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
}
impl CreateModelCopyJobInput {
    /// <p>The Amazon Resource Name (ARN) of the model to be copied.</p>
    pub fn source_model_arn(&self) -> ::std::option::Option<&str> {
        self.source_model_arn.as_deref()
    }
    /// <p>A name for the copied model.</p>
    pub fn target_model_name(&self) -> ::std::option::Option<&str> {
        self.target_model_name.as_deref()
    }
    /// <p>The ARN of the KMS key that you use to encrypt the model copy.</p>
    pub fn model_kms_key_id(&self) -> ::std::option::Option<&str> {
        self.model_kms_key_id.as_deref()
    }
    /// <p>Tags to associate with the target model. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/tagging.html">Tag resources</a> in the <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-service.html">Amazon Bedrock User Guide</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.target_model_tags.is_none()`.
    pub fn target_model_tags(&self) -> &[crate::types::Tag] {
        self.target_model_tags.as_deref().unwrap_or_default()
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
}
impl CreateModelCopyJobInput {
    /// Creates a new builder-style object to manufacture [`CreateModelCopyJobInput`](crate::operation::create_model_copy_job::CreateModelCopyJobInput).
    pub fn builder() -> crate::operation::create_model_copy_job::builders::CreateModelCopyJobInputBuilder {
        crate::operation::create_model_copy_job::builders::CreateModelCopyJobInputBuilder::default()
    }
}

/// A builder for [`CreateModelCopyJobInput`](crate::operation::create_model_copy_job::CreateModelCopyJobInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateModelCopyJobInputBuilder {
    pub(crate) source_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) target_model_name: ::std::option::Option<::std::string::String>,
    pub(crate) model_kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) target_model_tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
}
impl CreateModelCopyJobInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the model to be copied.</p>
    /// This field is required.
    pub fn source_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model to be copied.</p>
    pub fn set_source_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model to be copied.</p>
    pub fn get_source_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_model_arn
    }
    /// <p>A name for the copied model.</p>
    /// This field is required.
    pub fn target_model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the copied model.</p>
    pub fn set_target_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_model_name = input;
        self
    }
    /// <p>A name for the copied model.</p>
    pub fn get_target_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_model_name
    }
    /// <p>The ARN of the KMS key that you use to encrypt the model copy.</p>
    pub fn model_kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the KMS key that you use to encrypt the model copy.</p>
    pub fn set_model_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_kms_key_id = input;
        self
    }
    /// <p>The ARN of the KMS key that you use to encrypt the model copy.</p>
    pub fn get_model_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_kms_key_id
    }
    /// Appends an item to `target_model_tags`.
    ///
    /// To override the contents of this collection use [`set_target_model_tags`](Self::set_target_model_tags).
    ///
    /// <p>Tags to associate with the target model. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/tagging.html">Tag resources</a> in the <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-service.html">Amazon Bedrock User Guide</a>.</p>
    pub fn target_model_tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.target_model_tags.unwrap_or_default();
        v.push(input);
        self.target_model_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Tags to associate with the target model. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/tagging.html">Tag resources</a> in the <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-service.html">Amazon Bedrock User Guide</a>.</p>
    pub fn set_target_model_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.target_model_tags = input;
        self
    }
    /// <p>Tags to associate with the target model. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/tagging.html">Tag resources</a> in the <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-service.html">Amazon Bedrock User Guide</a>.</p>
    pub fn get_target_model_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.target_model_tags
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// Consumes the builder and constructs a [`CreateModelCopyJobInput`](crate::operation::create_model_copy_job::CreateModelCopyJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_model_copy_job::CreateModelCopyJobInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_model_copy_job::CreateModelCopyJobInput {
            source_model_arn: self.source_model_arn,
            target_model_name: self.target_model_name,
            model_kms_key_id: self.model_kms_key_id,
            target_model_tags: self.target_model_tags,
            client_request_token: self.client_request_token,
        })
    }
}
