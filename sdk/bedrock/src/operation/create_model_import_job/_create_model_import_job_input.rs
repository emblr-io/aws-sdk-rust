// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateModelImportJobInput {
    /// <p>The name of the import job.</p>
    pub job_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the imported model.</p>
    pub imported_model_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the model import job.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The data source for the imported model.</p>
    pub model_data_source: ::std::option::Option<crate::types::ModelDataSource>,
    /// <p>Tags to attach to this import job.</p>
    pub job_tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>Tags to attach to the imported model.</p>
    pub imported_model_tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
    /// <p>VPC configuration parameters for the private Virtual Private Cloud (VPC) that contains the resources you are using for the import job.</p>
    pub vpc_config: ::std::option::Option<crate::types::VpcConfig>,
    /// <p>The imported model is encrypted at rest using this key.</p>
    pub imported_model_kms_key_id: ::std::option::Option<::std::string::String>,
}
impl CreateModelImportJobInput {
    /// <p>The name of the import job.</p>
    pub fn job_name(&self) -> ::std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>The name of the imported model.</p>
    pub fn imported_model_name(&self) -> ::std::option::Option<&str> {
        self.imported_model_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the model import job.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The data source for the imported model.</p>
    pub fn model_data_source(&self) -> ::std::option::Option<&crate::types::ModelDataSource> {
        self.model_data_source.as_ref()
    }
    /// <p>Tags to attach to this import job.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.job_tags.is_none()`.
    pub fn job_tags(&self) -> &[crate::types::Tag] {
        self.job_tags.as_deref().unwrap_or_default()
    }
    /// <p>Tags to attach to the imported model.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.imported_model_tags.is_none()`.
    pub fn imported_model_tags(&self) -> &[crate::types::Tag] {
        self.imported_model_tags.as_deref().unwrap_or_default()
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>VPC configuration parameters for the private Virtual Private Cloud (VPC) that contains the resources you are using for the import job.</p>
    pub fn vpc_config(&self) -> ::std::option::Option<&crate::types::VpcConfig> {
        self.vpc_config.as_ref()
    }
    /// <p>The imported model is encrypted at rest using this key.</p>
    pub fn imported_model_kms_key_id(&self) -> ::std::option::Option<&str> {
        self.imported_model_kms_key_id.as_deref()
    }
}
impl CreateModelImportJobInput {
    /// Creates a new builder-style object to manufacture [`CreateModelImportJobInput`](crate::operation::create_model_import_job::CreateModelImportJobInput).
    pub fn builder() -> crate::operation::create_model_import_job::builders::CreateModelImportJobInputBuilder {
        crate::operation::create_model_import_job::builders::CreateModelImportJobInputBuilder::default()
    }
}

/// A builder for [`CreateModelImportJobInput`](crate::operation::create_model_import_job::CreateModelImportJobInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateModelImportJobInputBuilder {
    pub(crate) job_name: ::std::option::Option<::std::string::String>,
    pub(crate) imported_model_name: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) model_data_source: ::std::option::Option<crate::types::ModelDataSource>,
    pub(crate) job_tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) imported_model_tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_config: ::std::option::Option<crate::types::VpcConfig>,
    pub(crate) imported_model_kms_key_id: ::std::option::Option<::std::string::String>,
}
impl CreateModelImportJobInputBuilder {
    /// <p>The name of the import job.</p>
    /// This field is required.
    pub fn job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the import job.</p>
    pub fn set_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>The name of the import job.</p>
    pub fn get_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_name
    }
    /// <p>The name of the imported model.</p>
    /// This field is required.
    pub fn imported_model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.imported_model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the imported model.</p>
    pub fn set_imported_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.imported_model_name = input;
        self
    }
    /// <p>The name of the imported model.</p>
    pub fn get_imported_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.imported_model_name
    }
    /// <p>The Amazon Resource Name (ARN) of the model import job.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model import job.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model import job.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The data source for the imported model.</p>
    /// This field is required.
    pub fn model_data_source(mut self, input: crate::types::ModelDataSource) -> Self {
        self.model_data_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data source for the imported model.</p>
    pub fn set_model_data_source(mut self, input: ::std::option::Option<crate::types::ModelDataSource>) -> Self {
        self.model_data_source = input;
        self
    }
    /// <p>The data source for the imported model.</p>
    pub fn get_model_data_source(&self) -> &::std::option::Option<crate::types::ModelDataSource> {
        &self.model_data_source
    }
    /// Appends an item to `job_tags`.
    ///
    /// To override the contents of this collection use [`set_job_tags`](Self::set_job_tags).
    ///
    /// <p>Tags to attach to this import job.</p>
    pub fn job_tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.job_tags.unwrap_or_default();
        v.push(input);
        self.job_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Tags to attach to this import job.</p>
    pub fn set_job_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.job_tags = input;
        self
    }
    /// <p>Tags to attach to this import job.</p>
    pub fn get_job_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.job_tags
    }
    /// Appends an item to `imported_model_tags`.
    ///
    /// To override the contents of this collection use [`set_imported_model_tags`](Self::set_imported_model_tags).
    ///
    /// <p>Tags to attach to the imported model.</p>
    pub fn imported_model_tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.imported_model_tags.unwrap_or_default();
        v.push(input);
        self.imported_model_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Tags to attach to the imported model.</p>
    pub fn set_imported_model_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.imported_model_tags = input;
        self
    }
    /// <p>Tags to attach to the imported model.</p>
    pub fn get_imported_model_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.imported_model_tags
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// <p>VPC configuration parameters for the private Virtual Private Cloud (VPC) that contains the resources you are using for the import job.</p>
    pub fn vpc_config(mut self, input: crate::types::VpcConfig) -> Self {
        self.vpc_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>VPC configuration parameters for the private Virtual Private Cloud (VPC) that contains the resources you are using for the import job.</p>
    pub fn set_vpc_config(mut self, input: ::std::option::Option<crate::types::VpcConfig>) -> Self {
        self.vpc_config = input;
        self
    }
    /// <p>VPC configuration parameters for the private Virtual Private Cloud (VPC) that contains the resources you are using for the import job.</p>
    pub fn get_vpc_config(&self) -> &::std::option::Option<crate::types::VpcConfig> {
        &self.vpc_config
    }
    /// <p>The imported model is encrypted at rest using this key.</p>
    pub fn imported_model_kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.imported_model_kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The imported model is encrypted at rest using this key.</p>
    pub fn set_imported_model_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.imported_model_kms_key_id = input;
        self
    }
    /// <p>The imported model is encrypted at rest using this key.</p>
    pub fn get_imported_model_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.imported_model_kms_key_id
    }
    /// Consumes the builder and constructs a [`CreateModelImportJobInput`](crate::operation::create_model_import_job::CreateModelImportJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_model_import_job::CreateModelImportJobInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_model_import_job::CreateModelImportJobInput {
            job_name: self.job_name,
            imported_model_name: self.imported_model_name,
            role_arn: self.role_arn,
            model_data_source: self.model_data_source,
            job_tags: self.job_tags,
            imported_model_tags: self.imported_model_tags,
            client_request_token: self.client_request_token,
            vpc_config: self.vpc_config,
            imported_model_kms_key_id: self.imported_model_kms_key_id,
        })
    }
}
