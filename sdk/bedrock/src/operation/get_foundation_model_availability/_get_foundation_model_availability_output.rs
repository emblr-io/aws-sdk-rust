// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetFoundationModelAvailabilityOutput {
    /// <p>The model Id of the foundation model.</p>
    pub model_id: ::std::string::String,
    /// <p>Agreement availability.</p>
    pub agreement_availability: ::std::option::Option<crate::types::AgreementAvailability>,
    /// <p>Authorization status.</p>
    pub authorization_status: crate::types::AuthorizationStatus,
    /// <p>Entitlement availability.</p>
    pub entitlement_availability: crate::types::EntitlementAvailability,
    /// <p>Region availability.</p>
    pub region_availability: crate::types::RegionAvailability,
    _request_id: Option<String>,
}
impl GetFoundationModelAvailabilityOutput {
    /// <p>The model Id of the foundation model.</p>
    pub fn model_id(&self) -> &str {
        use std::ops::Deref;
        self.model_id.deref()
    }
    /// <p>Agreement availability.</p>
    pub fn agreement_availability(&self) -> ::std::option::Option<&crate::types::AgreementAvailability> {
        self.agreement_availability.as_ref()
    }
    /// <p>Authorization status.</p>
    pub fn authorization_status(&self) -> &crate::types::AuthorizationStatus {
        &self.authorization_status
    }
    /// <p>Entitlement availability.</p>
    pub fn entitlement_availability(&self) -> &crate::types::EntitlementAvailability {
        &self.entitlement_availability
    }
    /// <p>Region availability.</p>
    pub fn region_availability(&self) -> &crate::types::RegionAvailability {
        &self.region_availability
    }
}
impl ::aws_types::request_id::RequestId for GetFoundationModelAvailabilityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetFoundationModelAvailabilityOutput {
    /// Creates a new builder-style object to manufacture [`GetFoundationModelAvailabilityOutput`](crate::operation::get_foundation_model_availability::GetFoundationModelAvailabilityOutput).
    pub fn builder() -> crate::operation::get_foundation_model_availability::builders::GetFoundationModelAvailabilityOutputBuilder {
        crate::operation::get_foundation_model_availability::builders::GetFoundationModelAvailabilityOutputBuilder::default()
    }
}

/// A builder for [`GetFoundationModelAvailabilityOutput`](crate::operation::get_foundation_model_availability::GetFoundationModelAvailabilityOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetFoundationModelAvailabilityOutputBuilder {
    pub(crate) model_id: ::std::option::Option<::std::string::String>,
    pub(crate) agreement_availability: ::std::option::Option<crate::types::AgreementAvailability>,
    pub(crate) authorization_status: ::std::option::Option<crate::types::AuthorizationStatus>,
    pub(crate) entitlement_availability: ::std::option::Option<crate::types::EntitlementAvailability>,
    pub(crate) region_availability: ::std::option::Option<crate::types::RegionAvailability>,
    _request_id: Option<String>,
}
impl GetFoundationModelAvailabilityOutputBuilder {
    /// <p>The model Id of the foundation model.</p>
    /// This field is required.
    pub fn model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The model Id of the foundation model.</p>
    pub fn set_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_id = input;
        self
    }
    /// <p>The model Id of the foundation model.</p>
    pub fn get_model_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_id
    }
    /// <p>Agreement availability.</p>
    /// This field is required.
    pub fn agreement_availability(mut self, input: crate::types::AgreementAvailability) -> Self {
        self.agreement_availability = ::std::option::Option::Some(input);
        self
    }
    /// <p>Agreement availability.</p>
    pub fn set_agreement_availability(mut self, input: ::std::option::Option<crate::types::AgreementAvailability>) -> Self {
        self.agreement_availability = input;
        self
    }
    /// <p>Agreement availability.</p>
    pub fn get_agreement_availability(&self) -> &::std::option::Option<crate::types::AgreementAvailability> {
        &self.agreement_availability
    }
    /// <p>Authorization status.</p>
    /// This field is required.
    pub fn authorization_status(mut self, input: crate::types::AuthorizationStatus) -> Self {
        self.authorization_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Authorization status.</p>
    pub fn set_authorization_status(mut self, input: ::std::option::Option<crate::types::AuthorizationStatus>) -> Self {
        self.authorization_status = input;
        self
    }
    /// <p>Authorization status.</p>
    pub fn get_authorization_status(&self) -> &::std::option::Option<crate::types::AuthorizationStatus> {
        &self.authorization_status
    }
    /// <p>Entitlement availability.</p>
    /// This field is required.
    pub fn entitlement_availability(mut self, input: crate::types::EntitlementAvailability) -> Self {
        self.entitlement_availability = ::std::option::Option::Some(input);
        self
    }
    /// <p>Entitlement availability.</p>
    pub fn set_entitlement_availability(mut self, input: ::std::option::Option<crate::types::EntitlementAvailability>) -> Self {
        self.entitlement_availability = input;
        self
    }
    /// <p>Entitlement availability.</p>
    pub fn get_entitlement_availability(&self) -> &::std::option::Option<crate::types::EntitlementAvailability> {
        &self.entitlement_availability
    }
    /// <p>Region availability.</p>
    /// This field is required.
    pub fn region_availability(mut self, input: crate::types::RegionAvailability) -> Self {
        self.region_availability = ::std::option::Option::Some(input);
        self
    }
    /// <p>Region availability.</p>
    pub fn set_region_availability(mut self, input: ::std::option::Option<crate::types::RegionAvailability>) -> Self {
        self.region_availability = input;
        self
    }
    /// <p>Region availability.</p>
    pub fn get_region_availability(&self) -> &::std::option::Option<crate::types::RegionAvailability> {
        &self.region_availability
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetFoundationModelAvailabilityOutput`](crate::operation::get_foundation_model_availability::GetFoundationModelAvailabilityOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`model_id`](crate::operation::get_foundation_model_availability::builders::GetFoundationModelAvailabilityOutputBuilder::model_id)
    /// - [`authorization_status`](crate::operation::get_foundation_model_availability::builders::GetFoundationModelAvailabilityOutputBuilder::authorization_status)
    /// - [`entitlement_availability`](crate::operation::get_foundation_model_availability::builders::GetFoundationModelAvailabilityOutputBuilder::entitlement_availability)
    /// - [`region_availability`](crate::operation::get_foundation_model_availability::builders::GetFoundationModelAvailabilityOutputBuilder::region_availability)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_foundation_model_availability::GetFoundationModelAvailabilityOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::get_foundation_model_availability::GetFoundationModelAvailabilityOutput {
                model_id: self.model_id.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "model_id",
                        "model_id was not specified but it is required when building GetFoundationModelAvailabilityOutput",
                    )
                })?,
                agreement_availability: self.agreement_availability,
                authorization_status: self.authorization_status.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "authorization_status",
                        "authorization_status was not specified but it is required when building GetFoundationModelAvailabilityOutput",
                    )
                })?,
                entitlement_availability: self.entitlement_availability.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "entitlement_availability",
                        "entitlement_availability was not specified but it is required when building GetFoundationModelAvailabilityOutput",
                    )
                })?,
                region_availability: self.region_availability.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "region_availability",
                        "region_availability was not specified but it is required when building GetFoundationModelAvailabilityOutput",
                    )
                })?,
                _request_id: self._request_id,
            },
        )
    }
}
