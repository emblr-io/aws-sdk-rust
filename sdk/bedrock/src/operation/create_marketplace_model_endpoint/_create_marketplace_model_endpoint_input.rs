// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateMarketplaceModelEndpointInput {
    /// <p>The ARN of the model from Amazon Bedrock Marketplace that you want to deploy to the endpoint.</p>
    pub model_source_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The configuration for the endpoint, including the number and type of instances to use.</p>
    pub endpoint_config: ::std::option::Option<crate::types::EndpointConfig>,
    /// <p>Indicates whether you accept the end-user license agreement (EULA) for the model. Set to <code>true</code> to accept the EULA.</p>
    pub accept_eula: ::std::option::Option<bool>,
    /// <p>The name of the endpoint. This name must be unique within your Amazon Web Services account and region.</p>
    pub endpoint_name: ::std::option::Option<::std::string::String>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This token is listed as not required because Amazon Web Services SDKs automatically generate it for you and set this parameter. If you're not using the Amazon Web Services SDK or the CLI, you must provide this token or the action will fail.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
    /// <p>An array of key-value pairs to apply to the underlying Amazon SageMaker endpoint. You can use these tags to organize and identify your Amazon Web Services resources.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateMarketplaceModelEndpointInput {
    /// <p>The ARN of the model from Amazon Bedrock Marketplace that you want to deploy to the endpoint.</p>
    pub fn model_source_identifier(&self) -> ::std::option::Option<&str> {
        self.model_source_identifier.as_deref()
    }
    /// <p>The configuration for the endpoint, including the number and type of instances to use.</p>
    pub fn endpoint_config(&self) -> ::std::option::Option<&crate::types::EndpointConfig> {
        self.endpoint_config.as_ref()
    }
    /// <p>Indicates whether you accept the end-user license agreement (EULA) for the model. Set to <code>true</code> to accept the EULA.</p>
    pub fn accept_eula(&self) -> ::std::option::Option<bool> {
        self.accept_eula
    }
    /// <p>The name of the endpoint. This name must be unique within your Amazon Web Services account and region.</p>
    pub fn endpoint_name(&self) -> ::std::option::Option<&str> {
        self.endpoint_name.as_deref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This token is listed as not required because Amazon Web Services SDKs automatically generate it for you and set this parameter. If you're not using the Amazon Web Services SDK or the CLI, you must provide this token or the action will fail.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>An array of key-value pairs to apply to the underlying Amazon SageMaker endpoint. You can use these tags to organize and identify your Amazon Web Services resources.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateMarketplaceModelEndpointInput {
    /// Creates a new builder-style object to manufacture [`CreateMarketplaceModelEndpointInput`](crate::operation::create_marketplace_model_endpoint::CreateMarketplaceModelEndpointInput).
    pub fn builder() -> crate::operation::create_marketplace_model_endpoint::builders::CreateMarketplaceModelEndpointInputBuilder {
        crate::operation::create_marketplace_model_endpoint::builders::CreateMarketplaceModelEndpointInputBuilder::default()
    }
}

/// A builder for [`CreateMarketplaceModelEndpointInput`](crate::operation::create_marketplace_model_endpoint::CreateMarketplaceModelEndpointInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateMarketplaceModelEndpointInputBuilder {
    pub(crate) model_source_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) endpoint_config: ::std::option::Option<crate::types::EndpointConfig>,
    pub(crate) accept_eula: ::std::option::Option<bool>,
    pub(crate) endpoint_name: ::std::option::Option<::std::string::String>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateMarketplaceModelEndpointInputBuilder {
    /// <p>The ARN of the model from Amazon Bedrock Marketplace that you want to deploy to the endpoint.</p>
    /// This field is required.
    pub fn model_source_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_source_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the model from Amazon Bedrock Marketplace that you want to deploy to the endpoint.</p>
    pub fn set_model_source_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_source_identifier = input;
        self
    }
    /// <p>The ARN of the model from Amazon Bedrock Marketplace that you want to deploy to the endpoint.</p>
    pub fn get_model_source_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_source_identifier
    }
    /// <p>The configuration for the endpoint, including the number and type of instances to use.</p>
    /// This field is required.
    pub fn endpoint_config(mut self, input: crate::types::EndpointConfig) -> Self {
        self.endpoint_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for the endpoint, including the number and type of instances to use.</p>
    pub fn set_endpoint_config(mut self, input: ::std::option::Option<crate::types::EndpointConfig>) -> Self {
        self.endpoint_config = input;
        self
    }
    /// <p>The configuration for the endpoint, including the number and type of instances to use.</p>
    pub fn get_endpoint_config(&self) -> &::std::option::Option<crate::types::EndpointConfig> {
        &self.endpoint_config
    }
    /// <p>Indicates whether you accept the end-user license agreement (EULA) for the model. Set to <code>true</code> to accept the EULA.</p>
    pub fn accept_eula(mut self, input: bool) -> Self {
        self.accept_eula = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether you accept the end-user license agreement (EULA) for the model. Set to <code>true</code> to accept the EULA.</p>
    pub fn set_accept_eula(mut self, input: ::std::option::Option<bool>) -> Self {
        self.accept_eula = input;
        self
    }
    /// <p>Indicates whether you accept the end-user license agreement (EULA) for the model. Set to <code>true</code> to accept the EULA.</p>
    pub fn get_accept_eula(&self) -> &::std::option::Option<bool> {
        &self.accept_eula
    }
    /// <p>The name of the endpoint. This name must be unique within your Amazon Web Services account and region.</p>
    /// This field is required.
    pub fn endpoint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the endpoint. This name must be unique within your Amazon Web Services account and region.</p>
    pub fn set_endpoint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint_name = input;
        self
    }
    /// <p>The name of the endpoint. This name must be unique within your Amazon Web Services account and region.</p>
    pub fn get_endpoint_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint_name
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This token is listed as not required because Amazon Web Services SDKs automatically generate it for you and set this parameter. If you're not using the Amazon Web Services SDK or the CLI, you must provide this token or the action will fail.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This token is listed as not required because Amazon Web Services SDKs automatically generate it for you and set this parameter. If you're not using the Amazon Web Services SDK or the CLI, you must provide this token or the action will fail.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This token is listed as not required because Amazon Web Services SDKs automatically generate it for you and set this parameter. If you're not using the Amazon Web Services SDK or the CLI, you must provide this token or the action will fail.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key-value pairs to apply to the underlying Amazon SageMaker endpoint. You can use these tags to organize and identify your Amazon Web Services resources.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of key-value pairs to apply to the underlying Amazon SageMaker endpoint. You can use these tags to organize and identify your Amazon Web Services resources.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>An array of key-value pairs to apply to the underlying Amazon SageMaker endpoint. You can use these tags to organize and identify your Amazon Web Services resources.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateMarketplaceModelEndpointInput`](crate::operation::create_marketplace_model_endpoint::CreateMarketplaceModelEndpointInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_marketplace_model_endpoint::CreateMarketplaceModelEndpointInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_marketplace_model_endpoint::CreateMarketplaceModelEndpointInput {
            model_source_identifier: self.model_source_identifier,
            endpoint_config: self.endpoint_config,
            accept_eula: self.accept_eula,
            endpoint_name: self.endpoint_name,
            client_request_token: self.client_request_token,
            tags: self.tags,
        })
    }
}
