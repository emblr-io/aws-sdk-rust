// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetImportedModelOutput {
    /// <p>The Amazon Resource Name (ARN) associated with this imported model.</p>
    pub model_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the imported model.</p>
    pub model_name: ::std::option::Option<::std::string::String>,
    /// <p>Job name associated with the imported model.</p>
    pub job_name: ::std::option::Option<::std::string::String>,
    /// <p>Job Amazon Resource Name (ARN) associated with the imported model.</p>
    pub job_arn: ::std::option::Option<::std::string::String>,
    /// <p>The data source for this imported model.</p>
    pub model_data_source: ::std::option::Option<crate::types::ModelDataSource>,
    /// <p>Creation time of the imported model.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The architecture of the imported model.</p>
    pub model_architecture: ::std::option::Option<::std::string::String>,
    /// <p>The imported model is encrypted at rest using this key.</p>
    pub model_kms_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies if the imported model supports converse.</p>
    pub instruct_supported: ::std::option::Option<bool>,
    /// <p>Information about the hardware utilization for a single copy of the model.</p>
    pub custom_model_units: ::std::option::Option<crate::types::CustomModelUnits>,
    _request_id: Option<String>,
}
impl GetImportedModelOutput {
    /// <p>The Amazon Resource Name (ARN) associated with this imported model.</p>
    pub fn model_arn(&self) -> ::std::option::Option<&str> {
        self.model_arn.as_deref()
    }
    /// <p>The name of the imported model.</p>
    pub fn model_name(&self) -> ::std::option::Option<&str> {
        self.model_name.as_deref()
    }
    /// <p>Job name associated with the imported model.</p>
    pub fn job_name(&self) -> ::std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>Job Amazon Resource Name (ARN) associated with the imported model.</p>
    pub fn job_arn(&self) -> ::std::option::Option<&str> {
        self.job_arn.as_deref()
    }
    /// <p>The data source for this imported model.</p>
    pub fn model_data_source(&self) -> ::std::option::Option<&crate::types::ModelDataSource> {
        self.model_data_source.as_ref()
    }
    /// <p>Creation time of the imported model.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The architecture of the imported model.</p>
    pub fn model_architecture(&self) -> ::std::option::Option<&str> {
        self.model_architecture.as_deref()
    }
    /// <p>The imported model is encrypted at rest using this key.</p>
    pub fn model_kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.model_kms_key_arn.as_deref()
    }
    /// <p>Specifies if the imported model supports converse.</p>
    pub fn instruct_supported(&self) -> ::std::option::Option<bool> {
        self.instruct_supported
    }
    /// <p>Information about the hardware utilization for a single copy of the model.</p>
    pub fn custom_model_units(&self) -> ::std::option::Option<&crate::types::CustomModelUnits> {
        self.custom_model_units.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetImportedModelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetImportedModelOutput {
    /// Creates a new builder-style object to manufacture [`GetImportedModelOutput`](crate::operation::get_imported_model::GetImportedModelOutput).
    pub fn builder() -> crate::operation::get_imported_model::builders::GetImportedModelOutputBuilder {
        crate::operation::get_imported_model::builders::GetImportedModelOutputBuilder::default()
    }
}

/// A builder for [`GetImportedModelOutput`](crate::operation::get_imported_model::GetImportedModelOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetImportedModelOutputBuilder {
    pub(crate) model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) model_name: ::std::option::Option<::std::string::String>,
    pub(crate) job_name: ::std::option::Option<::std::string::String>,
    pub(crate) job_arn: ::std::option::Option<::std::string::String>,
    pub(crate) model_data_source: ::std::option::Option<crate::types::ModelDataSource>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) model_architecture: ::std::option::Option<::std::string::String>,
    pub(crate) model_kms_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) instruct_supported: ::std::option::Option<bool>,
    pub(crate) custom_model_units: ::std::option::Option<crate::types::CustomModelUnits>,
    _request_id: Option<String>,
}
impl GetImportedModelOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) associated with this imported model.</p>
    pub fn model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) associated with this imported model.</p>
    pub fn set_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) associated with this imported model.</p>
    pub fn get_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_arn
    }
    /// <p>The name of the imported model.</p>
    pub fn model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the imported model.</p>
    pub fn set_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_name = input;
        self
    }
    /// <p>The name of the imported model.</p>
    pub fn get_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_name
    }
    /// <p>Job name associated with the imported model.</p>
    pub fn job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Job name associated with the imported model.</p>
    pub fn set_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>Job name associated with the imported model.</p>
    pub fn get_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_name
    }
    /// <p>Job Amazon Resource Name (ARN) associated with the imported model.</p>
    pub fn job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Job Amazon Resource Name (ARN) associated with the imported model.</p>
    pub fn set_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_arn = input;
        self
    }
    /// <p>Job Amazon Resource Name (ARN) associated with the imported model.</p>
    pub fn get_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_arn
    }
    /// <p>The data source for this imported model.</p>
    pub fn model_data_source(mut self, input: crate::types::ModelDataSource) -> Self {
        self.model_data_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data source for this imported model.</p>
    pub fn set_model_data_source(mut self, input: ::std::option::Option<crate::types::ModelDataSource>) -> Self {
        self.model_data_source = input;
        self
    }
    /// <p>The data source for this imported model.</p>
    pub fn get_model_data_source(&self) -> &::std::option::Option<crate::types::ModelDataSource> {
        &self.model_data_source
    }
    /// <p>Creation time of the imported model.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Creation time of the imported model.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>Creation time of the imported model.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The architecture of the imported model.</p>
    pub fn model_architecture(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_architecture = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The architecture of the imported model.</p>
    pub fn set_model_architecture(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_architecture = input;
        self
    }
    /// <p>The architecture of the imported model.</p>
    pub fn get_model_architecture(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_architecture
    }
    /// <p>The imported model is encrypted at rest using this key.</p>
    pub fn model_kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The imported model is encrypted at rest using this key.</p>
    pub fn set_model_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_kms_key_arn = input;
        self
    }
    /// <p>The imported model is encrypted at rest using this key.</p>
    pub fn get_model_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_kms_key_arn
    }
    /// <p>Specifies if the imported model supports converse.</p>
    pub fn instruct_supported(mut self, input: bool) -> Self {
        self.instruct_supported = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies if the imported model supports converse.</p>
    pub fn set_instruct_supported(mut self, input: ::std::option::Option<bool>) -> Self {
        self.instruct_supported = input;
        self
    }
    /// <p>Specifies if the imported model supports converse.</p>
    pub fn get_instruct_supported(&self) -> &::std::option::Option<bool> {
        &self.instruct_supported
    }
    /// <p>Information about the hardware utilization for a single copy of the model.</p>
    pub fn custom_model_units(mut self, input: crate::types::CustomModelUnits) -> Self {
        self.custom_model_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the hardware utilization for a single copy of the model.</p>
    pub fn set_custom_model_units(mut self, input: ::std::option::Option<crate::types::CustomModelUnits>) -> Self {
        self.custom_model_units = input;
        self
    }
    /// <p>Information about the hardware utilization for a single copy of the model.</p>
    pub fn get_custom_model_units(&self) -> &::std::option::Option<crate::types::CustomModelUnits> {
        &self.custom_model_units
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetImportedModelOutput`](crate::operation::get_imported_model::GetImportedModelOutput).
    pub fn build(self) -> crate::operation::get_imported_model::GetImportedModelOutput {
        crate::operation::get_imported_model::GetImportedModelOutput {
            model_arn: self.model_arn,
            model_name: self.model_name,
            job_name: self.job_name,
            job_arn: self.job_arn,
            model_data_source: self.model_data_source,
            creation_time: self.creation_time,
            model_architecture: self.model_architecture,
            model_kms_key_arn: self.model_kms_key_arn,
            instruct_supported: self.instruct_supported,
            custom_model_units: self.custom_model_units,
            _request_id: self._request_id,
        }
    }
}
