// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListFoundationModelAgreementOffersOutput {
    /// <p>Model Id of the foundation model.</p>
    pub model_id: ::std::string::String,
    /// <p>List of the offers associated with the specified model.</p>
    pub offers: ::std::vec::Vec<crate::types::Offer>,
    _request_id: Option<String>,
}
impl ListFoundationModelAgreementOffersOutput {
    /// <p>Model Id of the foundation model.</p>
    pub fn model_id(&self) -> &str {
        use std::ops::Deref;
        self.model_id.deref()
    }
    /// <p>List of the offers associated with the specified model.</p>
    pub fn offers(&self) -> &[crate::types::Offer] {
        use std::ops::Deref;
        self.offers.deref()
    }
}
impl ::aws_types::request_id::RequestId for ListFoundationModelAgreementOffersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListFoundationModelAgreementOffersOutput {
    /// Creates a new builder-style object to manufacture [`ListFoundationModelAgreementOffersOutput`](crate::operation::list_foundation_model_agreement_offers::ListFoundationModelAgreementOffersOutput).
    pub fn builder() -> crate::operation::list_foundation_model_agreement_offers::builders::ListFoundationModelAgreementOffersOutputBuilder {
        crate::operation::list_foundation_model_agreement_offers::builders::ListFoundationModelAgreementOffersOutputBuilder::default()
    }
}

/// A builder for [`ListFoundationModelAgreementOffersOutput`](crate::operation::list_foundation_model_agreement_offers::ListFoundationModelAgreementOffersOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListFoundationModelAgreementOffersOutputBuilder {
    pub(crate) model_id: ::std::option::Option<::std::string::String>,
    pub(crate) offers: ::std::option::Option<::std::vec::Vec<crate::types::Offer>>,
    _request_id: Option<String>,
}
impl ListFoundationModelAgreementOffersOutputBuilder {
    /// <p>Model Id of the foundation model.</p>
    /// This field is required.
    pub fn model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Model Id of the foundation model.</p>
    pub fn set_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_id = input;
        self
    }
    /// <p>Model Id of the foundation model.</p>
    pub fn get_model_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_id
    }
    /// Appends an item to `offers`.
    ///
    /// To override the contents of this collection use [`set_offers`](Self::set_offers).
    ///
    /// <p>List of the offers associated with the specified model.</p>
    pub fn offers(mut self, input: crate::types::Offer) -> Self {
        let mut v = self.offers.unwrap_or_default();
        v.push(input);
        self.offers = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of the offers associated with the specified model.</p>
    pub fn set_offers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Offer>>) -> Self {
        self.offers = input;
        self
    }
    /// <p>List of the offers associated with the specified model.</p>
    pub fn get_offers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Offer>> {
        &self.offers
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListFoundationModelAgreementOffersOutput`](crate::operation::list_foundation_model_agreement_offers::ListFoundationModelAgreementOffersOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`model_id`](crate::operation::list_foundation_model_agreement_offers::builders::ListFoundationModelAgreementOffersOutputBuilder::model_id)
    /// - [`offers`](crate::operation::list_foundation_model_agreement_offers::builders::ListFoundationModelAgreementOffersOutputBuilder::offers)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_foundation_model_agreement_offers::ListFoundationModelAgreementOffersOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::list_foundation_model_agreement_offers::ListFoundationModelAgreementOffersOutput {
                model_id: self.model_id.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "model_id",
                        "model_id was not specified but it is required when building ListFoundationModelAgreementOffersOutput",
                    )
                })?,
                offers: self.offers.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "offers",
                        "offers was not specified but it is required when building ListFoundationModelAgreementOffersOutput",
                    )
                })?,
                _request_id: self._request_id,
            },
        )
    }
}
