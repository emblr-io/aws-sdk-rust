// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateInferenceProfileInput {
    /// <p>A name for the inference profile.</p>
    pub inference_profile_name: ::std::option::Option<::std::string::String>,
    /// <p>A description for the inference profile.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
    /// <p>The foundation model or system-defined inference profile that the inference profile will track metrics and costs for.</p>
    pub model_source: ::std::option::Option<crate::types::InferenceProfileModelSource>,
    /// <p>An array of objects, each of which contains a tag and its value. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-service.html">Tagging resources</a> in the <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-service.html">Amazon Bedrock User Guide</a>.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateInferenceProfileInput {
    /// <p>A name for the inference profile.</p>
    pub fn inference_profile_name(&self) -> ::std::option::Option<&str> {
        self.inference_profile_name.as_deref()
    }
    /// <p>A description for the inference profile.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>The foundation model or system-defined inference profile that the inference profile will track metrics and costs for.</p>
    pub fn model_source(&self) -> ::std::option::Option<&crate::types::InferenceProfileModelSource> {
        self.model_source.as_ref()
    }
    /// <p>An array of objects, each of which contains a tag and its value. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-service.html">Tagging resources</a> in the <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-service.html">Amazon Bedrock User Guide</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for CreateInferenceProfileInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateInferenceProfileInput");
        formatter.field("inference_profile_name", &self.inference_profile_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("client_request_token", &self.client_request_token);
        formatter.field("model_source", &self.model_source);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl CreateInferenceProfileInput {
    /// Creates a new builder-style object to manufacture [`CreateInferenceProfileInput`](crate::operation::create_inference_profile::CreateInferenceProfileInput).
    pub fn builder() -> crate::operation::create_inference_profile::builders::CreateInferenceProfileInputBuilder {
        crate::operation::create_inference_profile::builders::CreateInferenceProfileInputBuilder::default()
    }
}

/// A builder for [`CreateInferenceProfileInput`](crate::operation::create_inference_profile::CreateInferenceProfileInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateInferenceProfileInputBuilder {
    pub(crate) inference_profile_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
    pub(crate) model_source: ::std::option::Option<crate::types::InferenceProfileModelSource>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateInferenceProfileInputBuilder {
    /// <p>A name for the inference profile.</p>
    /// This field is required.
    pub fn inference_profile_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inference_profile_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the inference profile.</p>
    pub fn set_inference_profile_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inference_profile_name = input;
        self
    }
    /// <p>A name for the inference profile.</p>
    pub fn get_inference_profile_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.inference_profile_name
    }
    /// <p>A description for the inference profile.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description for the inference profile.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description for the inference profile.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// <p>The foundation model or system-defined inference profile that the inference profile will track metrics and costs for.</p>
    /// This field is required.
    pub fn model_source(mut self, input: crate::types::InferenceProfileModelSource) -> Self {
        self.model_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The foundation model or system-defined inference profile that the inference profile will track metrics and costs for.</p>
    pub fn set_model_source(mut self, input: ::std::option::Option<crate::types::InferenceProfileModelSource>) -> Self {
        self.model_source = input;
        self
    }
    /// <p>The foundation model or system-defined inference profile that the inference profile will track metrics and costs for.</p>
    pub fn get_model_source(&self) -> &::std::option::Option<crate::types::InferenceProfileModelSource> {
        &self.model_source
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of objects, each of which contains a tag and its value. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-service.html">Tagging resources</a> in the <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-service.html">Amazon Bedrock User Guide</a>.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects, each of which contains a tag and its value. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-service.html">Tagging resources</a> in the <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-service.html">Amazon Bedrock User Guide</a>.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>An array of objects, each of which contains a tag and its value. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-service.html">Tagging resources</a> in the <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-service.html">Amazon Bedrock User Guide</a>.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateInferenceProfileInput`](crate::operation::create_inference_profile::CreateInferenceProfileInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_inference_profile::CreateInferenceProfileInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_inference_profile::CreateInferenceProfileInput {
            inference_profile_name: self.inference_profile_name,
            description: self.description,
            client_request_token: self.client_request_token,
            model_source: self.model_source,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for CreateInferenceProfileInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateInferenceProfileInputBuilder");
        formatter.field("inference_profile_name", &self.inference_profile_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("client_request_token", &self.client_request_token);
        formatter.field("model_source", &self.model_source);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
