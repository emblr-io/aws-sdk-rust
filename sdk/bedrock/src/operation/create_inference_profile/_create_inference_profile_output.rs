// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateInferenceProfileOutput {
    /// <p>The ARN of the inference profile that you created.</p>
    pub inference_profile_arn: ::std::string::String,
    /// <p>The status of the inference profile. <code>ACTIVE</code> means that the inference profile is ready to be used.</p>
    pub status: ::std::option::Option<crate::types::InferenceProfileStatus>,
    _request_id: Option<String>,
}
impl CreateInferenceProfileOutput {
    /// <p>The ARN of the inference profile that you created.</p>
    pub fn inference_profile_arn(&self) -> &str {
        use std::ops::Deref;
        self.inference_profile_arn.deref()
    }
    /// <p>The status of the inference profile. <code>ACTIVE</code> means that the inference profile is ready to be used.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::InferenceProfileStatus> {
        self.status.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for CreateInferenceProfileOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateInferenceProfileOutput {
    /// Creates a new builder-style object to manufacture [`CreateInferenceProfileOutput`](crate::operation::create_inference_profile::CreateInferenceProfileOutput).
    pub fn builder() -> crate::operation::create_inference_profile::builders::CreateInferenceProfileOutputBuilder {
        crate::operation::create_inference_profile::builders::CreateInferenceProfileOutputBuilder::default()
    }
}

/// A builder for [`CreateInferenceProfileOutput`](crate::operation::create_inference_profile::CreateInferenceProfileOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateInferenceProfileOutputBuilder {
    pub(crate) inference_profile_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::InferenceProfileStatus>,
    _request_id: Option<String>,
}
impl CreateInferenceProfileOutputBuilder {
    /// <p>The ARN of the inference profile that you created.</p>
    /// This field is required.
    pub fn inference_profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inference_profile_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the inference profile that you created.</p>
    pub fn set_inference_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inference_profile_arn = input;
        self
    }
    /// <p>The ARN of the inference profile that you created.</p>
    pub fn get_inference_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.inference_profile_arn
    }
    /// <p>The status of the inference profile. <code>ACTIVE</code> means that the inference profile is ready to be used.</p>
    pub fn status(mut self, input: crate::types::InferenceProfileStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the inference profile. <code>ACTIVE</code> means that the inference profile is ready to be used.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::InferenceProfileStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the inference profile. <code>ACTIVE</code> means that the inference profile is ready to be used.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::InferenceProfileStatus> {
        &self.status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateInferenceProfileOutput`](crate::operation::create_inference_profile::CreateInferenceProfileOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`inference_profile_arn`](crate::operation::create_inference_profile::builders::CreateInferenceProfileOutputBuilder::inference_profile_arn)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_inference_profile::CreateInferenceProfileOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_inference_profile::CreateInferenceProfileOutput {
            inference_profile_arn: self.inference_profile_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "inference_profile_arn",
                    "inference_profile_arn was not specified but it is required when building CreateInferenceProfileOutput",
                )
            })?,
            status: self.status,
            _request_id: self._request_id,
        })
    }
}
