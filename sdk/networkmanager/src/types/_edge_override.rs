// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the edge that's used for the override.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EdgeOverride {
    /// <p>The list of edge locations.</p>
    pub edge_sets: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>>,
    /// <p>The edge that should be used when overriding the current edge order.</p>
    pub use_edge: ::std::option::Option<::std::string::String>,
}
impl EdgeOverride {
    /// <p>The list of edge locations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.edge_sets.is_none()`.
    pub fn edge_sets(&self) -> &[::std::vec::Vec<::std::string::String>] {
        self.edge_sets.as_deref().unwrap_or_default()
    }
    /// <p>The edge that should be used when overriding the current edge order.</p>
    pub fn use_edge(&self) -> ::std::option::Option<&str> {
        self.use_edge.as_deref()
    }
}
impl EdgeOverride {
    /// Creates a new builder-style object to manufacture [`EdgeOverride`](crate::types::EdgeOverride).
    pub fn builder() -> crate::types::builders::EdgeOverrideBuilder {
        crate::types::builders::EdgeOverrideBuilder::default()
    }
}

/// A builder for [`EdgeOverride`](crate::types::EdgeOverride).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EdgeOverrideBuilder {
    pub(crate) edge_sets: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>>,
    pub(crate) use_edge: ::std::option::Option<::std::string::String>,
}
impl EdgeOverrideBuilder {
    /// Appends an item to `edge_sets`.
    ///
    /// To override the contents of this collection use [`set_edge_sets`](Self::set_edge_sets).
    ///
    /// <p>The list of edge locations.</p>
    pub fn edge_sets(mut self, input: ::std::vec::Vec<::std::string::String>) -> Self {
        let mut v = self.edge_sets.unwrap_or_default();
        v.push(input);
        self.edge_sets = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of edge locations.</p>
    pub fn set_edge_sets(mut self, input: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>>) -> Self {
        self.edge_sets = input;
        self
    }
    /// <p>The list of edge locations.</p>
    pub fn get_edge_sets(&self) -> &::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>> {
        &self.edge_sets
    }
    /// <p>The edge that should be used when overriding the current edge order.</p>
    pub fn use_edge(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.use_edge = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The edge that should be used when overriding the current edge order.</p>
    pub fn set_use_edge(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.use_edge = input;
        self
    }
    /// <p>The edge that should be used when overriding the current edge order.</p>
    pub fn get_use_edge(&self) -> &::std::option::Option<::std::string::String> {
        &self.use_edge
    }
    /// Consumes the builder and constructs a [`EdgeOverride`](crate::types::EdgeOverride).
    pub fn build(self) -> crate::types::EdgeOverride {
        crate::types::EdgeOverride {
            edge_sets: self.edge_sets,
            use_edge: self.use_edge,
        }
    }
}
