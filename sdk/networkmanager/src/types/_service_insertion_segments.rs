// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the segments associated with the service insertion action.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceInsertionSegments {
    /// <p>The list of segments associated with the <code>send-via</code> action.</p>
    pub send_via: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The list of segments associated with the <code>send-to</code> action.</p>
    pub send_to: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ServiceInsertionSegments {
    /// <p>The list of segments associated with the <code>send-via</code> action.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.send_via.is_none()`.
    pub fn send_via(&self) -> &[::std::string::String] {
        self.send_via.as_deref().unwrap_or_default()
    }
    /// <p>The list of segments associated with the <code>send-to</code> action.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.send_to.is_none()`.
    pub fn send_to(&self) -> &[::std::string::String] {
        self.send_to.as_deref().unwrap_or_default()
    }
}
impl ServiceInsertionSegments {
    /// Creates a new builder-style object to manufacture [`ServiceInsertionSegments`](crate::types::ServiceInsertionSegments).
    pub fn builder() -> crate::types::builders::ServiceInsertionSegmentsBuilder {
        crate::types::builders::ServiceInsertionSegmentsBuilder::default()
    }
}

/// A builder for [`ServiceInsertionSegments`](crate::types::ServiceInsertionSegments).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceInsertionSegmentsBuilder {
    pub(crate) send_via: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) send_to: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ServiceInsertionSegmentsBuilder {
    /// Appends an item to `send_via`.
    ///
    /// To override the contents of this collection use [`set_send_via`](Self::set_send_via).
    ///
    /// <p>The list of segments associated with the <code>send-via</code> action.</p>
    pub fn send_via(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.send_via.unwrap_or_default();
        v.push(input.into());
        self.send_via = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of segments associated with the <code>send-via</code> action.</p>
    pub fn set_send_via(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.send_via = input;
        self
    }
    /// <p>The list of segments associated with the <code>send-via</code> action.</p>
    pub fn get_send_via(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.send_via
    }
    /// Appends an item to `send_to`.
    ///
    /// To override the contents of this collection use [`set_send_to`](Self::set_send_to).
    ///
    /// <p>The list of segments associated with the <code>send-to</code> action.</p>
    pub fn send_to(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.send_to.unwrap_or_default();
        v.push(input.into());
        self.send_to = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of segments associated with the <code>send-to</code> action.</p>
    pub fn set_send_to(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.send_to = input;
        self
    }
    /// <p>The list of segments associated with the <code>send-to</code> action.</p>
    pub fn get_send_to(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.send_to
    }
    /// Consumes the builder and constructs a [`ServiceInsertionSegments`](crate::types::ServiceInsertionSegments).
    pub fn build(self) -> crate::types::ServiceInsertionSegments {
        crate::types::ServiceInsertionSegments {
            send_via: self.send_via,
            send_to: self.send_to,
        }
    }
}
