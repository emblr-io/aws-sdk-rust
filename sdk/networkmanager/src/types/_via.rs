// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The list of network function groups and edge overrides for the service insertion action. Used for both the <code>send-to</code> and <code>send-via</code> actions.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Via {
    /// <p>The list of network function groups associated with the service insertion action.</p>
    pub network_function_groups: ::std::option::Option<::std::vec::Vec<crate::types::NetworkFunctionGroup>>,
    /// <p>Describes any edge overrides. An edge override is a specific edge to be used for traffic.</p>
    pub with_edge_overrides: ::std::option::Option<::std::vec::Vec<crate::types::EdgeOverride>>,
}
impl Via {
    /// <p>The list of network function groups associated with the service insertion action.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_function_groups.is_none()`.
    pub fn network_function_groups(&self) -> &[crate::types::NetworkFunctionGroup] {
        self.network_function_groups.as_deref().unwrap_or_default()
    }
    /// <p>Describes any edge overrides. An edge override is a specific edge to be used for traffic.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.with_edge_overrides.is_none()`.
    pub fn with_edge_overrides(&self) -> &[crate::types::EdgeOverride] {
        self.with_edge_overrides.as_deref().unwrap_or_default()
    }
}
impl Via {
    /// Creates a new builder-style object to manufacture [`Via`](crate::types::Via).
    pub fn builder() -> crate::types::builders::ViaBuilder {
        crate::types::builders::ViaBuilder::default()
    }
}

/// A builder for [`Via`](crate::types::Via).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ViaBuilder {
    pub(crate) network_function_groups: ::std::option::Option<::std::vec::Vec<crate::types::NetworkFunctionGroup>>,
    pub(crate) with_edge_overrides: ::std::option::Option<::std::vec::Vec<crate::types::EdgeOverride>>,
}
impl ViaBuilder {
    /// Appends an item to `network_function_groups`.
    ///
    /// To override the contents of this collection use [`set_network_function_groups`](Self::set_network_function_groups).
    ///
    /// <p>The list of network function groups associated with the service insertion action.</p>
    pub fn network_function_groups(mut self, input: crate::types::NetworkFunctionGroup) -> Self {
        let mut v = self.network_function_groups.unwrap_or_default();
        v.push(input);
        self.network_function_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of network function groups associated with the service insertion action.</p>
    pub fn set_network_function_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NetworkFunctionGroup>>) -> Self {
        self.network_function_groups = input;
        self
    }
    /// <p>The list of network function groups associated with the service insertion action.</p>
    pub fn get_network_function_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NetworkFunctionGroup>> {
        &self.network_function_groups
    }
    /// Appends an item to `with_edge_overrides`.
    ///
    /// To override the contents of this collection use [`set_with_edge_overrides`](Self::set_with_edge_overrides).
    ///
    /// <p>Describes any edge overrides. An edge override is a specific edge to be used for traffic.</p>
    pub fn with_edge_overrides(mut self, input: crate::types::EdgeOverride) -> Self {
        let mut v = self.with_edge_overrides.unwrap_or_default();
        v.push(input);
        self.with_edge_overrides = ::std::option::Option::Some(v);
        self
    }
    /// <p>Describes any edge overrides. An edge override is a specific edge to be used for traffic.</p>
    pub fn set_with_edge_overrides(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EdgeOverride>>) -> Self {
        self.with_edge_overrides = input;
        self
    }
    /// <p>Describes any edge overrides. An edge override is a specific edge to be used for traffic.</p>
    pub fn get_with_edge_overrides(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EdgeOverride>> {
        &self.with_edge_overrides
    }
    /// Consumes the builder and constructs a [`Via`](crate::types::Via).
    pub fn build(self) -> crate::types::Via {
        crate::types::Via {
            network_function_groups: self.network_function_groups,
            with_edge_overrides: self.with_edge_overrides,
        }
    }
}
