// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes additional information about missing permissions.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PermissionsErrorContext {
    /// <p>The missing permissions.</p>
    pub missing_permission: ::std::option::Option<::std::string::String>,
}
impl PermissionsErrorContext {
    /// <p>The missing permissions.</p>
    pub fn missing_permission(&self) -> ::std::option::Option<&str> {
        self.missing_permission.as_deref()
    }
}
impl PermissionsErrorContext {
    /// Creates a new builder-style object to manufacture [`PermissionsErrorContext`](crate::types::PermissionsErrorContext).
    pub fn builder() -> crate::types::builders::PermissionsErrorContextBuilder {
        crate::types::builders::PermissionsErrorContextBuilder::default()
    }
}

/// A builder for [`PermissionsErrorContext`](crate::types::PermissionsErrorContext).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PermissionsErrorContextBuilder {
    pub(crate) missing_permission: ::std::option::Option<::std::string::String>,
}
impl PermissionsErrorContextBuilder {
    /// <p>The missing permissions.</p>
    pub fn missing_permission(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.missing_permission = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The missing permissions.</p>
    pub fn set_missing_permission(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.missing_permission = input;
        self
    }
    /// <p>The missing permissions.</p>
    pub fn get_missing_permission(&self) -> &::std::option::Option<::std::string::String> {
        &self.missing_permission
    }
    /// Consumes the builder and constructs a [`PermissionsErrorContext`](crate::types::PermissionsErrorContext).
    pub fn build(self) -> crate::types::PermissionsErrorContext {
        crate::types::PermissionsErrorContext {
            missing_permission: self.missing_permission,
        }
    }
}
