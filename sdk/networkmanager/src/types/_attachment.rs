// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a core network attachment.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Attachment {
    /// <p>The ID of a core network.</p>
    pub core_network_id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of a core network.</p>
    pub core_network_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the attachment.</p>
    pub attachment_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the attachment account owner.</p>
    pub owner_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of attachment.</p>
    pub attachment_type: ::std::option::Option<crate::types::AttachmentType>,
    /// <p>The state of the attachment.</p>
    pub state: ::std::option::Option<crate::types::AttachmentState>,
    /// <p>The Region where the edge is located. This is returned for all attachment types except a Direct Connect gateway attachment, which instead returns <code>EdgeLocations</code>.</p>
    pub edge_location: ::std::option::Option<::std::string::String>,
    /// <p>The edge locations that the Direct Connect gateway is associated with. This is returned only for Direct Connect gateway attachments. All other attachment types retrun <code>EdgeLocation</code>.</p>
    pub edge_locations: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The attachment resource ARN.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The policy rule number associated with the attachment.</p>
    pub attachment_policy_rule_number: ::std::option::Option<i32>,
    /// <p>The name of the segment attachment.</p>
    pub segment_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the network function group.</p>
    pub network_function_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The tags associated with the attachment.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The attachment to move from one segment to another.</p>
    pub proposed_segment_change: ::std::option::Option<crate::types::ProposedSegmentChange>,
    /// <p>Describes a proposed change to a network function group associated with the attachment.</p>
    pub proposed_network_function_group_change: ::std::option::Option<crate::types::ProposedNetworkFunctionGroupChange>,
    /// <p>The timestamp when the attachment was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the attachment was last updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Describes the error associated with the attachment request.</p>
    pub last_modification_errors: ::std::option::Option<::std::vec::Vec<crate::types::AttachmentError>>,
}
impl Attachment {
    /// <p>The ID of a core network.</p>
    pub fn core_network_id(&self) -> ::std::option::Option<&str> {
        self.core_network_id.as_deref()
    }
    /// <p>The ARN of a core network.</p>
    pub fn core_network_arn(&self) -> ::std::option::Option<&str> {
        self.core_network_arn.as_deref()
    }
    /// <p>The ID of the attachment.</p>
    pub fn attachment_id(&self) -> ::std::option::Option<&str> {
        self.attachment_id.as_deref()
    }
    /// <p>The ID of the attachment account owner.</p>
    pub fn owner_account_id(&self) -> ::std::option::Option<&str> {
        self.owner_account_id.as_deref()
    }
    /// <p>The type of attachment.</p>
    pub fn attachment_type(&self) -> ::std::option::Option<&crate::types::AttachmentType> {
        self.attachment_type.as_ref()
    }
    /// <p>The state of the attachment.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::AttachmentState> {
        self.state.as_ref()
    }
    /// <p>The Region where the edge is located. This is returned for all attachment types except a Direct Connect gateway attachment, which instead returns <code>EdgeLocations</code>.</p>
    pub fn edge_location(&self) -> ::std::option::Option<&str> {
        self.edge_location.as_deref()
    }
    /// <p>The edge locations that the Direct Connect gateway is associated with. This is returned only for Direct Connect gateway attachments. All other attachment types retrun <code>EdgeLocation</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.edge_locations.is_none()`.
    pub fn edge_locations(&self) -> &[::std::string::String] {
        self.edge_locations.as_deref().unwrap_or_default()
    }
    /// <p>The attachment resource ARN.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The policy rule number associated with the attachment.</p>
    pub fn attachment_policy_rule_number(&self) -> ::std::option::Option<i32> {
        self.attachment_policy_rule_number
    }
    /// <p>The name of the segment attachment.</p>
    pub fn segment_name(&self) -> ::std::option::Option<&str> {
        self.segment_name.as_deref()
    }
    /// <p>The name of the network function group.</p>
    pub fn network_function_group_name(&self) -> ::std::option::Option<&str> {
        self.network_function_group_name.as_deref()
    }
    /// <p>The tags associated with the attachment.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The attachment to move from one segment to another.</p>
    pub fn proposed_segment_change(&self) -> ::std::option::Option<&crate::types::ProposedSegmentChange> {
        self.proposed_segment_change.as_ref()
    }
    /// <p>Describes a proposed change to a network function group associated with the attachment.</p>
    pub fn proposed_network_function_group_change(&self) -> ::std::option::Option<&crate::types::ProposedNetworkFunctionGroupChange> {
        self.proposed_network_function_group_change.as_ref()
    }
    /// <p>The timestamp when the attachment was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp when the attachment was last updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>Describes the error associated with the attachment request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.last_modification_errors.is_none()`.
    pub fn last_modification_errors(&self) -> &[crate::types::AttachmentError] {
        self.last_modification_errors.as_deref().unwrap_or_default()
    }
}
impl Attachment {
    /// Creates a new builder-style object to manufacture [`Attachment`](crate::types::Attachment).
    pub fn builder() -> crate::types::builders::AttachmentBuilder {
        crate::types::builders::AttachmentBuilder::default()
    }
}

/// A builder for [`Attachment`](crate::types::Attachment).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AttachmentBuilder {
    pub(crate) core_network_id: ::std::option::Option<::std::string::String>,
    pub(crate) core_network_arn: ::std::option::Option<::std::string::String>,
    pub(crate) attachment_id: ::std::option::Option<::std::string::String>,
    pub(crate) owner_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) attachment_type: ::std::option::Option<crate::types::AttachmentType>,
    pub(crate) state: ::std::option::Option<crate::types::AttachmentState>,
    pub(crate) edge_location: ::std::option::Option<::std::string::String>,
    pub(crate) edge_locations: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) attachment_policy_rule_number: ::std::option::Option<i32>,
    pub(crate) segment_name: ::std::option::Option<::std::string::String>,
    pub(crate) network_function_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) proposed_segment_change: ::std::option::Option<crate::types::ProposedSegmentChange>,
    pub(crate) proposed_network_function_group_change: ::std::option::Option<crate::types::ProposedNetworkFunctionGroupChange>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modification_errors: ::std::option::Option<::std::vec::Vec<crate::types::AttachmentError>>,
}
impl AttachmentBuilder {
    /// <p>The ID of a core network.</p>
    pub fn core_network_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.core_network_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of a core network.</p>
    pub fn set_core_network_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.core_network_id = input;
        self
    }
    /// <p>The ID of a core network.</p>
    pub fn get_core_network_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.core_network_id
    }
    /// <p>The ARN of a core network.</p>
    pub fn core_network_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.core_network_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of a core network.</p>
    pub fn set_core_network_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.core_network_arn = input;
        self
    }
    /// <p>The ARN of a core network.</p>
    pub fn get_core_network_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.core_network_arn
    }
    /// <p>The ID of the attachment.</p>
    pub fn attachment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attachment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the attachment.</p>
    pub fn set_attachment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attachment_id = input;
        self
    }
    /// <p>The ID of the attachment.</p>
    pub fn get_attachment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.attachment_id
    }
    /// <p>The ID of the attachment account owner.</p>
    pub fn owner_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the attachment account owner.</p>
    pub fn set_owner_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_account_id = input;
        self
    }
    /// <p>The ID of the attachment account owner.</p>
    pub fn get_owner_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_account_id
    }
    /// <p>The type of attachment.</p>
    pub fn attachment_type(mut self, input: crate::types::AttachmentType) -> Self {
        self.attachment_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of attachment.</p>
    pub fn set_attachment_type(mut self, input: ::std::option::Option<crate::types::AttachmentType>) -> Self {
        self.attachment_type = input;
        self
    }
    /// <p>The type of attachment.</p>
    pub fn get_attachment_type(&self) -> &::std::option::Option<crate::types::AttachmentType> {
        &self.attachment_type
    }
    /// <p>The state of the attachment.</p>
    pub fn state(mut self, input: crate::types::AttachmentState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the attachment.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::AttachmentState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the attachment.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::AttachmentState> {
        &self.state
    }
    /// <p>The Region where the edge is located. This is returned for all attachment types except a Direct Connect gateway attachment, which instead returns <code>EdgeLocations</code>.</p>
    pub fn edge_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.edge_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Region where the edge is located. This is returned for all attachment types except a Direct Connect gateway attachment, which instead returns <code>EdgeLocations</code>.</p>
    pub fn set_edge_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.edge_location = input;
        self
    }
    /// <p>The Region where the edge is located. This is returned for all attachment types except a Direct Connect gateway attachment, which instead returns <code>EdgeLocations</code>.</p>
    pub fn get_edge_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.edge_location
    }
    /// Appends an item to `edge_locations`.
    ///
    /// To override the contents of this collection use [`set_edge_locations`](Self::set_edge_locations).
    ///
    /// <p>The edge locations that the Direct Connect gateway is associated with. This is returned only for Direct Connect gateway attachments. All other attachment types retrun <code>EdgeLocation</code>.</p>
    pub fn edge_locations(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.edge_locations.unwrap_or_default();
        v.push(input.into());
        self.edge_locations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The edge locations that the Direct Connect gateway is associated with. This is returned only for Direct Connect gateway attachments. All other attachment types retrun <code>EdgeLocation</code>.</p>
    pub fn set_edge_locations(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.edge_locations = input;
        self
    }
    /// <p>The edge locations that the Direct Connect gateway is associated with. This is returned only for Direct Connect gateway attachments. All other attachment types retrun <code>EdgeLocation</code>.</p>
    pub fn get_edge_locations(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.edge_locations
    }
    /// <p>The attachment resource ARN.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The attachment resource ARN.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The attachment resource ARN.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p>The policy rule number associated with the attachment.</p>
    pub fn attachment_policy_rule_number(mut self, input: i32) -> Self {
        self.attachment_policy_rule_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The policy rule number associated with the attachment.</p>
    pub fn set_attachment_policy_rule_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.attachment_policy_rule_number = input;
        self
    }
    /// <p>The policy rule number associated with the attachment.</p>
    pub fn get_attachment_policy_rule_number(&self) -> &::std::option::Option<i32> {
        &self.attachment_policy_rule_number
    }
    /// <p>The name of the segment attachment.</p>
    pub fn segment_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.segment_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the segment attachment.</p>
    pub fn set_segment_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.segment_name = input;
        self
    }
    /// <p>The name of the segment attachment.</p>
    pub fn get_segment_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.segment_name
    }
    /// <p>The name of the network function group.</p>
    pub fn network_function_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_function_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the network function group.</p>
    pub fn set_network_function_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_function_group_name = input;
        self
    }
    /// <p>The name of the network function group.</p>
    pub fn get_network_function_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_function_group_name
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with the attachment.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags associated with the attachment.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags associated with the attachment.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The attachment to move from one segment to another.</p>
    pub fn proposed_segment_change(mut self, input: crate::types::ProposedSegmentChange) -> Self {
        self.proposed_segment_change = ::std::option::Option::Some(input);
        self
    }
    /// <p>The attachment to move from one segment to another.</p>
    pub fn set_proposed_segment_change(mut self, input: ::std::option::Option<crate::types::ProposedSegmentChange>) -> Self {
        self.proposed_segment_change = input;
        self
    }
    /// <p>The attachment to move from one segment to another.</p>
    pub fn get_proposed_segment_change(&self) -> &::std::option::Option<crate::types::ProposedSegmentChange> {
        &self.proposed_segment_change
    }
    /// <p>Describes a proposed change to a network function group associated with the attachment.</p>
    pub fn proposed_network_function_group_change(mut self, input: crate::types::ProposedNetworkFunctionGroupChange) -> Self {
        self.proposed_network_function_group_change = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes a proposed change to a network function group associated with the attachment.</p>
    pub fn set_proposed_network_function_group_change(
        mut self,
        input: ::std::option::Option<crate::types::ProposedNetworkFunctionGroupChange>,
    ) -> Self {
        self.proposed_network_function_group_change = input;
        self
    }
    /// <p>Describes a proposed change to a network function group associated with the attachment.</p>
    pub fn get_proposed_network_function_group_change(&self) -> &::std::option::Option<crate::types::ProposedNetworkFunctionGroupChange> {
        &self.proposed_network_function_group_change
    }
    /// <p>The timestamp when the attachment was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the attachment was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the attachment was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when the attachment was last updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the attachment was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp when the attachment was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Appends an item to `last_modification_errors`.
    ///
    /// To override the contents of this collection use [`set_last_modification_errors`](Self::set_last_modification_errors).
    ///
    /// <p>Describes the error associated with the attachment request.</p>
    pub fn last_modification_errors(mut self, input: crate::types::AttachmentError) -> Self {
        let mut v = self.last_modification_errors.unwrap_or_default();
        v.push(input);
        self.last_modification_errors = ::std::option::Option::Some(v);
        self
    }
    /// <p>Describes the error associated with the attachment request.</p>
    pub fn set_last_modification_errors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AttachmentError>>) -> Self {
        self.last_modification_errors = input;
        self
    }
    /// <p>Describes the error associated with the attachment request.</p>
    pub fn get_last_modification_errors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AttachmentError>> {
        &self.last_modification_errors
    }
    /// Consumes the builder and constructs a [`Attachment`](crate::types::Attachment).
    pub fn build(self) -> crate::types::Attachment {
        crate::types::Attachment {
            core_network_id: self.core_network_id,
            core_network_arn: self.core_network_arn,
            attachment_id: self.attachment_id,
            owner_account_id: self.owner_account_id,
            attachment_type: self.attachment_type,
            state: self.state,
            edge_location: self.edge_location,
            edge_locations: self.edge_locations,
            resource_arn: self.resource_arn,
            attachment_policy_rule_number: self.attachment_policy_rule_number,
            segment_name: self.segment_name,
            network_function_group_name: self.network_function_group_name,
            tags: self.tags,
            proposed_segment_change: self.proposed_segment_change,
            proposed_network_function_group_change: self.proposed_network_function_group_change,
            created_at: self.created_at,
            updated_at: self.updated_at,
            last_modification_errors: self.last_modification_errors,
        }
    }
}
