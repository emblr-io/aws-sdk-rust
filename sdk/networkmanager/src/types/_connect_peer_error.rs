// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an error associated with a Connect peer request</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConnectPeerError {
    /// <p>The error code for the Connect peer request.</p>
    pub code: ::std::option::Option<crate::types::ConnectPeerErrorCode>,
    /// <p>The message associated with the error <code>code</code>.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the requested Connect peer resource.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Connect peer request.</p>
    pub request_id: ::std::option::Option<::std::string::String>,
}
impl ConnectPeerError {
    /// <p>The error code for the Connect peer request.</p>
    pub fn code(&self) -> ::std::option::Option<&crate::types::ConnectPeerErrorCode> {
        self.code.as_ref()
    }
    /// <p>The message associated with the error <code>code</code>.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The ARN of the requested Connect peer resource.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The ID of the Connect peer request.</p>
    pub fn request_id(&self) -> ::std::option::Option<&str> {
        self.request_id.as_deref()
    }
}
impl ConnectPeerError {
    /// Creates a new builder-style object to manufacture [`ConnectPeerError`](crate::types::ConnectPeerError).
    pub fn builder() -> crate::types::builders::ConnectPeerErrorBuilder {
        crate::types::builders::ConnectPeerErrorBuilder::default()
    }
}

/// A builder for [`ConnectPeerError`](crate::types::ConnectPeerError).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConnectPeerErrorBuilder {
    pub(crate) code: ::std::option::Option<crate::types::ConnectPeerErrorCode>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
}
impl ConnectPeerErrorBuilder {
    /// <p>The error code for the Connect peer request.</p>
    pub fn code(mut self, input: crate::types::ConnectPeerErrorCode) -> Self {
        self.code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The error code for the Connect peer request.</p>
    pub fn set_code(mut self, input: ::std::option::Option<crate::types::ConnectPeerErrorCode>) -> Self {
        self.code = input;
        self
    }
    /// <p>The error code for the Connect peer request.</p>
    pub fn get_code(&self) -> &::std::option::Option<crate::types::ConnectPeerErrorCode> {
        &self.code
    }
    /// <p>The message associated with the error <code>code</code>.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message associated with the error <code>code</code>.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The message associated with the error <code>code</code>.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>The ARN of the requested Connect peer resource.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the requested Connect peer resource.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The ARN of the requested Connect peer resource.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p>The ID of the Connect peer request.</p>
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Connect peer request.</p>
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>The ID of the Connect peer request.</p>
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    /// Consumes the builder and constructs a [`ConnectPeerError`](crate::types::ConnectPeerError).
    pub fn build(self) -> crate::types::ConnectPeerError {
        crate::types::ConnectPeerError {
            code: self.code,
            message: self.message,
            resource_arn: self.resource_arn,
            request_id: self.request_id,
        }
    }
}
