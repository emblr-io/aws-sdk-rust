// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the action that the service insertion will take for any segments associated with it.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceInsertionAction {
    /// <p>The action the service insertion takes for traffic. <code>send-via</code> sends east-west traffic between attachments. <code>send-to</code> sends north-south traffic to the security appliance, and then from that to either the Internet or to an on-premesis location.</p>
    pub action: ::std::option::Option<crate::types::SegmentActionServiceInsertion>,
    /// <p>Describes the mode packets take for the <code>send-via</code> action. This is not used when the action is <code>send-to</code>. <code>dual-hop</code> packets traverse attachments in both the source to the destination core network edges. This mode requires that an inspection attachment must be present in all Regions of the service insertion-enabled segments. For <code>single-hop</code>, packets traverse a single intermediate inserted attachment. You can use <code>EdgeOverride</code> to specify a specific edge to use.</p>
    pub mode: ::std::option::Option<crate::types::SendViaMode>,
    /// <p>The list of destination segments if the service insertion action is <code>send-via</code>.</p>
    pub when_sent_to: ::std::option::Option<crate::types::WhenSentTo>,
    /// <p>The list of network function groups and any edge overrides for the chosen service insertion action. Used for both <code>send-to</code> or <code>send-via</code>.</p>
    pub via: ::std::option::Option<crate::types::Via>,
}
impl ServiceInsertionAction {
    /// <p>The action the service insertion takes for traffic. <code>send-via</code> sends east-west traffic between attachments. <code>send-to</code> sends north-south traffic to the security appliance, and then from that to either the Internet or to an on-premesis location.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::SegmentActionServiceInsertion> {
        self.action.as_ref()
    }
    /// <p>Describes the mode packets take for the <code>send-via</code> action. This is not used when the action is <code>send-to</code>. <code>dual-hop</code> packets traverse attachments in both the source to the destination core network edges. This mode requires that an inspection attachment must be present in all Regions of the service insertion-enabled segments. For <code>single-hop</code>, packets traverse a single intermediate inserted attachment. You can use <code>EdgeOverride</code> to specify a specific edge to use.</p>
    pub fn mode(&self) -> ::std::option::Option<&crate::types::SendViaMode> {
        self.mode.as_ref()
    }
    /// <p>The list of destination segments if the service insertion action is <code>send-via</code>.</p>
    pub fn when_sent_to(&self) -> ::std::option::Option<&crate::types::WhenSentTo> {
        self.when_sent_to.as_ref()
    }
    /// <p>The list of network function groups and any edge overrides for the chosen service insertion action. Used for both <code>send-to</code> or <code>send-via</code>.</p>
    pub fn via(&self) -> ::std::option::Option<&crate::types::Via> {
        self.via.as_ref()
    }
}
impl ServiceInsertionAction {
    /// Creates a new builder-style object to manufacture [`ServiceInsertionAction`](crate::types::ServiceInsertionAction).
    pub fn builder() -> crate::types::builders::ServiceInsertionActionBuilder {
        crate::types::builders::ServiceInsertionActionBuilder::default()
    }
}

/// A builder for [`ServiceInsertionAction`](crate::types::ServiceInsertionAction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceInsertionActionBuilder {
    pub(crate) action: ::std::option::Option<crate::types::SegmentActionServiceInsertion>,
    pub(crate) mode: ::std::option::Option<crate::types::SendViaMode>,
    pub(crate) when_sent_to: ::std::option::Option<crate::types::WhenSentTo>,
    pub(crate) via: ::std::option::Option<crate::types::Via>,
}
impl ServiceInsertionActionBuilder {
    /// <p>The action the service insertion takes for traffic. <code>send-via</code> sends east-west traffic between attachments. <code>send-to</code> sends north-south traffic to the security appliance, and then from that to either the Internet or to an on-premesis location.</p>
    pub fn action(mut self, input: crate::types::SegmentActionServiceInsertion) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action the service insertion takes for traffic. <code>send-via</code> sends east-west traffic between attachments. <code>send-to</code> sends north-south traffic to the security appliance, and then from that to either the Internet or to an on-premesis location.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::SegmentActionServiceInsertion>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action the service insertion takes for traffic. <code>send-via</code> sends east-west traffic between attachments. <code>send-to</code> sends north-south traffic to the security appliance, and then from that to either the Internet or to an on-premesis location.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::SegmentActionServiceInsertion> {
        &self.action
    }
    /// <p>Describes the mode packets take for the <code>send-via</code> action. This is not used when the action is <code>send-to</code>. <code>dual-hop</code> packets traverse attachments in both the source to the destination core network edges. This mode requires that an inspection attachment must be present in all Regions of the service insertion-enabled segments. For <code>single-hop</code>, packets traverse a single intermediate inserted attachment. You can use <code>EdgeOverride</code> to specify a specific edge to use.</p>
    pub fn mode(mut self, input: crate::types::SendViaMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the mode packets take for the <code>send-via</code> action. This is not used when the action is <code>send-to</code>. <code>dual-hop</code> packets traverse attachments in both the source to the destination core network edges. This mode requires that an inspection attachment must be present in all Regions of the service insertion-enabled segments. For <code>single-hop</code>, packets traverse a single intermediate inserted attachment. You can use <code>EdgeOverride</code> to specify a specific edge to use.</p>
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::SendViaMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>Describes the mode packets take for the <code>send-via</code> action. This is not used when the action is <code>send-to</code>. <code>dual-hop</code> packets traverse attachments in both the source to the destination core network edges. This mode requires that an inspection attachment must be present in all Regions of the service insertion-enabled segments. For <code>single-hop</code>, packets traverse a single intermediate inserted attachment. You can use <code>EdgeOverride</code> to specify a specific edge to use.</p>
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::SendViaMode> {
        &self.mode
    }
    /// <p>The list of destination segments if the service insertion action is <code>send-via</code>.</p>
    pub fn when_sent_to(mut self, input: crate::types::WhenSentTo) -> Self {
        self.when_sent_to = ::std::option::Option::Some(input);
        self
    }
    /// <p>The list of destination segments if the service insertion action is <code>send-via</code>.</p>
    pub fn set_when_sent_to(mut self, input: ::std::option::Option<crate::types::WhenSentTo>) -> Self {
        self.when_sent_to = input;
        self
    }
    /// <p>The list of destination segments if the service insertion action is <code>send-via</code>.</p>
    pub fn get_when_sent_to(&self) -> &::std::option::Option<crate::types::WhenSentTo> {
        &self.when_sent_to
    }
    /// <p>The list of network function groups and any edge overrides for the chosen service insertion action. Used for both <code>send-to</code> or <code>send-via</code>.</p>
    pub fn via(mut self, input: crate::types::Via) -> Self {
        self.via = ::std::option::Option::Some(input);
        self
    }
    /// <p>The list of network function groups and any edge overrides for the chosen service insertion action. Used for both <code>send-to</code> or <code>send-via</code>.</p>
    pub fn set_via(mut self, input: ::std::option::Option<crate::types::Via>) -> Self {
        self.via = input;
        self
    }
    /// <p>The list of network function groups and any edge overrides for the chosen service insertion action. Used for both <code>send-to</code> or <code>send-via</code>.</p>
    pub fn get_via(&self) -> &::std::option::Option<crate::types::Via> {
        &self.via
    }
    /// Consumes the builder and constructs a [`ServiceInsertionAction`](crate::types::ServiceInsertionAction).
    pub fn build(self) -> crate::types::ServiceInsertionAction {
        crate::types::ServiceInsertionAction {
            action: self.action,
            mode: self.mode,
            when_sent_to: self.when_sent_to,
            via: self.via,
        }
    }
}
