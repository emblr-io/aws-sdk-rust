// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateDirectConnectGatewayAttachmentInput {
    /// <p>The ID of the Cloud WAN core network that the Direct Connect gateway attachment should be attached to.</p>
    pub core_network_id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the Direct Connect gateway attachment.</p>
    pub direct_connect_gateway_arn: ::std::option::Option<::std::string::String>,
    /// <p>One or more core network edge locations that the Direct Connect gateway attachment is associated with.</p>
    pub edge_locations: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The key value tags to apply to the Direct Connect gateway attachment during creation.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>client token</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateDirectConnectGatewayAttachmentInput {
    /// <p>The ID of the Cloud WAN core network that the Direct Connect gateway attachment should be attached to.</p>
    pub fn core_network_id(&self) -> ::std::option::Option<&str> {
        self.core_network_id.as_deref()
    }
    /// <p>The ARN of the Direct Connect gateway attachment.</p>
    pub fn direct_connect_gateway_arn(&self) -> ::std::option::Option<&str> {
        self.direct_connect_gateway_arn.as_deref()
    }
    /// <p>One or more core network edge locations that the Direct Connect gateway attachment is associated with.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.edge_locations.is_none()`.
    pub fn edge_locations(&self) -> &[::std::string::String] {
        self.edge_locations.as_deref().unwrap_or_default()
    }
    /// <p>The key value tags to apply to the Direct Connect gateway attachment during creation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>client token</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateDirectConnectGatewayAttachmentInput {
    /// Creates a new builder-style object to manufacture [`CreateDirectConnectGatewayAttachmentInput`](crate::operation::create_direct_connect_gateway_attachment::CreateDirectConnectGatewayAttachmentInput).
    pub fn builder() -> crate::operation::create_direct_connect_gateway_attachment::builders::CreateDirectConnectGatewayAttachmentInputBuilder {
        crate::operation::create_direct_connect_gateway_attachment::builders::CreateDirectConnectGatewayAttachmentInputBuilder::default()
    }
}

/// A builder for [`CreateDirectConnectGatewayAttachmentInput`](crate::operation::create_direct_connect_gateway_attachment::CreateDirectConnectGatewayAttachmentInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateDirectConnectGatewayAttachmentInputBuilder {
    pub(crate) core_network_id: ::std::option::Option<::std::string::String>,
    pub(crate) direct_connect_gateway_arn: ::std::option::Option<::std::string::String>,
    pub(crate) edge_locations: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateDirectConnectGatewayAttachmentInputBuilder {
    /// <p>The ID of the Cloud WAN core network that the Direct Connect gateway attachment should be attached to.</p>
    /// This field is required.
    pub fn core_network_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.core_network_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Cloud WAN core network that the Direct Connect gateway attachment should be attached to.</p>
    pub fn set_core_network_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.core_network_id = input;
        self
    }
    /// <p>The ID of the Cloud WAN core network that the Direct Connect gateway attachment should be attached to.</p>
    pub fn get_core_network_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.core_network_id
    }
    /// <p>The ARN of the Direct Connect gateway attachment.</p>
    /// This field is required.
    pub fn direct_connect_gateway_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.direct_connect_gateway_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Direct Connect gateway attachment.</p>
    pub fn set_direct_connect_gateway_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.direct_connect_gateway_arn = input;
        self
    }
    /// <p>The ARN of the Direct Connect gateway attachment.</p>
    pub fn get_direct_connect_gateway_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.direct_connect_gateway_arn
    }
    /// Appends an item to `edge_locations`.
    ///
    /// To override the contents of this collection use [`set_edge_locations`](Self::set_edge_locations).
    ///
    /// <p>One or more core network edge locations that the Direct Connect gateway attachment is associated with.</p>
    pub fn edge_locations(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.edge_locations.unwrap_or_default();
        v.push(input.into());
        self.edge_locations = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more core network edge locations that the Direct Connect gateway attachment is associated with.</p>
    pub fn set_edge_locations(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.edge_locations = input;
        self
    }
    /// <p>One or more core network edge locations that the Direct Connect gateway attachment is associated with.</p>
    pub fn get_edge_locations(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.edge_locations
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The key value tags to apply to the Direct Connect gateway attachment during creation.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The key value tags to apply to the Direct Connect gateway attachment during creation.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The key value tags to apply to the Direct Connect gateway attachment during creation.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>client token</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>client token</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>client token</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateDirectConnectGatewayAttachmentInput`](crate::operation::create_direct_connect_gateway_attachment::CreateDirectConnectGatewayAttachmentInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_direct_connect_gateway_attachment::CreateDirectConnectGatewayAttachmentInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_direct_connect_gateway_attachment::CreateDirectConnectGatewayAttachmentInput {
                core_network_id: self.core_network_id,
                direct_connect_gateway_arn: self.direct_connect_gateway_arn,
                edge_locations: self.edge_locations,
                tags: self.tags,
                client_token: self.client_token,
            },
        )
    }
}
