// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateDirectConnectGatewayAttachmentInput {
    /// <p>The ID of the Direct Connect gateway attachment for the updated edge locations.</p>
    pub attachment_id: ::std::option::Option<::std::string::String>,
    /// <p>One or more edge locations to update for the Direct Connect gateway attachment. The updated array of edge locations overwrites the previous array of locations. <code>EdgeLocations</code> is only used for Direct Connect gateway attachments.</p>
    pub edge_locations: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateDirectConnectGatewayAttachmentInput {
    /// <p>The ID of the Direct Connect gateway attachment for the updated edge locations.</p>
    pub fn attachment_id(&self) -> ::std::option::Option<&str> {
        self.attachment_id.as_deref()
    }
    /// <p>One or more edge locations to update for the Direct Connect gateway attachment. The updated array of edge locations overwrites the previous array of locations. <code>EdgeLocations</code> is only used for Direct Connect gateway attachments.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.edge_locations.is_none()`.
    pub fn edge_locations(&self) -> &[::std::string::String] {
        self.edge_locations.as_deref().unwrap_or_default()
    }
}
impl UpdateDirectConnectGatewayAttachmentInput {
    /// Creates a new builder-style object to manufacture [`UpdateDirectConnectGatewayAttachmentInput`](crate::operation::update_direct_connect_gateway_attachment::UpdateDirectConnectGatewayAttachmentInput).
    pub fn builder() -> crate::operation::update_direct_connect_gateway_attachment::builders::UpdateDirectConnectGatewayAttachmentInputBuilder {
        crate::operation::update_direct_connect_gateway_attachment::builders::UpdateDirectConnectGatewayAttachmentInputBuilder::default()
    }
}

/// A builder for [`UpdateDirectConnectGatewayAttachmentInput`](crate::operation::update_direct_connect_gateway_attachment::UpdateDirectConnectGatewayAttachmentInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateDirectConnectGatewayAttachmentInputBuilder {
    pub(crate) attachment_id: ::std::option::Option<::std::string::String>,
    pub(crate) edge_locations: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateDirectConnectGatewayAttachmentInputBuilder {
    /// <p>The ID of the Direct Connect gateway attachment for the updated edge locations.</p>
    /// This field is required.
    pub fn attachment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attachment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Direct Connect gateway attachment for the updated edge locations.</p>
    pub fn set_attachment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attachment_id = input;
        self
    }
    /// <p>The ID of the Direct Connect gateway attachment for the updated edge locations.</p>
    pub fn get_attachment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.attachment_id
    }
    /// Appends an item to `edge_locations`.
    ///
    /// To override the contents of this collection use [`set_edge_locations`](Self::set_edge_locations).
    ///
    /// <p>One or more edge locations to update for the Direct Connect gateway attachment. The updated array of edge locations overwrites the previous array of locations. <code>EdgeLocations</code> is only used for Direct Connect gateway attachments.</p>
    pub fn edge_locations(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.edge_locations.unwrap_or_default();
        v.push(input.into());
        self.edge_locations = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more edge locations to update for the Direct Connect gateway attachment. The updated array of edge locations overwrites the previous array of locations. <code>EdgeLocations</code> is only used for Direct Connect gateway attachments.</p>
    pub fn set_edge_locations(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.edge_locations = input;
        self
    }
    /// <p>One or more edge locations to update for the Direct Connect gateway attachment. The updated array of edge locations overwrites the previous array of locations. <code>EdgeLocations</code> is only used for Direct Connect gateway attachments.</p>
    pub fn get_edge_locations(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.edge_locations
    }
    /// Consumes the builder and constructs a [`UpdateDirectConnectGatewayAttachmentInput`](crate::operation::update_direct_connect_gateway_attachment::UpdateDirectConnectGatewayAttachmentInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_direct_connect_gateway_attachment::UpdateDirectConnectGatewayAttachmentInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_direct_connect_gateway_attachment::UpdateDirectConnectGatewayAttachmentInput {
                attachment_id: self.attachment_id,
                edge_locations: self.edge_locations,
            },
        )
    }
}
