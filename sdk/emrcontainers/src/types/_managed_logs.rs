// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The entity that provides configuration control over managed logs.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ManagedLogs {
    /// <p>Determines whether Amazon Web Services can retain logs.</p>
    pub allow_aws_to_retain_logs: ::std::option::Option<crate::types::AllowAwsToRetainLogs>,
    /// <p>The Amazon resource name (ARN) of the encryption key for logs.</p>
    pub encryption_key_arn: ::std::option::Option<::std::string::String>,
}
impl ManagedLogs {
    /// <p>Determines whether Amazon Web Services can retain logs.</p>
    pub fn allow_aws_to_retain_logs(&self) -> ::std::option::Option<&crate::types::AllowAwsToRetainLogs> {
        self.allow_aws_to_retain_logs.as_ref()
    }
    /// <p>The Amazon resource name (ARN) of the encryption key for logs.</p>
    pub fn encryption_key_arn(&self) -> ::std::option::Option<&str> {
        self.encryption_key_arn.as_deref()
    }
}
impl ManagedLogs {
    /// Creates a new builder-style object to manufacture [`ManagedLogs`](crate::types::ManagedLogs).
    pub fn builder() -> crate::types::builders::ManagedLogsBuilder {
        crate::types::builders::ManagedLogsBuilder::default()
    }
}

/// A builder for [`ManagedLogs`](crate::types::ManagedLogs).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ManagedLogsBuilder {
    pub(crate) allow_aws_to_retain_logs: ::std::option::Option<crate::types::AllowAwsToRetainLogs>,
    pub(crate) encryption_key_arn: ::std::option::Option<::std::string::String>,
}
impl ManagedLogsBuilder {
    /// <p>Determines whether Amazon Web Services can retain logs.</p>
    pub fn allow_aws_to_retain_logs(mut self, input: crate::types::AllowAwsToRetainLogs) -> Self {
        self.allow_aws_to_retain_logs = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether Amazon Web Services can retain logs.</p>
    pub fn set_allow_aws_to_retain_logs(mut self, input: ::std::option::Option<crate::types::AllowAwsToRetainLogs>) -> Self {
        self.allow_aws_to_retain_logs = input;
        self
    }
    /// <p>Determines whether Amazon Web Services can retain logs.</p>
    pub fn get_allow_aws_to_retain_logs(&self) -> &::std::option::Option<crate::types::AllowAwsToRetainLogs> {
        &self.allow_aws_to_retain_logs
    }
    /// <p>The Amazon resource name (ARN) of the encryption key for logs.</p>
    pub fn encryption_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encryption_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon resource name (ARN) of the encryption key for logs.</p>
    pub fn set_encryption_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encryption_key_arn = input;
        self
    }
    /// <p>The Amazon resource name (ARN) of the encryption key for logs.</p>
    pub fn get_encryption_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.encryption_key_arn
    }
    /// Consumes the builder and constructs a [`ManagedLogs`](crate::types::ManagedLogs).
    pub fn build(self) -> crate::types::ManagedLogs {
        crate::types::ManagedLogs {
            allow_aws_to_retain_logs: self.allow_aws_to_retain_logs,
            encryption_key_arn: self.encryption_key_arn,
        }
    }
}
