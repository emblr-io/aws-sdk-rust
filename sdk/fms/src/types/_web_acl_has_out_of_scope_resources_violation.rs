// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The violation details for a web ACL that's associated with at least one resource that's out of scope of the Firewall Manager policy.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WebAclHasOutOfScopeResourcesViolation {
    /// <p>The Amazon Resource Name (ARN) of the web ACL.</p>
    pub web_acl_arn: ::std::option::Option<::std::string::String>,
    /// <p>An array of Amazon Resource Name (ARN) for the resources that are out of scope of the policy and are associated with the web ACL.</p>
    pub out_of_scope_resource_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl WebAclHasOutOfScopeResourcesViolation {
    /// <p>The Amazon Resource Name (ARN) of the web ACL.</p>
    pub fn web_acl_arn(&self) -> ::std::option::Option<&str> {
        self.web_acl_arn.as_deref()
    }
    /// <p>An array of Amazon Resource Name (ARN) for the resources that are out of scope of the policy and are associated with the web ACL.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.out_of_scope_resource_list.is_none()`.
    pub fn out_of_scope_resource_list(&self) -> &[::std::string::String] {
        self.out_of_scope_resource_list.as_deref().unwrap_or_default()
    }
}
impl WebAclHasOutOfScopeResourcesViolation {
    /// Creates a new builder-style object to manufacture [`WebAclHasOutOfScopeResourcesViolation`](crate::types::WebAclHasOutOfScopeResourcesViolation).
    pub fn builder() -> crate::types::builders::WebAclHasOutOfScopeResourcesViolationBuilder {
        crate::types::builders::WebAclHasOutOfScopeResourcesViolationBuilder::default()
    }
}

/// A builder for [`WebAclHasOutOfScopeResourcesViolation`](crate::types::WebAclHasOutOfScopeResourcesViolation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WebAclHasOutOfScopeResourcesViolationBuilder {
    pub(crate) web_acl_arn: ::std::option::Option<::std::string::String>,
    pub(crate) out_of_scope_resource_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl WebAclHasOutOfScopeResourcesViolationBuilder {
    /// <p>The Amazon Resource Name (ARN) of the web ACL.</p>
    pub fn web_acl_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.web_acl_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the web ACL.</p>
    pub fn set_web_acl_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.web_acl_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the web ACL.</p>
    pub fn get_web_acl_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.web_acl_arn
    }
    /// Appends an item to `out_of_scope_resource_list`.
    ///
    /// To override the contents of this collection use [`set_out_of_scope_resource_list`](Self::set_out_of_scope_resource_list).
    ///
    /// <p>An array of Amazon Resource Name (ARN) for the resources that are out of scope of the policy and are associated with the web ACL.</p>
    pub fn out_of_scope_resource_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.out_of_scope_resource_list.unwrap_or_default();
        v.push(input.into());
        self.out_of_scope_resource_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of Amazon Resource Name (ARN) for the resources that are out of scope of the policy and are associated with the web ACL.</p>
    pub fn set_out_of_scope_resource_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.out_of_scope_resource_list = input;
        self
    }
    /// <p>An array of Amazon Resource Name (ARN) for the resources that are out of scope of the policy and are associated with the web ACL.</p>
    pub fn get_out_of_scope_resource_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.out_of_scope_resource_list
    }
    /// Consumes the builder and constructs a [`WebAclHasOutOfScopeResourcesViolation`](crate::types::WebAclHasOutOfScopeResourcesViolation).
    pub fn build(self) -> crate::types::WebAclHasOutOfScopeResourcesViolation {
        crate::types::WebAclHasOutOfScopeResourcesViolation {
            web_acl_arn: self.web_acl_arn,
            out_of_scope_resource_list: self.out_of_scope_resource_list,
        }
    }
}
