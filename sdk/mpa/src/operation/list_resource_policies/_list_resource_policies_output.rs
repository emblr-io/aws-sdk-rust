// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListResourcePoliciesOutput {
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a next call to the operation to get more output. You can repeat this until the <code>NextToken</code> response element returns <code>null</code>.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>An array of <code>ListResourcePoliciesResponseResourcePolicy</code> objects. Contains details about the policy for the resource.</p>
    pub resource_policies: ::std::option::Option<::std::vec::Vec<crate::types::ListResourcePoliciesResponseResourcePolicy>>,
    _request_id: Option<String>,
}
impl ListResourcePoliciesOutput {
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a next call to the operation to get more output. You can repeat this until the <code>NextToken</code> response element returns <code>null</code>.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>An array of <code>ListResourcePoliciesResponseResourcePolicy</code> objects. Contains details about the policy for the resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_policies.is_none()`.
    pub fn resource_policies(&self) -> &[crate::types::ListResourcePoliciesResponseResourcePolicy] {
        self.resource_policies.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for ListResourcePoliciesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListResourcePoliciesOutput {
    /// Creates a new builder-style object to manufacture [`ListResourcePoliciesOutput`](crate::operation::list_resource_policies::ListResourcePoliciesOutput).
    pub fn builder() -> crate::operation::list_resource_policies::builders::ListResourcePoliciesOutputBuilder {
        crate::operation::list_resource_policies::builders::ListResourcePoliciesOutputBuilder::default()
    }
}

/// A builder for [`ListResourcePoliciesOutput`](crate::operation::list_resource_policies::ListResourcePoliciesOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListResourcePoliciesOutputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) resource_policies: ::std::option::Option<::std::vec::Vec<crate::types::ListResourcePoliciesResponseResourcePolicy>>,
    _request_id: Option<String>,
}
impl ListResourcePoliciesOutputBuilder {
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a next call to the operation to get more output. You can repeat this until the <code>NextToken</code> response element returns <code>null</code>.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a next call to the operation to get more output. You can repeat this until the <code>NextToken</code> response element returns <code>null</code>.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a next call to the operation to get more output. You can repeat this until the <code>NextToken</code> response element returns <code>null</code>.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `resource_policies`.
    ///
    /// To override the contents of this collection use [`set_resource_policies`](Self::set_resource_policies).
    ///
    /// <p>An array of <code>ListResourcePoliciesResponseResourcePolicy</code> objects. Contains details about the policy for the resource.</p>
    pub fn resource_policies(mut self, input: crate::types::ListResourcePoliciesResponseResourcePolicy) -> Self {
        let mut v = self.resource_policies.unwrap_or_default();
        v.push(input);
        self.resource_policies = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>ListResourcePoliciesResponseResourcePolicy</code> objects. Contains details about the policy for the resource.</p>
    pub fn set_resource_policies(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ListResourcePoliciesResponseResourcePolicy>>,
    ) -> Self {
        self.resource_policies = input;
        self
    }
    /// <p>An array of <code>ListResourcePoliciesResponseResourcePolicy</code> objects. Contains details about the policy for the resource.</p>
    pub fn get_resource_policies(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ListResourcePoliciesResponseResourcePolicy>> {
        &self.resource_policies
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListResourcePoliciesOutput`](crate::operation::list_resource_policies::ListResourcePoliciesOutput).
    pub fn build(self) -> crate::operation::list_resource_policies::ListResourcePoliciesOutput {
        crate::operation::list_resource_policies::ListResourcePoliciesOutput {
            next_token: self.next_token,
            resource_policies: self.resource_policies,
            _request_id: self._request_id,
        }
    }
}
