// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetApprovalTeamOutput {
    /// <p>Timestamp when the team was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>An <code>ApprovalStrategyResponse</code> object. Contains details for how the team grants approval.</p>
    pub approval_strategy: ::std::option::Option<crate::types::ApprovalStrategyResponse>,
    /// <p>Total number of approvers in the team.</p>
    pub number_of_approvers: ::std::option::Option<i32>,
    /// <p>An array of <code>GetApprovalTeamResponseApprover </code> objects. Contains details for the approvers in the team.</p>
    pub approvers: ::std::option::Option<::std::vec::Vec<crate::types::GetApprovalTeamResponseApprover>>,
    /// <p>Amazon Resource Name (ARN) for the team.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>Description for the team.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Name of the approval team.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Status for the team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub status: ::std::option::Option<crate::types::ApprovalTeamStatus>,
    /// <p>Status code for the approval team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub status_code: ::std::option::Option<crate::types::ApprovalTeamStatusCode>,
    /// <p>Message describing the status for the team.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>Amazon Resource Name (ARN) for the session.</p>
    pub update_session_arn: ::std::option::Option<::std::string::String>,
    /// <p>Version ID for the team.</p>
    pub version_id: ::std::option::Option<::std::string::String>,
    /// <p>An array of <code>PolicyReference</code> objects. Contains a list of policies that define the permissions for team resources.</p>
    /// <p>The protected operation for a service integration might require specific permissions. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-integrations.html">How other services work with Multi-party approval</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub policies: ::std::option::Option<::std::vec::Vec<crate::types::PolicyReference>>,
    /// <p>Timestamp when the team was last updated.</p>
    pub last_update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A <code>PendingUpdate</code> object. Contains details for the pending updates for the team, if applicable.</p>
    pub pending_update: ::std::option::Option<crate::types::PendingUpdate>,
    _request_id: Option<String>,
}
impl GetApprovalTeamOutput {
    /// <p>Timestamp when the team was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>An <code>ApprovalStrategyResponse</code> object. Contains details for how the team grants approval.</p>
    pub fn approval_strategy(&self) -> ::std::option::Option<&crate::types::ApprovalStrategyResponse> {
        self.approval_strategy.as_ref()
    }
    /// <p>Total number of approvers in the team.</p>
    pub fn number_of_approvers(&self) -> ::std::option::Option<i32> {
        self.number_of_approvers
    }
    /// <p>An array of <code>GetApprovalTeamResponseApprover </code> objects. Contains details for the approvers in the team.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.approvers.is_none()`.
    pub fn approvers(&self) -> &[crate::types::GetApprovalTeamResponseApprover] {
        self.approvers.as_deref().unwrap_or_default()
    }
    /// <p>Amazon Resource Name (ARN) for the team.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>Description for the team.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Name of the approval team.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Status for the team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ApprovalTeamStatus> {
        self.status.as_ref()
    }
    /// <p>Status code for the approval team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn status_code(&self) -> ::std::option::Option<&crate::types::ApprovalTeamStatusCode> {
        self.status_code.as_ref()
    }
    /// <p>Message describing the status for the team.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>Amazon Resource Name (ARN) for the session.</p>
    pub fn update_session_arn(&self) -> ::std::option::Option<&str> {
        self.update_session_arn.as_deref()
    }
    /// <p>Version ID for the team.</p>
    pub fn version_id(&self) -> ::std::option::Option<&str> {
        self.version_id.as_deref()
    }
    /// <p>An array of <code>PolicyReference</code> objects. Contains a list of policies that define the permissions for team resources.</p>
    /// <p>The protected operation for a service integration might require specific permissions. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-integrations.html">How other services work with Multi-party approval</a> in the <i>Multi-party approval User Guide</i>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.policies.is_none()`.
    pub fn policies(&self) -> &[crate::types::PolicyReference] {
        self.policies.as_deref().unwrap_or_default()
    }
    /// <p>Timestamp when the team was last updated.</p>
    pub fn last_update_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_update_time.as_ref()
    }
    /// <p>A <code>PendingUpdate</code> object. Contains details for the pending updates for the team, if applicable.</p>
    pub fn pending_update(&self) -> ::std::option::Option<&crate::types::PendingUpdate> {
        self.pending_update.as_ref()
    }
}
impl ::std::fmt::Debug for GetApprovalTeamOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetApprovalTeamOutput");
        formatter.field("creation_time", &self.creation_time);
        formatter.field("approval_strategy", &self.approval_strategy);
        formatter.field("number_of_approvers", &self.number_of_approvers);
        formatter.field("approvers", &self.approvers);
        formatter.field("arn", &self.arn);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("name", &self.name);
        formatter.field("status", &self.status);
        formatter.field("status_code", &self.status_code);
        formatter.field("status_message", &self.status_message);
        formatter.field("update_session_arn", &self.update_session_arn);
        formatter.field("version_id", &self.version_id);
        formatter.field("policies", &self.policies);
        formatter.field("last_update_time", &self.last_update_time);
        formatter.field("pending_update", &self.pending_update);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetApprovalTeamOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetApprovalTeamOutput {
    /// Creates a new builder-style object to manufacture [`GetApprovalTeamOutput`](crate::operation::get_approval_team::GetApprovalTeamOutput).
    pub fn builder() -> crate::operation::get_approval_team::builders::GetApprovalTeamOutputBuilder {
        crate::operation::get_approval_team::builders::GetApprovalTeamOutputBuilder::default()
    }
}

/// A builder for [`GetApprovalTeamOutput`](crate::operation::get_approval_team::GetApprovalTeamOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetApprovalTeamOutputBuilder {
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) approval_strategy: ::std::option::Option<crate::types::ApprovalStrategyResponse>,
    pub(crate) number_of_approvers: ::std::option::Option<i32>,
    pub(crate) approvers: ::std::option::Option<::std::vec::Vec<crate::types::GetApprovalTeamResponseApprover>>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ApprovalTeamStatus>,
    pub(crate) status_code: ::std::option::Option<crate::types::ApprovalTeamStatusCode>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) update_session_arn: ::std::option::Option<::std::string::String>,
    pub(crate) version_id: ::std::option::Option<::std::string::String>,
    pub(crate) policies: ::std::option::Option<::std::vec::Vec<crate::types::PolicyReference>>,
    pub(crate) last_update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) pending_update: ::std::option::Option<crate::types::PendingUpdate>,
    _request_id: Option<String>,
}
impl GetApprovalTeamOutputBuilder {
    /// <p>Timestamp when the team was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp when the team was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>Timestamp when the team was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>An <code>ApprovalStrategyResponse</code> object. Contains details for how the team grants approval.</p>
    pub fn approval_strategy(mut self, input: crate::types::ApprovalStrategyResponse) -> Self {
        self.approval_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>An <code>ApprovalStrategyResponse</code> object. Contains details for how the team grants approval.</p>
    pub fn set_approval_strategy(mut self, input: ::std::option::Option<crate::types::ApprovalStrategyResponse>) -> Self {
        self.approval_strategy = input;
        self
    }
    /// <p>An <code>ApprovalStrategyResponse</code> object. Contains details for how the team grants approval.</p>
    pub fn get_approval_strategy(&self) -> &::std::option::Option<crate::types::ApprovalStrategyResponse> {
        &self.approval_strategy
    }
    /// <p>Total number of approvers in the team.</p>
    pub fn number_of_approvers(mut self, input: i32) -> Self {
        self.number_of_approvers = ::std::option::Option::Some(input);
        self
    }
    /// <p>Total number of approvers in the team.</p>
    pub fn set_number_of_approvers(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_approvers = input;
        self
    }
    /// <p>Total number of approvers in the team.</p>
    pub fn get_number_of_approvers(&self) -> &::std::option::Option<i32> {
        &self.number_of_approvers
    }
    /// Appends an item to `approvers`.
    ///
    /// To override the contents of this collection use [`set_approvers`](Self::set_approvers).
    ///
    /// <p>An array of <code>GetApprovalTeamResponseApprover </code> objects. Contains details for the approvers in the team.</p>
    pub fn approvers(mut self, input: crate::types::GetApprovalTeamResponseApprover) -> Self {
        let mut v = self.approvers.unwrap_or_default();
        v.push(input);
        self.approvers = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>GetApprovalTeamResponseApprover </code> objects. Contains details for the approvers in the team.</p>
    pub fn set_approvers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GetApprovalTeamResponseApprover>>) -> Self {
        self.approvers = input;
        self
    }
    /// <p>An array of <code>GetApprovalTeamResponseApprover </code> objects. Contains details for the approvers in the team.</p>
    pub fn get_approvers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GetApprovalTeamResponseApprover>> {
        &self.approvers
    }
    /// <p>Amazon Resource Name (ARN) for the team.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) for the team.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) for the team.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Description for the team.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Description for the team.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Description for the team.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Name of the approval team.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the approval team.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the approval team.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Status for the team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn status(mut self, input: crate::types::ApprovalTeamStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status for the team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ApprovalTeamStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Status for the team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ApprovalTeamStatus> {
        &self.status
    }
    /// <p>Status code for the approval team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn status_code(mut self, input: crate::types::ApprovalTeamStatusCode) -> Self {
        self.status_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status code for the approval team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn set_status_code(mut self, input: ::std::option::Option<crate::types::ApprovalTeamStatusCode>) -> Self {
        self.status_code = input;
        self
    }
    /// <p>Status code for the approval team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn get_status_code(&self) -> &::std::option::Option<crate::types::ApprovalTeamStatusCode> {
        &self.status_code
    }
    /// <p>Message describing the status for the team.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Message describing the status for the team.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>Message describing the status for the team.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>Amazon Resource Name (ARN) for the session.</p>
    pub fn update_session_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.update_session_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) for the session.</p>
    pub fn set_update_session_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.update_session_arn = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) for the session.</p>
    pub fn get_update_session_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.update_session_arn
    }
    /// <p>Version ID for the team.</p>
    pub fn version_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Version ID for the team.</p>
    pub fn set_version_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_id = input;
        self
    }
    /// <p>Version ID for the team.</p>
    pub fn get_version_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_id
    }
    /// Appends an item to `policies`.
    ///
    /// To override the contents of this collection use [`set_policies`](Self::set_policies).
    ///
    /// <p>An array of <code>PolicyReference</code> objects. Contains a list of policies that define the permissions for team resources.</p>
    /// <p>The protected operation for a service integration might require specific permissions. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-integrations.html">How other services work with Multi-party approval</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn policies(mut self, input: crate::types::PolicyReference) -> Self {
        let mut v = self.policies.unwrap_or_default();
        v.push(input);
        self.policies = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>PolicyReference</code> objects. Contains a list of policies that define the permissions for team resources.</p>
    /// <p>The protected operation for a service integration might require specific permissions. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-integrations.html">How other services work with Multi-party approval</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn set_policies(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PolicyReference>>) -> Self {
        self.policies = input;
        self
    }
    /// <p>An array of <code>PolicyReference</code> objects. Contains a list of policies that define the permissions for team resources.</p>
    /// <p>The protected operation for a service integration might require specific permissions. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-integrations.html">How other services work with Multi-party approval</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn get_policies(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PolicyReference>> {
        &self.policies
    }
    /// <p>Timestamp when the team was last updated.</p>
    pub fn last_update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp when the team was last updated.</p>
    pub fn set_last_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_update_time = input;
        self
    }
    /// <p>Timestamp when the team was last updated.</p>
    pub fn get_last_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_update_time
    }
    /// <p>A <code>PendingUpdate</code> object. Contains details for the pending updates for the team, if applicable.</p>
    pub fn pending_update(mut self, input: crate::types::PendingUpdate) -> Self {
        self.pending_update = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>PendingUpdate</code> object. Contains details for the pending updates for the team, if applicable.</p>
    pub fn set_pending_update(mut self, input: ::std::option::Option<crate::types::PendingUpdate>) -> Self {
        self.pending_update = input;
        self
    }
    /// <p>A <code>PendingUpdate</code> object. Contains details for the pending updates for the team, if applicable.</p>
    pub fn get_pending_update(&self) -> &::std::option::Option<crate::types::PendingUpdate> {
        &self.pending_update
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetApprovalTeamOutput`](crate::operation::get_approval_team::GetApprovalTeamOutput).
    pub fn build(self) -> crate::operation::get_approval_team::GetApprovalTeamOutput {
        crate::operation::get_approval_team::GetApprovalTeamOutput {
            creation_time: self.creation_time,
            approval_strategy: self.approval_strategy,
            number_of_approvers: self.number_of_approvers,
            approvers: self.approvers,
            arn: self.arn,
            description: self.description,
            name: self.name,
            status: self.status,
            status_code: self.status_code,
            status_message: self.status_message,
            update_session_arn: self.update_session_arn,
            version_id: self.version_id,
            policies: self.policies,
            last_update_time: self.last_update_time,
            pending_update: self.pending_update,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for GetApprovalTeamOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetApprovalTeamOutputBuilder");
        formatter.field("creation_time", &self.creation_time);
        formatter.field("approval_strategy", &self.approval_strategy);
        formatter.field("number_of_approvers", &self.number_of_approvers);
        formatter.field("approvers", &self.approvers);
        formatter.field("arn", &self.arn);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("name", &self.name);
        formatter.field("status", &self.status);
        formatter.field("status_code", &self.status_code);
        formatter.field("status_message", &self.status_message);
        formatter.field("update_session_arn", &self.update_session_arn);
        formatter.field("version_id", &self.version_id);
        formatter.field("policies", &self.policies);
        formatter.field("last_update_time", &self.last_update_time);
        formatter.field("pending_update", &self.pending_update);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
