// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the filter to apply to requests. You can specify up to 10 filters for a request.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Filter {
    /// <p>Name of the filter to use.</p><note>
    /// <p><b>Supported filters</b></p>
    /// <p>The supported filters for <code>ListSessions</code> are: <code>ActionName</code>, <code>SessionStatus</code>, and <code>InitationTime</code>.</p>
    /// </note>
    pub field_name: ::std::option::Option<crate::types::FilterField>,
    /// <p>Operator to use for filtering.</p>
    /// <ul>
    /// <li>
    /// <p><code>EQ</code>: Equal to the specified value</p></li>
    /// <li>
    /// <p><code>NE</code>: Not equal to the specified value</p></li>
    /// <li>
    /// <p><code>GT</code>: Greater than the specified value</p></li>
    /// <li>
    /// <p><code>LT</code>: Less than the specified value</p></li>
    /// <li>
    /// <p><code>GTE</code>: Greater than or equal to the specified value</p></li>
    /// <li>
    /// <p><code>LTE</code>: Less than or equal to the specified value</p></li>
    /// <li>
    /// <p><code>CONTAINS</code>: Contains the specified value</p></li>
    /// <li>
    /// <p><code>NOT_CONTAINS</code>: Does not contain the specified value</p></li>
    /// <li>
    /// <p><code>BETWEEN</code>: Between two values, inclusive of the specified values.</p></li>
    /// </ul><note>
    /// <p><b>Supported operators for each filter</b>:</p>
    /// <ul>
    /// <li>
    /// <p><code>ActionName</code>: <code>EQ</code> | <code>NE</code> | <code>CONTAINS</code> | <code>NOT_CONTAINS</code></p></li>
    /// <li>
    /// <p><code>SessionStatus</code>: <code>EQ</code> | <code>NE</code></p></li>
    /// <li>
    /// <p><code>InitiationTime</code>: <code>GT</code> | <code>LT</code> | <code>GTE</code> | <code>LTE</code> | <code>BETWEEN</code></p></li>
    /// </ul>
    /// </note>
    pub operator: ::std::option::Option<crate::types::Operator>,
    /// <p>Value to use for filtering. For the <code>BETWEEN</code> operator, specify values in the format <code>a AND b</code> (<code>AND</code> is case-insensitive).</p>
    pub value: ::std::option::Option<::std::string::String>,
}
impl Filter {
    /// <p>Name of the filter to use.</p><note>
    /// <p><b>Supported filters</b></p>
    /// <p>The supported filters for <code>ListSessions</code> are: <code>ActionName</code>, <code>SessionStatus</code>, and <code>InitationTime</code>.</p>
    /// </note>
    pub fn field_name(&self) -> ::std::option::Option<&crate::types::FilterField> {
        self.field_name.as_ref()
    }
    /// <p>Operator to use for filtering.</p>
    /// <ul>
    /// <li>
    /// <p><code>EQ</code>: Equal to the specified value</p></li>
    /// <li>
    /// <p><code>NE</code>: Not equal to the specified value</p></li>
    /// <li>
    /// <p><code>GT</code>: Greater than the specified value</p></li>
    /// <li>
    /// <p><code>LT</code>: Less than the specified value</p></li>
    /// <li>
    /// <p><code>GTE</code>: Greater than or equal to the specified value</p></li>
    /// <li>
    /// <p><code>LTE</code>: Less than or equal to the specified value</p></li>
    /// <li>
    /// <p><code>CONTAINS</code>: Contains the specified value</p></li>
    /// <li>
    /// <p><code>NOT_CONTAINS</code>: Does not contain the specified value</p></li>
    /// <li>
    /// <p><code>BETWEEN</code>: Between two values, inclusive of the specified values.</p></li>
    /// </ul><note>
    /// <p><b>Supported operators for each filter</b>:</p>
    /// <ul>
    /// <li>
    /// <p><code>ActionName</code>: <code>EQ</code> | <code>NE</code> | <code>CONTAINS</code> | <code>NOT_CONTAINS</code></p></li>
    /// <li>
    /// <p><code>SessionStatus</code>: <code>EQ</code> | <code>NE</code></p></li>
    /// <li>
    /// <p><code>InitiationTime</code>: <code>GT</code> | <code>LT</code> | <code>GTE</code> | <code>LTE</code> | <code>BETWEEN</code></p></li>
    /// </ul>
    /// </note>
    pub fn operator(&self) -> ::std::option::Option<&crate::types::Operator> {
        self.operator.as_ref()
    }
    /// <p>Value to use for filtering. For the <code>BETWEEN</code> operator, specify values in the format <code>a AND b</code> (<code>AND</code> is case-insensitive).</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl Filter {
    /// Creates a new builder-style object to manufacture [`Filter`](crate::types::Filter).
    pub fn builder() -> crate::types::builders::FilterBuilder {
        crate::types::builders::FilterBuilder::default()
    }
}

/// A builder for [`Filter`](crate::types::Filter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FilterBuilder {
    pub(crate) field_name: ::std::option::Option<crate::types::FilterField>,
    pub(crate) operator: ::std::option::Option<crate::types::Operator>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl FilterBuilder {
    /// <p>Name of the filter to use.</p><note>
    /// <p><b>Supported filters</b></p>
    /// <p>The supported filters for <code>ListSessions</code> are: <code>ActionName</code>, <code>SessionStatus</code>, and <code>InitationTime</code>.</p>
    /// </note>
    pub fn field_name(mut self, input: crate::types::FilterField) -> Self {
        self.field_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>Name of the filter to use.</p><note>
    /// <p><b>Supported filters</b></p>
    /// <p>The supported filters for <code>ListSessions</code> are: <code>ActionName</code>, <code>SessionStatus</code>, and <code>InitationTime</code>.</p>
    /// </note>
    pub fn set_field_name(mut self, input: ::std::option::Option<crate::types::FilterField>) -> Self {
        self.field_name = input;
        self
    }
    /// <p>Name of the filter to use.</p><note>
    /// <p><b>Supported filters</b></p>
    /// <p>The supported filters for <code>ListSessions</code> are: <code>ActionName</code>, <code>SessionStatus</code>, and <code>InitationTime</code>.</p>
    /// </note>
    pub fn get_field_name(&self) -> &::std::option::Option<crate::types::FilterField> {
        &self.field_name
    }
    /// <p>Operator to use for filtering.</p>
    /// <ul>
    /// <li>
    /// <p><code>EQ</code>: Equal to the specified value</p></li>
    /// <li>
    /// <p><code>NE</code>: Not equal to the specified value</p></li>
    /// <li>
    /// <p><code>GT</code>: Greater than the specified value</p></li>
    /// <li>
    /// <p><code>LT</code>: Less than the specified value</p></li>
    /// <li>
    /// <p><code>GTE</code>: Greater than or equal to the specified value</p></li>
    /// <li>
    /// <p><code>LTE</code>: Less than or equal to the specified value</p></li>
    /// <li>
    /// <p><code>CONTAINS</code>: Contains the specified value</p></li>
    /// <li>
    /// <p><code>NOT_CONTAINS</code>: Does not contain the specified value</p></li>
    /// <li>
    /// <p><code>BETWEEN</code>: Between two values, inclusive of the specified values.</p></li>
    /// </ul><note>
    /// <p><b>Supported operators for each filter</b>:</p>
    /// <ul>
    /// <li>
    /// <p><code>ActionName</code>: <code>EQ</code> | <code>NE</code> | <code>CONTAINS</code> | <code>NOT_CONTAINS</code></p></li>
    /// <li>
    /// <p><code>SessionStatus</code>: <code>EQ</code> | <code>NE</code></p></li>
    /// <li>
    /// <p><code>InitiationTime</code>: <code>GT</code> | <code>LT</code> | <code>GTE</code> | <code>LTE</code> | <code>BETWEEN</code></p></li>
    /// </ul>
    /// </note>
    pub fn operator(mut self, input: crate::types::Operator) -> Self {
        self.operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>Operator to use for filtering.</p>
    /// <ul>
    /// <li>
    /// <p><code>EQ</code>: Equal to the specified value</p></li>
    /// <li>
    /// <p><code>NE</code>: Not equal to the specified value</p></li>
    /// <li>
    /// <p><code>GT</code>: Greater than the specified value</p></li>
    /// <li>
    /// <p><code>LT</code>: Less than the specified value</p></li>
    /// <li>
    /// <p><code>GTE</code>: Greater than or equal to the specified value</p></li>
    /// <li>
    /// <p><code>LTE</code>: Less than or equal to the specified value</p></li>
    /// <li>
    /// <p><code>CONTAINS</code>: Contains the specified value</p></li>
    /// <li>
    /// <p><code>NOT_CONTAINS</code>: Does not contain the specified value</p></li>
    /// <li>
    /// <p><code>BETWEEN</code>: Between two values, inclusive of the specified values.</p></li>
    /// </ul><note>
    /// <p><b>Supported operators for each filter</b>:</p>
    /// <ul>
    /// <li>
    /// <p><code>ActionName</code>: <code>EQ</code> | <code>NE</code> | <code>CONTAINS</code> | <code>NOT_CONTAINS</code></p></li>
    /// <li>
    /// <p><code>SessionStatus</code>: <code>EQ</code> | <code>NE</code></p></li>
    /// <li>
    /// <p><code>InitiationTime</code>: <code>GT</code> | <code>LT</code> | <code>GTE</code> | <code>LTE</code> | <code>BETWEEN</code></p></li>
    /// </ul>
    /// </note>
    pub fn set_operator(mut self, input: ::std::option::Option<crate::types::Operator>) -> Self {
        self.operator = input;
        self
    }
    /// <p>Operator to use for filtering.</p>
    /// <ul>
    /// <li>
    /// <p><code>EQ</code>: Equal to the specified value</p></li>
    /// <li>
    /// <p><code>NE</code>: Not equal to the specified value</p></li>
    /// <li>
    /// <p><code>GT</code>: Greater than the specified value</p></li>
    /// <li>
    /// <p><code>LT</code>: Less than the specified value</p></li>
    /// <li>
    /// <p><code>GTE</code>: Greater than or equal to the specified value</p></li>
    /// <li>
    /// <p><code>LTE</code>: Less than or equal to the specified value</p></li>
    /// <li>
    /// <p><code>CONTAINS</code>: Contains the specified value</p></li>
    /// <li>
    /// <p><code>NOT_CONTAINS</code>: Does not contain the specified value</p></li>
    /// <li>
    /// <p><code>BETWEEN</code>: Between two values, inclusive of the specified values.</p></li>
    /// </ul><note>
    /// <p><b>Supported operators for each filter</b>:</p>
    /// <ul>
    /// <li>
    /// <p><code>ActionName</code>: <code>EQ</code> | <code>NE</code> | <code>CONTAINS</code> | <code>NOT_CONTAINS</code></p></li>
    /// <li>
    /// <p><code>SessionStatus</code>: <code>EQ</code> | <code>NE</code></p></li>
    /// <li>
    /// <p><code>InitiationTime</code>: <code>GT</code> | <code>LT</code> | <code>GTE</code> | <code>LTE</code> | <code>BETWEEN</code></p></li>
    /// </ul>
    /// </note>
    pub fn get_operator(&self) -> &::std::option::Option<crate::types::Operator> {
        &self.operator
    }
    /// <p>Value to use for filtering. For the <code>BETWEEN</code> operator, specify values in the format <code>a AND b</code> (<code>AND</code> is case-insensitive).</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Value to use for filtering. For the <code>BETWEEN</code> operator, specify values in the format <code>a AND b</code> (<code>AND</code> is case-insensitive).</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>Value to use for filtering. For the <code>BETWEEN</code> operator, specify values in the format <code>a AND b</code> (<code>AND</code> is case-insensitive).</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`Filter`](crate::types::Filter).
    pub fn build(self) -> crate::types::Filter {
        crate::types::Filter {
            field_name: self.field_name,
            operator: self.operator,
            value: self.value,
        }
    }
}
