// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details for an approval team</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListApprovalTeamsResponseApprovalTeam {
    /// <p>Timestamp when the team was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>An <code>ApprovalStrategyResponse</code> object. Contains details for how an approval team grants approval.</p>
    pub approval_strategy: ::std::option::Option<crate::types::ApprovalStrategyResponse>,
    /// <p>Total number of approvers in the team.</p>
    pub number_of_approvers: ::std::option::Option<i32>,
    /// <p>Amazon Resource Name (ARN) for the team.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>Name of the team.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Description for the team.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Status for the team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub status: ::std::option::Option<crate::types::ApprovalTeamStatus>,
    /// <p>Status code for the team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub status_code: ::std::option::Option<crate::types::ApprovalTeamStatusCode>,
    /// <p>Message describing the status for the team.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
}
impl ListApprovalTeamsResponseApprovalTeam {
    /// <p>Timestamp when the team was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>An <code>ApprovalStrategyResponse</code> object. Contains details for how an approval team grants approval.</p>
    pub fn approval_strategy(&self) -> ::std::option::Option<&crate::types::ApprovalStrategyResponse> {
        self.approval_strategy.as_ref()
    }
    /// <p>Total number of approvers in the team.</p>
    pub fn number_of_approvers(&self) -> ::std::option::Option<i32> {
        self.number_of_approvers
    }
    /// <p>Amazon Resource Name (ARN) for the team.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>Name of the team.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Description for the team.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Status for the team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ApprovalTeamStatus> {
        self.status.as_ref()
    }
    /// <p>Status code for the team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn status_code(&self) -> ::std::option::Option<&crate::types::ApprovalTeamStatusCode> {
        self.status_code.as_ref()
    }
    /// <p>Message describing the status for the team.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
}
impl ::std::fmt::Debug for ListApprovalTeamsResponseApprovalTeam {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListApprovalTeamsResponseApprovalTeam");
        formatter.field("creation_time", &self.creation_time);
        formatter.field("approval_strategy", &self.approval_strategy);
        formatter.field("number_of_approvers", &self.number_of_approvers);
        formatter.field("arn", &self.arn);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("status_code", &self.status_code);
        formatter.field("status_message", &self.status_message);
        formatter.finish()
    }
}
impl ListApprovalTeamsResponseApprovalTeam {
    /// Creates a new builder-style object to manufacture [`ListApprovalTeamsResponseApprovalTeam`](crate::types::ListApprovalTeamsResponseApprovalTeam).
    pub fn builder() -> crate::types::builders::ListApprovalTeamsResponseApprovalTeamBuilder {
        crate::types::builders::ListApprovalTeamsResponseApprovalTeamBuilder::default()
    }
}

/// A builder for [`ListApprovalTeamsResponseApprovalTeam`](crate::types::ListApprovalTeamsResponseApprovalTeam).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ListApprovalTeamsResponseApprovalTeamBuilder {
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) approval_strategy: ::std::option::Option<crate::types::ApprovalStrategyResponse>,
    pub(crate) number_of_approvers: ::std::option::Option<i32>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ApprovalTeamStatus>,
    pub(crate) status_code: ::std::option::Option<crate::types::ApprovalTeamStatusCode>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
}
impl ListApprovalTeamsResponseApprovalTeamBuilder {
    /// <p>Timestamp when the team was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp when the team was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>Timestamp when the team was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>An <code>ApprovalStrategyResponse</code> object. Contains details for how an approval team grants approval.</p>
    pub fn approval_strategy(mut self, input: crate::types::ApprovalStrategyResponse) -> Self {
        self.approval_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>An <code>ApprovalStrategyResponse</code> object. Contains details for how an approval team grants approval.</p>
    pub fn set_approval_strategy(mut self, input: ::std::option::Option<crate::types::ApprovalStrategyResponse>) -> Self {
        self.approval_strategy = input;
        self
    }
    /// <p>An <code>ApprovalStrategyResponse</code> object. Contains details for how an approval team grants approval.</p>
    pub fn get_approval_strategy(&self) -> &::std::option::Option<crate::types::ApprovalStrategyResponse> {
        &self.approval_strategy
    }
    /// <p>Total number of approvers in the team.</p>
    pub fn number_of_approvers(mut self, input: i32) -> Self {
        self.number_of_approvers = ::std::option::Option::Some(input);
        self
    }
    /// <p>Total number of approvers in the team.</p>
    pub fn set_number_of_approvers(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_approvers = input;
        self
    }
    /// <p>Total number of approvers in the team.</p>
    pub fn get_number_of_approvers(&self) -> &::std::option::Option<i32> {
        &self.number_of_approvers
    }
    /// <p>Amazon Resource Name (ARN) for the team.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) for the team.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) for the team.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Name of the team.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the team.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the team.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Description for the team.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Description for the team.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Description for the team.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Status for the team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn status(mut self, input: crate::types::ApprovalTeamStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status for the team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ApprovalTeamStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Status for the team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ApprovalTeamStatus> {
        &self.status
    }
    /// <p>Status code for the team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn status_code(mut self, input: crate::types::ApprovalTeamStatusCode) -> Self {
        self.status_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status code for the team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn set_status_code(mut self, input: ::std::option::Option<crate::types::ApprovalTeamStatusCode>) -> Self {
        self.status_code = input;
        self
    }
    /// <p>Status code for the team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn get_status_code(&self) -> &::std::option::Option<crate::types::ApprovalTeamStatusCode> {
        &self.status_code
    }
    /// <p>Message describing the status for the team.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Message describing the status for the team.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>Message describing the status for the team.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// Consumes the builder and constructs a [`ListApprovalTeamsResponseApprovalTeam`](crate::types::ListApprovalTeamsResponseApprovalTeam).
    pub fn build(self) -> crate::types::ListApprovalTeamsResponseApprovalTeam {
        crate::types::ListApprovalTeamsResponseApprovalTeam {
            creation_time: self.creation_time,
            approval_strategy: self.approval_strategy,
            number_of_approvers: self.number_of_approvers,
            arn: self.arn,
            name: self.name,
            description: self.description,
            status: self.status,
            status_code: self.status_code,
            status_message: self.status_message,
        }
    }
}
impl ::std::fmt::Debug for ListApprovalTeamsResponseApprovalTeamBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListApprovalTeamsResponseApprovalTeamBuilder");
        formatter.field("creation_time", &self.creation_time);
        formatter.field("approval_strategy", &self.approval_strategy);
        formatter.field("number_of_approvers", &self.number_of_approvers);
        formatter.field("arn", &self.arn);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("status_code", &self.status_code);
        formatter.field("status_message", &self.status_message);
        formatter.finish()
    }
}
