// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details for the version of a policy. Policies define what operations a team that define the permissions for team resources.</p>
/// <p>The protected operation for a service integration might require specific permissions. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-integrations.html">How other services work with Multi-party approval</a> in the <i>Multi-party approval User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PolicyVersion {
    /// <p>Amazon Resource Name (ARN) for the team.</p>
    pub arn: ::std::string::String,
    /// <p>Amazon Resource Name (ARN) for the policy.</p>
    pub policy_arn: ::std::string::String,
    /// <p>Verison ID</p>
    pub version_id: i32,
    /// <p>The type of policy.</p>
    pub policy_type: crate::types::PolicyType,
    /// <p>Determines if the specified policy is the default for the team.</p>
    pub is_default: bool,
    /// <p>Name of the policy.</p>
    pub name: ::std::string::String,
    /// <p>Status for the policy. For example, if the policy is <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_attach-policy.html">attachable</a> or <a href="https://docs.aws.amazon.com/access_policies_managed-deprecated.html">deprecated</a>.</p>
    pub status: crate::types::PolicyStatus,
    /// <p>Timestamp when the policy was created.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>Timestamp when the policy was last updated.</p>
    pub last_updated_time: ::aws_smithy_types::DateTime,
    /// <p>Document that contains the policy contents.</p>
    pub document: ::std::string::String,
}
impl PolicyVersion {
    /// <p>Amazon Resource Name (ARN) for the team.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>Amazon Resource Name (ARN) for the policy.</p>
    pub fn policy_arn(&self) -> &str {
        use std::ops::Deref;
        self.policy_arn.deref()
    }
    /// <p>Verison ID</p>
    pub fn version_id(&self) -> i32 {
        self.version_id
    }
    /// <p>The type of policy.</p>
    pub fn policy_type(&self) -> &crate::types::PolicyType {
        &self.policy_type
    }
    /// <p>Determines if the specified policy is the default for the team.</p>
    pub fn is_default(&self) -> bool {
        self.is_default
    }
    /// <p>Name of the policy.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Status for the policy. For example, if the policy is <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_attach-policy.html">attachable</a> or <a href="https://docs.aws.amazon.com/access_policies_managed-deprecated.html">deprecated</a>.</p>
    pub fn status(&self) -> &crate::types::PolicyStatus {
        &self.status
    }
    /// <p>Timestamp when the policy was created.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>Timestamp when the policy was last updated.</p>
    pub fn last_updated_time(&self) -> &::aws_smithy_types::DateTime {
        &self.last_updated_time
    }
    /// <p>Document that contains the policy contents.</p>
    pub fn document(&self) -> &str {
        use std::ops::Deref;
        self.document.deref()
    }
}
impl ::std::fmt::Debug for PolicyVersion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PolicyVersion");
        formatter.field("arn", &self.arn);
        formatter.field("policy_arn", &self.policy_arn);
        formatter.field("version_id", &self.version_id);
        formatter.field("policy_type", &self.policy_type);
        formatter.field("is_default", &self.is_default);
        formatter.field("name", &self.name);
        formatter.field("status", &self.status);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("last_updated_time", &self.last_updated_time);
        formatter.field("document", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl PolicyVersion {
    /// Creates a new builder-style object to manufacture [`PolicyVersion`](crate::types::PolicyVersion).
    pub fn builder() -> crate::types::builders::PolicyVersionBuilder {
        crate::types::builders::PolicyVersionBuilder::default()
    }
}

/// A builder for [`PolicyVersion`](crate::types::PolicyVersion).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct PolicyVersionBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) policy_arn: ::std::option::Option<::std::string::String>,
    pub(crate) version_id: ::std::option::Option<i32>,
    pub(crate) policy_type: ::std::option::Option<crate::types::PolicyType>,
    pub(crate) is_default: ::std::option::Option<bool>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::PolicyStatus>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) document: ::std::option::Option<::std::string::String>,
}
impl PolicyVersionBuilder {
    /// <p>Amazon Resource Name (ARN) for the team.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) for the team.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) for the team.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Amazon Resource Name (ARN) for the policy.</p>
    /// This field is required.
    pub fn policy_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) for the policy.</p>
    pub fn set_policy_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_arn = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) for the policy.</p>
    pub fn get_policy_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_arn
    }
    /// <p>Verison ID</p>
    /// This field is required.
    pub fn version_id(mut self, input: i32) -> Self {
        self.version_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>Verison ID</p>
    pub fn set_version_id(mut self, input: ::std::option::Option<i32>) -> Self {
        self.version_id = input;
        self
    }
    /// <p>Verison ID</p>
    pub fn get_version_id(&self) -> &::std::option::Option<i32> {
        &self.version_id
    }
    /// <p>The type of policy.</p>
    /// This field is required.
    pub fn policy_type(mut self, input: crate::types::PolicyType) -> Self {
        self.policy_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of policy.</p>
    pub fn set_policy_type(mut self, input: ::std::option::Option<crate::types::PolicyType>) -> Self {
        self.policy_type = input;
        self
    }
    /// <p>The type of policy.</p>
    pub fn get_policy_type(&self) -> &::std::option::Option<crate::types::PolicyType> {
        &self.policy_type
    }
    /// <p>Determines if the specified policy is the default for the team.</p>
    /// This field is required.
    pub fn is_default(mut self, input: bool) -> Self {
        self.is_default = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines if the specified policy is the default for the team.</p>
    pub fn set_is_default(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_default = input;
        self
    }
    /// <p>Determines if the specified policy is the default for the team.</p>
    pub fn get_is_default(&self) -> &::std::option::Option<bool> {
        &self.is_default
    }
    /// <p>Name of the policy.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the policy.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the policy.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Status for the policy. For example, if the policy is <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_attach-policy.html">attachable</a> or <a href="https://docs.aws.amazon.com/access_policies_managed-deprecated.html">deprecated</a>.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::PolicyStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status for the policy. For example, if the policy is <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_attach-policy.html">attachable</a> or <a href="https://docs.aws.amazon.com/access_policies_managed-deprecated.html">deprecated</a>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::PolicyStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Status for the policy. For example, if the policy is <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_attach-policy.html">attachable</a> or <a href="https://docs.aws.amazon.com/access_policies_managed-deprecated.html">deprecated</a>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::PolicyStatus> {
        &self.status
    }
    /// <p>Timestamp when the policy was created.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp when the policy was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>Timestamp when the policy was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>Timestamp when the policy was last updated.</p>
    /// This field is required.
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp when the policy was last updated.</p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>Timestamp when the policy was last updated.</p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// <p>Document that contains the policy contents.</p>
    /// This field is required.
    pub fn document(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.document = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Document that contains the policy contents.</p>
    pub fn set_document(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.document = input;
        self
    }
    /// <p>Document that contains the policy contents.</p>
    pub fn get_document(&self) -> &::std::option::Option<::std::string::String> {
        &self.document
    }
    /// Consumes the builder and constructs a [`PolicyVersion`](crate::types::PolicyVersion).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::PolicyVersionBuilder::arn)
    /// - [`policy_arn`](crate::types::builders::PolicyVersionBuilder::policy_arn)
    /// - [`version_id`](crate::types::builders::PolicyVersionBuilder::version_id)
    /// - [`policy_type`](crate::types::builders::PolicyVersionBuilder::policy_type)
    /// - [`is_default`](crate::types::builders::PolicyVersionBuilder::is_default)
    /// - [`name`](crate::types::builders::PolicyVersionBuilder::name)
    /// - [`status`](crate::types::builders::PolicyVersionBuilder::status)
    /// - [`creation_time`](crate::types::builders::PolicyVersionBuilder::creation_time)
    /// - [`last_updated_time`](crate::types::builders::PolicyVersionBuilder::last_updated_time)
    /// - [`document`](crate::types::builders::PolicyVersionBuilder::document)
    pub fn build(self) -> ::std::result::Result<crate::types::PolicyVersion, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PolicyVersion {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building PolicyVersion",
                )
            })?,
            policy_arn: self.policy_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "policy_arn",
                    "policy_arn was not specified but it is required when building PolicyVersion",
                )
            })?,
            version_id: self.version_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "version_id",
                    "version_id was not specified but it is required when building PolicyVersion",
                )
            })?,
            policy_type: self.policy_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "policy_type",
                    "policy_type was not specified but it is required when building PolicyVersion",
                )
            })?,
            is_default: self.is_default.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "is_default",
                    "is_default was not specified but it is required when building PolicyVersion",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building PolicyVersion",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building PolicyVersion",
                )
            })?,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building PolicyVersion",
                )
            })?,
            last_updated_time: self.last_updated_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_updated_time",
                    "last_updated_time was not specified but it is required when building PolicyVersion",
                )
            })?,
            document: self.document.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "document",
                    "document was not specified but it is required when building PolicyVersion",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for PolicyVersionBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PolicyVersionBuilder");
        formatter.field("arn", &self.arn);
        formatter.field("policy_arn", &self.policy_arn);
        formatter.field("version_id", &self.version_id);
        formatter.field("policy_type", &self.policy_type);
        formatter.field("is_default", &self.is_default);
        formatter.field("name", &self.name);
        formatter.field("status", &self.status);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("last_updated_time", &self.last_updated_time);
        formatter.field("document", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
