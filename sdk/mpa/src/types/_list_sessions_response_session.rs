// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details for an approval session. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Session</a> in the <i>Multi-party approval User Guide</i></p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListSessionsResponseSession {
    /// <p>Amazon Resource Name (ARN) for the session.</p>
    pub session_arn: ::std::option::Option<::std::string::String>,
    /// <p>Name of the approval team.</p>
    pub approval_team_name: ::std::option::Option<::std::string::String>,
    /// <p>Amazon Resource Name (ARN) for the approval team.</p>
    pub approval_team_arn: ::std::option::Option<::std::string::String>,
    /// <p>Timestamp when the session was initiated.</p>
    pub initiation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Timestamp when the session was expire.</p>
    pub expiration_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Timestamp when the session was completed.</p>
    pub completion_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Description for the team.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Name of the protected operation.</p>
    pub action_name: ::std::option::Option<::std::string::String>,
    /// <p>Amazon Resource Name (ARN) for the protected operation.</p>
    pub protected_resource_arn: ::std::option::Option<::std::string::String>,
    /// <p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#principal-services">Service principal</a> for the service associated with the protected operation.</p>
    pub requester_service_principal: ::std::option::Option<::std::string::String>,
    /// <p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/intro-structure.html#intro-structure-request">IAM principal</a> that made the operation request.</p>
    pub requester_principal_arn: ::std::option::Option<::std::string::String>,
    /// <p>Amazon Web Services Region where the operation request originated.</p>
    pub requester_region: ::std::option::Option<::std::string::String>,
    /// <p>ID for the account that made the operation request.</p>
    pub requester_account_id: ::std::option::Option<::std::string::String>,
    /// <p>Status for the protected operation. For example, if the operation is <code>PENDING</code>.</p>
    pub status: ::std::option::Option<crate::types::SessionStatus>,
    /// <p>Status code of the session.</p>
    pub status_code: ::std::option::Option<crate::types::SessionStatusCode>,
    /// <p>Message describing the status for session.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>Strategy for executing the protected operation. <code>AUTO_COMPLETION_UPON_APPROVAL</code> means the operation is executed automatically using the requester's permissions, if approved.</p>
    pub action_completion_strategy: ::std::option::Option<crate::types::ActionCompletionStrategy>,
}
impl ListSessionsResponseSession {
    /// <p>Amazon Resource Name (ARN) for the session.</p>
    pub fn session_arn(&self) -> ::std::option::Option<&str> {
        self.session_arn.as_deref()
    }
    /// <p>Name of the approval team.</p>
    pub fn approval_team_name(&self) -> ::std::option::Option<&str> {
        self.approval_team_name.as_deref()
    }
    /// <p>Amazon Resource Name (ARN) for the approval team.</p>
    pub fn approval_team_arn(&self) -> ::std::option::Option<&str> {
        self.approval_team_arn.as_deref()
    }
    /// <p>Timestamp when the session was initiated.</p>
    pub fn initiation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.initiation_time.as_ref()
    }
    /// <p>Timestamp when the session was expire.</p>
    pub fn expiration_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.expiration_time.as_ref()
    }
    /// <p>Timestamp when the session was completed.</p>
    pub fn completion_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.completion_time.as_ref()
    }
    /// <p>Description for the team.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Name of the protected operation.</p>
    pub fn action_name(&self) -> ::std::option::Option<&str> {
        self.action_name.as_deref()
    }
    /// <p>Amazon Resource Name (ARN) for the protected operation.</p>
    pub fn protected_resource_arn(&self) -> ::std::option::Option<&str> {
        self.protected_resource_arn.as_deref()
    }
    /// <p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#principal-services">Service principal</a> for the service associated with the protected operation.</p>
    pub fn requester_service_principal(&self) -> ::std::option::Option<&str> {
        self.requester_service_principal.as_deref()
    }
    /// <p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/intro-structure.html#intro-structure-request">IAM principal</a> that made the operation request.</p>
    pub fn requester_principal_arn(&self) -> ::std::option::Option<&str> {
        self.requester_principal_arn.as_deref()
    }
    /// <p>Amazon Web Services Region where the operation request originated.</p>
    pub fn requester_region(&self) -> ::std::option::Option<&str> {
        self.requester_region.as_deref()
    }
    /// <p>ID for the account that made the operation request.</p>
    pub fn requester_account_id(&self) -> ::std::option::Option<&str> {
        self.requester_account_id.as_deref()
    }
    /// <p>Status for the protected operation. For example, if the operation is <code>PENDING</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::SessionStatus> {
        self.status.as_ref()
    }
    /// <p>Status code of the session.</p>
    pub fn status_code(&self) -> ::std::option::Option<&crate::types::SessionStatusCode> {
        self.status_code.as_ref()
    }
    /// <p>Message describing the status for session.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>Strategy for executing the protected operation. <code>AUTO_COMPLETION_UPON_APPROVAL</code> means the operation is executed automatically using the requester's permissions, if approved.</p>
    pub fn action_completion_strategy(&self) -> ::std::option::Option<&crate::types::ActionCompletionStrategy> {
        self.action_completion_strategy.as_ref()
    }
}
impl ::std::fmt::Debug for ListSessionsResponseSession {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListSessionsResponseSession");
        formatter.field("session_arn", &self.session_arn);
        formatter.field("approval_team_name", &self.approval_team_name);
        formatter.field("approval_team_arn", &self.approval_team_arn);
        formatter.field("initiation_time", &self.initiation_time);
        formatter.field("expiration_time", &self.expiration_time);
        formatter.field("completion_time", &self.completion_time);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("action_name", &self.action_name);
        formatter.field("protected_resource_arn", &self.protected_resource_arn);
        formatter.field("requester_service_principal", &self.requester_service_principal);
        formatter.field("requester_principal_arn", &self.requester_principal_arn);
        formatter.field("requester_region", &self.requester_region);
        formatter.field("requester_account_id", &self.requester_account_id);
        formatter.field("status", &self.status);
        formatter.field("status_code", &self.status_code);
        formatter.field("status_message", &self.status_message);
        formatter.field("action_completion_strategy", &self.action_completion_strategy);
        formatter.finish()
    }
}
impl ListSessionsResponseSession {
    /// Creates a new builder-style object to manufacture [`ListSessionsResponseSession`](crate::types::ListSessionsResponseSession).
    pub fn builder() -> crate::types::builders::ListSessionsResponseSessionBuilder {
        crate::types::builders::ListSessionsResponseSessionBuilder::default()
    }
}

/// A builder for [`ListSessionsResponseSession`](crate::types::ListSessionsResponseSession).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ListSessionsResponseSessionBuilder {
    pub(crate) session_arn: ::std::option::Option<::std::string::String>,
    pub(crate) approval_team_name: ::std::option::Option<::std::string::String>,
    pub(crate) approval_team_arn: ::std::option::Option<::std::string::String>,
    pub(crate) initiation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) expiration_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) completion_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) action_name: ::std::option::Option<::std::string::String>,
    pub(crate) protected_resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) requester_service_principal: ::std::option::Option<::std::string::String>,
    pub(crate) requester_principal_arn: ::std::option::Option<::std::string::String>,
    pub(crate) requester_region: ::std::option::Option<::std::string::String>,
    pub(crate) requester_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::SessionStatus>,
    pub(crate) status_code: ::std::option::Option<crate::types::SessionStatusCode>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) action_completion_strategy: ::std::option::Option<crate::types::ActionCompletionStrategy>,
}
impl ListSessionsResponseSessionBuilder {
    /// <p>Amazon Resource Name (ARN) for the session.</p>
    pub fn session_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) for the session.</p>
    pub fn set_session_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_arn = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) for the session.</p>
    pub fn get_session_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_arn
    }
    /// <p>Name of the approval team.</p>
    pub fn approval_team_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.approval_team_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the approval team.</p>
    pub fn set_approval_team_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.approval_team_name = input;
        self
    }
    /// <p>Name of the approval team.</p>
    pub fn get_approval_team_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.approval_team_name
    }
    /// <p>Amazon Resource Name (ARN) for the approval team.</p>
    pub fn approval_team_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.approval_team_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) for the approval team.</p>
    pub fn set_approval_team_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.approval_team_arn = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) for the approval team.</p>
    pub fn get_approval_team_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.approval_team_arn
    }
    /// <p>Timestamp when the session was initiated.</p>
    pub fn initiation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.initiation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp when the session was initiated.</p>
    pub fn set_initiation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.initiation_time = input;
        self
    }
    /// <p>Timestamp when the session was initiated.</p>
    pub fn get_initiation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.initiation_time
    }
    /// <p>Timestamp when the session was expire.</p>
    pub fn expiration_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expiration_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp when the session was expire.</p>
    pub fn set_expiration_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expiration_time = input;
        self
    }
    /// <p>Timestamp when the session was expire.</p>
    pub fn get_expiration_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expiration_time
    }
    /// <p>Timestamp when the session was completed.</p>
    pub fn completion_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.completion_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp when the session was completed.</p>
    pub fn set_completion_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.completion_time = input;
        self
    }
    /// <p>Timestamp when the session was completed.</p>
    pub fn get_completion_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.completion_time
    }
    /// <p>Description for the team.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Description for the team.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Description for the team.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Name of the protected operation.</p>
    pub fn action_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the protected operation.</p>
    pub fn set_action_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_name = input;
        self
    }
    /// <p>Name of the protected operation.</p>
    pub fn get_action_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_name
    }
    /// <p>Amazon Resource Name (ARN) for the protected operation.</p>
    pub fn protected_resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.protected_resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) for the protected operation.</p>
    pub fn set_protected_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.protected_resource_arn = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) for the protected operation.</p>
    pub fn get_protected_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.protected_resource_arn
    }
    /// <p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#principal-services">Service principal</a> for the service associated with the protected operation.</p>
    pub fn requester_service_principal(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.requester_service_principal = ::std::option::Option::Some(input.into());
        self
    }
    /// <p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#principal-services">Service principal</a> for the service associated with the protected operation.</p>
    pub fn set_requester_service_principal(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.requester_service_principal = input;
        self
    }
    /// <p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#principal-services">Service principal</a> for the service associated with the protected operation.</p>
    pub fn get_requester_service_principal(&self) -> &::std::option::Option<::std::string::String> {
        &self.requester_service_principal
    }
    /// <p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/intro-structure.html#intro-structure-request">IAM principal</a> that made the operation request.</p>
    pub fn requester_principal_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.requester_principal_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/intro-structure.html#intro-structure-request">IAM principal</a> that made the operation request.</p>
    pub fn set_requester_principal_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.requester_principal_arn = input;
        self
    }
    /// <p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/intro-structure.html#intro-structure-request">IAM principal</a> that made the operation request.</p>
    pub fn get_requester_principal_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.requester_principal_arn
    }
    /// <p>Amazon Web Services Region where the operation request originated.</p>
    pub fn requester_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.requester_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Web Services Region where the operation request originated.</p>
    pub fn set_requester_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.requester_region = input;
        self
    }
    /// <p>Amazon Web Services Region where the operation request originated.</p>
    pub fn get_requester_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.requester_region
    }
    /// <p>ID for the account that made the operation request.</p>
    pub fn requester_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.requester_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID for the account that made the operation request.</p>
    pub fn set_requester_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.requester_account_id = input;
        self
    }
    /// <p>ID for the account that made the operation request.</p>
    pub fn get_requester_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.requester_account_id
    }
    /// <p>Status for the protected operation. For example, if the operation is <code>PENDING</code>.</p>
    pub fn status(mut self, input: crate::types::SessionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status for the protected operation. For example, if the operation is <code>PENDING</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SessionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Status for the protected operation. For example, if the operation is <code>PENDING</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SessionStatus> {
        &self.status
    }
    /// <p>Status code of the session.</p>
    pub fn status_code(mut self, input: crate::types::SessionStatusCode) -> Self {
        self.status_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status code of the session.</p>
    pub fn set_status_code(mut self, input: ::std::option::Option<crate::types::SessionStatusCode>) -> Self {
        self.status_code = input;
        self
    }
    /// <p>Status code of the session.</p>
    pub fn get_status_code(&self) -> &::std::option::Option<crate::types::SessionStatusCode> {
        &self.status_code
    }
    /// <p>Message describing the status for session.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Message describing the status for session.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>Message describing the status for session.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>Strategy for executing the protected operation. <code>AUTO_COMPLETION_UPON_APPROVAL</code> means the operation is executed automatically using the requester's permissions, if approved.</p>
    pub fn action_completion_strategy(mut self, input: crate::types::ActionCompletionStrategy) -> Self {
        self.action_completion_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Strategy for executing the protected operation. <code>AUTO_COMPLETION_UPON_APPROVAL</code> means the operation is executed automatically using the requester's permissions, if approved.</p>
    pub fn set_action_completion_strategy(mut self, input: ::std::option::Option<crate::types::ActionCompletionStrategy>) -> Self {
        self.action_completion_strategy = input;
        self
    }
    /// <p>Strategy for executing the protected operation. <code>AUTO_COMPLETION_UPON_APPROVAL</code> means the operation is executed automatically using the requester's permissions, if approved.</p>
    pub fn get_action_completion_strategy(&self) -> &::std::option::Option<crate::types::ActionCompletionStrategy> {
        &self.action_completion_strategy
    }
    /// Consumes the builder and constructs a [`ListSessionsResponseSession`](crate::types::ListSessionsResponseSession).
    pub fn build(self) -> crate::types::ListSessionsResponseSession {
        crate::types::ListSessionsResponseSession {
            session_arn: self.session_arn,
            approval_team_name: self.approval_team_name,
            approval_team_arn: self.approval_team_arn,
            initiation_time: self.initiation_time,
            expiration_time: self.expiration_time,
            completion_time: self.completion_time,
            description: self.description,
            action_name: self.action_name,
            protected_resource_arn: self.protected_resource_arn,
            requester_service_principal: self.requester_service_principal,
            requester_principal_arn: self.requester_principal_arn,
            requester_region: self.requester_region,
            requester_account_id: self.requester_account_id,
            status: self.status,
            status_code: self.status_code,
            status_message: self.status_message,
            action_completion_strategy: self.action_completion_strategy,
        }
    }
}
impl ::std::fmt::Debug for ListSessionsResponseSessionBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListSessionsResponseSessionBuilder");
        formatter.field("session_arn", &self.session_arn);
        formatter.field("approval_team_name", &self.approval_team_name);
        formatter.field("approval_team_arn", &self.approval_team_arn);
        formatter.field("initiation_time", &self.initiation_time);
        formatter.field("expiration_time", &self.expiration_time);
        formatter.field("completion_time", &self.completion_time);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("action_name", &self.action_name);
        formatter.field("protected_resource_arn", &self.protected_resource_arn);
        formatter.field("requester_service_principal", &self.requester_service_principal);
        formatter.field("requester_principal_arn", &self.requester_principal_arn);
        formatter.field("requester_region", &self.requester_region);
        formatter.field("requester_account_id", &self.requester_account_id);
        formatter.field("status", &self.status);
        formatter.field("status_code", &self.status_code);
        formatter.field("status_message", &self.status_message);
        formatter.field("action_completion_strategy", &self.action_completion_strategy);
        formatter.finish()
    }
}
