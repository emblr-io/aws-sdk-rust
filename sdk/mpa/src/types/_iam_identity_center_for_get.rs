// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>IAM Identity Center credentials. For more information see, <a href="http://aws.amazon.com/identity-center/">IAM Identity Center</a> .</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IamIdentityCenterForGet {
    /// <p>Amazon Resource Name (ARN) for the IAM Identity Center instance.</p>
    pub instance_arn: ::std::option::Option<::std::string::String>,
    /// <p>URL for the approval portal associated with the IAM Identity Center instance.</p>
    pub approval_portal_url: ::std::option::Option<::std::string::String>,
    /// <p>Amazon Web Services Region where the IAM Identity Center instance is located.</p>
    pub region: ::std::option::Option<::std::string::String>,
}
impl IamIdentityCenterForGet {
    /// <p>Amazon Resource Name (ARN) for the IAM Identity Center instance.</p>
    pub fn instance_arn(&self) -> ::std::option::Option<&str> {
        self.instance_arn.as_deref()
    }
    /// <p>URL for the approval portal associated with the IAM Identity Center instance.</p>
    pub fn approval_portal_url(&self) -> ::std::option::Option<&str> {
        self.approval_portal_url.as_deref()
    }
    /// <p>Amazon Web Services Region where the IAM Identity Center instance is located.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
}
impl IamIdentityCenterForGet {
    /// Creates a new builder-style object to manufacture [`IamIdentityCenterForGet`](crate::types::IamIdentityCenterForGet).
    pub fn builder() -> crate::types::builders::IamIdentityCenterForGetBuilder {
        crate::types::builders::IamIdentityCenterForGetBuilder::default()
    }
}

/// A builder for [`IamIdentityCenterForGet`](crate::types::IamIdentityCenterForGet).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IamIdentityCenterForGetBuilder {
    pub(crate) instance_arn: ::std::option::Option<::std::string::String>,
    pub(crate) approval_portal_url: ::std::option::Option<::std::string::String>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
}
impl IamIdentityCenterForGetBuilder {
    /// <p>Amazon Resource Name (ARN) for the IAM Identity Center instance.</p>
    pub fn instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) for the IAM Identity Center instance.</p>
    pub fn set_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_arn = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) for the IAM Identity Center instance.</p>
    pub fn get_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_arn
    }
    /// <p>URL for the approval portal associated with the IAM Identity Center instance.</p>
    pub fn approval_portal_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.approval_portal_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>URL for the approval portal associated with the IAM Identity Center instance.</p>
    pub fn set_approval_portal_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.approval_portal_url = input;
        self
    }
    /// <p>URL for the approval portal associated with the IAM Identity Center instance.</p>
    pub fn get_approval_portal_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.approval_portal_url
    }
    /// <p>Amazon Web Services Region where the IAM Identity Center instance is located.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Web Services Region where the IAM Identity Center instance is located.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>Amazon Web Services Region where the IAM Identity Center instance is located.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// Consumes the builder and constructs a [`IamIdentityCenterForGet`](crate::types::IamIdentityCenterForGet).
    pub fn build(self) -> crate::types::IamIdentityCenterForGet {
        crate::types::IamIdentityCenterForGet {
            instance_arn: self.instance_arn,
            approval_portal_url: self.approval_portal_url,
            region: self.region,
        }
    }
}
