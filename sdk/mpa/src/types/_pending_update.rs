// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details for the pending updates for an approval team, if applicable.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PendingUpdate {
    /// <p>Version ID for the team.</p>
    pub version_id: ::std::option::Option<::std::string::String>,
    /// <p>Description for the team.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>An <code>ApprovalStrategyResponse</code> object. Contains details for how the team grants approval.</p>
    pub approval_strategy: ::std::option::Option<crate::types::ApprovalStrategyResponse>,
    /// <p>Total number of approvers in the team.</p>
    pub number_of_approvers: ::std::option::Option<i32>,
    /// <p>Status for the team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub status: ::std::option::Option<crate::types::ApprovalTeamStatus>,
    /// <p>Status code for the update. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub status_code: ::std::option::Option<crate::types::ApprovalTeamStatusCode>,
    /// <p>Message describing the status for the team.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>An array of <code>GetApprovalTeamResponseApprover </code> objects. Contains details for the approvers in the team.</p>
    pub approvers: ::std::option::Option<::std::vec::Vec<crate::types::GetApprovalTeamResponseApprover>>,
    /// <p>Timestamp when the update request was initiated.</p>
    pub update_initiation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl PendingUpdate {
    /// <p>Version ID for the team.</p>
    pub fn version_id(&self) -> ::std::option::Option<&str> {
        self.version_id.as_deref()
    }
    /// <p>Description for the team.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>An <code>ApprovalStrategyResponse</code> object. Contains details for how the team grants approval.</p>
    pub fn approval_strategy(&self) -> ::std::option::Option<&crate::types::ApprovalStrategyResponse> {
        self.approval_strategy.as_ref()
    }
    /// <p>Total number of approvers in the team.</p>
    pub fn number_of_approvers(&self) -> ::std::option::Option<i32> {
        self.number_of_approvers
    }
    /// <p>Status for the team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ApprovalTeamStatus> {
        self.status.as_ref()
    }
    /// <p>Status code for the update. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn status_code(&self) -> ::std::option::Option<&crate::types::ApprovalTeamStatusCode> {
        self.status_code.as_ref()
    }
    /// <p>Message describing the status for the team.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>An array of <code>GetApprovalTeamResponseApprover </code> objects. Contains details for the approvers in the team.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.approvers.is_none()`.
    pub fn approvers(&self) -> &[crate::types::GetApprovalTeamResponseApprover] {
        self.approvers.as_deref().unwrap_or_default()
    }
    /// <p>Timestamp when the update request was initiated.</p>
    pub fn update_initiation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.update_initiation_time.as_ref()
    }
}
impl PendingUpdate {
    /// Creates a new builder-style object to manufacture [`PendingUpdate`](crate::types::PendingUpdate).
    pub fn builder() -> crate::types::builders::PendingUpdateBuilder {
        crate::types::builders::PendingUpdateBuilder::default()
    }
}

/// A builder for [`PendingUpdate`](crate::types::PendingUpdate).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PendingUpdateBuilder {
    pub(crate) version_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) approval_strategy: ::std::option::Option<crate::types::ApprovalStrategyResponse>,
    pub(crate) number_of_approvers: ::std::option::Option<i32>,
    pub(crate) status: ::std::option::Option<crate::types::ApprovalTeamStatus>,
    pub(crate) status_code: ::std::option::Option<crate::types::ApprovalTeamStatusCode>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) approvers: ::std::option::Option<::std::vec::Vec<crate::types::GetApprovalTeamResponseApprover>>,
    pub(crate) update_initiation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl PendingUpdateBuilder {
    /// <p>Version ID for the team.</p>
    pub fn version_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Version ID for the team.</p>
    pub fn set_version_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_id = input;
        self
    }
    /// <p>Version ID for the team.</p>
    pub fn get_version_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_id
    }
    /// <p>Description for the team.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Description for the team.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Description for the team.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>An <code>ApprovalStrategyResponse</code> object. Contains details for how the team grants approval.</p>
    pub fn approval_strategy(mut self, input: crate::types::ApprovalStrategyResponse) -> Self {
        self.approval_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>An <code>ApprovalStrategyResponse</code> object. Contains details for how the team grants approval.</p>
    pub fn set_approval_strategy(mut self, input: ::std::option::Option<crate::types::ApprovalStrategyResponse>) -> Self {
        self.approval_strategy = input;
        self
    }
    /// <p>An <code>ApprovalStrategyResponse</code> object. Contains details for how the team grants approval.</p>
    pub fn get_approval_strategy(&self) -> &::std::option::Option<crate::types::ApprovalStrategyResponse> {
        &self.approval_strategy
    }
    /// <p>Total number of approvers in the team.</p>
    pub fn number_of_approvers(mut self, input: i32) -> Self {
        self.number_of_approvers = ::std::option::Option::Some(input);
        self
    }
    /// <p>Total number of approvers in the team.</p>
    pub fn set_number_of_approvers(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_approvers = input;
        self
    }
    /// <p>Total number of approvers in the team.</p>
    pub fn get_number_of_approvers(&self) -> &::std::option::Option<i32> {
        &self.number_of_approvers
    }
    /// <p>Status for the team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn status(mut self, input: crate::types::ApprovalTeamStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status for the team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ApprovalTeamStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Status for the team. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ApprovalTeamStatus> {
        &self.status
    }
    /// <p>Status code for the update. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn status_code(mut self, input: crate::types::ApprovalTeamStatusCode) -> Self {
        self.status_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status code for the update. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn set_status_code(mut self, input: ::std::option::Option<crate::types::ApprovalTeamStatusCode>) -> Self {
        self.status_code = input;
        self
    }
    /// <p>Status code for the update. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-health.html">Team health</a> in the <i>Multi-party approval User Guide</i>.</p>
    pub fn get_status_code(&self) -> &::std::option::Option<crate::types::ApprovalTeamStatusCode> {
        &self.status_code
    }
    /// <p>Message describing the status for the team.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Message describing the status for the team.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>Message describing the status for the team.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// Appends an item to `approvers`.
    ///
    /// To override the contents of this collection use [`set_approvers`](Self::set_approvers).
    ///
    /// <p>An array of <code>GetApprovalTeamResponseApprover </code> objects. Contains details for the approvers in the team.</p>
    pub fn approvers(mut self, input: crate::types::GetApprovalTeamResponseApprover) -> Self {
        let mut v = self.approvers.unwrap_or_default();
        v.push(input);
        self.approvers = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>GetApprovalTeamResponseApprover </code> objects. Contains details for the approvers in the team.</p>
    pub fn set_approvers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GetApprovalTeamResponseApprover>>) -> Self {
        self.approvers = input;
        self
    }
    /// <p>An array of <code>GetApprovalTeamResponseApprover </code> objects. Contains details for the approvers in the team.</p>
    pub fn get_approvers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GetApprovalTeamResponseApprover>> {
        &self.approvers
    }
    /// <p>Timestamp when the update request was initiated.</p>
    pub fn update_initiation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_initiation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp when the update request was initiated.</p>
    pub fn set_update_initiation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_initiation_time = input;
        self
    }
    /// <p>Timestamp when the update request was initiated.</p>
    pub fn get_update_initiation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_initiation_time
    }
    /// Consumes the builder and constructs a [`PendingUpdate`](crate::types::PendingUpdate).
    pub fn build(self) -> crate::types::PendingUpdate {
        crate::types::PendingUpdate {
            version_id: self.version_id,
            description: self.description,
            approval_strategy: self.approval_strategy,
            number_of_approvers: self.number_of_approvers,
            status: self.status,
            status_code: self.status_code,
            status_message: self.status_message,
            approvers: self.approvers,
            update_initiation_time: self.update_initiation_time,
        }
    }
}
