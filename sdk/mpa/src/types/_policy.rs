// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details for a policy. Policies define what operations a team that define the permissions for team resources.</p>
/// <p>The protected operation for a service integration might require specific permissions. For more information, see <a href="https://docs.aws.amazon.com/mpa/latest/userguide/mpa-integrations.html">How other services work with Multi-party approval</a> in the <i>Multi-party approval User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Policy {
    /// <p>Amazon Resource Name (ARN) for the policy.</p>
    pub arn: ::std::string::String,
    /// <p>Determines if the specified policy is the default for the team.</p>
    pub default_version: i32,
    /// <p>The type of policy.</p>
    pub policy_type: crate::types::PolicyType,
    /// <p>Name of the policy.</p>
    pub name: ::std::string::String,
}
impl Policy {
    /// <p>Amazon Resource Name (ARN) for the policy.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>Determines if the specified policy is the default for the team.</p>
    pub fn default_version(&self) -> i32 {
        self.default_version
    }
    /// <p>The type of policy.</p>
    pub fn policy_type(&self) -> &crate::types::PolicyType {
        &self.policy_type
    }
    /// <p>Name of the policy.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
}
impl Policy {
    /// Creates a new builder-style object to manufacture [`Policy`](crate::types::Policy).
    pub fn builder() -> crate::types::builders::PolicyBuilder {
        crate::types::builders::PolicyBuilder::default()
    }
}

/// A builder for [`Policy`](crate::types::Policy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PolicyBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) default_version: ::std::option::Option<i32>,
    pub(crate) policy_type: ::std::option::Option<crate::types::PolicyType>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
}
impl PolicyBuilder {
    /// <p>Amazon Resource Name (ARN) for the policy.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) for the policy.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) for the policy.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Determines if the specified policy is the default for the team.</p>
    /// This field is required.
    pub fn default_version(mut self, input: i32) -> Self {
        self.default_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines if the specified policy is the default for the team.</p>
    pub fn set_default_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.default_version = input;
        self
    }
    /// <p>Determines if the specified policy is the default for the team.</p>
    pub fn get_default_version(&self) -> &::std::option::Option<i32> {
        &self.default_version
    }
    /// <p>The type of policy.</p>
    /// This field is required.
    pub fn policy_type(mut self, input: crate::types::PolicyType) -> Self {
        self.policy_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of policy.</p>
    pub fn set_policy_type(mut self, input: ::std::option::Option<crate::types::PolicyType>) -> Self {
        self.policy_type = input;
        self
    }
    /// <p>The type of policy.</p>
    pub fn get_policy_type(&self) -> &::std::option::Option<crate::types::PolicyType> {
        &self.policy_type
    }
    /// <p>Name of the policy.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the policy.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the policy.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Consumes the builder and constructs a [`Policy`](crate::types::Policy).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::PolicyBuilder::arn)
    /// - [`default_version`](crate::types::builders::PolicyBuilder::default_version)
    /// - [`policy_type`](crate::types::builders::PolicyBuilder::policy_type)
    /// - [`name`](crate::types::builders::PolicyBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::Policy, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Policy {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building Policy",
                )
            })?,
            default_version: self.default_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "default_version",
                    "default_version was not specified but it is required when building Policy",
                )
            })?,
            policy_type: self.policy_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "policy_type",
                    "policy_type was not specified but it is required when building Policy",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building Policy",
                )
            })?,
        })
    }
}
