// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents an initial VLAN subnet for the environment. Amazon EVS creates initial VLAN subnets when you first create the environment. You must specify a non-overlapping CIDR block for each VLAN subnet. Amazon EVS creates the following 10 VLAN subnets: host management VLAN, vMotion VLAN, vSAN VLAN, VTEP VLAN, Edge VTEP VLAN, Management VM VLAN, HCX uplink VLAN, NSX uplink VLAN, expansion VLAN 1, expansion VLAN 2.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InitialVlanInfo {
    /// <p>The CIDR block that you provide to create a VLAN subnet. VLAN CIDR blocks must not overlap with other subnets in the VPC.</p>
    pub cidr: ::std::string::String,
}
impl InitialVlanInfo {
    /// <p>The CIDR block that you provide to create a VLAN subnet. VLAN CIDR blocks must not overlap with other subnets in the VPC.</p>
    pub fn cidr(&self) -> &str {
        use std::ops::Deref;
        self.cidr.deref()
    }
}
impl InitialVlanInfo {
    /// Creates a new builder-style object to manufacture [`InitialVlanInfo`](crate::types::InitialVlanInfo).
    pub fn builder() -> crate::types::builders::InitialVlanInfoBuilder {
        crate::types::builders::InitialVlanInfoBuilder::default()
    }
}

/// A builder for [`InitialVlanInfo`](crate::types::InitialVlanInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InitialVlanInfoBuilder {
    pub(crate) cidr: ::std::option::Option<::std::string::String>,
}
impl InitialVlanInfoBuilder {
    /// <p>The CIDR block that you provide to create a VLAN subnet. VLAN CIDR blocks must not overlap with other subnets in the VPC.</p>
    /// This field is required.
    pub fn cidr(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cidr = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CIDR block that you provide to create a VLAN subnet. VLAN CIDR blocks must not overlap with other subnets in the VPC.</p>
    pub fn set_cidr(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cidr = input;
        self
    }
    /// <p>The CIDR block that you provide to create a VLAN subnet. VLAN CIDR blocks must not overlap with other subnets in the VPC.</p>
    pub fn get_cidr(&self) -> &::std::option::Option<::std::string::String> {
        &self.cidr
    }
    /// Consumes the builder and constructs a [`InitialVlanInfo`](crate::types::InitialVlanInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`cidr`](crate::types::builders::InitialVlanInfoBuilder::cidr)
    pub fn build(self) -> ::std::result::Result<crate::types::InitialVlanInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::InitialVlanInfo {
            cidr: self.cidr.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cidr",
                    "cidr was not specified but it is required when building InitialVlanInfo",
                )
            })?,
        })
    }
}
