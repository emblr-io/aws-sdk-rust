// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The DNS hostnames that Amazon EVS uses to install VMware vCenter Server, NSX, SDDC Manager, and Cloud Builder. Each hostname must be unique, and resolve to a domain name that you've registered in your DNS service of choice. Hostnames cannot be changed.</p>
/// <p>VMware VCF requires the deployment of two NSX Edge nodes, and three NSX Manager virtual machines.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VcfHostnames {
    /// <p>The VMware vCenter hostname.</p>
    pub v_center: ::std::string::String,
    /// <p>The VMware NSX hostname.</p>
    pub nsx: ::std::string::String,
    /// <p>The hostname for the first VMware NSX Manager virtual machine (VM).</p>
    pub nsx_manager1: ::std::string::String,
    /// <p>The hostname for the second VMware NSX Manager virtual machine (VM).</p>
    pub nsx_manager2: ::std::string::String,
    /// <p>The hostname for the third VMware NSX Manager virtual machine (VM).</p>
    pub nsx_manager3: ::std::string::String,
    /// <p>The hostname for the first NSX Edge node.</p>
    pub nsx_edge1: ::std::string::String,
    /// <p>The hostname for the second NSX Edge node.</p>
    pub nsx_edge2: ::std::string::String,
    /// <p>The hostname for SDDC Manager.</p>
    pub sddc_manager: ::std::string::String,
    /// <p>The hostname for VMware Cloud Builder.</p>
    pub cloud_builder: ::std::string::String,
}
impl VcfHostnames {
    /// <p>The VMware vCenter hostname.</p>
    pub fn v_center(&self) -> &str {
        use std::ops::Deref;
        self.v_center.deref()
    }
    /// <p>The VMware NSX hostname.</p>
    pub fn nsx(&self) -> &str {
        use std::ops::Deref;
        self.nsx.deref()
    }
    /// <p>The hostname for the first VMware NSX Manager virtual machine (VM).</p>
    pub fn nsx_manager1(&self) -> &str {
        use std::ops::Deref;
        self.nsx_manager1.deref()
    }
    /// <p>The hostname for the second VMware NSX Manager virtual machine (VM).</p>
    pub fn nsx_manager2(&self) -> &str {
        use std::ops::Deref;
        self.nsx_manager2.deref()
    }
    /// <p>The hostname for the third VMware NSX Manager virtual machine (VM).</p>
    pub fn nsx_manager3(&self) -> &str {
        use std::ops::Deref;
        self.nsx_manager3.deref()
    }
    /// <p>The hostname for the first NSX Edge node.</p>
    pub fn nsx_edge1(&self) -> &str {
        use std::ops::Deref;
        self.nsx_edge1.deref()
    }
    /// <p>The hostname for the second NSX Edge node.</p>
    pub fn nsx_edge2(&self) -> &str {
        use std::ops::Deref;
        self.nsx_edge2.deref()
    }
    /// <p>The hostname for SDDC Manager.</p>
    pub fn sddc_manager(&self) -> &str {
        use std::ops::Deref;
        self.sddc_manager.deref()
    }
    /// <p>The hostname for VMware Cloud Builder.</p>
    pub fn cloud_builder(&self) -> &str {
        use std::ops::Deref;
        self.cloud_builder.deref()
    }
}
impl VcfHostnames {
    /// Creates a new builder-style object to manufacture [`VcfHostnames`](crate::types::VcfHostnames).
    pub fn builder() -> crate::types::builders::VcfHostnamesBuilder {
        crate::types::builders::VcfHostnamesBuilder::default()
    }
}

/// A builder for [`VcfHostnames`](crate::types::VcfHostnames).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VcfHostnamesBuilder {
    pub(crate) v_center: ::std::option::Option<::std::string::String>,
    pub(crate) nsx: ::std::option::Option<::std::string::String>,
    pub(crate) nsx_manager1: ::std::option::Option<::std::string::String>,
    pub(crate) nsx_manager2: ::std::option::Option<::std::string::String>,
    pub(crate) nsx_manager3: ::std::option::Option<::std::string::String>,
    pub(crate) nsx_edge1: ::std::option::Option<::std::string::String>,
    pub(crate) nsx_edge2: ::std::option::Option<::std::string::String>,
    pub(crate) sddc_manager: ::std::option::Option<::std::string::String>,
    pub(crate) cloud_builder: ::std::option::Option<::std::string::String>,
}
impl VcfHostnamesBuilder {
    /// <p>The VMware vCenter hostname.</p>
    /// This field is required.
    pub fn v_center(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.v_center = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The VMware vCenter hostname.</p>
    pub fn set_v_center(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.v_center = input;
        self
    }
    /// <p>The VMware vCenter hostname.</p>
    pub fn get_v_center(&self) -> &::std::option::Option<::std::string::String> {
        &self.v_center
    }
    /// <p>The VMware NSX hostname.</p>
    /// This field is required.
    pub fn nsx(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nsx = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The VMware NSX hostname.</p>
    pub fn set_nsx(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nsx = input;
        self
    }
    /// <p>The VMware NSX hostname.</p>
    pub fn get_nsx(&self) -> &::std::option::Option<::std::string::String> {
        &self.nsx
    }
    /// <p>The hostname for the first VMware NSX Manager virtual machine (VM).</p>
    /// This field is required.
    pub fn nsx_manager1(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nsx_manager1 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hostname for the first VMware NSX Manager virtual machine (VM).</p>
    pub fn set_nsx_manager1(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nsx_manager1 = input;
        self
    }
    /// <p>The hostname for the first VMware NSX Manager virtual machine (VM).</p>
    pub fn get_nsx_manager1(&self) -> &::std::option::Option<::std::string::String> {
        &self.nsx_manager1
    }
    /// <p>The hostname for the second VMware NSX Manager virtual machine (VM).</p>
    /// This field is required.
    pub fn nsx_manager2(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nsx_manager2 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hostname for the second VMware NSX Manager virtual machine (VM).</p>
    pub fn set_nsx_manager2(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nsx_manager2 = input;
        self
    }
    /// <p>The hostname for the second VMware NSX Manager virtual machine (VM).</p>
    pub fn get_nsx_manager2(&self) -> &::std::option::Option<::std::string::String> {
        &self.nsx_manager2
    }
    /// <p>The hostname for the third VMware NSX Manager virtual machine (VM).</p>
    /// This field is required.
    pub fn nsx_manager3(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nsx_manager3 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hostname for the third VMware NSX Manager virtual machine (VM).</p>
    pub fn set_nsx_manager3(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nsx_manager3 = input;
        self
    }
    /// <p>The hostname for the third VMware NSX Manager virtual machine (VM).</p>
    pub fn get_nsx_manager3(&self) -> &::std::option::Option<::std::string::String> {
        &self.nsx_manager3
    }
    /// <p>The hostname for the first NSX Edge node.</p>
    /// This field is required.
    pub fn nsx_edge1(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nsx_edge1 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hostname for the first NSX Edge node.</p>
    pub fn set_nsx_edge1(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nsx_edge1 = input;
        self
    }
    /// <p>The hostname for the first NSX Edge node.</p>
    pub fn get_nsx_edge1(&self) -> &::std::option::Option<::std::string::String> {
        &self.nsx_edge1
    }
    /// <p>The hostname for the second NSX Edge node.</p>
    /// This field is required.
    pub fn nsx_edge2(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nsx_edge2 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hostname for the second NSX Edge node.</p>
    pub fn set_nsx_edge2(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nsx_edge2 = input;
        self
    }
    /// <p>The hostname for the second NSX Edge node.</p>
    pub fn get_nsx_edge2(&self) -> &::std::option::Option<::std::string::String> {
        &self.nsx_edge2
    }
    /// <p>The hostname for SDDC Manager.</p>
    /// This field is required.
    pub fn sddc_manager(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sddc_manager = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hostname for SDDC Manager.</p>
    pub fn set_sddc_manager(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sddc_manager = input;
        self
    }
    /// <p>The hostname for SDDC Manager.</p>
    pub fn get_sddc_manager(&self) -> &::std::option::Option<::std::string::String> {
        &self.sddc_manager
    }
    /// <p>The hostname for VMware Cloud Builder.</p>
    /// This field is required.
    pub fn cloud_builder(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloud_builder = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hostname for VMware Cloud Builder.</p>
    pub fn set_cloud_builder(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloud_builder = input;
        self
    }
    /// <p>The hostname for VMware Cloud Builder.</p>
    pub fn get_cloud_builder(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloud_builder
    }
    /// Consumes the builder and constructs a [`VcfHostnames`](crate::types::VcfHostnames).
    /// This method will fail if any of the following fields are not set:
    /// - [`v_center`](crate::types::builders::VcfHostnamesBuilder::v_center)
    /// - [`nsx`](crate::types::builders::VcfHostnamesBuilder::nsx)
    /// - [`nsx_manager1`](crate::types::builders::VcfHostnamesBuilder::nsx_manager1)
    /// - [`nsx_manager2`](crate::types::builders::VcfHostnamesBuilder::nsx_manager2)
    /// - [`nsx_manager3`](crate::types::builders::VcfHostnamesBuilder::nsx_manager3)
    /// - [`nsx_edge1`](crate::types::builders::VcfHostnamesBuilder::nsx_edge1)
    /// - [`nsx_edge2`](crate::types::builders::VcfHostnamesBuilder::nsx_edge2)
    /// - [`sddc_manager`](crate::types::builders::VcfHostnamesBuilder::sddc_manager)
    /// - [`cloud_builder`](crate::types::builders::VcfHostnamesBuilder::cloud_builder)
    pub fn build(self) -> ::std::result::Result<crate::types::VcfHostnames, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::VcfHostnames {
            v_center: self.v_center.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "v_center",
                    "v_center was not specified but it is required when building VcfHostnames",
                )
            })?,
            nsx: self.nsx.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "nsx",
                    "nsx was not specified but it is required when building VcfHostnames",
                )
            })?,
            nsx_manager1: self.nsx_manager1.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "nsx_manager1",
                    "nsx_manager1 was not specified but it is required when building VcfHostnames",
                )
            })?,
            nsx_manager2: self.nsx_manager2.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "nsx_manager2",
                    "nsx_manager2 was not specified but it is required when building VcfHostnames",
                )
            })?,
            nsx_manager3: self.nsx_manager3.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "nsx_manager3",
                    "nsx_manager3 was not specified but it is required when building VcfHostnames",
                )
            })?,
            nsx_edge1: self.nsx_edge1.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "nsx_edge1",
                    "nsx_edge1 was not specified but it is required when building VcfHostnames",
                )
            })?,
            nsx_edge2: self.nsx_edge2.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "nsx_edge2",
                    "nsx_edge2 was not specified but it is required when building VcfHostnames",
                )
            })?,
            sddc_manager: self.sddc_manager.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sddc_manager",
                    "sddc_manager was not specified but it is required when building VcfHostnames",
                )
            })?,
            cloud_builder: self.cloud_builder.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cloud_builder",
                    "cloud_builder was not specified but it is required when building VcfHostnames",
                )
            })?,
        })
    }
}
