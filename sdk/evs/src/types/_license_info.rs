// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The license information that Amazon EVS requires to create an environment. Amazon EVS requires two license keys: a VCF solution key and a vSAN license key.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LicenseInfo {
    /// <p>The VCF solution key. This license unlocks VMware VCF product features, including vSphere, NSX, SDDC Manager, and vCenter Server.</p>
    pub solution_key: ::std::string::String,
    /// <p>The VSAN license key. This license unlocks vSAN features.</p>
    pub vsan_key: ::std::string::String,
}
impl LicenseInfo {
    /// <p>The VCF solution key. This license unlocks VMware VCF product features, including vSphere, NSX, SDDC Manager, and vCenter Server.</p>
    pub fn solution_key(&self) -> &str {
        use std::ops::Deref;
        self.solution_key.deref()
    }
    /// <p>The VSAN license key. This license unlocks vSAN features.</p>
    pub fn vsan_key(&self) -> &str {
        use std::ops::Deref;
        self.vsan_key.deref()
    }
}
impl LicenseInfo {
    /// Creates a new builder-style object to manufacture [`LicenseInfo`](crate::types::LicenseInfo).
    pub fn builder() -> crate::types::builders::LicenseInfoBuilder {
        crate::types::builders::LicenseInfoBuilder::default()
    }
}

/// A builder for [`LicenseInfo`](crate::types::LicenseInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LicenseInfoBuilder {
    pub(crate) solution_key: ::std::option::Option<::std::string::String>,
    pub(crate) vsan_key: ::std::option::Option<::std::string::String>,
}
impl LicenseInfoBuilder {
    /// <p>The VCF solution key. This license unlocks VMware VCF product features, including vSphere, NSX, SDDC Manager, and vCenter Server.</p>
    /// This field is required.
    pub fn solution_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.solution_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The VCF solution key. This license unlocks VMware VCF product features, including vSphere, NSX, SDDC Manager, and vCenter Server.</p>
    pub fn set_solution_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.solution_key = input;
        self
    }
    /// <p>The VCF solution key. This license unlocks VMware VCF product features, including vSphere, NSX, SDDC Manager, and vCenter Server.</p>
    pub fn get_solution_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.solution_key
    }
    /// <p>The VSAN license key. This license unlocks vSAN features.</p>
    /// This field is required.
    pub fn vsan_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vsan_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The VSAN license key. This license unlocks vSAN features.</p>
    pub fn set_vsan_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vsan_key = input;
        self
    }
    /// <p>The VSAN license key. This license unlocks vSAN features.</p>
    pub fn get_vsan_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.vsan_key
    }
    /// Consumes the builder and constructs a [`LicenseInfo`](crate::types::LicenseInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`solution_key`](crate::types::builders::LicenseInfoBuilder::solution_key)
    /// - [`vsan_key`](crate::types::builders::LicenseInfoBuilder::vsan_key)
    pub fn build(self) -> ::std::result::Result<crate::types::LicenseInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LicenseInfo {
            solution_key: self.solution_key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "solution_key",
                    "solution_key was not specified but it is required when building LicenseInfo",
                )
            })?,
            vsan_key: self.vsan_key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "vsan_key",
                    "vsan_key was not specified but it is required when building LicenseInfo",
                )
            })?,
        })
    }
}
