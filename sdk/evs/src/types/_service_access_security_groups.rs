// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The security groups that allow traffic between the Amazon EVS control plane and your VPC for Amazon EVS service access. If a security group is not specified, Amazon EVS uses the default security group in your account for service access.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceAccessSecurityGroups {
    /// <p>The security groups that allow service access.</p>
    pub security_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ServiceAccessSecurityGroups {
    /// <p>The security groups that allow service access.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_groups.is_none()`.
    pub fn security_groups(&self) -> &[::std::string::String] {
        self.security_groups.as_deref().unwrap_or_default()
    }
}
impl ServiceAccessSecurityGroups {
    /// Creates a new builder-style object to manufacture [`ServiceAccessSecurityGroups`](crate::types::ServiceAccessSecurityGroups).
    pub fn builder() -> crate::types::builders::ServiceAccessSecurityGroupsBuilder {
        crate::types::builders::ServiceAccessSecurityGroupsBuilder::default()
    }
}

/// A builder for [`ServiceAccessSecurityGroups`](crate::types::ServiceAccessSecurityGroups).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceAccessSecurityGroupsBuilder {
    pub(crate) security_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ServiceAccessSecurityGroupsBuilder {
    /// Appends an item to `security_groups`.
    ///
    /// To override the contents of this collection use [`set_security_groups`](Self::set_security_groups).
    ///
    /// <p>The security groups that allow service access.</p>
    pub fn security_groups(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_groups.unwrap_or_default();
        v.push(input.into());
        self.security_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>The security groups that allow service access.</p>
    pub fn set_security_groups(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_groups = input;
        self
    }
    /// <p>The security groups that allow service access.</p>
    pub fn get_security_groups(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_groups
    }
    /// Consumes the builder and constructs a [`ServiceAccessSecurityGroups`](crate::types::ServiceAccessSecurityGroups).
    pub fn build(self) -> crate::types::ServiceAccessSecurityGroups {
        crate::types::ServiceAccessSecurityGroups {
            security_groups: self.security_groups,
        }
    }
}
