// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The connectivity configuration for the environment. Amazon EVS requires that you specify two route server peer IDs. During environment creation, the route server endpoints peer with the NSX uplink VLAN for connectivity to the NSX overlay network.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConnectivityInfo {
    /// <p>The unique IDs for private route server peers.</p>
    pub private_route_server_peerings: ::std::vec::Vec<::std::string::String>,
}
impl ConnectivityInfo {
    /// <p>The unique IDs for private route server peers.</p>
    pub fn private_route_server_peerings(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.private_route_server_peerings.deref()
    }
}
impl ConnectivityInfo {
    /// Creates a new builder-style object to manufacture [`ConnectivityInfo`](crate::types::ConnectivityInfo).
    pub fn builder() -> crate::types::builders::ConnectivityInfoBuilder {
        crate::types::builders::ConnectivityInfoBuilder::default()
    }
}

/// A builder for [`ConnectivityInfo`](crate::types::ConnectivityInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConnectivityInfoBuilder {
    pub(crate) private_route_server_peerings: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ConnectivityInfoBuilder {
    /// Appends an item to `private_route_server_peerings`.
    ///
    /// To override the contents of this collection use [`set_private_route_server_peerings`](Self::set_private_route_server_peerings).
    ///
    /// <p>The unique IDs for private route server peers.</p>
    pub fn private_route_server_peerings(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.private_route_server_peerings.unwrap_or_default();
        v.push(input.into());
        self.private_route_server_peerings = ::std::option::Option::Some(v);
        self
    }
    /// <p>The unique IDs for private route server peers.</p>
    pub fn set_private_route_server_peerings(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.private_route_server_peerings = input;
        self
    }
    /// <p>The unique IDs for private route server peers.</p>
    pub fn get_private_route_server_peerings(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.private_route_server_peerings
    }
    /// Consumes the builder and constructs a [`ConnectivityInfo`](crate::types::ConnectivityInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`private_route_server_peerings`](crate::types::builders::ConnectivityInfoBuilder::private_route_server_peerings)
    pub fn build(self) -> ::std::result::Result<crate::types::ConnectivityInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConnectivityInfo {
            private_route_server_peerings: self.private_route_server_peerings.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "private_route_server_peerings",
                    "private_route_server_peerings was not specified but it is required when building ConnectivityInfo",
                )
            })?,
        })
    }
}
