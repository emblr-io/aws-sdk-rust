// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents a host.</p><note>
/// <p>You cannot use <code>dedicatedHostId</code> and <code>placementGroupId</code> together in the same <code>HostInfoForCreate</code>object. This results in a <code>ValidationException</code> response.</p>
/// </note>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HostInfoForCreate {
    /// <p>The DNS hostname of the host. DNS hostnames for hosts must be unique across Amazon EVS environments and within VCF.</p>
    pub host_name: ::std::string::String,
    /// <p>The name of the SSH key that is used to access the host.</p>
    pub key_name: ::std::string::String,
    /// <p>The EC2 instance type that represents the host.</p>
    pub instance_type: crate::types::InstanceType,
    /// <p>The unique ID of the placement group where the host is placed.</p>
    pub placement_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique ID of the Amazon EC2 Dedicated Host.</p>
    pub dedicated_host_id: ::std::option::Option<::std::string::String>,
}
impl HostInfoForCreate {
    /// <p>The DNS hostname of the host. DNS hostnames for hosts must be unique across Amazon EVS environments and within VCF.</p>
    pub fn host_name(&self) -> &str {
        use std::ops::Deref;
        self.host_name.deref()
    }
    /// <p>The name of the SSH key that is used to access the host.</p>
    pub fn key_name(&self) -> &str {
        use std::ops::Deref;
        self.key_name.deref()
    }
    /// <p>The EC2 instance type that represents the host.</p>
    pub fn instance_type(&self) -> &crate::types::InstanceType {
        &self.instance_type
    }
    /// <p>The unique ID of the placement group where the host is placed.</p>
    pub fn placement_group_id(&self) -> ::std::option::Option<&str> {
        self.placement_group_id.as_deref()
    }
    /// <p>The unique ID of the Amazon EC2 Dedicated Host.</p>
    pub fn dedicated_host_id(&self) -> ::std::option::Option<&str> {
        self.dedicated_host_id.as_deref()
    }
}
impl HostInfoForCreate {
    /// Creates a new builder-style object to manufacture [`HostInfoForCreate`](crate::types::HostInfoForCreate).
    pub fn builder() -> crate::types::builders::HostInfoForCreateBuilder {
        crate::types::builders::HostInfoForCreateBuilder::default()
    }
}

/// A builder for [`HostInfoForCreate`](crate::types::HostInfoForCreate).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct HostInfoForCreateBuilder {
    pub(crate) host_name: ::std::option::Option<::std::string::String>,
    pub(crate) key_name: ::std::option::Option<::std::string::String>,
    pub(crate) instance_type: ::std::option::Option<crate::types::InstanceType>,
    pub(crate) placement_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) dedicated_host_id: ::std::option::Option<::std::string::String>,
}
impl HostInfoForCreateBuilder {
    /// <p>The DNS hostname of the host. DNS hostnames for hosts must be unique across Amazon EVS environments and within VCF.</p>
    /// This field is required.
    pub fn host_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.host_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DNS hostname of the host. DNS hostnames for hosts must be unique across Amazon EVS environments and within VCF.</p>
    pub fn set_host_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.host_name = input;
        self
    }
    /// <p>The DNS hostname of the host. DNS hostnames for hosts must be unique across Amazon EVS environments and within VCF.</p>
    pub fn get_host_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.host_name
    }
    /// <p>The name of the SSH key that is used to access the host.</p>
    /// This field is required.
    pub fn key_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the SSH key that is used to access the host.</p>
    pub fn set_key_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_name = input;
        self
    }
    /// <p>The name of the SSH key that is used to access the host.</p>
    pub fn get_key_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_name
    }
    /// <p>The EC2 instance type that represents the host.</p>
    /// This field is required.
    pub fn instance_type(mut self, input: crate::types::InstanceType) -> Self {
        self.instance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The EC2 instance type that represents the host.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<crate::types::InstanceType>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The EC2 instance type that represents the host.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<crate::types::InstanceType> {
        &self.instance_type
    }
    /// <p>The unique ID of the placement group where the host is placed.</p>
    pub fn placement_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.placement_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the placement group where the host is placed.</p>
    pub fn set_placement_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.placement_group_id = input;
        self
    }
    /// <p>The unique ID of the placement group where the host is placed.</p>
    pub fn get_placement_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.placement_group_id
    }
    /// <p>The unique ID of the Amazon EC2 Dedicated Host.</p>
    pub fn dedicated_host_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dedicated_host_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the Amazon EC2 Dedicated Host.</p>
    pub fn set_dedicated_host_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dedicated_host_id = input;
        self
    }
    /// <p>The unique ID of the Amazon EC2 Dedicated Host.</p>
    pub fn get_dedicated_host_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.dedicated_host_id
    }
    /// Consumes the builder and constructs a [`HostInfoForCreate`](crate::types::HostInfoForCreate).
    /// This method will fail if any of the following fields are not set:
    /// - [`host_name`](crate::types::builders::HostInfoForCreateBuilder::host_name)
    /// - [`key_name`](crate::types::builders::HostInfoForCreateBuilder::key_name)
    /// - [`instance_type`](crate::types::builders::HostInfoForCreateBuilder::instance_type)
    pub fn build(self) -> ::std::result::Result<crate::types::HostInfoForCreate, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::HostInfoForCreate {
            host_name: self.host_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "host_name",
                    "host_name was not specified but it is required when building HostInfoForCreate",
                )
            })?,
            key_name: self.key_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key_name",
                    "key_name was not specified but it is required when building HostInfoForCreate",
                )
            })?,
            instance_type: self.instance_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "instance_type",
                    "instance_type was not specified but it is required when building HostInfoForCreate",
                )
            })?,
            placement_group_id: self.placement_group_id,
            dedicated_host_id: self.dedicated_host_id,
        })
    }
}
