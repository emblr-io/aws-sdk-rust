// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateEnvironmentHostInput {
    /// <note>
    /// <p>This parameter is not used in Amazon EVS currently. If you supply input for this parameter, it will have no effect.</p>
    /// </note>
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the host creation request. If you do not specify a client token, a randomly generated token is used for the request to ensure idempotency.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>A unique ID for the environment that the host is added to.</p>
    pub environment_id: ::std::option::Option<::std::string::String>,
    /// <p>The host that is created and added to the environment.</p>
    pub host: ::std::option::Option<crate::types::HostInfoForCreate>,
}
impl CreateEnvironmentHostInput {
    /// <note>
    /// <p>This parameter is not used in Amazon EVS currently. If you supply input for this parameter, it will have no effect.</p>
    /// </note>
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the host creation request. If you do not specify a client token, a randomly generated token is used for the request to ensure idempotency.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>A unique ID for the environment that the host is added to.</p>
    pub fn environment_id(&self) -> ::std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>The host that is created and added to the environment.</p>
    pub fn host(&self) -> ::std::option::Option<&crate::types::HostInfoForCreate> {
        self.host.as_ref()
    }
}
impl CreateEnvironmentHostInput {
    /// Creates a new builder-style object to manufacture [`CreateEnvironmentHostInput`](crate::operation::create_environment_host::CreateEnvironmentHostInput).
    pub fn builder() -> crate::operation::create_environment_host::builders::CreateEnvironmentHostInputBuilder {
        crate::operation::create_environment_host::builders::CreateEnvironmentHostInputBuilder::default()
    }
}

/// A builder for [`CreateEnvironmentHostInput`](crate::operation::create_environment_host::CreateEnvironmentHostInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateEnvironmentHostInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) environment_id: ::std::option::Option<::std::string::String>,
    pub(crate) host: ::std::option::Option<crate::types::HostInfoForCreate>,
}
impl CreateEnvironmentHostInputBuilder {
    /// <note>
    /// <p>This parameter is not used in Amazon EVS currently. If you supply input for this parameter, it will have no effect.</p>
    /// </note>
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the host creation request. If you do not specify a client token, a randomly generated token is used for the request to ensure idempotency.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <note>
    /// <p>This parameter is not used in Amazon EVS currently. If you supply input for this parameter, it will have no effect.</p>
    /// </note>
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the host creation request. If you do not specify a client token, a randomly generated token is used for the request to ensure idempotency.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <note>
    /// <p>This parameter is not used in Amazon EVS currently. If you supply input for this parameter, it will have no effect.</p>
    /// </note>
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the host creation request. If you do not specify a client token, a randomly generated token is used for the request to ensure idempotency.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>A unique ID for the environment that the host is added to.</p>
    /// This field is required.
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique ID for the environment that the host is added to.</p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>A unique ID for the environment that the host is added to.</p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_id
    }
    /// <p>The host that is created and added to the environment.</p>
    /// This field is required.
    pub fn host(mut self, input: crate::types::HostInfoForCreate) -> Self {
        self.host = ::std::option::Option::Some(input);
        self
    }
    /// <p>The host that is created and added to the environment.</p>
    pub fn set_host(mut self, input: ::std::option::Option<crate::types::HostInfoForCreate>) -> Self {
        self.host = input;
        self
    }
    /// <p>The host that is created and added to the environment.</p>
    pub fn get_host(&self) -> &::std::option::Option<crate::types::HostInfoForCreate> {
        &self.host
    }
    /// Consumes the builder and constructs a [`CreateEnvironmentHostInput`](crate::operation::create_environment_host::CreateEnvironmentHostInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_environment_host::CreateEnvironmentHostInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_environment_host::CreateEnvironmentHostInput {
            client_token: self.client_token,
            environment_id: self.environment_id,
            host: self.host,
        })
    }
}
