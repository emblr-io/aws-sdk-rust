// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters for an Clean Rooms protected job.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProtectedJob {
    /// <p>The identifier for a protected job instance.</p>
    pub id: ::std::string::String,
    /// <p>he identifier for the membership.</p>
    pub membership_id: ::std::string::String,
    /// <p>The ARN of the membership.</p>
    pub membership_arn: ::std::string::String,
    /// <p>The creation time of the protected job.</p>
    pub create_time: ::aws_smithy_types::DateTime,
    /// <p>The job parameters for the protected job.</p>
    pub job_parameters: ::std::option::Option<crate::types::ProtectedJobParameters>,
    /// <p>The status of the protected job.</p>
    pub status: crate::types::ProtectedJobStatus,
    /// <p>Contains any details needed to write the job results.</p>
    pub result_configuration: ::std::option::Option<crate::types::ProtectedJobResultConfigurationOutput>,
    /// <p>The statistics of the protected job.</p>
    pub statistics: ::std::option::Option<crate::types::ProtectedJobStatistics>,
    /// <p>The result of the protected job.</p>
    pub result: ::std::option::Option<crate::types::ProtectedJobResult>,
    /// <p>The error from the protected job.</p>
    pub error: ::std::option::Option<crate::types::ProtectedJobError>,
}
impl ProtectedJob {
    /// <p>The identifier for a protected job instance.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>he identifier for the membership.</p>
    pub fn membership_id(&self) -> &str {
        use std::ops::Deref;
        self.membership_id.deref()
    }
    /// <p>The ARN of the membership.</p>
    pub fn membership_arn(&self) -> &str {
        use std::ops::Deref;
        self.membership_arn.deref()
    }
    /// <p>The creation time of the protected job.</p>
    pub fn create_time(&self) -> &::aws_smithy_types::DateTime {
        &self.create_time
    }
    /// <p>The job parameters for the protected job.</p>
    pub fn job_parameters(&self) -> ::std::option::Option<&crate::types::ProtectedJobParameters> {
        self.job_parameters.as_ref()
    }
    /// <p>The status of the protected job.</p>
    pub fn status(&self) -> &crate::types::ProtectedJobStatus {
        &self.status
    }
    /// <p>Contains any details needed to write the job results.</p>
    pub fn result_configuration(&self) -> ::std::option::Option<&crate::types::ProtectedJobResultConfigurationOutput> {
        self.result_configuration.as_ref()
    }
    /// <p>The statistics of the protected job.</p>
    pub fn statistics(&self) -> ::std::option::Option<&crate::types::ProtectedJobStatistics> {
        self.statistics.as_ref()
    }
    /// <p>The result of the protected job.</p>
    pub fn result(&self) -> ::std::option::Option<&crate::types::ProtectedJobResult> {
        self.result.as_ref()
    }
    /// <p>The error from the protected job.</p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::ProtectedJobError> {
        self.error.as_ref()
    }
}
impl ProtectedJob {
    /// Creates a new builder-style object to manufacture [`ProtectedJob`](crate::types::ProtectedJob).
    pub fn builder() -> crate::types::builders::ProtectedJobBuilder {
        crate::types::builders::ProtectedJobBuilder::default()
    }
}

/// A builder for [`ProtectedJob`](crate::types::ProtectedJob).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProtectedJobBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) membership_id: ::std::option::Option<::std::string::String>,
    pub(crate) membership_arn: ::std::option::Option<::std::string::String>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) job_parameters: ::std::option::Option<crate::types::ProtectedJobParameters>,
    pub(crate) status: ::std::option::Option<crate::types::ProtectedJobStatus>,
    pub(crate) result_configuration: ::std::option::Option<crate::types::ProtectedJobResultConfigurationOutput>,
    pub(crate) statistics: ::std::option::Option<crate::types::ProtectedJobStatistics>,
    pub(crate) result: ::std::option::Option<crate::types::ProtectedJobResult>,
    pub(crate) error: ::std::option::Option<crate::types::ProtectedJobError>,
}
impl ProtectedJobBuilder {
    /// <p>The identifier for a protected job instance.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for a protected job instance.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier for a protected job instance.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>he identifier for the membership.</p>
    /// This field is required.
    pub fn membership_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>he identifier for the membership.</p>
    pub fn set_membership_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_id = input;
        self
    }
    /// <p>he identifier for the membership.</p>
    pub fn get_membership_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_id
    }
    /// <p>The ARN of the membership.</p>
    /// This field is required.
    pub fn membership_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the membership.</p>
    pub fn set_membership_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_arn = input;
        self
    }
    /// <p>The ARN of the membership.</p>
    pub fn get_membership_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_arn
    }
    /// <p>The creation time of the protected job.</p>
    /// This field is required.
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation time of the protected job.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The creation time of the protected job.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The job parameters for the protected job.</p>
    pub fn job_parameters(mut self, input: crate::types::ProtectedJobParameters) -> Self {
        self.job_parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>The job parameters for the protected job.</p>
    pub fn set_job_parameters(mut self, input: ::std::option::Option<crate::types::ProtectedJobParameters>) -> Self {
        self.job_parameters = input;
        self
    }
    /// <p>The job parameters for the protected job.</p>
    pub fn get_job_parameters(&self) -> &::std::option::Option<crate::types::ProtectedJobParameters> {
        &self.job_parameters
    }
    /// <p>The status of the protected job.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ProtectedJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the protected job.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ProtectedJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the protected job.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ProtectedJobStatus> {
        &self.status
    }
    /// <p>Contains any details needed to write the job results.</p>
    pub fn result_configuration(mut self, input: crate::types::ProtectedJobResultConfigurationOutput) -> Self {
        self.result_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains any details needed to write the job results.</p>
    pub fn set_result_configuration(mut self, input: ::std::option::Option<crate::types::ProtectedJobResultConfigurationOutput>) -> Self {
        self.result_configuration = input;
        self
    }
    /// <p>Contains any details needed to write the job results.</p>
    pub fn get_result_configuration(&self) -> &::std::option::Option<crate::types::ProtectedJobResultConfigurationOutput> {
        &self.result_configuration
    }
    /// <p>The statistics of the protected job.</p>
    pub fn statistics(mut self, input: crate::types::ProtectedJobStatistics) -> Self {
        self.statistics = ::std::option::Option::Some(input);
        self
    }
    /// <p>The statistics of the protected job.</p>
    pub fn set_statistics(mut self, input: ::std::option::Option<crate::types::ProtectedJobStatistics>) -> Self {
        self.statistics = input;
        self
    }
    /// <p>The statistics of the protected job.</p>
    pub fn get_statistics(&self) -> &::std::option::Option<crate::types::ProtectedJobStatistics> {
        &self.statistics
    }
    /// <p>The result of the protected job.</p>
    pub fn result(mut self, input: crate::types::ProtectedJobResult) -> Self {
        self.result = ::std::option::Option::Some(input);
        self
    }
    /// <p>The result of the protected job.</p>
    pub fn set_result(mut self, input: ::std::option::Option<crate::types::ProtectedJobResult>) -> Self {
        self.result = input;
        self
    }
    /// <p>The result of the protected job.</p>
    pub fn get_result(&self) -> &::std::option::Option<crate::types::ProtectedJobResult> {
        &self.result
    }
    /// <p>The error from the protected job.</p>
    pub fn error(mut self, input: crate::types::ProtectedJobError) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>The error from the protected job.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::ProtectedJobError>) -> Self {
        self.error = input;
        self
    }
    /// <p>The error from the protected job.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::ProtectedJobError> {
        &self.error
    }
    /// Consumes the builder and constructs a [`ProtectedJob`](crate::types::ProtectedJob).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::ProtectedJobBuilder::id)
    /// - [`membership_id`](crate::types::builders::ProtectedJobBuilder::membership_id)
    /// - [`membership_arn`](crate::types::builders::ProtectedJobBuilder::membership_arn)
    /// - [`create_time`](crate::types::builders::ProtectedJobBuilder::create_time)
    /// - [`status`](crate::types::builders::ProtectedJobBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::ProtectedJob, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ProtectedJob {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building ProtectedJob",
                )
            })?,
            membership_id: self.membership_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "membership_id",
                    "membership_id was not specified but it is required when building ProtectedJob",
                )
            })?,
            membership_arn: self.membership_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "membership_arn",
                    "membership_arn was not specified but it is required when building ProtectedJob",
                )
            })?,
            create_time: self.create_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_time",
                    "create_time was not specified but it is required when building ProtectedJob",
                )
            })?,
            job_parameters: self.job_parameters,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ProtectedJob",
                )
            })?,
            result_configuration: self.result_configuration,
            statistics: self.statistics,
            result: self.result,
            error: self.error,
        })
    }
}
