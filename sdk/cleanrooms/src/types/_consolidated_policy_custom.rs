// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Controls on the analysis specifications that can be run on a configured table.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConsolidatedPolicyCustom {
    /// <p>The allowed analyses.</p>
    pub allowed_analyses: ::std::vec::Vec<::std::string::String>,
    /// <p>The allowed analysis providers.</p>
    pub allowed_analysis_providers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Additional analyses for the consolidated policy.</p>
    pub additional_analyses: ::std::option::Option<crate::types::AdditionalAnalyses>,
    /// <p>Disallowed output columns</p>
    pub disallowed_output_columns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies the unique identifier for your users.</p>
    pub differential_privacy: ::std::option::Option<crate::types::DifferentialPrivacyConfiguration>,
    /// <p>The allowed result receivers.</p>
    pub allowed_result_receivers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The additional analyses allowed by the consolidated policy.</p>
    pub allowed_additional_analyses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ConsolidatedPolicyCustom {
    /// <p>The allowed analyses.</p>
    pub fn allowed_analyses(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.allowed_analyses.deref()
    }
    /// <p>The allowed analysis providers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_analysis_providers.is_none()`.
    pub fn allowed_analysis_providers(&self) -> &[::std::string::String] {
        self.allowed_analysis_providers.as_deref().unwrap_or_default()
    }
    /// <p>Additional analyses for the consolidated policy.</p>
    pub fn additional_analyses(&self) -> ::std::option::Option<&crate::types::AdditionalAnalyses> {
        self.additional_analyses.as_ref()
    }
    /// <p>Disallowed output columns</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.disallowed_output_columns.is_none()`.
    pub fn disallowed_output_columns(&self) -> &[::std::string::String] {
        self.disallowed_output_columns.as_deref().unwrap_or_default()
    }
    /// <p>Specifies the unique identifier for your users.</p>
    pub fn differential_privacy(&self) -> ::std::option::Option<&crate::types::DifferentialPrivacyConfiguration> {
        self.differential_privacy.as_ref()
    }
    /// <p>The allowed result receivers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_result_receivers.is_none()`.
    pub fn allowed_result_receivers(&self) -> &[::std::string::String] {
        self.allowed_result_receivers.as_deref().unwrap_or_default()
    }
    /// <p>The additional analyses allowed by the consolidated policy.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_additional_analyses.is_none()`.
    pub fn allowed_additional_analyses(&self) -> &[::std::string::String] {
        self.allowed_additional_analyses.as_deref().unwrap_or_default()
    }
}
impl ConsolidatedPolicyCustom {
    /// Creates a new builder-style object to manufacture [`ConsolidatedPolicyCustom`](crate::types::ConsolidatedPolicyCustom).
    pub fn builder() -> crate::types::builders::ConsolidatedPolicyCustomBuilder {
        crate::types::builders::ConsolidatedPolicyCustomBuilder::default()
    }
}

/// A builder for [`ConsolidatedPolicyCustom`](crate::types::ConsolidatedPolicyCustom).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConsolidatedPolicyCustomBuilder {
    pub(crate) allowed_analyses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) allowed_analysis_providers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) additional_analyses: ::std::option::Option<crate::types::AdditionalAnalyses>,
    pub(crate) disallowed_output_columns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) differential_privacy: ::std::option::Option<crate::types::DifferentialPrivacyConfiguration>,
    pub(crate) allowed_result_receivers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) allowed_additional_analyses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ConsolidatedPolicyCustomBuilder {
    /// Appends an item to `allowed_analyses`.
    ///
    /// To override the contents of this collection use [`set_allowed_analyses`](Self::set_allowed_analyses).
    ///
    /// <p>The allowed analyses.</p>
    pub fn allowed_analyses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_analyses.unwrap_or_default();
        v.push(input.into());
        self.allowed_analyses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The allowed analyses.</p>
    pub fn set_allowed_analyses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allowed_analyses = input;
        self
    }
    /// <p>The allowed analyses.</p>
    pub fn get_allowed_analyses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allowed_analyses
    }
    /// Appends an item to `allowed_analysis_providers`.
    ///
    /// To override the contents of this collection use [`set_allowed_analysis_providers`](Self::set_allowed_analysis_providers).
    ///
    /// <p>The allowed analysis providers.</p>
    pub fn allowed_analysis_providers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_analysis_providers.unwrap_or_default();
        v.push(input.into());
        self.allowed_analysis_providers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The allowed analysis providers.</p>
    pub fn set_allowed_analysis_providers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allowed_analysis_providers = input;
        self
    }
    /// <p>The allowed analysis providers.</p>
    pub fn get_allowed_analysis_providers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allowed_analysis_providers
    }
    /// <p>Additional analyses for the consolidated policy.</p>
    pub fn additional_analyses(mut self, input: crate::types::AdditionalAnalyses) -> Self {
        self.additional_analyses = ::std::option::Option::Some(input);
        self
    }
    /// <p>Additional analyses for the consolidated policy.</p>
    pub fn set_additional_analyses(mut self, input: ::std::option::Option<crate::types::AdditionalAnalyses>) -> Self {
        self.additional_analyses = input;
        self
    }
    /// <p>Additional analyses for the consolidated policy.</p>
    pub fn get_additional_analyses(&self) -> &::std::option::Option<crate::types::AdditionalAnalyses> {
        &self.additional_analyses
    }
    /// Appends an item to `disallowed_output_columns`.
    ///
    /// To override the contents of this collection use [`set_disallowed_output_columns`](Self::set_disallowed_output_columns).
    ///
    /// <p>Disallowed output columns</p>
    pub fn disallowed_output_columns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.disallowed_output_columns.unwrap_or_default();
        v.push(input.into());
        self.disallowed_output_columns = ::std::option::Option::Some(v);
        self
    }
    /// <p>Disallowed output columns</p>
    pub fn set_disallowed_output_columns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.disallowed_output_columns = input;
        self
    }
    /// <p>Disallowed output columns</p>
    pub fn get_disallowed_output_columns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.disallowed_output_columns
    }
    /// <p>Specifies the unique identifier for your users.</p>
    pub fn differential_privacy(mut self, input: crate::types::DifferentialPrivacyConfiguration) -> Self {
        self.differential_privacy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the unique identifier for your users.</p>
    pub fn set_differential_privacy(mut self, input: ::std::option::Option<crate::types::DifferentialPrivacyConfiguration>) -> Self {
        self.differential_privacy = input;
        self
    }
    /// <p>Specifies the unique identifier for your users.</p>
    pub fn get_differential_privacy(&self) -> &::std::option::Option<crate::types::DifferentialPrivacyConfiguration> {
        &self.differential_privacy
    }
    /// Appends an item to `allowed_result_receivers`.
    ///
    /// To override the contents of this collection use [`set_allowed_result_receivers`](Self::set_allowed_result_receivers).
    ///
    /// <p>The allowed result receivers.</p>
    pub fn allowed_result_receivers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_result_receivers.unwrap_or_default();
        v.push(input.into());
        self.allowed_result_receivers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The allowed result receivers.</p>
    pub fn set_allowed_result_receivers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allowed_result_receivers = input;
        self
    }
    /// <p>The allowed result receivers.</p>
    pub fn get_allowed_result_receivers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allowed_result_receivers
    }
    /// Appends an item to `allowed_additional_analyses`.
    ///
    /// To override the contents of this collection use [`set_allowed_additional_analyses`](Self::set_allowed_additional_analyses).
    ///
    /// <p>The additional analyses allowed by the consolidated policy.</p>
    pub fn allowed_additional_analyses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_additional_analyses.unwrap_or_default();
        v.push(input.into());
        self.allowed_additional_analyses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The additional analyses allowed by the consolidated policy.</p>
    pub fn set_allowed_additional_analyses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allowed_additional_analyses = input;
        self
    }
    /// <p>The additional analyses allowed by the consolidated policy.</p>
    pub fn get_allowed_additional_analyses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allowed_additional_analyses
    }
    /// Consumes the builder and constructs a [`ConsolidatedPolicyCustom`](crate::types::ConsolidatedPolicyCustom).
    /// This method will fail if any of the following fields are not set:
    /// - [`allowed_analyses`](crate::types::builders::ConsolidatedPolicyCustomBuilder::allowed_analyses)
    pub fn build(self) -> ::std::result::Result<crate::types::ConsolidatedPolicyCustom, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConsolidatedPolicyCustom {
            allowed_analyses: self.allowed_analyses.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "allowed_analyses",
                    "allowed_analyses was not specified but it is required when building ConsolidatedPolicyCustom",
                )
            })?,
            allowed_analysis_providers: self.allowed_analysis_providers,
            additional_analyses: self.additional_analyses,
            disallowed_output_columns: self.disallowed_output_columns,
            differential_privacy: self.differential_privacy,
            allowed_result_receivers: self.allowed_result_receivers,
            allowed_additional_analyses: self.allowed_additional_analyses,
        })
    }
}
