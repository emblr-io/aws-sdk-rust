// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Controls on the analysis specifications that can be run on a configured table.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum ConsolidatedPolicyV1 {
    /// <p>The aggregation setting for the consolidated policy.</p>
    Aggregation(crate::types::ConsolidatedPolicyAggregation),
    /// <p>Custom policy</p>
    Custom(crate::types::ConsolidatedPolicyCustom),
    /// <p>The list of consolidated policies.</p>
    List(crate::types::ConsolidatedPolicyList),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ConsolidatedPolicyV1 {
    /// Tries to convert the enum instance into [`Aggregation`](crate::types::ConsolidatedPolicyV1::Aggregation), extracting the inner [`ConsolidatedPolicyAggregation`](crate::types::ConsolidatedPolicyAggregation).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_aggregation(&self) -> ::std::result::Result<&crate::types::ConsolidatedPolicyAggregation, &Self> {
        if let ConsolidatedPolicyV1::Aggregation(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Aggregation`](crate::types::ConsolidatedPolicyV1::Aggregation).
    pub fn is_aggregation(&self) -> bool {
        self.as_aggregation().is_ok()
    }
    /// Tries to convert the enum instance into [`Custom`](crate::types::ConsolidatedPolicyV1::Custom), extracting the inner [`ConsolidatedPolicyCustom`](crate::types::ConsolidatedPolicyCustom).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_custom(&self) -> ::std::result::Result<&crate::types::ConsolidatedPolicyCustom, &Self> {
        if let ConsolidatedPolicyV1::Custom(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Custom`](crate::types::ConsolidatedPolicyV1::Custom).
    pub fn is_custom(&self) -> bool {
        self.as_custom().is_ok()
    }
    /// Tries to convert the enum instance into [`List`](crate::types::ConsolidatedPolicyV1::List), extracting the inner [`ConsolidatedPolicyList`](crate::types::ConsolidatedPolicyList).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_list(&self) -> ::std::result::Result<&crate::types::ConsolidatedPolicyList, &Self> {
        if let ConsolidatedPolicyV1::List(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`List`](crate::types::ConsolidatedPolicyV1::List).
    pub fn is_list(&self) -> bool {
        self.as_list().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
