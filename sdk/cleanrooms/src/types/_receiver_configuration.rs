// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The receiver configuration for a protected query.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReceiverConfiguration {
    /// <p>The type of analysis for the protected query. The results of the query can be analyzed directly (<code>DIRECT_ANALYSIS</code>) or used as input into additional analyses (<code>ADDITIONAL_ANALYSIS</code>), such as a query that is a seed for a lookalike ML model.</p>
    pub analysis_type: crate::types::AnalysisType,
    /// <p>The configuration details of the receiver configuration.</p>
    pub configuration_details: ::std::option::Option<crate::types::ConfigurationDetails>,
}
impl ReceiverConfiguration {
    /// <p>The type of analysis for the protected query. The results of the query can be analyzed directly (<code>DIRECT_ANALYSIS</code>) or used as input into additional analyses (<code>ADDITIONAL_ANALYSIS</code>), such as a query that is a seed for a lookalike ML model.</p>
    pub fn analysis_type(&self) -> &crate::types::AnalysisType {
        &self.analysis_type
    }
    /// <p>The configuration details of the receiver configuration.</p>
    pub fn configuration_details(&self) -> ::std::option::Option<&crate::types::ConfigurationDetails> {
        self.configuration_details.as_ref()
    }
}
impl ReceiverConfiguration {
    /// Creates a new builder-style object to manufacture [`ReceiverConfiguration`](crate::types::ReceiverConfiguration).
    pub fn builder() -> crate::types::builders::ReceiverConfigurationBuilder {
        crate::types::builders::ReceiverConfigurationBuilder::default()
    }
}

/// A builder for [`ReceiverConfiguration`](crate::types::ReceiverConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ReceiverConfigurationBuilder {
    pub(crate) analysis_type: ::std::option::Option<crate::types::AnalysisType>,
    pub(crate) configuration_details: ::std::option::Option<crate::types::ConfigurationDetails>,
}
impl ReceiverConfigurationBuilder {
    /// <p>The type of analysis for the protected query. The results of the query can be analyzed directly (<code>DIRECT_ANALYSIS</code>) or used as input into additional analyses (<code>ADDITIONAL_ANALYSIS</code>), such as a query that is a seed for a lookalike ML model.</p>
    /// This field is required.
    pub fn analysis_type(mut self, input: crate::types::AnalysisType) -> Self {
        self.analysis_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of analysis for the protected query. The results of the query can be analyzed directly (<code>DIRECT_ANALYSIS</code>) or used as input into additional analyses (<code>ADDITIONAL_ANALYSIS</code>), such as a query that is a seed for a lookalike ML model.</p>
    pub fn set_analysis_type(mut self, input: ::std::option::Option<crate::types::AnalysisType>) -> Self {
        self.analysis_type = input;
        self
    }
    /// <p>The type of analysis for the protected query. The results of the query can be analyzed directly (<code>DIRECT_ANALYSIS</code>) or used as input into additional analyses (<code>ADDITIONAL_ANALYSIS</code>), such as a query that is a seed for a lookalike ML model.</p>
    pub fn get_analysis_type(&self) -> &::std::option::Option<crate::types::AnalysisType> {
        &self.analysis_type
    }
    /// <p>The configuration details of the receiver configuration.</p>
    pub fn configuration_details(mut self, input: crate::types::ConfigurationDetails) -> Self {
        self.configuration_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration details of the receiver configuration.</p>
    pub fn set_configuration_details(mut self, input: ::std::option::Option<crate::types::ConfigurationDetails>) -> Self {
        self.configuration_details = input;
        self
    }
    /// <p>The configuration details of the receiver configuration.</p>
    pub fn get_configuration_details(&self) -> &::std::option::Option<crate::types::ConfigurationDetails> {
        &self.configuration_details
    }
    /// Consumes the builder and constructs a [`ReceiverConfiguration`](crate::types::ReceiverConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`analysis_type`](crate::types::builders::ReceiverConfigurationBuilder::analysis_type)
    pub fn build(self) -> ::std::result::Result<crate::types::ReceiverConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ReceiverConfiguration {
            analysis_type: self.analysis_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "analysis_type",
                    "analysis_type was not specified but it is required when building ReceiverConfiguration",
                )
            })?,
            configuration_details: self.configuration_details,
        })
    }
}
