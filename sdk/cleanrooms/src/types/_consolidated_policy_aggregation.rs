// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Controls on the analysis specifications that can be run on a configured table.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConsolidatedPolicyAggregation {
    /// <p>Aggregate columns in consolidated policy aggregation.</p>
    pub aggregate_columns: ::std::vec::Vec<crate::types::AggregateColumn>,
    /// <p>The columns to join on.</p>
    pub join_columns: ::std::vec::Vec<::std::string::String>,
    /// <p>Join required</p>
    pub join_required: ::std::option::Option<crate::types::JoinRequiredOption>,
    /// <p>The allowed join operators.</p>
    pub allowed_join_operators: ::std::option::Option<::std::vec::Vec<crate::types::JoinOperator>>,
    /// <p>The dimension columns of the consolidated policy aggregation.</p>
    pub dimension_columns: ::std::vec::Vec<::std::string::String>,
    /// <p>The scalar functions.</p>
    pub scalar_functions: ::std::vec::Vec<crate::types::ScalarFunctions>,
    /// <p>The output constraints of the consolidated policy aggregation.</p>
    pub output_constraints: ::std::vec::Vec<crate::types::AggregationConstraint>,
    /// <p>Additional analyses for the consolidated policy aggregation.</p>
    pub additional_analyses: ::std::option::Option<crate::types::AdditionalAnalyses>,
    /// <p>The allowed result receivers.</p>
    pub allowed_result_receivers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The additional analyses allowed by the consolidated policy aggregation.</p>
    pub allowed_additional_analyses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ConsolidatedPolicyAggregation {
    /// <p>Aggregate columns in consolidated policy aggregation.</p>
    pub fn aggregate_columns(&self) -> &[crate::types::AggregateColumn] {
        use std::ops::Deref;
        self.aggregate_columns.deref()
    }
    /// <p>The columns to join on.</p>
    pub fn join_columns(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.join_columns.deref()
    }
    /// <p>Join required</p>
    pub fn join_required(&self) -> ::std::option::Option<&crate::types::JoinRequiredOption> {
        self.join_required.as_ref()
    }
    /// <p>The allowed join operators.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_join_operators.is_none()`.
    pub fn allowed_join_operators(&self) -> &[crate::types::JoinOperator] {
        self.allowed_join_operators.as_deref().unwrap_or_default()
    }
    /// <p>The dimension columns of the consolidated policy aggregation.</p>
    pub fn dimension_columns(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.dimension_columns.deref()
    }
    /// <p>The scalar functions.</p>
    pub fn scalar_functions(&self) -> &[crate::types::ScalarFunctions] {
        use std::ops::Deref;
        self.scalar_functions.deref()
    }
    /// <p>The output constraints of the consolidated policy aggregation.</p>
    pub fn output_constraints(&self) -> &[crate::types::AggregationConstraint] {
        use std::ops::Deref;
        self.output_constraints.deref()
    }
    /// <p>Additional analyses for the consolidated policy aggregation.</p>
    pub fn additional_analyses(&self) -> ::std::option::Option<&crate::types::AdditionalAnalyses> {
        self.additional_analyses.as_ref()
    }
    /// <p>The allowed result receivers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_result_receivers.is_none()`.
    pub fn allowed_result_receivers(&self) -> &[::std::string::String] {
        self.allowed_result_receivers.as_deref().unwrap_or_default()
    }
    /// <p>The additional analyses allowed by the consolidated policy aggregation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_additional_analyses.is_none()`.
    pub fn allowed_additional_analyses(&self) -> &[::std::string::String] {
        self.allowed_additional_analyses.as_deref().unwrap_or_default()
    }
}
impl ConsolidatedPolicyAggregation {
    /// Creates a new builder-style object to manufacture [`ConsolidatedPolicyAggregation`](crate::types::ConsolidatedPolicyAggregation).
    pub fn builder() -> crate::types::builders::ConsolidatedPolicyAggregationBuilder {
        crate::types::builders::ConsolidatedPolicyAggregationBuilder::default()
    }
}

/// A builder for [`ConsolidatedPolicyAggregation`](crate::types::ConsolidatedPolicyAggregation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConsolidatedPolicyAggregationBuilder {
    pub(crate) aggregate_columns: ::std::option::Option<::std::vec::Vec<crate::types::AggregateColumn>>,
    pub(crate) join_columns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) join_required: ::std::option::Option<crate::types::JoinRequiredOption>,
    pub(crate) allowed_join_operators: ::std::option::Option<::std::vec::Vec<crate::types::JoinOperator>>,
    pub(crate) dimension_columns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) scalar_functions: ::std::option::Option<::std::vec::Vec<crate::types::ScalarFunctions>>,
    pub(crate) output_constraints: ::std::option::Option<::std::vec::Vec<crate::types::AggregationConstraint>>,
    pub(crate) additional_analyses: ::std::option::Option<crate::types::AdditionalAnalyses>,
    pub(crate) allowed_result_receivers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) allowed_additional_analyses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ConsolidatedPolicyAggregationBuilder {
    /// Appends an item to `aggregate_columns`.
    ///
    /// To override the contents of this collection use [`set_aggregate_columns`](Self::set_aggregate_columns).
    ///
    /// <p>Aggregate columns in consolidated policy aggregation.</p>
    pub fn aggregate_columns(mut self, input: crate::types::AggregateColumn) -> Self {
        let mut v = self.aggregate_columns.unwrap_or_default();
        v.push(input);
        self.aggregate_columns = ::std::option::Option::Some(v);
        self
    }
    /// <p>Aggregate columns in consolidated policy aggregation.</p>
    pub fn set_aggregate_columns(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AggregateColumn>>) -> Self {
        self.aggregate_columns = input;
        self
    }
    /// <p>Aggregate columns in consolidated policy aggregation.</p>
    pub fn get_aggregate_columns(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AggregateColumn>> {
        &self.aggregate_columns
    }
    /// Appends an item to `join_columns`.
    ///
    /// To override the contents of this collection use [`set_join_columns`](Self::set_join_columns).
    ///
    /// <p>The columns to join on.</p>
    pub fn join_columns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.join_columns.unwrap_or_default();
        v.push(input.into());
        self.join_columns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The columns to join on.</p>
    pub fn set_join_columns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.join_columns = input;
        self
    }
    /// <p>The columns to join on.</p>
    pub fn get_join_columns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.join_columns
    }
    /// <p>Join required</p>
    pub fn join_required(mut self, input: crate::types::JoinRequiredOption) -> Self {
        self.join_required = ::std::option::Option::Some(input);
        self
    }
    /// <p>Join required</p>
    pub fn set_join_required(mut self, input: ::std::option::Option<crate::types::JoinRequiredOption>) -> Self {
        self.join_required = input;
        self
    }
    /// <p>Join required</p>
    pub fn get_join_required(&self) -> &::std::option::Option<crate::types::JoinRequiredOption> {
        &self.join_required
    }
    /// Appends an item to `allowed_join_operators`.
    ///
    /// To override the contents of this collection use [`set_allowed_join_operators`](Self::set_allowed_join_operators).
    ///
    /// <p>The allowed join operators.</p>
    pub fn allowed_join_operators(mut self, input: crate::types::JoinOperator) -> Self {
        let mut v = self.allowed_join_operators.unwrap_or_default();
        v.push(input);
        self.allowed_join_operators = ::std::option::Option::Some(v);
        self
    }
    /// <p>The allowed join operators.</p>
    pub fn set_allowed_join_operators(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::JoinOperator>>) -> Self {
        self.allowed_join_operators = input;
        self
    }
    /// <p>The allowed join operators.</p>
    pub fn get_allowed_join_operators(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::JoinOperator>> {
        &self.allowed_join_operators
    }
    /// Appends an item to `dimension_columns`.
    ///
    /// To override the contents of this collection use [`set_dimension_columns`](Self::set_dimension_columns).
    ///
    /// <p>The dimension columns of the consolidated policy aggregation.</p>
    pub fn dimension_columns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.dimension_columns.unwrap_or_default();
        v.push(input.into());
        self.dimension_columns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The dimension columns of the consolidated policy aggregation.</p>
    pub fn set_dimension_columns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.dimension_columns = input;
        self
    }
    /// <p>The dimension columns of the consolidated policy aggregation.</p>
    pub fn get_dimension_columns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.dimension_columns
    }
    /// Appends an item to `scalar_functions`.
    ///
    /// To override the contents of this collection use [`set_scalar_functions`](Self::set_scalar_functions).
    ///
    /// <p>The scalar functions.</p>
    pub fn scalar_functions(mut self, input: crate::types::ScalarFunctions) -> Self {
        let mut v = self.scalar_functions.unwrap_or_default();
        v.push(input);
        self.scalar_functions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The scalar functions.</p>
    pub fn set_scalar_functions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ScalarFunctions>>) -> Self {
        self.scalar_functions = input;
        self
    }
    /// <p>The scalar functions.</p>
    pub fn get_scalar_functions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ScalarFunctions>> {
        &self.scalar_functions
    }
    /// Appends an item to `output_constraints`.
    ///
    /// To override the contents of this collection use [`set_output_constraints`](Self::set_output_constraints).
    ///
    /// <p>The output constraints of the consolidated policy aggregation.</p>
    pub fn output_constraints(mut self, input: crate::types::AggregationConstraint) -> Self {
        let mut v = self.output_constraints.unwrap_or_default();
        v.push(input);
        self.output_constraints = ::std::option::Option::Some(v);
        self
    }
    /// <p>The output constraints of the consolidated policy aggregation.</p>
    pub fn set_output_constraints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AggregationConstraint>>) -> Self {
        self.output_constraints = input;
        self
    }
    /// <p>The output constraints of the consolidated policy aggregation.</p>
    pub fn get_output_constraints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AggregationConstraint>> {
        &self.output_constraints
    }
    /// <p>Additional analyses for the consolidated policy aggregation.</p>
    pub fn additional_analyses(mut self, input: crate::types::AdditionalAnalyses) -> Self {
        self.additional_analyses = ::std::option::Option::Some(input);
        self
    }
    /// <p>Additional analyses for the consolidated policy aggregation.</p>
    pub fn set_additional_analyses(mut self, input: ::std::option::Option<crate::types::AdditionalAnalyses>) -> Self {
        self.additional_analyses = input;
        self
    }
    /// <p>Additional analyses for the consolidated policy aggregation.</p>
    pub fn get_additional_analyses(&self) -> &::std::option::Option<crate::types::AdditionalAnalyses> {
        &self.additional_analyses
    }
    /// Appends an item to `allowed_result_receivers`.
    ///
    /// To override the contents of this collection use [`set_allowed_result_receivers`](Self::set_allowed_result_receivers).
    ///
    /// <p>The allowed result receivers.</p>
    pub fn allowed_result_receivers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_result_receivers.unwrap_or_default();
        v.push(input.into());
        self.allowed_result_receivers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The allowed result receivers.</p>
    pub fn set_allowed_result_receivers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allowed_result_receivers = input;
        self
    }
    /// <p>The allowed result receivers.</p>
    pub fn get_allowed_result_receivers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allowed_result_receivers
    }
    /// Appends an item to `allowed_additional_analyses`.
    ///
    /// To override the contents of this collection use [`set_allowed_additional_analyses`](Self::set_allowed_additional_analyses).
    ///
    /// <p>The additional analyses allowed by the consolidated policy aggregation.</p>
    pub fn allowed_additional_analyses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_additional_analyses.unwrap_or_default();
        v.push(input.into());
        self.allowed_additional_analyses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The additional analyses allowed by the consolidated policy aggregation.</p>
    pub fn set_allowed_additional_analyses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allowed_additional_analyses = input;
        self
    }
    /// <p>The additional analyses allowed by the consolidated policy aggregation.</p>
    pub fn get_allowed_additional_analyses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allowed_additional_analyses
    }
    /// Consumes the builder and constructs a [`ConsolidatedPolicyAggregation`](crate::types::ConsolidatedPolicyAggregation).
    /// This method will fail if any of the following fields are not set:
    /// - [`aggregate_columns`](crate::types::builders::ConsolidatedPolicyAggregationBuilder::aggregate_columns)
    /// - [`join_columns`](crate::types::builders::ConsolidatedPolicyAggregationBuilder::join_columns)
    /// - [`dimension_columns`](crate::types::builders::ConsolidatedPolicyAggregationBuilder::dimension_columns)
    /// - [`scalar_functions`](crate::types::builders::ConsolidatedPolicyAggregationBuilder::scalar_functions)
    /// - [`output_constraints`](crate::types::builders::ConsolidatedPolicyAggregationBuilder::output_constraints)
    pub fn build(self) -> ::std::result::Result<crate::types::ConsolidatedPolicyAggregation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConsolidatedPolicyAggregation {
            aggregate_columns: self.aggregate_columns.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "aggregate_columns",
                    "aggregate_columns was not specified but it is required when building ConsolidatedPolicyAggregation",
                )
            })?,
            join_columns: self.join_columns.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "join_columns",
                    "join_columns was not specified but it is required when building ConsolidatedPolicyAggregation",
                )
            })?,
            join_required: self.join_required,
            allowed_join_operators: self.allowed_join_operators,
            dimension_columns: self.dimension_columns.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dimension_columns",
                    "dimension_columns was not specified but it is required when building ConsolidatedPolicyAggregation",
                )
            })?,
            scalar_functions: self.scalar_functions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "scalar_functions",
                    "scalar_functions was not specified but it is required when building ConsolidatedPolicyAggregation",
                )
            })?,
            output_constraints: self.output_constraints.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "output_constraints",
                    "output_constraints was not specified but it is required when building ConsolidatedPolicyAggregation",
                )
            })?,
            additional_analyses: self.additional_analyses,
            allowed_result_receivers: self.allowed_result_receivers,
            allowed_additional_analyses: self.allowed_additional_analyses,
        })
    }
}
