// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines details for the analysis rule ID mapping table.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalysisRuleIdMappingTable {
    /// <p>The columns that query runners are allowed to use in an INNER JOIN statement.</p>
    pub join_columns: ::std::vec::Vec<::std::string::String>,
    /// <p>The query constraints of the analysis rule ID mapping table.</p>
    pub query_constraints: ::std::vec::Vec<crate::types::QueryConstraint>,
    /// <p>The columns that query runners are allowed to select, group by, or filter by.</p>
    pub dimension_columns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AnalysisRuleIdMappingTable {
    /// <p>The columns that query runners are allowed to use in an INNER JOIN statement.</p>
    pub fn join_columns(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.join_columns.deref()
    }
    /// <p>The query constraints of the analysis rule ID mapping table.</p>
    pub fn query_constraints(&self) -> &[crate::types::QueryConstraint] {
        use std::ops::Deref;
        self.query_constraints.deref()
    }
    /// <p>The columns that query runners are allowed to select, group by, or filter by.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dimension_columns.is_none()`.
    pub fn dimension_columns(&self) -> &[::std::string::String] {
        self.dimension_columns.as_deref().unwrap_or_default()
    }
}
impl AnalysisRuleIdMappingTable {
    /// Creates a new builder-style object to manufacture [`AnalysisRuleIdMappingTable`](crate::types::AnalysisRuleIdMappingTable).
    pub fn builder() -> crate::types::builders::AnalysisRuleIdMappingTableBuilder {
        crate::types::builders::AnalysisRuleIdMappingTableBuilder::default()
    }
}

/// A builder for [`AnalysisRuleIdMappingTable`](crate::types::AnalysisRuleIdMappingTable).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AnalysisRuleIdMappingTableBuilder {
    pub(crate) join_columns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) query_constraints: ::std::option::Option<::std::vec::Vec<crate::types::QueryConstraint>>,
    pub(crate) dimension_columns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AnalysisRuleIdMappingTableBuilder {
    /// Appends an item to `join_columns`.
    ///
    /// To override the contents of this collection use [`set_join_columns`](Self::set_join_columns).
    ///
    /// <p>The columns that query runners are allowed to use in an INNER JOIN statement.</p>
    pub fn join_columns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.join_columns.unwrap_or_default();
        v.push(input.into());
        self.join_columns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The columns that query runners are allowed to use in an INNER JOIN statement.</p>
    pub fn set_join_columns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.join_columns = input;
        self
    }
    /// <p>The columns that query runners are allowed to use in an INNER JOIN statement.</p>
    pub fn get_join_columns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.join_columns
    }
    /// Appends an item to `query_constraints`.
    ///
    /// To override the contents of this collection use [`set_query_constraints`](Self::set_query_constraints).
    ///
    /// <p>The query constraints of the analysis rule ID mapping table.</p>
    pub fn query_constraints(mut self, input: crate::types::QueryConstraint) -> Self {
        let mut v = self.query_constraints.unwrap_or_default();
        v.push(input);
        self.query_constraints = ::std::option::Option::Some(v);
        self
    }
    /// <p>The query constraints of the analysis rule ID mapping table.</p>
    pub fn set_query_constraints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::QueryConstraint>>) -> Self {
        self.query_constraints = input;
        self
    }
    /// <p>The query constraints of the analysis rule ID mapping table.</p>
    pub fn get_query_constraints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::QueryConstraint>> {
        &self.query_constraints
    }
    /// Appends an item to `dimension_columns`.
    ///
    /// To override the contents of this collection use [`set_dimension_columns`](Self::set_dimension_columns).
    ///
    /// <p>The columns that query runners are allowed to select, group by, or filter by.</p>
    pub fn dimension_columns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.dimension_columns.unwrap_or_default();
        v.push(input.into());
        self.dimension_columns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The columns that query runners are allowed to select, group by, or filter by.</p>
    pub fn set_dimension_columns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.dimension_columns = input;
        self
    }
    /// <p>The columns that query runners are allowed to select, group by, or filter by.</p>
    pub fn get_dimension_columns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.dimension_columns
    }
    /// Consumes the builder and constructs a [`AnalysisRuleIdMappingTable`](crate::types::AnalysisRuleIdMappingTable).
    /// This method will fail if any of the following fields are not set:
    /// - [`join_columns`](crate::types::builders::AnalysisRuleIdMappingTableBuilder::join_columns)
    /// - [`query_constraints`](crate::types::builders::AnalysisRuleIdMappingTableBuilder::query_constraints)
    pub fn build(self) -> ::std::result::Result<crate::types::AnalysisRuleIdMappingTable, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AnalysisRuleIdMappingTable {
            join_columns: self.join_columns.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "join_columns",
                    "join_columns was not specified but it is required when building AnalysisRuleIdMappingTable",
                )
            })?,
            query_constraints: self.query_constraints.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "query_constraints",
                    "query_constraints was not specified but it is required when building AnalysisRuleIdMappingTable",
                )
            })?,
            dimension_columns: self.dimension_columns,
        })
    }
}
