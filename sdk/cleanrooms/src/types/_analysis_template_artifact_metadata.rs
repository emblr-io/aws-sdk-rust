// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The analysis template artifact metadata.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalysisTemplateArtifactMetadata {
    /// <p>The hash of the entry point for the analysis template artifact metadata.</p>
    pub entry_point_hash: ::std::option::Option<crate::types::Hash>,
    /// <p>Additional artifact hashes for the analysis template.</p>
    pub additional_artifact_hashes: ::std::option::Option<::std::vec::Vec<crate::types::Hash>>,
}
impl AnalysisTemplateArtifactMetadata {
    /// <p>The hash of the entry point for the analysis template artifact metadata.</p>
    pub fn entry_point_hash(&self) -> ::std::option::Option<&crate::types::Hash> {
        self.entry_point_hash.as_ref()
    }
    /// <p>Additional artifact hashes for the analysis template.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.additional_artifact_hashes.is_none()`.
    pub fn additional_artifact_hashes(&self) -> &[crate::types::Hash] {
        self.additional_artifact_hashes.as_deref().unwrap_or_default()
    }
}
impl AnalysisTemplateArtifactMetadata {
    /// Creates a new builder-style object to manufacture [`AnalysisTemplateArtifactMetadata`](crate::types::AnalysisTemplateArtifactMetadata).
    pub fn builder() -> crate::types::builders::AnalysisTemplateArtifactMetadataBuilder {
        crate::types::builders::AnalysisTemplateArtifactMetadataBuilder::default()
    }
}

/// A builder for [`AnalysisTemplateArtifactMetadata`](crate::types::AnalysisTemplateArtifactMetadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AnalysisTemplateArtifactMetadataBuilder {
    pub(crate) entry_point_hash: ::std::option::Option<crate::types::Hash>,
    pub(crate) additional_artifact_hashes: ::std::option::Option<::std::vec::Vec<crate::types::Hash>>,
}
impl AnalysisTemplateArtifactMetadataBuilder {
    /// <p>The hash of the entry point for the analysis template artifact metadata.</p>
    /// This field is required.
    pub fn entry_point_hash(mut self, input: crate::types::Hash) -> Self {
        self.entry_point_hash = ::std::option::Option::Some(input);
        self
    }
    /// <p>The hash of the entry point for the analysis template artifact metadata.</p>
    pub fn set_entry_point_hash(mut self, input: ::std::option::Option<crate::types::Hash>) -> Self {
        self.entry_point_hash = input;
        self
    }
    /// <p>The hash of the entry point for the analysis template artifact metadata.</p>
    pub fn get_entry_point_hash(&self) -> &::std::option::Option<crate::types::Hash> {
        &self.entry_point_hash
    }
    /// Appends an item to `additional_artifact_hashes`.
    ///
    /// To override the contents of this collection use [`set_additional_artifact_hashes`](Self::set_additional_artifact_hashes).
    ///
    /// <p>Additional artifact hashes for the analysis template.</p>
    pub fn additional_artifact_hashes(mut self, input: crate::types::Hash) -> Self {
        let mut v = self.additional_artifact_hashes.unwrap_or_default();
        v.push(input);
        self.additional_artifact_hashes = ::std::option::Option::Some(v);
        self
    }
    /// <p>Additional artifact hashes for the analysis template.</p>
    pub fn set_additional_artifact_hashes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Hash>>) -> Self {
        self.additional_artifact_hashes = input;
        self
    }
    /// <p>Additional artifact hashes for the analysis template.</p>
    pub fn get_additional_artifact_hashes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Hash>> {
        &self.additional_artifact_hashes
    }
    /// Consumes the builder and constructs a [`AnalysisTemplateArtifactMetadata`](crate::types::AnalysisTemplateArtifactMetadata).
    pub fn build(self) -> crate::types::AnalysisTemplateArtifactMetadata {
        crate::types::AnalysisTemplateArtifactMetadata {
            entry_point_hash: self.entry_point_hash,
            additional_artifact_hashes: self.additional_artifact_hashes,
        }
    }
}
