// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A pointer to the dataset that underlies this table.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum TableReference {
    /// <p>If present, a reference to the Athena table referred to by this table reference.</p>
    Athena(crate::types::AthenaTableReference),
    /// <p>If present, a reference to the Glue table referred to by this table reference.</p>
    Glue(crate::types::GlueTableReference),
    /// <p>If present, a reference to the Snowflake table referred to by this table reference.</p>
    Snowflake(crate::types::SnowflakeTableReference),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl TableReference {
    /// Tries to convert the enum instance into [`Athena`](crate::types::TableReference::Athena), extracting the inner [`AthenaTableReference`](crate::types::AthenaTableReference).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_athena(&self) -> ::std::result::Result<&crate::types::AthenaTableReference, &Self> {
        if let TableReference::Athena(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Athena`](crate::types::TableReference::Athena).
    pub fn is_athena(&self) -> bool {
        self.as_athena().is_ok()
    }
    /// Tries to convert the enum instance into [`Glue`](crate::types::TableReference::Glue), extracting the inner [`GlueTableReference`](crate::types::GlueTableReference).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_glue(&self) -> ::std::result::Result<&crate::types::GlueTableReference, &Self> {
        if let TableReference::Glue(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Glue`](crate::types::TableReference::Glue).
    pub fn is_glue(&self) -> bool {
        self.as_glue().is_ok()
    }
    /// Tries to convert the enum instance into [`Snowflake`](crate::types::TableReference::Snowflake), extracting the inner [`SnowflakeTableReference`](crate::types::SnowflakeTableReference).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_snowflake(&self) -> ::std::result::Result<&crate::types::SnowflakeTableReference, &Self> {
        if let TableReference::Snowflake(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Snowflake`](crate::types::TableReference::Snowflake).
    pub fn is_snowflake(&self) -> bool {
        self.as_snowflake().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
