// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration settings for the ID mapping table.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IdMappingConfig {
    /// <p>An indicator as to whether you can use your column as a dimension column in the ID mapping table (<code>TRUE</code>) or not (<code>FALSE</code>).</p>
    /// <p>Default is <code>FALSE</code>.</p>
    pub allow_use_as_dimension_column: bool,
}
impl IdMappingConfig {
    /// <p>An indicator as to whether you can use your column as a dimension column in the ID mapping table (<code>TRUE</code>) or not (<code>FALSE</code>).</p>
    /// <p>Default is <code>FALSE</code>.</p>
    pub fn allow_use_as_dimension_column(&self) -> bool {
        self.allow_use_as_dimension_column
    }
}
impl IdMappingConfig {
    /// Creates a new builder-style object to manufacture [`IdMappingConfig`](crate::types::IdMappingConfig).
    pub fn builder() -> crate::types::builders::IdMappingConfigBuilder {
        crate::types::builders::IdMappingConfigBuilder::default()
    }
}

/// A builder for [`IdMappingConfig`](crate::types::IdMappingConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IdMappingConfigBuilder {
    pub(crate) allow_use_as_dimension_column: ::std::option::Option<bool>,
}
impl IdMappingConfigBuilder {
    /// <p>An indicator as to whether you can use your column as a dimension column in the ID mapping table (<code>TRUE</code>) or not (<code>FALSE</code>).</p>
    /// <p>Default is <code>FALSE</code>.</p>
    /// This field is required.
    pub fn allow_use_as_dimension_column(mut self, input: bool) -> Self {
        self.allow_use_as_dimension_column = ::std::option::Option::Some(input);
        self
    }
    /// <p>An indicator as to whether you can use your column as a dimension column in the ID mapping table (<code>TRUE</code>) or not (<code>FALSE</code>).</p>
    /// <p>Default is <code>FALSE</code>.</p>
    pub fn set_allow_use_as_dimension_column(mut self, input: ::std::option::Option<bool>) -> Self {
        self.allow_use_as_dimension_column = input;
        self
    }
    /// <p>An indicator as to whether you can use your column as a dimension column in the ID mapping table (<code>TRUE</code>) or not (<code>FALSE</code>).</p>
    /// <p>Default is <code>FALSE</code>.</p>
    pub fn get_allow_use_as_dimension_column(&self) -> &::std::option::Option<bool> {
        &self.allow_use_as_dimension_column
    }
    /// Consumes the builder and constructs a [`IdMappingConfig`](crate::types::IdMappingConfig).
    pub fn build(self) -> crate::types::IdMappingConfig {
        crate::types::IdMappingConfig {
            allow_use_as_dimension_column: self.allow_use_as_dimension_column.unwrap_or_default(),
        }
    }
}
