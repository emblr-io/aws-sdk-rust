// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The analysis template artifact.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalysisTemplateArtifact {
    /// <p>The artifact location.</p>
    pub location: ::std::option::Option<crate::types::S3Location>,
}
impl AnalysisTemplateArtifact {
    /// <p>The artifact location.</p>
    pub fn location(&self) -> ::std::option::Option<&crate::types::S3Location> {
        self.location.as_ref()
    }
}
impl AnalysisTemplateArtifact {
    /// Creates a new builder-style object to manufacture [`AnalysisTemplateArtifact`](crate::types::AnalysisTemplateArtifact).
    pub fn builder() -> crate::types::builders::AnalysisTemplateArtifactBuilder {
        crate::types::builders::AnalysisTemplateArtifactBuilder::default()
    }
}

/// A builder for [`AnalysisTemplateArtifact`](crate::types::AnalysisTemplateArtifact).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AnalysisTemplateArtifactBuilder {
    pub(crate) location: ::std::option::Option<crate::types::S3Location>,
}
impl AnalysisTemplateArtifactBuilder {
    /// <p>The artifact location.</p>
    /// This field is required.
    pub fn location(mut self, input: crate::types::S3Location) -> Self {
        self.location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The artifact location.</p>
    pub fn set_location(mut self, input: ::std::option::Option<crate::types::S3Location>) -> Self {
        self.location = input;
        self
    }
    /// <p>The artifact location.</p>
    pub fn get_location(&self) -> &::std::option::Option<crate::types::S3Location> {
        &self.location
    }
    /// Consumes the builder and constructs a [`AnalysisTemplateArtifact`](crate::types::AnalysisTemplateArtifact).
    pub fn build(self) -> crate::types::AnalysisTemplateArtifact {
        crate::types::AnalysisTemplateArtifact { location: self.location }
    }
}
