// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing the collaboration member's payment responsibilities set by the collaboration creator for query and job compute costs.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JobComputePaymentConfig {
    /// <p>Indicates whether the collaboration creator has configured the collaboration member to pay for query and job compute costs (<code>TRUE</code>) or has not configured the collaboration member to pay for query and job compute costs (<code>FALSE</code>).</p>
    /// <p>Exactly one member can be configured to pay for query and job compute costs. An error is returned if the collaboration creator sets a <code>TRUE</code> value for more than one member in the collaboration.</p>
    /// <p>An error is returned if the collaboration creator sets a <code>FALSE</code> value for the member who can run queries and jobs.</p>
    pub is_responsible: bool,
}
impl JobComputePaymentConfig {
    /// <p>Indicates whether the collaboration creator has configured the collaboration member to pay for query and job compute costs (<code>TRUE</code>) or has not configured the collaboration member to pay for query and job compute costs (<code>FALSE</code>).</p>
    /// <p>Exactly one member can be configured to pay for query and job compute costs. An error is returned if the collaboration creator sets a <code>TRUE</code> value for more than one member in the collaboration.</p>
    /// <p>An error is returned if the collaboration creator sets a <code>FALSE</code> value for the member who can run queries and jobs.</p>
    pub fn is_responsible(&self) -> bool {
        self.is_responsible
    }
}
impl JobComputePaymentConfig {
    /// Creates a new builder-style object to manufacture [`JobComputePaymentConfig`](crate::types::JobComputePaymentConfig).
    pub fn builder() -> crate::types::builders::JobComputePaymentConfigBuilder {
        crate::types::builders::JobComputePaymentConfigBuilder::default()
    }
}

/// A builder for [`JobComputePaymentConfig`](crate::types::JobComputePaymentConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct JobComputePaymentConfigBuilder {
    pub(crate) is_responsible: ::std::option::Option<bool>,
}
impl JobComputePaymentConfigBuilder {
    /// <p>Indicates whether the collaboration creator has configured the collaboration member to pay for query and job compute costs (<code>TRUE</code>) or has not configured the collaboration member to pay for query and job compute costs (<code>FALSE</code>).</p>
    /// <p>Exactly one member can be configured to pay for query and job compute costs. An error is returned if the collaboration creator sets a <code>TRUE</code> value for more than one member in the collaboration.</p>
    /// <p>An error is returned if the collaboration creator sets a <code>FALSE</code> value for the member who can run queries and jobs.</p>
    /// This field is required.
    pub fn is_responsible(mut self, input: bool) -> Self {
        self.is_responsible = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the collaboration creator has configured the collaboration member to pay for query and job compute costs (<code>TRUE</code>) or has not configured the collaboration member to pay for query and job compute costs (<code>FALSE</code>).</p>
    /// <p>Exactly one member can be configured to pay for query and job compute costs. An error is returned if the collaboration creator sets a <code>TRUE</code> value for more than one member in the collaboration.</p>
    /// <p>An error is returned if the collaboration creator sets a <code>FALSE</code> value for the member who can run queries and jobs.</p>
    pub fn set_is_responsible(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_responsible = input;
        self
    }
    /// <p>Indicates whether the collaboration creator has configured the collaboration member to pay for query and job compute costs (<code>TRUE</code>) or has not configured the collaboration member to pay for query and job compute costs (<code>FALSE</code>).</p>
    /// <p>Exactly one member can be configured to pay for query and job compute costs. An error is returned if the collaboration creator sets a <code>TRUE</code> value for more than one member in the collaboration.</p>
    /// <p>An error is returned if the collaboration creator sets a <code>FALSE</code> value for the member who can run queries and jobs.</p>
    pub fn get_is_responsible(&self) -> &::std::option::Option<bool> {
        &self.is_responsible
    }
    /// Consumes the builder and constructs a [`JobComputePaymentConfig`](crate::types::JobComputePaymentConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`is_responsible`](crate::types::builders::JobComputePaymentConfigBuilder::is_responsible)
    pub fn build(self) -> ::std::result::Result<crate::types::JobComputePaymentConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::JobComputePaymentConfig {
            is_responsible: self.is_responsible.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "is_responsible",
                    "is_responsible was not specified but it is required when building JobComputePaymentConfig",
                )
            })?,
        })
    }
}
