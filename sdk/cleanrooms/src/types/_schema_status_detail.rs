// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the schema status.</p>
/// <p>A status of <code>READY</code> means that based on the schema analysis rule, queries of the given analysis rule type are properly configured to run queries on this schema.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SchemaStatusDetail {
    /// <p>The status of the schema, indicating if it is ready to query.</p>
    pub status: crate::types::SchemaStatus,
    /// <p>The reasons why the schema status is set to its current state.</p>
    pub reasons: ::std::option::Option<::std::vec::Vec<crate::types::SchemaStatusReason>>,
    /// <p>The analysis rule type for which the schema status has been evaluated.</p>
    pub analysis_rule_type: ::std::option::Option<crate::types::AnalysisRuleType>,
    /// <p>The configuration details of the schema analysis rule for the given type.</p>
    pub configurations: ::std::option::Option<::std::vec::Vec<crate::types::SchemaConfiguration>>,
    /// <p>The type of analysis that can be performed on the schema.</p>
    /// <p>A schema can have an <code>analysisType</code> of <code>DIRECT_ANALYSIS</code>, <code>ADDITIONAL_ANALYSIS_FOR_AUDIENCE_GENERATION</code>, or both.</p>
    pub analysis_type: crate::types::AnalysisType,
}
impl SchemaStatusDetail {
    /// <p>The status of the schema, indicating if it is ready to query.</p>
    pub fn status(&self) -> &crate::types::SchemaStatus {
        &self.status
    }
    /// <p>The reasons why the schema status is set to its current state.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.reasons.is_none()`.
    pub fn reasons(&self) -> &[crate::types::SchemaStatusReason] {
        self.reasons.as_deref().unwrap_or_default()
    }
    /// <p>The analysis rule type for which the schema status has been evaluated.</p>
    pub fn analysis_rule_type(&self) -> ::std::option::Option<&crate::types::AnalysisRuleType> {
        self.analysis_rule_type.as_ref()
    }
    /// <p>The configuration details of the schema analysis rule for the given type.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.configurations.is_none()`.
    pub fn configurations(&self) -> &[crate::types::SchemaConfiguration] {
        self.configurations.as_deref().unwrap_or_default()
    }
    /// <p>The type of analysis that can be performed on the schema.</p>
    /// <p>A schema can have an <code>analysisType</code> of <code>DIRECT_ANALYSIS</code>, <code>ADDITIONAL_ANALYSIS_FOR_AUDIENCE_GENERATION</code>, or both.</p>
    pub fn analysis_type(&self) -> &crate::types::AnalysisType {
        &self.analysis_type
    }
}
impl SchemaStatusDetail {
    /// Creates a new builder-style object to manufacture [`SchemaStatusDetail`](crate::types::SchemaStatusDetail).
    pub fn builder() -> crate::types::builders::SchemaStatusDetailBuilder {
        crate::types::builders::SchemaStatusDetailBuilder::default()
    }
}

/// A builder for [`SchemaStatusDetail`](crate::types::SchemaStatusDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SchemaStatusDetailBuilder {
    pub(crate) status: ::std::option::Option<crate::types::SchemaStatus>,
    pub(crate) reasons: ::std::option::Option<::std::vec::Vec<crate::types::SchemaStatusReason>>,
    pub(crate) analysis_rule_type: ::std::option::Option<crate::types::AnalysisRuleType>,
    pub(crate) configurations: ::std::option::Option<::std::vec::Vec<crate::types::SchemaConfiguration>>,
    pub(crate) analysis_type: ::std::option::Option<crate::types::AnalysisType>,
}
impl SchemaStatusDetailBuilder {
    /// <p>The status of the schema, indicating if it is ready to query.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::SchemaStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the schema, indicating if it is ready to query.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SchemaStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the schema, indicating if it is ready to query.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SchemaStatus> {
        &self.status
    }
    /// Appends an item to `reasons`.
    ///
    /// To override the contents of this collection use [`set_reasons`](Self::set_reasons).
    ///
    /// <p>The reasons why the schema status is set to its current state.</p>
    pub fn reasons(mut self, input: crate::types::SchemaStatusReason) -> Self {
        let mut v = self.reasons.unwrap_or_default();
        v.push(input);
        self.reasons = ::std::option::Option::Some(v);
        self
    }
    /// <p>The reasons why the schema status is set to its current state.</p>
    pub fn set_reasons(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SchemaStatusReason>>) -> Self {
        self.reasons = input;
        self
    }
    /// <p>The reasons why the schema status is set to its current state.</p>
    pub fn get_reasons(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SchemaStatusReason>> {
        &self.reasons
    }
    /// <p>The analysis rule type for which the schema status has been evaluated.</p>
    pub fn analysis_rule_type(mut self, input: crate::types::AnalysisRuleType) -> Self {
        self.analysis_rule_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The analysis rule type for which the schema status has been evaluated.</p>
    pub fn set_analysis_rule_type(mut self, input: ::std::option::Option<crate::types::AnalysisRuleType>) -> Self {
        self.analysis_rule_type = input;
        self
    }
    /// <p>The analysis rule type for which the schema status has been evaluated.</p>
    pub fn get_analysis_rule_type(&self) -> &::std::option::Option<crate::types::AnalysisRuleType> {
        &self.analysis_rule_type
    }
    /// Appends an item to `configurations`.
    ///
    /// To override the contents of this collection use [`set_configurations`](Self::set_configurations).
    ///
    /// <p>The configuration details of the schema analysis rule for the given type.</p>
    pub fn configurations(mut self, input: crate::types::SchemaConfiguration) -> Self {
        let mut v = self.configurations.unwrap_or_default();
        v.push(input);
        self.configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The configuration details of the schema analysis rule for the given type.</p>
    pub fn set_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SchemaConfiguration>>) -> Self {
        self.configurations = input;
        self
    }
    /// <p>The configuration details of the schema analysis rule for the given type.</p>
    pub fn get_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SchemaConfiguration>> {
        &self.configurations
    }
    /// <p>The type of analysis that can be performed on the schema.</p>
    /// <p>A schema can have an <code>analysisType</code> of <code>DIRECT_ANALYSIS</code>, <code>ADDITIONAL_ANALYSIS_FOR_AUDIENCE_GENERATION</code>, or both.</p>
    /// This field is required.
    pub fn analysis_type(mut self, input: crate::types::AnalysisType) -> Self {
        self.analysis_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of analysis that can be performed on the schema.</p>
    /// <p>A schema can have an <code>analysisType</code> of <code>DIRECT_ANALYSIS</code>, <code>ADDITIONAL_ANALYSIS_FOR_AUDIENCE_GENERATION</code>, or both.</p>
    pub fn set_analysis_type(mut self, input: ::std::option::Option<crate::types::AnalysisType>) -> Self {
        self.analysis_type = input;
        self
    }
    /// <p>The type of analysis that can be performed on the schema.</p>
    /// <p>A schema can have an <code>analysisType</code> of <code>DIRECT_ANALYSIS</code>, <code>ADDITIONAL_ANALYSIS_FOR_AUDIENCE_GENERATION</code>, or both.</p>
    pub fn get_analysis_type(&self) -> &::std::option::Option<crate::types::AnalysisType> {
        &self.analysis_type
    }
    /// Consumes the builder and constructs a [`SchemaStatusDetail`](crate::types::SchemaStatusDetail).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::types::builders::SchemaStatusDetailBuilder::status)
    /// - [`analysis_type`](crate::types::builders::SchemaStatusDetailBuilder::analysis_type)
    pub fn build(self) -> ::std::result::Result<crate::types::SchemaStatusDetail, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SchemaStatusDetail {
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building SchemaStatusDetail",
                )
            })?,
            reasons: self.reasons,
            analysis_rule_type: self.analysis_rule_type,
            configurations: self.configurations,
            analysis_type: self.analysis_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "analysis_type",
                    "analysis_type was not specified but it is required when building SchemaStatusDetail",
                )
            })?,
        })
    }
}
