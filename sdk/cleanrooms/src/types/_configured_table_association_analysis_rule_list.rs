// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configured table association analysis rule applied to a configured table with the list analysis rule.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfiguredTableAssociationAnalysisRuleList {
    /// <p>The list of collaboration members who are allowed to receive results of queries run with this configured table.</p>
    pub allowed_result_receivers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The list of resources or wildcards (ARNs) that are allowed to perform additional analysis on query output.</p>
    pub allowed_additional_analyses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ConfiguredTableAssociationAnalysisRuleList {
    /// <p>The list of collaboration members who are allowed to receive results of queries run with this configured table.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_result_receivers.is_none()`.
    pub fn allowed_result_receivers(&self) -> &[::std::string::String] {
        self.allowed_result_receivers.as_deref().unwrap_or_default()
    }
    /// <p>The list of resources or wildcards (ARNs) that are allowed to perform additional analysis on query output.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_additional_analyses.is_none()`.
    pub fn allowed_additional_analyses(&self) -> &[::std::string::String] {
        self.allowed_additional_analyses.as_deref().unwrap_or_default()
    }
}
impl ConfiguredTableAssociationAnalysisRuleList {
    /// Creates a new builder-style object to manufacture [`ConfiguredTableAssociationAnalysisRuleList`](crate::types::ConfiguredTableAssociationAnalysisRuleList).
    pub fn builder() -> crate::types::builders::ConfiguredTableAssociationAnalysisRuleListBuilder {
        crate::types::builders::ConfiguredTableAssociationAnalysisRuleListBuilder::default()
    }
}

/// A builder for [`ConfiguredTableAssociationAnalysisRuleList`](crate::types::ConfiguredTableAssociationAnalysisRuleList).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConfiguredTableAssociationAnalysisRuleListBuilder {
    pub(crate) allowed_result_receivers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) allowed_additional_analyses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ConfiguredTableAssociationAnalysisRuleListBuilder {
    /// Appends an item to `allowed_result_receivers`.
    ///
    /// To override the contents of this collection use [`set_allowed_result_receivers`](Self::set_allowed_result_receivers).
    ///
    /// <p>The list of collaboration members who are allowed to receive results of queries run with this configured table.</p>
    pub fn allowed_result_receivers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_result_receivers.unwrap_or_default();
        v.push(input.into());
        self.allowed_result_receivers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of collaboration members who are allowed to receive results of queries run with this configured table.</p>
    pub fn set_allowed_result_receivers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allowed_result_receivers = input;
        self
    }
    /// <p>The list of collaboration members who are allowed to receive results of queries run with this configured table.</p>
    pub fn get_allowed_result_receivers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allowed_result_receivers
    }
    /// Appends an item to `allowed_additional_analyses`.
    ///
    /// To override the contents of this collection use [`set_allowed_additional_analyses`](Self::set_allowed_additional_analyses).
    ///
    /// <p>The list of resources or wildcards (ARNs) that are allowed to perform additional analysis on query output.</p>
    pub fn allowed_additional_analyses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_additional_analyses.unwrap_or_default();
        v.push(input.into());
        self.allowed_additional_analyses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of resources or wildcards (ARNs) that are allowed to perform additional analysis on query output.</p>
    pub fn set_allowed_additional_analyses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allowed_additional_analyses = input;
        self
    }
    /// <p>The list of resources or wildcards (ARNs) that are allowed to perform additional analysis on query output.</p>
    pub fn get_allowed_additional_analyses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allowed_additional_analyses
    }
    /// Consumes the builder and constructs a [`ConfiguredTableAssociationAnalysisRuleList`](crate::types::ConfiguredTableAssociationAnalysisRuleList).
    pub fn build(self) -> crate::types::ConfiguredTableAssociationAnalysisRuleList {
        crate::types::ConfiguredTableAssociationAnalysisRuleList {
            allowed_result_receivers: self.allowed_result_receivers,
            allowed_additional_analyses: self.allowed_additional_analyses,
        }
    }
}
