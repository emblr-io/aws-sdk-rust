// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the input reference configuration for the ID mapping table.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IdMappingTableInputReferenceConfig {
    /// <p>The Amazon Resource Name (ARN) of the referenced resource in Entity Resolution. Valid values are ID mapping workflow ARNs.</p>
    pub input_reference_arn: ::std::string::String,
    /// <p>When <code>TRUE</code>, Clean Rooms manages permissions for the ID mapping table resource.</p>
    /// <p>When <code>FALSE</code>, the resource owner manages permissions for the ID mapping table resource.</p>
    pub manage_resource_policies: bool,
}
impl IdMappingTableInputReferenceConfig {
    /// <p>The Amazon Resource Name (ARN) of the referenced resource in Entity Resolution. Valid values are ID mapping workflow ARNs.</p>
    pub fn input_reference_arn(&self) -> &str {
        use std::ops::Deref;
        self.input_reference_arn.deref()
    }
    /// <p>When <code>TRUE</code>, Clean Rooms manages permissions for the ID mapping table resource.</p>
    /// <p>When <code>FALSE</code>, the resource owner manages permissions for the ID mapping table resource.</p>
    pub fn manage_resource_policies(&self) -> bool {
        self.manage_resource_policies
    }
}
impl IdMappingTableInputReferenceConfig {
    /// Creates a new builder-style object to manufacture [`IdMappingTableInputReferenceConfig`](crate::types::IdMappingTableInputReferenceConfig).
    pub fn builder() -> crate::types::builders::IdMappingTableInputReferenceConfigBuilder {
        crate::types::builders::IdMappingTableInputReferenceConfigBuilder::default()
    }
}

/// A builder for [`IdMappingTableInputReferenceConfig`](crate::types::IdMappingTableInputReferenceConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IdMappingTableInputReferenceConfigBuilder {
    pub(crate) input_reference_arn: ::std::option::Option<::std::string::String>,
    pub(crate) manage_resource_policies: ::std::option::Option<bool>,
}
impl IdMappingTableInputReferenceConfigBuilder {
    /// <p>The Amazon Resource Name (ARN) of the referenced resource in Entity Resolution. Valid values are ID mapping workflow ARNs.</p>
    /// This field is required.
    pub fn input_reference_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_reference_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the referenced resource in Entity Resolution. Valid values are ID mapping workflow ARNs.</p>
    pub fn set_input_reference_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_reference_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the referenced resource in Entity Resolution. Valid values are ID mapping workflow ARNs.</p>
    pub fn get_input_reference_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_reference_arn
    }
    /// <p>When <code>TRUE</code>, Clean Rooms manages permissions for the ID mapping table resource.</p>
    /// <p>When <code>FALSE</code>, the resource owner manages permissions for the ID mapping table resource.</p>
    /// This field is required.
    pub fn manage_resource_policies(mut self, input: bool) -> Self {
        self.manage_resource_policies = ::std::option::Option::Some(input);
        self
    }
    /// <p>When <code>TRUE</code>, Clean Rooms manages permissions for the ID mapping table resource.</p>
    /// <p>When <code>FALSE</code>, the resource owner manages permissions for the ID mapping table resource.</p>
    pub fn set_manage_resource_policies(mut self, input: ::std::option::Option<bool>) -> Self {
        self.manage_resource_policies = input;
        self
    }
    /// <p>When <code>TRUE</code>, Clean Rooms manages permissions for the ID mapping table resource.</p>
    /// <p>When <code>FALSE</code>, the resource owner manages permissions for the ID mapping table resource.</p>
    pub fn get_manage_resource_policies(&self) -> &::std::option::Option<bool> {
        &self.manage_resource_policies
    }
    /// Consumes the builder and constructs a [`IdMappingTableInputReferenceConfig`](crate::types::IdMappingTableInputReferenceConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`input_reference_arn`](crate::types::builders::IdMappingTableInputReferenceConfigBuilder::input_reference_arn)
    /// - [`manage_resource_policies`](crate::types::builders::IdMappingTableInputReferenceConfigBuilder::manage_resource_policies)
    pub fn build(self) -> ::std::result::Result<crate::types::IdMappingTableInputReferenceConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IdMappingTableInputReferenceConfig {
            input_reference_arn: self.input_reference_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "input_reference_arn",
                    "input_reference_arn was not specified but it is required when building IdMappingTableInputReferenceConfig",
                )
            })?,
            manage_resource_policies: self.manage_resource_policies.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "manage_resource_policies",
                    "manage_resource_policies was not specified but it is required when building IdMappingTableInputReferenceConfig",
                )
            })?,
        })
    }
}
