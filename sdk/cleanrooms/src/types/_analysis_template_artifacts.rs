// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The analysis template artifacts.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalysisTemplateArtifacts {
    /// <p>The entry point for the analysis template artifacts.</p>
    pub entry_point: ::std::option::Option<crate::types::AnalysisTemplateArtifact>,
    /// <p>Additional artifacts for the analysis template.</p>
    pub additional_artifacts: ::std::option::Option<::std::vec::Vec<crate::types::AnalysisTemplateArtifact>>,
    /// <p>The role ARN for the analysis template artifacts.</p>
    pub role_arn: ::std::string::String,
}
impl AnalysisTemplateArtifacts {
    /// <p>The entry point for the analysis template artifacts.</p>
    pub fn entry_point(&self) -> ::std::option::Option<&crate::types::AnalysisTemplateArtifact> {
        self.entry_point.as_ref()
    }
    /// <p>Additional artifacts for the analysis template.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.additional_artifacts.is_none()`.
    pub fn additional_artifacts(&self) -> &[crate::types::AnalysisTemplateArtifact] {
        self.additional_artifacts.as_deref().unwrap_or_default()
    }
    /// <p>The role ARN for the analysis template artifacts.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
}
impl AnalysisTemplateArtifacts {
    /// Creates a new builder-style object to manufacture [`AnalysisTemplateArtifacts`](crate::types::AnalysisTemplateArtifacts).
    pub fn builder() -> crate::types::builders::AnalysisTemplateArtifactsBuilder {
        crate::types::builders::AnalysisTemplateArtifactsBuilder::default()
    }
}

/// A builder for [`AnalysisTemplateArtifacts`](crate::types::AnalysisTemplateArtifacts).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AnalysisTemplateArtifactsBuilder {
    pub(crate) entry_point: ::std::option::Option<crate::types::AnalysisTemplateArtifact>,
    pub(crate) additional_artifacts: ::std::option::Option<::std::vec::Vec<crate::types::AnalysisTemplateArtifact>>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
}
impl AnalysisTemplateArtifactsBuilder {
    /// <p>The entry point for the analysis template artifacts.</p>
    /// This field is required.
    pub fn entry_point(mut self, input: crate::types::AnalysisTemplateArtifact) -> Self {
        self.entry_point = ::std::option::Option::Some(input);
        self
    }
    /// <p>The entry point for the analysis template artifacts.</p>
    pub fn set_entry_point(mut self, input: ::std::option::Option<crate::types::AnalysisTemplateArtifact>) -> Self {
        self.entry_point = input;
        self
    }
    /// <p>The entry point for the analysis template artifacts.</p>
    pub fn get_entry_point(&self) -> &::std::option::Option<crate::types::AnalysisTemplateArtifact> {
        &self.entry_point
    }
    /// Appends an item to `additional_artifacts`.
    ///
    /// To override the contents of this collection use [`set_additional_artifacts`](Self::set_additional_artifacts).
    ///
    /// <p>Additional artifacts for the analysis template.</p>
    pub fn additional_artifacts(mut self, input: crate::types::AnalysisTemplateArtifact) -> Self {
        let mut v = self.additional_artifacts.unwrap_or_default();
        v.push(input);
        self.additional_artifacts = ::std::option::Option::Some(v);
        self
    }
    /// <p>Additional artifacts for the analysis template.</p>
    pub fn set_additional_artifacts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AnalysisTemplateArtifact>>) -> Self {
        self.additional_artifacts = input;
        self
    }
    /// <p>Additional artifacts for the analysis template.</p>
    pub fn get_additional_artifacts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AnalysisTemplateArtifact>> {
        &self.additional_artifacts
    }
    /// <p>The role ARN for the analysis template artifacts.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The role ARN for the analysis template artifacts.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The role ARN for the analysis template artifacts.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Consumes the builder and constructs a [`AnalysisTemplateArtifacts`](crate::types::AnalysisTemplateArtifacts).
    /// This method will fail if any of the following fields are not set:
    /// - [`role_arn`](crate::types::builders::AnalysisTemplateArtifactsBuilder::role_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::AnalysisTemplateArtifacts, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AnalysisTemplateArtifacts {
            entry_point: self.entry_point,
            additional_artifacts: self.additional_artifacts,
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building AnalysisTemplateArtifacts",
                )
            })?,
        })
    }
}
