// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the configuration for distributing protected query results to multiple receivers, including S3 and collaboration members.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProtectedQueryDistributeOutputConfiguration {
    /// <p>A list of locations where you want to distribute the protected query results. Each location must specify either an S3 destination or a collaboration member destination.</p><important>
    /// <p>You can't specify more than one S3 location.</p>
    /// <p>You can't specify the query runner's account as a member location.</p>
    /// <p>You must include either an S3 or member output configuration for each location, but not both.</p>
    /// </important>
    pub locations: ::std::vec::Vec<crate::types::ProtectedQueryDistributeOutputConfigurationLocation>,
}
impl ProtectedQueryDistributeOutputConfiguration {
    /// <p>A list of locations where you want to distribute the protected query results. Each location must specify either an S3 destination or a collaboration member destination.</p><important>
    /// <p>You can't specify more than one S3 location.</p>
    /// <p>You can't specify the query runner's account as a member location.</p>
    /// <p>You must include either an S3 or member output configuration for each location, but not both.</p>
    /// </important>
    pub fn locations(&self) -> &[crate::types::ProtectedQueryDistributeOutputConfigurationLocation] {
        use std::ops::Deref;
        self.locations.deref()
    }
}
impl ProtectedQueryDistributeOutputConfiguration {
    /// Creates a new builder-style object to manufacture [`ProtectedQueryDistributeOutputConfiguration`](crate::types::ProtectedQueryDistributeOutputConfiguration).
    pub fn builder() -> crate::types::builders::ProtectedQueryDistributeOutputConfigurationBuilder {
        crate::types::builders::ProtectedQueryDistributeOutputConfigurationBuilder::default()
    }
}

/// A builder for [`ProtectedQueryDistributeOutputConfiguration`](crate::types::ProtectedQueryDistributeOutputConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProtectedQueryDistributeOutputConfigurationBuilder {
    pub(crate) locations: ::std::option::Option<::std::vec::Vec<crate::types::ProtectedQueryDistributeOutputConfigurationLocation>>,
}
impl ProtectedQueryDistributeOutputConfigurationBuilder {
    /// Appends an item to `locations`.
    ///
    /// To override the contents of this collection use [`set_locations`](Self::set_locations).
    ///
    /// <p>A list of locations where you want to distribute the protected query results. Each location must specify either an S3 destination or a collaboration member destination.</p><important>
    /// <p>You can't specify more than one S3 location.</p>
    /// <p>You can't specify the query runner's account as a member location.</p>
    /// <p>You must include either an S3 or member output configuration for each location, but not both.</p>
    /// </important>
    pub fn locations(mut self, input: crate::types::ProtectedQueryDistributeOutputConfigurationLocation) -> Self {
        let mut v = self.locations.unwrap_or_default();
        v.push(input);
        self.locations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of locations where you want to distribute the protected query results. Each location must specify either an S3 destination or a collaboration member destination.</p><important>
    /// <p>You can't specify more than one S3 location.</p>
    /// <p>You can't specify the query runner's account as a member location.</p>
    /// <p>You must include either an S3 or member output configuration for each location, but not both.</p>
    /// </important>
    pub fn set_locations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ProtectedQueryDistributeOutputConfigurationLocation>>,
    ) -> Self {
        self.locations = input;
        self
    }
    /// <p>A list of locations where you want to distribute the protected query results. Each location must specify either an S3 destination or a collaboration member destination.</p><important>
    /// <p>You can't specify more than one S3 location.</p>
    /// <p>You can't specify the query runner's account as a member location.</p>
    /// <p>You must include either an S3 or member output configuration for each location, but not both.</p>
    /// </important>
    pub fn get_locations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProtectedQueryDistributeOutputConfigurationLocation>> {
        &self.locations
    }
    /// Consumes the builder and constructs a [`ProtectedQueryDistributeOutputConfiguration`](crate::types::ProtectedQueryDistributeOutputConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`locations`](crate::types::builders::ProtectedQueryDistributeOutputConfigurationBuilder::locations)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ProtectedQueryDistributeOutputConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ProtectedQueryDistributeOutputConfiguration {
            locations: self.locations.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "locations",
                    "locations was not specified but it is required when building ProtectedQueryDistributeOutputConfiguration",
                )
            })?,
        })
    }
}
