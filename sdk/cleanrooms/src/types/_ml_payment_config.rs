// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing the collaboration member's machine learning payment responsibilities set by the collaboration creator.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MlPaymentConfig {
    /// <p>The payment responsibilities accepted by the member for model training.</p>
    pub model_training: ::std::option::Option<crate::types::ModelTrainingPaymentConfig>,
    /// <p>The payment responsibilities accepted by the member for model inference.</p>
    pub model_inference: ::std::option::Option<crate::types::ModelInferencePaymentConfig>,
}
impl MlPaymentConfig {
    /// <p>The payment responsibilities accepted by the member for model training.</p>
    pub fn model_training(&self) -> ::std::option::Option<&crate::types::ModelTrainingPaymentConfig> {
        self.model_training.as_ref()
    }
    /// <p>The payment responsibilities accepted by the member for model inference.</p>
    pub fn model_inference(&self) -> ::std::option::Option<&crate::types::ModelInferencePaymentConfig> {
        self.model_inference.as_ref()
    }
}
impl MlPaymentConfig {
    /// Creates a new builder-style object to manufacture [`MlPaymentConfig`](crate::types::MlPaymentConfig).
    pub fn builder() -> crate::types::builders::MlPaymentConfigBuilder {
        crate::types::builders::MlPaymentConfigBuilder::default()
    }
}

/// A builder for [`MlPaymentConfig`](crate::types::MlPaymentConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MlPaymentConfigBuilder {
    pub(crate) model_training: ::std::option::Option<crate::types::ModelTrainingPaymentConfig>,
    pub(crate) model_inference: ::std::option::Option<crate::types::ModelInferencePaymentConfig>,
}
impl MlPaymentConfigBuilder {
    /// <p>The payment responsibilities accepted by the member for model training.</p>
    pub fn model_training(mut self, input: crate::types::ModelTrainingPaymentConfig) -> Self {
        self.model_training = ::std::option::Option::Some(input);
        self
    }
    /// <p>The payment responsibilities accepted by the member for model training.</p>
    pub fn set_model_training(mut self, input: ::std::option::Option<crate::types::ModelTrainingPaymentConfig>) -> Self {
        self.model_training = input;
        self
    }
    /// <p>The payment responsibilities accepted by the member for model training.</p>
    pub fn get_model_training(&self) -> &::std::option::Option<crate::types::ModelTrainingPaymentConfig> {
        &self.model_training
    }
    /// <p>The payment responsibilities accepted by the member for model inference.</p>
    pub fn model_inference(mut self, input: crate::types::ModelInferencePaymentConfig) -> Self {
        self.model_inference = ::std::option::Option::Some(input);
        self
    }
    /// <p>The payment responsibilities accepted by the member for model inference.</p>
    pub fn set_model_inference(mut self, input: ::std::option::Option<crate::types::ModelInferencePaymentConfig>) -> Self {
        self.model_inference = input;
        self
    }
    /// <p>The payment responsibilities accepted by the member for model inference.</p>
    pub fn get_model_inference(&self) -> &::std::option::Option<crate::types::ModelInferencePaymentConfig> {
        &self.model_inference
    }
    /// Consumes the builder and constructs a [`MlPaymentConfig`](crate::types::MlPaymentConfig).
    pub fn build(self) -> crate::types::MlPaymentConfig {
        crate::types::MlPaymentConfig {
            model_training: self.model_training,
            model_inference: self.model_inference,
        }
    }
}
