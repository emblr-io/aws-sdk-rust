// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A reference to a table within Snowflake.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SnowflakeTableReference {
    /// <p>The secret ARN of the Snowflake table reference.</p>
    pub secret_arn: ::std::string::String,
    /// <p>The account identifier for the Snowflake table reference.</p>
    pub account_identifier: ::std::string::String,
    /// <p>The name of the database the Snowflake table belongs to.</p>
    pub database_name: ::std::string::String,
    /// <p>The name of the Snowflake table.</p>
    pub table_name: ::std::string::String,
    /// <p>The schema name of the Snowflake table reference.</p>
    pub schema_name: ::std::string::String,
    /// <p>The schema of the Snowflake table.</p>
    pub table_schema: ::std::option::Option<crate::types::SnowflakeTableSchema>,
}
impl SnowflakeTableReference {
    /// <p>The secret ARN of the Snowflake table reference.</p>
    pub fn secret_arn(&self) -> &str {
        use std::ops::Deref;
        self.secret_arn.deref()
    }
    /// <p>The account identifier for the Snowflake table reference.</p>
    pub fn account_identifier(&self) -> &str {
        use std::ops::Deref;
        self.account_identifier.deref()
    }
    /// <p>The name of the database the Snowflake table belongs to.</p>
    pub fn database_name(&self) -> &str {
        use std::ops::Deref;
        self.database_name.deref()
    }
    /// <p>The name of the Snowflake table.</p>
    pub fn table_name(&self) -> &str {
        use std::ops::Deref;
        self.table_name.deref()
    }
    /// <p>The schema name of the Snowflake table reference.</p>
    pub fn schema_name(&self) -> &str {
        use std::ops::Deref;
        self.schema_name.deref()
    }
    /// <p>The schema of the Snowflake table.</p>
    pub fn table_schema(&self) -> ::std::option::Option<&crate::types::SnowflakeTableSchema> {
        self.table_schema.as_ref()
    }
}
impl SnowflakeTableReference {
    /// Creates a new builder-style object to manufacture [`SnowflakeTableReference`](crate::types::SnowflakeTableReference).
    pub fn builder() -> crate::types::builders::SnowflakeTableReferenceBuilder {
        crate::types::builders::SnowflakeTableReferenceBuilder::default()
    }
}

/// A builder for [`SnowflakeTableReference`](crate::types::SnowflakeTableReference).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SnowflakeTableReferenceBuilder {
    pub(crate) secret_arn: ::std::option::Option<::std::string::String>,
    pub(crate) account_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
    pub(crate) schema_name: ::std::option::Option<::std::string::String>,
    pub(crate) table_schema: ::std::option::Option<crate::types::SnowflakeTableSchema>,
}
impl SnowflakeTableReferenceBuilder {
    /// <p>The secret ARN of the Snowflake table reference.</p>
    /// This field is required.
    pub fn secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The secret ARN of the Snowflake table reference.</p>
    pub fn set_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_arn = input;
        self
    }
    /// <p>The secret ARN of the Snowflake table reference.</p>
    pub fn get_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_arn
    }
    /// <p>The account identifier for the Snowflake table reference.</p>
    /// This field is required.
    pub fn account_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account identifier for the Snowflake table reference.</p>
    pub fn set_account_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_identifier = input;
        self
    }
    /// <p>The account identifier for the Snowflake table reference.</p>
    pub fn get_account_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_identifier
    }
    /// <p>The name of the database the Snowflake table belongs to.</p>
    /// This field is required.
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database the Snowflake table belongs to.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The name of the database the Snowflake table belongs to.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The name of the Snowflake table.</p>
    /// This field is required.
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Snowflake table.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>The name of the Snowflake table.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// <p>The schema name of the Snowflake table reference.</p>
    /// This field is required.
    pub fn schema_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schema_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The schema name of the Snowflake table reference.</p>
    pub fn set_schema_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schema_name = input;
        self
    }
    /// <p>The schema name of the Snowflake table reference.</p>
    pub fn get_schema_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.schema_name
    }
    /// <p>The schema of the Snowflake table.</p>
    /// This field is required.
    pub fn table_schema(mut self, input: crate::types::SnowflakeTableSchema) -> Self {
        self.table_schema = ::std::option::Option::Some(input);
        self
    }
    /// <p>The schema of the Snowflake table.</p>
    pub fn set_table_schema(mut self, input: ::std::option::Option<crate::types::SnowflakeTableSchema>) -> Self {
        self.table_schema = input;
        self
    }
    /// <p>The schema of the Snowflake table.</p>
    pub fn get_table_schema(&self) -> &::std::option::Option<crate::types::SnowflakeTableSchema> {
        &self.table_schema
    }
    /// Consumes the builder and constructs a [`SnowflakeTableReference`](crate::types::SnowflakeTableReference).
    /// This method will fail if any of the following fields are not set:
    /// - [`secret_arn`](crate::types::builders::SnowflakeTableReferenceBuilder::secret_arn)
    /// - [`account_identifier`](crate::types::builders::SnowflakeTableReferenceBuilder::account_identifier)
    /// - [`database_name`](crate::types::builders::SnowflakeTableReferenceBuilder::database_name)
    /// - [`table_name`](crate::types::builders::SnowflakeTableReferenceBuilder::table_name)
    /// - [`schema_name`](crate::types::builders::SnowflakeTableReferenceBuilder::schema_name)
    pub fn build(self) -> ::std::result::Result<crate::types::SnowflakeTableReference, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SnowflakeTableReference {
            secret_arn: self.secret_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "secret_arn",
                    "secret_arn was not specified but it is required when building SnowflakeTableReference",
                )
            })?,
            account_identifier: self.account_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "account_identifier",
                    "account_identifier was not specified but it is required when building SnowflakeTableReference",
                )
            })?,
            database_name: self.database_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "database_name",
                    "database_name was not specified but it is required when building SnowflakeTableReference",
                )
            })?,
            table_name: self.table_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "table_name",
                    "table_name was not specified but it is required when building SnowflakeTableReference",
                )
            })?,
            schema_name: self.schema_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "schema_name",
                    "schema_name was not specified but it is required when building SnowflakeTableReference",
                )
            })?,
            table_schema: self.table_schema,
        })
    }
}
