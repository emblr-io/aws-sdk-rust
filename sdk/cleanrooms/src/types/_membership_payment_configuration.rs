// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing the payment responsibilities accepted by the collaboration member.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MembershipPaymentConfiguration {
    /// <p>The payment responsibilities accepted by the collaboration member for query compute costs.</p>
    pub query_compute: ::std::option::Option<crate::types::MembershipQueryComputePaymentConfig>,
    /// <p>The payment responsibilities accepted by the collaboration member for machine learning costs.</p>
    pub machine_learning: ::std::option::Option<crate::types::MembershipMlPaymentConfig>,
    /// <p>The payment responsibilities accepted by the collaboration member for job compute costs.</p>
    pub job_compute: ::std::option::Option<crate::types::MembershipJobComputePaymentConfig>,
}
impl MembershipPaymentConfiguration {
    /// <p>The payment responsibilities accepted by the collaboration member for query compute costs.</p>
    pub fn query_compute(&self) -> ::std::option::Option<&crate::types::MembershipQueryComputePaymentConfig> {
        self.query_compute.as_ref()
    }
    /// <p>The payment responsibilities accepted by the collaboration member for machine learning costs.</p>
    pub fn machine_learning(&self) -> ::std::option::Option<&crate::types::MembershipMlPaymentConfig> {
        self.machine_learning.as_ref()
    }
    /// <p>The payment responsibilities accepted by the collaboration member for job compute costs.</p>
    pub fn job_compute(&self) -> ::std::option::Option<&crate::types::MembershipJobComputePaymentConfig> {
        self.job_compute.as_ref()
    }
}
impl MembershipPaymentConfiguration {
    /// Creates a new builder-style object to manufacture [`MembershipPaymentConfiguration`](crate::types::MembershipPaymentConfiguration).
    pub fn builder() -> crate::types::builders::MembershipPaymentConfigurationBuilder {
        crate::types::builders::MembershipPaymentConfigurationBuilder::default()
    }
}

/// A builder for [`MembershipPaymentConfiguration`](crate::types::MembershipPaymentConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MembershipPaymentConfigurationBuilder {
    pub(crate) query_compute: ::std::option::Option<crate::types::MembershipQueryComputePaymentConfig>,
    pub(crate) machine_learning: ::std::option::Option<crate::types::MembershipMlPaymentConfig>,
    pub(crate) job_compute: ::std::option::Option<crate::types::MembershipJobComputePaymentConfig>,
}
impl MembershipPaymentConfigurationBuilder {
    /// <p>The payment responsibilities accepted by the collaboration member for query compute costs.</p>
    /// This field is required.
    pub fn query_compute(mut self, input: crate::types::MembershipQueryComputePaymentConfig) -> Self {
        self.query_compute = ::std::option::Option::Some(input);
        self
    }
    /// <p>The payment responsibilities accepted by the collaboration member for query compute costs.</p>
    pub fn set_query_compute(mut self, input: ::std::option::Option<crate::types::MembershipQueryComputePaymentConfig>) -> Self {
        self.query_compute = input;
        self
    }
    /// <p>The payment responsibilities accepted by the collaboration member for query compute costs.</p>
    pub fn get_query_compute(&self) -> &::std::option::Option<crate::types::MembershipQueryComputePaymentConfig> {
        &self.query_compute
    }
    /// <p>The payment responsibilities accepted by the collaboration member for machine learning costs.</p>
    pub fn machine_learning(mut self, input: crate::types::MembershipMlPaymentConfig) -> Self {
        self.machine_learning = ::std::option::Option::Some(input);
        self
    }
    /// <p>The payment responsibilities accepted by the collaboration member for machine learning costs.</p>
    pub fn set_machine_learning(mut self, input: ::std::option::Option<crate::types::MembershipMlPaymentConfig>) -> Self {
        self.machine_learning = input;
        self
    }
    /// <p>The payment responsibilities accepted by the collaboration member for machine learning costs.</p>
    pub fn get_machine_learning(&self) -> &::std::option::Option<crate::types::MembershipMlPaymentConfig> {
        &self.machine_learning
    }
    /// <p>The payment responsibilities accepted by the collaboration member for job compute costs.</p>
    pub fn job_compute(mut self, input: crate::types::MembershipJobComputePaymentConfig) -> Self {
        self.job_compute = ::std::option::Option::Some(input);
        self
    }
    /// <p>The payment responsibilities accepted by the collaboration member for job compute costs.</p>
    pub fn set_job_compute(mut self, input: ::std::option::Option<crate::types::MembershipJobComputePaymentConfig>) -> Self {
        self.job_compute = input;
        self
    }
    /// <p>The payment responsibilities accepted by the collaboration member for job compute costs.</p>
    pub fn get_job_compute(&self) -> &::std::option::Option<crate::types::MembershipJobComputePaymentConfig> {
        &self.job_compute
    }
    /// Consumes the builder and constructs a [`MembershipPaymentConfiguration`](crate::types::MembershipPaymentConfiguration).
    pub fn build(self) -> crate::types::MembershipPaymentConfiguration {
        crate::types::MembershipPaymentConfiguration {
            query_compute: self.query_compute,
            machine_learning: self.machine_learning,
            job_compute: self.job_compute,
        }
    }
}
