// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configured table summary for the objects listed by the request.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfiguredTableSummary {
    /// <p>The unique ID of the configured table.</p>
    pub id: ::std::string::String,
    /// <p>The unique ARN of the configured table.</p>
    pub arn: ::std::string::String,
    /// <p>The name of the configured table.</p>
    pub name: ::std::string::String,
    /// <p>The time the configured table was created.</p>
    pub create_time: ::aws_smithy_types::DateTime,
    /// <p>The time the configured table was last updated.</p>
    pub update_time: ::aws_smithy_types::DateTime,
    /// <p>The types of analysis rules associated with this configured table.</p>
    pub analysis_rule_types: ::std::vec::Vec<crate::types::ConfiguredTableAnalysisRuleType>,
    /// <p>The analysis method for the configured tables.</p>
    /// <p><code>DIRECT_QUERY</code> allows SQL queries to be run directly on this table.</p>
    /// <p><code>DIRECT_JOB</code> allows PySpark jobs to be run directly on this table.</p>
    /// <p><code>MULTIPLE</code> allows both SQL queries and PySpark jobs to be run directly on this table.</p>
    pub analysis_method: crate::types::AnalysisMethod,
    /// <p>The selected analysis methods for the configured table summary.</p>
    pub selected_analysis_methods: ::std::option::Option<::std::vec::Vec<crate::types::SelectedAnalysisMethod>>,
}
impl ConfiguredTableSummary {
    /// <p>The unique ID of the configured table.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The unique ARN of the configured table.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The name of the configured table.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The time the configured table was created.</p>
    pub fn create_time(&self) -> &::aws_smithy_types::DateTime {
        &self.create_time
    }
    /// <p>The time the configured table was last updated.</p>
    pub fn update_time(&self) -> &::aws_smithy_types::DateTime {
        &self.update_time
    }
    /// <p>The types of analysis rules associated with this configured table.</p>
    pub fn analysis_rule_types(&self) -> &[crate::types::ConfiguredTableAnalysisRuleType] {
        use std::ops::Deref;
        self.analysis_rule_types.deref()
    }
    /// <p>The analysis method for the configured tables.</p>
    /// <p><code>DIRECT_QUERY</code> allows SQL queries to be run directly on this table.</p>
    /// <p><code>DIRECT_JOB</code> allows PySpark jobs to be run directly on this table.</p>
    /// <p><code>MULTIPLE</code> allows both SQL queries and PySpark jobs to be run directly on this table.</p>
    pub fn analysis_method(&self) -> &crate::types::AnalysisMethod {
        &self.analysis_method
    }
    /// <p>The selected analysis methods for the configured table summary.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.selected_analysis_methods.is_none()`.
    pub fn selected_analysis_methods(&self) -> &[crate::types::SelectedAnalysisMethod] {
        self.selected_analysis_methods.as_deref().unwrap_or_default()
    }
}
impl ConfiguredTableSummary {
    /// Creates a new builder-style object to manufacture [`ConfiguredTableSummary`](crate::types::ConfiguredTableSummary).
    pub fn builder() -> crate::types::builders::ConfiguredTableSummaryBuilder {
        crate::types::builders::ConfiguredTableSummaryBuilder::default()
    }
}

/// A builder for [`ConfiguredTableSummary`](crate::types::ConfiguredTableSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConfiguredTableSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) analysis_rule_types: ::std::option::Option<::std::vec::Vec<crate::types::ConfiguredTableAnalysisRuleType>>,
    pub(crate) analysis_method: ::std::option::Option<crate::types::AnalysisMethod>,
    pub(crate) selected_analysis_methods: ::std::option::Option<::std::vec::Vec<crate::types::SelectedAnalysisMethod>>,
}
impl ConfiguredTableSummaryBuilder {
    /// <p>The unique ID of the configured table.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the configured table.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique ID of the configured table.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The unique ARN of the configured table.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ARN of the configured table.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The unique ARN of the configured table.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the configured table.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the configured table.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the configured table.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The time the configured table was created.</p>
    /// This field is required.
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the configured table was created.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time the configured table was created.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The time the configured table was last updated.</p>
    /// This field is required.
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the configured table was last updated.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The time the configured table was last updated.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// Appends an item to `analysis_rule_types`.
    ///
    /// To override the contents of this collection use [`set_analysis_rule_types`](Self::set_analysis_rule_types).
    ///
    /// <p>The types of analysis rules associated with this configured table.</p>
    pub fn analysis_rule_types(mut self, input: crate::types::ConfiguredTableAnalysisRuleType) -> Self {
        let mut v = self.analysis_rule_types.unwrap_or_default();
        v.push(input);
        self.analysis_rule_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The types of analysis rules associated with this configured table.</p>
    pub fn set_analysis_rule_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ConfiguredTableAnalysisRuleType>>) -> Self {
        self.analysis_rule_types = input;
        self
    }
    /// <p>The types of analysis rules associated with this configured table.</p>
    pub fn get_analysis_rule_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ConfiguredTableAnalysisRuleType>> {
        &self.analysis_rule_types
    }
    /// <p>The analysis method for the configured tables.</p>
    /// <p><code>DIRECT_QUERY</code> allows SQL queries to be run directly on this table.</p>
    /// <p><code>DIRECT_JOB</code> allows PySpark jobs to be run directly on this table.</p>
    /// <p><code>MULTIPLE</code> allows both SQL queries and PySpark jobs to be run directly on this table.</p>
    /// This field is required.
    pub fn analysis_method(mut self, input: crate::types::AnalysisMethod) -> Self {
        self.analysis_method = ::std::option::Option::Some(input);
        self
    }
    /// <p>The analysis method for the configured tables.</p>
    /// <p><code>DIRECT_QUERY</code> allows SQL queries to be run directly on this table.</p>
    /// <p><code>DIRECT_JOB</code> allows PySpark jobs to be run directly on this table.</p>
    /// <p><code>MULTIPLE</code> allows both SQL queries and PySpark jobs to be run directly on this table.</p>
    pub fn set_analysis_method(mut self, input: ::std::option::Option<crate::types::AnalysisMethod>) -> Self {
        self.analysis_method = input;
        self
    }
    /// <p>The analysis method for the configured tables.</p>
    /// <p><code>DIRECT_QUERY</code> allows SQL queries to be run directly on this table.</p>
    /// <p><code>DIRECT_JOB</code> allows PySpark jobs to be run directly on this table.</p>
    /// <p><code>MULTIPLE</code> allows both SQL queries and PySpark jobs to be run directly on this table.</p>
    pub fn get_analysis_method(&self) -> &::std::option::Option<crate::types::AnalysisMethod> {
        &self.analysis_method
    }
    /// Appends an item to `selected_analysis_methods`.
    ///
    /// To override the contents of this collection use [`set_selected_analysis_methods`](Self::set_selected_analysis_methods).
    ///
    /// <p>The selected analysis methods for the configured table summary.</p>
    pub fn selected_analysis_methods(mut self, input: crate::types::SelectedAnalysisMethod) -> Self {
        let mut v = self.selected_analysis_methods.unwrap_or_default();
        v.push(input);
        self.selected_analysis_methods = ::std::option::Option::Some(v);
        self
    }
    /// <p>The selected analysis methods for the configured table summary.</p>
    pub fn set_selected_analysis_methods(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SelectedAnalysisMethod>>) -> Self {
        self.selected_analysis_methods = input;
        self
    }
    /// <p>The selected analysis methods for the configured table summary.</p>
    pub fn get_selected_analysis_methods(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SelectedAnalysisMethod>> {
        &self.selected_analysis_methods
    }
    /// Consumes the builder and constructs a [`ConfiguredTableSummary`](crate::types::ConfiguredTableSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::ConfiguredTableSummaryBuilder::id)
    /// - [`arn`](crate::types::builders::ConfiguredTableSummaryBuilder::arn)
    /// - [`name`](crate::types::builders::ConfiguredTableSummaryBuilder::name)
    /// - [`create_time`](crate::types::builders::ConfiguredTableSummaryBuilder::create_time)
    /// - [`update_time`](crate::types::builders::ConfiguredTableSummaryBuilder::update_time)
    /// - [`analysis_rule_types`](crate::types::builders::ConfiguredTableSummaryBuilder::analysis_rule_types)
    /// - [`analysis_method`](crate::types::builders::ConfiguredTableSummaryBuilder::analysis_method)
    pub fn build(self) -> ::std::result::Result<crate::types::ConfiguredTableSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConfiguredTableSummary {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building ConfiguredTableSummary",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building ConfiguredTableSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building ConfiguredTableSummary",
                )
            })?,
            create_time: self.create_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_time",
                    "create_time was not specified but it is required when building ConfiguredTableSummary",
                )
            })?,
            update_time: self.update_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_time",
                    "update_time was not specified but it is required when building ConfiguredTableSummary",
                )
            })?,
            analysis_rule_types: self.analysis_rule_types.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "analysis_rule_types",
                    "analysis_rule_types was not specified but it is required when building ConfiguredTableSummary",
                )
            })?,
            analysis_method: self.analysis_method.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "analysis_method",
                    "analysis_method was not specified but it is required when building ConfiguredTableSummary",
                )
            })?,
            selected_analysis_methods: self.selected_analysis_methods,
        })
    }
}
