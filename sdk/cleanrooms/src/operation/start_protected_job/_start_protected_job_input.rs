// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartProtectedJobInput {
    /// <p>The type of protected job to start.</p>
    pub r#type: ::std::option::Option<crate::types::ProtectedJobType>,
    /// <p>A unique identifier for the membership to run this job against. Currently accepts a membership ID.</p>
    pub membership_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The job parameters.</p>
    pub job_parameters: ::std::option::Option<crate::types::ProtectedJobParameters>,
    /// <p>The details needed to write the job results.</p>
    pub result_configuration: ::std::option::Option<crate::types::ProtectedJobResultConfigurationInput>,
}
impl StartProtectedJobInput {
    /// <p>The type of protected job to start.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::ProtectedJobType> {
        self.r#type.as_ref()
    }
    /// <p>A unique identifier for the membership to run this job against. Currently accepts a membership ID.</p>
    pub fn membership_identifier(&self) -> ::std::option::Option<&str> {
        self.membership_identifier.as_deref()
    }
    /// <p>The job parameters.</p>
    pub fn job_parameters(&self) -> ::std::option::Option<&crate::types::ProtectedJobParameters> {
        self.job_parameters.as_ref()
    }
    /// <p>The details needed to write the job results.</p>
    pub fn result_configuration(&self) -> ::std::option::Option<&crate::types::ProtectedJobResultConfigurationInput> {
        self.result_configuration.as_ref()
    }
}
impl StartProtectedJobInput {
    /// Creates a new builder-style object to manufacture [`StartProtectedJobInput`](crate::operation::start_protected_job::StartProtectedJobInput).
    pub fn builder() -> crate::operation::start_protected_job::builders::StartProtectedJobInputBuilder {
        crate::operation::start_protected_job::builders::StartProtectedJobInputBuilder::default()
    }
}

/// A builder for [`StartProtectedJobInput`](crate::operation::start_protected_job::StartProtectedJobInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartProtectedJobInputBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::ProtectedJobType>,
    pub(crate) membership_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) job_parameters: ::std::option::Option<crate::types::ProtectedJobParameters>,
    pub(crate) result_configuration: ::std::option::Option<crate::types::ProtectedJobResultConfigurationInput>,
}
impl StartProtectedJobInputBuilder {
    /// <p>The type of protected job to start.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::ProtectedJobType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of protected job to start.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ProtectedJobType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of protected job to start.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ProtectedJobType> {
        &self.r#type
    }
    /// <p>A unique identifier for the membership to run this job against. Currently accepts a membership ID.</p>
    /// This field is required.
    pub fn membership_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the membership to run this job against. Currently accepts a membership ID.</p>
    pub fn set_membership_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_identifier = input;
        self
    }
    /// <p>A unique identifier for the membership to run this job against. Currently accepts a membership ID.</p>
    pub fn get_membership_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_identifier
    }
    /// <p>The job parameters.</p>
    /// This field is required.
    pub fn job_parameters(mut self, input: crate::types::ProtectedJobParameters) -> Self {
        self.job_parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>The job parameters.</p>
    pub fn set_job_parameters(mut self, input: ::std::option::Option<crate::types::ProtectedJobParameters>) -> Self {
        self.job_parameters = input;
        self
    }
    /// <p>The job parameters.</p>
    pub fn get_job_parameters(&self) -> &::std::option::Option<crate::types::ProtectedJobParameters> {
        &self.job_parameters
    }
    /// <p>The details needed to write the job results.</p>
    pub fn result_configuration(mut self, input: crate::types::ProtectedJobResultConfigurationInput) -> Self {
        self.result_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details needed to write the job results.</p>
    pub fn set_result_configuration(mut self, input: ::std::option::Option<crate::types::ProtectedJobResultConfigurationInput>) -> Self {
        self.result_configuration = input;
        self
    }
    /// <p>The details needed to write the job results.</p>
    pub fn get_result_configuration(&self) -> &::std::option::Option<crate::types::ProtectedJobResultConfigurationInput> {
        &self.result_configuration
    }
    /// Consumes the builder and constructs a [`StartProtectedJobInput`](crate::operation::start_protected_job::StartProtectedJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_protected_job::StartProtectedJobInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_protected_job::StartProtectedJobInput {
            r#type: self.r#type,
            membership_identifier: self.membership_identifier,
            job_parameters: self.job_parameters,
            result_configuration: self.result_configuration,
        })
    }
}
