// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateConfiguredTableInput {
    /// <p>The identifier for the configured table to update. Currently accepts the configured table ID.</p>
    pub configured_table_identifier: ::std::option::Option<::std::string::String>,
    /// <p>A new name for the configured table.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A new description for the configured table.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The analysis method for the configured table.</p>
    /// <p><code>DIRECT_QUERY</code> allows SQL queries to be run directly on this table.</p>
    /// <p><code>DIRECT_JOB</code> allows PySpark jobs to be run directly on this table.</p>
    /// <p><code>MULTIPLE</code> allows both SQL queries and PySpark jobs to be run directly on this table.</p>
    pub analysis_method: ::std::option::Option<crate::types::AnalysisMethod>,
    /// <p>The selected analysis methods for the table configuration update.</p>
    pub selected_analysis_methods: ::std::option::Option<::std::vec::Vec<crate::types::SelectedAnalysisMethod>>,
}
impl UpdateConfiguredTableInput {
    /// <p>The identifier for the configured table to update. Currently accepts the configured table ID.</p>
    pub fn configured_table_identifier(&self) -> ::std::option::Option<&str> {
        self.configured_table_identifier.as_deref()
    }
    /// <p>A new name for the configured table.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A new description for the configured table.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The analysis method for the configured table.</p>
    /// <p><code>DIRECT_QUERY</code> allows SQL queries to be run directly on this table.</p>
    /// <p><code>DIRECT_JOB</code> allows PySpark jobs to be run directly on this table.</p>
    /// <p><code>MULTIPLE</code> allows both SQL queries and PySpark jobs to be run directly on this table.</p>
    pub fn analysis_method(&self) -> ::std::option::Option<&crate::types::AnalysisMethod> {
        self.analysis_method.as_ref()
    }
    /// <p>The selected analysis methods for the table configuration update.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.selected_analysis_methods.is_none()`.
    pub fn selected_analysis_methods(&self) -> &[crate::types::SelectedAnalysisMethod] {
        self.selected_analysis_methods.as_deref().unwrap_or_default()
    }
}
impl UpdateConfiguredTableInput {
    /// Creates a new builder-style object to manufacture [`UpdateConfiguredTableInput`](crate::operation::update_configured_table::UpdateConfiguredTableInput).
    pub fn builder() -> crate::operation::update_configured_table::builders::UpdateConfiguredTableInputBuilder {
        crate::operation::update_configured_table::builders::UpdateConfiguredTableInputBuilder::default()
    }
}

/// A builder for [`UpdateConfiguredTableInput`](crate::operation::update_configured_table::UpdateConfiguredTableInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateConfiguredTableInputBuilder {
    pub(crate) configured_table_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) analysis_method: ::std::option::Option<crate::types::AnalysisMethod>,
    pub(crate) selected_analysis_methods: ::std::option::Option<::std::vec::Vec<crate::types::SelectedAnalysisMethod>>,
}
impl UpdateConfiguredTableInputBuilder {
    /// <p>The identifier for the configured table to update. Currently accepts the configured table ID.</p>
    /// This field is required.
    pub fn configured_table_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configured_table_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the configured table to update. Currently accepts the configured table ID.</p>
    pub fn set_configured_table_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configured_table_identifier = input;
        self
    }
    /// <p>The identifier for the configured table to update. Currently accepts the configured table ID.</p>
    pub fn get_configured_table_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.configured_table_identifier
    }
    /// <p>A new name for the configured table.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A new name for the configured table.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A new name for the configured table.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A new description for the configured table.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A new description for the configured table.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A new description for the configured table.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The analysis method for the configured table.</p>
    /// <p><code>DIRECT_QUERY</code> allows SQL queries to be run directly on this table.</p>
    /// <p><code>DIRECT_JOB</code> allows PySpark jobs to be run directly on this table.</p>
    /// <p><code>MULTIPLE</code> allows both SQL queries and PySpark jobs to be run directly on this table.</p>
    pub fn analysis_method(mut self, input: crate::types::AnalysisMethod) -> Self {
        self.analysis_method = ::std::option::Option::Some(input);
        self
    }
    /// <p>The analysis method for the configured table.</p>
    /// <p><code>DIRECT_QUERY</code> allows SQL queries to be run directly on this table.</p>
    /// <p><code>DIRECT_JOB</code> allows PySpark jobs to be run directly on this table.</p>
    /// <p><code>MULTIPLE</code> allows both SQL queries and PySpark jobs to be run directly on this table.</p>
    pub fn set_analysis_method(mut self, input: ::std::option::Option<crate::types::AnalysisMethod>) -> Self {
        self.analysis_method = input;
        self
    }
    /// <p>The analysis method for the configured table.</p>
    /// <p><code>DIRECT_QUERY</code> allows SQL queries to be run directly on this table.</p>
    /// <p><code>DIRECT_JOB</code> allows PySpark jobs to be run directly on this table.</p>
    /// <p><code>MULTIPLE</code> allows both SQL queries and PySpark jobs to be run directly on this table.</p>
    pub fn get_analysis_method(&self) -> &::std::option::Option<crate::types::AnalysisMethod> {
        &self.analysis_method
    }
    /// Appends an item to `selected_analysis_methods`.
    ///
    /// To override the contents of this collection use [`set_selected_analysis_methods`](Self::set_selected_analysis_methods).
    ///
    /// <p>The selected analysis methods for the table configuration update.</p>
    pub fn selected_analysis_methods(mut self, input: crate::types::SelectedAnalysisMethod) -> Self {
        let mut v = self.selected_analysis_methods.unwrap_or_default();
        v.push(input);
        self.selected_analysis_methods = ::std::option::Option::Some(v);
        self
    }
    /// <p>The selected analysis methods for the table configuration update.</p>
    pub fn set_selected_analysis_methods(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SelectedAnalysisMethod>>) -> Self {
        self.selected_analysis_methods = input;
        self
    }
    /// <p>The selected analysis methods for the table configuration update.</p>
    pub fn get_selected_analysis_methods(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SelectedAnalysisMethod>> {
        &self.selected_analysis_methods
    }
    /// Consumes the builder and constructs a [`UpdateConfiguredTableInput`](crate::operation::update_configured_table::UpdateConfiguredTableInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_configured_table::UpdateConfiguredTableInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_configured_table::UpdateConfiguredTableInput {
            configured_table_identifier: self.configured_table_identifier,
            name: self.name,
            description: self.description,
            analysis_method: self.analysis_method,
            selected_analysis_methods: self.selected_analysis_methods,
        })
    }
}
