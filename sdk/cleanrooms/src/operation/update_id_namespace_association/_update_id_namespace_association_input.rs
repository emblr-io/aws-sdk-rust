// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateIdNamespaceAssociationInput {
    /// <p>The unique identifier of the ID namespace association that you want to update.</p>
    pub id_namespace_association_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the membership that contains the ID namespace association that you want to update.</p>
    pub membership_identifier: ::std::option::Option<::std::string::String>,
    /// <p>A new name for the ID namespace association.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A new description for the ID namespace association.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The configuration settings for the ID mapping table.</p>
    pub id_mapping_config: ::std::option::Option<crate::types::IdMappingConfig>,
}
impl UpdateIdNamespaceAssociationInput {
    /// <p>The unique identifier of the ID namespace association that you want to update.</p>
    pub fn id_namespace_association_identifier(&self) -> ::std::option::Option<&str> {
        self.id_namespace_association_identifier.as_deref()
    }
    /// <p>The unique identifier of the membership that contains the ID namespace association that you want to update.</p>
    pub fn membership_identifier(&self) -> ::std::option::Option<&str> {
        self.membership_identifier.as_deref()
    }
    /// <p>A new name for the ID namespace association.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A new description for the ID namespace association.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The configuration settings for the ID mapping table.</p>
    pub fn id_mapping_config(&self) -> ::std::option::Option<&crate::types::IdMappingConfig> {
        self.id_mapping_config.as_ref()
    }
}
impl UpdateIdNamespaceAssociationInput {
    /// Creates a new builder-style object to manufacture [`UpdateIdNamespaceAssociationInput`](crate::operation::update_id_namespace_association::UpdateIdNamespaceAssociationInput).
    pub fn builder() -> crate::operation::update_id_namespace_association::builders::UpdateIdNamespaceAssociationInputBuilder {
        crate::operation::update_id_namespace_association::builders::UpdateIdNamespaceAssociationInputBuilder::default()
    }
}

/// A builder for [`UpdateIdNamespaceAssociationInput`](crate::operation::update_id_namespace_association::UpdateIdNamespaceAssociationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateIdNamespaceAssociationInputBuilder {
    pub(crate) id_namespace_association_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) membership_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) id_mapping_config: ::std::option::Option<crate::types::IdMappingConfig>,
}
impl UpdateIdNamespaceAssociationInputBuilder {
    /// <p>The unique identifier of the ID namespace association that you want to update.</p>
    /// This field is required.
    pub fn id_namespace_association_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id_namespace_association_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the ID namespace association that you want to update.</p>
    pub fn set_id_namespace_association_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id_namespace_association_identifier = input;
        self
    }
    /// <p>The unique identifier of the ID namespace association that you want to update.</p>
    pub fn get_id_namespace_association_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.id_namespace_association_identifier
    }
    /// <p>The unique identifier of the membership that contains the ID namespace association that you want to update.</p>
    /// This field is required.
    pub fn membership_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the membership that contains the ID namespace association that you want to update.</p>
    pub fn set_membership_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_identifier = input;
        self
    }
    /// <p>The unique identifier of the membership that contains the ID namespace association that you want to update.</p>
    pub fn get_membership_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_identifier
    }
    /// <p>A new name for the ID namespace association.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A new name for the ID namespace association.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A new name for the ID namespace association.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A new description for the ID namespace association.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A new description for the ID namespace association.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A new description for the ID namespace association.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The configuration settings for the ID mapping table.</p>
    pub fn id_mapping_config(mut self, input: crate::types::IdMappingConfig) -> Self {
        self.id_mapping_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration settings for the ID mapping table.</p>
    pub fn set_id_mapping_config(mut self, input: ::std::option::Option<crate::types::IdMappingConfig>) -> Self {
        self.id_mapping_config = input;
        self
    }
    /// <p>The configuration settings for the ID mapping table.</p>
    pub fn get_id_mapping_config(&self) -> &::std::option::Option<crate::types::IdMappingConfig> {
        &self.id_mapping_config
    }
    /// Consumes the builder and constructs a [`UpdateIdNamespaceAssociationInput`](crate::operation::update_id_namespace_association::UpdateIdNamespaceAssociationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_id_namespace_association::UpdateIdNamespaceAssociationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_id_namespace_association::UpdateIdNamespaceAssociationInput {
            id_namespace_association_identifier: self.id_namespace_association_identifier,
            membership_identifier: self.membership_identifier,
            name: self.name,
            description: self.description,
            id_mapping_config: self.id_mapping_config,
        })
    }
}
