// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateCollaborationInput {
    /// <p>The identifier for the collaboration.</p>
    pub collaboration_identifier: ::std::option::Option<::std::string::String>,
    /// <p>A human-readable identifier provided by the collaboration owner. Display names are not unique.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the collaboration.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The analytics engine.</p>
    pub analytics_engine: ::std::option::Option<crate::types::AnalyticsEngine>,
}
impl UpdateCollaborationInput {
    /// <p>The identifier for the collaboration.</p>
    pub fn collaboration_identifier(&self) -> ::std::option::Option<&str> {
        self.collaboration_identifier.as_deref()
    }
    /// <p>A human-readable identifier provided by the collaboration owner. Display names are not unique.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the collaboration.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The analytics engine.</p>
    pub fn analytics_engine(&self) -> ::std::option::Option<&crate::types::AnalyticsEngine> {
        self.analytics_engine.as_ref()
    }
}
impl UpdateCollaborationInput {
    /// Creates a new builder-style object to manufacture [`UpdateCollaborationInput`](crate::operation::update_collaboration::UpdateCollaborationInput).
    pub fn builder() -> crate::operation::update_collaboration::builders::UpdateCollaborationInputBuilder {
        crate::operation::update_collaboration::builders::UpdateCollaborationInputBuilder::default()
    }
}

/// A builder for [`UpdateCollaborationInput`](crate::operation::update_collaboration::UpdateCollaborationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateCollaborationInputBuilder {
    pub(crate) collaboration_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) analytics_engine: ::std::option::Option<crate::types::AnalyticsEngine>,
}
impl UpdateCollaborationInputBuilder {
    /// <p>The identifier for the collaboration.</p>
    /// This field is required.
    pub fn collaboration_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaboration_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the collaboration.</p>
    pub fn set_collaboration_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaboration_identifier = input;
        self
    }
    /// <p>The identifier for the collaboration.</p>
    pub fn get_collaboration_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaboration_identifier
    }
    /// <p>A human-readable identifier provided by the collaboration owner. Display names are not unique.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A human-readable identifier provided by the collaboration owner. Display names are not unique.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A human-readable identifier provided by the collaboration owner. Display names are not unique.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of the collaboration.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the collaboration.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the collaboration.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The analytics engine.</p>
    pub fn analytics_engine(mut self, input: crate::types::AnalyticsEngine) -> Self {
        self.analytics_engine = ::std::option::Option::Some(input);
        self
    }
    /// <p>The analytics engine.</p>
    pub fn set_analytics_engine(mut self, input: ::std::option::Option<crate::types::AnalyticsEngine>) -> Self {
        self.analytics_engine = input;
        self
    }
    /// <p>The analytics engine.</p>
    pub fn get_analytics_engine(&self) -> &::std::option::Option<crate::types::AnalyticsEngine> {
        &self.analytics_engine
    }
    /// Consumes the builder and constructs a [`UpdateCollaborationInput`](crate::operation::update_collaboration::UpdateCollaborationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_collaboration::UpdateCollaborationInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_collaboration::UpdateCollaborationInput {
            collaboration_identifier: self.collaboration_identifier,
            name: self.name,
            description: self.description,
            analytics_engine: self.analytics_engine,
        })
    }
}
