// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateIdMappingTableInput {
    /// <p>The unique identifier of the membership that contains the ID mapping table.</p>
    pub membership_identifier: ::std::option::Option<::std::string::String>,
    /// <p>A name for the ID mapping table.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the ID mapping table.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The input reference configuration needed to create the ID mapping table.</p>
    pub input_reference_config: ::std::option::Option<crate::types::IdMappingTableInputReferenceConfig>,
    /// <p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services KMS key. This value is used to encrypt the mapping table data that is stored by Clean Rooms.</p>
    pub kms_key_arn: ::std::option::Option<::std::string::String>,
}
impl CreateIdMappingTableInput {
    /// <p>The unique identifier of the membership that contains the ID mapping table.</p>
    pub fn membership_identifier(&self) -> ::std::option::Option<&str> {
        self.membership_identifier.as_deref()
    }
    /// <p>A name for the ID mapping table.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the ID mapping table.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The input reference configuration needed to create the ID mapping table.</p>
    pub fn input_reference_config(&self) -> ::std::option::Option<&crate::types::IdMappingTableInputReferenceConfig> {
        self.input_reference_config.as_ref()
    }
    /// <p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services KMS key. This value is used to encrypt the mapping table data that is stored by Clean Rooms.</p>
    pub fn kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
}
impl CreateIdMappingTableInput {
    /// Creates a new builder-style object to manufacture [`CreateIdMappingTableInput`](crate::operation::create_id_mapping_table::CreateIdMappingTableInput).
    pub fn builder() -> crate::operation::create_id_mapping_table::builders::CreateIdMappingTableInputBuilder {
        crate::operation::create_id_mapping_table::builders::CreateIdMappingTableInputBuilder::default()
    }
}

/// A builder for [`CreateIdMappingTableInput`](crate::operation::create_id_mapping_table::CreateIdMappingTableInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateIdMappingTableInputBuilder {
    pub(crate) membership_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) input_reference_config: ::std::option::Option<crate::types::IdMappingTableInputReferenceConfig>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) kms_key_arn: ::std::option::Option<::std::string::String>,
}
impl CreateIdMappingTableInputBuilder {
    /// <p>The unique identifier of the membership that contains the ID mapping table.</p>
    /// This field is required.
    pub fn membership_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the membership that contains the ID mapping table.</p>
    pub fn set_membership_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_identifier = input;
        self
    }
    /// <p>The unique identifier of the membership that contains the ID mapping table.</p>
    pub fn get_membership_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_identifier
    }
    /// <p>A name for the ID mapping table.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the ID mapping table.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name for the ID mapping table.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of the ID mapping table.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the ID mapping table.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the ID mapping table.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The input reference configuration needed to create the ID mapping table.</p>
    /// This field is required.
    pub fn input_reference_config(mut self, input: crate::types::IdMappingTableInputReferenceConfig) -> Self {
        self.input_reference_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The input reference configuration needed to create the ID mapping table.</p>
    pub fn set_input_reference_config(mut self, input: ::std::option::Option<crate::types::IdMappingTableInputReferenceConfig>) -> Self {
        self.input_reference_config = input;
        self
    }
    /// <p>The input reference configuration needed to create the ID mapping table.</p>
    pub fn get_input_reference_config(&self) -> &::std::option::Option<crate::types::IdMappingTableInputReferenceConfig> {
        &self.input_reference_config
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services KMS key. This value is used to encrypt the mapping table data that is stored by Clean Rooms.</p>
    pub fn kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services KMS key. This value is used to encrypt the mapping table data that is stored by Clean Rooms.</p>
    pub fn set_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services KMS key. This value is used to encrypt the mapping table data that is stored by Clean Rooms.</p>
    pub fn get_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_arn
    }
    /// Consumes the builder and constructs a [`CreateIdMappingTableInput`](crate::operation::create_id_mapping_table::CreateIdMappingTableInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_id_mapping_table::CreateIdMappingTableInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_id_mapping_table::CreateIdMappingTableInput {
            membership_identifier: self.membership_identifier,
            name: self.name,
            description: self.description,
            input_reference_config: self.input_reference_config,
            tags: self.tags,
            kms_key_arn: self.kms_key_arn,
        })
    }
}
