// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateAnalysisTemplateInput {
    /// <p>The description of the analysis template.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The identifier for a membership resource.</p>
    pub membership_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The name of the analysis template.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The format of the analysis template.</p>
    pub format: ::std::option::Option<crate::types::AnalysisFormat>,
    /// <p>The information in the analysis template. Currently supports <code>text</code>, the query text for the analysis template.</p>
    pub source: ::std::option::Option<crate::types::AnalysisSource>,
    /// <p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The parameters of the analysis template.</p>
    pub analysis_parameters: ::std::option::Option<::std::vec::Vec<crate::types::AnalysisParameter>>,
    /// <p>A relation within an analysis.</p>
    pub schema: ::std::option::Option<crate::types::AnalysisSchema>,
}
impl CreateAnalysisTemplateInput {
    /// <p>The description of the analysis template.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The identifier for a membership resource.</p>
    pub fn membership_identifier(&self) -> ::std::option::Option<&str> {
        self.membership_identifier.as_deref()
    }
    /// <p>The name of the analysis template.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The format of the analysis template.</p>
    pub fn format(&self) -> ::std::option::Option<&crate::types::AnalysisFormat> {
        self.format.as_ref()
    }
    /// <p>The information in the analysis template. Currently supports <code>text</code>, the query text for the analysis template.</p>
    pub fn source(&self) -> ::std::option::Option<&crate::types::AnalysisSource> {
        self.source.as_ref()
    }
    /// <p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The parameters of the analysis template.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.analysis_parameters.is_none()`.
    pub fn analysis_parameters(&self) -> &[crate::types::AnalysisParameter] {
        self.analysis_parameters.as_deref().unwrap_or_default()
    }
    /// <p>A relation within an analysis.</p>
    pub fn schema(&self) -> ::std::option::Option<&crate::types::AnalysisSchema> {
        self.schema.as_ref()
    }
}
impl CreateAnalysisTemplateInput {
    /// Creates a new builder-style object to manufacture [`CreateAnalysisTemplateInput`](crate::operation::create_analysis_template::CreateAnalysisTemplateInput).
    pub fn builder() -> crate::operation::create_analysis_template::builders::CreateAnalysisTemplateInputBuilder {
        crate::operation::create_analysis_template::builders::CreateAnalysisTemplateInputBuilder::default()
    }
}

/// A builder for [`CreateAnalysisTemplateInput`](crate::operation::create_analysis_template::CreateAnalysisTemplateInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateAnalysisTemplateInputBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) membership_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) format: ::std::option::Option<crate::types::AnalysisFormat>,
    pub(crate) source: ::std::option::Option<crate::types::AnalysisSource>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) analysis_parameters: ::std::option::Option<::std::vec::Vec<crate::types::AnalysisParameter>>,
    pub(crate) schema: ::std::option::Option<crate::types::AnalysisSchema>,
}
impl CreateAnalysisTemplateInputBuilder {
    /// <p>The description of the analysis template.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the analysis template.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the analysis template.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The identifier for a membership resource.</p>
    /// This field is required.
    pub fn membership_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for a membership resource.</p>
    pub fn set_membership_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_identifier = input;
        self
    }
    /// <p>The identifier for a membership resource.</p>
    pub fn get_membership_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_identifier
    }
    /// <p>The name of the analysis template.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the analysis template.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the analysis template.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The format of the analysis template.</p>
    /// This field is required.
    pub fn format(mut self, input: crate::types::AnalysisFormat) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format of the analysis template.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::AnalysisFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>The format of the analysis template.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::AnalysisFormat> {
        &self.format
    }
    /// <p>The information in the analysis template. Currently supports <code>text</code>, the query text for the analysis template.</p>
    /// This field is required.
    pub fn source(mut self, input: crate::types::AnalysisSource) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The information in the analysis template. Currently supports <code>text</code>, the query text for the analysis template.</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::AnalysisSource>) -> Self {
        self.source = input;
        self
    }
    /// <p>The information in the analysis template. Currently supports <code>text</code>, the query text for the analysis template.</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::AnalysisSource> {
        &self.source
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Appends an item to `analysis_parameters`.
    ///
    /// To override the contents of this collection use [`set_analysis_parameters`](Self::set_analysis_parameters).
    ///
    /// <p>The parameters of the analysis template.</p>
    pub fn analysis_parameters(mut self, input: crate::types::AnalysisParameter) -> Self {
        let mut v = self.analysis_parameters.unwrap_or_default();
        v.push(input);
        self.analysis_parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The parameters of the analysis template.</p>
    pub fn set_analysis_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AnalysisParameter>>) -> Self {
        self.analysis_parameters = input;
        self
    }
    /// <p>The parameters of the analysis template.</p>
    pub fn get_analysis_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AnalysisParameter>> {
        &self.analysis_parameters
    }
    /// <p>A relation within an analysis.</p>
    pub fn schema(mut self, input: crate::types::AnalysisSchema) -> Self {
        self.schema = ::std::option::Option::Some(input);
        self
    }
    /// <p>A relation within an analysis.</p>
    pub fn set_schema(mut self, input: ::std::option::Option<crate::types::AnalysisSchema>) -> Self {
        self.schema = input;
        self
    }
    /// <p>A relation within an analysis.</p>
    pub fn get_schema(&self) -> &::std::option::Option<crate::types::AnalysisSchema> {
        &self.schema
    }
    /// Consumes the builder and constructs a [`CreateAnalysisTemplateInput`](crate::operation::create_analysis_template::CreateAnalysisTemplateInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_analysis_template::CreateAnalysisTemplateInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_analysis_template::CreateAnalysisTemplateInput {
            description: self.description,
            membership_identifier: self.membership_identifier,
            name: self.name,
            format: self.format,
            source: self.source,
            tags: self.tags,
            analysis_parameters: self.analysis_parameters,
            schema: self.schema,
        })
    }
}
