// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PopulateIdMappingTableInput {
    /// <p>The unique identifier of the ID mapping table that you want to populate.</p>
    pub id_mapping_table_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the membership that contains the ID mapping table that you want to populate.</p>
    pub membership_identifier: ::std::option::Option<::std::string::String>,
}
impl PopulateIdMappingTableInput {
    /// <p>The unique identifier of the ID mapping table that you want to populate.</p>
    pub fn id_mapping_table_identifier(&self) -> ::std::option::Option<&str> {
        self.id_mapping_table_identifier.as_deref()
    }
    /// <p>The unique identifier of the membership that contains the ID mapping table that you want to populate.</p>
    pub fn membership_identifier(&self) -> ::std::option::Option<&str> {
        self.membership_identifier.as_deref()
    }
}
impl PopulateIdMappingTableInput {
    /// Creates a new builder-style object to manufacture [`PopulateIdMappingTableInput`](crate::operation::populate_id_mapping_table::PopulateIdMappingTableInput).
    pub fn builder() -> crate::operation::populate_id_mapping_table::builders::PopulateIdMappingTableInputBuilder {
        crate::operation::populate_id_mapping_table::builders::PopulateIdMappingTableInputBuilder::default()
    }
}

/// A builder for [`PopulateIdMappingTableInput`](crate::operation::populate_id_mapping_table::PopulateIdMappingTableInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PopulateIdMappingTableInputBuilder {
    pub(crate) id_mapping_table_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) membership_identifier: ::std::option::Option<::std::string::String>,
}
impl PopulateIdMappingTableInputBuilder {
    /// <p>The unique identifier of the ID mapping table that you want to populate.</p>
    /// This field is required.
    pub fn id_mapping_table_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id_mapping_table_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the ID mapping table that you want to populate.</p>
    pub fn set_id_mapping_table_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id_mapping_table_identifier = input;
        self
    }
    /// <p>The unique identifier of the ID mapping table that you want to populate.</p>
    pub fn get_id_mapping_table_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.id_mapping_table_identifier
    }
    /// <p>The unique identifier of the membership that contains the ID mapping table that you want to populate.</p>
    /// This field is required.
    pub fn membership_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the membership that contains the ID mapping table that you want to populate.</p>
    pub fn set_membership_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_identifier = input;
        self
    }
    /// <p>The unique identifier of the membership that contains the ID mapping table that you want to populate.</p>
    pub fn get_membership_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_identifier
    }
    /// Consumes the builder and constructs a [`PopulateIdMappingTableInput`](crate::operation::populate_id_mapping_table::PopulateIdMappingTableInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::populate_id_mapping_table::PopulateIdMappingTableInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::populate_id_mapping_table::PopulateIdMappingTableInput {
            id_mapping_table_identifier: self.id_mapping_table_identifier,
            membership_identifier: self.membership_identifier,
        })
    }
}
