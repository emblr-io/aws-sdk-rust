// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateMembershipInput {
    /// <p>The unique identifier of the membership.</p>
    pub membership_identifier: ::std::option::Option<::std::string::String>,
    /// <p>An indicator as to whether query logging has been enabled or disabled for the membership.</p>
    /// <p>When <code>ENABLED</code>, Clean Rooms logs details about queries run within this collaboration and those logs can be viewed in Amazon CloudWatch Logs. The default value is <code>DISABLED</code>.</p>
    pub query_log_status: ::std::option::Option<crate::types::MembershipQueryLogStatus>,
    /// <p>An indicator as to whether job logging has been enabled or disabled for the collaboration.</p>
    /// <p>When <code>ENABLED</code>, Clean Rooms logs details about jobs run within this collaboration and those logs can be viewed in Amazon CloudWatch Logs. The default value is <code>DISABLED</code>.</p>
    pub job_log_status: ::std::option::Option<crate::types::MembershipJobLogStatus>,
    /// <p>The default protected query result configuration as specified by the member who can receive results.</p>
    pub default_result_configuration: ::std::option::Option<crate::types::MembershipProtectedQueryResultConfiguration>,
    /// <p>The default job result configuration.</p>
    pub default_job_result_configuration: ::std::option::Option<crate::types::MembershipProtectedJobResultConfiguration>,
}
impl UpdateMembershipInput {
    /// <p>The unique identifier of the membership.</p>
    pub fn membership_identifier(&self) -> ::std::option::Option<&str> {
        self.membership_identifier.as_deref()
    }
    /// <p>An indicator as to whether query logging has been enabled or disabled for the membership.</p>
    /// <p>When <code>ENABLED</code>, Clean Rooms logs details about queries run within this collaboration and those logs can be viewed in Amazon CloudWatch Logs. The default value is <code>DISABLED</code>.</p>
    pub fn query_log_status(&self) -> ::std::option::Option<&crate::types::MembershipQueryLogStatus> {
        self.query_log_status.as_ref()
    }
    /// <p>An indicator as to whether job logging has been enabled or disabled for the collaboration.</p>
    /// <p>When <code>ENABLED</code>, Clean Rooms logs details about jobs run within this collaboration and those logs can be viewed in Amazon CloudWatch Logs. The default value is <code>DISABLED</code>.</p>
    pub fn job_log_status(&self) -> ::std::option::Option<&crate::types::MembershipJobLogStatus> {
        self.job_log_status.as_ref()
    }
    /// <p>The default protected query result configuration as specified by the member who can receive results.</p>
    pub fn default_result_configuration(&self) -> ::std::option::Option<&crate::types::MembershipProtectedQueryResultConfiguration> {
        self.default_result_configuration.as_ref()
    }
    /// <p>The default job result configuration.</p>
    pub fn default_job_result_configuration(&self) -> ::std::option::Option<&crate::types::MembershipProtectedJobResultConfiguration> {
        self.default_job_result_configuration.as_ref()
    }
}
impl UpdateMembershipInput {
    /// Creates a new builder-style object to manufacture [`UpdateMembershipInput`](crate::operation::update_membership::UpdateMembershipInput).
    pub fn builder() -> crate::operation::update_membership::builders::UpdateMembershipInputBuilder {
        crate::operation::update_membership::builders::UpdateMembershipInputBuilder::default()
    }
}

/// A builder for [`UpdateMembershipInput`](crate::operation::update_membership::UpdateMembershipInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateMembershipInputBuilder {
    pub(crate) membership_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) query_log_status: ::std::option::Option<crate::types::MembershipQueryLogStatus>,
    pub(crate) job_log_status: ::std::option::Option<crate::types::MembershipJobLogStatus>,
    pub(crate) default_result_configuration: ::std::option::Option<crate::types::MembershipProtectedQueryResultConfiguration>,
    pub(crate) default_job_result_configuration: ::std::option::Option<crate::types::MembershipProtectedJobResultConfiguration>,
}
impl UpdateMembershipInputBuilder {
    /// <p>The unique identifier of the membership.</p>
    /// This field is required.
    pub fn membership_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the membership.</p>
    pub fn set_membership_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_identifier = input;
        self
    }
    /// <p>The unique identifier of the membership.</p>
    pub fn get_membership_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_identifier
    }
    /// <p>An indicator as to whether query logging has been enabled or disabled for the membership.</p>
    /// <p>When <code>ENABLED</code>, Clean Rooms logs details about queries run within this collaboration and those logs can be viewed in Amazon CloudWatch Logs. The default value is <code>DISABLED</code>.</p>
    pub fn query_log_status(mut self, input: crate::types::MembershipQueryLogStatus) -> Self {
        self.query_log_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>An indicator as to whether query logging has been enabled or disabled for the membership.</p>
    /// <p>When <code>ENABLED</code>, Clean Rooms logs details about queries run within this collaboration and those logs can be viewed in Amazon CloudWatch Logs. The default value is <code>DISABLED</code>.</p>
    pub fn set_query_log_status(mut self, input: ::std::option::Option<crate::types::MembershipQueryLogStatus>) -> Self {
        self.query_log_status = input;
        self
    }
    /// <p>An indicator as to whether query logging has been enabled or disabled for the membership.</p>
    /// <p>When <code>ENABLED</code>, Clean Rooms logs details about queries run within this collaboration and those logs can be viewed in Amazon CloudWatch Logs. The default value is <code>DISABLED</code>.</p>
    pub fn get_query_log_status(&self) -> &::std::option::Option<crate::types::MembershipQueryLogStatus> {
        &self.query_log_status
    }
    /// <p>An indicator as to whether job logging has been enabled or disabled for the collaboration.</p>
    /// <p>When <code>ENABLED</code>, Clean Rooms logs details about jobs run within this collaboration and those logs can be viewed in Amazon CloudWatch Logs. The default value is <code>DISABLED</code>.</p>
    pub fn job_log_status(mut self, input: crate::types::MembershipJobLogStatus) -> Self {
        self.job_log_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>An indicator as to whether job logging has been enabled or disabled for the collaboration.</p>
    /// <p>When <code>ENABLED</code>, Clean Rooms logs details about jobs run within this collaboration and those logs can be viewed in Amazon CloudWatch Logs. The default value is <code>DISABLED</code>.</p>
    pub fn set_job_log_status(mut self, input: ::std::option::Option<crate::types::MembershipJobLogStatus>) -> Self {
        self.job_log_status = input;
        self
    }
    /// <p>An indicator as to whether job logging has been enabled or disabled for the collaboration.</p>
    /// <p>When <code>ENABLED</code>, Clean Rooms logs details about jobs run within this collaboration and those logs can be viewed in Amazon CloudWatch Logs. The default value is <code>DISABLED</code>.</p>
    pub fn get_job_log_status(&self) -> &::std::option::Option<crate::types::MembershipJobLogStatus> {
        &self.job_log_status
    }
    /// <p>The default protected query result configuration as specified by the member who can receive results.</p>
    pub fn default_result_configuration(mut self, input: crate::types::MembershipProtectedQueryResultConfiguration) -> Self {
        self.default_result_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default protected query result configuration as specified by the member who can receive results.</p>
    pub fn set_default_result_configuration(
        mut self,
        input: ::std::option::Option<crate::types::MembershipProtectedQueryResultConfiguration>,
    ) -> Self {
        self.default_result_configuration = input;
        self
    }
    /// <p>The default protected query result configuration as specified by the member who can receive results.</p>
    pub fn get_default_result_configuration(&self) -> &::std::option::Option<crate::types::MembershipProtectedQueryResultConfiguration> {
        &self.default_result_configuration
    }
    /// <p>The default job result configuration.</p>
    pub fn default_job_result_configuration(mut self, input: crate::types::MembershipProtectedJobResultConfiguration) -> Self {
        self.default_job_result_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default job result configuration.</p>
    pub fn set_default_job_result_configuration(
        mut self,
        input: ::std::option::Option<crate::types::MembershipProtectedJobResultConfiguration>,
    ) -> Self {
        self.default_job_result_configuration = input;
        self
    }
    /// <p>The default job result configuration.</p>
    pub fn get_default_job_result_configuration(&self) -> &::std::option::Option<crate::types::MembershipProtectedJobResultConfiguration> {
        &self.default_job_result_configuration
    }
    /// Consumes the builder and constructs a [`UpdateMembershipInput`](crate::operation::update_membership::UpdateMembershipInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_membership::UpdateMembershipInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_membership::UpdateMembershipInput {
            membership_identifier: self.membership_identifier,
            query_log_status: self.query_log_status,
            job_log_status: self.job_log_status,
            default_result_configuration: self.default_result_configuration,
            default_job_result_configuration: self.default_job_result_configuration,
        })
    }
}
