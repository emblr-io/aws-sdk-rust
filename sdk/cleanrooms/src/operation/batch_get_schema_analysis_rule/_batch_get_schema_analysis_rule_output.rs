// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetSchemaAnalysisRuleOutput {
    /// <p>The retrieved list of analysis rules.</p>
    pub analysis_rules: ::std::vec::Vec<crate::types::AnalysisRule>,
    /// <p>Error reasons for schemas that could not be retrieved. One error is returned for every schema that could not be retrieved.</p>
    pub errors: ::std::vec::Vec<crate::types::BatchGetSchemaAnalysisRuleError>,
    _request_id: Option<String>,
}
impl BatchGetSchemaAnalysisRuleOutput {
    /// <p>The retrieved list of analysis rules.</p>
    pub fn analysis_rules(&self) -> &[crate::types::AnalysisRule] {
        use std::ops::Deref;
        self.analysis_rules.deref()
    }
    /// <p>Error reasons for schemas that could not be retrieved. One error is returned for every schema that could not be retrieved.</p>
    pub fn errors(&self) -> &[crate::types::BatchGetSchemaAnalysisRuleError] {
        use std::ops::Deref;
        self.errors.deref()
    }
}
impl ::aws_types::request_id::RequestId for BatchGetSchemaAnalysisRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchGetSchemaAnalysisRuleOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetSchemaAnalysisRuleOutput`](crate::operation::batch_get_schema_analysis_rule::BatchGetSchemaAnalysisRuleOutput).
    pub fn builder() -> crate::operation::batch_get_schema_analysis_rule::builders::BatchGetSchemaAnalysisRuleOutputBuilder {
        crate::operation::batch_get_schema_analysis_rule::builders::BatchGetSchemaAnalysisRuleOutputBuilder::default()
    }
}

/// A builder for [`BatchGetSchemaAnalysisRuleOutput`](crate::operation::batch_get_schema_analysis_rule::BatchGetSchemaAnalysisRuleOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchGetSchemaAnalysisRuleOutputBuilder {
    pub(crate) analysis_rules: ::std::option::Option<::std::vec::Vec<crate::types::AnalysisRule>>,
    pub(crate) errors: ::std::option::Option<::std::vec::Vec<crate::types::BatchGetSchemaAnalysisRuleError>>,
    _request_id: Option<String>,
}
impl BatchGetSchemaAnalysisRuleOutputBuilder {
    /// Appends an item to `analysis_rules`.
    ///
    /// To override the contents of this collection use [`set_analysis_rules`](Self::set_analysis_rules).
    ///
    /// <p>The retrieved list of analysis rules.</p>
    pub fn analysis_rules(mut self, input: crate::types::AnalysisRule) -> Self {
        let mut v = self.analysis_rules.unwrap_or_default();
        v.push(input);
        self.analysis_rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>The retrieved list of analysis rules.</p>
    pub fn set_analysis_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AnalysisRule>>) -> Self {
        self.analysis_rules = input;
        self
    }
    /// <p>The retrieved list of analysis rules.</p>
    pub fn get_analysis_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AnalysisRule>> {
        &self.analysis_rules
    }
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>Error reasons for schemas that could not be retrieved. One error is returned for every schema that could not be retrieved.</p>
    pub fn errors(mut self, input: crate::types::BatchGetSchemaAnalysisRuleError) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = ::std::option::Option::Some(v);
        self
    }
    /// <p>Error reasons for schemas that could not be retrieved. One error is returned for every schema that could not be retrieved.</p>
    pub fn set_errors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BatchGetSchemaAnalysisRuleError>>) -> Self {
        self.errors = input;
        self
    }
    /// <p>Error reasons for schemas that could not be retrieved. One error is returned for every schema that could not be retrieved.</p>
    pub fn get_errors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BatchGetSchemaAnalysisRuleError>> {
        &self.errors
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchGetSchemaAnalysisRuleOutput`](crate::operation::batch_get_schema_analysis_rule::BatchGetSchemaAnalysisRuleOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`analysis_rules`](crate::operation::batch_get_schema_analysis_rule::builders::BatchGetSchemaAnalysisRuleOutputBuilder::analysis_rules)
    /// - [`errors`](crate::operation::batch_get_schema_analysis_rule::builders::BatchGetSchemaAnalysisRuleOutputBuilder::errors)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_get_schema_analysis_rule::BatchGetSchemaAnalysisRuleOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::batch_get_schema_analysis_rule::BatchGetSchemaAnalysisRuleOutput {
            analysis_rules: self.analysis_rules.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "analysis_rules",
                    "analysis_rules was not specified but it is required when building BatchGetSchemaAnalysisRuleOutput",
                )
            })?,
            errors: self.errors.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "errors",
                    "errors was not specified but it is required when building BatchGetSchemaAnalysisRuleOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
