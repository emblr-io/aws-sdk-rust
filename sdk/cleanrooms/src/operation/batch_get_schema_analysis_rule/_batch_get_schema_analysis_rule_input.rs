// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetSchemaAnalysisRuleInput {
    /// <p>The unique identifier of the collaboration that contains the schema analysis rule.</p>
    pub collaboration_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The information that's necessary to retrieve a schema analysis rule.</p>
    pub schema_analysis_rule_requests: ::std::option::Option<::std::vec::Vec<crate::types::SchemaAnalysisRuleRequest>>,
}
impl BatchGetSchemaAnalysisRuleInput {
    /// <p>The unique identifier of the collaboration that contains the schema analysis rule.</p>
    pub fn collaboration_identifier(&self) -> ::std::option::Option<&str> {
        self.collaboration_identifier.as_deref()
    }
    /// <p>The information that's necessary to retrieve a schema analysis rule.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.schema_analysis_rule_requests.is_none()`.
    pub fn schema_analysis_rule_requests(&self) -> &[crate::types::SchemaAnalysisRuleRequest] {
        self.schema_analysis_rule_requests.as_deref().unwrap_or_default()
    }
}
impl BatchGetSchemaAnalysisRuleInput {
    /// Creates a new builder-style object to manufacture [`BatchGetSchemaAnalysisRuleInput`](crate::operation::batch_get_schema_analysis_rule::BatchGetSchemaAnalysisRuleInput).
    pub fn builder() -> crate::operation::batch_get_schema_analysis_rule::builders::BatchGetSchemaAnalysisRuleInputBuilder {
        crate::operation::batch_get_schema_analysis_rule::builders::BatchGetSchemaAnalysisRuleInputBuilder::default()
    }
}

/// A builder for [`BatchGetSchemaAnalysisRuleInput`](crate::operation::batch_get_schema_analysis_rule::BatchGetSchemaAnalysisRuleInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchGetSchemaAnalysisRuleInputBuilder {
    pub(crate) collaboration_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) schema_analysis_rule_requests: ::std::option::Option<::std::vec::Vec<crate::types::SchemaAnalysisRuleRequest>>,
}
impl BatchGetSchemaAnalysisRuleInputBuilder {
    /// <p>The unique identifier of the collaboration that contains the schema analysis rule.</p>
    /// This field is required.
    pub fn collaboration_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaboration_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the collaboration that contains the schema analysis rule.</p>
    pub fn set_collaboration_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaboration_identifier = input;
        self
    }
    /// <p>The unique identifier of the collaboration that contains the schema analysis rule.</p>
    pub fn get_collaboration_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaboration_identifier
    }
    /// Appends an item to `schema_analysis_rule_requests`.
    ///
    /// To override the contents of this collection use [`set_schema_analysis_rule_requests`](Self::set_schema_analysis_rule_requests).
    ///
    /// <p>The information that's necessary to retrieve a schema analysis rule.</p>
    pub fn schema_analysis_rule_requests(mut self, input: crate::types::SchemaAnalysisRuleRequest) -> Self {
        let mut v = self.schema_analysis_rule_requests.unwrap_or_default();
        v.push(input);
        self.schema_analysis_rule_requests = ::std::option::Option::Some(v);
        self
    }
    /// <p>The information that's necessary to retrieve a schema analysis rule.</p>
    pub fn set_schema_analysis_rule_requests(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::SchemaAnalysisRuleRequest>>,
    ) -> Self {
        self.schema_analysis_rule_requests = input;
        self
    }
    /// <p>The information that's necessary to retrieve a schema analysis rule.</p>
    pub fn get_schema_analysis_rule_requests(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SchemaAnalysisRuleRequest>> {
        &self.schema_analysis_rule_requests
    }
    /// Consumes the builder and constructs a [`BatchGetSchemaAnalysisRuleInput`](crate::operation::batch_get_schema_analysis_rule::BatchGetSchemaAnalysisRuleInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_get_schema_analysis_rule::BatchGetSchemaAnalysisRuleInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::batch_get_schema_analysis_rule::BatchGetSchemaAnalysisRuleInput {
            collaboration_identifier: self.collaboration_identifier,
            schema_analysis_rule_requests: self.schema_analysis_rule_requests,
        })
    }
}
