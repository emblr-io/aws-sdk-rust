// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateConfiguredTableAssociationAnalysisRuleInput {
    /// <p>A unique identifier for the membership that the configured table association belongs to. Currently accepts the membership ID.</p>
    pub membership_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The unique ID for the configured table association. Currently accepts the configured table association ID.</p>
    pub configured_table_association_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The type of analysis rule.</p>
    pub analysis_rule_type: ::std::option::Option<crate::types::ConfiguredTableAssociationAnalysisRuleType>,
    /// <p>The analysis rule policy that was created for the configured table association.</p>
    pub analysis_rule_policy: ::std::option::Option<crate::types::ConfiguredTableAssociationAnalysisRulePolicy>,
}
impl CreateConfiguredTableAssociationAnalysisRuleInput {
    /// <p>A unique identifier for the membership that the configured table association belongs to. Currently accepts the membership ID.</p>
    pub fn membership_identifier(&self) -> ::std::option::Option<&str> {
        self.membership_identifier.as_deref()
    }
    /// <p>The unique ID for the configured table association. Currently accepts the configured table association ID.</p>
    pub fn configured_table_association_identifier(&self) -> ::std::option::Option<&str> {
        self.configured_table_association_identifier.as_deref()
    }
    /// <p>The type of analysis rule.</p>
    pub fn analysis_rule_type(&self) -> ::std::option::Option<&crate::types::ConfiguredTableAssociationAnalysisRuleType> {
        self.analysis_rule_type.as_ref()
    }
    /// <p>The analysis rule policy that was created for the configured table association.</p>
    pub fn analysis_rule_policy(&self) -> ::std::option::Option<&crate::types::ConfiguredTableAssociationAnalysisRulePolicy> {
        self.analysis_rule_policy.as_ref()
    }
}
impl CreateConfiguredTableAssociationAnalysisRuleInput {
    /// Creates a new builder-style object to manufacture [`CreateConfiguredTableAssociationAnalysisRuleInput`](crate::operation::create_configured_table_association_analysis_rule::CreateConfiguredTableAssociationAnalysisRuleInput).
    pub fn builder(
    ) -> crate::operation::create_configured_table_association_analysis_rule::builders::CreateConfiguredTableAssociationAnalysisRuleInputBuilder {
        crate::operation::create_configured_table_association_analysis_rule::builders::CreateConfiguredTableAssociationAnalysisRuleInputBuilder::default()
    }
}

/// A builder for [`CreateConfiguredTableAssociationAnalysisRuleInput`](crate::operation::create_configured_table_association_analysis_rule::CreateConfiguredTableAssociationAnalysisRuleInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateConfiguredTableAssociationAnalysisRuleInputBuilder {
    pub(crate) membership_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) configured_table_association_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) analysis_rule_type: ::std::option::Option<crate::types::ConfiguredTableAssociationAnalysisRuleType>,
    pub(crate) analysis_rule_policy: ::std::option::Option<crate::types::ConfiguredTableAssociationAnalysisRulePolicy>,
}
impl CreateConfiguredTableAssociationAnalysisRuleInputBuilder {
    /// <p>A unique identifier for the membership that the configured table association belongs to. Currently accepts the membership ID.</p>
    /// This field is required.
    pub fn membership_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the membership that the configured table association belongs to. Currently accepts the membership ID.</p>
    pub fn set_membership_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_identifier = input;
        self
    }
    /// <p>A unique identifier for the membership that the configured table association belongs to. Currently accepts the membership ID.</p>
    pub fn get_membership_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_identifier
    }
    /// <p>The unique ID for the configured table association. Currently accepts the configured table association ID.</p>
    /// This field is required.
    pub fn configured_table_association_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configured_table_association_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID for the configured table association. Currently accepts the configured table association ID.</p>
    pub fn set_configured_table_association_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configured_table_association_identifier = input;
        self
    }
    /// <p>The unique ID for the configured table association. Currently accepts the configured table association ID.</p>
    pub fn get_configured_table_association_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.configured_table_association_identifier
    }
    /// <p>The type of analysis rule.</p>
    /// This field is required.
    pub fn analysis_rule_type(mut self, input: crate::types::ConfiguredTableAssociationAnalysisRuleType) -> Self {
        self.analysis_rule_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of analysis rule.</p>
    pub fn set_analysis_rule_type(mut self, input: ::std::option::Option<crate::types::ConfiguredTableAssociationAnalysisRuleType>) -> Self {
        self.analysis_rule_type = input;
        self
    }
    /// <p>The type of analysis rule.</p>
    pub fn get_analysis_rule_type(&self) -> &::std::option::Option<crate::types::ConfiguredTableAssociationAnalysisRuleType> {
        &self.analysis_rule_type
    }
    /// <p>The analysis rule policy that was created for the configured table association.</p>
    /// This field is required.
    pub fn analysis_rule_policy(mut self, input: crate::types::ConfiguredTableAssociationAnalysisRulePolicy) -> Self {
        self.analysis_rule_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The analysis rule policy that was created for the configured table association.</p>
    pub fn set_analysis_rule_policy(mut self, input: ::std::option::Option<crate::types::ConfiguredTableAssociationAnalysisRulePolicy>) -> Self {
        self.analysis_rule_policy = input;
        self
    }
    /// <p>The analysis rule policy that was created for the configured table association.</p>
    pub fn get_analysis_rule_policy(&self) -> &::std::option::Option<crate::types::ConfiguredTableAssociationAnalysisRulePolicy> {
        &self.analysis_rule_policy
    }
    /// Consumes the builder and constructs a [`CreateConfiguredTableAssociationAnalysisRuleInput`](crate::operation::create_configured_table_association_analysis_rule::CreateConfiguredTableAssociationAnalysisRuleInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_configured_table_association_analysis_rule::CreateConfiguredTableAssociationAnalysisRuleInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_configured_table_association_analysis_rule::CreateConfiguredTableAssociationAnalysisRuleInput {
                membership_identifier: self.membership_identifier,
                configured_table_association_identifier: self.configured_table_association_identifier,
                analysis_rule_type: self.analysis_rule_type,
                analysis_rule_policy: self.analysis_rule_policy,
            },
        )
    }
}
