// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Properties of a product code associated with a volume.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProductCode {
    /// <p>Id of a product code associated with a volume.</p>
    pub product_code_id: ::std::option::Option<::std::string::String>,
    /// <p>Mode of a product code associated with a volume.</p>
    pub product_code_mode: ::std::option::Option<crate::types::ProductCodeMode>,
}
impl ProductCode {
    /// <p>Id of a product code associated with a volume.</p>
    pub fn product_code_id(&self) -> ::std::option::Option<&str> {
        self.product_code_id.as_deref()
    }
    /// <p>Mode of a product code associated with a volume.</p>
    pub fn product_code_mode(&self) -> ::std::option::Option<&crate::types::ProductCodeMode> {
        self.product_code_mode.as_ref()
    }
}
impl ProductCode {
    /// Creates a new builder-style object to manufacture [`ProductCode`](crate::types::ProductCode).
    pub fn builder() -> crate::types::builders::ProductCodeBuilder {
        crate::types::builders::ProductCodeBuilder::default()
    }
}

/// A builder for [`ProductCode`](crate::types::ProductCode).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProductCodeBuilder {
    pub(crate) product_code_id: ::std::option::Option<::std::string::String>,
    pub(crate) product_code_mode: ::std::option::Option<crate::types::ProductCodeMode>,
}
impl ProductCodeBuilder {
    /// <p>Id of a product code associated with a volume.</p>
    pub fn product_code_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.product_code_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Id of a product code associated with a volume.</p>
    pub fn set_product_code_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.product_code_id = input;
        self
    }
    /// <p>Id of a product code associated with a volume.</p>
    pub fn get_product_code_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.product_code_id
    }
    /// <p>Mode of a product code associated with a volume.</p>
    pub fn product_code_mode(mut self, input: crate::types::ProductCodeMode) -> Self {
        self.product_code_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Mode of a product code associated with a volume.</p>
    pub fn set_product_code_mode(mut self, input: ::std::option::Option<crate::types::ProductCodeMode>) -> Self {
        self.product_code_mode = input;
        self
    }
    /// <p>Mode of a product code associated with a volume.</p>
    pub fn get_product_code_mode(&self) -> &::std::option::Option<crate::types::ProductCodeMode> {
        &self.product_code_mode
    }
    /// Consumes the builder and constructs a [`ProductCode`](crate::types::ProductCode).
    pub fn build(self) -> crate::types::ProductCode {
        crate::types::ProductCode {
            product_code_id: self.product_code_id,
            product_code_mode: self.product_code_mode,
        }
    }
}
