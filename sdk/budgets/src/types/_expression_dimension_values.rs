// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the specifications for the filters to use for your request.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExpressionDimensionValues {
    /// <p>The name of the dimension that you want to filter on.</p>
    pub key: crate::types::Dimension,
    /// <p>The metadata values you can specify to filter upon, so that the results all match at least one of the specified values.</p>
    pub values: ::std::vec::Vec<::std::string::String>,
    /// <p>The match options that you can use to filter your results. You can specify only one of these values in the array.</p>
    pub match_options: ::std::option::Option<::std::vec::Vec<crate::types::MatchOption>>,
}
impl ExpressionDimensionValues {
    /// <p>The name of the dimension that you want to filter on.</p>
    pub fn key(&self) -> &crate::types::Dimension {
        &self.key
    }
    /// <p>The metadata values you can specify to filter upon, so that the results all match at least one of the specified values.</p>
    pub fn values(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.values.deref()
    }
    /// <p>The match options that you can use to filter your results. You can specify only one of these values in the array.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.match_options.is_none()`.
    pub fn match_options(&self) -> &[crate::types::MatchOption] {
        self.match_options.as_deref().unwrap_or_default()
    }
}
impl ExpressionDimensionValues {
    /// Creates a new builder-style object to manufacture [`ExpressionDimensionValues`](crate::types::ExpressionDimensionValues).
    pub fn builder() -> crate::types::builders::ExpressionDimensionValuesBuilder {
        crate::types::builders::ExpressionDimensionValuesBuilder::default()
    }
}

/// A builder for [`ExpressionDimensionValues`](crate::types::ExpressionDimensionValues).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ExpressionDimensionValuesBuilder {
    pub(crate) key: ::std::option::Option<crate::types::Dimension>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) match_options: ::std::option::Option<::std::vec::Vec<crate::types::MatchOption>>,
}
impl ExpressionDimensionValuesBuilder {
    /// <p>The name of the dimension that you want to filter on.</p>
    /// This field is required.
    pub fn key(mut self, input: crate::types::Dimension) -> Self {
        self.key = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the dimension that you want to filter on.</p>
    pub fn set_key(mut self, input: ::std::option::Option<crate::types::Dimension>) -> Self {
        self.key = input;
        self
    }
    /// <p>The name of the dimension that you want to filter on.</p>
    pub fn get_key(&self) -> &::std::option::Option<crate::types::Dimension> {
        &self.key
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The metadata values you can specify to filter upon, so that the results all match at least one of the specified values.</p>
    pub fn values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The metadata values you can specify to filter upon, so that the results all match at least one of the specified values.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The metadata values you can specify to filter upon, so that the results all match at least one of the specified values.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.values
    }
    /// Appends an item to `match_options`.
    ///
    /// To override the contents of this collection use [`set_match_options`](Self::set_match_options).
    ///
    /// <p>The match options that you can use to filter your results. You can specify only one of these values in the array.</p>
    pub fn match_options(mut self, input: crate::types::MatchOption) -> Self {
        let mut v = self.match_options.unwrap_or_default();
        v.push(input);
        self.match_options = ::std::option::Option::Some(v);
        self
    }
    /// <p>The match options that you can use to filter your results. You can specify only one of these values in the array.</p>
    pub fn set_match_options(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MatchOption>>) -> Self {
        self.match_options = input;
        self
    }
    /// <p>The match options that you can use to filter your results. You can specify only one of these values in the array.</p>
    pub fn get_match_options(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MatchOption>> {
        &self.match_options
    }
    /// Consumes the builder and constructs a [`ExpressionDimensionValues`](crate::types::ExpressionDimensionValues).
    /// This method will fail if any of the following fields are not set:
    /// - [`key`](crate::types::builders::ExpressionDimensionValuesBuilder::key)
    /// - [`values`](crate::types::builders::ExpressionDimensionValuesBuilder::values)
    pub fn build(self) -> ::std::result::Result<crate::types::ExpressionDimensionValues, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ExpressionDimensionValues {
            key: self.key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key",
                    "key was not specified but it is required when building ExpressionDimensionValues",
                )
            })?,
            values: self.values.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "values",
                    "values was not specified but it is required when building ExpressionDimensionValues",
                )
            })?,
            match_options: self.match_options,
        })
    }
}
