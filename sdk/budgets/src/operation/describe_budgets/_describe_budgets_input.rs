// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Request of DescribeBudgets</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeBudgetsInput {
    /// <p>The <code>accountId</code> that is associated with the budgets that you want to describe.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>An integer that represents how many budgets a paginated response contains. The default is 100.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the response includes the filter expression associated with the budgets. By showing the filter expression, you can see detailed filtering logic applied to the budgets, such as Amazon Web Services services or tags that are being tracked.</p>
    pub show_filter_expression: ::std::option::Option<bool>,
}
impl DescribeBudgetsInput {
    /// <p>The <code>accountId</code> that is associated with the budgets that you want to describe.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>An integer that represents how many budgets a paginated response contains. The default is 100.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Specifies whether the response includes the filter expression associated with the budgets. By showing the filter expression, you can see detailed filtering logic applied to the budgets, such as Amazon Web Services services or tags that are being tracked.</p>
    pub fn show_filter_expression(&self) -> ::std::option::Option<bool> {
        self.show_filter_expression
    }
}
impl DescribeBudgetsInput {
    /// Creates a new builder-style object to manufacture [`DescribeBudgetsInput`](crate::operation::describe_budgets::DescribeBudgetsInput).
    pub fn builder() -> crate::operation::describe_budgets::builders::DescribeBudgetsInputBuilder {
        crate::operation::describe_budgets::builders::DescribeBudgetsInputBuilder::default()
    }
}

/// A builder for [`DescribeBudgetsInput`](crate::operation::describe_budgets::DescribeBudgetsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeBudgetsInputBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) show_filter_expression: ::std::option::Option<bool>,
}
impl DescribeBudgetsInputBuilder {
    /// <p>The <code>accountId</code> that is associated with the budgets that you want to describe.</p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>accountId</code> that is associated with the budgets that you want to describe.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The <code>accountId</code> that is associated with the budgets that you want to describe.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>An integer that represents how many budgets a paginated response contains. The default is 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>An integer that represents how many budgets a paginated response contains. The default is 100.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>An integer that represents how many budgets a paginated response contains. The default is 100.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>Specifies whether the response includes the filter expression associated with the budgets. By showing the filter expression, you can see detailed filtering logic applied to the budgets, such as Amazon Web Services services or tags that are being tracked.</p>
    pub fn show_filter_expression(mut self, input: bool) -> Self {
        self.show_filter_expression = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the response includes the filter expression associated with the budgets. By showing the filter expression, you can see detailed filtering logic applied to the budgets, such as Amazon Web Services services or tags that are being tracked.</p>
    pub fn set_show_filter_expression(mut self, input: ::std::option::Option<bool>) -> Self {
        self.show_filter_expression = input;
        self
    }
    /// <p>Specifies whether the response includes the filter expression associated with the budgets. By showing the filter expression, you can see detailed filtering logic applied to the budgets, such as Amazon Web Services services or tags that are being tracked.</p>
    pub fn get_show_filter_expression(&self) -> &::std::option::Option<bool> {
        &self.show_filter_expression
    }
    /// Consumes the builder and constructs a [`DescribeBudgetsInput`](crate::operation::describe_budgets::DescribeBudgetsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_budgets::DescribeBudgetsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::describe_budgets::DescribeBudgetsInput {
            account_id: self.account_id,
            max_results: self.max_results,
            next_token: self.next_token,
            show_filter_expression: self.show_filter_expression,
        })
    }
}
