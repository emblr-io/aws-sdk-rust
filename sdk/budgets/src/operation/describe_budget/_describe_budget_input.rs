// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Request of DescribeBudget</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeBudgetInput {
    /// <p>The <code>accountId</code> that is associated with the budget that you want a description of.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the budget that you want a description of.</p>
    pub budget_name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the response includes the filter expression associated with the budget. By showing the filter expression, you can see detailed filtering logic applied to the budget, such as Amazon Web Services services or tags that are being tracked.</p>
    pub show_filter_expression: ::std::option::Option<bool>,
}
impl DescribeBudgetInput {
    /// <p>The <code>accountId</code> that is associated with the budget that you want a description of.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The name of the budget that you want a description of.</p>
    pub fn budget_name(&self) -> ::std::option::Option<&str> {
        self.budget_name.as_deref()
    }
    /// <p>Specifies whether the response includes the filter expression associated with the budget. By showing the filter expression, you can see detailed filtering logic applied to the budget, such as Amazon Web Services services or tags that are being tracked.</p>
    pub fn show_filter_expression(&self) -> ::std::option::Option<bool> {
        self.show_filter_expression
    }
}
impl DescribeBudgetInput {
    /// Creates a new builder-style object to manufacture [`DescribeBudgetInput`](crate::operation::describe_budget::DescribeBudgetInput).
    pub fn builder() -> crate::operation::describe_budget::builders::DescribeBudgetInputBuilder {
        crate::operation::describe_budget::builders::DescribeBudgetInputBuilder::default()
    }
}

/// A builder for [`DescribeBudgetInput`](crate::operation::describe_budget::DescribeBudgetInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeBudgetInputBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) budget_name: ::std::option::Option<::std::string::String>,
    pub(crate) show_filter_expression: ::std::option::Option<bool>,
}
impl DescribeBudgetInputBuilder {
    /// <p>The <code>accountId</code> that is associated with the budget that you want a description of.</p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>accountId</code> that is associated with the budget that you want a description of.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The <code>accountId</code> that is associated with the budget that you want a description of.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The name of the budget that you want a description of.</p>
    /// This field is required.
    pub fn budget_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.budget_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the budget that you want a description of.</p>
    pub fn set_budget_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.budget_name = input;
        self
    }
    /// <p>The name of the budget that you want a description of.</p>
    pub fn get_budget_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.budget_name
    }
    /// <p>Specifies whether the response includes the filter expression associated with the budget. By showing the filter expression, you can see detailed filtering logic applied to the budget, such as Amazon Web Services services or tags that are being tracked.</p>
    pub fn show_filter_expression(mut self, input: bool) -> Self {
        self.show_filter_expression = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the response includes the filter expression associated with the budget. By showing the filter expression, you can see detailed filtering logic applied to the budget, such as Amazon Web Services services or tags that are being tracked.</p>
    pub fn set_show_filter_expression(mut self, input: ::std::option::Option<bool>) -> Self {
        self.show_filter_expression = input;
        self
    }
    /// <p>Specifies whether the response includes the filter expression associated with the budget. By showing the filter expression, you can see detailed filtering logic applied to the budget, such as Amazon Web Services services or tags that are being tracked.</p>
    pub fn get_show_filter_expression(&self) -> &::std::option::Option<bool> {
        &self.show_filter_expression
    }
    /// Consumes the builder and constructs a [`DescribeBudgetInput`](crate::operation::describe_budget::DescribeBudgetInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_budget::DescribeBudgetInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::describe_budget::DescribeBudgetInput {
            account_id: self.account_id,
            budget_name: self.budget_name,
            show_filter_expression: self.show_filter_expression,
        })
    }
}
