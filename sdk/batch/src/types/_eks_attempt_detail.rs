// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the details of a job attempt for a job attempt by an Amazon EKS container.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EksAttemptDetail {
    /// <p>The details for the final status of the containers for this job attempt.</p>
    pub containers: ::std::option::Option<::std::vec::Vec<crate::types::EksAttemptContainerDetail>>,
    /// <p>The details for the init containers.</p>
    pub init_containers: ::std::option::Option<::std::vec::Vec<crate::types::EksAttemptContainerDetail>>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon EKS cluster.</p>
    pub eks_cluster_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the pod for this job attempt.</p>
    pub pod_name: ::std::option::Option<::std::string::String>,
    /// <p>The namespace of the Amazon EKS cluster that the pod exists in.</p>
    pub pod_namespace: ::std::option::Option<::std::string::String>,
    /// <p>The name of the node for this job attempt.</p>
    pub node_name: ::std::option::Option<::std::string::String>,
    /// <p>The Unix timestamp (in milliseconds) for when the attempt was started (when the attempt transitioned from the <code>STARTING</code> state to the <code>RUNNING</code> state).</p>
    pub started_at: ::std::option::Option<i64>,
    /// <p>The Unix timestamp (in milliseconds) for when the attempt was stopped. This happens when the attempt transitioned from the <code>RUNNING</code> state to a terminal state, such as <code>SUCCEEDED</code> or <code>FAILED</code>.</p>
    pub stopped_at: ::std::option::Option<i64>,
    /// <p>A short, human-readable string to provide additional details for the current status of the job attempt.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
}
impl EksAttemptDetail {
    /// <p>The details for the final status of the containers for this job attempt.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.containers.is_none()`.
    pub fn containers(&self) -> &[crate::types::EksAttemptContainerDetail] {
        self.containers.as_deref().unwrap_or_default()
    }
    /// <p>The details for the init containers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.init_containers.is_none()`.
    pub fn init_containers(&self) -> &[crate::types::EksAttemptContainerDetail] {
        self.init_containers.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon EKS cluster.</p>
    pub fn eks_cluster_arn(&self) -> ::std::option::Option<&str> {
        self.eks_cluster_arn.as_deref()
    }
    /// <p>The name of the pod for this job attempt.</p>
    pub fn pod_name(&self) -> ::std::option::Option<&str> {
        self.pod_name.as_deref()
    }
    /// <p>The namespace of the Amazon EKS cluster that the pod exists in.</p>
    pub fn pod_namespace(&self) -> ::std::option::Option<&str> {
        self.pod_namespace.as_deref()
    }
    /// <p>The name of the node for this job attempt.</p>
    pub fn node_name(&self) -> ::std::option::Option<&str> {
        self.node_name.as_deref()
    }
    /// <p>The Unix timestamp (in milliseconds) for when the attempt was started (when the attempt transitioned from the <code>STARTING</code> state to the <code>RUNNING</code> state).</p>
    pub fn started_at(&self) -> ::std::option::Option<i64> {
        self.started_at
    }
    /// <p>The Unix timestamp (in milliseconds) for when the attempt was stopped. This happens when the attempt transitioned from the <code>RUNNING</code> state to a terminal state, such as <code>SUCCEEDED</code> or <code>FAILED</code>.</p>
    pub fn stopped_at(&self) -> ::std::option::Option<i64> {
        self.stopped_at
    }
    /// <p>A short, human-readable string to provide additional details for the current status of the job attempt.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
}
impl EksAttemptDetail {
    /// Creates a new builder-style object to manufacture [`EksAttemptDetail`](crate::types::EksAttemptDetail).
    pub fn builder() -> crate::types::builders::EksAttemptDetailBuilder {
        crate::types::builders::EksAttemptDetailBuilder::default()
    }
}

/// A builder for [`EksAttemptDetail`](crate::types::EksAttemptDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EksAttemptDetailBuilder {
    pub(crate) containers: ::std::option::Option<::std::vec::Vec<crate::types::EksAttemptContainerDetail>>,
    pub(crate) init_containers: ::std::option::Option<::std::vec::Vec<crate::types::EksAttemptContainerDetail>>,
    pub(crate) eks_cluster_arn: ::std::option::Option<::std::string::String>,
    pub(crate) pod_name: ::std::option::Option<::std::string::String>,
    pub(crate) pod_namespace: ::std::option::Option<::std::string::String>,
    pub(crate) node_name: ::std::option::Option<::std::string::String>,
    pub(crate) started_at: ::std::option::Option<i64>,
    pub(crate) stopped_at: ::std::option::Option<i64>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
}
impl EksAttemptDetailBuilder {
    /// Appends an item to `containers`.
    ///
    /// To override the contents of this collection use [`set_containers`](Self::set_containers).
    ///
    /// <p>The details for the final status of the containers for this job attempt.</p>
    pub fn containers(mut self, input: crate::types::EksAttemptContainerDetail) -> Self {
        let mut v = self.containers.unwrap_or_default();
        v.push(input);
        self.containers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The details for the final status of the containers for this job attempt.</p>
    pub fn set_containers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EksAttemptContainerDetail>>) -> Self {
        self.containers = input;
        self
    }
    /// <p>The details for the final status of the containers for this job attempt.</p>
    pub fn get_containers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EksAttemptContainerDetail>> {
        &self.containers
    }
    /// Appends an item to `init_containers`.
    ///
    /// To override the contents of this collection use [`set_init_containers`](Self::set_init_containers).
    ///
    /// <p>The details for the init containers.</p>
    pub fn init_containers(mut self, input: crate::types::EksAttemptContainerDetail) -> Self {
        let mut v = self.init_containers.unwrap_or_default();
        v.push(input);
        self.init_containers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The details for the init containers.</p>
    pub fn set_init_containers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EksAttemptContainerDetail>>) -> Self {
        self.init_containers = input;
        self
    }
    /// <p>The details for the init containers.</p>
    pub fn get_init_containers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EksAttemptContainerDetail>> {
        &self.init_containers
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon EKS cluster.</p>
    pub fn eks_cluster_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.eks_cluster_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon EKS cluster.</p>
    pub fn set_eks_cluster_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.eks_cluster_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon EKS cluster.</p>
    pub fn get_eks_cluster_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.eks_cluster_arn
    }
    /// <p>The name of the pod for this job attempt.</p>
    pub fn pod_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pod_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the pod for this job attempt.</p>
    pub fn set_pod_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pod_name = input;
        self
    }
    /// <p>The name of the pod for this job attempt.</p>
    pub fn get_pod_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.pod_name
    }
    /// <p>The namespace of the Amazon EKS cluster that the pod exists in.</p>
    pub fn pod_namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pod_namespace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The namespace of the Amazon EKS cluster that the pod exists in.</p>
    pub fn set_pod_namespace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pod_namespace = input;
        self
    }
    /// <p>The namespace of the Amazon EKS cluster that the pod exists in.</p>
    pub fn get_pod_namespace(&self) -> &::std::option::Option<::std::string::String> {
        &self.pod_namespace
    }
    /// <p>The name of the node for this job attempt.</p>
    pub fn node_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the node for this job attempt.</p>
    pub fn set_node_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_name = input;
        self
    }
    /// <p>The name of the node for this job attempt.</p>
    pub fn get_node_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_name
    }
    /// <p>The Unix timestamp (in milliseconds) for when the attempt was started (when the attempt transitioned from the <code>STARTING</code> state to the <code>RUNNING</code> state).</p>
    pub fn started_at(mut self, input: i64) -> Self {
        self.started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the attempt was started (when the attempt transitioned from the <code>STARTING</code> state to the <code>RUNNING</code> state).</p>
    pub fn set_started_at(mut self, input: ::std::option::Option<i64>) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the attempt was started (when the attempt transitioned from the <code>STARTING</code> state to the <code>RUNNING</code> state).</p>
    pub fn get_started_at(&self) -> &::std::option::Option<i64> {
        &self.started_at
    }
    /// <p>The Unix timestamp (in milliseconds) for when the attempt was stopped. This happens when the attempt transitioned from the <code>RUNNING</code> state to a terminal state, such as <code>SUCCEEDED</code> or <code>FAILED</code>.</p>
    pub fn stopped_at(mut self, input: i64) -> Self {
        self.stopped_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the attempt was stopped. This happens when the attempt transitioned from the <code>RUNNING</code> state to a terminal state, such as <code>SUCCEEDED</code> or <code>FAILED</code>.</p>
    pub fn set_stopped_at(mut self, input: ::std::option::Option<i64>) -> Self {
        self.stopped_at = input;
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the attempt was stopped. This happens when the attempt transitioned from the <code>RUNNING</code> state to a terminal state, such as <code>SUCCEEDED</code> or <code>FAILED</code>.</p>
    pub fn get_stopped_at(&self) -> &::std::option::Option<i64> {
        &self.stopped_at
    }
    /// <p>A short, human-readable string to provide additional details for the current status of the job attempt.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A short, human-readable string to provide additional details for the current status of the job attempt.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>A short, human-readable string to provide additional details for the current status of the job attempt.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// Consumes the builder and constructs a [`EksAttemptDetail`](crate::types::EksAttemptDetail).
    pub fn build(self) -> crate::types::EksAttemptDetail {
        crate::types::EksAttemptDetail {
            containers: self.containers,
            init_containers: self.init_containers,
            eks_cluster_arn: self.eks_cluster_arn,
            pod_name: self.pod_name,
            pod_namespace: self.pod_namespace,
            node_name: self.node_name,
            started_at: self.started_at,
            stopped_at: self.stopped_at,
            status_reason: self.status_reason,
        }
    }
}
