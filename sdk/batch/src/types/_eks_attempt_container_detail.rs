// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the details for an attempt for a job attempt that an Amazon EKS container runs.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EksAttemptContainerDetail {
    /// <p>The name of a container.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The ID for the container.</p>
    pub container_id: ::std::option::Option<::std::string::String>,
    /// <p>The exit code returned for the job attempt. A non-zero exit code is considered failed.</p>
    pub exit_code: ::std::option::Option<i32>,
    /// <p>A short (255 max characters) human-readable string to provide additional details for a running or stopped container.</p>
    pub reason: ::std::option::Option<::std::string::String>,
}
impl EksAttemptContainerDetail {
    /// <p>The name of a container.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ID for the container.</p>
    pub fn container_id(&self) -> ::std::option::Option<&str> {
        self.container_id.as_deref()
    }
    /// <p>The exit code returned for the job attempt. A non-zero exit code is considered failed.</p>
    pub fn exit_code(&self) -> ::std::option::Option<i32> {
        self.exit_code
    }
    /// <p>A short (255 max characters) human-readable string to provide additional details for a running or stopped container.</p>
    pub fn reason(&self) -> ::std::option::Option<&str> {
        self.reason.as_deref()
    }
}
impl EksAttemptContainerDetail {
    /// Creates a new builder-style object to manufacture [`EksAttemptContainerDetail`](crate::types::EksAttemptContainerDetail).
    pub fn builder() -> crate::types::builders::EksAttemptContainerDetailBuilder {
        crate::types::builders::EksAttemptContainerDetailBuilder::default()
    }
}

/// A builder for [`EksAttemptContainerDetail`](crate::types::EksAttemptContainerDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EksAttemptContainerDetailBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) container_id: ::std::option::Option<::std::string::String>,
    pub(crate) exit_code: ::std::option::Option<i32>,
    pub(crate) reason: ::std::option::Option<::std::string::String>,
}
impl EksAttemptContainerDetailBuilder {
    /// <p>The name of a container.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a container.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of a container.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The ID for the container.</p>
    pub fn container_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.container_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID for the container.</p>
    pub fn set_container_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.container_id = input;
        self
    }
    /// <p>The ID for the container.</p>
    pub fn get_container_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.container_id
    }
    /// <p>The exit code returned for the job attempt. A non-zero exit code is considered failed.</p>
    pub fn exit_code(mut self, input: i32) -> Self {
        self.exit_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The exit code returned for the job attempt. A non-zero exit code is considered failed.</p>
    pub fn set_exit_code(mut self, input: ::std::option::Option<i32>) -> Self {
        self.exit_code = input;
        self
    }
    /// <p>The exit code returned for the job attempt. A non-zero exit code is considered failed.</p>
    pub fn get_exit_code(&self) -> &::std::option::Option<i32> {
        &self.exit_code
    }
    /// <p>A short (255 max characters) human-readable string to provide additional details for a running or stopped container.</p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A short (255 max characters) human-readable string to provide additional details for a running or stopped container.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>A short (255 max characters) human-readable string to provide additional details for a running or stopped container.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// Consumes the builder and constructs a [`EksAttemptContainerDetail`](crate::types::EksAttemptContainerDetail).
    pub fn build(self) -> crate::types::EksAttemptContainerDetail {
        crate::types::EksAttemptContainerDetail {
            name: self.name,
            container_id: self.container_id,
            exit_code: self.exit_code,
            reason: self.reason,
        }
    }
}
