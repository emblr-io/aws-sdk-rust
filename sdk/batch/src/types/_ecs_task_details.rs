// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a task definition that describes the container and volume definitions of an Amazon ECS task.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EcsTaskDetails {
    /// <p>A list of containers that are included in the <code>taskProperties</code> list.</p>
    pub containers: ::std::option::Option<::std::vec::Vec<crate::types::TaskContainerDetails>>,
    /// <p>The Amazon Resource Name (ARN) of the container instance that hosts the task.</p>
    pub container_instance_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the Amazon ECS task.</p>
    pub task_arn: ::std::option::Option<::std::string::String>,
    /// <p>The amount of ephemeral storage allocated for the task.</p>
    pub ephemeral_storage: ::std::option::Option<crate::types::EphemeralStorage>,
    /// <p>The Amazon Resource Name (ARN) of the execution role that Batch can assume. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html">Batch execution IAM role</a> in the <i>Batch User Guide</i>.</p>
    pub execution_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Fargate platform version where the jobs are running.</p>
    pub platform_version: ::std::option::Option<::std::string::String>,
    /// <p>The IPC resource namespace to use for the containers in the task.</p>
    pub ipc_mode: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role that the container can assume for Amazon Web Services permissions. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html">IAM roles for tasks</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p><note>
    /// <p>This is object is comparable to <a href="https://docs.aws.amazon.com/batch/latest/APIReference/API_ContainerProperties.html">ContainerProperties:jobRoleArn</a>.</p>
    /// </note>
    pub task_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The process namespace to use for the containers in the task.</p>
    pub pid_mode: ::std::option::Option<::std::string::String>,
    /// <p>The network configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.</p>
    pub network_configuration: ::std::option::Option<crate::types::NetworkConfiguration>,
    /// <p>An object that represents the compute environment architecture for Batch jobs on Fargate.</p>
    pub runtime_platform: ::std::option::Option<crate::types::RuntimePlatform>,
    /// <p>A list of data volumes used in a job.</p>
    pub volumes: ::std::option::Option<::std::vec::Vec<crate::types::Volume>>,
    /// <p>Determines whether execute command functionality is turned on for this task. If <code>true</code>, execute command functionality is turned on all the containers in the task.</p>
    pub enable_execute_command: ::std::option::Option<bool>,
}
impl EcsTaskDetails {
    /// <p>A list of containers that are included in the <code>taskProperties</code> list.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.containers.is_none()`.
    pub fn containers(&self) -> &[crate::types::TaskContainerDetails] {
        self.containers.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Resource Name (ARN) of the container instance that hosts the task.</p>
    pub fn container_instance_arn(&self) -> ::std::option::Option<&str> {
        self.container_instance_arn.as_deref()
    }
    /// <p>The ARN of the Amazon ECS task.</p>
    pub fn task_arn(&self) -> ::std::option::Option<&str> {
        self.task_arn.as_deref()
    }
    /// <p>The amount of ephemeral storage allocated for the task.</p>
    pub fn ephemeral_storage(&self) -> ::std::option::Option<&crate::types::EphemeralStorage> {
        self.ephemeral_storage.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the execution role that Batch can assume. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html">Batch execution IAM role</a> in the <i>Batch User Guide</i>.</p>
    pub fn execution_role_arn(&self) -> ::std::option::Option<&str> {
        self.execution_role_arn.as_deref()
    }
    /// <p>The Fargate platform version where the jobs are running.</p>
    pub fn platform_version(&self) -> ::std::option::Option<&str> {
        self.platform_version.as_deref()
    }
    /// <p>The IPC resource namespace to use for the containers in the task.</p>
    pub fn ipc_mode(&self) -> ::std::option::Option<&str> {
        self.ipc_mode.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that the container can assume for Amazon Web Services permissions. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html">IAM roles for tasks</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p><note>
    /// <p>This is object is comparable to <a href="https://docs.aws.amazon.com/batch/latest/APIReference/API_ContainerProperties.html">ContainerProperties:jobRoleArn</a>.</p>
    /// </note>
    pub fn task_role_arn(&self) -> ::std::option::Option<&str> {
        self.task_role_arn.as_deref()
    }
    /// <p>The process namespace to use for the containers in the task.</p>
    pub fn pid_mode(&self) -> ::std::option::Option<&str> {
        self.pid_mode.as_deref()
    }
    /// <p>The network configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.</p>
    pub fn network_configuration(&self) -> ::std::option::Option<&crate::types::NetworkConfiguration> {
        self.network_configuration.as_ref()
    }
    /// <p>An object that represents the compute environment architecture for Batch jobs on Fargate.</p>
    pub fn runtime_platform(&self) -> ::std::option::Option<&crate::types::RuntimePlatform> {
        self.runtime_platform.as_ref()
    }
    /// <p>A list of data volumes used in a job.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.volumes.is_none()`.
    pub fn volumes(&self) -> &[crate::types::Volume] {
        self.volumes.as_deref().unwrap_or_default()
    }
    /// <p>Determines whether execute command functionality is turned on for this task. If <code>true</code>, execute command functionality is turned on all the containers in the task.</p>
    pub fn enable_execute_command(&self) -> ::std::option::Option<bool> {
        self.enable_execute_command
    }
}
impl EcsTaskDetails {
    /// Creates a new builder-style object to manufacture [`EcsTaskDetails`](crate::types::EcsTaskDetails).
    pub fn builder() -> crate::types::builders::EcsTaskDetailsBuilder {
        crate::types::builders::EcsTaskDetailsBuilder::default()
    }
}

/// A builder for [`EcsTaskDetails`](crate::types::EcsTaskDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EcsTaskDetailsBuilder {
    pub(crate) containers: ::std::option::Option<::std::vec::Vec<crate::types::TaskContainerDetails>>,
    pub(crate) container_instance_arn: ::std::option::Option<::std::string::String>,
    pub(crate) task_arn: ::std::option::Option<::std::string::String>,
    pub(crate) ephemeral_storage: ::std::option::Option<crate::types::EphemeralStorage>,
    pub(crate) execution_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) platform_version: ::std::option::Option<::std::string::String>,
    pub(crate) ipc_mode: ::std::option::Option<::std::string::String>,
    pub(crate) task_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) pid_mode: ::std::option::Option<::std::string::String>,
    pub(crate) network_configuration: ::std::option::Option<crate::types::NetworkConfiguration>,
    pub(crate) runtime_platform: ::std::option::Option<crate::types::RuntimePlatform>,
    pub(crate) volumes: ::std::option::Option<::std::vec::Vec<crate::types::Volume>>,
    pub(crate) enable_execute_command: ::std::option::Option<bool>,
}
impl EcsTaskDetailsBuilder {
    /// Appends an item to `containers`.
    ///
    /// To override the contents of this collection use [`set_containers`](Self::set_containers).
    ///
    /// <p>A list of containers that are included in the <code>taskProperties</code> list.</p>
    pub fn containers(mut self, input: crate::types::TaskContainerDetails) -> Self {
        let mut v = self.containers.unwrap_or_default();
        v.push(input);
        self.containers = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of containers that are included in the <code>taskProperties</code> list.</p>
    pub fn set_containers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TaskContainerDetails>>) -> Self {
        self.containers = input;
        self
    }
    /// <p>A list of containers that are included in the <code>taskProperties</code> list.</p>
    pub fn get_containers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TaskContainerDetails>> {
        &self.containers
    }
    /// <p>The Amazon Resource Name (ARN) of the container instance that hosts the task.</p>
    pub fn container_instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.container_instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the container instance that hosts the task.</p>
    pub fn set_container_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.container_instance_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the container instance that hosts the task.</p>
    pub fn get_container_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.container_instance_arn
    }
    /// <p>The ARN of the Amazon ECS task.</p>
    pub fn task_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Amazon ECS task.</p>
    pub fn set_task_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_arn = input;
        self
    }
    /// <p>The ARN of the Amazon ECS task.</p>
    pub fn get_task_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_arn
    }
    /// <p>The amount of ephemeral storage allocated for the task.</p>
    pub fn ephemeral_storage(mut self, input: crate::types::EphemeralStorage) -> Self {
        self.ephemeral_storage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of ephemeral storage allocated for the task.</p>
    pub fn set_ephemeral_storage(mut self, input: ::std::option::Option<crate::types::EphemeralStorage>) -> Self {
        self.ephemeral_storage = input;
        self
    }
    /// <p>The amount of ephemeral storage allocated for the task.</p>
    pub fn get_ephemeral_storage(&self) -> &::std::option::Option<crate::types::EphemeralStorage> {
        &self.ephemeral_storage
    }
    /// <p>The Amazon Resource Name (ARN) of the execution role that Batch can assume. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html">Batch execution IAM role</a> in the <i>Batch User Guide</i>.</p>
    pub fn execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the execution role that Batch can assume. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html">Batch execution IAM role</a> in the <i>Batch User Guide</i>.</p>
    pub fn set_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the execution role that Batch can assume. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html">Batch execution IAM role</a> in the <i>Batch User Guide</i>.</p>
    pub fn get_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role_arn
    }
    /// <p>The Fargate platform version where the jobs are running.</p>
    pub fn platform_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.platform_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Fargate platform version where the jobs are running.</p>
    pub fn set_platform_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.platform_version = input;
        self
    }
    /// <p>The Fargate platform version where the jobs are running.</p>
    pub fn get_platform_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.platform_version
    }
    /// <p>The IPC resource namespace to use for the containers in the task.</p>
    pub fn ipc_mode(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipc_mode = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IPC resource namespace to use for the containers in the task.</p>
    pub fn set_ipc_mode(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipc_mode = input;
        self
    }
    /// <p>The IPC resource namespace to use for the containers in the task.</p>
    pub fn get_ipc_mode(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipc_mode
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that the container can assume for Amazon Web Services permissions. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html">IAM roles for tasks</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p><note>
    /// <p>This is object is comparable to <a href="https://docs.aws.amazon.com/batch/latest/APIReference/API_ContainerProperties.html">ContainerProperties:jobRoleArn</a>.</p>
    /// </note>
    pub fn task_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that the container can assume for Amazon Web Services permissions. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html">IAM roles for tasks</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p><note>
    /// <p>This is object is comparable to <a href="https://docs.aws.amazon.com/batch/latest/APIReference/API_ContainerProperties.html">ContainerProperties:jobRoleArn</a>.</p>
    /// </note>
    pub fn set_task_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that the container can assume for Amazon Web Services permissions. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html">IAM roles for tasks</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p><note>
    /// <p>This is object is comparable to <a href="https://docs.aws.amazon.com/batch/latest/APIReference/API_ContainerProperties.html">ContainerProperties:jobRoleArn</a>.</p>
    /// </note>
    pub fn get_task_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_role_arn
    }
    /// <p>The process namespace to use for the containers in the task.</p>
    pub fn pid_mode(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pid_mode = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The process namespace to use for the containers in the task.</p>
    pub fn set_pid_mode(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pid_mode = input;
        self
    }
    /// <p>The process namespace to use for the containers in the task.</p>
    pub fn get_pid_mode(&self) -> &::std::option::Option<::std::string::String> {
        &self.pid_mode
    }
    /// <p>The network configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.</p>
    pub fn network_configuration(mut self, input: crate::types::NetworkConfiguration) -> Self {
        self.network_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The network configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.</p>
    pub fn set_network_configuration(mut self, input: ::std::option::Option<crate::types::NetworkConfiguration>) -> Self {
        self.network_configuration = input;
        self
    }
    /// <p>The network configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.</p>
    pub fn get_network_configuration(&self) -> &::std::option::Option<crate::types::NetworkConfiguration> {
        &self.network_configuration
    }
    /// <p>An object that represents the compute environment architecture for Batch jobs on Fargate.</p>
    pub fn runtime_platform(mut self, input: crate::types::RuntimePlatform) -> Self {
        self.runtime_platform = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that represents the compute environment architecture for Batch jobs on Fargate.</p>
    pub fn set_runtime_platform(mut self, input: ::std::option::Option<crate::types::RuntimePlatform>) -> Self {
        self.runtime_platform = input;
        self
    }
    /// <p>An object that represents the compute environment architecture for Batch jobs on Fargate.</p>
    pub fn get_runtime_platform(&self) -> &::std::option::Option<crate::types::RuntimePlatform> {
        &self.runtime_platform
    }
    /// Appends an item to `volumes`.
    ///
    /// To override the contents of this collection use [`set_volumes`](Self::set_volumes).
    ///
    /// <p>A list of data volumes used in a job.</p>
    pub fn volumes(mut self, input: crate::types::Volume) -> Self {
        let mut v = self.volumes.unwrap_or_default();
        v.push(input);
        self.volumes = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of data volumes used in a job.</p>
    pub fn set_volumes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Volume>>) -> Self {
        self.volumes = input;
        self
    }
    /// <p>A list of data volumes used in a job.</p>
    pub fn get_volumes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Volume>> {
        &self.volumes
    }
    /// <p>Determines whether execute command functionality is turned on for this task. If <code>true</code>, execute command functionality is turned on all the containers in the task.</p>
    pub fn enable_execute_command(mut self, input: bool) -> Self {
        self.enable_execute_command = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether execute command functionality is turned on for this task. If <code>true</code>, execute command functionality is turned on all the containers in the task.</p>
    pub fn set_enable_execute_command(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_execute_command = input;
        self
    }
    /// <p>Determines whether execute command functionality is turned on for this task. If <code>true</code>, execute command functionality is turned on all the containers in the task.</p>
    pub fn get_enable_execute_command(&self) -> &::std::option::Option<bool> {
        &self.enable_execute_command
    }
    /// Consumes the builder and constructs a [`EcsTaskDetails`](crate::types::EcsTaskDetails).
    pub fn build(self) -> crate::types::EcsTaskDetails {
        crate::types::EcsTaskDetails {
            containers: self.containers,
            container_instance_arn: self.container_instance_arn,
            task_arn: self.task_arn,
            ephemeral_storage: self.ephemeral_storage,
            execution_role_arn: self.execution_role_arn,
            platform_version: self.platform_version,
            ipc_mode: self.ipc_mode,
            task_role_arn: self.task_role_arn,
            pid_mode: self.pid_mode,
            network_configuration: self.network_configuration,
            runtime_platform: self.runtime_platform,
            volumes: self.volumes,
            enable_execute_command: self.enable_execute_command,
        }
    }
}
