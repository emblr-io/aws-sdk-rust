// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains overrides for the task definition of a job.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TaskPropertiesOverride {
    /// <p>The overrides for the container definition of a job.</p>
    pub containers: ::std::option::Option<::std::vec::Vec<crate::types::TaskContainerOverrides>>,
}
impl TaskPropertiesOverride {
    /// <p>The overrides for the container definition of a job.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.containers.is_none()`.
    pub fn containers(&self) -> &[crate::types::TaskContainerOverrides] {
        self.containers.as_deref().unwrap_or_default()
    }
}
impl TaskPropertiesOverride {
    /// Creates a new builder-style object to manufacture [`TaskPropertiesOverride`](crate::types::TaskPropertiesOverride).
    pub fn builder() -> crate::types::builders::TaskPropertiesOverrideBuilder {
        crate::types::builders::TaskPropertiesOverrideBuilder::default()
    }
}

/// A builder for [`TaskPropertiesOverride`](crate::types::TaskPropertiesOverride).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TaskPropertiesOverrideBuilder {
    pub(crate) containers: ::std::option::Option<::std::vec::Vec<crate::types::TaskContainerOverrides>>,
}
impl TaskPropertiesOverrideBuilder {
    /// Appends an item to `containers`.
    ///
    /// To override the contents of this collection use [`set_containers`](Self::set_containers).
    ///
    /// <p>The overrides for the container definition of a job.</p>
    pub fn containers(mut self, input: crate::types::TaskContainerOverrides) -> Self {
        let mut v = self.containers.unwrap_or_default();
        v.push(input);
        self.containers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The overrides for the container definition of a job.</p>
    pub fn set_containers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TaskContainerOverrides>>) -> Self {
        self.containers = input;
        self
    }
    /// <p>The overrides for the container definition of a job.</p>
    pub fn get_containers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TaskContainerOverrides>> {
        &self.containers
    }
    /// Consumes the builder and constructs a [`TaskPropertiesOverride`](crate::types::TaskPropertiesOverride).
    pub fn build(self) -> crate::types::TaskPropertiesOverride {
        crate::types::TaskPropertiesOverride { containers: self.containers }
    }
}
