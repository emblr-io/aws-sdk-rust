// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes and uniquely identifies Kubernetes resources. For example, the compute environment that a pod runs in or the <code>jobID</code> for a job running in the pod. For more information, see <a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/"> Understanding Kubernetes Objects</a> in the <i>Kubernetes documentation</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EksMetadata {
    /// <p>Key-value pairs used to identify, sort, and organize cube resources. Can contain up to 63 uppercase letters, lowercase letters, numbers, hyphens (-), and underscores (_). Labels can be added or modified at any time. Each resource can have multiple labels, but each key must be unique for a given object.</p>
    pub labels: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Key-value pairs used to attach arbitrary, non-identifying metadata to Kubernetes objects. Valid annotation keys have two segments: an optional prefix and a name, separated by a slash (/).</p>
    /// <ul>
    /// <li>
    /// <p>The prefix is optional and must be 253 characters or less. If specified, the prefix must be a DNS subdomain− a series of DNS labels separated by dots (.), and it must end with a slash (/).</p></li>
    /// <li>
    /// <p>The name segment is required and must be 63 characters or less. It can include alphanumeric characters (\[a-z0-9A-Z\]), dashes (-), underscores (_), and dots (.), but must begin and end with an alphanumeric character.</p></li>
    /// </ul><note>
    /// <p>Annotation values must be 255 characters or less.</p>
    /// </note>
    /// <p>Annotations can be added or modified at any time. Each resource can have multiple annotations.</p>
    pub annotations: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The namespace of the Amazon EKS cluster. In Kubernetes, namespaces provide a mechanism for isolating groups of resources within a single cluster. Names of resources need to be unique within a namespace, but not across namespaces. Batch places Batch Job pods in this namespace. If this field is provided, the value can't be empty or null. It must meet the following requirements:</p>
    /// <ul>
    /// <li>
    /// <p>1-63 characters long</p></li>
    /// <li>
    /// <p>Can't be set to default</p></li>
    /// <li>
    /// <p>Can't start with <code>kube</code></p></li>
    /// <li>
    /// <p>Must match the following regular expression: <code>^\[a-z0-9\](\[-a-z0-9\]*\[a-z0-9\])?$</code></p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/">Namespaces</a> in the <i>Kubernetes documentation</i>. This namespace can be different from the <code>kubernetesNamespace</code> set in the compute environment's <code>EksConfiguration</code>, but must have identical role-based access control (RBAC) roles as the compute environment's <code>kubernetesNamespace</code>. For multi-node parallel jobs, the same value must be provided across all the node ranges.</p>
    pub namespace: ::std::option::Option<::std::string::String>,
}
impl EksMetadata {
    /// <p>Key-value pairs used to identify, sort, and organize cube resources. Can contain up to 63 uppercase letters, lowercase letters, numbers, hyphens (-), and underscores (_). Labels can be added or modified at any time. Each resource can have multiple labels, but each key must be unique for a given object.</p>
    pub fn labels(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.labels.as_ref()
    }
    /// <p>Key-value pairs used to attach arbitrary, non-identifying metadata to Kubernetes objects. Valid annotation keys have two segments: an optional prefix and a name, separated by a slash (/).</p>
    /// <ul>
    /// <li>
    /// <p>The prefix is optional and must be 253 characters or less. If specified, the prefix must be a DNS subdomain− a series of DNS labels separated by dots (.), and it must end with a slash (/).</p></li>
    /// <li>
    /// <p>The name segment is required and must be 63 characters or less. It can include alphanumeric characters (\[a-z0-9A-Z\]), dashes (-), underscores (_), and dots (.), but must begin and end with an alphanumeric character.</p></li>
    /// </ul><note>
    /// <p>Annotation values must be 255 characters or less.</p>
    /// </note>
    /// <p>Annotations can be added or modified at any time. Each resource can have multiple annotations.</p>
    pub fn annotations(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.annotations.as_ref()
    }
    /// <p>The namespace of the Amazon EKS cluster. In Kubernetes, namespaces provide a mechanism for isolating groups of resources within a single cluster. Names of resources need to be unique within a namespace, but not across namespaces. Batch places Batch Job pods in this namespace. If this field is provided, the value can't be empty or null. It must meet the following requirements:</p>
    /// <ul>
    /// <li>
    /// <p>1-63 characters long</p></li>
    /// <li>
    /// <p>Can't be set to default</p></li>
    /// <li>
    /// <p>Can't start with <code>kube</code></p></li>
    /// <li>
    /// <p>Must match the following regular expression: <code>^\[a-z0-9\](\[-a-z0-9\]*\[a-z0-9\])?$</code></p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/">Namespaces</a> in the <i>Kubernetes documentation</i>. This namespace can be different from the <code>kubernetesNamespace</code> set in the compute environment's <code>EksConfiguration</code>, but must have identical role-based access control (RBAC) roles as the compute environment's <code>kubernetesNamespace</code>. For multi-node parallel jobs, the same value must be provided across all the node ranges.</p>
    pub fn namespace(&self) -> ::std::option::Option<&str> {
        self.namespace.as_deref()
    }
}
impl EksMetadata {
    /// Creates a new builder-style object to manufacture [`EksMetadata`](crate::types::EksMetadata).
    pub fn builder() -> crate::types::builders::EksMetadataBuilder {
        crate::types::builders::EksMetadataBuilder::default()
    }
}

/// A builder for [`EksMetadata`](crate::types::EksMetadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EksMetadataBuilder {
    pub(crate) labels: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) annotations: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) namespace: ::std::option::Option<::std::string::String>,
}
impl EksMetadataBuilder {
    /// Adds a key-value pair to `labels`.
    ///
    /// To override the contents of this collection use [`set_labels`](Self::set_labels).
    ///
    /// <p>Key-value pairs used to identify, sort, and organize cube resources. Can contain up to 63 uppercase letters, lowercase letters, numbers, hyphens (-), and underscores (_). Labels can be added or modified at any time. Each resource can have multiple labels, but each key must be unique for a given object.</p>
    pub fn labels(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.labels.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.labels = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Key-value pairs used to identify, sort, and organize cube resources. Can contain up to 63 uppercase letters, lowercase letters, numbers, hyphens (-), and underscores (_). Labels can be added or modified at any time. Each resource can have multiple labels, but each key must be unique for a given object.</p>
    pub fn set_labels(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.labels = input;
        self
    }
    /// <p>Key-value pairs used to identify, sort, and organize cube resources. Can contain up to 63 uppercase letters, lowercase letters, numbers, hyphens (-), and underscores (_). Labels can be added or modified at any time. Each resource can have multiple labels, but each key must be unique for a given object.</p>
    pub fn get_labels(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.labels
    }
    /// Adds a key-value pair to `annotations`.
    ///
    /// To override the contents of this collection use [`set_annotations`](Self::set_annotations).
    ///
    /// <p>Key-value pairs used to attach arbitrary, non-identifying metadata to Kubernetes objects. Valid annotation keys have two segments: an optional prefix and a name, separated by a slash (/).</p>
    /// <ul>
    /// <li>
    /// <p>The prefix is optional and must be 253 characters or less. If specified, the prefix must be a DNS subdomain− a series of DNS labels separated by dots (.), and it must end with a slash (/).</p></li>
    /// <li>
    /// <p>The name segment is required and must be 63 characters or less. It can include alphanumeric characters (\[a-z0-9A-Z\]), dashes (-), underscores (_), and dots (.), but must begin and end with an alphanumeric character.</p></li>
    /// </ul><note>
    /// <p>Annotation values must be 255 characters or less.</p>
    /// </note>
    /// <p>Annotations can be added or modified at any time. Each resource can have multiple annotations.</p>
    pub fn annotations(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.annotations.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.annotations = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Key-value pairs used to attach arbitrary, non-identifying metadata to Kubernetes objects. Valid annotation keys have two segments: an optional prefix and a name, separated by a slash (/).</p>
    /// <ul>
    /// <li>
    /// <p>The prefix is optional and must be 253 characters or less. If specified, the prefix must be a DNS subdomain− a series of DNS labels separated by dots (.), and it must end with a slash (/).</p></li>
    /// <li>
    /// <p>The name segment is required and must be 63 characters or less. It can include alphanumeric characters (\[a-z0-9A-Z\]), dashes (-), underscores (_), and dots (.), but must begin and end with an alphanumeric character.</p></li>
    /// </ul><note>
    /// <p>Annotation values must be 255 characters or less.</p>
    /// </note>
    /// <p>Annotations can be added or modified at any time. Each resource can have multiple annotations.</p>
    pub fn set_annotations(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.annotations = input;
        self
    }
    /// <p>Key-value pairs used to attach arbitrary, non-identifying metadata to Kubernetes objects. Valid annotation keys have two segments: an optional prefix and a name, separated by a slash (/).</p>
    /// <ul>
    /// <li>
    /// <p>The prefix is optional and must be 253 characters or less. If specified, the prefix must be a DNS subdomain− a series of DNS labels separated by dots (.), and it must end with a slash (/).</p></li>
    /// <li>
    /// <p>The name segment is required and must be 63 characters or less. It can include alphanumeric characters (\[a-z0-9A-Z\]), dashes (-), underscores (_), and dots (.), but must begin and end with an alphanumeric character.</p></li>
    /// </ul><note>
    /// <p>Annotation values must be 255 characters or less.</p>
    /// </note>
    /// <p>Annotations can be added or modified at any time. Each resource can have multiple annotations.</p>
    pub fn get_annotations(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.annotations
    }
    /// <p>The namespace of the Amazon EKS cluster. In Kubernetes, namespaces provide a mechanism for isolating groups of resources within a single cluster. Names of resources need to be unique within a namespace, but not across namespaces. Batch places Batch Job pods in this namespace. If this field is provided, the value can't be empty or null. It must meet the following requirements:</p>
    /// <ul>
    /// <li>
    /// <p>1-63 characters long</p></li>
    /// <li>
    /// <p>Can't be set to default</p></li>
    /// <li>
    /// <p>Can't start with <code>kube</code></p></li>
    /// <li>
    /// <p>Must match the following regular expression: <code>^\[a-z0-9\](\[-a-z0-9\]*\[a-z0-9\])?$</code></p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/">Namespaces</a> in the <i>Kubernetes documentation</i>. This namespace can be different from the <code>kubernetesNamespace</code> set in the compute environment's <code>EksConfiguration</code>, but must have identical role-based access control (RBAC) roles as the compute environment's <code>kubernetesNamespace</code>. For multi-node parallel jobs, the same value must be provided across all the node ranges.</p>
    pub fn namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.namespace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The namespace of the Amazon EKS cluster. In Kubernetes, namespaces provide a mechanism for isolating groups of resources within a single cluster. Names of resources need to be unique within a namespace, but not across namespaces. Batch places Batch Job pods in this namespace. If this field is provided, the value can't be empty or null. It must meet the following requirements:</p>
    /// <ul>
    /// <li>
    /// <p>1-63 characters long</p></li>
    /// <li>
    /// <p>Can't be set to default</p></li>
    /// <li>
    /// <p>Can't start with <code>kube</code></p></li>
    /// <li>
    /// <p>Must match the following regular expression: <code>^\[a-z0-9\](\[-a-z0-9\]*\[a-z0-9\])?$</code></p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/">Namespaces</a> in the <i>Kubernetes documentation</i>. This namespace can be different from the <code>kubernetesNamespace</code> set in the compute environment's <code>EksConfiguration</code>, but must have identical role-based access control (RBAC) roles as the compute environment's <code>kubernetesNamespace</code>. For multi-node parallel jobs, the same value must be provided across all the node ranges.</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The namespace of the Amazon EKS cluster. In Kubernetes, namespaces provide a mechanism for isolating groups of resources within a single cluster. Names of resources need to be unique within a namespace, but not across namespaces. Batch places Batch Job pods in this namespace. If this field is provided, the value can't be empty or null. It must meet the following requirements:</p>
    /// <ul>
    /// <li>
    /// <p>1-63 characters long</p></li>
    /// <li>
    /// <p>Can't be set to default</p></li>
    /// <li>
    /// <p>Can't start with <code>kube</code></p></li>
    /// <li>
    /// <p>Must match the following regular expression: <code>^\[a-z0-9\](\[-a-z0-9\]*\[a-z0-9\])?$</code></p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/">Namespaces</a> in the <i>Kubernetes documentation</i>. This namespace can be different from the <code>kubernetesNamespace</code> set in the compute environment's <code>EksConfiguration</code>, but must have identical role-based access control (RBAC) roles as the compute environment's <code>kubernetesNamespace</code>. For multi-node parallel jobs, the same value must be provided across all the node ranges.</p>
    pub fn get_namespace(&self) -> &::std::option::Option<::std::string::String> {
        &self.namespace
    }
    /// Consumes the builder and constructs a [`EksMetadata`](crate::types::EksMetadata).
    pub fn build(self) -> crate::types::EksMetadata {
        crate::types::EksMetadata {
            labels: self.labels,
            annotations: self.annotations,
            namespace: self.namespace,
        }
    }
}
