// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents a job attempt.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AttemptDetail {
    /// <p>The details for the container in this job attempt.</p>
    pub container: ::std::option::Option<crate::types::AttemptContainerDetail>,
    /// <p>The Unix timestamp (in milliseconds) for when the attempt was started (when the attempt transitioned from the <code>STARTING</code> state to the <code>RUNNING</code> state).</p>
    pub started_at: ::std::option::Option<i64>,
    /// <p>The Unix timestamp (in milliseconds) for when the attempt was stopped (when the attempt transitioned from the <code>RUNNING</code> state to a terminal state, such as <code>SUCCEEDED</code> or <code>FAILED</code>).</p>
    pub stopped_at: ::std::option::Option<i64>,
    /// <p>A short, human-readable string to provide additional details for the current status of the job attempt.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The properties for a task definition that describes the container and volume definitions of an Amazon ECS task.</p>
    pub task_properties: ::std::option::Option<::std::vec::Vec<crate::types::AttemptEcsTaskDetails>>,
}
impl AttemptDetail {
    /// <p>The details for the container in this job attempt.</p>
    pub fn container(&self) -> ::std::option::Option<&crate::types::AttemptContainerDetail> {
        self.container.as_ref()
    }
    /// <p>The Unix timestamp (in milliseconds) for when the attempt was started (when the attempt transitioned from the <code>STARTING</code> state to the <code>RUNNING</code> state).</p>
    pub fn started_at(&self) -> ::std::option::Option<i64> {
        self.started_at
    }
    /// <p>The Unix timestamp (in milliseconds) for when the attempt was stopped (when the attempt transitioned from the <code>RUNNING</code> state to a terminal state, such as <code>SUCCEEDED</code> or <code>FAILED</code>).</p>
    pub fn stopped_at(&self) -> ::std::option::Option<i64> {
        self.stopped_at
    }
    /// <p>A short, human-readable string to provide additional details for the current status of the job attempt.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The properties for a task definition that describes the container and volume definitions of an Amazon ECS task.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.task_properties.is_none()`.
    pub fn task_properties(&self) -> &[crate::types::AttemptEcsTaskDetails] {
        self.task_properties.as_deref().unwrap_or_default()
    }
}
impl AttemptDetail {
    /// Creates a new builder-style object to manufacture [`AttemptDetail`](crate::types::AttemptDetail).
    pub fn builder() -> crate::types::builders::AttemptDetailBuilder {
        crate::types::builders::AttemptDetailBuilder::default()
    }
}

/// A builder for [`AttemptDetail`](crate::types::AttemptDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AttemptDetailBuilder {
    pub(crate) container: ::std::option::Option<crate::types::AttemptContainerDetail>,
    pub(crate) started_at: ::std::option::Option<i64>,
    pub(crate) stopped_at: ::std::option::Option<i64>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) task_properties: ::std::option::Option<::std::vec::Vec<crate::types::AttemptEcsTaskDetails>>,
}
impl AttemptDetailBuilder {
    /// <p>The details for the container in this job attempt.</p>
    pub fn container(mut self, input: crate::types::AttemptContainerDetail) -> Self {
        self.container = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details for the container in this job attempt.</p>
    pub fn set_container(mut self, input: ::std::option::Option<crate::types::AttemptContainerDetail>) -> Self {
        self.container = input;
        self
    }
    /// <p>The details for the container in this job attempt.</p>
    pub fn get_container(&self) -> &::std::option::Option<crate::types::AttemptContainerDetail> {
        &self.container
    }
    /// <p>The Unix timestamp (in milliseconds) for when the attempt was started (when the attempt transitioned from the <code>STARTING</code> state to the <code>RUNNING</code> state).</p>
    pub fn started_at(mut self, input: i64) -> Self {
        self.started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the attempt was started (when the attempt transitioned from the <code>STARTING</code> state to the <code>RUNNING</code> state).</p>
    pub fn set_started_at(mut self, input: ::std::option::Option<i64>) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the attempt was started (when the attempt transitioned from the <code>STARTING</code> state to the <code>RUNNING</code> state).</p>
    pub fn get_started_at(&self) -> &::std::option::Option<i64> {
        &self.started_at
    }
    /// <p>The Unix timestamp (in milliseconds) for when the attempt was stopped (when the attempt transitioned from the <code>RUNNING</code> state to a terminal state, such as <code>SUCCEEDED</code> or <code>FAILED</code>).</p>
    pub fn stopped_at(mut self, input: i64) -> Self {
        self.stopped_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the attempt was stopped (when the attempt transitioned from the <code>RUNNING</code> state to a terminal state, such as <code>SUCCEEDED</code> or <code>FAILED</code>).</p>
    pub fn set_stopped_at(mut self, input: ::std::option::Option<i64>) -> Self {
        self.stopped_at = input;
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the attempt was stopped (when the attempt transitioned from the <code>RUNNING</code> state to a terminal state, such as <code>SUCCEEDED</code> or <code>FAILED</code>).</p>
    pub fn get_stopped_at(&self) -> &::std::option::Option<i64> {
        &self.stopped_at
    }
    /// <p>A short, human-readable string to provide additional details for the current status of the job attempt.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A short, human-readable string to provide additional details for the current status of the job attempt.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>A short, human-readable string to provide additional details for the current status of the job attempt.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// Appends an item to `task_properties`.
    ///
    /// To override the contents of this collection use [`set_task_properties`](Self::set_task_properties).
    ///
    /// <p>The properties for a task definition that describes the container and volume definitions of an Amazon ECS task.</p>
    pub fn task_properties(mut self, input: crate::types::AttemptEcsTaskDetails) -> Self {
        let mut v = self.task_properties.unwrap_or_default();
        v.push(input);
        self.task_properties = ::std::option::Option::Some(v);
        self
    }
    /// <p>The properties for a task definition that describes the container and volume definitions of an Amazon ECS task.</p>
    pub fn set_task_properties(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AttemptEcsTaskDetails>>) -> Self {
        self.task_properties = input;
        self
    }
    /// <p>The properties for a task definition that describes the container and volume definitions of an Amazon ECS task.</p>
    pub fn get_task_properties(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AttemptEcsTaskDetails>> {
        &self.task_properties
    }
    /// Consumes the builder and constructs a [`AttemptDetail`](crate::types::AttemptDetail).
    pub fn build(self) -> crate::types::AttemptDetail {
        crate::types::AttemptDetail {
            container: self.container,
            started_at: self.started_at,
            stopped_at: self.stopped_at,
            status_reason: self.status_reason,
            task_properties: self.task_properties,
        }
    }
}
