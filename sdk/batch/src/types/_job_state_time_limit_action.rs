// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies an action that Batch will take after the job has remained at the head of the queue in the specified state for longer than the specified time.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JobStateTimeLimitAction {
    /// <p>The reason to log for the action being taken.</p>
    pub reason: ::std::option::Option<::std::string::String>,
    /// <p>The state of the job needed to trigger the action. The only supported value is <code>RUNNABLE</code>.</p>
    pub state: ::std::option::Option<crate::types::JobStateTimeLimitActionsState>,
    /// <p>The approximate amount of time, in seconds, that must pass with the job in the specified state before the action is taken. The minimum value is 600 (10 minutes) and the maximum value is 86,400 (24 hours).</p>
    pub max_time_seconds: ::std::option::Option<i32>,
    /// <p>The action to take when a job is at the head of the job queue in the specified state for the specified period of time. The only supported value is <code>CANCEL</code>, which will cancel the job.</p>
    pub action: ::std::option::Option<crate::types::JobStateTimeLimitActionsAction>,
}
impl JobStateTimeLimitAction {
    /// <p>The reason to log for the action being taken.</p>
    pub fn reason(&self) -> ::std::option::Option<&str> {
        self.reason.as_deref()
    }
    /// <p>The state of the job needed to trigger the action. The only supported value is <code>RUNNABLE</code>.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::JobStateTimeLimitActionsState> {
        self.state.as_ref()
    }
    /// <p>The approximate amount of time, in seconds, that must pass with the job in the specified state before the action is taken. The minimum value is 600 (10 minutes) and the maximum value is 86,400 (24 hours).</p>
    pub fn max_time_seconds(&self) -> ::std::option::Option<i32> {
        self.max_time_seconds
    }
    /// <p>The action to take when a job is at the head of the job queue in the specified state for the specified period of time. The only supported value is <code>CANCEL</code>, which will cancel the job.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::JobStateTimeLimitActionsAction> {
        self.action.as_ref()
    }
}
impl JobStateTimeLimitAction {
    /// Creates a new builder-style object to manufacture [`JobStateTimeLimitAction`](crate::types::JobStateTimeLimitAction).
    pub fn builder() -> crate::types::builders::JobStateTimeLimitActionBuilder {
        crate::types::builders::JobStateTimeLimitActionBuilder::default()
    }
}

/// A builder for [`JobStateTimeLimitAction`](crate::types::JobStateTimeLimitAction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct JobStateTimeLimitActionBuilder {
    pub(crate) reason: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::JobStateTimeLimitActionsState>,
    pub(crate) max_time_seconds: ::std::option::Option<i32>,
    pub(crate) action: ::std::option::Option<crate::types::JobStateTimeLimitActionsAction>,
}
impl JobStateTimeLimitActionBuilder {
    /// <p>The reason to log for the action being taken.</p>
    /// This field is required.
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason to log for the action being taken.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>The reason to log for the action being taken.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// <p>The state of the job needed to trigger the action. The only supported value is <code>RUNNABLE</code>.</p>
    /// This field is required.
    pub fn state(mut self, input: crate::types::JobStateTimeLimitActionsState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the job needed to trigger the action. The only supported value is <code>RUNNABLE</code>.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::JobStateTimeLimitActionsState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the job needed to trigger the action. The only supported value is <code>RUNNABLE</code>.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::JobStateTimeLimitActionsState> {
        &self.state
    }
    /// <p>The approximate amount of time, in seconds, that must pass with the job in the specified state before the action is taken. The minimum value is 600 (10 minutes) and the maximum value is 86,400 (24 hours).</p>
    /// This field is required.
    pub fn max_time_seconds(mut self, input: i32) -> Self {
        self.max_time_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The approximate amount of time, in seconds, that must pass with the job in the specified state before the action is taken. The minimum value is 600 (10 minutes) and the maximum value is 86,400 (24 hours).</p>
    pub fn set_max_time_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_time_seconds = input;
        self
    }
    /// <p>The approximate amount of time, in seconds, that must pass with the job in the specified state before the action is taken. The minimum value is 600 (10 minutes) and the maximum value is 86,400 (24 hours).</p>
    pub fn get_max_time_seconds(&self) -> &::std::option::Option<i32> {
        &self.max_time_seconds
    }
    /// <p>The action to take when a job is at the head of the job queue in the specified state for the specified period of time. The only supported value is <code>CANCEL</code>, which will cancel the job.</p>
    /// This field is required.
    pub fn action(mut self, input: crate::types::JobStateTimeLimitActionsAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action to take when a job is at the head of the job queue in the specified state for the specified period of time. The only supported value is <code>CANCEL</code>, which will cancel the job.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::JobStateTimeLimitActionsAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action to take when a job is at the head of the job queue in the specified state for the specified period of time. The only supported value is <code>CANCEL</code>, which will cancel the job.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::JobStateTimeLimitActionsAction> {
        &self.action
    }
    /// Consumes the builder and constructs a [`JobStateTimeLimitAction`](crate::types::JobStateTimeLimitAction).
    pub fn build(self) -> crate::types::JobStateTimeLimitAction {
        crate::types::JobStateTimeLimitAction {
            reason: self.reason,
            state: self.state,
            max_time_seconds: self.max_time_seconds,
            action: self.action,
        }
    }
}
