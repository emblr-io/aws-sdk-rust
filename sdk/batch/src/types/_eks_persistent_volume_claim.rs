// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A <code>persistentVolumeClaim</code> volume is used to mount a <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/">PersistentVolume</a> into a Pod. PersistentVolumeClaims are a way for users to "claim" durable storage without knowing the details of the particular cloud environment. See the information about <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/">PersistentVolumes</a> in the <i>Kubernetes documentation</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EksPersistentVolumeClaim {
    /// <p>The name of the <code>persistentVolumeClaim</code> bounded to a <code>persistentVolume</code>. For more information, see <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims"> Persistent Volume Claims</a> in the <i>Kubernetes documentation</i>.</p>
    pub claim_name: ::std::option::Option<::std::string::String>,
    /// <p>An optional boolean value indicating if the mount is read only. Default is false. For more information, see <a href="https://kubernetes.io/docs/concepts/storage/volumes/#read-only-mounts"> Read Only Mounts</a> in the <i>Kubernetes documentation</i>.</p>
    pub read_only: ::std::option::Option<bool>,
}
impl EksPersistentVolumeClaim {
    /// <p>The name of the <code>persistentVolumeClaim</code> bounded to a <code>persistentVolume</code>. For more information, see <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims"> Persistent Volume Claims</a> in the <i>Kubernetes documentation</i>.</p>
    pub fn claim_name(&self) -> ::std::option::Option<&str> {
        self.claim_name.as_deref()
    }
    /// <p>An optional boolean value indicating if the mount is read only. Default is false. For more information, see <a href="https://kubernetes.io/docs/concepts/storage/volumes/#read-only-mounts"> Read Only Mounts</a> in the <i>Kubernetes documentation</i>.</p>
    pub fn read_only(&self) -> ::std::option::Option<bool> {
        self.read_only
    }
}
impl EksPersistentVolumeClaim {
    /// Creates a new builder-style object to manufacture [`EksPersistentVolumeClaim`](crate::types::EksPersistentVolumeClaim).
    pub fn builder() -> crate::types::builders::EksPersistentVolumeClaimBuilder {
        crate::types::builders::EksPersistentVolumeClaimBuilder::default()
    }
}

/// A builder for [`EksPersistentVolumeClaim`](crate::types::EksPersistentVolumeClaim).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EksPersistentVolumeClaimBuilder {
    pub(crate) claim_name: ::std::option::Option<::std::string::String>,
    pub(crate) read_only: ::std::option::Option<bool>,
}
impl EksPersistentVolumeClaimBuilder {
    /// <p>The name of the <code>persistentVolumeClaim</code> bounded to a <code>persistentVolume</code>. For more information, see <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims"> Persistent Volume Claims</a> in the <i>Kubernetes documentation</i>.</p>
    /// This field is required.
    pub fn claim_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.claim_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the <code>persistentVolumeClaim</code> bounded to a <code>persistentVolume</code>. For more information, see <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims"> Persistent Volume Claims</a> in the <i>Kubernetes documentation</i>.</p>
    pub fn set_claim_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.claim_name = input;
        self
    }
    /// <p>The name of the <code>persistentVolumeClaim</code> bounded to a <code>persistentVolume</code>. For more information, see <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims"> Persistent Volume Claims</a> in the <i>Kubernetes documentation</i>.</p>
    pub fn get_claim_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.claim_name
    }
    /// <p>An optional boolean value indicating if the mount is read only. Default is false. For more information, see <a href="https://kubernetes.io/docs/concepts/storage/volumes/#read-only-mounts"> Read Only Mounts</a> in the <i>Kubernetes documentation</i>.</p>
    pub fn read_only(mut self, input: bool) -> Self {
        self.read_only = ::std::option::Option::Some(input);
        self
    }
    /// <p>An optional boolean value indicating if the mount is read only. Default is false. For more information, see <a href="https://kubernetes.io/docs/concepts/storage/volumes/#read-only-mounts"> Read Only Mounts</a> in the <i>Kubernetes documentation</i>.</p>
    pub fn set_read_only(mut self, input: ::std::option::Option<bool>) -> Self {
        self.read_only = input;
        self
    }
    /// <p>An optional boolean value indicating if the mount is read only. Default is false. For more information, see <a href="https://kubernetes.io/docs/concepts/storage/volumes/#read-only-mounts"> Read Only Mounts</a> in the <i>Kubernetes documentation</i>.</p>
    pub fn get_read_only(&self) -> &::std::option::Option<bool> {
        &self.read_only
    }
    /// Consumes the builder and constructs a [`EksPersistentVolumeClaim`](crate::types::EksPersistentVolumeClaim).
    pub fn build(self) -> crate::types::EksPersistentVolumeClaim {
        crate::types::EksPersistentVolumeClaim {
            claim_name: self.claim_name,
            read_only: self.read_only,
        }
    }
}
