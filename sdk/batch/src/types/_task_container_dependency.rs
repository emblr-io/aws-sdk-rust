// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of containers that this task depends on.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TaskContainerDependency {
    /// <p>A unique identifier for the container.</p>
    pub container_name: ::std::option::Option<::std::string::String>,
    /// <p>The dependency condition of the container. The following are the available conditions and their behavior:</p>
    /// <ul>
    /// <li>
    /// <p><code>START</code> - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started before permitting other containers to start.</p></li>
    /// <li>
    /// <p><code>COMPLETE</code> - This condition validates that a dependent container runs to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that run a script and then exit. This condition can't be set on an essential container.</p></li>
    /// <li>
    /// <p><code>SUCCESS</code> - This condition is the same as <code>COMPLETE</code>, but it also requires that the container exits with a zero status. This condition can't be set on an essential container.</p></li>
    /// </ul>
    pub condition: ::std::option::Option<::std::string::String>,
}
impl TaskContainerDependency {
    /// <p>A unique identifier for the container.</p>
    pub fn container_name(&self) -> ::std::option::Option<&str> {
        self.container_name.as_deref()
    }
    /// <p>The dependency condition of the container. The following are the available conditions and their behavior:</p>
    /// <ul>
    /// <li>
    /// <p><code>START</code> - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started before permitting other containers to start.</p></li>
    /// <li>
    /// <p><code>COMPLETE</code> - This condition validates that a dependent container runs to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that run a script and then exit. This condition can't be set on an essential container.</p></li>
    /// <li>
    /// <p><code>SUCCESS</code> - This condition is the same as <code>COMPLETE</code>, but it also requires that the container exits with a zero status. This condition can't be set on an essential container.</p></li>
    /// </ul>
    pub fn condition(&self) -> ::std::option::Option<&str> {
        self.condition.as_deref()
    }
}
impl TaskContainerDependency {
    /// Creates a new builder-style object to manufacture [`TaskContainerDependency`](crate::types::TaskContainerDependency).
    pub fn builder() -> crate::types::builders::TaskContainerDependencyBuilder {
        crate::types::builders::TaskContainerDependencyBuilder::default()
    }
}

/// A builder for [`TaskContainerDependency`](crate::types::TaskContainerDependency).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TaskContainerDependencyBuilder {
    pub(crate) container_name: ::std::option::Option<::std::string::String>,
    pub(crate) condition: ::std::option::Option<::std::string::String>,
}
impl TaskContainerDependencyBuilder {
    /// <p>A unique identifier for the container.</p>
    pub fn container_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.container_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the container.</p>
    pub fn set_container_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.container_name = input;
        self
    }
    /// <p>A unique identifier for the container.</p>
    pub fn get_container_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.container_name
    }
    /// <p>The dependency condition of the container. The following are the available conditions and their behavior:</p>
    /// <ul>
    /// <li>
    /// <p><code>START</code> - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started before permitting other containers to start.</p></li>
    /// <li>
    /// <p><code>COMPLETE</code> - This condition validates that a dependent container runs to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that run a script and then exit. This condition can't be set on an essential container.</p></li>
    /// <li>
    /// <p><code>SUCCESS</code> - This condition is the same as <code>COMPLETE</code>, but it also requires that the container exits with a zero status. This condition can't be set on an essential container.</p></li>
    /// </ul>
    pub fn condition(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.condition = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The dependency condition of the container. The following are the available conditions and their behavior:</p>
    /// <ul>
    /// <li>
    /// <p><code>START</code> - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started before permitting other containers to start.</p></li>
    /// <li>
    /// <p><code>COMPLETE</code> - This condition validates that a dependent container runs to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that run a script and then exit. This condition can't be set on an essential container.</p></li>
    /// <li>
    /// <p><code>SUCCESS</code> - This condition is the same as <code>COMPLETE</code>, but it also requires that the container exits with a zero status. This condition can't be set on an essential container.</p></li>
    /// </ul>
    pub fn set_condition(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.condition = input;
        self
    }
    /// <p>The dependency condition of the container. The following are the available conditions and their behavior:</p>
    /// <ul>
    /// <li>
    /// <p><code>START</code> - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started before permitting other containers to start.</p></li>
    /// <li>
    /// <p><code>COMPLETE</code> - This condition validates that a dependent container runs to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that run a script and then exit. This condition can't be set on an essential container.</p></li>
    /// <li>
    /// <p><code>SUCCESS</code> - This condition is the same as <code>COMPLETE</code>, but it also requires that the container exits with a zero status. This condition can't be set on an essential container.</p></li>
    /// </ul>
    pub fn get_condition(&self) -> &::std::option::Option<::std::string::String> {
        &self.condition
    }
    /// Consumes the builder and constructs a [`TaskContainerDependency`](crate::types::TaskContainerDependency).
    pub fn build(self) -> crate::types::TaskContainerDependency {
        crate::types::TaskContainerDependency {
            container_name: self.container_name,
            condition: self.condition,
        }
    }
}
