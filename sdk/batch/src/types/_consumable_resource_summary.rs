// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Current information about a consumable resource.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConsumableResourceSummary {
    /// <p>The Amazon Resource Name (ARN) of the consumable resource.</p>
    pub consumable_resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the consumable resource.</p>
    pub consumable_resource_name: ::std::option::Option<::std::string::String>,
    /// <p>The total amount of the consumable resource that is available.</p>
    pub total_quantity: ::std::option::Option<i64>,
    /// <p>The amount of the consumable resource that is currently in use.</p>
    pub in_use_quantity: ::std::option::Option<i64>,
    /// <p>Indicates whether the resource is available to be re-used after a job completes. Can be one of:</p>
    /// <ul>
    /// <li>
    /// <p><code>REPLENISHABLE</code></p></li>
    /// <li>
    /// <p><code>NON_REPLENISHABLE</code></p></li>
    /// </ul>
    pub resource_type: ::std::option::Option<::std::string::String>,
}
impl ConsumableResourceSummary {
    /// <p>The Amazon Resource Name (ARN) of the consumable resource.</p>
    pub fn consumable_resource_arn(&self) -> ::std::option::Option<&str> {
        self.consumable_resource_arn.as_deref()
    }
    /// <p>The name of the consumable resource.</p>
    pub fn consumable_resource_name(&self) -> ::std::option::Option<&str> {
        self.consumable_resource_name.as_deref()
    }
    /// <p>The total amount of the consumable resource that is available.</p>
    pub fn total_quantity(&self) -> ::std::option::Option<i64> {
        self.total_quantity
    }
    /// <p>The amount of the consumable resource that is currently in use.</p>
    pub fn in_use_quantity(&self) -> ::std::option::Option<i64> {
        self.in_use_quantity
    }
    /// <p>Indicates whether the resource is available to be re-used after a job completes. Can be one of:</p>
    /// <ul>
    /// <li>
    /// <p><code>REPLENISHABLE</code></p></li>
    /// <li>
    /// <p><code>NON_REPLENISHABLE</code></p></li>
    /// </ul>
    pub fn resource_type(&self) -> ::std::option::Option<&str> {
        self.resource_type.as_deref()
    }
}
impl ConsumableResourceSummary {
    /// Creates a new builder-style object to manufacture [`ConsumableResourceSummary`](crate::types::ConsumableResourceSummary).
    pub fn builder() -> crate::types::builders::ConsumableResourceSummaryBuilder {
        crate::types::builders::ConsumableResourceSummaryBuilder::default()
    }
}

/// A builder for [`ConsumableResourceSummary`](crate::types::ConsumableResourceSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConsumableResourceSummaryBuilder {
    pub(crate) consumable_resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) consumable_resource_name: ::std::option::Option<::std::string::String>,
    pub(crate) total_quantity: ::std::option::Option<i64>,
    pub(crate) in_use_quantity: ::std::option::Option<i64>,
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
}
impl ConsumableResourceSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the consumable resource.</p>
    /// This field is required.
    pub fn consumable_resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.consumable_resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the consumable resource.</p>
    pub fn set_consumable_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.consumable_resource_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the consumable resource.</p>
    pub fn get_consumable_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.consumable_resource_arn
    }
    /// <p>The name of the consumable resource.</p>
    /// This field is required.
    pub fn consumable_resource_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.consumable_resource_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the consumable resource.</p>
    pub fn set_consumable_resource_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.consumable_resource_name = input;
        self
    }
    /// <p>The name of the consumable resource.</p>
    pub fn get_consumable_resource_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.consumable_resource_name
    }
    /// <p>The total amount of the consumable resource that is available.</p>
    pub fn total_quantity(mut self, input: i64) -> Self {
        self.total_quantity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total amount of the consumable resource that is available.</p>
    pub fn set_total_quantity(mut self, input: ::std::option::Option<i64>) -> Self {
        self.total_quantity = input;
        self
    }
    /// <p>The total amount of the consumable resource that is available.</p>
    pub fn get_total_quantity(&self) -> &::std::option::Option<i64> {
        &self.total_quantity
    }
    /// <p>The amount of the consumable resource that is currently in use.</p>
    pub fn in_use_quantity(mut self, input: i64) -> Self {
        self.in_use_quantity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of the consumable resource that is currently in use.</p>
    pub fn set_in_use_quantity(mut self, input: ::std::option::Option<i64>) -> Self {
        self.in_use_quantity = input;
        self
    }
    /// <p>The amount of the consumable resource that is currently in use.</p>
    pub fn get_in_use_quantity(&self) -> &::std::option::Option<i64> {
        &self.in_use_quantity
    }
    /// <p>Indicates whether the resource is available to be re-used after a job completes. Can be one of:</p>
    /// <ul>
    /// <li>
    /// <p><code>REPLENISHABLE</code></p></li>
    /// <li>
    /// <p><code>NON_REPLENISHABLE</code></p></li>
    /// </ul>
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates whether the resource is available to be re-used after a job completes. Can be one of:</p>
    /// <ul>
    /// <li>
    /// <p><code>REPLENISHABLE</code></p></li>
    /// <li>
    /// <p><code>NON_REPLENISHABLE</code></p></li>
    /// </ul>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>Indicates whether the resource is available to be re-used after a job completes. Can be one of:</p>
    /// <ul>
    /// <li>
    /// <p><code>REPLENISHABLE</code></p></li>
    /// <li>
    /// <p><code>NON_REPLENISHABLE</code></p></li>
    /// </ul>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// Consumes the builder and constructs a [`ConsumableResourceSummary`](crate::types::ConsumableResourceSummary).
    pub fn build(self) -> crate::types::ConsumableResourceSummary {
        crate::types::ConsumableResourceSummary {
            consumable_resource_arn: self.consumable_resource_arn,
            consumable_resource_name: self.consumable_resource_name,
            total_quantity: self.total_quantity,
            in_use_quantity: self.in_use_quantity,
            resource_type: self.resource_type,
        }
    }
}
