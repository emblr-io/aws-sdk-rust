// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Current information about a consumable resource required by a job.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListJobsByConsumableResourceSummary {
    /// <p>The Amazon Resource Name (ARN) of the job.</p>
    pub job_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the job queue.</p>
    pub job_queue_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the job.</p>
    pub job_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the job definition.</p>
    pub job_definition_arn: ::std::option::Option<::std::string::String>,
    /// <p>The fair-share scheduling policy identifier for the job.</p>
    pub share_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The status of the job. Can be one of:</p>
    /// <ul>
    /// <li>
    /// <p><code>SUBMITTED</code></p></li>
    /// <li>
    /// <p><code>PENDING</code></p></li>
    /// <li>
    /// <p><code>RUNNABLE</code></p></li>
    /// <li>
    /// <p><code>STARTING</code></p></li>
    /// <li>
    /// <p><code>RUNNING</code></p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code></p></li>
    /// <li>
    /// <p><code>FAILED</code></p></li>
    /// </ul>
    pub job_status: ::std::option::Option<::std::string::String>,
    /// <p>The total amount of the consumable resource that is available.</p>
    pub quantity: ::std::option::Option<i64>,
    /// <p>A short, human-readable string to provide more details for the current status of the job.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The Unix timestamp for when the job was started. More specifically, it's when the job transitioned from the <code>STARTING</code> state to the <code>RUNNING</code> state.</p>
    pub started_at: ::std::option::Option<i64>,
    /// <p>The Unix timestamp (in milliseconds) for when the consumable resource was created.</p>
    pub created_at: ::std::option::Option<i64>,
    /// <p>Contains a list of consumable resources required by the job.</p>
    pub consumable_resource_properties: ::std::option::Option<crate::types::ConsumableResourceProperties>,
}
impl ListJobsByConsumableResourceSummary {
    /// <p>The Amazon Resource Name (ARN) of the job.</p>
    pub fn job_arn(&self) -> ::std::option::Option<&str> {
        self.job_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the job queue.</p>
    pub fn job_queue_arn(&self) -> ::std::option::Option<&str> {
        self.job_queue_arn.as_deref()
    }
    /// <p>The name of the job.</p>
    pub fn job_name(&self) -> ::std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the job definition.</p>
    pub fn job_definition_arn(&self) -> ::std::option::Option<&str> {
        self.job_definition_arn.as_deref()
    }
    /// <p>The fair-share scheduling policy identifier for the job.</p>
    pub fn share_identifier(&self) -> ::std::option::Option<&str> {
        self.share_identifier.as_deref()
    }
    /// <p>The status of the job. Can be one of:</p>
    /// <ul>
    /// <li>
    /// <p><code>SUBMITTED</code></p></li>
    /// <li>
    /// <p><code>PENDING</code></p></li>
    /// <li>
    /// <p><code>RUNNABLE</code></p></li>
    /// <li>
    /// <p><code>STARTING</code></p></li>
    /// <li>
    /// <p><code>RUNNING</code></p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code></p></li>
    /// <li>
    /// <p><code>FAILED</code></p></li>
    /// </ul>
    pub fn job_status(&self) -> ::std::option::Option<&str> {
        self.job_status.as_deref()
    }
    /// <p>The total amount of the consumable resource that is available.</p>
    pub fn quantity(&self) -> ::std::option::Option<i64> {
        self.quantity
    }
    /// <p>A short, human-readable string to provide more details for the current status of the job.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The Unix timestamp for when the job was started. More specifically, it's when the job transitioned from the <code>STARTING</code> state to the <code>RUNNING</code> state.</p>
    pub fn started_at(&self) -> ::std::option::Option<i64> {
        self.started_at
    }
    /// <p>The Unix timestamp (in milliseconds) for when the consumable resource was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<i64> {
        self.created_at
    }
    /// <p>Contains a list of consumable resources required by the job.</p>
    pub fn consumable_resource_properties(&self) -> ::std::option::Option<&crate::types::ConsumableResourceProperties> {
        self.consumable_resource_properties.as_ref()
    }
}
impl ListJobsByConsumableResourceSummary {
    /// Creates a new builder-style object to manufacture [`ListJobsByConsumableResourceSummary`](crate::types::ListJobsByConsumableResourceSummary).
    pub fn builder() -> crate::types::builders::ListJobsByConsumableResourceSummaryBuilder {
        crate::types::builders::ListJobsByConsumableResourceSummaryBuilder::default()
    }
}

/// A builder for [`ListJobsByConsumableResourceSummary`](crate::types::ListJobsByConsumableResourceSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListJobsByConsumableResourceSummaryBuilder {
    pub(crate) job_arn: ::std::option::Option<::std::string::String>,
    pub(crate) job_queue_arn: ::std::option::Option<::std::string::String>,
    pub(crate) job_name: ::std::option::Option<::std::string::String>,
    pub(crate) job_definition_arn: ::std::option::Option<::std::string::String>,
    pub(crate) share_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) job_status: ::std::option::Option<::std::string::String>,
    pub(crate) quantity: ::std::option::Option<i64>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) started_at: ::std::option::Option<i64>,
    pub(crate) created_at: ::std::option::Option<i64>,
    pub(crate) consumable_resource_properties: ::std::option::Option<crate::types::ConsumableResourceProperties>,
}
impl ListJobsByConsumableResourceSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the job.</p>
    /// This field is required.
    pub fn job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the job.</p>
    pub fn set_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the job.</p>
    pub fn get_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the job queue.</p>
    /// This field is required.
    pub fn job_queue_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_queue_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the job queue.</p>
    pub fn set_job_queue_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_queue_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the job queue.</p>
    pub fn get_job_queue_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_queue_arn
    }
    /// <p>The name of the job.</p>
    /// This field is required.
    pub fn job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the job.</p>
    pub fn set_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>The name of the job.</p>
    pub fn get_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_name
    }
    /// <p>The Amazon Resource Name (ARN) of the job definition.</p>
    pub fn job_definition_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_definition_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the job definition.</p>
    pub fn set_job_definition_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_definition_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the job definition.</p>
    pub fn get_job_definition_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_definition_arn
    }
    /// <p>The fair-share scheduling policy identifier for the job.</p>
    pub fn share_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.share_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The fair-share scheduling policy identifier for the job.</p>
    pub fn set_share_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.share_identifier = input;
        self
    }
    /// <p>The fair-share scheduling policy identifier for the job.</p>
    pub fn get_share_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.share_identifier
    }
    /// <p>The status of the job. Can be one of:</p>
    /// <ul>
    /// <li>
    /// <p><code>SUBMITTED</code></p></li>
    /// <li>
    /// <p><code>PENDING</code></p></li>
    /// <li>
    /// <p><code>RUNNABLE</code></p></li>
    /// <li>
    /// <p><code>STARTING</code></p></li>
    /// <li>
    /// <p><code>RUNNING</code></p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code></p></li>
    /// <li>
    /// <p><code>FAILED</code></p></li>
    /// </ul>
    /// This field is required.
    pub fn job_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the job. Can be one of:</p>
    /// <ul>
    /// <li>
    /// <p><code>SUBMITTED</code></p></li>
    /// <li>
    /// <p><code>PENDING</code></p></li>
    /// <li>
    /// <p><code>RUNNABLE</code></p></li>
    /// <li>
    /// <p><code>STARTING</code></p></li>
    /// <li>
    /// <p><code>RUNNING</code></p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code></p></li>
    /// <li>
    /// <p><code>FAILED</code></p></li>
    /// </ul>
    pub fn set_job_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_status = input;
        self
    }
    /// <p>The status of the job. Can be one of:</p>
    /// <ul>
    /// <li>
    /// <p><code>SUBMITTED</code></p></li>
    /// <li>
    /// <p><code>PENDING</code></p></li>
    /// <li>
    /// <p><code>RUNNABLE</code></p></li>
    /// <li>
    /// <p><code>STARTING</code></p></li>
    /// <li>
    /// <p><code>RUNNING</code></p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code></p></li>
    /// <li>
    /// <p><code>FAILED</code></p></li>
    /// </ul>
    pub fn get_job_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_status
    }
    /// <p>The total amount of the consumable resource that is available.</p>
    /// This field is required.
    pub fn quantity(mut self, input: i64) -> Self {
        self.quantity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total amount of the consumable resource that is available.</p>
    pub fn set_quantity(mut self, input: ::std::option::Option<i64>) -> Self {
        self.quantity = input;
        self
    }
    /// <p>The total amount of the consumable resource that is available.</p>
    pub fn get_quantity(&self) -> &::std::option::Option<i64> {
        &self.quantity
    }
    /// <p>A short, human-readable string to provide more details for the current status of the job.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A short, human-readable string to provide more details for the current status of the job.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>A short, human-readable string to provide more details for the current status of the job.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The Unix timestamp for when the job was started. More specifically, it's when the job transitioned from the <code>STARTING</code> state to the <code>RUNNING</code> state.</p>
    pub fn started_at(mut self, input: i64) -> Self {
        self.started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp for when the job was started. More specifically, it's when the job transitioned from the <code>STARTING</code> state to the <code>RUNNING</code> state.</p>
    pub fn set_started_at(mut self, input: ::std::option::Option<i64>) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The Unix timestamp for when the job was started. More specifically, it's when the job transitioned from the <code>STARTING</code> state to the <code>RUNNING</code> state.</p>
    pub fn get_started_at(&self) -> &::std::option::Option<i64> {
        &self.started_at
    }
    /// <p>The Unix timestamp (in milliseconds) for when the consumable resource was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: i64) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the consumable resource was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<i64>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the consumable resource was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<i64> {
        &self.created_at
    }
    /// <p>Contains a list of consumable resources required by the job.</p>
    /// This field is required.
    pub fn consumable_resource_properties(mut self, input: crate::types::ConsumableResourceProperties) -> Self {
        self.consumable_resource_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains a list of consumable resources required by the job.</p>
    pub fn set_consumable_resource_properties(mut self, input: ::std::option::Option<crate::types::ConsumableResourceProperties>) -> Self {
        self.consumable_resource_properties = input;
        self
    }
    /// <p>Contains a list of consumable resources required by the job.</p>
    pub fn get_consumable_resource_properties(&self) -> &::std::option::Option<crate::types::ConsumableResourceProperties> {
        &self.consumable_resource_properties
    }
    /// Consumes the builder and constructs a [`ListJobsByConsumableResourceSummary`](crate::types::ListJobsByConsumableResourceSummary).
    pub fn build(self) -> crate::types::ListJobsByConsumableResourceSummary {
        crate::types::ListJobsByConsumableResourceSummary {
            job_arn: self.job_arn,
            job_queue_arn: self.job_queue_arn,
            job_name: self.job_name,
            job_definition_arn: self.job_definition_arn,
            share_identifier: self.share_identifier,
            job_status: self.job_status,
            quantity: self.quantity,
            status_reason: self.status_reason,
            started_at: self.started_at,
            created_at: self.created_at,
            consumable_resource_properties: self.consumable_resource_properties,
        }
    }
}
