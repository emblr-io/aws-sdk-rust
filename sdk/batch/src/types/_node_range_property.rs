// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This is an object that represents the properties of the node range for a multi-node parallel job.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NodeRangeProperty {
    /// <p>The range of nodes, using node index values. A range of <code>0:3</code> indicates nodes with index values of <code>0</code> through <code>3</code>. If the starting range value is omitted (<code>:n</code>), then <code>0</code> is used to start the range. If the ending range value is omitted (<code>n:</code>), then the highest possible node index is used to end the range. Your accumulative node ranges must account for all nodes (<code>0:n</code>). You can nest node ranges (for example, <code>0:10</code> and <code>4:5</code>). In this case, the <code>4:5</code> range properties override the <code>0:10</code> properties.</p>
    pub target_nodes: ::std::option::Option<::std::string::String>,
    /// <p>The container details for the node range.</p>
    pub container: ::std::option::Option<crate::types::ContainerProperties>,
    /// <p>The instance types of the underlying host infrastructure of a multi-node parallel job.</p><note>
    /// <p>This parameter isn't applicable to jobs that are running on Fargate resources.</p>
    /// <p>In addition, this list object is currently limited to one element.</p>
    /// </note>
    pub instance_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>This is an object that represents the properties of the node range for a multi-node parallel job.</p>
    pub ecs_properties: ::std::option::Option<crate::types::EcsProperties>,
    /// <p>This is an object that represents the properties of the node range for a multi-node parallel job.</p>
    pub eks_properties: ::std::option::Option<crate::types::EksProperties>,
    /// <p>Contains a list of consumable resources required by a job.</p>
    pub consumable_resource_properties: ::std::option::Option<crate::types::ConsumableResourceProperties>,
}
impl NodeRangeProperty {
    /// <p>The range of nodes, using node index values. A range of <code>0:3</code> indicates nodes with index values of <code>0</code> through <code>3</code>. If the starting range value is omitted (<code>:n</code>), then <code>0</code> is used to start the range. If the ending range value is omitted (<code>n:</code>), then the highest possible node index is used to end the range. Your accumulative node ranges must account for all nodes (<code>0:n</code>). You can nest node ranges (for example, <code>0:10</code> and <code>4:5</code>). In this case, the <code>4:5</code> range properties override the <code>0:10</code> properties.</p>
    pub fn target_nodes(&self) -> ::std::option::Option<&str> {
        self.target_nodes.as_deref()
    }
    /// <p>The container details for the node range.</p>
    pub fn container(&self) -> ::std::option::Option<&crate::types::ContainerProperties> {
        self.container.as_ref()
    }
    /// <p>The instance types of the underlying host infrastructure of a multi-node parallel job.</p><note>
    /// <p>This parameter isn't applicable to jobs that are running on Fargate resources.</p>
    /// <p>In addition, this list object is currently limited to one element.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instance_types.is_none()`.
    pub fn instance_types(&self) -> &[::std::string::String] {
        self.instance_types.as_deref().unwrap_or_default()
    }
    /// <p>This is an object that represents the properties of the node range for a multi-node parallel job.</p>
    pub fn ecs_properties(&self) -> ::std::option::Option<&crate::types::EcsProperties> {
        self.ecs_properties.as_ref()
    }
    /// <p>This is an object that represents the properties of the node range for a multi-node parallel job.</p>
    pub fn eks_properties(&self) -> ::std::option::Option<&crate::types::EksProperties> {
        self.eks_properties.as_ref()
    }
    /// <p>Contains a list of consumable resources required by a job.</p>
    pub fn consumable_resource_properties(&self) -> ::std::option::Option<&crate::types::ConsumableResourceProperties> {
        self.consumable_resource_properties.as_ref()
    }
}
impl NodeRangeProperty {
    /// Creates a new builder-style object to manufacture [`NodeRangeProperty`](crate::types::NodeRangeProperty).
    pub fn builder() -> crate::types::builders::NodeRangePropertyBuilder {
        crate::types::builders::NodeRangePropertyBuilder::default()
    }
}

/// A builder for [`NodeRangeProperty`](crate::types::NodeRangeProperty).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NodeRangePropertyBuilder {
    pub(crate) target_nodes: ::std::option::Option<::std::string::String>,
    pub(crate) container: ::std::option::Option<crate::types::ContainerProperties>,
    pub(crate) instance_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) ecs_properties: ::std::option::Option<crate::types::EcsProperties>,
    pub(crate) eks_properties: ::std::option::Option<crate::types::EksProperties>,
    pub(crate) consumable_resource_properties: ::std::option::Option<crate::types::ConsumableResourceProperties>,
}
impl NodeRangePropertyBuilder {
    /// <p>The range of nodes, using node index values. A range of <code>0:3</code> indicates nodes with index values of <code>0</code> through <code>3</code>. If the starting range value is omitted (<code>:n</code>), then <code>0</code> is used to start the range. If the ending range value is omitted (<code>n:</code>), then the highest possible node index is used to end the range. Your accumulative node ranges must account for all nodes (<code>0:n</code>). You can nest node ranges (for example, <code>0:10</code> and <code>4:5</code>). In this case, the <code>4:5</code> range properties override the <code>0:10</code> properties.</p>
    /// This field is required.
    pub fn target_nodes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_nodes = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The range of nodes, using node index values. A range of <code>0:3</code> indicates nodes with index values of <code>0</code> through <code>3</code>. If the starting range value is omitted (<code>:n</code>), then <code>0</code> is used to start the range. If the ending range value is omitted (<code>n:</code>), then the highest possible node index is used to end the range. Your accumulative node ranges must account for all nodes (<code>0:n</code>). You can nest node ranges (for example, <code>0:10</code> and <code>4:5</code>). In this case, the <code>4:5</code> range properties override the <code>0:10</code> properties.</p>
    pub fn set_target_nodes(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_nodes = input;
        self
    }
    /// <p>The range of nodes, using node index values. A range of <code>0:3</code> indicates nodes with index values of <code>0</code> through <code>3</code>. If the starting range value is omitted (<code>:n</code>), then <code>0</code> is used to start the range. If the ending range value is omitted (<code>n:</code>), then the highest possible node index is used to end the range. Your accumulative node ranges must account for all nodes (<code>0:n</code>). You can nest node ranges (for example, <code>0:10</code> and <code>4:5</code>). In this case, the <code>4:5</code> range properties override the <code>0:10</code> properties.</p>
    pub fn get_target_nodes(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_nodes
    }
    /// <p>The container details for the node range.</p>
    pub fn container(mut self, input: crate::types::ContainerProperties) -> Self {
        self.container = ::std::option::Option::Some(input);
        self
    }
    /// <p>The container details for the node range.</p>
    pub fn set_container(mut self, input: ::std::option::Option<crate::types::ContainerProperties>) -> Self {
        self.container = input;
        self
    }
    /// <p>The container details for the node range.</p>
    pub fn get_container(&self) -> &::std::option::Option<crate::types::ContainerProperties> {
        &self.container
    }
    /// Appends an item to `instance_types`.
    ///
    /// To override the contents of this collection use [`set_instance_types`](Self::set_instance_types).
    ///
    /// <p>The instance types of the underlying host infrastructure of a multi-node parallel job.</p><note>
    /// <p>This parameter isn't applicable to jobs that are running on Fargate resources.</p>
    /// <p>In addition, this list object is currently limited to one element.</p>
    /// </note>
    pub fn instance_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.instance_types.unwrap_or_default();
        v.push(input.into());
        self.instance_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The instance types of the underlying host infrastructure of a multi-node parallel job.</p><note>
    /// <p>This parameter isn't applicable to jobs that are running on Fargate resources.</p>
    /// <p>In addition, this list object is currently limited to one element.</p>
    /// </note>
    pub fn set_instance_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.instance_types = input;
        self
    }
    /// <p>The instance types of the underlying host infrastructure of a multi-node parallel job.</p><note>
    /// <p>This parameter isn't applicable to jobs that are running on Fargate resources.</p>
    /// <p>In addition, this list object is currently limited to one element.</p>
    /// </note>
    pub fn get_instance_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.instance_types
    }
    /// <p>This is an object that represents the properties of the node range for a multi-node parallel job.</p>
    pub fn ecs_properties(mut self, input: crate::types::EcsProperties) -> Self {
        self.ecs_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>This is an object that represents the properties of the node range for a multi-node parallel job.</p>
    pub fn set_ecs_properties(mut self, input: ::std::option::Option<crate::types::EcsProperties>) -> Self {
        self.ecs_properties = input;
        self
    }
    /// <p>This is an object that represents the properties of the node range for a multi-node parallel job.</p>
    pub fn get_ecs_properties(&self) -> &::std::option::Option<crate::types::EcsProperties> {
        &self.ecs_properties
    }
    /// <p>This is an object that represents the properties of the node range for a multi-node parallel job.</p>
    pub fn eks_properties(mut self, input: crate::types::EksProperties) -> Self {
        self.eks_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>This is an object that represents the properties of the node range for a multi-node parallel job.</p>
    pub fn set_eks_properties(mut self, input: ::std::option::Option<crate::types::EksProperties>) -> Self {
        self.eks_properties = input;
        self
    }
    /// <p>This is an object that represents the properties of the node range for a multi-node parallel job.</p>
    pub fn get_eks_properties(&self) -> &::std::option::Option<crate::types::EksProperties> {
        &self.eks_properties
    }
    /// <p>Contains a list of consumable resources required by a job.</p>
    pub fn consumable_resource_properties(mut self, input: crate::types::ConsumableResourceProperties) -> Self {
        self.consumable_resource_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains a list of consumable resources required by a job.</p>
    pub fn set_consumable_resource_properties(mut self, input: ::std::option::Option<crate::types::ConsumableResourceProperties>) -> Self {
        self.consumable_resource_properties = input;
        self
    }
    /// <p>Contains a list of consumable resources required by a job.</p>
    pub fn get_consumable_resource_properties(&self) -> &::std::option::Option<crate::types::ConsumableResourceProperties> {
        &self.consumable_resource_properties
    }
    /// Consumes the builder and constructs a [`NodeRangeProperty`](crate::types::NodeRangeProperty).
    pub fn build(self) -> crate::types::NodeRangeProperty {
        crate::types::NodeRangeProperty {
            target_nodes: self.target_nodes,
            container: self.container,
            instance_types: self.instance_types,
            ecs_properties: self.ecs_properties,
            eks_properties: self.eks_properties,
            consumable_resource_properties: self.consumable_resource_properties,
        }
    }
}
