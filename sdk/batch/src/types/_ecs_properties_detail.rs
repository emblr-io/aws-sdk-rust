// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains the details for the Amazon ECS resources of a job.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EcsPropertiesDetail {
    /// <p>The properties for the Amazon ECS task definition of a job.</p>
    pub task_properties: ::std::option::Option<::std::vec::Vec<crate::types::EcsTaskDetails>>,
}
impl EcsPropertiesDetail {
    /// <p>The properties for the Amazon ECS task definition of a job.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.task_properties.is_none()`.
    pub fn task_properties(&self) -> &[crate::types::EcsTaskDetails] {
        self.task_properties.as_deref().unwrap_or_default()
    }
}
impl EcsPropertiesDetail {
    /// Creates a new builder-style object to manufacture [`EcsPropertiesDetail`](crate::types::EcsPropertiesDetail).
    pub fn builder() -> crate::types::builders::EcsPropertiesDetailBuilder {
        crate::types::builders::EcsPropertiesDetailBuilder::default()
    }
}

/// A builder for [`EcsPropertiesDetail`](crate::types::EcsPropertiesDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EcsPropertiesDetailBuilder {
    pub(crate) task_properties: ::std::option::Option<::std::vec::Vec<crate::types::EcsTaskDetails>>,
}
impl EcsPropertiesDetailBuilder {
    /// Appends an item to `task_properties`.
    ///
    /// To override the contents of this collection use [`set_task_properties`](Self::set_task_properties).
    ///
    /// <p>The properties for the Amazon ECS task definition of a job.</p>
    pub fn task_properties(mut self, input: crate::types::EcsTaskDetails) -> Self {
        let mut v = self.task_properties.unwrap_or_default();
        v.push(input);
        self.task_properties = ::std::option::Option::Some(v);
        self
    }
    /// <p>The properties for the Amazon ECS task definition of a job.</p>
    pub fn set_task_properties(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EcsTaskDetails>>) -> Self {
        self.task_properties = input;
        self
    }
    /// <p>The properties for the Amazon ECS task definition of a job.</p>
    pub fn get_task_properties(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EcsTaskDetails>> {
        &self.task_properties
    }
    /// Consumes the builder and constructs a [`EcsPropertiesDetail`](crate::types::EcsPropertiesDetail).
    pub fn build(self) -> crate::types::EcsPropertiesDetail {
        crate::types::EcsPropertiesDetail {
            task_properties: self.task_properties,
        }
    }
}
