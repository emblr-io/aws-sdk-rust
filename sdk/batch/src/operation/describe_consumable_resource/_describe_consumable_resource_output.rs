// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeConsumableResourceOutput {
    /// <p>The name of the consumable resource.</p>
    pub consumable_resource_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the consumable resource.</p>
    pub consumable_resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The total amount of the consumable resource that is available.</p>
    pub total_quantity: ::std::option::Option<i64>,
    /// <p>The amount of the consumable resource that is currently in use.</p>
    pub in_use_quantity: ::std::option::Option<i64>,
    /// <p>The amount of the consumable resource that is currently available to use.</p>
    pub available_quantity: ::std::option::Option<i64>,
    /// <p>Indicates whether the resource is available to be re-used after a job completes. Can be one of:</p>
    /// <ul>
    /// <li>
    /// <p><code>REPLENISHABLE</code></p></li>
    /// <li>
    /// <p><code>NON_REPLENISHABLE</code></p></li>
    /// </ul>
    pub resource_type: ::std::option::Option<::std::string::String>,
    /// <p>The Unix timestamp (in milliseconds) for when the consumable resource was created.</p>
    pub created_at: ::std::option::Option<i64>,
    /// <p>The tags that you apply to the consumable resource to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html">Tagging your Batch resources</a>.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl DescribeConsumableResourceOutput {
    /// <p>The name of the consumable resource.</p>
    pub fn consumable_resource_name(&self) -> ::std::option::Option<&str> {
        self.consumable_resource_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the consumable resource.</p>
    pub fn consumable_resource_arn(&self) -> ::std::option::Option<&str> {
        self.consumable_resource_arn.as_deref()
    }
    /// <p>The total amount of the consumable resource that is available.</p>
    pub fn total_quantity(&self) -> ::std::option::Option<i64> {
        self.total_quantity
    }
    /// <p>The amount of the consumable resource that is currently in use.</p>
    pub fn in_use_quantity(&self) -> ::std::option::Option<i64> {
        self.in_use_quantity
    }
    /// <p>The amount of the consumable resource that is currently available to use.</p>
    pub fn available_quantity(&self) -> ::std::option::Option<i64> {
        self.available_quantity
    }
    /// <p>Indicates whether the resource is available to be re-used after a job completes. Can be one of:</p>
    /// <ul>
    /// <li>
    /// <p><code>REPLENISHABLE</code></p></li>
    /// <li>
    /// <p><code>NON_REPLENISHABLE</code></p></li>
    /// </ul>
    pub fn resource_type(&self) -> ::std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The Unix timestamp (in milliseconds) for when the consumable resource was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<i64> {
        self.created_at
    }
    /// <p>The tags that you apply to the consumable resource to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html">Tagging your Batch resources</a>.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeConsumableResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeConsumableResourceOutput {
    /// Creates a new builder-style object to manufacture [`DescribeConsumableResourceOutput`](crate::operation::describe_consumable_resource::DescribeConsumableResourceOutput).
    pub fn builder() -> crate::operation::describe_consumable_resource::builders::DescribeConsumableResourceOutputBuilder {
        crate::operation::describe_consumable_resource::builders::DescribeConsumableResourceOutputBuilder::default()
    }
}

/// A builder for [`DescribeConsumableResourceOutput`](crate::operation::describe_consumable_resource::DescribeConsumableResourceOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeConsumableResourceOutputBuilder {
    pub(crate) consumable_resource_name: ::std::option::Option<::std::string::String>,
    pub(crate) consumable_resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) total_quantity: ::std::option::Option<i64>,
    pub(crate) in_use_quantity: ::std::option::Option<i64>,
    pub(crate) available_quantity: ::std::option::Option<i64>,
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<i64>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl DescribeConsumableResourceOutputBuilder {
    /// <p>The name of the consumable resource.</p>
    /// This field is required.
    pub fn consumable_resource_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.consumable_resource_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the consumable resource.</p>
    pub fn set_consumable_resource_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.consumable_resource_name = input;
        self
    }
    /// <p>The name of the consumable resource.</p>
    pub fn get_consumable_resource_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.consumable_resource_name
    }
    /// <p>The Amazon Resource Name (ARN) of the consumable resource.</p>
    /// This field is required.
    pub fn consumable_resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.consumable_resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the consumable resource.</p>
    pub fn set_consumable_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.consumable_resource_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the consumable resource.</p>
    pub fn get_consumable_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.consumable_resource_arn
    }
    /// <p>The total amount of the consumable resource that is available.</p>
    pub fn total_quantity(mut self, input: i64) -> Self {
        self.total_quantity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total amount of the consumable resource that is available.</p>
    pub fn set_total_quantity(mut self, input: ::std::option::Option<i64>) -> Self {
        self.total_quantity = input;
        self
    }
    /// <p>The total amount of the consumable resource that is available.</p>
    pub fn get_total_quantity(&self) -> &::std::option::Option<i64> {
        &self.total_quantity
    }
    /// <p>The amount of the consumable resource that is currently in use.</p>
    pub fn in_use_quantity(mut self, input: i64) -> Self {
        self.in_use_quantity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of the consumable resource that is currently in use.</p>
    pub fn set_in_use_quantity(mut self, input: ::std::option::Option<i64>) -> Self {
        self.in_use_quantity = input;
        self
    }
    /// <p>The amount of the consumable resource that is currently in use.</p>
    pub fn get_in_use_quantity(&self) -> &::std::option::Option<i64> {
        &self.in_use_quantity
    }
    /// <p>The amount of the consumable resource that is currently available to use.</p>
    pub fn available_quantity(mut self, input: i64) -> Self {
        self.available_quantity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of the consumable resource that is currently available to use.</p>
    pub fn set_available_quantity(mut self, input: ::std::option::Option<i64>) -> Self {
        self.available_quantity = input;
        self
    }
    /// <p>The amount of the consumable resource that is currently available to use.</p>
    pub fn get_available_quantity(&self) -> &::std::option::Option<i64> {
        &self.available_quantity
    }
    /// <p>Indicates whether the resource is available to be re-used after a job completes. Can be one of:</p>
    /// <ul>
    /// <li>
    /// <p><code>REPLENISHABLE</code></p></li>
    /// <li>
    /// <p><code>NON_REPLENISHABLE</code></p></li>
    /// </ul>
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates whether the resource is available to be re-used after a job completes. Can be one of:</p>
    /// <ul>
    /// <li>
    /// <p><code>REPLENISHABLE</code></p></li>
    /// <li>
    /// <p><code>NON_REPLENISHABLE</code></p></li>
    /// </ul>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>Indicates whether the resource is available to be re-used after a job completes. Can be one of:</p>
    /// <ul>
    /// <li>
    /// <p><code>REPLENISHABLE</code></p></li>
    /// <li>
    /// <p><code>NON_REPLENISHABLE</code></p></li>
    /// </ul>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// <p>The Unix timestamp (in milliseconds) for when the consumable resource was created.</p>
    pub fn created_at(mut self, input: i64) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the consumable resource was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<i64>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the consumable resource was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<i64> {
        &self.created_at
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags that you apply to the consumable resource to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html">Tagging your Batch resources</a>.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags that you apply to the consumable resource to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html">Tagging your Batch resources</a>.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags that you apply to the consumable resource to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html">Tagging your Batch resources</a>.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeConsumableResourceOutput`](crate::operation::describe_consumable_resource::DescribeConsumableResourceOutput).
    pub fn build(self) -> crate::operation::describe_consumable_resource::DescribeConsumableResourceOutput {
        crate::operation::describe_consumable_resource::DescribeConsumableResourceOutput {
            consumable_resource_name: self.consumable_resource_name,
            consumable_resource_arn: self.consumable_resource_arn,
            total_quantity: self.total_quantity,
            in_use_quantity: self.in_use_quantity,
            available_quantity: self.available_quantity,
            resource_type: self.resource_type,
            created_at: self.created_at,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
