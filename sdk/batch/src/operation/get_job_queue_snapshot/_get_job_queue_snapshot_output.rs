// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetJobQueueSnapshotOutput {
    /// <p>The list of the first 100 <code>RUNNABLE</code> jobs in each job queue. For first-in-first-out (FIFO) job queues, jobs are ordered based on their submission time. For fair-share scheduling (FSS) job queues, jobs are ordered based on their job priority and share usage.</p>
    pub front_of_queue: ::std::option::Option<crate::types::FrontOfQueueDetail>,
    _request_id: Option<String>,
}
impl GetJobQueueSnapshotOutput {
    /// <p>The list of the first 100 <code>RUNNABLE</code> jobs in each job queue. For first-in-first-out (FIFO) job queues, jobs are ordered based on their submission time. For fair-share scheduling (FSS) job queues, jobs are ordered based on their job priority and share usage.</p>
    pub fn front_of_queue(&self) -> ::std::option::Option<&crate::types::FrontOfQueueDetail> {
        self.front_of_queue.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetJobQueueSnapshotOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetJobQueueSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`GetJobQueueSnapshotOutput`](crate::operation::get_job_queue_snapshot::GetJobQueueSnapshotOutput).
    pub fn builder() -> crate::operation::get_job_queue_snapshot::builders::GetJobQueueSnapshotOutputBuilder {
        crate::operation::get_job_queue_snapshot::builders::GetJobQueueSnapshotOutputBuilder::default()
    }
}

/// A builder for [`GetJobQueueSnapshotOutput`](crate::operation::get_job_queue_snapshot::GetJobQueueSnapshotOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetJobQueueSnapshotOutputBuilder {
    pub(crate) front_of_queue: ::std::option::Option<crate::types::FrontOfQueueDetail>,
    _request_id: Option<String>,
}
impl GetJobQueueSnapshotOutputBuilder {
    /// <p>The list of the first 100 <code>RUNNABLE</code> jobs in each job queue. For first-in-first-out (FIFO) job queues, jobs are ordered based on their submission time. For fair-share scheduling (FSS) job queues, jobs are ordered based on their job priority and share usage.</p>
    pub fn front_of_queue(mut self, input: crate::types::FrontOfQueueDetail) -> Self {
        self.front_of_queue = ::std::option::Option::Some(input);
        self
    }
    /// <p>The list of the first 100 <code>RUNNABLE</code> jobs in each job queue. For first-in-first-out (FIFO) job queues, jobs are ordered based on their submission time. For fair-share scheduling (FSS) job queues, jobs are ordered based on their job priority and share usage.</p>
    pub fn set_front_of_queue(mut self, input: ::std::option::Option<crate::types::FrontOfQueueDetail>) -> Self {
        self.front_of_queue = input;
        self
    }
    /// <p>The list of the first 100 <code>RUNNABLE</code> jobs in each job queue. For first-in-first-out (FIFO) job queues, jobs are ordered based on their submission time. For fair-share scheduling (FSS) job queues, jobs are ordered based on their job priority and share usage.</p>
    pub fn get_front_of_queue(&self) -> &::std::option::Option<crate::types::FrontOfQueueDetail> {
        &self.front_of_queue
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetJobQueueSnapshotOutput`](crate::operation::get_job_queue_snapshot::GetJobQueueSnapshotOutput).
    pub fn build(self) -> crate::operation::get_job_queue_snapshot::GetJobQueueSnapshotOutput {
        crate::operation::get_job_queue_snapshot::GetJobQueueSnapshotOutput {
            front_of_queue: self.front_of_queue,
            _request_id: self._request_id,
        }
    }
}
