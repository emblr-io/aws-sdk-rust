// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of the query listed.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QuerySummary {
    /// <p>A string representation of the id of the query.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The actual query text. The <code>queryString</code> may be truncated if the actual query string is too long.</p>
    pub query_string: ::std::option::Option<::std::string::String>,
    /// <p>The amount of time, in milliseconds, the query has waited in the queue before being picked up by a worker thread.</p>
    pub waited: ::std::option::Option<i32>,
    /// <p>The running time of the query, in milliseconds.</p>
    pub elapsed: ::std::option::Option<i32>,
    /// <p>State of the query.</p>
    pub state: ::std::option::Option<crate::types::QueryState>,
}
impl QuerySummary {
    /// <p>A string representation of the id of the query.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The actual query text. The <code>queryString</code> may be truncated if the actual query string is too long.</p>
    pub fn query_string(&self) -> ::std::option::Option<&str> {
        self.query_string.as_deref()
    }
    /// <p>The amount of time, in milliseconds, the query has waited in the queue before being picked up by a worker thread.</p>
    pub fn waited(&self) -> ::std::option::Option<i32> {
        self.waited
    }
    /// <p>The running time of the query, in milliseconds.</p>
    pub fn elapsed(&self) -> ::std::option::Option<i32> {
        self.elapsed
    }
    /// <p>State of the query.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::QueryState> {
        self.state.as_ref()
    }
}
impl QuerySummary {
    /// Creates a new builder-style object to manufacture [`QuerySummary`](crate::types::QuerySummary).
    pub fn builder() -> crate::types::builders::QuerySummaryBuilder {
        crate::types::builders::QuerySummaryBuilder::default()
    }
}

/// A builder for [`QuerySummary`](crate::types::QuerySummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QuerySummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) query_string: ::std::option::Option<::std::string::String>,
    pub(crate) waited: ::std::option::Option<i32>,
    pub(crate) elapsed: ::std::option::Option<i32>,
    pub(crate) state: ::std::option::Option<crate::types::QueryState>,
}
impl QuerySummaryBuilder {
    /// <p>A string representation of the id of the query.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string representation of the id of the query.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>A string representation of the id of the query.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The actual query text. The <code>queryString</code> may be truncated if the actual query string is too long.</p>
    pub fn query_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query_string = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The actual query text. The <code>queryString</code> may be truncated if the actual query string is too long.</p>
    pub fn set_query_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query_string = input;
        self
    }
    /// <p>The actual query text. The <code>queryString</code> may be truncated if the actual query string is too long.</p>
    pub fn get_query_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.query_string
    }
    /// <p>The amount of time, in milliseconds, the query has waited in the queue before being picked up by a worker thread.</p>
    pub fn waited(mut self, input: i32) -> Self {
        self.waited = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of time, in milliseconds, the query has waited in the queue before being picked up by a worker thread.</p>
    pub fn set_waited(mut self, input: ::std::option::Option<i32>) -> Self {
        self.waited = input;
        self
    }
    /// <p>The amount of time, in milliseconds, the query has waited in the queue before being picked up by a worker thread.</p>
    pub fn get_waited(&self) -> &::std::option::Option<i32> {
        &self.waited
    }
    /// <p>The running time of the query, in milliseconds.</p>
    pub fn elapsed(mut self, input: i32) -> Self {
        self.elapsed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The running time of the query, in milliseconds.</p>
    pub fn set_elapsed(mut self, input: ::std::option::Option<i32>) -> Self {
        self.elapsed = input;
        self
    }
    /// <p>The running time of the query, in milliseconds.</p>
    pub fn get_elapsed(&self) -> &::std::option::Option<i32> {
        &self.elapsed
    }
    /// <p>State of the query.</p>
    pub fn state(mut self, input: crate::types::QueryState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>State of the query.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::QueryState>) -> Self {
        self.state = input;
        self
    }
    /// <p>State of the query.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::QueryState> {
        &self.state
    }
    /// Consumes the builder and constructs a [`QuerySummary`](crate::types::QuerySummary).
    pub fn build(self) -> crate::types::QuerySummary {
        crate::types::QuerySummary {
            id: self.id,
            query_string: self.query_string,
            waited: self.waited,
            elapsed: self.elapsed,
            state: self.state,
        }
    }
}
