// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This is the top-level field for specifying vertex or edge filters. If the ExportFilter is not provided, then all properties for all labels will be exported. If the ExportFilter is provided but is an empty object, then no data will be exported.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExportFilter {
    /// <p>Used to specify filters on a per-label basis for vertices. This allows you to control which vertex labels and properties are included in the export.</p>
    pub vertex_filter: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExportFilterElement>>,
    /// <p>Used to specify filters on a per-label basis for edges. This allows you to control which edge labels and properties are included in the export.</p>
    pub edge_filter: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExportFilterElement>>,
}
impl ExportFilter {
    /// <p>Used to specify filters on a per-label basis for vertices. This allows you to control which vertex labels and properties are included in the export.</p>
    pub fn vertex_filter(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::ExportFilterElement>> {
        self.vertex_filter.as_ref()
    }
    /// <p>Used to specify filters on a per-label basis for edges. This allows you to control which edge labels and properties are included in the export.</p>
    pub fn edge_filter(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::ExportFilterElement>> {
        self.edge_filter.as_ref()
    }
}
impl ExportFilter {
    /// Creates a new builder-style object to manufacture [`ExportFilter`](crate::types::ExportFilter).
    pub fn builder() -> crate::types::builders::ExportFilterBuilder {
        crate::types::builders::ExportFilterBuilder::default()
    }
}

/// A builder for [`ExportFilter`](crate::types::ExportFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ExportFilterBuilder {
    pub(crate) vertex_filter: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExportFilterElement>>,
    pub(crate) edge_filter: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExportFilterElement>>,
}
impl ExportFilterBuilder {
    /// Adds a key-value pair to `vertex_filter`.
    ///
    /// To override the contents of this collection use [`set_vertex_filter`](Self::set_vertex_filter).
    ///
    /// <p>Used to specify filters on a per-label basis for vertices. This allows you to control which vertex labels and properties are included in the export.</p>
    pub fn vertex_filter(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::ExportFilterElement) -> Self {
        let mut hash_map = self.vertex_filter.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.vertex_filter = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Used to specify filters on a per-label basis for vertices. This allows you to control which vertex labels and properties are included in the export.</p>
    pub fn set_vertex_filter(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExportFilterElement>>,
    ) -> Self {
        self.vertex_filter = input;
        self
    }
    /// <p>Used to specify filters on a per-label basis for vertices. This allows you to control which vertex labels and properties are included in the export.</p>
    pub fn get_vertex_filter(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExportFilterElement>> {
        &self.vertex_filter
    }
    /// Adds a key-value pair to `edge_filter`.
    ///
    /// To override the contents of this collection use [`set_edge_filter`](Self::set_edge_filter).
    ///
    /// <p>Used to specify filters on a per-label basis for edges. This allows you to control which edge labels and properties are included in the export.</p>
    pub fn edge_filter(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::ExportFilterElement) -> Self {
        let mut hash_map = self.edge_filter.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.edge_filter = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Used to specify filters on a per-label basis for edges. This allows you to control which edge labels and properties are included in the export.</p>
    pub fn set_edge_filter(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExportFilterElement>>,
    ) -> Self {
        self.edge_filter = input;
        self
    }
    /// <p>Used to specify filters on a per-label basis for edges. This allows you to control which edge labels and properties are included in the export.</p>
    pub fn get_edge_filter(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExportFilterElement>> {
        &self.edge_filter
    }
    /// Consumes the builder and constructs a [`ExportFilter`](crate::types::ExportFilter).
    pub fn build(self) -> crate::types::ExportFilter {
        crate::types::ExportFilter {
            vertex_filter: self.vertex_filter,
            edge_filter: self.edge_filter,
        }
    }
}
