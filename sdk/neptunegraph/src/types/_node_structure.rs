// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a node.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NodeStructure {
    /// <p>The number of instances of this node.</p>
    pub count: ::std::option::Option<i64>,
    /// <p>Properties associated with this node.</p>
    pub node_properties: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The outgoing edge labels associated with this node.</p>
    pub distinct_outgoing_edge_labels: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl NodeStructure {
    /// <p>The number of instances of this node.</p>
    pub fn count(&self) -> ::std::option::Option<i64> {
        self.count
    }
    /// <p>Properties associated with this node.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.node_properties.is_none()`.
    pub fn node_properties(&self) -> &[::std::string::String] {
        self.node_properties.as_deref().unwrap_or_default()
    }
    /// <p>The outgoing edge labels associated with this node.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.distinct_outgoing_edge_labels.is_none()`.
    pub fn distinct_outgoing_edge_labels(&self) -> &[::std::string::String] {
        self.distinct_outgoing_edge_labels.as_deref().unwrap_or_default()
    }
}
impl NodeStructure {
    /// Creates a new builder-style object to manufacture [`NodeStructure`](crate::types::NodeStructure).
    pub fn builder() -> crate::types::builders::NodeStructureBuilder {
        crate::types::builders::NodeStructureBuilder::default()
    }
}

/// A builder for [`NodeStructure`](crate::types::NodeStructure).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NodeStructureBuilder {
    pub(crate) count: ::std::option::Option<i64>,
    pub(crate) node_properties: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) distinct_outgoing_edge_labels: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl NodeStructureBuilder {
    /// <p>The number of instances of this node.</p>
    pub fn count(mut self, input: i64) -> Self {
        self.count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of instances of this node.</p>
    pub fn set_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.count = input;
        self
    }
    /// <p>The number of instances of this node.</p>
    pub fn get_count(&self) -> &::std::option::Option<i64> {
        &self.count
    }
    /// Appends an item to `node_properties`.
    ///
    /// To override the contents of this collection use [`set_node_properties`](Self::set_node_properties).
    ///
    /// <p>Properties associated with this node.</p>
    pub fn node_properties(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.node_properties.unwrap_or_default();
        v.push(input.into());
        self.node_properties = ::std::option::Option::Some(v);
        self
    }
    /// <p>Properties associated with this node.</p>
    pub fn set_node_properties(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.node_properties = input;
        self
    }
    /// <p>Properties associated with this node.</p>
    pub fn get_node_properties(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.node_properties
    }
    /// Appends an item to `distinct_outgoing_edge_labels`.
    ///
    /// To override the contents of this collection use [`set_distinct_outgoing_edge_labels`](Self::set_distinct_outgoing_edge_labels).
    ///
    /// <p>The outgoing edge labels associated with this node.</p>
    pub fn distinct_outgoing_edge_labels(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.distinct_outgoing_edge_labels.unwrap_or_default();
        v.push(input.into());
        self.distinct_outgoing_edge_labels = ::std::option::Option::Some(v);
        self
    }
    /// <p>The outgoing edge labels associated with this node.</p>
    pub fn set_distinct_outgoing_edge_labels(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.distinct_outgoing_edge_labels = input;
        self
    }
    /// <p>The outgoing edge labels associated with this node.</p>
    pub fn get_distinct_outgoing_edge_labels(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.distinct_outgoing_edge_labels
    }
    /// Consumes the builder and constructs a [`NodeStructure`](crate::types::NodeStructure).
    pub fn build(self) -> crate::types::NodeStructure {
        crate::types::NodeStructure {
            count: self.count,
            node_properties: self.node_properties,
            distinct_outgoing_edge_labels: self.distinct_outgoing_edge_labels,
        }
    }
}
