// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure representing a property's attributes. It is a map object of outputType, sourcePropertyName and multiValueHandling.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExportFilterPropertyAttributes {
    /// <p>Specifies the data type to use for the property in the exported data (e.g. "String", "Int", "Float"). If a type is not provided, the export process will determine the type. If a given property is present as multiple types (e.g. one vertex has "height" stored as a double, and another edge has it stored as a string), the type will be of Any type, otherwise, it will be the type of the property as present in vertices.</p>
    pub output_type: ::std::option::Option<::std::string::String>,
    /// <p>The name of the property as it exists in the original graph data. If not provided, it is assumed that the key matches the desired sourcePropertyName.</p>
    pub source_property_name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies how to handle properties that have multiple values. Can be either <code>TO_LIST</code> to export all values as a list, or <code>PICK_FIRST</code> to export the first value encountered. If not specified, the default value is <code>PICK_FIRST</code>.</p>
    pub multi_value_handling: crate::types::MultiValueHandlingType,
}
impl ExportFilterPropertyAttributes {
    /// <p>Specifies the data type to use for the property in the exported data (e.g. "String", "Int", "Float"). If a type is not provided, the export process will determine the type. If a given property is present as multiple types (e.g. one vertex has "height" stored as a double, and another edge has it stored as a string), the type will be of Any type, otherwise, it will be the type of the property as present in vertices.</p>
    pub fn output_type(&self) -> ::std::option::Option<&str> {
        self.output_type.as_deref()
    }
    /// <p>The name of the property as it exists in the original graph data. If not provided, it is assumed that the key matches the desired sourcePropertyName.</p>
    pub fn source_property_name(&self) -> ::std::option::Option<&str> {
        self.source_property_name.as_deref()
    }
    /// <p>Specifies how to handle properties that have multiple values. Can be either <code>TO_LIST</code> to export all values as a list, or <code>PICK_FIRST</code> to export the first value encountered. If not specified, the default value is <code>PICK_FIRST</code>.</p>
    pub fn multi_value_handling(&self) -> &crate::types::MultiValueHandlingType {
        &self.multi_value_handling
    }
}
impl ExportFilterPropertyAttributes {
    /// Creates a new builder-style object to manufacture [`ExportFilterPropertyAttributes`](crate::types::ExportFilterPropertyAttributes).
    pub fn builder() -> crate::types::builders::ExportFilterPropertyAttributesBuilder {
        crate::types::builders::ExportFilterPropertyAttributesBuilder::default()
    }
}

/// A builder for [`ExportFilterPropertyAttributes`](crate::types::ExportFilterPropertyAttributes).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ExportFilterPropertyAttributesBuilder {
    pub(crate) output_type: ::std::option::Option<::std::string::String>,
    pub(crate) source_property_name: ::std::option::Option<::std::string::String>,
    pub(crate) multi_value_handling: ::std::option::Option<crate::types::MultiValueHandlingType>,
}
impl ExportFilterPropertyAttributesBuilder {
    /// <p>Specifies the data type to use for the property in the exported data (e.g. "String", "Int", "Float"). If a type is not provided, the export process will determine the type. If a given property is present as multiple types (e.g. one vertex has "height" stored as a double, and another edge has it stored as a string), the type will be of Any type, otherwise, it will be the type of the property as present in vertices.</p>
    pub fn output_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.output_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the data type to use for the property in the exported data (e.g. "String", "Int", "Float"). If a type is not provided, the export process will determine the type. If a given property is present as multiple types (e.g. one vertex has "height" stored as a double, and another edge has it stored as a string), the type will be of Any type, otherwise, it will be the type of the property as present in vertices.</p>
    pub fn set_output_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.output_type = input;
        self
    }
    /// <p>Specifies the data type to use for the property in the exported data (e.g. "String", "Int", "Float"). If a type is not provided, the export process will determine the type. If a given property is present as multiple types (e.g. one vertex has "height" stored as a double, and another edge has it stored as a string), the type will be of Any type, otherwise, it will be the type of the property as present in vertices.</p>
    pub fn get_output_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.output_type
    }
    /// <p>The name of the property as it exists in the original graph data. If not provided, it is assumed that the key matches the desired sourcePropertyName.</p>
    pub fn source_property_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_property_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the property as it exists in the original graph data. If not provided, it is assumed that the key matches the desired sourcePropertyName.</p>
    pub fn set_source_property_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_property_name = input;
        self
    }
    /// <p>The name of the property as it exists in the original graph data. If not provided, it is assumed that the key matches the desired sourcePropertyName.</p>
    pub fn get_source_property_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_property_name
    }
    /// <p>Specifies how to handle properties that have multiple values. Can be either <code>TO_LIST</code> to export all values as a list, or <code>PICK_FIRST</code> to export the first value encountered. If not specified, the default value is <code>PICK_FIRST</code>.</p>
    pub fn multi_value_handling(mut self, input: crate::types::MultiValueHandlingType) -> Self {
        self.multi_value_handling = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies how to handle properties that have multiple values. Can be either <code>TO_LIST</code> to export all values as a list, or <code>PICK_FIRST</code> to export the first value encountered. If not specified, the default value is <code>PICK_FIRST</code>.</p>
    pub fn set_multi_value_handling(mut self, input: ::std::option::Option<crate::types::MultiValueHandlingType>) -> Self {
        self.multi_value_handling = input;
        self
    }
    /// <p>Specifies how to handle properties that have multiple values. Can be either <code>TO_LIST</code> to export all values as a list, or <code>PICK_FIRST</code> to export the first value encountered. If not specified, the default value is <code>PICK_FIRST</code>.</p>
    pub fn get_multi_value_handling(&self) -> &::std::option::Option<crate::types::MultiValueHandlingType> {
        &self.multi_value_handling
    }
    /// Consumes the builder and constructs a [`ExportFilterPropertyAttributes`](crate::types::ExportFilterPropertyAttributes).
    pub fn build(self) -> crate::types::ExportFilterPropertyAttributes {
        crate::types::ExportFilterPropertyAttributes {
            output_type: self.output_type,
            source_property_name: self.source_property_name,
            multi_value_handling: self.multi_value_handling.unwrap_or(
                "PICK_FIRST"
                    .parse::<crate::types::MultiValueHandlingType>()
                    .expect("static value validated to member"),
            ),
        }
    }
}
