// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartExportTaskInput {
    /// <p>The source graph identifier of the export task.</p>
    pub graph_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the IAM role that will allow data to be exported to the destination.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The format of the export task.</p>
    pub format: ::std::option::Option<crate::types::ExportFormat>,
    /// <p>The Amazon S3 URI where data will be exported to.</p>
    pub destination: ::std::option::Option<::std::string::String>,
    /// <p>The KMS key identifier of the export task.</p>
    pub kms_key_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The parquet type of the export task.</p>
    pub parquet_type: ::std::option::Option<crate::types::ParquetType>,
    /// <p>The export filter of the export task.</p>
    pub export_filter: ::std::option::Option<crate::types::ExportFilter>,
    /// <p>Tags to be applied to the export task.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl StartExportTaskInput {
    /// <p>The source graph identifier of the export task.</p>
    pub fn graph_identifier(&self) -> ::std::option::Option<&str> {
        self.graph_identifier.as_deref()
    }
    /// <p>The ARN of the IAM role that will allow data to be exported to the destination.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The format of the export task.</p>
    pub fn format(&self) -> ::std::option::Option<&crate::types::ExportFormat> {
        self.format.as_ref()
    }
    /// <p>The Amazon S3 URI where data will be exported to.</p>
    pub fn destination(&self) -> ::std::option::Option<&str> {
        self.destination.as_deref()
    }
    /// <p>The KMS key identifier of the export task.</p>
    pub fn kms_key_identifier(&self) -> ::std::option::Option<&str> {
        self.kms_key_identifier.as_deref()
    }
    /// <p>The parquet type of the export task.</p>
    pub fn parquet_type(&self) -> ::std::option::Option<&crate::types::ParquetType> {
        self.parquet_type.as_ref()
    }
    /// <p>The export filter of the export task.</p>
    pub fn export_filter(&self) -> ::std::option::Option<&crate::types::ExportFilter> {
        self.export_filter.as_ref()
    }
    /// <p>Tags to be applied to the export task.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl StartExportTaskInput {
    /// Creates a new builder-style object to manufacture [`StartExportTaskInput`](crate::operation::start_export_task::StartExportTaskInput).
    pub fn builder() -> crate::operation::start_export_task::builders::StartExportTaskInputBuilder {
        crate::operation::start_export_task::builders::StartExportTaskInputBuilder::default()
    }
}

/// A builder for [`StartExportTaskInput`](crate::operation::start_export_task::StartExportTaskInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartExportTaskInputBuilder {
    pub(crate) graph_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) format: ::std::option::Option<crate::types::ExportFormat>,
    pub(crate) destination: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) parquet_type: ::std::option::Option<crate::types::ParquetType>,
    pub(crate) export_filter: ::std::option::Option<crate::types::ExportFilter>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl StartExportTaskInputBuilder {
    /// <p>The source graph identifier of the export task.</p>
    /// This field is required.
    pub fn graph_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.graph_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source graph identifier of the export task.</p>
    pub fn set_graph_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.graph_identifier = input;
        self
    }
    /// <p>The source graph identifier of the export task.</p>
    pub fn get_graph_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.graph_identifier
    }
    /// <p>The ARN of the IAM role that will allow data to be exported to the destination.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that will allow data to be exported to the destination.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of the IAM role that will allow data to be exported to the destination.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The format of the export task.</p>
    /// This field is required.
    pub fn format(mut self, input: crate::types::ExportFormat) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format of the export task.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::ExportFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>The format of the export task.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::ExportFormat> {
        &self.format
    }
    /// <p>The Amazon S3 URI where data will be exported to.</p>
    /// This field is required.
    pub fn destination(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 URI where data will be exported to.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The Amazon S3 URI where data will be exported to.</p>
    pub fn get_destination(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination
    }
    /// <p>The KMS key identifier of the export task.</p>
    /// This field is required.
    pub fn kms_key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The KMS key identifier of the export task.</p>
    pub fn set_kms_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_identifier = input;
        self
    }
    /// <p>The KMS key identifier of the export task.</p>
    pub fn get_kms_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_identifier
    }
    /// <p>The parquet type of the export task.</p>
    pub fn parquet_type(mut self, input: crate::types::ParquetType) -> Self {
        self.parquet_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The parquet type of the export task.</p>
    pub fn set_parquet_type(mut self, input: ::std::option::Option<crate::types::ParquetType>) -> Self {
        self.parquet_type = input;
        self
    }
    /// <p>The parquet type of the export task.</p>
    pub fn get_parquet_type(&self) -> &::std::option::Option<crate::types::ParquetType> {
        &self.parquet_type
    }
    /// <p>The export filter of the export task.</p>
    pub fn export_filter(mut self, input: crate::types::ExportFilter) -> Self {
        self.export_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>The export filter of the export task.</p>
    pub fn set_export_filter(mut self, input: ::std::option::Option<crate::types::ExportFilter>) -> Self {
        self.export_filter = input;
        self
    }
    /// <p>The export filter of the export task.</p>
    pub fn get_export_filter(&self) -> &::std::option::Option<crate::types::ExportFilter> {
        &self.export_filter
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags to be applied to the export task.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Tags to be applied to the export task.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Tags to be applied to the export task.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`StartExportTaskInput`](crate::operation::start_export_task::StartExportTaskInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_export_task::StartExportTaskInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_export_task::StartExportTaskInput {
            graph_identifier: self.graph_identifier,
            role_arn: self.role_arn,
            format: self.format,
            destination: self.destination,
            kms_key_identifier: self.kms_key_identifier,
            parquet_type: self.parquet_type,
            export_filter: self.export_filter,
            tags: self.tags,
        })
    }
}
