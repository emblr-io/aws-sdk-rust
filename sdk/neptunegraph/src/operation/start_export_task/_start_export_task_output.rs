// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartExportTaskOutput {
    /// <p>The source graph identifier of the export task.</p>
    pub graph_id: ::std::string::String,
    /// <p>The ARN of the IAM role that will allow data to be exported to the destination.</p>
    pub role_arn: ::std::string::String,
    /// <p>The unique identifier of the export task.</p>
    pub task_id: ::std::string::String,
    /// <p>The current status of the export task.</p>
    pub status: crate::types::ExportTaskStatus,
    /// <p>The format of the export task.</p>
    pub format: crate::types::ExportFormat,
    /// <p>The Amazon S3 URI of the export task where data will be exported to.</p>
    pub destination: ::std::string::String,
    /// <p>The KMS key identifier of the export task.</p>
    pub kms_key_identifier: ::std::string::String,
    /// <p>The parquet type of the export task.</p>
    pub parquet_type: ::std::option::Option<crate::types::ParquetType>,
    /// <p>The reason that the export task has this status value.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The export filter of the export task.</p>
    pub export_filter: ::std::option::Option<crate::types::ExportFilter>,
    _request_id: Option<String>,
}
impl StartExportTaskOutput {
    /// <p>The source graph identifier of the export task.</p>
    pub fn graph_id(&self) -> &str {
        use std::ops::Deref;
        self.graph_id.deref()
    }
    /// <p>The ARN of the IAM role that will allow data to be exported to the destination.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>The unique identifier of the export task.</p>
    pub fn task_id(&self) -> &str {
        use std::ops::Deref;
        self.task_id.deref()
    }
    /// <p>The current status of the export task.</p>
    pub fn status(&self) -> &crate::types::ExportTaskStatus {
        &self.status
    }
    /// <p>The format of the export task.</p>
    pub fn format(&self) -> &crate::types::ExportFormat {
        &self.format
    }
    /// <p>The Amazon S3 URI of the export task where data will be exported to.</p>
    pub fn destination(&self) -> &str {
        use std::ops::Deref;
        self.destination.deref()
    }
    /// <p>The KMS key identifier of the export task.</p>
    pub fn kms_key_identifier(&self) -> &str {
        use std::ops::Deref;
        self.kms_key_identifier.deref()
    }
    /// <p>The parquet type of the export task.</p>
    pub fn parquet_type(&self) -> ::std::option::Option<&crate::types::ParquetType> {
        self.parquet_type.as_ref()
    }
    /// <p>The reason that the export task has this status value.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The export filter of the export task.</p>
    pub fn export_filter(&self) -> ::std::option::Option<&crate::types::ExportFilter> {
        self.export_filter.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for StartExportTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartExportTaskOutput {
    /// Creates a new builder-style object to manufacture [`StartExportTaskOutput`](crate::operation::start_export_task::StartExportTaskOutput).
    pub fn builder() -> crate::operation::start_export_task::builders::StartExportTaskOutputBuilder {
        crate::operation::start_export_task::builders::StartExportTaskOutputBuilder::default()
    }
}

/// A builder for [`StartExportTaskOutput`](crate::operation::start_export_task::StartExportTaskOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartExportTaskOutputBuilder {
    pub(crate) graph_id: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) task_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ExportTaskStatus>,
    pub(crate) format: ::std::option::Option<crate::types::ExportFormat>,
    pub(crate) destination: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) parquet_type: ::std::option::Option<crate::types::ParquetType>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) export_filter: ::std::option::Option<crate::types::ExportFilter>,
    _request_id: Option<String>,
}
impl StartExportTaskOutputBuilder {
    /// <p>The source graph identifier of the export task.</p>
    /// This field is required.
    pub fn graph_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.graph_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source graph identifier of the export task.</p>
    pub fn set_graph_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.graph_id = input;
        self
    }
    /// <p>The source graph identifier of the export task.</p>
    pub fn get_graph_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.graph_id
    }
    /// <p>The ARN of the IAM role that will allow data to be exported to the destination.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that will allow data to be exported to the destination.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of the IAM role that will allow data to be exported to the destination.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The unique identifier of the export task.</p>
    /// This field is required.
    pub fn task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the export task.</p>
    pub fn set_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_id = input;
        self
    }
    /// <p>The unique identifier of the export task.</p>
    pub fn get_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_id
    }
    /// <p>The current status of the export task.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ExportTaskStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the export task.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ExportTaskStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the export task.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ExportTaskStatus> {
        &self.status
    }
    /// <p>The format of the export task.</p>
    /// This field is required.
    pub fn format(mut self, input: crate::types::ExportFormat) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format of the export task.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::ExportFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>The format of the export task.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::ExportFormat> {
        &self.format
    }
    /// <p>The Amazon S3 URI of the export task where data will be exported to.</p>
    /// This field is required.
    pub fn destination(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 URI of the export task where data will be exported to.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The Amazon S3 URI of the export task where data will be exported to.</p>
    pub fn get_destination(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination
    }
    /// <p>The KMS key identifier of the export task.</p>
    /// This field is required.
    pub fn kms_key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The KMS key identifier of the export task.</p>
    pub fn set_kms_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_identifier = input;
        self
    }
    /// <p>The KMS key identifier of the export task.</p>
    pub fn get_kms_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_identifier
    }
    /// <p>The parquet type of the export task.</p>
    pub fn parquet_type(mut self, input: crate::types::ParquetType) -> Self {
        self.parquet_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The parquet type of the export task.</p>
    pub fn set_parquet_type(mut self, input: ::std::option::Option<crate::types::ParquetType>) -> Self {
        self.parquet_type = input;
        self
    }
    /// <p>The parquet type of the export task.</p>
    pub fn get_parquet_type(&self) -> &::std::option::Option<crate::types::ParquetType> {
        &self.parquet_type
    }
    /// <p>The reason that the export task has this status value.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason that the export task has this status value.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The reason that the export task has this status value.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The export filter of the export task.</p>
    pub fn export_filter(mut self, input: crate::types::ExportFilter) -> Self {
        self.export_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>The export filter of the export task.</p>
    pub fn set_export_filter(mut self, input: ::std::option::Option<crate::types::ExportFilter>) -> Self {
        self.export_filter = input;
        self
    }
    /// <p>The export filter of the export task.</p>
    pub fn get_export_filter(&self) -> &::std::option::Option<crate::types::ExportFilter> {
        &self.export_filter
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartExportTaskOutput`](crate::operation::start_export_task::StartExportTaskOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`graph_id`](crate::operation::start_export_task::builders::StartExportTaskOutputBuilder::graph_id)
    /// - [`role_arn`](crate::operation::start_export_task::builders::StartExportTaskOutputBuilder::role_arn)
    /// - [`task_id`](crate::operation::start_export_task::builders::StartExportTaskOutputBuilder::task_id)
    /// - [`status`](crate::operation::start_export_task::builders::StartExportTaskOutputBuilder::status)
    /// - [`format`](crate::operation::start_export_task::builders::StartExportTaskOutputBuilder::format)
    /// - [`destination`](crate::operation::start_export_task::builders::StartExportTaskOutputBuilder::destination)
    /// - [`kms_key_identifier`](crate::operation::start_export_task::builders::StartExportTaskOutputBuilder::kms_key_identifier)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_export_task::StartExportTaskOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_export_task::StartExportTaskOutput {
            graph_id: self.graph_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "graph_id",
                    "graph_id was not specified but it is required when building StartExportTaskOutput",
                )
            })?,
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building StartExportTaskOutput",
                )
            })?,
            task_id: self.task_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "task_id",
                    "task_id was not specified but it is required when building StartExportTaskOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building StartExportTaskOutput",
                )
            })?,
            format: self.format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "format",
                    "format was not specified but it is required when building StartExportTaskOutput",
                )
            })?,
            destination: self.destination.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "destination",
                    "destination was not specified but it is required when building StartExportTaskOutput",
                )
            })?,
            kms_key_identifier: self.kms_key_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "kms_key_identifier",
                    "kms_key_identifier was not specified but it is required when building StartExportTaskOutput",
                )
            })?,
            parquet_type: self.parquet_type,
            status_reason: self.status_reason,
            export_filter: self.export_filter,
            _request_id: self._request_id,
        })
    }
}
