// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
pub struct InvokeEndpointWithResponseStreamOutput {
    /// <p>A stream of payload parts. Each part contains a portion of the response for a streaming inference request.</p>
    #[cfg_attr(any(feature = "serde-serialize", feature = "serde-deserialize"), serde(skip))]
    pub body: crate::event_receiver::EventReceiver<crate::types::ResponseStream, crate::types::error::ResponseStreamError>,
    /// <p>The MIME type of the inference returned from the model container.</p>
    pub content_type: ::std::option::Option<::std::string::String>,
    /// <p>Identifies the production variant that was invoked.</p>
    pub invoked_production_variant: ::std::option::Option<::std::string::String>,
    /// <p>Provides additional information in the response about the inference returned by a model hosted at an Amazon SageMaker endpoint. The information is an opaque value that is forwarded verbatim. You could use this value, for example, to return an ID received in the <code>CustomAttributes</code> header of a request or other metadata that a service endpoint was programmed to produce. The value must consist of no more than 1024 visible US-ASCII characters as specified in <a href="https://tools.ietf.org/html/rfc7230#section-3.2.6">Section 3.3.6. Field Value Components</a> of the Hypertext Transfer Protocol (HTTP/1.1). If the customer wants the custom attribute returned, the model must set the custom attribute to be included on the way back.</p>
    /// <p>The code in your model is responsible for setting or updating any custom attributes in the response. If your code does not set this value in the response, an empty value is returned. For example, if a custom attribute represents the trace ID, your model can prepend the custom attribute with <code>Trace ID:</code> in your post-processing function.</p>
    /// <p>This feature is currently supported in the Amazon Web Services SDKs but not in the Amazon SageMaker Python SDK.</p>
    pub custom_attributes: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl InvokeEndpointWithResponseStreamOutput {
    /// <p>A stream of payload parts. Each part contains a portion of the response for a streaming inference request.</p>
    pub fn body(&self) -> &crate::event_receiver::EventReceiver<crate::types::ResponseStream, crate::types::error::ResponseStreamError> {
        &self.body
    }
    /// <p>The MIME type of the inference returned from the model container.</p>
    pub fn content_type(&self) -> ::std::option::Option<&str> {
        self.content_type.as_deref()
    }
    /// <p>Identifies the production variant that was invoked.</p>
    pub fn invoked_production_variant(&self) -> ::std::option::Option<&str> {
        self.invoked_production_variant.as_deref()
    }
    /// <p>Provides additional information in the response about the inference returned by a model hosted at an Amazon SageMaker endpoint. The information is an opaque value that is forwarded verbatim. You could use this value, for example, to return an ID received in the <code>CustomAttributes</code> header of a request or other metadata that a service endpoint was programmed to produce. The value must consist of no more than 1024 visible US-ASCII characters as specified in <a href="https://tools.ietf.org/html/rfc7230#section-3.2.6">Section 3.3.6. Field Value Components</a> of the Hypertext Transfer Protocol (HTTP/1.1). If the customer wants the custom attribute returned, the model must set the custom attribute to be included on the way back.</p>
    /// <p>The code in your model is responsible for setting or updating any custom attributes in the response. If your code does not set this value in the response, an empty value is returned. For example, if a custom attribute represents the trace ID, your model can prepend the custom attribute with <code>Trace ID:</code> in your post-processing function.</p>
    /// <p>This feature is currently supported in the Amazon Web Services SDKs but not in the Amazon SageMaker Python SDK.</p>
    pub fn custom_attributes(&self) -> ::std::option::Option<&str> {
        self.custom_attributes.as_deref()
    }
}
impl ::std::fmt::Debug for InvokeEndpointWithResponseStreamOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InvokeEndpointWithResponseStreamOutput");
        formatter.field("body", &self.body);
        formatter.field("content_type", &self.content_type);
        formatter.field("invoked_production_variant", &self.invoked_production_variant);
        formatter.field("custom_attributes", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for InvokeEndpointWithResponseStreamOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl InvokeEndpointWithResponseStreamOutput {
    /// Creates a new builder-style object to manufacture [`InvokeEndpointWithResponseStreamOutput`](crate::operation::invoke_endpoint_with_response_stream::InvokeEndpointWithResponseStreamOutput).
    pub fn builder() -> crate::operation::invoke_endpoint_with_response_stream::builders::InvokeEndpointWithResponseStreamOutputBuilder {
        crate::operation::invoke_endpoint_with_response_stream::builders::InvokeEndpointWithResponseStreamOutputBuilder::default()
    }
}

/// A builder for [`InvokeEndpointWithResponseStreamOutput`](crate::operation::invoke_endpoint_with_response_stream::InvokeEndpointWithResponseStreamOutput).
#[derive(::std::default::Default)]
#[non_exhaustive]
pub struct InvokeEndpointWithResponseStreamOutputBuilder {
    pub(crate) body:
        ::std::option::Option<crate::event_receiver::EventReceiver<crate::types::ResponseStream, crate::types::error::ResponseStreamError>>,
    pub(crate) content_type: ::std::option::Option<::std::string::String>,
    pub(crate) invoked_production_variant: ::std::option::Option<::std::string::String>,
    pub(crate) custom_attributes: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl InvokeEndpointWithResponseStreamOutputBuilder {
    /// <p>A stream of payload parts. Each part contains a portion of the response for a streaming inference request.</p>
    /// This field is required.
    pub fn body(
        mut self,
        input: crate::event_receiver::EventReceiver<crate::types::ResponseStream, crate::types::error::ResponseStreamError>,
    ) -> Self {
        self.body = ::std::option::Option::Some(input);
        self
    }
    /// <p>A stream of payload parts. Each part contains a portion of the response for a streaming inference request.</p>
    pub fn set_body(
        mut self,
        input: ::std::option::Option<crate::event_receiver::EventReceiver<crate::types::ResponseStream, crate::types::error::ResponseStreamError>>,
    ) -> Self {
        self.body = input;
        self
    }
    /// <p>A stream of payload parts. Each part contains a portion of the response for a streaming inference request.</p>
    pub fn get_body(
        &self,
    ) -> &::std::option::Option<crate::event_receiver::EventReceiver<crate::types::ResponseStream, crate::types::error::ResponseStreamError>> {
        &self.body
    }
    /// <p>The MIME type of the inference returned from the model container.</p>
    pub fn content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The MIME type of the inference returned from the model container.</p>
    pub fn set_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>The MIME type of the inference returned from the model container.</p>
    pub fn get_content_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_type
    }
    /// <p>Identifies the production variant that was invoked.</p>
    pub fn invoked_production_variant(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.invoked_production_variant = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifies the production variant that was invoked.</p>
    pub fn set_invoked_production_variant(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.invoked_production_variant = input;
        self
    }
    /// <p>Identifies the production variant that was invoked.</p>
    pub fn get_invoked_production_variant(&self) -> &::std::option::Option<::std::string::String> {
        &self.invoked_production_variant
    }
    /// <p>Provides additional information in the response about the inference returned by a model hosted at an Amazon SageMaker endpoint. The information is an opaque value that is forwarded verbatim. You could use this value, for example, to return an ID received in the <code>CustomAttributes</code> header of a request or other metadata that a service endpoint was programmed to produce. The value must consist of no more than 1024 visible US-ASCII characters as specified in <a href="https://tools.ietf.org/html/rfc7230#section-3.2.6">Section 3.3.6. Field Value Components</a> of the Hypertext Transfer Protocol (HTTP/1.1). If the customer wants the custom attribute returned, the model must set the custom attribute to be included on the way back.</p>
    /// <p>The code in your model is responsible for setting or updating any custom attributes in the response. If your code does not set this value in the response, an empty value is returned. For example, if a custom attribute represents the trace ID, your model can prepend the custom attribute with <code>Trace ID:</code> in your post-processing function.</p>
    /// <p>This feature is currently supported in the Amazon Web Services SDKs but not in the Amazon SageMaker Python SDK.</p>
    pub fn custom_attributes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.custom_attributes = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provides additional information in the response about the inference returned by a model hosted at an Amazon SageMaker endpoint. The information is an opaque value that is forwarded verbatim. You could use this value, for example, to return an ID received in the <code>CustomAttributes</code> header of a request or other metadata that a service endpoint was programmed to produce. The value must consist of no more than 1024 visible US-ASCII characters as specified in <a href="https://tools.ietf.org/html/rfc7230#section-3.2.6">Section 3.3.6. Field Value Components</a> of the Hypertext Transfer Protocol (HTTP/1.1). If the customer wants the custom attribute returned, the model must set the custom attribute to be included on the way back.</p>
    /// <p>The code in your model is responsible for setting or updating any custom attributes in the response. If your code does not set this value in the response, an empty value is returned. For example, if a custom attribute represents the trace ID, your model can prepend the custom attribute with <code>Trace ID:</code> in your post-processing function.</p>
    /// <p>This feature is currently supported in the Amazon Web Services SDKs but not in the Amazon SageMaker Python SDK.</p>
    pub fn set_custom_attributes(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.custom_attributes = input;
        self
    }
    /// <p>Provides additional information in the response about the inference returned by a model hosted at an Amazon SageMaker endpoint. The information is an opaque value that is forwarded verbatim. You could use this value, for example, to return an ID received in the <code>CustomAttributes</code> header of a request or other metadata that a service endpoint was programmed to produce. The value must consist of no more than 1024 visible US-ASCII characters as specified in <a href="https://tools.ietf.org/html/rfc7230#section-3.2.6">Section 3.3.6. Field Value Components</a> of the Hypertext Transfer Protocol (HTTP/1.1). If the customer wants the custom attribute returned, the model must set the custom attribute to be included on the way back.</p>
    /// <p>The code in your model is responsible for setting or updating any custom attributes in the response. If your code does not set this value in the response, an empty value is returned. For example, if a custom attribute represents the trace ID, your model can prepend the custom attribute with <code>Trace ID:</code> in your post-processing function.</p>
    /// <p>This feature is currently supported in the Amazon Web Services SDKs but not in the Amazon SageMaker Python SDK.</p>
    pub fn get_custom_attributes(&self) -> &::std::option::Option<::std::string::String> {
        &self.custom_attributes
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`InvokeEndpointWithResponseStreamOutput`](crate::operation::invoke_endpoint_with_response_stream::InvokeEndpointWithResponseStreamOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`body`](crate::operation::invoke_endpoint_with_response_stream::builders::InvokeEndpointWithResponseStreamOutputBuilder::body)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::invoke_endpoint_with_response_stream::InvokeEndpointWithResponseStreamOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::invoke_endpoint_with_response_stream::InvokeEndpointWithResponseStreamOutput {
                body: self.body.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "body",
                        "body was not specified but it is required when building InvokeEndpointWithResponseStreamOutput",
                    )
                })?,
                content_type: self.content_type,
                invoked_production_variant: self.invoked_production_variant,
                custom_attributes: self.custom_attributes,
                _request_id: self._request_id,
            },
        )
    }
}
impl ::std::fmt::Debug for InvokeEndpointWithResponseStreamOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InvokeEndpointWithResponseStreamOutputBuilder");
        formatter.field("body", &self.body);
        formatter.field("content_type", &self.content_type);
        formatter.field("invoked_production_variant", &self.invoked_production_variant);
        formatter.field("custom_attributes", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
