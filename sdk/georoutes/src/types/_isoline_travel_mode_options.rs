// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Travel mode related options for the provided travel mode.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IsolineTravelModeOptions {
    /// <p>Travel mode options when the provided travel mode is "Car"</p>
    pub car: ::std::option::Option<crate::types::IsolineCarOptions>,
    /// <p>Travel mode options when the provided travel mode is <code>Scooter</code></p><note>
    /// <p>When travel mode is set to <code>Scooter</code>, then the avoidance option <code>ControlledAccessHighways</code> defaults to <code>true</code>.</p>
    /// </note>
    pub scooter: ::std::option::Option<crate::types::IsolineScooterOptions>,
    /// <p>Travel mode options when the provided travel mode is "Truck"</p>
    pub truck: ::std::option::Option<crate::types::IsolineTruckOptions>,
}
impl IsolineTravelModeOptions {
    /// <p>Travel mode options when the provided travel mode is "Car"</p>
    pub fn car(&self) -> ::std::option::Option<&crate::types::IsolineCarOptions> {
        self.car.as_ref()
    }
    /// <p>Travel mode options when the provided travel mode is <code>Scooter</code></p><note>
    /// <p>When travel mode is set to <code>Scooter</code>, then the avoidance option <code>ControlledAccessHighways</code> defaults to <code>true</code>.</p>
    /// </note>
    pub fn scooter(&self) -> ::std::option::Option<&crate::types::IsolineScooterOptions> {
        self.scooter.as_ref()
    }
    /// <p>Travel mode options when the provided travel mode is "Truck"</p>
    pub fn truck(&self) -> ::std::option::Option<&crate::types::IsolineTruckOptions> {
        self.truck.as_ref()
    }
}
impl IsolineTravelModeOptions {
    /// Creates a new builder-style object to manufacture [`IsolineTravelModeOptions`](crate::types::IsolineTravelModeOptions).
    pub fn builder() -> crate::types::builders::IsolineTravelModeOptionsBuilder {
        crate::types::builders::IsolineTravelModeOptionsBuilder::default()
    }
}

/// A builder for [`IsolineTravelModeOptions`](crate::types::IsolineTravelModeOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IsolineTravelModeOptionsBuilder {
    pub(crate) car: ::std::option::Option<crate::types::IsolineCarOptions>,
    pub(crate) scooter: ::std::option::Option<crate::types::IsolineScooterOptions>,
    pub(crate) truck: ::std::option::Option<crate::types::IsolineTruckOptions>,
}
impl IsolineTravelModeOptionsBuilder {
    /// <p>Travel mode options when the provided travel mode is "Car"</p>
    pub fn car(mut self, input: crate::types::IsolineCarOptions) -> Self {
        self.car = ::std::option::Option::Some(input);
        self
    }
    /// <p>Travel mode options when the provided travel mode is "Car"</p>
    pub fn set_car(mut self, input: ::std::option::Option<crate::types::IsolineCarOptions>) -> Self {
        self.car = input;
        self
    }
    /// <p>Travel mode options when the provided travel mode is "Car"</p>
    pub fn get_car(&self) -> &::std::option::Option<crate::types::IsolineCarOptions> {
        &self.car
    }
    /// <p>Travel mode options when the provided travel mode is <code>Scooter</code></p><note>
    /// <p>When travel mode is set to <code>Scooter</code>, then the avoidance option <code>ControlledAccessHighways</code> defaults to <code>true</code>.</p>
    /// </note>
    pub fn scooter(mut self, input: crate::types::IsolineScooterOptions) -> Self {
        self.scooter = ::std::option::Option::Some(input);
        self
    }
    /// <p>Travel mode options when the provided travel mode is <code>Scooter</code></p><note>
    /// <p>When travel mode is set to <code>Scooter</code>, then the avoidance option <code>ControlledAccessHighways</code> defaults to <code>true</code>.</p>
    /// </note>
    pub fn set_scooter(mut self, input: ::std::option::Option<crate::types::IsolineScooterOptions>) -> Self {
        self.scooter = input;
        self
    }
    /// <p>Travel mode options when the provided travel mode is <code>Scooter</code></p><note>
    /// <p>When travel mode is set to <code>Scooter</code>, then the avoidance option <code>ControlledAccessHighways</code> defaults to <code>true</code>.</p>
    /// </note>
    pub fn get_scooter(&self) -> &::std::option::Option<crate::types::IsolineScooterOptions> {
        &self.scooter
    }
    /// <p>Travel mode options when the provided travel mode is "Truck"</p>
    pub fn truck(mut self, input: crate::types::IsolineTruckOptions) -> Self {
        self.truck = ::std::option::Option::Some(input);
        self
    }
    /// <p>Travel mode options when the provided travel mode is "Truck"</p>
    pub fn set_truck(mut self, input: ::std::option::Option<crate::types::IsolineTruckOptions>) -> Self {
        self.truck = input;
        self
    }
    /// <p>Travel mode options when the provided travel mode is "Truck"</p>
    pub fn get_truck(&self) -> &::std::option::Option<crate::types::IsolineTruckOptions> {
        &self.truck
    }
    /// Consumes the builder and constructs a [`IsolineTravelModeOptions`](crate::types::IsolineTravelModeOptions).
    pub fn build(self) -> crate::types::IsolineTravelModeOptions {
        crate::types::IsolineTravelModeOptions {
            car: self.car,
            scooter: self.scooter,
            truck: self.truck,
        }
    }
}
