// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Options related to the destination.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteDestinationOptions {
    /// <p>Avoids actions for the provided distance. This is typically to consider for users in moving vehicles who may not have sufficient time to make an action at an origin or a destination.</p>
    pub avoid_actions_for_distance: i64,
    /// <p>Avoid U-turns for calculation on highways and motorways.</p>
    pub avoid_u_turns: ::std::option::Option<bool>,
    /// <p>GPS Heading at the position.</p>
    pub heading: f64,
    /// <p>Options to configure matching the provided position to the road network.</p>
    pub matching: ::std::option::Option<crate::types::RouteMatchingOptions>,
    /// <p>Options to configure matching the provided position to a side of the street.</p>
    pub side_of_street: ::std::option::Option<crate::types::RouteSideOfStreetOptions>,
    /// <p>Duration of the stop.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub stop_duration: i64,
}
impl RouteDestinationOptions {
    /// <p>Avoids actions for the provided distance. This is typically to consider for users in moving vehicles who may not have sufficient time to make an action at an origin or a destination.</p>
    pub fn avoid_actions_for_distance(&self) -> i64 {
        self.avoid_actions_for_distance
    }
    /// <p>Avoid U-turns for calculation on highways and motorways.</p>
    pub fn avoid_u_turns(&self) -> ::std::option::Option<bool> {
        self.avoid_u_turns
    }
    /// <p>GPS Heading at the position.</p>
    pub fn heading(&self) -> f64 {
        self.heading
    }
    /// <p>Options to configure matching the provided position to the road network.</p>
    pub fn matching(&self) -> ::std::option::Option<&crate::types::RouteMatchingOptions> {
        self.matching.as_ref()
    }
    /// <p>Options to configure matching the provided position to a side of the street.</p>
    pub fn side_of_street(&self) -> ::std::option::Option<&crate::types::RouteSideOfStreetOptions> {
        self.side_of_street.as_ref()
    }
    /// <p>Duration of the stop.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn stop_duration(&self) -> i64 {
        self.stop_duration
    }
}
impl RouteDestinationOptions {
    /// Creates a new builder-style object to manufacture [`RouteDestinationOptions`](crate::types::RouteDestinationOptions).
    pub fn builder() -> crate::types::builders::RouteDestinationOptionsBuilder {
        crate::types::builders::RouteDestinationOptionsBuilder::default()
    }
}

/// A builder for [`RouteDestinationOptions`](crate::types::RouteDestinationOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteDestinationOptionsBuilder {
    pub(crate) avoid_actions_for_distance: ::std::option::Option<i64>,
    pub(crate) avoid_u_turns: ::std::option::Option<bool>,
    pub(crate) heading: ::std::option::Option<f64>,
    pub(crate) matching: ::std::option::Option<crate::types::RouteMatchingOptions>,
    pub(crate) side_of_street: ::std::option::Option<crate::types::RouteSideOfStreetOptions>,
    pub(crate) stop_duration: ::std::option::Option<i64>,
}
impl RouteDestinationOptionsBuilder {
    /// <p>Avoids actions for the provided distance. This is typically to consider for users in moving vehicles who may not have sufficient time to make an action at an origin or a destination.</p>
    pub fn avoid_actions_for_distance(mut self, input: i64) -> Self {
        self.avoid_actions_for_distance = ::std::option::Option::Some(input);
        self
    }
    /// <p>Avoids actions for the provided distance. This is typically to consider for users in moving vehicles who may not have sufficient time to make an action at an origin or a destination.</p>
    pub fn set_avoid_actions_for_distance(mut self, input: ::std::option::Option<i64>) -> Self {
        self.avoid_actions_for_distance = input;
        self
    }
    /// <p>Avoids actions for the provided distance. This is typically to consider for users in moving vehicles who may not have sufficient time to make an action at an origin or a destination.</p>
    pub fn get_avoid_actions_for_distance(&self) -> &::std::option::Option<i64> {
        &self.avoid_actions_for_distance
    }
    /// <p>Avoid U-turns for calculation on highways and motorways.</p>
    pub fn avoid_u_turns(mut self, input: bool) -> Self {
        self.avoid_u_turns = ::std::option::Option::Some(input);
        self
    }
    /// <p>Avoid U-turns for calculation on highways and motorways.</p>
    pub fn set_avoid_u_turns(mut self, input: ::std::option::Option<bool>) -> Self {
        self.avoid_u_turns = input;
        self
    }
    /// <p>Avoid U-turns for calculation on highways and motorways.</p>
    pub fn get_avoid_u_turns(&self) -> &::std::option::Option<bool> {
        &self.avoid_u_turns
    }
    /// <p>GPS Heading at the position.</p>
    pub fn heading(mut self, input: f64) -> Self {
        self.heading = ::std::option::Option::Some(input);
        self
    }
    /// <p>GPS Heading at the position.</p>
    pub fn set_heading(mut self, input: ::std::option::Option<f64>) -> Self {
        self.heading = input;
        self
    }
    /// <p>GPS Heading at the position.</p>
    pub fn get_heading(&self) -> &::std::option::Option<f64> {
        &self.heading
    }
    /// <p>Options to configure matching the provided position to the road network.</p>
    pub fn matching(mut self, input: crate::types::RouteMatchingOptions) -> Self {
        self.matching = ::std::option::Option::Some(input);
        self
    }
    /// <p>Options to configure matching the provided position to the road network.</p>
    pub fn set_matching(mut self, input: ::std::option::Option<crate::types::RouteMatchingOptions>) -> Self {
        self.matching = input;
        self
    }
    /// <p>Options to configure matching the provided position to the road network.</p>
    pub fn get_matching(&self) -> &::std::option::Option<crate::types::RouteMatchingOptions> {
        &self.matching
    }
    /// <p>Options to configure matching the provided position to a side of the street.</p>
    pub fn side_of_street(mut self, input: crate::types::RouteSideOfStreetOptions) -> Self {
        self.side_of_street = ::std::option::Option::Some(input);
        self
    }
    /// <p>Options to configure matching the provided position to a side of the street.</p>
    pub fn set_side_of_street(mut self, input: ::std::option::Option<crate::types::RouteSideOfStreetOptions>) -> Self {
        self.side_of_street = input;
        self
    }
    /// <p>Options to configure matching the provided position to a side of the street.</p>
    pub fn get_side_of_street(&self) -> &::std::option::Option<crate::types::RouteSideOfStreetOptions> {
        &self.side_of_street
    }
    /// <p>Duration of the stop.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn stop_duration(mut self, input: i64) -> Self {
        self.stop_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Duration of the stop.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn set_stop_duration(mut self, input: ::std::option::Option<i64>) -> Self {
        self.stop_duration = input;
        self
    }
    /// <p>Duration of the stop.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn get_stop_duration(&self) -> &::std::option::Option<i64> {
        &self.stop_duration
    }
    /// Consumes the builder and constructs a [`RouteDestinationOptions`](crate::types::RouteDestinationOptions).
    pub fn build(self) -> crate::types::RouteDestinationOptions {
        crate::types::RouteDestinationOptions {
            avoid_actions_for_distance: self.avoid_actions_for_distance.unwrap_or_default(),
            avoid_u_turns: self.avoid_u_turns,
            heading: self.heading.unwrap_or_default(),
            matching: self.matching,
            side_of_street: self.side_of_street,
            stop_duration: self.stop_duration.unwrap_or_default(),
        }
    }
}
