// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Locations or sites where the toll fare is collected.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RouteTollPaymentSite {
    /// <p>Name of the payment site.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub position: ::std::vec::Vec<f64>,
}
impl RouteTollPaymentSite {
    /// <p>Name of the payment site.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn position(&self) -> &[f64] {
        use std::ops::Deref;
        self.position.deref()
    }
}
impl ::std::fmt::Debug for RouteTollPaymentSite {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RouteTollPaymentSite");
        formatter.field("name", &self.name);
        formatter.field("position", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RouteTollPaymentSite {
    /// Creates a new builder-style object to manufacture [`RouteTollPaymentSite`](crate::types::RouteTollPaymentSite).
    pub fn builder() -> crate::types::builders::RouteTollPaymentSiteBuilder {
        crate::types::builders::RouteTollPaymentSiteBuilder::default()
    }
}

/// A builder for [`RouteTollPaymentSite`](crate::types::RouteTollPaymentSite).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RouteTollPaymentSiteBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) position: ::std::option::Option<::std::vec::Vec<f64>>,
}
impl RouteTollPaymentSiteBuilder {
    /// <p>Name of the payment site.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the payment site.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the payment site.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `position`.
    ///
    /// To override the contents of this collection use [`set_position`](Self::set_position).
    ///
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn position(mut self, input: f64) -> Self {
        let mut v = self.position.unwrap_or_default();
        v.push(input);
        self.position = ::std::option::Option::Some(v);
        self
    }
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn set_position(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.position = input;
        self
    }
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn get_position(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.position
    }
    /// Consumes the builder and constructs a [`RouteTollPaymentSite`](crate::types::RouteTollPaymentSite).
    /// This method will fail if any of the following fields are not set:
    /// - [`position`](crate::types::builders::RouteTollPaymentSiteBuilder::position)
    pub fn build(self) -> ::std::result::Result<crate::types::RouteTollPaymentSite, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RouteTollPaymentSite {
            name: self.name,
            position: self.position.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "position",
                    "position was not specified but it is required when building RouteTollPaymentSite",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for RouteTollPaymentSiteBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RouteTollPaymentSiteBuilder");
        formatter.field("name", &self.name);
        formatter.field("position", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
