// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summarized details for the leg including before travel, travel and after travel steps.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RoutePedestrianSummary {
    /// <p>Summarized details for the leg including before travel, travel and after travel steps.</p>
    pub overview: ::std::option::Option<crate::types::RoutePedestrianOverviewSummary>,
    /// <p>Summarized details for the leg including travel steps only. The Distance for the travel only portion of the journey is in meters</p>
    pub travel_only: ::std::option::Option<crate::types::RoutePedestrianTravelOnlySummary>,
}
impl RoutePedestrianSummary {
    /// <p>Summarized details for the leg including before travel, travel and after travel steps.</p>
    pub fn overview(&self) -> ::std::option::Option<&crate::types::RoutePedestrianOverviewSummary> {
        self.overview.as_ref()
    }
    /// <p>Summarized details for the leg including travel steps only. The Distance for the travel only portion of the journey is in meters</p>
    pub fn travel_only(&self) -> ::std::option::Option<&crate::types::RoutePedestrianTravelOnlySummary> {
        self.travel_only.as_ref()
    }
}
impl RoutePedestrianSummary {
    /// Creates a new builder-style object to manufacture [`RoutePedestrianSummary`](crate::types::RoutePedestrianSummary).
    pub fn builder() -> crate::types::builders::RoutePedestrianSummaryBuilder {
        crate::types::builders::RoutePedestrianSummaryBuilder::default()
    }
}

/// A builder for [`RoutePedestrianSummary`](crate::types::RoutePedestrianSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RoutePedestrianSummaryBuilder {
    pub(crate) overview: ::std::option::Option<crate::types::RoutePedestrianOverviewSummary>,
    pub(crate) travel_only: ::std::option::Option<crate::types::RoutePedestrianTravelOnlySummary>,
}
impl RoutePedestrianSummaryBuilder {
    /// <p>Summarized details for the leg including before travel, travel and after travel steps.</p>
    pub fn overview(mut self, input: crate::types::RoutePedestrianOverviewSummary) -> Self {
        self.overview = ::std::option::Option::Some(input);
        self
    }
    /// <p>Summarized details for the leg including before travel, travel and after travel steps.</p>
    pub fn set_overview(mut self, input: ::std::option::Option<crate::types::RoutePedestrianOverviewSummary>) -> Self {
        self.overview = input;
        self
    }
    /// <p>Summarized details for the leg including before travel, travel and after travel steps.</p>
    pub fn get_overview(&self) -> &::std::option::Option<crate::types::RoutePedestrianOverviewSummary> {
        &self.overview
    }
    /// <p>Summarized details for the leg including travel steps only. The Distance for the travel only portion of the journey is in meters</p>
    pub fn travel_only(mut self, input: crate::types::RoutePedestrianTravelOnlySummary) -> Self {
        self.travel_only = ::std::option::Option::Some(input);
        self
    }
    /// <p>Summarized details for the leg including travel steps only. The Distance for the travel only portion of the journey is in meters</p>
    pub fn set_travel_only(mut self, input: ::std::option::Option<crate::types::RoutePedestrianTravelOnlySummary>) -> Self {
        self.travel_only = input;
        self
    }
    /// <p>Summarized details for the leg including travel steps only. The Distance for the travel only portion of the journey is in meters</p>
    pub fn get_travel_only(&self) -> &::std::option::Option<crate::types::RoutePedestrianTravelOnlySummary> {
        &self.travel_only
    }
    /// Consumes the builder and constructs a [`RoutePedestrianSummary`](crate::types::RoutePedestrianSummary).
    pub fn build(self) -> crate::types::RoutePedestrianSummary {
        crate::types::RoutePedestrianSummary {
            overview: self.overview,
            travel_only: self.travel_only,
        }
    }
}
