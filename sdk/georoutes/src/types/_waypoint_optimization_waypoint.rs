// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Waypoint between the Origin and Destination.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct WaypointOptimizationWaypoint {
    /// <p>Access hours corresponding to when a waypoint can be visited.</p>
    pub access_hours: ::std::option::Option<crate::types::WaypointOptimizationAccessHours>,
    /// <p>Appointment time at the waypoint.</p>
    pub appointment_time: ::std::option::Option<::std::string::String>,
    /// <p>Constraint defining what waypoints are to be visited after this waypoint.</p>
    pub before: ::std::option::Option<::std::vec::Vec<i32>>,
    /// <p>GPS Heading at the position.</p>
    pub heading: f64,
    /// <p>The waypoint Id.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub position: ::std::vec::Vec<f64>,
    /// <p>Service time spent at the waypoint. At an appointment, the service time should be the appointment duration.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub service_duration: i64,
    /// <p>Options to configure matching the provided position to a side of the street.</p>
    pub side_of_street: ::std::option::Option<crate::types::WaypointOptimizationSideOfStreetOptions>,
}
impl WaypointOptimizationWaypoint {
    /// <p>Access hours corresponding to when a waypoint can be visited.</p>
    pub fn access_hours(&self) -> ::std::option::Option<&crate::types::WaypointOptimizationAccessHours> {
        self.access_hours.as_ref()
    }
    /// <p>Appointment time at the waypoint.</p>
    pub fn appointment_time(&self) -> ::std::option::Option<&str> {
        self.appointment_time.as_deref()
    }
    /// <p>Constraint defining what waypoints are to be visited after this waypoint.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.before.is_none()`.
    pub fn before(&self) -> &[i32] {
        self.before.as_deref().unwrap_or_default()
    }
    /// <p>GPS Heading at the position.</p>
    pub fn heading(&self) -> f64 {
        self.heading
    }
    /// <p>The waypoint Id.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn position(&self) -> &[f64] {
        use std::ops::Deref;
        self.position.deref()
    }
    /// <p>Service time spent at the waypoint. At an appointment, the service time should be the appointment duration.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn service_duration(&self) -> i64 {
        self.service_duration
    }
    /// <p>Options to configure matching the provided position to a side of the street.</p>
    pub fn side_of_street(&self) -> ::std::option::Option<&crate::types::WaypointOptimizationSideOfStreetOptions> {
        self.side_of_street.as_ref()
    }
}
impl ::std::fmt::Debug for WaypointOptimizationWaypoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("WaypointOptimizationWaypoint");
        formatter.field("access_hours", &self.access_hours);
        formatter.field("appointment_time", &self.appointment_time);
        formatter.field("before", &self.before);
        formatter.field("heading", &self.heading);
        formatter.field("id", &self.id);
        formatter.field("position", &"*** Sensitive Data Redacted ***");
        formatter.field("service_duration", &self.service_duration);
        formatter.field("side_of_street", &self.side_of_street);
        formatter.finish()
    }
}
impl WaypointOptimizationWaypoint {
    /// Creates a new builder-style object to manufacture [`WaypointOptimizationWaypoint`](crate::types::WaypointOptimizationWaypoint).
    pub fn builder() -> crate::types::builders::WaypointOptimizationWaypointBuilder {
        crate::types::builders::WaypointOptimizationWaypointBuilder::default()
    }
}

/// A builder for [`WaypointOptimizationWaypoint`](crate::types::WaypointOptimizationWaypoint).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct WaypointOptimizationWaypointBuilder {
    pub(crate) access_hours: ::std::option::Option<crate::types::WaypointOptimizationAccessHours>,
    pub(crate) appointment_time: ::std::option::Option<::std::string::String>,
    pub(crate) before: ::std::option::Option<::std::vec::Vec<i32>>,
    pub(crate) heading: ::std::option::Option<f64>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) position: ::std::option::Option<::std::vec::Vec<f64>>,
    pub(crate) service_duration: ::std::option::Option<i64>,
    pub(crate) side_of_street: ::std::option::Option<crate::types::WaypointOptimizationSideOfStreetOptions>,
}
impl WaypointOptimizationWaypointBuilder {
    /// <p>Access hours corresponding to when a waypoint can be visited.</p>
    pub fn access_hours(mut self, input: crate::types::WaypointOptimizationAccessHours) -> Self {
        self.access_hours = ::std::option::Option::Some(input);
        self
    }
    /// <p>Access hours corresponding to when a waypoint can be visited.</p>
    pub fn set_access_hours(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationAccessHours>) -> Self {
        self.access_hours = input;
        self
    }
    /// <p>Access hours corresponding to when a waypoint can be visited.</p>
    pub fn get_access_hours(&self) -> &::std::option::Option<crate::types::WaypointOptimizationAccessHours> {
        &self.access_hours
    }
    /// <p>Appointment time at the waypoint.</p>
    pub fn appointment_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.appointment_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Appointment time at the waypoint.</p>
    pub fn set_appointment_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.appointment_time = input;
        self
    }
    /// <p>Appointment time at the waypoint.</p>
    pub fn get_appointment_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.appointment_time
    }
    /// Appends an item to `before`.
    ///
    /// To override the contents of this collection use [`set_before`](Self::set_before).
    ///
    /// <p>Constraint defining what waypoints are to be visited after this waypoint.</p>
    pub fn before(mut self, input: i32) -> Self {
        let mut v = self.before.unwrap_or_default();
        v.push(input);
        self.before = ::std::option::Option::Some(v);
        self
    }
    /// <p>Constraint defining what waypoints are to be visited after this waypoint.</p>
    pub fn set_before(mut self, input: ::std::option::Option<::std::vec::Vec<i32>>) -> Self {
        self.before = input;
        self
    }
    /// <p>Constraint defining what waypoints are to be visited after this waypoint.</p>
    pub fn get_before(&self) -> &::std::option::Option<::std::vec::Vec<i32>> {
        &self.before
    }
    /// <p>GPS Heading at the position.</p>
    pub fn heading(mut self, input: f64) -> Self {
        self.heading = ::std::option::Option::Some(input);
        self
    }
    /// <p>GPS Heading at the position.</p>
    pub fn set_heading(mut self, input: ::std::option::Option<f64>) -> Self {
        self.heading = input;
        self
    }
    /// <p>GPS Heading at the position.</p>
    pub fn get_heading(&self) -> &::std::option::Option<f64> {
        &self.heading
    }
    /// <p>The waypoint Id.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The waypoint Id.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The waypoint Id.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Appends an item to `position`.
    ///
    /// To override the contents of this collection use [`set_position`](Self::set_position).
    ///
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn position(mut self, input: f64) -> Self {
        let mut v = self.position.unwrap_or_default();
        v.push(input);
        self.position = ::std::option::Option::Some(v);
        self
    }
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn set_position(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.position = input;
        self
    }
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn get_position(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.position
    }
    /// <p>Service time spent at the waypoint. At an appointment, the service time should be the appointment duration.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn service_duration(mut self, input: i64) -> Self {
        self.service_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Service time spent at the waypoint. At an appointment, the service time should be the appointment duration.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn set_service_duration(mut self, input: ::std::option::Option<i64>) -> Self {
        self.service_duration = input;
        self
    }
    /// <p>Service time spent at the waypoint. At an appointment, the service time should be the appointment duration.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn get_service_duration(&self) -> &::std::option::Option<i64> {
        &self.service_duration
    }
    /// <p>Options to configure matching the provided position to a side of the street.</p>
    pub fn side_of_street(mut self, input: crate::types::WaypointOptimizationSideOfStreetOptions) -> Self {
        self.side_of_street = ::std::option::Option::Some(input);
        self
    }
    /// <p>Options to configure matching the provided position to a side of the street.</p>
    pub fn set_side_of_street(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationSideOfStreetOptions>) -> Self {
        self.side_of_street = input;
        self
    }
    /// <p>Options to configure matching the provided position to a side of the street.</p>
    pub fn get_side_of_street(&self) -> &::std::option::Option<crate::types::WaypointOptimizationSideOfStreetOptions> {
        &self.side_of_street
    }
    /// Consumes the builder and constructs a [`WaypointOptimizationWaypoint`](crate::types::WaypointOptimizationWaypoint).
    /// This method will fail if any of the following fields are not set:
    /// - [`position`](crate::types::builders::WaypointOptimizationWaypointBuilder::position)
    pub fn build(self) -> ::std::result::Result<crate::types::WaypointOptimizationWaypoint, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WaypointOptimizationWaypoint {
            access_hours: self.access_hours,
            appointment_time: self.appointment_time,
            before: self.before,
            heading: self.heading.unwrap_or_default(),
            id: self.id,
            position: self.position.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "position",
                    "position was not specified but it is required when building WaypointOptimizationWaypoint",
                )
            })?,
            service_duration: self.service_duration.unwrap_or_default(),
            side_of_street: self.side_of_street,
        })
    }
}
impl ::std::fmt::Debug for WaypointOptimizationWaypointBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("WaypointOptimizationWaypointBuilder");
        formatter.field("access_hours", &self.access_hours);
        formatter.field("appointment_time", &self.appointment_time);
        formatter.field("before", &self.before);
        formatter.field("heading", &self.heading);
        formatter.field("id", &self.id);
        formatter.field("position", &"*** Sensitive Data Redacted ***");
        formatter.field("service_duration", &self.service_duration);
        formatter.field("side_of_street", &self.side_of_street);
        formatter.finish()
    }
}
