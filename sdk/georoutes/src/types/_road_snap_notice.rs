// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Notices provide information around factors that may have influenced snapping in a manner atypical to the standard use cases.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RoadSnapNotice {
    /// <p>Code corresponding to the issue.</p>
    pub code: crate::types::RoadSnapNoticeCode,
    /// <p>The notice title.</p>
    pub title: ::std::string::String,
    /// <p>TracePoint indices for which the provided notice code corresponds to.</p>
    pub trace_point_indexes: ::std::vec::Vec<i32>,
}
impl RoadSnapNotice {
    /// <p>Code corresponding to the issue.</p>
    pub fn code(&self) -> &crate::types::RoadSnapNoticeCode {
        &self.code
    }
    /// <p>The notice title.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>TracePoint indices for which the provided notice code corresponds to.</p>
    pub fn trace_point_indexes(&self) -> &[i32] {
        use std::ops::Deref;
        self.trace_point_indexes.deref()
    }
}
impl RoadSnapNotice {
    /// Creates a new builder-style object to manufacture [`RoadSnapNotice`](crate::types::RoadSnapNotice).
    pub fn builder() -> crate::types::builders::RoadSnapNoticeBuilder {
        crate::types::builders::RoadSnapNoticeBuilder::default()
    }
}

/// A builder for [`RoadSnapNotice`](crate::types::RoadSnapNotice).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RoadSnapNoticeBuilder {
    pub(crate) code: ::std::option::Option<crate::types::RoadSnapNoticeCode>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) trace_point_indexes: ::std::option::Option<::std::vec::Vec<i32>>,
}
impl RoadSnapNoticeBuilder {
    /// <p>Code corresponding to the issue.</p>
    /// This field is required.
    pub fn code(mut self, input: crate::types::RoadSnapNoticeCode) -> Self {
        self.code = ::std::option::Option::Some(input);
        self
    }
    /// <p>Code corresponding to the issue.</p>
    pub fn set_code(mut self, input: ::std::option::Option<crate::types::RoadSnapNoticeCode>) -> Self {
        self.code = input;
        self
    }
    /// <p>Code corresponding to the issue.</p>
    pub fn get_code(&self) -> &::std::option::Option<crate::types::RoadSnapNoticeCode> {
        &self.code
    }
    /// <p>The notice title.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The notice title.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The notice title.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// Appends an item to `trace_point_indexes`.
    ///
    /// To override the contents of this collection use [`set_trace_point_indexes`](Self::set_trace_point_indexes).
    ///
    /// <p>TracePoint indices for which the provided notice code corresponds to.</p>
    pub fn trace_point_indexes(mut self, input: i32) -> Self {
        let mut v = self.trace_point_indexes.unwrap_or_default();
        v.push(input);
        self.trace_point_indexes = ::std::option::Option::Some(v);
        self
    }
    /// <p>TracePoint indices for which the provided notice code corresponds to.</p>
    pub fn set_trace_point_indexes(mut self, input: ::std::option::Option<::std::vec::Vec<i32>>) -> Self {
        self.trace_point_indexes = input;
        self
    }
    /// <p>TracePoint indices for which the provided notice code corresponds to.</p>
    pub fn get_trace_point_indexes(&self) -> &::std::option::Option<::std::vec::Vec<i32>> {
        &self.trace_point_indexes
    }
    /// Consumes the builder and constructs a [`RoadSnapNotice`](crate::types::RoadSnapNotice).
    /// This method will fail if any of the following fields are not set:
    /// - [`code`](crate::types::builders::RoadSnapNoticeBuilder::code)
    /// - [`title`](crate::types::builders::RoadSnapNoticeBuilder::title)
    /// - [`trace_point_indexes`](crate::types::builders::RoadSnapNoticeBuilder::trace_point_indexes)
    pub fn build(self) -> ::std::result::Result<crate::types::RoadSnapNotice, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RoadSnapNotice {
            code: self.code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "code",
                    "code was not specified but it is required when building RoadSnapNotice",
                )
            })?,
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building RoadSnapNotice",
                )
            })?,
            trace_point_indexes: self.trace_point_indexes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "trace_point_indexes",
                    "trace_point_indexes was not specified but it is required when building RoadSnapNotice",
                )
            })?,
        })
    }
}
