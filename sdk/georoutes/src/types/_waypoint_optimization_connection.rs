// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This contains information such as distance and duration from one waypoint to the next waypoint in the sequence.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WaypointOptimizationConnection {
    /// <p>Distance of the step.</p>
    pub distance: i64,
    /// <p>contains the ID of the starting waypoint in this connection.</p>
    pub from: ::std::string::String,
    /// <p>Resting time before the driver can continue driving.</p>
    pub rest_duration: i64,
    /// <p>Contains the ID of the ending waypoint in this connection.</p>
    pub to: ::std::string::String,
    /// <p>Total duration.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub travel_duration: i64,
    /// <p>Duration of a wait step.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub wait_duration: i64,
}
impl WaypointOptimizationConnection {
    /// <p>Distance of the step.</p>
    pub fn distance(&self) -> i64 {
        self.distance
    }
    /// <p>contains the ID of the starting waypoint in this connection.</p>
    pub fn from(&self) -> &str {
        use std::ops::Deref;
        self.from.deref()
    }
    /// <p>Resting time before the driver can continue driving.</p>
    pub fn rest_duration(&self) -> i64 {
        self.rest_duration
    }
    /// <p>Contains the ID of the ending waypoint in this connection.</p>
    pub fn to(&self) -> &str {
        use std::ops::Deref;
        self.to.deref()
    }
    /// <p>Total duration.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn travel_duration(&self) -> i64 {
        self.travel_duration
    }
    /// <p>Duration of a wait step.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn wait_duration(&self) -> i64 {
        self.wait_duration
    }
}
impl WaypointOptimizationConnection {
    /// Creates a new builder-style object to manufacture [`WaypointOptimizationConnection`](crate::types::WaypointOptimizationConnection).
    pub fn builder() -> crate::types::builders::WaypointOptimizationConnectionBuilder {
        crate::types::builders::WaypointOptimizationConnectionBuilder::default()
    }
}

/// A builder for [`WaypointOptimizationConnection`](crate::types::WaypointOptimizationConnection).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WaypointOptimizationConnectionBuilder {
    pub(crate) distance: ::std::option::Option<i64>,
    pub(crate) from: ::std::option::Option<::std::string::String>,
    pub(crate) rest_duration: ::std::option::Option<i64>,
    pub(crate) to: ::std::option::Option<::std::string::String>,
    pub(crate) travel_duration: ::std::option::Option<i64>,
    pub(crate) wait_duration: ::std::option::Option<i64>,
}
impl WaypointOptimizationConnectionBuilder {
    /// <p>Distance of the step.</p>
    /// This field is required.
    pub fn distance(mut self, input: i64) -> Self {
        self.distance = ::std::option::Option::Some(input);
        self
    }
    /// <p>Distance of the step.</p>
    pub fn set_distance(mut self, input: ::std::option::Option<i64>) -> Self {
        self.distance = input;
        self
    }
    /// <p>Distance of the step.</p>
    pub fn get_distance(&self) -> &::std::option::Option<i64> {
        &self.distance
    }
    /// <p>contains the ID of the starting waypoint in this connection.</p>
    /// This field is required.
    pub fn from(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.from = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>contains the ID of the starting waypoint in this connection.</p>
    pub fn set_from(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.from = input;
        self
    }
    /// <p>contains the ID of the starting waypoint in this connection.</p>
    pub fn get_from(&self) -> &::std::option::Option<::std::string::String> {
        &self.from
    }
    /// <p>Resting time before the driver can continue driving.</p>
    /// This field is required.
    pub fn rest_duration(mut self, input: i64) -> Self {
        self.rest_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Resting time before the driver can continue driving.</p>
    pub fn set_rest_duration(mut self, input: ::std::option::Option<i64>) -> Self {
        self.rest_duration = input;
        self
    }
    /// <p>Resting time before the driver can continue driving.</p>
    pub fn get_rest_duration(&self) -> &::std::option::Option<i64> {
        &self.rest_duration
    }
    /// <p>Contains the ID of the ending waypoint in this connection.</p>
    /// This field is required.
    pub fn to(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.to = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Contains the ID of the ending waypoint in this connection.</p>
    pub fn set_to(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.to = input;
        self
    }
    /// <p>Contains the ID of the ending waypoint in this connection.</p>
    pub fn get_to(&self) -> &::std::option::Option<::std::string::String> {
        &self.to
    }
    /// <p>Total duration.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    /// This field is required.
    pub fn travel_duration(mut self, input: i64) -> Self {
        self.travel_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Total duration.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn set_travel_duration(mut self, input: ::std::option::Option<i64>) -> Self {
        self.travel_duration = input;
        self
    }
    /// <p>Total duration.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn get_travel_duration(&self) -> &::std::option::Option<i64> {
        &self.travel_duration
    }
    /// <p>Duration of a wait step.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    /// This field is required.
    pub fn wait_duration(mut self, input: i64) -> Self {
        self.wait_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Duration of a wait step.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn set_wait_duration(mut self, input: ::std::option::Option<i64>) -> Self {
        self.wait_duration = input;
        self
    }
    /// <p>Duration of a wait step.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn get_wait_duration(&self) -> &::std::option::Option<i64> {
        &self.wait_duration
    }
    /// Consumes the builder and constructs a [`WaypointOptimizationConnection`](crate::types::WaypointOptimizationConnection).
    /// This method will fail if any of the following fields are not set:
    /// - [`from`](crate::types::builders::WaypointOptimizationConnectionBuilder::from)
    /// - [`to`](crate::types::builders::WaypointOptimizationConnectionBuilder::to)
    pub fn build(self) -> ::std::result::Result<crate::types::WaypointOptimizationConnection, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WaypointOptimizationConnection {
            distance: self.distance.unwrap_or_default(),
            from: self.from.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "from",
                    "from was not specified but it is required when building WaypointOptimizationConnection",
                )
            })?,
            rest_duration: self.rest_duration.unwrap_or_default(),
            to: self.to.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "to",
                    "to was not specified but it is required when building WaypointOptimizationConnection",
                )
            })?,
            travel_duration: self.travel_duration.unwrap_or_default(),
            wait_duration: self.wait_duration.unwrap_or_default(),
        })
    }
}
