// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The impeding waypoint.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct WaypointOptimizationImpedingWaypoint {
    /// <p>Failed constraints for an impeding waypoint.</p>
    pub failed_constraints: ::std::vec::Vec<crate::types::WaypointOptimizationFailedConstraint>,
    /// <p>The waypoint Id.</p>
    pub id: ::std::string::String,
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub position: ::std::vec::Vec<f64>,
}
impl WaypointOptimizationImpedingWaypoint {
    /// <p>Failed constraints for an impeding waypoint.</p>
    pub fn failed_constraints(&self) -> &[crate::types::WaypointOptimizationFailedConstraint] {
        use std::ops::Deref;
        self.failed_constraints.deref()
    }
    /// <p>The waypoint Id.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn position(&self) -> &[f64] {
        use std::ops::Deref;
        self.position.deref()
    }
}
impl ::std::fmt::Debug for WaypointOptimizationImpedingWaypoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("WaypointOptimizationImpedingWaypoint");
        formatter.field("failed_constraints", &self.failed_constraints);
        formatter.field("id", &self.id);
        formatter.field("position", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl WaypointOptimizationImpedingWaypoint {
    /// Creates a new builder-style object to manufacture [`WaypointOptimizationImpedingWaypoint`](crate::types::WaypointOptimizationImpedingWaypoint).
    pub fn builder() -> crate::types::builders::WaypointOptimizationImpedingWaypointBuilder {
        crate::types::builders::WaypointOptimizationImpedingWaypointBuilder::default()
    }
}

/// A builder for [`WaypointOptimizationImpedingWaypoint`](crate::types::WaypointOptimizationImpedingWaypoint).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct WaypointOptimizationImpedingWaypointBuilder {
    pub(crate) failed_constraints: ::std::option::Option<::std::vec::Vec<crate::types::WaypointOptimizationFailedConstraint>>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) position: ::std::option::Option<::std::vec::Vec<f64>>,
}
impl WaypointOptimizationImpedingWaypointBuilder {
    /// Appends an item to `failed_constraints`.
    ///
    /// To override the contents of this collection use [`set_failed_constraints`](Self::set_failed_constraints).
    ///
    /// <p>Failed constraints for an impeding waypoint.</p>
    pub fn failed_constraints(mut self, input: crate::types::WaypointOptimizationFailedConstraint) -> Self {
        let mut v = self.failed_constraints.unwrap_or_default();
        v.push(input);
        self.failed_constraints = ::std::option::Option::Some(v);
        self
    }
    /// <p>Failed constraints for an impeding waypoint.</p>
    pub fn set_failed_constraints(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::WaypointOptimizationFailedConstraint>>,
    ) -> Self {
        self.failed_constraints = input;
        self
    }
    /// <p>Failed constraints for an impeding waypoint.</p>
    pub fn get_failed_constraints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WaypointOptimizationFailedConstraint>> {
        &self.failed_constraints
    }
    /// <p>The waypoint Id.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The waypoint Id.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The waypoint Id.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Appends an item to `position`.
    ///
    /// To override the contents of this collection use [`set_position`](Self::set_position).
    ///
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn position(mut self, input: f64) -> Self {
        let mut v = self.position.unwrap_or_default();
        v.push(input);
        self.position = ::std::option::Option::Some(v);
        self
    }
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn set_position(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.position = input;
        self
    }
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn get_position(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.position
    }
    /// Consumes the builder and constructs a [`WaypointOptimizationImpedingWaypoint`](crate::types::WaypointOptimizationImpedingWaypoint).
    /// This method will fail if any of the following fields are not set:
    /// - [`failed_constraints`](crate::types::builders::WaypointOptimizationImpedingWaypointBuilder::failed_constraints)
    /// - [`id`](crate::types::builders::WaypointOptimizationImpedingWaypointBuilder::id)
    /// - [`position`](crate::types::builders::WaypointOptimizationImpedingWaypointBuilder::position)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::WaypointOptimizationImpedingWaypoint, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WaypointOptimizationImpedingWaypoint {
            failed_constraints: self.failed_constraints.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "failed_constraints",
                    "failed_constraints was not specified but it is required when building WaypointOptimizationImpedingWaypoint",
                )
            })?,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building WaypointOptimizationImpedingWaypoint",
                )
            })?,
            position: self.position.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "position",
                    "position was not specified but it is required when building WaypointOptimizationImpedingWaypoint",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for WaypointOptimizationImpedingWaypointBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("WaypointOptimizationImpedingWaypointBuilder");
        formatter.field("failed_constraints", &self.failed_constraints);
        formatter.field("id", &self.id);
        formatter.field("position", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
