// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The road on the route.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteRoad {
    /// <p>Name of the road (localized).</p>
    pub road_name: ::std::vec::Vec<crate::types::LocalizedString>,
    /// <p>Route number of the road.</p>
    pub route_number: ::std::vec::Vec<crate::types::RouteNumber>,
    /// <p>Names of destinations that can be reached when traveling on the road.</p>
    pub towards: ::std::vec::Vec<crate::types::LocalizedString>,
    /// <p>The type of road.</p>
    pub r#type: ::std::option::Option<crate::types::RouteRoadType>,
}
impl RouteRoad {
    /// <p>Name of the road (localized).</p>
    pub fn road_name(&self) -> &[crate::types::LocalizedString] {
        use std::ops::Deref;
        self.road_name.deref()
    }
    /// <p>Route number of the road.</p>
    pub fn route_number(&self) -> &[crate::types::RouteNumber] {
        use std::ops::Deref;
        self.route_number.deref()
    }
    /// <p>Names of destinations that can be reached when traveling on the road.</p>
    pub fn towards(&self) -> &[crate::types::LocalizedString] {
        use std::ops::Deref;
        self.towards.deref()
    }
    /// <p>The type of road.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::RouteRoadType> {
        self.r#type.as_ref()
    }
}
impl RouteRoad {
    /// Creates a new builder-style object to manufacture [`RouteRoad`](crate::types::RouteRoad).
    pub fn builder() -> crate::types::builders::RouteRoadBuilder {
        crate::types::builders::RouteRoadBuilder::default()
    }
}

/// A builder for [`RouteRoad`](crate::types::RouteRoad).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteRoadBuilder {
    pub(crate) road_name: ::std::option::Option<::std::vec::Vec<crate::types::LocalizedString>>,
    pub(crate) route_number: ::std::option::Option<::std::vec::Vec<crate::types::RouteNumber>>,
    pub(crate) towards: ::std::option::Option<::std::vec::Vec<crate::types::LocalizedString>>,
    pub(crate) r#type: ::std::option::Option<crate::types::RouteRoadType>,
}
impl RouteRoadBuilder {
    /// Appends an item to `road_name`.
    ///
    /// To override the contents of this collection use [`set_road_name`](Self::set_road_name).
    ///
    /// <p>Name of the road (localized).</p>
    pub fn road_name(mut self, input: crate::types::LocalizedString) -> Self {
        let mut v = self.road_name.unwrap_or_default();
        v.push(input);
        self.road_name = ::std::option::Option::Some(v);
        self
    }
    /// <p>Name of the road (localized).</p>
    pub fn set_road_name(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LocalizedString>>) -> Self {
        self.road_name = input;
        self
    }
    /// <p>Name of the road (localized).</p>
    pub fn get_road_name(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LocalizedString>> {
        &self.road_name
    }
    /// Appends an item to `route_number`.
    ///
    /// To override the contents of this collection use [`set_route_number`](Self::set_route_number).
    ///
    /// <p>Route number of the road.</p>
    pub fn route_number(mut self, input: crate::types::RouteNumber) -> Self {
        let mut v = self.route_number.unwrap_or_default();
        v.push(input);
        self.route_number = ::std::option::Option::Some(v);
        self
    }
    /// <p>Route number of the road.</p>
    pub fn set_route_number(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteNumber>>) -> Self {
        self.route_number = input;
        self
    }
    /// <p>Route number of the road.</p>
    pub fn get_route_number(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteNumber>> {
        &self.route_number
    }
    /// Appends an item to `towards`.
    ///
    /// To override the contents of this collection use [`set_towards`](Self::set_towards).
    ///
    /// <p>Names of destinations that can be reached when traveling on the road.</p>
    pub fn towards(mut self, input: crate::types::LocalizedString) -> Self {
        let mut v = self.towards.unwrap_or_default();
        v.push(input);
        self.towards = ::std::option::Option::Some(v);
        self
    }
    /// <p>Names of destinations that can be reached when traveling on the road.</p>
    pub fn set_towards(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LocalizedString>>) -> Self {
        self.towards = input;
        self
    }
    /// <p>Names of destinations that can be reached when traveling on the road.</p>
    pub fn get_towards(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LocalizedString>> {
        &self.towards
    }
    /// <p>The type of road.</p>
    pub fn r#type(mut self, input: crate::types::RouteRoadType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of road.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RouteRoadType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of road.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RouteRoadType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`RouteRoad`](crate::types::RouteRoad).
    /// This method will fail if any of the following fields are not set:
    /// - [`road_name`](crate::types::builders::RouteRoadBuilder::road_name)
    /// - [`route_number`](crate::types::builders::RouteRoadBuilder::route_number)
    /// - [`towards`](crate::types::builders::RouteRoadBuilder::towards)
    pub fn build(self) -> ::std::result::Result<crate::types::RouteRoad, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RouteRoad {
            road_name: self.road_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "road_name",
                    "road_name was not specified but it is required when building RouteRoad",
                )
            })?,
            route_number: self.route_number.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "route_number",
                    "route_number was not specified but it is required when building RouteRoad",
                )
            })?,
            towards: self.towards.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "towards",
                    "towards was not specified but it is required when building RouteRoad",
                )
            })?,
            r#type: self.r#type,
        })
    }
}
