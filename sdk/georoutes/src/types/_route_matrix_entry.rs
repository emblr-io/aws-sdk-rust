// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The calculated route matrix containing the results for all pairs of Origins to Destination positions. Each row corresponds to one entry in Origins. Each entry in the row corresponds to the route from that entry in Origins to an entry in Destination positions.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteMatrixEntry {
    /// <p>The total distance of travel for the route.</p>
    pub distance: i64,
    /// <p>The expected duration of travel for the route.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub duration: i64,
    /// <p>Error code that occurred during calculation of the route.</p>
    pub error: ::std::option::Option<crate::types::RouteMatrixErrorCode>,
}
impl RouteMatrixEntry {
    /// <p>The total distance of travel for the route.</p>
    pub fn distance(&self) -> i64 {
        self.distance
    }
    /// <p>The expected duration of travel for the route.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn duration(&self) -> i64 {
        self.duration
    }
    /// <p>Error code that occurred during calculation of the route.</p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::RouteMatrixErrorCode> {
        self.error.as_ref()
    }
}
impl RouteMatrixEntry {
    /// Creates a new builder-style object to manufacture [`RouteMatrixEntry`](crate::types::RouteMatrixEntry).
    pub fn builder() -> crate::types::builders::RouteMatrixEntryBuilder {
        crate::types::builders::RouteMatrixEntryBuilder::default()
    }
}

/// A builder for [`RouteMatrixEntry`](crate::types::RouteMatrixEntry).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteMatrixEntryBuilder {
    pub(crate) distance: ::std::option::Option<i64>,
    pub(crate) duration: ::std::option::Option<i64>,
    pub(crate) error: ::std::option::Option<crate::types::RouteMatrixErrorCode>,
}
impl RouteMatrixEntryBuilder {
    /// <p>The total distance of travel for the route.</p>
    /// This field is required.
    pub fn distance(mut self, input: i64) -> Self {
        self.distance = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total distance of travel for the route.</p>
    pub fn set_distance(mut self, input: ::std::option::Option<i64>) -> Self {
        self.distance = input;
        self
    }
    /// <p>The total distance of travel for the route.</p>
    pub fn get_distance(&self) -> &::std::option::Option<i64> {
        &self.distance
    }
    /// <p>The expected duration of travel for the route.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    /// This field is required.
    pub fn duration(mut self, input: i64) -> Self {
        self.duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expected duration of travel for the route.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn set_duration(mut self, input: ::std::option::Option<i64>) -> Self {
        self.duration = input;
        self
    }
    /// <p>The expected duration of travel for the route.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn get_duration(&self) -> &::std::option::Option<i64> {
        &self.duration
    }
    /// <p>Error code that occurred during calculation of the route.</p>
    pub fn error(mut self, input: crate::types::RouteMatrixErrorCode) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>Error code that occurred during calculation of the route.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::RouteMatrixErrorCode>) -> Self {
        self.error = input;
        self
    }
    /// <p>Error code that occurred during calculation of the route.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::RouteMatrixErrorCode> {
        &self.error
    }
    /// Consumes the builder and constructs a [`RouteMatrixEntry`](crate::types::RouteMatrixEntry).
    pub fn build(self) -> crate::types::RouteMatrixEntry {
        crate::types::RouteMatrixEntry {
            distance: self.distance.unwrap_or_default(),
            duration: self.duration.unwrap_or_default(),
            error: self.error,
        }
    }
}
