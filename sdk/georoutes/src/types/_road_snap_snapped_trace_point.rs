// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>TracePoints snapped onto the road network.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RoadSnapSnappedTracePoint {
    /// <p>Confidence value for the correctness of this point match.</p>
    pub confidence: f64,
    /// <p>Position of the TracePoint provided within the request, at the same index.</p>
    pub original_position: ::std::vec::Vec<f64>,
    /// <p>Snapped position of the TracePoint provided within the request, at the same index.</p>
    pub snapped_position: ::std::vec::Vec<f64>,
}
impl RoadSnapSnappedTracePoint {
    /// <p>Confidence value for the correctness of this point match.</p>
    pub fn confidence(&self) -> f64 {
        self.confidence
    }
    /// <p>Position of the TracePoint provided within the request, at the same index.</p>
    pub fn original_position(&self) -> &[f64] {
        use std::ops::Deref;
        self.original_position.deref()
    }
    /// <p>Snapped position of the TracePoint provided within the request, at the same index.</p>
    pub fn snapped_position(&self) -> &[f64] {
        use std::ops::Deref;
        self.snapped_position.deref()
    }
}
impl ::std::fmt::Debug for RoadSnapSnappedTracePoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RoadSnapSnappedTracePoint");
        formatter.field("confidence", &self.confidence);
        formatter.field("original_position", &"*** Sensitive Data Redacted ***");
        formatter.field("snapped_position", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RoadSnapSnappedTracePoint {
    /// Creates a new builder-style object to manufacture [`RoadSnapSnappedTracePoint`](crate::types::RoadSnapSnappedTracePoint).
    pub fn builder() -> crate::types::builders::RoadSnapSnappedTracePointBuilder {
        crate::types::builders::RoadSnapSnappedTracePointBuilder::default()
    }
}

/// A builder for [`RoadSnapSnappedTracePoint`](crate::types::RoadSnapSnappedTracePoint).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RoadSnapSnappedTracePointBuilder {
    pub(crate) confidence: ::std::option::Option<f64>,
    pub(crate) original_position: ::std::option::Option<::std::vec::Vec<f64>>,
    pub(crate) snapped_position: ::std::option::Option<::std::vec::Vec<f64>>,
}
impl RoadSnapSnappedTracePointBuilder {
    /// <p>Confidence value for the correctness of this point match.</p>
    /// This field is required.
    pub fn confidence(mut self, input: f64) -> Self {
        self.confidence = ::std::option::Option::Some(input);
        self
    }
    /// <p>Confidence value for the correctness of this point match.</p>
    pub fn set_confidence(mut self, input: ::std::option::Option<f64>) -> Self {
        self.confidence = input;
        self
    }
    /// <p>Confidence value for the correctness of this point match.</p>
    pub fn get_confidence(&self) -> &::std::option::Option<f64> {
        &self.confidence
    }
    /// Appends an item to `original_position`.
    ///
    /// To override the contents of this collection use [`set_original_position`](Self::set_original_position).
    ///
    /// <p>Position of the TracePoint provided within the request, at the same index.</p>
    pub fn original_position(mut self, input: f64) -> Self {
        let mut v = self.original_position.unwrap_or_default();
        v.push(input);
        self.original_position = ::std::option::Option::Some(v);
        self
    }
    /// <p>Position of the TracePoint provided within the request, at the same index.</p>
    pub fn set_original_position(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.original_position = input;
        self
    }
    /// <p>Position of the TracePoint provided within the request, at the same index.</p>
    pub fn get_original_position(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.original_position
    }
    /// Appends an item to `snapped_position`.
    ///
    /// To override the contents of this collection use [`set_snapped_position`](Self::set_snapped_position).
    ///
    /// <p>Snapped position of the TracePoint provided within the request, at the same index.</p>
    pub fn snapped_position(mut self, input: f64) -> Self {
        let mut v = self.snapped_position.unwrap_or_default();
        v.push(input);
        self.snapped_position = ::std::option::Option::Some(v);
        self
    }
    /// <p>Snapped position of the TracePoint provided within the request, at the same index.</p>
    pub fn set_snapped_position(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.snapped_position = input;
        self
    }
    /// <p>Snapped position of the TracePoint provided within the request, at the same index.</p>
    pub fn get_snapped_position(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.snapped_position
    }
    /// Consumes the builder and constructs a [`RoadSnapSnappedTracePoint`](crate::types::RoadSnapSnappedTracePoint).
    /// This method will fail if any of the following fields are not set:
    /// - [`confidence`](crate::types::builders::RoadSnapSnappedTracePointBuilder::confidence)
    /// - [`original_position`](crate::types::builders::RoadSnapSnappedTracePointBuilder::original_position)
    /// - [`snapped_position`](crate::types::builders::RoadSnapSnappedTracePointBuilder::snapped_position)
    pub fn build(self) -> ::std::result::Result<crate::types::RoadSnapSnappedTracePoint, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RoadSnapSnappedTracePoint {
            confidence: self.confidence.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "confidence",
                    "confidence was not specified but it is required when building RoadSnapSnappedTracePoint",
                )
            })?,
            original_position: self.original_position.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "original_position",
                    "original_position was not specified but it is required when building RoadSnapSnappedTracePoint",
                )
            })?,
            snapped_position: self.snapped_position.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "snapped_position",
                    "snapped_position was not specified but it is required when building RoadSnapSnappedTracePoint",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for RoadSnapSnappedTracePointBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RoadSnapSnappedTracePointBuilder");
        formatter.field("confidence", &self.confidence);
        formatter.field("original_position", &"*** Sensitive Data Redacted ***");
        formatter.field("snapped_position", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
