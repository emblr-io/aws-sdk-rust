// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Span computed for the requested SpanAdditionalFeatures.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteFerrySpan {
    /// <p>3 letter Country code corresponding to the Span.</p>
    pub country: ::std::option::Option<::std::string::String>,
    /// <p>Distance of the computed span. This feature doesn't split a span, but is always computed on a span split by other properties.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    pub distance: i64,
    /// <p>Duration of the computed span. This feature doesn't split a span, but is always computed on a span split by other properties.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub duration: i64,
    /// <p>Offset in the leg geometry corresponding to the start of this span.</p>
    pub geometry_offset: ::std::option::Option<i32>,
    /// <p>Provides an array of names of the ferry span in available languages.</p>
    pub names: ::std::option::Option<::std::vec::Vec<crate::types::LocalizedString>>,
    /// <p>2-3 letter Region code corresponding to the Span. This is either a province or a state.</p>
    pub region: ::std::option::Option<::std::string::String>,
}
impl RouteFerrySpan {
    /// <p>3 letter Country code corresponding to the Span.</p>
    pub fn country(&self) -> ::std::option::Option<&str> {
        self.country.as_deref()
    }
    /// <p>Distance of the computed span. This feature doesn't split a span, but is always computed on a span split by other properties.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    pub fn distance(&self) -> i64 {
        self.distance
    }
    /// <p>Duration of the computed span. This feature doesn't split a span, but is always computed on a span split by other properties.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn duration(&self) -> i64 {
        self.duration
    }
    /// <p>Offset in the leg geometry corresponding to the start of this span.</p>
    pub fn geometry_offset(&self) -> ::std::option::Option<i32> {
        self.geometry_offset
    }
    /// <p>Provides an array of names of the ferry span in available languages.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.names.is_none()`.
    pub fn names(&self) -> &[crate::types::LocalizedString] {
        self.names.as_deref().unwrap_or_default()
    }
    /// <p>2-3 letter Region code corresponding to the Span. This is either a province or a state.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
}
impl RouteFerrySpan {
    /// Creates a new builder-style object to manufacture [`RouteFerrySpan`](crate::types::RouteFerrySpan).
    pub fn builder() -> crate::types::builders::RouteFerrySpanBuilder {
        crate::types::builders::RouteFerrySpanBuilder::default()
    }
}

/// A builder for [`RouteFerrySpan`](crate::types::RouteFerrySpan).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteFerrySpanBuilder {
    pub(crate) country: ::std::option::Option<::std::string::String>,
    pub(crate) distance: ::std::option::Option<i64>,
    pub(crate) duration: ::std::option::Option<i64>,
    pub(crate) geometry_offset: ::std::option::Option<i32>,
    pub(crate) names: ::std::option::Option<::std::vec::Vec<crate::types::LocalizedString>>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
}
impl RouteFerrySpanBuilder {
    /// <p>3 letter Country code corresponding to the Span.</p>
    pub fn country(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.country = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>3 letter Country code corresponding to the Span.</p>
    pub fn set_country(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.country = input;
        self
    }
    /// <p>3 letter Country code corresponding to the Span.</p>
    pub fn get_country(&self) -> &::std::option::Option<::std::string::String> {
        &self.country
    }
    /// <p>Distance of the computed span. This feature doesn't split a span, but is always computed on a span split by other properties.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    pub fn distance(mut self, input: i64) -> Self {
        self.distance = ::std::option::Option::Some(input);
        self
    }
    /// <p>Distance of the computed span. This feature doesn't split a span, but is always computed on a span split by other properties.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    pub fn set_distance(mut self, input: ::std::option::Option<i64>) -> Self {
        self.distance = input;
        self
    }
    /// <p>Distance of the computed span. This feature doesn't split a span, but is always computed on a span split by other properties.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    pub fn get_distance(&self) -> &::std::option::Option<i64> {
        &self.distance
    }
    /// <p>Duration of the computed span. This feature doesn't split a span, but is always computed on a span split by other properties.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn duration(mut self, input: i64) -> Self {
        self.duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Duration of the computed span. This feature doesn't split a span, but is always computed on a span split by other properties.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn set_duration(mut self, input: ::std::option::Option<i64>) -> Self {
        self.duration = input;
        self
    }
    /// <p>Duration of the computed span. This feature doesn't split a span, but is always computed on a span split by other properties.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn get_duration(&self) -> &::std::option::Option<i64> {
        &self.duration
    }
    /// <p>Offset in the leg geometry corresponding to the start of this span.</p>
    pub fn geometry_offset(mut self, input: i32) -> Self {
        self.geometry_offset = ::std::option::Option::Some(input);
        self
    }
    /// <p>Offset in the leg geometry corresponding to the start of this span.</p>
    pub fn set_geometry_offset(mut self, input: ::std::option::Option<i32>) -> Self {
        self.geometry_offset = input;
        self
    }
    /// <p>Offset in the leg geometry corresponding to the start of this span.</p>
    pub fn get_geometry_offset(&self) -> &::std::option::Option<i32> {
        &self.geometry_offset
    }
    /// Appends an item to `names`.
    ///
    /// To override the contents of this collection use [`set_names`](Self::set_names).
    ///
    /// <p>Provides an array of names of the ferry span in available languages.</p>
    pub fn names(mut self, input: crate::types::LocalizedString) -> Self {
        let mut v = self.names.unwrap_or_default();
        v.push(input);
        self.names = ::std::option::Option::Some(v);
        self
    }
    /// <p>Provides an array of names of the ferry span in available languages.</p>
    pub fn set_names(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LocalizedString>>) -> Self {
        self.names = input;
        self
    }
    /// <p>Provides an array of names of the ferry span in available languages.</p>
    pub fn get_names(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LocalizedString>> {
        &self.names
    }
    /// <p>2-3 letter Region code corresponding to the Span. This is either a province or a state.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>2-3 letter Region code corresponding to the Span. This is either a province or a state.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>2-3 letter Region code corresponding to the Span. This is either a province or a state.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// Consumes the builder and constructs a [`RouteFerrySpan`](crate::types::RouteFerrySpan).
    pub fn build(self) -> crate::types::RouteFerrySpan {
        crate::types::RouteFerrySpan {
            country: self.country,
            distance: self.distance.unwrap_or_default(),
            duration: self.duration.unwrap_or_default(),
            geometry_offset: self.geometry_offset,
            names: self.names,
            region: self.region,
        }
    }
}
