// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Options related to the pedestrian.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RoutePedestrianOptions {
    /// <p>Walking speed in Kilometers per hour.</p>
    pub speed: ::std::option::Option<f64>,
}
impl RoutePedestrianOptions {
    /// <p>Walking speed in Kilometers per hour.</p>
    pub fn speed(&self) -> ::std::option::Option<f64> {
        self.speed
    }
}
impl RoutePedestrianOptions {
    /// Creates a new builder-style object to manufacture [`RoutePedestrianOptions`](crate::types::RoutePedestrianOptions).
    pub fn builder() -> crate::types::builders::RoutePedestrianOptionsBuilder {
        crate::types::builders::RoutePedestrianOptionsBuilder::default()
    }
}

/// A builder for [`RoutePedestrianOptions`](crate::types::RoutePedestrianOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RoutePedestrianOptionsBuilder {
    pub(crate) speed: ::std::option::Option<f64>,
}
impl RoutePedestrianOptionsBuilder {
    /// <p>Walking speed in Kilometers per hour.</p>
    pub fn speed(mut self, input: f64) -> Self {
        self.speed = ::std::option::Option::Some(input);
        self
    }
    /// <p>Walking speed in Kilometers per hour.</p>
    pub fn set_speed(mut self, input: ::std::option::Option<f64>) -> Self {
        self.speed = input;
        self
    }
    /// <p>Walking speed in Kilometers per hour.</p>
    pub fn get_speed(&self) -> &::std::option::Option<f64> {
        &self.speed
    }
    /// Consumes the builder and constructs a [`RoutePedestrianOptions`](crate::types::RoutePedestrianOptions).
    pub fn build(self) -> crate::types::RoutePedestrianOptions {
        crate::types::RoutePedestrianOptions { speed: self.speed }
    }
}
