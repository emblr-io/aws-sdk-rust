// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Matching options.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RouteMatrixMatchingOptions {
    /// <p>Attempts to match the provided position to a road similar to the provided name.</p>
    pub name_hint: ::std::option::Option<::std::string::String>,
    /// <p>If the distance to a highway/bridge/tunnel/sliproad is within threshold, the waypoint will be snapped to the highway/bridge/tunnel/sliproad.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    pub on_road_threshold: i64,
    /// <p>Considers all roads within the provided radius to match the provided destination to. The roads that are considered are determined by the provided Strategy.</p>
    /// <p><b>Unit</b>: <code>Meters</code></p>
    pub radius: i64,
    /// <p>Strategy that defines matching of the position onto the road network. MatchAny considers all roads possible, whereas MatchMostSignificantRoad matches to the most significant road.</p>
    pub strategy: ::std::option::Option<crate::types::MatchingStrategy>,
}
impl RouteMatrixMatchingOptions {
    /// <p>Attempts to match the provided position to a road similar to the provided name.</p>
    pub fn name_hint(&self) -> ::std::option::Option<&str> {
        self.name_hint.as_deref()
    }
    /// <p>If the distance to a highway/bridge/tunnel/sliproad is within threshold, the waypoint will be snapped to the highway/bridge/tunnel/sliproad.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    pub fn on_road_threshold(&self) -> i64 {
        self.on_road_threshold
    }
    /// <p>Considers all roads within the provided radius to match the provided destination to. The roads that are considered are determined by the provided Strategy.</p>
    /// <p><b>Unit</b>: <code>Meters</code></p>
    pub fn radius(&self) -> i64 {
        self.radius
    }
    /// <p>Strategy that defines matching of the position onto the road network. MatchAny considers all roads possible, whereas MatchMostSignificantRoad matches to the most significant road.</p>
    pub fn strategy(&self) -> ::std::option::Option<&crate::types::MatchingStrategy> {
        self.strategy.as_ref()
    }
}
impl ::std::fmt::Debug for RouteMatrixMatchingOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RouteMatrixMatchingOptions");
        formatter.field("name_hint", &"*** Sensitive Data Redacted ***");
        formatter.field("on_road_threshold", &self.on_road_threshold);
        formatter.field("radius", &self.radius);
        formatter.field("strategy", &self.strategy);
        formatter.finish()
    }
}
impl RouteMatrixMatchingOptions {
    /// Creates a new builder-style object to manufacture [`RouteMatrixMatchingOptions`](crate::types::RouteMatrixMatchingOptions).
    pub fn builder() -> crate::types::builders::RouteMatrixMatchingOptionsBuilder {
        crate::types::builders::RouteMatrixMatchingOptionsBuilder::default()
    }
}

/// A builder for [`RouteMatrixMatchingOptions`](crate::types::RouteMatrixMatchingOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RouteMatrixMatchingOptionsBuilder {
    pub(crate) name_hint: ::std::option::Option<::std::string::String>,
    pub(crate) on_road_threshold: ::std::option::Option<i64>,
    pub(crate) radius: ::std::option::Option<i64>,
    pub(crate) strategy: ::std::option::Option<crate::types::MatchingStrategy>,
}
impl RouteMatrixMatchingOptionsBuilder {
    /// <p>Attempts to match the provided position to a road similar to the provided name.</p>
    pub fn name_hint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name_hint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Attempts to match the provided position to a road similar to the provided name.</p>
    pub fn set_name_hint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name_hint = input;
        self
    }
    /// <p>Attempts to match the provided position to a road similar to the provided name.</p>
    pub fn get_name_hint(&self) -> &::std::option::Option<::std::string::String> {
        &self.name_hint
    }
    /// <p>If the distance to a highway/bridge/tunnel/sliproad is within threshold, the waypoint will be snapped to the highway/bridge/tunnel/sliproad.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    pub fn on_road_threshold(mut self, input: i64) -> Self {
        self.on_road_threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the distance to a highway/bridge/tunnel/sliproad is within threshold, the waypoint will be snapped to the highway/bridge/tunnel/sliproad.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    pub fn set_on_road_threshold(mut self, input: ::std::option::Option<i64>) -> Self {
        self.on_road_threshold = input;
        self
    }
    /// <p>If the distance to a highway/bridge/tunnel/sliproad is within threshold, the waypoint will be snapped to the highway/bridge/tunnel/sliproad.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    pub fn get_on_road_threshold(&self) -> &::std::option::Option<i64> {
        &self.on_road_threshold
    }
    /// <p>Considers all roads within the provided radius to match the provided destination to. The roads that are considered are determined by the provided Strategy.</p>
    /// <p><b>Unit</b>: <code>Meters</code></p>
    pub fn radius(mut self, input: i64) -> Self {
        self.radius = ::std::option::Option::Some(input);
        self
    }
    /// <p>Considers all roads within the provided radius to match the provided destination to. The roads that are considered are determined by the provided Strategy.</p>
    /// <p><b>Unit</b>: <code>Meters</code></p>
    pub fn set_radius(mut self, input: ::std::option::Option<i64>) -> Self {
        self.radius = input;
        self
    }
    /// <p>Considers all roads within the provided radius to match the provided destination to. The roads that are considered are determined by the provided Strategy.</p>
    /// <p><b>Unit</b>: <code>Meters</code></p>
    pub fn get_radius(&self) -> &::std::option::Option<i64> {
        &self.radius
    }
    /// <p>Strategy that defines matching of the position onto the road network. MatchAny considers all roads possible, whereas MatchMostSignificantRoad matches to the most significant road.</p>
    pub fn strategy(mut self, input: crate::types::MatchingStrategy) -> Self {
        self.strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Strategy that defines matching of the position onto the road network. MatchAny considers all roads possible, whereas MatchMostSignificantRoad matches to the most significant road.</p>
    pub fn set_strategy(mut self, input: ::std::option::Option<crate::types::MatchingStrategy>) -> Self {
        self.strategy = input;
        self
    }
    /// <p>Strategy that defines matching of the position onto the road network. MatchAny considers all roads possible, whereas MatchMostSignificantRoad matches to the most significant road.</p>
    pub fn get_strategy(&self) -> &::std::option::Option<crate::types::MatchingStrategy> {
        &self.strategy
    }
    /// Consumes the builder and constructs a [`RouteMatrixMatchingOptions`](crate::types::RouteMatrixMatchingOptions).
    pub fn build(self) -> crate::types::RouteMatrixMatchingOptions {
        crate::types::RouteMatrixMatchingOptions {
            name_hint: self.name_hint,
            on_road_threshold: self.on_road_threshold.unwrap_or_default(),
            radius: self.radius.unwrap_or_default(),
            strategy: self.strategy,
        }
    }
}
impl ::std::fmt::Debug for RouteMatrixMatchingOptionsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RouteMatrixMatchingOptionsBuilder");
        formatter.field("name_hint", &"*** Sensitive Data Redacted ***");
        formatter.field("on_road_threshold", &self.on_road_threshold);
        formatter.field("radius", &self.radius);
        formatter.field("strategy", &self.strategy);
        formatter.finish()
    }
}
