// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summarized details for the leg including travel steps only. The Distance for the travel only portion of the journey is the same as the Distance within the Overview summary.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteFerryTravelOnlySummary {
    /// <p>Total duration in free flowing traffic, which is the best case or shortest duration possible to cover the leg.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub duration: i64,
}
impl RouteFerryTravelOnlySummary {
    /// <p>Total duration in free flowing traffic, which is the best case or shortest duration possible to cover the leg.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn duration(&self) -> i64 {
        self.duration
    }
}
impl RouteFerryTravelOnlySummary {
    /// Creates a new builder-style object to manufacture [`RouteFerryTravelOnlySummary`](crate::types::RouteFerryTravelOnlySummary).
    pub fn builder() -> crate::types::builders::RouteFerryTravelOnlySummaryBuilder {
        crate::types::builders::RouteFerryTravelOnlySummaryBuilder::default()
    }
}

/// A builder for [`RouteFerryTravelOnlySummary`](crate::types::RouteFerryTravelOnlySummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteFerryTravelOnlySummaryBuilder {
    pub(crate) duration: ::std::option::Option<i64>,
}
impl RouteFerryTravelOnlySummaryBuilder {
    /// <p>Total duration in free flowing traffic, which is the best case or shortest duration possible to cover the leg.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    /// This field is required.
    pub fn duration(mut self, input: i64) -> Self {
        self.duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Total duration in free flowing traffic, which is the best case or shortest duration possible to cover the leg.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn set_duration(mut self, input: ::std::option::Option<i64>) -> Self {
        self.duration = input;
        self
    }
    /// <p>Total duration in free flowing traffic, which is the best case or shortest duration possible to cover the leg.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn get_duration(&self) -> &::std::option::Option<i64> {
        &self.duration
    }
    /// Consumes the builder and constructs a [`RouteFerryTravelOnlySummary`](crate::types::RouteFerryTravelOnlySummary).
    pub fn build(self) -> crate::types::RouteFerryTravelOnlySummary {
        crate::types::RouteFerryTravelOnlySummary {
            duration: self.duration.unwrap_or_default(),
        }
    }
}
