// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the dynamic speed.</p>
/// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteSpanDynamicSpeedDetails {
    /// <p>Estimated speed while traversing the span without traffic congestion.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub best_case_speed: f64,
    /// <p>Estimated time to turn from this span into the next.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub turn_duration: i64,
    /// <p>Estimated speed while traversing the span under typical traffic congestion.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub typical_speed: f64,
}
impl RouteSpanDynamicSpeedDetails {
    /// <p>Estimated speed while traversing the span without traffic congestion.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn best_case_speed(&self) -> f64 {
        self.best_case_speed
    }
    /// <p>Estimated time to turn from this span into the next.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn turn_duration(&self) -> i64 {
        self.turn_duration
    }
    /// <p>Estimated speed while traversing the span under typical traffic congestion.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn typical_speed(&self) -> f64 {
        self.typical_speed
    }
}
impl RouteSpanDynamicSpeedDetails {
    /// Creates a new builder-style object to manufacture [`RouteSpanDynamicSpeedDetails`](crate::types::RouteSpanDynamicSpeedDetails).
    pub fn builder() -> crate::types::builders::RouteSpanDynamicSpeedDetailsBuilder {
        crate::types::builders::RouteSpanDynamicSpeedDetailsBuilder::default()
    }
}

/// A builder for [`RouteSpanDynamicSpeedDetails`](crate::types::RouteSpanDynamicSpeedDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteSpanDynamicSpeedDetailsBuilder {
    pub(crate) best_case_speed: ::std::option::Option<f64>,
    pub(crate) turn_duration: ::std::option::Option<i64>,
    pub(crate) typical_speed: ::std::option::Option<f64>,
}
impl RouteSpanDynamicSpeedDetailsBuilder {
    /// <p>Estimated speed while traversing the span without traffic congestion.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn best_case_speed(mut self, input: f64) -> Self {
        self.best_case_speed = ::std::option::Option::Some(input);
        self
    }
    /// <p>Estimated speed while traversing the span without traffic congestion.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn set_best_case_speed(mut self, input: ::std::option::Option<f64>) -> Self {
        self.best_case_speed = input;
        self
    }
    /// <p>Estimated speed while traversing the span without traffic congestion.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn get_best_case_speed(&self) -> &::std::option::Option<f64> {
        &self.best_case_speed
    }
    /// <p>Estimated time to turn from this span into the next.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn turn_duration(mut self, input: i64) -> Self {
        self.turn_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Estimated time to turn from this span into the next.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn set_turn_duration(mut self, input: ::std::option::Option<i64>) -> Self {
        self.turn_duration = input;
        self
    }
    /// <p>Estimated time to turn from this span into the next.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn get_turn_duration(&self) -> &::std::option::Option<i64> {
        &self.turn_duration
    }
    /// <p>Estimated speed while traversing the span under typical traffic congestion.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn typical_speed(mut self, input: f64) -> Self {
        self.typical_speed = ::std::option::Option::Some(input);
        self
    }
    /// <p>Estimated speed while traversing the span under typical traffic congestion.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn set_typical_speed(mut self, input: ::std::option::Option<f64>) -> Self {
        self.typical_speed = input;
        self
    }
    /// <p>Estimated speed while traversing the span under typical traffic congestion.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn get_typical_speed(&self) -> &::std::option::Option<f64> {
        &self.typical_speed
    }
    /// Consumes the builder and constructs a [`RouteSpanDynamicSpeedDetails`](crate::types::RouteSpanDynamicSpeedDetails).
    pub fn build(self) -> crate::types::RouteSpanDynamicSpeedDetails {
        crate::types::RouteSpanDynamicSpeedDetails {
            best_case_speed: self.best_case_speed.unwrap_or_default(),
            turn_duration: self.turn_duration.unwrap_or_default(),
            typical_speed: self.typical_speed.unwrap_or_default(),
        }
    }
}
