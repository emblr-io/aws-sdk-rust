// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Driving distance related options.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WaypointOptimizationDrivingDistanceOptions {
    /// <p>DrivingDistance assigns all the waypoints that are within driving distance of each other into a single cluster.</p>
    pub driving_distance: i64,
}
impl WaypointOptimizationDrivingDistanceOptions {
    /// <p>DrivingDistance assigns all the waypoints that are within driving distance of each other into a single cluster.</p>
    pub fn driving_distance(&self) -> i64 {
        self.driving_distance
    }
}
impl WaypointOptimizationDrivingDistanceOptions {
    /// Creates a new builder-style object to manufacture [`WaypointOptimizationDrivingDistanceOptions`](crate::types::WaypointOptimizationDrivingDistanceOptions).
    pub fn builder() -> crate::types::builders::WaypointOptimizationDrivingDistanceOptionsBuilder {
        crate::types::builders::WaypointOptimizationDrivingDistanceOptionsBuilder::default()
    }
}

/// A builder for [`WaypointOptimizationDrivingDistanceOptions`](crate::types::WaypointOptimizationDrivingDistanceOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WaypointOptimizationDrivingDistanceOptionsBuilder {
    pub(crate) driving_distance: ::std::option::Option<i64>,
}
impl WaypointOptimizationDrivingDistanceOptionsBuilder {
    /// <p>DrivingDistance assigns all the waypoints that are within driving distance of each other into a single cluster.</p>
    /// This field is required.
    pub fn driving_distance(mut self, input: i64) -> Self {
        self.driving_distance = ::std::option::Option::Some(input);
        self
    }
    /// <p>DrivingDistance assigns all the waypoints that are within driving distance of each other into a single cluster.</p>
    pub fn set_driving_distance(mut self, input: ::std::option::Option<i64>) -> Self {
        self.driving_distance = input;
        self
    }
    /// <p>DrivingDistance assigns all the waypoints that are within driving distance of each other into a single cluster.</p>
    pub fn get_driving_distance(&self) -> &::std::option::Option<i64> {
        &self.driving_distance
    }
    /// Consumes the builder and constructs a [`WaypointOptimizationDrivingDistanceOptions`](crate::types::WaypointOptimizationDrivingDistanceOptions).
    pub fn build(self) -> crate::types::WaypointOptimizationDrivingDistanceOptions {
        crate::types::WaypointOptimizationDrivingDistanceOptions {
            driving_distance: self.driving_distance.unwrap_or_default(),
        }
    }
}
