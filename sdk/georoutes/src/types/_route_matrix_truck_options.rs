// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Travel mode options when the provided travel mode is "Truck"</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteMatrixTruckOptions {
    /// <p>Total number of axles of the vehicle.</p>
    pub axle_count: ::std::option::Option<i32>,
    /// <p>Gross weight of the vehicle including trailers, and goods at capacity.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub gross_weight: i64,
    /// <p>List of Hazardous cargo contained in the vehicle.</p>
    pub hazardous_cargos: ::std::option::Option<::std::vec::Vec<crate::types::RouteMatrixHazardousCargoType>>,
    /// <p>Height of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub height: i64,
    /// <p>Kingpin to rear axle length of the vehicle</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub kpra_length: i64,
    /// <p>Length of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub length: i64,
    /// <p>The vehicle License Plate.</p>
    pub license_plate: ::std::option::Option<crate::types::RouteMatrixVehicleLicensePlate>,
    /// <p>Maximum speed</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub max_speed: ::std::option::Option<f64>,
    /// <p>The number of occupants in the vehicle.</p>
    /// <p>Default Value: <code>1</code></p>
    pub occupancy: ::std::option::Option<i32>,
    /// <p>Payload capacity of the vehicle and trailers attached.</p>
    /// <p><b>Unit</b>: <code>kilograms</code></p>
    pub payload_capacity: i64,
    /// <p>Trailer options corresponding to the vehicle.</p>
    pub trailer: ::std::option::Option<crate::types::RouteMatrixTrailerOptions>,
    /// <p>Type of the truck.</p>
    pub truck_type: ::std::option::Option<crate::types::RouteMatrixTruckType>,
    /// <p>The tunnel restriction code.</p>
    /// <p>Tunnel categories in this list indicate the restrictions which apply to certain tunnels in Great Britain. They relate to the types of dangerous goods that can be transported through them.</p>
    /// <ul>
    /// <li>
    /// <p><i>Tunnel Category B</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Limited risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Few restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category C</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Medium risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Some restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category D</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: High risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Many restrictions occur</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category E</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Very high risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Restricted tunnel</p></li>
    /// </ul></li>
    /// </ul>
    pub tunnel_restriction_code: ::std::option::Option<::std::string::String>,
    /// <p>Heaviest weight per axle irrespective of the axle type or the axle group. Meant for usage in countries where the differences in axle types or axle groups are not distinguished.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub weight_per_axle: i64,
    /// <p>Specifies the total weight for the specified axle group. Meant for usage in countries that have different regulations based on the axle group type.</p>
    pub weight_per_axle_group: ::std::option::Option<crate::types::WeightPerAxleGroup>,
    /// <p>Width of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub width: i64,
}
impl RouteMatrixTruckOptions {
    /// <p>Total number of axles of the vehicle.</p>
    pub fn axle_count(&self) -> ::std::option::Option<i32> {
        self.axle_count
    }
    /// <p>Gross weight of the vehicle including trailers, and goods at capacity.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn gross_weight(&self) -> i64 {
        self.gross_weight
    }
    /// <p>List of Hazardous cargo contained in the vehicle.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.hazardous_cargos.is_none()`.
    pub fn hazardous_cargos(&self) -> &[crate::types::RouteMatrixHazardousCargoType] {
        self.hazardous_cargos.as_deref().unwrap_or_default()
    }
    /// <p>Height of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn height(&self) -> i64 {
        self.height
    }
    /// <p>Kingpin to rear axle length of the vehicle</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn kpra_length(&self) -> i64 {
        self.kpra_length
    }
    /// <p>Length of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn length(&self) -> i64 {
        self.length
    }
    /// <p>The vehicle License Plate.</p>
    pub fn license_plate(&self) -> ::std::option::Option<&crate::types::RouteMatrixVehicleLicensePlate> {
        self.license_plate.as_ref()
    }
    /// <p>Maximum speed</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn max_speed(&self) -> ::std::option::Option<f64> {
        self.max_speed
    }
    /// <p>The number of occupants in the vehicle.</p>
    /// <p>Default Value: <code>1</code></p>
    pub fn occupancy(&self) -> ::std::option::Option<i32> {
        self.occupancy
    }
    /// <p>Payload capacity of the vehicle and trailers attached.</p>
    /// <p><b>Unit</b>: <code>kilograms</code></p>
    pub fn payload_capacity(&self) -> i64 {
        self.payload_capacity
    }
    /// <p>Trailer options corresponding to the vehicle.</p>
    pub fn trailer(&self) -> ::std::option::Option<&crate::types::RouteMatrixTrailerOptions> {
        self.trailer.as_ref()
    }
    /// <p>Type of the truck.</p>
    pub fn truck_type(&self) -> ::std::option::Option<&crate::types::RouteMatrixTruckType> {
        self.truck_type.as_ref()
    }
    /// <p>The tunnel restriction code.</p>
    /// <p>Tunnel categories in this list indicate the restrictions which apply to certain tunnels in Great Britain. They relate to the types of dangerous goods that can be transported through them.</p>
    /// <ul>
    /// <li>
    /// <p><i>Tunnel Category B</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Limited risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Few restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category C</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Medium risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Some restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category D</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: High risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Many restrictions occur</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category E</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Very high risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Restricted tunnel</p></li>
    /// </ul></li>
    /// </ul>
    pub fn tunnel_restriction_code(&self) -> ::std::option::Option<&str> {
        self.tunnel_restriction_code.as_deref()
    }
    /// <p>Heaviest weight per axle irrespective of the axle type or the axle group. Meant for usage in countries where the differences in axle types or axle groups are not distinguished.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn weight_per_axle(&self) -> i64 {
        self.weight_per_axle
    }
    /// <p>Specifies the total weight for the specified axle group. Meant for usage in countries that have different regulations based on the axle group type.</p>
    pub fn weight_per_axle_group(&self) -> ::std::option::Option<&crate::types::WeightPerAxleGroup> {
        self.weight_per_axle_group.as_ref()
    }
    /// <p>Width of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn width(&self) -> i64 {
        self.width
    }
}
impl RouteMatrixTruckOptions {
    /// Creates a new builder-style object to manufacture [`RouteMatrixTruckOptions`](crate::types::RouteMatrixTruckOptions).
    pub fn builder() -> crate::types::builders::RouteMatrixTruckOptionsBuilder {
        crate::types::builders::RouteMatrixTruckOptionsBuilder::default()
    }
}

/// A builder for [`RouteMatrixTruckOptions`](crate::types::RouteMatrixTruckOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteMatrixTruckOptionsBuilder {
    pub(crate) axle_count: ::std::option::Option<i32>,
    pub(crate) gross_weight: ::std::option::Option<i64>,
    pub(crate) hazardous_cargos: ::std::option::Option<::std::vec::Vec<crate::types::RouteMatrixHazardousCargoType>>,
    pub(crate) height: ::std::option::Option<i64>,
    pub(crate) kpra_length: ::std::option::Option<i64>,
    pub(crate) length: ::std::option::Option<i64>,
    pub(crate) license_plate: ::std::option::Option<crate::types::RouteMatrixVehicleLicensePlate>,
    pub(crate) max_speed: ::std::option::Option<f64>,
    pub(crate) occupancy: ::std::option::Option<i32>,
    pub(crate) payload_capacity: ::std::option::Option<i64>,
    pub(crate) trailer: ::std::option::Option<crate::types::RouteMatrixTrailerOptions>,
    pub(crate) truck_type: ::std::option::Option<crate::types::RouteMatrixTruckType>,
    pub(crate) tunnel_restriction_code: ::std::option::Option<::std::string::String>,
    pub(crate) weight_per_axle: ::std::option::Option<i64>,
    pub(crate) weight_per_axle_group: ::std::option::Option<crate::types::WeightPerAxleGroup>,
    pub(crate) width: ::std::option::Option<i64>,
}
impl RouteMatrixTruckOptionsBuilder {
    /// <p>Total number of axles of the vehicle.</p>
    pub fn axle_count(mut self, input: i32) -> Self {
        self.axle_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Total number of axles of the vehicle.</p>
    pub fn set_axle_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.axle_count = input;
        self
    }
    /// <p>Total number of axles of the vehicle.</p>
    pub fn get_axle_count(&self) -> &::std::option::Option<i32> {
        &self.axle_count
    }
    /// <p>Gross weight of the vehicle including trailers, and goods at capacity.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn gross_weight(mut self, input: i64) -> Self {
        self.gross_weight = ::std::option::Option::Some(input);
        self
    }
    /// <p>Gross weight of the vehicle including trailers, and goods at capacity.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn set_gross_weight(mut self, input: ::std::option::Option<i64>) -> Self {
        self.gross_weight = input;
        self
    }
    /// <p>Gross weight of the vehicle including trailers, and goods at capacity.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn get_gross_weight(&self) -> &::std::option::Option<i64> {
        &self.gross_weight
    }
    /// Appends an item to `hazardous_cargos`.
    ///
    /// To override the contents of this collection use [`set_hazardous_cargos`](Self::set_hazardous_cargos).
    ///
    /// <p>List of Hazardous cargo contained in the vehicle.</p>
    pub fn hazardous_cargos(mut self, input: crate::types::RouteMatrixHazardousCargoType) -> Self {
        let mut v = self.hazardous_cargos.unwrap_or_default();
        v.push(input);
        self.hazardous_cargos = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of Hazardous cargo contained in the vehicle.</p>
    pub fn set_hazardous_cargos(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteMatrixHazardousCargoType>>) -> Self {
        self.hazardous_cargos = input;
        self
    }
    /// <p>List of Hazardous cargo contained in the vehicle.</p>
    pub fn get_hazardous_cargos(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteMatrixHazardousCargoType>> {
        &self.hazardous_cargos
    }
    /// <p>Height of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn height(mut self, input: i64) -> Self {
        self.height = ::std::option::Option::Some(input);
        self
    }
    /// <p>Height of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn set_height(mut self, input: ::std::option::Option<i64>) -> Self {
        self.height = input;
        self
    }
    /// <p>Height of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn get_height(&self) -> &::std::option::Option<i64> {
        &self.height
    }
    /// <p>Kingpin to rear axle length of the vehicle</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn kpra_length(mut self, input: i64) -> Self {
        self.kpra_length = ::std::option::Option::Some(input);
        self
    }
    /// <p>Kingpin to rear axle length of the vehicle</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn set_kpra_length(mut self, input: ::std::option::Option<i64>) -> Self {
        self.kpra_length = input;
        self
    }
    /// <p>Kingpin to rear axle length of the vehicle</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn get_kpra_length(&self) -> &::std::option::Option<i64> {
        &self.kpra_length
    }
    /// <p>Length of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn length(mut self, input: i64) -> Self {
        self.length = ::std::option::Option::Some(input);
        self
    }
    /// <p>Length of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn set_length(mut self, input: ::std::option::Option<i64>) -> Self {
        self.length = input;
        self
    }
    /// <p>Length of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn get_length(&self) -> &::std::option::Option<i64> {
        &self.length
    }
    /// <p>The vehicle License Plate.</p>
    pub fn license_plate(mut self, input: crate::types::RouteMatrixVehicleLicensePlate) -> Self {
        self.license_plate = ::std::option::Option::Some(input);
        self
    }
    /// <p>The vehicle License Plate.</p>
    pub fn set_license_plate(mut self, input: ::std::option::Option<crate::types::RouteMatrixVehicleLicensePlate>) -> Self {
        self.license_plate = input;
        self
    }
    /// <p>The vehicle License Plate.</p>
    pub fn get_license_plate(&self) -> &::std::option::Option<crate::types::RouteMatrixVehicleLicensePlate> {
        &self.license_plate
    }
    /// <p>Maximum speed</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn max_speed(mut self, input: f64) -> Self {
        self.max_speed = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maximum speed</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn set_max_speed(mut self, input: ::std::option::Option<f64>) -> Self {
        self.max_speed = input;
        self
    }
    /// <p>Maximum speed</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn get_max_speed(&self) -> &::std::option::Option<f64> {
        &self.max_speed
    }
    /// <p>The number of occupants in the vehicle.</p>
    /// <p>Default Value: <code>1</code></p>
    pub fn occupancy(mut self, input: i32) -> Self {
        self.occupancy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of occupants in the vehicle.</p>
    /// <p>Default Value: <code>1</code></p>
    pub fn set_occupancy(mut self, input: ::std::option::Option<i32>) -> Self {
        self.occupancy = input;
        self
    }
    /// <p>The number of occupants in the vehicle.</p>
    /// <p>Default Value: <code>1</code></p>
    pub fn get_occupancy(&self) -> &::std::option::Option<i32> {
        &self.occupancy
    }
    /// <p>Payload capacity of the vehicle and trailers attached.</p>
    /// <p><b>Unit</b>: <code>kilograms</code></p>
    pub fn payload_capacity(mut self, input: i64) -> Self {
        self.payload_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>Payload capacity of the vehicle and trailers attached.</p>
    /// <p><b>Unit</b>: <code>kilograms</code></p>
    pub fn set_payload_capacity(mut self, input: ::std::option::Option<i64>) -> Self {
        self.payload_capacity = input;
        self
    }
    /// <p>Payload capacity of the vehicle and trailers attached.</p>
    /// <p><b>Unit</b>: <code>kilograms</code></p>
    pub fn get_payload_capacity(&self) -> &::std::option::Option<i64> {
        &self.payload_capacity
    }
    /// <p>Trailer options corresponding to the vehicle.</p>
    pub fn trailer(mut self, input: crate::types::RouteMatrixTrailerOptions) -> Self {
        self.trailer = ::std::option::Option::Some(input);
        self
    }
    /// <p>Trailer options corresponding to the vehicle.</p>
    pub fn set_trailer(mut self, input: ::std::option::Option<crate::types::RouteMatrixTrailerOptions>) -> Self {
        self.trailer = input;
        self
    }
    /// <p>Trailer options corresponding to the vehicle.</p>
    pub fn get_trailer(&self) -> &::std::option::Option<crate::types::RouteMatrixTrailerOptions> {
        &self.trailer
    }
    /// <p>Type of the truck.</p>
    pub fn truck_type(mut self, input: crate::types::RouteMatrixTruckType) -> Self {
        self.truck_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of the truck.</p>
    pub fn set_truck_type(mut self, input: ::std::option::Option<crate::types::RouteMatrixTruckType>) -> Self {
        self.truck_type = input;
        self
    }
    /// <p>Type of the truck.</p>
    pub fn get_truck_type(&self) -> &::std::option::Option<crate::types::RouteMatrixTruckType> {
        &self.truck_type
    }
    /// <p>The tunnel restriction code.</p>
    /// <p>Tunnel categories in this list indicate the restrictions which apply to certain tunnels in Great Britain. They relate to the types of dangerous goods that can be transported through them.</p>
    /// <ul>
    /// <li>
    /// <p><i>Tunnel Category B</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Limited risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Few restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category C</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Medium risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Some restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category D</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: High risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Many restrictions occur</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category E</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Very high risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Restricted tunnel</p></li>
    /// </ul></li>
    /// </ul>
    pub fn tunnel_restriction_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tunnel_restriction_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The tunnel restriction code.</p>
    /// <p>Tunnel categories in this list indicate the restrictions which apply to certain tunnels in Great Britain. They relate to the types of dangerous goods that can be transported through them.</p>
    /// <ul>
    /// <li>
    /// <p><i>Tunnel Category B</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Limited risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Few restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category C</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Medium risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Some restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category D</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: High risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Many restrictions occur</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category E</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Very high risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Restricted tunnel</p></li>
    /// </ul></li>
    /// </ul>
    pub fn set_tunnel_restriction_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tunnel_restriction_code = input;
        self
    }
    /// <p>The tunnel restriction code.</p>
    /// <p>Tunnel categories in this list indicate the restrictions which apply to certain tunnels in Great Britain. They relate to the types of dangerous goods that can be transported through them.</p>
    /// <ul>
    /// <li>
    /// <p><i>Tunnel Category B</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Limited risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Few restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category C</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Medium risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Some restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category D</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: High risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Many restrictions occur</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category E</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Very high risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Restricted tunnel</p></li>
    /// </ul></li>
    /// </ul>
    pub fn get_tunnel_restriction_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.tunnel_restriction_code
    }
    /// <p>Heaviest weight per axle irrespective of the axle type or the axle group. Meant for usage in countries where the differences in axle types or axle groups are not distinguished.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn weight_per_axle(mut self, input: i64) -> Self {
        self.weight_per_axle = ::std::option::Option::Some(input);
        self
    }
    /// <p>Heaviest weight per axle irrespective of the axle type or the axle group. Meant for usage in countries where the differences in axle types or axle groups are not distinguished.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn set_weight_per_axle(mut self, input: ::std::option::Option<i64>) -> Self {
        self.weight_per_axle = input;
        self
    }
    /// <p>Heaviest weight per axle irrespective of the axle type or the axle group. Meant for usage in countries where the differences in axle types or axle groups are not distinguished.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn get_weight_per_axle(&self) -> &::std::option::Option<i64> {
        &self.weight_per_axle
    }
    /// <p>Specifies the total weight for the specified axle group. Meant for usage in countries that have different regulations based on the axle group type.</p>
    pub fn weight_per_axle_group(mut self, input: crate::types::WeightPerAxleGroup) -> Self {
        self.weight_per_axle_group = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the total weight for the specified axle group. Meant for usage in countries that have different regulations based on the axle group type.</p>
    pub fn set_weight_per_axle_group(mut self, input: ::std::option::Option<crate::types::WeightPerAxleGroup>) -> Self {
        self.weight_per_axle_group = input;
        self
    }
    /// <p>Specifies the total weight for the specified axle group. Meant for usage in countries that have different regulations based on the axle group type.</p>
    pub fn get_weight_per_axle_group(&self) -> &::std::option::Option<crate::types::WeightPerAxleGroup> {
        &self.weight_per_axle_group
    }
    /// <p>Width of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn width(mut self, input: i64) -> Self {
        self.width = ::std::option::Option::Some(input);
        self
    }
    /// <p>Width of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn set_width(mut self, input: ::std::option::Option<i64>) -> Self {
        self.width = input;
        self
    }
    /// <p>Width of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn get_width(&self) -> &::std::option::Option<i64> {
        &self.width
    }
    /// Consumes the builder and constructs a [`RouteMatrixTruckOptions`](crate::types::RouteMatrixTruckOptions).
    pub fn build(self) -> crate::types::RouteMatrixTruckOptions {
        crate::types::RouteMatrixTruckOptions {
            axle_count: self.axle_count,
            gross_weight: self.gross_weight.unwrap_or_default(),
            hazardous_cargos: self.hazardous_cargos,
            height: self.height.unwrap_or_default(),
            kpra_length: self.kpra_length.unwrap_or_default(),
            length: self.length.unwrap_or_default(),
            license_plate: self.license_plate,
            max_speed: self.max_speed,
            occupancy: self.occupancy,
            payload_capacity: self.payload_capacity.unwrap_or_default(),
            trailer: self.trailer,
            truck_type: self.truck_type,
            tunnel_restriction_code: self.tunnel_restriction_code,
            weight_per_axle: self.weight_per_axle.unwrap_or_default(),
            weight_per_axle_group: self.weight_per_axle_group,
            width: self.width.unwrap_or_default(),
        }
    }
}
