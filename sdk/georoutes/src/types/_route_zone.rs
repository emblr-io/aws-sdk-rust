// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The zone.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteZone {
    /// <p>The zone category.</p>
    pub category: ::std::option::Option<crate::types::RouteZoneCategory>,
    /// <p>The name of the zone.</p>
    pub name: ::std::option::Option<::std::string::String>,
}
impl RouteZone {
    /// <p>The zone category.</p>
    pub fn category(&self) -> ::std::option::Option<&crate::types::RouteZoneCategory> {
        self.category.as_ref()
    }
    /// <p>The name of the zone.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl RouteZone {
    /// Creates a new builder-style object to manufacture [`RouteZone`](crate::types::RouteZone).
    pub fn builder() -> crate::types::builders::RouteZoneBuilder {
        crate::types::builders::RouteZoneBuilder::default()
    }
}

/// A builder for [`RouteZone`](crate::types::RouteZone).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteZoneBuilder {
    pub(crate) category: ::std::option::Option<crate::types::RouteZoneCategory>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
}
impl RouteZoneBuilder {
    /// <p>The zone category.</p>
    pub fn category(mut self, input: crate::types::RouteZoneCategory) -> Self {
        self.category = ::std::option::Option::Some(input);
        self
    }
    /// <p>The zone category.</p>
    pub fn set_category(mut self, input: ::std::option::Option<crate::types::RouteZoneCategory>) -> Self {
        self.category = input;
        self
    }
    /// <p>The zone category.</p>
    pub fn get_category(&self) -> &::std::option::Option<crate::types::RouteZoneCategory> {
        &self.category
    }
    /// <p>The name of the zone.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the zone.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the zone.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Consumes the builder and constructs a [`RouteZone`](crate::types::RouteZone).
    pub fn build(self) -> crate::types::RouteZone {
        crate::types::RouteZone {
            category: self.category,
            name: self.name,
        }
    }
}
