// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details that are specific to a pedestrian leg.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RoutePedestrianLegDetails {
    /// <p>Details corresponding to the arrival for the leg.</p>
    pub arrival: ::std::option::Option<crate::types::RoutePedestrianArrival>,
    /// <p>Details corresponding to the departure for the leg.</p>
    pub departure: ::std::option::Option<crate::types::RoutePedestrianDeparture>,
    /// <p>Notices are additional information returned that indicate issues that occurred during route calculation.</p>
    pub notices: ::std::vec::Vec<crate::types::RoutePedestrianNotice>,
    /// <p>Waypoints that were passed through during the leg. This includes the waypoints that were configured with the PassThrough option.</p>
    pub pass_through_waypoints: ::std::vec::Vec<crate::types::RoutePassThroughWaypoint>,
    /// <p>Spans that were computed for the requested SpanAdditionalFeatures.</p>
    pub spans: ::std::vec::Vec<crate::types::RoutePedestrianSpan>,
    /// <p>Summarized details of the leg.</p>
    pub summary: ::std::option::Option<crate::types::RoutePedestrianSummary>,
    /// <p>Steps of a leg that must be performed before the travel portion of the leg.</p>
    pub travel_steps: ::std::vec::Vec<crate::types::RoutePedestrianTravelStep>,
}
impl RoutePedestrianLegDetails {
    /// <p>Details corresponding to the arrival for the leg.</p>
    pub fn arrival(&self) -> ::std::option::Option<&crate::types::RoutePedestrianArrival> {
        self.arrival.as_ref()
    }
    /// <p>Details corresponding to the departure for the leg.</p>
    pub fn departure(&self) -> ::std::option::Option<&crate::types::RoutePedestrianDeparture> {
        self.departure.as_ref()
    }
    /// <p>Notices are additional information returned that indicate issues that occurred during route calculation.</p>
    pub fn notices(&self) -> &[crate::types::RoutePedestrianNotice] {
        use std::ops::Deref;
        self.notices.deref()
    }
    /// <p>Waypoints that were passed through during the leg. This includes the waypoints that were configured with the PassThrough option.</p>
    pub fn pass_through_waypoints(&self) -> &[crate::types::RoutePassThroughWaypoint] {
        use std::ops::Deref;
        self.pass_through_waypoints.deref()
    }
    /// <p>Spans that were computed for the requested SpanAdditionalFeatures.</p>
    pub fn spans(&self) -> &[crate::types::RoutePedestrianSpan] {
        use std::ops::Deref;
        self.spans.deref()
    }
    /// <p>Summarized details of the leg.</p>
    pub fn summary(&self) -> ::std::option::Option<&crate::types::RoutePedestrianSummary> {
        self.summary.as_ref()
    }
    /// <p>Steps of a leg that must be performed before the travel portion of the leg.</p>
    pub fn travel_steps(&self) -> &[crate::types::RoutePedestrianTravelStep] {
        use std::ops::Deref;
        self.travel_steps.deref()
    }
}
impl RoutePedestrianLegDetails {
    /// Creates a new builder-style object to manufacture [`RoutePedestrianLegDetails`](crate::types::RoutePedestrianLegDetails).
    pub fn builder() -> crate::types::builders::RoutePedestrianLegDetailsBuilder {
        crate::types::builders::RoutePedestrianLegDetailsBuilder::default()
    }
}

/// A builder for [`RoutePedestrianLegDetails`](crate::types::RoutePedestrianLegDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RoutePedestrianLegDetailsBuilder {
    pub(crate) arrival: ::std::option::Option<crate::types::RoutePedestrianArrival>,
    pub(crate) departure: ::std::option::Option<crate::types::RoutePedestrianDeparture>,
    pub(crate) notices: ::std::option::Option<::std::vec::Vec<crate::types::RoutePedestrianNotice>>,
    pub(crate) pass_through_waypoints: ::std::option::Option<::std::vec::Vec<crate::types::RoutePassThroughWaypoint>>,
    pub(crate) spans: ::std::option::Option<::std::vec::Vec<crate::types::RoutePedestrianSpan>>,
    pub(crate) summary: ::std::option::Option<crate::types::RoutePedestrianSummary>,
    pub(crate) travel_steps: ::std::option::Option<::std::vec::Vec<crate::types::RoutePedestrianTravelStep>>,
}
impl RoutePedestrianLegDetailsBuilder {
    /// <p>Details corresponding to the arrival for the leg.</p>
    /// This field is required.
    pub fn arrival(mut self, input: crate::types::RoutePedestrianArrival) -> Self {
        self.arrival = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details corresponding to the arrival for the leg.</p>
    pub fn set_arrival(mut self, input: ::std::option::Option<crate::types::RoutePedestrianArrival>) -> Self {
        self.arrival = input;
        self
    }
    /// <p>Details corresponding to the arrival for the leg.</p>
    pub fn get_arrival(&self) -> &::std::option::Option<crate::types::RoutePedestrianArrival> {
        &self.arrival
    }
    /// <p>Details corresponding to the departure for the leg.</p>
    /// This field is required.
    pub fn departure(mut self, input: crate::types::RoutePedestrianDeparture) -> Self {
        self.departure = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details corresponding to the departure for the leg.</p>
    pub fn set_departure(mut self, input: ::std::option::Option<crate::types::RoutePedestrianDeparture>) -> Self {
        self.departure = input;
        self
    }
    /// <p>Details corresponding to the departure for the leg.</p>
    pub fn get_departure(&self) -> &::std::option::Option<crate::types::RoutePedestrianDeparture> {
        &self.departure
    }
    /// Appends an item to `notices`.
    ///
    /// To override the contents of this collection use [`set_notices`](Self::set_notices).
    ///
    /// <p>Notices are additional information returned that indicate issues that occurred during route calculation.</p>
    pub fn notices(mut self, input: crate::types::RoutePedestrianNotice) -> Self {
        let mut v = self.notices.unwrap_or_default();
        v.push(input);
        self.notices = ::std::option::Option::Some(v);
        self
    }
    /// <p>Notices are additional information returned that indicate issues that occurred during route calculation.</p>
    pub fn set_notices(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RoutePedestrianNotice>>) -> Self {
        self.notices = input;
        self
    }
    /// <p>Notices are additional information returned that indicate issues that occurred during route calculation.</p>
    pub fn get_notices(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RoutePedestrianNotice>> {
        &self.notices
    }
    /// Appends an item to `pass_through_waypoints`.
    ///
    /// To override the contents of this collection use [`set_pass_through_waypoints`](Self::set_pass_through_waypoints).
    ///
    /// <p>Waypoints that were passed through during the leg. This includes the waypoints that were configured with the PassThrough option.</p>
    pub fn pass_through_waypoints(mut self, input: crate::types::RoutePassThroughWaypoint) -> Self {
        let mut v = self.pass_through_waypoints.unwrap_or_default();
        v.push(input);
        self.pass_through_waypoints = ::std::option::Option::Some(v);
        self
    }
    /// <p>Waypoints that were passed through during the leg. This includes the waypoints that were configured with the PassThrough option.</p>
    pub fn set_pass_through_waypoints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RoutePassThroughWaypoint>>) -> Self {
        self.pass_through_waypoints = input;
        self
    }
    /// <p>Waypoints that were passed through during the leg. This includes the waypoints that were configured with the PassThrough option.</p>
    pub fn get_pass_through_waypoints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RoutePassThroughWaypoint>> {
        &self.pass_through_waypoints
    }
    /// Appends an item to `spans`.
    ///
    /// To override the contents of this collection use [`set_spans`](Self::set_spans).
    ///
    /// <p>Spans that were computed for the requested SpanAdditionalFeatures.</p>
    pub fn spans(mut self, input: crate::types::RoutePedestrianSpan) -> Self {
        let mut v = self.spans.unwrap_or_default();
        v.push(input);
        self.spans = ::std::option::Option::Some(v);
        self
    }
    /// <p>Spans that were computed for the requested SpanAdditionalFeatures.</p>
    pub fn set_spans(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RoutePedestrianSpan>>) -> Self {
        self.spans = input;
        self
    }
    /// <p>Spans that were computed for the requested SpanAdditionalFeatures.</p>
    pub fn get_spans(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RoutePedestrianSpan>> {
        &self.spans
    }
    /// <p>Summarized details of the leg.</p>
    pub fn summary(mut self, input: crate::types::RoutePedestrianSummary) -> Self {
        self.summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>Summarized details of the leg.</p>
    pub fn set_summary(mut self, input: ::std::option::Option<crate::types::RoutePedestrianSummary>) -> Self {
        self.summary = input;
        self
    }
    /// <p>Summarized details of the leg.</p>
    pub fn get_summary(&self) -> &::std::option::Option<crate::types::RoutePedestrianSummary> {
        &self.summary
    }
    /// Appends an item to `travel_steps`.
    ///
    /// To override the contents of this collection use [`set_travel_steps`](Self::set_travel_steps).
    ///
    /// <p>Steps of a leg that must be performed before the travel portion of the leg.</p>
    pub fn travel_steps(mut self, input: crate::types::RoutePedestrianTravelStep) -> Self {
        let mut v = self.travel_steps.unwrap_or_default();
        v.push(input);
        self.travel_steps = ::std::option::Option::Some(v);
        self
    }
    /// <p>Steps of a leg that must be performed before the travel portion of the leg.</p>
    pub fn set_travel_steps(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RoutePedestrianTravelStep>>) -> Self {
        self.travel_steps = input;
        self
    }
    /// <p>Steps of a leg that must be performed before the travel portion of the leg.</p>
    pub fn get_travel_steps(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RoutePedestrianTravelStep>> {
        &self.travel_steps
    }
    /// Consumes the builder and constructs a [`RoutePedestrianLegDetails`](crate::types::RoutePedestrianLegDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`notices`](crate::types::builders::RoutePedestrianLegDetailsBuilder::notices)
    /// - [`pass_through_waypoints`](crate::types::builders::RoutePedestrianLegDetailsBuilder::pass_through_waypoints)
    /// - [`spans`](crate::types::builders::RoutePedestrianLegDetailsBuilder::spans)
    /// - [`travel_steps`](crate::types::builders::RoutePedestrianLegDetailsBuilder::travel_steps)
    pub fn build(self) -> ::std::result::Result<crate::types::RoutePedestrianLegDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RoutePedestrianLegDetails {
            arrival: self.arrival,
            departure: self.departure,
            notices: self.notices.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "notices",
                    "notices was not specified but it is required when building RoutePedestrianLegDetails",
                )
            })?,
            pass_through_waypoints: self.pass_through_waypoints.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "pass_through_waypoints",
                    "pass_through_waypoints was not specified but it is required when building RoutePedestrianLegDetails",
                )
            })?,
            spans: self.spans.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "spans",
                    "spans was not specified but it is required when building RoutePedestrianLegDetails",
                )
            })?,
            summary: self.summary,
            travel_steps: self.travel_steps.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "travel_steps",
                    "travel_steps was not specified but it is required when building RoutePedestrianLegDetails",
                )
            })?,
        })
    }
}
