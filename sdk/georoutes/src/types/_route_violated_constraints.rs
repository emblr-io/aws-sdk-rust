// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This property contains a summary of violated constraints.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteViolatedConstraints {
    /// <p>This restriction applies to truck cargo, where the resulting route excludes roads on which hazardous materials are prohibited from being transported.</p>
    pub all_hazards_restricted: ::std::option::Option<bool>,
    /// <p>Total number of axles of the vehicle.</p>
    pub axle_count: ::std::option::Option<crate::types::RouteNoticeDetailRange>,
    /// <p>List of Hazardous cargo contained in the vehicle.</p>
    pub hazardous_cargos: ::std::vec::Vec<crate::types::RouteHazardousCargoType>,
    /// <p>The maximum height of the vehicle.</p>
    pub max_height: i64,
    /// <p>The maximum Kpra length of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub max_kpra_length: i64,
    /// <p>The maximum length of the vehicle.</p>
    pub max_length: i64,
    /// <p>The maximum load capacity of the vehicle.</p>
    /// <p><b>Unit</b>: <code>kilograms</code></p>
    pub max_payload_capacity: i64,
    /// <p>The maximum weight of the route.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub max_weight: ::std::option::Option<crate::types::RouteWeightConstraint>,
    /// <p>The maximum weight per axle of the vehicle.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub max_weight_per_axle: i64,
    /// <p>The maximum weight per axle group of the vehicle.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub max_weight_per_axle_group: ::std::option::Option<crate::types::WeightPerAxleGroup>,
    /// <p>The maximum width of the vehicle.</p>
    pub max_width: i64,
    /// <p>The number of occupants in the vehicle.</p>
    /// <p>Default Value: <code>1</code></p>
    pub occupancy: ::std::option::Option<crate::types::RouteNoticeDetailRange>,
    /// <p>Access radius restrictions based on time.</p>
    pub restricted_times: ::std::option::Option<::std::string::String>,
    /// <p>The time dependent constraint.</p>
    pub time_dependent: ::std::option::Option<bool>,
    /// <p>Number of trailers attached to the vehicle.</p>
    /// <p>Default Value: <code>0</code></p>
    pub trailer_count: ::std::option::Option<crate::types::RouteNoticeDetailRange>,
    /// <p>Travel mode corresponding to the leg.</p>
    pub travel_mode: ::std::option::Option<bool>,
    /// <p>Truck road type identifiers. <code>BK1</code> through <code>BK4</code> apply only to Sweden. <code>A2,A4,B2,B4,C,D,ET2,ET4</code> apply only to Mexico.</p><note>
    /// <p>There are currently no other supported values as of 26th April 2024.</p>
    /// </note>
    pub truck_road_type: ::std::option::Option<::std::string::String>,
    /// <p>Type of the truck.</p>
    pub truck_type: ::std::option::Option<crate::types::RouteTruckType>,
    /// <p>The tunnel restriction code.</p>
    /// <p>Tunnel categories in this list indicate the restrictions which apply to certain tunnels in Great Britain. They relate to the types of dangerous goods that can be transported through them.</p>
    /// <ul>
    /// <li>
    /// <p><i>Tunnel Category B</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Limited risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Few restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category C</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Medium risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Some restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category D</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: High risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Many restrictions occur</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category E</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Very high risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Restricted tunnel</p></li>
    /// </ul></li>
    /// </ul>
    pub tunnel_restriction_code: ::std::option::Option<::std::string::String>,
}
impl RouteViolatedConstraints {
    /// <p>This restriction applies to truck cargo, where the resulting route excludes roads on which hazardous materials are prohibited from being transported.</p>
    pub fn all_hazards_restricted(&self) -> ::std::option::Option<bool> {
        self.all_hazards_restricted
    }
    /// <p>Total number of axles of the vehicle.</p>
    pub fn axle_count(&self) -> ::std::option::Option<&crate::types::RouteNoticeDetailRange> {
        self.axle_count.as_ref()
    }
    /// <p>List of Hazardous cargo contained in the vehicle.</p>
    pub fn hazardous_cargos(&self) -> &[crate::types::RouteHazardousCargoType] {
        use std::ops::Deref;
        self.hazardous_cargos.deref()
    }
    /// <p>The maximum height of the vehicle.</p>
    pub fn max_height(&self) -> i64 {
        self.max_height
    }
    /// <p>The maximum Kpra length of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn max_kpra_length(&self) -> i64 {
        self.max_kpra_length
    }
    /// <p>The maximum length of the vehicle.</p>
    pub fn max_length(&self) -> i64 {
        self.max_length
    }
    /// <p>The maximum load capacity of the vehicle.</p>
    /// <p><b>Unit</b>: <code>kilograms</code></p>
    pub fn max_payload_capacity(&self) -> i64 {
        self.max_payload_capacity
    }
    /// <p>The maximum weight of the route.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn max_weight(&self) -> ::std::option::Option<&crate::types::RouteWeightConstraint> {
        self.max_weight.as_ref()
    }
    /// <p>The maximum weight per axle of the vehicle.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn max_weight_per_axle(&self) -> i64 {
        self.max_weight_per_axle
    }
    /// <p>The maximum weight per axle group of the vehicle.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn max_weight_per_axle_group(&self) -> ::std::option::Option<&crate::types::WeightPerAxleGroup> {
        self.max_weight_per_axle_group.as_ref()
    }
    /// <p>The maximum width of the vehicle.</p>
    pub fn max_width(&self) -> i64 {
        self.max_width
    }
    /// <p>The number of occupants in the vehicle.</p>
    /// <p>Default Value: <code>1</code></p>
    pub fn occupancy(&self) -> ::std::option::Option<&crate::types::RouteNoticeDetailRange> {
        self.occupancy.as_ref()
    }
    /// <p>Access radius restrictions based on time.</p>
    pub fn restricted_times(&self) -> ::std::option::Option<&str> {
        self.restricted_times.as_deref()
    }
    /// <p>The time dependent constraint.</p>
    pub fn time_dependent(&self) -> ::std::option::Option<bool> {
        self.time_dependent
    }
    /// <p>Number of trailers attached to the vehicle.</p>
    /// <p>Default Value: <code>0</code></p>
    pub fn trailer_count(&self) -> ::std::option::Option<&crate::types::RouteNoticeDetailRange> {
        self.trailer_count.as_ref()
    }
    /// <p>Travel mode corresponding to the leg.</p>
    pub fn travel_mode(&self) -> ::std::option::Option<bool> {
        self.travel_mode
    }
    /// <p>Truck road type identifiers. <code>BK1</code> through <code>BK4</code> apply only to Sweden. <code>A2,A4,B2,B4,C,D,ET2,ET4</code> apply only to Mexico.</p><note>
    /// <p>There are currently no other supported values as of 26th April 2024.</p>
    /// </note>
    pub fn truck_road_type(&self) -> ::std::option::Option<&str> {
        self.truck_road_type.as_deref()
    }
    /// <p>Type of the truck.</p>
    pub fn truck_type(&self) -> ::std::option::Option<&crate::types::RouteTruckType> {
        self.truck_type.as_ref()
    }
    /// <p>The tunnel restriction code.</p>
    /// <p>Tunnel categories in this list indicate the restrictions which apply to certain tunnels in Great Britain. They relate to the types of dangerous goods that can be transported through them.</p>
    /// <ul>
    /// <li>
    /// <p><i>Tunnel Category B</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Limited risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Few restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category C</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Medium risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Some restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category D</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: High risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Many restrictions occur</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category E</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Very high risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Restricted tunnel</p></li>
    /// </ul></li>
    /// </ul>
    pub fn tunnel_restriction_code(&self) -> ::std::option::Option<&str> {
        self.tunnel_restriction_code.as_deref()
    }
}
impl RouteViolatedConstraints {
    /// Creates a new builder-style object to manufacture [`RouteViolatedConstraints`](crate::types::RouteViolatedConstraints).
    pub fn builder() -> crate::types::builders::RouteViolatedConstraintsBuilder {
        crate::types::builders::RouteViolatedConstraintsBuilder::default()
    }
}

/// A builder for [`RouteViolatedConstraints`](crate::types::RouteViolatedConstraints).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteViolatedConstraintsBuilder {
    pub(crate) all_hazards_restricted: ::std::option::Option<bool>,
    pub(crate) axle_count: ::std::option::Option<crate::types::RouteNoticeDetailRange>,
    pub(crate) hazardous_cargos: ::std::option::Option<::std::vec::Vec<crate::types::RouteHazardousCargoType>>,
    pub(crate) max_height: ::std::option::Option<i64>,
    pub(crate) max_kpra_length: ::std::option::Option<i64>,
    pub(crate) max_length: ::std::option::Option<i64>,
    pub(crate) max_payload_capacity: ::std::option::Option<i64>,
    pub(crate) max_weight: ::std::option::Option<crate::types::RouteWeightConstraint>,
    pub(crate) max_weight_per_axle: ::std::option::Option<i64>,
    pub(crate) max_weight_per_axle_group: ::std::option::Option<crate::types::WeightPerAxleGroup>,
    pub(crate) max_width: ::std::option::Option<i64>,
    pub(crate) occupancy: ::std::option::Option<crate::types::RouteNoticeDetailRange>,
    pub(crate) restricted_times: ::std::option::Option<::std::string::String>,
    pub(crate) time_dependent: ::std::option::Option<bool>,
    pub(crate) trailer_count: ::std::option::Option<crate::types::RouteNoticeDetailRange>,
    pub(crate) travel_mode: ::std::option::Option<bool>,
    pub(crate) truck_road_type: ::std::option::Option<::std::string::String>,
    pub(crate) truck_type: ::std::option::Option<crate::types::RouteTruckType>,
    pub(crate) tunnel_restriction_code: ::std::option::Option<::std::string::String>,
}
impl RouteViolatedConstraintsBuilder {
    /// <p>This restriction applies to truck cargo, where the resulting route excludes roads on which hazardous materials are prohibited from being transported.</p>
    pub fn all_hazards_restricted(mut self, input: bool) -> Self {
        self.all_hazards_restricted = ::std::option::Option::Some(input);
        self
    }
    /// <p>This restriction applies to truck cargo, where the resulting route excludes roads on which hazardous materials are prohibited from being transported.</p>
    pub fn set_all_hazards_restricted(mut self, input: ::std::option::Option<bool>) -> Self {
        self.all_hazards_restricted = input;
        self
    }
    /// <p>This restriction applies to truck cargo, where the resulting route excludes roads on which hazardous materials are prohibited from being transported.</p>
    pub fn get_all_hazards_restricted(&self) -> &::std::option::Option<bool> {
        &self.all_hazards_restricted
    }
    /// <p>Total number of axles of the vehicle.</p>
    pub fn axle_count(mut self, input: crate::types::RouteNoticeDetailRange) -> Self {
        self.axle_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Total number of axles of the vehicle.</p>
    pub fn set_axle_count(mut self, input: ::std::option::Option<crate::types::RouteNoticeDetailRange>) -> Self {
        self.axle_count = input;
        self
    }
    /// <p>Total number of axles of the vehicle.</p>
    pub fn get_axle_count(&self) -> &::std::option::Option<crate::types::RouteNoticeDetailRange> {
        &self.axle_count
    }
    /// Appends an item to `hazardous_cargos`.
    ///
    /// To override the contents of this collection use [`set_hazardous_cargos`](Self::set_hazardous_cargos).
    ///
    /// <p>List of Hazardous cargo contained in the vehicle.</p>
    pub fn hazardous_cargos(mut self, input: crate::types::RouteHazardousCargoType) -> Self {
        let mut v = self.hazardous_cargos.unwrap_or_default();
        v.push(input);
        self.hazardous_cargos = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of Hazardous cargo contained in the vehicle.</p>
    pub fn set_hazardous_cargos(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteHazardousCargoType>>) -> Self {
        self.hazardous_cargos = input;
        self
    }
    /// <p>List of Hazardous cargo contained in the vehicle.</p>
    pub fn get_hazardous_cargos(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteHazardousCargoType>> {
        &self.hazardous_cargos
    }
    /// <p>The maximum height of the vehicle.</p>
    pub fn max_height(mut self, input: i64) -> Self {
        self.max_height = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum height of the vehicle.</p>
    pub fn set_max_height(mut self, input: ::std::option::Option<i64>) -> Self {
        self.max_height = input;
        self
    }
    /// <p>The maximum height of the vehicle.</p>
    pub fn get_max_height(&self) -> &::std::option::Option<i64> {
        &self.max_height
    }
    /// <p>The maximum Kpra length of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn max_kpra_length(mut self, input: i64) -> Self {
        self.max_kpra_length = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum Kpra length of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn set_max_kpra_length(mut self, input: ::std::option::Option<i64>) -> Self {
        self.max_kpra_length = input;
        self
    }
    /// <p>The maximum Kpra length of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn get_max_kpra_length(&self) -> &::std::option::Option<i64> {
        &self.max_kpra_length
    }
    /// <p>The maximum length of the vehicle.</p>
    pub fn max_length(mut self, input: i64) -> Self {
        self.max_length = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum length of the vehicle.</p>
    pub fn set_max_length(mut self, input: ::std::option::Option<i64>) -> Self {
        self.max_length = input;
        self
    }
    /// <p>The maximum length of the vehicle.</p>
    pub fn get_max_length(&self) -> &::std::option::Option<i64> {
        &self.max_length
    }
    /// <p>The maximum load capacity of the vehicle.</p>
    /// <p><b>Unit</b>: <code>kilograms</code></p>
    pub fn max_payload_capacity(mut self, input: i64) -> Self {
        self.max_payload_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum load capacity of the vehicle.</p>
    /// <p><b>Unit</b>: <code>kilograms</code></p>
    pub fn set_max_payload_capacity(mut self, input: ::std::option::Option<i64>) -> Self {
        self.max_payload_capacity = input;
        self
    }
    /// <p>The maximum load capacity of the vehicle.</p>
    /// <p><b>Unit</b>: <code>kilograms</code></p>
    pub fn get_max_payload_capacity(&self) -> &::std::option::Option<i64> {
        &self.max_payload_capacity
    }
    /// <p>The maximum weight of the route.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn max_weight(mut self, input: crate::types::RouteWeightConstraint) -> Self {
        self.max_weight = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum weight of the route.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn set_max_weight(mut self, input: ::std::option::Option<crate::types::RouteWeightConstraint>) -> Self {
        self.max_weight = input;
        self
    }
    /// <p>The maximum weight of the route.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn get_max_weight(&self) -> &::std::option::Option<crate::types::RouteWeightConstraint> {
        &self.max_weight
    }
    /// <p>The maximum weight per axle of the vehicle.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn max_weight_per_axle(mut self, input: i64) -> Self {
        self.max_weight_per_axle = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum weight per axle of the vehicle.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn set_max_weight_per_axle(mut self, input: ::std::option::Option<i64>) -> Self {
        self.max_weight_per_axle = input;
        self
    }
    /// <p>The maximum weight per axle of the vehicle.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn get_max_weight_per_axle(&self) -> &::std::option::Option<i64> {
        &self.max_weight_per_axle
    }
    /// <p>The maximum weight per axle group of the vehicle.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn max_weight_per_axle_group(mut self, input: crate::types::WeightPerAxleGroup) -> Self {
        self.max_weight_per_axle_group = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum weight per axle group of the vehicle.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn set_max_weight_per_axle_group(mut self, input: ::std::option::Option<crate::types::WeightPerAxleGroup>) -> Self {
        self.max_weight_per_axle_group = input;
        self
    }
    /// <p>The maximum weight per axle group of the vehicle.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn get_max_weight_per_axle_group(&self) -> &::std::option::Option<crate::types::WeightPerAxleGroup> {
        &self.max_weight_per_axle_group
    }
    /// <p>The maximum width of the vehicle.</p>
    pub fn max_width(mut self, input: i64) -> Self {
        self.max_width = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum width of the vehicle.</p>
    pub fn set_max_width(mut self, input: ::std::option::Option<i64>) -> Self {
        self.max_width = input;
        self
    }
    /// <p>The maximum width of the vehicle.</p>
    pub fn get_max_width(&self) -> &::std::option::Option<i64> {
        &self.max_width
    }
    /// <p>The number of occupants in the vehicle.</p>
    /// <p>Default Value: <code>1</code></p>
    pub fn occupancy(mut self, input: crate::types::RouteNoticeDetailRange) -> Self {
        self.occupancy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of occupants in the vehicle.</p>
    /// <p>Default Value: <code>1</code></p>
    pub fn set_occupancy(mut self, input: ::std::option::Option<crate::types::RouteNoticeDetailRange>) -> Self {
        self.occupancy = input;
        self
    }
    /// <p>The number of occupants in the vehicle.</p>
    /// <p>Default Value: <code>1</code></p>
    pub fn get_occupancy(&self) -> &::std::option::Option<crate::types::RouteNoticeDetailRange> {
        &self.occupancy
    }
    /// <p>Access radius restrictions based on time.</p>
    pub fn restricted_times(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.restricted_times = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Access radius restrictions based on time.</p>
    pub fn set_restricted_times(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.restricted_times = input;
        self
    }
    /// <p>Access radius restrictions based on time.</p>
    pub fn get_restricted_times(&self) -> &::std::option::Option<::std::string::String> {
        &self.restricted_times
    }
    /// <p>The time dependent constraint.</p>
    pub fn time_dependent(mut self, input: bool) -> Self {
        self.time_dependent = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time dependent constraint.</p>
    pub fn set_time_dependent(mut self, input: ::std::option::Option<bool>) -> Self {
        self.time_dependent = input;
        self
    }
    /// <p>The time dependent constraint.</p>
    pub fn get_time_dependent(&self) -> &::std::option::Option<bool> {
        &self.time_dependent
    }
    /// <p>Number of trailers attached to the vehicle.</p>
    /// <p>Default Value: <code>0</code></p>
    pub fn trailer_count(mut self, input: crate::types::RouteNoticeDetailRange) -> Self {
        self.trailer_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of trailers attached to the vehicle.</p>
    /// <p>Default Value: <code>0</code></p>
    pub fn set_trailer_count(mut self, input: ::std::option::Option<crate::types::RouteNoticeDetailRange>) -> Self {
        self.trailer_count = input;
        self
    }
    /// <p>Number of trailers attached to the vehicle.</p>
    /// <p>Default Value: <code>0</code></p>
    pub fn get_trailer_count(&self) -> &::std::option::Option<crate::types::RouteNoticeDetailRange> {
        &self.trailer_count
    }
    /// <p>Travel mode corresponding to the leg.</p>
    pub fn travel_mode(mut self, input: bool) -> Self {
        self.travel_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Travel mode corresponding to the leg.</p>
    pub fn set_travel_mode(mut self, input: ::std::option::Option<bool>) -> Self {
        self.travel_mode = input;
        self
    }
    /// <p>Travel mode corresponding to the leg.</p>
    pub fn get_travel_mode(&self) -> &::std::option::Option<bool> {
        &self.travel_mode
    }
    /// <p>Truck road type identifiers. <code>BK1</code> through <code>BK4</code> apply only to Sweden. <code>A2,A4,B2,B4,C,D,ET2,ET4</code> apply only to Mexico.</p><note>
    /// <p>There are currently no other supported values as of 26th April 2024.</p>
    /// </note>
    pub fn truck_road_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.truck_road_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Truck road type identifiers. <code>BK1</code> through <code>BK4</code> apply only to Sweden. <code>A2,A4,B2,B4,C,D,ET2,ET4</code> apply only to Mexico.</p><note>
    /// <p>There are currently no other supported values as of 26th April 2024.</p>
    /// </note>
    pub fn set_truck_road_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.truck_road_type = input;
        self
    }
    /// <p>Truck road type identifiers. <code>BK1</code> through <code>BK4</code> apply only to Sweden. <code>A2,A4,B2,B4,C,D,ET2,ET4</code> apply only to Mexico.</p><note>
    /// <p>There are currently no other supported values as of 26th April 2024.</p>
    /// </note>
    pub fn get_truck_road_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.truck_road_type
    }
    /// <p>Type of the truck.</p>
    pub fn truck_type(mut self, input: crate::types::RouteTruckType) -> Self {
        self.truck_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of the truck.</p>
    pub fn set_truck_type(mut self, input: ::std::option::Option<crate::types::RouteTruckType>) -> Self {
        self.truck_type = input;
        self
    }
    /// <p>Type of the truck.</p>
    pub fn get_truck_type(&self) -> &::std::option::Option<crate::types::RouteTruckType> {
        &self.truck_type
    }
    /// <p>The tunnel restriction code.</p>
    /// <p>Tunnel categories in this list indicate the restrictions which apply to certain tunnels in Great Britain. They relate to the types of dangerous goods that can be transported through them.</p>
    /// <ul>
    /// <li>
    /// <p><i>Tunnel Category B</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Limited risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Few restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category C</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Medium risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Some restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category D</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: High risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Many restrictions occur</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category E</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Very high risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Restricted tunnel</p></li>
    /// </ul></li>
    /// </ul>
    pub fn tunnel_restriction_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tunnel_restriction_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The tunnel restriction code.</p>
    /// <p>Tunnel categories in this list indicate the restrictions which apply to certain tunnels in Great Britain. They relate to the types of dangerous goods that can be transported through them.</p>
    /// <ul>
    /// <li>
    /// <p><i>Tunnel Category B</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Limited risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Few restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category C</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Medium risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Some restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category D</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: High risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Many restrictions occur</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category E</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Very high risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Restricted tunnel</p></li>
    /// </ul></li>
    /// </ul>
    pub fn set_tunnel_restriction_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tunnel_restriction_code = input;
        self
    }
    /// <p>The tunnel restriction code.</p>
    /// <p>Tunnel categories in this list indicate the restrictions which apply to certain tunnels in Great Britain. They relate to the types of dangerous goods that can be transported through them.</p>
    /// <ul>
    /// <li>
    /// <p><i>Tunnel Category B</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Limited risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Few restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category C</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Medium risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Some restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category D</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: High risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Many restrictions occur</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category E</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Very high risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Restricted tunnel</p></li>
    /// </ul></li>
    /// </ul>
    pub fn get_tunnel_restriction_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.tunnel_restriction_code
    }
    /// Consumes the builder and constructs a [`RouteViolatedConstraints`](crate::types::RouteViolatedConstraints).
    /// This method will fail if any of the following fields are not set:
    /// - [`hazardous_cargos`](crate::types::builders::RouteViolatedConstraintsBuilder::hazardous_cargos)
    pub fn build(self) -> ::std::result::Result<crate::types::RouteViolatedConstraints, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RouteViolatedConstraints {
            all_hazards_restricted: self.all_hazards_restricted,
            axle_count: self.axle_count,
            hazardous_cargos: self.hazardous_cargos.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "hazardous_cargos",
                    "hazardous_cargos was not specified but it is required when building RouteViolatedConstraints",
                )
            })?,
            max_height: self.max_height.unwrap_or_default(),
            max_kpra_length: self.max_kpra_length.unwrap_or_default(),
            max_length: self.max_length.unwrap_or_default(),
            max_payload_capacity: self.max_payload_capacity.unwrap_or_default(),
            max_weight: self.max_weight,
            max_weight_per_axle: self.max_weight_per_axle.unwrap_or_default(),
            max_weight_per_axle_group: self.max_weight_per_axle_group,
            max_width: self.max_width.unwrap_or_default(),
            occupancy: self.occupancy,
            restricted_times: self.restricted_times,
            time_dependent: self.time_dependent,
            trailer_count: self.trailer_count,
            travel_mode: self.travel_mode,
            truck_road_type: self.truck_road_type,
            truck_type: self.truck_type,
            tunnel_restriction_code: self.tunnel_restriction_code,
        })
    }
}
