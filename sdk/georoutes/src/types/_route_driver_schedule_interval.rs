// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Interval of the driver work-rest schedule. Stops are added to fulfil the provided rest schedule.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteDriverScheduleInterval {
    /// <p>Maximum allowed driving time before stopping to rest.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub drive_duration: i64,
    /// <p>Resting time before the driver can continue driving.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub rest_duration: i64,
}
impl RouteDriverScheduleInterval {
    /// <p>Maximum allowed driving time before stopping to rest.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn drive_duration(&self) -> i64 {
        self.drive_duration
    }
    /// <p>Resting time before the driver can continue driving.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn rest_duration(&self) -> i64 {
        self.rest_duration
    }
}
impl RouteDriverScheduleInterval {
    /// Creates a new builder-style object to manufacture [`RouteDriverScheduleInterval`](crate::types::RouteDriverScheduleInterval).
    pub fn builder() -> crate::types::builders::RouteDriverScheduleIntervalBuilder {
        crate::types::builders::RouteDriverScheduleIntervalBuilder::default()
    }
}

/// A builder for [`RouteDriverScheduleInterval`](crate::types::RouteDriverScheduleInterval).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteDriverScheduleIntervalBuilder {
    pub(crate) drive_duration: ::std::option::Option<i64>,
    pub(crate) rest_duration: ::std::option::Option<i64>,
}
impl RouteDriverScheduleIntervalBuilder {
    /// <p>Maximum allowed driving time before stopping to rest.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    /// This field is required.
    pub fn drive_duration(mut self, input: i64) -> Self {
        self.drive_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maximum allowed driving time before stopping to rest.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn set_drive_duration(mut self, input: ::std::option::Option<i64>) -> Self {
        self.drive_duration = input;
        self
    }
    /// <p>Maximum allowed driving time before stopping to rest.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn get_drive_duration(&self) -> &::std::option::Option<i64> {
        &self.drive_duration
    }
    /// <p>Resting time before the driver can continue driving.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    /// This field is required.
    pub fn rest_duration(mut self, input: i64) -> Self {
        self.rest_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Resting time before the driver can continue driving.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn set_rest_duration(mut self, input: ::std::option::Option<i64>) -> Self {
        self.rest_duration = input;
        self
    }
    /// <p>Resting time before the driver can continue driving.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn get_rest_duration(&self) -> &::std::option::Option<i64> {
        &self.rest_duration
    }
    /// Consumes the builder and constructs a [`RouteDriverScheduleInterval`](crate::types::RouteDriverScheduleInterval).
    pub fn build(self) -> crate::types::RouteDriverScheduleInterval {
        crate::types::RouteDriverScheduleInterval {
            drive_duration: self.drive_duration.unwrap_or_default(),
            rest_duration: self.rest_duration.unwrap_or_default(),
        }
    }
}
