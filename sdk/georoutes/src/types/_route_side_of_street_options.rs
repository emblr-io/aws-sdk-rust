// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Options to configure matching the provided position to a side of the street.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RouteSideOfStreetOptions {
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub position: ::std::vec::Vec<f64>,
    /// <p>Strategy that defines when the side of street position should be used.</p>
    /// <p>Default Value: <code>DividedStreetOnly</code></p>
    pub use_with: ::std::option::Option<crate::types::SideOfStreetMatchingStrategy>,
}
impl RouteSideOfStreetOptions {
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn position(&self) -> &[f64] {
        use std::ops::Deref;
        self.position.deref()
    }
    /// <p>Strategy that defines when the side of street position should be used.</p>
    /// <p>Default Value: <code>DividedStreetOnly</code></p>
    pub fn use_with(&self) -> ::std::option::Option<&crate::types::SideOfStreetMatchingStrategy> {
        self.use_with.as_ref()
    }
}
impl ::std::fmt::Debug for RouteSideOfStreetOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RouteSideOfStreetOptions");
        formatter.field("position", &"*** Sensitive Data Redacted ***");
        formatter.field("use_with", &self.use_with);
        formatter.finish()
    }
}
impl RouteSideOfStreetOptions {
    /// Creates a new builder-style object to manufacture [`RouteSideOfStreetOptions`](crate::types::RouteSideOfStreetOptions).
    pub fn builder() -> crate::types::builders::RouteSideOfStreetOptionsBuilder {
        crate::types::builders::RouteSideOfStreetOptionsBuilder::default()
    }
}

/// A builder for [`RouteSideOfStreetOptions`](crate::types::RouteSideOfStreetOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RouteSideOfStreetOptionsBuilder {
    pub(crate) position: ::std::option::Option<::std::vec::Vec<f64>>,
    pub(crate) use_with: ::std::option::Option<crate::types::SideOfStreetMatchingStrategy>,
}
impl RouteSideOfStreetOptionsBuilder {
    /// Appends an item to `position`.
    ///
    /// To override the contents of this collection use [`set_position`](Self::set_position).
    ///
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn position(mut self, input: f64) -> Self {
        let mut v = self.position.unwrap_or_default();
        v.push(input);
        self.position = ::std::option::Option::Some(v);
        self
    }
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn set_position(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.position = input;
        self
    }
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn get_position(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.position
    }
    /// <p>Strategy that defines when the side of street position should be used.</p>
    /// <p>Default Value: <code>DividedStreetOnly</code></p>
    pub fn use_with(mut self, input: crate::types::SideOfStreetMatchingStrategy) -> Self {
        self.use_with = ::std::option::Option::Some(input);
        self
    }
    /// <p>Strategy that defines when the side of street position should be used.</p>
    /// <p>Default Value: <code>DividedStreetOnly</code></p>
    pub fn set_use_with(mut self, input: ::std::option::Option<crate::types::SideOfStreetMatchingStrategy>) -> Self {
        self.use_with = input;
        self
    }
    /// <p>Strategy that defines when the side of street position should be used.</p>
    /// <p>Default Value: <code>DividedStreetOnly</code></p>
    pub fn get_use_with(&self) -> &::std::option::Option<crate::types::SideOfStreetMatchingStrategy> {
        &self.use_with
    }
    /// Consumes the builder and constructs a [`RouteSideOfStreetOptions`](crate::types::RouteSideOfStreetOptions).
    /// This method will fail if any of the following fields are not set:
    /// - [`position`](crate::types::builders::RouteSideOfStreetOptionsBuilder::position)
    pub fn build(self) -> ::std::result::Result<crate::types::RouteSideOfStreetOptions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RouteSideOfStreetOptions {
            position: self.position.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "position",
                    "position was not specified but it is required when building RouteSideOfStreetOptions",
                )
            })?,
            use_with: self.use_with,
        })
    }
}
impl ::std::fmt::Debug for RouteSideOfStreetOptionsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RouteSideOfStreetOptionsBuilder");
        formatter.field("position", &"*** Sensitive Data Redacted ***");
        formatter.field("use_with", &self.use_with);
        formatter.finish()
    }
}
