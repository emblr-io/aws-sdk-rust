// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summarized details for the leg including travel steps only. The Distance for the travel only portion of the journey is the same as the Distance within the Overview summary.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteSummary {
    /// <p>Distance of the route.</p>
    pub distance: i64,
    /// <p>Duration of the route.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub duration: i64,
    /// <p>Toll summary for the complete route.</p>
    pub tolls: ::std::option::Option<crate::types::RouteTollSummary>,
}
impl RouteSummary {
    /// <p>Distance of the route.</p>
    pub fn distance(&self) -> i64 {
        self.distance
    }
    /// <p>Duration of the route.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn duration(&self) -> i64 {
        self.duration
    }
    /// <p>Toll summary for the complete route.</p>
    pub fn tolls(&self) -> ::std::option::Option<&crate::types::RouteTollSummary> {
        self.tolls.as_ref()
    }
}
impl RouteSummary {
    /// Creates a new builder-style object to manufacture [`RouteSummary`](crate::types::RouteSummary).
    pub fn builder() -> crate::types::builders::RouteSummaryBuilder {
        crate::types::builders::RouteSummaryBuilder::default()
    }
}

/// A builder for [`RouteSummary`](crate::types::RouteSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteSummaryBuilder {
    pub(crate) distance: ::std::option::Option<i64>,
    pub(crate) duration: ::std::option::Option<i64>,
    pub(crate) tolls: ::std::option::Option<crate::types::RouteTollSummary>,
}
impl RouteSummaryBuilder {
    /// <p>Distance of the route.</p>
    pub fn distance(mut self, input: i64) -> Self {
        self.distance = ::std::option::Option::Some(input);
        self
    }
    /// <p>Distance of the route.</p>
    pub fn set_distance(mut self, input: ::std::option::Option<i64>) -> Self {
        self.distance = input;
        self
    }
    /// <p>Distance of the route.</p>
    pub fn get_distance(&self) -> &::std::option::Option<i64> {
        &self.distance
    }
    /// <p>Duration of the route.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn duration(mut self, input: i64) -> Self {
        self.duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Duration of the route.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn set_duration(mut self, input: ::std::option::Option<i64>) -> Self {
        self.duration = input;
        self
    }
    /// <p>Duration of the route.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn get_duration(&self) -> &::std::option::Option<i64> {
        &self.duration
    }
    /// <p>Toll summary for the complete route.</p>
    pub fn tolls(mut self, input: crate::types::RouteTollSummary) -> Self {
        self.tolls = ::std::option::Option::Some(input);
        self
    }
    /// <p>Toll summary for the complete route.</p>
    pub fn set_tolls(mut self, input: ::std::option::Option<crate::types::RouteTollSummary>) -> Self {
        self.tolls = input;
        self
    }
    /// <p>Toll summary for the complete route.</p>
    pub fn get_tolls(&self) -> &::std::option::Option<crate::types::RouteTollSummary> {
        &self.tolls
    }
    /// Consumes the builder and constructs a [`RouteSummary`](crate::types::RouteSummary).
    pub fn build(self) -> crate::types::RouteSummary {
        crate::types::RouteSummary {
            distance: self.distance.unwrap_or_default(),
            duration: self.duration.unwrap_or_default(),
            tolls: self.tolls,
        }
    }
}
