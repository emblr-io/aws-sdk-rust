// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Resting phase of the cycle.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WaypointOptimizationRestCycles {
    /// <p>Long cycle for a driver work-rest schedule.</p>
    pub long_cycle: ::std::option::Option<crate::types::WaypointOptimizationRestCycleDurations>,
    /// <p>Short cycle for a driver work-rest schedule</p>
    pub short_cycle: ::std::option::Option<crate::types::WaypointOptimizationRestCycleDurations>,
}
impl WaypointOptimizationRestCycles {
    /// <p>Long cycle for a driver work-rest schedule.</p>
    pub fn long_cycle(&self) -> ::std::option::Option<&crate::types::WaypointOptimizationRestCycleDurations> {
        self.long_cycle.as_ref()
    }
    /// <p>Short cycle for a driver work-rest schedule</p>
    pub fn short_cycle(&self) -> ::std::option::Option<&crate::types::WaypointOptimizationRestCycleDurations> {
        self.short_cycle.as_ref()
    }
}
impl WaypointOptimizationRestCycles {
    /// Creates a new builder-style object to manufacture [`WaypointOptimizationRestCycles`](crate::types::WaypointOptimizationRestCycles).
    pub fn builder() -> crate::types::builders::WaypointOptimizationRestCyclesBuilder {
        crate::types::builders::WaypointOptimizationRestCyclesBuilder::default()
    }
}

/// A builder for [`WaypointOptimizationRestCycles`](crate::types::WaypointOptimizationRestCycles).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WaypointOptimizationRestCyclesBuilder {
    pub(crate) long_cycle: ::std::option::Option<crate::types::WaypointOptimizationRestCycleDurations>,
    pub(crate) short_cycle: ::std::option::Option<crate::types::WaypointOptimizationRestCycleDurations>,
}
impl WaypointOptimizationRestCyclesBuilder {
    /// <p>Long cycle for a driver work-rest schedule.</p>
    /// This field is required.
    pub fn long_cycle(mut self, input: crate::types::WaypointOptimizationRestCycleDurations) -> Self {
        self.long_cycle = ::std::option::Option::Some(input);
        self
    }
    /// <p>Long cycle for a driver work-rest schedule.</p>
    pub fn set_long_cycle(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationRestCycleDurations>) -> Self {
        self.long_cycle = input;
        self
    }
    /// <p>Long cycle for a driver work-rest schedule.</p>
    pub fn get_long_cycle(&self) -> &::std::option::Option<crate::types::WaypointOptimizationRestCycleDurations> {
        &self.long_cycle
    }
    /// <p>Short cycle for a driver work-rest schedule</p>
    /// This field is required.
    pub fn short_cycle(mut self, input: crate::types::WaypointOptimizationRestCycleDurations) -> Self {
        self.short_cycle = ::std::option::Option::Some(input);
        self
    }
    /// <p>Short cycle for a driver work-rest schedule</p>
    pub fn set_short_cycle(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationRestCycleDurations>) -> Self {
        self.short_cycle = input;
        self
    }
    /// <p>Short cycle for a driver work-rest schedule</p>
    pub fn get_short_cycle(&self) -> &::std::option::Option<crate::types::WaypointOptimizationRestCycleDurations> {
        &self.short_cycle
    }
    /// Consumes the builder and constructs a [`WaypointOptimizationRestCycles`](crate::types::WaypointOptimizationRestCycles).
    pub fn build(self) -> crate::types::WaypointOptimizationRestCycles {
        crate::types::WaypointOptimizationRestCycles {
            long_cycle: self.long_cycle,
            short_cycle: self.short_cycle,
        }
    }
}
