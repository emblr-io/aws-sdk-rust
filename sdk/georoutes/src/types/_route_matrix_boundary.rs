// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Boundary within which the matrix is to be calculated. All data, origins and destinations outside the boundary are considered invalid.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteMatrixBoundary {
    /// <p>Geometry of the area to be avoided.</p>
    pub geometry: ::std::option::Option<crate::types::RouteMatrixBoundaryGeometry>,
    /// <p>No restrictions in terms of a routing boundary, and is typically used for longer routes.</p>
    pub unbounded: ::std::option::Option<bool>,
}
impl RouteMatrixBoundary {
    /// <p>Geometry of the area to be avoided.</p>
    pub fn geometry(&self) -> ::std::option::Option<&crate::types::RouteMatrixBoundaryGeometry> {
        self.geometry.as_ref()
    }
    /// <p>No restrictions in terms of a routing boundary, and is typically used for longer routes.</p>
    pub fn unbounded(&self) -> ::std::option::Option<bool> {
        self.unbounded
    }
}
impl RouteMatrixBoundary {
    /// Creates a new builder-style object to manufacture [`RouteMatrixBoundary`](crate::types::RouteMatrixBoundary).
    pub fn builder() -> crate::types::builders::RouteMatrixBoundaryBuilder {
        crate::types::builders::RouteMatrixBoundaryBuilder::default()
    }
}

/// A builder for [`RouteMatrixBoundary`](crate::types::RouteMatrixBoundary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteMatrixBoundaryBuilder {
    pub(crate) geometry: ::std::option::Option<crate::types::RouteMatrixBoundaryGeometry>,
    pub(crate) unbounded: ::std::option::Option<bool>,
}
impl RouteMatrixBoundaryBuilder {
    /// <p>Geometry of the area to be avoided.</p>
    pub fn geometry(mut self, input: crate::types::RouteMatrixBoundaryGeometry) -> Self {
        self.geometry = ::std::option::Option::Some(input);
        self
    }
    /// <p>Geometry of the area to be avoided.</p>
    pub fn set_geometry(mut self, input: ::std::option::Option<crate::types::RouteMatrixBoundaryGeometry>) -> Self {
        self.geometry = input;
        self
    }
    /// <p>Geometry of the area to be avoided.</p>
    pub fn get_geometry(&self) -> &::std::option::Option<crate::types::RouteMatrixBoundaryGeometry> {
        &self.geometry
    }
    /// <p>No restrictions in terms of a routing boundary, and is typically used for longer routes.</p>
    pub fn unbounded(mut self, input: bool) -> Self {
        self.unbounded = ::std::option::Option::Some(input);
        self
    }
    /// <p>No restrictions in terms of a routing boundary, and is typically used for longer routes.</p>
    pub fn set_unbounded(mut self, input: ::std::option::Option<bool>) -> Self {
        self.unbounded = input;
        self
    }
    /// <p>No restrictions in terms of a routing boundary, and is typically used for longer routes.</p>
    pub fn get_unbounded(&self) -> &::std::option::Option<bool> {
        &self.unbounded
    }
    /// Consumes the builder and constructs a [`RouteMatrixBoundary`](crate::types::RouteMatrixBoundary).
    pub fn build(self) -> crate::types::RouteMatrixBoundary {
        crate::types::RouteMatrixBoundary {
            geometry: self.geometry,
            unbounded: self.unbounded,
        }
    }
}
