// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The route destination.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RouteMatrixDestination {
    /// <p>Destination related options.</p>
    pub options: ::std::option::Option<crate::types::RouteMatrixDestinationOptions>,
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub position: ::std::vec::Vec<f64>,
}
impl RouteMatrixDestination {
    /// <p>Destination related options.</p>
    pub fn options(&self) -> ::std::option::Option<&crate::types::RouteMatrixDestinationOptions> {
        self.options.as_ref()
    }
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn position(&self) -> &[f64] {
        use std::ops::Deref;
        self.position.deref()
    }
}
impl ::std::fmt::Debug for RouteMatrixDestination {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RouteMatrixDestination");
        formatter.field("options", &self.options);
        formatter.field("position", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RouteMatrixDestination {
    /// Creates a new builder-style object to manufacture [`RouteMatrixDestination`](crate::types::RouteMatrixDestination).
    pub fn builder() -> crate::types::builders::RouteMatrixDestinationBuilder {
        crate::types::builders::RouteMatrixDestinationBuilder::default()
    }
}

/// A builder for [`RouteMatrixDestination`](crate::types::RouteMatrixDestination).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RouteMatrixDestinationBuilder {
    pub(crate) options: ::std::option::Option<crate::types::RouteMatrixDestinationOptions>,
    pub(crate) position: ::std::option::Option<::std::vec::Vec<f64>>,
}
impl RouteMatrixDestinationBuilder {
    /// <p>Destination related options.</p>
    pub fn options(mut self, input: crate::types::RouteMatrixDestinationOptions) -> Self {
        self.options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Destination related options.</p>
    pub fn set_options(mut self, input: ::std::option::Option<crate::types::RouteMatrixDestinationOptions>) -> Self {
        self.options = input;
        self
    }
    /// <p>Destination related options.</p>
    pub fn get_options(&self) -> &::std::option::Option<crate::types::RouteMatrixDestinationOptions> {
        &self.options
    }
    /// Appends an item to `position`.
    ///
    /// To override the contents of this collection use [`set_position`](Self::set_position).
    ///
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn position(mut self, input: f64) -> Self {
        let mut v = self.position.unwrap_or_default();
        v.push(input);
        self.position = ::std::option::Option::Some(v);
        self
    }
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn set_position(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.position = input;
        self
    }
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn get_position(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.position
    }
    /// Consumes the builder and constructs a [`RouteMatrixDestination`](crate::types::RouteMatrixDestination).
    /// This method will fail if any of the following fields are not set:
    /// - [`position`](crate::types::builders::RouteMatrixDestinationBuilder::position)
    pub fn build(self) -> ::std::result::Result<crate::types::RouteMatrixDestination, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RouteMatrixDestination {
            options: self.options,
            position: self.position.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "position",
                    "position was not specified but it is required when building RouteMatrixDestination",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for RouteMatrixDestinationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RouteMatrixDestinationBuilder");
        formatter.field("options", &self.options);
        formatter.field("position", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
