// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Areas to be avoided.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteAvoidanceArea {
    /// <p>Exceptions to the provided avoidance geometry, to be included while calculating the route.</p>
    pub except: ::std::option::Option<::std::vec::Vec<crate::types::RouteAvoidanceAreaGeometry>>,
    /// <p>Geometry of the area to be avoided.</p>
    pub geometry: ::std::option::Option<crate::types::RouteAvoidanceAreaGeometry>,
}
impl RouteAvoidanceArea {
    /// <p>Exceptions to the provided avoidance geometry, to be included while calculating the route.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.except.is_none()`.
    pub fn except(&self) -> &[crate::types::RouteAvoidanceAreaGeometry] {
        self.except.as_deref().unwrap_or_default()
    }
    /// <p>Geometry of the area to be avoided.</p>
    pub fn geometry(&self) -> ::std::option::Option<&crate::types::RouteAvoidanceAreaGeometry> {
        self.geometry.as_ref()
    }
}
impl RouteAvoidanceArea {
    /// Creates a new builder-style object to manufacture [`RouteAvoidanceArea`](crate::types::RouteAvoidanceArea).
    pub fn builder() -> crate::types::builders::RouteAvoidanceAreaBuilder {
        crate::types::builders::RouteAvoidanceAreaBuilder::default()
    }
}

/// A builder for [`RouteAvoidanceArea`](crate::types::RouteAvoidanceArea).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteAvoidanceAreaBuilder {
    pub(crate) except: ::std::option::Option<::std::vec::Vec<crate::types::RouteAvoidanceAreaGeometry>>,
    pub(crate) geometry: ::std::option::Option<crate::types::RouteAvoidanceAreaGeometry>,
}
impl RouteAvoidanceAreaBuilder {
    /// Appends an item to `except`.
    ///
    /// To override the contents of this collection use [`set_except`](Self::set_except).
    ///
    /// <p>Exceptions to the provided avoidance geometry, to be included while calculating the route.</p>
    pub fn except(mut self, input: crate::types::RouteAvoidanceAreaGeometry) -> Self {
        let mut v = self.except.unwrap_or_default();
        v.push(input);
        self.except = ::std::option::Option::Some(v);
        self
    }
    /// <p>Exceptions to the provided avoidance geometry, to be included while calculating the route.</p>
    pub fn set_except(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteAvoidanceAreaGeometry>>) -> Self {
        self.except = input;
        self
    }
    /// <p>Exceptions to the provided avoidance geometry, to be included while calculating the route.</p>
    pub fn get_except(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteAvoidanceAreaGeometry>> {
        &self.except
    }
    /// <p>Geometry of the area to be avoided.</p>
    /// This field is required.
    pub fn geometry(mut self, input: crate::types::RouteAvoidanceAreaGeometry) -> Self {
        self.geometry = ::std::option::Option::Some(input);
        self
    }
    /// <p>Geometry of the area to be avoided.</p>
    pub fn set_geometry(mut self, input: ::std::option::Option<crate::types::RouteAvoidanceAreaGeometry>) -> Self {
        self.geometry = input;
        self
    }
    /// <p>Geometry of the area to be avoided.</p>
    pub fn get_geometry(&self) -> &::std::option::Option<crate::types::RouteAvoidanceAreaGeometry> {
        &self.geometry
    }
    /// Consumes the builder and constructs a [`RouteAvoidanceArea`](crate::types::RouteAvoidanceArea).
    pub fn build(self) -> crate::types::RouteAvoidanceArea {
        crate::types::RouteAvoidanceArea {
            except: self.except,
            geometry: self.geometry,
        }
    }
}
