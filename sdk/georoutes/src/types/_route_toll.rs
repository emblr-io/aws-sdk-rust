// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides details about toll information along a route, including the payment sites, applicable toll rates, toll systems, and the country associated with the toll collection.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteToll {
    /// <p>The alpha-2 or alpha-3 character code for the country.</p>
    pub country: ::std::option::Option<::std::string::String>,
    /// <p>Locations or sites where the toll fare is collected.</p>
    pub payment_sites: ::std::vec::Vec<crate::types::RouteTollPaymentSite>,
    /// <p>Toll rates that need to be paid to travel this leg of the route.</p>
    pub rates: ::std::vec::Vec<crate::types::RouteTollRate>,
    /// <p>Toll systems are authorities that collect payments for the toll.</p>
    pub systems: ::std::vec::Vec<i32>,
}
impl RouteToll {
    /// <p>The alpha-2 or alpha-3 character code for the country.</p>
    pub fn country(&self) -> ::std::option::Option<&str> {
        self.country.as_deref()
    }
    /// <p>Locations or sites where the toll fare is collected.</p>
    pub fn payment_sites(&self) -> &[crate::types::RouteTollPaymentSite] {
        use std::ops::Deref;
        self.payment_sites.deref()
    }
    /// <p>Toll rates that need to be paid to travel this leg of the route.</p>
    pub fn rates(&self) -> &[crate::types::RouteTollRate] {
        use std::ops::Deref;
        self.rates.deref()
    }
    /// <p>Toll systems are authorities that collect payments for the toll.</p>
    pub fn systems(&self) -> &[i32] {
        use std::ops::Deref;
        self.systems.deref()
    }
}
impl RouteToll {
    /// Creates a new builder-style object to manufacture [`RouteToll`](crate::types::RouteToll).
    pub fn builder() -> crate::types::builders::RouteTollBuilder {
        crate::types::builders::RouteTollBuilder::default()
    }
}

/// A builder for [`RouteToll`](crate::types::RouteToll).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteTollBuilder {
    pub(crate) country: ::std::option::Option<::std::string::String>,
    pub(crate) payment_sites: ::std::option::Option<::std::vec::Vec<crate::types::RouteTollPaymentSite>>,
    pub(crate) rates: ::std::option::Option<::std::vec::Vec<crate::types::RouteTollRate>>,
    pub(crate) systems: ::std::option::Option<::std::vec::Vec<i32>>,
}
impl RouteTollBuilder {
    /// <p>The alpha-2 or alpha-3 character code for the country.</p>
    pub fn country(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.country = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The alpha-2 or alpha-3 character code for the country.</p>
    pub fn set_country(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.country = input;
        self
    }
    /// <p>The alpha-2 or alpha-3 character code for the country.</p>
    pub fn get_country(&self) -> &::std::option::Option<::std::string::String> {
        &self.country
    }
    /// Appends an item to `payment_sites`.
    ///
    /// To override the contents of this collection use [`set_payment_sites`](Self::set_payment_sites).
    ///
    /// <p>Locations or sites where the toll fare is collected.</p>
    pub fn payment_sites(mut self, input: crate::types::RouteTollPaymentSite) -> Self {
        let mut v = self.payment_sites.unwrap_or_default();
        v.push(input);
        self.payment_sites = ::std::option::Option::Some(v);
        self
    }
    /// <p>Locations or sites where the toll fare is collected.</p>
    pub fn set_payment_sites(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteTollPaymentSite>>) -> Self {
        self.payment_sites = input;
        self
    }
    /// <p>Locations or sites where the toll fare is collected.</p>
    pub fn get_payment_sites(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteTollPaymentSite>> {
        &self.payment_sites
    }
    /// Appends an item to `rates`.
    ///
    /// To override the contents of this collection use [`set_rates`](Self::set_rates).
    ///
    /// <p>Toll rates that need to be paid to travel this leg of the route.</p>
    pub fn rates(mut self, input: crate::types::RouteTollRate) -> Self {
        let mut v = self.rates.unwrap_or_default();
        v.push(input);
        self.rates = ::std::option::Option::Some(v);
        self
    }
    /// <p>Toll rates that need to be paid to travel this leg of the route.</p>
    pub fn set_rates(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteTollRate>>) -> Self {
        self.rates = input;
        self
    }
    /// <p>Toll rates that need to be paid to travel this leg of the route.</p>
    pub fn get_rates(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteTollRate>> {
        &self.rates
    }
    /// Appends an item to `systems`.
    ///
    /// To override the contents of this collection use [`set_systems`](Self::set_systems).
    ///
    /// <p>Toll systems are authorities that collect payments for the toll.</p>
    pub fn systems(mut self, input: i32) -> Self {
        let mut v = self.systems.unwrap_or_default();
        v.push(input);
        self.systems = ::std::option::Option::Some(v);
        self
    }
    /// <p>Toll systems are authorities that collect payments for the toll.</p>
    pub fn set_systems(mut self, input: ::std::option::Option<::std::vec::Vec<i32>>) -> Self {
        self.systems = input;
        self
    }
    /// <p>Toll systems are authorities that collect payments for the toll.</p>
    pub fn get_systems(&self) -> &::std::option::Option<::std::vec::Vec<i32>> {
        &self.systems
    }
    /// Consumes the builder and constructs a [`RouteToll`](crate::types::RouteToll).
    /// This method will fail if any of the following fields are not set:
    /// - [`payment_sites`](crate::types::builders::RouteTollBuilder::payment_sites)
    /// - [`rates`](crate::types::builders::RouteTollBuilder::rates)
    /// - [`systems`](crate::types::builders::RouteTollBuilder::systems)
    pub fn build(self) -> ::std::result::Result<crate::types::RouteToll, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RouteToll {
            country: self.country,
            payment_sites: self.payment_sites.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "payment_sites",
                    "payment_sites was not specified but it is required when building RouteToll",
                )
            })?,
            rates: self.rates.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rates",
                    "rates was not specified but it is required when building RouteToll",
                )
            })?,
            systems: self.systems.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "systems",
                    "systems was not specified but it is required when building RouteToll",
                )
            })?,
        })
    }
}
