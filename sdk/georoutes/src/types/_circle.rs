// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Geometry defined as a circle. When request routing boundary was set as <code>AutoCircle</code>, the response routing boundary will return <code>Circle</code> derived from the <code>AutoCircle</code> settings.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Circle {
    /// <p>Center of the Circle defined in longitude and latitude coordinates.</p>
    /// <p>Example: <code>\[-123.1174, 49.2847\]</code> represents the position with longitude <code>-123.1174</code> and latitude <code>49.2847</code>.</p>
    pub center: ::std::vec::Vec<f64>,
    /// <p>Radius of the Circle.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    pub radius: f64,
}
impl Circle {
    /// <p>Center of the Circle defined in longitude and latitude coordinates.</p>
    /// <p>Example: <code>\[-123.1174, 49.2847\]</code> represents the position with longitude <code>-123.1174</code> and latitude <code>49.2847</code>.</p>
    pub fn center(&self) -> &[f64] {
        use std::ops::Deref;
        self.center.deref()
    }
    /// <p>Radius of the Circle.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    pub fn radius(&self) -> f64 {
        self.radius
    }
}
impl ::std::fmt::Debug for Circle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Circle");
        formatter.field("center", &"*** Sensitive Data Redacted ***");
        formatter.field("radius", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl Circle {
    /// Creates a new builder-style object to manufacture [`Circle`](crate::types::Circle).
    pub fn builder() -> crate::types::builders::CircleBuilder {
        crate::types::builders::CircleBuilder::default()
    }
}

/// A builder for [`Circle`](crate::types::Circle).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CircleBuilder {
    pub(crate) center: ::std::option::Option<::std::vec::Vec<f64>>,
    pub(crate) radius: ::std::option::Option<f64>,
}
impl CircleBuilder {
    /// Appends an item to `center`.
    ///
    /// To override the contents of this collection use [`set_center`](Self::set_center).
    ///
    /// <p>Center of the Circle defined in longitude and latitude coordinates.</p>
    /// <p>Example: <code>\[-123.1174, 49.2847\]</code> represents the position with longitude <code>-123.1174</code> and latitude <code>49.2847</code>.</p>
    pub fn center(mut self, input: f64) -> Self {
        let mut v = self.center.unwrap_or_default();
        v.push(input);
        self.center = ::std::option::Option::Some(v);
        self
    }
    /// <p>Center of the Circle defined in longitude and latitude coordinates.</p>
    /// <p>Example: <code>\[-123.1174, 49.2847\]</code> represents the position with longitude <code>-123.1174</code> and latitude <code>49.2847</code>.</p>
    pub fn set_center(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.center = input;
        self
    }
    /// <p>Center of the Circle defined in longitude and latitude coordinates.</p>
    /// <p>Example: <code>\[-123.1174, 49.2847\]</code> represents the position with longitude <code>-123.1174</code> and latitude <code>49.2847</code>.</p>
    pub fn get_center(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.center
    }
    /// <p>Radius of the Circle.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    /// This field is required.
    pub fn radius(mut self, input: f64) -> Self {
        self.radius = ::std::option::Option::Some(input);
        self
    }
    /// <p>Radius of the Circle.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    pub fn set_radius(mut self, input: ::std::option::Option<f64>) -> Self {
        self.radius = input;
        self
    }
    /// <p>Radius of the Circle.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    pub fn get_radius(&self) -> &::std::option::Option<f64> {
        &self.radius
    }
    /// Consumes the builder and constructs a [`Circle`](crate::types::Circle).
    /// This method will fail if any of the following fields are not set:
    /// - [`center`](crate::types::builders::CircleBuilder::center)
    /// - [`radius`](crate::types::builders::CircleBuilder::radius)
    pub fn build(self) -> ::std::result::Result<crate::types::Circle, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Circle {
            center: self.center.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "center",
                    "center was not specified but it is required when building Circle",
                )
            })?,
            radius: self.radius.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "radius",
                    "radius was not specified but it is required when building Circle",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for CircleBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CircleBuilder");
        formatter.field("center", &"*** Sensitive Data Redacted ***");
        formatter.field("radius", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
