// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Threshold to be used for the isoline calculation. Up to 5 thresholds per provided type can be requested.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IsolineThresholds {
    /// <p>Distance to be used for the isoline calculation.</p>
    pub distance: ::std::option::Option<::std::vec::Vec<i64>>,
    /// <p>Time to be used for the isoline calculation.</p>
    pub time: ::std::option::Option<::std::vec::Vec<i64>>,
}
impl IsolineThresholds {
    /// <p>Distance to be used for the isoline calculation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.distance.is_none()`.
    pub fn distance(&self) -> &[i64] {
        self.distance.as_deref().unwrap_or_default()
    }
    /// <p>Time to be used for the isoline calculation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.time.is_none()`.
    pub fn time(&self) -> &[i64] {
        self.time.as_deref().unwrap_or_default()
    }
}
impl IsolineThresholds {
    /// Creates a new builder-style object to manufacture [`IsolineThresholds`](crate::types::IsolineThresholds).
    pub fn builder() -> crate::types::builders::IsolineThresholdsBuilder {
        crate::types::builders::IsolineThresholdsBuilder::default()
    }
}

/// A builder for [`IsolineThresholds`](crate::types::IsolineThresholds).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IsolineThresholdsBuilder {
    pub(crate) distance: ::std::option::Option<::std::vec::Vec<i64>>,
    pub(crate) time: ::std::option::Option<::std::vec::Vec<i64>>,
}
impl IsolineThresholdsBuilder {
    /// Appends an item to `distance`.
    ///
    /// To override the contents of this collection use [`set_distance`](Self::set_distance).
    ///
    /// <p>Distance to be used for the isoline calculation.</p>
    pub fn distance(mut self, input: i64) -> Self {
        let mut v = self.distance.unwrap_or_default();
        v.push(input);
        self.distance = ::std::option::Option::Some(v);
        self
    }
    /// <p>Distance to be used for the isoline calculation.</p>
    pub fn set_distance(mut self, input: ::std::option::Option<::std::vec::Vec<i64>>) -> Self {
        self.distance = input;
        self
    }
    /// <p>Distance to be used for the isoline calculation.</p>
    pub fn get_distance(&self) -> &::std::option::Option<::std::vec::Vec<i64>> {
        &self.distance
    }
    /// Appends an item to `time`.
    ///
    /// To override the contents of this collection use [`set_time`](Self::set_time).
    ///
    /// <p>Time to be used for the isoline calculation.</p>
    pub fn time(mut self, input: i64) -> Self {
        let mut v = self.time.unwrap_or_default();
        v.push(input);
        self.time = ::std::option::Option::Some(v);
        self
    }
    /// <p>Time to be used for the isoline calculation.</p>
    pub fn set_time(mut self, input: ::std::option::Option<::std::vec::Vec<i64>>) -> Self {
        self.time = input;
        self
    }
    /// <p>Time to be used for the isoline calculation.</p>
    pub fn get_time(&self) -> &::std::option::Option<::std::vec::Vec<i64>> {
        &self.time
    }
    /// Consumes the builder and constructs a [`IsolineThresholds`](crate::types::IsolineThresholds).
    pub fn build(self) -> crate::types::IsolineThresholds {
        crate::types::IsolineThresholds {
            distance: self.distance,
            time: self.time,
        }
    }
}
