// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Additional details of the notice.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteVehicleNoticeDetail {
    /// <p>The notice title.</p>
    pub title: ::std::option::Option<::std::string::String>,
    /// <p>Any violated constraints.</p>
    pub violated_constraints: ::std::option::Option<crate::types::RouteViolatedConstraints>,
}
impl RouteVehicleNoticeDetail {
    /// <p>The notice title.</p>
    pub fn title(&self) -> ::std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>Any violated constraints.</p>
    pub fn violated_constraints(&self) -> ::std::option::Option<&crate::types::RouteViolatedConstraints> {
        self.violated_constraints.as_ref()
    }
}
impl RouteVehicleNoticeDetail {
    /// Creates a new builder-style object to manufacture [`RouteVehicleNoticeDetail`](crate::types::RouteVehicleNoticeDetail).
    pub fn builder() -> crate::types::builders::RouteVehicleNoticeDetailBuilder {
        crate::types::builders::RouteVehicleNoticeDetailBuilder::default()
    }
}

/// A builder for [`RouteVehicleNoticeDetail`](crate::types::RouteVehicleNoticeDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteVehicleNoticeDetailBuilder {
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) violated_constraints: ::std::option::Option<crate::types::RouteViolatedConstraints>,
}
impl RouteVehicleNoticeDetailBuilder {
    /// <p>The notice title.</p>
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The notice title.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The notice title.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>Any violated constraints.</p>
    pub fn violated_constraints(mut self, input: crate::types::RouteViolatedConstraints) -> Self {
        self.violated_constraints = ::std::option::Option::Some(input);
        self
    }
    /// <p>Any violated constraints.</p>
    pub fn set_violated_constraints(mut self, input: ::std::option::Option<crate::types::RouteViolatedConstraints>) -> Self {
        self.violated_constraints = input;
        self
    }
    /// <p>Any violated constraints.</p>
    pub fn get_violated_constraints(&self) -> &::std::option::Option<crate::types::RouteViolatedConstraints> {
        &self.violated_constraints
    }
    /// Consumes the builder and constructs a [`RouteVehicleNoticeDetail`](crate::types::RouteVehicleNoticeDetail).
    pub fn build(self) -> crate::types::RouteVehicleNoticeDetail {
        crate::types::RouteVehicleNoticeDetail {
            title: self.title,
            violated_constraints: self.violated_constraints,
        }
    }
}
