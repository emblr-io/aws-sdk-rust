// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Sign post information of the action, applicable only for TurnByTurn steps. See RouteSignpost for details of sub-attributes.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteSignpost {
    /// <p>Labels present on the sign post.</p>
    pub labels: ::std::vec::Vec<crate::types::RouteSignpostLabel>,
}
impl RouteSignpost {
    /// <p>Labels present on the sign post.</p>
    pub fn labels(&self) -> &[crate::types::RouteSignpostLabel] {
        use std::ops::Deref;
        self.labels.deref()
    }
}
impl RouteSignpost {
    /// Creates a new builder-style object to manufacture [`RouteSignpost`](crate::types::RouteSignpost).
    pub fn builder() -> crate::types::builders::RouteSignpostBuilder {
        crate::types::builders::RouteSignpostBuilder::default()
    }
}

/// A builder for [`RouteSignpost`](crate::types::RouteSignpost).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteSignpostBuilder {
    pub(crate) labels: ::std::option::Option<::std::vec::Vec<crate::types::RouteSignpostLabel>>,
}
impl RouteSignpostBuilder {
    /// Appends an item to `labels`.
    ///
    /// To override the contents of this collection use [`set_labels`](Self::set_labels).
    ///
    /// <p>Labels present on the sign post.</p>
    pub fn labels(mut self, input: crate::types::RouteSignpostLabel) -> Self {
        let mut v = self.labels.unwrap_or_default();
        v.push(input);
        self.labels = ::std::option::Option::Some(v);
        self
    }
    /// <p>Labels present on the sign post.</p>
    pub fn set_labels(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteSignpostLabel>>) -> Self {
        self.labels = input;
        self
    }
    /// <p>Labels present on the sign post.</p>
    pub fn get_labels(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteSignpostLabel>> {
        &self.labels
    }
    /// Consumes the builder and constructs a [`RouteSignpost`](crate::types::RouteSignpost).
    /// This method will fail if any of the following fields are not set:
    /// - [`labels`](crate::types::builders::RouteSignpostBuilder::labels)
    pub fn build(self) -> ::std::result::Result<crate::types::RouteSignpost, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RouteSignpost {
            labels: self.labels.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "labels",
                    "labels was not specified but it is required when building RouteSignpost",
                )
            })?,
        })
    }
}
