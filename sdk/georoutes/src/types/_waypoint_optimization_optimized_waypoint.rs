// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The optimized waypoint.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct WaypointOptimizationOptimizedWaypoint {
    /// <p>Estimated time of arrival at the destination.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub arrival_time: ::std::option::Option<::std::string::String>,
    /// <p>Index of the cluster the waypoint is associated with. The index is included in the response only if clustering was performed while processing the request.</p>
    pub cluster_index: ::std::option::Option<i32>,
    /// <p>Estimated time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub departure_time: ::std::string::String,
    /// <p>The waypoint Id.</p>
    pub id: ::std::string::String,
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub position: ::std::vec::Vec<f64>,
}
impl WaypointOptimizationOptimizedWaypoint {
    /// <p>Estimated time of arrival at the destination.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn arrival_time(&self) -> ::std::option::Option<&str> {
        self.arrival_time.as_deref()
    }
    /// <p>Index of the cluster the waypoint is associated with. The index is included in the response only if clustering was performed while processing the request.</p>
    pub fn cluster_index(&self) -> ::std::option::Option<i32> {
        self.cluster_index
    }
    /// <p>Estimated time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn departure_time(&self) -> &str {
        use std::ops::Deref;
        self.departure_time.deref()
    }
    /// <p>The waypoint Id.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn position(&self) -> &[f64] {
        use std::ops::Deref;
        self.position.deref()
    }
}
impl ::std::fmt::Debug for WaypointOptimizationOptimizedWaypoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("WaypointOptimizationOptimizedWaypoint");
        formatter.field("arrival_time", &self.arrival_time);
        formatter.field("cluster_index", &self.cluster_index);
        formatter.field("departure_time", &self.departure_time);
        formatter.field("id", &self.id);
        formatter.field("position", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl WaypointOptimizationOptimizedWaypoint {
    /// Creates a new builder-style object to manufacture [`WaypointOptimizationOptimizedWaypoint`](crate::types::WaypointOptimizationOptimizedWaypoint).
    pub fn builder() -> crate::types::builders::WaypointOptimizationOptimizedWaypointBuilder {
        crate::types::builders::WaypointOptimizationOptimizedWaypointBuilder::default()
    }
}

/// A builder for [`WaypointOptimizationOptimizedWaypoint`](crate::types::WaypointOptimizationOptimizedWaypoint).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct WaypointOptimizationOptimizedWaypointBuilder {
    pub(crate) arrival_time: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_index: ::std::option::Option<i32>,
    pub(crate) departure_time: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) position: ::std::option::Option<::std::vec::Vec<f64>>,
}
impl WaypointOptimizationOptimizedWaypointBuilder {
    /// <p>Estimated time of arrival at the destination.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn arrival_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arrival_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Estimated time of arrival at the destination.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn set_arrival_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arrival_time = input;
        self
    }
    /// <p>Estimated time of arrival at the destination.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn get_arrival_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.arrival_time
    }
    /// <p>Index of the cluster the waypoint is associated with. The index is included in the response only if clustering was performed while processing the request.</p>
    pub fn cluster_index(mut self, input: i32) -> Self {
        self.cluster_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>Index of the cluster the waypoint is associated with. The index is included in the response only if clustering was performed while processing the request.</p>
    pub fn set_cluster_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.cluster_index = input;
        self
    }
    /// <p>Index of the cluster the waypoint is associated with. The index is included in the response only if clustering was performed while processing the request.</p>
    pub fn get_cluster_index(&self) -> &::std::option::Option<i32> {
        &self.cluster_index
    }
    /// <p>Estimated time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    /// This field is required.
    pub fn departure_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.departure_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Estimated time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn set_departure_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.departure_time = input;
        self
    }
    /// <p>Estimated time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn get_departure_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.departure_time
    }
    /// <p>The waypoint Id.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The waypoint Id.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The waypoint Id.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Appends an item to `position`.
    ///
    /// To override the contents of this collection use [`set_position`](Self::set_position).
    ///
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn position(mut self, input: f64) -> Self {
        let mut v = self.position.unwrap_or_default();
        v.push(input);
        self.position = ::std::option::Option::Some(v);
        self
    }
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn set_position(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.position = input;
        self
    }
    /// <p>Position defined as <code>\[longitude, latitude\]</code>.</p>
    pub fn get_position(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.position
    }
    /// Consumes the builder and constructs a [`WaypointOptimizationOptimizedWaypoint`](crate::types::WaypointOptimizationOptimizedWaypoint).
    /// This method will fail if any of the following fields are not set:
    /// - [`departure_time`](crate::types::builders::WaypointOptimizationOptimizedWaypointBuilder::departure_time)
    /// - [`id`](crate::types::builders::WaypointOptimizationOptimizedWaypointBuilder::id)
    /// - [`position`](crate::types::builders::WaypointOptimizationOptimizedWaypointBuilder::position)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::WaypointOptimizationOptimizedWaypoint, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WaypointOptimizationOptimizedWaypoint {
            arrival_time: self.arrival_time,
            cluster_index: self.cluster_index,
            departure_time: self.departure_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "departure_time",
                    "departure_time was not specified but it is required when building WaypointOptimizationOptimizedWaypoint",
                )
            })?,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building WaypointOptimizationOptimizedWaypoint",
                )
            })?,
            position: self.position.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "position",
                    "position was not specified but it is required when building WaypointOptimizationOptimizedWaypoint",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for WaypointOptimizationOptimizedWaypointBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("WaypointOptimizationOptimizedWaypointBuilder");
        formatter.field("arrival_time", &self.arrival_time);
        formatter.field("cluster_index", &self.cluster_index);
        formatter.field("departure_time", &self.departure_time);
        formatter.field("id", &self.id);
        formatter.field("position", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
