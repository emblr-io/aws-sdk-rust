// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the roundabout step.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteRoundaboutExitStepDetails {
    /// <p>Name of the intersection, if applicable to the step.</p>
    pub intersection: ::std::vec::Vec<crate::types::LocalizedString>,
    /// <p>Exit to be taken.</p>
    pub relative_exit: ::std::option::Option<i32>,
    /// <p>Angle of the roundabout.</p>
    pub roundabout_angle: f64,
    /// <p>Steering direction for the step.</p>
    pub steering_direction: ::std::option::Option<crate::types::RouteSteeringDirection>,
}
impl RouteRoundaboutExitStepDetails {
    /// <p>Name of the intersection, if applicable to the step.</p>
    pub fn intersection(&self) -> &[crate::types::LocalizedString] {
        use std::ops::Deref;
        self.intersection.deref()
    }
    /// <p>Exit to be taken.</p>
    pub fn relative_exit(&self) -> ::std::option::Option<i32> {
        self.relative_exit
    }
    /// <p>Angle of the roundabout.</p>
    pub fn roundabout_angle(&self) -> f64 {
        self.roundabout_angle
    }
    /// <p>Steering direction for the step.</p>
    pub fn steering_direction(&self) -> ::std::option::Option<&crate::types::RouteSteeringDirection> {
        self.steering_direction.as_ref()
    }
}
impl RouteRoundaboutExitStepDetails {
    /// Creates a new builder-style object to manufacture [`RouteRoundaboutExitStepDetails`](crate::types::RouteRoundaboutExitStepDetails).
    pub fn builder() -> crate::types::builders::RouteRoundaboutExitStepDetailsBuilder {
        crate::types::builders::RouteRoundaboutExitStepDetailsBuilder::default()
    }
}

/// A builder for [`RouteRoundaboutExitStepDetails`](crate::types::RouteRoundaboutExitStepDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteRoundaboutExitStepDetailsBuilder {
    pub(crate) intersection: ::std::option::Option<::std::vec::Vec<crate::types::LocalizedString>>,
    pub(crate) relative_exit: ::std::option::Option<i32>,
    pub(crate) roundabout_angle: ::std::option::Option<f64>,
    pub(crate) steering_direction: ::std::option::Option<crate::types::RouteSteeringDirection>,
}
impl RouteRoundaboutExitStepDetailsBuilder {
    /// Appends an item to `intersection`.
    ///
    /// To override the contents of this collection use [`set_intersection`](Self::set_intersection).
    ///
    /// <p>Name of the intersection, if applicable to the step.</p>
    pub fn intersection(mut self, input: crate::types::LocalizedString) -> Self {
        let mut v = self.intersection.unwrap_or_default();
        v.push(input);
        self.intersection = ::std::option::Option::Some(v);
        self
    }
    /// <p>Name of the intersection, if applicable to the step.</p>
    pub fn set_intersection(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LocalizedString>>) -> Self {
        self.intersection = input;
        self
    }
    /// <p>Name of the intersection, if applicable to the step.</p>
    pub fn get_intersection(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LocalizedString>> {
        &self.intersection
    }
    /// <p>Exit to be taken.</p>
    pub fn relative_exit(mut self, input: i32) -> Self {
        self.relative_exit = ::std::option::Option::Some(input);
        self
    }
    /// <p>Exit to be taken.</p>
    pub fn set_relative_exit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.relative_exit = input;
        self
    }
    /// <p>Exit to be taken.</p>
    pub fn get_relative_exit(&self) -> &::std::option::Option<i32> {
        &self.relative_exit
    }
    /// <p>Angle of the roundabout.</p>
    pub fn roundabout_angle(mut self, input: f64) -> Self {
        self.roundabout_angle = ::std::option::Option::Some(input);
        self
    }
    /// <p>Angle of the roundabout.</p>
    pub fn set_roundabout_angle(mut self, input: ::std::option::Option<f64>) -> Self {
        self.roundabout_angle = input;
        self
    }
    /// <p>Angle of the roundabout.</p>
    pub fn get_roundabout_angle(&self) -> &::std::option::Option<f64> {
        &self.roundabout_angle
    }
    /// <p>Steering direction for the step.</p>
    pub fn steering_direction(mut self, input: crate::types::RouteSteeringDirection) -> Self {
        self.steering_direction = ::std::option::Option::Some(input);
        self
    }
    /// <p>Steering direction for the step.</p>
    pub fn set_steering_direction(mut self, input: ::std::option::Option<crate::types::RouteSteeringDirection>) -> Self {
        self.steering_direction = input;
        self
    }
    /// <p>Steering direction for the step.</p>
    pub fn get_steering_direction(&self) -> &::std::option::Option<crate::types::RouteSteeringDirection> {
        &self.steering_direction
    }
    /// Consumes the builder and constructs a [`RouteRoundaboutExitStepDetails`](crate::types::RouteRoundaboutExitStepDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`intersection`](crate::types::builders::RouteRoundaboutExitStepDetailsBuilder::intersection)
    pub fn build(self) -> ::std::result::Result<crate::types::RouteRoundaboutExitStepDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RouteRoundaboutExitStepDetails {
            intersection: self.intersection.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "intersection",
                    "intersection was not specified but it is required when building RouteRoundaboutExitStepDetails",
                )
            })?,
            relative_exit: self.relative_exit,
            roundabout_angle: self.roundabout_angle.unwrap_or_default(),
            steering_direction: self.steering_direction,
        })
    }
}
