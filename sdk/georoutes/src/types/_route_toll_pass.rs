// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details if the toll rate can be a pass that supports multiple trips.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteTollPass {
    /// <p>If the pass includes the rate for the return leg of the trip.</p>
    pub includes_return_trip: ::std::option::Option<bool>,
    /// <p>If the pass is only valid for senior persons.</p>
    pub senior_pass: ::std::option::Option<bool>,
    /// <p>If the toll pass can be transferred, and how many times.</p>
    pub transfer_count: ::std::option::Option<i32>,
    /// <p>Number of trips the pass is valid for.</p>
    pub trip_count: ::std::option::Option<i32>,
    /// <p>Period for which the pass is valid.</p>
    pub validity_period: ::std::option::Option<crate::types::RouteTollPassValidityPeriod>,
}
impl RouteTollPass {
    /// <p>If the pass includes the rate for the return leg of the trip.</p>
    pub fn includes_return_trip(&self) -> ::std::option::Option<bool> {
        self.includes_return_trip
    }
    /// <p>If the pass is only valid for senior persons.</p>
    pub fn senior_pass(&self) -> ::std::option::Option<bool> {
        self.senior_pass
    }
    /// <p>If the toll pass can be transferred, and how many times.</p>
    pub fn transfer_count(&self) -> ::std::option::Option<i32> {
        self.transfer_count
    }
    /// <p>Number of trips the pass is valid for.</p>
    pub fn trip_count(&self) -> ::std::option::Option<i32> {
        self.trip_count
    }
    /// <p>Period for which the pass is valid.</p>
    pub fn validity_period(&self) -> ::std::option::Option<&crate::types::RouteTollPassValidityPeriod> {
        self.validity_period.as_ref()
    }
}
impl RouteTollPass {
    /// Creates a new builder-style object to manufacture [`RouteTollPass`](crate::types::RouteTollPass).
    pub fn builder() -> crate::types::builders::RouteTollPassBuilder {
        crate::types::builders::RouteTollPassBuilder::default()
    }
}

/// A builder for [`RouteTollPass`](crate::types::RouteTollPass).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteTollPassBuilder {
    pub(crate) includes_return_trip: ::std::option::Option<bool>,
    pub(crate) senior_pass: ::std::option::Option<bool>,
    pub(crate) transfer_count: ::std::option::Option<i32>,
    pub(crate) trip_count: ::std::option::Option<i32>,
    pub(crate) validity_period: ::std::option::Option<crate::types::RouteTollPassValidityPeriod>,
}
impl RouteTollPassBuilder {
    /// <p>If the pass includes the rate for the return leg of the trip.</p>
    pub fn includes_return_trip(mut self, input: bool) -> Self {
        self.includes_return_trip = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the pass includes the rate for the return leg of the trip.</p>
    pub fn set_includes_return_trip(mut self, input: ::std::option::Option<bool>) -> Self {
        self.includes_return_trip = input;
        self
    }
    /// <p>If the pass includes the rate for the return leg of the trip.</p>
    pub fn get_includes_return_trip(&self) -> &::std::option::Option<bool> {
        &self.includes_return_trip
    }
    /// <p>If the pass is only valid for senior persons.</p>
    pub fn senior_pass(mut self, input: bool) -> Self {
        self.senior_pass = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the pass is only valid for senior persons.</p>
    pub fn set_senior_pass(mut self, input: ::std::option::Option<bool>) -> Self {
        self.senior_pass = input;
        self
    }
    /// <p>If the pass is only valid for senior persons.</p>
    pub fn get_senior_pass(&self) -> &::std::option::Option<bool> {
        &self.senior_pass
    }
    /// <p>If the toll pass can be transferred, and how many times.</p>
    pub fn transfer_count(mut self, input: i32) -> Self {
        self.transfer_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the toll pass can be transferred, and how many times.</p>
    pub fn set_transfer_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.transfer_count = input;
        self
    }
    /// <p>If the toll pass can be transferred, and how many times.</p>
    pub fn get_transfer_count(&self) -> &::std::option::Option<i32> {
        &self.transfer_count
    }
    /// <p>Number of trips the pass is valid for.</p>
    pub fn trip_count(mut self, input: i32) -> Self {
        self.trip_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of trips the pass is valid for.</p>
    pub fn set_trip_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.trip_count = input;
        self
    }
    /// <p>Number of trips the pass is valid for.</p>
    pub fn get_trip_count(&self) -> &::std::option::Option<i32> {
        &self.trip_count
    }
    /// <p>Period for which the pass is valid.</p>
    pub fn validity_period(mut self, input: crate::types::RouteTollPassValidityPeriod) -> Self {
        self.validity_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>Period for which the pass is valid.</p>
    pub fn set_validity_period(mut self, input: ::std::option::Option<crate::types::RouteTollPassValidityPeriod>) -> Self {
        self.validity_period = input;
        self
    }
    /// <p>Period for which the pass is valid.</p>
    pub fn get_validity_period(&self) -> &::std::option::Option<crate::types::RouteTollPassValidityPeriod> {
        &self.validity_period
    }
    /// Consumes the builder and constructs a [`RouteTollPass`](crate::types::RouteTollPass).
    pub fn build(self) -> crate::types::RouteTollPass {
        crate::types::RouteTollPass {
            includes_return_trip: self.includes_return_trip,
            senior_pass: self.senior_pass,
            transfer_count: self.transfer_count,
            trip_count: self.trip_count,
            validity_period: self.validity_period,
        }
    }
}
