// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Time breakdown for the sequence.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WaypointOptimizationTimeBreakdown {
    /// <p>Resting phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub rest_duration: i64,
    /// <p>Service time spent at the destination. At an appointment, the service time should be the appointment duration.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub service_duration: i64,
    /// <p>Traveling phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub travel_duration: i64,
    /// <p>Waiting phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub wait_duration: i64,
}
impl WaypointOptimizationTimeBreakdown {
    /// <p>Resting phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn rest_duration(&self) -> i64 {
        self.rest_duration
    }
    /// <p>Service time spent at the destination. At an appointment, the service time should be the appointment duration.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn service_duration(&self) -> i64 {
        self.service_duration
    }
    /// <p>Traveling phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn travel_duration(&self) -> i64 {
        self.travel_duration
    }
    /// <p>Waiting phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn wait_duration(&self) -> i64 {
        self.wait_duration
    }
}
impl WaypointOptimizationTimeBreakdown {
    /// Creates a new builder-style object to manufacture [`WaypointOptimizationTimeBreakdown`](crate::types::WaypointOptimizationTimeBreakdown).
    pub fn builder() -> crate::types::builders::WaypointOptimizationTimeBreakdownBuilder {
        crate::types::builders::WaypointOptimizationTimeBreakdownBuilder::default()
    }
}

/// A builder for [`WaypointOptimizationTimeBreakdown`](crate::types::WaypointOptimizationTimeBreakdown).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WaypointOptimizationTimeBreakdownBuilder {
    pub(crate) rest_duration: ::std::option::Option<i64>,
    pub(crate) service_duration: ::std::option::Option<i64>,
    pub(crate) travel_duration: ::std::option::Option<i64>,
    pub(crate) wait_duration: ::std::option::Option<i64>,
}
impl WaypointOptimizationTimeBreakdownBuilder {
    /// <p>Resting phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    /// This field is required.
    pub fn rest_duration(mut self, input: i64) -> Self {
        self.rest_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Resting phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn set_rest_duration(mut self, input: ::std::option::Option<i64>) -> Self {
        self.rest_duration = input;
        self
    }
    /// <p>Resting phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn get_rest_duration(&self) -> &::std::option::Option<i64> {
        &self.rest_duration
    }
    /// <p>Service time spent at the destination. At an appointment, the service time should be the appointment duration.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    /// This field is required.
    pub fn service_duration(mut self, input: i64) -> Self {
        self.service_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Service time spent at the destination. At an appointment, the service time should be the appointment duration.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn set_service_duration(mut self, input: ::std::option::Option<i64>) -> Self {
        self.service_duration = input;
        self
    }
    /// <p>Service time spent at the destination. At an appointment, the service time should be the appointment duration.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn get_service_duration(&self) -> &::std::option::Option<i64> {
        &self.service_duration
    }
    /// <p>Traveling phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    /// This field is required.
    pub fn travel_duration(mut self, input: i64) -> Self {
        self.travel_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Traveling phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn set_travel_duration(mut self, input: ::std::option::Option<i64>) -> Self {
        self.travel_duration = input;
        self
    }
    /// <p>Traveling phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn get_travel_duration(&self) -> &::std::option::Option<i64> {
        &self.travel_duration
    }
    /// <p>Waiting phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    /// This field is required.
    pub fn wait_duration(mut self, input: i64) -> Self {
        self.wait_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Waiting phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn set_wait_duration(mut self, input: ::std::option::Option<i64>) -> Self {
        self.wait_duration = input;
        self
    }
    /// <p>Waiting phase of the cycle.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn get_wait_duration(&self) -> &::std::option::Option<i64> {
        &self.wait_duration
    }
    /// Consumes the builder and constructs a [`WaypointOptimizationTimeBreakdown`](crate::types::WaypointOptimizationTimeBreakdown).
    pub fn build(self) -> crate::types::WaypointOptimizationTimeBreakdown {
        crate::types::WaypointOptimizationTimeBreakdown {
            rest_duration: self.rest_duration.unwrap_or_default(),
            service_duration: self.service_duration.unwrap_or_default(),
            travel_duration: self.travel_duration.unwrap_or_default(),
            wait_duration: self.wait_duration.unwrap_or_default(),
        }
    }
}
