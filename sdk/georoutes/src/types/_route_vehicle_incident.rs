// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Incidents corresponding to this leg of the route.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteVehicleIncident {
    /// <p>Brief readable description of the incident.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>End timestamp of the incident.</p>
    pub end_time: ::std::option::Option<::std::string::String>,
    /// <p>Severity of the incident Critical - The part of the route the incident affects is unusable. Major- Major impact on the leg duration, for example stop and go Minor- Minor impact on the leg duration, for example traffic jam Low - Low on duration, for example slightly increased traffic</p>
    pub severity: ::std::option::Option<crate::types::RouteVehicleIncidentSeverity>,
    /// <p>Start time of the incident.</p>
    pub start_time: ::std::option::Option<::std::string::String>,
    /// <p>Type of the incident.</p>
    pub r#type: ::std::option::Option<crate::types::RouteVehicleIncidentType>,
}
impl RouteVehicleIncident {
    /// <p>Brief readable description of the incident.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>End timestamp of the incident.</p>
    pub fn end_time(&self) -> ::std::option::Option<&str> {
        self.end_time.as_deref()
    }
    /// <p>Severity of the incident Critical - The part of the route the incident affects is unusable. Major- Major impact on the leg duration, for example stop and go Minor- Minor impact on the leg duration, for example traffic jam Low - Low on duration, for example slightly increased traffic</p>
    pub fn severity(&self) -> ::std::option::Option<&crate::types::RouteVehicleIncidentSeverity> {
        self.severity.as_ref()
    }
    /// <p>Start time of the incident.</p>
    pub fn start_time(&self) -> ::std::option::Option<&str> {
        self.start_time.as_deref()
    }
    /// <p>Type of the incident.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::RouteVehicleIncidentType> {
        self.r#type.as_ref()
    }
}
impl RouteVehicleIncident {
    /// Creates a new builder-style object to manufacture [`RouteVehicleIncident`](crate::types::RouteVehicleIncident).
    pub fn builder() -> crate::types::builders::RouteVehicleIncidentBuilder {
        crate::types::builders::RouteVehicleIncidentBuilder::default()
    }
}

/// A builder for [`RouteVehicleIncident`](crate::types::RouteVehicleIncident).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteVehicleIncidentBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) end_time: ::std::option::Option<::std::string::String>,
    pub(crate) severity: ::std::option::Option<crate::types::RouteVehicleIncidentSeverity>,
    pub(crate) start_time: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::RouteVehicleIncidentType>,
}
impl RouteVehicleIncidentBuilder {
    /// <p>Brief readable description of the incident.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Brief readable description of the incident.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Brief readable description of the incident.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>End timestamp of the incident.</p>
    pub fn end_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.end_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>End timestamp of the incident.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>End timestamp of the incident.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.end_time
    }
    /// <p>Severity of the incident Critical - The part of the route the incident affects is unusable. Major- Major impact on the leg duration, for example stop and go Minor- Minor impact on the leg duration, for example traffic jam Low - Low on duration, for example slightly increased traffic</p>
    pub fn severity(mut self, input: crate::types::RouteVehicleIncidentSeverity) -> Self {
        self.severity = ::std::option::Option::Some(input);
        self
    }
    /// <p>Severity of the incident Critical - The part of the route the incident affects is unusable. Major- Major impact on the leg duration, for example stop and go Minor- Minor impact on the leg duration, for example traffic jam Low - Low on duration, for example slightly increased traffic</p>
    pub fn set_severity(mut self, input: ::std::option::Option<crate::types::RouteVehicleIncidentSeverity>) -> Self {
        self.severity = input;
        self
    }
    /// <p>Severity of the incident Critical - The part of the route the incident affects is unusable. Major- Major impact on the leg duration, for example stop and go Minor- Minor impact on the leg duration, for example traffic jam Low - Low on duration, for example slightly increased traffic</p>
    pub fn get_severity(&self) -> &::std::option::Option<crate::types::RouteVehicleIncidentSeverity> {
        &self.severity
    }
    /// <p>Start time of the incident.</p>
    pub fn start_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.start_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Start time of the incident.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>Start time of the incident.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.start_time
    }
    /// <p>Type of the incident.</p>
    pub fn r#type(mut self, input: crate::types::RouteVehicleIncidentType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of the incident.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RouteVehicleIncidentType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Type of the incident.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RouteVehicleIncidentType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`RouteVehicleIncident`](crate::types::RouteVehicleIncident).
    pub fn build(self) -> crate::types::RouteVehicleIncident {
        crate::types::RouteVehicleIncident {
            description: self.description,
            end_time: self.end_time,
            severity: self.severity,
            start_time: self.start_time,
            r#type: self.r#type,
        }
    }
}
