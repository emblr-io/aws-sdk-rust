// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Travel mode options when the provided travel mode is <code>Car</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteCarOptions {
    /// <p>Engine type of the vehicle.</p>
    pub engine_type: ::std::option::Option<crate::types::RouteEngineType>,
    /// <p>The vehicle License Plate.</p>
    pub license_plate: ::std::option::Option<crate::types::RouteVehicleLicensePlate>,
    /// <p>Maximum speed specified.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub max_speed: ::std::option::Option<f64>,
    /// <p>The number of occupants in the vehicle.</p>
    /// <p>Default Value: <code>1</code></p>
    pub occupancy: ::std::option::Option<i32>,
}
impl RouteCarOptions {
    /// <p>Engine type of the vehicle.</p>
    pub fn engine_type(&self) -> ::std::option::Option<&crate::types::RouteEngineType> {
        self.engine_type.as_ref()
    }
    /// <p>The vehicle License Plate.</p>
    pub fn license_plate(&self) -> ::std::option::Option<&crate::types::RouteVehicleLicensePlate> {
        self.license_plate.as_ref()
    }
    /// <p>Maximum speed specified.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn max_speed(&self) -> ::std::option::Option<f64> {
        self.max_speed
    }
    /// <p>The number of occupants in the vehicle.</p>
    /// <p>Default Value: <code>1</code></p>
    pub fn occupancy(&self) -> ::std::option::Option<i32> {
        self.occupancy
    }
}
impl RouteCarOptions {
    /// Creates a new builder-style object to manufacture [`RouteCarOptions`](crate::types::RouteCarOptions).
    pub fn builder() -> crate::types::builders::RouteCarOptionsBuilder {
        crate::types::builders::RouteCarOptionsBuilder::default()
    }
}

/// A builder for [`RouteCarOptions`](crate::types::RouteCarOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteCarOptionsBuilder {
    pub(crate) engine_type: ::std::option::Option<crate::types::RouteEngineType>,
    pub(crate) license_plate: ::std::option::Option<crate::types::RouteVehicleLicensePlate>,
    pub(crate) max_speed: ::std::option::Option<f64>,
    pub(crate) occupancy: ::std::option::Option<i32>,
}
impl RouteCarOptionsBuilder {
    /// <p>Engine type of the vehicle.</p>
    pub fn engine_type(mut self, input: crate::types::RouteEngineType) -> Self {
        self.engine_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Engine type of the vehicle.</p>
    pub fn set_engine_type(mut self, input: ::std::option::Option<crate::types::RouteEngineType>) -> Self {
        self.engine_type = input;
        self
    }
    /// <p>Engine type of the vehicle.</p>
    pub fn get_engine_type(&self) -> &::std::option::Option<crate::types::RouteEngineType> {
        &self.engine_type
    }
    /// <p>The vehicle License Plate.</p>
    pub fn license_plate(mut self, input: crate::types::RouteVehicleLicensePlate) -> Self {
        self.license_plate = ::std::option::Option::Some(input);
        self
    }
    /// <p>The vehicle License Plate.</p>
    pub fn set_license_plate(mut self, input: ::std::option::Option<crate::types::RouteVehicleLicensePlate>) -> Self {
        self.license_plate = input;
        self
    }
    /// <p>The vehicle License Plate.</p>
    pub fn get_license_plate(&self) -> &::std::option::Option<crate::types::RouteVehicleLicensePlate> {
        &self.license_plate
    }
    /// <p>Maximum speed specified.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn max_speed(mut self, input: f64) -> Self {
        self.max_speed = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maximum speed specified.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn set_max_speed(mut self, input: ::std::option::Option<f64>) -> Self {
        self.max_speed = input;
        self
    }
    /// <p>Maximum speed specified.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn get_max_speed(&self) -> &::std::option::Option<f64> {
        &self.max_speed
    }
    /// <p>The number of occupants in the vehicle.</p>
    /// <p>Default Value: <code>1</code></p>
    pub fn occupancy(mut self, input: i32) -> Self {
        self.occupancy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of occupants in the vehicle.</p>
    /// <p>Default Value: <code>1</code></p>
    pub fn set_occupancy(mut self, input: ::std::option::Option<i32>) -> Self {
        self.occupancy = input;
        self
    }
    /// <p>The number of occupants in the vehicle.</p>
    /// <p>Default Value: <code>1</code></p>
    pub fn get_occupancy(&self) -> &::std::option::Option<i32> {
        &self.occupancy
    }
    /// Consumes the builder and constructs a [`RouteCarOptions`](crate::types::RouteCarOptions).
    pub fn build(self) -> crate::types::RouteCarOptions {
        crate::types::RouteCarOptions {
            engine_type: self.engine_type,
            license_plate: self.license_plate,
            max_speed: self.max_speed,
            occupancy: self.occupancy,
        }
    }
}
