// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A leg is a section of a route from one waypoint to the next. A leg could be of type Vehicle, Pedestrian or Ferry. Legs of different types could occur together within a single route. For example, a car employing the use of a Ferry will contain Vehicle legs corresponding to journey on land, and Ferry legs corresponding to the journey via Ferry.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteLeg {
    /// <p>FerryLegDetails is populated when the Leg type is Ferry, and provides additional information that is specific</p>
    pub ferry_leg_details: ::std::option::Option<crate::types::RouteFerryLegDetails>,
    /// <p>Geometry of the area to be avoided.</p>
    pub geometry: ::std::option::Option<crate::types::RouteLegGeometry>,
    /// <p>List of languages for instructions within steps in the response.</p>
    pub language: ::std::option::Option<::std::string::String>,
    /// <p>Details related to the pedestrian leg.</p>
    pub pedestrian_leg_details: ::std::option::Option<crate::types::RoutePedestrianLegDetails>,
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub travel_mode: crate::types::RouteLegTravelMode,
    /// <p>Type of the leg.</p>
    pub r#type: crate::types::RouteLegType,
    /// <p>Details related to the vehicle leg.</p>
    pub vehicle_leg_details: ::std::option::Option<crate::types::RouteVehicleLegDetails>,
}
impl RouteLeg {
    /// <p>FerryLegDetails is populated when the Leg type is Ferry, and provides additional information that is specific</p>
    pub fn ferry_leg_details(&self) -> ::std::option::Option<&crate::types::RouteFerryLegDetails> {
        self.ferry_leg_details.as_ref()
    }
    /// <p>Geometry of the area to be avoided.</p>
    pub fn geometry(&self) -> ::std::option::Option<&crate::types::RouteLegGeometry> {
        self.geometry.as_ref()
    }
    /// <p>List of languages for instructions within steps in the response.</p>
    pub fn language(&self) -> ::std::option::Option<&str> {
        self.language.as_deref()
    }
    /// <p>Details related to the pedestrian leg.</p>
    pub fn pedestrian_leg_details(&self) -> ::std::option::Option<&crate::types::RoutePedestrianLegDetails> {
        self.pedestrian_leg_details.as_ref()
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn travel_mode(&self) -> &crate::types::RouteLegTravelMode {
        &self.travel_mode
    }
    /// <p>Type of the leg.</p>
    pub fn r#type(&self) -> &crate::types::RouteLegType {
        &self.r#type
    }
    /// <p>Details related to the vehicle leg.</p>
    pub fn vehicle_leg_details(&self) -> ::std::option::Option<&crate::types::RouteVehicleLegDetails> {
        self.vehicle_leg_details.as_ref()
    }
}
impl RouteLeg {
    /// Creates a new builder-style object to manufacture [`RouteLeg`](crate::types::RouteLeg).
    pub fn builder() -> crate::types::builders::RouteLegBuilder {
        crate::types::builders::RouteLegBuilder::default()
    }
}

/// A builder for [`RouteLeg`](crate::types::RouteLeg).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteLegBuilder {
    pub(crate) ferry_leg_details: ::std::option::Option<crate::types::RouteFerryLegDetails>,
    pub(crate) geometry: ::std::option::Option<crate::types::RouteLegGeometry>,
    pub(crate) language: ::std::option::Option<::std::string::String>,
    pub(crate) pedestrian_leg_details: ::std::option::Option<crate::types::RoutePedestrianLegDetails>,
    pub(crate) travel_mode: ::std::option::Option<crate::types::RouteLegTravelMode>,
    pub(crate) r#type: ::std::option::Option<crate::types::RouteLegType>,
    pub(crate) vehicle_leg_details: ::std::option::Option<crate::types::RouteVehicleLegDetails>,
}
impl RouteLegBuilder {
    /// <p>FerryLegDetails is populated when the Leg type is Ferry, and provides additional information that is specific</p>
    pub fn ferry_leg_details(mut self, input: crate::types::RouteFerryLegDetails) -> Self {
        self.ferry_leg_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>FerryLegDetails is populated when the Leg type is Ferry, and provides additional information that is specific</p>
    pub fn set_ferry_leg_details(mut self, input: ::std::option::Option<crate::types::RouteFerryLegDetails>) -> Self {
        self.ferry_leg_details = input;
        self
    }
    /// <p>FerryLegDetails is populated when the Leg type is Ferry, and provides additional information that is specific</p>
    pub fn get_ferry_leg_details(&self) -> &::std::option::Option<crate::types::RouteFerryLegDetails> {
        &self.ferry_leg_details
    }
    /// <p>Geometry of the area to be avoided.</p>
    /// This field is required.
    pub fn geometry(mut self, input: crate::types::RouteLegGeometry) -> Self {
        self.geometry = ::std::option::Option::Some(input);
        self
    }
    /// <p>Geometry of the area to be avoided.</p>
    pub fn set_geometry(mut self, input: ::std::option::Option<crate::types::RouteLegGeometry>) -> Self {
        self.geometry = input;
        self
    }
    /// <p>Geometry of the area to be avoided.</p>
    pub fn get_geometry(&self) -> &::std::option::Option<crate::types::RouteLegGeometry> {
        &self.geometry
    }
    /// <p>List of languages for instructions within steps in the response.</p>
    pub fn language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.language = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>List of languages for instructions within steps in the response.</p>
    pub fn set_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.language = input;
        self
    }
    /// <p>List of languages for instructions within steps in the response.</p>
    pub fn get_language(&self) -> &::std::option::Option<::std::string::String> {
        &self.language
    }
    /// <p>Details related to the pedestrian leg.</p>
    pub fn pedestrian_leg_details(mut self, input: crate::types::RoutePedestrianLegDetails) -> Self {
        self.pedestrian_leg_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details related to the pedestrian leg.</p>
    pub fn set_pedestrian_leg_details(mut self, input: ::std::option::Option<crate::types::RoutePedestrianLegDetails>) -> Self {
        self.pedestrian_leg_details = input;
        self
    }
    /// <p>Details related to the pedestrian leg.</p>
    pub fn get_pedestrian_leg_details(&self) -> &::std::option::Option<crate::types::RoutePedestrianLegDetails> {
        &self.pedestrian_leg_details
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    /// This field is required.
    pub fn travel_mode(mut self, input: crate::types::RouteLegTravelMode) -> Self {
        self.travel_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn set_travel_mode(mut self, input: ::std::option::Option<crate::types::RouteLegTravelMode>) -> Self {
        self.travel_mode = input;
        self
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn get_travel_mode(&self) -> &::std::option::Option<crate::types::RouteLegTravelMode> {
        &self.travel_mode
    }
    /// <p>Type of the leg.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::RouteLegType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of the leg.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RouteLegType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Type of the leg.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RouteLegType> {
        &self.r#type
    }
    /// <p>Details related to the vehicle leg.</p>
    pub fn vehicle_leg_details(mut self, input: crate::types::RouteVehicleLegDetails) -> Self {
        self.vehicle_leg_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details related to the vehicle leg.</p>
    pub fn set_vehicle_leg_details(mut self, input: ::std::option::Option<crate::types::RouteVehicleLegDetails>) -> Self {
        self.vehicle_leg_details = input;
        self
    }
    /// <p>Details related to the vehicle leg.</p>
    pub fn get_vehicle_leg_details(&self) -> &::std::option::Option<crate::types::RouteVehicleLegDetails> {
        &self.vehicle_leg_details
    }
    /// Consumes the builder and constructs a [`RouteLeg`](crate::types::RouteLeg).
    /// This method will fail if any of the following fields are not set:
    /// - [`travel_mode`](crate::types::builders::RouteLegBuilder::travel_mode)
    /// - [`r#type`](crate::types::builders::RouteLegBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::RouteLeg, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RouteLeg {
            ferry_leg_details: self.ferry_leg_details,
            geometry: self.geometry,
            language: self.language,
            pedestrian_leg_details: self.pedestrian_leg_details,
            travel_mode: self.travel_mode.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "travel_mode",
                    "travel_mode was not specified but it is required when building RouteLeg",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building RouteLeg",
                )
            })?,
            vehicle_leg_details: self.vehicle_leg_details,
        })
    }
}
