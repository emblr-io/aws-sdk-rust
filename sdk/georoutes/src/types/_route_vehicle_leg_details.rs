// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Steps of a leg that correspond to the travel portion of the leg.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteVehicleLegDetails {
    /// <p>Details corresponding to the arrival for the leg.</p>
    pub arrival: ::std::option::Option<crate::types::RouteVehicleArrival>,
    /// <p>Details corresponding to the departure for the leg.</p>
    pub departure: ::std::option::Option<crate::types::RouteVehicleDeparture>,
    /// <p>Incidents corresponding to this leg of the route.</p>
    pub incidents: ::std::vec::Vec<crate::types::RouteVehicleIncident>,
    /// <p>Notices are additional information returned that indicate issues that occurred during route calculation.</p>
    pub notices: ::std::vec::Vec<crate::types::RouteVehicleNotice>,
    /// <p>Waypoints that were passed through during the leg. This includes the waypoints that were configured with the PassThrough option.</p>
    pub pass_through_waypoints: ::std::vec::Vec<crate::types::RoutePassThroughWaypoint>,
    /// <p>Spans that were computed for the requested SpanAdditionalFeatures.</p>
    pub spans: ::std::vec::Vec<crate::types::RouteVehicleSpan>,
    /// <p>Summarized details of the leg.</p>
    pub summary: ::std::option::Option<crate::types::RouteVehicleSummary>,
    /// <p>Toll related options.</p>
    pub tolls: ::std::vec::Vec<crate::types::RouteToll>,
    /// <p>Toll systems are authorities that collect payments for the toll.</p>
    pub toll_systems: ::std::vec::Vec<crate::types::RouteTollSystem>,
    /// <p>Steps of a leg that must be performed before the travel portion of the leg.</p>
    pub travel_steps: ::std::vec::Vec<crate::types::RouteVehicleTravelStep>,
    /// <p>Truck road type identifiers. <code>BK1</code> through <code>BK4</code> apply only to Sweden. <code>A2,A4,B2,B4,C,D,ET2,ET4</code> apply only to Mexico.</p><note>
    /// <p>There are currently no other supported values as of 26th April 2024.</p>
    /// </note>
    pub truck_road_types: ::std::vec::Vec<::std::string::String>,
    /// <p>Zones corresponding to this leg of the route.</p>
    pub zones: ::std::vec::Vec<crate::types::RouteZone>,
}
impl RouteVehicleLegDetails {
    /// <p>Details corresponding to the arrival for the leg.</p>
    pub fn arrival(&self) -> ::std::option::Option<&crate::types::RouteVehicleArrival> {
        self.arrival.as_ref()
    }
    /// <p>Details corresponding to the departure for the leg.</p>
    pub fn departure(&self) -> ::std::option::Option<&crate::types::RouteVehicleDeparture> {
        self.departure.as_ref()
    }
    /// <p>Incidents corresponding to this leg of the route.</p>
    pub fn incidents(&self) -> &[crate::types::RouteVehicleIncident] {
        use std::ops::Deref;
        self.incidents.deref()
    }
    /// <p>Notices are additional information returned that indicate issues that occurred during route calculation.</p>
    pub fn notices(&self) -> &[crate::types::RouteVehicleNotice] {
        use std::ops::Deref;
        self.notices.deref()
    }
    /// <p>Waypoints that were passed through during the leg. This includes the waypoints that were configured with the PassThrough option.</p>
    pub fn pass_through_waypoints(&self) -> &[crate::types::RoutePassThroughWaypoint] {
        use std::ops::Deref;
        self.pass_through_waypoints.deref()
    }
    /// <p>Spans that were computed for the requested SpanAdditionalFeatures.</p>
    pub fn spans(&self) -> &[crate::types::RouteVehicleSpan] {
        use std::ops::Deref;
        self.spans.deref()
    }
    /// <p>Summarized details of the leg.</p>
    pub fn summary(&self) -> ::std::option::Option<&crate::types::RouteVehicleSummary> {
        self.summary.as_ref()
    }
    /// <p>Toll related options.</p>
    pub fn tolls(&self) -> &[crate::types::RouteToll] {
        use std::ops::Deref;
        self.tolls.deref()
    }
    /// <p>Toll systems are authorities that collect payments for the toll.</p>
    pub fn toll_systems(&self) -> &[crate::types::RouteTollSystem] {
        use std::ops::Deref;
        self.toll_systems.deref()
    }
    /// <p>Steps of a leg that must be performed before the travel portion of the leg.</p>
    pub fn travel_steps(&self) -> &[crate::types::RouteVehicleTravelStep] {
        use std::ops::Deref;
        self.travel_steps.deref()
    }
    /// <p>Truck road type identifiers. <code>BK1</code> through <code>BK4</code> apply only to Sweden. <code>A2,A4,B2,B4,C,D,ET2,ET4</code> apply only to Mexico.</p><note>
    /// <p>There are currently no other supported values as of 26th April 2024.</p>
    /// </note>
    pub fn truck_road_types(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.truck_road_types.deref()
    }
    /// <p>Zones corresponding to this leg of the route.</p>
    pub fn zones(&self) -> &[crate::types::RouteZone] {
        use std::ops::Deref;
        self.zones.deref()
    }
}
impl RouteVehicleLegDetails {
    /// Creates a new builder-style object to manufacture [`RouteVehicleLegDetails`](crate::types::RouteVehicleLegDetails).
    pub fn builder() -> crate::types::builders::RouteVehicleLegDetailsBuilder {
        crate::types::builders::RouteVehicleLegDetailsBuilder::default()
    }
}

/// A builder for [`RouteVehicleLegDetails`](crate::types::RouteVehicleLegDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteVehicleLegDetailsBuilder {
    pub(crate) arrival: ::std::option::Option<crate::types::RouteVehicleArrival>,
    pub(crate) departure: ::std::option::Option<crate::types::RouteVehicleDeparture>,
    pub(crate) incidents: ::std::option::Option<::std::vec::Vec<crate::types::RouteVehicleIncident>>,
    pub(crate) notices: ::std::option::Option<::std::vec::Vec<crate::types::RouteVehicleNotice>>,
    pub(crate) pass_through_waypoints: ::std::option::Option<::std::vec::Vec<crate::types::RoutePassThroughWaypoint>>,
    pub(crate) spans: ::std::option::Option<::std::vec::Vec<crate::types::RouteVehicleSpan>>,
    pub(crate) summary: ::std::option::Option<crate::types::RouteVehicleSummary>,
    pub(crate) tolls: ::std::option::Option<::std::vec::Vec<crate::types::RouteToll>>,
    pub(crate) toll_systems: ::std::option::Option<::std::vec::Vec<crate::types::RouteTollSystem>>,
    pub(crate) travel_steps: ::std::option::Option<::std::vec::Vec<crate::types::RouteVehicleTravelStep>>,
    pub(crate) truck_road_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) zones: ::std::option::Option<::std::vec::Vec<crate::types::RouteZone>>,
}
impl RouteVehicleLegDetailsBuilder {
    /// <p>Details corresponding to the arrival for the leg.</p>
    /// This field is required.
    pub fn arrival(mut self, input: crate::types::RouteVehicleArrival) -> Self {
        self.arrival = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details corresponding to the arrival for the leg.</p>
    pub fn set_arrival(mut self, input: ::std::option::Option<crate::types::RouteVehicleArrival>) -> Self {
        self.arrival = input;
        self
    }
    /// <p>Details corresponding to the arrival for the leg.</p>
    pub fn get_arrival(&self) -> &::std::option::Option<crate::types::RouteVehicleArrival> {
        &self.arrival
    }
    /// <p>Details corresponding to the departure for the leg.</p>
    /// This field is required.
    pub fn departure(mut self, input: crate::types::RouteVehicleDeparture) -> Self {
        self.departure = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details corresponding to the departure for the leg.</p>
    pub fn set_departure(mut self, input: ::std::option::Option<crate::types::RouteVehicleDeparture>) -> Self {
        self.departure = input;
        self
    }
    /// <p>Details corresponding to the departure for the leg.</p>
    pub fn get_departure(&self) -> &::std::option::Option<crate::types::RouteVehicleDeparture> {
        &self.departure
    }
    /// Appends an item to `incidents`.
    ///
    /// To override the contents of this collection use [`set_incidents`](Self::set_incidents).
    ///
    /// <p>Incidents corresponding to this leg of the route.</p>
    pub fn incidents(mut self, input: crate::types::RouteVehicleIncident) -> Self {
        let mut v = self.incidents.unwrap_or_default();
        v.push(input);
        self.incidents = ::std::option::Option::Some(v);
        self
    }
    /// <p>Incidents corresponding to this leg of the route.</p>
    pub fn set_incidents(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteVehicleIncident>>) -> Self {
        self.incidents = input;
        self
    }
    /// <p>Incidents corresponding to this leg of the route.</p>
    pub fn get_incidents(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteVehicleIncident>> {
        &self.incidents
    }
    /// Appends an item to `notices`.
    ///
    /// To override the contents of this collection use [`set_notices`](Self::set_notices).
    ///
    /// <p>Notices are additional information returned that indicate issues that occurred during route calculation.</p>
    pub fn notices(mut self, input: crate::types::RouteVehicleNotice) -> Self {
        let mut v = self.notices.unwrap_or_default();
        v.push(input);
        self.notices = ::std::option::Option::Some(v);
        self
    }
    /// <p>Notices are additional information returned that indicate issues that occurred during route calculation.</p>
    pub fn set_notices(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteVehicleNotice>>) -> Self {
        self.notices = input;
        self
    }
    /// <p>Notices are additional information returned that indicate issues that occurred during route calculation.</p>
    pub fn get_notices(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteVehicleNotice>> {
        &self.notices
    }
    /// Appends an item to `pass_through_waypoints`.
    ///
    /// To override the contents of this collection use [`set_pass_through_waypoints`](Self::set_pass_through_waypoints).
    ///
    /// <p>Waypoints that were passed through during the leg. This includes the waypoints that were configured with the PassThrough option.</p>
    pub fn pass_through_waypoints(mut self, input: crate::types::RoutePassThroughWaypoint) -> Self {
        let mut v = self.pass_through_waypoints.unwrap_or_default();
        v.push(input);
        self.pass_through_waypoints = ::std::option::Option::Some(v);
        self
    }
    /// <p>Waypoints that were passed through during the leg. This includes the waypoints that were configured with the PassThrough option.</p>
    pub fn set_pass_through_waypoints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RoutePassThroughWaypoint>>) -> Self {
        self.pass_through_waypoints = input;
        self
    }
    /// <p>Waypoints that were passed through during the leg. This includes the waypoints that were configured with the PassThrough option.</p>
    pub fn get_pass_through_waypoints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RoutePassThroughWaypoint>> {
        &self.pass_through_waypoints
    }
    /// Appends an item to `spans`.
    ///
    /// To override the contents of this collection use [`set_spans`](Self::set_spans).
    ///
    /// <p>Spans that were computed for the requested SpanAdditionalFeatures.</p>
    pub fn spans(mut self, input: crate::types::RouteVehicleSpan) -> Self {
        let mut v = self.spans.unwrap_or_default();
        v.push(input);
        self.spans = ::std::option::Option::Some(v);
        self
    }
    /// <p>Spans that were computed for the requested SpanAdditionalFeatures.</p>
    pub fn set_spans(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteVehicleSpan>>) -> Self {
        self.spans = input;
        self
    }
    /// <p>Spans that were computed for the requested SpanAdditionalFeatures.</p>
    pub fn get_spans(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteVehicleSpan>> {
        &self.spans
    }
    /// <p>Summarized details of the leg.</p>
    pub fn summary(mut self, input: crate::types::RouteVehicleSummary) -> Self {
        self.summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>Summarized details of the leg.</p>
    pub fn set_summary(mut self, input: ::std::option::Option<crate::types::RouteVehicleSummary>) -> Self {
        self.summary = input;
        self
    }
    /// <p>Summarized details of the leg.</p>
    pub fn get_summary(&self) -> &::std::option::Option<crate::types::RouteVehicleSummary> {
        &self.summary
    }
    /// Appends an item to `tolls`.
    ///
    /// To override the contents of this collection use [`set_tolls`](Self::set_tolls).
    ///
    /// <p>Toll related options.</p>
    pub fn tolls(mut self, input: crate::types::RouteToll) -> Self {
        let mut v = self.tolls.unwrap_or_default();
        v.push(input);
        self.tolls = ::std::option::Option::Some(v);
        self
    }
    /// <p>Toll related options.</p>
    pub fn set_tolls(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteToll>>) -> Self {
        self.tolls = input;
        self
    }
    /// <p>Toll related options.</p>
    pub fn get_tolls(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteToll>> {
        &self.tolls
    }
    /// Appends an item to `toll_systems`.
    ///
    /// To override the contents of this collection use [`set_toll_systems`](Self::set_toll_systems).
    ///
    /// <p>Toll systems are authorities that collect payments for the toll.</p>
    pub fn toll_systems(mut self, input: crate::types::RouteTollSystem) -> Self {
        let mut v = self.toll_systems.unwrap_or_default();
        v.push(input);
        self.toll_systems = ::std::option::Option::Some(v);
        self
    }
    /// <p>Toll systems are authorities that collect payments for the toll.</p>
    pub fn set_toll_systems(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteTollSystem>>) -> Self {
        self.toll_systems = input;
        self
    }
    /// <p>Toll systems are authorities that collect payments for the toll.</p>
    pub fn get_toll_systems(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteTollSystem>> {
        &self.toll_systems
    }
    /// Appends an item to `travel_steps`.
    ///
    /// To override the contents of this collection use [`set_travel_steps`](Self::set_travel_steps).
    ///
    /// <p>Steps of a leg that must be performed before the travel portion of the leg.</p>
    pub fn travel_steps(mut self, input: crate::types::RouteVehicleTravelStep) -> Self {
        let mut v = self.travel_steps.unwrap_or_default();
        v.push(input);
        self.travel_steps = ::std::option::Option::Some(v);
        self
    }
    /// <p>Steps of a leg that must be performed before the travel portion of the leg.</p>
    pub fn set_travel_steps(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteVehicleTravelStep>>) -> Self {
        self.travel_steps = input;
        self
    }
    /// <p>Steps of a leg that must be performed before the travel portion of the leg.</p>
    pub fn get_travel_steps(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteVehicleTravelStep>> {
        &self.travel_steps
    }
    /// Appends an item to `truck_road_types`.
    ///
    /// To override the contents of this collection use [`set_truck_road_types`](Self::set_truck_road_types).
    ///
    /// <p>Truck road type identifiers. <code>BK1</code> through <code>BK4</code> apply only to Sweden. <code>A2,A4,B2,B4,C,D,ET2,ET4</code> apply only to Mexico.</p><note>
    /// <p>There are currently no other supported values as of 26th April 2024.</p>
    /// </note>
    pub fn truck_road_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.truck_road_types.unwrap_or_default();
        v.push(input.into());
        self.truck_road_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>Truck road type identifiers. <code>BK1</code> through <code>BK4</code> apply only to Sweden. <code>A2,A4,B2,B4,C,D,ET2,ET4</code> apply only to Mexico.</p><note>
    /// <p>There are currently no other supported values as of 26th April 2024.</p>
    /// </note>
    pub fn set_truck_road_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.truck_road_types = input;
        self
    }
    /// <p>Truck road type identifiers. <code>BK1</code> through <code>BK4</code> apply only to Sweden. <code>A2,A4,B2,B4,C,D,ET2,ET4</code> apply only to Mexico.</p><note>
    /// <p>There are currently no other supported values as of 26th April 2024.</p>
    /// </note>
    pub fn get_truck_road_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.truck_road_types
    }
    /// Appends an item to `zones`.
    ///
    /// To override the contents of this collection use [`set_zones`](Self::set_zones).
    ///
    /// <p>Zones corresponding to this leg of the route.</p>
    pub fn zones(mut self, input: crate::types::RouteZone) -> Self {
        let mut v = self.zones.unwrap_or_default();
        v.push(input);
        self.zones = ::std::option::Option::Some(v);
        self
    }
    /// <p>Zones corresponding to this leg of the route.</p>
    pub fn set_zones(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteZone>>) -> Self {
        self.zones = input;
        self
    }
    /// <p>Zones corresponding to this leg of the route.</p>
    pub fn get_zones(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteZone>> {
        &self.zones
    }
    /// Consumes the builder and constructs a [`RouteVehicleLegDetails`](crate::types::RouteVehicleLegDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`incidents`](crate::types::builders::RouteVehicleLegDetailsBuilder::incidents)
    /// - [`notices`](crate::types::builders::RouteVehicleLegDetailsBuilder::notices)
    /// - [`pass_through_waypoints`](crate::types::builders::RouteVehicleLegDetailsBuilder::pass_through_waypoints)
    /// - [`spans`](crate::types::builders::RouteVehicleLegDetailsBuilder::spans)
    /// - [`tolls`](crate::types::builders::RouteVehicleLegDetailsBuilder::tolls)
    /// - [`toll_systems`](crate::types::builders::RouteVehicleLegDetailsBuilder::toll_systems)
    /// - [`travel_steps`](crate::types::builders::RouteVehicleLegDetailsBuilder::travel_steps)
    /// - [`truck_road_types`](crate::types::builders::RouteVehicleLegDetailsBuilder::truck_road_types)
    /// - [`zones`](crate::types::builders::RouteVehicleLegDetailsBuilder::zones)
    pub fn build(self) -> ::std::result::Result<crate::types::RouteVehicleLegDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RouteVehicleLegDetails {
            arrival: self.arrival,
            departure: self.departure,
            incidents: self.incidents.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "incidents",
                    "incidents was not specified but it is required when building RouteVehicleLegDetails",
                )
            })?,
            notices: self.notices.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "notices",
                    "notices was not specified but it is required when building RouteVehicleLegDetails",
                )
            })?,
            pass_through_waypoints: self.pass_through_waypoints.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "pass_through_waypoints",
                    "pass_through_waypoints was not specified but it is required when building RouteVehicleLegDetails",
                )
            })?,
            spans: self.spans.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "spans",
                    "spans was not specified but it is required when building RouteVehicleLegDetails",
                )
            })?,
            summary: self.summary,
            tolls: self.tolls.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "tolls",
                    "tolls was not specified but it is required when building RouteVehicleLegDetails",
                )
            })?,
            toll_systems: self.toll_systems.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "toll_systems",
                    "toll_systems was not specified but it is required when building RouteVehicleLegDetails",
                )
            })?,
            travel_steps: self.travel_steps.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "travel_steps",
                    "travel_steps was not specified but it is required when building RouteVehicleLegDetails",
                )
            })?,
            truck_road_types: self.truck_road_types.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "truck_road_types",
                    "truck_road_types was not specified but it is required when building RouteVehicleLegDetails",
                )
            })?,
            zones: self.zones.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "zones",
                    "zones was not specified but it is required when building RouteVehicleLegDetails",
                )
            })?,
        })
    }
}
