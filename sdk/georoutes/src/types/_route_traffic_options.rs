// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Traffic options for the route.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteTrafficOptions {
    /// <p>Duration for which flow traffic is considered valid. For this period, the flow traffic is used over historical traffic data. Flow traffic refers to congestion, which changes very quickly. Duration in seconds for which flow traffic event would be considered valid. While flow traffic event is valid it will be used over the historical traffic data.</p>
    pub flow_event_threshold_override: i64,
    /// <p>Determines if traffic should be used or ignored while calculating the route.</p>
    /// <p>Default Value: <code>UseTrafficData</code></p>
    pub usage: ::std::option::Option<crate::types::TrafficUsage>,
}
impl RouteTrafficOptions {
    /// <p>Duration for which flow traffic is considered valid. For this period, the flow traffic is used over historical traffic data. Flow traffic refers to congestion, which changes very quickly. Duration in seconds for which flow traffic event would be considered valid. While flow traffic event is valid it will be used over the historical traffic data.</p>
    pub fn flow_event_threshold_override(&self) -> i64 {
        self.flow_event_threshold_override
    }
    /// <p>Determines if traffic should be used or ignored while calculating the route.</p>
    /// <p>Default Value: <code>UseTrafficData</code></p>
    pub fn usage(&self) -> ::std::option::Option<&crate::types::TrafficUsage> {
        self.usage.as_ref()
    }
}
impl RouteTrafficOptions {
    /// Creates a new builder-style object to manufacture [`RouteTrafficOptions`](crate::types::RouteTrafficOptions).
    pub fn builder() -> crate::types::builders::RouteTrafficOptionsBuilder {
        crate::types::builders::RouteTrafficOptionsBuilder::default()
    }
}

/// A builder for [`RouteTrafficOptions`](crate::types::RouteTrafficOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteTrafficOptionsBuilder {
    pub(crate) flow_event_threshold_override: ::std::option::Option<i64>,
    pub(crate) usage: ::std::option::Option<crate::types::TrafficUsage>,
}
impl RouteTrafficOptionsBuilder {
    /// <p>Duration for which flow traffic is considered valid. For this period, the flow traffic is used over historical traffic data. Flow traffic refers to congestion, which changes very quickly. Duration in seconds for which flow traffic event would be considered valid. While flow traffic event is valid it will be used over the historical traffic data.</p>
    pub fn flow_event_threshold_override(mut self, input: i64) -> Self {
        self.flow_event_threshold_override = ::std::option::Option::Some(input);
        self
    }
    /// <p>Duration for which flow traffic is considered valid. For this period, the flow traffic is used over historical traffic data. Flow traffic refers to congestion, which changes very quickly. Duration in seconds for which flow traffic event would be considered valid. While flow traffic event is valid it will be used over the historical traffic data.</p>
    pub fn set_flow_event_threshold_override(mut self, input: ::std::option::Option<i64>) -> Self {
        self.flow_event_threshold_override = input;
        self
    }
    /// <p>Duration for which flow traffic is considered valid. For this period, the flow traffic is used over historical traffic data. Flow traffic refers to congestion, which changes very quickly. Duration in seconds for which flow traffic event would be considered valid. While flow traffic event is valid it will be used over the historical traffic data.</p>
    pub fn get_flow_event_threshold_override(&self) -> &::std::option::Option<i64> {
        &self.flow_event_threshold_override
    }
    /// <p>Determines if traffic should be used or ignored while calculating the route.</p>
    /// <p>Default Value: <code>UseTrafficData</code></p>
    pub fn usage(mut self, input: crate::types::TrafficUsage) -> Self {
        self.usage = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines if traffic should be used or ignored while calculating the route.</p>
    /// <p>Default Value: <code>UseTrafficData</code></p>
    pub fn set_usage(mut self, input: ::std::option::Option<crate::types::TrafficUsage>) -> Self {
        self.usage = input;
        self
    }
    /// <p>Determines if traffic should be used or ignored while calculating the route.</p>
    /// <p>Default Value: <code>UseTrafficData</code></p>
    pub fn get_usage(&self) -> &::std::option::Option<crate::types::TrafficUsage> {
        &self.usage
    }
    /// Consumes the builder and constructs a [`RouteTrafficOptions`](crate::types::RouteTrafficOptions).
    pub fn build(self) -> crate::types::RouteTrafficOptions {
        crate::types::RouteTrafficOptions {
            flow_event_threshold_override: self.flow_event_threshold_override.unwrap_or_default(),
            usage: self.usage,
        }
    }
}
