// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Geometry of the routing boundary.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RouteMatrixBoundaryGeometry {
    /// <p>Provides the circle that was used while calculating the route.</p>
    pub auto_circle: ::std::option::Option<crate::types::RouteMatrixAutoCircle>,
    /// <p>Geometry defined as a circle. When request routing boundary was set as <code>AutoCircle</code>, the response routing boundary will return <code>Circle</code> derived from the <code>AutoCircle</code> settings.</p>
    pub circle: ::std::option::Option<crate::types::Circle>,
    /// <p>Geometry defined as a bounding box. The first pair represents the X and Y coordinates (longitude and latitude,) of the southwest corner of the bounding box; the second pair represents the X and Y coordinates (longitude and latitude) of the northeast corner.</p>
    pub bounding_box: ::std::option::Option<::std::vec::Vec<f64>>,
    /// <p>Geometry defined as a polygon with only one linear ring.</p>
    pub polygon: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<f64>>>>,
}
impl RouteMatrixBoundaryGeometry {
    /// <p>Provides the circle that was used while calculating the route.</p>
    pub fn auto_circle(&self) -> ::std::option::Option<&crate::types::RouteMatrixAutoCircle> {
        self.auto_circle.as_ref()
    }
    /// <p>Geometry defined as a circle. When request routing boundary was set as <code>AutoCircle</code>, the response routing boundary will return <code>Circle</code> derived from the <code>AutoCircle</code> settings.</p>
    pub fn circle(&self) -> ::std::option::Option<&crate::types::Circle> {
        self.circle.as_ref()
    }
    /// <p>Geometry defined as a bounding box. The first pair represents the X and Y coordinates (longitude and latitude,) of the southwest corner of the bounding box; the second pair represents the X and Y coordinates (longitude and latitude) of the northeast corner.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.bounding_box.is_none()`.
    pub fn bounding_box(&self) -> &[f64] {
        self.bounding_box.as_deref().unwrap_or_default()
    }
    /// <p>Geometry defined as a polygon with only one linear ring.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.polygon.is_none()`.
    pub fn polygon(&self) -> &[::std::vec::Vec<::std::vec::Vec<f64>>] {
        self.polygon.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for RouteMatrixBoundaryGeometry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RouteMatrixBoundaryGeometry");
        formatter.field("auto_circle", &self.auto_circle);
        formatter.field("circle", &"*** Sensitive Data Redacted ***");
        formatter.field("bounding_box", &"*** Sensitive Data Redacted ***");
        formatter.field("polygon", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RouteMatrixBoundaryGeometry {
    /// Creates a new builder-style object to manufacture [`RouteMatrixBoundaryGeometry`](crate::types::RouteMatrixBoundaryGeometry).
    pub fn builder() -> crate::types::builders::RouteMatrixBoundaryGeometryBuilder {
        crate::types::builders::RouteMatrixBoundaryGeometryBuilder::default()
    }
}

/// A builder for [`RouteMatrixBoundaryGeometry`](crate::types::RouteMatrixBoundaryGeometry).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RouteMatrixBoundaryGeometryBuilder {
    pub(crate) auto_circle: ::std::option::Option<crate::types::RouteMatrixAutoCircle>,
    pub(crate) circle: ::std::option::Option<crate::types::Circle>,
    pub(crate) bounding_box: ::std::option::Option<::std::vec::Vec<f64>>,
    pub(crate) polygon: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<f64>>>>,
}
impl RouteMatrixBoundaryGeometryBuilder {
    /// <p>Provides the circle that was used while calculating the route.</p>
    pub fn auto_circle(mut self, input: crate::types::RouteMatrixAutoCircle) -> Self {
        self.auto_circle = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides the circle that was used while calculating the route.</p>
    pub fn set_auto_circle(mut self, input: ::std::option::Option<crate::types::RouteMatrixAutoCircle>) -> Self {
        self.auto_circle = input;
        self
    }
    /// <p>Provides the circle that was used while calculating the route.</p>
    pub fn get_auto_circle(&self) -> &::std::option::Option<crate::types::RouteMatrixAutoCircle> {
        &self.auto_circle
    }
    /// <p>Geometry defined as a circle. When request routing boundary was set as <code>AutoCircle</code>, the response routing boundary will return <code>Circle</code> derived from the <code>AutoCircle</code> settings.</p>
    pub fn circle(mut self, input: crate::types::Circle) -> Self {
        self.circle = ::std::option::Option::Some(input);
        self
    }
    /// <p>Geometry defined as a circle. When request routing boundary was set as <code>AutoCircle</code>, the response routing boundary will return <code>Circle</code> derived from the <code>AutoCircle</code> settings.</p>
    pub fn set_circle(mut self, input: ::std::option::Option<crate::types::Circle>) -> Self {
        self.circle = input;
        self
    }
    /// <p>Geometry defined as a circle. When request routing boundary was set as <code>AutoCircle</code>, the response routing boundary will return <code>Circle</code> derived from the <code>AutoCircle</code> settings.</p>
    pub fn get_circle(&self) -> &::std::option::Option<crate::types::Circle> {
        &self.circle
    }
    /// Appends an item to `bounding_box`.
    ///
    /// To override the contents of this collection use [`set_bounding_box`](Self::set_bounding_box).
    ///
    /// <p>Geometry defined as a bounding box. The first pair represents the X and Y coordinates (longitude and latitude,) of the southwest corner of the bounding box; the second pair represents the X and Y coordinates (longitude and latitude) of the northeast corner.</p>
    pub fn bounding_box(mut self, input: f64) -> Self {
        let mut v = self.bounding_box.unwrap_or_default();
        v.push(input);
        self.bounding_box = ::std::option::Option::Some(v);
        self
    }
    /// <p>Geometry defined as a bounding box. The first pair represents the X and Y coordinates (longitude and latitude,) of the southwest corner of the bounding box; the second pair represents the X and Y coordinates (longitude and latitude) of the northeast corner.</p>
    pub fn set_bounding_box(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.bounding_box = input;
        self
    }
    /// <p>Geometry defined as a bounding box. The first pair represents the X and Y coordinates (longitude and latitude,) of the southwest corner of the bounding box; the second pair represents the X and Y coordinates (longitude and latitude) of the northeast corner.</p>
    pub fn get_bounding_box(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.bounding_box
    }
    /// Appends an item to `polygon`.
    ///
    /// To override the contents of this collection use [`set_polygon`](Self::set_polygon).
    ///
    /// <p>Geometry defined as a polygon with only one linear ring.</p>
    pub fn polygon(mut self, input: ::std::vec::Vec<::std::vec::Vec<f64>>) -> Self {
        let mut v = self.polygon.unwrap_or_default();
        v.push(input);
        self.polygon = ::std::option::Option::Some(v);
        self
    }
    /// <p>Geometry defined as a polygon with only one linear ring.</p>
    pub fn set_polygon(mut self, input: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<f64>>>>) -> Self {
        self.polygon = input;
        self
    }
    /// <p>Geometry defined as a polygon with only one linear ring.</p>
    pub fn get_polygon(&self) -> &::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<f64>>>> {
        &self.polygon
    }
    /// Consumes the builder and constructs a [`RouteMatrixBoundaryGeometry`](crate::types::RouteMatrixBoundaryGeometry).
    pub fn build(self) -> crate::types::RouteMatrixBoundaryGeometry {
        crate::types::RouteMatrixBoundaryGeometry {
            auto_circle: self.auto_circle,
            circle: self.circle,
            bounding_box: self.bounding_box,
            polygon: self.polygon,
        }
    }
}
impl ::std::fmt::Debug for RouteMatrixBoundaryGeometryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RouteMatrixBoundaryGeometryBuilder");
        formatter.field("auto_circle", &self.auto_circle);
        formatter.field("circle", &"*** Sensitive Data Redacted ***");
        formatter.field("bounding_box", &"*** Sensitive Data Redacted ***");
        formatter.field("polygon", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
