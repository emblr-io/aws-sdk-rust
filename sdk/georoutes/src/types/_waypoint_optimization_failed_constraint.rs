// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The failed constraint.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WaypointOptimizationFailedConstraint {
    /// <p>The failed constraint.</p>
    pub constraint: ::std::option::Option<crate::types::WaypointOptimizationConstraint>,
    /// <p>Reason for the failed constraint.</p>
    pub reason: ::std::option::Option<::std::string::String>,
}
impl WaypointOptimizationFailedConstraint {
    /// <p>The failed constraint.</p>
    pub fn constraint(&self) -> ::std::option::Option<&crate::types::WaypointOptimizationConstraint> {
        self.constraint.as_ref()
    }
    /// <p>Reason for the failed constraint.</p>
    pub fn reason(&self) -> ::std::option::Option<&str> {
        self.reason.as_deref()
    }
}
impl WaypointOptimizationFailedConstraint {
    /// Creates a new builder-style object to manufacture [`WaypointOptimizationFailedConstraint`](crate::types::WaypointOptimizationFailedConstraint).
    pub fn builder() -> crate::types::builders::WaypointOptimizationFailedConstraintBuilder {
        crate::types::builders::WaypointOptimizationFailedConstraintBuilder::default()
    }
}

/// A builder for [`WaypointOptimizationFailedConstraint`](crate::types::WaypointOptimizationFailedConstraint).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WaypointOptimizationFailedConstraintBuilder {
    pub(crate) constraint: ::std::option::Option<crate::types::WaypointOptimizationConstraint>,
    pub(crate) reason: ::std::option::Option<::std::string::String>,
}
impl WaypointOptimizationFailedConstraintBuilder {
    /// <p>The failed constraint.</p>
    pub fn constraint(mut self, input: crate::types::WaypointOptimizationConstraint) -> Self {
        self.constraint = ::std::option::Option::Some(input);
        self
    }
    /// <p>The failed constraint.</p>
    pub fn set_constraint(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationConstraint>) -> Self {
        self.constraint = input;
        self
    }
    /// <p>The failed constraint.</p>
    pub fn get_constraint(&self) -> &::std::option::Option<crate::types::WaypointOptimizationConstraint> {
        &self.constraint
    }
    /// <p>Reason for the failed constraint.</p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Reason for the failed constraint.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>Reason for the failed constraint.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// Consumes the builder and constructs a [`WaypointOptimizationFailedConstraint`](crate::types::WaypointOptimizationFailedConstraint).
    pub fn build(self) -> crate::types::WaypointOptimizationFailedConstraint {
        crate::types::WaypointOptimizationFailedConstraint {
            constraint: self.constraint,
            reason: self.reason,
        }
    }
}
