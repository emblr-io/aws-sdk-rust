// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details related to the turn step.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteTurnStepDetails {
    /// <p>Name of the intersection, if applicable to the step.</p>
    pub intersection: ::std::vec::Vec<crate::types::LocalizedString>,
    /// <p>Steering direction for the step.</p>
    pub steering_direction: ::std::option::Option<crate::types::RouteSteeringDirection>,
    /// <p>Angle of the turn.</p>
    pub turn_angle: f64,
    /// <p>Intensity of the turn.</p>
    pub turn_intensity: ::std::option::Option<crate::types::RouteTurnIntensity>,
}
impl RouteTurnStepDetails {
    /// <p>Name of the intersection, if applicable to the step.</p>
    pub fn intersection(&self) -> &[crate::types::LocalizedString] {
        use std::ops::Deref;
        self.intersection.deref()
    }
    /// <p>Steering direction for the step.</p>
    pub fn steering_direction(&self) -> ::std::option::Option<&crate::types::RouteSteeringDirection> {
        self.steering_direction.as_ref()
    }
    /// <p>Angle of the turn.</p>
    pub fn turn_angle(&self) -> f64 {
        self.turn_angle
    }
    /// <p>Intensity of the turn.</p>
    pub fn turn_intensity(&self) -> ::std::option::Option<&crate::types::RouteTurnIntensity> {
        self.turn_intensity.as_ref()
    }
}
impl RouteTurnStepDetails {
    /// Creates a new builder-style object to manufacture [`RouteTurnStepDetails`](crate::types::RouteTurnStepDetails).
    pub fn builder() -> crate::types::builders::RouteTurnStepDetailsBuilder {
        crate::types::builders::RouteTurnStepDetailsBuilder::default()
    }
}

/// A builder for [`RouteTurnStepDetails`](crate::types::RouteTurnStepDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteTurnStepDetailsBuilder {
    pub(crate) intersection: ::std::option::Option<::std::vec::Vec<crate::types::LocalizedString>>,
    pub(crate) steering_direction: ::std::option::Option<crate::types::RouteSteeringDirection>,
    pub(crate) turn_angle: ::std::option::Option<f64>,
    pub(crate) turn_intensity: ::std::option::Option<crate::types::RouteTurnIntensity>,
}
impl RouteTurnStepDetailsBuilder {
    /// Appends an item to `intersection`.
    ///
    /// To override the contents of this collection use [`set_intersection`](Self::set_intersection).
    ///
    /// <p>Name of the intersection, if applicable to the step.</p>
    pub fn intersection(mut self, input: crate::types::LocalizedString) -> Self {
        let mut v = self.intersection.unwrap_or_default();
        v.push(input);
        self.intersection = ::std::option::Option::Some(v);
        self
    }
    /// <p>Name of the intersection, if applicable to the step.</p>
    pub fn set_intersection(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LocalizedString>>) -> Self {
        self.intersection = input;
        self
    }
    /// <p>Name of the intersection, if applicable to the step.</p>
    pub fn get_intersection(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LocalizedString>> {
        &self.intersection
    }
    /// <p>Steering direction for the step.</p>
    pub fn steering_direction(mut self, input: crate::types::RouteSteeringDirection) -> Self {
        self.steering_direction = ::std::option::Option::Some(input);
        self
    }
    /// <p>Steering direction for the step.</p>
    pub fn set_steering_direction(mut self, input: ::std::option::Option<crate::types::RouteSteeringDirection>) -> Self {
        self.steering_direction = input;
        self
    }
    /// <p>Steering direction for the step.</p>
    pub fn get_steering_direction(&self) -> &::std::option::Option<crate::types::RouteSteeringDirection> {
        &self.steering_direction
    }
    /// <p>Angle of the turn.</p>
    pub fn turn_angle(mut self, input: f64) -> Self {
        self.turn_angle = ::std::option::Option::Some(input);
        self
    }
    /// <p>Angle of the turn.</p>
    pub fn set_turn_angle(mut self, input: ::std::option::Option<f64>) -> Self {
        self.turn_angle = input;
        self
    }
    /// <p>Angle of the turn.</p>
    pub fn get_turn_angle(&self) -> &::std::option::Option<f64> {
        &self.turn_angle
    }
    /// <p>Intensity of the turn.</p>
    pub fn turn_intensity(mut self, input: crate::types::RouteTurnIntensity) -> Self {
        self.turn_intensity = ::std::option::Option::Some(input);
        self
    }
    /// <p>Intensity of the turn.</p>
    pub fn set_turn_intensity(mut self, input: ::std::option::Option<crate::types::RouteTurnIntensity>) -> Self {
        self.turn_intensity = input;
        self
    }
    /// <p>Intensity of the turn.</p>
    pub fn get_turn_intensity(&self) -> &::std::option::Option<crate::types::RouteTurnIntensity> {
        &self.turn_intensity
    }
    /// Consumes the builder and constructs a [`RouteTurnStepDetails`](crate::types::RouteTurnStepDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`intersection`](crate::types::builders::RouteTurnStepDetailsBuilder::intersection)
    pub fn build(self) -> ::std::result::Result<crate::types::RouteTurnStepDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RouteTurnStepDetails {
            intersection: self.intersection.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "intersection",
                    "intersection was not specified but it is required when building RouteTurnStepDetails",
                )
            })?,
            steering_direction: self.steering_direction,
            turn_angle: self.turn_angle.unwrap_or_default(),
            turn_intensity: self.turn_intensity,
        })
    }
}
