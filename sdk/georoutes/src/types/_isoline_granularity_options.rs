// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Isoline granularity related options.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IsolineGranularityOptions {
    /// <p>Maximum number of points of returned Isoline.</p>
    pub max_points: ::std::option::Option<i32>,
    /// <p>Maximum resolution of the returned isoline.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    pub max_resolution: i64,
}
impl IsolineGranularityOptions {
    /// <p>Maximum number of points of returned Isoline.</p>
    pub fn max_points(&self) -> ::std::option::Option<i32> {
        self.max_points
    }
    /// <p>Maximum resolution of the returned isoline.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    pub fn max_resolution(&self) -> i64 {
        self.max_resolution
    }
}
impl IsolineGranularityOptions {
    /// Creates a new builder-style object to manufacture [`IsolineGranularityOptions`](crate::types::IsolineGranularityOptions).
    pub fn builder() -> crate::types::builders::IsolineGranularityOptionsBuilder {
        crate::types::builders::IsolineGranularityOptionsBuilder::default()
    }
}

/// A builder for [`IsolineGranularityOptions`](crate::types::IsolineGranularityOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IsolineGranularityOptionsBuilder {
    pub(crate) max_points: ::std::option::Option<i32>,
    pub(crate) max_resolution: ::std::option::Option<i64>,
}
impl IsolineGranularityOptionsBuilder {
    /// <p>Maximum number of points of returned Isoline.</p>
    pub fn max_points(mut self, input: i32) -> Self {
        self.max_points = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maximum number of points of returned Isoline.</p>
    pub fn set_max_points(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_points = input;
        self
    }
    /// <p>Maximum number of points of returned Isoline.</p>
    pub fn get_max_points(&self) -> &::std::option::Option<i32> {
        &self.max_points
    }
    /// <p>Maximum resolution of the returned isoline.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    pub fn max_resolution(mut self, input: i64) -> Self {
        self.max_resolution = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maximum resolution of the returned isoline.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    pub fn set_max_resolution(mut self, input: ::std::option::Option<i64>) -> Self {
        self.max_resolution = input;
        self
    }
    /// <p>Maximum resolution of the returned isoline.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    pub fn get_max_resolution(&self) -> &::std::option::Option<i64> {
        &self.max_resolution
    }
    /// Consumes the builder and constructs a [`IsolineGranularityOptions`](crate::types::IsolineGranularityOptions).
    pub fn build(self) -> crate::types::IsolineGranularityOptions {
        crate::types::IsolineGranularityOptions {
            max_points: self.max_points,
            max_resolution: self.max_resolution.unwrap_or_default(),
        }
    }
}
