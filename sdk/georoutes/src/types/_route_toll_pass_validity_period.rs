// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Period for which the pass is valid.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteTollPassValidityPeriod {
    /// <p>Validity period.</p>
    pub period: crate::types::RouteTollPassValidityPeriodType,
    /// <p>Counts for the validity period.</p>
    pub period_count: ::std::option::Option<i32>,
}
impl RouteTollPassValidityPeriod {
    /// <p>Validity period.</p>
    pub fn period(&self) -> &crate::types::RouteTollPassValidityPeriodType {
        &self.period
    }
    /// <p>Counts for the validity period.</p>
    pub fn period_count(&self) -> ::std::option::Option<i32> {
        self.period_count
    }
}
impl RouteTollPassValidityPeriod {
    /// Creates a new builder-style object to manufacture [`RouteTollPassValidityPeriod`](crate::types::RouteTollPassValidityPeriod).
    pub fn builder() -> crate::types::builders::RouteTollPassValidityPeriodBuilder {
        crate::types::builders::RouteTollPassValidityPeriodBuilder::default()
    }
}

/// A builder for [`RouteTollPassValidityPeriod`](crate::types::RouteTollPassValidityPeriod).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteTollPassValidityPeriodBuilder {
    pub(crate) period: ::std::option::Option<crate::types::RouteTollPassValidityPeriodType>,
    pub(crate) period_count: ::std::option::Option<i32>,
}
impl RouteTollPassValidityPeriodBuilder {
    /// <p>Validity period.</p>
    /// This field is required.
    pub fn period(mut self, input: crate::types::RouteTollPassValidityPeriodType) -> Self {
        self.period = ::std::option::Option::Some(input);
        self
    }
    /// <p>Validity period.</p>
    pub fn set_period(mut self, input: ::std::option::Option<crate::types::RouteTollPassValidityPeriodType>) -> Self {
        self.period = input;
        self
    }
    /// <p>Validity period.</p>
    pub fn get_period(&self) -> &::std::option::Option<crate::types::RouteTollPassValidityPeriodType> {
        &self.period
    }
    /// <p>Counts for the validity period.</p>
    pub fn period_count(mut self, input: i32) -> Self {
        self.period_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Counts for the validity period.</p>
    pub fn set_period_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.period_count = input;
        self
    }
    /// <p>Counts for the validity period.</p>
    pub fn get_period_count(&self) -> &::std::option::Option<i32> {
        &self.period_count
    }
    /// Consumes the builder and constructs a [`RouteTollPassValidityPeriod`](crate::types::RouteTollPassValidityPeriod).
    /// This method will fail if any of the following fields are not set:
    /// - [`period`](crate::types::builders::RouteTollPassValidityPeriodBuilder::period)
    pub fn build(self) -> ::std::result::Result<crate::types::RouteTollPassValidityPeriod, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RouteTollPassValidityPeriod {
            period: self.period.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "period",
                    "period was not specified but it is required when building RouteTollPassValidityPeriod",
                )
            })?,
            period_count: self.period_count,
        })
    }
}
