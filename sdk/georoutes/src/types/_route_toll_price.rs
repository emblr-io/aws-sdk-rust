// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The toll price.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteTollPrice {
    /// <p>Currency code corresponding to the price. This is the same as Currency specified in the request.</p>
    pub currency: ::std::string::String,
    /// <p>If the price is an estimate or an exact value.</p>
    pub estimate: bool,
    /// <p>Duration for which the price corresponds to.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub per_duration: i64,
    /// <p>If the price is a range or an exact value. If any of the toll fares making up the route is a range, the overall price is also a range.</p>
    pub range: bool,
    /// <p>Price range with a minimum and maximum value, if a range.</p>
    pub range_value: ::std::option::Option<crate::types::RouteTollPriceValueRange>,
    /// <p>Exact price, if not a range.</p>
    pub value: f64,
}
impl RouteTollPrice {
    /// <p>Currency code corresponding to the price. This is the same as Currency specified in the request.</p>
    pub fn currency(&self) -> &str {
        use std::ops::Deref;
        self.currency.deref()
    }
    /// <p>If the price is an estimate or an exact value.</p>
    pub fn estimate(&self) -> bool {
        self.estimate
    }
    /// <p>Duration for which the price corresponds to.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn per_duration(&self) -> i64 {
        self.per_duration
    }
    /// <p>If the price is a range or an exact value. If any of the toll fares making up the route is a range, the overall price is also a range.</p>
    pub fn range(&self) -> bool {
        self.range
    }
    /// <p>Price range with a minimum and maximum value, if a range.</p>
    pub fn range_value(&self) -> ::std::option::Option<&crate::types::RouteTollPriceValueRange> {
        self.range_value.as_ref()
    }
    /// <p>Exact price, if not a range.</p>
    pub fn value(&self) -> f64 {
        self.value
    }
}
impl RouteTollPrice {
    /// Creates a new builder-style object to manufacture [`RouteTollPrice`](crate::types::RouteTollPrice).
    pub fn builder() -> crate::types::builders::RouteTollPriceBuilder {
        crate::types::builders::RouteTollPriceBuilder::default()
    }
}

/// A builder for [`RouteTollPrice`](crate::types::RouteTollPrice).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteTollPriceBuilder {
    pub(crate) currency: ::std::option::Option<::std::string::String>,
    pub(crate) estimate: ::std::option::Option<bool>,
    pub(crate) per_duration: ::std::option::Option<i64>,
    pub(crate) range: ::std::option::Option<bool>,
    pub(crate) range_value: ::std::option::Option<crate::types::RouteTollPriceValueRange>,
    pub(crate) value: ::std::option::Option<f64>,
}
impl RouteTollPriceBuilder {
    /// <p>Currency code corresponding to the price. This is the same as Currency specified in the request.</p>
    /// This field is required.
    pub fn currency(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.currency = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Currency code corresponding to the price. This is the same as Currency specified in the request.</p>
    pub fn set_currency(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.currency = input;
        self
    }
    /// <p>Currency code corresponding to the price. This is the same as Currency specified in the request.</p>
    pub fn get_currency(&self) -> &::std::option::Option<::std::string::String> {
        &self.currency
    }
    /// <p>If the price is an estimate or an exact value.</p>
    /// This field is required.
    pub fn estimate(mut self, input: bool) -> Self {
        self.estimate = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the price is an estimate or an exact value.</p>
    pub fn set_estimate(mut self, input: ::std::option::Option<bool>) -> Self {
        self.estimate = input;
        self
    }
    /// <p>If the price is an estimate or an exact value.</p>
    pub fn get_estimate(&self) -> &::std::option::Option<bool> {
        &self.estimate
    }
    /// <p>Duration for which the price corresponds to.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn per_duration(mut self, input: i64) -> Self {
        self.per_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Duration for which the price corresponds to.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn set_per_duration(mut self, input: ::std::option::Option<i64>) -> Self {
        self.per_duration = input;
        self
    }
    /// <p>Duration for which the price corresponds to.</p>
    /// <p><b>Unit</b>: <code>seconds</code></p>
    pub fn get_per_duration(&self) -> &::std::option::Option<i64> {
        &self.per_duration
    }
    /// <p>If the price is a range or an exact value. If any of the toll fares making up the route is a range, the overall price is also a range.</p>
    /// This field is required.
    pub fn range(mut self, input: bool) -> Self {
        self.range = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the price is a range or an exact value. If any of the toll fares making up the route is a range, the overall price is also a range.</p>
    pub fn set_range(mut self, input: ::std::option::Option<bool>) -> Self {
        self.range = input;
        self
    }
    /// <p>If the price is a range or an exact value. If any of the toll fares making up the route is a range, the overall price is also a range.</p>
    pub fn get_range(&self) -> &::std::option::Option<bool> {
        &self.range
    }
    /// <p>Price range with a minimum and maximum value, if a range.</p>
    pub fn range_value(mut self, input: crate::types::RouteTollPriceValueRange) -> Self {
        self.range_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>Price range with a minimum and maximum value, if a range.</p>
    pub fn set_range_value(mut self, input: ::std::option::Option<crate::types::RouteTollPriceValueRange>) -> Self {
        self.range_value = input;
        self
    }
    /// <p>Price range with a minimum and maximum value, if a range.</p>
    pub fn get_range_value(&self) -> &::std::option::Option<crate::types::RouteTollPriceValueRange> {
        &self.range_value
    }
    /// <p>Exact price, if not a range.</p>
    /// This field is required.
    pub fn value(mut self, input: f64) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>Exact price, if not a range.</p>
    pub fn set_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.value = input;
        self
    }
    /// <p>Exact price, if not a range.</p>
    pub fn get_value(&self) -> &::std::option::Option<f64> {
        &self.value
    }
    /// Consumes the builder and constructs a [`RouteTollPrice`](crate::types::RouteTollPrice).
    /// This method will fail if any of the following fields are not set:
    /// - [`currency`](crate::types::builders::RouteTollPriceBuilder::currency)
    /// - [`estimate`](crate::types::builders::RouteTollPriceBuilder::estimate)
    /// - [`range`](crate::types::builders::RouteTollPriceBuilder::range)
    /// - [`value`](crate::types::builders::RouteTollPriceBuilder::value)
    pub fn build(self) -> ::std::result::Result<crate::types::RouteTollPrice, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RouteTollPrice {
            currency: self.currency.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "currency",
                    "currency was not specified but it is required when building RouteTollPrice",
                )
            })?,
            estimate: self.estimate.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "estimate",
                    "estimate was not specified but it is required when building RouteTollPrice",
                )
            })?,
            per_duration: self.per_duration.unwrap_or_default(),
            range: self.range.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "range",
                    "range was not specified but it is required when building RouteTollPrice",
                )
            })?,
            range_value: self.range_value,
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building RouteTollPrice",
                )
            })?,
        })
    }
}
