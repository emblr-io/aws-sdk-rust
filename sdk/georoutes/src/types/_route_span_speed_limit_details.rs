// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the speed limit corresponding to the span.</p>
/// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteSpanSpeedLimitDetails {
    /// <p>Maximum speed.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub max_speed: f64,
    /// <p>If the span doesn't have a speed limit like the Autobahn.</p>
    pub unlimited: ::std::option::Option<bool>,
}
impl RouteSpanSpeedLimitDetails {
    /// <p>Maximum speed.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn max_speed(&self) -> f64 {
        self.max_speed
    }
    /// <p>If the span doesn't have a speed limit like the Autobahn.</p>
    pub fn unlimited(&self) -> ::std::option::Option<bool> {
        self.unlimited
    }
}
impl RouteSpanSpeedLimitDetails {
    /// Creates a new builder-style object to manufacture [`RouteSpanSpeedLimitDetails`](crate::types::RouteSpanSpeedLimitDetails).
    pub fn builder() -> crate::types::builders::RouteSpanSpeedLimitDetailsBuilder {
        crate::types::builders::RouteSpanSpeedLimitDetailsBuilder::default()
    }
}

/// A builder for [`RouteSpanSpeedLimitDetails`](crate::types::RouteSpanSpeedLimitDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteSpanSpeedLimitDetailsBuilder {
    pub(crate) max_speed: ::std::option::Option<f64>,
    pub(crate) unlimited: ::std::option::Option<bool>,
}
impl RouteSpanSpeedLimitDetailsBuilder {
    /// <p>Maximum speed.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn max_speed(mut self, input: f64) -> Self {
        self.max_speed = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maximum speed.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn set_max_speed(mut self, input: ::std::option::Option<f64>) -> Self {
        self.max_speed = input;
        self
    }
    /// <p>Maximum speed.</p>
    /// <p><b>Unit</b>: <code>KilometersPerHour</code></p>
    pub fn get_max_speed(&self) -> &::std::option::Option<f64> {
        &self.max_speed
    }
    /// <p>If the span doesn't have a speed limit like the Autobahn.</p>
    pub fn unlimited(mut self, input: bool) -> Self {
        self.unlimited = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the span doesn't have a speed limit like the Autobahn.</p>
    pub fn set_unlimited(mut self, input: ::std::option::Option<bool>) -> Self {
        self.unlimited = input;
        self
    }
    /// <p>If the span doesn't have a speed limit like the Autobahn.</p>
    pub fn get_unlimited(&self) -> &::std::option::Option<bool> {
        &self.unlimited
    }
    /// Consumes the builder and constructs a [`RouteSpanSpeedLimitDetails`](crate::types::RouteSpanSpeedLimitDetails).
    pub fn build(self) -> crate::types::RouteSpanSpeedLimitDetails {
        crate::types::RouteSpanSpeedLimitDetails {
            max_speed: self.max_speed.unwrap_or_default(),
            unlimited: self.unlimited,
        }
    }
}
