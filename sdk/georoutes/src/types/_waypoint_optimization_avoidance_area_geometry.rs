// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Geometry of the area to be avoided.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct WaypointOptimizationAvoidanceAreaGeometry {
    /// <p>Geometry defined as a bounding box. The first pair represents the X and Y coordinates (longitude and latitude,) of the southwest corner of the bounding box; the second pair represents the X and Y coordinates (longitude and latitude) of the northeast corner.</p>
    pub bounding_box: ::std::option::Option<::std::vec::Vec<f64>>,
}
impl WaypointOptimizationAvoidanceAreaGeometry {
    /// <p>Geometry defined as a bounding box. The first pair represents the X and Y coordinates (longitude and latitude,) of the southwest corner of the bounding box; the second pair represents the X and Y coordinates (longitude and latitude) of the northeast corner.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.bounding_box.is_none()`.
    pub fn bounding_box(&self) -> &[f64] {
        self.bounding_box.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for WaypointOptimizationAvoidanceAreaGeometry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("WaypointOptimizationAvoidanceAreaGeometry");
        formatter.field("bounding_box", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl WaypointOptimizationAvoidanceAreaGeometry {
    /// Creates a new builder-style object to manufacture [`WaypointOptimizationAvoidanceAreaGeometry`](crate::types::WaypointOptimizationAvoidanceAreaGeometry).
    pub fn builder() -> crate::types::builders::WaypointOptimizationAvoidanceAreaGeometryBuilder {
        crate::types::builders::WaypointOptimizationAvoidanceAreaGeometryBuilder::default()
    }
}

/// A builder for [`WaypointOptimizationAvoidanceAreaGeometry`](crate::types::WaypointOptimizationAvoidanceAreaGeometry).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct WaypointOptimizationAvoidanceAreaGeometryBuilder {
    pub(crate) bounding_box: ::std::option::Option<::std::vec::Vec<f64>>,
}
impl WaypointOptimizationAvoidanceAreaGeometryBuilder {
    /// Appends an item to `bounding_box`.
    ///
    /// To override the contents of this collection use [`set_bounding_box`](Self::set_bounding_box).
    ///
    /// <p>Geometry defined as a bounding box. The first pair represents the X and Y coordinates (longitude and latitude,) of the southwest corner of the bounding box; the second pair represents the X and Y coordinates (longitude and latitude) of the northeast corner.</p>
    pub fn bounding_box(mut self, input: f64) -> Self {
        let mut v = self.bounding_box.unwrap_or_default();
        v.push(input);
        self.bounding_box = ::std::option::Option::Some(v);
        self
    }
    /// <p>Geometry defined as a bounding box. The first pair represents the X and Y coordinates (longitude and latitude,) of the southwest corner of the bounding box; the second pair represents the X and Y coordinates (longitude and latitude) of the northeast corner.</p>
    pub fn set_bounding_box(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.bounding_box = input;
        self
    }
    /// <p>Geometry defined as a bounding box. The first pair represents the X and Y coordinates (longitude and latitude,) of the southwest corner of the bounding box; the second pair represents the X and Y coordinates (longitude and latitude) of the northeast corner.</p>
    pub fn get_bounding_box(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.bounding_box
    }
    /// Consumes the builder and constructs a [`WaypointOptimizationAvoidanceAreaGeometry`](crate::types::WaypointOptimizationAvoidanceAreaGeometry).
    pub fn build(self) -> crate::types::WaypointOptimizationAvoidanceAreaGeometry {
        crate::types::WaypointOptimizationAvoidanceAreaGeometry {
            bounding_box: self.bounding_box,
        }
    }
}
impl ::std::fmt::Debug for WaypointOptimizationAvoidanceAreaGeometryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("WaypointOptimizationAvoidanceAreaGeometryBuilder");
        formatter.field("bounding_box", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
