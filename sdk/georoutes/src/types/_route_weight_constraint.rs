// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The weight constraint for the route.</p>
/// <p><b>Unit</b>: <code>Kilograms</code></p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteWeightConstraint {
    /// <p>The type of constraint.</p>
    pub r#type: crate::types::RouteWeightConstraintType,
    /// <p>The constraint value.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub value: i64,
}
impl RouteWeightConstraint {
    /// <p>The type of constraint.</p>
    pub fn r#type(&self) -> &crate::types::RouteWeightConstraintType {
        &self.r#type
    }
    /// <p>The constraint value.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn value(&self) -> i64 {
        self.value
    }
}
impl RouteWeightConstraint {
    /// Creates a new builder-style object to manufacture [`RouteWeightConstraint`](crate::types::RouteWeightConstraint).
    pub fn builder() -> crate::types::builders::RouteWeightConstraintBuilder {
        crate::types::builders::RouteWeightConstraintBuilder::default()
    }
}

/// A builder for [`RouteWeightConstraint`](crate::types::RouteWeightConstraint).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteWeightConstraintBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::RouteWeightConstraintType>,
    pub(crate) value: ::std::option::Option<i64>,
}
impl RouteWeightConstraintBuilder {
    /// <p>The type of constraint.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::RouteWeightConstraintType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of constraint.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RouteWeightConstraintType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of constraint.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RouteWeightConstraintType> {
        &self.r#type
    }
    /// <p>The constraint value.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    /// This field is required.
    pub fn value(mut self, input: i64) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The constraint value.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn set_value(mut self, input: ::std::option::Option<i64>) -> Self {
        self.value = input;
        self
    }
    /// <p>The constraint value.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn get_value(&self) -> &::std::option::Option<i64> {
        &self.value
    }
    /// Consumes the builder and constructs a [`RouteWeightConstraint`](crate::types::RouteWeightConstraint).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::RouteWeightConstraintBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::RouteWeightConstraint, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RouteWeightConstraint {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building RouteWeightConstraint",
                )
            })?,
            value: self.value.unwrap_or_default(),
        })
    }
}
