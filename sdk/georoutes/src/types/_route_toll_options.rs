// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Options related to Tolls on a route.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteTollOptions {
    /// <p>Specifies if the user has valid transponder with access to all toll systems. This impacts toll calculation, and if true the price with transponders is used.</p>
    pub all_transponders: ::std::option::Option<bool>,
    /// <p>Specifies if the user has valid vignettes with access for all toll roads. If a user has a vignette for a toll road, then toll cost for that road is omitted since no further payment is necessary.</p>
    pub all_vignettes: ::std::option::Option<bool>,
    /// <p>Currency code corresponding to the price. This is the same as Currency specified in the request.</p>
    pub currency: ::std::option::Option<::std::string::String>,
    /// <p>Emission type of the vehicle for toll cost calculation.</p>
    /// <p><b>Valid values</b>: <code>Euro1, Euro2, Euro3, Euro4, Euro5, Euro6, EuroEev</code></p>
    pub emission_type: ::std::option::Option<crate::types::RouteEmissionType>,
    /// <p>Vehicle category for toll cost calculation.</p>
    pub vehicle_category: ::std::option::Option<crate::types::RouteTollVehicleCategory>,
}
impl RouteTollOptions {
    /// <p>Specifies if the user has valid transponder with access to all toll systems. This impacts toll calculation, and if true the price with transponders is used.</p>
    pub fn all_transponders(&self) -> ::std::option::Option<bool> {
        self.all_transponders
    }
    /// <p>Specifies if the user has valid vignettes with access for all toll roads. If a user has a vignette for a toll road, then toll cost for that road is omitted since no further payment is necessary.</p>
    pub fn all_vignettes(&self) -> ::std::option::Option<bool> {
        self.all_vignettes
    }
    /// <p>Currency code corresponding to the price. This is the same as Currency specified in the request.</p>
    pub fn currency(&self) -> ::std::option::Option<&str> {
        self.currency.as_deref()
    }
    /// <p>Emission type of the vehicle for toll cost calculation.</p>
    /// <p><b>Valid values</b>: <code>Euro1, Euro2, Euro3, Euro4, Euro5, Euro6, EuroEev</code></p>
    pub fn emission_type(&self) -> ::std::option::Option<&crate::types::RouteEmissionType> {
        self.emission_type.as_ref()
    }
    /// <p>Vehicle category for toll cost calculation.</p>
    pub fn vehicle_category(&self) -> ::std::option::Option<&crate::types::RouteTollVehicleCategory> {
        self.vehicle_category.as_ref()
    }
}
impl RouteTollOptions {
    /// Creates a new builder-style object to manufacture [`RouteTollOptions`](crate::types::RouteTollOptions).
    pub fn builder() -> crate::types::builders::RouteTollOptionsBuilder {
        crate::types::builders::RouteTollOptionsBuilder::default()
    }
}

/// A builder for [`RouteTollOptions`](crate::types::RouteTollOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteTollOptionsBuilder {
    pub(crate) all_transponders: ::std::option::Option<bool>,
    pub(crate) all_vignettes: ::std::option::Option<bool>,
    pub(crate) currency: ::std::option::Option<::std::string::String>,
    pub(crate) emission_type: ::std::option::Option<crate::types::RouteEmissionType>,
    pub(crate) vehicle_category: ::std::option::Option<crate::types::RouteTollVehicleCategory>,
}
impl RouteTollOptionsBuilder {
    /// <p>Specifies if the user has valid transponder with access to all toll systems. This impacts toll calculation, and if true the price with transponders is used.</p>
    pub fn all_transponders(mut self, input: bool) -> Self {
        self.all_transponders = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies if the user has valid transponder with access to all toll systems. This impacts toll calculation, and if true the price with transponders is used.</p>
    pub fn set_all_transponders(mut self, input: ::std::option::Option<bool>) -> Self {
        self.all_transponders = input;
        self
    }
    /// <p>Specifies if the user has valid transponder with access to all toll systems. This impacts toll calculation, and if true the price with transponders is used.</p>
    pub fn get_all_transponders(&self) -> &::std::option::Option<bool> {
        &self.all_transponders
    }
    /// <p>Specifies if the user has valid vignettes with access for all toll roads. If a user has a vignette for a toll road, then toll cost for that road is omitted since no further payment is necessary.</p>
    pub fn all_vignettes(mut self, input: bool) -> Self {
        self.all_vignettes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies if the user has valid vignettes with access for all toll roads. If a user has a vignette for a toll road, then toll cost for that road is omitted since no further payment is necessary.</p>
    pub fn set_all_vignettes(mut self, input: ::std::option::Option<bool>) -> Self {
        self.all_vignettes = input;
        self
    }
    /// <p>Specifies if the user has valid vignettes with access for all toll roads. If a user has a vignette for a toll road, then toll cost for that road is omitted since no further payment is necessary.</p>
    pub fn get_all_vignettes(&self) -> &::std::option::Option<bool> {
        &self.all_vignettes
    }
    /// <p>Currency code corresponding to the price. This is the same as Currency specified in the request.</p>
    pub fn currency(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.currency = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Currency code corresponding to the price. This is the same as Currency specified in the request.</p>
    pub fn set_currency(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.currency = input;
        self
    }
    /// <p>Currency code corresponding to the price. This is the same as Currency specified in the request.</p>
    pub fn get_currency(&self) -> &::std::option::Option<::std::string::String> {
        &self.currency
    }
    /// <p>Emission type of the vehicle for toll cost calculation.</p>
    /// <p><b>Valid values</b>: <code>Euro1, Euro2, Euro3, Euro4, Euro5, Euro6, EuroEev</code></p>
    pub fn emission_type(mut self, input: crate::types::RouteEmissionType) -> Self {
        self.emission_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Emission type of the vehicle for toll cost calculation.</p>
    /// <p><b>Valid values</b>: <code>Euro1, Euro2, Euro3, Euro4, Euro5, Euro6, EuroEev</code></p>
    pub fn set_emission_type(mut self, input: ::std::option::Option<crate::types::RouteEmissionType>) -> Self {
        self.emission_type = input;
        self
    }
    /// <p>Emission type of the vehicle for toll cost calculation.</p>
    /// <p><b>Valid values</b>: <code>Euro1, Euro2, Euro3, Euro4, Euro5, Euro6, EuroEev</code></p>
    pub fn get_emission_type(&self) -> &::std::option::Option<crate::types::RouteEmissionType> {
        &self.emission_type
    }
    /// <p>Vehicle category for toll cost calculation.</p>
    pub fn vehicle_category(mut self, input: crate::types::RouteTollVehicleCategory) -> Self {
        self.vehicle_category = ::std::option::Option::Some(input);
        self
    }
    /// <p>Vehicle category for toll cost calculation.</p>
    pub fn set_vehicle_category(mut self, input: ::std::option::Option<crate::types::RouteTollVehicleCategory>) -> Self {
        self.vehicle_category = input;
        self
    }
    /// <p>Vehicle category for toll cost calculation.</p>
    pub fn get_vehicle_category(&self) -> &::std::option::Option<crate::types::RouteTollVehicleCategory> {
        &self.vehicle_category
    }
    /// Consumes the builder and constructs a [`RouteTollOptions`](crate::types::RouteTollOptions).
    pub fn build(self) -> crate::types::RouteTollOptions {
        crate::types::RouteTollOptions {
            all_transponders: self.all_transponders,
            all_vignettes: self.all_vignettes,
            currency: self.currency,
            emission_type: self.emission_type,
            vehicle_category: self.vehicle_category,
        }
    }
}
