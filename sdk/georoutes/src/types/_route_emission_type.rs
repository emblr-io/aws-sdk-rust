// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Type of the emission.</p>
/// <p><b>Valid values</b>: <code>Euro1, Euro2, Euro3, Euro4, Euro5, Euro6, EuroEev</code></p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteEmissionType {
    /// <p>The CO 2 emission classes.</p>
    pub co2_emission_class: ::std::option::Option<::std::string::String>,
    /// <p>Type of the emission.</p>
    /// <p><b>Valid values</b>: <code>Euro1, Euro2, Euro3, Euro4, Euro5, Euro6, EuroEev</code></p>
    pub r#type: ::std::string::String,
}
impl RouteEmissionType {
    /// <p>The CO 2 emission classes.</p>
    pub fn co2_emission_class(&self) -> ::std::option::Option<&str> {
        self.co2_emission_class.as_deref()
    }
    /// <p>Type of the emission.</p>
    /// <p><b>Valid values</b>: <code>Euro1, Euro2, Euro3, Euro4, Euro5, Euro6, EuroEev</code></p>
    pub fn r#type(&self) -> &str {
        use std::ops::Deref;
        self.r#type.deref()
    }
}
impl RouteEmissionType {
    /// Creates a new builder-style object to manufacture [`RouteEmissionType`](crate::types::RouteEmissionType).
    pub fn builder() -> crate::types::builders::RouteEmissionTypeBuilder {
        crate::types::builders::RouteEmissionTypeBuilder::default()
    }
}

/// A builder for [`RouteEmissionType`](crate::types::RouteEmissionType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteEmissionTypeBuilder {
    pub(crate) co2_emission_class: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
}
impl RouteEmissionTypeBuilder {
    /// <p>The CO 2 emission classes.</p>
    pub fn co2_emission_class(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.co2_emission_class = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CO 2 emission classes.</p>
    pub fn set_co2_emission_class(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.co2_emission_class = input;
        self
    }
    /// <p>The CO 2 emission classes.</p>
    pub fn get_co2_emission_class(&self) -> &::std::option::Option<::std::string::String> {
        &self.co2_emission_class
    }
    /// <p>Type of the emission.</p>
    /// <p><b>Valid values</b>: <code>Euro1, Euro2, Euro3, Euro4, Euro5, Euro6, EuroEev</code></p>
    /// This field is required.
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Type of the emission.</p>
    /// <p><b>Valid values</b>: <code>Euro1, Euro2, Euro3, Euro4, Euro5, Euro6, EuroEev</code></p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Type of the emission.</p>
    /// <p><b>Valid values</b>: <code>Euro1, Euro2, Euro3, Euro4, Euro5, Euro6, EuroEev</code></p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`RouteEmissionType`](crate::types::RouteEmissionType).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::RouteEmissionTypeBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::RouteEmissionType, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RouteEmissionType {
            co2_emission_class: self.co2_emission_class,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building RouteEmissionType",
                )
            })?,
        })
    }
}
