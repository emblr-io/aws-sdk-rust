// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Calculated isolines and associated properties.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Isoline {
    /// <p>Isolines may contain multiple components, if these components are connected by ferry links. These components are returned as separate polygons while the ferry links are returned as connections.</p>
    pub connections: ::std::vec::Vec<crate::types::IsolineConnection>,
    /// <p>Distance threshold corresponding to the calculated Isoline.</p>
    pub distance_threshold: i64,
    /// <p>Geometries for the Calculated isolines.</p>
    pub geometries: ::std::vec::Vec<crate::types::IsolineShapeGeometry>,
    /// <p>Time threshold corresponding to the calculated isoline.</p>
    pub time_threshold: i64,
}
impl Isoline {
    /// <p>Isolines may contain multiple components, if these components are connected by ferry links. These components are returned as separate polygons while the ferry links are returned as connections.</p>
    pub fn connections(&self) -> &[crate::types::IsolineConnection] {
        use std::ops::Deref;
        self.connections.deref()
    }
    /// <p>Distance threshold corresponding to the calculated Isoline.</p>
    pub fn distance_threshold(&self) -> i64 {
        self.distance_threshold
    }
    /// <p>Geometries for the Calculated isolines.</p>
    pub fn geometries(&self) -> &[crate::types::IsolineShapeGeometry] {
        use std::ops::Deref;
        self.geometries.deref()
    }
    /// <p>Time threshold corresponding to the calculated isoline.</p>
    pub fn time_threshold(&self) -> i64 {
        self.time_threshold
    }
}
impl Isoline {
    /// Creates a new builder-style object to manufacture [`Isoline`](crate::types::Isoline).
    pub fn builder() -> crate::types::builders::IsolineBuilder {
        crate::types::builders::IsolineBuilder::default()
    }
}

/// A builder for [`Isoline`](crate::types::Isoline).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IsolineBuilder {
    pub(crate) connections: ::std::option::Option<::std::vec::Vec<crate::types::IsolineConnection>>,
    pub(crate) distance_threshold: ::std::option::Option<i64>,
    pub(crate) geometries: ::std::option::Option<::std::vec::Vec<crate::types::IsolineShapeGeometry>>,
    pub(crate) time_threshold: ::std::option::Option<i64>,
}
impl IsolineBuilder {
    /// Appends an item to `connections`.
    ///
    /// To override the contents of this collection use [`set_connections`](Self::set_connections).
    ///
    /// <p>Isolines may contain multiple components, if these components are connected by ferry links. These components are returned as separate polygons while the ferry links are returned as connections.</p>
    pub fn connections(mut self, input: crate::types::IsolineConnection) -> Self {
        let mut v = self.connections.unwrap_or_default();
        v.push(input);
        self.connections = ::std::option::Option::Some(v);
        self
    }
    /// <p>Isolines may contain multiple components, if these components are connected by ferry links. These components are returned as separate polygons while the ferry links are returned as connections.</p>
    pub fn set_connections(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IsolineConnection>>) -> Self {
        self.connections = input;
        self
    }
    /// <p>Isolines may contain multiple components, if these components are connected by ferry links. These components are returned as separate polygons while the ferry links are returned as connections.</p>
    pub fn get_connections(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IsolineConnection>> {
        &self.connections
    }
    /// <p>Distance threshold corresponding to the calculated Isoline.</p>
    pub fn distance_threshold(mut self, input: i64) -> Self {
        self.distance_threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>Distance threshold corresponding to the calculated Isoline.</p>
    pub fn set_distance_threshold(mut self, input: ::std::option::Option<i64>) -> Self {
        self.distance_threshold = input;
        self
    }
    /// <p>Distance threshold corresponding to the calculated Isoline.</p>
    pub fn get_distance_threshold(&self) -> &::std::option::Option<i64> {
        &self.distance_threshold
    }
    /// Appends an item to `geometries`.
    ///
    /// To override the contents of this collection use [`set_geometries`](Self::set_geometries).
    ///
    /// <p>Geometries for the Calculated isolines.</p>
    pub fn geometries(mut self, input: crate::types::IsolineShapeGeometry) -> Self {
        let mut v = self.geometries.unwrap_or_default();
        v.push(input);
        self.geometries = ::std::option::Option::Some(v);
        self
    }
    /// <p>Geometries for the Calculated isolines.</p>
    pub fn set_geometries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IsolineShapeGeometry>>) -> Self {
        self.geometries = input;
        self
    }
    /// <p>Geometries for the Calculated isolines.</p>
    pub fn get_geometries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IsolineShapeGeometry>> {
        &self.geometries
    }
    /// <p>Time threshold corresponding to the calculated isoline.</p>
    pub fn time_threshold(mut self, input: i64) -> Self {
        self.time_threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>Time threshold corresponding to the calculated isoline.</p>
    pub fn set_time_threshold(mut self, input: ::std::option::Option<i64>) -> Self {
        self.time_threshold = input;
        self
    }
    /// <p>Time threshold corresponding to the calculated isoline.</p>
    pub fn get_time_threshold(&self) -> &::std::option::Option<i64> {
        &self.time_threshold
    }
    /// Consumes the builder and constructs a [`Isoline`](crate::types::Isoline).
    /// This method will fail if any of the following fields are not set:
    /// - [`connections`](crate::types::builders::IsolineBuilder::connections)
    /// - [`geometries`](crate::types::builders::IsolineBuilder::geometries)
    pub fn build(self) -> ::std::result::Result<crate::types::Isoline, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Isoline {
            connections: self.connections.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "connections",
                    "connections was not specified but it is required when building Isoline",
                )
            })?,
            distance_threshold: self.distance_threshold.unwrap_or_default(),
            geometries: self.geometries.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "geometries",
                    "geometries was not specified but it is required when building Isoline",
                )
            })?,
            time_threshold: self.time_threshold.unwrap_or_default(),
        })
    }
}
