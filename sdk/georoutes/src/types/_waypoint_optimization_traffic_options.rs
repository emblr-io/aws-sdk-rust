// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Options related to traffic.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WaypointOptimizationTrafficOptions {
    /// <p>Determines if traffic should be used or ignored while calculating the route.</p>
    /// <p>Default Value: <code>UseTrafficData</code></p>
    pub usage: ::std::option::Option<crate::types::TrafficUsage>,
}
impl WaypointOptimizationTrafficOptions {
    /// <p>Determines if traffic should be used or ignored while calculating the route.</p>
    /// <p>Default Value: <code>UseTrafficData</code></p>
    pub fn usage(&self) -> ::std::option::Option<&crate::types::TrafficUsage> {
        self.usage.as_ref()
    }
}
impl WaypointOptimizationTrafficOptions {
    /// Creates a new builder-style object to manufacture [`WaypointOptimizationTrafficOptions`](crate::types::WaypointOptimizationTrafficOptions).
    pub fn builder() -> crate::types::builders::WaypointOptimizationTrafficOptionsBuilder {
        crate::types::builders::WaypointOptimizationTrafficOptionsBuilder::default()
    }
}

/// A builder for [`WaypointOptimizationTrafficOptions`](crate::types::WaypointOptimizationTrafficOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WaypointOptimizationTrafficOptionsBuilder {
    pub(crate) usage: ::std::option::Option<crate::types::TrafficUsage>,
}
impl WaypointOptimizationTrafficOptionsBuilder {
    /// <p>Determines if traffic should be used or ignored while calculating the route.</p>
    /// <p>Default Value: <code>UseTrafficData</code></p>
    pub fn usage(mut self, input: crate::types::TrafficUsage) -> Self {
        self.usage = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines if traffic should be used or ignored while calculating the route.</p>
    /// <p>Default Value: <code>UseTrafficData</code></p>
    pub fn set_usage(mut self, input: ::std::option::Option<crate::types::TrafficUsage>) -> Self {
        self.usage = input;
        self
    }
    /// <p>Determines if traffic should be used or ignored while calculating the route.</p>
    /// <p>Default Value: <code>UseTrafficData</code></p>
    pub fn get_usage(&self) -> &::std::option::Option<crate::types::TrafficUsage> {
        &self.usage
    }
    /// Consumes the builder and constructs a [`WaypointOptimizationTrafficOptions`](crate::types::WaypointOptimizationTrafficOptions).
    pub fn build(self) -> crate::types::WaypointOptimizationTrafficOptions {
        crate::types::WaypointOptimizationTrafficOptions { usage: self.usage }
    }
}
