// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Driver related options.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteDriverOptions {
    /// <p>Driver work-rest schedule. Stops are added to fulfil the provided rest schedule.</p>
    pub schedule: ::std::option::Option<::std::vec::Vec<crate::types::RouteDriverScheduleInterval>>,
}
impl RouteDriverOptions {
    /// <p>Driver work-rest schedule. Stops are added to fulfil the provided rest schedule.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.schedule.is_none()`.
    pub fn schedule(&self) -> &[crate::types::RouteDriverScheduleInterval] {
        self.schedule.as_deref().unwrap_or_default()
    }
}
impl RouteDriverOptions {
    /// Creates a new builder-style object to manufacture [`RouteDriverOptions`](crate::types::RouteDriverOptions).
    pub fn builder() -> crate::types::builders::RouteDriverOptionsBuilder {
        crate::types::builders::RouteDriverOptionsBuilder::default()
    }
}

/// A builder for [`RouteDriverOptions`](crate::types::RouteDriverOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteDriverOptionsBuilder {
    pub(crate) schedule: ::std::option::Option<::std::vec::Vec<crate::types::RouteDriverScheduleInterval>>,
}
impl RouteDriverOptionsBuilder {
    /// Appends an item to `schedule`.
    ///
    /// To override the contents of this collection use [`set_schedule`](Self::set_schedule).
    ///
    /// <p>Driver work-rest schedule. Stops are added to fulfil the provided rest schedule.</p>
    pub fn schedule(mut self, input: crate::types::RouteDriverScheduleInterval) -> Self {
        let mut v = self.schedule.unwrap_or_default();
        v.push(input);
        self.schedule = ::std::option::Option::Some(v);
        self
    }
    /// <p>Driver work-rest schedule. Stops are added to fulfil the provided rest schedule.</p>
    pub fn set_schedule(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteDriverScheduleInterval>>) -> Self {
        self.schedule = input;
        self
    }
    /// <p>Driver work-rest schedule. Stops are added to fulfil the provided rest schedule.</p>
    pub fn get_schedule(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteDriverScheduleInterval>> {
        &self.schedule
    }
    /// Consumes the builder and constructs a [`RouteDriverOptions`](crate::types::RouteDriverOptions).
    pub fn build(self) -> crate::types::RouteDriverOptions {
        crate::types::RouteDriverOptions { schedule: self.schedule }
    }
}
