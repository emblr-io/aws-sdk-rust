// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Geometry defined as a corridor - a LineString with a radius that defines the width of the corridor.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Corridor {
    /// <p>An ordered list of positions used to plot a route on a map.</p><note>
    /// <p>LineString and Polyline are mutually exclusive properties.</p>
    /// </note>
    pub line_string: ::std::vec::Vec<::std::vec::Vec<f64>>,
    /// <p>Radius that defines the width of the corridor.</p>
    pub radius: i32,
}
impl Corridor {
    /// <p>An ordered list of positions used to plot a route on a map.</p><note>
    /// <p>LineString and Polyline are mutually exclusive properties.</p>
    /// </note>
    pub fn line_string(&self) -> &[::std::vec::Vec<f64>] {
        use std::ops::Deref;
        self.line_string.deref()
    }
    /// <p>Radius that defines the width of the corridor.</p>
    pub fn radius(&self) -> i32 {
        self.radius
    }
}
impl ::std::fmt::Debug for Corridor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Corridor");
        formatter.field("line_string", &"*** Sensitive Data Redacted ***");
        formatter.field("radius", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl Corridor {
    /// Creates a new builder-style object to manufacture [`Corridor`](crate::types::Corridor).
    pub fn builder() -> crate::types::builders::CorridorBuilder {
        crate::types::builders::CorridorBuilder::default()
    }
}

/// A builder for [`Corridor`](crate::types::Corridor).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CorridorBuilder {
    pub(crate) line_string: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<f64>>>,
    pub(crate) radius: ::std::option::Option<i32>,
}
impl CorridorBuilder {
    /// Appends an item to `line_string`.
    ///
    /// To override the contents of this collection use [`set_line_string`](Self::set_line_string).
    ///
    /// <p>An ordered list of positions used to plot a route on a map.</p><note>
    /// <p>LineString and Polyline are mutually exclusive properties.</p>
    /// </note>
    pub fn line_string(mut self, input: ::std::vec::Vec<f64>) -> Self {
        let mut v = self.line_string.unwrap_or_default();
        v.push(input);
        self.line_string = ::std::option::Option::Some(v);
        self
    }
    /// <p>An ordered list of positions used to plot a route on a map.</p><note>
    /// <p>LineString and Polyline are mutually exclusive properties.</p>
    /// </note>
    pub fn set_line_string(mut self, input: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<f64>>>) -> Self {
        self.line_string = input;
        self
    }
    /// <p>An ordered list of positions used to plot a route on a map.</p><note>
    /// <p>LineString and Polyline are mutually exclusive properties.</p>
    /// </note>
    pub fn get_line_string(&self) -> &::std::option::Option<::std::vec::Vec<::std::vec::Vec<f64>>> {
        &self.line_string
    }
    /// <p>Radius that defines the width of the corridor.</p>
    /// This field is required.
    pub fn radius(mut self, input: i32) -> Self {
        self.radius = ::std::option::Option::Some(input);
        self
    }
    /// <p>Radius that defines the width of the corridor.</p>
    pub fn set_radius(mut self, input: ::std::option::Option<i32>) -> Self {
        self.radius = input;
        self
    }
    /// <p>Radius that defines the width of the corridor.</p>
    pub fn get_radius(&self) -> &::std::option::Option<i32> {
        &self.radius
    }
    /// Consumes the builder and constructs a [`Corridor`](crate::types::Corridor).
    /// This method will fail if any of the following fields are not set:
    /// - [`line_string`](crate::types::builders::CorridorBuilder::line_string)
    /// - [`radius`](crate::types::builders::CorridorBuilder::radius)
    pub fn build(self) -> ::std::result::Result<crate::types::Corridor, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Corridor {
            line_string: self.line_string.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "line_string",
                    "line_string was not specified but it is required when building Corridor",
                )
            })?,
            radius: self.radius.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "radius",
                    "radius was not specified but it is required when building Corridor",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for CorridorBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CorridorBuilder");
        formatter.field("line_string", &"*** Sensitive Data Redacted ***");
        formatter.field("radius", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
