// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Geometry of the connection between different isoline components.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct IsolineConnectionGeometry {
    /// <p>An ordered list of positions used to plot a route on a map.</p><note>
    /// <p>LineString and Polyline are mutually exclusive properties.</p>
    /// </note>
    pub line_string: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<f64>>>,
    /// <p>An ordered list of positions used to plot a route on a map in a lossy compression format.</p><note>
    /// <p>LineString and Polyline are mutually exclusive properties.</p>
    /// </note>
    pub polyline: ::std::option::Option<::std::string::String>,
}
impl IsolineConnectionGeometry {
    /// <p>An ordered list of positions used to plot a route on a map.</p><note>
    /// <p>LineString and Polyline are mutually exclusive properties.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.line_string.is_none()`.
    pub fn line_string(&self) -> &[::std::vec::Vec<f64>] {
        self.line_string.as_deref().unwrap_or_default()
    }
    /// <p>An ordered list of positions used to plot a route on a map in a lossy compression format.</p><note>
    /// <p>LineString and Polyline are mutually exclusive properties.</p>
    /// </note>
    pub fn polyline(&self) -> ::std::option::Option<&str> {
        self.polyline.as_deref()
    }
}
impl ::std::fmt::Debug for IsolineConnectionGeometry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("IsolineConnectionGeometry");
        formatter.field("line_string", &"*** Sensitive Data Redacted ***");
        formatter.field("polyline", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl IsolineConnectionGeometry {
    /// Creates a new builder-style object to manufacture [`IsolineConnectionGeometry`](crate::types::IsolineConnectionGeometry).
    pub fn builder() -> crate::types::builders::IsolineConnectionGeometryBuilder {
        crate::types::builders::IsolineConnectionGeometryBuilder::default()
    }
}

/// A builder for [`IsolineConnectionGeometry`](crate::types::IsolineConnectionGeometry).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct IsolineConnectionGeometryBuilder {
    pub(crate) line_string: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<f64>>>,
    pub(crate) polyline: ::std::option::Option<::std::string::String>,
}
impl IsolineConnectionGeometryBuilder {
    /// Appends an item to `line_string`.
    ///
    /// To override the contents of this collection use [`set_line_string`](Self::set_line_string).
    ///
    /// <p>An ordered list of positions used to plot a route on a map.</p><note>
    /// <p>LineString and Polyline are mutually exclusive properties.</p>
    /// </note>
    pub fn line_string(mut self, input: ::std::vec::Vec<f64>) -> Self {
        let mut v = self.line_string.unwrap_or_default();
        v.push(input);
        self.line_string = ::std::option::Option::Some(v);
        self
    }
    /// <p>An ordered list of positions used to plot a route on a map.</p><note>
    /// <p>LineString and Polyline are mutually exclusive properties.</p>
    /// </note>
    pub fn set_line_string(mut self, input: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<f64>>>) -> Self {
        self.line_string = input;
        self
    }
    /// <p>An ordered list of positions used to plot a route on a map.</p><note>
    /// <p>LineString and Polyline are mutually exclusive properties.</p>
    /// </note>
    pub fn get_line_string(&self) -> &::std::option::Option<::std::vec::Vec<::std::vec::Vec<f64>>> {
        &self.line_string
    }
    /// <p>An ordered list of positions used to plot a route on a map in a lossy compression format.</p><note>
    /// <p>LineString and Polyline are mutually exclusive properties.</p>
    /// </note>
    pub fn polyline(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.polyline = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An ordered list of positions used to plot a route on a map in a lossy compression format.</p><note>
    /// <p>LineString and Polyline are mutually exclusive properties.</p>
    /// </note>
    pub fn set_polyline(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.polyline = input;
        self
    }
    /// <p>An ordered list of positions used to plot a route on a map in a lossy compression format.</p><note>
    /// <p>LineString and Polyline are mutually exclusive properties.</p>
    /// </note>
    pub fn get_polyline(&self) -> &::std::option::Option<::std::string::String> {
        &self.polyline
    }
    /// Consumes the builder and constructs a [`IsolineConnectionGeometry`](crate::types::IsolineConnectionGeometry).
    pub fn build(self) -> crate::types::IsolineConnectionGeometry {
        crate::types::IsolineConnectionGeometry {
            line_string: self.line_string,
            polyline: self.polyline,
        }
    }
}
impl ::std::fmt::Debug for IsolineConnectionGeometryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("IsolineConnectionGeometryBuilder");
        formatter.field("line_string", &"*** Sensitive Data Redacted ***");
        formatter.field("polyline", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
