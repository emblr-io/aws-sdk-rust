// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The toll rate.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteTollRate {
    /// <p>Time when the rate is valid.</p>
    pub applicable_times: ::std::option::Option<::std::string::String>,
    /// <p>Price in the converted currency as specified in the request.</p>
    pub converted_price: ::std::option::Option<crate::types::RouteTollPrice>,
    /// <p>The Toll rate Id.</p>
    pub id: ::std::string::String,
    /// <p>Price in the local regional currency.</p>
    pub local_price: ::std::option::Option<crate::types::RouteTollPrice>,
    /// <p>The name of the toll.</p>
    pub name: ::std::string::String,
    /// <p>Details if the toll rate can be a pass that supports multiple trips.</p>
    pub pass: ::std::option::Option<crate::types::RouteTollPass>,
    /// <p>Accepted payment methods at the toll.</p>
    pub payment_methods: ::std::vec::Vec<crate::types::RouteTollPaymentMethod>,
    /// <p>Transponders for which this toll can be applied.</p>
    pub transponders: ::std::vec::Vec<crate::types::RouteTransponder>,
}
impl RouteTollRate {
    /// <p>Time when the rate is valid.</p>
    pub fn applicable_times(&self) -> ::std::option::Option<&str> {
        self.applicable_times.as_deref()
    }
    /// <p>Price in the converted currency as specified in the request.</p>
    pub fn converted_price(&self) -> ::std::option::Option<&crate::types::RouteTollPrice> {
        self.converted_price.as_ref()
    }
    /// <p>The Toll rate Id.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>Price in the local regional currency.</p>
    pub fn local_price(&self) -> ::std::option::Option<&crate::types::RouteTollPrice> {
        self.local_price.as_ref()
    }
    /// <p>The name of the toll.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Details if the toll rate can be a pass that supports multiple trips.</p>
    pub fn pass(&self) -> ::std::option::Option<&crate::types::RouteTollPass> {
        self.pass.as_ref()
    }
    /// <p>Accepted payment methods at the toll.</p>
    pub fn payment_methods(&self) -> &[crate::types::RouteTollPaymentMethod] {
        use std::ops::Deref;
        self.payment_methods.deref()
    }
    /// <p>Transponders for which this toll can be applied.</p>
    pub fn transponders(&self) -> &[crate::types::RouteTransponder] {
        use std::ops::Deref;
        self.transponders.deref()
    }
}
impl RouteTollRate {
    /// Creates a new builder-style object to manufacture [`RouteTollRate`](crate::types::RouteTollRate).
    pub fn builder() -> crate::types::builders::RouteTollRateBuilder {
        crate::types::builders::RouteTollRateBuilder::default()
    }
}

/// A builder for [`RouteTollRate`](crate::types::RouteTollRate).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteTollRateBuilder {
    pub(crate) applicable_times: ::std::option::Option<::std::string::String>,
    pub(crate) converted_price: ::std::option::Option<crate::types::RouteTollPrice>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) local_price: ::std::option::Option<crate::types::RouteTollPrice>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) pass: ::std::option::Option<crate::types::RouteTollPass>,
    pub(crate) payment_methods: ::std::option::Option<::std::vec::Vec<crate::types::RouteTollPaymentMethod>>,
    pub(crate) transponders: ::std::option::Option<::std::vec::Vec<crate::types::RouteTransponder>>,
}
impl RouteTollRateBuilder {
    /// <p>Time when the rate is valid.</p>
    pub fn applicable_times(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.applicable_times = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Time when the rate is valid.</p>
    pub fn set_applicable_times(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.applicable_times = input;
        self
    }
    /// <p>Time when the rate is valid.</p>
    pub fn get_applicable_times(&self) -> &::std::option::Option<::std::string::String> {
        &self.applicable_times
    }
    /// <p>Price in the converted currency as specified in the request.</p>
    pub fn converted_price(mut self, input: crate::types::RouteTollPrice) -> Self {
        self.converted_price = ::std::option::Option::Some(input);
        self
    }
    /// <p>Price in the converted currency as specified in the request.</p>
    pub fn set_converted_price(mut self, input: ::std::option::Option<crate::types::RouteTollPrice>) -> Self {
        self.converted_price = input;
        self
    }
    /// <p>Price in the converted currency as specified in the request.</p>
    pub fn get_converted_price(&self) -> &::std::option::Option<crate::types::RouteTollPrice> {
        &self.converted_price
    }
    /// <p>The Toll rate Id.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Toll rate Id.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The Toll rate Id.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Price in the local regional currency.</p>
    /// This field is required.
    pub fn local_price(mut self, input: crate::types::RouteTollPrice) -> Self {
        self.local_price = ::std::option::Option::Some(input);
        self
    }
    /// <p>Price in the local regional currency.</p>
    pub fn set_local_price(mut self, input: ::std::option::Option<crate::types::RouteTollPrice>) -> Self {
        self.local_price = input;
        self
    }
    /// <p>Price in the local regional currency.</p>
    pub fn get_local_price(&self) -> &::std::option::Option<crate::types::RouteTollPrice> {
        &self.local_price
    }
    /// <p>The name of the toll.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the toll.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the toll.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Details if the toll rate can be a pass that supports multiple trips.</p>
    pub fn pass(mut self, input: crate::types::RouteTollPass) -> Self {
        self.pass = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details if the toll rate can be a pass that supports multiple trips.</p>
    pub fn set_pass(mut self, input: ::std::option::Option<crate::types::RouteTollPass>) -> Self {
        self.pass = input;
        self
    }
    /// <p>Details if the toll rate can be a pass that supports multiple trips.</p>
    pub fn get_pass(&self) -> &::std::option::Option<crate::types::RouteTollPass> {
        &self.pass
    }
    /// Appends an item to `payment_methods`.
    ///
    /// To override the contents of this collection use [`set_payment_methods`](Self::set_payment_methods).
    ///
    /// <p>Accepted payment methods at the toll.</p>
    pub fn payment_methods(mut self, input: crate::types::RouteTollPaymentMethod) -> Self {
        let mut v = self.payment_methods.unwrap_or_default();
        v.push(input);
        self.payment_methods = ::std::option::Option::Some(v);
        self
    }
    /// <p>Accepted payment methods at the toll.</p>
    pub fn set_payment_methods(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteTollPaymentMethod>>) -> Self {
        self.payment_methods = input;
        self
    }
    /// <p>Accepted payment methods at the toll.</p>
    pub fn get_payment_methods(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteTollPaymentMethod>> {
        &self.payment_methods
    }
    /// Appends an item to `transponders`.
    ///
    /// To override the contents of this collection use [`set_transponders`](Self::set_transponders).
    ///
    /// <p>Transponders for which this toll can be applied.</p>
    pub fn transponders(mut self, input: crate::types::RouteTransponder) -> Self {
        let mut v = self.transponders.unwrap_or_default();
        v.push(input);
        self.transponders = ::std::option::Option::Some(v);
        self
    }
    /// <p>Transponders for which this toll can be applied.</p>
    pub fn set_transponders(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteTransponder>>) -> Self {
        self.transponders = input;
        self
    }
    /// <p>Transponders for which this toll can be applied.</p>
    pub fn get_transponders(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteTransponder>> {
        &self.transponders
    }
    /// Consumes the builder and constructs a [`RouteTollRate`](crate::types::RouteTollRate).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::RouteTollRateBuilder::id)
    /// - [`name`](crate::types::builders::RouteTollRateBuilder::name)
    /// - [`payment_methods`](crate::types::builders::RouteTollRateBuilder::payment_methods)
    /// - [`transponders`](crate::types::builders::RouteTollRateBuilder::transponders)
    pub fn build(self) -> ::std::result::Result<crate::types::RouteTollRate, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RouteTollRate {
            applicable_times: self.applicable_times,
            converted_price: self.converted_price,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building RouteTollRate",
                )
            })?,
            local_price: self.local_price,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building RouteTollRate",
                )
            })?,
            pass: self.pass,
            payment_methods: self.payment_methods.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "payment_methods",
                    "payment_methods was not specified but it is required when building RouteTollRate",
                )
            })?,
            transponders: self.transponders.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "transponders",
                    "transponders was not specified but it is required when building RouteTollRate",
                )
            })?,
        })
    }
}
