// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Access hours corresponding to when a destination can be visited.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WaypointOptimizationAccessHours {
    /// <p>Contains the ID of the starting waypoint in this connection.</p>
    pub from: ::std::option::Option<crate::types::WaypointOptimizationAccessHoursEntry>,
    /// <p>Contains the ID of the ending waypoint in this connection.</p>
    pub to: ::std::option::Option<crate::types::WaypointOptimizationAccessHoursEntry>,
}
impl WaypointOptimizationAccessHours {
    /// <p>Contains the ID of the starting waypoint in this connection.</p>
    pub fn from(&self) -> ::std::option::Option<&crate::types::WaypointOptimizationAccessHoursEntry> {
        self.from.as_ref()
    }
    /// <p>Contains the ID of the ending waypoint in this connection.</p>
    pub fn to(&self) -> ::std::option::Option<&crate::types::WaypointOptimizationAccessHoursEntry> {
        self.to.as_ref()
    }
}
impl WaypointOptimizationAccessHours {
    /// Creates a new builder-style object to manufacture [`WaypointOptimizationAccessHours`](crate::types::WaypointOptimizationAccessHours).
    pub fn builder() -> crate::types::builders::WaypointOptimizationAccessHoursBuilder {
        crate::types::builders::WaypointOptimizationAccessHoursBuilder::default()
    }
}

/// A builder for [`WaypointOptimizationAccessHours`](crate::types::WaypointOptimizationAccessHours).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WaypointOptimizationAccessHoursBuilder {
    pub(crate) from: ::std::option::Option<crate::types::WaypointOptimizationAccessHoursEntry>,
    pub(crate) to: ::std::option::Option<crate::types::WaypointOptimizationAccessHoursEntry>,
}
impl WaypointOptimizationAccessHoursBuilder {
    /// <p>Contains the ID of the starting waypoint in this connection.</p>
    /// This field is required.
    pub fn from(mut self, input: crate::types::WaypointOptimizationAccessHoursEntry) -> Self {
        self.from = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the ID of the starting waypoint in this connection.</p>
    pub fn set_from(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationAccessHoursEntry>) -> Self {
        self.from = input;
        self
    }
    /// <p>Contains the ID of the starting waypoint in this connection.</p>
    pub fn get_from(&self) -> &::std::option::Option<crate::types::WaypointOptimizationAccessHoursEntry> {
        &self.from
    }
    /// <p>Contains the ID of the ending waypoint in this connection.</p>
    /// This field is required.
    pub fn to(mut self, input: crate::types::WaypointOptimizationAccessHoursEntry) -> Self {
        self.to = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the ID of the ending waypoint in this connection.</p>
    pub fn set_to(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationAccessHoursEntry>) -> Self {
        self.to = input;
        self
    }
    /// <p>Contains the ID of the ending waypoint in this connection.</p>
    pub fn get_to(&self) -> &::std::option::Option<crate::types::WaypointOptimizationAccessHoursEntry> {
        &self.to
    }
    /// Consumes the builder and constructs a [`WaypointOptimizationAccessHours`](crate::types::WaypointOptimizationAccessHours).
    pub fn build(self) -> crate::types::WaypointOptimizationAccessHours {
        crate::types::WaypointOptimizationAccessHours {
            from: self.from,
            to: self.to,
        }
    }
}
