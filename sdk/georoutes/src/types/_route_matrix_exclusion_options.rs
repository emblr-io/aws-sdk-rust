// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies strict exclusion options for the route calculation. This setting mandates that the router will avoid any routes that include the specified options, rather than merely attempting to minimize them.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteMatrixExclusionOptions {
    /// <p>List of countries to be avoided defined by two-letter or three-letter country codes.</p>
    pub countries: ::std::vec::Vec<::std::string::String>,
}
impl RouteMatrixExclusionOptions {
    /// <p>List of countries to be avoided defined by two-letter or three-letter country codes.</p>
    pub fn countries(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.countries.deref()
    }
}
impl RouteMatrixExclusionOptions {
    /// Creates a new builder-style object to manufacture [`RouteMatrixExclusionOptions`](crate::types::RouteMatrixExclusionOptions).
    pub fn builder() -> crate::types::builders::RouteMatrixExclusionOptionsBuilder {
        crate::types::builders::RouteMatrixExclusionOptionsBuilder::default()
    }
}

/// A builder for [`RouteMatrixExclusionOptions`](crate::types::RouteMatrixExclusionOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteMatrixExclusionOptionsBuilder {
    pub(crate) countries: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RouteMatrixExclusionOptionsBuilder {
    /// Appends an item to `countries`.
    ///
    /// To override the contents of this collection use [`set_countries`](Self::set_countries).
    ///
    /// <p>List of countries to be avoided defined by two-letter or three-letter country codes.</p>
    pub fn countries(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.countries.unwrap_or_default();
        v.push(input.into());
        self.countries = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of countries to be avoided defined by two-letter or three-letter country codes.</p>
    pub fn set_countries(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.countries = input;
        self
    }
    /// <p>List of countries to be avoided defined by two-letter or three-letter country codes.</p>
    pub fn get_countries(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.countries
    }
    /// Consumes the builder and constructs a [`RouteMatrixExclusionOptions`](crate::types::RouteMatrixExclusionOptions).
    /// This method will fail if any of the following fields are not set:
    /// - [`countries`](crate::types::builders::RouteMatrixExclusionOptionsBuilder::countries)
    pub fn build(self) -> ::std::result::Result<crate::types::RouteMatrixExclusionOptions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RouteMatrixExclusionOptions {
            countries: self.countries.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "countries",
                    "countries was not specified but it is required when building RouteMatrixExclusionOptions",
                )
            })?,
        })
    }
}
