// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Isolines may contain multiple components, if these components are connected by ferry links. These components are returned as separate polygons while the ferry links are returned as connections.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IsolineConnection {
    /// <p>Index of the polygon corresponding to the "from" component of the connection. The polygon is available from <code>Isoline\[\].Geometries</code>.</p>
    pub from_polygon_index: i32,
    /// <p>The isoline geometry.</p>
    pub geometry: ::std::option::Option<crate::types::IsolineConnectionGeometry>,
    /// <p>Index of the polygon corresponding to the "to" component of the connection. The polygon is available from <code>Isoline\[\].Geometries</code>.</p>
    pub to_polygon_index: i32,
}
impl IsolineConnection {
    /// <p>Index of the polygon corresponding to the "from" component of the connection. The polygon is available from <code>Isoline\[\].Geometries</code>.</p>
    pub fn from_polygon_index(&self) -> i32 {
        self.from_polygon_index
    }
    /// <p>The isoline geometry.</p>
    pub fn geometry(&self) -> ::std::option::Option<&crate::types::IsolineConnectionGeometry> {
        self.geometry.as_ref()
    }
    /// <p>Index of the polygon corresponding to the "to" component of the connection. The polygon is available from <code>Isoline\[\].Geometries</code>.</p>
    pub fn to_polygon_index(&self) -> i32 {
        self.to_polygon_index
    }
}
impl IsolineConnection {
    /// Creates a new builder-style object to manufacture [`IsolineConnection`](crate::types::IsolineConnection).
    pub fn builder() -> crate::types::builders::IsolineConnectionBuilder {
        crate::types::builders::IsolineConnectionBuilder::default()
    }
}

/// A builder for [`IsolineConnection`](crate::types::IsolineConnection).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IsolineConnectionBuilder {
    pub(crate) from_polygon_index: ::std::option::Option<i32>,
    pub(crate) geometry: ::std::option::Option<crate::types::IsolineConnectionGeometry>,
    pub(crate) to_polygon_index: ::std::option::Option<i32>,
}
impl IsolineConnectionBuilder {
    /// <p>Index of the polygon corresponding to the "from" component of the connection. The polygon is available from <code>Isoline\[\].Geometries</code>.</p>
    /// This field is required.
    pub fn from_polygon_index(mut self, input: i32) -> Self {
        self.from_polygon_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>Index of the polygon corresponding to the "from" component of the connection. The polygon is available from <code>Isoline\[\].Geometries</code>.</p>
    pub fn set_from_polygon_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.from_polygon_index = input;
        self
    }
    /// <p>Index of the polygon corresponding to the "from" component of the connection. The polygon is available from <code>Isoline\[\].Geometries</code>.</p>
    pub fn get_from_polygon_index(&self) -> &::std::option::Option<i32> {
        &self.from_polygon_index
    }
    /// <p>The isoline geometry.</p>
    /// This field is required.
    pub fn geometry(mut self, input: crate::types::IsolineConnectionGeometry) -> Self {
        self.geometry = ::std::option::Option::Some(input);
        self
    }
    /// <p>The isoline geometry.</p>
    pub fn set_geometry(mut self, input: ::std::option::Option<crate::types::IsolineConnectionGeometry>) -> Self {
        self.geometry = input;
        self
    }
    /// <p>The isoline geometry.</p>
    pub fn get_geometry(&self) -> &::std::option::Option<crate::types::IsolineConnectionGeometry> {
        &self.geometry
    }
    /// <p>Index of the polygon corresponding to the "to" component of the connection. The polygon is available from <code>Isoline\[\].Geometries</code>.</p>
    /// This field is required.
    pub fn to_polygon_index(mut self, input: i32) -> Self {
        self.to_polygon_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>Index of the polygon corresponding to the "to" component of the connection. The polygon is available from <code>Isoline\[\].Geometries</code>.</p>
    pub fn set_to_polygon_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.to_polygon_index = input;
        self
    }
    /// <p>Index of the polygon corresponding to the "to" component of the connection. The polygon is available from <code>Isoline\[\].Geometries</code>.</p>
    pub fn get_to_polygon_index(&self) -> &::std::option::Option<i32> {
        &self.to_polygon_index
    }
    /// Consumes the builder and constructs a [`IsolineConnection`](crate::types::IsolineConnection).
    /// This method will fail if any of the following fields are not set:
    /// - [`from_polygon_index`](crate::types::builders::IsolineConnectionBuilder::from_polygon_index)
    /// - [`to_polygon_index`](crate::types::builders::IsolineConnectionBuilder::to_polygon_index)
    pub fn build(self) -> ::std::result::Result<crate::types::IsolineConnection, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IsolineConnection {
            from_polygon_index: self.from_polygon_index.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "from_polygon_index",
                    "from_polygon_index was not specified but it is required when building IsolineConnection",
                )
            })?,
            geometry: self.geometry,
            to_polygon_index: self.to_polygon_index.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "to_polygon_index",
                    "to_polygon_index was not specified but it is required when building IsolineConnection",
                )
            })?,
        })
    }
}
