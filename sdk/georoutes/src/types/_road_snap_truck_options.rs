// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Travel mode options when the provided travel mode is "Truck".</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RoadSnapTruckOptions {
    /// <p>Gross weight of the vehicle including trailers, and goods at capacity.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub gross_weight: i64,
    /// <p>List of Hazardous cargos contained in the vehicle.</p>
    pub hazardous_cargos: ::std::option::Option<::std::vec::Vec<crate::types::RoadSnapHazardousCargoType>>,
    /// <p>Height of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub height: i64,
    /// <p>Length of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub length: i64,
    /// <p>Trailer options corresponding to the vehicle.</p>
    pub trailer: ::std::option::Option<crate::types::RoadSnapTrailerOptions>,
    /// <p>The tunnel restriction code.</p>
    /// <p>Tunnel categories in this list indicate the restrictions which apply to certain tunnels in Great Britain. They relate to the types of dangerous goods that can be transported through them.</p>
    /// <ul>
    /// <li>
    /// <p><i>Tunnel Category B</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Limited risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Few restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category C</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Medium risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Some restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category D</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: High risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Many restrictions occur</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category E</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Very high risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Restricted tunnel</p></li>
    /// </ul></li>
    /// </ul>
    pub tunnel_restriction_code: ::std::option::Option<::std::string::String>,
    /// <p>Width of the vehicle in centimenters.</p>
    pub width: i64,
}
impl RoadSnapTruckOptions {
    /// <p>Gross weight of the vehicle including trailers, and goods at capacity.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn gross_weight(&self) -> i64 {
        self.gross_weight
    }
    /// <p>List of Hazardous cargos contained in the vehicle.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.hazardous_cargos.is_none()`.
    pub fn hazardous_cargos(&self) -> &[crate::types::RoadSnapHazardousCargoType] {
        self.hazardous_cargos.as_deref().unwrap_or_default()
    }
    /// <p>Height of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn height(&self) -> i64 {
        self.height
    }
    /// <p>Length of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn length(&self) -> i64 {
        self.length
    }
    /// <p>Trailer options corresponding to the vehicle.</p>
    pub fn trailer(&self) -> ::std::option::Option<&crate::types::RoadSnapTrailerOptions> {
        self.trailer.as_ref()
    }
    /// <p>The tunnel restriction code.</p>
    /// <p>Tunnel categories in this list indicate the restrictions which apply to certain tunnels in Great Britain. They relate to the types of dangerous goods that can be transported through them.</p>
    /// <ul>
    /// <li>
    /// <p><i>Tunnel Category B</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Limited risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Few restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category C</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Medium risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Some restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category D</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: High risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Many restrictions occur</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category E</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Very high risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Restricted tunnel</p></li>
    /// </ul></li>
    /// </ul>
    pub fn tunnel_restriction_code(&self) -> ::std::option::Option<&str> {
        self.tunnel_restriction_code.as_deref()
    }
    /// <p>Width of the vehicle in centimenters.</p>
    pub fn width(&self) -> i64 {
        self.width
    }
}
impl RoadSnapTruckOptions {
    /// Creates a new builder-style object to manufacture [`RoadSnapTruckOptions`](crate::types::RoadSnapTruckOptions).
    pub fn builder() -> crate::types::builders::RoadSnapTruckOptionsBuilder {
        crate::types::builders::RoadSnapTruckOptionsBuilder::default()
    }
}

/// A builder for [`RoadSnapTruckOptions`](crate::types::RoadSnapTruckOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RoadSnapTruckOptionsBuilder {
    pub(crate) gross_weight: ::std::option::Option<i64>,
    pub(crate) hazardous_cargos: ::std::option::Option<::std::vec::Vec<crate::types::RoadSnapHazardousCargoType>>,
    pub(crate) height: ::std::option::Option<i64>,
    pub(crate) length: ::std::option::Option<i64>,
    pub(crate) trailer: ::std::option::Option<crate::types::RoadSnapTrailerOptions>,
    pub(crate) tunnel_restriction_code: ::std::option::Option<::std::string::String>,
    pub(crate) width: ::std::option::Option<i64>,
}
impl RoadSnapTruckOptionsBuilder {
    /// <p>Gross weight of the vehicle including trailers, and goods at capacity.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn gross_weight(mut self, input: i64) -> Self {
        self.gross_weight = ::std::option::Option::Some(input);
        self
    }
    /// <p>Gross weight of the vehicle including trailers, and goods at capacity.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn set_gross_weight(mut self, input: ::std::option::Option<i64>) -> Self {
        self.gross_weight = input;
        self
    }
    /// <p>Gross weight of the vehicle including trailers, and goods at capacity.</p>
    /// <p><b>Unit</b>: <code>Kilograms</code></p>
    pub fn get_gross_weight(&self) -> &::std::option::Option<i64> {
        &self.gross_weight
    }
    /// Appends an item to `hazardous_cargos`.
    ///
    /// To override the contents of this collection use [`set_hazardous_cargos`](Self::set_hazardous_cargos).
    ///
    /// <p>List of Hazardous cargos contained in the vehicle.</p>
    pub fn hazardous_cargos(mut self, input: crate::types::RoadSnapHazardousCargoType) -> Self {
        let mut v = self.hazardous_cargos.unwrap_or_default();
        v.push(input);
        self.hazardous_cargos = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of Hazardous cargos contained in the vehicle.</p>
    pub fn set_hazardous_cargos(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RoadSnapHazardousCargoType>>) -> Self {
        self.hazardous_cargos = input;
        self
    }
    /// <p>List of Hazardous cargos contained in the vehicle.</p>
    pub fn get_hazardous_cargos(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RoadSnapHazardousCargoType>> {
        &self.hazardous_cargos
    }
    /// <p>Height of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn height(mut self, input: i64) -> Self {
        self.height = ::std::option::Option::Some(input);
        self
    }
    /// <p>Height of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn set_height(mut self, input: ::std::option::Option<i64>) -> Self {
        self.height = input;
        self
    }
    /// <p>Height of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn get_height(&self) -> &::std::option::Option<i64> {
        &self.height
    }
    /// <p>Length of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn length(mut self, input: i64) -> Self {
        self.length = ::std::option::Option::Some(input);
        self
    }
    /// <p>Length of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn set_length(mut self, input: ::std::option::Option<i64>) -> Self {
        self.length = input;
        self
    }
    /// <p>Length of the vehicle.</p>
    /// <p><b>Unit</b>: <code>centimeters</code></p>
    pub fn get_length(&self) -> &::std::option::Option<i64> {
        &self.length
    }
    /// <p>Trailer options corresponding to the vehicle.</p>
    pub fn trailer(mut self, input: crate::types::RoadSnapTrailerOptions) -> Self {
        self.trailer = ::std::option::Option::Some(input);
        self
    }
    /// <p>Trailer options corresponding to the vehicle.</p>
    pub fn set_trailer(mut self, input: ::std::option::Option<crate::types::RoadSnapTrailerOptions>) -> Self {
        self.trailer = input;
        self
    }
    /// <p>Trailer options corresponding to the vehicle.</p>
    pub fn get_trailer(&self) -> &::std::option::Option<crate::types::RoadSnapTrailerOptions> {
        &self.trailer
    }
    /// <p>The tunnel restriction code.</p>
    /// <p>Tunnel categories in this list indicate the restrictions which apply to certain tunnels in Great Britain. They relate to the types of dangerous goods that can be transported through them.</p>
    /// <ul>
    /// <li>
    /// <p><i>Tunnel Category B</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Limited risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Few restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category C</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Medium risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Some restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category D</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: High risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Many restrictions occur</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category E</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Very high risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Restricted tunnel</p></li>
    /// </ul></li>
    /// </ul>
    pub fn tunnel_restriction_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tunnel_restriction_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The tunnel restriction code.</p>
    /// <p>Tunnel categories in this list indicate the restrictions which apply to certain tunnels in Great Britain. They relate to the types of dangerous goods that can be transported through them.</p>
    /// <ul>
    /// <li>
    /// <p><i>Tunnel Category B</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Limited risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Few restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category C</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Medium risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Some restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category D</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: High risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Many restrictions occur</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category E</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Very high risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Restricted tunnel</p></li>
    /// </ul></li>
    /// </ul>
    pub fn set_tunnel_restriction_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tunnel_restriction_code = input;
        self
    }
    /// <p>The tunnel restriction code.</p>
    /// <p>Tunnel categories in this list indicate the restrictions which apply to certain tunnels in Great Britain. They relate to the types of dangerous goods that can be transported through them.</p>
    /// <ul>
    /// <li>
    /// <p><i>Tunnel Category B</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Limited risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Few restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category C</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Medium risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Some restrictions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category D</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: High risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Many restrictions occur</p></li>
    /// </ul></li>
    /// <li>
    /// <p><i>Tunnel Category E</i></p>
    /// <ul>
    /// <li>
    /// <p><i>Risk Level</i>: Very high risk</p></li>
    /// <li>
    /// <p><i>Restrictions</i>: Restricted tunnel</p></li>
    /// </ul></li>
    /// </ul>
    pub fn get_tunnel_restriction_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.tunnel_restriction_code
    }
    /// <p>Width of the vehicle in centimenters.</p>
    pub fn width(mut self, input: i64) -> Self {
        self.width = ::std::option::Option::Some(input);
        self
    }
    /// <p>Width of the vehicle in centimenters.</p>
    pub fn set_width(mut self, input: ::std::option::Option<i64>) -> Self {
        self.width = input;
        self
    }
    /// <p>Width of the vehicle in centimenters.</p>
    pub fn get_width(&self) -> &::std::option::Option<i64> {
        &self.width
    }
    /// Consumes the builder and constructs a [`RoadSnapTruckOptions`](crate::types::RoadSnapTruckOptions).
    pub fn build(self) -> crate::types::RoadSnapTruckOptions {
        crate::types::RoadSnapTruckOptions {
            gross_weight: self.gross_weight.unwrap_or_default(),
            hazardous_cargos: self.hazardous_cargos,
            height: self.height.unwrap_or_default(),
            length: self.length.unwrap_or_default(),
            trailer: self.trailer,
            tunnel_restriction_code: self.tunnel_restriction_code,
            width: self.width.unwrap_or_default(),
        }
    }
}
