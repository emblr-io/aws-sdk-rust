// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The route.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Route {
    /// <p>A leg is a section of a route from one waypoint to the next. A leg could be of type Vehicle, Pedestrian or Ferry. Legs of different types could occur together within a single route. For example, a car employing the use of a Ferry will contain Vehicle legs corresponding to journey on land, and Ferry legs corresponding to the journey via Ferry.</p>
    pub legs: ::std::vec::Vec<crate::types::RouteLeg>,
    /// <p>Important labels including names and route numbers that differentiate the current route from the alternatives presented.</p>
    pub major_road_labels: ::std::vec::Vec<crate::types::RouteMajorRoadLabel>,
    /// <p>Summarized details of the leg.</p>
    pub summary: ::std::option::Option<crate::types::RouteSummary>,
}
impl Route {
    /// <p>A leg is a section of a route from one waypoint to the next. A leg could be of type Vehicle, Pedestrian or Ferry. Legs of different types could occur together within a single route. For example, a car employing the use of a Ferry will contain Vehicle legs corresponding to journey on land, and Ferry legs corresponding to the journey via Ferry.</p>
    pub fn legs(&self) -> &[crate::types::RouteLeg] {
        use std::ops::Deref;
        self.legs.deref()
    }
    /// <p>Important labels including names and route numbers that differentiate the current route from the alternatives presented.</p>
    pub fn major_road_labels(&self) -> &[crate::types::RouteMajorRoadLabel] {
        use std::ops::Deref;
        self.major_road_labels.deref()
    }
    /// <p>Summarized details of the leg.</p>
    pub fn summary(&self) -> ::std::option::Option<&crate::types::RouteSummary> {
        self.summary.as_ref()
    }
}
impl Route {
    /// Creates a new builder-style object to manufacture [`Route`](crate::types::Route).
    pub fn builder() -> crate::types::builders::RouteBuilder {
        crate::types::builders::RouteBuilder::default()
    }
}

/// A builder for [`Route`](crate::types::Route).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RouteBuilder {
    pub(crate) legs: ::std::option::Option<::std::vec::Vec<crate::types::RouteLeg>>,
    pub(crate) major_road_labels: ::std::option::Option<::std::vec::Vec<crate::types::RouteMajorRoadLabel>>,
    pub(crate) summary: ::std::option::Option<crate::types::RouteSummary>,
}
impl RouteBuilder {
    /// Appends an item to `legs`.
    ///
    /// To override the contents of this collection use [`set_legs`](Self::set_legs).
    ///
    /// <p>A leg is a section of a route from one waypoint to the next. A leg could be of type Vehicle, Pedestrian or Ferry. Legs of different types could occur together within a single route. For example, a car employing the use of a Ferry will contain Vehicle legs corresponding to journey on land, and Ferry legs corresponding to the journey via Ferry.</p>
    pub fn legs(mut self, input: crate::types::RouteLeg) -> Self {
        let mut v = self.legs.unwrap_or_default();
        v.push(input);
        self.legs = ::std::option::Option::Some(v);
        self
    }
    /// <p>A leg is a section of a route from one waypoint to the next. A leg could be of type Vehicle, Pedestrian or Ferry. Legs of different types could occur together within a single route. For example, a car employing the use of a Ferry will contain Vehicle legs corresponding to journey on land, and Ferry legs corresponding to the journey via Ferry.</p>
    pub fn set_legs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteLeg>>) -> Self {
        self.legs = input;
        self
    }
    /// <p>A leg is a section of a route from one waypoint to the next. A leg could be of type Vehicle, Pedestrian or Ferry. Legs of different types could occur together within a single route. For example, a car employing the use of a Ferry will contain Vehicle legs corresponding to journey on land, and Ferry legs corresponding to the journey via Ferry.</p>
    pub fn get_legs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteLeg>> {
        &self.legs
    }
    /// Appends an item to `major_road_labels`.
    ///
    /// To override the contents of this collection use [`set_major_road_labels`](Self::set_major_road_labels).
    ///
    /// <p>Important labels including names and route numbers that differentiate the current route from the alternatives presented.</p>
    pub fn major_road_labels(mut self, input: crate::types::RouteMajorRoadLabel) -> Self {
        let mut v = self.major_road_labels.unwrap_or_default();
        v.push(input);
        self.major_road_labels = ::std::option::Option::Some(v);
        self
    }
    /// <p>Important labels including names and route numbers that differentiate the current route from the alternatives presented.</p>
    pub fn set_major_road_labels(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteMajorRoadLabel>>) -> Self {
        self.major_road_labels = input;
        self
    }
    /// <p>Important labels including names and route numbers that differentiate the current route from the alternatives presented.</p>
    pub fn get_major_road_labels(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteMajorRoadLabel>> {
        &self.major_road_labels
    }
    /// <p>Summarized details of the leg.</p>
    pub fn summary(mut self, input: crate::types::RouteSummary) -> Self {
        self.summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>Summarized details of the leg.</p>
    pub fn set_summary(mut self, input: ::std::option::Option<crate::types::RouteSummary>) -> Self {
        self.summary = input;
        self
    }
    /// <p>Summarized details of the leg.</p>
    pub fn get_summary(&self) -> &::std::option::Option<crate::types::RouteSummary> {
        &self.summary
    }
    /// Consumes the builder and constructs a [`Route`](crate::types::Route).
    /// This method will fail if any of the following fields are not set:
    /// - [`legs`](crate::types::builders::RouteBuilder::legs)
    /// - [`major_road_labels`](crate::types::builders::RouteBuilder::major_road_labels)
    pub fn build(self) -> ::std::result::Result<crate::types::Route, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Route {
            legs: self.legs.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "legs",
                    "legs was not specified but it is required when building Route",
                )
            })?,
            major_road_labels: self.major_road_labels.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "major_road_labels",
                    "major_road_labels was not specified but it is required when building Route",
                )
            })?,
            summary: self.summary,
        })
    }
}
