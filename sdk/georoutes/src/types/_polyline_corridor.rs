// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Geometry defined as an encoded corridor - an encoded polyline with a radius that defines the width of the corridor.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PolylineCorridor {
    /// <p>An ordered list of positions used to plot a route on a map in a lossy compression format.</p><note>
    /// <p>LineString and Polyline are mutually exclusive properties.</p>
    /// </note>
    pub polyline: ::std::string::String,
    /// <p>Considers all roads within the provided radius to match the provided destination to. The roads that are considered are determined by the provided Strategy.</p>
    /// <p><b>Unit</b>: <code>Meters</code></p>
    pub radius: i32,
}
impl PolylineCorridor {
    /// <p>An ordered list of positions used to plot a route on a map in a lossy compression format.</p><note>
    /// <p>LineString and Polyline are mutually exclusive properties.</p>
    /// </note>
    pub fn polyline(&self) -> &str {
        use std::ops::Deref;
        self.polyline.deref()
    }
    /// <p>Considers all roads within the provided radius to match the provided destination to. The roads that are considered are determined by the provided Strategy.</p>
    /// <p><b>Unit</b>: <code>Meters</code></p>
    pub fn radius(&self) -> i32 {
        self.radius
    }
}
impl ::std::fmt::Debug for PolylineCorridor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PolylineCorridor");
        formatter.field("polyline", &"*** Sensitive Data Redacted ***");
        formatter.field("radius", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl PolylineCorridor {
    /// Creates a new builder-style object to manufacture [`PolylineCorridor`](crate::types::PolylineCorridor).
    pub fn builder() -> crate::types::builders::PolylineCorridorBuilder {
        crate::types::builders::PolylineCorridorBuilder::default()
    }
}

/// A builder for [`PolylineCorridor`](crate::types::PolylineCorridor).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct PolylineCorridorBuilder {
    pub(crate) polyline: ::std::option::Option<::std::string::String>,
    pub(crate) radius: ::std::option::Option<i32>,
}
impl PolylineCorridorBuilder {
    /// <p>An ordered list of positions used to plot a route on a map in a lossy compression format.</p><note>
    /// <p>LineString and Polyline are mutually exclusive properties.</p>
    /// </note>
    /// This field is required.
    pub fn polyline(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.polyline = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An ordered list of positions used to plot a route on a map in a lossy compression format.</p><note>
    /// <p>LineString and Polyline are mutually exclusive properties.</p>
    /// </note>
    pub fn set_polyline(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.polyline = input;
        self
    }
    /// <p>An ordered list of positions used to plot a route on a map in a lossy compression format.</p><note>
    /// <p>LineString and Polyline are mutually exclusive properties.</p>
    /// </note>
    pub fn get_polyline(&self) -> &::std::option::Option<::std::string::String> {
        &self.polyline
    }
    /// <p>Considers all roads within the provided radius to match the provided destination to. The roads that are considered are determined by the provided Strategy.</p>
    /// <p><b>Unit</b>: <code>Meters</code></p>
    /// This field is required.
    pub fn radius(mut self, input: i32) -> Self {
        self.radius = ::std::option::Option::Some(input);
        self
    }
    /// <p>Considers all roads within the provided radius to match the provided destination to. The roads that are considered are determined by the provided Strategy.</p>
    /// <p><b>Unit</b>: <code>Meters</code></p>
    pub fn set_radius(mut self, input: ::std::option::Option<i32>) -> Self {
        self.radius = input;
        self
    }
    /// <p>Considers all roads within the provided radius to match the provided destination to. The roads that are considered are determined by the provided Strategy.</p>
    /// <p><b>Unit</b>: <code>Meters</code></p>
    pub fn get_radius(&self) -> &::std::option::Option<i32> {
        &self.radius
    }
    /// Consumes the builder and constructs a [`PolylineCorridor`](crate::types::PolylineCorridor).
    /// This method will fail if any of the following fields are not set:
    /// - [`polyline`](crate::types::builders::PolylineCorridorBuilder::polyline)
    /// - [`radius`](crate::types::builders::PolylineCorridorBuilder::radius)
    pub fn build(self) -> ::std::result::Result<crate::types::PolylineCorridor, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PolylineCorridor {
            polyline: self.polyline.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "polyline",
                    "polyline was not specified but it is required when building PolylineCorridor",
                )
            })?,
            radius: self.radius.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "radius",
                    "radius was not specified but it is required when building PolylineCorridor",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for PolylineCorridorBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PolylineCorridorBuilder");
        formatter.field("polyline", &"*** Sensitive Data Redacted ***");
        formatter.field("radius", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
