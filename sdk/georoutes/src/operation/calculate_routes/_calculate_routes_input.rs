// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CalculateRoutesInput {
    /// <p>Features that are allowed while calculating a route.</p>
    pub allow: ::std::option::Option<crate::types::RouteAllowOptions>,
    /// <p>Time of arrival at the destination.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub arrival_time: ::std::option::Option<::std::string::String>,
    /// <p>Features that are avoided while calculating a route. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, it violates the avoidance and the returned response produces a notice for the violation.</p>
    pub avoid: ::std::option::Option<crate::types::RouteAvoidanceOptions>,
    /// <p>Uses the current time as the time of departure.</p>
    pub depart_now: ::std::option::Option<bool>,
    /// <p>Time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub departure_time: ::std::option::Option<::std::string::String>,
    /// <p>The final position for the route. In the World Geodetic System (WGS 84) format: <code>\[longitude, latitude\]</code>.</p>
    pub destination: ::std::option::Option<::std::vec::Vec<f64>>,
    /// <p>Destination related options.</p>
    pub destination_options: ::std::option::Option<crate::types::RouteDestinationOptions>,
    /// <p>Driver related options.</p>
    pub driver: ::std::option::Option<crate::types::RouteDriverOptions>,
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub exclude: ::std::option::Option<crate::types::RouteExclusionOptions>,
    /// <p>Measurement system to be used for instructions within steps in the response.</p>
    pub instructions_measurement_system: ::std::option::Option<crate::types::MeasurementSystem>,
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub key: ::std::option::Option<::std::string::String>,
    /// <p>List of languages for instructions within steps in the response.</p><note>
    /// <p>Instructions in the requested language are returned only if they are available.</p>
    /// </note>
    pub languages: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of optional additional parameters such as timezone that can be requested for each result.</p>
    /// <ul>
    /// <li>
    /// <p><code>Elevation</code>: Retrieves the elevation information for each location.</p></li>
    /// <li>
    /// <p><code>Incidents</code>: Provides information on traffic incidents along the route.</p></li>
    /// <li>
    /// <p><code>PassThroughWaypoints</code>: Indicates waypoints that are passed through without stopping.</p></li>
    /// <li>
    /// <p><code>Summary</code>: Returns a summary of the route, including distance and duration.</p></li>
    /// <li>
    /// <p><code>Tolls</code>: Supplies toll cost information along the route.</p></li>
    /// <li>
    /// <p><code>TravelStepInstructions</code>: Provides step-by-step instructions for travel along the route.</p></li>
    /// <li>
    /// <p><code>TruckRoadTypes</code>: Returns information about road types suitable for trucks.</p></li>
    /// <li>
    /// <p><code>TypicalDuration</code>: Gives typical travel duration based on historical data.</p></li>
    /// <li>
    /// <p><code>Zones</code>: Specifies the time zone information for each waypoint.</p></li>
    /// </ul>
    pub leg_additional_features: ::std::option::Option<::std::vec::Vec<crate::types::RouteLegAdditionalFeature>>,
    /// <p>Specifies the format of the geometry returned for each leg of the route. You can choose between two different geometry encoding formats.</p>
    /// <p><code>FlexiblePolyline</code>: A compact and precise encoding format for the leg geometry. For more information on the format, see the GitHub repository for <a href="https://github.com/heremaps/flexible-polyline"> <code>FlexiblePolyline</code> </a>.</p>
    /// <p><code>Simple</code>: A less compact encoding, which is easier to decode but may be less precise and result in larger payloads.</p>
    pub leg_geometry_format: ::std::option::Option<crate::types::GeometryFormat>,
    /// <p>Maximum number of alternative routes to be provided in the response, if available.</p>
    pub max_alternatives: ::std::option::Option<i32>,
    /// <p>Specifies the optimization criteria for calculating a route.</p>
    /// <p>Default Value: <code>FastestRoute</code></p>
    pub optimize_routing_for: ::std::option::Option<crate::types::RoutingObjective>,
    /// <p>The start position for the route.</p>
    pub origin: ::std::option::Option<::std::vec::Vec<f64>>,
    /// <p>Origin related options.</p>
    pub origin_options: ::std::option::Option<crate::types::RouteOriginOptions>,
    /// <p>A list of optional features such as SpeedLimit that can be requested for a Span. A span is a section of a Leg for which the requested features have the same values.</p>
    pub span_additional_features: ::std::option::Option<::std::vec::Vec<crate::types::RouteSpanAdditionalFeature>>,
    /// <p>Toll related options.</p>
    pub tolls: ::std::option::Option<crate::types::RouteTollOptions>,
    /// <p>Traffic related options.</p>
    pub traffic: ::std::option::Option<crate::types::RouteTrafficOptions>,
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub travel_mode: ::std::option::Option<crate::types::RouteTravelMode>,
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub travel_mode_options: ::std::option::Option<crate::types::RouteTravelModeOptions>,
    /// <p>Type of step returned by the response. Default provides basic steps intended for web based applications. TurnByTurn provides detailed instructions with more granularity intended for a turn based navigation system.</p>
    pub travel_step_type: ::std::option::Option<crate::types::RouteTravelStepType>,
    /// <p>List of waypoints between the Origin and Destination.</p>
    pub waypoints: ::std::option::Option<::std::vec::Vec<crate::types::RouteWaypoint>>,
}
impl CalculateRoutesInput {
    /// <p>Features that are allowed while calculating a route.</p>
    pub fn allow(&self) -> ::std::option::Option<&crate::types::RouteAllowOptions> {
        self.allow.as_ref()
    }
    /// <p>Time of arrival at the destination.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn arrival_time(&self) -> ::std::option::Option<&str> {
        self.arrival_time.as_deref()
    }
    /// <p>Features that are avoided while calculating a route. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, it violates the avoidance and the returned response produces a notice for the violation.</p>
    pub fn avoid(&self) -> ::std::option::Option<&crate::types::RouteAvoidanceOptions> {
        self.avoid.as_ref()
    }
    /// <p>Uses the current time as the time of departure.</p>
    pub fn depart_now(&self) -> ::std::option::Option<bool> {
        self.depart_now
    }
    /// <p>Time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn departure_time(&self) -> ::std::option::Option<&str> {
        self.departure_time.as_deref()
    }
    /// <p>The final position for the route. In the World Geodetic System (WGS 84) format: <code>\[longitude, latitude\]</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destination.is_none()`.
    pub fn destination(&self) -> &[f64] {
        self.destination.as_deref().unwrap_or_default()
    }
    /// <p>Destination related options.</p>
    pub fn destination_options(&self) -> ::std::option::Option<&crate::types::RouteDestinationOptions> {
        self.destination_options.as_ref()
    }
    /// <p>Driver related options.</p>
    pub fn driver(&self) -> ::std::option::Option<&crate::types::RouteDriverOptions> {
        self.driver.as_ref()
    }
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub fn exclude(&self) -> ::std::option::Option<&crate::types::RouteExclusionOptions> {
        self.exclude.as_ref()
    }
    /// <p>Measurement system to be used for instructions within steps in the response.</p>
    pub fn instructions_measurement_system(&self) -> ::std::option::Option<&crate::types::MeasurementSystem> {
        self.instructions_measurement_system.as_ref()
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>List of languages for instructions within steps in the response.</p><note>
    /// <p>Instructions in the requested language are returned only if they are available.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.languages.is_none()`.
    pub fn languages(&self) -> &[::std::string::String] {
        self.languages.as_deref().unwrap_or_default()
    }
    /// <p>A list of optional additional parameters such as timezone that can be requested for each result.</p>
    /// <ul>
    /// <li>
    /// <p><code>Elevation</code>: Retrieves the elevation information for each location.</p></li>
    /// <li>
    /// <p><code>Incidents</code>: Provides information on traffic incidents along the route.</p></li>
    /// <li>
    /// <p><code>PassThroughWaypoints</code>: Indicates waypoints that are passed through without stopping.</p></li>
    /// <li>
    /// <p><code>Summary</code>: Returns a summary of the route, including distance and duration.</p></li>
    /// <li>
    /// <p><code>Tolls</code>: Supplies toll cost information along the route.</p></li>
    /// <li>
    /// <p><code>TravelStepInstructions</code>: Provides step-by-step instructions for travel along the route.</p></li>
    /// <li>
    /// <p><code>TruckRoadTypes</code>: Returns information about road types suitable for trucks.</p></li>
    /// <li>
    /// <p><code>TypicalDuration</code>: Gives typical travel duration based on historical data.</p></li>
    /// <li>
    /// <p><code>Zones</code>: Specifies the time zone information for each waypoint.</p></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.leg_additional_features.is_none()`.
    pub fn leg_additional_features(&self) -> &[crate::types::RouteLegAdditionalFeature] {
        self.leg_additional_features.as_deref().unwrap_or_default()
    }
    /// <p>Specifies the format of the geometry returned for each leg of the route. You can choose between two different geometry encoding formats.</p>
    /// <p><code>FlexiblePolyline</code>: A compact and precise encoding format for the leg geometry. For more information on the format, see the GitHub repository for <a href="https://github.com/heremaps/flexible-polyline"> <code>FlexiblePolyline</code> </a>.</p>
    /// <p><code>Simple</code>: A less compact encoding, which is easier to decode but may be less precise and result in larger payloads.</p>
    pub fn leg_geometry_format(&self) -> ::std::option::Option<&crate::types::GeometryFormat> {
        self.leg_geometry_format.as_ref()
    }
    /// <p>Maximum number of alternative routes to be provided in the response, if available.</p>
    pub fn max_alternatives(&self) -> ::std::option::Option<i32> {
        self.max_alternatives
    }
    /// <p>Specifies the optimization criteria for calculating a route.</p>
    /// <p>Default Value: <code>FastestRoute</code></p>
    pub fn optimize_routing_for(&self) -> ::std::option::Option<&crate::types::RoutingObjective> {
        self.optimize_routing_for.as_ref()
    }
    /// <p>The start position for the route.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.origin.is_none()`.
    pub fn origin(&self) -> &[f64] {
        self.origin.as_deref().unwrap_or_default()
    }
    /// <p>Origin related options.</p>
    pub fn origin_options(&self) -> ::std::option::Option<&crate::types::RouteOriginOptions> {
        self.origin_options.as_ref()
    }
    /// <p>A list of optional features such as SpeedLimit that can be requested for a Span. A span is a section of a Leg for which the requested features have the same values.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.span_additional_features.is_none()`.
    pub fn span_additional_features(&self) -> &[crate::types::RouteSpanAdditionalFeature] {
        self.span_additional_features.as_deref().unwrap_or_default()
    }
    /// <p>Toll related options.</p>
    pub fn tolls(&self) -> ::std::option::Option<&crate::types::RouteTollOptions> {
        self.tolls.as_ref()
    }
    /// <p>Traffic related options.</p>
    pub fn traffic(&self) -> ::std::option::Option<&crate::types::RouteTrafficOptions> {
        self.traffic.as_ref()
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn travel_mode(&self) -> ::std::option::Option<&crate::types::RouteTravelMode> {
        self.travel_mode.as_ref()
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn travel_mode_options(&self) -> ::std::option::Option<&crate::types::RouteTravelModeOptions> {
        self.travel_mode_options.as_ref()
    }
    /// <p>Type of step returned by the response. Default provides basic steps intended for web based applications. TurnByTurn provides detailed instructions with more granularity intended for a turn based navigation system.</p>
    pub fn travel_step_type(&self) -> ::std::option::Option<&crate::types::RouteTravelStepType> {
        self.travel_step_type.as_ref()
    }
    /// <p>List of waypoints between the Origin and Destination.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.waypoints.is_none()`.
    pub fn waypoints(&self) -> &[crate::types::RouteWaypoint] {
        self.waypoints.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for CalculateRoutesInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CalculateRoutesInput");
        formatter.field("allow", &self.allow);
        formatter.field("arrival_time", &self.arrival_time);
        formatter.field("avoid", &self.avoid);
        formatter.field("depart_now", &self.depart_now);
        formatter.field("departure_time", &self.departure_time);
        formatter.field("destination", &"*** Sensitive Data Redacted ***");
        formatter.field("destination_options", &self.destination_options);
        formatter.field("driver", &self.driver);
        formatter.field("exclude", &self.exclude);
        formatter.field("instructions_measurement_system", &self.instructions_measurement_system);
        formatter.field("key", &"*** Sensitive Data Redacted ***");
        formatter.field("languages", &self.languages);
        formatter.field("leg_additional_features", &self.leg_additional_features);
        formatter.field("leg_geometry_format", &self.leg_geometry_format);
        formatter.field("max_alternatives", &self.max_alternatives);
        formatter.field("optimize_routing_for", &self.optimize_routing_for);
        formatter.field("origin", &"*** Sensitive Data Redacted ***");
        formatter.field("origin_options", &self.origin_options);
        formatter.field("span_additional_features", &self.span_additional_features);
        formatter.field("tolls", &self.tolls);
        formatter.field("traffic", &self.traffic);
        formatter.field("travel_mode", &self.travel_mode);
        formatter.field("travel_mode_options", &self.travel_mode_options);
        formatter.field("travel_step_type", &self.travel_step_type);
        formatter.field("waypoints", &self.waypoints);
        formatter.finish()
    }
}
impl CalculateRoutesInput {
    /// Creates a new builder-style object to manufacture [`CalculateRoutesInput`](crate::operation::calculate_routes::CalculateRoutesInput).
    pub fn builder() -> crate::operation::calculate_routes::builders::CalculateRoutesInputBuilder {
        crate::operation::calculate_routes::builders::CalculateRoutesInputBuilder::default()
    }
}

/// A builder for [`CalculateRoutesInput`](crate::operation::calculate_routes::CalculateRoutesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CalculateRoutesInputBuilder {
    pub(crate) allow: ::std::option::Option<crate::types::RouteAllowOptions>,
    pub(crate) arrival_time: ::std::option::Option<::std::string::String>,
    pub(crate) avoid: ::std::option::Option<crate::types::RouteAvoidanceOptions>,
    pub(crate) depart_now: ::std::option::Option<bool>,
    pub(crate) departure_time: ::std::option::Option<::std::string::String>,
    pub(crate) destination: ::std::option::Option<::std::vec::Vec<f64>>,
    pub(crate) destination_options: ::std::option::Option<crate::types::RouteDestinationOptions>,
    pub(crate) driver: ::std::option::Option<crate::types::RouteDriverOptions>,
    pub(crate) exclude: ::std::option::Option<crate::types::RouteExclusionOptions>,
    pub(crate) instructions_measurement_system: ::std::option::Option<crate::types::MeasurementSystem>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) languages: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) leg_additional_features: ::std::option::Option<::std::vec::Vec<crate::types::RouteLegAdditionalFeature>>,
    pub(crate) leg_geometry_format: ::std::option::Option<crate::types::GeometryFormat>,
    pub(crate) max_alternatives: ::std::option::Option<i32>,
    pub(crate) optimize_routing_for: ::std::option::Option<crate::types::RoutingObjective>,
    pub(crate) origin: ::std::option::Option<::std::vec::Vec<f64>>,
    pub(crate) origin_options: ::std::option::Option<crate::types::RouteOriginOptions>,
    pub(crate) span_additional_features: ::std::option::Option<::std::vec::Vec<crate::types::RouteSpanAdditionalFeature>>,
    pub(crate) tolls: ::std::option::Option<crate::types::RouteTollOptions>,
    pub(crate) traffic: ::std::option::Option<crate::types::RouteTrafficOptions>,
    pub(crate) travel_mode: ::std::option::Option<crate::types::RouteTravelMode>,
    pub(crate) travel_mode_options: ::std::option::Option<crate::types::RouteTravelModeOptions>,
    pub(crate) travel_step_type: ::std::option::Option<crate::types::RouteTravelStepType>,
    pub(crate) waypoints: ::std::option::Option<::std::vec::Vec<crate::types::RouteWaypoint>>,
}
impl CalculateRoutesInputBuilder {
    /// <p>Features that are allowed while calculating a route.</p>
    pub fn allow(mut self, input: crate::types::RouteAllowOptions) -> Self {
        self.allow = ::std::option::Option::Some(input);
        self
    }
    /// <p>Features that are allowed while calculating a route.</p>
    pub fn set_allow(mut self, input: ::std::option::Option<crate::types::RouteAllowOptions>) -> Self {
        self.allow = input;
        self
    }
    /// <p>Features that are allowed while calculating a route.</p>
    pub fn get_allow(&self) -> &::std::option::Option<crate::types::RouteAllowOptions> {
        &self.allow
    }
    /// <p>Time of arrival at the destination.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn arrival_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arrival_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Time of arrival at the destination.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn set_arrival_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arrival_time = input;
        self
    }
    /// <p>Time of arrival at the destination.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn get_arrival_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.arrival_time
    }
    /// <p>Features that are avoided while calculating a route. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, it violates the avoidance and the returned response produces a notice for the violation.</p>
    pub fn avoid(mut self, input: crate::types::RouteAvoidanceOptions) -> Self {
        self.avoid = ::std::option::Option::Some(input);
        self
    }
    /// <p>Features that are avoided while calculating a route. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, it violates the avoidance and the returned response produces a notice for the violation.</p>
    pub fn set_avoid(mut self, input: ::std::option::Option<crate::types::RouteAvoidanceOptions>) -> Self {
        self.avoid = input;
        self
    }
    /// <p>Features that are avoided while calculating a route. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, it violates the avoidance and the returned response produces a notice for the violation.</p>
    pub fn get_avoid(&self) -> &::std::option::Option<crate::types::RouteAvoidanceOptions> {
        &self.avoid
    }
    /// <p>Uses the current time as the time of departure.</p>
    pub fn depart_now(mut self, input: bool) -> Self {
        self.depart_now = ::std::option::Option::Some(input);
        self
    }
    /// <p>Uses the current time as the time of departure.</p>
    pub fn set_depart_now(mut self, input: ::std::option::Option<bool>) -> Self {
        self.depart_now = input;
        self
    }
    /// <p>Uses the current time as the time of departure.</p>
    pub fn get_depart_now(&self) -> &::std::option::Option<bool> {
        &self.depart_now
    }
    /// <p>Time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn departure_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.departure_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn set_departure_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.departure_time = input;
        self
    }
    /// <p>Time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn get_departure_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.departure_time
    }
    /// Appends an item to `destination`.
    ///
    /// To override the contents of this collection use [`set_destination`](Self::set_destination).
    ///
    /// <p>The final position for the route. In the World Geodetic System (WGS 84) format: <code>\[longitude, latitude\]</code>.</p>
    pub fn destination(mut self, input: f64) -> Self {
        let mut v = self.destination.unwrap_or_default();
        v.push(input);
        self.destination = ::std::option::Option::Some(v);
        self
    }
    /// <p>The final position for the route. In the World Geodetic System (WGS 84) format: <code>\[longitude, latitude\]</code>.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The final position for the route. In the World Geodetic System (WGS 84) format: <code>\[longitude, latitude\]</code>.</p>
    pub fn get_destination(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.destination
    }
    /// <p>Destination related options.</p>
    pub fn destination_options(mut self, input: crate::types::RouteDestinationOptions) -> Self {
        self.destination_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Destination related options.</p>
    pub fn set_destination_options(mut self, input: ::std::option::Option<crate::types::RouteDestinationOptions>) -> Self {
        self.destination_options = input;
        self
    }
    /// <p>Destination related options.</p>
    pub fn get_destination_options(&self) -> &::std::option::Option<crate::types::RouteDestinationOptions> {
        &self.destination_options
    }
    /// <p>Driver related options.</p>
    pub fn driver(mut self, input: crate::types::RouteDriverOptions) -> Self {
        self.driver = ::std::option::Option::Some(input);
        self
    }
    /// <p>Driver related options.</p>
    pub fn set_driver(mut self, input: ::std::option::Option<crate::types::RouteDriverOptions>) -> Self {
        self.driver = input;
        self
    }
    /// <p>Driver related options.</p>
    pub fn get_driver(&self) -> &::std::option::Option<crate::types::RouteDriverOptions> {
        &self.driver
    }
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub fn exclude(mut self, input: crate::types::RouteExclusionOptions) -> Self {
        self.exclude = ::std::option::Option::Some(input);
        self
    }
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub fn set_exclude(mut self, input: ::std::option::Option<crate::types::RouteExclusionOptions>) -> Self {
        self.exclude = input;
        self
    }
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub fn get_exclude(&self) -> &::std::option::Option<crate::types::RouteExclusionOptions> {
        &self.exclude
    }
    /// <p>Measurement system to be used for instructions within steps in the response.</p>
    pub fn instructions_measurement_system(mut self, input: crate::types::MeasurementSystem) -> Self {
        self.instructions_measurement_system = ::std::option::Option::Some(input);
        self
    }
    /// <p>Measurement system to be used for instructions within steps in the response.</p>
    pub fn set_instructions_measurement_system(mut self, input: ::std::option::Option<crate::types::MeasurementSystem>) -> Self {
        self.instructions_measurement_system = input;
        self
    }
    /// <p>Measurement system to be used for instructions within steps in the response.</p>
    pub fn get_instructions_measurement_system(&self) -> &::std::option::Option<crate::types::MeasurementSystem> {
        &self.instructions_measurement_system
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// Appends an item to `languages`.
    ///
    /// To override the contents of this collection use [`set_languages`](Self::set_languages).
    ///
    /// <p>List of languages for instructions within steps in the response.</p><note>
    /// <p>Instructions in the requested language are returned only if they are available.</p>
    /// </note>
    pub fn languages(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.languages.unwrap_or_default();
        v.push(input.into());
        self.languages = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of languages for instructions within steps in the response.</p><note>
    /// <p>Instructions in the requested language are returned only if they are available.</p>
    /// </note>
    pub fn set_languages(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.languages = input;
        self
    }
    /// <p>List of languages for instructions within steps in the response.</p><note>
    /// <p>Instructions in the requested language are returned only if they are available.</p>
    /// </note>
    pub fn get_languages(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.languages
    }
    /// Appends an item to `leg_additional_features`.
    ///
    /// To override the contents of this collection use [`set_leg_additional_features`](Self::set_leg_additional_features).
    ///
    /// <p>A list of optional additional parameters such as timezone that can be requested for each result.</p>
    /// <ul>
    /// <li>
    /// <p><code>Elevation</code>: Retrieves the elevation information for each location.</p></li>
    /// <li>
    /// <p><code>Incidents</code>: Provides information on traffic incidents along the route.</p></li>
    /// <li>
    /// <p><code>PassThroughWaypoints</code>: Indicates waypoints that are passed through without stopping.</p></li>
    /// <li>
    /// <p><code>Summary</code>: Returns a summary of the route, including distance and duration.</p></li>
    /// <li>
    /// <p><code>Tolls</code>: Supplies toll cost information along the route.</p></li>
    /// <li>
    /// <p><code>TravelStepInstructions</code>: Provides step-by-step instructions for travel along the route.</p></li>
    /// <li>
    /// <p><code>TruckRoadTypes</code>: Returns information about road types suitable for trucks.</p></li>
    /// <li>
    /// <p><code>TypicalDuration</code>: Gives typical travel duration based on historical data.</p></li>
    /// <li>
    /// <p><code>Zones</code>: Specifies the time zone information for each waypoint.</p></li>
    /// </ul>
    pub fn leg_additional_features(mut self, input: crate::types::RouteLegAdditionalFeature) -> Self {
        let mut v = self.leg_additional_features.unwrap_or_default();
        v.push(input);
        self.leg_additional_features = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of optional additional parameters such as timezone that can be requested for each result.</p>
    /// <ul>
    /// <li>
    /// <p><code>Elevation</code>: Retrieves the elevation information for each location.</p></li>
    /// <li>
    /// <p><code>Incidents</code>: Provides information on traffic incidents along the route.</p></li>
    /// <li>
    /// <p><code>PassThroughWaypoints</code>: Indicates waypoints that are passed through without stopping.</p></li>
    /// <li>
    /// <p><code>Summary</code>: Returns a summary of the route, including distance and duration.</p></li>
    /// <li>
    /// <p><code>Tolls</code>: Supplies toll cost information along the route.</p></li>
    /// <li>
    /// <p><code>TravelStepInstructions</code>: Provides step-by-step instructions for travel along the route.</p></li>
    /// <li>
    /// <p><code>TruckRoadTypes</code>: Returns information about road types suitable for trucks.</p></li>
    /// <li>
    /// <p><code>TypicalDuration</code>: Gives typical travel duration based on historical data.</p></li>
    /// <li>
    /// <p><code>Zones</code>: Specifies the time zone information for each waypoint.</p></li>
    /// </ul>
    pub fn set_leg_additional_features(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteLegAdditionalFeature>>) -> Self {
        self.leg_additional_features = input;
        self
    }
    /// <p>A list of optional additional parameters such as timezone that can be requested for each result.</p>
    /// <ul>
    /// <li>
    /// <p><code>Elevation</code>: Retrieves the elevation information for each location.</p></li>
    /// <li>
    /// <p><code>Incidents</code>: Provides information on traffic incidents along the route.</p></li>
    /// <li>
    /// <p><code>PassThroughWaypoints</code>: Indicates waypoints that are passed through without stopping.</p></li>
    /// <li>
    /// <p><code>Summary</code>: Returns a summary of the route, including distance and duration.</p></li>
    /// <li>
    /// <p><code>Tolls</code>: Supplies toll cost information along the route.</p></li>
    /// <li>
    /// <p><code>TravelStepInstructions</code>: Provides step-by-step instructions for travel along the route.</p></li>
    /// <li>
    /// <p><code>TruckRoadTypes</code>: Returns information about road types suitable for trucks.</p></li>
    /// <li>
    /// <p><code>TypicalDuration</code>: Gives typical travel duration based on historical data.</p></li>
    /// <li>
    /// <p><code>Zones</code>: Specifies the time zone information for each waypoint.</p></li>
    /// </ul>
    pub fn get_leg_additional_features(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteLegAdditionalFeature>> {
        &self.leg_additional_features
    }
    /// <p>Specifies the format of the geometry returned for each leg of the route. You can choose between two different geometry encoding formats.</p>
    /// <p><code>FlexiblePolyline</code>: A compact and precise encoding format for the leg geometry. For more information on the format, see the GitHub repository for <a href="https://github.com/heremaps/flexible-polyline"> <code>FlexiblePolyline</code> </a>.</p>
    /// <p><code>Simple</code>: A less compact encoding, which is easier to decode but may be less precise and result in larger payloads.</p>
    pub fn leg_geometry_format(mut self, input: crate::types::GeometryFormat) -> Self {
        self.leg_geometry_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the format of the geometry returned for each leg of the route. You can choose between two different geometry encoding formats.</p>
    /// <p><code>FlexiblePolyline</code>: A compact and precise encoding format for the leg geometry. For more information on the format, see the GitHub repository for <a href="https://github.com/heremaps/flexible-polyline"> <code>FlexiblePolyline</code> </a>.</p>
    /// <p><code>Simple</code>: A less compact encoding, which is easier to decode but may be less precise and result in larger payloads.</p>
    pub fn set_leg_geometry_format(mut self, input: ::std::option::Option<crate::types::GeometryFormat>) -> Self {
        self.leg_geometry_format = input;
        self
    }
    /// <p>Specifies the format of the geometry returned for each leg of the route. You can choose between two different geometry encoding formats.</p>
    /// <p><code>FlexiblePolyline</code>: A compact and precise encoding format for the leg geometry. For more information on the format, see the GitHub repository for <a href="https://github.com/heremaps/flexible-polyline"> <code>FlexiblePolyline</code> </a>.</p>
    /// <p><code>Simple</code>: A less compact encoding, which is easier to decode but may be less precise and result in larger payloads.</p>
    pub fn get_leg_geometry_format(&self) -> &::std::option::Option<crate::types::GeometryFormat> {
        &self.leg_geometry_format
    }
    /// <p>Maximum number of alternative routes to be provided in the response, if available.</p>
    pub fn max_alternatives(mut self, input: i32) -> Self {
        self.max_alternatives = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maximum number of alternative routes to be provided in the response, if available.</p>
    pub fn set_max_alternatives(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_alternatives = input;
        self
    }
    /// <p>Maximum number of alternative routes to be provided in the response, if available.</p>
    pub fn get_max_alternatives(&self) -> &::std::option::Option<i32> {
        &self.max_alternatives
    }
    /// <p>Specifies the optimization criteria for calculating a route.</p>
    /// <p>Default Value: <code>FastestRoute</code></p>
    pub fn optimize_routing_for(mut self, input: crate::types::RoutingObjective) -> Self {
        self.optimize_routing_for = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the optimization criteria for calculating a route.</p>
    /// <p>Default Value: <code>FastestRoute</code></p>
    pub fn set_optimize_routing_for(mut self, input: ::std::option::Option<crate::types::RoutingObjective>) -> Self {
        self.optimize_routing_for = input;
        self
    }
    /// <p>Specifies the optimization criteria for calculating a route.</p>
    /// <p>Default Value: <code>FastestRoute</code></p>
    pub fn get_optimize_routing_for(&self) -> &::std::option::Option<crate::types::RoutingObjective> {
        &self.optimize_routing_for
    }
    /// Appends an item to `origin`.
    ///
    /// To override the contents of this collection use [`set_origin`](Self::set_origin).
    ///
    /// <p>The start position for the route.</p>
    pub fn origin(mut self, input: f64) -> Self {
        let mut v = self.origin.unwrap_or_default();
        v.push(input);
        self.origin = ::std::option::Option::Some(v);
        self
    }
    /// <p>The start position for the route.</p>
    pub fn set_origin(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.origin = input;
        self
    }
    /// <p>The start position for the route.</p>
    pub fn get_origin(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.origin
    }
    /// <p>Origin related options.</p>
    pub fn origin_options(mut self, input: crate::types::RouteOriginOptions) -> Self {
        self.origin_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Origin related options.</p>
    pub fn set_origin_options(mut self, input: ::std::option::Option<crate::types::RouteOriginOptions>) -> Self {
        self.origin_options = input;
        self
    }
    /// <p>Origin related options.</p>
    pub fn get_origin_options(&self) -> &::std::option::Option<crate::types::RouteOriginOptions> {
        &self.origin_options
    }
    /// Appends an item to `span_additional_features`.
    ///
    /// To override the contents of this collection use [`set_span_additional_features`](Self::set_span_additional_features).
    ///
    /// <p>A list of optional features such as SpeedLimit that can be requested for a Span. A span is a section of a Leg for which the requested features have the same values.</p>
    pub fn span_additional_features(mut self, input: crate::types::RouteSpanAdditionalFeature) -> Self {
        let mut v = self.span_additional_features.unwrap_or_default();
        v.push(input);
        self.span_additional_features = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of optional features such as SpeedLimit that can be requested for a Span. A span is a section of a Leg for which the requested features have the same values.</p>
    pub fn set_span_additional_features(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteSpanAdditionalFeature>>) -> Self {
        self.span_additional_features = input;
        self
    }
    /// <p>A list of optional features such as SpeedLimit that can be requested for a Span. A span is a section of a Leg for which the requested features have the same values.</p>
    pub fn get_span_additional_features(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteSpanAdditionalFeature>> {
        &self.span_additional_features
    }
    /// <p>Toll related options.</p>
    pub fn tolls(mut self, input: crate::types::RouteTollOptions) -> Self {
        self.tolls = ::std::option::Option::Some(input);
        self
    }
    /// <p>Toll related options.</p>
    pub fn set_tolls(mut self, input: ::std::option::Option<crate::types::RouteTollOptions>) -> Self {
        self.tolls = input;
        self
    }
    /// <p>Toll related options.</p>
    pub fn get_tolls(&self) -> &::std::option::Option<crate::types::RouteTollOptions> {
        &self.tolls
    }
    /// <p>Traffic related options.</p>
    pub fn traffic(mut self, input: crate::types::RouteTrafficOptions) -> Self {
        self.traffic = ::std::option::Option::Some(input);
        self
    }
    /// <p>Traffic related options.</p>
    pub fn set_traffic(mut self, input: ::std::option::Option<crate::types::RouteTrafficOptions>) -> Self {
        self.traffic = input;
        self
    }
    /// <p>Traffic related options.</p>
    pub fn get_traffic(&self) -> &::std::option::Option<crate::types::RouteTrafficOptions> {
        &self.traffic
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn travel_mode(mut self, input: crate::types::RouteTravelMode) -> Self {
        self.travel_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn set_travel_mode(mut self, input: ::std::option::Option<crate::types::RouteTravelMode>) -> Self {
        self.travel_mode = input;
        self
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn get_travel_mode(&self) -> &::std::option::Option<crate::types::RouteTravelMode> {
        &self.travel_mode
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn travel_mode_options(mut self, input: crate::types::RouteTravelModeOptions) -> Self {
        self.travel_mode_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn set_travel_mode_options(mut self, input: ::std::option::Option<crate::types::RouteTravelModeOptions>) -> Self {
        self.travel_mode_options = input;
        self
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn get_travel_mode_options(&self) -> &::std::option::Option<crate::types::RouteTravelModeOptions> {
        &self.travel_mode_options
    }
    /// <p>Type of step returned by the response. Default provides basic steps intended for web based applications. TurnByTurn provides detailed instructions with more granularity intended for a turn based navigation system.</p>
    pub fn travel_step_type(mut self, input: crate::types::RouteTravelStepType) -> Self {
        self.travel_step_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of step returned by the response. Default provides basic steps intended for web based applications. TurnByTurn provides detailed instructions with more granularity intended for a turn based navigation system.</p>
    pub fn set_travel_step_type(mut self, input: ::std::option::Option<crate::types::RouteTravelStepType>) -> Self {
        self.travel_step_type = input;
        self
    }
    /// <p>Type of step returned by the response. Default provides basic steps intended for web based applications. TurnByTurn provides detailed instructions with more granularity intended for a turn based navigation system.</p>
    pub fn get_travel_step_type(&self) -> &::std::option::Option<crate::types::RouteTravelStepType> {
        &self.travel_step_type
    }
    /// Appends an item to `waypoints`.
    ///
    /// To override the contents of this collection use [`set_waypoints`](Self::set_waypoints).
    ///
    /// <p>List of waypoints between the Origin and Destination.</p>
    pub fn waypoints(mut self, input: crate::types::RouteWaypoint) -> Self {
        let mut v = self.waypoints.unwrap_or_default();
        v.push(input);
        self.waypoints = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of waypoints between the Origin and Destination.</p>
    pub fn set_waypoints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteWaypoint>>) -> Self {
        self.waypoints = input;
        self
    }
    /// <p>List of waypoints between the Origin and Destination.</p>
    pub fn get_waypoints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteWaypoint>> {
        &self.waypoints
    }
    /// Consumes the builder and constructs a [`CalculateRoutesInput`](crate::operation::calculate_routes::CalculateRoutesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::calculate_routes::CalculateRoutesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::calculate_routes::CalculateRoutesInput {
            allow: self.allow,
            arrival_time: self.arrival_time,
            avoid: self.avoid,
            depart_now: self.depart_now,
            departure_time: self.departure_time,
            destination: self.destination,
            destination_options: self.destination_options,
            driver: self.driver,
            exclude: self.exclude,
            instructions_measurement_system: self.instructions_measurement_system,
            key: self.key,
            languages: self.languages,
            leg_additional_features: self.leg_additional_features,
            leg_geometry_format: self.leg_geometry_format,
            max_alternatives: self.max_alternatives,
            optimize_routing_for: self.optimize_routing_for,
            origin: self.origin,
            origin_options: self.origin_options,
            span_additional_features: self.span_additional_features,
            tolls: self.tolls,
            traffic: self.traffic,
            travel_mode: self.travel_mode,
            travel_mode_options: self.travel_mode_options,
            travel_step_type: self.travel_step_type,
            waypoints: self.waypoints,
        })
    }
}
impl ::std::fmt::Debug for CalculateRoutesInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CalculateRoutesInputBuilder");
        formatter.field("allow", &self.allow);
        formatter.field("arrival_time", &self.arrival_time);
        formatter.field("avoid", &self.avoid);
        formatter.field("depart_now", &self.depart_now);
        formatter.field("departure_time", &self.departure_time);
        formatter.field("destination", &"*** Sensitive Data Redacted ***");
        formatter.field("destination_options", &self.destination_options);
        formatter.field("driver", &self.driver);
        formatter.field("exclude", &self.exclude);
        formatter.field("instructions_measurement_system", &self.instructions_measurement_system);
        formatter.field("key", &"*** Sensitive Data Redacted ***");
        formatter.field("languages", &self.languages);
        formatter.field("leg_additional_features", &self.leg_additional_features);
        formatter.field("leg_geometry_format", &self.leg_geometry_format);
        formatter.field("max_alternatives", &self.max_alternatives);
        formatter.field("optimize_routing_for", &self.optimize_routing_for);
        formatter.field("origin", &"*** Sensitive Data Redacted ***");
        formatter.field("origin_options", &self.origin_options);
        formatter.field("span_additional_features", &self.span_additional_features);
        formatter.field("tolls", &self.tolls);
        formatter.field("traffic", &self.traffic);
        formatter.field("travel_mode", &self.travel_mode);
        formatter.field("travel_mode_options", &self.travel_mode_options);
        formatter.field("travel_step_type", &self.travel_step_type);
        formatter.field("waypoints", &self.waypoints);
        formatter.finish()
    }
}
