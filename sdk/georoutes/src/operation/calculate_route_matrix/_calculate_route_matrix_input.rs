// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CalculateRouteMatrixInput {
    /// <p>Features that are allowed while calculating a route.</p>
    pub allow: ::std::option::Option<crate::types::RouteMatrixAllowOptions>,
    /// <p>Features that are avoided while calculating a route. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, it violates the avoidance and the returned response produces a notice for the violation.</p>
    pub avoid: ::std::option::Option<crate::types::RouteMatrixAvoidanceOptions>,
    /// <p>Uses the current time as the time of departure.</p>
    pub depart_now: ::std::option::Option<bool>,
    /// <p>Time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub departure_time: ::std::option::Option<::std::string::String>,
    /// <p>List of destinations for the route.</p><note>
    /// <p>Route calculations are billed for each origin and destination pair. If you use a large matrix of origins and destinations, your costs will increase accordingly. See <a href="https://docs.aws.amazon.com/location/latest/developerguide/routes-pricing.html`"> Amazon Location's pricing page</a> for more information.</p>
    /// </note>
    pub destinations: ::std::option::Option<::std::vec::Vec<crate::types::RouteMatrixDestination>>,
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub exclude: ::std::option::Option<crate::types::RouteMatrixExclusionOptions>,
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub key: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the optimization criteria for calculating a route.</p>
    /// <p>Default Value: <code>FastestRoute</code></p>
    pub optimize_routing_for: ::std::option::Option<crate::types::RoutingObjective>,
    /// <p>The position in longitude and latitude for the origin.</p><note>
    /// <p>Route calculations are billed for each origin and destination pair. Using a large amount of Origins in a request can lead you to incur unexpected charges. See <a href="https://docs.aws.amazon.com/location/latest/developerguide/routes-pricing.html`"> Amazon Location's pricing page</a> for more information.</p>
    /// </note>
    pub origins: ::std::option::Option<::std::vec::Vec<crate::types::RouteMatrixOrigin>>,
    /// <p>Boundary within which the matrix is to be calculated. All data, origins and destinations outside the boundary are considered invalid.</p><note>
    /// <p>When request routing boundary was set as AutoCircle, the response routing boundary will return Circle derived from the AutoCircle settings.</p>
    /// </note>
    pub routing_boundary: ::std::option::Option<crate::types::RouteMatrixBoundary>,
    /// <p>Traffic related options.</p>
    pub traffic: ::std::option::Option<crate::types::RouteMatrixTrafficOptions>,
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub travel_mode: ::std::option::Option<crate::types::RouteMatrixTravelMode>,
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub travel_mode_options: ::std::option::Option<crate::types::RouteMatrixTravelModeOptions>,
}
impl CalculateRouteMatrixInput {
    /// <p>Features that are allowed while calculating a route.</p>
    pub fn allow(&self) -> ::std::option::Option<&crate::types::RouteMatrixAllowOptions> {
        self.allow.as_ref()
    }
    /// <p>Features that are avoided while calculating a route. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, it violates the avoidance and the returned response produces a notice for the violation.</p>
    pub fn avoid(&self) -> ::std::option::Option<&crate::types::RouteMatrixAvoidanceOptions> {
        self.avoid.as_ref()
    }
    /// <p>Uses the current time as the time of departure.</p>
    pub fn depart_now(&self) -> ::std::option::Option<bool> {
        self.depart_now
    }
    /// <p>Time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn departure_time(&self) -> ::std::option::Option<&str> {
        self.departure_time.as_deref()
    }
    /// <p>List of destinations for the route.</p><note>
    /// <p>Route calculations are billed for each origin and destination pair. If you use a large matrix of origins and destinations, your costs will increase accordingly. See <a href="https://docs.aws.amazon.com/location/latest/developerguide/routes-pricing.html`"> Amazon Location's pricing page</a> for more information.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destinations.is_none()`.
    pub fn destinations(&self) -> &[crate::types::RouteMatrixDestination] {
        self.destinations.as_deref().unwrap_or_default()
    }
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub fn exclude(&self) -> ::std::option::Option<&crate::types::RouteMatrixExclusionOptions> {
        self.exclude.as_ref()
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>Specifies the optimization criteria for calculating a route.</p>
    /// <p>Default Value: <code>FastestRoute</code></p>
    pub fn optimize_routing_for(&self) -> ::std::option::Option<&crate::types::RoutingObjective> {
        self.optimize_routing_for.as_ref()
    }
    /// <p>The position in longitude and latitude for the origin.</p><note>
    /// <p>Route calculations are billed for each origin and destination pair. Using a large amount of Origins in a request can lead you to incur unexpected charges. See <a href="https://docs.aws.amazon.com/location/latest/developerguide/routes-pricing.html`"> Amazon Location's pricing page</a> for more information.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.origins.is_none()`.
    pub fn origins(&self) -> &[crate::types::RouteMatrixOrigin] {
        self.origins.as_deref().unwrap_or_default()
    }
    /// <p>Boundary within which the matrix is to be calculated. All data, origins and destinations outside the boundary are considered invalid.</p><note>
    /// <p>When request routing boundary was set as AutoCircle, the response routing boundary will return Circle derived from the AutoCircle settings.</p>
    /// </note>
    pub fn routing_boundary(&self) -> ::std::option::Option<&crate::types::RouteMatrixBoundary> {
        self.routing_boundary.as_ref()
    }
    /// <p>Traffic related options.</p>
    pub fn traffic(&self) -> ::std::option::Option<&crate::types::RouteMatrixTrafficOptions> {
        self.traffic.as_ref()
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn travel_mode(&self) -> ::std::option::Option<&crate::types::RouteMatrixTravelMode> {
        self.travel_mode.as_ref()
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn travel_mode_options(&self) -> ::std::option::Option<&crate::types::RouteMatrixTravelModeOptions> {
        self.travel_mode_options.as_ref()
    }
}
impl ::std::fmt::Debug for CalculateRouteMatrixInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CalculateRouteMatrixInput");
        formatter.field("allow", &self.allow);
        formatter.field("avoid", &self.avoid);
        formatter.field("depart_now", &self.depart_now);
        formatter.field("departure_time", &self.departure_time);
        formatter.field("destinations", &self.destinations);
        formatter.field("exclude", &self.exclude);
        formatter.field("key", &"*** Sensitive Data Redacted ***");
        formatter.field("optimize_routing_for", &self.optimize_routing_for);
        formatter.field("origins", &self.origins);
        formatter.field("routing_boundary", &self.routing_boundary);
        formatter.field("traffic", &self.traffic);
        formatter.field("travel_mode", &self.travel_mode);
        formatter.field("travel_mode_options", &self.travel_mode_options);
        formatter.finish()
    }
}
impl CalculateRouteMatrixInput {
    /// Creates a new builder-style object to manufacture [`CalculateRouteMatrixInput`](crate::operation::calculate_route_matrix::CalculateRouteMatrixInput).
    pub fn builder() -> crate::operation::calculate_route_matrix::builders::CalculateRouteMatrixInputBuilder {
        crate::operation::calculate_route_matrix::builders::CalculateRouteMatrixInputBuilder::default()
    }
}

/// A builder for [`CalculateRouteMatrixInput`](crate::operation::calculate_route_matrix::CalculateRouteMatrixInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CalculateRouteMatrixInputBuilder {
    pub(crate) allow: ::std::option::Option<crate::types::RouteMatrixAllowOptions>,
    pub(crate) avoid: ::std::option::Option<crate::types::RouteMatrixAvoidanceOptions>,
    pub(crate) depart_now: ::std::option::Option<bool>,
    pub(crate) departure_time: ::std::option::Option<::std::string::String>,
    pub(crate) destinations: ::std::option::Option<::std::vec::Vec<crate::types::RouteMatrixDestination>>,
    pub(crate) exclude: ::std::option::Option<crate::types::RouteMatrixExclusionOptions>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) optimize_routing_for: ::std::option::Option<crate::types::RoutingObjective>,
    pub(crate) origins: ::std::option::Option<::std::vec::Vec<crate::types::RouteMatrixOrigin>>,
    pub(crate) routing_boundary: ::std::option::Option<crate::types::RouteMatrixBoundary>,
    pub(crate) traffic: ::std::option::Option<crate::types::RouteMatrixTrafficOptions>,
    pub(crate) travel_mode: ::std::option::Option<crate::types::RouteMatrixTravelMode>,
    pub(crate) travel_mode_options: ::std::option::Option<crate::types::RouteMatrixTravelModeOptions>,
}
impl CalculateRouteMatrixInputBuilder {
    /// <p>Features that are allowed while calculating a route.</p>
    pub fn allow(mut self, input: crate::types::RouteMatrixAllowOptions) -> Self {
        self.allow = ::std::option::Option::Some(input);
        self
    }
    /// <p>Features that are allowed while calculating a route.</p>
    pub fn set_allow(mut self, input: ::std::option::Option<crate::types::RouteMatrixAllowOptions>) -> Self {
        self.allow = input;
        self
    }
    /// <p>Features that are allowed while calculating a route.</p>
    pub fn get_allow(&self) -> &::std::option::Option<crate::types::RouteMatrixAllowOptions> {
        &self.allow
    }
    /// <p>Features that are avoided while calculating a route. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, it violates the avoidance and the returned response produces a notice for the violation.</p>
    pub fn avoid(mut self, input: crate::types::RouteMatrixAvoidanceOptions) -> Self {
        self.avoid = ::std::option::Option::Some(input);
        self
    }
    /// <p>Features that are avoided while calculating a route. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, it violates the avoidance and the returned response produces a notice for the violation.</p>
    pub fn set_avoid(mut self, input: ::std::option::Option<crate::types::RouteMatrixAvoidanceOptions>) -> Self {
        self.avoid = input;
        self
    }
    /// <p>Features that are avoided while calculating a route. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, it violates the avoidance and the returned response produces a notice for the violation.</p>
    pub fn get_avoid(&self) -> &::std::option::Option<crate::types::RouteMatrixAvoidanceOptions> {
        &self.avoid
    }
    /// <p>Uses the current time as the time of departure.</p>
    pub fn depart_now(mut self, input: bool) -> Self {
        self.depart_now = ::std::option::Option::Some(input);
        self
    }
    /// <p>Uses the current time as the time of departure.</p>
    pub fn set_depart_now(mut self, input: ::std::option::Option<bool>) -> Self {
        self.depart_now = input;
        self
    }
    /// <p>Uses the current time as the time of departure.</p>
    pub fn get_depart_now(&self) -> &::std::option::Option<bool> {
        &self.depart_now
    }
    /// <p>Time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn departure_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.departure_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn set_departure_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.departure_time = input;
        self
    }
    /// <p>Time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn get_departure_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.departure_time
    }
    /// Appends an item to `destinations`.
    ///
    /// To override the contents of this collection use [`set_destinations`](Self::set_destinations).
    ///
    /// <p>List of destinations for the route.</p><note>
    /// <p>Route calculations are billed for each origin and destination pair. If you use a large matrix of origins and destinations, your costs will increase accordingly. See <a href="https://docs.aws.amazon.com/location/latest/developerguide/routes-pricing.html`"> Amazon Location's pricing page</a> for more information.</p>
    /// </note>
    pub fn destinations(mut self, input: crate::types::RouteMatrixDestination) -> Self {
        let mut v = self.destinations.unwrap_or_default();
        v.push(input);
        self.destinations = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of destinations for the route.</p><note>
    /// <p>Route calculations are billed for each origin and destination pair. If you use a large matrix of origins and destinations, your costs will increase accordingly. See <a href="https://docs.aws.amazon.com/location/latest/developerguide/routes-pricing.html`"> Amazon Location's pricing page</a> for more information.</p>
    /// </note>
    pub fn set_destinations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteMatrixDestination>>) -> Self {
        self.destinations = input;
        self
    }
    /// <p>List of destinations for the route.</p><note>
    /// <p>Route calculations are billed for each origin and destination pair. If you use a large matrix of origins and destinations, your costs will increase accordingly. See <a href="https://docs.aws.amazon.com/location/latest/developerguide/routes-pricing.html`"> Amazon Location's pricing page</a> for more information.</p>
    /// </note>
    pub fn get_destinations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteMatrixDestination>> {
        &self.destinations
    }
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub fn exclude(mut self, input: crate::types::RouteMatrixExclusionOptions) -> Self {
        self.exclude = ::std::option::Option::Some(input);
        self
    }
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub fn set_exclude(mut self, input: ::std::option::Option<crate::types::RouteMatrixExclusionOptions>) -> Self {
        self.exclude = input;
        self
    }
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub fn get_exclude(&self) -> &::std::option::Option<crate::types::RouteMatrixExclusionOptions> {
        &self.exclude
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>Specifies the optimization criteria for calculating a route.</p>
    /// <p>Default Value: <code>FastestRoute</code></p>
    pub fn optimize_routing_for(mut self, input: crate::types::RoutingObjective) -> Self {
        self.optimize_routing_for = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the optimization criteria for calculating a route.</p>
    /// <p>Default Value: <code>FastestRoute</code></p>
    pub fn set_optimize_routing_for(mut self, input: ::std::option::Option<crate::types::RoutingObjective>) -> Self {
        self.optimize_routing_for = input;
        self
    }
    /// <p>Specifies the optimization criteria for calculating a route.</p>
    /// <p>Default Value: <code>FastestRoute</code></p>
    pub fn get_optimize_routing_for(&self) -> &::std::option::Option<crate::types::RoutingObjective> {
        &self.optimize_routing_for
    }
    /// Appends an item to `origins`.
    ///
    /// To override the contents of this collection use [`set_origins`](Self::set_origins).
    ///
    /// <p>The position in longitude and latitude for the origin.</p><note>
    /// <p>Route calculations are billed for each origin and destination pair. Using a large amount of Origins in a request can lead you to incur unexpected charges. See <a href="https://docs.aws.amazon.com/location/latest/developerguide/routes-pricing.html`"> Amazon Location's pricing page</a> for more information.</p>
    /// </note>
    pub fn origins(mut self, input: crate::types::RouteMatrixOrigin) -> Self {
        let mut v = self.origins.unwrap_or_default();
        v.push(input);
        self.origins = ::std::option::Option::Some(v);
        self
    }
    /// <p>The position in longitude and latitude for the origin.</p><note>
    /// <p>Route calculations are billed for each origin and destination pair. Using a large amount of Origins in a request can lead you to incur unexpected charges. See <a href="https://docs.aws.amazon.com/location/latest/developerguide/routes-pricing.html`"> Amazon Location's pricing page</a> for more information.</p>
    /// </note>
    pub fn set_origins(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteMatrixOrigin>>) -> Self {
        self.origins = input;
        self
    }
    /// <p>The position in longitude and latitude for the origin.</p><note>
    /// <p>Route calculations are billed for each origin and destination pair. Using a large amount of Origins in a request can lead you to incur unexpected charges. See <a href="https://docs.aws.amazon.com/location/latest/developerguide/routes-pricing.html`"> Amazon Location's pricing page</a> for more information.</p>
    /// </note>
    pub fn get_origins(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteMatrixOrigin>> {
        &self.origins
    }
    /// <p>Boundary within which the matrix is to be calculated. All data, origins and destinations outside the boundary are considered invalid.</p><note>
    /// <p>When request routing boundary was set as AutoCircle, the response routing boundary will return Circle derived from the AutoCircle settings.</p>
    /// </note>
    /// This field is required.
    pub fn routing_boundary(mut self, input: crate::types::RouteMatrixBoundary) -> Self {
        self.routing_boundary = ::std::option::Option::Some(input);
        self
    }
    /// <p>Boundary within which the matrix is to be calculated. All data, origins and destinations outside the boundary are considered invalid.</p><note>
    /// <p>When request routing boundary was set as AutoCircle, the response routing boundary will return Circle derived from the AutoCircle settings.</p>
    /// </note>
    pub fn set_routing_boundary(mut self, input: ::std::option::Option<crate::types::RouteMatrixBoundary>) -> Self {
        self.routing_boundary = input;
        self
    }
    /// <p>Boundary within which the matrix is to be calculated. All data, origins and destinations outside the boundary are considered invalid.</p><note>
    /// <p>When request routing boundary was set as AutoCircle, the response routing boundary will return Circle derived from the AutoCircle settings.</p>
    /// </note>
    pub fn get_routing_boundary(&self) -> &::std::option::Option<crate::types::RouteMatrixBoundary> {
        &self.routing_boundary
    }
    /// <p>Traffic related options.</p>
    pub fn traffic(mut self, input: crate::types::RouteMatrixTrafficOptions) -> Self {
        self.traffic = ::std::option::Option::Some(input);
        self
    }
    /// <p>Traffic related options.</p>
    pub fn set_traffic(mut self, input: ::std::option::Option<crate::types::RouteMatrixTrafficOptions>) -> Self {
        self.traffic = input;
        self
    }
    /// <p>Traffic related options.</p>
    pub fn get_traffic(&self) -> &::std::option::Option<crate::types::RouteMatrixTrafficOptions> {
        &self.traffic
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn travel_mode(mut self, input: crate::types::RouteMatrixTravelMode) -> Self {
        self.travel_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn set_travel_mode(mut self, input: ::std::option::Option<crate::types::RouteMatrixTravelMode>) -> Self {
        self.travel_mode = input;
        self
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn get_travel_mode(&self) -> &::std::option::Option<crate::types::RouteMatrixTravelMode> {
        &self.travel_mode
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn travel_mode_options(mut self, input: crate::types::RouteMatrixTravelModeOptions) -> Self {
        self.travel_mode_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn set_travel_mode_options(mut self, input: ::std::option::Option<crate::types::RouteMatrixTravelModeOptions>) -> Self {
        self.travel_mode_options = input;
        self
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn get_travel_mode_options(&self) -> &::std::option::Option<crate::types::RouteMatrixTravelModeOptions> {
        &self.travel_mode_options
    }
    /// Consumes the builder and constructs a [`CalculateRouteMatrixInput`](crate::operation::calculate_route_matrix::CalculateRouteMatrixInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::calculate_route_matrix::CalculateRouteMatrixInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::calculate_route_matrix::CalculateRouteMatrixInput {
            allow: self.allow,
            avoid: self.avoid,
            depart_now: self.depart_now,
            departure_time: self.departure_time,
            destinations: self.destinations,
            exclude: self.exclude,
            key: self.key,
            optimize_routing_for: self.optimize_routing_for,
            origins: self.origins,
            routing_boundary: self.routing_boundary,
            traffic: self.traffic,
            travel_mode: self.travel_mode,
            travel_mode_options: self.travel_mode_options,
        })
    }
}
impl ::std::fmt::Debug for CalculateRouteMatrixInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CalculateRouteMatrixInputBuilder");
        formatter.field("allow", &self.allow);
        formatter.field("avoid", &self.avoid);
        formatter.field("depart_now", &self.depart_now);
        formatter.field("departure_time", &self.departure_time);
        formatter.field("destinations", &self.destinations);
        formatter.field("exclude", &self.exclude);
        formatter.field("key", &"*** Sensitive Data Redacted ***");
        formatter.field("optimize_routing_for", &self.optimize_routing_for);
        formatter.field("origins", &self.origins);
        formatter.field("routing_boundary", &self.routing_boundary);
        formatter.field("traffic", &self.traffic);
        formatter.field("travel_mode", &self.travel_mode);
        formatter.field("travel_mode_options", &self.travel_mode_options);
        formatter.finish()
    }
}
