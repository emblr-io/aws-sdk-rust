// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct OptimizeWaypointsInput {
    /// <p>Features that are avoided. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, this setting is ignored.</p>
    pub avoid: ::std::option::Option<crate::types::WaypointOptimizationAvoidanceOptions>,
    /// <p>Clustering allows you to specify how nearby waypoints can be clustered to improve the optimized sequence.</p>
    pub clustering: ::std::option::Option<crate::types::WaypointOptimizationClusteringOptions>,
    /// <p>Departure time from the waypoint.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub departure_time: ::std::option::Option<::std::string::String>,
    /// <p>The final position for the route in the World Geodetic System (WGS 84) format: <code>\[longitude, latitude\]</code>.</p>
    pub destination: ::std::option::Option<::std::vec::Vec<f64>>,
    /// <p>Destination related options.</p>
    pub destination_options: ::std::option::Option<crate::types::WaypointOptimizationDestinationOptions>,
    /// <p>Driver related options.</p>
    pub driver: ::std::option::Option<crate::types::WaypointOptimizationDriverOptions>,
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub exclude: ::std::option::Option<crate::types::WaypointOptimizationExclusionOptions>,
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub key: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the optimization criteria for the calculated sequence.</p>
    /// <p>Default Value: <code>FastestRoute</code>.</p>
    pub optimize_sequencing_for: ::std::option::Option<crate::types::WaypointOptimizationSequencingObjective>,
    /// <p>The start position for the route.</p>
    pub origin: ::std::option::Option<::std::vec::Vec<f64>>,
    /// <p>Origin related options.</p>
    pub origin_options: ::std::option::Option<crate::types::WaypointOptimizationOriginOptions>,
    /// <p>Traffic-related options.</p>
    pub traffic: ::std::option::Option<crate::types::WaypointOptimizationTrafficOptions>,
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub travel_mode: ::std::option::Option<crate::types::WaypointOptimizationTravelMode>,
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub travel_mode_options: ::std::option::Option<crate::types::WaypointOptimizationTravelModeOptions>,
    /// <p>List of waypoints between the <code>Origin</code> and <code>Destination</code>.</p>
    pub waypoints: ::std::option::Option<::std::vec::Vec<crate::types::WaypointOptimizationWaypoint>>,
}
impl OptimizeWaypointsInput {
    /// <p>Features that are avoided. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, this setting is ignored.</p>
    pub fn avoid(&self) -> ::std::option::Option<&crate::types::WaypointOptimizationAvoidanceOptions> {
        self.avoid.as_ref()
    }
    /// <p>Clustering allows you to specify how nearby waypoints can be clustered to improve the optimized sequence.</p>
    pub fn clustering(&self) -> ::std::option::Option<&crate::types::WaypointOptimizationClusteringOptions> {
        self.clustering.as_ref()
    }
    /// <p>Departure time from the waypoint.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn departure_time(&self) -> ::std::option::Option<&str> {
        self.departure_time.as_deref()
    }
    /// <p>The final position for the route in the World Geodetic System (WGS 84) format: <code>\[longitude, latitude\]</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destination.is_none()`.
    pub fn destination(&self) -> &[f64] {
        self.destination.as_deref().unwrap_or_default()
    }
    /// <p>Destination related options.</p>
    pub fn destination_options(&self) -> ::std::option::Option<&crate::types::WaypointOptimizationDestinationOptions> {
        self.destination_options.as_ref()
    }
    /// <p>Driver related options.</p>
    pub fn driver(&self) -> ::std::option::Option<&crate::types::WaypointOptimizationDriverOptions> {
        self.driver.as_ref()
    }
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub fn exclude(&self) -> ::std::option::Option<&crate::types::WaypointOptimizationExclusionOptions> {
        self.exclude.as_ref()
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>Specifies the optimization criteria for the calculated sequence.</p>
    /// <p>Default Value: <code>FastestRoute</code>.</p>
    pub fn optimize_sequencing_for(&self) -> ::std::option::Option<&crate::types::WaypointOptimizationSequencingObjective> {
        self.optimize_sequencing_for.as_ref()
    }
    /// <p>The start position for the route.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.origin.is_none()`.
    pub fn origin(&self) -> &[f64] {
        self.origin.as_deref().unwrap_or_default()
    }
    /// <p>Origin related options.</p>
    pub fn origin_options(&self) -> ::std::option::Option<&crate::types::WaypointOptimizationOriginOptions> {
        self.origin_options.as_ref()
    }
    /// <p>Traffic-related options.</p>
    pub fn traffic(&self) -> ::std::option::Option<&crate::types::WaypointOptimizationTrafficOptions> {
        self.traffic.as_ref()
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn travel_mode(&self) -> ::std::option::Option<&crate::types::WaypointOptimizationTravelMode> {
        self.travel_mode.as_ref()
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn travel_mode_options(&self) -> ::std::option::Option<&crate::types::WaypointOptimizationTravelModeOptions> {
        self.travel_mode_options.as_ref()
    }
    /// <p>List of waypoints between the <code>Origin</code> and <code>Destination</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.waypoints.is_none()`.
    pub fn waypoints(&self) -> &[crate::types::WaypointOptimizationWaypoint] {
        self.waypoints.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for OptimizeWaypointsInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("OptimizeWaypointsInput");
        formatter.field("avoid", &self.avoid);
        formatter.field("clustering", &self.clustering);
        formatter.field("departure_time", &self.departure_time);
        formatter.field("destination", &"*** Sensitive Data Redacted ***");
        formatter.field("destination_options", &self.destination_options);
        formatter.field("driver", &self.driver);
        formatter.field("exclude", &self.exclude);
        formatter.field("key", &"*** Sensitive Data Redacted ***");
        formatter.field("optimize_sequencing_for", &self.optimize_sequencing_for);
        formatter.field("origin", &"*** Sensitive Data Redacted ***");
        formatter.field("origin_options", &self.origin_options);
        formatter.field("traffic", &self.traffic);
        formatter.field("travel_mode", &self.travel_mode);
        formatter.field("travel_mode_options", &self.travel_mode_options);
        formatter.field("waypoints", &self.waypoints);
        formatter.finish()
    }
}
impl OptimizeWaypointsInput {
    /// Creates a new builder-style object to manufacture [`OptimizeWaypointsInput`](crate::operation::optimize_waypoints::OptimizeWaypointsInput).
    pub fn builder() -> crate::operation::optimize_waypoints::builders::OptimizeWaypointsInputBuilder {
        crate::operation::optimize_waypoints::builders::OptimizeWaypointsInputBuilder::default()
    }
}

/// A builder for [`OptimizeWaypointsInput`](crate::operation::optimize_waypoints::OptimizeWaypointsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct OptimizeWaypointsInputBuilder {
    pub(crate) avoid: ::std::option::Option<crate::types::WaypointOptimizationAvoidanceOptions>,
    pub(crate) clustering: ::std::option::Option<crate::types::WaypointOptimizationClusteringOptions>,
    pub(crate) departure_time: ::std::option::Option<::std::string::String>,
    pub(crate) destination: ::std::option::Option<::std::vec::Vec<f64>>,
    pub(crate) destination_options: ::std::option::Option<crate::types::WaypointOptimizationDestinationOptions>,
    pub(crate) driver: ::std::option::Option<crate::types::WaypointOptimizationDriverOptions>,
    pub(crate) exclude: ::std::option::Option<crate::types::WaypointOptimizationExclusionOptions>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) optimize_sequencing_for: ::std::option::Option<crate::types::WaypointOptimizationSequencingObjective>,
    pub(crate) origin: ::std::option::Option<::std::vec::Vec<f64>>,
    pub(crate) origin_options: ::std::option::Option<crate::types::WaypointOptimizationOriginOptions>,
    pub(crate) traffic: ::std::option::Option<crate::types::WaypointOptimizationTrafficOptions>,
    pub(crate) travel_mode: ::std::option::Option<crate::types::WaypointOptimizationTravelMode>,
    pub(crate) travel_mode_options: ::std::option::Option<crate::types::WaypointOptimizationTravelModeOptions>,
    pub(crate) waypoints: ::std::option::Option<::std::vec::Vec<crate::types::WaypointOptimizationWaypoint>>,
}
impl OptimizeWaypointsInputBuilder {
    /// <p>Features that are avoided. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, this setting is ignored.</p>
    pub fn avoid(mut self, input: crate::types::WaypointOptimizationAvoidanceOptions) -> Self {
        self.avoid = ::std::option::Option::Some(input);
        self
    }
    /// <p>Features that are avoided. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, this setting is ignored.</p>
    pub fn set_avoid(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationAvoidanceOptions>) -> Self {
        self.avoid = input;
        self
    }
    /// <p>Features that are avoided. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, this setting is ignored.</p>
    pub fn get_avoid(&self) -> &::std::option::Option<crate::types::WaypointOptimizationAvoidanceOptions> {
        &self.avoid
    }
    /// <p>Clustering allows you to specify how nearby waypoints can be clustered to improve the optimized sequence.</p>
    pub fn clustering(mut self, input: crate::types::WaypointOptimizationClusteringOptions) -> Self {
        self.clustering = ::std::option::Option::Some(input);
        self
    }
    /// <p>Clustering allows you to specify how nearby waypoints can be clustered to improve the optimized sequence.</p>
    pub fn set_clustering(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationClusteringOptions>) -> Self {
        self.clustering = input;
        self
    }
    /// <p>Clustering allows you to specify how nearby waypoints can be clustered to improve the optimized sequence.</p>
    pub fn get_clustering(&self) -> &::std::option::Option<crate::types::WaypointOptimizationClusteringOptions> {
        &self.clustering
    }
    /// <p>Departure time from the waypoint.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn departure_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.departure_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Departure time from the waypoint.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn set_departure_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.departure_time = input;
        self
    }
    /// <p>Departure time from the waypoint.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn get_departure_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.departure_time
    }
    /// Appends an item to `destination`.
    ///
    /// To override the contents of this collection use [`set_destination`](Self::set_destination).
    ///
    /// <p>The final position for the route in the World Geodetic System (WGS 84) format: <code>\[longitude, latitude\]</code>.</p>
    pub fn destination(mut self, input: f64) -> Self {
        let mut v = self.destination.unwrap_or_default();
        v.push(input);
        self.destination = ::std::option::Option::Some(v);
        self
    }
    /// <p>The final position for the route in the World Geodetic System (WGS 84) format: <code>\[longitude, latitude\]</code>.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The final position for the route in the World Geodetic System (WGS 84) format: <code>\[longitude, latitude\]</code>.</p>
    pub fn get_destination(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.destination
    }
    /// <p>Destination related options.</p>
    pub fn destination_options(mut self, input: crate::types::WaypointOptimizationDestinationOptions) -> Self {
        self.destination_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Destination related options.</p>
    pub fn set_destination_options(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationDestinationOptions>) -> Self {
        self.destination_options = input;
        self
    }
    /// <p>Destination related options.</p>
    pub fn get_destination_options(&self) -> &::std::option::Option<crate::types::WaypointOptimizationDestinationOptions> {
        &self.destination_options
    }
    /// <p>Driver related options.</p>
    pub fn driver(mut self, input: crate::types::WaypointOptimizationDriverOptions) -> Self {
        self.driver = ::std::option::Option::Some(input);
        self
    }
    /// <p>Driver related options.</p>
    pub fn set_driver(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationDriverOptions>) -> Self {
        self.driver = input;
        self
    }
    /// <p>Driver related options.</p>
    pub fn get_driver(&self) -> &::std::option::Option<crate::types::WaypointOptimizationDriverOptions> {
        &self.driver
    }
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub fn exclude(mut self, input: crate::types::WaypointOptimizationExclusionOptions) -> Self {
        self.exclude = ::std::option::Option::Some(input);
        self
    }
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub fn set_exclude(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationExclusionOptions>) -> Self {
        self.exclude = input;
        self
    }
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub fn get_exclude(&self) -> &::std::option::Option<crate::types::WaypointOptimizationExclusionOptions> {
        &self.exclude
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>Specifies the optimization criteria for the calculated sequence.</p>
    /// <p>Default Value: <code>FastestRoute</code>.</p>
    pub fn optimize_sequencing_for(mut self, input: crate::types::WaypointOptimizationSequencingObjective) -> Self {
        self.optimize_sequencing_for = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the optimization criteria for the calculated sequence.</p>
    /// <p>Default Value: <code>FastestRoute</code>.</p>
    pub fn set_optimize_sequencing_for(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationSequencingObjective>) -> Self {
        self.optimize_sequencing_for = input;
        self
    }
    /// <p>Specifies the optimization criteria for the calculated sequence.</p>
    /// <p>Default Value: <code>FastestRoute</code>.</p>
    pub fn get_optimize_sequencing_for(&self) -> &::std::option::Option<crate::types::WaypointOptimizationSequencingObjective> {
        &self.optimize_sequencing_for
    }
    /// Appends an item to `origin`.
    ///
    /// To override the contents of this collection use [`set_origin`](Self::set_origin).
    ///
    /// <p>The start position for the route.</p>
    pub fn origin(mut self, input: f64) -> Self {
        let mut v = self.origin.unwrap_or_default();
        v.push(input);
        self.origin = ::std::option::Option::Some(v);
        self
    }
    /// <p>The start position for the route.</p>
    pub fn set_origin(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.origin = input;
        self
    }
    /// <p>The start position for the route.</p>
    pub fn get_origin(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.origin
    }
    /// <p>Origin related options.</p>
    pub fn origin_options(mut self, input: crate::types::WaypointOptimizationOriginOptions) -> Self {
        self.origin_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Origin related options.</p>
    pub fn set_origin_options(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationOriginOptions>) -> Self {
        self.origin_options = input;
        self
    }
    /// <p>Origin related options.</p>
    pub fn get_origin_options(&self) -> &::std::option::Option<crate::types::WaypointOptimizationOriginOptions> {
        &self.origin_options
    }
    /// <p>Traffic-related options.</p>
    pub fn traffic(mut self, input: crate::types::WaypointOptimizationTrafficOptions) -> Self {
        self.traffic = ::std::option::Option::Some(input);
        self
    }
    /// <p>Traffic-related options.</p>
    pub fn set_traffic(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationTrafficOptions>) -> Self {
        self.traffic = input;
        self
    }
    /// <p>Traffic-related options.</p>
    pub fn get_traffic(&self) -> &::std::option::Option<crate::types::WaypointOptimizationTrafficOptions> {
        &self.traffic
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn travel_mode(mut self, input: crate::types::WaypointOptimizationTravelMode) -> Self {
        self.travel_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn set_travel_mode(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationTravelMode>) -> Self {
        self.travel_mode = input;
        self
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn get_travel_mode(&self) -> &::std::option::Option<crate::types::WaypointOptimizationTravelMode> {
        &self.travel_mode
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn travel_mode_options(mut self, input: crate::types::WaypointOptimizationTravelModeOptions) -> Self {
        self.travel_mode_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn set_travel_mode_options(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationTravelModeOptions>) -> Self {
        self.travel_mode_options = input;
        self
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn get_travel_mode_options(&self) -> &::std::option::Option<crate::types::WaypointOptimizationTravelModeOptions> {
        &self.travel_mode_options
    }
    /// Appends an item to `waypoints`.
    ///
    /// To override the contents of this collection use [`set_waypoints`](Self::set_waypoints).
    ///
    /// <p>List of waypoints between the <code>Origin</code> and <code>Destination</code>.</p>
    pub fn waypoints(mut self, input: crate::types::WaypointOptimizationWaypoint) -> Self {
        let mut v = self.waypoints.unwrap_or_default();
        v.push(input);
        self.waypoints = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of waypoints between the <code>Origin</code> and <code>Destination</code>.</p>
    pub fn set_waypoints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WaypointOptimizationWaypoint>>) -> Self {
        self.waypoints = input;
        self
    }
    /// <p>List of waypoints between the <code>Origin</code> and <code>Destination</code>.</p>
    pub fn get_waypoints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WaypointOptimizationWaypoint>> {
        &self.waypoints
    }
    /// Consumes the builder and constructs a [`OptimizeWaypointsInput`](crate::operation::optimize_waypoints::OptimizeWaypointsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::optimize_waypoints::OptimizeWaypointsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::optimize_waypoints::OptimizeWaypointsInput {
            avoid: self.avoid,
            clustering: self.clustering,
            departure_time: self.departure_time,
            destination: self.destination,
            destination_options: self.destination_options,
            driver: self.driver,
            exclude: self.exclude,
            key: self.key,
            optimize_sequencing_for: self.optimize_sequencing_for,
            origin: self.origin,
            origin_options: self.origin_options,
            traffic: self.traffic,
            travel_mode: self.travel_mode,
            travel_mode_options: self.travel_mode_options,
            waypoints: self.waypoints,
        })
    }
}
impl ::std::fmt::Debug for OptimizeWaypointsInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("OptimizeWaypointsInputBuilder");
        formatter.field("avoid", &self.avoid);
        formatter.field("clustering", &self.clustering);
        formatter.field("departure_time", &self.departure_time);
        formatter.field("destination", &"*** Sensitive Data Redacted ***");
        formatter.field("destination_options", &self.destination_options);
        formatter.field("driver", &self.driver);
        formatter.field("exclude", &self.exclude);
        formatter.field("key", &"*** Sensitive Data Redacted ***");
        formatter.field("optimize_sequencing_for", &self.optimize_sequencing_for);
        formatter.field("origin", &"*** Sensitive Data Redacted ***");
        formatter.field("origin_options", &self.origin_options);
        formatter.field("traffic", &self.traffic);
        formatter.field("travel_mode", &self.travel_mode);
        formatter.field("travel_mode_options", &self.travel_mode_options);
        formatter.field("waypoints", &self.waypoints);
        formatter.finish()
    }
}
