// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SnapToRoadsInput {
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub key: ::std::option::Option<::std::string::String>,
    /// <p>Chooses what the returned SnappedGeometry format should be.</p>
    /// <p>Default Value: <code>FlexiblePolyline</code></p>
    pub snapped_geometry_format: ::std::option::Option<crate::types::GeometryFormat>,
    /// <p>The radius around the provided tracepoint that is considered for snapping.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    /// <p>Default value: <code>300</code></p>
    pub snap_radius: ::std::option::Option<i64>,
    /// <p>List of trace points to be snapped onto the road network.</p>
    pub trace_points: ::std::option::Option<::std::vec::Vec<crate::types::RoadSnapTracePoint>>,
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub travel_mode: ::std::option::Option<crate::types::RoadSnapTravelMode>,
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub travel_mode_options: ::std::option::Option<crate::types::RoadSnapTravelModeOptions>,
}
impl SnapToRoadsInput {
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>Chooses what the returned SnappedGeometry format should be.</p>
    /// <p>Default Value: <code>FlexiblePolyline</code></p>
    pub fn snapped_geometry_format(&self) -> ::std::option::Option<&crate::types::GeometryFormat> {
        self.snapped_geometry_format.as_ref()
    }
    /// <p>The radius around the provided tracepoint that is considered for snapping.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    /// <p>Default value: <code>300</code></p>
    pub fn snap_radius(&self) -> ::std::option::Option<i64> {
        self.snap_radius
    }
    /// <p>List of trace points to be snapped onto the road network.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.trace_points.is_none()`.
    pub fn trace_points(&self) -> &[crate::types::RoadSnapTracePoint] {
        self.trace_points.as_deref().unwrap_or_default()
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn travel_mode(&self) -> ::std::option::Option<&crate::types::RoadSnapTravelMode> {
        self.travel_mode.as_ref()
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn travel_mode_options(&self) -> ::std::option::Option<&crate::types::RoadSnapTravelModeOptions> {
        self.travel_mode_options.as_ref()
    }
}
impl ::std::fmt::Debug for SnapToRoadsInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SnapToRoadsInput");
        formatter.field("key", &"*** Sensitive Data Redacted ***");
        formatter.field("snapped_geometry_format", &self.snapped_geometry_format);
        formatter.field("snap_radius", &self.snap_radius);
        formatter.field("trace_points", &self.trace_points);
        formatter.field("travel_mode", &self.travel_mode);
        formatter.field("travel_mode_options", &self.travel_mode_options);
        formatter.finish()
    }
}
impl SnapToRoadsInput {
    /// Creates a new builder-style object to manufacture [`SnapToRoadsInput`](crate::operation::snap_to_roads::SnapToRoadsInput).
    pub fn builder() -> crate::operation::snap_to_roads::builders::SnapToRoadsInputBuilder {
        crate::operation::snap_to_roads::builders::SnapToRoadsInputBuilder::default()
    }
}

/// A builder for [`SnapToRoadsInput`](crate::operation::snap_to_roads::SnapToRoadsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct SnapToRoadsInputBuilder {
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) snapped_geometry_format: ::std::option::Option<crate::types::GeometryFormat>,
    pub(crate) snap_radius: ::std::option::Option<i64>,
    pub(crate) trace_points: ::std::option::Option<::std::vec::Vec<crate::types::RoadSnapTracePoint>>,
    pub(crate) travel_mode: ::std::option::Option<crate::types::RoadSnapTravelMode>,
    pub(crate) travel_mode_options: ::std::option::Option<crate::types::RoadSnapTravelModeOptions>,
}
impl SnapToRoadsInputBuilder {
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>Chooses what the returned SnappedGeometry format should be.</p>
    /// <p>Default Value: <code>FlexiblePolyline</code></p>
    pub fn snapped_geometry_format(mut self, input: crate::types::GeometryFormat) -> Self {
        self.snapped_geometry_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>Chooses what the returned SnappedGeometry format should be.</p>
    /// <p>Default Value: <code>FlexiblePolyline</code></p>
    pub fn set_snapped_geometry_format(mut self, input: ::std::option::Option<crate::types::GeometryFormat>) -> Self {
        self.snapped_geometry_format = input;
        self
    }
    /// <p>Chooses what the returned SnappedGeometry format should be.</p>
    /// <p>Default Value: <code>FlexiblePolyline</code></p>
    pub fn get_snapped_geometry_format(&self) -> &::std::option::Option<crate::types::GeometryFormat> {
        &self.snapped_geometry_format
    }
    /// <p>The radius around the provided tracepoint that is considered for snapping.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    /// <p>Default value: <code>300</code></p>
    pub fn snap_radius(mut self, input: i64) -> Self {
        self.snap_radius = ::std::option::Option::Some(input);
        self
    }
    /// <p>The radius around the provided tracepoint that is considered for snapping.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    /// <p>Default value: <code>300</code></p>
    pub fn set_snap_radius(mut self, input: ::std::option::Option<i64>) -> Self {
        self.snap_radius = input;
        self
    }
    /// <p>The radius around the provided tracepoint that is considered for snapping.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    /// <p>Default value: <code>300</code></p>
    pub fn get_snap_radius(&self) -> &::std::option::Option<i64> {
        &self.snap_radius
    }
    /// Appends an item to `trace_points`.
    ///
    /// To override the contents of this collection use [`set_trace_points`](Self::set_trace_points).
    ///
    /// <p>List of trace points to be snapped onto the road network.</p>
    pub fn trace_points(mut self, input: crate::types::RoadSnapTracePoint) -> Self {
        let mut v = self.trace_points.unwrap_or_default();
        v.push(input);
        self.trace_points = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of trace points to be snapped onto the road network.</p>
    pub fn set_trace_points(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RoadSnapTracePoint>>) -> Self {
        self.trace_points = input;
        self
    }
    /// <p>List of trace points to be snapped onto the road network.</p>
    pub fn get_trace_points(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RoadSnapTracePoint>> {
        &self.trace_points
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn travel_mode(mut self, input: crate::types::RoadSnapTravelMode) -> Self {
        self.travel_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn set_travel_mode(mut self, input: ::std::option::Option<crate::types::RoadSnapTravelMode>) -> Self {
        self.travel_mode = input;
        self
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn get_travel_mode(&self) -> &::std::option::Option<crate::types::RoadSnapTravelMode> {
        &self.travel_mode
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn travel_mode_options(mut self, input: crate::types::RoadSnapTravelModeOptions) -> Self {
        self.travel_mode_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn set_travel_mode_options(mut self, input: ::std::option::Option<crate::types::RoadSnapTravelModeOptions>) -> Self {
        self.travel_mode_options = input;
        self
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn get_travel_mode_options(&self) -> &::std::option::Option<crate::types::RoadSnapTravelModeOptions> {
        &self.travel_mode_options
    }
    /// Consumes the builder and constructs a [`SnapToRoadsInput`](crate::operation::snap_to_roads::SnapToRoadsInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::snap_to_roads::SnapToRoadsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::snap_to_roads::SnapToRoadsInput {
            key: self.key,
            snapped_geometry_format: self.snapped_geometry_format,
            snap_radius: self.snap_radius,
            trace_points: self.trace_points,
            travel_mode: self.travel_mode,
            travel_mode_options: self.travel_mode_options,
        })
    }
}
impl ::std::fmt::Debug for SnapToRoadsInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SnapToRoadsInputBuilder");
        formatter.field("key", &"*** Sensitive Data Redacted ***");
        formatter.field("snapped_geometry_format", &self.snapped_geometry_format);
        formatter.field("snap_radius", &self.snap_radius);
        formatter.field("trace_points", &self.trace_points);
        formatter.field("travel_mode", &self.travel_mode);
        formatter.field("travel_mode_options", &self.travel_mode_options);
        formatter.finish()
    }
}
