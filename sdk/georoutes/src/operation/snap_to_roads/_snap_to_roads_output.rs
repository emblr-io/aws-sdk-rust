// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SnapToRoadsOutput {
    /// <p>Notices are additional information returned that indicate issues that occurred during route calculation.</p>
    pub notices: ::std::vec::Vec<crate::types::RoadSnapNotice>,
    /// <p>The pricing bucket for which the query is charged at.</p>
    pub pricing_bucket: ::std::string::String,
    /// <p>The interpolated geometry for the snapped route onto the road network.</p>
    pub snapped_geometry: ::std::option::Option<crate::types::RoadSnapSnappedGeometry>,
    /// <p>Specifies the format of the geometry returned for each leg of the route.</p>
    pub snapped_geometry_format: crate::types::GeometryFormat,
    /// <p>The trace points snapped onto the road network.</p>
    pub snapped_trace_points: ::std::vec::Vec<crate::types::RoadSnapSnappedTracePoint>,
    _request_id: Option<String>,
}
impl SnapToRoadsOutput {
    /// <p>Notices are additional information returned that indicate issues that occurred during route calculation.</p>
    pub fn notices(&self) -> &[crate::types::RoadSnapNotice] {
        use std::ops::Deref;
        self.notices.deref()
    }
    /// <p>The pricing bucket for which the query is charged at.</p>
    pub fn pricing_bucket(&self) -> &str {
        use std::ops::Deref;
        self.pricing_bucket.deref()
    }
    /// <p>The interpolated geometry for the snapped route onto the road network.</p>
    pub fn snapped_geometry(&self) -> ::std::option::Option<&crate::types::RoadSnapSnappedGeometry> {
        self.snapped_geometry.as_ref()
    }
    /// <p>Specifies the format of the geometry returned for each leg of the route.</p>
    pub fn snapped_geometry_format(&self) -> &crate::types::GeometryFormat {
        &self.snapped_geometry_format
    }
    /// <p>The trace points snapped onto the road network.</p>
    pub fn snapped_trace_points(&self) -> &[crate::types::RoadSnapSnappedTracePoint] {
        use std::ops::Deref;
        self.snapped_trace_points.deref()
    }
}
impl ::aws_types::request_id::RequestId for SnapToRoadsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SnapToRoadsOutput {
    /// Creates a new builder-style object to manufacture [`SnapToRoadsOutput`](crate::operation::snap_to_roads::SnapToRoadsOutput).
    pub fn builder() -> crate::operation::snap_to_roads::builders::SnapToRoadsOutputBuilder {
        crate::operation::snap_to_roads::builders::SnapToRoadsOutputBuilder::default()
    }
}

/// A builder for [`SnapToRoadsOutput`](crate::operation::snap_to_roads::SnapToRoadsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SnapToRoadsOutputBuilder {
    pub(crate) notices: ::std::option::Option<::std::vec::Vec<crate::types::RoadSnapNotice>>,
    pub(crate) pricing_bucket: ::std::option::Option<::std::string::String>,
    pub(crate) snapped_geometry: ::std::option::Option<crate::types::RoadSnapSnappedGeometry>,
    pub(crate) snapped_geometry_format: ::std::option::Option<crate::types::GeometryFormat>,
    pub(crate) snapped_trace_points: ::std::option::Option<::std::vec::Vec<crate::types::RoadSnapSnappedTracePoint>>,
    _request_id: Option<String>,
}
impl SnapToRoadsOutputBuilder {
    /// Appends an item to `notices`.
    ///
    /// To override the contents of this collection use [`set_notices`](Self::set_notices).
    ///
    /// <p>Notices are additional information returned that indicate issues that occurred during route calculation.</p>
    pub fn notices(mut self, input: crate::types::RoadSnapNotice) -> Self {
        let mut v = self.notices.unwrap_or_default();
        v.push(input);
        self.notices = ::std::option::Option::Some(v);
        self
    }
    /// <p>Notices are additional information returned that indicate issues that occurred during route calculation.</p>
    pub fn set_notices(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RoadSnapNotice>>) -> Self {
        self.notices = input;
        self
    }
    /// <p>Notices are additional information returned that indicate issues that occurred during route calculation.</p>
    pub fn get_notices(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RoadSnapNotice>> {
        &self.notices
    }
    /// <p>The pricing bucket for which the query is charged at.</p>
    /// This field is required.
    pub fn pricing_bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pricing_bucket = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pricing bucket for which the query is charged at.</p>
    pub fn set_pricing_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pricing_bucket = input;
        self
    }
    /// <p>The pricing bucket for which the query is charged at.</p>
    pub fn get_pricing_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.pricing_bucket
    }
    /// <p>The interpolated geometry for the snapped route onto the road network.</p>
    pub fn snapped_geometry(mut self, input: crate::types::RoadSnapSnappedGeometry) -> Self {
        self.snapped_geometry = ::std::option::Option::Some(input);
        self
    }
    /// <p>The interpolated geometry for the snapped route onto the road network.</p>
    pub fn set_snapped_geometry(mut self, input: ::std::option::Option<crate::types::RoadSnapSnappedGeometry>) -> Self {
        self.snapped_geometry = input;
        self
    }
    /// <p>The interpolated geometry for the snapped route onto the road network.</p>
    pub fn get_snapped_geometry(&self) -> &::std::option::Option<crate::types::RoadSnapSnappedGeometry> {
        &self.snapped_geometry
    }
    /// <p>Specifies the format of the geometry returned for each leg of the route.</p>
    /// This field is required.
    pub fn snapped_geometry_format(mut self, input: crate::types::GeometryFormat) -> Self {
        self.snapped_geometry_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the format of the geometry returned for each leg of the route.</p>
    pub fn set_snapped_geometry_format(mut self, input: ::std::option::Option<crate::types::GeometryFormat>) -> Self {
        self.snapped_geometry_format = input;
        self
    }
    /// <p>Specifies the format of the geometry returned for each leg of the route.</p>
    pub fn get_snapped_geometry_format(&self) -> &::std::option::Option<crate::types::GeometryFormat> {
        &self.snapped_geometry_format
    }
    /// Appends an item to `snapped_trace_points`.
    ///
    /// To override the contents of this collection use [`set_snapped_trace_points`](Self::set_snapped_trace_points).
    ///
    /// <p>The trace points snapped onto the road network.</p>
    pub fn snapped_trace_points(mut self, input: crate::types::RoadSnapSnappedTracePoint) -> Self {
        let mut v = self.snapped_trace_points.unwrap_or_default();
        v.push(input);
        self.snapped_trace_points = ::std::option::Option::Some(v);
        self
    }
    /// <p>The trace points snapped onto the road network.</p>
    pub fn set_snapped_trace_points(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RoadSnapSnappedTracePoint>>) -> Self {
        self.snapped_trace_points = input;
        self
    }
    /// <p>The trace points snapped onto the road network.</p>
    pub fn get_snapped_trace_points(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RoadSnapSnappedTracePoint>> {
        &self.snapped_trace_points
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`SnapToRoadsOutput`](crate::operation::snap_to_roads::SnapToRoadsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`notices`](crate::operation::snap_to_roads::builders::SnapToRoadsOutputBuilder::notices)
    /// - [`pricing_bucket`](crate::operation::snap_to_roads::builders::SnapToRoadsOutputBuilder::pricing_bucket)
    /// - [`snapped_geometry_format`](crate::operation::snap_to_roads::builders::SnapToRoadsOutputBuilder::snapped_geometry_format)
    /// - [`snapped_trace_points`](crate::operation::snap_to_roads::builders::SnapToRoadsOutputBuilder::snapped_trace_points)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::snap_to_roads::SnapToRoadsOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::snap_to_roads::SnapToRoadsOutput {
            notices: self.notices.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "notices",
                    "notices was not specified but it is required when building SnapToRoadsOutput",
                )
            })?,
            pricing_bucket: self.pricing_bucket.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "pricing_bucket",
                    "pricing_bucket was not specified but it is required when building SnapToRoadsOutput",
                )
            })?,
            snapped_geometry: self.snapped_geometry,
            snapped_geometry_format: self.snapped_geometry_format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "snapped_geometry_format",
                    "snapped_geometry_format was not specified but it is required when building SnapToRoadsOutput",
                )
            })?,
            snapped_trace_points: self.snapped_trace_points.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "snapped_trace_points",
                    "snapped_trace_points was not specified but it is required when building SnapToRoadsOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
