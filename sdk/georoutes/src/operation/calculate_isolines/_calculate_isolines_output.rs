// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CalculateIsolinesOutput {
    /// <p>Time of arrival at the destination. This parameter is returned only if the Destination parameters was provided in the request.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub arrival_time: ::std::option::Option<::std::string::String>,
    /// <p>Time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub departure_time: ::std::option::Option<::std::string::String>,
    /// <p>The format of the returned IsolineGeometry.</p>
    /// <p>Default Value:<code>FlexiblePolyline</code></p>
    pub isoline_geometry_format: crate::types::GeometryFormat,
    /// <p>Calculated isolines and associated properties.</p>
    pub isolines: ::std::vec::Vec<crate::types::Isoline>,
    /// <p>The pricing bucket for which the query is charged at.</p>
    pub pricing_bucket: ::std::string::String,
    /// <p>Snapped destination that was used for the Isoline calculation.</p>
    pub snapped_destination: ::std::option::Option<::std::vec::Vec<f64>>,
    /// <p>Snapped origin that was used for the Isoline calculation.</p>
    pub snapped_origin: ::std::option::Option<::std::vec::Vec<f64>>,
    _request_id: Option<String>,
}
impl CalculateIsolinesOutput {
    /// <p>Time of arrival at the destination. This parameter is returned only if the Destination parameters was provided in the request.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn arrival_time(&self) -> ::std::option::Option<&str> {
        self.arrival_time.as_deref()
    }
    /// <p>Time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn departure_time(&self) -> ::std::option::Option<&str> {
        self.departure_time.as_deref()
    }
    /// <p>The format of the returned IsolineGeometry.</p>
    /// <p>Default Value:<code>FlexiblePolyline</code></p>
    pub fn isoline_geometry_format(&self) -> &crate::types::GeometryFormat {
        &self.isoline_geometry_format
    }
    /// <p>Calculated isolines and associated properties.</p>
    pub fn isolines(&self) -> &[crate::types::Isoline] {
        use std::ops::Deref;
        self.isolines.deref()
    }
    /// <p>The pricing bucket for which the query is charged at.</p>
    pub fn pricing_bucket(&self) -> &str {
        use std::ops::Deref;
        self.pricing_bucket.deref()
    }
    /// <p>Snapped destination that was used for the Isoline calculation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.snapped_destination.is_none()`.
    pub fn snapped_destination(&self) -> &[f64] {
        self.snapped_destination.as_deref().unwrap_or_default()
    }
    /// <p>Snapped origin that was used for the Isoline calculation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.snapped_origin.is_none()`.
    pub fn snapped_origin(&self) -> &[f64] {
        self.snapped_origin.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for CalculateIsolinesOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CalculateIsolinesOutput");
        formatter.field("arrival_time", &self.arrival_time);
        formatter.field("departure_time", &self.departure_time);
        formatter.field("isoline_geometry_format", &self.isoline_geometry_format);
        formatter.field("isolines", &self.isolines);
        formatter.field("pricing_bucket", &self.pricing_bucket);
        formatter.field("snapped_destination", &"*** Sensitive Data Redacted ***");
        formatter.field("snapped_origin", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for CalculateIsolinesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CalculateIsolinesOutput {
    /// Creates a new builder-style object to manufacture [`CalculateIsolinesOutput`](crate::operation::calculate_isolines::CalculateIsolinesOutput).
    pub fn builder() -> crate::operation::calculate_isolines::builders::CalculateIsolinesOutputBuilder {
        crate::operation::calculate_isolines::builders::CalculateIsolinesOutputBuilder::default()
    }
}

/// A builder for [`CalculateIsolinesOutput`](crate::operation::calculate_isolines::CalculateIsolinesOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CalculateIsolinesOutputBuilder {
    pub(crate) arrival_time: ::std::option::Option<::std::string::String>,
    pub(crate) departure_time: ::std::option::Option<::std::string::String>,
    pub(crate) isoline_geometry_format: ::std::option::Option<crate::types::GeometryFormat>,
    pub(crate) isolines: ::std::option::Option<::std::vec::Vec<crate::types::Isoline>>,
    pub(crate) pricing_bucket: ::std::option::Option<::std::string::String>,
    pub(crate) snapped_destination: ::std::option::Option<::std::vec::Vec<f64>>,
    pub(crate) snapped_origin: ::std::option::Option<::std::vec::Vec<f64>>,
    _request_id: Option<String>,
}
impl CalculateIsolinesOutputBuilder {
    /// <p>Time of arrival at the destination. This parameter is returned only if the Destination parameters was provided in the request.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn arrival_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arrival_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Time of arrival at the destination. This parameter is returned only if the Destination parameters was provided in the request.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn set_arrival_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arrival_time = input;
        self
    }
    /// <p>Time of arrival at the destination. This parameter is returned only if the Destination parameters was provided in the request.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn get_arrival_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.arrival_time
    }
    /// <p>Time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn departure_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.departure_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn set_departure_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.departure_time = input;
        self
    }
    /// <p>Time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn get_departure_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.departure_time
    }
    /// <p>The format of the returned IsolineGeometry.</p>
    /// <p>Default Value:<code>FlexiblePolyline</code></p>
    /// This field is required.
    pub fn isoline_geometry_format(mut self, input: crate::types::GeometryFormat) -> Self {
        self.isoline_geometry_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format of the returned IsolineGeometry.</p>
    /// <p>Default Value:<code>FlexiblePolyline</code></p>
    pub fn set_isoline_geometry_format(mut self, input: ::std::option::Option<crate::types::GeometryFormat>) -> Self {
        self.isoline_geometry_format = input;
        self
    }
    /// <p>The format of the returned IsolineGeometry.</p>
    /// <p>Default Value:<code>FlexiblePolyline</code></p>
    pub fn get_isoline_geometry_format(&self) -> &::std::option::Option<crate::types::GeometryFormat> {
        &self.isoline_geometry_format
    }
    /// Appends an item to `isolines`.
    ///
    /// To override the contents of this collection use [`set_isolines`](Self::set_isolines).
    ///
    /// <p>Calculated isolines and associated properties.</p>
    pub fn isolines(mut self, input: crate::types::Isoline) -> Self {
        let mut v = self.isolines.unwrap_or_default();
        v.push(input);
        self.isolines = ::std::option::Option::Some(v);
        self
    }
    /// <p>Calculated isolines and associated properties.</p>
    pub fn set_isolines(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Isoline>>) -> Self {
        self.isolines = input;
        self
    }
    /// <p>Calculated isolines and associated properties.</p>
    pub fn get_isolines(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Isoline>> {
        &self.isolines
    }
    /// <p>The pricing bucket for which the query is charged at.</p>
    /// This field is required.
    pub fn pricing_bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pricing_bucket = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pricing bucket for which the query is charged at.</p>
    pub fn set_pricing_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pricing_bucket = input;
        self
    }
    /// <p>The pricing bucket for which the query is charged at.</p>
    pub fn get_pricing_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.pricing_bucket
    }
    /// Appends an item to `snapped_destination`.
    ///
    /// To override the contents of this collection use [`set_snapped_destination`](Self::set_snapped_destination).
    ///
    /// <p>Snapped destination that was used for the Isoline calculation.</p>
    pub fn snapped_destination(mut self, input: f64) -> Self {
        let mut v = self.snapped_destination.unwrap_or_default();
        v.push(input);
        self.snapped_destination = ::std::option::Option::Some(v);
        self
    }
    /// <p>Snapped destination that was used for the Isoline calculation.</p>
    pub fn set_snapped_destination(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.snapped_destination = input;
        self
    }
    /// <p>Snapped destination that was used for the Isoline calculation.</p>
    pub fn get_snapped_destination(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.snapped_destination
    }
    /// Appends an item to `snapped_origin`.
    ///
    /// To override the contents of this collection use [`set_snapped_origin`](Self::set_snapped_origin).
    ///
    /// <p>Snapped origin that was used for the Isoline calculation.</p>
    pub fn snapped_origin(mut self, input: f64) -> Self {
        let mut v = self.snapped_origin.unwrap_or_default();
        v.push(input);
        self.snapped_origin = ::std::option::Option::Some(v);
        self
    }
    /// <p>Snapped origin that was used for the Isoline calculation.</p>
    pub fn set_snapped_origin(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.snapped_origin = input;
        self
    }
    /// <p>Snapped origin that was used for the Isoline calculation.</p>
    pub fn get_snapped_origin(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.snapped_origin
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CalculateIsolinesOutput`](crate::operation::calculate_isolines::CalculateIsolinesOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`isoline_geometry_format`](crate::operation::calculate_isolines::builders::CalculateIsolinesOutputBuilder::isoline_geometry_format)
    /// - [`isolines`](crate::operation::calculate_isolines::builders::CalculateIsolinesOutputBuilder::isolines)
    /// - [`pricing_bucket`](crate::operation::calculate_isolines::builders::CalculateIsolinesOutputBuilder::pricing_bucket)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::calculate_isolines::CalculateIsolinesOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::calculate_isolines::CalculateIsolinesOutput {
            arrival_time: self.arrival_time,
            departure_time: self.departure_time,
            isoline_geometry_format: self.isoline_geometry_format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "isoline_geometry_format",
                    "isoline_geometry_format was not specified but it is required when building CalculateIsolinesOutput",
                )
            })?,
            isolines: self.isolines.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "isolines",
                    "isolines was not specified but it is required when building CalculateIsolinesOutput",
                )
            })?,
            pricing_bucket: self.pricing_bucket.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "pricing_bucket",
                    "pricing_bucket was not specified but it is required when building CalculateIsolinesOutput",
                )
            })?,
            snapped_destination: self.snapped_destination,
            snapped_origin: self.snapped_origin,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for CalculateIsolinesOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CalculateIsolinesOutputBuilder");
        formatter.field("arrival_time", &self.arrival_time);
        formatter.field("departure_time", &self.departure_time);
        formatter.field("isoline_geometry_format", &self.isoline_geometry_format);
        formatter.field("isolines", &self.isolines);
        formatter.field("pricing_bucket", &self.pricing_bucket);
        formatter.field("snapped_destination", &"*** Sensitive Data Redacted ***");
        formatter.field("snapped_origin", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
