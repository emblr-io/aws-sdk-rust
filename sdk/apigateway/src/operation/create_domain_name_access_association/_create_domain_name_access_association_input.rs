// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateDomainNameAccessAssociationInput {
    /// <p>The ARN of the domain name.</p>
    pub domain_name_arn: ::std::option::Option<::std::string::String>,
    /// <p>The type of the domain name access association source.</p>
    pub access_association_source_type: ::std::option::Option<crate::types::AccessAssociationSourceType>,
    /// <p>The identifier of the domain name access association source. For a VPCE, the value is the VPC endpoint ID.</p>
    pub access_association_source: ::std::option::Option<::std::string::String>,
    /// <p>The key-value map of strings. The valid character set is \[a-zA-Z+-=._:/\]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateDomainNameAccessAssociationInput {
    /// <p>The ARN of the domain name.</p>
    pub fn domain_name_arn(&self) -> ::std::option::Option<&str> {
        self.domain_name_arn.as_deref()
    }
    /// <p>The type of the domain name access association source.</p>
    pub fn access_association_source_type(&self) -> ::std::option::Option<&crate::types::AccessAssociationSourceType> {
        self.access_association_source_type.as_ref()
    }
    /// <p>The identifier of the domain name access association source. For a VPCE, the value is the VPC endpoint ID.</p>
    pub fn access_association_source(&self) -> ::std::option::Option<&str> {
        self.access_association_source.as_deref()
    }
    /// <p>The key-value map of strings. The valid character set is \[a-zA-Z+-=._:/\]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateDomainNameAccessAssociationInput {
    /// Creates a new builder-style object to manufacture [`CreateDomainNameAccessAssociationInput`](crate::operation::create_domain_name_access_association::CreateDomainNameAccessAssociationInput).
    pub fn builder() -> crate::operation::create_domain_name_access_association::builders::CreateDomainNameAccessAssociationInputBuilder {
        crate::operation::create_domain_name_access_association::builders::CreateDomainNameAccessAssociationInputBuilder::default()
    }
}

/// A builder for [`CreateDomainNameAccessAssociationInput`](crate::operation::create_domain_name_access_association::CreateDomainNameAccessAssociationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateDomainNameAccessAssociationInputBuilder {
    pub(crate) domain_name_arn: ::std::option::Option<::std::string::String>,
    pub(crate) access_association_source_type: ::std::option::Option<crate::types::AccessAssociationSourceType>,
    pub(crate) access_association_source: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateDomainNameAccessAssociationInputBuilder {
    /// <p>The ARN of the domain name.</p>
    /// This field is required.
    pub fn domain_name_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the domain name.</p>
    pub fn set_domain_name_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name_arn = input;
        self
    }
    /// <p>The ARN of the domain name.</p>
    pub fn get_domain_name_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name_arn
    }
    /// <p>The type of the domain name access association source.</p>
    /// This field is required.
    pub fn access_association_source_type(mut self, input: crate::types::AccessAssociationSourceType) -> Self {
        self.access_association_source_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the domain name access association source.</p>
    pub fn set_access_association_source_type(mut self, input: ::std::option::Option<crate::types::AccessAssociationSourceType>) -> Self {
        self.access_association_source_type = input;
        self
    }
    /// <p>The type of the domain name access association source.</p>
    pub fn get_access_association_source_type(&self) -> &::std::option::Option<crate::types::AccessAssociationSourceType> {
        &self.access_association_source_type
    }
    /// <p>The identifier of the domain name access association source. For a VPCE, the value is the VPC endpoint ID.</p>
    /// This field is required.
    pub fn access_association_source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_association_source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the domain name access association source. For a VPCE, the value is the VPC endpoint ID.</p>
    pub fn set_access_association_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_association_source = input;
        self
    }
    /// <p>The identifier of the domain name access association source. For a VPCE, the value is the VPC endpoint ID.</p>
    pub fn get_access_association_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_association_source
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The key-value map of strings. The valid character set is \[a-zA-Z+-=._:/\]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The key-value map of strings. The valid character set is \[a-zA-Z+-=._:/\]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The key-value map of strings. The valid character set is \[a-zA-Z+-=._:/\]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateDomainNameAccessAssociationInput`](crate::operation::create_domain_name_access_association::CreateDomainNameAccessAssociationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_domain_name_access_association::CreateDomainNameAccessAssociationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_domain_name_access_association::CreateDomainNameAccessAssociationInput {
                domain_name_arn: self.domain_name_arn,
                access_association_source_type: self.access_association_source_type,
                access_association_source: self.access_association_source,
                tags: self.tags,
            },
        )
    }
}
