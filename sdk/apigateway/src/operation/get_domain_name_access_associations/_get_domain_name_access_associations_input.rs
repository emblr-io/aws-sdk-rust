// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDomainNameAccessAssociationsInput {
    /// <p>The current pagination position in the paged result set.</p>
    pub position: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>The owner of the domain name access association. Use <code>SELF</code> to only list the domain name access associations owned by your own account. Use <code>OTHER_ACCOUNTS</code> to list the domain name access associations with your private custom domain names that are owned by other AWS accounts.</p>
    pub resource_owner: ::std::option::Option<crate::types::ResourceOwner>,
}
impl GetDomainNameAccessAssociationsInput {
    /// <p>The current pagination position in the paged result set.</p>
    pub fn position(&self) -> ::std::option::Option<&str> {
        self.position.as_deref()
    }
    /// <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
    pub fn limit(&self) -> ::std::option::Option<i32> {
        self.limit
    }
    /// <p>The owner of the domain name access association. Use <code>SELF</code> to only list the domain name access associations owned by your own account. Use <code>OTHER_ACCOUNTS</code> to list the domain name access associations with your private custom domain names that are owned by other AWS accounts.</p>
    pub fn resource_owner(&self) -> ::std::option::Option<&crate::types::ResourceOwner> {
        self.resource_owner.as_ref()
    }
}
impl GetDomainNameAccessAssociationsInput {
    /// Creates a new builder-style object to manufacture [`GetDomainNameAccessAssociationsInput`](crate::operation::get_domain_name_access_associations::GetDomainNameAccessAssociationsInput).
    pub fn builder() -> crate::operation::get_domain_name_access_associations::builders::GetDomainNameAccessAssociationsInputBuilder {
        crate::operation::get_domain_name_access_associations::builders::GetDomainNameAccessAssociationsInputBuilder::default()
    }
}

/// A builder for [`GetDomainNameAccessAssociationsInput`](crate::operation::get_domain_name_access_associations::GetDomainNameAccessAssociationsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetDomainNameAccessAssociationsInputBuilder {
    pub(crate) position: ::std::option::Option<::std::string::String>,
    pub(crate) limit: ::std::option::Option<i32>,
    pub(crate) resource_owner: ::std::option::Option<crate::types::ResourceOwner>,
}
impl GetDomainNameAccessAssociationsInputBuilder {
    /// <p>The current pagination position in the paged result set.</p>
    pub fn position(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.position = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current pagination position in the paged result set.</p>
    pub fn set_position(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.position = input;
        self
    }
    /// <p>The current pagination position in the paged result set.</p>
    pub fn get_position(&self) -> &::std::option::Option<::std::string::String> {
        &self.position
    }
    /// <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        &self.limit
    }
    /// <p>The owner of the domain name access association. Use <code>SELF</code> to only list the domain name access associations owned by your own account. Use <code>OTHER_ACCOUNTS</code> to list the domain name access associations with your private custom domain names that are owned by other AWS accounts.</p>
    pub fn resource_owner(mut self, input: crate::types::ResourceOwner) -> Self {
        self.resource_owner = ::std::option::Option::Some(input);
        self
    }
    /// <p>The owner of the domain name access association. Use <code>SELF</code> to only list the domain name access associations owned by your own account. Use <code>OTHER_ACCOUNTS</code> to list the domain name access associations with your private custom domain names that are owned by other AWS accounts.</p>
    pub fn set_resource_owner(mut self, input: ::std::option::Option<crate::types::ResourceOwner>) -> Self {
        self.resource_owner = input;
        self
    }
    /// <p>The owner of the domain name access association. Use <code>SELF</code> to only list the domain name access associations owned by your own account. Use <code>OTHER_ACCOUNTS</code> to list the domain name access associations with your private custom domain names that are owned by other AWS accounts.</p>
    pub fn get_resource_owner(&self) -> &::std::option::Option<crate::types::ResourceOwner> {
        &self.resource_owner
    }
    /// Consumes the builder and constructs a [`GetDomainNameAccessAssociationsInput`](crate::operation::get_domain_name_access_associations::GetDomainNameAccessAssociationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_domain_name_access_associations::GetDomainNameAccessAssociationsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::get_domain_name_access_associations::GetDomainNameAccessAssociationsInput {
                position: self.position,
                limit: self.limit,
                resource_owner: self.resource_owner,
            },
        )
    }
}
