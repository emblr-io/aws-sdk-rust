// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListDistributionTenantsOutput {
    /// <p>A token used for pagination of results returned in the response. You can use the token from the previous request to define where the current request should begin.</p>
    pub next_marker: ::std::option::Option<::std::string::String>,
    /// <p>The list of distribution tenants that you retrieved.</p>
    pub distribution_tenant_list: ::std::option::Option<::std::vec::Vec<crate::types::DistributionTenantSummary>>,
    _request_id: Option<String>,
}
impl ListDistributionTenantsOutput {
    /// <p>A token used for pagination of results returned in the response. You can use the token from the previous request to define where the current request should begin.</p>
    pub fn next_marker(&self) -> ::std::option::Option<&str> {
        self.next_marker.as_deref()
    }
    /// <p>The list of distribution tenants that you retrieved.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.distribution_tenant_list.is_none()`.
    pub fn distribution_tenant_list(&self) -> &[crate::types::DistributionTenantSummary] {
        self.distribution_tenant_list.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for ListDistributionTenantsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListDistributionTenantsOutput {
    /// Creates a new builder-style object to manufacture [`ListDistributionTenantsOutput`](crate::operation::list_distribution_tenants::ListDistributionTenantsOutput).
    pub fn builder() -> crate::operation::list_distribution_tenants::builders::ListDistributionTenantsOutputBuilder {
        crate::operation::list_distribution_tenants::builders::ListDistributionTenantsOutputBuilder::default()
    }
}

/// A builder for [`ListDistributionTenantsOutput`](crate::operation::list_distribution_tenants::ListDistributionTenantsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListDistributionTenantsOutputBuilder {
    pub(crate) next_marker: ::std::option::Option<::std::string::String>,
    pub(crate) distribution_tenant_list: ::std::option::Option<::std::vec::Vec<crate::types::DistributionTenantSummary>>,
    _request_id: Option<String>,
}
impl ListDistributionTenantsOutputBuilder {
    /// <p>A token used for pagination of results returned in the response. You can use the token from the previous request to define where the current request should begin.</p>
    pub fn next_marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token used for pagination of results returned in the response. You can use the token from the previous request to define where the current request should begin.</p>
    pub fn set_next_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_marker = input;
        self
    }
    /// <p>A token used for pagination of results returned in the response. You can use the token from the previous request to define where the current request should begin.</p>
    pub fn get_next_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_marker
    }
    /// Appends an item to `distribution_tenant_list`.
    ///
    /// To override the contents of this collection use [`set_distribution_tenant_list`](Self::set_distribution_tenant_list).
    ///
    /// <p>The list of distribution tenants that you retrieved.</p>
    pub fn distribution_tenant_list(mut self, input: crate::types::DistributionTenantSummary) -> Self {
        let mut v = self.distribution_tenant_list.unwrap_or_default();
        v.push(input);
        self.distribution_tenant_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of distribution tenants that you retrieved.</p>
    pub fn set_distribution_tenant_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DistributionTenantSummary>>) -> Self {
        self.distribution_tenant_list = input;
        self
    }
    /// <p>The list of distribution tenants that you retrieved.</p>
    pub fn get_distribution_tenant_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DistributionTenantSummary>> {
        &self.distribution_tenant_list
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListDistributionTenantsOutput`](crate::operation::list_distribution_tenants::ListDistributionTenantsOutput).
    pub fn build(self) -> crate::operation::list_distribution_tenants::ListDistributionTenantsOutput {
        crate::operation::list_distribution_tenants::ListDistributionTenantsOutput {
            next_marker: self.next_marker,
            distribution_tenant_list: self.distribution_tenant_list,
            _request_id: self._request_id,
        }
    }
}
