// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociateDistributionTenantWebAclOutput {
    /// <p>The ID of the distribution tenant.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the WAF web ACL that you associated with the distribution tenant.</p>
    pub web_acl_arn: ::std::option::Option<::std::string::String>,
    /// <p>The current version of the distribution tenant.</p>
    pub e_tag: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl AssociateDistributionTenantWebAclOutput {
    /// <p>The ID of the distribution tenant.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ARN of the WAF web ACL that you associated with the distribution tenant.</p>
    pub fn web_acl_arn(&self) -> ::std::option::Option<&str> {
        self.web_acl_arn.as_deref()
    }
    /// <p>The current version of the distribution tenant.</p>
    pub fn e_tag(&self) -> ::std::option::Option<&str> {
        self.e_tag.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for AssociateDistributionTenantWebAclOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AssociateDistributionTenantWebAclOutput {
    /// Creates a new builder-style object to manufacture [`AssociateDistributionTenantWebAclOutput`](crate::operation::associate_distribution_tenant_web_acl::AssociateDistributionTenantWebAclOutput).
    pub fn builder() -> crate::operation::associate_distribution_tenant_web_acl::builders::AssociateDistributionTenantWebAclOutputBuilder {
        crate::operation::associate_distribution_tenant_web_acl::builders::AssociateDistributionTenantWebAclOutputBuilder::default()
    }
}

/// A builder for [`AssociateDistributionTenantWebAclOutput`](crate::operation::associate_distribution_tenant_web_acl::AssociateDistributionTenantWebAclOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssociateDistributionTenantWebAclOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) web_acl_arn: ::std::option::Option<::std::string::String>,
    pub(crate) e_tag: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl AssociateDistributionTenantWebAclOutputBuilder {
    /// <p>The ID of the distribution tenant.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the distribution tenant.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the distribution tenant.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ARN of the WAF web ACL that you associated with the distribution tenant.</p>
    pub fn web_acl_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.web_acl_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the WAF web ACL that you associated with the distribution tenant.</p>
    pub fn set_web_acl_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.web_acl_arn = input;
        self
    }
    /// <p>The ARN of the WAF web ACL that you associated with the distribution tenant.</p>
    pub fn get_web_acl_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.web_acl_arn
    }
    /// <p>The current version of the distribution tenant.</p>
    pub fn e_tag(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.e_tag = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current version of the distribution tenant.</p>
    pub fn set_e_tag(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.e_tag = input;
        self
    }
    /// <p>The current version of the distribution tenant.</p>
    pub fn get_e_tag(&self) -> &::std::option::Option<::std::string::String> {
        &self.e_tag
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`AssociateDistributionTenantWebAclOutput`](crate::operation::associate_distribution_tenant_web_acl::AssociateDistributionTenantWebAclOutput).
    pub fn build(self) -> crate::operation::associate_distribution_tenant_web_acl::AssociateDistributionTenantWebAclOutput {
        crate::operation::associate_distribution_tenant_web_acl::AssociateDistributionTenantWebAclOutput {
            id: self.id,
            web_acl_arn: self.web_acl_arn,
            e_tag: self.e_tag,
            _request_id: self._request_id,
        }
    }
}
