// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListDomainConflictsInput {
    /// <p>The domain to check for conflicts.</p>
    pub domain: ::std::option::Option<::std::string::String>,
    /// <p>The distribution resource identifier. This can be the distribution or distribution tenant that has a valid certificate, which covers the domain that you specify.</p>
    pub domain_control_validation_resource: ::std::option::Option<crate::types::DistributionResourceId>,
    /// <p>The maximum number of domain conflicts to return.</p>
    pub max_items: ::std::option::Option<i32>,
    /// <p>The marker for the next set of domain conflicts.</p>
    pub marker: ::std::option::Option<::std::string::String>,
}
impl ListDomainConflictsInput {
    /// <p>The domain to check for conflicts.</p>
    pub fn domain(&self) -> ::std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The distribution resource identifier. This can be the distribution or distribution tenant that has a valid certificate, which covers the domain that you specify.</p>
    pub fn domain_control_validation_resource(&self) -> ::std::option::Option<&crate::types::DistributionResourceId> {
        self.domain_control_validation_resource.as_ref()
    }
    /// <p>The maximum number of domain conflicts to return.</p>
    pub fn max_items(&self) -> ::std::option::Option<i32> {
        self.max_items
    }
    /// <p>The marker for the next set of domain conflicts.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl ListDomainConflictsInput {
    /// Creates a new builder-style object to manufacture [`ListDomainConflictsInput`](crate::operation::list_domain_conflicts::ListDomainConflictsInput).
    pub fn builder() -> crate::operation::list_domain_conflicts::builders::ListDomainConflictsInputBuilder {
        crate::operation::list_domain_conflicts::builders::ListDomainConflictsInputBuilder::default()
    }
}

/// A builder for [`ListDomainConflictsInput`](crate::operation::list_domain_conflicts::ListDomainConflictsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListDomainConflictsInputBuilder {
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) domain_control_validation_resource: ::std::option::Option<crate::types::DistributionResourceId>,
    pub(crate) max_items: ::std::option::Option<i32>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
}
impl ListDomainConflictsInputBuilder {
    /// <p>The domain to check for conflicts.</p>
    /// This field is required.
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain to check for conflicts.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The domain to check for conflicts.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>The distribution resource identifier. This can be the distribution or distribution tenant that has a valid certificate, which covers the domain that you specify.</p>
    /// This field is required.
    pub fn domain_control_validation_resource(mut self, input: crate::types::DistributionResourceId) -> Self {
        self.domain_control_validation_resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>The distribution resource identifier. This can be the distribution or distribution tenant that has a valid certificate, which covers the domain that you specify.</p>
    pub fn set_domain_control_validation_resource(mut self, input: ::std::option::Option<crate::types::DistributionResourceId>) -> Self {
        self.domain_control_validation_resource = input;
        self
    }
    /// <p>The distribution resource identifier. This can be the distribution or distribution tenant that has a valid certificate, which covers the domain that you specify.</p>
    pub fn get_domain_control_validation_resource(&self) -> &::std::option::Option<crate::types::DistributionResourceId> {
        &self.domain_control_validation_resource
    }
    /// <p>The maximum number of domain conflicts to return.</p>
    pub fn max_items(mut self, input: i32) -> Self {
        self.max_items = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of domain conflicts to return.</p>
    pub fn set_max_items(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_items = input;
        self
    }
    /// <p>The maximum number of domain conflicts to return.</p>
    pub fn get_max_items(&self) -> &::std::option::Option<i32> {
        &self.max_items
    }
    /// <p>The marker for the next set of domain conflicts.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The marker for the next set of domain conflicts.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>The marker for the next set of domain conflicts.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// Consumes the builder and constructs a [`ListDomainConflictsInput`](crate::operation::list_domain_conflicts::ListDomainConflictsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_domain_conflicts::ListDomainConflictsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_domain_conflicts::ListDomainConflictsInput {
            domain: self.domain,
            domain_control_validation_resource: self.domain_control_validation_resource,
            max_items: self.max_items,
            marker: self.marker,
        })
    }
}
