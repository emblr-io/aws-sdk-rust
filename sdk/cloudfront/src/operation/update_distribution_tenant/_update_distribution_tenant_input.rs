// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateDistributionTenantInput {
    /// <p>The ID of the distribution tenant.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The ID for the multi-tenant distribution.</p>
    pub distribution_id: ::std::option::Option<::std::string::String>,
    /// <p>The domains to update for the distribution tenant. A domain object can contain only a domain property. You must specify at least one domain. Each distribution tenant can have up to 5 domains.</p>
    pub domains: ::std::option::Option<::std::vec::Vec<crate::types::DomainItem>>,
    /// <p>Customizations for the distribution tenant. For each distribution tenant, you can specify the geographic restrictions, and the Amazon Resource Names (ARNs) for the ACM certificate and WAF web ACL. These are specific values that you can override or disable from the multi-tenant distribution that was used to create the distribution tenant.</p>
    pub customizations: ::std::option::Option<crate::types::Customizations>,
    /// <p>A list of parameter values to add to the resource. A parameter is specified as a key-value pair. A valid parameter value must exist for any parameter that is marked as required in the multi-tenant distribution.</p>
    pub parameters: ::std::option::Option<::std::vec::Vec<crate::types::Parameter>>,
    /// <p>The ID of the target connection group.</p>
    pub connection_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The value of the <code>ETag</code> header that you received when retrieving the distribution tenant to update. This value is returned in the response of the <code>GetDistributionTenant</code> API operation.</p>
    pub if_match: ::std::option::Option<::std::string::String>,
    /// <p>An object that contains the CloudFront managed ACM certificate request.</p>
    pub managed_certificate_request: ::std::option::Option<crate::types::ManagedCertificateRequest>,
    /// <p>Indicates whether the distribution tenant should be updated to an enabled state. If you update the distribution tenant and it's not enabled, the distribution tenant won't serve traffic.</p>
    pub enabled: ::std::option::Option<bool>,
}
impl UpdateDistributionTenantInput {
    /// <p>The ID of the distribution tenant.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ID for the multi-tenant distribution.</p>
    pub fn distribution_id(&self) -> ::std::option::Option<&str> {
        self.distribution_id.as_deref()
    }
    /// <p>The domains to update for the distribution tenant. A domain object can contain only a domain property. You must specify at least one domain. Each distribution tenant can have up to 5 domains.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.domains.is_none()`.
    pub fn domains(&self) -> &[crate::types::DomainItem] {
        self.domains.as_deref().unwrap_or_default()
    }
    /// <p>Customizations for the distribution tenant. For each distribution tenant, you can specify the geographic restrictions, and the Amazon Resource Names (ARNs) for the ACM certificate and WAF web ACL. These are specific values that you can override or disable from the multi-tenant distribution that was used to create the distribution tenant.</p>
    pub fn customizations(&self) -> ::std::option::Option<&crate::types::Customizations> {
        self.customizations.as_ref()
    }
    /// <p>A list of parameter values to add to the resource. A parameter is specified as a key-value pair. A valid parameter value must exist for any parameter that is marked as required in the multi-tenant distribution.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.parameters.is_none()`.
    pub fn parameters(&self) -> &[crate::types::Parameter] {
        self.parameters.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the target connection group.</p>
    pub fn connection_group_id(&self) -> ::std::option::Option<&str> {
        self.connection_group_id.as_deref()
    }
    /// <p>The value of the <code>ETag</code> header that you received when retrieving the distribution tenant to update. This value is returned in the response of the <code>GetDistributionTenant</code> API operation.</p>
    pub fn if_match(&self) -> ::std::option::Option<&str> {
        self.if_match.as_deref()
    }
    /// <p>An object that contains the CloudFront managed ACM certificate request.</p>
    pub fn managed_certificate_request(&self) -> ::std::option::Option<&crate::types::ManagedCertificateRequest> {
        self.managed_certificate_request.as_ref()
    }
    /// <p>Indicates whether the distribution tenant should be updated to an enabled state. If you update the distribution tenant and it's not enabled, the distribution tenant won't serve traffic.</p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
}
impl UpdateDistributionTenantInput {
    /// Creates a new builder-style object to manufacture [`UpdateDistributionTenantInput`](crate::operation::update_distribution_tenant::UpdateDistributionTenantInput).
    pub fn builder() -> crate::operation::update_distribution_tenant::builders::UpdateDistributionTenantInputBuilder {
        crate::operation::update_distribution_tenant::builders::UpdateDistributionTenantInputBuilder::default()
    }
}

/// A builder for [`UpdateDistributionTenantInput`](crate::operation::update_distribution_tenant::UpdateDistributionTenantInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateDistributionTenantInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) distribution_id: ::std::option::Option<::std::string::String>,
    pub(crate) domains: ::std::option::Option<::std::vec::Vec<crate::types::DomainItem>>,
    pub(crate) customizations: ::std::option::Option<crate::types::Customizations>,
    pub(crate) parameters: ::std::option::Option<::std::vec::Vec<crate::types::Parameter>>,
    pub(crate) connection_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) if_match: ::std::option::Option<::std::string::String>,
    pub(crate) managed_certificate_request: ::std::option::Option<crate::types::ManagedCertificateRequest>,
    pub(crate) enabled: ::std::option::Option<bool>,
}
impl UpdateDistributionTenantInputBuilder {
    /// <p>The ID of the distribution tenant.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the distribution tenant.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the distribution tenant.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ID for the multi-tenant distribution.</p>
    pub fn distribution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.distribution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID for the multi-tenant distribution.</p>
    pub fn set_distribution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.distribution_id = input;
        self
    }
    /// <p>The ID for the multi-tenant distribution.</p>
    pub fn get_distribution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.distribution_id
    }
    /// Appends an item to `domains`.
    ///
    /// To override the contents of this collection use [`set_domains`](Self::set_domains).
    ///
    /// <p>The domains to update for the distribution tenant. A domain object can contain only a domain property. You must specify at least one domain. Each distribution tenant can have up to 5 domains.</p>
    pub fn domains(mut self, input: crate::types::DomainItem) -> Self {
        let mut v = self.domains.unwrap_or_default();
        v.push(input);
        self.domains = ::std::option::Option::Some(v);
        self
    }
    /// <p>The domains to update for the distribution tenant. A domain object can contain only a domain property. You must specify at least one domain. Each distribution tenant can have up to 5 domains.</p>
    pub fn set_domains(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DomainItem>>) -> Self {
        self.domains = input;
        self
    }
    /// <p>The domains to update for the distribution tenant. A domain object can contain only a domain property. You must specify at least one domain. Each distribution tenant can have up to 5 domains.</p>
    pub fn get_domains(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DomainItem>> {
        &self.domains
    }
    /// <p>Customizations for the distribution tenant. For each distribution tenant, you can specify the geographic restrictions, and the Amazon Resource Names (ARNs) for the ACM certificate and WAF web ACL. These are specific values that you can override or disable from the multi-tenant distribution that was used to create the distribution tenant.</p>
    pub fn customizations(mut self, input: crate::types::Customizations) -> Self {
        self.customizations = ::std::option::Option::Some(input);
        self
    }
    /// <p>Customizations for the distribution tenant. For each distribution tenant, you can specify the geographic restrictions, and the Amazon Resource Names (ARNs) for the ACM certificate and WAF web ACL. These are specific values that you can override or disable from the multi-tenant distribution that was used to create the distribution tenant.</p>
    pub fn set_customizations(mut self, input: ::std::option::Option<crate::types::Customizations>) -> Self {
        self.customizations = input;
        self
    }
    /// <p>Customizations for the distribution tenant. For each distribution tenant, you can specify the geographic restrictions, and the Amazon Resource Names (ARNs) for the ACM certificate and WAF web ACL. These are specific values that you can override or disable from the multi-tenant distribution that was used to create the distribution tenant.</p>
    pub fn get_customizations(&self) -> &::std::option::Option<crate::types::Customizations> {
        &self.customizations
    }
    /// Appends an item to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>A list of parameter values to add to the resource. A parameter is specified as a key-value pair. A valid parameter value must exist for any parameter that is marked as required in the multi-tenant distribution.</p>
    pub fn parameters(mut self, input: crate::types::Parameter) -> Self {
        let mut v = self.parameters.unwrap_or_default();
        v.push(input);
        self.parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of parameter values to add to the resource. A parameter is specified as a key-value pair. A valid parameter value must exist for any parameter that is marked as required in the multi-tenant distribution.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Parameter>>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>A list of parameter values to add to the resource. A parameter is specified as a key-value pair. A valid parameter value must exist for any parameter that is marked as required in the multi-tenant distribution.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Parameter>> {
        &self.parameters
    }
    /// <p>The ID of the target connection group.</p>
    pub fn connection_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the target connection group.</p>
    pub fn set_connection_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_group_id = input;
        self
    }
    /// <p>The ID of the target connection group.</p>
    pub fn get_connection_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_group_id
    }
    /// <p>The value of the <code>ETag</code> header that you received when retrieving the distribution tenant to update. This value is returned in the response of the <code>GetDistributionTenant</code> API operation.</p>
    /// This field is required.
    pub fn if_match(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.if_match = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the <code>ETag</code> header that you received when retrieving the distribution tenant to update. This value is returned in the response of the <code>GetDistributionTenant</code> API operation.</p>
    pub fn set_if_match(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.if_match = input;
        self
    }
    /// <p>The value of the <code>ETag</code> header that you received when retrieving the distribution tenant to update. This value is returned in the response of the <code>GetDistributionTenant</code> API operation.</p>
    pub fn get_if_match(&self) -> &::std::option::Option<::std::string::String> {
        &self.if_match
    }
    /// <p>An object that contains the CloudFront managed ACM certificate request.</p>
    pub fn managed_certificate_request(mut self, input: crate::types::ManagedCertificateRequest) -> Self {
        self.managed_certificate_request = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains the CloudFront managed ACM certificate request.</p>
    pub fn set_managed_certificate_request(mut self, input: ::std::option::Option<crate::types::ManagedCertificateRequest>) -> Self {
        self.managed_certificate_request = input;
        self
    }
    /// <p>An object that contains the CloudFront managed ACM certificate request.</p>
    pub fn get_managed_certificate_request(&self) -> &::std::option::Option<crate::types::ManagedCertificateRequest> {
        &self.managed_certificate_request
    }
    /// <p>Indicates whether the distribution tenant should be updated to an enabled state. If you update the distribution tenant and it's not enabled, the distribution tenant won't serve traffic.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the distribution tenant should be updated to an enabled state. If you update the distribution tenant and it's not enabled, the distribution tenant won't serve traffic.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Indicates whether the distribution tenant should be updated to an enabled state. If you update the distribution tenant and it's not enabled, the distribution tenant won't serve traffic.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// Consumes the builder and constructs a [`UpdateDistributionTenantInput`](crate::operation::update_distribution_tenant::UpdateDistributionTenantInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_distribution_tenant::UpdateDistributionTenantInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_distribution_tenant::UpdateDistributionTenantInput {
            id: self.id,
            distribution_id: self.distribution_id,
            domains: self.domains,
            customizations: self.customizations,
            parameters: self.parameters,
            connection_group_id: self.connection_group_id,
            if_match: self.if_match,
            managed_certificate_request: self.managed_certificate_request,
            enabled: self.enabled,
        })
    }
}
