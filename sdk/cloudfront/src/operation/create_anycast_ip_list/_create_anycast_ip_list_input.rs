// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateAnycastIpListInput {
    /// <p>Name of the Anycast static IP list.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The number of static IP addresses that are allocated to the Anycast static IP list. Valid values: 21 or 3.</p>
    pub ip_count: ::std::option::Option<i32>,
    /// <p>A complex type that contains zero or more <code>Tag</code> elements.</p>
    pub tags: ::std::option::Option<crate::types::Tags>,
}
impl CreateAnycastIpListInput {
    /// <p>Name of the Anycast static IP list.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The number of static IP addresses that are allocated to the Anycast static IP list. Valid values: 21 or 3.</p>
    pub fn ip_count(&self) -> ::std::option::Option<i32> {
        self.ip_count
    }
    /// <p>A complex type that contains zero or more <code>Tag</code> elements.</p>
    pub fn tags(&self) -> ::std::option::Option<&crate::types::Tags> {
        self.tags.as_ref()
    }
}
impl CreateAnycastIpListInput {
    /// Creates a new builder-style object to manufacture [`CreateAnycastIpListInput`](crate::operation::create_anycast_ip_list::CreateAnycastIpListInput).
    pub fn builder() -> crate::operation::create_anycast_ip_list::builders::CreateAnycastIpListInputBuilder {
        crate::operation::create_anycast_ip_list::builders::CreateAnycastIpListInputBuilder::default()
    }
}

/// A builder for [`CreateAnycastIpListInput`](crate::operation::create_anycast_ip_list::CreateAnycastIpListInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateAnycastIpListInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) ip_count: ::std::option::Option<i32>,
    pub(crate) tags: ::std::option::Option<crate::types::Tags>,
}
impl CreateAnycastIpListInputBuilder {
    /// <p>Name of the Anycast static IP list.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the Anycast static IP list.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the Anycast static IP list.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The number of static IP addresses that are allocated to the Anycast static IP list. Valid values: 21 or 3.</p>
    /// This field is required.
    pub fn ip_count(mut self, input: i32) -> Self {
        self.ip_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of static IP addresses that are allocated to the Anycast static IP list. Valid values: 21 or 3.</p>
    pub fn set_ip_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.ip_count = input;
        self
    }
    /// <p>The number of static IP addresses that are allocated to the Anycast static IP list. Valid values: 21 or 3.</p>
    pub fn get_ip_count(&self) -> &::std::option::Option<i32> {
        &self.ip_count
    }
    /// <p>A complex type that contains zero or more <code>Tag</code> elements.</p>
    pub fn tags(mut self, input: crate::types::Tags) -> Self {
        self.tags = ::std::option::Option::Some(input);
        self
    }
    /// <p>A complex type that contains zero or more <code>Tag</code> elements.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<crate::types::Tags>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A complex type that contains zero or more <code>Tag</code> elements.</p>
    pub fn get_tags(&self) -> &::std::option::Option<crate::types::Tags> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateAnycastIpListInput`](crate::operation::create_anycast_ip_list::CreateAnycastIpListInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_anycast_ip_list::CreateAnycastIpListInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_anycast_ip_list::CreateAnycastIpListInput {
            name: self.name,
            ip_count: self.ip_count,
            tags: self.tags,
        })
    }
}
