// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateConnectionGroupInput {
    /// <p>The ID of the connection group.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>Enable IPv6 for the connection group. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesEnableIPv6">Enable IPv6</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    pub ipv6_enabled: ::std::option::Option<bool>,
    /// <p>The value of the <code>ETag</code> header that you received when retrieving the connection group that you're updating.</p>
    pub if_match: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Anycast static IP list.</p>
    pub anycast_ip_list_id: ::std::option::Option<::std::string::String>,
    /// <p>Whether the connection group is enabled.</p>
    pub enabled: ::std::option::Option<bool>,
}
impl UpdateConnectionGroupInput {
    /// <p>The ID of the connection group.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Enable IPv6 for the connection group. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesEnableIPv6">Enable IPv6</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    pub fn ipv6_enabled(&self) -> ::std::option::Option<bool> {
        self.ipv6_enabled
    }
    /// <p>The value of the <code>ETag</code> header that you received when retrieving the connection group that you're updating.</p>
    pub fn if_match(&self) -> ::std::option::Option<&str> {
        self.if_match.as_deref()
    }
    /// <p>The ID of the Anycast static IP list.</p>
    pub fn anycast_ip_list_id(&self) -> ::std::option::Option<&str> {
        self.anycast_ip_list_id.as_deref()
    }
    /// <p>Whether the connection group is enabled.</p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
}
impl UpdateConnectionGroupInput {
    /// Creates a new builder-style object to manufacture [`UpdateConnectionGroupInput`](crate::operation::update_connection_group::UpdateConnectionGroupInput).
    pub fn builder() -> crate::operation::update_connection_group::builders::UpdateConnectionGroupInputBuilder {
        crate::operation::update_connection_group::builders::UpdateConnectionGroupInputBuilder::default()
    }
}

/// A builder for [`UpdateConnectionGroupInput`](crate::operation::update_connection_group::UpdateConnectionGroupInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateConnectionGroupInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) ipv6_enabled: ::std::option::Option<bool>,
    pub(crate) if_match: ::std::option::Option<::std::string::String>,
    pub(crate) anycast_ip_list_id: ::std::option::Option<::std::string::String>,
    pub(crate) enabled: ::std::option::Option<bool>,
}
impl UpdateConnectionGroupInputBuilder {
    /// <p>The ID of the connection group.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the connection group.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the connection group.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Enable IPv6 for the connection group. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesEnableIPv6">Enable IPv6</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    pub fn ipv6_enabled(mut self, input: bool) -> Self {
        self.ipv6_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enable IPv6 for the connection group. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesEnableIPv6">Enable IPv6</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    pub fn set_ipv6_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.ipv6_enabled = input;
        self
    }
    /// <p>Enable IPv6 for the connection group. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesEnableIPv6">Enable IPv6</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    pub fn get_ipv6_enabled(&self) -> &::std::option::Option<bool> {
        &self.ipv6_enabled
    }
    /// <p>The value of the <code>ETag</code> header that you received when retrieving the connection group that you're updating.</p>
    /// This field is required.
    pub fn if_match(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.if_match = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the <code>ETag</code> header that you received when retrieving the connection group that you're updating.</p>
    pub fn set_if_match(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.if_match = input;
        self
    }
    /// <p>The value of the <code>ETag</code> header that you received when retrieving the connection group that you're updating.</p>
    pub fn get_if_match(&self) -> &::std::option::Option<::std::string::String> {
        &self.if_match
    }
    /// <p>The ID of the Anycast static IP list.</p>
    pub fn anycast_ip_list_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.anycast_ip_list_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Anycast static IP list.</p>
    pub fn set_anycast_ip_list_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.anycast_ip_list_id = input;
        self
    }
    /// <p>The ID of the Anycast static IP list.</p>
    pub fn get_anycast_ip_list_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.anycast_ip_list_id
    }
    /// <p>Whether the connection group is enabled.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the connection group is enabled.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Whether the connection group is enabled.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// Consumes the builder and constructs a [`UpdateConnectionGroupInput`](crate::operation::update_connection_group::UpdateConnectionGroupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_connection_group::UpdateConnectionGroupInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_connection_group::UpdateConnectionGroupInput {
            id: self.id,
            ipv6_enabled: self.ipv6_enabled,
            if_match: self.if_match,
            anycast_ip_list_id: self.anycast_ip_list_id,
            enabled: self.enabled,
        })
    }
}
