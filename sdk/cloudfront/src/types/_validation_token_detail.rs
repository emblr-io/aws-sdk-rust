// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the validation token.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ValidationTokenDetail {
    /// <p>The domain name.</p>
    pub domain: ::std::string::String,
    /// <p>The domain to redirect to.</p>
    pub redirect_to: ::std::option::Option<::std::string::String>,
    /// <p>The domain to redirect from.</p>
    pub redirect_from: ::std::option::Option<::std::string::String>,
}
impl ValidationTokenDetail {
    /// <p>The domain name.</p>
    pub fn domain(&self) -> &str {
        use std::ops::Deref;
        self.domain.deref()
    }
    /// <p>The domain to redirect to.</p>
    pub fn redirect_to(&self) -> ::std::option::Option<&str> {
        self.redirect_to.as_deref()
    }
    /// <p>The domain to redirect from.</p>
    pub fn redirect_from(&self) -> ::std::option::Option<&str> {
        self.redirect_from.as_deref()
    }
}
impl ValidationTokenDetail {
    /// Creates a new builder-style object to manufacture [`ValidationTokenDetail`](crate::types::ValidationTokenDetail).
    pub fn builder() -> crate::types::builders::ValidationTokenDetailBuilder {
        crate::types::builders::ValidationTokenDetailBuilder::default()
    }
}

/// A builder for [`ValidationTokenDetail`](crate::types::ValidationTokenDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ValidationTokenDetailBuilder {
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) redirect_to: ::std::option::Option<::std::string::String>,
    pub(crate) redirect_from: ::std::option::Option<::std::string::String>,
}
impl ValidationTokenDetailBuilder {
    /// <p>The domain name.</p>
    /// This field is required.
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The domain name.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>The domain to redirect to.</p>
    pub fn redirect_to(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.redirect_to = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain to redirect to.</p>
    pub fn set_redirect_to(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.redirect_to = input;
        self
    }
    /// <p>The domain to redirect to.</p>
    pub fn get_redirect_to(&self) -> &::std::option::Option<::std::string::String> {
        &self.redirect_to
    }
    /// <p>The domain to redirect from.</p>
    pub fn redirect_from(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.redirect_from = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain to redirect from.</p>
    pub fn set_redirect_from(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.redirect_from = input;
        self
    }
    /// <p>The domain to redirect from.</p>
    pub fn get_redirect_from(&self) -> &::std::option::Option<::std::string::String> {
        &self.redirect_from
    }
    /// Consumes the builder and constructs a [`ValidationTokenDetail`](crate::types::ValidationTokenDetail).
    /// This method will fail if any of the following fields are not set:
    /// - [`domain`](crate::types::builders::ValidationTokenDetailBuilder::domain)
    pub fn build(self) -> ::std::result::Result<crate::types::ValidationTokenDetail, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ValidationTokenDetail {
            domain: self.domain.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain",
                    "domain was not specified but it is required when building ValidationTokenDetail",
                )
            })?,
            redirect_to: self.redirect_to,
            redirect_from: self.redirect_from,
        })
    }
}
