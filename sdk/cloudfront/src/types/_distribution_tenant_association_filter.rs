// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filter by the associated distribution ID or connection group ID.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DistributionTenantAssociationFilter {
    /// <p>The distribution ID to filter by. You can find distribution tenants associated with a specific distribution.</p>
    pub distribution_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the connection group to filter by. You can find distribution tenants associated with a specific connection group.</p>
    pub connection_group_id: ::std::option::Option<::std::string::String>,
}
impl DistributionTenantAssociationFilter {
    /// <p>The distribution ID to filter by. You can find distribution tenants associated with a specific distribution.</p>
    pub fn distribution_id(&self) -> ::std::option::Option<&str> {
        self.distribution_id.as_deref()
    }
    /// <p>The ID of the connection group to filter by. You can find distribution tenants associated with a specific connection group.</p>
    pub fn connection_group_id(&self) -> ::std::option::Option<&str> {
        self.connection_group_id.as_deref()
    }
}
impl DistributionTenantAssociationFilter {
    /// Creates a new builder-style object to manufacture [`DistributionTenantAssociationFilter`](crate::types::DistributionTenantAssociationFilter).
    pub fn builder() -> crate::types::builders::DistributionTenantAssociationFilterBuilder {
        crate::types::builders::DistributionTenantAssociationFilterBuilder::default()
    }
}

/// A builder for [`DistributionTenantAssociationFilter`](crate::types::DistributionTenantAssociationFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DistributionTenantAssociationFilterBuilder {
    pub(crate) distribution_id: ::std::option::Option<::std::string::String>,
    pub(crate) connection_group_id: ::std::option::Option<::std::string::String>,
}
impl DistributionTenantAssociationFilterBuilder {
    /// <p>The distribution ID to filter by. You can find distribution tenants associated with a specific distribution.</p>
    pub fn distribution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.distribution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The distribution ID to filter by. You can find distribution tenants associated with a specific distribution.</p>
    pub fn set_distribution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.distribution_id = input;
        self
    }
    /// <p>The distribution ID to filter by. You can find distribution tenants associated with a specific distribution.</p>
    pub fn get_distribution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.distribution_id
    }
    /// <p>The ID of the connection group to filter by. You can find distribution tenants associated with a specific connection group.</p>
    pub fn connection_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the connection group to filter by. You can find distribution tenants associated with a specific connection group.</p>
    pub fn set_connection_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_group_id = input;
        self
    }
    /// <p>The ID of the connection group to filter by. You can find distribution tenants associated with a specific connection group.</p>
    pub fn get_connection_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_group_id
    }
    /// Consumes the builder and constructs a [`DistributionTenantAssociationFilter`](crate::types::DistributionTenantAssociationFilter).
    pub fn build(self) -> crate::types::DistributionTenantAssociationFilter {
        crate::types::DistributionTenantAssociationFilter {
            distribution_id: self.distribution_id,
            connection_group_id: self.connection_group_id,
        }
    }
}
