// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The distribution tenant.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DistributionTenant {
    /// <p>The ID of the distribution tenant.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the multi-tenant distribution.</p>
    pub distribution_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the distribution tenant.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the distribution tenant.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The domains associated with the distribution tenant.</p>
    pub domains: ::std::option::Option<::std::vec::Vec<crate::types::DomainResult>>,
    /// <p>A complex type that contains zero or more <code>Tag</code> elements.</p>
    pub tags: ::std::option::Option<crate::types::Tags>,
    /// <p>Customizations for the distribution tenant. For each distribution tenant, you can specify the geographic restrictions, and the Amazon Resource Names (ARNs) for the ACM certificate and WAF web ACL. These are specific values that you can override or disable from the multi-tenant distribution that was used to create the distribution tenant.</p>
    pub customizations: ::std::option::Option<crate::types::Customizations>,
    /// <p>A list of parameter values to add to the resource. A parameter is specified as a key-value pair. A valid parameter value must exist for any parameter that is marked as required in the multi-tenant distribution.</p>
    pub parameters: ::std::option::Option<::std::vec::Vec<crate::types::Parameter>>,
    /// <p>The ID of the connection group for the distribution tenant. If you don't specify a connection group, CloudFront uses the default connection group.</p>
    pub connection_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The date and time when the distribution tenant was created.</p>
    pub created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when the distribution tenant was updated.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Indicates whether the distribution tenant is in an enabled state. If disabled, the distribution tenant won't serve traffic.</p>
    pub enabled: ::std::option::Option<bool>,
    /// <p>The status of the distribution tenant.</p>
    pub status: ::std::option::Option<::std::string::String>,
}
impl DistributionTenant {
    /// <p>The ID of the distribution tenant.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ID of the multi-tenant distribution.</p>
    pub fn distribution_id(&self) -> ::std::option::Option<&str> {
        self.distribution_id.as_deref()
    }
    /// <p>The name of the distribution tenant.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the distribution tenant.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The domains associated with the distribution tenant.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.domains.is_none()`.
    pub fn domains(&self) -> &[crate::types::DomainResult] {
        self.domains.as_deref().unwrap_or_default()
    }
    /// <p>A complex type that contains zero or more <code>Tag</code> elements.</p>
    pub fn tags(&self) -> ::std::option::Option<&crate::types::Tags> {
        self.tags.as_ref()
    }
    /// <p>Customizations for the distribution tenant. For each distribution tenant, you can specify the geographic restrictions, and the Amazon Resource Names (ARNs) for the ACM certificate and WAF web ACL. These are specific values that you can override or disable from the multi-tenant distribution that was used to create the distribution tenant.</p>
    pub fn customizations(&self) -> ::std::option::Option<&crate::types::Customizations> {
        self.customizations.as_ref()
    }
    /// <p>A list of parameter values to add to the resource. A parameter is specified as a key-value pair. A valid parameter value must exist for any parameter that is marked as required in the multi-tenant distribution.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.parameters.is_none()`.
    pub fn parameters(&self) -> &[crate::types::Parameter] {
        self.parameters.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the connection group for the distribution tenant. If you don't specify a connection group, CloudFront uses the default connection group.</p>
    pub fn connection_group_id(&self) -> ::std::option::Option<&str> {
        self.connection_group_id.as_deref()
    }
    /// <p>The date and time when the distribution tenant was created.</p>
    pub fn created_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The date and time when the distribution tenant was updated.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>Indicates whether the distribution tenant is in an enabled state. If disabled, the distribution tenant won't serve traffic.</p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
    /// <p>The status of the distribution tenant.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
}
impl DistributionTenant {
    /// Creates a new builder-style object to manufacture [`DistributionTenant`](crate::types::DistributionTenant).
    pub fn builder() -> crate::types::builders::DistributionTenantBuilder {
        crate::types::builders::DistributionTenantBuilder::default()
    }
}

/// A builder for [`DistributionTenant`](crate::types::DistributionTenant).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DistributionTenantBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) distribution_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) domains: ::std::option::Option<::std::vec::Vec<crate::types::DomainResult>>,
    pub(crate) tags: ::std::option::Option<crate::types::Tags>,
    pub(crate) customizations: ::std::option::Option<crate::types::Customizations>,
    pub(crate) parameters: ::std::option::Option<::std::vec::Vec<crate::types::Parameter>>,
    pub(crate) connection_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
}
impl DistributionTenantBuilder {
    /// <p>The ID of the distribution tenant.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the distribution tenant.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the distribution tenant.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ID of the multi-tenant distribution.</p>
    pub fn distribution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.distribution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the multi-tenant distribution.</p>
    pub fn set_distribution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.distribution_id = input;
        self
    }
    /// <p>The ID of the multi-tenant distribution.</p>
    pub fn get_distribution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.distribution_id
    }
    /// <p>The name of the distribution tenant.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the distribution tenant.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the distribution tenant.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the distribution tenant.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the distribution tenant.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the distribution tenant.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Appends an item to `domains`.
    ///
    /// To override the contents of this collection use [`set_domains`](Self::set_domains).
    ///
    /// <p>The domains associated with the distribution tenant.</p>
    pub fn domains(mut self, input: crate::types::DomainResult) -> Self {
        let mut v = self.domains.unwrap_or_default();
        v.push(input);
        self.domains = ::std::option::Option::Some(v);
        self
    }
    /// <p>The domains associated with the distribution tenant.</p>
    pub fn set_domains(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DomainResult>>) -> Self {
        self.domains = input;
        self
    }
    /// <p>The domains associated with the distribution tenant.</p>
    pub fn get_domains(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DomainResult>> {
        &self.domains
    }
    /// <p>A complex type that contains zero or more <code>Tag</code> elements.</p>
    pub fn tags(mut self, input: crate::types::Tags) -> Self {
        self.tags = ::std::option::Option::Some(input);
        self
    }
    /// <p>A complex type that contains zero or more <code>Tag</code> elements.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<crate::types::Tags>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A complex type that contains zero or more <code>Tag</code> elements.</p>
    pub fn get_tags(&self) -> &::std::option::Option<crate::types::Tags> {
        &self.tags
    }
    /// <p>Customizations for the distribution tenant. For each distribution tenant, you can specify the geographic restrictions, and the Amazon Resource Names (ARNs) for the ACM certificate and WAF web ACL. These are specific values that you can override or disable from the multi-tenant distribution that was used to create the distribution tenant.</p>
    pub fn customizations(mut self, input: crate::types::Customizations) -> Self {
        self.customizations = ::std::option::Option::Some(input);
        self
    }
    /// <p>Customizations for the distribution tenant. For each distribution tenant, you can specify the geographic restrictions, and the Amazon Resource Names (ARNs) for the ACM certificate and WAF web ACL. These are specific values that you can override or disable from the multi-tenant distribution that was used to create the distribution tenant.</p>
    pub fn set_customizations(mut self, input: ::std::option::Option<crate::types::Customizations>) -> Self {
        self.customizations = input;
        self
    }
    /// <p>Customizations for the distribution tenant. For each distribution tenant, you can specify the geographic restrictions, and the Amazon Resource Names (ARNs) for the ACM certificate and WAF web ACL. These are specific values that you can override or disable from the multi-tenant distribution that was used to create the distribution tenant.</p>
    pub fn get_customizations(&self) -> &::std::option::Option<crate::types::Customizations> {
        &self.customizations
    }
    /// Appends an item to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>A list of parameter values to add to the resource. A parameter is specified as a key-value pair. A valid parameter value must exist for any parameter that is marked as required in the multi-tenant distribution.</p>
    pub fn parameters(mut self, input: crate::types::Parameter) -> Self {
        let mut v = self.parameters.unwrap_or_default();
        v.push(input);
        self.parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of parameter values to add to the resource. A parameter is specified as a key-value pair. A valid parameter value must exist for any parameter that is marked as required in the multi-tenant distribution.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Parameter>>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>A list of parameter values to add to the resource. A parameter is specified as a key-value pair. A valid parameter value must exist for any parameter that is marked as required in the multi-tenant distribution.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Parameter>> {
        &self.parameters
    }
    /// <p>The ID of the connection group for the distribution tenant. If you don't specify a connection group, CloudFront uses the default connection group.</p>
    pub fn connection_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the connection group for the distribution tenant. If you don't specify a connection group, CloudFront uses the default connection group.</p>
    pub fn set_connection_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_group_id = input;
        self
    }
    /// <p>The ID of the connection group for the distribution tenant. If you don't specify a connection group, CloudFront uses the default connection group.</p>
    pub fn get_connection_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_group_id
    }
    /// <p>The date and time when the distribution tenant was created.</p>
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the distribution tenant was created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The date and time when the distribution tenant was created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The date and time when the distribution tenant was updated.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the distribution tenant was updated.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The date and time when the distribution tenant was updated.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>Indicates whether the distribution tenant is in an enabled state. If disabled, the distribution tenant won't serve traffic.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the distribution tenant is in an enabled state. If disabled, the distribution tenant won't serve traffic.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Indicates whether the distribution tenant is in an enabled state. If disabled, the distribution tenant won't serve traffic.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>The status of the distribution tenant.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the distribution tenant.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the distribution tenant.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// Consumes the builder and constructs a [`DistributionTenant`](crate::types::DistributionTenant).
    pub fn build(self) -> crate::types::DistributionTenant {
        crate::types::DistributionTenant {
            id: self.id,
            distribution_id: self.distribution_id,
            name: self.name,
            arn: self.arn,
            domains: self.domains,
            tags: self.tags,
            customizations: self.customizations,
            parameters: self.parameters,
            connection_group_id: self.connection_group_id,
            created_time: self.created_time,
            last_modified_time: self.last_modified_time,
            enabled: self.enabled,
            status: self.status,
        }
    }
}
