// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The DNS configuration for your domain names.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DnsConfiguration {
    /// <p>The domain name that you're verifying.</p>
    pub domain: ::std::string::String,
    /// <p>The status of your domain name.</p>
    /// <ul>
    /// <li>
    /// <p><code>valid-configuration</code>: The domain name is correctly configured and points to the correct routing endpoint of the connection group.</p></li>
    /// <li>
    /// <p><code>invalid-configuration</code>: There is either a missing DNS record or the DNS record exists but it's using an incorrect routing endpoint. Update the DNS record to point to the correct routing endpoint.</p></li>
    /// <li>
    /// <p><code>unknown-configuration</code>: CloudFront can't validate your DNS configuration. This status can appear if CloudFront can't verify the DNS record, or the DNS lookup request failed or timed out.</p></li>
    /// </ul>
    pub status: crate::types::DnsConfigurationStatus,
    /// <p>Explains the status of the DNS configuration.</p>
    pub reason: ::std::option::Option<::std::string::String>,
}
impl DnsConfiguration {
    /// <p>The domain name that you're verifying.</p>
    pub fn domain(&self) -> &str {
        use std::ops::Deref;
        self.domain.deref()
    }
    /// <p>The status of your domain name.</p>
    /// <ul>
    /// <li>
    /// <p><code>valid-configuration</code>: The domain name is correctly configured and points to the correct routing endpoint of the connection group.</p></li>
    /// <li>
    /// <p><code>invalid-configuration</code>: There is either a missing DNS record or the DNS record exists but it's using an incorrect routing endpoint. Update the DNS record to point to the correct routing endpoint.</p></li>
    /// <li>
    /// <p><code>unknown-configuration</code>: CloudFront can't validate your DNS configuration. This status can appear if CloudFront can't verify the DNS record, or the DNS lookup request failed or timed out.</p></li>
    /// </ul>
    pub fn status(&self) -> &crate::types::DnsConfigurationStatus {
        &self.status
    }
    /// <p>Explains the status of the DNS configuration.</p>
    pub fn reason(&self) -> ::std::option::Option<&str> {
        self.reason.as_deref()
    }
}
impl DnsConfiguration {
    /// Creates a new builder-style object to manufacture [`DnsConfiguration`](crate::types::DnsConfiguration).
    pub fn builder() -> crate::types::builders::DnsConfigurationBuilder {
        crate::types::builders::DnsConfigurationBuilder::default()
    }
}

/// A builder for [`DnsConfiguration`](crate::types::DnsConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DnsConfigurationBuilder {
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::DnsConfigurationStatus>,
    pub(crate) reason: ::std::option::Option<::std::string::String>,
}
impl DnsConfigurationBuilder {
    /// <p>The domain name that you're verifying.</p>
    /// This field is required.
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name that you're verifying.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The domain name that you're verifying.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>The status of your domain name.</p>
    /// <ul>
    /// <li>
    /// <p><code>valid-configuration</code>: The domain name is correctly configured and points to the correct routing endpoint of the connection group.</p></li>
    /// <li>
    /// <p><code>invalid-configuration</code>: There is either a missing DNS record or the DNS record exists but it's using an incorrect routing endpoint. Update the DNS record to point to the correct routing endpoint.</p></li>
    /// <li>
    /// <p><code>unknown-configuration</code>: CloudFront can't validate your DNS configuration. This status can appear if CloudFront can't verify the DNS record, or the DNS lookup request failed or timed out.</p></li>
    /// </ul>
    /// This field is required.
    pub fn status(mut self, input: crate::types::DnsConfigurationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of your domain name.</p>
    /// <ul>
    /// <li>
    /// <p><code>valid-configuration</code>: The domain name is correctly configured and points to the correct routing endpoint of the connection group.</p></li>
    /// <li>
    /// <p><code>invalid-configuration</code>: There is either a missing DNS record or the DNS record exists but it's using an incorrect routing endpoint. Update the DNS record to point to the correct routing endpoint.</p></li>
    /// <li>
    /// <p><code>unknown-configuration</code>: CloudFront can't validate your DNS configuration. This status can appear if CloudFront can't verify the DNS record, or the DNS lookup request failed or timed out.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DnsConfigurationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of your domain name.</p>
    /// <ul>
    /// <li>
    /// <p><code>valid-configuration</code>: The domain name is correctly configured and points to the correct routing endpoint of the connection group.</p></li>
    /// <li>
    /// <p><code>invalid-configuration</code>: There is either a missing DNS record or the DNS record exists but it's using an incorrect routing endpoint. Update the DNS record to point to the correct routing endpoint.</p></li>
    /// <li>
    /// <p><code>unknown-configuration</code>: CloudFront can't validate your DNS configuration. This status can appear if CloudFront can't verify the DNS record, or the DNS lookup request failed or timed out.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DnsConfigurationStatus> {
        &self.status
    }
    /// <p>Explains the status of the DNS configuration.</p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Explains the status of the DNS configuration.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>Explains the status of the DNS configuration.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// Consumes the builder and constructs a [`DnsConfiguration`](crate::types::DnsConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`domain`](crate::types::builders::DnsConfigurationBuilder::domain)
    /// - [`status`](crate::types::builders::DnsConfigurationBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::DnsConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DnsConfiguration {
            domain: self.domain.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain",
                    "domain was not specified but it is required when building DnsConfiguration",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building DnsConfiguration",
                )
            })?,
            reason: self.reason,
        })
    }
}
