// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for a string schema.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StringSchemaConfig {
    /// <p>A comment to describe the parameter.</p>
    pub comment: ::std::option::Option<::std::string::String>,
    /// <p>The default value of the parameter.</p>
    pub default_value: ::std::option::Option<::std::string::String>,
    /// <p>Whether the defined parameter is required.</p>
    pub required: bool,
}
impl StringSchemaConfig {
    /// <p>A comment to describe the parameter.</p>
    pub fn comment(&self) -> ::std::option::Option<&str> {
        self.comment.as_deref()
    }
    /// <p>The default value of the parameter.</p>
    pub fn default_value(&self) -> ::std::option::Option<&str> {
        self.default_value.as_deref()
    }
    /// <p>Whether the defined parameter is required.</p>
    pub fn required(&self) -> bool {
        self.required
    }
}
impl StringSchemaConfig {
    /// Creates a new builder-style object to manufacture [`StringSchemaConfig`](crate::types::StringSchemaConfig).
    pub fn builder() -> crate::types::builders::StringSchemaConfigBuilder {
        crate::types::builders::StringSchemaConfigBuilder::default()
    }
}

/// A builder for [`StringSchemaConfig`](crate::types::StringSchemaConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StringSchemaConfigBuilder {
    pub(crate) comment: ::std::option::Option<::std::string::String>,
    pub(crate) default_value: ::std::option::Option<::std::string::String>,
    pub(crate) required: ::std::option::Option<bool>,
}
impl StringSchemaConfigBuilder {
    /// <p>A comment to describe the parameter.</p>
    pub fn comment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.comment = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A comment to describe the parameter.</p>
    pub fn set_comment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// <p>A comment to describe the parameter.</p>
    pub fn get_comment(&self) -> &::std::option::Option<::std::string::String> {
        &self.comment
    }
    /// <p>The default value of the parameter.</p>
    pub fn default_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The default value of the parameter.</p>
    pub fn set_default_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_value = input;
        self
    }
    /// <p>The default value of the parameter.</p>
    pub fn get_default_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_value
    }
    /// <p>Whether the defined parameter is required.</p>
    /// This field is required.
    pub fn required(mut self, input: bool) -> Self {
        self.required = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the defined parameter is required.</p>
    pub fn set_required(mut self, input: ::std::option::Option<bool>) -> Self {
        self.required = input;
        self
    }
    /// <p>Whether the defined parameter is required.</p>
    pub fn get_required(&self) -> &::std::option::Option<bool> {
        &self.required
    }
    /// Consumes the builder and constructs a [`StringSchemaConfig`](crate::types::StringSchemaConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`required`](crate::types::builders::StringSchemaConfigBuilder::required)
    pub fn build(self) -> ::std::result::Result<crate::types::StringSchemaConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::StringSchemaConfig {
            comment: self.comment,
            default_value: self.default_value,
            required: self.required.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "required",
                    "required was not specified but it is required when building StringSchemaConfig",
                )
            })?,
        })
    }
}
