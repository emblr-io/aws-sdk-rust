// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary that contains details about your connection groups.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConnectionGroupSummary {
    /// <p>The ID of the connection group.</p>
    pub id: ::std::string::String,
    /// <p>The name of the connection group.</p>
    pub name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the connection group.</p>
    pub arn: ::std::string::String,
    /// <p>The routing endpoint (also known as the DNS name) that is assigned to the connection group, such as d111111abcdef8.cloudfront.net.</p>
    pub routing_endpoint: ::std::string::String,
    /// <p>The date and time when the connection group was created.</p>
    pub created_time: ::aws_smithy_types::DateTime,
    /// <p>The date and time when the connection group was updated.</p>
    pub last_modified_time: ::aws_smithy_types::DateTime,
    /// <p>The current version of the connection group.</p>
    pub e_tag: ::std::string::String,
    /// <p>The ID of the Anycast static IP list.</p>
    pub anycast_ip_list_id: ::std::option::Option<::std::string::String>,
    /// <p>Whether the connection group is enabled</p>
    pub enabled: ::std::option::Option<bool>,
    /// <p>The status of the connection group.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>Whether the connection group is the default connection group for the distribution tenants.</p>
    pub is_default: ::std::option::Option<bool>,
}
impl ConnectionGroupSummary {
    /// <p>The ID of the connection group.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The name of the connection group.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the connection group.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The routing endpoint (also known as the DNS name) that is assigned to the connection group, such as d111111abcdef8.cloudfront.net.</p>
    pub fn routing_endpoint(&self) -> &str {
        use std::ops::Deref;
        self.routing_endpoint.deref()
    }
    /// <p>The date and time when the connection group was created.</p>
    pub fn created_time(&self) -> &::aws_smithy_types::DateTime {
        &self.created_time
    }
    /// <p>The date and time when the connection group was updated.</p>
    pub fn last_modified_time(&self) -> &::aws_smithy_types::DateTime {
        &self.last_modified_time
    }
    /// <p>The current version of the connection group.</p>
    pub fn e_tag(&self) -> &str {
        use std::ops::Deref;
        self.e_tag.deref()
    }
    /// <p>The ID of the Anycast static IP list.</p>
    pub fn anycast_ip_list_id(&self) -> ::std::option::Option<&str> {
        self.anycast_ip_list_id.as_deref()
    }
    /// <p>Whether the connection group is enabled</p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
    /// <p>The status of the connection group.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>Whether the connection group is the default connection group for the distribution tenants.</p>
    pub fn is_default(&self) -> ::std::option::Option<bool> {
        self.is_default
    }
}
impl ConnectionGroupSummary {
    /// Creates a new builder-style object to manufacture [`ConnectionGroupSummary`](crate::types::ConnectionGroupSummary).
    pub fn builder() -> crate::types::builders::ConnectionGroupSummaryBuilder {
        crate::types::builders::ConnectionGroupSummaryBuilder::default()
    }
}

/// A builder for [`ConnectionGroupSummary`](crate::types::ConnectionGroupSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConnectionGroupSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) routing_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) e_tag: ::std::option::Option<::std::string::String>,
    pub(crate) anycast_ip_list_id: ::std::option::Option<::std::string::String>,
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) is_default: ::std::option::Option<bool>,
}
impl ConnectionGroupSummaryBuilder {
    /// <p>The ID of the connection group.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the connection group.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the connection group.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the connection group.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the connection group.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the connection group.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the connection group.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connection group.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connection group.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The routing endpoint (also known as the DNS name) that is assigned to the connection group, such as d111111abcdef8.cloudfront.net.</p>
    /// This field is required.
    pub fn routing_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.routing_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The routing endpoint (also known as the DNS name) that is assigned to the connection group, such as d111111abcdef8.cloudfront.net.</p>
    pub fn set_routing_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.routing_endpoint = input;
        self
    }
    /// <p>The routing endpoint (also known as the DNS name) that is assigned to the connection group, such as d111111abcdef8.cloudfront.net.</p>
    pub fn get_routing_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.routing_endpoint
    }
    /// <p>The date and time when the connection group was created.</p>
    /// This field is required.
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the connection group was created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The date and time when the connection group was created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The date and time when the connection group was updated.</p>
    /// This field is required.
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the connection group was updated.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The date and time when the connection group was updated.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The current version of the connection group.</p>
    /// This field is required.
    pub fn e_tag(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.e_tag = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current version of the connection group.</p>
    pub fn set_e_tag(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.e_tag = input;
        self
    }
    /// <p>The current version of the connection group.</p>
    pub fn get_e_tag(&self) -> &::std::option::Option<::std::string::String> {
        &self.e_tag
    }
    /// <p>The ID of the Anycast static IP list.</p>
    pub fn anycast_ip_list_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.anycast_ip_list_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Anycast static IP list.</p>
    pub fn set_anycast_ip_list_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.anycast_ip_list_id = input;
        self
    }
    /// <p>The ID of the Anycast static IP list.</p>
    pub fn get_anycast_ip_list_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.anycast_ip_list_id
    }
    /// <p>Whether the connection group is enabled</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the connection group is enabled</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Whether the connection group is enabled</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>The status of the connection group.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the connection group.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the connection group.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>Whether the connection group is the default connection group for the distribution tenants.</p>
    pub fn is_default(mut self, input: bool) -> Self {
        self.is_default = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the connection group is the default connection group for the distribution tenants.</p>
    pub fn set_is_default(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_default = input;
        self
    }
    /// <p>Whether the connection group is the default connection group for the distribution tenants.</p>
    pub fn get_is_default(&self) -> &::std::option::Option<bool> {
        &self.is_default
    }
    /// Consumes the builder and constructs a [`ConnectionGroupSummary`](crate::types::ConnectionGroupSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::ConnectionGroupSummaryBuilder::id)
    /// - [`name`](crate::types::builders::ConnectionGroupSummaryBuilder::name)
    /// - [`arn`](crate::types::builders::ConnectionGroupSummaryBuilder::arn)
    /// - [`routing_endpoint`](crate::types::builders::ConnectionGroupSummaryBuilder::routing_endpoint)
    /// - [`created_time`](crate::types::builders::ConnectionGroupSummaryBuilder::created_time)
    /// - [`last_modified_time`](crate::types::builders::ConnectionGroupSummaryBuilder::last_modified_time)
    /// - [`e_tag`](crate::types::builders::ConnectionGroupSummaryBuilder::e_tag)
    pub fn build(self) -> ::std::result::Result<crate::types::ConnectionGroupSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConnectionGroupSummary {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building ConnectionGroupSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building ConnectionGroupSummary",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building ConnectionGroupSummary",
                )
            })?,
            routing_endpoint: self.routing_endpoint.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "routing_endpoint",
                    "routing_endpoint was not specified but it is required when building ConnectionGroupSummary",
                )
            })?,
            created_time: self.created_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_time",
                    "created_time was not specified but it is required when building ConnectionGroupSummary",
                )
            })?,
            last_modified_time: self.last_modified_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_modified_time",
                    "last_modified_time was not specified but it is required when building ConnectionGroupSummary",
                )
            })?,
            e_tag: self.e_tag.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "e_tag",
                    "e_tag was not specified but it is required when building ConnectionGroupSummary",
                )
            })?,
            anycast_ip_list_id: self.anycast_ip_list_id,
            enabled: self.enabled,
            status: self.status,
            is_default: self.is_default,
        })
    }
}
