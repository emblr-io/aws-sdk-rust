// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the domain conflict. Use this information to determine the affected domain, the related resource, and the affected Amazon Web Services account.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DomainConflict {
    /// <p>The domain used to find existing conflicts for domain configurations.</p>
    pub domain: ::std::string::String,
    /// <p>The CloudFront resource type that has a domain conflict.</p>
    pub resource_type: crate::types::DistributionResourceType,
    /// <p>The ID of the resource that has a domain conflict.</p>
    pub resource_id: ::std::string::String,
    /// <p>The ID of the Amazon Web Services account for the domain conflict.</p>
    pub account_id: ::std::string::String,
}
impl DomainConflict {
    /// <p>The domain used to find existing conflicts for domain configurations.</p>
    pub fn domain(&self) -> &str {
        use std::ops::Deref;
        self.domain.deref()
    }
    /// <p>The CloudFront resource type that has a domain conflict.</p>
    pub fn resource_type(&self) -> &crate::types::DistributionResourceType {
        &self.resource_type
    }
    /// <p>The ID of the resource that has a domain conflict.</p>
    pub fn resource_id(&self) -> &str {
        use std::ops::Deref;
        self.resource_id.deref()
    }
    /// <p>The ID of the Amazon Web Services account for the domain conflict.</p>
    pub fn account_id(&self) -> &str {
        use std::ops::Deref;
        self.account_id.deref()
    }
}
impl DomainConflict {
    /// Creates a new builder-style object to manufacture [`DomainConflict`](crate::types::DomainConflict).
    pub fn builder() -> crate::types::builders::DomainConflictBuilder {
        crate::types::builders::DomainConflictBuilder::default()
    }
}

/// A builder for [`DomainConflict`](crate::types::DomainConflict).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DomainConflictBuilder {
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<crate::types::DistributionResourceType>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
}
impl DomainConflictBuilder {
    /// <p>The domain used to find existing conflicts for domain configurations.</p>
    /// This field is required.
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain used to find existing conflicts for domain configurations.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The domain used to find existing conflicts for domain configurations.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>The CloudFront resource type that has a domain conflict.</p>
    /// This field is required.
    pub fn resource_type(mut self, input: crate::types::DistributionResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CloudFront resource type that has a domain conflict.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::DistributionResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The CloudFront resource type that has a domain conflict.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::DistributionResourceType> {
        &self.resource_type
    }
    /// <p>The ID of the resource that has a domain conflict.</p>
    /// This field is required.
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the resource that has a domain conflict.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The ID of the resource that has a domain conflict.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>The ID of the Amazon Web Services account for the domain conflict.</p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account for the domain conflict.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account for the domain conflict.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// Consumes the builder and constructs a [`DomainConflict`](crate::types::DomainConflict).
    /// This method will fail if any of the following fields are not set:
    /// - [`domain`](crate::types::builders::DomainConflictBuilder::domain)
    /// - [`resource_type`](crate::types::builders::DomainConflictBuilder::resource_type)
    /// - [`resource_id`](crate::types::builders::DomainConflictBuilder::resource_id)
    /// - [`account_id`](crate::types::builders::DomainConflictBuilder::account_id)
    pub fn build(self) -> ::std::result::Result<crate::types::DomainConflict, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DomainConflict {
            domain: self.domain.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain",
                    "domain was not specified but it is required when building DomainConflict",
                )
            })?,
            resource_type: self.resource_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "resource_type",
                    "resource_type was not specified but it is required when building DomainConflict",
                )
            })?,
            resource_id: self.resource_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "resource_id",
                    "resource_id was not specified but it is required when building DomainConflict",
                )
            })?,
            account_id: self.account_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "account_id",
                    "account_id was not specified but it is required when building DomainConflict",
                )
            })?,
        })
    }
}
