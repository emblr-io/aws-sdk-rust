// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for a distribution tenant.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TenantConfig {
    /// <p>The parameters that you specify for a distribution tenant.</p>
    pub parameter_definitions: ::std::option::Option<::std::vec::Vec<crate::types::ParameterDefinition>>,
}
impl TenantConfig {
    /// <p>The parameters that you specify for a distribution tenant.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.parameter_definitions.is_none()`.
    pub fn parameter_definitions(&self) -> &[crate::types::ParameterDefinition] {
        self.parameter_definitions.as_deref().unwrap_or_default()
    }
}
impl TenantConfig {
    /// Creates a new builder-style object to manufacture [`TenantConfig`](crate::types::TenantConfig).
    pub fn builder() -> crate::types::builders::TenantConfigBuilder {
        crate::types::builders::TenantConfigBuilder::default()
    }
}

/// A builder for [`TenantConfig`](crate::types::TenantConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TenantConfigBuilder {
    pub(crate) parameter_definitions: ::std::option::Option<::std::vec::Vec<crate::types::ParameterDefinition>>,
}
impl TenantConfigBuilder {
    /// Appends an item to `parameter_definitions`.
    ///
    /// To override the contents of this collection use [`set_parameter_definitions`](Self::set_parameter_definitions).
    ///
    /// <p>The parameters that you specify for a distribution tenant.</p>
    pub fn parameter_definitions(mut self, input: crate::types::ParameterDefinition) -> Self {
        let mut v = self.parameter_definitions.unwrap_or_default();
        v.push(input);
        self.parameter_definitions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The parameters that you specify for a distribution tenant.</p>
    pub fn set_parameter_definitions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ParameterDefinition>>) -> Self {
        self.parameter_definitions = input;
        self
    }
    /// <p>The parameters that you specify for a distribution tenant.</p>
    pub fn get_parameter_definitions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ParameterDefinition>> {
        &self.parameter_definitions
    }
    /// Consumes the builder and constructs a [`TenantConfig`](crate::types::TenantConfig).
    pub fn build(self) -> crate::types::TenantConfig {
        crate::types::TenantConfig {
            parameter_definitions: self.parameter_definitions,
        }
    }
}
