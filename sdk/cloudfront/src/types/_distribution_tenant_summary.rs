// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of the information about a distribution tenant.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DistributionTenantSummary {
    /// <p>The ID of the distribution tenant.</p>
    pub id: ::std::string::String,
    /// <p>The identifier for the multi-tenant distribution. For example: <code>EDFDVBD632BHDS5</code>.</p>
    pub distribution_id: ::std::string::String,
    /// <p>The name of the distribution tenant.</p>
    pub name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the distribution tenant.</p>
    pub arn: ::std::string::String,
    /// <p>The domains associated with the distribution tenant.</p>
    pub domains: ::std::vec::Vec<crate::types::DomainResult>,
    /// <p>The ID of the connection group ID for the distribution tenant. If you don't specify a connection group, CloudFront uses the default connection group.</p>
    pub connection_group_id: ::std::option::Option<::std::string::String>,
    /// <p>Customizations for the distribution tenant. For each distribution tenant, you can specify the geographic restrictions, and the Amazon Resource Names (ARNs) for the ACM certificate and WAF web ACL. These are specific values that you can override or disable from the multi-tenant distribution that was used to create the distribution tenant.</p>
    pub customizations: ::std::option::Option<crate::types::Customizations>,
    /// <p>The date and time when the distribution tenant was created.</p>
    pub created_time: ::aws_smithy_types::DateTime,
    /// <p>The date and time when the distribution tenant was updated.</p>
    pub last_modified_time: ::aws_smithy_types::DateTime,
    /// <p>The current version of the distribution tenant.</p>
    pub e_tag: ::std::string::String,
    /// <p>Indicates whether the distribution tenants are in an enabled state. If disabled, the distribution tenant won't service traffic.</p>
    pub enabled: ::std::option::Option<bool>,
    /// <p>The status of the distribution tenant.</p>
    pub status: ::std::option::Option<::std::string::String>,
}
impl DistributionTenantSummary {
    /// <p>The ID of the distribution tenant.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The identifier for the multi-tenant distribution. For example: <code>EDFDVBD632BHDS5</code>.</p>
    pub fn distribution_id(&self) -> &str {
        use std::ops::Deref;
        self.distribution_id.deref()
    }
    /// <p>The name of the distribution tenant.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the distribution tenant.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The domains associated with the distribution tenant.</p>
    pub fn domains(&self) -> &[crate::types::DomainResult] {
        use std::ops::Deref;
        self.domains.deref()
    }
    /// <p>The ID of the connection group ID for the distribution tenant. If you don't specify a connection group, CloudFront uses the default connection group.</p>
    pub fn connection_group_id(&self) -> ::std::option::Option<&str> {
        self.connection_group_id.as_deref()
    }
    /// <p>Customizations for the distribution tenant. For each distribution tenant, you can specify the geographic restrictions, and the Amazon Resource Names (ARNs) for the ACM certificate and WAF web ACL. These are specific values that you can override or disable from the multi-tenant distribution that was used to create the distribution tenant.</p>
    pub fn customizations(&self) -> ::std::option::Option<&crate::types::Customizations> {
        self.customizations.as_ref()
    }
    /// <p>The date and time when the distribution tenant was created.</p>
    pub fn created_time(&self) -> &::aws_smithy_types::DateTime {
        &self.created_time
    }
    /// <p>The date and time when the distribution tenant was updated.</p>
    pub fn last_modified_time(&self) -> &::aws_smithy_types::DateTime {
        &self.last_modified_time
    }
    /// <p>The current version of the distribution tenant.</p>
    pub fn e_tag(&self) -> &str {
        use std::ops::Deref;
        self.e_tag.deref()
    }
    /// <p>Indicates whether the distribution tenants are in an enabled state. If disabled, the distribution tenant won't service traffic.</p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
    /// <p>The status of the distribution tenant.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
}
impl DistributionTenantSummary {
    /// Creates a new builder-style object to manufacture [`DistributionTenantSummary`](crate::types::DistributionTenantSummary).
    pub fn builder() -> crate::types::builders::DistributionTenantSummaryBuilder {
        crate::types::builders::DistributionTenantSummaryBuilder::default()
    }
}

/// A builder for [`DistributionTenantSummary`](crate::types::DistributionTenantSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DistributionTenantSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) distribution_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) domains: ::std::option::Option<::std::vec::Vec<crate::types::DomainResult>>,
    pub(crate) connection_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) customizations: ::std::option::Option<crate::types::Customizations>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) e_tag: ::std::option::Option<::std::string::String>,
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
}
impl DistributionTenantSummaryBuilder {
    /// <p>The ID of the distribution tenant.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the distribution tenant.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the distribution tenant.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The identifier for the multi-tenant distribution. For example: <code>EDFDVBD632BHDS5</code>.</p>
    /// This field is required.
    pub fn distribution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.distribution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the multi-tenant distribution. For example: <code>EDFDVBD632BHDS5</code>.</p>
    pub fn set_distribution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.distribution_id = input;
        self
    }
    /// <p>The identifier for the multi-tenant distribution. For example: <code>EDFDVBD632BHDS5</code>.</p>
    pub fn get_distribution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.distribution_id
    }
    /// <p>The name of the distribution tenant.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the distribution tenant.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the distribution tenant.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the distribution tenant.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the distribution tenant.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the distribution tenant.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Appends an item to `domains`.
    ///
    /// To override the contents of this collection use [`set_domains`](Self::set_domains).
    ///
    /// <p>The domains associated with the distribution tenant.</p>
    pub fn domains(mut self, input: crate::types::DomainResult) -> Self {
        let mut v = self.domains.unwrap_or_default();
        v.push(input);
        self.domains = ::std::option::Option::Some(v);
        self
    }
    /// <p>The domains associated with the distribution tenant.</p>
    pub fn set_domains(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DomainResult>>) -> Self {
        self.domains = input;
        self
    }
    /// <p>The domains associated with the distribution tenant.</p>
    pub fn get_domains(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DomainResult>> {
        &self.domains
    }
    /// <p>The ID of the connection group ID for the distribution tenant. If you don't specify a connection group, CloudFront uses the default connection group.</p>
    pub fn connection_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the connection group ID for the distribution tenant. If you don't specify a connection group, CloudFront uses the default connection group.</p>
    pub fn set_connection_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_group_id = input;
        self
    }
    /// <p>The ID of the connection group ID for the distribution tenant. If you don't specify a connection group, CloudFront uses the default connection group.</p>
    pub fn get_connection_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_group_id
    }
    /// <p>Customizations for the distribution tenant. For each distribution tenant, you can specify the geographic restrictions, and the Amazon Resource Names (ARNs) for the ACM certificate and WAF web ACL. These are specific values that you can override or disable from the multi-tenant distribution that was used to create the distribution tenant.</p>
    pub fn customizations(mut self, input: crate::types::Customizations) -> Self {
        self.customizations = ::std::option::Option::Some(input);
        self
    }
    /// <p>Customizations for the distribution tenant. For each distribution tenant, you can specify the geographic restrictions, and the Amazon Resource Names (ARNs) for the ACM certificate and WAF web ACL. These are specific values that you can override or disable from the multi-tenant distribution that was used to create the distribution tenant.</p>
    pub fn set_customizations(mut self, input: ::std::option::Option<crate::types::Customizations>) -> Self {
        self.customizations = input;
        self
    }
    /// <p>Customizations for the distribution tenant. For each distribution tenant, you can specify the geographic restrictions, and the Amazon Resource Names (ARNs) for the ACM certificate and WAF web ACL. These are specific values that you can override or disable from the multi-tenant distribution that was used to create the distribution tenant.</p>
    pub fn get_customizations(&self) -> &::std::option::Option<crate::types::Customizations> {
        &self.customizations
    }
    /// <p>The date and time when the distribution tenant was created.</p>
    /// This field is required.
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the distribution tenant was created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The date and time when the distribution tenant was created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The date and time when the distribution tenant was updated.</p>
    /// This field is required.
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the distribution tenant was updated.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The date and time when the distribution tenant was updated.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The current version of the distribution tenant.</p>
    /// This field is required.
    pub fn e_tag(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.e_tag = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current version of the distribution tenant.</p>
    pub fn set_e_tag(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.e_tag = input;
        self
    }
    /// <p>The current version of the distribution tenant.</p>
    pub fn get_e_tag(&self) -> &::std::option::Option<::std::string::String> {
        &self.e_tag
    }
    /// <p>Indicates whether the distribution tenants are in an enabled state. If disabled, the distribution tenant won't service traffic.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the distribution tenants are in an enabled state. If disabled, the distribution tenant won't service traffic.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Indicates whether the distribution tenants are in an enabled state. If disabled, the distribution tenant won't service traffic.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>The status of the distribution tenant.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the distribution tenant.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the distribution tenant.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// Consumes the builder and constructs a [`DistributionTenantSummary`](crate::types::DistributionTenantSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::DistributionTenantSummaryBuilder::id)
    /// - [`distribution_id`](crate::types::builders::DistributionTenantSummaryBuilder::distribution_id)
    /// - [`name`](crate::types::builders::DistributionTenantSummaryBuilder::name)
    /// - [`arn`](crate::types::builders::DistributionTenantSummaryBuilder::arn)
    /// - [`domains`](crate::types::builders::DistributionTenantSummaryBuilder::domains)
    /// - [`created_time`](crate::types::builders::DistributionTenantSummaryBuilder::created_time)
    /// - [`last_modified_time`](crate::types::builders::DistributionTenantSummaryBuilder::last_modified_time)
    /// - [`e_tag`](crate::types::builders::DistributionTenantSummaryBuilder::e_tag)
    pub fn build(self) -> ::std::result::Result<crate::types::DistributionTenantSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DistributionTenantSummary {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building DistributionTenantSummary",
                )
            })?,
            distribution_id: self.distribution_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "distribution_id",
                    "distribution_id was not specified but it is required when building DistributionTenantSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building DistributionTenantSummary",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building DistributionTenantSummary",
                )
            })?,
            domains: self.domains.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domains",
                    "domains was not specified but it is required when building DistributionTenantSummary",
                )
            })?,
            connection_group_id: self.connection_group_id,
            customizations: self.customizations,
            created_time: self.created_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_time",
                    "created_time was not specified but it is required when building DistributionTenantSummary",
                )
            })?,
            last_modified_time: self.last_modified_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_modified_time",
                    "last_modified_time was not specified but it is required when building DistributionTenantSummary",
                )
            })?,
            e_tag: self.e_tag.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "e_tag",
                    "e_tag was not specified but it is required when building DistributionTenantSummary",
                )
            })?,
            enabled: self.enabled,
            status: self.status,
        })
    }
}
