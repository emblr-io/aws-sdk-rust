// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the CloudFront managed ACM certificate.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ManagedCertificateDetails {
    /// <p>The ARN of the CloudFront managed ACM certificate.</p>
    pub certificate_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the CloudFront managed ACM certificate.</p><note>
    /// <p>Your distribution tenant will be updated with the latest certificate status. When calling the <a href="https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistributionTenant.html">UpdateDistributionTenant</a> operation, use the latest value for the <code>ETag</code>.</p>
    /// </note>
    pub certificate_status: ::std::option::Option<crate::types::ManagedCertificateStatus>,
    /// <p>Contains details about the validation token host of the specified CloudFront managed ACM certificate.</p>
    /// <ul>
    /// <li>
    /// <p>For <code>cloudfront</code>, CloudFront will automatically serve the validation token. Choose this mode if you can point the domain's DNS to CloudFront immediately.</p></li>
    /// <li>
    /// <p>For <code>self-hosted</code>, you serve the validation token from your existing infrastructure. Choose this mode when you need to maintain current traffic flow while your certificate is being issued. You can place the validation token at the well-known path on your existing web server, wait for ACM to validate and issue the certificate, and then update your DNS to point to CloudFront.</p></li>
    /// </ul><note>
    /// <p>This setting only affects the initial certificate request. Once the DNS points to CloudFront, all future certificate renewals are automatically handled through CloudFront.</p>
    /// </note>
    pub validation_token_host: ::std::option::Option<crate::types::ValidationTokenHost>,
    /// <p>Contains details about the validation token of the specified CloudFront managed ACM certificate.</p>
    pub validation_token_details: ::std::option::Option<::std::vec::Vec<crate::types::ValidationTokenDetail>>,
}
impl ManagedCertificateDetails {
    /// <p>The ARN of the CloudFront managed ACM certificate.</p>
    pub fn certificate_arn(&self) -> ::std::option::Option<&str> {
        self.certificate_arn.as_deref()
    }
    /// <p>The status of the CloudFront managed ACM certificate.</p><note>
    /// <p>Your distribution tenant will be updated with the latest certificate status. When calling the <a href="https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistributionTenant.html">UpdateDistributionTenant</a> operation, use the latest value for the <code>ETag</code>.</p>
    /// </note>
    pub fn certificate_status(&self) -> ::std::option::Option<&crate::types::ManagedCertificateStatus> {
        self.certificate_status.as_ref()
    }
    /// <p>Contains details about the validation token host of the specified CloudFront managed ACM certificate.</p>
    /// <ul>
    /// <li>
    /// <p>For <code>cloudfront</code>, CloudFront will automatically serve the validation token. Choose this mode if you can point the domain's DNS to CloudFront immediately.</p></li>
    /// <li>
    /// <p>For <code>self-hosted</code>, you serve the validation token from your existing infrastructure. Choose this mode when you need to maintain current traffic flow while your certificate is being issued. You can place the validation token at the well-known path on your existing web server, wait for ACM to validate and issue the certificate, and then update your DNS to point to CloudFront.</p></li>
    /// </ul><note>
    /// <p>This setting only affects the initial certificate request. Once the DNS points to CloudFront, all future certificate renewals are automatically handled through CloudFront.</p>
    /// </note>
    pub fn validation_token_host(&self) -> ::std::option::Option<&crate::types::ValidationTokenHost> {
        self.validation_token_host.as_ref()
    }
    /// <p>Contains details about the validation token of the specified CloudFront managed ACM certificate.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.validation_token_details.is_none()`.
    pub fn validation_token_details(&self) -> &[crate::types::ValidationTokenDetail] {
        self.validation_token_details.as_deref().unwrap_or_default()
    }
}
impl ManagedCertificateDetails {
    /// Creates a new builder-style object to manufacture [`ManagedCertificateDetails`](crate::types::ManagedCertificateDetails).
    pub fn builder() -> crate::types::builders::ManagedCertificateDetailsBuilder {
        crate::types::builders::ManagedCertificateDetailsBuilder::default()
    }
}

/// A builder for [`ManagedCertificateDetails`](crate::types::ManagedCertificateDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ManagedCertificateDetailsBuilder {
    pub(crate) certificate_arn: ::std::option::Option<::std::string::String>,
    pub(crate) certificate_status: ::std::option::Option<crate::types::ManagedCertificateStatus>,
    pub(crate) validation_token_host: ::std::option::Option<crate::types::ValidationTokenHost>,
    pub(crate) validation_token_details: ::std::option::Option<::std::vec::Vec<crate::types::ValidationTokenDetail>>,
}
impl ManagedCertificateDetailsBuilder {
    /// <p>The ARN of the CloudFront managed ACM certificate.</p>
    pub fn certificate_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certificate_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the CloudFront managed ACM certificate.</p>
    pub fn set_certificate_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certificate_arn = input;
        self
    }
    /// <p>The ARN of the CloudFront managed ACM certificate.</p>
    pub fn get_certificate_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.certificate_arn
    }
    /// <p>The status of the CloudFront managed ACM certificate.</p><note>
    /// <p>Your distribution tenant will be updated with the latest certificate status. When calling the <a href="https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistributionTenant.html">UpdateDistributionTenant</a> operation, use the latest value for the <code>ETag</code>.</p>
    /// </note>
    pub fn certificate_status(mut self, input: crate::types::ManagedCertificateStatus) -> Self {
        self.certificate_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the CloudFront managed ACM certificate.</p><note>
    /// <p>Your distribution tenant will be updated with the latest certificate status. When calling the <a href="https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistributionTenant.html">UpdateDistributionTenant</a> operation, use the latest value for the <code>ETag</code>.</p>
    /// </note>
    pub fn set_certificate_status(mut self, input: ::std::option::Option<crate::types::ManagedCertificateStatus>) -> Self {
        self.certificate_status = input;
        self
    }
    /// <p>The status of the CloudFront managed ACM certificate.</p><note>
    /// <p>Your distribution tenant will be updated with the latest certificate status. When calling the <a href="https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistributionTenant.html">UpdateDistributionTenant</a> operation, use the latest value for the <code>ETag</code>.</p>
    /// </note>
    pub fn get_certificate_status(&self) -> &::std::option::Option<crate::types::ManagedCertificateStatus> {
        &self.certificate_status
    }
    /// <p>Contains details about the validation token host of the specified CloudFront managed ACM certificate.</p>
    /// <ul>
    /// <li>
    /// <p>For <code>cloudfront</code>, CloudFront will automatically serve the validation token. Choose this mode if you can point the domain's DNS to CloudFront immediately.</p></li>
    /// <li>
    /// <p>For <code>self-hosted</code>, you serve the validation token from your existing infrastructure. Choose this mode when you need to maintain current traffic flow while your certificate is being issued. You can place the validation token at the well-known path on your existing web server, wait for ACM to validate and issue the certificate, and then update your DNS to point to CloudFront.</p></li>
    /// </ul><note>
    /// <p>This setting only affects the initial certificate request. Once the DNS points to CloudFront, all future certificate renewals are automatically handled through CloudFront.</p>
    /// </note>
    pub fn validation_token_host(mut self, input: crate::types::ValidationTokenHost) -> Self {
        self.validation_token_host = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the validation token host of the specified CloudFront managed ACM certificate.</p>
    /// <ul>
    /// <li>
    /// <p>For <code>cloudfront</code>, CloudFront will automatically serve the validation token. Choose this mode if you can point the domain's DNS to CloudFront immediately.</p></li>
    /// <li>
    /// <p>For <code>self-hosted</code>, you serve the validation token from your existing infrastructure. Choose this mode when you need to maintain current traffic flow while your certificate is being issued. You can place the validation token at the well-known path on your existing web server, wait for ACM to validate and issue the certificate, and then update your DNS to point to CloudFront.</p></li>
    /// </ul><note>
    /// <p>This setting only affects the initial certificate request. Once the DNS points to CloudFront, all future certificate renewals are automatically handled through CloudFront.</p>
    /// </note>
    pub fn set_validation_token_host(mut self, input: ::std::option::Option<crate::types::ValidationTokenHost>) -> Self {
        self.validation_token_host = input;
        self
    }
    /// <p>Contains details about the validation token host of the specified CloudFront managed ACM certificate.</p>
    /// <ul>
    /// <li>
    /// <p>For <code>cloudfront</code>, CloudFront will automatically serve the validation token. Choose this mode if you can point the domain's DNS to CloudFront immediately.</p></li>
    /// <li>
    /// <p>For <code>self-hosted</code>, you serve the validation token from your existing infrastructure. Choose this mode when you need to maintain current traffic flow while your certificate is being issued. You can place the validation token at the well-known path on your existing web server, wait for ACM to validate and issue the certificate, and then update your DNS to point to CloudFront.</p></li>
    /// </ul><note>
    /// <p>This setting only affects the initial certificate request. Once the DNS points to CloudFront, all future certificate renewals are automatically handled through CloudFront.</p>
    /// </note>
    pub fn get_validation_token_host(&self) -> &::std::option::Option<crate::types::ValidationTokenHost> {
        &self.validation_token_host
    }
    /// Appends an item to `validation_token_details`.
    ///
    /// To override the contents of this collection use [`set_validation_token_details`](Self::set_validation_token_details).
    ///
    /// <p>Contains details about the validation token of the specified CloudFront managed ACM certificate.</p>
    pub fn validation_token_details(mut self, input: crate::types::ValidationTokenDetail) -> Self {
        let mut v = self.validation_token_details.unwrap_or_default();
        v.push(input);
        self.validation_token_details = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains details about the validation token of the specified CloudFront managed ACM certificate.</p>
    pub fn set_validation_token_details(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ValidationTokenDetail>>) -> Self {
        self.validation_token_details = input;
        self
    }
    /// <p>Contains details about the validation token of the specified CloudFront managed ACM certificate.</p>
    pub fn get_validation_token_details(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ValidationTokenDetail>> {
        &self.validation_token_details
    }
    /// Consumes the builder and constructs a [`ManagedCertificateDetails`](crate::types::ManagedCertificateDetails).
    pub fn build(self) -> crate::types::ManagedCertificateDetails {
        crate::types::ManagedCertificateDetails {
            certificate_arn: self.certificate_arn,
            certificate_status: self.certificate_status,
            validation_token_host: self.validation_token_host,
            validation_token_details: self.validation_token_details,
        }
    }
}
