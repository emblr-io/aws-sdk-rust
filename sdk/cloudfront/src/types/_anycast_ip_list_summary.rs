// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An abbreviated version of the <code>AnycastIpList</code> structure. Omits the allocated static IP addresses (<code>AnycastIpList$AnycastIps</code>).</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnycastIpListSummary {
    /// <p>The ID of the Anycast static IP list.</p>
    pub id: ::std::string::String,
    /// <p>The name of the Anycast static IP list.</p>
    pub name: ::std::string::String,
    /// <p>The deployment status of the Anycast static IP list. Valid values: Deployed, Deploying, or Failed.</p>
    pub status: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the Anycast static IP list.</p>
    pub arn: ::std::string::String,
    /// <p>The number of IP addresses in the Anycast static IP list.</p>
    pub ip_count: i32,
    /// <p>The last time the Anycast static IP list was modified.</p>
    pub last_modified_time: ::aws_smithy_types::DateTime,
}
impl AnycastIpListSummary {
    /// <p>The ID of the Anycast static IP list.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The name of the Anycast static IP list.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The deployment status of the Anycast static IP list. Valid values: Deployed, Deploying, or Failed.</p>
    pub fn status(&self) -> &str {
        use std::ops::Deref;
        self.status.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Anycast static IP list.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The number of IP addresses in the Anycast static IP list.</p>
    pub fn ip_count(&self) -> i32 {
        self.ip_count
    }
    /// <p>The last time the Anycast static IP list was modified.</p>
    pub fn last_modified_time(&self) -> &::aws_smithy_types::DateTime {
        &self.last_modified_time
    }
}
impl AnycastIpListSummary {
    /// Creates a new builder-style object to manufacture [`AnycastIpListSummary`](crate::types::AnycastIpListSummary).
    pub fn builder() -> crate::types::builders::AnycastIpListSummaryBuilder {
        crate::types::builders::AnycastIpListSummaryBuilder::default()
    }
}

/// A builder for [`AnycastIpListSummary`](crate::types::AnycastIpListSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AnycastIpListSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) ip_count: ::std::option::Option<i32>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl AnycastIpListSummaryBuilder {
    /// <p>The ID of the Anycast static IP list.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Anycast static IP list.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the Anycast static IP list.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the Anycast static IP list.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Anycast static IP list.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Anycast static IP list.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The deployment status of the Anycast static IP list. Valid values: Deployed, Deploying, or Failed.</p>
    /// This field is required.
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The deployment status of the Anycast static IP list. Valid values: Deployed, Deploying, or Failed.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The deployment status of the Anycast static IP list. Valid values: Deployed, Deploying, or Failed.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The Amazon Resource Name (ARN) of the Anycast static IP list.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Anycast static IP list.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Anycast static IP list.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The number of IP addresses in the Anycast static IP list.</p>
    /// This field is required.
    pub fn ip_count(mut self, input: i32) -> Self {
        self.ip_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of IP addresses in the Anycast static IP list.</p>
    pub fn set_ip_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.ip_count = input;
        self
    }
    /// <p>The number of IP addresses in the Anycast static IP list.</p>
    pub fn get_ip_count(&self) -> &::std::option::Option<i32> {
        &self.ip_count
    }
    /// <p>The last time the Anycast static IP list was modified.</p>
    /// This field is required.
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time the Anycast static IP list was modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The last time the Anycast static IP list was modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// Consumes the builder and constructs a [`AnycastIpListSummary`](crate::types::AnycastIpListSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::AnycastIpListSummaryBuilder::id)
    /// - [`name`](crate::types::builders::AnycastIpListSummaryBuilder::name)
    /// - [`status`](crate::types::builders::AnycastIpListSummaryBuilder::status)
    /// - [`arn`](crate::types::builders::AnycastIpListSummaryBuilder::arn)
    /// - [`ip_count`](crate::types::builders::AnycastIpListSummaryBuilder::ip_count)
    /// - [`last_modified_time`](crate::types::builders::AnycastIpListSummaryBuilder::last_modified_time)
    pub fn build(self) -> ::std::result::Result<crate::types::AnycastIpListSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AnycastIpListSummary {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building AnycastIpListSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AnycastIpListSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building AnycastIpListSummary",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building AnycastIpListSummary",
                )
            })?,
            ip_count: self.ip_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ip_count",
                    "ip_count was not specified but it is required when building AnycastIpListSummary",
                )
            })?,
            last_modified_time: self.last_modified_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_modified_time",
                    "last_modified_time was not specified but it is required when building AnycastIpListSummary",
                )
            })?,
        })
    }
}
