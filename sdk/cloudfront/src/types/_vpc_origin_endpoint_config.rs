// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An Amazon CloudFront VPC origin endpoint configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VpcOriginEndpointConfig {
    /// <p>The name of the CloudFront VPC origin endpoint configuration.</p>
    pub name: ::std::string::String,
    /// <p>The ARN of the CloudFront VPC origin endpoint configuration.</p>
    pub arn: ::std::string::String,
    /// <p>The HTTP port for the CloudFront VPC origin endpoint configuration. The default value is <code>80</code>.</p>
    pub http_port: i32,
    /// <p>The HTTPS port of the CloudFront VPC origin endpoint configuration. The default value is <code>443</code>.</p>
    pub https_port: i32,
    /// <p>The origin protocol policy for the CloudFront VPC origin endpoint configuration.</p>
    pub origin_protocol_policy: crate::types::OriginProtocolPolicy,
    /// <p>A complex type that contains information about the SSL/TLS protocols that CloudFront can use when establishing an HTTPS connection with your origin.</p>
    pub origin_ssl_protocols: ::std::option::Option<crate::types::OriginSslProtocols>,
}
impl VpcOriginEndpointConfig {
    /// <p>The name of the CloudFront VPC origin endpoint configuration.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The ARN of the CloudFront VPC origin endpoint configuration.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The HTTP port for the CloudFront VPC origin endpoint configuration. The default value is <code>80</code>.</p>
    pub fn http_port(&self) -> i32 {
        self.http_port
    }
    /// <p>The HTTPS port of the CloudFront VPC origin endpoint configuration. The default value is <code>443</code>.</p>
    pub fn https_port(&self) -> i32 {
        self.https_port
    }
    /// <p>The origin protocol policy for the CloudFront VPC origin endpoint configuration.</p>
    pub fn origin_protocol_policy(&self) -> &crate::types::OriginProtocolPolicy {
        &self.origin_protocol_policy
    }
    /// <p>A complex type that contains information about the SSL/TLS protocols that CloudFront can use when establishing an HTTPS connection with your origin.</p>
    pub fn origin_ssl_protocols(&self) -> ::std::option::Option<&crate::types::OriginSslProtocols> {
        self.origin_ssl_protocols.as_ref()
    }
}
impl VpcOriginEndpointConfig {
    /// Creates a new builder-style object to manufacture [`VpcOriginEndpointConfig`](crate::types::VpcOriginEndpointConfig).
    pub fn builder() -> crate::types::builders::VpcOriginEndpointConfigBuilder {
        crate::types::builders::VpcOriginEndpointConfigBuilder::default()
    }
}

/// A builder for [`VpcOriginEndpointConfig`](crate::types::VpcOriginEndpointConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VpcOriginEndpointConfigBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) http_port: ::std::option::Option<i32>,
    pub(crate) https_port: ::std::option::Option<i32>,
    pub(crate) origin_protocol_policy: ::std::option::Option<crate::types::OriginProtocolPolicy>,
    pub(crate) origin_ssl_protocols: ::std::option::Option<crate::types::OriginSslProtocols>,
}
impl VpcOriginEndpointConfigBuilder {
    /// <p>The name of the CloudFront VPC origin endpoint configuration.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the CloudFront VPC origin endpoint configuration.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the CloudFront VPC origin endpoint configuration.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The ARN of the CloudFront VPC origin endpoint configuration.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the CloudFront VPC origin endpoint configuration.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the CloudFront VPC origin endpoint configuration.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The HTTP port for the CloudFront VPC origin endpoint configuration. The default value is <code>80</code>.</p>
    /// This field is required.
    pub fn http_port(mut self, input: i32) -> Self {
        self.http_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The HTTP port for the CloudFront VPC origin endpoint configuration. The default value is <code>80</code>.</p>
    pub fn set_http_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.http_port = input;
        self
    }
    /// <p>The HTTP port for the CloudFront VPC origin endpoint configuration. The default value is <code>80</code>.</p>
    pub fn get_http_port(&self) -> &::std::option::Option<i32> {
        &self.http_port
    }
    /// <p>The HTTPS port of the CloudFront VPC origin endpoint configuration. The default value is <code>443</code>.</p>
    /// This field is required.
    pub fn https_port(mut self, input: i32) -> Self {
        self.https_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The HTTPS port of the CloudFront VPC origin endpoint configuration. The default value is <code>443</code>.</p>
    pub fn set_https_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.https_port = input;
        self
    }
    /// <p>The HTTPS port of the CloudFront VPC origin endpoint configuration. The default value is <code>443</code>.</p>
    pub fn get_https_port(&self) -> &::std::option::Option<i32> {
        &self.https_port
    }
    /// <p>The origin protocol policy for the CloudFront VPC origin endpoint configuration.</p>
    /// This field is required.
    pub fn origin_protocol_policy(mut self, input: crate::types::OriginProtocolPolicy) -> Self {
        self.origin_protocol_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The origin protocol policy for the CloudFront VPC origin endpoint configuration.</p>
    pub fn set_origin_protocol_policy(mut self, input: ::std::option::Option<crate::types::OriginProtocolPolicy>) -> Self {
        self.origin_protocol_policy = input;
        self
    }
    /// <p>The origin protocol policy for the CloudFront VPC origin endpoint configuration.</p>
    pub fn get_origin_protocol_policy(&self) -> &::std::option::Option<crate::types::OriginProtocolPolicy> {
        &self.origin_protocol_policy
    }
    /// <p>A complex type that contains information about the SSL/TLS protocols that CloudFront can use when establishing an HTTPS connection with your origin.</p>
    pub fn origin_ssl_protocols(mut self, input: crate::types::OriginSslProtocols) -> Self {
        self.origin_ssl_protocols = ::std::option::Option::Some(input);
        self
    }
    /// <p>A complex type that contains information about the SSL/TLS protocols that CloudFront can use when establishing an HTTPS connection with your origin.</p>
    pub fn set_origin_ssl_protocols(mut self, input: ::std::option::Option<crate::types::OriginSslProtocols>) -> Self {
        self.origin_ssl_protocols = input;
        self
    }
    /// <p>A complex type that contains information about the SSL/TLS protocols that CloudFront can use when establishing an HTTPS connection with your origin.</p>
    pub fn get_origin_ssl_protocols(&self) -> &::std::option::Option<crate::types::OriginSslProtocols> {
        &self.origin_ssl_protocols
    }
    /// Consumes the builder and constructs a [`VpcOriginEndpointConfig`](crate::types::VpcOriginEndpointConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::VpcOriginEndpointConfigBuilder::name)
    /// - [`arn`](crate::types::builders::VpcOriginEndpointConfigBuilder::arn)
    /// - [`http_port`](crate::types::builders::VpcOriginEndpointConfigBuilder::http_port)
    /// - [`https_port`](crate::types::builders::VpcOriginEndpointConfigBuilder::https_port)
    /// - [`origin_protocol_policy`](crate::types::builders::VpcOriginEndpointConfigBuilder::origin_protocol_policy)
    pub fn build(self) -> ::std::result::Result<crate::types::VpcOriginEndpointConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::VpcOriginEndpointConfig {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building VpcOriginEndpointConfig",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building VpcOriginEndpointConfig",
                )
            })?,
            http_port: self.http_port.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "http_port",
                    "http_port was not specified but it is required when building VpcOriginEndpointConfig",
                )
            })?,
            https_port: self.https_port.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "https_port",
                    "https_port was not specified but it is required when building VpcOriginEndpointConfig",
                )
            })?,
            origin_protocol_policy: self.origin_protocol_policy.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "origin_protocol_policy",
                    "origin_protocol_policy was not specified but it is required when building VpcOriginEndpointConfig",
                )
            })?,
            origin_ssl_protocols: self.origin_ssl_protocols,
        })
    }
}
