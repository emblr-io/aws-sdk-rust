// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an external systems configuration for a Voice Connector.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExternalSystemsConfiguration {
    /// <p>The session border controllers.</p>
    pub session_border_controller_types: ::std::option::Option<::std::vec::Vec<crate::types::SessionBorderControllerType>>,
    /// <p>The contact center system.</p>
    pub contact_center_system_types: ::std::option::Option<::std::vec::Vec<crate::types::ContactCenterSystemType>>,
}
impl ExternalSystemsConfiguration {
    /// <p>The session border controllers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.session_border_controller_types.is_none()`.
    pub fn session_border_controller_types(&self) -> &[crate::types::SessionBorderControllerType] {
        self.session_border_controller_types.as_deref().unwrap_or_default()
    }
    /// <p>The contact center system.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.contact_center_system_types.is_none()`.
    pub fn contact_center_system_types(&self) -> &[crate::types::ContactCenterSystemType] {
        self.contact_center_system_types.as_deref().unwrap_or_default()
    }
}
impl ExternalSystemsConfiguration {
    /// Creates a new builder-style object to manufacture [`ExternalSystemsConfiguration`](crate::types::ExternalSystemsConfiguration).
    pub fn builder() -> crate::types::builders::ExternalSystemsConfigurationBuilder {
        crate::types::builders::ExternalSystemsConfigurationBuilder::default()
    }
}

/// A builder for [`ExternalSystemsConfiguration`](crate::types::ExternalSystemsConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ExternalSystemsConfigurationBuilder {
    pub(crate) session_border_controller_types: ::std::option::Option<::std::vec::Vec<crate::types::SessionBorderControllerType>>,
    pub(crate) contact_center_system_types: ::std::option::Option<::std::vec::Vec<crate::types::ContactCenterSystemType>>,
}
impl ExternalSystemsConfigurationBuilder {
    /// Appends an item to `session_border_controller_types`.
    ///
    /// To override the contents of this collection use [`set_session_border_controller_types`](Self::set_session_border_controller_types).
    ///
    /// <p>The session border controllers.</p>
    pub fn session_border_controller_types(mut self, input: crate::types::SessionBorderControllerType) -> Self {
        let mut v = self.session_border_controller_types.unwrap_or_default();
        v.push(input);
        self.session_border_controller_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The session border controllers.</p>
    pub fn set_session_border_controller_types(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::SessionBorderControllerType>>,
    ) -> Self {
        self.session_border_controller_types = input;
        self
    }
    /// <p>The session border controllers.</p>
    pub fn get_session_border_controller_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SessionBorderControllerType>> {
        &self.session_border_controller_types
    }
    /// Appends an item to `contact_center_system_types`.
    ///
    /// To override the contents of this collection use [`set_contact_center_system_types`](Self::set_contact_center_system_types).
    ///
    /// <p>The contact center system.</p>
    pub fn contact_center_system_types(mut self, input: crate::types::ContactCenterSystemType) -> Self {
        let mut v = self.contact_center_system_types.unwrap_or_default();
        v.push(input);
        self.contact_center_system_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The contact center system.</p>
    pub fn set_contact_center_system_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContactCenterSystemType>>) -> Self {
        self.contact_center_system_types = input;
        self
    }
    /// <p>The contact center system.</p>
    pub fn get_contact_center_system_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContactCenterSystemType>> {
        &self.contact_center_system_types
    }
    /// Consumes the builder and constructs a [`ExternalSystemsConfiguration`](crate::types::ExternalSystemsConfiguration).
    pub fn build(self) -> crate::types::ExternalSystemsConfiguration {
        crate::types::ExternalSystemsConfiguration {
            session_border_controller_types: self.session_border_controller_types,
            contact_center_system_types: self.contact_center_system_types,
        }
    }
}
