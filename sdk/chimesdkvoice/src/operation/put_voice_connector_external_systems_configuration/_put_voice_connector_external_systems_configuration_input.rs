// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutVoiceConnectorExternalSystemsConfigurationInput {
    /// <p>The ID of the Voice Connector for which to add the external system configuration.</p>
    pub voice_connector_id: ::std::option::Option<::std::string::String>,
    /// <p>The session border controllers to use.</p>
    pub session_border_controller_types: ::std::option::Option<::std::vec::Vec<crate::types::SessionBorderControllerType>>,
    /// <p>The contact center system to use.</p>
    pub contact_center_system_types: ::std::option::Option<::std::vec::Vec<crate::types::ContactCenterSystemType>>,
}
impl PutVoiceConnectorExternalSystemsConfigurationInput {
    /// <p>The ID of the Voice Connector for which to add the external system configuration.</p>
    pub fn voice_connector_id(&self) -> ::std::option::Option<&str> {
        self.voice_connector_id.as_deref()
    }
    /// <p>The session border controllers to use.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.session_border_controller_types.is_none()`.
    pub fn session_border_controller_types(&self) -> &[crate::types::SessionBorderControllerType] {
        self.session_border_controller_types.as_deref().unwrap_or_default()
    }
    /// <p>The contact center system to use.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.contact_center_system_types.is_none()`.
    pub fn contact_center_system_types(&self) -> &[crate::types::ContactCenterSystemType] {
        self.contact_center_system_types.as_deref().unwrap_or_default()
    }
}
impl PutVoiceConnectorExternalSystemsConfigurationInput {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorExternalSystemsConfigurationInput`](crate::operation::put_voice_connector_external_systems_configuration::PutVoiceConnectorExternalSystemsConfigurationInput).
    pub fn builder(
    ) -> crate::operation::put_voice_connector_external_systems_configuration::builders::PutVoiceConnectorExternalSystemsConfigurationInputBuilder
    {
        crate::operation::put_voice_connector_external_systems_configuration::builders::PutVoiceConnectorExternalSystemsConfigurationInputBuilder::default()
    }
}

/// A builder for [`PutVoiceConnectorExternalSystemsConfigurationInput`](crate::operation::put_voice_connector_external_systems_configuration::PutVoiceConnectorExternalSystemsConfigurationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PutVoiceConnectorExternalSystemsConfigurationInputBuilder {
    pub(crate) voice_connector_id: ::std::option::Option<::std::string::String>,
    pub(crate) session_border_controller_types: ::std::option::Option<::std::vec::Vec<crate::types::SessionBorderControllerType>>,
    pub(crate) contact_center_system_types: ::std::option::Option<::std::vec::Vec<crate::types::ContactCenterSystemType>>,
}
impl PutVoiceConnectorExternalSystemsConfigurationInputBuilder {
    /// <p>The ID of the Voice Connector for which to add the external system configuration.</p>
    /// This field is required.
    pub fn voice_connector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.voice_connector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Voice Connector for which to add the external system configuration.</p>
    pub fn set_voice_connector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.voice_connector_id = input;
        self
    }
    /// <p>The ID of the Voice Connector for which to add the external system configuration.</p>
    pub fn get_voice_connector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.voice_connector_id
    }
    /// Appends an item to `session_border_controller_types`.
    ///
    /// To override the contents of this collection use [`set_session_border_controller_types`](Self::set_session_border_controller_types).
    ///
    /// <p>The session border controllers to use.</p>
    pub fn session_border_controller_types(mut self, input: crate::types::SessionBorderControllerType) -> Self {
        let mut v = self.session_border_controller_types.unwrap_or_default();
        v.push(input);
        self.session_border_controller_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The session border controllers to use.</p>
    pub fn set_session_border_controller_types(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::SessionBorderControllerType>>,
    ) -> Self {
        self.session_border_controller_types = input;
        self
    }
    /// <p>The session border controllers to use.</p>
    pub fn get_session_border_controller_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SessionBorderControllerType>> {
        &self.session_border_controller_types
    }
    /// Appends an item to `contact_center_system_types`.
    ///
    /// To override the contents of this collection use [`set_contact_center_system_types`](Self::set_contact_center_system_types).
    ///
    /// <p>The contact center system to use.</p>
    pub fn contact_center_system_types(mut self, input: crate::types::ContactCenterSystemType) -> Self {
        let mut v = self.contact_center_system_types.unwrap_or_default();
        v.push(input);
        self.contact_center_system_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The contact center system to use.</p>
    pub fn set_contact_center_system_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContactCenterSystemType>>) -> Self {
        self.contact_center_system_types = input;
        self
    }
    /// <p>The contact center system to use.</p>
    pub fn get_contact_center_system_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContactCenterSystemType>> {
        &self.contact_center_system_types
    }
    /// Consumes the builder and constructs a [`PutVoiceConnectorExternalSystemsConfigurationInput`](crate::operation::put_voice_connector_external_systems_configuration::PutVoiceConnectorExternalSystemsConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_voice_connector_external_systems_configuration::PutVoiceConnectorExternalSystemsConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::put_voice_connector_external_systems_configuration::PutVoiceConnectorExternalSystemsConfigurationInput {
                voice_connector_id: self.voice_connector_id,
                session_border_controller_types: self.session_border_controller_types,
                contact_center_system_types: self.contact_center_system_types,
            },
        )
    }
}
