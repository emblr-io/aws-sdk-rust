// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateVoiceConnectorInput {
    /// <p>The name of the Voice Connector.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The AWS Region in which the Amazon Chime SDK Voice Connector is created. Default value: <code>us-east-1</code> .</p>
    pub aws_region: ::std::option::Option<crate::types::VoiceConnectorAwsRegion>,
    /// <p>Enables or disables encryption for the Voice Connector.</p>
    pub require_encryption: ::std::option::Option<bool>,
    /// <p>The tags assigned to the Voice Connector.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The connectors for use with Amazon Connect.</p>
    /// <p>The following options are available:</p>
    /// <ul>
    /// <li>
    /// <p><code>CONNECT_CALL_TRANSFER_CONNECTOR</code> - Enables enterprises to integrate Amazon Connect with other voice systems to directly transfer voice calls and metadata without using the public telephone network. They can use Amazon Connect telephony and Interactive Voice Response (IVR) with their existing voice systems to modernize the IVR experience of their existing contact center and their enterprise and branch voice systems. Additionally, enterprises migrating their contact center to Amazon Connect can start with Connect telephony and IVR for immediate modernization ahead of agent migration.</p></li>
    /// <li>
    /// <p><code>CONNECT_ANALYTICS_CONNECTOR</code> - Enables enterprises to integrate Amazon Connect with other voice systems for real-time and post-call analytics. They can use Amazon Connect Contact Lens with their existing voice systems to provides call recordings, conversational analytics (including contact transcript, sensitive data redaction, content categorization, theme detection, sentiment analysis, real-time alerts, and post-contact summary), and agent performance evaluations (including evaluation forms, automated evaluation, supervisor review) with a rich user experience to display, search and filter customer interactions, and programmatic access to data streams and the data lake. Additionally, enterprises migrating their contact center to Amazon Connect can start with Contact Lens analytics and performance insights ahead of agent migration.</p></li>
    /// </ul>
    pub integration_type: ::std::option::Option<crate::types::VoiceConnectorIntegrationType>,
}
impl CreateVoiceConnectorInput {
    /// <p>The name of the Voice Connector.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The AWS Region in which the Amazon Chime SDK Voice Connector is created. Default value: <code>us-east-1</code> .</p>
    pub fn aws_region(&self) -> ::std::option::Option<&crate::types::VoiceConnectorAwsRegion> {
        self.aws_region.as_ref()
    }
    /// <p>Enables or disables encryption for the Voice Connector.</p>
    pub fn require_encryption(&self) -> ::std::option::Option<bool> {
        self.require_encryption
    }
    /// <p>The tags assigned to the Voice Connector.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The connectors for use with Amazon Connect.</p>
    /// <p>The following options are available:</p>
    /// <ul>
    /// <li>
    /// <p><code>CONNECT_CALL_TRANSFER_CONNECTOR</code> - Enables enterprises to integrate Amazon Connect with other voice systems to directly transfer voice calls and metadata without using the public telephone network. They can use Amazon Connect telephony and Interactive Voice Response (IVR) with their existing voice systems to modernize the IVR experience of their existing contact center and their enterprise and branch voice systems. Additionally, enterprises migrating their contact center to Amazon Connect can start with Connect telephony and IVR for immediate modernization ahead of agent migration.</p></li>
    /// <li>
    /// <p><code>CONNECT_ANALYTICS_CONNECTOR</code> - Enables enterprises to integrate Amazon Connect with other voice systems for real-time and post-call analytics. They can use Amazon Connect Contact Lens with their existing voice systems to provides call recordings, conversational analytics (including contact transcript, sensitive data redaction, content categorization, theme detection, sentiment analysis, real-time alerts, and post-contact summary), and agent performance evaluations (including evaluation forms, automated evaluation, supervisor review) with a rich user experience to display, search and filter customer interactions, and programmatic access to data streams and the data lake. Additionally, enterprises migrating their contact center to Amazon Connect can start with Contact Lens analytics and performance insights ahead of agent migration.</p></li>
    /// </ul>
    pub fn integration_type(&self) -> ::std::option::Option<&crate::types::VoiceConnectorIntegrationType> {
        self.integration_type.as_ref()
    }
}
impl CreateVoiceConnectorInput {
    /// Creates a new builder-style object to manufacture [`CreateVoiceConnectorInput`](crate::operation::create_voice_connector::CreateVoiceConnectorInput).
    pub fn builder() -> crate::operation::create_voice_connector::builders::CreateVoiceConnectorInputBuilder {
        crate::operation::create_voice_connector::builders::CreateVoiceConnectorInputBuilder::default()
    }
}

/// A builder for [`CreateVoiceConnectorInput`](crate::operation::create_voice_connector::CreateVoiceConnectorInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateVoiceConnectorInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) aws_region: ::std::option::Option<crate::types::VoiceConnectorAwsRegion>,
    pub(crate) require_encryption: ::std::option::Option<bool>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) integration_type: ::std::option::Option<crate::types::VoiceConnectorIntegrationType>,
}
impl CreateVoiceConnectorInputBuilder {
    /// <p>The name of the Voice Connector.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Voice Connector.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Voice Connector.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The AWS Region in which the Amazon Chime SDK Voice Connector is created. Default value: <code>us-east-1</code> .</p>
    pub fn aws_region(mut self, input: crate::types::VoiceConnectorAwsRegion) -> Self {
        self.aws_region = ::std::option::Option::Some(input);
        self
    }
    /// <p>The AWS Region in which the Amazon Chime SDK Voice Connector is created. Default value: <code>us-east-1</code> .</p>
    pub fn set_aws_region(mut self, input: ::std::option::Option<crate::types::VoiceConnectorAwsRegion>) -> Self {
        self.aws_region = input;
        self
    }
    /// <p>The AWS Region in which the Amazon Chime SDK Voice Connector is created. Default value: <code>us-east-1</code> .</p>
    pub fn get_aws_region(&self) -> &::std::option::Option<crate::types::VoiceConnectorAwsRegion> {
        &self.aws_region
    }
    /// <p>Enables or disables encryption for the Voice Connector.</p>
    /// This field is required.
    pub fn require_encryption(mut self, input: bool) -> Self {
        self.require_encryption = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables or disables encryption for the Voice Connector.</p>
    pub fn set_require_encryption(mut self, input: ::std::option::Option<bool>) -> Self {
        self.require_encryption = input;
        self
    }
    /// <p>Enables or disables encryption for the Voice Connector.</p>
    pub fn get_require_encryption(&self) -> &::std::option::Option<bool> {
        &self.require_encryption
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the Voice Connector.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags assigned to the Voice Connector.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags assigned to the Voice Connector.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The connectors for use with Amazon Connect.</p>
    /// <p>The following options are available:</p>
    /// <ul>
    /// <li>
    /// <p><code>CONNECT_CALL_TRANSFER_CONNECTOR</code> - Enables enterprises to integrate Amazon Connect with other voice systems to directly transfer voice calls and metadata without using the public telephone network. They can use Amazon Connect telephony and Interactive Voice Response (IVR) with their existing voice systems to modernize the IVR experience of their existing contact center and their enterprise and branch voice systems. Additionally, enterprises migrating their contact center to Amazon Connect can start with Connect telephony and IVR for immediate modernization ahead of agent migration.</p></li>
    /// <li>
    /// <p><code>CONNECT_ANALYTICS_CONNECTOR</code> - Enables enterprises to integrate Amazon Connect with other voice systems for real-time and post-call analytics. They can use Amazon Connect Contact Lens with their existing voice systems to provides call recordings, conversational analytics (including contact transcript, sensitive data redaction, content categorization, theme detection, sentiment analysis, real-time alerts, and post-contact summary), and agent performance evaluations (including evaluation forms, automated evaluation, supervisor review) with a rich user experience to display, search and filter customer interactions, and programmatic access to data streams and the data lake. Additionally, enterprises migrating their contact center to Amazon Connect can start with Contact Lens analytics and performance insights ahead of agent migration.</p></li>
    /// </ul>
    pub fn integration_type(mut self, input: crate::types::VoiceConnectorIntegrationType) -> Self {
        self.integration_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The connectors for use with Amazon Connect.</p>
    /// <p>The following options are available:</p>
    /// <ul>
    /// <li>
    /// <p><code>CONNECT_CALL_TRANSFER_CONNECTOR</code> - Enables enterprises to integrate Amazon Connect with other voice systems to directly transfer voice calls and metadata without using the public telephone network. They can use Amazon Connect telephony and Interactive Voice Response (IVR) with their existing voice systems to modernize the IVR experience of their existing contact center and their enterprise and branch voice systems. Additionally, enterprises migrating their contact center to Amazon Connect can start with Connect telephony and IVR for immediate modernization ahead of agent migration.</p></li>
    /// <li>
    /// <p><code>CONNECT_ANALYTICS_CONNECTOR</code> - Enables enterprises to integrate Amazon Connect with other voice systems for real-time and post-call analytics. They can use Amazon Connect Contact Lens with their existing voice systems to provides call recordings, conversational analytics (including contact transcript, sensitive data redaction, content categorization, theme detection, sentiment analysis, real-time alerts, and post-contact summary), and agent performance evaluations (including evaluation forms, automated evaluation, supervisor review) with a rich user experience to display, search and filter customer interactions, and programmatic access to data streams and the data lake. Additionally, enterprises migrating their contact center to Amazon Connect can start with Contact Lens analytics and performance insights ahead of agent migration.</p></li>
    /// </ul>
    pub fn set_integration_type(mut self, input: ::std::option::Option<crate::types::VoiceConnectorIntegrationType>) -> Self {
        self.integration_type = input;
        self
    }
    /// <p>The connectors for use with Amazon Connect.</p>
    /// <p>The following options are available:</p>
    /// <ul>
    /// <li>
    /// <p><code>CONNECT_CALL_TRANSFER_CONNECTOR</code> - Enables enterprises to integrate Amazon Connect with other voice systems to directly transfer voice calls and metadata without using the public telephone network. They can use Amazon Connect telephony and Interactive Voice Response (IVR) with their existing voice systems to modernize the IVR experience of their existing contact center and their enterprise and branch voice systems. Additionally, enterprises migrating their contact center to Amazon Connect can start with Connect telephony and IVR for immediate modernization ahead of agent migration.</p></li>
    /// <li>
    /// <p><code>CONNECT_ANALYTICS_CONNECTOR</code> - Enables enterprises to integrate Amazon Connect with other voice systems for real-time and post-call analytics. They can use Amazon Connect Contact Lens with their existing voice systems to provides call recordings, conversational analytics (including contact transcript, sensitive data redaction, content categorization, theme detection, sentiment analysis, real-time alerts, and post-contact summary), and agent performance evaluations (including evaluation forms, automated evaluation, supervisor review) with a rich user experience to display, search and filter customer interactions, and programmatic access to data streams and the data lake. Additionally, enterprises migrating their contact center to Amazon Connect can start with Contact Lens analytics and performance insights ahead of agent migration.</p></li>
    /// </ul>
    pub fn get_integration_type(&self) -> &::std::option::Option<crate::types::VoiceConnectorIntegrationType> {
        &self.integration_type
    }
    /// Consumes the builder and constructs a [`CreateVoiceConnectorInput`](crate::operation::create_voice_connector::CreateVoiceConnectorInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_voice_connector::CreateVoiceConnectorInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_voice_connector::CreateVoiceConnectorInput {
            name: self.name,
            aws_region: self.aws_region,
            require_encryption: self.require_encryption,
            tags: self.tags,
            integration_type: self.integration_type,
        })
    }
}
