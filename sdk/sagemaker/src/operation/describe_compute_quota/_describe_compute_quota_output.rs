// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeComputeQuotaOutput {
    /// <p>ARN of the compute allocation definition.</p>
    pub compute_quota_arn: ::std::option::Option<::std::string::String>,
    /// <p>ID of the compute allocation definition.</p>
    pub compute_quota_id: ::std::option::Option<::std::string::String>,
    /// <p>Name of the compute allocation definition.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Description of the compute allocation definition.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Version of the compute allocation definition.</p>
    pub compute_quota_version: ::std::option::Option<i32>,
    /// <p>Status of the compute allocation definition.</p>
    pub status: ::std::option::Option<crate::types::SchedulerResourceStatus>,
    /// <p>Failure reason of the compute allocation definition.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>ARN of the cluster.</p>
    pub cluster_arn: ::std::option::Option<::std::string::String>,
    /// <p>Configuration of the compute allocation definition. This includes the resource sharing option, and the setting to preempt low priority tasks.</p>
    pub compute_quota_config: ::std::option::Option<crate::types::ComputeQuotaConfig>,
    /// <p>The target entity to allocate compute resources to.</p>
    pub compute_quota_target: ::std::option::Option<crate::types::ComputeQuotaTarget>,
    /// <p>The state of the compute allocation being described. Use to enable or disable compute allocation.</p>
    /// <p>Default is <code>Enabled</code>.</p>
    pub activation_state: ::std::option::Option<crate::types::ActivationState>,
    /// <p>Creation time of the compute allocation configuration.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub created_by: ::std::option::Option<crate::types::UserContext>,
    /// <p>Last modified time of the compute allocation configuration.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub last_modified_by: ::std::option::Option<crate::types::UserContext>,
    _request_id: Option<String>,
}
impl DescribeComputeQuotaOutput {
    /// <p>ARN of the compute allocation definition.</p>
    pub fn compute_quota_arn(&self) -> ::std::option::Option<&str> {
        self.compute_quota_arn.as_deref()
    }
    /// <p>ID of the compute allocation definition.</p>
    pub fn compute_quota_id(&self) -> ::std::option::Option<&str> {
        self.compute_quota_id.as_deref()
    }
    /// <p>Name of the compute allocation definition.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Description of the compute allocation definition.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Version of the compute allocation definition.</p>
    pub fn compute_quota_version(&self) -> ::std::option::Option<i32> {
        self.compute_quota_version
    }
    /// <p>Status of the compute allocation definition.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::SchedulerResourceStatus> {
        self.status.as_ref()
    }
    /// <p>Failure reason of the compute allocation definition.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>ARN of the cluster.</p>
    pub fn cluster_arn(&self) -> ::std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>Configuration of the compute allocation definition. This includes the resource sharing option, and the setting to preempt low priority tasks.</p>
    pub fn compute_quota_config(&self) -> ::std::option::Option<&crate::types::ComputeQuotaConfig> {
        self.compute_quota_config.as_ref()
    }
    /// <p>The target entity to allocate compute resources to.</p>
    pub fn compute_quota_target(&self) -> ::std::option::Option<&crate::types::ComputeQuotaTarget> {
        self.compute_quota_target.as_ref()
    }
    /// <p>The state of the compute allocation being described. Use to enable or disable compute allocation.</p>
    /// <p>Default is <code>Enabled</code>.</p>
    pub fn activation_state(&self) -> ::std::option::Option<&crate::types::ActivationState> {
        self.activation_state.as_ref()
    }
    /// <p>Creation time of the compute allocation configuration.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn created_by(&self) -> ::std::option::Option<&crate::types::UserContext> {
        self.created_by.as_ref()
    }
    /// <p>Last modified time of the compute allocation configuration.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn last_modified_by(&self) -> ::std::option::Option<&crate::types::UserContext> {
        self.last_modified_by.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeComputeQuotaOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeComputeQuotaOutput {
    /// Creates a new builder-style object to manufacture [`DescribeComputeQuotaOutput`](crate::operation::describe_compute_quota::DescribeComputeQuotaOutput).
    pub fn builder() -> crate::operation::describe_compute_quota::builders::DescribeComputeQuotaOutputBuilder {
        crate::operation::describe_compute_quota::builders::DescribeComputeQuotaOutputBuilder::default()
    }
}

/// A builder for [`DescribeComputeQuotaOutput`](crate::operation::describe_compute_quota::DescribeComputeQuotaOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeComputeQuotaOutputBuilder {
    pub(crate) compute_quota_arn: ::std::option::Option<::std::string::String>,
    pub(crate) compute_quota_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) compute_quota_version: ::std::option::Option<i32>,
    pub(crate) status: ::std::option::Option<crate::types::SchedulerResourceStatus>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_arn: ::std::option::Option<::std::string::String>,
    pub(crate) compute_quota_config: ::std::option::Option<crate::types::ComputeQuotaConfig>,
    pub(crate) compute_quota_target: ::std::option::Option<crate::types::ComputeQuotaTarget>,
    pub(crate) activation_state: ::std::option::Option<crate::types::ActivationState>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<crate::types::UserContext>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_by: ::std::option::Option<crate::types::UserContext>,
    _request_id: Option<String>,
}
impl DescribeComputeQuotaOutputBuilder {
    /// <p>ARN of the compute allocation definition.</p>
    /// This field is required.
    pub fn compute_quota_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.compute_quota_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the compute allocation definition.</p>
    pub fn set_compute_quota_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.compute_quota_arn = input;
        self
    }
    /// <p>ARN of the compute allocation definition.</p>
    pub fn get_compute_quota_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.compute_quota_arn
    }
    /// <p>ID of the compute allocation definition.</p>
    /// This field is required.
    pub fn compute_quota_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.compute_quota_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the compute allocation definition.</p>
    pub fn set_compute_quota_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.compute_quota_id = input;
        self
    }
    /// <p>ID of the compute allocation definition.</p>
    pub fn get_compute_quota_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.compute_quota_id
    }
    /// <p>Name of the compute allocation definition.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the compute allocation definition.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the compute allocation definition.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Description of the compute allocation definition.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Description of the compute allocation definition.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Description of the compute allocation definition.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Version of the compute allocation definition.</p>
    /// This field is required.
    pub fn compute_quota_version(mut self, input: i32) -> Self {
        self.compute_quota_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>Version of the compute allocation definition.</p>
    pub fn set_compute_quota_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.compute_quota_version = input;
        self
    }
    /// <p>Version of the compute allocation definition.</p>
    pub fn get_compute_quota_version(&self) -> &::std::option::Option<i32> {
        &self.compute_quota_version
    }
    /// <p>Status of the compute allocation definition.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::SchedulerResourceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of the compute allocation definition.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SchedulerResourceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Status of the compute allocation definition.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SchedulerResourceStatus> {
        &self.status
    }
    /// <p>Failure reason of the compute allocation definition.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Failure reason of the compute allocation definition.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>Failure reason of the compute allocation definition.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// <p>ARN of the cluster.</p>
    pub fn cluster_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the cluster.</p>
    pub fn set_cluster_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_arn = input;
        self
    }
    /// <p>ARN of the cluster.</p>
    pub fn get_cluster_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_arn
    }
    /// <p>Configuration of the compute allocation definition. This includes the resource sharing option, and the setting to preempt low priority tasks.</p>
    pub fn compute_quota_config(mut self, input: crate::types::ComputeQuotaConfig) -> Self {
        self.compute_quota_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration of the compute allocation definition. This includes the resource sharing option, and the setting to preempt low priority tasks.</p>
    pub fn set_compute_quota_config(mut self, input: ::std::option::Option<crate::types::ComputeQuotaConfig>) -> Self {
        self.compute_quota_config = input;
        self
    }
    /// <p>Configuration of the compute allocation definition. This includes the resource sharing option, and the setting to preempt low priority tasks.</p>
    pub fn get_compute_quota_config(&self) -> &::std::option::Option<crate::types::ComputeQuotaConfig> {
        &self.compute_quota_config
    }
    /// <p>The target entity to allocate compute resources to.</p>
    /// This field is required.
    pub fn compute_quota_target(mut self, input: crate::types::ComputeQuotaTarget) -> Self {
        self.compute_quota_target = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target entity to allocate compute resources to.</p>
    pub fn set_compute_quota_target(mut self, input: ::std::option::Option<crate::types::ComputeQuotaTarget>) -> Self {
        self.compute_quota_target = input;
        self
    }
    /// <p>The target entity to allocate compute resources to.</p>
    pub fn get_compute_quota_target(&self) -> &::std::option::Option<crate::types::ComputeQuotaTarget> {
        &self.compute_quota_target
    }
    /// <p>The state of the compute allocation being described. Use to enable or disable compute allocation.</p>
    /// <p>Default is <code>Enabled</code>.</p>
    pub fn activation_state(mut self, input: crate::types::ActivationState) -> Self {
        self.activation_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the compute allocation being described. Use to enable or disable compute allocation.</p>
    /// <p>Default is <code>Enabled</code>.</p>
    pub fn set_activation_state(mut self, input: ::std::option::Option<crate::types::ActivationState>) -> Self {
        self.activation_state = input;
        self
    }
    /// <p>The state of the compute allocation being described. Use to enable or disable compute allocation.</p>
    /// <p>Default is <code>Enabled</code>.</p>
    pub fn get_activation_state(&self) -> &::std::option::Option<crate::types::ActivationState> {
        &self.activation_state
    }
    /// <p>Creation time of the compute allocation configuration.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Creation time of the compute allocation configuration.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>Creation time of the compute allocation configuration.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn created_by(mut self, input: crate::types::UserContext) -> Self {
        self.created_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<crate::types::UserContext>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<crate::types::UserContext> {
        &self.created_by
    }
    /// <p>Last modified time of the compute allocation configuration.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Last modified time of the compute allocation configuration.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>Last modified time of the compute allocation configuration.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn last_modified_by(mut self, input: crate::types::UserContext) -> Self {
        self.last_modified_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn set_last_modified_by(mut self, input: ::std::option::Option<crate::types::UserContext>) -> Self {
        self.last_modified_by = input;
        self
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn get_last_modified_by(&self) -> &::std::option::Option<crate::types::UserContext> {
        &self.last_modified_by
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeComputeQuotaOutput`](crate::operation::describe_compute_quota::DescribeComputeQuotaOutput).
    pub fn build(self) -> crate::operation::describe_compute_quota::DescribeComputeQuotaOutput {
        crate::operation::describe_compute_quota::DescribeComputeQuotaOutput {
            compute_quota_arn: self.compute_quota_arn,
            compute_quota_id: self.compute_quota_id,
            name: self.name,
            description: self.description,
            compute_quota_version: self.compute_quota_version,
            status: self.status,
            failure_reason: self.failure_reason,
            cluster_arn: self.cluster_arn,
            compute_quota_config: self.compute_quota_config,
            compute_quota_target: self.compute_quota_target,
            activation_state: self.activation_state,
            creation_time: self.creation_time,
            created_by: self.created_by,
            last_modified_time: self.last_modified_time,
            last_modified_by: self.last_modified_by,
            _request_id: self._request_id,
        }
    }
}
