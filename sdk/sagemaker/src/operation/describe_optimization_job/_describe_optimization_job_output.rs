// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeOptimizationJobOutput {
    /// <p>The Amazon Resource Name (ARN) of the optimization job.</p>
    pub optimization_job_arn: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the optimization job.</p>
    pub optimization_job_status: ::std::option::Option<crate::types::OptimizationJobStatus>,
    /// <p>The time when the optimization job started.</p>
    pub optimization_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time when the optimization job finished processing.</p>
    pub optimization_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time when you created the optimization job.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time when the optimization job was last updated.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>If the optimization job status is <code>FAILED</code>, the reason for the failure.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>The name that you assigned to the optimization job.</p>
    pub optimization_job_name: ::std::option::Option<::std::string::String>,
    /// <p>The location of the source model to optimize with an optimization job.</p>
    pub model_source: ::std::option::Option<crate::types::OptimizationJobModelSource>,
    /// <p>The environment variables to set in the model container.</p>
    pub optimization_environment: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The type of instance that hosts the optimized model that you create with the optimization job.</p>
    pub deployment_instance_type: ::std::option::Option<crate::types::OptimizationJobDeploymentInstanceType>,
    /// <p>Settings for each of the optimization techniques that the job applies.</p>
    pub optimization_configs: ::std::option::Option<::std::vec::Vec<crate::types::OptimizationConfig>>,
    /// <p>Details for where to store the optimized model that you create with the optimization job.</p>
    pub output_config: ::std::option::Option<crate::types::OptimizationJobOutputConfig>,
    /// <p>Output values produced by an optimization job.</p>
    pub optimization_output: ::std::option::Option<crate::types::OptimizationOutput>,
    /// <p>The ARN of the IAM role that you assigned to the optimization job.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies a limit to how long a job can run. When the job reaches the time limit, SageMaker ends the job. Use this API to cap costs.</p>
    /// <p>To stop a training job, SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.</p>
    /// <p>The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with <code>CreateModel</code>.</p><note>
    /// <p>The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.</p>
    /// </note>
    pub stopping_condition: ::std::option::Option<crate::types::StoppingCondition>,
    /// <p>A VPC in Amazon VPC that your optimized model has access to.</p>
    pub vpc_config: ::std::option::Option<crate::types::OptimizationVpcConfig>,
    _request_id: Option<String>,
}
impl DescribeOptimizationJobOutput {
    /// <p>The Amazon Resource Name (ARN) of the optimization job.</p>
    pub fn optimization_job_arn(&self) -> ::std::option::Option<&str> {
        self.optimization_job_arn.as_deref()
    }
    /// <p>The current status of the optimization job.</p>
    pub fn optimization_job_status(&self) -> ::std::option::Option<&crate::types::OptimizationJobStatus> {
        self.optimization_job_status.as_ref()
    }
    /// <p>The time when the optimization job started.</p>
    pub fn optimization_start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.optimization_start_time.as_ref()
    }
    /// <p>The time when the optimization job finished processing.</p>
    pub fn optimization_end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.optimization_end_time.as_ref()
    }
    /// <p>The time when you created the optimization job.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The time when the optimization job was last updated.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>If the optimization job status is <code>FAILED</code>, the reason for the failure.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The name that you assigned to the optimization job.</p>
    pub fn optimization_job_name(&self) -> ::std::option::Option<&str> {
        self.optimization_job_name.as_deref()
    }
    /// <p>The location of the source model to optimize with an optimization job.</p>
    pub fn model_source(&self) -> ::std::option::Option<&crate::types::OptimizationJobModelSource> {
        self.model_source.as_ref()
    }
    /// <p>The environment variables to set in the model container.</p>
    pub fn optimization_environment(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.optimization_environment.as_ref()
    }
    /// <p>The type of instance that hosts the optimized model that you create with the optimization job.</p>
    pub fn deployment_instance_type(&self) -> ::std::option::Option<&crate::types::OptimizationJobDeploymentInstanceType> {
        self.deployment_instance_type.as_ref()
    }
    /// <p>Settings for each of the optimization techniques that the job applies.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.optimization_configs.is_none()`.
    pub fn optimization_configs(&self) -> &[crate::types::OptimizationConfig] {
        self.optimization_configs.as_deref().unwrap_or_default()
    }
    /// <p>Details for where to store the optimized model that you create with the optimization job.</p>
    pub fn output_config(&self) -> ::std::option::Option<&crate::types::OptimizationJobOutputConfig> {
        self.output_config.as_ref()
    }
    /// <p>Output values produced by an optimization job.</p>
    pub fn optimization_output(&self) -> ::std::option::Option<&crate::types::OptimizationOutput> {
        self.optimization_output.as_ref()
    }
    /// <p>The ARN of the IAM role that you assigned to the optimization job.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>Specifies a limit to how long a job can run. When the job reaches the time limit, SageMaker ends the job. Use this API to cap costs.</p>
    /// <p>To stop a training job, SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.</p>
    /// <p>The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with <code>CreateModel</code>.</p><note>
    /// <p>The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.</p>
    /// </note>
    pub fn stopping_condition(&self) -> ::std::option::Option<&crate::types::StoppingCondition> {
        self.stopping_condition.as_ref()
    }
    /// <p>A VPC in Amazon VPC that your optimized model has access to.</p>
    pub fn vpc_config(&self) -> ::std::option::Option<&crate::types::OptimizationVpcConfig> {
        self.vpc_config.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeOptimizationJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeOptimizationJobOutput {
    /// Creates a new builder-style object to manufacture [`DescribeOptimizationJobOutput`](crate::operation::describe_optimization_job::DescribeOptimizationJobOutput).
    pub fn builder() -> crate::operation::describe_optimization_job::builders::DescribeOptimizationJobOutputBuilder {
        crate::operation::describe_optimization_job::builders::DescribeOptimizationJobOutputBuilder::default()
    }
}

/// A builder for [`DescribeOptimizationJobOutput`](crate::operation::describe_optimization_job::DescribeOptimizationJobOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeOptimizationJobOutputBuilder {
    pub(crate) optimization_job_arn: ::std::option::Option<::std::string::String>,
    pub(crate) optimization_job_status: ::std::option::Option<crate::types::OptimizationJobStatus>,
    pub(crate) optimization_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) optimization_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) optimization_job_name: ::std::option::Option<::std::string::String>,
    pub(crate) model_source: ::std::option::Option<crate::types::OptimizationJobModelSource>,
    pub(crate) optimization_environment: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) deployment_instance_type: ::std::option::Option<crate::types::OptimizationJobDeploymentInstanceType>,
    pub(crate) optimization_configs: ::std::option::Option<::std::vec::Vec<crate::types::OptimizationConfig>>,
    pub(crate) output_config: ::std::option::Option<crate::types::OptimizationJobOutputConfig>,
    pub(crate) optimization_output: ::std::option::Option<crate::types::OptimizationOutput>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) stopping_condition: ::std::option::Option<crate::types::StoppingCondition>,
    pub(crate) vpc_config: ::std::option::Option<crate::types::OptimizationVpcConfig>,
    _request_id: Option<String>,
}
impl DescribeOptimizationJobOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the optimization job.</p>
    /// This field is required.
    pub fn optimization_job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.optimization_job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the optimization job.</p>
    pub fn set_optimization_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.optimization_job_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the optimization job.</p>
    pub fn get_optimization_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.optimization_job_arn
    }
    /// <p>The current status of the optimization job.</p>
    /// This field is required.
    pub fn optimization_job_status(mut self, input: crate::types::OptimizationJobStatus) -> Self {
        self.optimization_job_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the optimization job.</p>
    pub fn set_optimization_job_status(mut self, input: ::std::option::Option<crate::types::OptimizationJobStatus>) -> Self {
        self.optimization_job_status = input;
        self
    }
    /// <p>The current status of the optimization job.</p>
    pub fn get_optimization_job_status(&self) -> &::std::option::Option<crate::types::OptimizationJobStatus> {
        &self.optimization_job_status
    }
    /// <p>The time when the optimization job started.</p>
    pub fn optimization_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.optimization_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the optimization job started.</p>
    pub fn set_optimization_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.optimization_start_time = input;
        self
    }
    /// <p>The time when the optimization job started.</p>
    pub fn get_optimization_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.optimization_start_time
    }
    /// <p>The time when the optimization job finished processing.</p>
    pub fn optimization_end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.optimization_end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the optimization job finished processing.</p>
    pub fn set_optimization_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.optimization_end_time = input;
        self
    }
    /// <p>The time when the optimization job finished processing.</p>
    pub fn get_optimization_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.optimization_end_time
    }
    /// <p>The time when you created the optimization job.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when you created the optimization job.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time when you created the optimization job.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The time when the optimization job was last updated.</p>
    /// This field is required.
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the optimization job was last updated.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The time when the optimization job was last updated.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>If the optimization job status is <code>FAILED</code>, the reason for the failure.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the optimization job status is <code>FAILED</code>, the reason for the failure.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>If the optimization job status is <code>FAILED</code>, the reason for the failure.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// <p>The name that you assigned to the optimization job.</p>
    /// This field is required.
    pub fn optimization_job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.optimization_job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name that you assigned to the optimization job.</p>
    pub fn set_optimization_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.optimization_job_name = input;
        self
    }
    /// <p>The name that you assigned to the optimization job.</p>
    pub fn get_optimization_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.optimization_job_name
    }
    /// <p>The location of the source model to optimize with an optimization job.</p>
    /// This field is required.
    pub fn model_source(mut self, input: crate::types::OptimizationJobModelSource) -> Self {
        self.model_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The location of the source model to optimize with an optimization job.</p>
    pub fn set_model_source(mut self, input: ::std::option::Option<crate::types::OptimizationJobModelSource>) -> Self {
        self.model_source = input;
        self
    }
    /// <p>The location of the source model to optimize with an optimization job.</p>
    pub fn get_model_source(&self) -> &::std::option::Option<crate::types::OptimizationJobModelSource> {
        &self.model_source
    }
    /// Adds a key-value pair to `optimization_environment`.
    ///
    /// To override the contents of this collection use [`set_optimization_environment`](Self::set_optimization_environment).
    ///
    /// <p>The environment variables to set in the model container.</p>
    pub fn optimization_environment(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.optimization_environment.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.optimization_environment = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The environment variables to set in the model container.</p>
    pub fn set_optimization_environment(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.optimization_environment = input;
        self
    }
    /// <p>The environment variables to set in the model container.</p>
    pub fn get_optimization_environment(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.optimization_environment
    }
    /// <p>The type of instance that hosts the optimized model that you create with the optimization job.</p>
    /// This field is required.
    pub fn deployment_instance_type(mut self, input: crate::types::OptimizationJobDeploymentInstanceType) -> Self {
        self.deployment_instance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of instance that hosts the optimized model that you create with the optimization job.</p>
    pub fn set_deployment_instance_type(mut self, input: ::std::option::Option<crate::types::OptimizationJobDeploymentInstanceType>) -> Self {
        self.deployment_instance_type = input;
        self
    }
    /// <p>The type of instance that hosts the optimized model that you create with the optimization job.</p>
    pub fn get_deployment_instance_type(&self) -> &::std::option::Option<crate::types::OptimizationJobDeploymentInstanceType> {
        &self.deployment_instance_type
    }
    /// Appends an item to `optimization_configs`.
    ///
    /// To override the contents of this collection use [`set_optimization_configs`](Self::set_optimization_configs).
    ///
    /// <p>Settings for each of the optimization techniques that the job applies.</p>
    pub fn optimization_configs(mut self, input: crate::types::OptimizationConfig) -> Self {
        let mut v = self.optimization_configs.unwrap_or_default();
        v.push(input);
        self.optimization_configs = ::std::option::Option::Some(v);
        self
    }
    /// <p>Settings for each of the optimization techniques that the job applies.</p>
    pub fn set_optimization_configs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OptimizationConfig>>) -> Self {
        self.optimization_configs = input;
        self
    }
    /// <p>Settings for each of the optimization techniques that the job applies.</p>
    pub fn get_optimization_configs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OptimizationConfig>> {
        &self.optimization_configs
    }
    /// <p>Details for where to store the optimized model that you create with the optimization job.</p>
    /// This field is required.
    pub fn output_config(mut self, input: crate::types::OptimizationJobOutputConfig) -> Self {
        self.output_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details for where to store the optimized model that you create with the optimization job.</p>
    pub fn set_output_config(mut self, input: ::std::option::Option<crate::types::OptimizationJobOutputConfig>) -> Self {
        self.output_config = input;
        self
    }
    /// <p>Details for where to store the optimized model that you create with the optimization job.</p>
    pub fn get_output_config(&self) -> &::std::option::Option<crate::types::OptimizationJobOutputConfig> {
        &self.output_config
    }
    /// <p>Output values produced by an optimization job.</p>
    pub fn optimization_output(mut self, input: crate::types::OptimizationOutput) -> Self {
        self.optimization_output = ::std::option::Option::Some(input);
        self
    }
    /// <p>Output values produced by an optimization job.</p>
    pub fn set_optimization_output(mut self, input: ::std::option::Option<crate::types::OptimizationOutput>) -> Self {
        self.optimization_output = input;
        self
    }
    /// <p>Output values produced by an optimization job.</p>
    pub fn get_optimization_output(&self) -> &::std::option::Option<crate::types::OptimizationOutput> {
        &self.optimization_output
    }
    /// <p>The ARN of the IAM role that you assigned to the optimization job.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that you assigned to the optimization job.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of the IAM role that you assigned to the optimization job.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>Specifies a limit to how long a job can run. When the job reaches the time limit, SageMaker ends the job. Use this API to cap costs.</p>
    /// <p>To stop a training job, SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.</p>
    /// <p>The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with <code>CreateModel</code>.</p><note>
    /// <p>The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.</p>
    /// </note>
    /// This field is required.
    pub fn stopping_condition(mut self, input: crate::types::StoppingCondition) -> Self {
        self.stopping_condition = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies a limit to how long a job can run. When the job reaches the time limit, SageMaker ends the job. Use this API to cap costs.</p>
    /// <p>To stop a training job, SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.</p>
    /// <p>The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with <code>CreateModel</code>.</p><note>
    /// <p>The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.</p>
    /// </note>
    pub fn set_stopping_condition(mut self, input: ::std::option::Option<crate::types::StoppingCondition>) -> Self {
        self.stopping_condition = input;
        self
    }
    /// <p>Specifies a limit to how long a job can run. When the job reaches the time limit, SageMaker ends the job. Use this API to cap costs.</p>
    /// <p>To stop a training job, SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.</p>
    /// <p>The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with <code>CreateModel</code>.</p><note>
    /// <p>The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.</p>
    /// </note>
    pub fn get_stopping_condition(&self) -> &::std::option::Option<crate::types::StoppingCondition> {
        &self.stopping_condition
    }
    /// <p>A VPC in Amazon VPC that your optimized model has access to.</p>
    pub fn vpc_config(mut self, input: crate::types::OptimizationVpcConfig) -> Self {
        self.vpc_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>A VPC in Amazon VPC that your optimized model has access to.</p>
    pub fn set_vpc_config(mut self, input: ::std::option::Option<crate::types::OptimizationVpcConfig>) -> Self {
        self.vpc_config = input;
        self
    }
    /// <p>A VPC in Amazon VPC that your optimized model has access to.</p>
    pub fn get_vpc_config(&self) -> &::std::option::Option<crate::types::OptimizationVpcConfig> {
        &self.vpc_config
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeOptimizationJobOutput`](crate::operation::describe_optimization_job::DescribeOptimizationJobOutput).
    pub fn build(self) -> crate::operation::describe_optimization_job::DescribeOptimizationJobOutput {
        crate::operation::describe_optimization_job::DescribeOptimizationJobOutput {
            optimization_job_arn: self.optimization_job_arn,
            optimization_job_status: self.optimization_job_status,
            optimization_start_time: self.optimization_start_time,
            optimization_end_time: self.optimization_end_time,
            creation_time: self.creation_time,
            last_modified_time: self.last_modified_time,
            failure_reason: self.failure_reason,
            optimization_job_name: self.optimization_job_name,
            model_source: self.model_source,
            optimization_environment: self.optimization_environment,
            deployment_instance_type: self.deployment_instance_type,
            optimization_configs: self.optimization_configs,
            output_config: self.output_config,
            optimization_output: self.optimization_output,
            role_arn: self.role_arn,
            stopping_condition: self.stopping_condition,
            vpc_config: self.vpc_config,
            _request_id: self._request_id,
        }
    }
}
