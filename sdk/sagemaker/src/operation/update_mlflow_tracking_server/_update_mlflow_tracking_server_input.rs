// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateMlflowTrackingServerInput {
    /// <p>The name of the MLflow Tracking Server to update.</p>
    pub tracking_server_name: ::std::option::Option<::std::string::String>,
    /// <p>The new S3 URI for the general purpose bucket to use as the artifact store for the MLflow Tracking Server.</p>
    pub artifact_store_uri: ::std::option::Option<::std::string::String>,
    /// <p>The new size for the MLflow Tracking Server.</p>
    pub tracking_server_size: ::std::option::Option<crate::types::TrackingServerSize>,
    /// <p>Whether to enable or disable automatic registration of new MLflow models to the SageMaker Model Registry. To enable automatic model registration, set this value to <code>True</code>. To disable automatic model registration, set this value to <code>False</code>. If not specified, <code>AutomaticModelRegistration</code> defaults to <code>False</code></p>
    pub automatic_model_registration: ::std::option::Option<bool>,
    /// <p>The new weekly maintenance window start day and time to update. The maintenance window day and time should be in Coordinated Universal Time (UTC) 24-hour standard time. For example: TUE:03:30.</p>
    pub weekly_maintenance_window_start: ::std::option::Option<::std::string::String>,
}
impl UpdateMlflowTrackingServerInput {
    /// <p>The name of the MLflow Tracking Server to update.</p>
    pub fn tracking_server_name(&self) -> ::std::option::Option<&str> {
        self.tracking_server_name.as_deref()
    }
    /// <p>The new S3 URI for the general purpose bucket to use as the artifact store for the MLflow Tracking Server.</p>
    pub fn artifact_store_uri(&self) -> ::std::option::Option<&str> {
        self.artifact_store_uri.as_deref()
    }
    /// <p>The new size for the MLflow Tracking Server.</p>
    pub fn tracking_server_size(&self) -> ::std::option::Option<&crate::types::TrackingServerSize> {
        self.tracking_server_size.as_ref()
    }
    /// <p>Whether to enable or disable automatic registration of new MLflow models to the SageMaker Model Registry. To enable automatic model registration, set this value to <code>True</code>. To disable automatic model registration, set this value to <code>False</code>. If not specified, <code>AutomaticModelRegistration</code> defaults to <code>False</code></p>
    pub fn automatic_model_registration(&self) -> ::std::option::Option<bool> {
        self.automatic_model_registration
    }
    /// <p>The new weekly maintenance window start day and time to update. The maintenance window day and time should be in Coordinated Universal Time (UTC) 24-hour standard time. For example: TUE:03:30.</p>
    pub fn weekly_maintenance_window_start(&self) -> ::std::option::Option<&str> {
        self.weekly_maintenance_window_start.as_deref()
    }
}
impl UpdateMlflowTrackingServerInput {
    /// Creates a new builder-style object to manufacture [`UpdateMlflowTrackingServerInput`](crate::operation::update_mlflow_tracking_server::UpdateMlflowTrackingServerInput).
    pub fn builder() -> crate::operation::update_mlflow_tracking_server::builders::UpdateMlflowTrackingServerInputBuilder {
        crate::operation::update_mlflow_tracking_server::builders::UpdateMlflowTrackingServerInputBuilder::default()
    }
}

/// A builder for [`UpdateMlflowTrackingServerInput`](crate::operation::update_mlflow_tracking_server::UpdateMlflowTrackingServerInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateMlflowTrackingServerInputBuilder {
    pub(crate) tracking_server_name: ::std::option::Option<::std::string::String>,
    pub(crate) artifact_store_uri: ::std::option::Option<::std::string::String>,
    pub(crate) tracking_server_size: ::std::option::Option<crate::types::TrackingServerSize>,
    pub(crate) automatic_model_registration: ::std::option::Option<bool>,
    pub(crate) weekly_maintenance_window_start: ::std::option::Option<::std::string::String>,
}
impl UpdateMlflowTrackingServerInputBuilder {
    /// <p>The name of the MLflow Tracking Server to update.</p>
    /// This field is required.
    pub fn tracking_server_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tracking_server_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the MLflow Tracking Server to update.</p>
    pub fn set_tracking_server_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tracking_server_name = input;
        self
    }
    /// <p>The name of the MLflow Tracking Server to update.</p>
    pub fn get_tracking_server_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.tracking_server_name
    }
    /// <p>The new S3 URI for the general purpose bucket to use as the artifact store for the MLflow Tracking Server.</p>
    pub fn artifact_store_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.artifact_store_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new S3 URI for the general purpose bucket to use as the artifact store for the MLflow Tracking Server.</p>
    pub fn set_artifact_store_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.artifact_store_uri = input;
        self
    }
    /// <p>The new S3 URI for the general purpose bucket to use as the artifact store for the MLflow Tracking Server.</p>
    pub fn get_artifact_store_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.artifact_store_uri
    }
    /// <p>The new size for the MLflow Tracking Server.</p>
    pub fn tracking_server_size(mut self, input: crate::types::TrackingServerSize) -> Self {
        self.tracking_server_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The new size for the MLflow Tracking Server.</p>
    pub fn set_tracking_server_size(mut self, input: ::std::option::Option<crate::types::TrackingServerSize>) -> Self {
        self.tracking_server_size = input;
        self
    }
    /// <p>The new size for the MLflow Tracking Server.</p>
    pub fn get_tracking_server_size(&self) -> &::std::option::Option<crate::types::TrackingServerSize> {
        &self.tracking_server_size
    }
    /// <p>Whether to enable or disable automatic registration of new MLflow models to the SageMaker Model Registry. To enable automatic model registration, set this value to <code>True</code>. To disable automatic model registration, set this value to <code>False</code>. If not specified, <code>AutomaticModelRegistration</code> defaults to <code>False</code></p>
    pub fn automatic_model_registration(mut self, input: bool) -> Self {
        self.automatic_model_registration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to enable or disable automatic registration of new MLflow models to the SageMaker Model Registry. To enable automatic model registration, set this value to <code>True</code>. To disable automatic model registration, set this value to <code>False</code>. If not specified, <code>AutomaticModelRegistration</code> defaults to <code>False</code></p>
    pub fn set_automatic_model_registration(mut self, input: ::std::option::Option<bool>) -> Self {
        self.automatic_model_registration = input;
        self
    }
    /// <p>Whether to enable or disable automatic registration of new MLflow models to the SageMaker Model Registry. To enable automatic model registration, set this value to <code>True</code>. To disable automatic model registration, set this value to <code>False</code>. If not specified, <code>AutomaticModelRegistration</code> defaults to <code>False</code></p>
    pub fn get_automatic_model_registration(&self) -> &::std::option::Option<bool> {
        &self.automatic_model_registration
    }
    /// <p>The new weekly maintenance window start day and time to update. The maintenance window day and time should be in Coordinated Universal Time (UTC) 24-hour standard time. For example: TUE:03:30.</p>
    pub fn weekly_maintenance_window_start(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.weekly_maintenance_window_start = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new weekly maintenance window start day and time to update. The maintenance window day and time should be in Coordinated Universal Time (UTC) 24-hour standard time. For example: TUE:03:30.</p>
    pub fn set_weekly_maintenance_window_start(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.weekly_maintenance_window_start = input;
        self
    }
    /// <p>The new weekly maintenance window start day and time to update. The maintenance window day and time should be in Coordinated Universal Time (UTC) 24-hour standard time. For example: TUE:03:30.</p>
    pub fn get_weekly_maintenance_window_start(&self) -> &::std::option::Option<::std::string::String> {
        &self.weekly_maintenance_window_start
    }
    /// Consumes the builder and constructs a [`UpdateMlflowTrackingServerInput`](crate::operation::update_mlflow_tracking_server::UpdateMlflowTrackingServerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_mlflow_tracking_server::UpdateMlflowTrackingServerInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_mlflow_tracking_server::UpdateMlflowTrackingServerInput {
            tracking_server_name: self.tracking_server_name,
            artifact_store_uri: self.artifact_store_uri,
            tracking_server_size: self.tracking_server_size,
            automatic_model_registration: self.automatic_model_registration,
            weekly_maintenance_window_start: self.weekly_maintenance_window_start,
        })
    }
}
