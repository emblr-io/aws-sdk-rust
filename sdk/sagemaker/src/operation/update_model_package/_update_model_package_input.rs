// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateModelPackageInput {
    /// <p>The Amazon Resource Name (ARN) of the model package.</p>
    pub model_package_arn: ::std::option::Option<::std::string::String>,
    /// <p>The approval status of the model.</p>
    pub model_approval_status: ::std::option::Option<crate::types::ModelApprovalStatus>,
    /// <p>A description for the approval status of the model.</p>
    pub approval_description: ::std::option::Option<::std::string::String>,
    /// <p>The metadata properties associated with the model package versions.</p>
    pub customer_metadata_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The metadata properties associated with the model package versions to remove.</p>
    pub customer_metadata_properties_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>An array of additional Inference Specification objects to be added to the existing array additional Inference Specification. Total number of additional Inference Specifications can not exceed 15. Each additional Inference Specification specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts.</p>
    pub additional_inference_specifications_to_add: ::std::option::Option<::std::vec::Vec<crate::types::AdditionalInferenceSpecificationDefinition>>,
    /// <p>Specifies details about inference jobs that you can run with models based on this model package, including the following information:</p>
    /// <ul>
    /// <li>
    /// <p>The Amazon ECR paths of containers that contain the inference code and model artifacts.</p></li>
    /// <li>
    /// <p>The instance types that the model package supports for transform jobs and real-time endpoints used for inference.</p></li>
    /// <li>
    /// <p>The input and output content formats that the model package supports for inference.</p></li>
    /// </ul>
    pub inference_specification: ::std::option::Option<crate::types::InferenceSpecification>,
    /// <p>The URI of the source for the model package.</p>
    pub source_uri: ::std::option::Option<::std::string::String>,
    /// <p>The model card associated with the model package. Since <code>ModelPackageModelCard</code> is tied to a model package, it is a specific usage of a model card and its schema is simplified compared to the schema of <code>ModelCard</code>. The <code>ModelPackageModelCard</code> schema does not include <code>model_package_details</code>, and <code>model_overview</code> is composed of the <code>model_creator</code> and <code>model_artifact</code> properties. For more information about the model package model card schema, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html#model-card-schema">Model package model card schema</a>. For more information about the model card associated with the model package, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html">View the Details of a Model Version</a>.</p>
    pub model_card: ::std::option::Option<crate::types::ModelPackageModelCard>,
    /// <p>A structure describing the current state of the model in its life cycle.</p>
    pub model_life_cycle: ::std::option::Option<crate::types::ModelLifeCycle>,
    /// <p>A unique token that guarantees that the call to this API is idempotent.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateModelPackageInput {
    /// <p>The Amazon Resource Name (ARN) of the model package.</p>
    pub fn model_package_arn(&self) -> ::std::option::Option<&str> {
        self.model_package_arn.as_deref()
    }
    /// <p>The approval status of the model.</p>
    pub fn model_approval_status(&self) -> ::std::option::Option<&crate::types::ModelApprovalStatus> {
        self.model_approval_status.as_ref()
    }
    /// <p>A description for the approval status of the model.</p>
    pub fn approval_description(&self) -> ::std::option::Option<&str> {
        self.approval_description.as_deref()
    }
    /// <p>The metadata properties associated with the model package versions.</p>
    pub fn customer_metadata_properties(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.customer_metadata_properties.as_ref()
    }
    /// <p>The metadata properties associated with the model package versions to remove.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.customer_metadata_properties_to_remove.is_none()`.
    pub fn customer_metadata_properties_to_remove(&self) -> &[::std::string::String] {
        self.customer_metadata_properties_to_remove.as_deref().unwrap_or_default()
    }
    /// <p>An array of additional Inference Specification objects to be added to the existing array additional Inference Specification. Total number of additional Inference Specifications can not exceed 15. Each additional Inference Specification specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.additional_inference_specifications_to_add.is_none()`.
    pub fn additional_inference_specifications_to_add(&self) -> &[crate::types::AdditionalInferenceSpecificationDefinition] {
        self.additional_inference_specifications_to_add.as_deref().unwrap_or_default()
    }
    /// <p>Specifies details about inference jobs that you can run with models based on this model package, including the following information:</p>
    /// <ul>
    /// <li>
    /// <p>The Amazon ECR paths of containers that contain the inference code and model artifacts.</p></li>
    /// <li>
    /// <p>The instance types that the model package supports for transform jobs and real-time endpoints used for inference.</p></li>
    /// <li>
    /// <p>The input and output content formats that the model package supports for inference.</p></li>
    /// </ul>
    pub fn inference_specification(&self) -> ::std::option::Option<&crate::types::InferenceSpecification> {
        self.inference_specification.as_ref()
    }
    /// <p>The URI of the source for the model package.</p>
    pub fn source_uri(&self) -> ::std::option::Option<&str> {
        self.source_uri.as_deref()
    }
    /// <p>The model card associated with the model package. Since <code>ModelPackageModelCard</code> is tied to a model package, it is a specific usage of a model card and its schema is simplified compared to the schema of <code>ModelCard</code>. The <code>ModelPackageModelCard</code> schema does not include <code>model_package_details</code>, and <code>model_overview</code> is composed of the <code>model_creator</code> and <code>model_artifact</code> properties. For more information about the model package model card schema, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html#model-card-schema">Model package model card schema</a>. For more information about the model card associated with the model package, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html">View the Details of a Model Version</a>.</p>
    pub fn model_card(&self) -> ::std::option::Option<&crate::types::ModelPackageModelCard> {
        self.model_card.as_ref()
    }
    /// <p>A structure describing the current state of the model in its life cycle.</p>
    pub fn model_life_cycle(&self) -> ::std::option::Option<&crate::types::ModelLifeCycle> {
        self.model_life_cycle.as_ref()
    }
    /// <p>A unique token that guarantees that the call to this API is idempotent.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl UpdateModelPackageInput {
    /// Creates a new builder-style object to manufacture [`UpdateModelPackageInput`](crate::operation::update_model_package::UpdateModelPackageInput).
    pub fn builder() -> crate::operation::update_model_package::builders::UpdateModelPackageInputBuilder {
        crate::operation::update_model_package::builders::UpdateModelPackageInputBuilder::default()
    }
}

/// A builder for [`UpdateModelPackageInput`](crate::operation::update_model_package::UpdateModelPackageInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateModelPackageInputBuilder {
    pub(crate) model_package_arn: ::std::option::Option<::std::string::String>,
    pub(crate) model_approval_status: ::std::option::Option<crate::types::ModelApprovalStatus>,
    pub(crate) approval_description: ::std::option::Option<::std::string::String>,
    pub(crate) customer_metadata_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) customer_metadata_properties_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) additional_inference_specifications_to_add:
        ::std::option::Option<::std::vec::Vec<crate::types::AdditionalInferenceSpecificationDefinition>>,
    pub(crate) inference_specification: ::std::option::Option<crate::types::InferenceSpecification>,
    pub(crate) source_uri: ::std::option::Option<::std::string::String>,
    pub(crate) model_card: ::std::option::Option<crate::types::ModelPackageModelCard>,
    pub(crate) model_life_cycle: ::std::option::Option<crate::types::ModelLifeCycle>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateModelPackageInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the model package.</p>
    /// This field is required.
    pub fn model_package_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_package_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model package.</p>
    pub fn set_model_package_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_package_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model package.</p>
    pub fn get_model_package_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_package_arn
    }
    /// <p>The approval status of the model.</p>
    pub fn model_approval_status(mut self, input: crate::types::ModelApprovalStatus) -> Self {
        self.model_approval_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The approval status of the model.</p>
    pub fn set_model_approval_status(mut self, input: ::std::option::Option<crate::types::ModelApprovalStatus>) -> Self {
        self.model_approval_status = input;
        self
    }
    /// <p>The approval status of the model.</p>
    pub fn get_model_approval_status(&self) -> &::std::option::Option<crate::types::ModelApprovalStatus> {
        &self.model_approval_status
    }
    /// <p>A description for the approval status of the model.</p>
    pub fn approval_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.approval_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description for the approval status of the model.</p>
    pub fn set_approval_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.approval_description = input;
        self
    }
    /// <p>A description for the approval status of the model.</p>
    pub fn get_approval_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.approval_description
    }
    /// Adds a key-value pair to `customer_metadata_properties`.
    ///
    /// To override the contents of this collection use [`set_customer_metadata_properties`](Self::set_customer_metadata_properties).
    ///
    /// <p>The metadata properties associated with the model package versions.</p>
    pub fn customer_metadata_properties(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.customer_metadata_properties.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.customer_metadata_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The metadata properties associated with the model package versions.</p>
    pub fn set_customer_metadata_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.customer_metadata_properties = input;
        self
    }
    /// <p>The metadata properties associated with the model package versions.</p>
    pub fn get_customer_metadata_properties(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.customer_metadata_properties
    }
    /// Appends an item to `customer_metadata_properties_to_remove`.
    ///
    /// To override the contents of this collection use [`set_customer_metadata_properties_to_remove`](Self::set_customer_metadata_properties_to_remove).
    ///
    /// <p>The metadata properties associated with the model package versions to remove.</p>
    pub fn customer_metadata_properties_to_remove(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.customer_metadata_properties_to_remove.unwrap_or_default();
        v.push(input.into());
        self.customer_metadata_properties_to_remove = ::std::option::Option::Some(v);
        self
    }
    /// <p>The metadata properties associated with the model package versions to remove.</p>
    pub fn set_customer_metadata_properties_to_remove(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.customer_metadata_properties_to_remove = input;
        self
    }
    /// <p>The metadata properties associated with the model package versions to remove.</p>
    pub fn get_customer_metadata_properties_to_remove(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.customer_metadata_properties_to_remove
    }
    /// Appends an item to `additional_inference_specifications_to_add`.
    ///
    /// To override the contents of this collection use [`set_additional_inference_specifications_to_add`](Self::set_additional_inference_specifications_to_add).
    ///
    /// <p>An array of additional Inference Specification objects to be added to the existing array additional Inference Specification. Total number of additional Inference Specifications can not exceed 15. Each additional Inference Specification specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts.</p>
    pub fn additional_inference_specifications_to_add(mut self, input: crate::types::AdditionalInferenceSpecificationDefinition) -> Self {
        let mut v = self.additional_inference_specifications_to_add.unwrap_or_default();
        v.push(input);
        self.additional_inference_specifications_to_add = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of additional Inference Specification objects to be added to the existing array additional Inference Specification. Total number of additional Inference Specifications can not exceed 15. Each additional Inference Specification specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts.</p>
    pub fn set_additional_inference_specifications_to_add(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AdditionalInferenceSpecificationDefinition>>,
    ) -> Self {
        self.additional_inference_specifications_to_add = input;
        self
    }
    /// <p>An array of additional Inference Specification objects to be added to the existing array additional Inference Specification. Total number of additional Inference Specifications can not exceed 15. Each additional Inference Specification specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts.</p>
    pub fn get_additional_inference_specifications_to_add(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::AdditionalInferenceSpecificationDefinition>> {
        &self.additional_inference_specifications_to_add
    }
    /// <p>Specifies details about inference jobs that you can run with models based on this model package, including the following information:</p>
    /// <ul>
    /// <li>
    /// <p>The Amazon ECR paths of containers that contain the inference code and model artifacts.</p></li>
    /// <li>
    /// <p>The instance types that the model package supports for transform jobs and real-time endpoints used for inference.</p></li>
    /// <li>
    /// <p>The input and output content formats that the model package supports for inference.</p></li>
    /// </ul>
    pub fn inference_specification(mut self, input: crate::types::InferenceSpecification) -> Self {
        self.inference_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies details about inference jobs that you can run with models based on this model package, including the following information:</p>
    /// <ul>
    /// <li>
    /// <p>The Amazon ECR paths of containers that contain the inference code and model artifacts.</p></li>
    /// <li>
    /// <p>The instance types that the model package supports for transform jobs and real-time endpoints used for inference.</p></li>
    /// <li>
    /// <p>The input and output content formats that the model package supports for inference.</p></li>
    /// </ul>
    pub fn set_inference_specification(mut self, input: ::std::option::Option<crate::types::InferenceSpecification>) -> Self {
        self.inference_specification = input;
        self
    }
    /// <p>Specifies details about inference jobs that you can run with models based on this model package, including the following information:</p>
    /// <ul>
    /// <li>
    /// <p>The Amazon ECR paths of containers that contain the inference code and model artifacts.</p></li>
    /// <li>
    /// <p>The instance types that the model package supports for transform jobs and real-time endpoints used for inference.</p></li>
    /// <li>
    /// <p>The input and output content formats that the model package supports for inference.</p></li>
    /// </ul>
    pub fn get_inference_specification(&self) -> &::std::option::Option<crate::types::InferenceSpecification> {
        &self.inference_specification
    }
    /// <p>The URI of the source for the model package.</p>
    pub fn source_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URI of the source for the model package.</p>
    pub fn set_source_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_uri = input;
        self
    }
    /// <p>The URI of the source for the model package.</p>
    pub fn get_source_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_uri
    }
    /// <p>The model card associated with the model package. Since <code>ModelPackageModelCard</code> is tied to a model package, it is a specific usage of a model card and its schema is simplified compared to the schema of <code>ModelCard</code>. The <code>ModelPackageModelCard</code> schema does not include <code>model_package_details</code>, and <code>model_overview</code> is composed of the <code>model_creator</code> and <code>model_artifact</code> properties. For more information about the model package model card schema, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html#model-card-schema">Model package model card schema</a>. For more information about the model card associated with the model package, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html">View the Details of a Model Version</a>.</p>
    pub fn model_card(mut self, input: crate::types::ModelPackageModelCard) -> Self {
        self.model_card = ::std::option::Option::Some(input);
        self
    }
    /// <p>The model card associated with the model package. Since <code>ModelPackageModelCard</code> is tied to a model package, it is a specific usage of a model card and its schema is simplified compared to the schema of <code>ModelCard</code>. The <code>ModelPackageModelCard</code> schema does not include <code>model_package_details</code>, and <code>model_overview</code> is composed of the <code>model_creator</code> and <code>model_artifact</code> properties. For more information about the model package model card schema, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html#model-card-schema">Model package model card schema</a>. For more information about the model card associated with the model package, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html">View the Details of a Model Version</a>.</p>
    pub fn set_model_card(mut self, input: ::std::option::Option<crate::types::ModelPackageModelCard>) -> Self {
        self.model_card = input;
        self
    }
    /// <p>The model card associated with the model package. Since <code>ModelPackageModelCard</code> is tied to a model package, it is a specific usage of a model card and its schema is simplified compared to the schema of <code>ModelCard</code>. The <code>ModelPackageModelCard</code> schema does not include <code>model_package_details</code>, and <code>model_overview</code> is composed of the <code>model_creator</code> and <code>model_artifact</code> properties. For more information about the model package model card schema, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html#model-card-schema">Model package model card schema</a>. For more information about the model card associated with the model package, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html">View the Details of a Model Version</a>.</p>
    pub fn get_model_card(&self) -> &::std::option::Option<crate::types::ModelPackageModelCard> {
        &self.model_card
    }
    /// <p>A structure describing the current state of the model in its life cycle.</p>
    pub fn model_life_cycle(mut self, input: crate::types::ModelLifeCycle) -> Self {
        self.model_life_cycle = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure describing the current state of the model in its life cycle.</p>
    pub fn set_model_life_cycle(mut self, input: ::std::option::Option<crate::types::ModelLifeCycle>) -> Self {
        self.model_life_cycle = input;
        self
    }
    /// <p>A structure describing the current state of the model in its life cycle.</p>
    pub fn get_model_life_cycle(&self) -> &::std::option::Option<crate::types::ModelLifeCycle> {
        &self.model_life_cycle
    }
    /// <p>A unique token that guarantees that the call to this API is idempotent.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique token that guarantees that the call to this API is idempotent.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique token that guarantees that the call to this API is idempotent.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`UpdateModelPackageInput`](crate::operation::update_model_package::UpdateModelPackageInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_model_package::UpdateModelPackageInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_model_package::UpdateModelPackageInput {
            model_package_arn: self.model_package_arn,
            model_approval_status: self.model_approval_status,
            approval_description: self.approval_description,
            customer_metadata_properties: self.customer_metadata_properties,
            customer_metadata_properties_to_remove: self.customer_metadata_properties_to_remove,
            additional_inference_specifications_to_add: self.additional_inference_specifications_to_add,
            inference_specification: self.inference_specification,
            source_uri: self.source_uri,
            model_card: self.model_card,
            model_life_cycle: self.model_life_cycle,
            client_token: self.client_token,
        })
    }
}
