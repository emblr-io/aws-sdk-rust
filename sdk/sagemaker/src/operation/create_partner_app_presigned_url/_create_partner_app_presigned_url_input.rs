// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreatePartnerAppPresignedUrlInput {
    /// <p>The ARN of the SageMaker Partner AI App to create the presigned URL for.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The time that will pass before the presigned URL expires.</p>
    pub expires_in_seconds: ::std::option::Option<i32>,
    /// <p>Indicates how long the Amazon SageMaker Partner AI App session can be accessed for after logging in.</p>
    pub session_expiration_duration_in_seconds: ::std::option::Option<i32>,
}
impl CreatePartnerAppPresignedUrlInput {
    /// <p>The ARN of the SageMaker Partner AI App to create the presigned URL for.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The time that will pass before the presigned URL expires.</p>
    pub fn expires_in_seconds(&self) -> ::std::option::Option<i32> {
        self.expires_in_seconds
    }
    /// <p>Indicates how long the Amazon SageMaker Partner AI App session can be accessed for after logging in.</p>
    pub fn session_expiration_duration_in_seconds(&self) -> ::std::option::Option<i32> {
        self.session_expiration_duration_in_seconds
    }
}
impl CreatePartnerAppPresignedUrlInput {
    /// Creates a new builder-style object to manufacture [`CreatePartnerAppPresignedUrlInput`](crate::operation::create_partner_app_presigned_url::CreatePartnerAppPresignedUrlInput).
    pub fn builder() -> crate::operation::create_partner_app_presigned_url::builders::CreatePartnerAppPresignedUrlInputBuilder {
        crate::operation::create_partner_app_presigned_url::builders::CreatePartnerAppPresignedUrlInputBuilder::default()
    }
}

/// A builder for [`CreatePartnerAppPresignedUrlInput`](crate::operation::create_partner_app_presigned_url::CreatePartnerAppPresignedUrlInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreatePartnerAppPresignedUrlInputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) expires_in_seconds: ::std::option::Option<i32>,
    pub(crate) session_expiration_duration_in_seconds: ::std::option::Option<i32>,
}
impl CreatePartnerAppPresignedUrlInputBuilder {
    /// <p>The ARN of the SageMaker Partner AI App to create the presigned URL for.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the SageMaker Partner AI App to create the presigned URL for.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the SageMaker Partner AI App to create the presigned URL for.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The time that will pass before the presigned URL expires.</p>
    pub fn expires_in_seconds(mut self, input: i32) -> Self {
        self.expires_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that will pass before the presigned URL expires.</p>
    pub fn set_expires_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.expires_in_seconds = input;
        self
    }
    /// <p>The time that will pass before the presigned URL expires.</p>
    pub fn get_expires_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.expires_in_seconds
    }
    /// <p>Indicates how long the Amazon SageMaker Partner AI App session can be accessed for after logging in.</p>
    pub fn session_expiration_duration_in_seconds(mut self, input: i32) -> Self {
        self.session_expiration_duration_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates how long the Amazon SageMaker Partner AI App session can be accessed for after logging in.</p>
    pub fn set_session_expiration_duration_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.session_expiration_duration_in_seconds = input;
        self
    }
    /// <p>Indicates how long the Amazon SageMaker Partner AI App session can be accessed for after logging in.</p>
    pub fn get_session_expiration_duration_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.session_expiration_duration_in_seconds
    }
    /// Consumes the builder and constructs a [`CreatePartnerAppPresignedUrlInput`](crate::operation::create_partner_app_presigned_url::CreatePartnerAppPresignedUrlInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_partner_app_presigned_url::CreatePartnerAppPresignedUrlInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_partner_app_presigned_url::CreatePartnerAppPresignedUrlInput {
            arn: self.arn,
            expires_in_seconds: self.expires_in_seconds,
            session_expiration_duration_in_seconds: self.session_expiration_duration_in_seconds,
        })
    }
}
