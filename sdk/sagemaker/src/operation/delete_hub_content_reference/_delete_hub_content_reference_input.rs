// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteHubContentReferenceInput {
    /// <p>The name of the hub to delete the hub content reference from.</p>
    pub hub_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of hub content reference to delete. The only supported type of hub content reference to delete is <code>ModelReference</code>.</p>
    pub hub_content_type: ::std::option::Option<crate::types::HubContentType>,
    /// <p>The name of the hub content to delete.</p>
    pub hub_content_name: ::std::option::Option<::std::string::String>,
}
impl DeleteHubContentReferenceInput {
    /// <p>The name of the hub to delete the hub content reference from.</p>
    pub fn hub_name(&self) -> ::std::option::Option<&str> {
        self.hub_name.as_deref()
    }
    /// <p>The type of hub content reference to delete. The only supported type of hub content reference to delete is <code>ModelReference</code>.</p>
    pub fn hub_content_type(&self) -> ::std::option::Option<&crate::types::HubContentType> {
        self.hub_content_type.as_ref()
    }
    /// <p>The name of the hub content to delete.</p>
    pub fn hub_content_name(&self) -> ::std::option::Option<&str> {
        self.hub_content_name.as_deref()
    }
}
impl DeleteHubContentReferenceInput {
    /// Creates a new builder-style object to manufacture [`DeleteHubContentReferenceInput`](crate::operation::delete_hub_content_reference::DeleteHubContentReferenceInput).
    pub fn builder() -> crate::operation::delete_hub_content_reference::builders::DeleteHubContentReferenceInputBuilder {
        crate::operation::delete_hub_content_reference::builders::DeleteHubContentReferenceInputBuilder::default()
    }
}

/// A builder for [`DeleteHubContentReferenceInput`](crate::operation::delete_hub_content_reference::DeleteHubContentReferenceInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeleteHubContentReferenceInputBuilder {
    pub(crate) hub_name: ::std::option::Option<::std::string::String>,
    pub(crate) hub_content_type: ::std::option::Option<crate::types::HubContentType>,
    pub(crate) hub_content_name: ::std::option::Option<::std::string::String>,
}
impl DeleteHubContentReferenceInputBuilder {
    /// <p>The name of the hub to delete the hub content reference from.</p>
    /// This field is required.
    pub fn hub_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hub_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the hub to delete the hub content reference from.</p>
    pub fn set_hub_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hub_name = input;
        self
    }
    /// <p>The name of the hub to delete the hub content reference from.</p>
    pub fn get_hub_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.hub_name
    }
    /// <p>The type of hub content reference to delete. The only supported type of hub content reference to delete is <code>ModelReference</code>.</p>
    /// This field is required.
    pub fn hub_content_type(mut self, input: crate::types::HubContentType) -> Self {
        self.hub_content_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of hub content reference to delete. The only supported type of hub content reference to delete is <code>ModelReference</code>.</p>
    pub fn set_hub_content_type(mut self, input: ::std::option::Option<crate::types::HubContentType>) -> Self {
        self.hub_content_type = input;
        self
    }
    /// <p>The type of hub content reference to delete. The only supported type of hub content reference to delete is <code>ModelReference</code>.</p>
    pub fn get_hub_content_type(&self) -> &::std::option::Option<crate::types::HubContentType> {
        &self.hub_content_type
    }
    /// <p>The name of the hub content to delete.</p>
    /// This field is required.
    pub fn hub_content_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hub_content_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the hub content to delete.</p>
    pub fn set_hub_content_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hub_content_name = input;
        self
    }
    /// <p>The name of the hub content to delete.</p>
    pub fn get_hub_content_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.hub_content_name
    }
    /// Consumes the builder and constructs a [`DeleteHubContentReferenceInput`](crate::operation::delete_hub_content_reference::DeleteHubContentReferenceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_hub_content_reference::DeleteHubContentReferenceInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::delete_hub_content_reference::DeleteHubContentReferenceInput {
            hub_name: self.hub_name,
            hub_content_type: self.hub_content_type,
            hub_content_name: self.hub_content_name,
        })
    }
}
