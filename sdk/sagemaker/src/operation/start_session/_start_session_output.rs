// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartSessionOutput {
    /// <p>A unique identifier for the established remote connection session.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>A WebSocket URL used to establish a SSH connection between the local IDE and remote SageMaker space.</p>
    pub stream_url: ::std::option::Option<::std::string::String>,
    /// <p>An encrypted token value containing session and caller information.</p>
    pub token_value: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl StartSessionOutput {
    /// <p>A unique identifier for the established remote connection session.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>A WebSocket URL used to establish a SSH connection between the local IDE and remote SageMaker space.</p>
    pub fn stream_url(&self) -> ::std::option::Option<&str> {
        self.stream_url.as_deref()
    }
    /// <p>An encrypted token value containing session and caller information.</p>
    pub fn token_value(&self) -> ::std::option::Option<&str> {
        self.token_value.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for StartSessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartSessionOutput {
    /// Creates a new builder-style object to manufacture [`StartSessionOutput`](crate::operation::start_session::StartSessionOutput).
    pub fn builder() -> crate::operation::start_session::builders::StartSessionOutputBuilder {
        crate::operation::start_session::builders::StartSessionOutputBuilder::default()
    }
}

/// A builder for [`StartSessionOutput`](crate::operation::start_session::StartSessionOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartSessionOutputBuilder {
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) stream_url: ::std::option::Option<::std::string::String>,
    pub(crate) token_value: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl StartSessionOutputBuilder {
    /// <p>A unique identifier for the established remote connection session.</p>
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the established remote connection session.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>A unique identifier for the established remote connection session.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>A WebSocket URL used to establish a SSH connection between the local IDE and remote SageMaker space.</p>
    pub fn stream_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stream_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A WebSocket URL used to establish a SSH connection between the local IDE and remote SageMaker space.</p>
    pub fn set_stream_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stream_url = input;
        self
    }
    /// <p>A WebSocket URL used to establish a SSH connection between the local IDE and remote SageMaker space.</p>
    pub fn get_stream_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.stream_url
    }
    /// <p>An encrypted token value containing session and caller information.</p>
    pub fn token_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.token_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An encrypted token value containing session and caller information.</p>
    pub fn set_token_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.token_value = input;
        self
    }
    /// <p>An encrypted token value containing session and caller information.</p>
    pub fn get_token_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.token_value
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartSessionOutput`](crate::operation::start_session::StartSessionOutput).
    pub fn build(self) -> crate::operation::start_session::StartSessionOutput {
        crate::operation::start_session::StartSessionOutput {
            session_id: self.session_id,
            stream_url: self.stream_url,
            token_value: self.token_value,
            _request_id: self._request_id,
        }
    }
}
