// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListMlflowTrackingServersInput {
    /// <p>Use the <code>CreatedAfter</code> filter to only list tracking servers created after a specific date and time. Listed tracking servers are shown with a date and time such as <code>"2024-03-16T01:46:56+00:00"</code>. The <code>CreatedAfter</code> parameter takes in a Unix timestamp. To convert a date and time into a Unix timestamp, see <a href="https://www.epochconverter.com/">EpochConverter</a>.</p>
    pub created_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Use the <code>CreatedBefore</code> filter to only list tracking servers created before a specific date and time. Listed tracking servers are shown with a date and time such as <code>"2024-03-16T01:46:56+00:00"</code>. The <code>CreatedBefore</code> parameter takes in a Unix timestamp. To convert a date and time into a Unix timestamp, see <a href="https://www.epochconverter.com/">EpochConverter</a>.</p>
    pub created_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Filter for tracking servers with a specified creation status.</p>
    pub tracking_server_status: ::std::option::Option<crate::types::TrackingServerStatus>,
    /// <p>Filter for tracking servers using the specified MLflow version.</p>
    pub mlflow_version: ::std::option::Option<::std::string::String>,
    /// <p>Filter for trackings servers sorting by name, creation time, or creation status.</p>
    pub sort_by: ::std::option::Option<crate::types::SortTrackingServerBy>,
    /// <p>Change the order of the listed tracking servers. By default, tracking servers are listed in <code>Descending</code> order by creation time. To change the list order, you can specify <code>SortOrder</code> to be <code>Ascending</code>.</p>
    pub sort_order: ::std::option::Option<crate::types::SortOrder>,
    /// <p>If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of tracking servers to list.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListMlflowTrackingServersInput {
    /// <p>Use the <code>CreatedAfter</code> filter to only list tracking servers created after a specific date and time. Listed tracking servers are shown with a date and time such as <code>"2024-03-16T01:46:56+00:00"</code>. The <code>CreatedAfter</code> parameter takes in a Unix timestamp. To convert a date and time into a Unix timestamp, see <a href="https://www.epochconverter.com/">EpochConverter</a>.</p>
    pub fn created_after(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_after.as_ref()
    }
    /// <p>Use the <code>CreatedBefore</code> filter to only list tracking servers created before a specific date and time. Listed tracking servers are shown with a date and time such as <code>"2024-03-16T01:46:56+00:00"</code>. The <code>CreatedBefore</code> parameter takes in a Unix timestamp. To convert a date and time into a Unix timestamp, see <a href="https://www.epochconverter.com/">EpochConverter</a>.</p>
    pub fn created_before(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_before.as_ref()
    }
    /// <p>Filter for tracking servers with a specified creation status.</p>
    pub fn tracking_server_status(&self) -> ::std::option::Option<&crate::types::TrackingServerStatus> {
        self.tracking_server_status.as_ref()
    }
    /// <p>Filter for tracking servers using the specified MLflow version.</p>
    pub fn mlflow_version(&self) -> ::std::option::Option<&str> {
        self.mlflow_version.as_deref()
    }
    /// <p>Filter for trackings servers sorting by name, creation time, or creation status.</p>
    pub fn sort_by(&self) -> ::std::option::Option<&crate::types::SortTrackingServerBy> {
        self.sort_by.as_ref()
    }
    /// <p>Change the order of the listed tracking servers. By default, tracking servers are listed in <code>Descending</code> order by creation time. To change the list order, you can specify <code>SortOrder</code> to be <code>Ascending</code>.</p>
    pub fn sort_order(&self) -> ::std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
    /// <p>If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of tracking servers to list.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListMlflowTrackingServersInput {
    /// Creates a new builder-style object to manufacture [`ListMlflowTrackingServersInput`](crate::operation::list_mlflow_tracking_servers::ListMlflowTrackingServersInput).
    pub fn builder() -> crate::operation::list_mlflow_tracking_servers::builders::ListMlflowTrackingServersInputBuilder {
        crate::operation::list_mlflow_tracking_servers::builders::ListMlflowTrackingServersInputBuilder::default()
    }
}

/// A builder for [`ListMlflowTrackingServersInput`](crate::operation::list_mlflow_tracking_servers::ListMlflowTrackingServersInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListMlflowTrackingServersInputBuilder {
    pub(crate) created_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tracking_server_status: ::std::option::Option<crate::types::TrackingServerStatus>,
    pub(crate) mlflow_version: ::std::option::Option<::std::string::String>,
    pub(crate) sort_by: ::std::option::Option<crate::types::SortTrackingServerBy>,
    pub(crate) sort_order: ::std::option::Option<crate::types::SortOrder>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListMlflowTrackingServersInputBuilder {
    /// <p>Use the <code>CreatedAfter</code> filter to only list tracking servers created after a specific date and time. Listed tracking servers are shown with a date and time such as <code>"2024-03-16T01:46:56+00:00"</code>. The <code>CreatedAfter</code> parameter takes in a Unix timestamp. To convert a date and time into a Unix timestamp, see <a href="https://www.epochconverter.com/">EpochConverter</a>.</p>
    pub fn created_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_after = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use the <code>CreatedAfter</code> filter to only list tracking servers created after a specific date and time. Listed tracking servers are shown with a date and time such as <code>"2024-03-16T01:46:56+00:00"</code>. The <code>CreatedAfter</code> parameter takes in a Unix timestamp. To convert a date and time into a Unix timestamp, see <a href="https://www.epochconverter.com/">EpochConverter</a>.</p>
    pub fn set_created_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_after = input;
        self
    }
    /// <p>Use the <code>CreatedAfter</code> filter to only list tracking servers created after a specific date and time. Listed tracking servers are shown with a date and time such as <code>"2024-03-16T01:46:56+00:00"</code>. The <code>CreatedAfter</code> parameter takes in a Unix timestamp. To convert a date and time into a Unix timestamp, see <a href="https://www.epochconverter.com/">EpochConverter</a>.</p>
    pub fn get_created_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_after
    }
    /// <p>Use the <code>CreatedBefore</code> filter to only list tracking servers created before a specific date and time. Listed tracking servers are shown with a date and time such as <code>"2024-03-16T01:46:56+00:00"</code>. The <code>CreatedBefore</code> parameter takes in a Unix timestamp. To convert a date and time into a Unix timestamp, see <a href="https://www.epochconverter.com/">EpochConverter</a>.</p>
    pub fn created_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_before = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use the <code>CreatedBefore</code> filter to only list tracking servers created before a specific date and time. Listed tracking servers are shown with a date and time such as <code>"2024-03-16T01:46:56+00:00"</code>. The <code>CreatedBefore</code> parameter takes in a Unix timestamp. To convert a date and time into a Unix timestamp, see <a href="https://www.epochconverter.com/">EpochConverter</a>.</p>
    pub fn set_created_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_before = input;
        self
    }
    /// <p>Use the <code>CreatedBefore</code> filter to only list tracking servers created before a specific date and time. Listed tracking servers are shown with a date and time such as <code>"2024-03-16T01:46:56+00:00"</code>. The <code>CreatedBefore</code> parameter takes in a Unix timestamp. To convert a date and time into a Unix timestamp, see <a href="https://www.epochconverter.com/">EpochConverter</a>.</p>
    pub fn get_created_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_before
    }
    /// <p>Filter for tracking servers with a specified creation status.</p>
    pub fn tracking_server_status(mut self, input: crate::types::TrackingServerStatus) -> Self {
        self.tracking_server_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter for tracking servers with a specified creation status.</p>
    pub fn set_tracking_server_status(mut self, input: ::std::option::Option<crate::types::TrackingServerStatus>) -> Self {
        self.tracking_server_status = input;
        self
    }
    /// <p>Filter for tracking servers with a specified creation status.</p>
    pub fn get_tracking_server_status(&self) -> &::std::option::Option<crate::types::TrackingServerStatus> {
        &self.tracking_server_status
    }
    /// <p>Filter for tracking servers using the specified MLflow version.</p>
    pub fn mlflow_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mlflow_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filter for tracking servers using the specified MLflow version.</p>
    pub fn set_mlflow_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mlflow_version = input;
        self
    }
    /// <p>Filter for tracking servers using the specified MLflow version.</p>
    pub fn get_mlflow_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.mlflow_version
    }
    /// <p>Filter for trackings servers sorting by name, creation time, or creation status.</p>
    pub fn sort_by(mut self, input: crate::types::SortTrackingServerBy) -> Self {
        self.sort_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter for trackings servers sorting by name, creation time, or creation status.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::SortTrackingServerBy>) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>Filter for trackings servers sorting by name, creation time, or creation status.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::SortTrackingServerBy> {
        &self.sort_by
    }
    /// <p>Change the order of the listed tracking servers. By default, tracking servers are listed in <code>Descending</code> order by creation time. To change the list order, you can specify <code>SortOrder</code> to be <code>Ascending</code>.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>Change the order of the listed tracking servers. By default, tracking servers are listed in <code>Descending</code> order by creation time. To change the list order, you can specify <code>SortOrder</code> to be <code>Ascending</code>.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>Change the order of the listed tracking servers. By default, tracking servers are listed in <code>Descending</code> order by creation time. To change the list order, you can specify <code>SortOrder</code> to be <code>Ascending</code>.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortOrder> {
        &self.sort_order
    }
    /// <p>If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of tracking servers to list.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of tracking servers to list.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of tracking servers to list.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListMlflowTrackingServersInput`](crate::operation::list_mlflow_tracking_servers::ListMlflowTrackingServersInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_mlflow_tracking_servers::ListMlflowTrackingServersInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_mlflow_tracking_servers::ListMlflowTrackingServersInput {
            created_after: self.created_after,
            created_before: self.created_before,
            tracking_server_status: self.tracking_server_status,
            mlflow_version: self.mlflow_version,
            sort_by: self.sort_by,
            sort_order: self.sort_order,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
