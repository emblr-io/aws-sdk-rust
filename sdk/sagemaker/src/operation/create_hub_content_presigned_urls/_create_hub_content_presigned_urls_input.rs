// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateHubContentPresignedUrlsInput {
    /// <p>The name or Amazon Resource Name (ARN) of the hub that contains the content. For public content, use <code>SageMakerPublicHub</code>.</p>
    pub hub_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of hub content to access. Valid values include <code>Model</code>, <code>Notebook</code>, and <code>ModelReference</code>.</p>
    pub hub_content_type: ::std::option::Option<crate::types::HubContentType>,
    /// <p>The name of the hub content for which to generate presigned URLs. This identifies the specific model or content within the hub.</p>
    pub hub_content_name: ::std::option::Option<::std::string::String>,
    /// <p>The version of the hub content. If not specified, the latest version is used.</p>
    pub hub_content_version: ::std::option::Option<::std::string::String>,
    /// <p>Configuration settings for accessing the hub content, including end-user license agreement acceptance for gated models and expected S3 URL validation.</p>
    pub access_config: ::std::option::Option<crate::types::PresignedUrlAccessConfig>,
    /// <p>The maximum number of presigned URLs to return in the response. Default value is 100. Large models may contain hundreds of files, requiring pagination to retrieve all URLs.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>A token for pagination. Use this token to retrieve the next set of presigned URLs when the response is truncated.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl CreateHubContentPresignedUrlsInput {
    /// <p>The name or Amazon Resource Name (ARN) of the hub that contains the content. For public content, use <code>SageMakerPublicHub</code>.</p>
    pub fn hub_name(&self) -> ::std::option::Option<&str> {
        self.hub_name.as_deref()
    }
    /// <p>The type of hub content to access. Valid values include <code>Model</code>, <code>Notebook</code>, and <code>ModelReference</code>.</p>
    pub fn hub_content_type(&self) -> ::std::option::Option<&crate::types::HubContentType> {
        self.hub_content_type.as_ref()
    }
    /// <p>The name of the hub content for which to generate presigned URLs. This identifies the specific model or content within the hub.</p>
    pub fn hub_content_name(&self) -> ::std::option::Option<&str> {
        self.hub_content_name.as_deref()
    }
    /// <p>The version of the hub content. If not specified, the latest version is used.</p>
    pub fn hub_content_version(&self) -> ::std::option::Option<&str> {
        self.hub_content_version.as_deref()
    }
    /// <p>Configuration settings for accessing the hub content, including end-user license agreement acceptance for gated models and expected S3 URL validation.</p>
    pub fn access_config(&self) -> ::std::option::Option<&crate::types::PresignedUrlAccessConfig> {
        self.access_config.as_ref()
    }
    /// <p>The maximum number of presigned URLs to return in the response. Default value is 100. Large models may contain hundreds of files, requiring pagination to retrieve all URLs.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>A token for pagination. Use this token to retrieve the next set of presigned URLs when the response is truncated.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl CreateHubContentPresignedUrlsInput {
    /// Creates a new builder-style object to manufacture [`CreateHubContentPresignedUrlsInput`](crate::operation::create_hub_content_presigned_urls::CreateHubContentPresignedUrlsInput).
    pub fn builder() -> crate::operation::create_hub_content_presigned_urls::builders::CreateHubContentPresignedUrlsInputBuilder {
        crate::operation::create_hub_content_presigned_urls::builders::CreateHubContentPresignedUrlsInputBuilder::default()
    }
}

/// A builder for [`CreateHubContentPresignedUrlsInput`](crate::operation::create_hub_content_presigned_urls::CreateHubContentPresignedUrlsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateHubContentPresignedUrlsInputBuilder {
    pub(crate) hub_name: ::std::option::Option<::std::string::String>,
    pub(crate) hub_content_type: ::std::option::Option<crate::types::HubContentType>,
    pub(crate) hub_content_name: ::std::option::Option<::std::string::String>,
    pub(crate) hub_content_version: ::std::option::Option<::std::string::String>,
    pub(crate) access_config: ::std::option::Option<crate::types::PresignedUrlAccessConfig>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl CreateHubContentPresignedUrlsInputBuilder {
    /// <p>The name or Amazon Resource Name (ARN) of the hub that contains the content. For public content, use <code>SageMakerPublicHub</code>.</p>
    /// This field is required.
    pub fn hub_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hub_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the hub that contains the content. For public content, use <code>SageMakerPublicHub</code>.</p>
    pub fn set_hub_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hub_name = input;
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the hub that contains the content. For public content, use <code>SageMakerPublicHub</code>.</p>
    pub fn get_hub_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.hub_name
    }
    /// <p>The type of hub content to access. Valid values include <code>Model</code>, <code>Notebook</code>, and <code>ModelReference</code>.</p>
    /// This field is required.
    pub fn hub_content_type(mut self, input: crate::types::HubContentType) -> Self {
        self.hub_content_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of hub content to access. Valid values include <code>Model</code>, <code>Notebook</code>, and <code>ModelReference</code>.</p>
    pub fn set_hub_content_type(mut self, input: ::std::option::Option<crate::types::HubContentType>) -> Self {
        self.hub_content_type = input;
        self
    }
    /// <p>The type of hub content to access. Valid values include <code>Model</code>, <code>Notebook</code>, and <code>ModelReference</code>.</p>
    pub fn get_hub_content_type(&self) -> &::std::option::Option<crate::types::HubContentType> {
        &self.hub_content_type
    }
    /// <p>The name of the hub content for which to generate presigned URLs. This identifies the specific model or content within the hub.</p>
    /// This field is required.
    pub fn hub_content_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hub_content_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the hub content for which to generate presigned URLs. This identifies the specific model or content within the hub.</p>
    pub fn set_hub_content_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hub_content_name = input;
        self
    }
    /// <p>The name of the hub content for which to generate presigned URLs. This identifies the specific model or content within the hub.</p>
    pub fn get_hub_content_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.hub_content_name
    }
    /// <p>The version of the hub content. If not specified, the latest version is used.</p>
    pub fn hub_content_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hub_content_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the hub content. If not specified, the latest version is used.</p>
    pub fn set_hub_content_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hub_content_version = input;
        self
    }
    /// <p>The version of the hub content. If not specified, the latest version is used.</p>
    pub fn get_hub_content_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.hub_content_version
    }
    /// <p>Configuration settings for accessing the hub content, including end-user license agreement acceptance for gated models and expected S3 URL validation.</p>
    pub fn access_config(mut self, input: crate::types::PresignedUrlAccessConfig) -> Self {
        self.access_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration settings for accessing the hub content, including end-user license agreement acceptance for gated models and expected S3 URL validation.</p>
    pub fn set_access_config(mut self, input: ::std::option::Option<crate::types::PresignedUrlAccessConfig>) -> Self {
        self.access_config = input;
        self
    }
    /// <p>Configuration settings for accessing the hub content, including end-user license agreement acceptance for gated models and expected S3 URL validation.</p>
    pub fn get_access_config(&self) -> &::std::option::Option<crate::types::PresignedUrlAccessConfig> {
        &self.access_config
    }
    /// <p>The maximum number of presigned URLs to return in the response. Default value is 100. Large models may contain hundreds of files, requiring pagination to retrieve all URLs.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of presigned URLs to return in the response. Default value is 100. Large models may contain hundreds of files, requiring pagination to retrieve all URLs.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of presigned URLs to return in the response. Default value is 100. Large models may contain hundreds of files, requiring pagination to retrieve all URLs.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>A token for pagination. Use this token to retrieve the next set of presigned URLs when the response is truncated.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token for pagination. Use this token to retrieve the next set of presigned URLs when the response is truncated.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token for pagination. Use this token to retrieve the next set of presigned URLs when the response is truncated.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`CreateHubContentPresignedUrlsInput`](crate::operation::create_hub_content_presigned_urls::CreateHubContentPresignedUrlsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_hub_content_presigned_urls::CreateHubContentPresignedUrlsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_hub_content_presigned_urls::CreateHubContentPresignedUrlsInput {
            hub_name: self.hub_name,
            hub_content_type: self.hub_content_type,
            hub_content_name: self.hub_content_name,
            hub_content_version: self.hub_content_version,
            access_config: self.access_config,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
