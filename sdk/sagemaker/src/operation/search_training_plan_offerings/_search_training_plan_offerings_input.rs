// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchTrainingPlanOfferingsInput {
    /// <p>The type of instance you want to search for in the available training plan offerings. This field allows you to filter the search results based on the specific compute resources you require for your SageMaker training jobs or SageMaker HyperPod clusters. When searching for training plan offerings, specifying the instance type helps you find Reserved Instances that match your computational needs.</p>
    pub instance_type: ::std::option::Option<crate::types::ReservedCapacityInstanceType>,
    /// <p>The number of instances you want to reserve in the training plan offerings. This allows you to specify the quantity of compute resources needed for your SageMaker training jobs or SageMaker HyperPod clusters, helping you find reserved capacity offerings that match your requirements.</p>
    pub instance_count: ::std::option::Option<i32>,
    /// <p>A filter to search for training plan offerings with a start time after a specified date.</p>
    pub start_time_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A filter to search for reserved capacity offerings with an end time before a specified date.</p>
    pub end_time_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The desired duration in hours for the training plan offerings.</p>
    pub duration_hours: ::std::option::Option<i64>,
    /// <p>The target resources (e.g., SageMaker Training Jobs, SageMaker HyperPod) to search for in the offerings.</p>
    /// <p>Training plans are specific to their target resource.</p>
    /// <ul>
    /// <li>
    /// <p>A training plan designed for SageMaker training jobs can only be used to schedule and run training jobs.</p></li>
    /// <li>
    /// <p>A training plan for HyperPod clusters can be used exclusively to provide compute resources to a cluster's instance group.</p></li>
    /// </ul>
    pub target_resources: ::std::option::Option<::std::vec::Vec<crate::types::SageMakerResourceName>>,
}
impl SearchTrainingPlanOfferingsInput {
    /// <p>The type of instance you want to search for in the available training plan offerings. This field allows you to filter the search results based on the specific compute resources you require for your SageMaker training jobs or SageMaker HyperPod clusters. When searching for training plan offerings, specifying the instance type helps you find Reserved Instances that match your computational needs.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&crate::types::ReservedCapacityInstanceType> {
        self.instance_type.as_ref()
    }
    /// <p>The number of instances you want to reserve in the training plan offerings. This allows you to specify the quantity of compute resources needed for your SageMaker training jobs or SageMaker HyperPod clusters, helping you find reserved capacity offerings that match your requirements.</p>
    pub fn instance_count(&self) -> ::std::option::Option<i32> {
        self.instance_count
    }
    /// <p>A filter to search for training plan offerings with a start time after a specified date.</p>
    pub fn start_time_after(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time_after.as_ref()
    }
    /// <p>A filter to search for reserved capacity offerings with an end time before a specified date.</p>
    pub fn end_time_before(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time_before.as_ref()
    }
    /// <p>The desired duration in hours for the training plan offerings.</p>
    pub fn duration_hours(&self) -> ::std::option::Option<i64> {
        self.duration_hours
    }
    /// <p>The target resources (e.g., SageMaker Training Jobs, SageMaker HyperPod) to search for in the offerings.</p>
    /// <p>Training plans are specific to their target resource.</p>
    /// <ul>
    /// <li>
    /// <p>A training plan designed for SageMaker training jobs can only be used to schedule and run training jobs.</p></li>
    /// <li>
    /// <p>A training plan for HyperPod clusters can be used exclusively to provide compute resources to a cluster's instance group.</p></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.target_resources.is_none()`.
    pub fn target_resources(&self) -> &[crate::types::SageMakerResourceName] {
        self.target_resources.as_deref().unwrap_or_default()
    }
}
impl SearchTrainingPlanOfferingsInput {
    /// Creates a new builder-style object to manufacture [`SearchTrainingPlanOfferingsInput`](crate::operation::search_training_plan_offerings::SearchTrainingPlanOfferingsInput).
    pub fn builder() -> crate::operation::search_training_plan_offerings::builders::SearchTrainingPlanOfferingsInputBuilder {
        crate::operation::search_training_plan_offerings::builders::SearchTrainingPlanOfferingsInputBuilder::default()
    }
}

/// A builder for [`SearchTrainingPlanOfferingsInput`](crate::operation::search_training_plan_offerings::SearchTrainingPlanOfferingsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SearchTrainingPlanOfferingsInputBuilder {
    pub(crate) instance_type: ::std::option::Option<crate::types::ReservedCapacityInstanceType>,
    pub(crate) instance_count: ::std::option::Option<i32>,
    pub(crate) start_time_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) duration_hours: ::std::option::Option<i64>,
    pub(crate) target_resources: ::std::option::Option<::std::vec::Vec<crate::types::SageMakerResourceName>>,
}
impl SearchTrainingPlanOfferingsInputBuilder {
    /// <p>The type of instance you want to search for in the available training plan offerings. This field allows you to filter the search results based on the specific compute resources you require for your SageMaker training jobs or SageMaker HyperPod clusters. When searching for training plan offerings, specifying the instance type helps you find Reserved Instances that match your computational needs.</p>
    pub fn instance_type(mut self, input: crate::types::ReservedCapacityInstanceType) -> Self {
        self.instance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of instance you want to search for in the available training plan offerings. This field allows you to filter the search results based on the specific compute resources you require for your SageMaker training jobs or SageMaker HyperPod clusters. When searching for training plan offerings, specifying the instance type helps you find Reserved Instances that match your computational needs.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<crate::types::ReservedCapacityInstanceType>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The type of instance you want to search for in the available training plan offerings. This field allows you to filter the search results based on the specific compute resources you require for your SageMaker training jobs or SageMaker HyperPod clusters. When searching for training plan offerings, specifying the instance type helps you find Reserved Instances that match your computational needs.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<crate::types::ReservedCapacityInstanceType> {
        &self.instance_type
    }
    /// <p>The number of instances you want to reserve in the training plan offerings. This allows you to specify the quantity of compute resources needed for your SageMaker training jobs or SageMaker HyperPod clusters, helping you find reserved capacity offerings that match your requirements.</p>
    pub fn instance_count(mut self, input: i32) -> Self {
        self.instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of instances you want to reserve in the training plan offerings. This allows you to specify the quantity of compute resources needed for your SageMaker training jobs or SageMaker HyperPod clusters, helping you find reserved capacity offerings that match your requirements.</p>
    pub fn set_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.instance_count = input;
        self
    }
    /// <p>The number of instances you want to reserve in the training plan offerings. This allows you to specify the quantity of compute resources needed for your SageMaker training jobs or SageMaker HyperPod clusters, helping you find reserved capacity offerings that match your requirements.</p>
    pub fn get_instance_count(&self) -> &::std::option::Option<i32> {
        &self.instance_count
    }
    /// <p>A filter to search for training plan offerings with a start time after a specified date.</p>
    pub fn start_time_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time_after = ::std::option::Option::Some(input);
        self
    }
    /// <p>A filter to search for training plan offerings with a start time after a specified date.</p>
    pub fn set_start_time_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time_after = input;
        self
    }
    /// <p>A filter to search for training plan offerings with a start time after a specified date.</p>
    pub fn get_start_time_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time_after
    }
    /// <p>A filter to search for reserved capacity offerings with an end time before a specified date.</p>
    pub fn end_time_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time_before = ::std::option::Option::Some(input);
        self
    }
    /// <p>A filter to search for reserved capacity offerings with an end time before a specified date.</p>
    pub fn set_end_time_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time_before = input;
        self
    }
    /// <p>A filter to search for reserved capacity offerings with an end time before a specified date.</p>
    pub fn get_end_time_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time_before
    }
    /// <p>The desired duration in hours for the training plan offerings.</p>
    /// This field is required.
    pub fn duration_hours(mut self, input: i64) -> Self {
        self.duration_hours = ::std::option::Option::Some(input);
        self
    }
    /// <p>The desired duration in hours for the training plan offerings.</p>
    pub fn set_duration_hours(mut self, input: ::std::option::Option<i64>) -> Self {
        self.duration_hours = input;
        self
    }
    /// <p>The desired duration in hours for the training plan offerings.</p>
    pub fn get_duration_hours(&self) -> &::std::option::Option<i64> {
        &self.duration_hours
    }
    /// Appends an item to `target_resources`.
    ///
    /// To override the contents of this collection use [`set_target_resources`](Self::set_target_resources).
    ///
    /// <p>The target resources (e.g., SageMaker Training Jobs, SageMaker HyperPod) to search for in the offerings.</p>
    /// <p>Training plans are specific to their target resource.</p>
    /// <ul>
    /// <li>
    /// <p>A training plan designed for SageMaker training jobs can only be used to schedule and run training jobs.</p></li>
    /// <li>
    /// <p>A training plan for HyperPod clusters can be used exclusively to provide compute resources to a cluster's instance group.</p></li>
    /// </ul>
    pub fn target_resources(mut self, input: crate::types::SageMakerResourceName) -> Self {
        let mut v = self.target_resources.unwrap_or_default();
        v.push(input);
        self.target_resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>The target resources (e.g., SageMaker Training Jobs, SageMaker HyperPod) to search for in the offerings.</p>
    /// <p>Training plans are specific to their target resource.</p>
    /// <ul>
    /// <li>
    /// <p>A training plan designed for SageMaker training jobs can only be used to schedule and run training jobs.</p></li>
    /// <li>
    /// <p>A training plan for HyperPod clusters can be used exclusively to provide compute resources to a cluster's instance group.</p></li>
    /// </ul>
    pub fn set_target_resources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SageMakerResourceName>>) -> Self {
        self.target_resources = input;
        self
    }
    /// <p>The target resources (e.g., SageMaker Training Jobs, SageMaker HyperPod) to search for in the offerings.</p>
    /// <p>Training plans are specific to their target resource.</p>
    /// <ul>
    /// <li>
    /// <p>A training plan designed for SageMaker training jobs can only be used to schedule and run training jobs.</p></li>
    /// <li>
    /// <p>A training plan for HyperPod clusters can be used exclusively to provide compute resources to a cluster's instance group.</p></li>
    /// </ul>
    pub fn get_target_resources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SageMakerResourceName>> {
        &self.target_resources
    }
    /// Consumes the builder and constructs a [`SearchTrainingPlanOfferingsInput`](crate::operation::search_training_plan_offerings::SearchTrainingPlanOfferingsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::search_training_plan_offerings::SearchTrainingPlanOfferingsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::search_training_plan_offerings::SearchTrainingPlanOfferingsInput {
            instance_type: self.instance_type,
            instance_count: self.instance_count,
            start_time_after: self.start_time_after,
            end_time_before: self.end_time_before,
            duration_hours: self.duration_hours,
            target_resources: self.target_resources,
        })
    }
}
