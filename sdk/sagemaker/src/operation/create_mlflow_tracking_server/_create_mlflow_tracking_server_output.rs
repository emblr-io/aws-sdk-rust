// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateMlflowTrackingServerOutput {
    /// <p>The ARN of the tracking server.</p>
    pub tracking_server_arn: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateMlflowTrackingServerOutput {
    /// <p>The ARN of the tracking server.</p>
    pub fn tracking_server_arn(&self) -> ::std::option::Option<&str> {
        self.tracking_server_arn.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for CreateMlflowTrackingServerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateMlflowTrackingServerOutput {
    /// Creates a new builder-style object to manufacture [`CreateMlflowTrackingServerOutput`](crate::operation::create_mlflow_tracking_server::CreateMlflowTrackingServerOutput).
    pub fn builder() -> crate::operation::create_mlflow_tracking_server::builders::CreateMlflowTrackingServerOutputBuilder {
        crate::operation::create_mlflow_tracking_server::builders::CreateMlflowTrackingServerOutputBuilder::default()
    }
}

/// A builder for [`CreateMlflowTrackingServerOutput`](crate::operation::create_mlflow_tracking_server::CreateMlflowTrackingServerOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateMlflowTrackingServerOutputBuilder {
    pub(crate) tracking_server_arn: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateMlflowTrackingServerOutputBuilder {
    /// <p>The ARN of the tracking server.</p>
    pub fn tracking_server_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tracking_server_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the tracking server.</p>
    pub fn set_tracking_server_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tracking_server_arn = input;
        self
    }
    /// <p>The ARN of the tracking server.</p>
    pub fn get_tracking_server_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.tracking_server_arn
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateMlflowTrackingServerOutput`](crate::operation::create_mlflow_tracking_server::CreateMlflowTrackingServerOutput).
    pub fn build(self) -> crate::operation::create_mlflow_tracking_server::CreateMlflowTrackingServerOutput {
        crate::operation::create_mlflow_tracking_server::CreateMlflowTrackingServerOutput {
            tracking_server_arn: self.tracking_server_arn,
            _request_id: self._request_id,
        }
    }
}
