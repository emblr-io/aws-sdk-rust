// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateMlflowTrackingServerInput {
    /// <p>A unique string identifying the tracking server name. This string is part of the tracking server ARN.</p>
    pub tracking_server_name: ::std::option::Option<::std::string::String>,
    /// <p>The S3 URI for a general purpose bucket to use as the MLflow Tracking Server artifact store.</p>
    pub artifact_store_uri: ::std::option::Option<::std::string::String>,
    /// <p>The size of the tracking server you want to create. You can choose between <code>"Small"</code>, <code>"Medium"</code>, and <code>"Large"</code>. The default MLflow Tracking Server configuration size is <code>"Small"</code>. You can choose a size depending on the projected use of the tracking server such as the volume of data logged, number of users, and frequency of use.</p>
    /// <p>We recommend using a small tracking server for teams of up to 25 users, a medium tracking server for teams of up to 50 users, and a large tracking server for teams of up to 100 users.</p>
    pub tracking_server_size: ::std::option::Option<crate::types::TrackingServerSize>,
    /// <p>The version of MLflow that the tracking server uses. To see which MLflow versions are available to use, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/mlflow.html#mlflow-create-tracking-server-how-it-works">How it works</a>.</p>
    pub mlflow_version: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for an IAM role in your account that the MLflow Tracking Server uses to access the artifact store in Amazon S3. The role should have <code>AmazonS3FullAccess</code> permissions. For more information on IAM permissions for tracking server creation, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/mlflow-create-tracking-server-iam.html">Set up IAM permissions for MLflow</a>.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Whether to enable or disable automatic registration of new MLflow models to the SageMaker Model Registry. To enable automatic model registration, set this value to <code>True</code>. To disable automatic model registration, set this value to <code>False</code>. If not specified, <code>AutomaticModelRegistration</code> defaults to <code>False</code>.</p>
    pub automatic_model_registration: ::std::option::Option<bool>,
    /// <p>The day and time of the week in Coordinated Universal Time (UTC) 24-hour standard time that weekly maintenance updates are scheduled. For example: TUE:03:30.</p>
    pub weekly_maintenance_window_start: ::std::option::Option<::std::string::String>,
    /// <p>Tags consisting of key-value pairs used to manage metadata for the tracking server.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateMlflowTrackingServerInput {
    /// <p>A unique string identifying the tracking server name. This string is part of the tracking server ARN.</p>
    pub fn tracking_server_name(&self) -> ::std::option::Option<&str> {
        self.tracking_server_name.as_deref()
    }
    /// <p>The S3 URI for a general purpose bucket to use as the MLflow Tracking Server artifact store.</p>
    pub fn artifact_store_uri(&self) -> ::std::option::Option<&str> {
        self.artifact_store_uri.as_deref()
    }
    /// <p>The size of the tracking server you want to create. You can choose between <code>"Small"</code>, <code>"Medium"</code>, and <code>"Large"</code>. The default MLflow Tracking Server configuration size is <code>"Small"</code>. You can choose a size depending on the projected use of the tracking server such as the volume of data logged, number of users, and frequency of use.</p>
    /// <p>We recommend using a small tracking server for teams of up to 25 users, a medium tracking server for teams of up to 50 users, and a large tracking server for teams of up to 100 users.</p>
    pub fn tracking_server_size(&self) -> ::std::option::Option<&crate::types::TrackingServerSize> {
        self.tracking_server_size.as_ref()
    }
    /// <p>The version of MLflow that the tracking server uses. To see which MLflow versions are available to use, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/mlflow.html#mlflow-create-tracking-server-how-it-works">How it works</a>.</p>
    pub fn mlflow_version(&self) -> ::std::option::Option<&str> {
        self.mlflow_version.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for an IAM role in your account that the MLflow Tracking Server uses to access the artifact store in Amazon S3. The role should have <code>AmazonS3FullAccess</code> permissions. For more information on IAM permissions for tracking server creation, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/mlflow-create-tracking-server-iam.html">Set up IAM permissions for MLflow</a>.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>Whether to enable or disable automatic registration of new MLflow models to the SageMaker Model Registry. To enable automatic model registration, set this value to <code>True</code>. To disable automatic model registration, set this value to <code>False</code>. If not specified, <code>AutomaticModelRegistration</code> defaults to <code>False</code>.</p>
    pub fn automatic_model_registration(&self) -> ::std::option::Option<bool> {
        self.automatic_model_registration
    }
    /// <p>The day and time of the week in Coordinated Universal Time (UTC) 24-hour standard time that weekly maintenance updates are scheduled. For example: TUE:03:30.</p>
    pub fn weekly_maintenance_window_start(&self) -> ::std::option::Option<&str> {
        self.weekly_maintenance_window_start.as_deref()
    }
    /// <p>Tags consisting of key-value pairs used to manage metadata for the tracking server.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateMlflowTrackingServerInput {
    /// Creates a new builder-style object to manufacture [`CreateMlflowTrackingServerInput`](crate::operation::create_mlflow_tracking_server::CreateMlflowTrackingServerInput).
    pub fn builder() -> crate::operation::create_mlflow_tracking_server::builders::CreateMlflowTrackingServerInputBuilder {
        crate::operation::create_mlflow_tracking_server::builders::CreateMlflowTrackingServerInputBuilder::default()
    }
}

/// A builder for [`CreateMlflowTrackingServerInput`](crate::operation::create_mlflow_tracking_server::CreateMlflowTrackingServerInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateMlflowTrackingServerInputBuilder {
    pub(crate) tracking_server_name: ::std::option::Option<::std::string::String>,
    pub(crate) artifact_store_uri: ::std::option::Option<::std::string::String>,
    pub(crate) tracking_server_size: ::std::option::Option<crate::types::TrackingServerSize>,
    pub(crate) mlflow_version: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) automatic_model_registration: ::std::option::Option<bool>,
    pub(crate) weekly_maintenance_window_start: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateMlflowTrackingServerInputBuilder {
    /// <p>A unique string identifying the tracking server name. This string is part of the tracking server ARN.</p>
    /// This field is required.
    pub fn tracking_server_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tracking_server_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique string identifying the tracking server name. This string is part of the tracking server ARN.</p>
    pub fn set_tracking_server_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tracking_server_name = input;
        self
    }
    /// <p>A unique string identifying the tracking server name. This string is part of the tracking server ARN.</p>
    pub fn get_tracking_server_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.tracking_server_name
    }
    /// <p>The S3 URI for a general purpose bucket to use as the MLflow Tracking Server artifact store.</p>
    /// This field is required.
    pub fn artifact_store_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.artifact_store_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 URI for a general purpose bucket to use as the MLflow Tracking Server artifact store.</p>
    pub fn set_artifact_store_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.artifact_store_uri = input;
        self
    }
    /// <p>The S3 URI for a general purpose bucket to use as the MLflow Tracking Server artifact store.</p>
    pub fn get_artifact_store_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.artifact_store_uri
    }
    /// <p>The size of the tracking server you want to create. You can choose between <code>"Small"</code>, <code>"Medium"</code>, and <code>"Large"</code>. The default MLflow Tracking Server configuration size is <code>"Small"</code>. You can choose a size depending on the projected use of the tracking server such as the volume of data logged, number of users, and frequency of use.</p>
    /// <p>We recommend using a small tracking server for teams of up to 25 users, a medium tracking server for teams of up to 50 users, and a large tracking server for teams of up to 100 users.</p>
    pub fn tracking_server_size(mut self, input: crate::types::TrackingServerSize) -> Self {
        self.tracking_server_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the tracking server you want to create. You can choose between <code>"Small"</code>, <code>"Medium"</code>, and <code>"Large"</code>. The default MLflow Tracking Server configuration size is <code>"Small"</code>. You can choose a size depending on the projected use of the tracking server such as the volume of data logged, number of users, and frequency of use.</p>
    /// <p>We recommend using a small tracking server for teams of up to 25 users, a medium tracking server for teams of up to 50 users, and a large tracking server for teams of up to 100 users.</p>
    pub fn set_tracking_server_size(mut self, input: ::std::option::Option<crate::types::TrackingServerSize>) -> Self {
        self.tracking_server_size = input;
        self
    }
    /// <p>The size of the tracking server you want to create. You can choose between <code>"Small"</code>, <code>"Medium"</code>, and <code>"Large"</code>. The default MLflow Tracking Server configuration size is <code>"Small"</code>. You can choose a size depending on the projected use of the tracking server such as the volume of data logged, number of users, and frequency of use.</p>
    /// <p>We recommend using a small tracking server for teams of up to 25 users, a medium tracking server for teams of up to 50 users, and a large tracking server for teams of up to 100 users.</p>
    pub fn get_tracking_server_size(&self) -> &::std::option::Option<crate::types::TrackingServerSize> {
        &self.tracking_server_size
    }
    /// <p>The version of MLflow that the tracking server uses. To see which MLflow versions are available to use, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/mlflow.html#mlflow-create-tracking-server-how-it-works">How it works</a>.</p>
    pub fn mlflow_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mlflow_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of MLflow that the tracking server uses. To see which MLflow versions are available to use, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/mlflow.html#mlflow-create-tracking-server-how-it-works">How it works</a>.</p>
    pub fn set_mlflow_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mlflow_version = input;
        self
    }
    /// <p>The version of MLflow that the tracking server uses. To see which MLflow versions are available to use, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/mlflow.html#mlflow-create-tracking-server-how-it-works">How it works</a>.</p>
    pub fn get_mlflow_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.mlflow_version
    }
    /// <p>The Amazon Resource Name (ARN) for an IAM role in your account that the MLflow Tracking Server uses to access the artifact store in Amazon S3. The role should have <code>AmazonS3FullAccess</code> permissions. For more information on IAM permissions for tracking server creation, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/mlflow-create-tracking-server-iam.html">Set up IAM permissions for MLflow</a>.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for an IAM role in your account that the MLflow Tracking Server uses to access the artifact store in Amazon S3. The role should have <code>AmazonS3FullAccess</code> permissions. For more information on IAM permissions for tracking server creation, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/mlflow-create-tracking-server-iam.html">Set up IAM permissions for MLflow</a>.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for an IAM role in your account that the MLflow Tracking Server uses to access the artifact store in Amazon S3. The role should have <code>AmazonS3FullAccess</code> permissions. For more information on IAM permissions for tracking server creation, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/mlflow-create-tracking-server-iam.html">Set up IAM permissions for MLflow</a>.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>Whether to enable or disable automatic registration of new MLflow models to the SageMaker Model Registry. To enable automatic model registration, set this value to <code>True</code>. To disable automatic model registration, set this value to <code>False</code>. If not specified, <code>AutomaticModelRegistration</code> defaults to <code>False</code>.</p>
    pub fn automatic_model_registration(mut self, input: bool) -> Self {
        self.automatic_model_registration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to enable or disable automatic registration of new MLflow models to the SageMaker Model Registry. To enable automatic model registration, set this value to <code>True</code>. To disable automatic model registration, set this value to <code>False</code>. If not specified, <code>AutomaticModelRegistration</code> defaults to <code>False</code>.</p>
    pub fn set_automatic_model_registration(mut self, input: ::std::option::Option<bool>) -> Self {
        self.automatic_model_registration = input;
        self
    }
    /// <p>Whether to enable or disable automatic registration of new MLflow models to the SageMaker Model Registry. To enable automatic model registration, set this value to <code>True</code>. To disable automatic model registration, set this value to <code>False</code>. If not specified, <code>AutomaticModelRegistration</code> defaults to <code>False</code>.</p>
    pub fn get_automatic_model_registration(&self) -> &::std::option::Option<bool> {
        &self.automatic_model_registration
    }
    /// <p>The day and time of the week in Coordinated Universal Time (UTC) 24-hour standard time that weekly maintenance updates are scheduled. For example: TUE:03:30.</p>
    pub fn weekly_maintenance_window_start(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.weekly_maintenance_window_start = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The day and time of the week in Coordinated Universal Time (UTC) 24-hour standard time that weekly maintenance updates are scheduled. For example: TUE:03:30.</p>
    pub fn set_weekly_maintenance_window_start(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.weekly_maintenance_window_start = input;
        self
    }
    /// <p>The day and time of the week in Coordinated Universal Time (UTC) 24-hour standard time that weekly maintenance updates are scheduled. For example: TUE:03:30.</p>
    pub fn get_weekly_maintenance_window_start(&self) -> &::std::option::Option<::std::string::String> {
        &self.weekly_maintenance_window_start
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags consisting of key-value pairs used to manage metadata for the tracking server.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Tags consisting of key-value pairs used to manage metadata for the tracking server.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Tags consisting of key-value pairs used to manage metadata for the tracking server.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateMlflowTrackingServerInput`](crate::operation::create_mlflow_tracking_server::CreateMlflowTrackingServerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_mlflow_tracking_server::CreateMlflowTrackingServerInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_mlflow_tracking_server::CreateMlflowTrackingServerInput {
            tracking_server_name: self.tracking_server_name,
            artifact_store_uri: self.artifact_store_uri,
            tracking_server_size: self.tracking_server_size,
            mlflow_version: self.mlflow_version,
            role_arn: self.role_arn,
            automatic_model_registration: self.automatic_model_registration,
            weekly_maintenance_window_start: self.weekly_maintenance_window_start,
            tags: self.tags,
        })
    }
}
