// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchDeleteClusterNodesInput {
    /// <p>The name of the SageMaker HyperPod cluster from which to delete the specified nodes.</p>
    pub cluster_name: ::std::option::Option<::std::string::String>,
    /// <p>A list of node IDs to be deleted from the specified cluster.</p><note>
    /// <ul>
    /// <li>
    /// <p>For SageMaker HyperPod clusters using the Slurm workload manager, you cannot remove instances that are configured as Slurm controller nodes.</p></li>
    /// <li>
    /// <p>If you need to delete more than 99 instances, contact <a href="http://aws.amazon.com/contact-us/">Support</a> for assistance.</p></li>
    /// </ul>
    /// </note>
    pub node_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl BatchDeleteClusterNodesInput {
    /// <p>The name of the SageMaker HyperPod cluster from which to delete the specified nodes.</p>
    pub fn cluster_name(&self) -> ::std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>A list of node IDs to be deleted from the specified cluster.</p><note>
    /// <ul>
    /// <li>
    /// <p>For SageMaker HyperPod clusters using the Slurm workload manager, you cannot remove instances that are configured as Slurm controller nodes.</p></li>
    /// <li>
    /// <p>If you need to delete more than 99 instances, contact <a href="http://aws.amazon.com/contact-us/">Support</a> for assistance.</p></li>
    /// </ul>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.node_ids.is_none()`.
    pub fn node_ids(&self) -> &[::std::string::String] {
        self.node_ids.as_deref().unwrap_or_default()
    }
}
impl BatchDeleteClusterNodesInput {
    /// Creates a new builder-style object to manufacture [`BatchDeleteClusterNodesInput`](crate::operation::batch_delete_cluster_nodes::BatchDeleteClusterNodesInput).
    pub fn builder() -> crate::operation::batch_delete_cluster_nodes::builders::BatchDeleteClusterNodesInputBuilder {
        crate::operation::batch_delete_cluster_nodes::builders::BatchDeleteClusterNodesInputBuilder::default()
    }
}

/// A builder for [`BatchDeleteClusterNodesInput`](crate::operation::batch_delete_cluster_nodes::BatchDeleteClusterNodesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchDeleteClusterNodesInputBuilder {
    pub(crate) cluster_name: ::std::option::Option<::std::string::String>,
    pub(crate) node_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl BatchDeleteClusterNodesInputBuilder {
    /// <p>The name of the SageMaker HyperPod cluster from which to delete the specified nodes.</p>
    /// This field is required.
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the SageMaker HyperPod cluster from which to delete the specified nodes.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>The name of the SageMaker HyperPod cluster from which to delete the specified nodes.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_name
    }
    /// Appends an item to `node_ids`.
    ///
    /// To override the contents of this collection use [`set_node_ids`](Self::set_node_ids).
    ///
    /// <p>A list of node IDs to be deleted from the specified cluster.</p><note>
    /// <ul>
    /// <li>
    /// <p>For SageMaker HyperPod clusters using the Slurm workload manager, you cannot remove instances that are configured as Slurm controller nodes.</p></li>
    /// <li>
    /// <p>If you need to delete more than 99 instances, contact <a href="http://aws.amazon.com/contact-us/">Support</a> for assistance.</p></li>
    /// </ul>
    /// </note>
    pub fn node_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.node_ids.unwrap_or_default();
        v.push(input.into());
        self.node_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of node IDs to be deleted from the specified cluster.</p><note>
    /// <ul>
    /// <li>
    /// <p>For SageMaker HyperPod clusters using the Slurm workload manager, you cannot remove instances that are configured as Slurm controller nodes.</p></li>
    /// <li>
    /// <p>If you need to delete more than 99 instances, contact <a href="http://aws.amazon.com/contact-us/">Support</a> for assistance.</p></li>
    /// </ul>
    /// </note>
    pub fn set_node_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.node_ids = input;
        self
    }
    /// <p>A list of node IDs to be deleted from the specified cluster.</p><note>
    /// <ul>
    /// <li>
    /// <p>For SageMaker HyperPod clusters using the Slurm workload manager, you cannot remove instances that are configured as Slurm controller nodes.</p></li>
    /// <li>
    /// <p>If you need to delete more than 99 instances, contact <a href="http://aws.amazon.com/contact-us/">Support</a> for assistance.</p></li>
    /// </ul>
    /// </note>
    pub fn get_node_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.node_ids
    }
    /// Consumes the builder and constructs a [`BatchDeleteClusterNodesInput`](crate::operation::batch_delete_cluster_nodes::BatchDeleteClusterNodesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_delete_cluster_nodes::BatchDeleteClusterNodesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::batch_delete_cluster_nodes::BatchDeleteClusterNodesInput {
            cluster_name: self.cluster_name,
            node_ids: self.node_ids,
        })
    }
}
