// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeAppOutput {
    /// <p>The Amazon Resource Name (ARN) of the app.</p>
    pub app_arn: ::std::option::Option<::std::string::String>,
    /// <p>The type of app.</p>
    pub app_type: ::std::option::Option<crate::types::AppType>,
    /// <p>The name of the app.</p>
    pub app_name: ::std::option::Option<::std::string::String>,
    /// <p>The domain ID.</p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The user profile name.</p>
    pub user_profile_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the space. If this value is not set, then <code>UserProfileName</code> must be set.</p>
    pub space_name: ::std::option::Option<::std::string::String>,
    /// <p>The status.</p>
    pub status: ::std::option::Option<crate::types::AppStatus>,
    /// <p>Indicates whether the application is launched in recovery mode.</p>
    pub recovery_mode: ::std::option::Option<bool>,
    /// <p>The timestamp of the last health check.</p>
    pub last_health_check_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of the last user's activity. <code>LastUserActivityTimestamp</code> is also updated when SageMaker AI performs health checks without user activity. As a result, this value is set to the same value as <code>LastHealthCheckTimestamp</code>.</p>
    pub last_user_activity_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The creation time of the application.</p><note>
    /// <p>After an application has been shut down for 24 hours, SageMaker AI deletes all metadata for the application. To be considered an update and retain application metadata, applications must be restarted within 24 hours after the previous application has been shut down. After this time window, creation of an application is considered a new application rather than an update of the previous application.</p>
    /// </note>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The failure reason.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>The instance type and the Amazon Resource Name (ARN) of the SageMaker AI image created on the instance.</p>
    pub resource_spec: ::std::option::Option<crate::types::ResourceSpec>,
    /// <p>The lifecycle configuration that runs before the default lifecycle configuration</p>
    pub built_in_lifecycle_config_arn: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeAppOutput {
    /// <p>The Amazon Resource Name (ARN) of the app.</p>
    pub fn app_arn(&self) -> ::std::option::Option<&str> {
        self.app_arn.as_deref()
    }
    /// <p>The type of app.</p>
    pub fn app_type(&self) -> ::std::option::Option<&crate::types::AppType> {
        self.app_type.as_ref()
    }
    /// <p>The name of the app.</p>
    pub fn app_name(&self) -> ::std::option::Option<&str> {
        self.app_name.as_deref()
    }
    /// <p>The domain ID.</p>
    pub fn domain_id(&self) -> ::std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The user profile name.</p>
    pub fn user_profile_name(&self) -> ::std::option::Option<&str> {
        self.user_profile_name.as_deref()
    }
    /// <p>The name of the space. If this value is not set, then <code>UserProfileName</code> must be set.</p>
    pub fn space_name(&self) -> ::std::option::Option<&str> {
        self.space_name.as_deref()
    }
    /// <p>The status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::AppStatus> {
        self.status.as_ref()
    }
    /// <p>Indicates whether the application is launched in recovery mode.</p>
    pub fn recovery_mode(&self) -> ::std::option::Option<bool> {
        self.recovery_mode
    }
    /// <p>The timestamp of the last health check.</p>
    pub fn last_health_check_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_health_check_timestamp.as_ref()
    }
    /// <p>The timestamp of the last user's activity. <code>LastUserActivityTimestamp</code> is also updated when SageMaker AI performs health checks without user activity. As a result, this value is set to the same value as <code>LastHealthCheckTimestamp</code>.</p>
    pub fn last_user_activity_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_user_activity_timestamp.as_ref()
    }
    /// <p>The creation time of the application.</p><note>
    /// <p>After an application has been shut down for 24 hours, SageMaker AI deletes all metadata for the application. To be considered an update and retain application metadata, applications must be restarted within 24 hours after the previous application has been shut down. After this time window, creation of an application is considered a new application rather than an update of the previous application.</p>
    /// </note>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The failure reason.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The instance type and the Amazon Resource Name (ARN) of the SageMaker AI image created on the instance.</p>
    pub fn resource_spec(&self) -> ::std::option::Option<&crate::types::ResourceSpec> {
        self.resource_spec.as_ref()
    }
    /// <p>The lifecycle configuration that runs before the default lifecycle configuration</p>
    pub fn built_in_lifecycle_config_arn(&self) -> ::std::option::Option<&str> {
        self.built_in_lifecycle_config_arn.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeAppOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAppOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAppOutput`](crate::operation::describe_app::DescribeAppOutput).
    pub fn builder() -> crate::operation::describe_app::builders::DescribeAppOutputBuilder {
        crate::operation::describe_app::builders::DescribeAppOutputBuilder::default()
    }
}

/// A builder for [`DescribeAppOutput`](crate::operation::describe_app::DescribeAppOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeAppOutputBuilder {
    pub(crate) app_arn: ::std::option::Option<::std::string::String>,
    pub(crate) app_type: ::std::option::Option<crate::types::AppType>,
    pub(crate) app_name: ::std::option::Option<::std::string::String>,
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_profile_name: ::std::option::Option<::std::string::String>,
    pub(crate) space_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::AppStatus>,
    pub(crate) recovery_mode: ::std::option::Option<bool>,
    pub(crate) last_health_check_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_user_activity_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) resource_spec: ::std::option::Option<crate::types::ResourceSpec>,
    pub(crate) built_in_lifecycle_config_arn: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeAppOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the app.</p>
    pub fn app_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the app.</p>
    pub fn set_app_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the app.</p>
    pub fn get_app_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_arn
    }
    /// <p>The type of app.</p>
    pub fn app_type(mut self, input: crate::types::AppType) -> Self {
        self.app_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of app.</p>
    pub fn set_app_type(mut self, input: ::std::option::Option<crate::types::AppType>) -> Self {
        self.app_type = input;
        self
    }
    /// <p>The type of app.</p>
    pub fn get_app_type(&self) -> &::std::option::Option<crate::types::AppType> {
        &self.app_type
    }
    /// <p>The name of the app.</p>
    pub fn app_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the app.</p>
    pub fn set_app_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_name = input;
        self
    }
    /// <p>The name of the app.</p>
    pub fn get_app_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_name
    }
    /// <p>The domain ID.</p>
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain ID.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The domain ID.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The user profile name.</p>
    pub fn user_profile_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_profile_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user profile name.</p>
    pub fn set_user_profile_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_profile_name = input;
        self
    }
    /// <p>The user profile name.</p>
    pub fn get_user_profile_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_profile_name
    }
    /// <p>The name of the space. If this value is not set, then <code>UserProfileName</code> must be set.</p>
    pub fn space_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.space_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the space. If this value is not set, then <code>UserProfileName</code> must be set.</p>
    pub fn set_space_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.space_name = input;
        self
    }
    /// <p>The name of the space. If this value is not set, then <code>UserProfileName</code> must be set.</p>
    pub fn get_space_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.space_name
    }
    /// <p>The status.</p>
    pub fn status(mut self, input: crate::types::AppStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AppStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AppStatus> {
        &self.status
    }
    /// <p>Indicates whether the application is launched in recovery mode.</p>
    pub fn recovery_mode(mut self, input: bool) -> Self {
        self.recovery_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the application is launched in recovery mode.</p>
    pub fn set_recovery_mode(mut self, input: ::std::option::Option<bool>) -> Self {
        self.recovery_mode = input;
        self
    }
    /// <p>Indicates whether the application is launched in recovery mode.</p>
    pub fn get_recovery_mode(&self) -> &::std::option::Option<bool> {
        &self.recovery_mode
    }
    /// <p>The timestamp of the last health check.</p>
    pub fn last_health_check_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_health_check_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of the last health check.</p>
    pub fn set_last_health_check_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_health_check_timestamp = input;
        self
    }
    /// <p>The timestamp of the last health check.</p>
    pub fn get_last_health_check_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_health_check_timestamp
    }
    /// <p>The timestamp of the last user's activity. <code>LastUserActivityTimestamp</code> is also updated when SageMaker AI performs health checks without user activity. As a result, this value is set to the same value as <code>LastHealthCheckTimestamp</code>.</p>
    pub fn last_user_activity_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_user_activity_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of the last user's activity. <code>LastUserActivityTimestamp</code> is also updated when SageMaker AI performs health checks without user activity. As a result, this value is set to the same value as <code>LastHealthCheckTimestamp</code>.</p>
    pub fn set_last_user_activity_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_user_activity_timestamp = input;
        self
    }
    /// <p>The timestamp of the last user's activity. <code>LastUserActivityTimestamp</code> is also updated when SageMaker AI performs health checks without user activity. As a result, this value is set to the same value as <code>LastHealthCheckTimestamp</code>.</p>
    pub fn get_last_user_activity_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_user_activity_timestamp
    }
    /// <p>The creation time of the application.</p><note>
    /// <p>After an application has been shut down for 24 hours, SageMaker AI deletes all metadata for the application. To be considered an update and retain application metadata, applications must be restarted within 24 hours after the previous application has been shut down. After this time window, creation of an application is considered a new application rather than an update of the previous application.</p>
    /// </note>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation time of the application.</p><note>
    /// <p>After an application has been shut down for 24 hours, SageMaker AI deletes all metadata for the application. To be considered an update and retain application metadata, applications must be restarted within 24 hours after the previous application has been shut down. After this time window, creation of an application is considered a new application rather than an update of the previous application.</p>
    /// </note>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The creation time of the application.</p><note>
    /// <p>After an application has been shut down for 24 hours, SageMaker AI deletes all metadata for the application. To be considered an update and retain application metadata, applications must be restarted within 24 hours after the previous application has been shut down. After this time window, creation of an application is considered a new application rather than an update of the previous application.</p>
    /// </note>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The failure reason.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The failure reason.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The failure reason.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// <p>The instance type and the Amazon Resource Name (ARN) of the SageMaker AI image created on the instance.</p>
    pub fn resource_spec(mut self, input: crate::types::ResourceSpec) -> Self {
        self.resource_spec = ::std::option::Option::Some(input);
        self
    }
    /// <p>The instance type and the Amazon Resource Name (ARN) of the SageMaker AI image created on the instance.</p>
    pub fn set_resource_spec(mut self, input: ::std::option::Option<crate::types::ResourceSpec>) -> Self {
        self.resource_spec = input;
        self
    }
    /// <p>The instance type and the Amazon Resource Name (ARN) of the SageMaker AI image created on the instance.</p>
    pub fn get_resource_spec(&self) -> &::std::option::Option<crate::types::ResourceSpec> {
        &self.resource_spec
    }
    /// <p>The lifecycle configuration that runs before the default lifecycle configuration</p>
    pub fn built_in_lifecycle_config_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.built_in_lifecycle_config_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The lifecycle configuration that runs before the default lifecycle configuration</p>
    pub fn set_built_in_lifecycle_config_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.built_in_lifecycle_config_arn = input;
        self
    }
    /// <p>The lifecycle configuration that runs before the default lifecycle configuration</p>
    pub fn get_built_in_lifecycle_config_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.built_in_lifecycle_config_arn
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeAppOutput`](crate::operation::describe_app::DescribeAppOutput).
    pub fn build(self) -> crate::operation::describe_app::DescribeAppOutput {
        crate::operation::describe_app::DescribeAppOutput {
            app_arn: self.app_arn,
            app_type: self.app_type,
            app_name: self.app_name,
            domain_id: self.domain_id,
            user_profile_name: self.user_profile_name,
            space_name: self.space_name,
            status: self.status,
            recovery_mode: self.recovery_mode,
            last_health_check_timestamp: self.last_health_check_timestamp,
            last_user_activity_timestamp: self.last_user_activity_timestamp,
            creation_time: self.creation_time,
            failure_reason: self.failure_reason,
            resource_spec: self.resource_spec,
            built_in_lifecycle_config_arn: self.built_in_lifecycle_config_arn,
            _request_id: self._request_id,
        }
    }
}
