// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateClusterInput {
    /// <p>Specify the name of the SageMaker HyperPod cluster you want to update.</p>
    pub cluster_name: ::std::option::Option<::std::string::String>,
    /// <p>Specify the instance groups to update.</p>
    pub instance_groups: ::std::option::Option<::std::vec::Vec<crate::types::ClusterInstanceGroupSpecification>>,
    /// <p>The node recovery mode to be applied to the SageMaker HyperPod cluster.</p>
    pub node_recovery: ::std::option::Option<crate::types::ClusterNodeRecovery>,
    /// <p>Specify the names of the instance groups to delete. Use a single <code>,</code> as the separator between multiple names.</p>
    pub instance_groups_to_delete: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateClusterInput {
    /// <p>Specify the name of the SageMaker HyperPod cluster you want to update.</p>
    pub fn cluster_name(&self) -> ::std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>Specify the instance groups to update.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instance_groups.is_none()`.
    pub fn instance_groups(&self) -> &[crate::types::ClusterInstanceGroupSpecification] {
        self.instance_groups.as_deref().unwrap_or_default()
    }
    /// <p>The node recovery mode to be applied to the SageMaker HyperPod cluster.</p>
    pub fn node_recovery(&self) -> ::std::option::Option<&crate::types::ClusterNodeRecovery> {
        self.node_recovery.as_ref()
    }
    /// <p>Specify the names of the instance groups to delete. Use a single <code>,</code> as the separator between multiple names.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instance_groups_to_delete.is_none()`.
    pub fn instance_groups_to_delete(&self) -> &[::std::string::String] {
        self.instance_groups_to_delete.as_deref().unwrap_or_default()
    }
}
impl UpdateClusterInput {
    /// Creates a new builder-style object to manufacture [`UpdateClusterInput`](crate::operation::update_cluster::UpdateClusterInput).
    pub fn builder() -> crate::operation::update_cluster::builders::UpdateClusterInputBuilder {
        crate::operation::update_cluster::builders::UpdateClusterInputBuilder::default()
    }
}

/// A builder for [`UpdateClusterInput`](crate::operation::update_cluster::UpdateClusterInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateClusterInputBuilder {
    pub(crate) cluster_name: ::std::option::Option<::std::string::String>,
    pub(crate) instance_groups: ::std::option::Option<::std::vec::Vec<crate::types::ClusterInstanceGroupSpecification>>,
    pub(crate) node_recovery: ::std::option::Option<crate::types::ClusterNodeRecovery>,
    pub(crate) instance_groups_to_delete: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateClusterInputBuilder {
    /// <p>Specify the name of the SageMaker HyperPod cluster you want to update.</p>
    /// This field is required.
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify the name of the SageMaker HyperPod cluster you want to update.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>Specify the name of the SageMaker HyperPod cluster you want to update.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_name
    }
    /// Appends an item to `instance_groups`.
    ///
    /// To override the contents of this collection use [`set_instance_groups`](Self::set_instance_groups).
    ///
    /// <p>Specify the instance groups to update.</p>
    pub fn instance_groups(mut self, input: crate::types::ClusterInstanceGroupSpecification) -> Self {
        let mut v = self.instance_groups.unwrap_or_default();
        v.push(input);
        self.instance_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specify the instance groups to update.</p>
    pub fn set_instance_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ClusterInstanceGroupSpecification>>) -> Self {
        self.instance_groups = input;
        self
    }
    /// <p>Specify the instance groups to update.</p>
    pub fn get_instance_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ClusterInstanceGroupSpecification>> {
        &self.instance_groups
    }
    /// <p>The node recovery mode to be applied to the SageMaker HyperPod cluster.</p>
    pub fn node_recovery(mut self, input: crate::types::ClusterNodeRecovery) -> Self {
        self.node_recovery = ::std::option::Option::Some(input);
        self
    }
    /// <p>The node recovery mode to be applied to the SageMaker HyperPod cluster.</p>
    pub fn set_node_recovery(mut self, input: ::std::option::Option<crate::types::ClusterNodeRecovery>) -> Self {
        self.node_recovery = input;
        self
    }
    /// <p>The node recovery mode to be applied to the SageMaker HyperPod cluster.</p>
    pub fn get_node_recovery(&self) -> &::std::option::Option<crate::types::ClusterNodeRecovery> {
        &self.node_recovery
    }
    /// Appends an item to `instance_groups_to_delete`.
    ///
    /// To override the contents of this collection use [`set_instance_groups_to_delete`](Self::set_instance_groups_to_delete).
    ///
    /// <p>Specify the names of the instance groups to delete. Use a single <code>,</code> as the separator between multiple names.</p>
    pub fn instance_groups_to_delete(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.instance_groups_to_delete.unwrap_or_default();
        v.push(input.into());
        self.instance_groups_to_delete = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specify the names of the instance groups to delete. Use a single <code>,</code> as the separator between multiple names.</p>
    pub fn set_instance_groups_to_delete(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.instance_groups_to_delete = input;
        self
    }
    /// <p>Specify the names of the instance groups to delete. Use a single <code>,</code> as the separator between multiple names.</p>
    pub fn get_instance_groups_to_delete(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.instance_groups_to_delete
    }
    /// Consumes the builder and constructs a [`UpdateClusterInput`](crate::operation::update_cluster::UpdateClusterInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_cluster::UpdateClusterInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_cluster::UpdateClusterInput {
            cluster_name: self.cluster_name,
            instance_groups: self.instance_groups,
            node_recovery: self.node_recovery,
            instance_groups_to_delete: self.instance_groups_to_delete,
        })
    }
}
