// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribePartnerAppOutput {
    /// <p>The ARN of the SageMaker Partner AI App that was described.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the SageMaker Partner AI App.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The type of SageMaker Partner AI App. Must be one of the following: <code>lakera-guard</code>, <code>comet</code>, <code>deepchecks-llm-evaluation</code>, or <code>fiddler</code>.</p>
    pub r#type: ::std::option::Option<crate::types::PartnerAppType>,
    /// <p>The status of the SageMaker Partner AI App.</p>
    pub status: ::std::option::Option<crate::types::PartnerAppStatus>,
    /// <p>The time that the SageMaker Partner AI App was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time that the SageMaker Partner AI App was last modified.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The ARN of the IAM role associated with the SageMaker Partner AI App.</p>
    pub execution_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services KMS customer managed key used to encrypt the data at rest associated with SageMaker Partner AI Apps.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>The URL of the SageMaker Partner AI App that the Application SDK uses to support in-app calls for the user.</p>
    pub base_url: ::std::option::Option<::std::string::String>,
    /// <p>Maintenance configuration settings for the SageMaker Partner AI App.</p>
    pub maintenance_config: ::std::option::Option<crate::types::PartnerAppMaintenanceConfig>,
    /// <p>The instance type and size of the cluster attached to the SageMaker Partner AI App.</p>
    pub tier: ::std::option::Option<::std::string::String>,
    /// <p>The version of the SageMaker Partner AI App.</p>
    pub version: ::std::option::Option<::std::string::String>,
    /// <p>Configuration settings for the SageMaker Partner AI App.</p>
    pub application_config: ::std::option::Option<crate::types::PartnerAppConfig>,
    /// <p>The authorization type that users use to access the SageMaker Partner AI App.</p>
    pub auth_type: ::std::option::Option<crate::types::PartnerAppAuthType>,
    /// <p>When set to <code>TRUE</code>, the SageMaker Partner AI App sets the Amazon Web Services IAM session name or the authenticated IAM user as the identity of the SageMaker Partner AI App user.</p>
    pub enable_iam_session_based_identity: ::std::option::Option<bool>,
    /// <p>This is an error field object that contains the error code and the reason for an operation failure.</p>
    pub error: ::std::option::Option<crate::types::ErrorInfo>,
    _request_id: Option<String>,
}
impl DescribePartnerAppOutput {
    /// <p>The ARN of the SageMaker Partner AI App that was described.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the SageMaker Partner AI App.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of SageMaker Partner AI App. Must be one of the following: <code>lakera-guard</code>, <code>comet</code>, <code>deepchecks-llm-evaluation</code>, or <code>fiddler</code>.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::PartnerAppType> {
        self.r#type.as_ref()
    }
    /// <p>The status of the SageMaker Partner AI App.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::PartnerAppStatus> {
        self.status.as_ref()
    }
    /// <p>The time that the SageMaker Partner AI App was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The time that the SageMaker Partner AI App was last modified.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The ARN of the IAM role associated with the SageMaker Partner AI App.</p>
    pub fn execution_role_arn(&self) -> ::std::option::Option<&str> {
        self.execution_role_arn.as_deref()
    }
    /// <p>The Amazon Web Services KMS customer managed key used to encrypt the data at rest associated with SageMaker Partner AI Apps.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The URL of the SageMaker Partner AI App that the Application SDK uses to support in-app calls for the user.</p>
    pub fn base_url(&self) -> ::std::option::Option<&str> {
        self.base_url.as_deref()
    }
    /// <p>Maintenance configuration settings for the SageMaker Partner AI App.</p>
    pub fn maintenance_config(&self) -> ::std::option::Option<&crate::types::PartnerAppMaintenanceConfig> {
        self.maintenance_config.as_ref()
    }
    /// <p>The instance type and size of the cluster attached to the SageMaker Partner AI App.</p>
    pub fn tier(&self) -> ::std::option::Option<&str> {
        self.tier.as_deref()
    }
    /// <p>The version of the SageMaker Partner AI App.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>Configuration settings for the SageMaker Partner AI App.</p>
    pub fn application_config(&self) -> ::std::option::Option<&crate::types::PartnerAppConfig> {
        self.application_config.as_ref()
    }
    /// <p>The authorization type that users use to access the SageMaker Partner AI App.</p>
    pub fn auth_type(&self) -> ::std::option::Option<&crate::types::PartnerAppAuthType> {
        self.auth_type.as_ref()
    }
    /// <p>When set to <code>TRUE</code>, the SageMaker Partner AI App sets the Amazon Web Services IAM session name or the authenticated IAM user as the identity of the SageMaker Partner AI App user.</p>
    pub fn enable_iam_session_based_identity(&self) -> ::std::option::Option<bool> {
        self.enable_iam_session_based_identity
    }
    /// <p>This is an error field object that contains the error code and the reason for an operation failure.</p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::ErrorInfo> {
        self.error.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribePartnerAppOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribePartnerAppOutput {
    /// Creates a new builder-style object to manufacture [`DescribePartnerAppOutput`](crate::operation::describe_partner_app::DescribePartnerAppOutput).
    pub fn builder() -> crate::operation::describe_partner_app::builders::DescribePartnerAppOutputBuilder {
        crate::operation::describe_partner_app::builders::DescribePartnerAppOutputBuilder::default()
    }
}

/// A builder for [`DescribePartnerAppOutput`](crate::operation::describe_partner_app::DescribePartnerAppOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribePartnerAppOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::PartnerAppType>,
    pub(crate) status: ::std::option::Option<crate::types::PartnerAppStatus>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) execution_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) base_url: ::std::option::Option<::std::string::String>,
    pub(crate) maintenance_config: ::std::option::Option<crate::types::PartnerAppMaintenanceConfig>,
    pub(crate) tier: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) application_config: ::std::option::Option<crate::types::PartnerAppConfig>,
    pub(crate) auth_type: ::std::option::Option<crate::types::PartnerAppAuthType>,
    pub(crate) enable_iam_session_based_identity: ::std::option::Option<bool>,
    pub(crate) error: ::std::option::Option<crate::types::ErrorInfo>,
    _request_id: Option<String>,
}
impl DescribePartnerAppOutputBuilder {
    /// <p>The ARN of the SageMaker Partner AI App that was described.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the SageMaker Partner AI App that was described.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the SageMaker Partner AI App that was described.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the SageMaker Partner AI App.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the SageMaker Partner AI App.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the SageMaker Partner AI App.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of SageMaker Partner AI App. Must be one of the following: <code>lakera-guard</code>, <code>comet</code>, <code>deepchecks-llm-evaluation</code>, or <code>fiddler</code>.</p>
    pub fn r#type(mut self, input: crate::types::PartnerAppType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of SageMaker Partner AI App. Must be one of the following: <code>lakera-guard</code>, <code>comet</code>, <code>deepchecks-llm-evaluation</code>, or <code>fiddler</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::PartnerAppType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of SageMaker Partner AI App. Must be one of the following: <code>lakera-guard</code>, <code>comet</code>, <code>deepchecks-llm-evaluation</code>, or <code>fiddler</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::PartnerAppType> {
        &self.r#type
    }
    /// <p>The status of the SageMaker Partner AI App.</p>
    pub fn status(mut self, input: crate::types::PartnerAppStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the SageMaker Partner AI App.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::PartnerAppStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the SageMaker Partner AI App.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::PartnerAppStatus> {
        &self.status
    }
    /// <p>The time that the SageMaker Partner AI App was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the SageMaker Partner AI App was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time that the SageMaker Partner AI App was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The time that the SageMaker Partner AI App was last modified.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the SageMaker Partner AI App was last modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The time that the SageMaker Partner AI App was last modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The ARN of the IAM role associated with the SageMaker Partner AI App.</p>
    pub fn execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role associated with the SageMaker Partner AI App.</p>
    pub fn set_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role_arn = input;
        self
    }
    /// <p>The ARN of the IAM role associated with the SageMaker Partner AI App.</p>
    pub fn get_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role_arn
    }
    /// <p>The Amazon Web Services KMS customer managed key used to encrypt the data at rest associated with SageMaker Partner AI Apps.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services KMS customer managed key used to encrypt the data at rest associated with SageMaker Partner AI Apps.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The Amazon Web Services KMS customer managed key used to encrypt the data at rest associated with SageMaker Partner AI Apps.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// <p>The URL of the SageMaker Partner AI App that the Application SDK uses to support in-app calls for the user.</p>
    pub fn base_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.base_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of the SageMaker Partner AI App that the Application SDK uses to support in-app calls for the user.</p>
    pub fn set_base_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.base_url = input;
        self
    }
    /// <p>The URL of the SageMaker Partner AI App that the Application SDK uses to support in-app calls for the user.</p>
    pub fn get_base_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.base_url
    }
    /// <p>Maintenance configuration settings for the SageMaker Partner AI App.</p>
    pub fn maintenance_config(mut self, input: crate::types::PartnerAppMaintenanceConfig) -> Self {
        self.maintenance_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maintenance configuration settings for the SageMaker Partner AI App.</p>
    pub fn set_maintenance_config(mut self, input: ::std::option::Option<crate::types::PartnerAppMaintenanceConfig>) -> Self {
        self.maintenance_config = input;
        self
    }
    /// <p>Maintenance configuration settings for the SageMaker Partner AI App.</p>
    pub fn get_maintenance_config(&self) -> &::std::option::Option<crate::types::PartnerAppMaintenanceConfig> {
        &self.maintenance_config
    }
    /// <p>The instance type and size of the cluster attached to the SageMaker Partner AI App.</p>
    pub fn tier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance type and size of the cluster attached to the SageMaker Partner AI App.</p>
    pub fn set_tier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tier = input;
        self
    }
    /// <p>The instance type and size of the cluster attached to the SageMaker Partner AI App.</p>
    pub fn get_tier(&self) -> &::std::option::Option<::std::string::String> {
        &self.tier
    }
    /// <p>The version of the SageMaker Partner AI App.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the SageMaker Partner AI App.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version of the SageMaker Partner AI App.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>Configuration settings for the SageMaker Partner AI App.</p>
    pub fn application_config(mut self, input: crate::types::PartnerAppConfig) -> Self {
        self.application_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration settings for the SageMaker Partner AI App.</p>
    pub fn set_application_config(mut self, input: ::std::option::Option<crate::types::PartnerAppConfig>) -> Self {
        self.application_config = input;
        self
    }
    /// <p>Configuration settings for the SageMaker Partner AI App.</p>
    pub fn get_application_config(&self) -> &::std::option::Option<crate::types::PartnerAppConfig> {
        &self.application_config
    }
    /// <p>The authorization type that users use to access the SageMaker Partner AI App.</p>
    pub fn auth_type(mut self, input: crate::types::PartnerAppAuthType) -> Self {
        self.auth_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authorization type that users use to access the SageMaker Partner AI App.</p>
    pub fn set_auth_type(mut self, input: ::std::option::Option<crate::types::PartnerAppAuthType>) -> Self {
        self.auth_type = input;
        self
    }
    /// <p>The authorization type that users use to access the SageMaker Partner AI App.</p>
    pub fn get_auth_type(&self) -> &::std::option::Option<crate::types::PartnerAppAuthType> {
        &self.auth_type
    }
    /// <p>When set to <code>TRUE</code>, the SageMaker Partner AI App sets the Amazon Web Services IAM session name or the authenticated IAM user as the identity of the SageMaker Partner AI App user.</p>
    pub fn enable_iam_session_based_identity(mut self, input: bool) -> Self {
        self.enable_iam_session_based_identity = ::std::option::Option::Some(input);
        self
    }
    /// <p>When set to <code>TRUE</code>, the SageMaker Partner AI App sets the Amazon Web Services IAM session name or the authenticated IAM user as the identity of the SageMaker Partner AI App user.</p>
    pub fn set_enable_iam_session_based_identity(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_iam_session_based_identity = input;
        self
    }
    /// <p>When set to <code>TRUE</code>, the SageMaker Partner AI App sets the Amazon Web Services IAM session name or the authenticated IAM user as the identity of the SageMaker Partner AI App user.</p>
    pub fn get_enable_iam_session_based_identity(&self) -> &::std::option::Option<bool> {
        &self.enable_iam_session_based_identity
    }
    /// <p>This is an error field object that contains the error code and the reason for an operation failure.</p>
    pub fn error(mut self, input: crate::types::ErrorInfo) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>This is an error field object that contains the error code and the reason for an operation failure.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::ErrorInfo>) -> Self {
        self.error = input;
        self
    }
    /// <p>This is an error field object that contains the error code and the reason for an operation failure.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::ErrorInfo> {
        &self.error
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribePartnerAppOutput`](crate::operation::describe_partner_app::DescribePartnerAppOutput).
    pub fn build(self) -> crate::operation::describe_partner_app::DescribePartnerAppOutput {
        crate::operation::describe_partner_app::DescribePartnerAppOutput {
            arn: self.arn,
            name: self.name,
            r#type: self.r#type,
            status: self.status,
            creation_time: self.creation_time,
            last_modified_time: self.last_modified_time,
            execution_role_arn: self.execution_role_arn,
            kms_key_id: self.kms_key_id,
            base_url: self.base_url,
            maintenance_config: self.maintenance_config,
            tier: self.tier,
            version: self.version,
            application_config: self.application_config,
            auth_type: self.auth_type,
            enable_iam_session_based_identity: self.enable_iam_session_based_identity,
            error: self.error,
            _request_id: self._request_id,
        }
    }
}
