// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateClusterSchedulerConfigInput {
    /// <p>Name for the cluster policy.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>ARN of the cluster.</p>
    pub cluster_arn: ::std::option::Option<::std::string::String>,
    /// <p>Configuration about the monitoring schedule.</p>
    pub scheduler_config: ::std::option::Option<crate::types::SchedulerConfig>,
    /// <p>Description of the cluster policy.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Tags of the cluster policy.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateClusterSchedulerConfigInput {
    /// <p>Name for the cluster policy.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>ARN of the cluster.</p>
    pub fn cluster_arn(&self) -> ::std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>Configuration about the monitoring schedule.</p>
    pub fn scheduler_config(&self) -> ::std::option::Option<&crate::types::SchedulerConfig> {
        self.scheduler_config.as_ref()
    }
    /// <p>Description of the cluster policy.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Tags of the cluster policy.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateClusterSchedulerConfigInput {
    /// Creates a new builder-style object to manufacture [`CreateClusterSchedulerConfigInput`](crate::operation::create_cluster_scheduler_config::CreateClusterSchedulerConfigInput).
    pub fn builder() -> crate::operation::create_cluster_scheduler_config::builders::CreateClusterSchedulerConfigInputBuilder {
        crate::operation::create_cluster_scheduler_config::builders::CreateClusterSchedulerConfigInputBuilder::default()
    }
}

/// A builder for [`CreateClusterSchedulerConfigInput`](crate::operation::create_cluster_scheduler_config::CreateClusterSchedulerConfigInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateClusterSchedulerConfigInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_arn: ::std::option::Option<::std::string::String>,
    pub(crate) scheduler_config: ::std::option::Option<crate::types::SchedulerConfig>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateClusterSchedulerConfigInputBuilder {
    /// <p>Name for the cluster policy.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name for the cluster policy.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name for the cluster policy.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>ARN of the cluster.</p>
    /// This field is required.
    pub fn cluster_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the cluster.</p>
    pub fn set_cluster_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_arn = input;
        self
    }
    /// <p>ARN of the cluster.</p>
    pub fn get_cluster_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_arn
    }
    /// <p>Configuration about the monitoring schedule.</p>
    /// This field is required.
    pub fn scheduler_config(mut self, input: crate::types::SchedulerConfig) -> Self {
        self.scheduler_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration about the monitoring schedule.</p>
    pub fn set_scheduler_config(mut self, input: ::std::option::Option<crate::types::SchedulerConfig>) -> Self {
        self.scheduler_config = input;
        self
    }
    /// <p>Configuration about the monitoring schedule.</p>
    pub fn get_scheduler_config(&self) -> &::std::option::Option<crate::types::SchedulerConfig> {
        &self.scheduler_config
    }
    /// <p>Description of the cluster policy.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Description of the cluster policy.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Description of the cluster policy.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags of the cluster policy.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Tags of the cluster policy.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Tags of the cluster policy.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateClusterSchedulerConfigInput`](crate::operation::create_cluster_scheduler_config::CreateClusterSchedulerConfigInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_cluster_scheduler_config::CreateClusterSchedulerConfigInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_cluster_scheduler_config::CreateClusterSchedulerConfigInput {
            name: self.name,
            cluster_arn: self.cluster_arn,
            scheduler_config: self.scheduler_config,
            description: self.description,
            tags: self.tags,
        })
    }
}
