// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreatePartnerAppInput {
    /// <p>The name to give the SageMaker Partner AI App.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The type of SageMaker Partner AI App to create. Must be one of the following: <code>lakera-guard</code>, <code>comet</code>, <code>deepchecks-llm-evaluation</code>, or <code>fiddler</code>.</p>
    pub r#type: ::std::option::Option<crate::types::PartnerAppType>,
    /// <p>The ARN of the IAM role that the partner application uses.</p>
    pub execution_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>SageMaker Partner AI Apps uses Amazon Web Services KMS to encrypt data at rest using an Amazon Web Services managed key by default. For more control, specify a customer managed key.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>Maintenance configuration settings for the SageMaker Partner AI App.</p>
    pub maintenance_config: ::std::option::Option<crate::types::PartnerAppMaintenanceConfig>,
    /// <p>Indicates the instance type and size of the cluster attached to the SageMaker Partner AI App.</p>
    pub tier: ::std::option::Option<::std::string::String>,
    /// <p>Configuration settings for the SageMaker Partner AI App.</p>
    pub application_config: ::std::option::Option<crate::types::PartnerAppConfig>,
    /// <p>The authorization type that users use to access the SageMaker Partner AI App.</p>
    pub auth_type: ::std::option::Option<crate::types::PartnerAppAuthType>,
    /// <p>When set to <code>TRUE</code>, the SageMaker Partner AI App sets the Amazon Web Services IAM session name or the authenticated IAM user as the identity of the SageMaker Partner AI App user.</p>
    pub enable_iam_session_based_identity: ::std::option::Option<bool>,
    /// <p>A unique token that guarantees that the call to this API is idempotent.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>Each tag consists of a key and an optional value. Tag keys must be unique per resource.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreatePartnerAppInput {
    /// <p>The name to give the SageMaker Partner AI App.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of SageMaker Partner AI App to create. Must be one of the following: <code>lakera-guard</code>, <code>comet</code>, <code>deepchecks-llm-evaluation</code>, or <code>fiddler</code>.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::PartnerAppType> {
        self.r#type.as_ref()
    }
    /// <p>The ARN of the IAM role that the partner application uses.</p>
    pub fn execution_role_arn(&self) -> ::std::option::Option<&str> {
        self.execution_role_arn.as_deref()
    }
    /// <p>SageMaker Partner AI Apps uses Amazon Web Services KMS to encrypt data at rest using an Amazon Web Services managed key by default. For more control, specify a customer managed key.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>Maintenance configuration settings for the SageMaker Partner AI App.</p>
    pub fn maintenance_config(&self) -> ::std::option::Option<&crate::types::PartnerAppMaintenanceConfig> {
        self.maintenance_config.as_ref()
    }
    /// <p>Indicates the instance type and size of the cluster attached to the SageMaker Partner AI App.</p>
    pub fn tier(&self) -> ::std::option::Option<&str> {
        self.tier.as_deref()
    }
    /// <p>Configuration settings for the SageMaker Partner AI App.</p>
    pub fn application_config(&self) -> ::std::option::Option<&crate::types::PartnerAppConfig> {
        self.application_config.as_ref()
    }
    /// <p>The authorization type that users use to access the SageMaker Partner AI App.</p>
    pub fn auth_type(&self) -> ::std::option::Option<&crate::types::PartnerAppAuthType> {
        self.auth_type.as_ref()
    }
    /// <p>When set to <code>TRUE</code>, the SageMaker Partner AI App sets the Amazon Web Services IAM session name or the authenticated IAM user as the identity of the SageMaker Partner AI App user.</p>
    pub fn enable_iam_session_based_identity(&self) -> ::std::option::Option<bool> {
        self.enable_iam_session_based_identity
    }
    /// <p>A unique token that guarantees that the call to this API is idempotent.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Each tag consists of a key and an optional value. Tag keys must be unique per resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreatePartnerAppInput {
    /// Creates a new builder-style object to manufacture [`CreatePartnerAppInput`](crate::operation::create_partner_app::CreatePartnerAppInput).
    pub fn builder() -> crate::operation::create_partner_app::builders::CreatePartnerAppInputBuilder {
        crate::operation::create_partner_app::builders::CreatePartnerAppInputBuilder::default()
    }
}

/// A builder for [`CreatePartnerAppInput`](crate::operation::create_partner_app::CreatePartnerAppInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreatePartnerAppInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::PartnerAppType>,
    pub(crate) execution_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) maintenance_config: ::std::option::Option<crate::types::PartnerAppMaintenanceConfig>,
    pub(crate) tier: ::std::option::Option<::std::string::String>,
    pub(crate) application_config: ::std::option::Option<crate::types::PartnerAppConfig>,
    pub(crate) auth_type: ::std::option::Option<crate::types::PartnerAppAuthType>,
    pub(crate) enable_iam_session_based_identity: ::std::option::Option<bool>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreatePartnerAppInputBuilder {
    /// <p>The name to give the SageMaker Partner AI App.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name to give the SageMaker Partner AI App.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name to give the SageMaker Partner AI App.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of SageMaker Partner AI App to create. Must be one of the following: <code>lakera-guard</code>, <code>comet</code>, <code>deepchecks-llm-evaluation</code>, or <code>fiddler</code>.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::PartnerAppType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of SageMaker Partner AI App to create. Must be one of the following: <code>lakera-guard</code>, <code>comet</code>, <code>deepchecks-llm-evaluation</code>, or <code>fiddler</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::PartnerAppType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of SageMaker Partner AI App to create. Must be one of the following: <code>lakera-guard</code>, <code>comet</code>, <code>deepchecks-llm-evaluation</code>, or <code>fiddler</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::PartnerAppType> {
        &self.r#type
    }
    /// <p>The ARN of the IAM role that the partner application uses.</p>
    /// This field is required.
    pub fn execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that the partner application uses.</p>
    pub fn set_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role_arn = input;
        self
    }
    /// <p>The ARN of the IAM role that the partner application uses.</p>
    pub fn get_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role_arn
    }
    /// <p>SageMaker Partner AI Apps uses Amazon Web Services KMS to encrypt data at rest using an Amazon Web Services managed key by default. For more control, specify a customer managed key.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>SageMaker Partner AI Apps uses Amazon Web Services KMS to encrypt data at rest using an Amazon Web Services managed key by default. For more control, specify a customer managed key.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>SageMaker Partner AI Apps uses Amazon Web Services KMS to encrypt data at rest using an Amazon Web Services managed key by default. For more control, specify a customer managed key.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// <p>Maintenance configuration settings for the SageMaker Partner AI App.</p>
    pub fn maintenance_config(mut self, input: crate::types::PartnerAppMaintenanceConfig) -> Self {
        self.maintenance_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maintenance configuration settings for the SageMaker Partner AI App.</p>
    pub fn set_maintenance_config(mut self, input: ::std::option::Option<crate::types::PartnerAppMaintenanceConfig>) -> Self {
        self.maintenance_config = input;
        self
    }
    /// <p>Maintenance configuration settings for the SageMaker Partner AI App.</p>
    pub fn get_maintenance_config(&self) -> &::std::option::Option<crate::types::PartnerAppMaintenanceConfig> {
        &self.maintenance_config
    }
    /// <p>Indicates the instance type and size of the cluster attached to the SageMaker Partner AI App.</p>
    /// This field is required.
    pub fn tier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates the instance type and size of the cluster attached to the SageMaker Partner AI App.</p>
    pub fn set_tier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tier = input;
        self
    }
    /// <p>Indicates the instance type and size of the cluster attached to the SageMaker Partner AI App.</p>
    pub fn get_tier(&self) -> &::std::option::Option<::std::string::String> {
        &self.tier
    }
    /// <p>Configuration settings for the SageMaker Partner AI App.</p>
    pub fn application_config(mut self, input: crate::types::PartnerAppConfig) -> Self {
        self.application_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration settings for the SageMaker Partner AI App.</p>
    pub fn set_application_config(mut self, input: ::std::option::Option<crate::types::PartnerAppConfig>) -> Self {
        self.application_config = input;
        self
    }
    /// <p>Configuration settings for the SageMaker Partner AI App.</p>
    pub fn get_application_config(&self) -> &::std::option::Option<crate::types::PartnerAppConfig> {
        &self.application_config
    }
    /// <p>The authorization type that users use to access the SageMaker Partner AI App.</p>
    /// This field is required.
    pub fn auth_type(mut self, input: crate::types::PartnerAppAuthType) -> Self {
        self.auth_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authorization type that users use to access the SageMaker Partner AI App.</p>
    pub fn set_auth_type(mut self, input: ::std::option::Option<crate::types::PartnerAppAuthType>) -> Self {
        self.auth_type = input;
        self
    }
    /// <p>The authorization type that users use to access the SageMaker Partner AI App.</p>
    pub fn get_auth_type(&self) -> &::std::option::Option<crate::types::PartnerAppAuthType> {
        &self.auth_type
    }
    /// <p>When set to <code>TRUE</code>, the SageMaker Partner AI App sets the Amazon Web Services IAM session name or the authenticated IAM user as the identity of the SageMaker Partner AI App user.</p>
    pub fn enable_iam_session_based_identity(mut self, input: bool) -> Self {
        self.enable_iam_session_based_identity = ::std::option::Option::Some(input);
        self
    }
    /// <p>When set to <code>TRUE</code>, the SageMaker Partner AI App sets the Amazon Web Services IAM session name or the authenticated IAM user as the identity of the SageMaker Partner AI App user.</p>
    pub fn set_enable_iam_session_based_identity(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_iam_session_based_identity = input;
        self
    }
    /// <p>When set to <code>TRUE</code>, the SageMaker Partner AI App sets the Amazon Web Services IAM session name or the authenticated IAM user as the identity of the SageMaker Partner AI App user.</p>
    pub fn get_enable_iam_session_based_identity(&self) -> &::std::option::Option<bool> {
        &self.enable_iam_session_based_identity
    }
    /// <p>A unique token that guarantees that the call to this API is idempotent.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique token that guarantees that the call to this API is idempotent.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique token that guarantees that the call to this API is idempotent.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Each tag consists of a key and an optional value. Tag keys must be unique per resource.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Each tag consists of a key and an optional value. Tag keys must be unique per resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Each tag consists of a key and an optional value. Tag keys must be unique per resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreatePartnerAppInput`](crate::operation::create_partner_app::CreatePartnerAppInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_partner_app::CreatePartnerAppInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_partner_app::CreatePartnerAppInput {
            name: self.name,
            r#type: self.r#type,
            execution_role_arn: self.execution_role_arn,
            kms_key_id: self.kms_key_id,
            maintenance_config: self.maintenance_config,
            tier: self.tier,
            application_config: self.application_config,
            auth_type: self.auth_type,
            enable_iam_session_based_identity: self.enable_iam_session_based_identity,
            client_token: self.client_token,
            tags: self.tags,
        })
    }
}
