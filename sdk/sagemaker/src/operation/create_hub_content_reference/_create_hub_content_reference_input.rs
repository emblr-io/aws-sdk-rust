// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateHubContentReferenceInput {
    /// <p>The name of the hub to add the hub content reference to.</p>
    pub hub_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the public hub content to reference.</p>
    pub sage_maker_public_hub_content_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the hub content to reference.</p>
    pub hub_content_name: ::std::option::Option<::std::string::String>,
    /// <p>The minimum version of the hub content to reference.</p>
    pub min_version: ::std::option::Option<::std::string::String>,
    /// <p>Any tags associated with the hub content to reference.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateHubContentReferenceInput {
    /// <p>The name of the hub to add the hub content reference to.</p>
    pub fn hub_name(&self) -> ::std::option::Option<&str> {
        self.hub_name.as_deref()
    }
    /// <p>The ARN of the public hub content to reference.</p>
    pub fn sage_maker_public_hub_content_arn(&self) -> ::std::option::Option<&str> {
        self.sage_maker_public_hub_content_arn.as_deref()
    }
    /// <p>The name of the hub content to reference.</p>
    pub fn hub_content_name(&self) -> ::std::option::Option<&str> {
        self.hub_content_name.as_deref()
    }
    /// <p>The minimum version of the hub content to reference.</p>
    pub fn min_version(&self) -> ::std::option::Option<&str> {
        self.min_version.as_deref()
    }
    /// <p>Any tags associated with the hub content to reference.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateHubContentReferenceInput {
    /// Creates a new builder-style object to manufacture [`CreateHubContentReferenceInput`](crate::operation::create_hub_content_reference::CreateHubContentReferenceInput).
    pub fn builder() -> crate::operation::create_hub_content_reference::builders::CreateHubContentReferenceInputBuilder {
        crate::operation::create_hub_content_reference::builders::CreateHubContentReferenceInputBuilder::default()
    }
}

/// A builder for [`CreateHubContentReferenceInput`](crate::operation::create_hub_content_reference::CreateHubContentReferenceInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateHubContentReferenceInputBuilder {
    pub(crate) hub_name: ::std::option::Option<::std::string::String>,
    pub(crate) sage_maker_public_hub_content_arn: ::std::option::Option<::std::string::String>,
    pub(crate) hub_content_name: ::std::option::Option<::std::string::String>,
    pub(crate) min_version: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateHubContentReferenceInputBuilder {
    /// <p>The name of the hub to add the hub content reference to.</p>
    /// This field is required.
    pub fn hub_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hub_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the hub to add the hub content reference to.</p>
    pub fn set_hub_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hub_name = input;
        self
    }
    /// <p>The name of the hub to add the hub content reference to.</p>
    pub fn get_hub_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.hub_name
    }
    /// <p>The ARN of the public hub content to reference.</p>
    /// This field is required.
    pub fn sage_maker_public_hub_content_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sage_maker_public_hub_content_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the public hub content to reference.</p>
    pub fn set_sage_maker_public_hub_content_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sage_maker_public_hub_content_arn = input;
        self
    }
    /// <p>The ARN of the public hub content to reference.</p>
    pub fn get_sage_maker_public_hub_content_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.sage_maker_public_hub_content_arn
    }
    /// <p>The name of the hub content to reference.</p>
    pub fn hub_content_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hub_content_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the hub content to reference.</p>
    pub fn set_hub_content_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hub_content_name = input;
        self
    }
    /// <p>The name of the hub content to reference.</p>
    pub fn get_hub_content_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.hub_content_name
    }
    /// <p>The minimum version of the hub content to reference.</p>
    pub fn min_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.min_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The minimum version of the hub content to reference.</p>
    pub fn set_min_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.min_version = input;
        self
    }
    /// <p>The minimum version of the hub content to reference.</p>
    pub fn get_min_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.min_version
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Any tags associated with the hub content to reference.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Any tags associated with the hub content to reference.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Any tags associated with the hub content to reference.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateHubContentReferenceInput`](crate::operation::create_hub_content_reference::CreateHubContentReferenceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_hub_content_reference::CreateHubContentReferenceInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_hub_content_reference::CreateHubContentReferenceInput {
            hub_name: self.hub_name,
            sage_maker_public_hub_content_arn: self.sage_maker_public_hub_content_arn,
            hub_content_name: self.hub_content_name,
            min_version: self.min_version,
            tags: self.tags,
        })
    }
}
