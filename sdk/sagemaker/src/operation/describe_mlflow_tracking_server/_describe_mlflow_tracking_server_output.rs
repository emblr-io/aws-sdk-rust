// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeMlflowTrackingServerOutput {
    /// <p>The ARN of the described tracking server.</p>
    pub tracking_server_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the described tracking server.</p>
    pub tracking_server_name: ::std::option::Option<::std::string::String>,
    /// <p>The S3 URI of the general purpose bucket used as the MLflow Tracking Server artifact store.</p>
    pub artifact_store_uri: ::std::option::Option<::std::string::String>,
    /// <p>The size of the described tracking server.</p>
    pub tracking_server_size: ::std::option::Option<crate::types::TrackingServerSize>,
    /// <p>The MLflow version used for the described tracking server.</p>
    pub mlflow_version: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for an IAM role in your account that the described MLflow Tracking Server uses to access the artifact store in Amazon S3.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The current creation status of the described MLflow Tracking Server.</p>
    pub tracking_server_status: ::std::option::Option<crate::types::TrackingServerStatus>,
    /// <p>The current maintenance status of the described MLflow Tracking Server.</p>
    pub tracking_server_maintenance_status: ::std::option::Option<crate::types::TrackingServerMaintenanceStatus>,
    /// <p>Whether the described MLflow Tracking Server is currently active.</p>
    pub is_active: ::std::option::Option<crate::types::IsTrackingServerActive>,
    /// <p>The URL to connect to the MLflow user interface for the described tracking server.</p>
    pub tracking_server_url: ::std::option::Option<::std::string::String>,
    /// <p>The day and time of the week when weekly maintenance occurs on the described tracking server.</p>
    pub weekly_maintenance_window_start: ::std::option::Option<::std::string::String>,
    /// <p>Whether automatic registration of new MLflow models to the SageMaker Model Registry is enabled.</p>
    pub automatic_model_registration: ::std::option::Option<bool>,
    /// <p>The timestamp of when the described MLflow Tracking Server was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub created_by: ::std::option::Option<crate::types::UserContext>,
    /// <p>The timestamp of when the described MLflow Tracking Server was last modified.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub last_modified_by: ::std::option::Option<crate::types::UserContext>,
    _request_id: Option<String>,
}
impl DescribeMlflowTrackingServerOutput {
    /// <p>The ARN of the described tracking server.</p>
    pub fn tracking_server_arn(&self) -> ::std::option::Option<&str> {
        self.tracking_server_arn.as_deref()
    }
    /// <p>The name of the described tracking server.</p>
    pub fn tracking_server_name(&self) -> ::std::option::Option<&str> {
        self.tracking_server_name.as_deref()
    }
    /// <p>The S3 URI of the general purpose bucket used as the MLflow Tracking Server artifact store.</p>
    pub fn artifact_store_uri(&self) -> ::std::option::Option<&str> {
        self.artifact_store_uri.as_deref()
    }
    /// <p>The size of the described tracking server.</p>
    pub fn tracking_server_size(&self) -> ::std::option::Option<&crate::types::TrackingServerSize> {
        self.tracking_server_size.as_ref()
    }
    /// <p>The MLflow version used for the described tracking server.</p>
    pub fn mlflow_version(&self) -> ::std::option::Option<&str> {
        self.mlflow_version.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for an IAM role in your account that the described MLflow Tracking Server uses to access the artifact store in Amazon S3.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The current creation status of the described MLflow Tracking Server.</p>
    pub fn tracking_server_status(&self) -> ::std::option::Option<&crate::types::TrackingServerStatus> {
        self.tracking_server_status.as_ref()
    }
    /// <p>The current maintenance status of the described MLflow Tracking Server.</p>
    pub fn tracking_server_maintenance_status(&self) -> ::std::option::Option<&crate::types::TrackingServerMaintenanceStatus> {
        self.tracking_server_maintenance_status.as_ref()
    }
    /// <p>Whether the described MLflow Tracking Server is currently active.</p>
    pub fn is_active(&self) -> ::std::option::Option<&crate::types::IsTrackingServerActive> {
        self.is_active.as_ref()
    }
    /// <p>The URL to connect to the MLflow user interface for the described tracking server.</p>
    pub fn tracking_server_url(&self) -> ::std::option::Option<&str> {
        self.tracking_server_url.as_deref()
    }
    /// <p>The day and time of the week when weekly maintenance occurs on the described tracking server.</p>
    pub fn weekly_maintenance_window_start(&self) -> ::std::option::Option<&str> {
        self.weekly_maintenance_window_start.as_deref()
    }
    /// <p>Whether automatic registration of new MLflow models to the SageMaker Model Registry is enabled.</p>
    pub fn automatic_model_registration(&self) -> ::std::option::Option<bool> {
        self.automatic_model_registration
    }
    /// <p>The timestamp of when the described MLflow Tracking Server was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn created_by(&self) -> ::std::option::Option<&crate::types::UserContext> {
        self.created_by.as_ref()
    }
    /// <p>The timestamp of when the described MLflow Tracking Server was last modified.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn last_modified_by(&self) -> ::std::option::Option<&crate::types::UserContext> {
        self.last_modified_by.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeMlflowTrackingServerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeMlflowTrackingServerOutput {
    /// Creates a new builder-style object to manufacture [`DescribeMlflowTrackingServerOutput`](crate::operation::describe_mlflow_tracking_server::DescribeMlflowTrackingServerOutput).
    pub fn builder() -> crate::operation::describe_mlflow_tracking_server::builders::DescribeMlflowTrackingServerOutputBuilder {
        crate::operation::describe_mlflow_tracking_server::builders::DescribeMlflowTrackingServerOutputBuilder::default()
    }
}

/// A builder for [`DescribeMlflowTrackingServerOutput`](crate::operation::describe_mlflow_tracking_server::DescribeMlflowTrackingServerOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeMlflowTrackingServerOutputBuilder {
    pub(crate) tracking_server_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tracking_server_name: ::std::option::Option<::std::string::String>,
    pub(crate) artifact_store_uri: ::std::option::Option<::std::string::String>,
    pub(crate) tracking_server_size: ::std::option::Option<crate::types::TrackingServerSize>,
    pub(crate) mlflow_version: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tracking_server_status: ::std::option::Option<crate::types::TrackingServerStatus>,
    pub(crate) tracking_server_maintenance_status: ::std::option::Option<crate::types::TrackingServerMaintenanceStatus>,
    pub(crate) is_active: ::std::option::Option<crate::types::IsTrackingServerActive>,
    pub(crate) tracking_server_url: ::std::option::Option<::std::string::String>,
    pub(crate) weekly_maintenance_window_start: ::std::option::Option<::std::string::String>,
    pub(crate) automatic_model_registration: ::std::option::Option<bool>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<crate::types::UserContext>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_by: ::std::option::Option<crate::types::UserContext>,
    _request_id: Option<String>,
}
impl DescribeMlflowTrackingServerOutputBuilder {
    /// <p>The ARN of the described tracking server.</p>
    pub fn tracking_server_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tracking_server_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the described tracking server.</p>
    pub fn set_tracking_server_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tracking_server_arn = input;
        self
    }
    /// <p>The ARN of the described tracking server.</p>
    pub fn get_tracking_server_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.tracking_server_arn
    }
    /// <p>The name of the described tracking server.</p>
    pub fn tracking_server_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tracking_server_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the described tracking server.</p>
    pub fn set_tracking_server_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tracking_server_name = input;
        self
    }
    /// <p>The name of the described tracking server.</p>
    pub fn get_tracking_server_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.tracking_server_name
    }
    /// <p>The S3 URI of the general purpose bucket used as the MLflow Tracking Server artifact store.</p>
    pub fn artifact_store_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.artifact_store_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 URI of the general purpose bucket used as the MLflow Tracking Server artifact store.</p>
    pub fn set_artifact_store_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.artifact_store_uri = input;
        self
    }
    /// <p>The S3 URI of the general purpose bucket used as the MLflow Tracking Server artifact store.</p>
    pub fn get_artifact_store_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.artifact_store_uri
    }
    /// <p>The size of the described tracking server.</p>
    pub fn tracking_server_size(mut self, input: crate::types::TrackingServerSize) -> Self {
        self.tracking_server_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the described tracking server.</p>
    pub fn set_tracking_server_size(mut self, input: ::std::option::Option<crate::types::TrackingServerSize>) -> Self {
        self.tracking_server_size = input;
        self
    }
    /// <p>The size of the described tracking server.</p>
    pub fn get_tracking_server_size(&self) -> &::std::option::Option<crate::types::TrackingServerSize> {
        &self.tracking_server_size
    }
    /// <p>The MLflow version used for the described tracking server.</p>
    pub fn mlflow_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mlflow_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The MLflow version used for the described tracking server.</p>
    pub fn set_mlflow_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mlflow_version = input;
        self
    }
    /// <p>The MLflow version used for the described tracking server.</p>
    pub fn get_mlflow_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.mlflow_version
    }
    /// <p>The Amazon Resource Name (ARN) for an IAM role in your account that the described MLflow Tracking Server uses to access the artifact store in Amazon S3.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for an IAM role in your account that the described MLflow Tracking Server uses to access the artifact store in Amazon S3.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for an IAM role in your account that the described MLflow Tracking Server uses to access the artifact store in Amazon S3.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The current creation status of the described MLflow Tracking Server.</p>
    pub fn tracking_server_status(mut self, input: crate::types::TrackingServerStatus) -> Self {
        self.tracking_server_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current creation status of the described MLflow Tracking Server.</p>
    pub fn set_tracking_server_status(mut self, input: ::std::option::Option<crate::types::TrackingServerStatus>) -> Self {
        self.tracking_server_status = input;
        self
    }
    /// <p>The current creation status of the described MLflow Tracking Server.</p>
    pub fn get_tracking_server_status(&self) -> &::std::option::Option<crate::types::TrackingServerStatus> {
        &self.tracking_server_status
    }
    /// <p>The current maintenance status of the described MLflow Tracking Server.</p>
    pub fn tracking_server_maintenance_status(mut self, input: crate::types::TrackingServerMaintenanceStatus) -> Self {
        self.tracking_server_maintenance_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current maintenance status of the described MLflow Tracking Server.</p>
    pub fn set_tracking_server_maintenance_status(mut self, input: ::std::option::Option<crate::types::TrackingServerMaintenanceStatus>) -> Self {
        self.tracking_server_maintenance_status = input;
        self
    }
    /// <p>The current maintenance status of the described MLflow Tracking Server.</p>
    pub fn get_tracking_server_maintenance_status(&self) -> &::std::option::Option<crate::types::TrackingServerMaintenanceStatus> {
        &self.tracking_server_maintenance_status
    }
    /// <p>Whether the described MLflow Tracking Server is currently active.</p>
    pub fn is_active(mut self, input: crate::types::IsTrackingServerActive) -> Self {
        self.is_active = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the described MLflow Tracking Server is currently active.</p>
    pub fn set_is_active(mut self, input: ::std::option::Option<crate::types::IsTrackingServerActive>) -> Self {
        self.is_active = input;
        self
    }
    /// <p>Whether the described MLflow Tracking Server is currently active.</p>
    pub fn get_is_active(&self) -> &::std::option::Option<crate::types::IsTrackingServerActive> {
        &self.is_active
    }
    /// <p>The URL to connect to the MLflow user interface for the described tracking server.</p>
    pub fn tracking_server_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tracking_server_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL to connect to the MLflow user interface for the described tracking server.</p>
    pub fn set_tracking_server_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tracking_server_url = input;
        self
    }
    /// <p>The URL to connect to the MLflow user interface for the described tracking server.</p>
    pub fn get_tracking_server_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.tracking_server_url
    }
    /// <p>The day and time of the week when weekly maintenance occurs on the described tracking server.</p>
    pub fn weekly_maintenance_window_start(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.weekly_maintenance_window_start = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The day and time of the week when weekly maintenance occurs on the described tracking server.</p>
    pub fn set_weekly_maintenance_window_start(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.weekly_maintenance_window_start = input;
        self
    }
    /// <p>The day and time of the week when weekly maintenance occurs on the described tracking server.</p>
    pub fn get_weekly_maintenance_window_start(&self) -> &::std::option::Option<::std::string::String> {
        &self.weekly_maintenance_window_start
    }
    /// <p>Whether automatic registration of new MLflow models to the SageMaker Model Registry is enabled.</p>
    pub fn automatic_model_registration(mut self, input: bool) -> Self {
        self.automatic_model_registration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether automatic registration of new MLflow models to the SageMaker Model Registry is enabled.</p>
    pub fn set_automatic_model_registration(mut self, input: ::std::option::Option<bool>) -> Self {
        self.automatic_model_registration = input;
        self
    }
    /// <p>Whether automatic registration of new MLflow models to the SageMaker Model Registry is enabled.</p>
    pub fn get_automatic_model_registration(&self) -> &::std::option::Option<bool> {
        &self.automatic_model_registration
    }
    /// <p>The timestamp of when the described MLflow Tracking Server was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the described MLflow Tracking Server was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The timestamp of when the described MLflow Tracking Server was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn created_by(mut self, input: crate::types::UserContext) -> Self {
        self.created_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<crate::types::UserContext>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<crate::types::UserContext> {
        &self.created_by
    }
    /// <p>The timestamp of when the described MLflow Tracking Server was last modified.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the described MLflow Tracking Server was last modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The timestamp of when the described MLflow Tracking Server was last modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn last_modified_by(mut self, input: crate::types::UserContext) -> Self {
        self.last_modified_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn set_last_modified_by(mut self, input: ::std::option::Option<crate::types::UserContext>) -> Self {
        self.last_modified_by = input;
        self
    }
    /// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
    pub fn get_last_modified_by(&self) -> &::std::option::Option<crate::types::UserContext> {
        &self.last_modified_by
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeMlflowTrackingServerOutput`](crate::operation::describe_mlflow_tracking_server::DescribeMlflowTrackingServerOutput).
    pub fn build(self) -> crate::operation::describe_mlflow_tracking_server::DescribeMlflowTrackingServerOutput {
        crate::operation::describe_mlflow_tracking_server::DescribeMlflowTrackingServerOutput {
            tracking_server_arn: self.tracking_server_arn,
            tracking_server_name: self.tracking_server_name,
            artifact_store_uri: self.artifact_store_uri,
            tracking_server_size: self.tracking_server_size,
            mlflow_version: self.mlflow_version,
            role_arn: self.role_arn,
            tracking_server_status: self.tracking_server_status,
            tracking_server_maintenance_status: self.tracking_server_maintenance_status,
            is_active: self.is_active,
            tracking_server_url: self.tracking_server_url,
            weekly_maintenance_window_start: self.weekly_maintenance_window_start,
            automatic_model_registration: self.automatic_model_registration,
            creation_time: self.creation_time,
            created_by: self.created_by,
            last_modified_time: self.last_modified_time,
            last_modified_by: self.last_modified_by,
            _request_id: self._request_id,
        }
    }
}
