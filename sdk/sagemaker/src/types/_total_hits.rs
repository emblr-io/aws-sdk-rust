// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the total number of matching results and indicates how accurate that count is.</p>
/// <p>The <code>Value</code> field provides the count, which may be exact or estimated. The <code>Relation</code> field indicates whether it's an exact figure or a lower bound. This helps understand the full scope of search results, especially when dealing with large result sets.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TotalHits {
    /// <p>The total number of matching results. This value may be exact or an estimate, depending on the <code>Relation</code> field.</p>
    pub value: ::std::option::Option<i64>,
    /// <p>Indicates the relationship between the returned <code>Value</code> and the actual total number of matching results. Possible values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>EqualTo</code>: The <code>Value</code> is the exact count of matching results.</p></li>
    /// <li>
    /// <p><code>GreaterThanOrEqualTo</code>: The <code>Value</code> is a lower bound of the actual count of matching results.</p></li>
    /// </ul>
    pub relation: ::std::option::Option<crate::types::Relation>,
}
impl TotalHits {
    /// <p>The total number of matching results. This value may be exact or an estimate, depending on the <code>Relation</code> field.</p>
    pub fn value(&self) -> ::std::option::Option<i64> {
        self.value
    }
    /// <p>Indicates the relationship between the returned <code>Value</code> and the actual total number of matching results. Possible values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>EqualTo</code>: The <code>Value</code> is the exact count of matching results.</p></li>
    /// <li>
    /// <p><code>GreaterThanOrEqualTo</code>: The <code>Value</code> is a lower bound of the actual count of matching results.</p></li>
    /// </ul>
    pub fn relation(&self) -> ::std::option::Option<&crate::types::Relation> {
        self.relation.as_ref()
    }
}
impl TotalHits {
    /// Creates a new builder-style object to manufacture [`TotalHits`](crate::types::TotalHits).
    pub fn builder() -> crate::types::builders::TotalHitsBuilder {
        crate::types::builders::TotalHitsBuilder::default()
    }
}

/// A builder for [`TotalHits`](crate::types::TotalHits).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TotalHitsBuilder {
    pub(crate) value: ::std::option::Option<i64>,
    pub(crate) relation: ::std::option::Option<crate::types::Relation>,
}
impl TotalHitsBuilder {
    /// <p>The total number of matching results. This value may be exact or an estimate, depending on the <code>Relation</code> field.</p>
    pub fn value(mut self, input: i64) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of matching results. This value may be exact or an estimate, depending on the <code>Relation</code> field.</p>
    pub fn set_value(mut self, input: ::std::option::Option<i64>) -> Self {
        self.value = input;
        self
    }
    /// <p>The total number of matching results. This value may be exact or an estimate, depending on the <code>Relation</code> field.</p>
    pub fn get_value(&self) -> &::std::option::Option<i64> {
        &self.value
    }
    /// <p>Indicates the relationship between the returned <code>Value</code> and the actual total number of matching results. Possible values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>EqualTo</code>: The <code>Value</code> is the exact count of matching results.</p></li>
    /// <li>
    /// <p><code>GreaterThanOrEqualTo</code>: The <code>Value</code> is a lower bound of the actual count of matching results.</p></li>
    /// </ul>
    pub fn relation(mut self, input: crate::types::Relation) -> Self {
        self.relation = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the relationship between the returned <code>Value</code> and the actual total number of matching results. Possible values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>EqualTo</code>: The <code>Value</code> is the exact count of matching results.</p></li>
    /// <li>
    /// <p><code>GreaterThanOrEqualTo</code>: The <code>Value</code> is a lower bound of the actual count of matching results.</p></li>
    /// </ul>
    pub fn set_relation(mut self, input: ::std::option::Option<crate::types::Relation>) -> Self {
        self.relation = input;
        self
    }
    /// <p>Indicates the relationship between the returned <code>Value</code> and the actual total number of matching results. Possible values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>EqualTo</code>: The <code>Value</code> is the exact count of matching results.</p></li>
    /// <li>
    /// <p><code>GreaterThanOrEqualTo</code>: The <code>Value</code> is a lower bound of the actual count of matching results.</p></li>
    /// </ul>
    pub fn get_relation(&self) -> &::std::option::Option<crate::types::Relation> {
        &self.relation
    }
    /// Consumes the builder and constructs a [`TotalHits`](crate::types::TotalHits).
    pub fn build(self) -> crate::types::TotalHits {
        crate::types::TotalHits {
            value: self.value,
            relation: self.relation,
        }
    }
}
