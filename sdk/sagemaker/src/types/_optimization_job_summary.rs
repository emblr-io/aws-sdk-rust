// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summarizes an optimization job by providing some of its key properties.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OptimizationJobSummary {
    /// <p>The name that you assigned to the optimization job.</p>
    pub optimization_job_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the optimization job.</p>
    pub optimization_job_arn: ::std::option::Option<::std::string::String>,
    /// <p>The time when you created the optimization job.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The current status of the optimization job.</p>
    pub optimization_job_status: ::std::option::Option<crate::types::OptimizationJobStatus>,
    /// <p>The time when the optimization job started.</p>
    pub optimization_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time when the optimization job finished processing.</p>
    pub optimization_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time when the optimization job was last updated.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The type of instance that hosts the optimized model that you create with the optimization job.</p>
    pub deployment_instance_type: ::std::option::Option<crate::types::OptimizationJobDeploymentInstanceType>,
    /// <p>The optimization techniques that are applied by the optimization job.</p>
    pub optimization_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl OptimizationJobSummary {
    /// <p>The name that you assigned to the optimization job.</p>
    pub fn optimization_job_name(&self) -> ::std::option::Option<&str> {
        self.optimization_job_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the optimization job.</p>
    pub fn optimization_job_arn(&self) -> ::std::option::Option<&str> {
        self.optimization_job_arn.as_deref()
    }
    /// <p>The time when you created the optimization job.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The current status of the optimization job.</p>
    pub fn optimization_job_status(&self) -> ::std::option::Option<&crate::types::OptimizationJobStatus> {
        self.optimization_job_status.as_ref()
    }
    /// <p>The time when the optimization job started.</p>
    pub fn optimization_start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.optimization_start_time.as_ref()
    }
    /// <p>The time when the optimization job finished processing.</p>
    pub fn optimization_end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.optimization_end_time.as_ref()
    }
    /// <p>The time when the optimization job was last updated.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The type of instance that hosts the optimized model that you create with the optimization job.</p>
    pub fn deployment_instance_type(&self) -> ::std::option::Option<&crate::types::OptimizationJobDeploymentInstanceType> {
        self.deployment_instance_type.as_ref()
    }
    /// <p>The optimization techniques that are applied by the optimization job.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.optimization_types.is_none()`.
    pub fn optimization_types(&self) -> &[::std::string::String] {
        self.optimization_types.as_deref().unwrap_or_default()
    }
}
impl OptimizationJobSummary {
    /// Creates a new builder-style object to manufacture [`OptimizationJobSummary`](crate::types::OptimizationJobSummary).
    pub fn builder() -> crate::types::builders::OptimizationJobSummaryBuilder {
        crate::types::builders::OptimizationJobSummaryBuilder::default()
    }
}

/// A builder for [`OptimizationJobSummary`](crate::types::OptimizationJobSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OptimizationJobSummaryBuilder {
    pub(crate) optimization_job_name: ::std::option::Option<::std::string::String>,
    pub(crate) optimization_job_arn: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) optimization_job_status: ::std::option::Option<crate::types::OptimizationJobStatus>,
    pub(crate) optimization_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) optimization_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) deployment_instance_type: ::std::option::Option<crate::types::OptimizationJobDeploymentInstanceType>,
    pub(crate) optimization_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl OptimizationJobSummaryBuilder {
    /// <p>The name that you assigned to the optimization job.</p>
    /// This field is required.
    pub fn optimization_job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.optimization_job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name that you assigned to the optimization job.</p>
    pub fn set_optimization_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.optimization_job_name = input;
        self
    }
    /// <p>The name that you assigned to the optimization job.</p>
    pub fn get_optimization_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.optimization_job_name
    }
    /// <p>The Amazon Resource Name (ARN) of the optimization job.</p>
    /// This field is required.
    pub fn optimization_job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.optimization_job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the optimization job.</p>
    pub fn set_optimization_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.optimization_job_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the optimization job.</p>
    pub fn get_optimization_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.optimization_job_arn
    }
    /// <p>The time when you created the optimization job.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when you created the optimization job.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time when you created the optimization job.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The current status of the optimization job.</p>
    /// This field is required.
    pub fn optimization_job_status(mut self, input: crate::types::OptimizationJobStatus) -> Self {
        self.optimization_job_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the optimization job.</p>
    pub fn set_optimization_job_status(mut self, input: ::std::option::Option<crate::types::OptimizationJobStatus>) -> Self {
        self.optimization_job_status = input;
        self
    }
    /// <p>The current status of the optimization job.</p>
    pub fn get_optimization_job_status(&self) -> &::std::option::Option<crate::types::OptimizationJobStatus> {
        &self.optimization_job_status
    }
    /// <p>The time when the optimization job started.</p>
    pub fn optimization_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.optimization_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the optimization job started.</p>
    pub fn set_optimization_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.optimization_start_time = input;
        self
    }
    /// <p>The time when the optimization job started.</p>
    pub fn get_optimization_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.optimization_start_time
    }
    /// <p>The time when the optimization job finished processing.</p>
    pub fn optimization_end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.optimization_end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the optimization job finished processing.</p>
    pub fn set_optimization_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.optimization_end_time = input;
        self
    }
    /// <p>The time when the optimization job finished processing.</p>
    pub fn get_optimization_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.optimization_end_time
    }
    /// <p>The time when the optimization job was last updated.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the optimization job was last updated.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The time when the optimization job was last updated.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The type of instance that hosts the optimized model that you create with the optimization job.</p>
    /// This field is required.
    pub fn deployment_instance_type(mut self, input: crate::types::OptimizationJobDeploymentInstanceType) -> Self {
        self.deployment_instance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of instance that hosts the optimized model that you create with the optimization job.</p>
    pub fn set_deployment_instance_type(mut self, input: ::std::option::Option<crate::types::OptimizationJobDeploymentInstanceType>) -> Self {
        self.deployment_instance_type = input;
        self
    }
    /// <p>The type of instance that hosts the optimized model that you create with the optimization job.</p>
    pub fn get_deployment_instance_type(&self) -> &::std::option::Option<crate::types::OptimizationJobDeploymentInstanceType> {
        &self.deployment_instance_type
    }
    /// Appends an item to `optimization_types`.
    ///
    /// To override the contents of this collection use [`set_optimization_types`](Self::set_optimization_types).
    ///
    /// <p>The optimization techniques that are applied by the optimization job.</p>
    pub fn optimization_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.optimization_types.unwrap_or_default();
        v.push(input.into());
        self.optimization_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The optimization techniques that are applied by the optimization job.</p>
    pub fn set_optimization_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.optimization_types = input;
        self
    }
    /// <p>The optimization techniques that are applied by the optimization job.</p>
    pub fn get_optimization_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.optimization_types
    }
    /// Consumes the builder and constructs a [`OptimizationJobSummary`](crate::types::OptimizationJobSummary).
    pub fn build(self) -> crate::types::OptimizationJobSummary {
        crate::types::OptimizationJobSummary {
            optimization_job_name: self.optimization_job_name,
            optimization_job_arn: self.optimization_job_arn,
            creation_time: self.creation_time,
            optimization_job_status: self.optimization_job_status,
            optimization_start_time: self.optimization_start_time,
            optimization_end_time: self.optimization_end_time,
            last_modified_time: self.last_modified_time,
            deployment_instance_type: self.deployment_instance_type,
            optimization_types: self.optimization_types,
        }
    }
}
