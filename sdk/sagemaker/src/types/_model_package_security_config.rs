// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An optional Key Management Service key to encrypt, decrypt, and re-encrypt model package information for regulated workloads with highly sensitive data.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModelPackageSecurityConfig {
    /// <p>The KMS Key ID (<code>KMSKeyId</code>) used for encryption of model package information.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
}
impl ModelPackageSecurityConfig {
    /// <p>The KMS Key ID (<code>KMSKeyId</code>) used for encryption of model package information.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
}
impl ModelPackageSecurityConfig {
    /// Creates a new builder-style object to manufacture [`ModelPackageSecurityConfig`](crate::types::ModelPackageSecurityConfig).
    pub fn builder() -> crate::types::builders::ModelPackageSecurityConfigBuilder {
        crate::types::builders::ModelPackageSecurityConfigBuilder::default()
    }
}

/// A builder for [`ModelPackageSecurityConfig`](crate::types::ModelPackageSecurityConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ModelPackageSecurityConfigBuilder {
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
}
impl ModelPackageSecurityConfigBuilder {
    /// <p>The KMS Key ID (<code>KMSKeyId</code>) used for encryption of model package information.</p>
    /// This field is required.
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The KMS Key ID (<code>KMSKeyId</code>) used for encryption of model package information.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The KMS Key ID (<code>KMSKeyId</code>) used for encryption of model package information.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// Consumes the builder and constructs a [`ModelPackageSecurityConfig`](crate::types::ModelPackageSecurityConfig).
    pub fn build(self) -> crate::types::ModelPackageSecurityConfig {
        crate::types::ModelPackageSecurityConfig { kms_key_id: self.kms_key_id }
    }
}
