// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A collection of space settings.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SpaceSettings {
    /// <p>The JupyterServer app settings.</p>
    pub jupyter_server_app_settings: ::std::option::Option<crate::types::JupyterServerAppSettings>,
    /// <p>The KernelGateway app settings.</p>
    pub kernel_gateway_app_settings: ::std::option::Option<crate::types::KernelGatewayAppSettings>,
    /// <p>The Code Editor application settings.</p>
    pub code_editor_app_settings: ::std::option::Option<crate::types::SpaceCodeEditorAppSettings>,
    /// <p>The settings for the JupyterLab application.</p>
    pub jupyter_lab_app_settings: ::std::option::Option<crate::types::SpaceJupyterLabAppSettings>,
    /// <p>The type of app created within the space.</p>
    /// <p>If using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateSpace.html"> UpdateSpace</a> API, you can't change the app type of your space by specifying a different value for this field.</p>
    pub app_type: ::std::option::Option<crate::types::AppType>,
    /// <p>The storage settings for a space.</p>
    pub space_storage_settings: ::std::option::Option<crate::types::SpaceStorageSettings>,
    /// <p>If you enable this option, SageMaker AI creates the following resources on your behalf when you create the space:</p>
    /// <ul>
    /// <li>
    /// <p>The user profile that possesses the space.</p></li>
    /// <li>
    /// <p>The app that the space contains.</p></li>
    /// </ul>
    pub space_managed_resources: ::std::option::Option<crate::types::FeatureStatus>,
    /// <p>A file system, created by you, that you assign to a space for an Amazon SageMaker AI Domain. Permitted users can access this file system in Amazon SageMaker AI Studio.</p>
    pub custom_file_systems: ::std::option::Option<::std::vec::Vec<crate::types::CustomFileSystem>>,
    /// <p>A setting that enables or disables remote access for a SageMaker space. When enabled, this allows you to connect to the remote space from your local IDE.</p>
    pub remote_access: ::std::option::Option<crate::types::FeatureStatus>,
}
impl SpaceSettings {
    /// <p>The JupyterServer app settings.</p>
    pub fn jupyter_server_app_settings(&self) -> ::std::option::Option<&crate::types::JupyterServerAppSettings> {
        self.jupyter_server_app_settings.as_ref()
    }
    /// <p>The KernelGateway app settings.</p>
    pub fn kernel_gateway_app_settings(&self) -> ::std::option::Option<&crate::types::KernelGatewayAppSettings> {
        self.kernel_gateway_app_settings.as_ref()
    }
    /// <p>The Code Editor application settings.</p>
    pub fn code_editor_app_settings(&self) -> ::std::option::Option<&crate::types::SpaceCodeEditorAppSettings> {
        self.code_editor_app_settings.as_ref()
    }
    /// <p>The settings for the JupyterLab application.</p>
    pub fn jupyter_lab_app_settings(&self) -> ::std::option::Option<&crate::types::SpaceJupyterLabAppSettings> {
        self.jupyter_lab_app_settings.as_ref()
    }
    /// <p>The type of app created within the space.</p>
    /// <p>If using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateSpace.html"> UpdateSpace</a> API, you can't change the app type of your space by specifying a different value for this field.</p>
    pub fn app_type(&self) -> ::std::option::Option<&crate::types::AppType> {
        self.app_type.as_ref()
    }
    /// <p>The storage settings for a space.</p>
    pub fn space_storage_settings(&self) -> ::std::option::Option<&crate::types::SpaceStorageSettings> {
        self.space_storage_settings.as_ref()
    }
    /// <p>If you enable this option, SageMaker AI creates the following resources on your behalf when you create the space:</p>
    /// <ul>
    /// <li>
    /// <p>The user profile that possesses the space.</p></li>
    /// <li>
    /// <p>The app that the space contains.</p></li>
    /// </ul>
    pub fn space_managed_resources(&self) -> ::std::option::Option<&crate::types::FeatureStatus> {
        self.space_managed_resources.as_ref()
    }
    /// <p>A file system, created by you, that you assign to a space for an Amazon SageMaker AI Domain. Permitted users can access this file system in Amazon SageMaker AI Studio.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.custom_file_systems.is_none()`.
    pub fn custom_file_systems(&self) -> &[crate::types::CustomFileSystem] {
        self.custom_file_systems.as_deref().unwrap_or_default()
    }
    /// <p>A setting that enables or disables remote access for a SageMaker space. When enabled, this allows you to connect to the remote space from your local IDE.</p>
    pub fn remote_access(&self) -> ::std::option::Option<&crate::types::FeatureStatus> {
        self.remote_access.as_ref()
    }
}
impl SpaceSettings {
    /// Creates a new builder-style object to manufacture [`SpaceSettings`](crate::types::SpaceSettings).
    pub fn builder() -> crate::types::builders::SpaceSettingsBuilder {
        crate::types::builders::SpaceSettingsBuilder::default()
    }
}

/// A builder for [`SpaceSettings`](crate::types::SpaceSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SpaceSettingsBuilder {
    pub(crate) jupyter_server_app_settings: ::std::option::Option<crate::types::JupyterServerAppSettings>,
    pub(crate) kernel_gateway_app_settings: ::std::option::Option<crate::types::KernelGatewayAppSettings>,
    pub(crate) code_editor_app_settings: ::std::option::Option<crate::types::SpaceCodeEditorAppSettings>,
    pub(crate) jupyter_lab_app_settings: ::std::option::Option<crate::types::SpaceJupyterLabAppSettings>,
    pub(crate) app_type: ::std::option::Option<crate::types::AppType>,
    pub(crate) space_storage_settings: ::std::option::Option<crate::types::SpaceStorageSettings>,
    pub(crate) space_managed_resources: ::std::option::Option<crate::types::FeatureStatus>,
    pub(crate) custom_file_systems: ::std::option::Option<::std::vec::Vec<crate::types::CustomFileSystem>>,
    pub(crate) remote_access: ::std::option::Option<crate::types::FeatureStatus>,
}
impl SpaceSettingsBuilder {
    /// <p>The JupyterServer app settings.</p>
    pub fn jupyter_server_app_settings(mut self, input: crate::types::JupyterServerAppSettings) -> Self {
        self.jupyter_server_app_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The JupyterServer app settings.</p>
    pub fn set_jupyter_server_app_settings(mut self, input: ::std::option::Option<crate::types::JupyterServerAppSettings>) -> Self {
        self.jupyter_server_app_settings = input;
        self
    }
    /// <p>The JupyterServer app settings.</p>
    pub fn get_jupyter_server_app_settings(&self) -> &::std::option::Option<crate::types::JupyterServerAppSettings> {
        &self.jupyter_server_app_settings
    }
    /// <p>The KernelGateway app settings.</p>
    pub fn kernel_gateway_app_settings(mut self, input: crate::types::KernelGatewayAppSettings) -> Self {
        self.kernel_gateway_app_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The KernelGateway app settings.</p>
    pub fn set_kernel_gateway_app_settings(mut self, input: ::std::option::Option<crate::types::KernelGatewayAppSettings>) -> Self {
        self.kernel_gateway_app_settings = input;
        self
    }
    /// <p>The KernelGateway app settings.</p>
    pub fn get_kernel_gateway_app_settings(&self) -> &::std::option::Option<crate::types::KernelGatewayAppSettings> {
        &self.kernel_gateway_app_settings
    }
    /// <p>The Code Editor application settings.</p>
    pub fn code_editor_app_settings(mut self, input: crate::types::SpaceCodeEditorAppSettings) -> Self {
        self.code_editor_app_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Code Editor application settings.</p>
    pub fn set_code_editor_app_settings(mut self, input: ::std::option::Option<crate::types::SpaceCodeEditorAppSettings>) -> Self {
        self.code_editor_app_settings = input;
        self
    }
    /// <p>The Code Editor application settings.</p>
    pub fn get_code_editor_app_settings(&self) -> &::std::option::Option<crate::types::SpaceCodeEditorAppSettings> {
        &self.code_editor_app_settings
    }
    /// <p>The settings for the JupyterLab application.</p>
    pub fn jupyter_lab_app_settings(mut self, input: crate::types::SpaceJupyterLabAppSettings) -> Self {
        self.jupyter_lab_app_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The settings for the JupyterLab application.</p>
    pub fn set_jupyter_lab_app_settings(mut self, input: ::std::option::Option<crate::types::SpaceJupyterLabAppSettings>) -> Self {
        self.jupyter_lab_app_settings = input;
        self
    }
    /// <p>The settings for the JupyterLab application.</p>
    pub fn get_jupyter_lab_app_settings(&self) -> &::std::option::Option<crate::types::SpaceJupyterLabAppSettings> {
        &self.jupyter_lab_app_settings
    }
    /// <p>The type of app created within the space.</p>
    /// <p>If using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateSpace.html"> UpdateSpace</a> API, you can't change the app type of your space by specifying a different value for this field.</p>
    pub fn app_type(mut self, input: crate::types::AppType) -> Self {
        self.app_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of app created within the space.</p>
    /// <p>If using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateSpace.html"> UpdateSpace</a> API, you can't change the app type of your space by specifying a different value for this field.</p>
    pub fn set_app_type(mut self, input: ::std::option::Option<crate::types::AppType>) -> Self {
        self.app_type = input;
        self
    }
    /// <p>The type of app created within the space.</p>
    /// <p>If using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateSpace.html"> UpdateSpace</a> API, you can't change the app type of your space by specifying a different value for this field.</p>
    pub fn get_app_type(&self) -> &::std::option::Option<crate::types::AppType> {
        &self.app_type
    }
    /// <p>The storage settings for a space.</p>
    pub fn space_storage_settings(mut self, input: crate::types::SpaceStorageSettings) -> Self {
        self.space_storage_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The storage settings for a space.</p>
    pub fn set_space_storage_settings(mut self, input: ::std::option::Option<crate::types::SpaceStorageSettings>) -> Self {
        self.space_storage_settings = input;
        self
    }
    /// <p>The storage settings for a space.</p>
    pub fn get_space_storage_settings(&self) -> &::std::option::Option<crate::types::SpaceStorageSettings> {
        &self.space_storage_settings
    }
    /// <p>If you enable this option, SageMaker AI creates the following resources on your behalf when you create the space:</p>
    /// <ul>
    /// <li>
    /// <p>The user profile that possesses the space.</p></li>
    /// <li>
    /// <p>The app that the space contains.</p></li>
    /// </ul>
    pub fn space_managed_resources(mut self, input: crate::types::FeatureStatus) -> Self {
        self.space_managed_resources = ::std::option::Option::Some(input);
        self
    }
    /// <p>If you enable this option, SageMaker AI creates the following resources on your behalf when you create the space:</p>
    /// <ul>
    /// <li>
    /// <p>The user profile that possesses the space.</p></li>
    /// <li>
    /// <p>The app that the space contains.</p></li>
    /// </ul>
    pub fn set_space_managed_resources(mut self, input: ::std::option::Option<crate::types::FeatureStatus>) -> Self {
        self.space_managed_resources = input;
        self
    }
    /// <p>If you enable this option, SageMaker AI creates the following resources on your behalf when you create the space:</p>
    /// <ul>
    /// <li>
    /// <p>The user profile that possesses the space.</p></li>
    /// <li>
    /// <p>The app that the space contains.</p></li>
    /// </ul>
    pub fn get_space_managed_resources(&self) -> &::std::option::Option<crate::types::FeatureStatus> {
        &self.space_managed_resources
    }
    /// Appends an item to `custom_file_systems`.
    ///
    /// To override the contents of this collection use [`set_custom_file_systems`](Self::set_custom_file_systems).
    ///
    /// <p>A file system, created by you, that you assign to a space for an Amazon SageMaker AI Domain. Permitted users can access this file system in Amazon SageMaker AI Studio.</p>
    pub fn custom_file_systems(mut self, input: crate::types::CustomFileSystem) -> Self {
        let mut v = self.custom_file_systems.unwrap_or_default();
        v.push(input);
        self.custom_file_systems = ::std::option::Option::Some(v);
        self
    }
    /// <p>A file system, created by you, that you assign to a space for an Amazon SageMaker AI Domain. Permitted users can access this file system in Amazon SageMaker AI Studio.</p>
    pub fn set_custom_file_systems(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CustomFileSystem>>) -> Self {
        self.custom_file_systems = input;
        self
    }
    /// <p>A file system, created by you, that you assign to a space for an Amazon SageMaker AI Domain. Permitted users can access this file system in Amazon SageMaker AI Studio.</p>
    pub fn get_custom_file_systems(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CustomFileSystem>> {
        &self.custom_file_systems
    }
    /// <p>A setting that enables or disables remote access for a SageMaker space. When enabled, this allows you to connect to the remote space from your local IDE.</p>
    pub fn remote_access(mut self, input: crate::types::FeatureStatus) -> Self {
        self.remote_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>A setting that enables or disables remote access for a SageMaker space. When enabled, this allows you to connect to the remote space from your local IDE.</p>
    pub fn set_remote_access(mut self, input: ::std::option::Option<crate::types::FeatureStatus>) -> Self {
        self.remote_access = input;
        self
    }
    /// <p>A setting that enables or disables remote access for a SageMaker space. When enabled, this allows you to connect to the remote space from your local IDE.</p>
    pub fn get_remote_access(&self) -> &::std::option::Option<crate::types::FeatureStatus> {
        &self.remote_access
    }
    /// Consumes the builder and constructs a [`SpaceSettings`](crate::types::SpaceSettings).
    pub fn build(self) -> crate::types::SpaceSettings {
        crate::types::SpaceSettings {
            jupyter_server_app_settings: self.jupyter_server_app_settings,
            kernel_gateway_app_settings: self.kernel_gateway_app_settings,
            code_editor_app_settings: self.code_editor_app_settings,
            jupyter_lab_app_settings: self.jupyter_lab_app_settings,
            app_type: self.app_type,
            space_storage_settings: self.space_storage_settings,
            space_managed_resources: self.space_managed_resources,
            custom_file_systems: self.custom_file_systems,
            remote_access: self.remote_access,
        }
    }
}
