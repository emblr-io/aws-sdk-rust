// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure describing the current state of the model in its life cycle.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModelLifeCycle {
    /// <p>The current stage in the model life cycle.</p>
    pub stage: ::std::option::Option<::std::string::String>,
    /// <p>The current status of a stage in model life cycle.</p>
    pub stage_status: ::std::option::Option<::std::string::String>,
    /// <p>Describes the stage related details.</p>
    pub stage_description: ::std::option::Option<::std::string::String>,
}
impl ModelLifeCycle {
    /// <p>The current stage in the model life cycle.</p>
    pub fn stage(&self) -> ::std::option::Option<&str> {
        self.stage.as_deref()
    }
    /// <p>The current status of a stage in model life cycle.</p>
    pub fn stage_status(&self) -> ::std::option::Option<&str> {
        self.stage_status.as_deref()
    }
    /// <p>Describes the stage related details.</p>
    pub fn stage_description(&self) -> ::std::option::Option<&str> {
        self.stage_description.as_deref()
    }
}
impl ModelLifeCycle {
    /// Creates a new builder-style object to manufacture [`ModelLifeCycle`](crate::types::ModelLifeCycle).
    pub fn builder() -> crate::types::builders::ModelLifeCycleBuilder {
        crate::types::builders::ModelLifeCycleBuilder::default()
    }
}

/// A builder for [`ModelLifeCycle`](crate::types::ModelLifeCycle).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ModelLifeCycleBuilder {
    pub(crate) stage: ::std::option::Option<::std::string::String>,
    pub(crate) stage_status: ::std::option::Option<::std::string::String>,
    pub(crate) stage_description: ::std::option::Option<::std::string::String>,
}
impl ModelLifeCycleBuilder {
    /// <p>The current stage in the model life cycle.</p>
    /// This field is required.
    pub fn stage(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stage = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current stage in the model life cycle.</p>
    pub fn set_stage(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stage = input;
        self
    }
    /// <p>The current stage in the model life cycle.</p>
    pub fn get_stage(&self) -> &::std::option::Option<::std::string::String> {
        &self.stage
    }
    /// <p>The current status of a stage in model life cycle.</p>
    /// This field is required.
    pub fn stage_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stage_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current status of a stage in model life cycle.</p>
    pub fn set_stage_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stage_status = input;
        self
    }
    /// <p>The current status of a stage in model life cycle.</p>
    pub fn get_stage_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.stage_status
    }
    /// <p>Describes the stage related details.</p>
    pub fn stage_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stage_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes the stage related details.</p>
    pub fn set_stage_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stage_description = input;
        self
    }
    /// <p>Describes the stage related details.</p>
    pub fn get_stage_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.stage_description
    }
    /// Consumes the builder and constructs a [`ModelLifeCycle`](crate::types::ModelLifeCycle).
    pub fn build(self) -> crate::types::ModelLifeCycle {
        crate::types::ModelLifeCycle {
            stage: self.stage,
            stage_status: self.stage_status,
            stage_description: self.stage_description,
        }
    }
}
