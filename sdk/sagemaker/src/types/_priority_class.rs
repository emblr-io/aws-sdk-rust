// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Priority class configuration. When included in <code>PriorityClasses</code>, these class configurations define how tasks are queued.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PriorityClass {
    /// <p>Name of the priority class.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Weight of the priority class. The value is within a range from 0 to 100, where 0 is the default.</p>
    /// <p>A weight of 0 is the lowest priority and 100 is the highest. Weight 0 is the default.</p>
    pub weight: ::std::option::Option<i32>,
}
impl PriorityClass {
    /// <p>Name of the priority class.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Weight of the priority class. The value is within a range from 0 to 100, where 0 is the default.</p>
    /// <p>A weight of 0 is the lowest priority and 100 is the highest. Weight 0 is the default.</p>
    pub fn weight(&self) -> ::std::option::Option<i32> {
        self.weight
    }
}
impl PriorityClass {
    /// Creates a new builder-style object to manufacture [`PriorityClass`](crate::types::PriorityClass).
    pub fn builder() -> crate::types::builders::PriorityClassBuilder {
        crate::types::builders::PriorityClassBuilder::default()
    }
}

/// A builder for [`PriorityClass`](crate::types::PriorityClass).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PriorityClassBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) weight: ::std::option::Option<i32>,
}
impl PriorityClassBuilder {
    /// <p>Name of the priority class.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the priority class.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the priority class.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Weight of the priority class. The value is within a range from 0 to 100, where 0 is the default.</p>
    /// <p>A weight of 0 is the lowest priority and 100 is the highest. Weight 0 is the default.</p>
    /// This field is required.
    pub fn weight(mut self, input: i32) -> Self {
        self.weight = ::std::option::Option::Some(input);
        self
    }
    /// <p>Weight of the priority class. The value is within a range from 0 to 100, where 0 is the default.</p>
    /// <p>A weight of 0 is the lowest priority and 100 is the highest. Weight 0 is the default.</p>
    pub fn set_weight(mut self, input: ::std::option::Option<i32>) -> Self {
        self.weight = input;
        self
    }
    /// <p>Weight of the priority class. The value is within a range from 0 to 100, where 0 is the default.</p>
    /// <p>A weight of 0 is the lowest priority and 100 is the highest. Weight 0 is the default.</p>
    pub fn get_weight(&self) -> &::std::option::Option<i32> {
        &self.weight
    }
    /// Consumes the builder and constructs a [`PriorityClass`](crate::types::PriorityClass).
    pub fn build(self) -> crate::types::PriorityClass {
        crate::types::PriorityClass {
            name: self.name,
            weight: self.weight,
        }
    }
}
