// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EmrSettings {
    /// <p>An array of Amazon Resource Names (ARNs) of the IAM roles that the execution role of SageMaker can assume for performing operations or tasks related to Amazon EMR clusters or Amazon EMR Serverless applications. These roles define the permissions and access policies required when performing Amazon EMR-related operations, such as listing, connecting to, or terminating Amazon EMR clusters or Amazon EMR Serverless applications. They are typically used in cross-account access scenarios, where the Amazon EMR resources (clusters or serverless applications) are located in a different Amazon Web Services account than the SageMaker domain.</p>
    pub assumable_role_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>An array of Amazon Resource Names (ARNs) of the IAM roles used by the Amazon EMR cluster instances or job execution environments to access other Amazon Web Services services and resources needed during the runtime of your Amazon EMR or Amazon EMR Serverless workloads, such as Amazon S3 for data access, Amazon CloudWatch for logging, or other Amazon Web Services services based on the particular workload requirements.</p>
    pub execution_role_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl EmrSettings {
    /// <p>An array of Amazon Resource Names (ARNs) of the IAM roles that the execution role of SageMaker can assume for performing operations or tasks related to Amazon EMR clusters or Amazon EMR Serverless applications. These roles define the permissions and access policies required when performing Amazon EMR-related operations, such as listing, connecting to, or terminating Amazon EMR clusters or Amazon EMR Serverless applications. They are typically used in cross-account access scenarios, where the Amazon EMR resources (clusters or serverless applications) are located in a different Amazon Web Services account than the SageMaker domain.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.assumable_role_arns.is_none()`.
    pub fn assumable_role_arns(&self) -> &[::std::string::String] {
        self.assumable_role_arns.as_deref().unwrap_or_default()
    }
    /// <p>An array of Amazon Resource Names (ARNs) of the IAM roles used by the Amazon EMR cluster instances or job execution environments to access other Amazon Web Services services and resources needed during the runtime of your Amazon EMR or Amazon EMR Serverless workloads, such as Amazon S3 for data access, Amazon CloudWatch for logging, or other Amazon Web Services services based on the particular workload requirements.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.execution_role_arns.is_none()`.
    pub fn execution_role_arns(&self) -> &[::std::string::String] {
        self.execution_role_arns.as_deref().unwrap_or_default()
    }
}
impl EmrSettings {
    /// Creates a new builder-style object to manufacture [`EmrSettings`](crate::types::EmrSettings).
    pub fn builder() -> crate::types::builders::EmrSettingsBuilder {
        crate::types::builders::EmrSettingsBuilder::default()
    }
}

/// A builder for [`EmrSettings`](crate::types::EmrSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EmrSettingsBuilder {
    pub(crate) assumable_role_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) execution_role_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl EmrSettingsBuilder {
    /// Appends an item to `assumable_role_arns`.
    ///
    /// To override the contents of this collection use [`set_assumable_role_arns`](Self::set_assumable_role_arns).
    ///
    /// <p>An array of Amazon Resource Names (ARNs) of the IAM roles that the execution role of SageMaker can assume for performing operations or tasks related to Amazon EMR clusters or Amazon EMR Serverless applications. These roles define the permissions and access policies required when performing Amazon EMR-related operations, such as listing, connecting to, or terminating Amazon EMR clusters or Amazon EMR Serverless applications. They are typically used in cross-account access scenarios, where the Amazon EMR resources (clusters or serverless applications) are located in a different Amazon Web Services account than the SageMaker domain.</p>
    pub fn assumable_role_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.assumable_role_arns.unwrap_or_default();
        v.push(input.into());
        self.assumable_role_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of Amazon Resource Names (ARNs) of the IAM roles that the execution role of SageMaker can assume for performing operations or tasks related to Amazon EMR clusters or Amazon EMR Serverless applications. These roles define the permissions and access policies required when performing Amazon EMR-related operations, such as listing, connecting to, or terminating Amazon EMR clusters or Amazon EMR Serverless applications. They are typically used in cross-account access scenarios, where the Amazon EMR resources (clusters or serverless applications) are located in a different Amazon Web Services account than the SageMaker domain.</p>
    pub fn set_assumable_role_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.assumable_role_arns = input;
        self
    }
    /// <p>An array of Amazon Resource Names (ARNs) of the IAM roles that the execution role of SageMaker can assume for performing operations or tasks related to Amazon EMR clusters or Amazon EMR Serverless applications. These roles define the permissions and access policies required when performing Amazon EMR-related operations, such as listing, connecting to, or terminating Amazon EMR clusters or Amazon EMR Serverless applications. They are typically used in cross-account access scenarios, where the Amazon EMR resources (clusters or serverless applications) are located in a different Amazon Web Services account than the SageMaker domain.</p>
    pub fn get_assumable_role_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.assumable_role_arns
    }
    /// Appends an item to `execution_role_arns`.
    ///
    /// To override the contents of this collection use [`set_execution_role_arns`](Self::set_execution_role_arns).
    ///
    /// <p>An array of Amazon Resource Names (ARNs) of the IAM roles used by the Amazon EMR cluster instances or job execution environments to access other Amazon Web Services services and resources needed during the runtime of your Amazon EMR or Amazon EMR Serverless workloads, such as Amazon S3 for data access, Amazon CloudWatch for logging, or other Amazon Web Services services based on the particular workload requirements.</p>
    pub fn execution_role_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.execution_role_arns.unwrap_or_default();
        v.push(input.into());
        self.execution_role_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of Amazon Resource Names (ARNs) of the IAM roles used by the Amazon EMR cluster instances or job execution environments to access other Amazon Web Services services and resources needed during the runtime of your Amazon EMR or Amazon EMR Serverless workloads, such as Amazon S3 for data access, Amazon CloudWatch for logging, or other Amazon Web Services services based on the particular workload requirements.</p>
    pub fn set_execution_role_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.execution_role_arns = input;
        self
    }
    /// <p>An array of Amazon Resource Names (ARNs) of the IAM roles used by the Amazon EMR cluster instances or job execution environments to access other Amazon Web Services services and resources needed during the runtime of your Amazon EMR or Amazon EMR Serverless workloads, such as Amazon S3 for data access, Amazon CloudWatch for logging, or other Amazon Web Services services based on the particular workload requirements.</p>
    pub fn get_execution_role_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.execution_role_arns
    }
    /// Consumes the builder and constructs a [`EmrSettings`](crate::types::EmrSettings).
    pub fn build(self) -> crate::types::EmrSettings {
        crate::types::EmrSettings {
            assumable_role_arns: self.assumable_role_arns,
            execution_role_arns: self.execution_role_arns,
        }
    }
}
