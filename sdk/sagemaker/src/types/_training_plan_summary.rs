// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of the training plan.</p>
/// <p>For more information about how to reserve GPU capacity for your SageMaker HyperPod clusters using Amazon SageMaker Training Plan, see <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingPlan.html">CreateTrainingPlan</a> </code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TrainingPlanSummary {
    /// <p>The Amazon Resource Name (ARN); of the training plan.</p>
    pub training_plan_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the training plan.</p>
    pub training_plan_name: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the training plan (e.g., Pending, Active, Expired). To see the complete list of status values available for a training plan, refer to the <code>Status</code> attribute within the <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingPlanSummary.html">TrainingPlanSummary</a> </code> object.</p>
    pub status: ::std::option::Option<crate::types::TrainingPlanStatus>,
    /// <p>A message providing additional information about the current status of the training plan.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>The number of whole hours in the total duration for this training plan.</p>
    pub duration_hours: ::std::option::Option<i64>,
    /// <p>The additional minutes beyond whole hours in the total duration for this training plan.</p>
    pub duration_minutes: ::std::option::Option<i64>,
    /// <p>The start time of the training plan.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The end time of the training plan.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The upfront fee for the training plan.</p>
    pub upfront_fee: ::std::option::Option<::std::string::String>,
    /// <p>The currency code for the upfront fee (e.g., USD).</p>
    pub currency_code: ::std::option::Option<::std::string::String>,
    /// <p>The total number of instances reserved in this training plan.</p>
    pub total_instance_count: ::std::option::Option<i32>,
    /// <p>The number of instances currently available for use in this training plan.</p>
    pub available_instance_count: ::std::option::Option<i32>,
    /// <p>The number of instances currently in use from this training plan.</p>
    pub in_use_instance_count: ::std::option::Option<i32>,
    /// <p>The target resources (e.g., training jobs, HyperPod clusters) that can use this training plan.</p>
    /// <p>Training plans are specific to their target resource.</p>
    /// <ul>
    /// <li>
    /// <p>A training plan designed for SageMaker training jobs can only be used to schedule and run training jobs.</p></li>
    /// <li>
    /// <p>A training plan for HyperPod clusters can be used exclusively to provide compute resources to a cluster's instance group.</p></li>
    /// </ul>
    pub target_resources: ::std::option::Option<::std::vec::Vec<crate::types::SageMakerResourceName>>,
    /// <p>A list of reserved capacities associated with this training plan, including details such as instance types, counts, and availability zones.</p>
    pub reserved_capacity_summaries: ::std::option::Option<::std::vec::Vec<crate::types::ReservedCapacitySummary>>,
}
impl TrainingPlanSummary {
    /// <p>The Amazon Resource Name (ARN); of the training plan.</p>
    pub fn training_plan_arn(&self) -> ::std::option::Option<&str> {
        self.training_plan_arn.as_deref()
    }
    /// <p>The name of the training plan.</p>
    pub fn training_plan_name(&self) -> ::std::option::Option<&str> {
        self.training_plan_name.as_deref()
    }
    /// <p>The current status of the training plan (e.g., Pending, Active, Expired). To see the complete list of status values available for a training plan, refer to the <code>Status</code> attribute within the <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingPlanSummary.html">TrainingPlanSummary</a> </code> object.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::TrainingPlanStatus> {
        self.status.as_ref()
    }
    /// <p>A message providing additional information about the current status of the training plan.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The number of whole hours in the total duration for this training plan.</p>
    pub fn duration_hours(&self) -> ::std::option::Option<i64> {
        self.duration_hours
    }
    /// <p>The additional minutes beyond whole hours in the total duration for this training plan.</p>
    pub fn duration_minutes(&self) -> ::std::option::Option<i64> {
        self.duration_minutes
    }
    /// <p>The start time of the training plan.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The end time of the training plan.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The upfront fee for the training plan.</p>
    pub fn upfront_fee(&self) -> ::std::option::Option<&str> {
        self.upfront_fee.as_deref()
    }
    /// <p>The currency code for the upfront fee (e.g., USD).</p>
    pub fn currency_code(&self) -> ::std::option::Option<&str> {
        self.currency_code.as_deref()
    }
    /// <p>The total number of instances reserved in this training plan.</p>
    pub fn total_instance_count(&self) -> ::std::option::Option<i32> {
        self.total_instance_count
    }
    /// <p>The number of instances currently available for use in this training plan.</p>
    pub fn available_instance_count(&self) -> ::std::option::Option<i32> {
        self.available_instance_count
    }
    /// <p>The number of instances currently in use from this training plan.</p>
    pub fn in_use_instance_count(&self) -> ::std::option::Option<i32> {
        self.in_use_instance_count
    }
    /// <p>The target resources (e.g., training jobs, HyperPod clusters) that can use this training plan.</p>
    /// <p>Training plans are specific to their target resource.</p>
    /// <ul>
    /// <li>
    /// <p>A training plan designed for SageMaker training jobs can only be used to schedule and run training jobs.</p></li>
    /// <li>
    /// <p>A training plan for HyperPod clusters can be used exclusively to provide compute resources to a cluster's instance group.</p></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.target_resources.is_none()`.
    pub fn target_resources(&self) -> &[crate::types::SageMakerResourceName] {
        self.target_resources.as_deref().unwrap_or_default()
    }
    /// <p>A list of reserved capacities associated with this training plan, including details such as instance types, counts, and availability zones.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.reserved_capacity_summaries.is_none()`.
    pub fn reserved_capacity_summaries(&self) -> &[crate::types::ReservedCapacitySummary] {
        self.reserved_capacity_summaries.as_deref().unwrap_or_default()
    }
}
impl TrainingPlanSummary {
    /// Creates a new builder-style object to manufacture [`TrainingPlanSummary`](crate::types::TrainingPlanSummary).
    pub fn builder() -> crate::types::builders::TrainingPlanSummaryBuilder {
        crate::types::builders::TrainingPlanSummaryBuilder::default()
    }
}

/// A builder for [`TrainingPlanSummary`](crate::types::TrainingPlanSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TrainingPlanSummaryBuilder {
    pub(crate) training_plan_arn: ::std::option::Option<::std::string::String>,
    pub(crate) training_plan_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::TrainingPlanStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) duration_hours: ::std::option::Option<i64>,
    pub(crate) duration_minutes: ::std::option::Option<i64>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) upfront_fee: ::std::option::Option<::std::string::String>,
    pub(crate) currency_code: ::std::option::Option<::std::string::String>,
    pub(crate) total_instance_count: ::std::option::Option<i32>,
    pub(crate) available_instance_count: ::std::option::Option<i32>,
    pub(crate) in_use_instance_count: ::std::option::Option<i32>,
    pub(crate) target_resources: ::std::option::Option<::std::vec::Vec<crate::types::SageMakerResourceName>>,
    pub(crate) reserved_capacity_summaries: ::std::option::Option<::std::vec::Vec<crate::types::ReservedCapacitySummary>>,
}
impl TrainingPlanSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN); of the training plan.</p>
    /// This field is required.
    pub fn training_plan_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.training_plan_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN); of the training plan.</p>
    pub fn set_training_plan_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.training_plan_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN); of the training plan.</p>
    pub fn get_training_plan_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.training_plan_arn
    }
    /// <p>The name of the training plan.</p>
    /// This field is required.
    pub fn training_plan_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.training_plan_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the training plan.</p>
    pub fn set_training_plan_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.training_plan_name = input;
        self
    }
    /// <p>The name of the training plan.</p>
    pub fn get_training_plan_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.training_plan_name
    }
    /// <p>The current status of the training plan (e.g., Pending, Active, Expired). To see the complete list of status values available for a training plan, refer to the <code>Status</code> attribute within the <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingPlanSummary.html">TrainingPlanSummary</a> </code> object.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::TrainingPlanStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the training plan (e.g., Pending, Active, Expired). To see the complete list of status values available for a training plan, refer to the <code>Status</code> attribute within the <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingPlanSummary.html">TrainingPlanSummary</a> </code> object.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TrainingPlanStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the training plan (e.g., Pending, Active, Expired). To see the complete list of status values available for a training plan, refer to the <code>Status</code> attribute within the <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingPlanSummary.html">TrainingPlanSummary</a> </code> object.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TrainingPlanStatus> {
        &self.status
    }
    /// <p>A message providing additional information about the current status of the training plan.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message providing additional information about the current status of the training plan.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>A message providing additional information about the current status of the training plan.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>The number of whole hours in the total duration for this training plan.</p>
    pub fn duration_hours(mut self, input: i64) -> Self {
        self.duration_hours = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of whole hours in the total duration for this training plan.</p>
    pub fn set_duration_hours(mut self, input: ::std::option::Option<i64>) -> Self {
        self.duration_hours = input;
        self
    }
    /// <p>The number of whole hours in the total duration for this training plan.</p>
    pub fn get_duration_hours(&self) -> &::std::option::Option<i64> {
        &self.duration_hours
    }
    /// <p>The additional minutes beyond whole hours in the total duration for this training plan.</p>
    pub fn duration_minutes(mut self, input: i64) -> Self {
        self.duration_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The additional minutes beyond whole hours in the total duration for this training plan.</p>
    pub fn set_duration_minutes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.duration_minutes = input;
        self
    }
    /// <p>The additional minutes beyond whole hours in the total duration for this training plan.</p>
    pub fn get_duration_minutes(&self) -> &::std::option::Option<i64> {
        &self.duration_minutes
    }
    /// <p>The start time of the training plan.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start time of the training plan.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The start time of the training plan.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The end time of the training plan.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end time of the training plan.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The end time of the training plan.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The upfront fee for the training plan.</p>
    pub fn upfront_fee(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.upfront_fee = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The upfront fee for the training plan.</p>
    pub fn set_upfront_fee(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.upfront_fee = input;
        self
    }
    /// <p>The upfront fee for the training plan.</p>
    pub fn get_upfront_fee(&self) -> &::std::option::Option<::std::string::String> {
        &self.upfront_fee
    }
    /// <p>The currency code for the upfront fee (e.g., USD).</p>
    pub fn currency_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.currency_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The currency code for the upfront fee (e.g., USD).</p>
    pub fn set_currency_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.currency_code = input;
        self
    }
    /// <p>The currency code for the upfront fee (e.g., USD).</p>
    pub fn get_currency_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.currency_code
    }
    /// <p>The total number of instances reserved in this training plan.</p>
    pub fn total_instance_count(mut self, input: i32) -> Self {
        self.total_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of instances reserved in this training plan.</p>
    pub fn set_total_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_instance_count = input;
        self
    }
    /// <p>The total number of instances reserved in this training plan.</p>
    pub fn get_total_instance_count(&self) -> &::std::option::Option<i32> {
        &self.total_instance_count
    }
    /// <p>The number of instances currently available for use in this training plan.</p>
    pub fn available_instance_count(mut self, input: i32) -> Self {
        self.available_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of instances currently available for use in this training plan.</p>
    pub fn set_available_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.available_instance_count = input;
        self
    }
    /// <p>The number of instances currently available for use in this training plan.</p>
    pub fn get_available_instance_count(&self) -> &::std::option::Option<i32> {
        &self.available_instance_count
    }
    /// <p>The number of instances currently in use from this training plan.</p>
    pub fn in_use_instance_count(mut self, input: i32) -> Self {
        self.in_use_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of instances currently in use from this training plan.</p>
    pub fn set_in_use_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.in_use_instance_count = input;
        self
    }
    /// <p>The number of instances currently in use from this training plan.</p>
    pub fn get_in_use_instance_count(&self) -> &::std::option::Option<i32> {
        &self.in_use_instance_count
    }
    /// Appends an item to `target_resources`.
    ///
    /// To override the contents of this collection use [`set_target_resources`](Self::set_target_resources).
    ///
    /// <p>The target resources (e.g., training jobs, HyperPod clusters) that can use this training plan.</p>
    /// <p>Training plans are specific to their target resource.</p>
    /// <ul>
    /// <li>
    /// <p>A training plan designed for SageMaker training jobs can only be used to schedule and run training jobs.</p></li>
    /// <li>
    /// <p>A training plan for HyperPod clusters can be used exclusively to provide compute resources to a cluster's instance group.</p></li>
    /// </ul>
    pub fn target_resources(mut self, input: crate::types::SageMakerResourceName) -> Self {
        let mut v = self.target_resources.unwrap_or_default();
        v.push(input);
        self.target_resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>The target resources (e.g., training jobs, HyperPod clusters) that can use this training plan.</p>
    /// <p>Training plans are specific to their target resource.</p>
    /// <ul>
    /// <li>
    /// <p>A training plan designed for SageMaker training jobs can only be used to schedule and run training jobs.</p></li>
    /// <li>
    /// <p>A training plan for HyperPod clusters can be used exclusively to provide compute resources to a cluster's instance group.</p></li>
    /// </ul>
    pub fn set_target_resources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SageMakerResourceName>>) -> Self {
        self.target_resources = input;
        self
    }
    /// <p>The target resources (e.g., training jobs, HyperPod clusters) that can use this training plan.</p>
    /// <p>Training plans are specific to their target resource.</p>
    /// <ul>
    /// <li>
    /// <p>A training plan designed for SageMaker training jobs can only be used to schedule and run training jobs.</p></li>
    /// <li>
    /// <p>A training plan for HyperPod clusters can be used exclusively to provide compute resources to a cluster's instance group.</p></li>
    /// </ul>
    pub fn get_target_resources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SageMakerResourceName>> {
        &self.target_resources
    }
    /// Appends an item to `reserved_capacity_summaries`.
    ///
    /// To override the contents of this collection use [`set_reserved_capacity_summaries`](Self::set_reserved_capacity_summaries).
    ///
    /// <p>A list of reserved capacities associated with this training plan, including details such as instance types, counts, and availability zones.</p>
    pub fn reserved_capacity_summaries(mut self, input: crate::types::ReservedCapacitySummary) -> Self {
        let mut v = self.reserved_capacity_summaries.unwrap_or_default();
        v.push(input);
        self.reserved_capacity_summaries = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of reserved capacities associated with this training plan, including details such as instance types, counts, and availability zones.</p>
    pub fn set_reserved_capacity_summaries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ReservedCapacitySummary>>) -> Self {
        self.reserved_capacity_summaries = input;
        self
    }
    /// <p>A list of reserved capacities associated with this training plan, including details such as instance types, counts, and availability zones.</p>
    pub fn get_reserved_capacity_summaries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ReservedCapacitySummary>> {
        &self.reserved_capacity_summaries
    }
    /// Consumes the builder and constructs a [`TrainingPlanSummary`](crate::types::TrainingPlanSummary).
    pub fn build(self) -> crate::types::TrainingPlanSummary {
        crate::types::TrainingPlanSummary {
            training_plan_arn: self.training_plan_arn,
            training_plan_name: self.training_plan_name,
            status: self.status,
            status_message: self.status_message,
            duration_hours: self.duration_hours,
            duration_minutes: self.duration_minutes,
            start_time: self.start_time,
            end_time: self.end_time,
            upfront_fee: self.upfront_fee,
            currency_code: self.currency_code,
            total_instance_count: self.total_instance_count,
            available_instance_count: self.available_instance_count,
            in_use_instance_count: self.in_use_instance_count,
            target_resources: self.target_resources,
            reserved_capacity_summaries: self.reserved_capacity_summaries,
        }
    }
}
