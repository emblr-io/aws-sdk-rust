// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of the size measurements of the AMI update. Using this configuration, you can specify whether SageMaker should update your instance group by an amount or percentage of instances.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CapacitySizeConfig {
    /// <p>Specifies whether SageMaker should process the update by amount or percentage of instances.</p>
    pub r#type: ::std::option::Option<crate::types::NodeUnavailabilityType>,
    /// <p>Specifies the amount or percentage of instances SageMaker updates at a time.</p>
    pub value: ::std::option::Option<i32>,
}
impl CapacitySizeConfig {
    /// <p>Specifies whether SageMaker should process the update by amount or percentage of instances.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::NodeUnavailabilityType> {
        self.r#type.as_ref()
    }
    /// <p>Specifies the amount or percentage of instances SageMaker updates at a time.</p>
    pub fn value(&self) -> ::std::option::Option<i32> {
        self.value
    }
}
impl CapacitySizeConfig {
    /// Creates a new builder-style object to manufacture [`CapacitySizeConfig`](crate::types::CapacitySizeConfig).
    pub fn builder() -> crate::types::builders::CapacitySizeConfigBuilder {
        crate::types::builders::CapacitySizeConfigBuilder::default()
    }
}

/// A builder for [`CapacitySizeConfig`](crate::types::CapacitySizeConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CapacitySizeConfigBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::NodeUnavailabilityType>,
    pub(crate) value: ::std::option::Option<i32>,
}
impl CapacitySizeConfigBuilder {
    /// <p>Specifies whether SageMaker should process the update by amount or percentage of instances.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::NodeUnavailabilityType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether SageMaker should process the update by amount or percentage of instances.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::NodeUnavailabilityType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Specifies whether SageMaker should process the update by amount or percentage of instances.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::NodeUnavailabilityType> {
        &self.r#type
    }
    /// <p>Specifies the amount or percentage of instances SageMaker updates at a time.</p>
    /// This field is required.
    pub fn value(mut self, input: i32) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the amount or percentage of instances SageMaker updates at a time.</p>
    pub fn set_value(mut self, input: ::std::option::Option<i32>) -> Self {
        self.value = input;
        self
    }
    /// <p>Specifies the amount or percentage of instances SageMaker updates at a time.</p>
    pub fn get_value(&self) -> &::std::option::Option<i32> {
        &self.value
    }
    /// Consumes the builder and constructs a [`CapacitySizeConfig`](crate::types::CapacitySizeConfig).
    pub fn build(self) -> crate::types::CapacitySizeConfig {
        crate::types::CapacitySizeConfig {
            r#type: self.r#type,
            value: self.value,
        }
    }
}
