// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Resource sharing configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceSharingConfig {
    /// <p>The strategy of how idle compute is shared within the cluster. The following are the options of strategies.</p>
    /// <ul>
    /// <li>
    /// <p><code>DontLend</code>: entities do not lend idle compute.</p></li>
    /// <li>
    /// <p><code>Lend</code>: entities can lend idle compute to entities that can borrow.</p></li>
    /// <li>
    /// <p><code>LendandBorrow</code>: entities can lend idle compute and borrow idle compute from other entities.</p></li>
    /// </ul>
    /// <p>Default is <code>LendandBorrow</code>.</p>
    pub strategy: ::std::option::Option<crate::types::ResourceSharingStrategy>,
    /// <p>The limit on how much idle compute can be borrowed.The values can be 1 - 500 percent of idle compute that the team is allowed to borrow.</p>
    /// <p>Default is <code>50</code>.</p>
    pub borrow_limit: ::std::option::Option<i32>,
}
impl ResourceSharingConfig {
    /// <p>The strategy of how idle compute is shared within the cluster. The following are the options of strategies.</p>
    /// <ul>
    /// <li>
    /// <p><code>DontLend</code>: entities do not lend idle compute.</p></li>
    /// <li>
    /// <p><code>Lend</code>: entities can lend idle compute to entities that can borrow.</p></li>
    /// <li>
    /// <p><code>LendandBorrow</code>: entities can lend idle compute and borrow idle compute from other entities.</p></li>
    /// </ul>
    /// <p>Default is <code>LendandBorrow</code>.</p>
    pub fn strategy(&self) -> ::std::option::Option<&crate::types::ResourceSharingStrategy> {
        self.strategy.as_ref()
    }
    /// <p>The limit on how much idle compute can be borrowed.The values can be 1 - 500 percent of idle compute that the team is allowed to borrow.</p>
    /// <p>Default is <code>50</code>.</p>
    pub fn borrow_limit(&self) -> ::std::option::Option<i32> {
        self.borrow_limit
    }
}
impl ResourceSharingConfig {
    /// Creates a new builder-style object to manufacture [`ResourceSharingConfig`](crate::types::ResourceSharingConfig).
    pub fn builder() -> crate::types::builders::ResourceSharingConfigBuilder {
        crate::types::builders::ResourceSharingConfigBuilder::default()
    }
}

/// A builder for [`ResourceSharingConfig`](crate::types::ResourceSharingConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ResourceSharingConfigBuilder {
    pub(crate) strategy: ::std::option::Option<crate::types::ResourceSharingStrategy>,
    pub(crate) borrow_limit: ::std::option::Option<i32>,
}
impl ResourceSharingConfigBuilder {
    /// <p>The strategy of how idle compute is shared within the cluster. The following are the options of strategies.</p>
    /// <ul>
    /// <li>
    /// <p><code>DontLend</code>: entities do not lend idle compute.</p></li>
    /// <li>
    /// <p><code>Lend</code>: entities can lend idle compute to entities that can borrow.</p></li>
    /// <li>
    /// <p><code>LendandBorrow</code>: entities can lend idle compute and borrow idle compute from other entities.</p></li>
    /// </ul>
    /// <p>Default is <code>LendandBorrow</code>.</p>
    /// This field is required.
    pub fn strategy(mut self, input: crate::types::ResourceSharingStrategy) -> Self {
        self.strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The strategy of how idle compute is shared within the cluster. The following are the options of strategies.</p>
    /// <ul>
    /// <li>
    /// <p><code>DontLend</code>: entities do not lend idle compute.</p></li>
    /// <li>
    /// <p><code>Lend</code>: entities can lend idle compute to entities that can borrow.</p></li>
    /// <li>
    /// <p><code>LendandBorrow</code>: entities can lend idle compute and borrow idle compute from other entities.</p></li>
    /// </ul>
    /// <p>Default is <code>LendandBorrow</code>.</p>
    pub fn set_strategy(mut self, input: ::std::option::Option<crate::types::ResourceSharingStrategy>) -> Self {
        self.strategy = input;
        self
    }
    /// <p>The strategy of how idle compute is shared within the cluster. The following are the options of strategies.</p>
    /// <ul>
    /// <li>
    /// <p><code>DontLend</code>: entities do not lend idle compute.</p></li>
    /// <li>
    /// <p><code>Lend</code>: entities can lend idle compute to entities that can borrow.</p></li>
    /// <li>
    /// <p><code>LendandBorrow</code>: entities can lend idle compute and borrow idle compute from other entities.</p></li>
    /// </ul>
    /// <p>Default is <code>LendandBorrow</code>.</p>
    pub fn get_strategy(&self) -> &::std::option::Option<crate::types::ResourceSharingStrategy> {
        &self.strategy
    }
    /// <p>The limit on how much idle compute can be borrowed.The values can be 1 - 500 percent of idle compute that the team is allowed to borrow.</p>
    /// <p>Default is <code>50</code>.</p>
    pub fn borrow_limit(mut self, input: i32) -> Self {
        self.borrow_limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The limit on how much idle compute can be borrowed.The values can be 1 - 500 percent of idle compute that the team is allowed to borrow.</p>
    /// <p>Default is <code>50</code>.</p>
    pub fn set_borrow_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.borrow_limit = input;
        self
    }
    /// <p>The limit on how much idle compute can be borrowed.The values can be 1 - 500 percent of idle compute that the team is allowed to borrow.</p>
    /// <p>Default is <code>50</code>.</p>
    pub fn get_borrow_limit(&self) -> &::std::option::Option<i32> {
        &self.borrow_limit
    }
    /// Consumes the builder and constructs a [`ResourceSharingConfig`](crate::types::ResourceSharingConfig).
    pub fn build(self) -> crate::types::ResourceSharingConfig {
        crate::types::ResourceSharingConfig {
            strategy: self.strategy,
            borrow_limit: self.borrow_limit,
        }
    }
}
