// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the type and size of the endpoint capacity to activate for a rolling deployment or a rollback strategy. You can specify your batches as either of the following:</p>
/// <ul>
/// <li>
/// <p>A count of inference component copies</p></li>
/// <li>
/// <p>The overall percentage or your fleet</p></li>
/// </ul>
/// <p>For a rollback strategy, if you don't specify the fields in this object, or if you set the <code>Value</code> parameter to 100%, then SageMaker AI uses a blue/green rollback strategy and rolls all traffic back to the blue fleet.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InferenceComponentCapacitySize {
    /// <p>Specifies the endpoint capacity type.</p>
    /// <dl>
    /// <dt>
    /// COPY_COUNT
    /// </dt>
    /// <dd>
    /// <p>The endpoint activates based on the number of inference component copies.</p>
    /// </dd>
    /// <dt>
    /// CAPACITY_PERCENT
    /// </dt>
    /// <dd>
    /// <p>The endpoint activates based on the specified percentage of capacity.</p>
    /// </dd>
    /// </dl>
    pub r#type: ::std::option::Option<crate::types::InferenceComponentCapacitySizeType>,
    /// <p>Defines the capacity size, either as a number of inference component copies or a capacity percentage.</p>
    pub value: ::std::option::Option<i32>,
}
impl InferenceComponentCapacitySize {
    /// <p>Specifies the endpoint capacity type.</p>
    /// <dl>
    /// <dt>
    /// COPY_COUNT
    /// </dt>
    /// <dd>
    /// <p>The endpoint activates based on the number of inference component copies.</p>
    /// </dd>
    /// <dt>
    /// CAPACITY_PERCENT
    /// </dt>
    /// <dd>
    /// <p>The endpoint activates based on the specified percentage of capacity.</p>
    /// </dd>
    /// </dl>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::InferenceComponentCapacitySizeType> {
        self.r#type.as_ref()
    }
    /// <p>Defines the capacity size, either as a number of inference component copies or a capacity percentage.</p>
    pub fn value(&self) -> ::std::option::Option<i32> {
        self.value
    }
}
impl InferenceComponentCapacitySize {
    /// Creates a new builder-style object to manufacture [`InferenceComponentCapacitySize`](crate::types::InferenceComponentCapacitySize).
    pub fn builder() -> crate::types::builders::InferenceComponentCapacitySizeBuilder {
        crate::types::builders::InferenceComponentCapacitySizeBuilder::default()
    }
}

/// A builder for [`InferenceComponentCapacitySize`](crate::types::InferenceComponentCapacitySize).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InferenceComponentCapacitySizeBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::InferenceComponentCapacitySizeType>,
    pub(crate) value: ::std::option::Option<i32>,
}
impl InferenceComponentCapacitySizeBuilder {
    /// <p>Specifies the endpoint capacity type.</p>
    /// <dl>
    /// <dt>
    /// COPY_COUNT
    /// </dt>
    /// <dd>
    /// <p>The endpoint activates based on the number of inference component copies.</p>
    /// </dd>
    /// <dt>
    /// CAPACITY_PERCENT
    /// </dt>
    /// <dd>
    /// <p>The endpoint activates based on the specified percentage of capacity.</p>
    /// </dd>
    /// </dl>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::InferenceComponentCapacitySizeType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the endpoint capacity type.</p>
    /// <dl>
    /// <dt>
    /// COPY_COUNT
    /// </dt>
    /// <dd>
    /// <p>The endpoint activates based on the number of inference component copies.</p>
    /// </dd>
    /// <dt>
    /// CAPACITY_PERCENT
    /// </dt>
    /// <dd>
    /// <p>The endpoint activates based on the specified percentage of capacity.</p>
    /// </dd>
    /// </dl>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::InferenceComponentCapacitySizeType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Specifies the endpoint capacity type.</p>
    /// <dl>
    /// <dt>
    /// COPY_COUNT
    /// </dt>
    /// <dd>
    /// <p>The endpoint activates based on the number of inference component copies.</p>
    /// </dd>
    /// <dt>
    /// CAPACITY_PERCENT
    /// </dt>
    /// <dd>
    /// <p>The endpoint activates based on the specified percentage of capacity.</p>
    /// </dd>
    /// </dl>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::InferenceComponentCapacitySizeType> {
        &self.r#type
    }
    /// <p>Defines the capacity size, either as a number of inference component copies or a capacity percentage.</p>
    /// This field is required.
    pub fn value(mut self, input: i32) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the capacity size, either as a number of inference component copies or a capacity percentage.</p>
    pub fn set_value(mut self, input: ::std::option::Option<i32>) -> Self {
        self.value = input;
        self
    }
    /// <p>Defines the capacity size, either as a number of inference component copies or a capacity percentage.</p>
    pub fn get_value(&self) -> &::std::option::Option<i32> {
        &self.value
    }
    /// Consumes the builder and constructs a [`InferenceComponentCapacitySize`](crate::types::InferenceComponentCapacitySize).
    pub fn build(self) -> crate::types::InferenceComponentCapacitySize {
        crate::types::InferenceComponentCapacitySize {
            r#type: self.r#type,
            value: self.value,
        }
    }
}
