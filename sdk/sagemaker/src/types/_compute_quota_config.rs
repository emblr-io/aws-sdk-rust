// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration of the compute allocation definition for an entity. This includes the resource sharing option and the setting to preempt low priority tasks.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComputeQuotaConfig {
    /// <p>Allocate compute resources by instance types.</p>
    pub compute_quota_resources: ::std::option::Option<::std::vec::Vec<crate::types::ComputeQuotaResourceConfig>>,
    /// <p>Resource sharing configuration. This defines how an entity can lend and borrow idle compute with other entities within the cluster.</p>
    pub resource_sharing_config: ::std::option::Option<crate::types::ResourceSharingConfig>,
    /// <p>Allows workloads from within an entity to preempt same-team workloads. When set to <code>LowerPriority</code>, the entity's lower priority tasks are preempted by their own higher priority tasks.</p>
    /// <p>Default is <code>LowerPriority</code>.</p>
    pub preempt_team_tasks: ::std::option::Option<crate::types::PreemptTeamTasks>,
}
impl ComputeQuotaConfig {
    /// <p>Allocate compute resources by instance types.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.compute_quota_resources.is_none()`.
    pub fn compute_quota_resources(&self) -> &[crate::types::ComputeQuotaResourceConfig] {
        self.compute_quota_resources.as_deref().unwrap_or_default()
    }
    /// <p>Resource sharing configuration. This defines how an entity can lend and borrow idle compute with other entities within the cluster.</p>
    pub fn resource_sharing_config(&self) -> ::std::option::Option<&crate::types::ResourceSharingConfig> {
        self.resource_sharing_config.as_ref()
    }
    /// <p>Allows workloads from within an entity to preempt same-team workloads. When set to <code>LowerPriority</code>, the entity's lower priority tasks are preempted by their own higher priority tasks.</p>
    /// <p>Default is <code>LowerPriority</code>.</p>
    pub fn preempt_team_tasks(&self) -> ::std::option::Option<&crate::types::PreemptTeamTasks> {
        self.preempt_team_tasks.as_ref()
    }
}
impl ComputeQuotaConfig {
    /// Creates a new builder-style object to manufacture [`ComputeQuotaConfig`](crate::types::ComputeQuotaConfig).
    pub fn builder() -> crate::types::builders::ComputeQuotaConfigBuilder {
        crate::types::builders::ComputeQuotaConfigBuilder::default()
    }
}

/// A builder for [`ComputeQuotaConfig`](crate::types::ComputeQuotaConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ComputeQuotaConfigBuilder {
    pub(crate) compute_quota_resources: ::std::option::Option<::std::vec::Vec<crate::types::ComputeQuotaResourceConfig>>,
    pub(crate) resource_sharing_config: ::std::option::Option<crate::types::ResourceSharingConfig>,
    pub(crate) preempt_team_tasks: ::std::option::Option<crate::types::PreemptTeamTasks>,
}
impl ComputeQuotaConfigBuilder {
    /// Appends an item to `compute_quota_resources`.
    ///
    /// To override the contents of this collection use [`set_compute_quota_resources`](Self::set_compute_quota_resources).
    ///
    /// <p>Allocate compute resources by instance types.</p>
    pub fn compute_quota_resources(mut self, input: crate::types::ComputeQuotaResourceConfig) -> Self {
        let mut v = self.compute_quota_resources.unwrap_or_default();
        v.push(input);
        self.compute_quota_resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>Allocate compute resources by instance types.</p>
    pub fn set_compute_quota_resources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ComputeQuotaResourceConfig>>) -> Self {
        self.compute_quota_resources = input;
        self
    }
    /// <p>Allocate compute resources by instance types.</p>
    pub fn get_compute_quota_resources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ComputeQuotaResourceConfig>> {
        &self.compute_quota_resources
    }
    /// <p>Resource sharing configuration. This defines how an entity can lend and borrow idle compute with other entities within the cluster.</p>
    pub fn resource_sharing_config(mut self, input: crate::types::ResourceSharingConfig) -> Self {
        self.resource_sharing_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Resource sharing configuration. This defines how an entity can lend and borrow idle compute with other entities within the cluster.</p>
    pub fn set_resource_sharing_config(mut self, input: ::std::option::Option<crate::types::ResourceSharingConfig>) -> Self {
        self.resource_sharing_config = input;
        self
    }
    /// <p>Resource sharing configuration. This defines how an entity can lend and borrow idle compute with other entities within the cluster.</p>
    pub fn get_resource_sharing_config(&self) -> &::std::option::Option<crate::types::ResourceSharingConfig> {
        &self.resource_sharing_config
    }
    /// <p>Allows workloads from within an entity to preempt same-team workloads. When set to <code>LowerPriority</code>, the entity's lower priority tasks are preempted by their own higher priority tasks.</p>
    /// <p>Default is <code>LowerPriority</code>.</p>
    pub fn preempt_team_tasks(mut self, input: crate::types::PreemptTeamTasks) -> Self {
        self.preempt_team_tasks = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allows workloads from within an entity to preempt same-team workloads. When set to <code>LowerPriority</code>, the entity's lower priority tasks are preempted by their own higher priority tasks.</p>
    /// <p>Default is <code>LowerPriority</code>.</p>
    pub fn set_preempt_team_tasks(mut self, input: ::std::option::Option<crate::types::PreemptTeamTasks>) -> Self {
        self.preempt_team_tasks = input;
        self
    }
    /// <p>Allows workloads from within an entity to preempt same-team workloads. When set to <code>LowerPriority</code>, the entity's lower priority tasks are preempted by their own higher priority tasks.</p>
    /// <p>Default is <code>LowerPriority</code>.</p>
    pub fn get_preempt_team_tasks(&self) -> &::std::option::Option<crate::types::PreemptTeamTasks> {
        &self.preempt_team_tasks
    }
    /// Consumes the builder and constructs a [`ComputeQuotaConfig`](crate::types::ComputeQuotaConfig).
    pub fn build(self) -> crate::types::ComputeQuotaConfig {
        crate::types::ComputeQuotaConfig {
            compute_quota_resources: self.compute_quota_resources,
            resource_sharing_config: self.resource_sharing_config,
            preempt_team_tasks: self.preempt_team_tasks,
        }
    }
}
