// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Data sources that are available to your model in addition to the one that you specify for <code>ModelDataSource</code> when you use the <code>CreateModel</code> action.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AdditionalModelDataSource {
    /// <p>A custom name for this <code>AdditionalModelDataSource</code> object.</p>
    pub channel_name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the S3 location of ML model data to deploy.</p>
    pub s3_data_source: ::std::option::Option<crate::types::S3ModelDataSource>,
}
impl AdditionalModelDataSource {
    /// <p>A custom name for this <code>AdditionalModelDataSource</code> object.</p>
    pub fn channel_name(&self) -> ::std::option::Option<&str> {
        self.channel_name.as_deref()
    }
    /// <p>Specifies the S3 location of ML model data to deploy.</p>
    pub fn s3_data_source(&self) -> ::std::option::Option<&crate::types::S3ModelDataSource> {
        self.s3_data_source.as_ref()
    }
}
impl AdditionalModelDataSource {
    /// Creates a new builder-style object to manufacture [`AdditionalModelDataSource`](crate::types::AdditionalModelDataSource).
    pub fn builder() -> crate::types::builders::AdditionalModelDataSourceBuilder {
        crate::types::builders::AdditionalModelDataSourceBuilder::default()
    }
}

/// A builder for [`AdditionalModelDataSource`](crate::types::AdditionalModelDataSource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AdditionalModelDataSourceBuilder {
    pub(crate) channel_name: ::std::option::Option<::std::string::String>,
    pub(crate) s3_data_source: ::std::option::Option<crate::types::S3ModelDataSource>,
}
impl AdditionalModelDataSourceBuilder {
    /// <p>A custom name for this <code>AdditionalModelDataSource</code> object.</p>
    /// This field is required.
    pub fn channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A custom name for this <code>AdditionalModelDataSource</code> object.</p>
    pub fn set_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>A custom name for this <code>AdditionalModelDataSource</code> object.</p>
    pub fn get_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_name
    }
    /// <p>Specifies the S3 location of ML model data to deploy.</p>
    /// This field is required.
    pub fn s3_data_source(mut self, input: crate::types::S3ModelDataSource) -> Self {
        self.s3_data_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the S3 location of ML model data to deploy.</p>
    pub fn set_s3_data_source(mut self, input: ::std::option::Option<crate::types::S3ModelDataSource>) -> Self {
        self.s3_data_source = input;
        self
    }
    /// <p>Specifies the S3 location of ML model data to deploy.</p>
    pub fn get_s3_data_source(&self) -> &::std::option::Option<crate::types::S3ModelDataSource> {
        &self.s3_data_source
    }
    /// Consumes the builder and constructs a [`AdditionalModelDataSource`](crate::types::AdditionalModelDataSource).
    pub fn build(self) -> crate::types::AdditionalModelDataSource {
        crate::types::AdditionalModelDataSource {
            channel_name: self.channel_name,
            s3_data_source: self.s3_data_source,
        }
    }
}
