// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Maintenance configuration settings for the SageMaker Partner AI App.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PartnerAppMaintenanceConfig {
    /// <p>The day and time of the week in Coordinated Universal Time (UTC) 24-hour standard time that weekly maintenance updates are scheduled. This value must take the following format: <code>3-letter-day:24-h-hour:minute</code>. For example: <code>TUE:03:30</code>.</p>
    pub maintenance_window_start: ::std::option::Option<::std::string::String>,
}
impl PartnerAppMaintenanceConfig {
    /// <p>The day and time of the week in Coordinated Universal Time (UTC) 24-hour standard time that weekly maintenance updates are scheduled. This value must take the following format: <code>3-letter-day:24-h-hour:minute</code>. For example: <code>TUE:03:30</code>.</p>
    pub fn maintenance_window_start(&self) -> ::std::option::Option<&str> {
        self.maintenance_window_start.as_deref()
    }
}
impl PartnerAppMaintenanceConfig {
    /// Creates a new builder-style object to manufacture [`PartnerAppMaintenanceConfig`](crate::types::PartnerAppMaintenanceConfig).
    pub fn builder() -> crate::types::builders::PartnerAppMaintenanceConfigBuilder {
        crate::types::builders::PartnerAppMaintenanceConfigBuilder::default()
    }
}

/// A builder for [`PartnerAppMaintenanceConfig`](crate::types::PartnerAppMaintenanceConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PartnerAppMaintenanceConfigBuilder {
    pub(crate) maintenance_window_start: ::std::option::Option<::std::string::String>,
}
impl PartnerAppMaintenanceConfigBuilder {
    /// <p>The day and time of the week in Coordinated Universal Time (UTC) 24-hour standard time that weekly maintenance updates are scheduled. This value must take the following format: <code>3-letter-day:24-h-hour:minute</code>. For example: <code>TUE:03:30</code>.</p>
    pub fn maintenance_window_start(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.maintenance_window_start = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The day and time of the week in Coordinated Universal Time (UTC) 24-hour standard time that weekly maintenance updates are scheduled. This value must take the following format: <code>3-letter-day:24-h-hour:minute</code>. For example: <code>TUE:03:30</code>.</p>
    pub fn set_maintenance_window_start(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.maintenance_window_start = input;
        self
    }
    /// <p>The day and time of the week in Coordinated Universal Time (UTC) 24-hour standard time that weekly maintenance updates are scheduled. This value must take the following format: <code>3-letter-day:24-h-hour:minute</code>. For example: <code>TUE:03:30</code>.</p>
    pub fn get_maintenance_window_start(&self) -> &::std::option::Option<::std::string::String> {
        &self.maintenance_window_start
    }
    /// Consumes the builder and constructs a [`PartnerAppMaintenanceConfig`](crate::types::PartnerAppMaintenanceConfig).
    pub fn build(self) -> crate::types::PartnerAppMaintenanceConfig {
        crate::types::PartnerAppMaintenanceConfig {
            maintenance_window_start: self.maintenance_window_start,
        }
    }
}
