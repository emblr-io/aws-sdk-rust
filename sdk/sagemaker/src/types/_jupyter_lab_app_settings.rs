// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The settings for the JupyterLab application.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JupyterLabAppSettings {
    /// <p>Specifies the ARN's of a SageMaker AI image and SageMaker AI image version, and the instance type that the version runs on.</p><note>
    /// <p>When both <code>SageMakerImageVersionArn</code> and <code>SageMakerImageArn</code> are passed, <code>SageMakerImageVersionArn</code> is used. Any updates to <code>SageMakerImageArn</code> will not take effect if <code>SageMakerImageVersionArn</code> already exists in the <code>ResourceSpec</code> because <code>SageMakerImageVersionArn</code> always takes precedence. To clear the value set for <code>SageMakerImageVersionArn</code>, pass <code>None</code> as the value.</p>
    /// </note>
    pub default_resource_spec: ::std::option::Option<crate::types::ResourceSpec>,
    /// <p>A list of custom SageMaker images that are configured to run as a JupyterLab app.</p>
    pub custom_images: ::std::option::Option<::std::vec::Vec<crate::types::CustomImage>>,
    /// <p>The Amazon Resource Name (ARN) of the lifecycle configurations attached to the user profile or domain. To remove a lifecycle config, you must set <code>LifecycleConfigArns</code> to an empty list.</p>
    pub lifecycle_config_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterLab application.</p>
    pub code_repositories: ::std::option::Option<::std::vec::Vec<crate::types::CodeRepository>>,
    /// <p>Indicates whether idle shutdown is activated for JupyterLab applications.</p>
    pub app_lifecycle_management: ::std::option::Option<crate::types::AppLifecycleManagement>,
    /// <p>The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications.</p>
    pub emr_settings: ::std::option::Option<crate::types::EmrSettings>,
    /// <p>The lifecycle configuration that runs before the default lifecycle configuration. It can override changes made in the default lifecycle configuration.</p>
    pub built_in_lifecycle_config_arn: ::std::option::Option<::std::string::String>,
}
impl JupyterLabAppSettings {
    /// <p>Specifies the ARN's of a SageMaker AI image and SageMaker AI image version, and the instance type that the version runs on.</p><note>
    /// <p>When both <code>SageMakerImageVersionArn</code> and <code>SageMakerImageArn</code> are passed, <code>SageMakerImageVersionArn</code> is used. Any updates to <code>SageMakerImageArn</code> will not take effect if <code>SageMakerImageVersionArn</code> already exists in the <code>ResourceSpec</code> because <code>SageMakerImageVersionArn</code> always takes precedence. To clear the value set for <code>SageMakerImageVersionArn</code>, pass <code>None</code> as the value.</p>
    /// </note>
    pub fn default_resource_spec(&self) -> ::std::option::Option<&crate::types::ResourceSpec> {
        self.default_resource_spec.as_ref()
    }
    /// <p>A list of custom SageMaker images that are configured to run as a JupyterLab app.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.custom_images.is_none()`.
    pub fn custom_images(&self) -> &[crate::types::CustomImage] {
        self.custom_images.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Resource Name (ARN) of the lifecycle configurations attached to the user profile or domain. To remove a lifecycle config, you must set <code>LifecycleConfigArns</code> to an empty list.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.lifecycle_config_arns.is_none()`.
    pub fn lifecycle_config_arns(&self) -> &[::std::string::String] {
        self.lifecycle_config_arns.as_deref().unwrap_or_default()
    }
    /// <p>A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterLab application.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.code_repositories.is_none()`.
    pub fn code_repositories(&self) -> &[crate::types::CodeRepository] {
        self.code_repositories.as_deref().unwrap_or_default()
    }
    /// <p>Indicates whether idle shutdown is activated for JupyterLab applications.</p>
    pub fn app_lifecycle_management(&self) -> ::std::option::Option<&crate::types::AppLifecycleManagement> {
        self.app_lifecycle_management.as_ref()
    }
    /// <p>The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications.</p>
    pub fn emr_settings(&self) -> ::std::option::Option<&crate::types::EmrSettings> {
        self.emr_settings.as_ref()
    }
    /// <p>The lifecycle configuration that runs before the default lifecycle configuration. It can override changes made in the default lifecycle configuration.</p>
    pub fn built_in_lifecycle_config_arn(&self) -> ::std::option::Option<&str> {
        self.built_in_lifecycle_config_arn.as_deref()
    }
}
impl JupyterLabAppSettings {
    /// Creates a new builder-style object to manufacture [`JupyterLabAppSettings`](crate::types::JupyterLabAppSettings).
    pub fn builder() -> crate::types::builders::JupyterLabAppSettingsBuilder {
        crate::types::builders::JupyterLabAppSettingsBuilder::default()
    }
}

/// A builder for [`JupyterLabAppSettings`](crate::types::JupyterLabAppSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct JupyterLabAppSettingsBuilder {
    pub(crate) default_resource_spec: ::std::option::Option<crate::types::ResourceSpec>,
    pub(crate) custom_images: ::std::option::Option<::std::vec::Vec<crate::types::CustomImage>>,
    pub(crate) lifecycle_config_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) code_repositories: ::std::option::Option<::std::vec::Vec<crate::types::CodeRepository>>,
    pub(crate) app_lifecycle_management: ::std::option::Option<crate::types::AppLifecycleManagement>,
    pub(crate) emr_settings: ::std::option::Option<crate::types::EmrSettings>,
    pub(crate) built_in_lifecycle_config_arn: ::std::option::Option<::std::string::String>,
}
impl JupyterLabAppSettingsBuilder {
    /// <p>Specifies the ARN's of a SageMaker AI image and SageMaker AI image version, and the instance type that the version runs on.</p><note>
    /// <p>When both <code>SageMakerImageVersionArn</code> and <code>SageMakerImageArn</code> are passed, <code>SageMakerImageVersionArn</code> is used. Any updates to <code>SageMakerImageArn</code> will not take effect if <code>SageMakerImageVersionArn</code> already exists in the <code>ResourceSpec</code> because <code>SageMakerImageVersionArn</code> always takes precedence. To clear the value set for <code>SageMakerImageVersionArn</code>, pass <code>None</code> as the value.</p>
    /// </note>
    pub fn default_resource_spec(mut self, input: crate::types::ResourceSpec) -> Self {
        self.default_resource_spec = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the ARN's of a SageMaker AI image and SageMaker AI image version, and the instance type that the version runs on.</p><note>
    /// <p>When both <code>SageMakerImageVersionArn</code> and <code>SageMakerImageArn</code> are passed, <code>SageMakerImageVersionArn</code> is used. Any updates to <code>SageMakerImageArn</code> will not take effect if <code>SageMakerImageVersionArn</code> already exists in the <code>ResourceSpec</code> because <code>SageMakerImageVersionArn</code> always takes precedence. To clear the value set for <code>SageMakerImageVersionArn</code>, pass <code>None</code> as the value.</p>
    /// </note>
    pub fn set_default_resource_spec(mut self, input: ::std::option::Option<crate::types::ResourceSpec>) -> Self {
        self.default_resource_spec = input;
        self
    }
    /// <p>Specifies the ARN's of a SageMaker AI image and SageMaker AI image version, and the instance type that the version runs on.</p><note>
    /// <p>When both <code>SageMakerImageVersionArn</code> and <code>SageMakerImageArn</code> are passed, <code>SageMakerImageVersionArn</code> is used. Any updates to <code>SageMakerImageArn</code> will not take effect if <code>SageMakerImageVersionArn</code> already exists in the <code>ResourceSpec</code> because <code>SageMakerImageVersionArn</code> always takes precedence. To clear the value set for <code>SageMakerImageVersionArn</code>, pass <code>None</code> as the value.</p>
    /// </note>
    pub fn get_default_resource_spec(&self) -> &::std::option::Option<crate::types::ResourceSpec> {
        &self.default_resource_spec
    }
    /// Appends an item to `custom_images`.
    ///
    /// To override the contents of this collection use [`set_custom_images`](Self::set_custom_images).
    ///
    /// <p>A list of custom SageMaker images that are configured to run as a JupyterLab app.</p>
    pub fn custom_images(mut self, input: crate::types::CustomImage) -> Self {
        let mut v = self.custom_images.unwrap_or_default();
        v.push(input);
        self.custom_images = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of custom SageMaker images that are configured to run as a JupyterLab app.</p>
    pub fn set_custom_images(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CustomImage>>) -> Self {
        self.custom_images = input;
        self
    }
    /// <p>A list of custom SageMaker images that are configured to run as a JupyterLab app.</p>
    pub fn get_custom_images(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CustomImage>> {
        &self.custom_images
    }
    /// Appends an item to `lifecycle_config_arns`.
    ///
    /// To override the contents of this collection use [`set_lifecycle_config_arns`](Self::set_lifecycle_config_arns).
    ///
    /// <p>The Amazon Resource Name (ARN) of the lifecycle configurations attached to the user profile or domain. To remove a lifecycle config, you must set <code>LifecycleConfigArns</code> to an empty list.</p>
    pub fn lifecycle_config_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.lifecycle_config_arns.unwrap_or_default();
        v.push(input.into());
        self.lifecycle_config_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the lifecycle configurations attached to the user profile or domain. To remove a lifecycle config, you must set <code>LifecycleConfigArns</code> to an empty list.</p>
    pub fn set_lifecycle_config_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.lifecycle_config_arns = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the lifecycle configurations attached to the user profile or domain. To remove a lifecycle config, you must set <code>LifecycleConfigArns</code> to an empty list.</p>
    pub fn get_lifecycle_config_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.lifecycle_config_arns
    }
    /// Appends an item to `code_repositories`.
    ///
    /// To override the contents of this collection use [`set_code_repositories`](Self::set_code_repositories).
    ///
    /// <p>A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterLab application.</p>
    pub fn code_repositories(mut self, input: crate::types::CodeRepository) -> Self {
        let mut v = self.code_repositories.unwrap_or_default();
        v.push(input);
        self.code_repositories = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterLab application.</p>
    pub fn set_code_repositories(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CodeRepository>>) -> Self {
        self.code_repositories = input;
        self
    }
    /// <p>A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterLab application.</p>
    pub fn get_code_repositories(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CodeRepository>> {
        &self.code_repositories
    }
    /// <p>Indicates whether idle shutdown is activated for JupyterLab applications.</p>
    pub fn app_lifecycle_management(mut self, input: crate::types::AppLifecycleManagement) -> Self {
        self.app_lifecycle_management = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether idle shutdown is activated for JupyterLab applications.</p>
    pub fn set_app_lifecycle_management(mut self, input: ::std::option::Option<crate::types::AppLifecycleManagement>) -> Self {
        self.app_lifecycle_management = input;
        self
    }
    /// <p>Indicates whether idle shutdown is activated for JupyterLab applications.</p>
    pub fn get_app_lifecycle_management(&self) -> &::std::option::Option<crate::types::AppLifecycleManagement> {
        &self.app_lifecycle_management
    }
    /// <p>The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications.</p>
    pub fn emr_settings(mut self, input: crate::types::EmrSettings) -> Self {
        self.emr_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications.</p>
    pub fn set_emr_settings(mut self, input: ::std::option::Option<crate::types::EmrSettings>) -> Self {
        self.emr_settings = input;
        self
    }
    /// <p>The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications.</p>
    pub fn get_emr_settings(&self) -> &::std::option::Option<crate::types::EmrSettings> {
        &self.emr_settings
    }
    /// <p>The lifecycle configuration that runs before the default lifecycle configuration. It can override changes made in the default lifecycle configuration.</p>
    pub fn built_in_lifecycle_config_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.built_in_lifecycle_config_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The lifecycle configuration that runs before the default lifecycle configuration. It can override changes made in the default lifecycle configuration.</p>
    pub fn set_built_in_lifecycle_config_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.built_in_lifecycle_config_arn = input;
        self
    }
    /// <p>The lifecycle configuration that runs before the default lifecycle configuration. It can override changes made in the default lifecycle configuration.</p>
    pub fn get_built_in_lifecycle_config_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.built_in_lifecycle_config_arn
    }
    /// Consumes the builder and constructs a [`JupyterLabAppSettings`](crate::types::JupyterLabAppSettings).
    pub fn build(self) -> crate::types::JupyterLabAppSettings {
        crate::types::JupyterLabAppSettings {
            default_resource_spec: self.default_resource_spec,
            custom_images: self.custom_images,
            lifecycle_config_arns: self.lifecycle_config_arns,
            code_repositories: self.code_repositories,
            app_lifecycle_management: self.app_lifecycle_management,
            emr_settings: self.emr_settings,
            built_in_lifecycle_config_arn: self.built_in_lifecycle_config_arn,
        }
    }
}
