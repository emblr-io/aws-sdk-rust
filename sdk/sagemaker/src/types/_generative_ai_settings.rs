// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The generative AI settings for the SageMaker Canvas application.</p>
/// <p>Configure these settings for Canvas users starting chats with generative AI foundation models. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/canvas-fm-chat.html"> Use generative AI with foundation models</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GenerativeAiSettings {
    /// <p>The ARN of an Amazon Web Services IAM role that allows fine-tuning of large language models (LLMs) in Amazon Bedrock. The IAM role should have Amazon S3 read and write permissions, as well as a trust relationship that establishes <code>bedrock.amazonaws.com</code> as a service principal.</p>
    pub amazon_bedrock_role_arn: ::std::option::Option<::std::string::String>,
}
impl GenerativeAiSettings {
    /// <p>The ARN of an Amazon Web Services IAM role that allows fine-tuning of large language models (LLMs) in Amazon Bedrock. The IAM role should have Amazon S3 read and write permissions, as well as a trust relationship that establishes <code>bedrock.amazonaws.com</code> as a service principal.</p>
    pub fn amazon_bedrock_role_arn(&self) -> ::std::option::Option<&str> {
        self.amazon_bedrock_role_arn.as_deref()
    }
}
impl GenerativeAiSettings {
    /// Creates a new builder-style object to manufacture [`GenerativeAiSettings`](crate::types::GenerativeAiSettings).
    pub fn builder() -> crate::types::builders::GenerativeAiSettingsBuilder {
        crate::types::builders::GenerativeAiSettingsBuilder::default()
    }
}

/// A builder for [`GenerativeAiSettings`](crate::types::GenerativeAiSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GenerativeAiSettingsBuilder {
    pub(crate) amazon_bedrock_role_arn: ::std::option::Option<::std::string::String>,
}
impl GenerativeAiSettingsBuilder {
    /// <p>The ARN of an Amazon Web Services IAM role that allows fine-tuning of large language models (LLMs) in Amazon Bedrock. The IAM role should have Amazon S3 read and write permissions, as well as a trust relationship that establishes <code>bedrock.amazonaws.com</code> as a service principal.</p>
    pub fn amazon_bedrock_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.amazon_bedrock_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of an Amazon Web Services IAM role that allows fine-tuning of large language models (LLMs) in Amazon Bedrock. The IAM role should have Amazon S3 read and write permissions, as well as a trust relationship that establishes <code>bedrock.amazonaws.com</code> as a service principal.</p>
    pub fn set_amazon_bedrock_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.amazon_bedrock_role_arn = input;
        self
    }
    /// <p>The ARN of an Amazon Web Services IAM role that allows fine-tuning of large language models (LLMs) in Amazon Bedrock. The IAM role should have Amazon S3 read and write permissions, as well as a trust relationship that establishes <code>bedrock.amazonaws.com</code> as a service principal.</p>
    pub fn get_amazon_bedrock_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.amazon_bedrock_role_arn
    }
    /// Consumes the builder and constructs a [`GenerativeAiSettings`](crate::types::GenerativeAiSettings).
    pub fn build(self) -> crate::types::GenerativeAiSettings {
        crate::types::GenerativeAiSettings {
            amazon_bedrock_role_arn: self.amazon_bedrock_role_arn,
        }
    }
}
