// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a training plan offering.</p>
/// <p>For more information about how to reserve GPU capacity for your SageMaker HyperPod clusters using Amazon SageMaker Training Plan, see <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingPlan.html">CreateTrainingPlan</a> </code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TrainingPlanOffering {
    /// <p>The unique identifier for this training plan offering.</p>
    pub training_plan_offering_id: ::std::option::Option<::std::string::String>,
    /// <p>The target resources (e.g., SageMaker Training Jobs, SageMaker HyperPod) for this training plan offering.</p>
    /// <p>Training plans are specific to their target resource.</p>
    /// <ul>
    /// <li>
    /// <p>A training plan designed for SageMaker training jobs can only be used to schedule and run training jobs.</p></li>
    /// <li>
    /// <p>A training plan for HyperPod clusters can be used exclusively to provide compute resources to a cluster's instance group.</p></li>
    /// </ul>
    pub target_resources: ::std::option::Option<::std::vec::Vec<crate::types::SageMakerResourceName>>,
    /// <p>The requested start time that the user specified when searching for the training plan offering.</p>
    pub requested_start_time_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The requested end time that the user specified when searching for the training plan offering.</p>
    pub requested_end_time_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The number of whole hours in the total duration for this training plan offering.</p>
    pub duration_hours: ::std::option::Option<i64>,
    /// <p>The additional minutes beyond whole hours in the total duration for this training plan offering.</p>
    pub duration_minutes: ::std::option::Option<i64>,
    /// <p>The upfront fee for this training plan offering.</p>
    pub upfront_fee: ::std::option::Option<::std::string::String>,
    /// <p>The currency code for the upfront fee (e.g., USD).</p>
    pub currency_code: ::std::option::Option<::std::string::String>,
    /// <p>A list of reserved capacity offerings associated with this training plan offering.</p>
    pub reserved_capacity_offerings: ::std::option::Option<::std::vec::Vec<crate::types::ReservedCapacityOffering>>,
}
impl TrainingPlanOffering {
    /// <p>The unique identifier for this training plan offering.</p>
    pub fn training_plan_offering_id(&self) -> ::std::option::Option<&str> {
        self.training_plan_offering_id.as_deref()
    }
    /// <p>The target resources (e.g., SageMaker Training Jobs, SageMaker HyperPod) for this training plan offering.</p>
    /// <p>Training plans are specific to their target resource.</p>
    /// <ul>
    /// <li>
    /// <p>A training plan designed for SageMaker training jobs can only be used to schedule and run training jobs.</p></li>
    /// <li>
    /// <p>A training plan for HyperPod clusters can be used exclusively to provide compute resources to a cluster's instance group.</p></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.target_resources.is_none()`.
    pub fn target_resources(&self) -> &[crate::types::SageMakerResourceName] {
        self.target_resources.as_deref().unwrap_or_default()
    }
    /// <p>The requested start time that the user specified when searching for the training plan offering.</p>
    pub fn requested_start_time_after(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.requested_start_time_after.as_ref()
    }
    /// <p>The requested end time that the user specified when searching for the training plan offering.</p>
    pub fn requested_end_time_before(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.requested_end_time_before.as_ref()
    }
    /// <p>The number of whole hours in the total duration for this training plan offering.</p>
    pub fn duration_hours(&self) -> ::std::option::Option<i64> {
        self.duration_hours
    }
    /// <p>The additional minutes beyond whole hours in the total duration for this training plan offering.</p>
    pub fn duration_minutes(&self) -> ::std::option::Option<i64> {
        self.duration_minutes
    }
    /// <p>The upfront fee for this training plan offering.</p>
    pub fn upfront_fee(&self) -> ::std::option::Option<&str> {
        self.upfront_fee.as_deref()
    }
    /// <p>The currency code for the upfront fee (e.g., USD).</p>
    pub fn currency_code(&self) -> ::std::option::Option<&str> {
        self.currency_code.as_deref()
    }
    /// <p>A list of reserved capacity offerings associated with this training plan offering.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.reserved_capacity_offerings.is_none()`.
    pub fn reserved_capacity_offerings(&self) -> &[crate::types::ReservedCapacityOffering] {
        self.reserved_capacity_offerings.as_deref().unwrap_or_default()
    }
}
impl TrainingPlanOffering {
    /// Creates a new builder-style object to manufacture [`TrainingPlanOffering`](crate::types::TrainingPlanOffering).
    pub fn builder() -> crate::types::builders::TrainingPlanOfferingBuilder {
        crate::types::builders::TrainingPlanOfferingBuilder::default()
    }
}

/// A builder for [`TrainingPlanOffering`](crate::types::TrainingPlanOffering).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TrainingPlanOfferingBuilder {
    pub(crate) training_plan_offering_id: ::std::option::Option<::std::string::String>,
    pub(crate) target_resources: ::std::option::Option<::std::vec::Vec<crate::types::SageMakerResourceName>>,
    pub(crate) requested_start_time_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) requested_end_time_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) duration_hours: ::std::option::Option<i64>,
    pub(crate) duration_minutes: ::std::option::Option<i64>,
    pub(crate) upfront_fee: ::std::option::Option<::std::string::String>,
    pub(crate) currency_code: ::std::option::Option<::std::string::String>,
    pub(crate) reserved_capacity_offerings: ::std::option::Option<::std::vec::Vec<crate::types::ReservedCapacityOffering>>,
}
impl TrainingPlanOfferingBuilder {
    /// <p>The unique identifier for this training plan offering.</p>
    /// This field is required.
    pub fn training_plan_offering_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.training_plan_offering_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for this training plan offering.</p>
    pub fn set_training_plan_offering_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.training_plan_offering_id = input;
        self
    }
    /// <p>The unique identifier for this training plan offering.</p>
    pub fn get_training_plan_offering_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.training_plan_offering_id
    }
    /// Appends an item to `target_resources`.
    ///
    /// To override the contents of this collection use [`set_target_resources`](Self::set_target_resources).
    ///
    /// <p>The target resources (e.g., SageMaker Training Jobs, SageMaker HyperPod) for this training plan offering.</p>
    /// <p>Training plans are specific to their target resource.</p>
    /// <ul>
    /// <li>
    /// <p>A training plan designed for SageMaker training jobs can only be used to schedule and run training jobs.</p></li>
    /// <li>
    /// <p>A training plan for HyperPod clusters can be used exclusively to provide compute resources to a cluster's instance group.</p></li>
    /// </ul>
    pub fn target_resources(mut self, input: crate::types::SageMakerResourceName) -> Self {
        let mut v = self.target_resources.unwrap_or_default();
        v.push(input);
        self.target_resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>The target resources (e.g., SageMaker Training Jobs, SageMaker HyperPod) for this training plan offering.</p>
    /// <p>Training plans are specific to their target resource.</p>
    /// <ul>
    /// <li>
    /// <p>A training plan designed for SageMaker training jobs can only be used to schedule and run training jobs.</p></li>
    /// <li>
    /// <p>A training plan for HyperPod clusters can be used exclusively to provide compute resources to a cluster's instance group.</p></li>
    /// </ul>
    pub fn set_target_resources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SageMakerResourceName>>) -> Self {
        self.target_resources = input;
        self
    }
    /// <p>The target resources (e.g., SageMaker Training Jobs, SageMaker HyperPod) for this training plan offering.</p>
    /// <p>Training plans are specific to their target resource.</p>
    /// <ul>
    /// <li>
    /// <p>A training plan designed for SageMaker training jobs can only be used to schedule and run training jobs.</p></li>
    /// <li>
    /// <p>A training plan for HyperPod clusters can be used exclusively to provide compute resources to a cluster's instance group.</p></li>
    /// </ul>
    pub fn get_target_resources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SageMakerResourceName>> {
        &self.target_resources
    }
    /// <p>The requested start time that the user specified when searching for the training plan offering.</p>
    pub fn requested_start_time_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.requested_start_time_after = ::std::option::Option::Some(input);
        self
    }
    /// <p>The requested start time that the user specified when searching for the training plan offering.</p>
    pub fn set_requested_start_time_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.requested_start_time_after = input;
        self
    }
    /// <p>The requested start time that the user specified when searching for the training plan offering.</p>
    pub fn get_requested_start_time_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.requested_start_time_after
    }
    /// <p>The requested end time that the user specified when searching for the training plan offering.</p>
    pub fn requested_end_time_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.requested_end_time_before = ::std::option::Option::Some(input);
        self
    }
    /// <p>The requested end time that the user specified when searching for the training plan offering.</p>
    pub fn set_requested_end_time_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.requested_end_time_before = input;
        self
    }
    /// <p>The requested end time that the user specified when searching for the training plan offering.</p>
    pub fn get_requested_end_time_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.requested_end_time_before
    }
    /// <p>The number of whole hours in the total duration for this training plan offering.</p>
    pub fn duration_hours(mut self, input: i64) -> Self {
        self.duration_hours = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of whole hours in the total duration for this training plan offering.</p>
    pub fn set_duration_hours(mut self, input: ::std::option::Option<i64>) -> Self {
        self.duration_hours = input;
        self
    }
    /// <p>The number of whole hours in the total duration for this training plan offering.</p>
    pub fn get_duration_hours(&self) -> &::std::option::Option<i64> {
        &self.duration_hours
    }
    /// <p>The additional minutes beyond whole hours in the total duration for this training plan offering.</p>
    pub fn duration_minutes(mut self, input: i64) -> Self {
        self.duration_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The additional minutes beyond whole hours in the total duration for this training plan offering.</p>
    pub fn set_duration_minutes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.duration_minutes = input;
        self
    }
    /// <p>The additional minutes beyond whole hours in the total duration for this training plan offering.</p>
    pub fn get_duration_minutes(&self) -> &::std::option::Option<i64> {
        &self.duration_minutes
    }
    /// <p>The upfront fee for this training plan offering.</p>
    pub fn upfront_fee(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.upfront_fee = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The upfront fee for this training plan offering.</p>
    pub fn set_upfront_fee(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.upfront_fee = input;
        self
    }
    /// <p>The upfront fee for this training plan offering.</p>
    pub fn get_upfront_fee(&self) -> &::std::option::Option<::std::string::String> {
        &self.upfront_fee
    }
    /// <p>The currency code for the upfront fee (e.g., USD).</p>
    pub fn currency_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.currency_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The currency code for the upfront fee (e.g., USD).</p>
    pub fn set_currency_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.currency_code = input;
        self
    }
    /// <p>The currency code for the upfront fee (e.g., USD).</p>
    pub fn get_currency_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.currency_code
    }
    /// Appends an item to `reserved_capacity_offerings`.
    ///
    /// To override the contents of this collection use [`set_reserved_capacity_offerings`](Self::set_reserved_capacity_offerings).
    ///
    /// <p>A list of reserved capacity offerings associated with this training plan offering.</p>
    pub fn reserved_capacity_offerings(mut self, input: crate::types::ReservedCapacityOffering) -> Self {
        let mut v = self.reserved_capacity_offerings.unwrap_or_default();
        v.push(input);
        self.reserved_capacity_offerings = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of reserved capacity offerings associated with this training plan offering.</p>
    pub fn set_reserved_capacity_offerings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ReservedCapacityOffering>>) -> Self {
        self.reserved_capacity_offerings = input;
        self
    }
    /// <p>A list of reserved capacity offerings associated with this training plan offering.</p>
    pub fn get_reserved_capacity_offerings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ReservedCapacityOffering>> {
        &self.reserved_capacity_offerings
    }
    /// Consumes the builder and constructs a [`TrainingPlanOffering`](crate::types::TrainingPlanOffering).
    pub fn build(self) -> crate::types::TrainingPlanOffering {
        crate::types::TrainingPlanOffering {
            training_plan_offering_id: self.training_plan_offering_id,
            target_resources: self.target_resources,
            requested_start_time_after: self.requested_start_time_after,
            requested_end_time_before: self.requested_end_time_before,
            duration_hours: self.duration_hours,
            duration_minutes: self.duration_minutes,
            upfront_fee: self.upfront_fee,
            currency_code: self.currency_code,
            reserved_capacity_offerings: self.reserved_capacity_offerings,
        }
    }
}
