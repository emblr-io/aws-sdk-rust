// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings related to idle shutdown of Studio applications.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IdleSettings {
    /// <p>Indicates whether idle shutdown is activated for the application type.</p>
    pub lifecycle_management: ::std::option::Option<crate::types::LifecycleManagement>,
    /// <p>The time that SageMaker waits after the application becomes idle before shutting it down.</p>
    pub idle_timeout_in_minutes: ::std::option::Option<i32>,
    /// <p>The minimum value in minutes that custom idle shutdown can be set to by the user.</p>
    pub min_idle_timeout_in_minutes: ::std::option::Option<i32>,
    /// <p>The maximum value in minutes that custom idle shutdown can be set to by the user.</p>
    pub max_idle_timeout_in_minutes: ::std::option::Option<i32>,
}
impl IdleSettings {
    /// <p>Indicates whether idle shutdown is activated for the application type.</p>
    pub fn lifecycle_management(&self) -> ::std::option::Option<&crate::types::LifecycleManagement> {
        self.lifecycle_management.as_ref()
    }
    /// <p>The time that SageMaker waits after the application becomes idle before shutting it down.</p>
    pub fn idle_timeout_in_minutes(&self) -> ::std::option::Option<i32> {
        self.idle_timeout_in_minutes
    }
    /// <p>The minimum value in minutes that custom idle shutdown can be set to by the user.</p>
    pub fn min_idle_timeout_in_minutes(&self) -> ::std::option::Option<i32> {
        self.min_idle_timeout_in_minutes
    }
    /// <p>The maximum value in minutes that custom idle shutdown can be set to by the user.</p>
    pub fn max_idle_timeout_in_minutes(&self) -> ::std::option::Option<i32> {
        self.max_idle_timeout_in_minutes
    }
}
impl IdleSettings {
    /// Creates a new builder-style object to manufacture [`IdleSettings`](crate::types::IdleSettings).
    pub fn builder() -> crate::types::builders::IdleSettingsBuilder {
        crate::types::builders::IdleSettingsBuilder::default()
    }
}

/// A builder for [`IdleSettings`](crate::types::IdleSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IdleSettingsBuilder {
    pub(crate) lifecycle_management: ::std::option::Option<crate::types::LifecycleManagement>,
    pub(crate) idle_timeout_in_minutes: ::std::option::Option<i32>,
    pub(crate) min_idle_timeout_in_minutes: ::std::option::Option<i32>,
    pub(crate) max_idle_timeout_in_minutes: ::std::option::Option<i32>,
}
impl IdleSettingsBuilder {
    /// <p>Indicates whether idle shutdown is activated for the application type.</p>
    pub fn lifecycle_management(mut self, input: crate::types::LifecycleManagement) -> Self {
        self.lifecycle_management = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether idle shutdown is activated for the application type.</p>
    pub fn set_lifecycle_management(mut self, input: ::std::option::Option<crate::types::LifecycleManagement>) -> Self {
        self.lifecycle_management = input;
        self
    }
    /// <p>Indicates whether idle shutdown is activated for the application type.</p>
    pub fn get_lifecycle_management(&self) -> &::std::option::Option<crate::types::LifecycleManagement> {
        &self.lifecycle_management
    }
    /// <p>The time that SageMaker waits after the application becomes idle before shutting it down.</p>
    pub fn idle_timeout_in_minutes(mut self, input: i32) -> Self {
        self.idle_timeout_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that SageMaker waits after the application becomes idle before shutting it down.</p>
    pub fn set_idle_timeout_in_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.idle_timeout_in_minutes = input;
        self
    }
    /// <p>The time that SageMaker waits after the application becomes idle before shutting it down.</p>
    pub fn get_idle_timeout_in_minutes(&self) -> &::std::option::Option<i32> {
        &self.idle_timeout_in_minutes
    }
    /// <p>The minimum value in minutes that custom idle shutdown can be set to by the user.</p>
    pub fn min_idle_timeout_in_minutes(mut self, input: i32) -> Self {
        self.min_idle_timeout_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum value in minutes that custom idle shutdown can be set to by the user.</p>
    pub fn set_min_idle_timeout_in_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.min_idle_timeout_in_minutes = input;
        self
    }
    /// <p>The minimum value in minutes that custom idle shutdown can be set to by the user.</p>
    pub fn get_min_idle_timeout_in_minutes(&self) -> &::std::option::Option<i32> {
        &self.min_idle_timeout_in_minutes
    }
    /// <p>The maximum value in minutes that custom idle shutdown can be set to by the user.</p>
    pub fn max_idle_timeout_in_minutes(mut self, input: i32) -> Self {
        self.max_idle_timeout_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum value in minutes that custom idle shutdown can be set to by the user.</p>
    pub fn set_max_idle_timeout_in_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_idle_timeout_in_minutes = input;
        self
    }
    /// <p>The maximum value in minutes that custom idle shutdown can be set to by the user.</p>
    pub fn get_max_idle_timeout_in_minutes(&self) -> &::std::option::Option<i32> {
        &self.max_idle_timeout_in_minutes
    }
    /// Consumes the builder and constructs a [`IdleSettings`](crate::types::IdleSettings).
    pub fn build(self) -> crate::types::IdleSettings {
        crate::types::IdleSettings {
            lifecycle_management: self.lifecycle_management,
            idle_timeout_in_minutes: self.idle_timeout_in_minutes,
            min_idle_timeout_in_minutes: self.min_idle_timeout_in_minutes,
            max_idle_timeout_in_minutes: self.max_idle_timeout_in_minutes,
        }
    }
}
