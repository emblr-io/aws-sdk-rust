// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about an ML capacity reservation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProductionVariantCapacityReservationSummary {
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the ML capacity reservation that SageMaker AI applies when it deploys the endpoint.</p>
    pub ml_reservation_arn: ::std::option::Option<::std::string::String>,
    /// <p>The option that you chose for the capacity reservation. SageMaker AI supports the following options:</p>
    /// <dl>
    /// <dt>
    /// capacity-reservations-only
    /// </dt>
    /// <dd>
    /// <p>SageMaker AI launches instances only into an ML capacity reservation. If no capacity is available, the instances fail to launch.</p>
    /// </dd>
    /// </dl>
    pub capacity_reservation_preference: ::std::option::Option<crate::types::CapacityReservationPreference>,
    /// <p>The number of instances that you allocated to the ML capacity reservation.</p>
    pub total_instance_count: ::std::option::Option<i32>,
    /// <p>The number of instances that are currently available in the ML capacity reservation.</p>
    pub available_instance_count: ::std::option::Option<i32>,
    /// <p>The number of instances from the ML capacity reservation that are being used by the endpoint.</p>
    pub used_by_current_endpoint: ::std::option::Option<i32>,
    /// <p>The EC2 capacity reservations that are shared to this ML capacity reservation, if any.</p>
    pub ec2_capacity_reservations: ::std::option::Option<::std::vec::Vec<crate::types::Ec2CapacityReservation>>,
}
impl ProductionVariantCapacityReservationSummary {
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the ML capacity reservation that SageMaker AI applies when it deploys the endpoint.</p>
    pub fn ml_reservation_arn(&self) -> ::std::option::Option<&str> {
        self.ml_reservation_arn.as_deref()
    }
    /// <p>The option that you chose for the capacity reservation. SageMaker AI supports the following options:</p>
    /// <dl>
    /// <dt>
    /// capacity-reservations-only
    /// </dt>
    /// <dd>
    /// <p>SageMaker AI launches instances only into an ML capacity reservation. If no capacity is available, the instances fail to launch.</p>
    /// </dd>
    /// </dl>
    pub fn capacity_reservation_preference(&self) -> ::std::option::Option<&crate::types::CapacityReservationPreference> {
        self.capacity_reservation_preference.as_ref()
    }
    /// <p>The number of instances that you allocated to the ML capacity reservation.</p>
    pub fn total_instance_count(&self) -> ::std::option::Option<i32> {
        self.total_instance_count
    }
    /// <p>The number of instances that are currently available in the ML capacity reservation.</p>
    pub fn available_instance_count(&self) -> ::std::option::Option<i32> {
        self.available_instance_count
    }
    /// <p>The number of instances from the ML capacity reservation that are being used by the endpoint.</p>
    pub fn used_by_current_endpoint(&self) -> ::std::option::Option<i32> {
        self.used_by_current_endpoint
    }
    /// <p>The EC2 capacity reservations that are shared to this ML capacity reservation, if any.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ec2_capacity_reservations.is_none()`.
    pub fn ec2_capacity_reservations(&self) -> &[crate::types::Ec2CapacityReservation] {
        self.ec2_capacity_reservations.as_deref().unwrap_or_default()
    }
}
impl ProductionVariantCapacityReservationSummary {
    /// Creates a new builder-style object to manufacture [`ProductionVariantCapacityReservationSummary`](crate::types::ProductionVariantCapacityReservationSummary).
    pub fn builder() -> crate::types::builders::ProductionVariantCapacityReservationSummaryBuilder {
        crate::types::builders::ProductionVariantCapacityReservationSummaryBuilder::default()
    }
}

/// A builder for [`ProductionVariantCapacityReservationSummary`](crate::types::ProductionVariantCapacityReservationSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProductionVariantCapacityReservationSummaryBuilder {
    pub(crate) ml_reservation_arn: ::std::option::Option<::std::string::String>,
    pub(crate) capacity_reservation_preference: ::std::option::Option<crate::types::CapacityReservationPreference>,
    pub(crate) total_instance_count: ::std::option::Option<i32>,
    pub(crate) available_instance_count: ::std::option::Option<i32>,
    pub(crate) used_by_current_endpoint: ::std::option::Option<i32>,
    pub(crate) ec2_capacity_reservations: ::std::option::Option<::std::vec::Vec<crate::types::Ec2CapacityReservation>>,
}
impl ProductionVariantCapacityReservationSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the ML capacity reservation that SageMaker AI applies when it deploys the endpoint.</p>
    pub fn ml_reservation_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ml_reservation_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the ML capacity reservation that SageMaker AI applies when it deploys the endpoint.</p>
    pub fn set_ml_reservation_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ml_reservation_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the ML capacity reservation that SageMaker AI applies when it deploys the endpoint.</p>
    pub fn get_ml_reservation_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.ml_reservation_arn
    }
    /// <p>The option that you chose for the capacity reservation. SageMaker AI supports the following options:</p>
    /// <dl>
    /// <dt>
    /// capacity-reservations-only
    /// </dt>
    /// <dd>
    /// <p>SageMaker AI launches instances only into an ML capacity reservation. If no capacity is available, the instances fail to launch.</p>
    /// </dd>
    /// </dl>
    pub fn capacity_reservation_preference(mut self, input: crate::types::CapacityReservationPreference) -> Self {
        self.capacity_reservation_preference = ::std::option::Option::Some(input);
        self
    }
    /// <p>The option that you chose for the capacity reservation. SageMaker AI supports the following options:</p>
    /// <dl>
    /// <dt>
    /// capacity-reservations-only
    /// </dt>
    /// <dd>
    /// <p>SageMaker AI launches instances only into an ML capacity reservation. If no capacity is available, the instances fail to launch.</p>
    /// </dd>
    /// </dl>
    pub fn set_capacity_reservation_preference(mut self, input: ::std::option::Option<crate::types::CapacityReservationPreference>) -> Self {
        self.capacity_reservation_preference = input;
        self
    }
    /// <p>The option that you chose for the capacity reservation. SageMaker AI supports the following options:</p>
    /// <dl>
    /// <dt>
    /// capacity-reservations-only
    /// </dt>
    /// <dd>
    /// <p>SageMaker AI launches instances only into an ML capacity reservation. If no capacity is available, the instances fail to launch.</p>
    /// </dd>
    /// </dl>
    pub fn get_capacity_reservation_preference(&self) -> &::std::option::Option<crate::types::CapacityReservationPreference> {
        &self.capacity_reservation_preference
    }
    /// <p>The number of instances that you allocated to the ML capacity reservation.</p>
    pub fn total_instance_count(mut self, input: i32) -> Self {
        self.total_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of instances that you allocated to the ML capacity reservation.</p>
    pub fn set_total_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_instance_count = input;
        self
    }
    /// <p>The number of instances that you allocated to the ML capacity reservation.</p>
    pub fn get_total_instance_count(&self) -> &::std::option::Option<i32> {
        &self.total_instance_count
    }
    /// <p>The number of instances that are currently available in the ML capacity reservation.</p>
    pub fn available_instance_count(mut self, input: i32) -> Self {
        self.available_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of instances that are currently available in the ML capacity reservation.</p>
    pub fn set_available_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.available_instance_count = input;
        self
    }
    /// <p>The number of instances that are currently available in the ML capacity reservation.</p>
    pub fn get_available_instance_count(&self) -> &::std::option::Option<i32> {
        &self.available_instance_count
    }
    /// <p>The number of instances from the ML capacity reservation that are being used by the endpoint.</p>
    pub fn used_by_current_endpoint(mut self, input: i32) -> Self {
        self.used_by_current_endpoint = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of instances from the ML capacity reservation that are being used by the endpoint.</p>
    pub fn set_used_by_current_endpoint(mut self, input: ::std::option::Option<i32>) -> Self {
        self.used_by_current_endpoint = input;
        self
    }
    /// <p>The number of instances from the ML capacity reservation that are being used by the endpoint.</p>
    pub fn get_used_by_current_endpoint(&self) -> &::std::option::Option<i32> {
        &self.used_by_current_endpoint
    }
    /// Appends an item to `ec2_capacity_reservations`.
    ///
    /// To override the contents of this collection use [`set_ec2_capacity_reservations`](Self::set_ec2_capacity_reservations).
    ///
    /// <p>The EC2 capacity reservations that are shared to this ML capacity reservation, if any.</p>
    pub fn ec2_capacity_reservations(mut self, input: crate::types::Ec2CapacityReservation) -> Self {
        let mut v = self.ec2_capacity_reservations.unwrap_or_default();
        v.push(input);
        self.ec2_capacity_reservations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The EC2 capacity reservations that are shared to this ML capacity reservation, if any.</p>
    pub fn set_ec2_capacity_reservations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Ec2CapacityReservation>>) -> Self {
        self.ec2_capacity_reservations = input;
        self
    }
    /// <p>The EC2 capacity reservations that are shared to this ML capacity reservation, if any.</p>
    pub fn get_ec2_capacity_reservations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Ec2CapacityReservation>> {
        &self.ec2_capacity_reservations
    }
    /// Consumes the builder and constructs a [`ProductionVariantCapacityReservationSummary`](crate::types::ProductionVariantCapacityReservationSummary).
    pub fn build(self) -> crate::types::ProductionVariantCapacityReservationSummary {
        crate::types::ProductionVariantCapacityReservationSummary {
            ml_reservation_arn: self.ml_reservation_arn,
            capacity_reservation_preference: self.capacity_reservation_preference,
            total_instance_count: self.total_instance_count,
            available_instance_count: self.available_instance_count,
            used_by_current_endpoint: self.used_by_current_endpoint,
            ec2_capacity_reservations: self.ec2_capacity_reservations,
        }
    }
}
