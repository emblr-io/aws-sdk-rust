// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configurations that SageMaker uses when updating the AMI versions.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RollingDeploymentPolicy {
    /// <p>The maximum amount of instances in the cluster that SageMaker can update at a time.</p>
    pub maximum_batch_size: ::std::option::Option<crate::types::CapacitySizeConfig>,
    /// <p>The maximum amount of instances in the cluster that SageMaker can roll back at a time.</p>
    pub rollback_maximum_batch_size: ::std::option::Option<crate::types::CapacitySizeConfig>,
}
impl RollingDeploymentPolicy {
    /// <p>The maximum amount of instances in the cluster that SageMaker can update at a time.</p>
    pub fn maximum_batch_size(&self) -> ::std::option::Option<&crate::types::CapacitySizeConfig> {
        self.maximum_batch_size.as_ref()
    }
    /// <p>The maximum amount of instances in the cluster that SageMaker can roll back at a time.</p>
    pub fn rollback_maximum_batch_size(&self) -> ::std::option::Option<&crate::types::CapacitySizeConfig> {
        self.rollback_maximum_batch_size.as_ref()
    }
}
impl RollingDeploymentPolicy {
    /// Creates a new builder-style object to manufacture [`RollingDeploymentPolicy`](crate::types::RollingDeploymentPolicy).
    pub fn builder() -> crate::types::builders::RollingDeploymentPolicyBuilder {
        crate::types::builders::RollingDeploymentPolicyBuilder::default()
    }
}

/// A builder for [`RollingDeploymentPolicy`](crate::types::RollingDeploymentPolicy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RollingDeploymentPolicyBuilder {
    pub(crate) maximum_batch_size: ::std::option::Option<crate::types::CapacitySizeConfig>,
    pub(crate) rollback_maximum_batch_size: ::std::option::Option<crate::types::CapacitySizeConfig>,
}
impl RollingDeploymentPolicyBuilder {
    /// <p>The maximum amount of instances in the cluster that SageMaker can update at a time.</p>
    /// This field is required.
    pub fn maximum_batch_size(mut self, input: crate::types::CapacitySizeConfig) -> Self {
        self.maximum_batch_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum amount of instances in the cluster that SageMaker can update at a time.</p>
    pub fn set_maximum_batch_size(mut self, input: ::std::option::Option<crate::types::CapacitySizeConfig>) -> Self {
        self.maximum_batch_size = input;
        self
    }
    /// <p>The maximum amount of instances in the cluster that SageMaker can update at a time.</p>
    pub fn get_maximum_batch_size(&self) -> &::std::option::Option<crate::types::CapacitySizeConfig> {
        &self.maximum_batch_size
    }
    /// <p>The maximum amount of instances in the cluster that SageMaker can roll back at a time.</p>
    pub fn rollback_maximum_batch_size(mut self, input: crate::types::CapacitySizeConfig) -> Self {
        self.rollback_maximum_batch_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum amount of instances in the cluster that SageMaker can roll back at a time.</p>
    pub fn set_rollback_maximum_batch_size(mut self, input: ::std::option::Option<crate::types::CapacitySizeConfig>) -> Self {
        self.rollback_maximum_batch_size = input;
        self
    }
    /// <p>The maximum amount of instances in the cluster that SageMaker can roll back at a time.</p>
    pub fn get_rollback_maximum_batch_size(&self) -> &::std::option::Option<crate::types::CapacitySizeConfig> {
        &self.rollback_maximum_batch_size
    }
    /// Consumes the builder and constructs a [`RollingDeploymentPolicy`](crate::types::RollingDeploymentPolicy).
    pub fn build(self) -> crate::types::RollingDeploymentPolicy {
        crate::types::RollingDeploymentPolicy {
            maximum_batch_size: self.maximum_batch_size,
            rollback_maximum_batch_size: self.rollback_maximum_batch_size,
        }
    }
}
