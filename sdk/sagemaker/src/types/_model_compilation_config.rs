// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings for the model compilation technique that's applied by a model optimization job.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModelCompilationConfig {
    /// <p>The URI of an LMI DLC in Amazon ECR. SageMaker uses this image to run the optimization.</p>
    pub image: ::std::option::Option<::std::string::String>,
    /// <p>Environment variables that override the default ones in the model container.</p>
    pub override_environment: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ModelCompilationConfig {
    /// <p>The URI of an LMI DLC in Amazon ECR. SageMaker uses this image to run the optimization.</p>
    pub fn image(&self) -> ::std::option::Option<&str> {
        self.image.as_deref()
    }
    /// <p>Environment variables that override the default ones in the model container.</p>
    pub fn override_environment(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.override_environment.as_ref()
    }
}
impl ModelCompilationConfig {
    /// Creates a new builder-style object to manufacture [`ModelCompilationConfig`](crate::types::ModelCompilationConfig).
    pub fn builder() -> crate::types::builders::ModelCompilationConfigBuilder {
        crate::types::builders::ModelCompilationConfigBuilder::default()
    }
}

/// A builder for [`ModelCompilationConfig`](crate::types::ModelCompilationConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ModelCompilationConfigBuilder {
    pub(crate) image: ::std::option::Option<::std::string::String>,
    pub(crate) override_environment: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ModelCompilationConfigBuilder {
    /// <p>The URI of an LMI DLC in Amazon ECR. SageMaker uses this image to run the optimization.</p>
    pub fn image(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URI of an LMI DLC in Amazon ECR. SageMaker uses this image to run the optimization.</p>
    pub fn set_image(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image = input;
        self
    }
    /// <p>The URI of an LMI DLC in Amazon ECR. SageMaker uses this image to run the optimization.</p>
    pub fn get_image(&self) -> &::std::option::Option<::std::string::String> {
        &self.image
    }
    /// Adds a key-value pair to `override_environment`.
    ///
    /// To override the contents of this collection use [`set_override_environment`](Self::set_override_environment).
    ///
    /// <p>Environment variables that override the default ones in the model container.</p>
    pub fn override_environment(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.override_environment.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.override_environment = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Environment variables that override the default ones in the model container.</p>
    pub fn set_override_environment(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.override_environment = input;
        self
    }
    /// <p>Environment variables that override the default ones in the model container.</p>
    pub fn get_override_environment(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.override_environment
    }
    /// Consumes the builder and constructs a [`ModelCompilationConfig`](crate::types::ModelCompilationConfig).
    pub fn build(self) -> crate::types::ModelCompilationConfig {
        crate::types::ModelCompilationConfig {
            image: self.image,
            override_environment: self.override_environment,
        }
    }
}
