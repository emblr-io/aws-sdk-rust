// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A Git repository that SageMaker AI automatically displays to users for cloning in the JupyterServer application.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeRepository {
    /// <p>The URL of the Git repository.</p>
    pub repository_url: ::std::option::Option<::std::string::String>,
}
impl CodeRepository {
    /// <p>The URL of the Git repository.</p>
    pub fn repository_url(&self) -> ::std::option::Option<&str> {
        self.repository_url.as_deref()
    }
}
impl CodeRepository {
    /// Creates a new builder-style object to manufacture [`CodeRepository`](crate::types::CodeRepository).
    pub fn builder() -> crate::types::builders::CodeRepositoryBuilder {
        crate::types::builders::CodeRepositoryBuilder::default()
    }
}

/// A builder for [`CodeRepository`](crate::types::CodeRepository).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CodeRepositoryBuilder {
    pub(crate) repository_url: ::std::option::Option<::std::string::String>,
}
impl CodeRepositoryBuilder {
    /// <p>The URL of the Git repository.</p>
    /// This field is required.
    pub fn repository_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repository_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of the Git repository.</p>
    pub fn set_repository_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repository_url = input;
        self
    }
    /// <p>The URL of the Git repository.</p>
    pub fn get_repository_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.repository_url
    }
    /// Consumes the builder and constructs a [`CodeRepository`](crate::types::CodeRepository).
    pub fn build(self) -> crate::types::CodeRepository {
        crate::types::CodeRepository {
            repository_url: self.repository_url,
        }
    }
}
