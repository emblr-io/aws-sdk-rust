// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration to use when updating the AMI versions.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeploymentConfiguration {
    /// <p>The policy that SageMaker uses when updating the AMI versions of the cluster.</p>
    pub rolling_update_policy: ::std::option::Option<crate::types::RollingDeploymentPolicy>,
    /// <p>The duration in seconds that SageMaker waits before updating more instances in the cluster.</p>
    pub wait_interval_in_seconds: ::std::option::Option<i32>,
    /// <p>An array that contains the alarms that SageMaker monitors to know whether to roll back the AMI update.</p>
    pub auto_rollback_configuration: ::std::option::Option<::std::vec::Vec<crate::types::AlarmDetails>>,
}
impl DeploymentConfiguration {
    /// <p>The policy that SageMaker uses when updating the AMI versions of the cluster.</p>
    pub fn rolling_update_policy(&self) -> ::std::option::Option<&crate::types::RollingDeploymentPolicy> {
        self.rolling_update_policy.as_ref()
    }
    /// <p>The duration in seconds that SageMaker waits before updating more instances in the cluster.</p>
    pub fn wait_interval_in_seconds(&self) -> ::std::option::Option<i32> {
        self.wait_interval_in_seconds
    }
    /// <p>An array that contains the alarms that SageMaker monitors to know whether to roll back the AMI update.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.auto_rollback_configuration.is_none()`.
    pub fn auto_rollback_configuration(&self) -> &[crate::types::AlarmDetails] {
        self.auto_rollback_configuration.as_deref().unwrap_or_default()
    }
}
impl DeploymentConfiguration {
    /// Creates a new builder-style object to manufacture [`DeploymentConfiguration`](crate::types::DeploymentConfiguration).
    pub fn builder() -> crate::types::builders::DeploymentConfigurationBuilder {
        crate::types::builders::DeploymentConfigurationBuilder::default()
    }
}

/// A builder for [`DeploymentConfiguration`](crate::types::DeploymentConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeploymentConfigurationBuilder {
    pub(crate) rolling_update_policy: ::std::option::Option<crate::types::RollingDeploymentPolicy>,
    pub(crate) wait_interval_in_seconds: ::std::option::Option<i32>,
    pub(crate) auto_rollback_configuration: ::std::option::Option<::std::vec::Vec<crate::types::AlarmDetails>>,
}
impl DeploymentConfigurationBuilder {
    /// <p>The policy that SageMaker uses when updating the AMI versions of the cluster.</p>
    pub fn rolling_update_policy(mut self, input: crate::types::RollingDeploymentPolicy) -> Self {
        self.rolling_update_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The policy that SageMaker uses when updating the AMI versions of the cluster.</p>
    pub fn set_rolling_update_policy(mut self, input: ::std::option::Option<crate::types::RollingDeploymentPolicy>) -> Self {
        self.rolling_update_policy = input;
        self
    }
    /// <p>The policy that SageMaker uses when updating the AMI versions of the cluster.</p>
    pub fn get_rolling_update_policy(&self) -> &::std::option::Option<crate::types::RollingDeploymentPolicy> {
        &self.rolling_update_policy
    }
    /// <p>The duration in seconds that SageMaker waits before updating more instances in the cluster.</p>
    pub fn wait_interval_in_seconds(mut self, input: i32) -> Self {
        self.wait_interval_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The duration in seconds that SageMaker waits before updating more instances in the cluster.</p>
    pub fn set_wait_interval_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.wait_interval_in_seconds = input;
        self
    }
    /// <p>The duration in seconds that SageMaker waits before updating more instances in the cluster.</p>
    pub fn get_wait_interval_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.wait_interval_in_seconds
    }
    /// Appends an item to `auto_rollback_configuration`.
    ///
    /// To override the contents of this collection use [`set_auto_rollback_configuration`](Self::set_auto_rollback_configuration).
    ///
    /// <p>An array that contains the alarms that SageMaker monitors to know whether to roll back the AMI update.</p>
    pub fn auto_rollback_configuration(mut self, input: crate::types::AlarmDetails) -> Self {
        let mut v = self.auto_rollback_configuration.unwrap_or_default();
        v.push(input);
        self.auto_rollback_configuration = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array that contains the alarms that SageMaker monitors to know whether to roll back the AMI update.</p>
    pub fn set_auto_rollback_configuration(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AlarmDetails>>) -> Self {
        self.auto_rollback_configuration = input;
        self
    }
    /// <p>An array that contains the alarms that SageMaker monitors to know whether to roll back the AMI update.</p>
    pub fn get_auto_rollback_configuration(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AlarmDetails>> {
        &self.auto_rollback_configuration
    }
    /// Consumes the builder and constructs a [`DeploymentConfiguration`](crate::types::DeploymentConfiguration).
    pub fn build(self) -> crate::types::DeploymentConfiguration {
        crate::types::DeploymentConfiguration {
            rolling_update_policy: self.rolling_update_policy,
            wait_interval_in_seconds: self.wait_interval_in_seconds,
            auto_rollback_configuration: self.auto_rollback_configuration,
        }
    }
}
