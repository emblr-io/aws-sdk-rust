// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of an instance group in a SageMaker HyperPod cluster.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClusterInstanceGroupDetails {
    /// <p>The number of instances that are currently in the instance group of a SageMaker HyperPod cluster.</p>
    pub current_count: ::std::option::Option<i32>,
    /// <p>The number of instances you specified to add to the instance group of a SageMaker HyperPod cluster.</p>
    pub target_count: ::std::option::Option<i32>,
    /// <p>The name of the instance group of a SageMaker HyperPod cluster.</p>
    pub instance_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The instance type of the instance group of a SageMaker HyperPod cluster.</p>
    pub instance_type: ::std::option::Option<crate::types::ClusterInstanceType>,
    /// <p>Details of LifeCycle configuration for the instance group.</p>
    pub life_cycle_config: ::std::option::Option<crate::types::ClusterLifeCycleConfig>,
    /// <p>The execution role for the instance group to assume.</p>
    pub execution_role: ::std::option::Option<::std::string::String>,
    /// <p>The number you specified to <code>TreadsPerCore</code> in <code>CreateCluster</code> for enabling or disabling multithreading. For instance types that support multithreading, you can specify 1 for disabling multithreading and 2 for enabling multithreading. For more information, see the reference table of <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cpu-options-supported-instances-values.html">CPU cores and threads per CPU core per instance type</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub threads_per_core: ::std::option::Option<i32>,
    /// <p>The additional storage configurations for the instances in the SageMaker HyperPod cluster instance group.</p>
    pub instance_storage_configs: ::std::option::Option<::std::vec::Vec<crate::types::ClusterInstanceStorageConfig>>,
    /// <p>A flag indicating whether deep health checks should be performed when the cluster instance group is created or updated.</p>
    pub on_start_deep_health_checks: ::std::option::Option<::std::vec::Vec<crate::types::DeepHealthCheckType>>,
    /// <p>The current status of the cluster instance group.</p>
    /// <ul>
    /// <li>
    /// <p><code>InService</code>: The instance group is active and healthy.</p></li>
    /// <li>
    /// <p><code>Creating</code>: The instance group is being provisioned.</p></li>
    /// <li>
    /// <p><code>Updating</code>: The instance group is being updated.</p></li>
    /// <li>
    /// <p><code>Failed</code>: The instance group has failed to provision or is no longer healthy.</p></li>
    /// <li>
    /// <p><code>Degraded</code>: The instance group is degraded, meaning that some instances have failed to provision or are no longer healthy.</p></li>
    /// <li>
    /// <p><code>Deleting</code>: The instance group is being deleted.</p></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::InstanceGroupStatus>,
    /// <p>The Amazon Resource Name (ARN); of the training plan associated with this cluster instance group.</p>
    /// <p>For more information about how to reserve GPU capacity for your SageMaker HyperPod clusters using Amazon SageMaker Training Plan, see <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingPlan.html">CreateTrainingPlan</a> </code>.</p>
    pub training_plan_arn: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the training plan associated with this cluster instance group.</p>
    pub training_plan_status: ::std::option::Option<::std::string::String>,
    /// <p>The customized Amazon VPC configuration at the instance group level that overrides the default Amazon VPC configuration of the SageMaker HyperPod cluster.</p>
    pub override_vpc_config: ::std::option::Option<crate::types::VpcConfig>,
    /// <p>The configuration object of the schedule that SageMaker follows when updating the AMI.</p>
    pub scheduled_update_config: ::std::option::Option<crate::types::ScheduledUpdateConfig>,
}
impl ClusterInstanceGroupDetails {
    /// <p>The number of instances that are currently in the instance group of a SageMaker HyperPod cluster.</p>
    pub fn current_count(&self) -> ::std::option::Option<i32> {
        self.current_count
    }
    /// <p>The number of instances you specified to add to the instance group of a SageMaker HyperPod cluster.</p>
    pub fn target_count(&self) -> ::std::option::Option<i32> {
        self.target_count
    }
    /// <p>The name of the instance group of a SageMaker HyperPod cluster.</p>
    pub fn instance_group_name(&self) -> ::std::option::Option<&str> {
        self.instance_group_name.as_deref()
    }
    /// <p>The instance type of the instance group of a SageMaker HyperPod cluster.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&crate::types::ClusterInstanceType> {
        self.instance_type.as_ref()
    }
    /// <p>Details of LifeCycle configuration for the instance group.</p>
    pub fn life_cycle_config(&self) -> ::std::option::Option<&crate::types::ClusterLifeCycleConfig> {
        self.life_cycle_config.as_ref()
    }
    /// <p>The execution role for the instance group to assume.</p>
    pub fn execution_role(&self) -> ::std::option::Option<&str> {
        self.execution_role.as_deref()
    }
    /// <p>The number you specified to <code>TreadsPerCore</code> in <code>CreateCluster</code> for enabling or disabling multithreading. For instance types that support multithreading, you can specify 1 for disabling multithreading and 2 for enabling multithreading. For more information, see the reference table of <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cpu-options-supported-instances-values.html">CPU cores and threads per CPU core per instance type</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub fn threads_per_core(&self) -> ::std::option::Option<i32> {
        self.threads_per_core
    }
    /// <p>The additional storage configurations for the instances in the SageMaker HyperPod cluster instance group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instance_storage_configs.is_none()`.
    pub fn instance_storage_configs(&self) -> &[crate::types::ClusterInstanceStorageConfig] {
        self.instance_storage_configs.as_deref().unwrap_or_default()
    }
    /// <p>A flag indicating whether deep health checks should be performed when the cluster instance group is created or updated.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.on_start_deep_health_checks.is_none()`.
    pub fn on_start_deep_health_checks(&self) -> &[crate::types::DeepHealthCheckType] {
        self.on_start_deep_health_checks.as_deref().unwrap_or_default()
    }
    /// <p>The current status of the cluster instance group.</p>
    /// <ul>
    /// <li>
    /// <p><code>InService</code>: The instance group is active and healthy.</p></li>
    /// <li>
    /// <p><code>Creating</code>: The instance group is being provisioned.</p></li>
    /// <li>
    /// <p><code>Updating</code>: The instance group is being updated.</p></li>
    /// <li>
    /// <p><code>Failed</code>: The instance group has failed to provision or is no longer healthy.</p></li>
    /// <li>
    /// <p><code>Degraded</code>: The instance group is degraded, meaning that some instances have failed to provision or are no longer healthy.</p></li>
    /// <li>
    /// <p><code>Deleting</code>: The instance group is being deleted.</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::InstanceGroupStatus> {
        self.status.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN); of the training plan associated with this cluster instance group.</p>
    /// <p>For more information about how to reserve GPU capacity for your SageMaker HyperPod clusters using Amazon SageMaker Training Plan, see <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingPlan.html">CreateTrainingPlan</a> </code>.</p>
    pub fn training_plan_arn(&self) -> ::std::option::Option<&str> {
        self.training_plan_arn.as_deref()
    }
    /// <p>The current status of the training plan associated with this cluster instance group.</p>
    pub fn training_plan_status(&self) -> ::std::option::Option<&str> {
        self.training_plan_status.as_deref()
    }
    /// <p>The customized Amazon VPC configuration at the instance group level that overrides the default Amazon VPC configuration of the SageMaker HyperPod cluster.</p>
    pub fn override_vpc_config(&self) -> ::std::option::Option<&crate::types::VpcConfig> {
        self.override_vpc_config.as_ref()
    }
    /// <p>The configuration object of the schedule that SageMaker follows when updating the AMI.</p>
    pub fn scheduled_update_config(&self) -> ::std::option::Option<&crate::types::ScheduledUpdateConfig> {
        self.scheduled_update_config.as_ref()
    }
}
impl ClusterInstanceGroupDetails {
    /// Creates a new builder-style object to manufacture [`ClusterInstanceGroupDetails`](crate::types::ClusterInstanceGroupDetails).
    pub fn builder() -> crate::types::builders::ClusterInstanceGroupDetailsBuilder {
        crate::types::builders::ClusterInstanceGroupDetailsBuilder::default()
    }
}

/// A builder for [`ClusterInstanceGroupDetails`](crate::types::ClusterInstanceGroupDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ClusterInstanceGroupDetailsBuilder {
    pub(crate) current_count: ::std::option::Option<i32>,
    pub(crate) target_count: ::std::option::Option<i32>,
    pub(crate) instance_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) instance_type: ::std::option::Option<crate::types::ClusterInstanceType>,
    pub(crate) life_cycle_config: ::std::option::Option<crate::types::ClusterLifeCycleConfig>,
    pub(crate) execution_role: ::std::option::Option<::std::string::String>,
    pub(crate) threads_per_core: ::std::option::Option<i32>,
    pub(crate) instance_storage_configs: ::std::option::Option<::std::vec::Vec<crate::types::ClusterInstanceStorageConfig>>,
    pub(crate) on_start_deep_health_checks: ::std::option::Option<::std::vec::Vec<crate::types::DeepHealthCheckType>>,
    pub(crate) status: ::std::option::Option<crate::types::InstanceGroupStatus>,
    pub(crate) training_plan_arn: ::std::option::Option<::std::string::String>,
    pub(crate) training_plan_status: ::std::option::Option<::std::string::String>,
    pub(crate) override_vpc_config: ::std::option::Option<crate::types::VpcConfig>,
    pub(crate) scheduled_update_config: ::std::option::Option<crate::types::ScheduledUpdateConfig>,
}
impl ClusterInstanceGroupDetailsBuilder {
    /// <p>The number of instances that are currently in the instance group of a SageMaker HyperPod cluster.</p>
    pub fn current_count(mut self, input: i32) -> Self {
        self.current_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of instances that are currently in the instance group of a SageMaker HyperPod cluster.</p>
    pub fn set_current_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.current_count = input;
        self
    }
    /// <p>The number of instances that are currently in the instance group of a SageMaker HyperPod cluster.</p>
    pub fn get_current_count(&self) -> &::std::option::Option<i32> {
        &self.current_count
    }
    /// <p>The number of instances you specified to add to the instance group of a SageMaker HyperPod cluster.</p>
    pub fn target_count(mut self, input: i32) -> Self {
        self.target_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of instances you specified to add to the instance group of a SageMaker HyperPod cluster.</p>
    pub fn set_target_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.target_count = input;
        self
    }
    /// <p>The number of instances you specified to add to the instance group of a SageMaker HyperPod cluster.</p>
    pub fn get_target_count(&self) -> &::std::option::Option<i32> {
        &self.target_count
    }
    /// <p>The name of the instance group of a SageMaker HyperPod cluster.</p>
    pub fn instance_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the instance group of a SageMaker HyperPod cluster.</p>
    pub fn set_instance_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_group_name = input;
        self
    }
    /// <p>The name of the instance group of a SageMaker HyperPod cluster.</p>
    pub fn get_instance_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_group_name
    }
    /// <p>The instance type of the instance group of a SageMaker HyperPod cluster.</p>
    pub fn instance_type(mut self, input: crate::types::ClusterInstanceType) -> Self {
        self.instance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The instance type of the instance group of a SageMaker HyperPod cluster.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<crate::types::ClusterInstanceType>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The instance type of the instance group of a SageMaker HyperPod cluster.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<crate::types::ClusterInstanceType> {
        &self.instance_type
    }
    /// <p>Details of LifeCycle configuration for the instance group.</p>
    pub fn life_cycle_config(mut self, input: crate::types::ClusterLifeCycleConfig) -> Self {
        self.life_cycle_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details of LifeCycle configuration for the instance group.</p>
    pub fn set_life_cycle_config(mut self, input: ::std::option::Option<crate::types::ClusterLifeCycleConfig>) -> Self {
        self.life_cycle_config = input;
        self
    }
    /// <p>Details of LifeCycle configuration for the instance group.</p>
    pub fn get_life_cycle_config(&self) -> &::std::option::Option<crate::types::ClusterLifeCycleConfig> {
        &self.life_cycle_config
    }
    /// <p>The execution role for the instance group to assume.</p>
    pub fn execution_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The execution role for the instance group to assume.</p>
    pub fn set_execution_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role = input;
        self
    }
    /// <p>The execution role for the instance group to assume.</p>
    pub fn get_execution_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role
    }
    /// <p>The number you specified to <code>TreadsPerCore</code> in <code>CreateCluster</code> for enabling or disabling multithreading. For instance types that support multithreading, you can specify 1 for disabling multithreading and 2 for enabling multithreading. For more information, see the reference table of <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cpu-options-supported-instances-values.html">CPU cores and threads per CPU core per instance type</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub fn threads_per_core(mut self, input: i32) -> Self {
        self.threads_per_core = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number you specified to <code>TreadsPerCore</code> in <code>CreateCluster</code> for enabling or disabling multithreading. For instance types that support multithreading, you can specify 1 for disabling multithreading and 2 for enabling multithreading. For more information, see the reference table of <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cpu-options-supported-instances-values.html">CPU cores and threads per CPU core per instance type</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub fn set_threads_per_core(mut self, input: ::std::option::Option<i32>) -> Self {
        self.threads_per_core = input;
        self
    }
    /// <p>The number you specified to <code>TreadsPerCore</code> in <code>CreateCluster</code> for enabling or disabling multithreading. For instance types that support multithreading, you can specify 1 for disabling multithreading and 2 for enabling multithreading. For more information, see the reference table of <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cpu-options-supported-instances-values.html">CPU cores and threads per CPU core per instance type</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub fn get_threads_per_core(&self) -> &::std::option::Option<i32> {
        &self.threads_per_core
    }
    /// Appends an item to `instance_storage_configs`.
    ///
    /// To override the contents of this collection use [`set_instance_storage_configs`](Self::set_instance_storage_configs).
    ///
    /// <p>The additional storage configurations for the instances in the SageMaker HyperPod cluster instance group.</p>
    pub fn instance_storage_configs(mut self, input: crate::types::ClusterInstanceStorageConfig) -> Self {
        let mut v = self.instance_storage_configs.unwrap_or_default();
        v.push(input);
        self.instance_storage_configs = ::std::option::Option::Some(v);
        self
    }
    /// <p>The additional storage configurations for the instances in the SageMaker HyperPod cluster instance group.</p>
    pub fn set_instance_storage_configs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ClusterInstanceStorageConfig>>) -> Self {
        self.instance_storage_configs = input;
        self
    }
    /// <p>The additional storage configurations for the instances in the SageMaker HyperPod cluster instance group.</p>
    pub fn get_instance_storage_configs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ClusterInstanceStorageConfig>> {
        &self.instance_storage_configs
    }
    /// Appends an item to `on_start_deep_health_checks`.
    ///
    /// To override the contents of this collection use [`set_on_start_deep_health_checks`](Self::set_on_start_deep_health_checks).
    ///
    /// <p>A flag indicating whether deep health checks should be performed when the cluster instance group is created or updated.</p>
    pub fn on_start_deep_health_checks(mut self, input: crate::types::DeepHealthCheckType) -> Self {
        let mut v = self.on_start_deep_health_checks.unwrap_or_default();
        v.push(input);
        self.on_start_deep_health_checks = ::std::option::Option::Some(v);
        self
    }
    /// <p>A flag indicating whether deep health checks should be performed when the cluster instance group is created or updated.</p>
    pub fn set_on_start_deep_health_checks(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DeepHealthCheckType>>) -> Self {
        self.on_start_deep_health_checks = input;
        self
    }
    /// <p>A flag indicating whether deep health checks should be performed when the cluster instance group is created or updated.</p>
    pub fn get_on_start_deep_health_checks(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DeepHealthCheckType>> {
        &self.on_start_deep_health_checks
    }
    /// <p>The current status of the cluster instance group.</p>
    /// <ul>
    /// <li>
    /// <p><code>InService</code>: The instance group is active and healthy.</p></li>
    /// <li>
    /// <p><code>Creating</code>: The instance group is being provisioned.</p></li>
    /// <li>
    /// <p><code>Updating</code>: The instance group is being updated.</p></li>
    /// <li>
    /// <p><code>Failed</code>: The instance group has failed to provision or is no longer healthy.</p></li>
    /// <li>
    /// <p><code>Degraded</code>: The instance group is degraded, meaning that some instances have failed to provision or are no longer healthy.</p></li>
    /// <li>
    /// <p><code>Deleting</code>: The instance group is being deleted.</p></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::InstanceGroupStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the cluster instance group.</p>
    /// <ul>
    /// <li>
    /// <p><code>InService</code>: The instance group is active and healthy.</p></li>
    /// <li>
    /// <p><code>Creating</code>: The instance group is being provisioned.</p></li>
    /// <li>
    /// <p><code>Updating</code>: The instance group is being updated.</p></li>
    /// <li>
    /// <p><code>Failed</code>: The instance group has failed to provision or is no longer healthy.</p></li>
    /// <li>
    /// <p><code>Degraded</code>: The instance group is degraded, meaning that some instances have failed to provision or are no longer healthy.</p></li>
    /// <li>
    /// <p><code>Deleting</code>: The instance group is being deleted.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::InstanceGroupStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the cluster instance group.</p>
    /// <ul>
    /// <li>
    /// <p><code>InService</code>: The instance group is active and healthy.</p></li>
    /// <li>
    /// <p><code>Creating</code>: The instance group is being provisioned.</p></li>
    /// <li>
    /// <p><code>Updating</code>: The instance group is being updated.</p></li>
    /// <li>
    /// <p><code>Failed</code>: The instance group has failed to provision or is no longer healthy.</p></li>
    /// <li>
    /// <p><code>Degraded</code>: The instance group is degraded, meaning that some instances have failed to provision or are no longer healthy.</p></li>
    /// <li>
    /// <p><code>Deleting</code>: The instance group is being deleted.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::InstanceGroupStatus> {
        &self.status
    }
    /// <p>The Amazon Resource Name (ARN); of the training plan associated with this cluster instance group.</p>
    /// <p>For more information about how to reserve GPU capacity for your SageMaker HyperPod clusters using Amazon SageMaker Training Plan, see <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingPlan.html">CreateTrainingPlan</a> </code>.</p>
    pub fn training_plan_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.training_plan_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN); of the training plan associated with this cluster instance group.</p>
    /// <p>For more information about how to reserve GPU capacity for your SageMaker HyperPod clusters using Amazon SageMaker Training Plan, see <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingPlan.html">CreateTrainingPlan</a> </code>.</p>
    pub fn set_training_plan_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.training_plan_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN); of the training plan associated with this cluster instance group.</p>
    /// <p>For more information about how to reserve GPU capacity for your SageMaker HyperPod clusters using Amazon SageMaker Training Plan, see <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingPlan.html">CreateTrainingPlan</a> </code>.</p>
    pub fn get_training_plan_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.training_plan_arn
    }
    /// <p>The current status of the training plan associated with this cluster instance group.</p>
    pub fn training_plan_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.training_plan_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current status of the training plan associated with this cluster instance group.</p>
    pub fn set_training_plan_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.training_plan_status = input;
        self
    }
    /// <p>The current status of the training plan associated with this cluster instance group.</p>
    pub fn get_training_plan_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.training_plan_status
    }
    /// <p>The customized Amazon VPC configuration at the instance group level that overrides the default Amazon VPC configuration of the SageMaker HyperPod cluster.</p>
    pub fn override_vpc_config(mut self, input: crate::types::VpcConfig) -> Self {
        self.override_vpc_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The customized Amazon VPC configuration at the instance group level that overrides the default Amazon VPC configuration of the SageMaker HyperPod cluster.</p>
    pub fn set_override_vpc_config(mut self, input: ::std::option::Option<crate::types::VpcConfig>) -> Self {
        self.override_vpc_config = input;
        self
    }
    /// <p>The customized Amazon VPC configuration at the instance group level that overrides the default Amazon VPC configuration of the SageMaker HyperPod cluster.</p>
    pub fn get_override_vpc_config(&self) -> &::std::option::Option<crate::types::VpcConfig> {
        &self.override_vpc_config
    }
    /// <p>The configuration object of the schedule that SageMaker follows when updating the AMI.</p>
    pub fn scheduled_update_config(mut self, input: crate::types::ScheduledUpdateConfig) -> Self {
        self.scheduled_update_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration object of the schedule that SageMaker follows when updating the AMI.</p>
    pub fn set_scheduled_update_config(mut self, input: ::std::option::Option<crate::types::ScheduledUpdateConfig>) -> Self {
        self.scheduled_update_config = input;
        self
    }
    /// <p>The configuration object of the schedule that SageMaker follows when updating the AMI.</p>
    pub fn get_scheduled_update_config(&self) -> &::std::option::Option<crate::types::ScheduledUpdateConfig> {
        &self.scheduled_update_config
    }
    /// Consumes the builder and constructs a [`ClusterInstanceGroupDetails`](crate::types::ClusterInstanceGroupDetails).
    pub fn build(self) -> crate::types::ClusterInstanceGroupDetails {
        crate::types::ClusterInstanceGroupDetails {
            current_count: self.current_count,
            target_count: self.target_count,
            instance_group_name: self.instance_group_name,
            instance_type: self.instance_type,
            life_cycle_config: self.life_cycle_config,
            execution_role: self.execution_role,
            threads_per_core: self.threads_per_core,
            instance_storage_configs: self.instance_storage_configs,
            on_start_deep_health_checks: self.on_start_deep_health_checks,
            status: self.status,
            training_plan_arn: self.training_plan_arn,
            training_plan_status: self.training_plan_status,
            override_vpc_config: self.override_vpc_config,
            scheduled_update_config: self.scheduled_update_config,
        }
    }
}
