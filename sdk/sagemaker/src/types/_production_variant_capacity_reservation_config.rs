// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings for the capacity reservation for the compute instances that SageMaker AI reserves for an endpoint.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProductionVariantCapacityReservationConfig {
    /// <p>Options that you can choose for the capacity reservation. SageMaker AI supports the following options:</p>
    /// <dl>
    /// <dt>
    /// capacity-reservations-only
    /// </dt>
    /// <dd>
    /// <p>SageMaker AI launches instances only into an ML capacity reservation. If no capacity is available, the instances fail to launch.</p>
    /// </dd>
    /// </dl>
    pub capacity_reservation_preference: ::std::option::Option<crate::types::CapacityReservationPreference>,
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the ML capacity reservation that SageMaker AI applies when it deploys the endpoint.</p>
    pub ml_reservation_arn: ::std::option::Option<::std::string::String>,
}
impl ProductionVariantCapacityReservationConfig {
    /// <p>Options that you can choose for the capacity reservation. SageMaker AI supports the following options:</p>
    /// <dl>
    /// <dt>
    /// capacity-reservations-only
    /// </dt>
    /// <dd>
    /// <p>SageMaker AI launches instances only into an ML capacity reservation. If no capacity is available, the instances fail to launch.</p>
    /// </dd>
    /// </dl>
    pub fn capacity_reservation_preference(&self) -> ::std::option::Option<&crate::types::CapacityReservationPreference> {
        self.capacity_reservation_preference.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the ML capacity reservation that SageMaker AI applies when it deploys the endpoint.</p>
    pub fn ml_reservation_arn(&self) -> ::std::option::Option<&str> {
        self.ml_reservation_arn.as_deref()
    }
}
impl ProductionVariantCapacityReservationConfig {
    /// Creates a new builder-style object to manufacture [`ProductionVariantCapacityReservationConfig`](crate::types::ProductionVariantCapacityReservationConfig).
    pub fn builder() -> crate::types::builders::ProductionVariantCapacityReservationConfigBuilder {
        crate::types::builders::ProductionVariantCapacityReservationConfigBuilder::default()
    }
}

/// A builder for [`ProductionVariantCapacityReservationConfig`](crate::types::ProductionVariantCapacityReservationConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProductionVariantCapacityReservationConfigBuilder {
    pub(crate) capacity_reservation_preference: ::std::option::Option<crate::types::CapacityReservationPreference>,
    pub(crate) ml_reservation_arn: ::std::option::Option<::std::string::String>,
}
impl ProductionVariantCapacityReservationConfigBuilder {
    /// <p>Options that you can choose for the capacity reservation. SageMaker AI supports the following options:</p>
    /// <dl>
    /// <dt>
    /// capacity-reservations-only
    /// </dt>
    /// <dd>
    /// <p>SageMaker AI launches instances only into an ML capacity reservation. If no capacity is available, the instances fail to launch.</p>
    /// </dd>
    /// </dl>
    pub fn capacity_reservation_preference(mut self, input: crate::types::CapacityReservationPreference) -> Self {
        self.capacity_reservation_preference = ::std::option::Option::Some(input);
        self
    }
    /// <p>Options that you can choose for the capacity reservation. SageMaker AI supports the following options:</p>
    /// <dl>
    /// <dt>
    /// capacity-reservations-only
    /// </dt>
    /// <dd>
    /// <p>SageMaker AI launches instances only into an ML capacity reservation. If no capacity is available, the instances fail to launch.</p>
    /// </dd>
    /// </dl>
    pub fn set_capacity_reservation_preference(mut self, input: ::std::option::Option<crate::types::CapacityReservationPreference>) -> Self {
        self.capacity_reservation_preference = input;
        self
    }
    /// <p>Options that you can choose for the capacity reservation. SageMaker AI supports the following options:</p>
    /// <dl>
    /// <dt>
    /// capacity-reservations-only
    /// </dt>
    /// <dd>
    /// <p>SageMaker AI launches instances only into an ML capacity reservation. If no capacity is available, the instances fail to launch.</p>
    /// </dd>
    /// </dl>
    pub fn get_capacity_reservation_preference(&self) -> &::std::option::Option<crate::types::CapacityReservationPreference> {
        &self.capacity_reservation_preference
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the ML capacity reservation that SageMaker AI applies when it deploys the endpoint.</p>
    pub fn ml_reservation_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ml_reservation_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the ML capacity reservation that SageMaker AI applies when it deploys the endpoint.</p>
    pub fn set_ml_reservation_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ml_reservation_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the ML capacity reservation that SageMaker AI applies when it deploys the endpoint.</p>
    pub fn get_ml_reservation_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.ml_reservation_arn
    }
    /// Consumes the builder and constructs a [`ProductionVariantCapacityReservationConfig`](crate::types::ProductionVariantCapacityReservationConfig).
    pub fn build(self) -> crate::types::ProductionVariantCapacityReservationConfig {
        crate::types::ProductionVariantCapacityReservationConfig {
            capacity_reservation_preference: self.capacity_reservation_preference,
            ml_reservation_arn: self.ml_reservation_arn,
        }
    }
}
