// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A collection of settings that configure the Amazon Q experience within the domain.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AmazonQSettings {
    /// <p>Whether Amazon Q has been enabled within the domain.</p>
    pub status: ::std::option::Option<crate::types::FeatureStatus>,
    /// <p>The ARN of the Amazon Q profile used within the domain.</p>
    pub q_profile_arn: ::std::option::Option<::std::string::String>,
}
impl AmazonQSettings {
    /// <p>Whether Amazon Q has been enabled within the domain.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::FeatureStatus> {
        self.status.as_ref()
    }
    /// <p>The ARN of the Amazon Q profile used within the domain.</p>
    pub fn q_profile_arn(&self) -> ::std::option::Option<&str> {
        self.q_profile_arn.as_deref()
    }
}
impl AmazonQSettings {
    /// Creates a new builder-style object to manufacture [`AmazonQSettings`](crate::types::AmazonQSettings).
    pub fn builder() -> crate::types::builders::AmazonQSettingsBuilder {
        crate::types::builders::AmazonQSettingsBuilder::default()
    }
}

/// A builder for [`AmazonQSettings`](crate::types::AmazonQSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AmazonQSettingsBuilder {
    pub(crate) status: ::std::option::Option<crate::types::FeatureStatus>,
    pub(crate) q_profile_arn: ::std::option::Option<::std::string::String>,
}
impl AmazonQSettingsBuilder {
    /// <p>Whether Amazon Q has been enabled within the domain.</p>
    pub fn status(mut self, input: crate::types::FeatureStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether Amazon Q has been enabled within the domain.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::FeatureStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Whether Amazon Q has been enabled within the domain.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::FeatureStatus> {
        &self.status
    }
    /// <p>The ARN of the Amazon Q profile used within the domain.</p>
    pub fn q_profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.q_profile_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Amazon Q profile used within the domain.</p>
    pub fn set_q_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.q_profile_arn = input;
        self
    }
    /// <p>The ARN of the Amazon Q profile used within the domain.</p>
    pub fn get_q_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.q_profile_arn
    }
    /// Consumes the builder and constructs a [`AmazonQSettings`](crate::types::AmazonQSettings).
    pub fn build(self) -> crate::types::AmazonQSettings {
        crate::types::AmazonQSettings {
            status: self.status,
            q_profile_arn: self.q_profile_arn,
        }
    }
}
