// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides summary information about a training job.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TrainingJobSummary {
    /// <p>The name of the training job that you want a summary for.</p>
    pub training_job_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the training job.</p>
    pub training_job_arn: ::std::option::Option<::std::string::String>,
    /// <p>A timestamp that shows when the training job was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A timestamp that shows when the training job ended. This field is set only if the training job has one of the terminal statuses (<code>Completed</code>, <code>Failed</code>, or <code>Stopped</code>).</p>
    pub training_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Timestamp when the training job was last modified.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The status of the training job.</p>
    pub training_job_status: ::std::option::Option<crate::types::TrainingJobStatus>,
    /// <p>The secondary status of the training job.</p>
    pub secondary_status: ::std::option::Option<crate::types::SecondaryStatus>,
    /// <p>The status of the warm pool associated with the training job.</p>
    pub warm_pool_status: ::std::option::Option<crate::types::WarmPoolStatus>,
    /// <p>The Amazon Resource Name (ARN); of the training plan associated with this training job.</p>
    /// <p>For more information about how to reserve GPU capacity for your SageMaker HyperPod clusters using Amazon SageMaker Training Plan, see <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingPlan.html">CreateTrainingPlan</a> </code>.</p>
    pub training_plan_arn: ::std::option::Option<::std::string::String>,
}
impl TrainingJobSummary {
    /// <p>The name of the training job that you want a summary for.</p>
    pub fn training_job_name(&self) -> ::std::option::Option<&str> {
        self.training_job_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the training job.</p>
    pub fn training_job_arn(&self) -> ::std::option::Option<&str> {
        self.training_job_arn.as_deref()
    }
    /// <p>A timestamp that shows when the training job was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>A timestamp that shows when the training job ended. This field is set only if the training job has one of the terminal statuses (<code>Completed</code>, <code>Failed</code>, or <code>Stopped</code>).</p>
    pub fn training_end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.training_end_time.as_ref()
    }
    /// <p>Timestamp when the training job was last modified.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The status of the training job.</p>
    pub fn training_job_status(&self) -> ::std::option::Option<&crate::types::TrainingJobStatus> {
        self.training_job_status.as_ref()
    }
    /// <p>The secondary status of the training job.</p>
    pub fn secondary_status(&self) -> ::std::option::Option<&crate::types::SecondaryStatus> {
        self.secondary_status.as_ref()
    }
    /// <p>The status of the warm pool associated with the training job.</p>
    pub fn warm_pool_status(&self) -> ::std::option::Option<&crate::types::WarmPoolStatus> {
        self.warm_pool_status.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN); of the training plan associated with this training job.</p>
    /// <p>For more information about how to reserve GPU capacity for your SageMaker HyperPod clusters using Amazon SageMaker Training Plan, see <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingPlan.html">CreateTrainingPlan</a> </code>.</p>
    pub fn training_plan_arn(&self) -> ::std::option::Option<&str> {
        self.training_plan_arn.as_deref()
    }
}
impl TrainingJobSummary {
    /// Creates a new builder-style object to manufacture [`TrainingJobSummary`](crate::types::TrainingJobSummary).
    pub fn builder() -> crate::types::builders::TrainingJobSummaryBuilder {
        crate::types::builders::TrainingJobSummaryBuilder::default()
    }
}

/// A builder for [`TrainingJobSummary`](crate::types::TrainingJobSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TrainingJobSummaryBuilder {
    pub(crate) training_job_name: ::std::option::Option<::std::string::String>,
    pub(crate) training_job_arn: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) training_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) training_job_status: ::std::option::Option<crate::types::TrainingJobStatus>,
    pub(crate) secondary_status: ::std::option::Option<crate::types::SecondaryStatus>,
    pub(crate) warm_pool_status: ::std::option::Option<crate::types::WarmPoolStatus>,
    pub(crate) training_plan_arn: ::std::option::Option<::std::string::String>,
}
impl TrainingJobSummaryBuilder {
    /// <p>The name of the training job that you want a summary for.</p>
    /// This field is required.
    pub fn training_job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.training_job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the training job that you want a summary for.</p>
    pub fn set_training_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.training_job_name = input;
        self
    }
    /// <p>The name of the training job that you want a summary for.</p>
    pub fn get_training_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.training_job_name
    }
    /// <p>The Amazon Resource Name (ARN) of the training job.</p>
    /// This field is required.
    pub fn training_job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.training_job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the training job.</p>
    pub fn set_training_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.training_job_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the training job.</p>
    pub fn get_training_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.training_job_arn
    }
    /// <p>A timestamp that shows when the training job was created.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp that shows when the training job was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>A timestamp that shows when the training job was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>A timestamp that shows when the training job ended. This field is set only if the training job has one of the terminal statuses (<code>Completed</code>, <code>Failed</code>, or <code>Stopped</code>).</p>
    pub fn training_end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.training_end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp that shows when the training job ended. This field is set only if the training job has one of the terminal statuses (<code>Completed</code>, <code>Failed</code>, or <code>Stopped</code>).</p>
    pub fn set_training_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.training_end_time = input;
        self
    }
    /// <p>A timestamp that shows when the training job ended. This field is set only if the training job has one of the terminal statuses (<code>Completed</code>, <code>Failed</code>, or <code>Stopped</code>).</p>
    pub fn get_training_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.training_end_time
    }
    /// <p>Timestamp when the training job was last modified.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp when the training job was last modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>Timestamp when the training job was last modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The status of the training job.</p>
    /// This field is required.
    pub fn training_job_status(mut self, input: crate::types::TrainingJobStatus) -> Self {
        self.training_job_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the training job.</p>
    pub fn set_training_job_status(mut self, input: ::std::option::Option<crate::types::TrainingJobStatus>) -> Self {
        self.training_job_status = input;
        self
    }
    /// <p>The status of the training job.</p>
    pub fn get_training_job_status(&self) -> &::std::option::Option<crate::types::TrainingJobStatus> {
        &self.training_job_status
    }
    /// <p>The secondary status of the training job.</p>
    pub fn secondary_status(mut self, input: crate::types::SecondaryStatus) -> Self {
        self.secondary_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The secondary status of the training job.</p>
    pub fn set_secondary_status(mut self, input: ::std::option::Option<crate::types::SecondaryStatus>) -> Self {
        self.secondary_status = input;
        self
    }
    /// <p>The secondary status of the training job.</p>
    pub fn get_secondary_status(&self) -> &::std::option::Option<crate::types::SecondaryStatus> {
        &self.secondary_status
    }
    /// <p>The status of the warm pool associated with the training job.</p>
    pub fn warm_pool_status(mut self, input: crate::types::WarmPoolStatus) -> Self {
        self.warm_pool_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the warm pool associated with the training job.</p>
    pub fn set_warm_pool_status(mut self, input: ::std::option::Option<crate::types::WarmPoolStatus>) -> Self {
        self.warm_pool_status = input;
        self
    }
    /// <p>The status of the warm pool associated with the training job.</p>
    pub fn get_warm_pool_status(&self) -> &::std::option::Option<crate::types::WarmPoolStatus> {
        &self.warm_pool_status
    }
    /// <p>The Amazon Resource Name (ARN); of the training plan associated with this training job.</p>
    /// <p>For more information about how to reserve GPU capacity for your SageMaker HyperPod clusters using Amazon SageMaker Training Plan, see <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingPlan.html">CreateTrainingPlan</a> </code>.</p>
    pub fn training_plan_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.training_plan_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN); of the training plan associated with this training job.</p>
    /// <p>For more information about how to reserve GPU capacity for your SageMaker HyperPod clusters using Amazon SageMaker Training Plan, see <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingPlan.html">CreateTrainingPlan</a> </code>.</p>
    pub fn set_training_plan_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.training_plan_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN); of the training plan associated with this training job.</p>
    /// <p>For more information about how to reserve GPU capacity for your SageMaker HyperPod clusters using Amazon SageMaker Training Plan, see <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingPlan.html">CreateTrainingPlan</a> </code>.</p>
    pub fn get_training_plan_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.training_plan_arn
    }
    /// Consumes the builder and constructs a [`TrainingJobSummary`](crate::types::TrainingJobSummary).
    pub fn build(self) -> crate::types::TrainingJobSummary {
        crate::types::TrainingJobSummary {
            training_job_name: self.training_job_name,
            training_job_arn: self.training_job_arn,
            creation_time: self.creation_time,
            training_end_time: self.training_end_time,
            last_modified_time: self.last_modified_time,
            training_job_status: self.training_job_status,
            secondary_status: self.secondary_status,
            warm_pool_status: self.warm_pool_status,
            training_plan_arn: self.training_plan_arn,
        }
    }
}
