// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of an instance (also called a <i>node</i> interchangeably) in a SageMaker HyperPod cluster.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClusterNodeDetails {
    /// <p>The instance group name in which the instance is.</p>
    pub instance_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the instance.</p>
    pub instance_status: ::std::option::Option<crate::types::ClusterInstanceStatusDetails>,
    /// <p>The type of the instance.</p>
    pub instance_type: ::std::option::Option<crate::types::ClusterInstanceType>,
    /// <p>The time when the instance is launched.</p>
    pub launch_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time when the cluster was last updated.</p>
    pub last_software_update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The LifeCycle configuration applied to the instance.</p>
    pub life_cycle_config: ::std::option::Option<crate::types::ClusterLifeCycleConfig>,
    /// <p>The customized Amazon VPC configuration at the instance group level that overrides the default Amazon VPC configuration of the SageMaker HyperPod cluster.</p>
    pub override_vpc_config: ::std::option::Option<crate::types::VpcConfig>,
    /// <p>The number of threads per CPU core you specified under <code>CreateCluster</code>.</p>
    pub threads_per_core: ::std::option::Option<i32>,
    /// <p>The configurations of additional storage specified to the instance group where the instance (node) is launched.</p>
    pub instance_storage_configs: ::std::option::Option<::std::vec::Vec<crate::types::ClusterInstanceStorageConfig>>,
    /// <p>The private primary IP address of the SageMaker HyperPod cluster node.</p>
    pub private_primary_ip: ::std::option::Option<::std::string::String>,
    /// <p>The private primary IPv6 address of the SageMaker HyperPod cluster node when configured with an Amazon VPC that supports IPv6 and includes subnets with IPv6 addressing enabled in either the cluster Amazon VPC configuration or the instance group Amazon VPC configuration.</p>
    pub private_primary_ipv6: ::std::option::Option<::std::string::String>,
    /// <p>The private DNS hostname of the SageMaker HyperPod cluster node.</p>
    pub private_dns_hostname: ::std::option::Option<::std::string::String>,
    /// <p>The placement details of the SageMaker HyperPod cluster node.</p>
    pub placement: ::std::option::Option<crate::types::ClusterInstancePlacement>,
}
impl ClusterNodeDetails {
    /// <p>The instance group name in which the instance is.</p>
    pub fn instance_group_name(&self) -> ::std::option::Option<&str> {
        self.instance_group_name.as_deref()
    }
    /// <p>The ID of the instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The status of the instance.</p>
    pub fn instance_status(&self) -> ::std::option::Option<&crate::types::ClusterInstanceStatusDetails> {
        self.instance_status.as_ref()
    }
    /// <p>The type of the instance.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&crate::types::ClusterInstanceType> {
        self.instance_type.as_ref()
    }
    /// <p>The time when the instance is launched.</p>
    pub fn launch_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.launch_time.as_ref()
    }
    /// <p>The time when the cluster was last updated.</p>
    pub fn last_software_update_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_software_update_time.as_ref()
    }
    /// <p>The LifeCycle configuration applied to the instance.</p>
    pub fn life_cycle_config(&self) -> ::std::option::Option<&crate::types::ClusterLifeCycleConfig> {
        self.life_cycle_config.as_ref()
    }
    /// <p>The customized Amazon VPC configuration at the instance group level that overrides the default Amazon VPC configuration of the SageMaker HyperPod cluster.</p>
    pub fn override_vpc_config(&self) -> ::std::option::Option<&crate::types::VpcConfig> {
        self.override_vpc_config.as_ref()
    }
    /// <p>The number of threads per CPU core you specified under <code>CreateCluster</code>.</p>
    pub fn threads_per_core(&self) -> ::std::option::Option<i32> {
        self.threads_per_core
    }
    /// <p>The configurations of additional storage specified to the instance group where the instance (node) is launched.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instance_storage_configs.is_none()`.
    pub fn instance_storage_configs(&self) -> &[crate::types::ClusterInstanceStorageConfig] {
        self.instance_storage_configs.as_deref().unwrap_or_default()
    }
    /// <p>The private primary IP address of the SageMaker HyperPod cluster node.</p>
    pub fn private_primary_ip(&self) -> ::std::option::Option<&str> {
        self.private_primary_ip.as_deref()
    }
    /// <p>The private primary IPv6 address of the SageMaker HyperPod cluster node when configured with an Amazon VPC that supports IPv6 and includes subnets with IPv6 addressing enabled in either the cluster Amazon VPC configuration or the instance group Amazon VPC configuration.</p>
    pub fn private_primary_ipv6(&self) -> ::std::option::Option<&str> {
        self.private_primary_ipv6.as_deref()
    }
    /// <p>The private DNS hostname of the SageMaker HyperPod cluster node.</p>
    pub fn private_dns_hostname(&self) -> ::std::option::Option<&str> {
        self.private_dns_hostname.as_deref()
    }
    /// <p>The placement details of the SageMaker HyperPod cluster node.</p>
    pub fn placement(&self) -> ::std::option::Option<&crate::types::ClusterInstancePlacement> {
        self.placement.as_ref()
    }
}
impl ClusterNodeDetails {
    /// Creates a new builder-style object to manufacture [`ClusterNodeDetails`](crate::types::ClusterNodeDetails).
    pub fn builder() -> crate::types::builders::ClusterNodeDetailsBuilder {
        crate::types::builders::ClusterNodeDetailsBuilder::default()
    }
}

/// A builder for [`ClusterNodeDetails`](crate::types::ClusterNodeDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ClusterNodeDetailsBuilder {
    pub(crate) instance_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) instance_status: ::std::option::Option<crate::types::ClusterInstanceStatusDetails>,
    pub(crate) instance_type: ::std::option::Option<crate::types::ClusterInstanceType>,
    pub(crate) launch_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_software_update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) life_cycle_config: ::std::option::Option<crate::types::ClusterLifeCycleConfig>,
    pub(crate) override_vpc_config: ::std::option::Option<crate::types::VpcConfig>,
    pub(crate) threads_per_core: ::std::option::Option<i32>,
    pub(crate) instance_storage_configs: ::std::option::Option<::std::vec::Vec<crate::types::ClusterInstanceStorageConfig>>,
    pub(crate) private_primary_ip: ::std::option::Option<::std::string::String>,
    pub(crate) private_primary_ipv6: ::std::option::Option<::std::string::String>,
    pub(crate) private_dns_hostname: ::std::option::Option<::std::string::String>,
    pub(crate) placement: ::std::option::Option<crate::types::ClusterInstancePlacement>,
}
impl ClusterNodeDetailsBuilder {
    /// <p>The instance group name in which the instance is.</p>
    pub fn instance_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance group name in which the instance is.</p>
    pub fn set_instance_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_group_name = input;
        self
    }
    /// <p>The instance group name in which the instance is.</p>
    pub fn get_instance_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_group_name
    }
    /// <p>The ID of the instance.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The ID of the instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The status of the instance.</p>
    pub fn instance_status(mut self, input: crate::types::ClusterInstanceStatusDetails) -> Self {
        self.instance_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the instance.</p>
    pub fn set_instance_status(mut self, input: ::std::option::Option<crate::types::ClusterInstanceStatusDetails>) -> Self {
        self.instance_status = input;
        self
    }
    /// <p>The status of the instance.</p>
    pub fn get_instance_status(&self) -> &::std::option::Option<crate::types::ClusterInstanceStatusDetails> {
        &self.instance_status
    }
    /// <p>The type of the instance.</p>
    pub fn instance_type(mut self, input: crate::types::ClusterInstanceType) -> Self {
        self.instance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the instance.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<crate::types::ClusterInstanceType>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The type of the instance.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<crate::types::ClusterInstanceType> {
        &self.instance_type
    }
    /// <p>The time when the instance is launched.</p>
    pub fn launch_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.launch_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the instance is launched.</p>
    pub fn set_launch_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.launch_time = input;
        self
    }
    /// <p>The time when the instance is launched.</p>
    pub fn get_launch_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.launch_time
    }
    /// <p>The time when the cluster was last updated.</p>
    pub fn last_software_update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_software_update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the cluster was last updated.</p>
    pub fn set_last_software_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_software_update_time = input;
        self
    }
    /// <p>The time when the cluster was last updated.</p>
    pub fn get_last_software_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_software_update_time
    }
    /// <p>The LifeCycle configuration applied to the instance.</p>
    pub fn life_cycle_config(mut self, input: crate::types::ClusterLifeCycleConfig) -> Self {
        self.life_cycle_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The LifeCycle configuration applied to the instance.</p>
    pub fn set_life_cycle_config(mut self, input: ::std::option::Option<crate::types::ClusterLifeCycleConfig>) -> Self {
        self.life_cycle_config = input;
        self
    }
    /// <p>The LifeCycle configuration applied to the instance.</p>
    pub fn get_life_cycle_config(&self) -> &::std::option::Option<crate::types::ClusterLifeCycleConfig> {
        &self.life_cycle_config
    }
    /// <p>The customized Amazon VPC configuration at the instance group level that overrides the default Amazon VPC configuration of the SageMaker HyperPod cluster.</p>
    pub fn override_vpc_config(mut self, input: crate::types::VpcConfig) -> Self {
        self.override_vpc_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The customized Amazon VPC configuration at the instance group level that overrides the default Amazon VPC configuration of the SageMaker HyperPod cluster.</p>
    pub fn set_override_vpc_config(mut self, input: ::std::option::Option<crate::types::VpcConfig>) -> Self {
        self.override_vpc_config = input;
        self
    }
    /// <p>The customized Amazon VPC configuration at the instance group level that overrides the default Amazon VPC configuration of the SageMaker HyperPod cluster.</p>
    pub fn get_override_vpc_config(&self) -> &::std::option::Option<crate::types::VpcConfig> {
        &self.override_vpc_config
    }
    /// <p>The number of threads per CPU core you specified under <code>CreateCluster</code>.</p>
    pub fn threads_per_core(mut self, input: i32) -> Self {
        self.threads_per_core = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of threads per CPU core you specified under <code>CreateCluster</code>.</p>
    pub fn set_threads_per_core(mut self, input: ::std::option::Option<i32>) -> Self {
        self.threads_per_core = input;
        self
    }
    /// <p>The number of threads per CPU core you specified under <code>CreateCluster</code>.</p>
    pub fn get_threads_per_core(&self) -> &::std::option::Option<i32> {
        &self.threads_per_core
    }
    /// Appends an item to `instance_storage_configs`.
    ///
    /// To override the contents of this collection use [`set_instance_storage_configs`](Self::set_instance_storage_configs).
    ///
    /// <p>The configurations of additional storage specified to the instance group where the instance (node) is launched.</p>
    pub fn instance_storage_configs(mut self, input: crate::types::ClusterInstanceStorageConfig) -> Self {
        let mut v = self.instance_storage_configs.unwrap_or_default();
        v.push(input);
        self.instance_storage_configs = ::std::option::Option::Some(v);
        self
    }
    /// <p>The configurations of additional storage specified to the instance group where the instance (node) is launched.</p>
    pub fn set_instance_storage_configs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ClusterInstanceStorageConfig>>) -> Self {
        self.instance_storage_configs = input;
        self
    }
    /// <p>The configurations of additional storage specified to the instance group where the instance (node) is launched.</p>
    pub fn get_instance_storage_configs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ClusterInstanceStorageConfig>> {
        &self.instance_storage_configs
    }
    /// <p>The private primary IP address of the SageMaker HyperPod cluster node.</p>
    pub fn private_primary_ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.private_primary_ip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The private primary IP address of the SageMaker HyperPod cluster node.</p>
    pub fn set_private_primary_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.private_primary_ip = input;
        self
    }
    /// <p>The private primary IP address of the SageMaker HyperPod cluster node.</p>
    pub fn get_private_primary_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.private_primary_ip
    }
    /// <p>The private primary IPv6 address of the SageMaker HyperPod cluster node when configured with an Amazon VPC that supports IPv6 and includes subnets with IPv6 addressing enabled in either the cluster Amazon VPC configuration or the instance group Amazon VPC configuration.</p>
    pub fn private_primary_ipv6(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.private_primary_ipv6 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The private primary IPv6 address of the SageMaker HyperPod cluster node when configured with an Amazon VPC that supports IPv6 and includes subnets with IPv6 addressing enabled in either the cluster Amazon VPC configuration or the instance group Amazon VPC configuration.</p>
    pub fn set_private_primary_ipv6(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.private_primary_ipv6 = input;
        self
    }
    /// <p>The private primary IPv6 address of the SageMaker HyperPod cluster node when configured with an Amazon VPC that supports IPv6 and includes subnets with IPv6 addressing enabled in either the cluster Amazon VPC configuration or the instance group Amazon VPC configuration.</p>
    pub fn get_private_primary_ipv6(&self) -> &::std::option::Option<::std::string::String> {
        &self.private_primary_ipv6
    }
    /// <p>The private DNS hostname of the SageMaker HyperPod cluster node.</p>
    pub fn private_dns_hostname(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.private_dns_hostname = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The private DNS hostname of the SageMaker HyperPod cluster node.</p>
    pub fn set_private_dns_hostname(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.private_dns_hostname = input;
        self
    }
    /// <p>The private DNS hostname of the SageMaker HyperPod cluster node.</p>
    pub fn get_private_dns_hostname(&self) -> &::std::option::Option<::std::string::String> {
        &self.private_dns_hostname
    }
    /// <p>The placement details of the SageMaker HyperPod cluster node.</p>
    pub fn placement(mut self, input: crate::types::ClusterInstancePlacement) -> Self {
        self.placement = ::std::option::Option::Some(input);
        self
    }
    /// <p>The placement details of the SageMaker HyperPod cluster node.</p>
    pub fn set_placement(mut self, input: ::std::option::Option<crate::types::ClusterInstancePlacement>) -> Self {
        self.placement = input;
        self
    }
    /// <p>The placement details of the SageMaker HyperPod cluster node.</p>
    pub fn get_placement(&self) -> &::std::option::Option<crate::types::ClusterInstancePlacement> {
        &self.placement
    }
    /// Consumes the builder and constructs a [`ClusterNodeDetails`](crate::types::ClusterNodeDetails).
    pub fn build(self) -> crate::types::ClusterNodeDetails {
        crate::types::ClusterNodeDetails {
            instance_group_name: self.instance_group_name,
            instance_id: self.instance_id,
            instance_status: self.instance_status,
            instance_type: self.instance_type,
            launch_time: self.launch_time,
            last_software_update_time: self.last_software_update_time,
            life_cycle_config: self.life_cycle_config,
            override_vpc_config: self.override_vpc_config,
            threads_per_core: self.threads_per_core,
            instance_storage_configs: self.instance_storage_configs,
            private_primary_ip: self.private_primary_ip,
            private_primary_ipv6: self.private_primary_ipv6,
            private_dns_hostname: self.private_dns_hostname,
            placement: self.placement,
        }
    }
}
