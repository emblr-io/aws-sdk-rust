// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Use this parameter to specify a supported global condition key that is added to the IAM policy.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IamPolicyConstraints {
    /// <p>When <code>SourceIp</code> is <code>Enabled</code> the worker's IP address when a task is rendered in the worker portal is added to the IAM policy as a <code>Condition</code> used to generate the Amazon S3 presigned URL. This IP address is checked by Amazon S3 and must match in order for the Amazon S3 resource to be rendered in the worker portal.</p>
    pub source_ip: ::std::option::Option<crate::types::EnabledOrDisabled>,
    /// <p>When <code>VpcSourceIp</code> is <code>Enabled</code> the worker's IP address when a task is rendered in private worker portal inside the VPC is added to the IAM policy as a <code>Condition</code> used to generate the Amazon S3 presigned URL. To render the task successfully Amazon S3 checks that the presigned URL is being accessed over an Amazon S3 VPC Endpoint, and that the worker's IP address matches the IP address in the IAM policy. To learn more about configuring private worker portal, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/samurai-vpc-worker-portal.html">Use Amazon VPC mode from a private worker portal</a>.</p>
    pub vpc_source_ip: ::std::option::Option<crate::types::EnabledOrDisabled>,
}
impl IamPolicyConstraints {
    /// <p>When <code>SourceIp</code> is <code>Enabled</code> the worker's IP address when a task is rendered in the worker portal is added to the IAM policy as a <code>Condition</code> used to generate the Amazon S3 presigned URL. This IP address is checked by Amazon S3 and must match in order for the Amazon S3 resource to be rendered in the worker portal.</p>
    pub fn source_ip(&self) -> ::std::option::Option<&crate::types::EnabledOrDisabled> {
        self.source_ip.as_ref()
    }
    /// <p>When <code>VpcSourceIp</code> is <code>Enabled</code> the worker's IP address when a task is rendered in private worker portal inside the VPC is added to the IAM policy as a <code>Condition</code> used to generate the Amazon S3 presigned URL. To render the task successfully Amazon S3 checks that the presigned URL is being accessed over an Amazon S3 VPC Endpoint, and that the worker's IP address matches the IP address in the IAM policy. To learn more about configuring private worker portal, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/samurai-vpc-worker-portal.html">Use Amazon VPC mode from a private worker portal</a>.</p>
    pub fn vpc_source_ip(&self) -> ::std::option::Option<&crate::types::EnabledOrDisabled> {
        self.vpc_source_ip.as_ref()
    }
}
impl IamPolicyConstraints {
    /// Creates a new builder-style object to manufacture [`IamPolicyConstraints`](crate::types::IamPolicyConstraints).
    pub fn builder() -> crate::types::builders::IamPolicyConstraintsBuilder {
        crate::types::builders::IamPolicyConstraintsBuilder::default()
    }
}

/// A builder for [`IamPolicyConstraints`](crate::types::IamPolicyConstraints).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IamPolicyConstraintsBuilder {
    pub(crate) source_ip: ::std::option::Option<crate::types::EnabledOrDisabled>,
    pub(crate) vpc_source_ip: ::std::option::Option<crate::types::EnabledOrDisabled>,
}
impl IamPolicyConstraintsBuilder {
    /// <p>When <code>SourceIp</code> is <code>Enabled</code> the worker's IP address when a task is rendered in the worker portal is added to the IAM policy as a <code>Condition</code> used to generate the Amazon S3 presigned URL. This IP address is checked by Amazon S3 and must match in order for the Amazon S3 resource to be rendered in the worker portal.</p>
    pub fn source_ip(mut self, input: crate::types::EnabledOrDisabled) -> Self {
        self.source_ip = ::std::option::Option::Some(input);
        self
    }
    /// <p>When <code>SourceIp</code> is <code>Enabled</code> the worker's IP address when a task is rendered in the worker portal is added to the IAM policy as a <code>Condition</code> used to generate the Amazon S3 presigned URL. This IP address is checked by Amazon S3 and must match in order for the Amazon S3 resource to be rendered in the worker portal.</p>
    pub fn set_source_ip(mut self, input: ::std::option::Option<crate::types::EnabledOrDisabled>) -> Self {
        self.source_ip = input;
        self
    }
    /// <p>When <code>SourceIp</code> is <code>Enabled</code> the worker's IP address when a task is rendered in the worker portal is added to the IAM policy as a <code>Condition</code> used to generate the Amazon S3 presigned URL. This IP address is checked by Amazon S3 and must match in order for the Amazon S3 resource to be rendered in the worker portal.</p>
    pub fn get_source_ip(&self) -> &::std::option::Option<crate::types::EnabledOrDisabled> {
        &self.source_ip
    }
    /// <p>When <code>VpcSourceIp</code> is <code>Enabled</code> the worker's IP address when a task is rendered in private worker portal inside the VPC is added to the IAM policy as a <code>Condition</code> used to generate the Amazon S3 presigned URL. To render the task successfully Amazon S3 checks that the presigned URL is being accessed over an Amazon S3 VPC Endpoint, and that the worker's IP address matches the IP address in the IAM policy. To learn more about configuring private worker portal, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/samurai-vpc-worker-portal.html">Use Amazon VPC mode from a private worker portal</a>.</p>
    pub fn vpc_source_ip(mut self, input: crate::types::EnabledOrDisabled) -> Self {
        self.vpc_source_ip = ::std::option::Option::Some(input);
        self
    }
    /// <p>When <code>VpcSourceIp</code> is <code>Enabled</code> the worker's IP address when a task is rendered in private worker portal inside the VPC is added to the IAM policy as a <code>Condition</code> used to generate the Amazon S3 presigned URL. To render the task successfully Amazon S3 checks that the presigned URL is being accessed over an Amazon S3 VPC Endpoint, and that the worker's IP address matches the IP address in the IAM policy. To learn more about configuring private worker portal, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/samurai-vpc-worker-portal.html">Use Amazon VPC mode from a private worker portal</a>.</p>
    pub fn set_vpc_source_ip(mut self, input: ::std::option::Option<crate::types::EnabledOrDisabled>) -> Self {
        self.vpc_source_ip = input;
        self
    }
    /// <p>When <code>VpcSourceIp</code> is <code>Enabled</code> the worker's IP address when a task is rendered in private worker portal inside the VPC is added to the IAM policy as a <code>Condition</code> used to generate the Amazon S3 presigned URL. To render the task successfully Amazon S3 checks that the presigned URL is being accessed over an Amazon S3 VPC Endpoint, and that the worker's IP address matches the IP address in the IAM policy. To learn more about configuring private worker portal, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/samurai-vpc-worker-portal.html">Use Amazon VPC mode from a private worker portal</a>.</p>
    pub fn get_vpc_source_ip(&self) -> &::std::option::Option<crate::types::EnabledOrDisabled> {
        &self.vpc_source_ip
    }
    /// Consumes the builder and constructs a [`IamPolicyConstraints`](crate::types::IamPolicyConstraints).
    pub fn build(self) -> crate::types::IamPolicyConstraints {
        crate::types::IamPolicyConstraints {
            source_ip: self.source_ip,
            vpc_source_ip: self.vpc_source_ip,
        }
    }
}
