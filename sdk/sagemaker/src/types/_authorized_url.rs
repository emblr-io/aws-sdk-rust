// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains a presigned URL and its associated local file path for downloading hub content artifacts.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuthorizedUrl {
    /// <p>The presigned S3 URL that provides temporary, secure access to download the file. URLs expire within 15 minutes for security purposes.</p>
    pub url: ::std::option::Option<::std::string::String>,
    /// <p>The recommended local file path where the downloaded file should be stored to maintain proper directory structure and file organization.</p>
    pub local_path: ::std::option::Option<::std::string::String>,
}
impl AuthorizedUrl {
    /// <p>The presigned S3 URL that provides temporary, secure access to download the file. URLs expire within 15 minutes for security purposes.</p>
    pub fn url(&self) -> ::std::option::Option<&str> {
        self.url.as_deref()
    }
    /// <p>The recommended local file path where the downloaded file should be stored to maintain proper directory structure and file organization.</p>
    pub fn local_path(&self) -> ::std::option::Option<&str> {
        self.local_path.as_deref()
    }
}
impl AuthorizedUrl {
    /// Creates a new builder-style object to manufacture [`AuthorizedUrl`](crate::types::AuthorizedUrl).
    pub fn builder() -> crate::types::builders::AuthorizedUrlBuilder {
        crate::types::builders::AuthorizedUrlBuilder::default()
    }
}

/// A builder for [`AuthorizedUrl`](crate::types::AuthorizedUrl).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AuthorizedUrlBuilder {
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) local_path: ::std::option::Option<::std::string::String>,
}
impl AuthorizedUrlBuilder {
    /// <p>The presigned S3 URL that provides temporary, secure access to download the file. URLs expire within 15 minutes for security purposes.</p>
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The presigned S3 URL that provides temporary, secure access to download the file. URLs expire within 15 minutes for security purposes.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The presigned S3 URL that provides temporary, secure access to download the file. URLs expire within 15 minutes for security purposes.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// <p>The recommended local file path where the downloaded file should be stored to maintain proper directory structure and file organization.</p>
    pub fn local_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The recommended local file path where the downloaded file should be stored to maintain proper directory structure and file organization.</p>
    pub fn set_local_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_path = input;
        self
    }
    /// <p>The recommended local file path where the downloaded file should be stored to maintain proper directory structure and file organization.</p>
    pub fn get_local_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_path
    }
    /// Consumes the builder and constructs a [`AuthorizedUrl`](crate::types::AuthorizedUrl).
    pub fn build(self) -> crate::types::AuthorizedUrl {
        crate::types::AuthorizedUrl {
            url: self.url,
            local_path: self.local_path,
        }
    }
}
