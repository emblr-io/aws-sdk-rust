// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration information specifying which hub contents have accessible deployment options.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InferenceHubAccessConfig {
    /// <p>The ARN of the hub content for which deployment access is allowed.</p>
    pub hub_content_arn: ::std::option::Option<::std::string::String>,
}
impl InferenceHubAccessConfig {
    /// <p>The ARN of the hub content for which deployment access is allowed.</p>
    pub fn hub_content_arn(&self) -> ::std::option::Option<&str> {
        self.hub_content_arn.as_deref()
    }
}
impl InferenceHubAccessConfig {
    /// Creates a new builder-style object to manufacture [`InferenceHubAccessConfig`](crate::types::InferenceHubAccessConfig).
    pub fn builder() -> crate::types::builders::InferenceHubAccessConfigBuilder {
        crate::types::builders::InferenceHubAccessConfigBuilder::default()
    }
}

/// A builder for [`InferenceHubAccessConfig`](crate::types::InferenceHubAccessConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InferenceHubAccessConfigBuilder {
    pub(crate) hub_content_arn: ::std::option::Option<::std::string::String>,
}
impl InferenceHubAccessConfigBuilder {
    /// <p>The ARN of the hub content for which deployment access is allowed.</p>
    /// This field is required.
    pub fn hub_content_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hub_content_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the hub content for which deployment access is allowed.</p>
    pub fn set_hub_content_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hub_content_arn = input;
        self
    }
    /// <p>The ARN of the hub content for which deployment access is allowed.</p>
    pub fn get_hub_content_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.hub_content_arn
    }
    /// Consumes the builder and constructs a [`InferenceHubAccessConfig`](crate::types::InferenceHubAccessConfig).
    pub fn build(self) -> crate::types::InferenceHubAccessConfig {
        crate::types::InferenceHubAccessConfig {
            hub_content_arn: self.hub_content_arn,
        }
    }
}
