// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filter to apply when listing or searching for training plans.</p>
/// <p>For more information about how to reserve GPU capacity for your SageMaker HyperPod clusters using Amazon SageMaker Training Plan, see <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingPlan.html">CreateTrainingPlan</a> </code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TrainingPlanFilter {
    /// <p>The name of the filter field (e.g., Status, InstanceType).</p>
    pub name: ::std::option::Option<crate::types::TrainingPlanFilterName>,
    /// <p>The value to filter by for the specified field.</p>
    pub value: ::std::option::Option<::std::string::String>,
}
impl TrainingPlanFilter {
    /// <p>The name of the filter field (e.g., Status, InstanceType).</p>
    pub fn name(&self) -> ::std::option::Option<&crate::types::TrainingPlanFilterName> {
        self.name.as_ref()
    }
    /// <p>The value to filter by for the specified field.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl TrainingPlanFilter {
    /// Creates a new builder-style object to manufacture [`TrainingPlanFilter`](crate::types::TrainingPlanFilter).
    pub fn builder() -> crate::types::builders::TrainingPlanFilterBuilder {
        crate::types::builders::TrainingPlanFilterBuilder::default()
    }
}

/// A builder for [`TrainingPlanFilter`](crate::types::TrainingPlanFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TrainingPlanFilterBuilder {
    pub(crate) name: ::std::option::Option<crate::types::TrainingPlanFilterName>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl TrainingPlanFilterBuilder {
    /// <p>The name of the filter field (e.g., Status, InstanceType).</p>
    /// This field is required.
    pub fn name(mut self, input: crate::types::TrainingPlanFilterName) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the filter field (e.g., Status, InstanceType).</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::TrainingPlanFilterName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the filter field (e.g., Status, InstanceType).</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::TrainingPlanFilterName> {
        &self.name
    }
    /// <p>The value to filter by for the specified field.</p>
    /// This field is required.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value to filter by for the specified field.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value to filter by for the specified field.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`TrainingPlanFilter`](crate::types::TrainingPlanFilter).
    pub fn build(self) -> crate::types::TrainingPlanFilter {
        crate::types::TrainingPlanFilter {
            name: self.name,
            value: self.value,
        }
    }
}
