// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The EC2 capacity reservations that are shared to an ML capacity reservation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Ec2CapacityReservation {
    /// <p>The unique identifier for an EC2 capacity reservation that's part of the ML capacity reservation.</p>
    pub ec2_capacity_reservation_id: ::std::option::Option<::std::string::String>,
    /// <p>The number of instances that you allocated to the EC2 capacity reservation.</p>
    pub total_instance_count: ::std::option::Option<i32>,
    /// <p>The number of instances that are currently available in the EC2 capacity reservation.</p>
    pub available_instance_count: ::std::option::Option<i32>,
    /// <p>The number of instances from the EC2 capacity reservation that are being used by the endpoint.</p>
    pub used_by_current_endpoint: ::std::option::Option<i32>,
}
impl Ec2CapacityReservation {
    /// <p>The unique identifier for an EC2 capacity reservation that's part of the ML capacity reservation.</p>
    pub fn ec2_capacity_reservation_id(&self) -> ::std::option::Option<&str> {
        self.ec2_capacity_reservation_id.as_deref()
    }
    /// <p>The number of instances that you allocated to the EC2 capacity reservation.</p>
    pub fn total_instance_count(&self) -> ::std::option::Option<i32> {
        self.total_instance_count
    }
    /// <p>The number of instances that are currently available in the EC2 capacity reservation.</p>
    pub fn available_instance_count(&self) -> ::std::option::Option<i32> {
        self.available_instance_count
    }
    /// <p>The number of instances from the EC2 capacity reservation that are being used by the endpoint.</p>
    pub fn used_by_current_endpoint(&self) -> ::std::option::Option<i32> {
        self.used_by_current_endpoint
    }
}
impl Ec2CapacityReservation {
    /// Creates a new builder-style object to manufacture [`Ec2CapacityReservation`](crate::types::Ec2CapacityReservation).
    pub fn builder() -> crate::types::builders::Ec2CapacityReservationBuilder {
        crate::types::builders::Ec2CapacityReservationBuilder::default()
    }
}

/// A builder for [`Ec2CapacityReservation`](crate::types::Ec2CapacityReservation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct Ec2CapacityReservationBuilder {
    pub(crate) ec2_capacity_reservation_id: ::std::option::Option<::std::string::String>,
    pub(crate) total_instance_count: ::std::option::Option<i32>,
    pub(crate) available_instance_count: ::std::option::Option<i32>,
    pub(crate) used_by_current_endpoint: ::std::option::Option<i32>,
}
impl Ec2CapacityReservationBuilder {
    /// <p>The unique identifier for an EC2 capacity reservation that's part of the ML capacity reservation.</p>
    pub fn ec2_capacity_reservation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ec2_capacity_reservation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for an EC2 capacity reservation that's part of the ML capacity reservation.</p>
    pub fn set_ec2_capacity_reservation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ec2_capacity_reservation_id = input;
        self
    }
    /// <p>The unique identifier for an EC2 capacity reservation that's part of the ML capacity reservation.</p>
    pub fn get_ec2_capacity_reservation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ec2_capacity_reservation_id
    }
    /// <p>The number of instances that you allocated to the EC2 capacity reservation.</p>
    pub fn total_instance_count(mut self, input: i32) -> Self {
        self.total_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of instances that you allocated to the EC2 capacity reservation.</p>
    pub fn set_total_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_instance_count = input;
        self
    }
    /// <p>The number of instances that you allocated to the EC2 capacity reservation.</p>
    pub fn get_total_instance_count(&self) -> &::std::option::Option<i32> {
        &self.total_instance_count
    }
    /// <p>The number of instances that are currently available in the EC2 capacity reservation.</p>
    pub fn available_instance_count(mut self, input: i32) -> Self {
        self.available_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of instances that are currently available in the EC2 capacity reservation.</p>
    pub fn set_available_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.available_instance_count = input;
        self
    }
    /// <p>The number of instances that are currently available in the EC2 capacity reservation.</p>
    pub fn get_available_instance_count(&self) -> &::std::option::Option<i32> {
        &self.available_instance_count
    }
    /// <p>The number of instances from the EC2 capacity reservation that are being used by the endpoint.</p>
    pub fn used_by_current_endpoint(mut self, input: i32) -> Self {
        self.used_by_current_endpoint = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of instances from the EC2 capacity reservation that are being used by the endpoint.</p>
    pub fn set_used_by_current_endpoint(mut self, input: ::std::option::Option<i32>) -> Self {
        self.used_by_current_endpoint = input;
        self
    }
    /// <p>The number of instances from the EC2 capacity reservation that are being used by the endpoint.</p>
    pub fn get_used_by_current_endpoint(&self) -> &::std::option::Option<i32> {
        &self.used_by_current_endpoint
    }
    /// Consumes the builder and constructs a [`Ec2CapacityReservation`](crate::types::Ec2CapacityReservation).
    pub fn build(self) -> crate::types::Ec2CapacityReservation {
        crate::types::Ec2CapacityReservation {
            ec2_capacity_reservation_id: self.ec2_capacity_reservation_id,
            total_instance_count: self.total_instance_count,
            available_instance_count: self.available_instance_count,
            used_by_current_endpoint: self.used_by_current_endpoint,
        }
    }
}
