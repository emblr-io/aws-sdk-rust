// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration settings for the SageMaker Partner AI App.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PartnerAppConfig {
    /// <p>The list of users that are given admin access to the SageMaker Partner AI App.</p>
    pub admin_users: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>This is a map of required inputs for a SageMaker Partner AI App. Based on the application type, the map is populated with a key and value pair that is specific to the user and application.</p>
    pub arguments: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl PartnerAppConfig {
    /// <p>The list of users that are given admin access to the SageMaker Partner AI App.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.admin_users.is_none()`.
    pub fn admin_users(&self) -> &[::std::string::String] {
        self.admin_users.as_deref().unwrap_or_default()
    }
    /// <p>This is a map of required inputs for a SageMaker Partner AI App. Based on the application type, the map is populated with a key and value pair that is specific to the user and application.</p>
    pub fn arguments(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.arguments.as_ref()
    }
}
impl PartnerAppConfig {
    /// Creates a new builder-style object to manufacture [`PartnerAppConfig`](crate::types::PartnerAppConfig).
    pub fn builder() -> crate::types::builders::PartnerAppConfigBuilder {
        crate::types::builders::PartnerAppConfigBuilder::default()
    }
}

/// A builder for [`PartnerAppConfig`](crate::types::PartnerAppConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PartnerAppConfigBuilder {
    pub(crate) admin_users: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) arguments: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl PartnerAppConfigBuilder {
    /// Appends an item to `admin_users`.
    ///
    /// To override the contents of this collection use [`set_admin_users`](Self::set_admin_users).
    ///
    /// <p>The list of users that are given admin access to the SageMaker Partner AI App.</p>
    pub fn admin_users(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.admin_users.unwrap_or_default();
        v.push(input.into());
        self.admin_users = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of users that are given admin access to the SageMaker Partner AI App.</p>
    pub fn set_admin_users(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.admin_users = input;
        self
    }
    /// <p>The list of users that are given admin access to the SageMaker Partner AI App.</p>
    pub fn get_admin_users(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.admin_users
    }
    /// Adds a key-value pair to `arguments`.
    ///
    /// To override the contents of this collection use [`set_arguments`](Self::set_arguments).
    ///
    /// <p>This is a map of required inputs for a SageMaker Partner AI App. Based on the application type, the map is populated with a key and value pair that is specific to the user and application.</p>
    pub fn arguments(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.arguments.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.arguments = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>This is a map of required inputs for a SageMaker Partner AI App. Based on the application type, the map is populated with a key and value pair that is specific to the user and application.</p>
    pub fn set_arguments(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.arguments = input;
        self
    }
    /// <p>This is a map of required inputs for a SageMaker Partner AI App. Based on the application type, the map is populated with a key and value pair that is specific to the user and application.</p>
    pub fn get_arguments(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.arguments
    }
    /// Consumes the builder and constructs a [`PartnerAppConfig`](crate::types::PartnerAppConfig).
    pub fn build(self) -> crate::types::PartnerAppConfig {
        crate::types::PartnerAppConfig {
            admin_users: self.admin_users,
            arguments: self.arguments,
        }
    }
}
