// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon S3 location of a source model to optimize with an optimization job.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OptimizationJobModelSourceS3 {
    /// <p>An Amazon S3 URI that locates a source model to optimize with an optimization job.</p>
    pub s3_uri: ::std::option::Option<::std::string::String>,
    /// <p>The access configuration settings for the source ML model for an optimization job, where you can accept the model end-user license agreement (EULA).</p>
    pub model_access_config: ::std::option::Option<crate::types::OptimizationModelAccessConfig>,
}
impl OptimizationJobModelSourceS3 {
    /// <p>An Amazon S3 URI that locates a source model to optimize with an optimization job.</p>
    pub fn s3_uri(&self) -> ::std::option::Option<&str> {
        self.s3_uri.as_deref()
    }
    /// <p>The access configuration settings for the source ML model for an optimization job, where you can accept the model end-user license agreement (EULA).</p>
    pub fn model_access_config(&self) -> ::std::option::Option<&crate::types::OptimizationModelAccessConfig> {
        self.model_access_config.as_ref()
    }
}
impl OptimizationJobModelSourceS3 {
    /// Creates a new builder-style object to manufacture [`OptimizationJobModelSourceS3`](crate::types::OptimizationJobModelSourceS3).
    pub fn builder() -> crate::types::builders::OptimizationJobModelSourceS3Builder {
        crate::types::builders::OptimizationJobModelSourceS3Builder::default()
    }
}

/// A builder for [`OptimizationJobModelSourceS3`](crate::types::OptimizationJobModelSourceS3).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OptimizationJobModelSourceS3Builder {
    pub(crate) s3_uri: ::std::option::Option<::std::string::String>,
    pub(crate) model_access_config: ::std::option::Option<crate::types::OptimizationModelAccessConfig>,
}
impl OptimizationJobModelSourceS3Builder {
    /// <p>An Amazon S3 URI that locates a source model to optimize with an optimization job.</p>
    pub fn s3_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An Amazon S3 URI that locates a source model to optimize with an optimization job.</p>
    pub fn set_s3_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_uri = input;
        self
    }
    /// <p>An Amazon S3 URI that locates a source model to optimize with an optimization job.</p>
    pub fn get_s3_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_uri
    }
    /// <p>The access configuration settings for the source ML model for an optimization job, where you can accept the model end-user license agreement (EULA).</p>
    pub fn model_access_config(mut self, input: crate::types::OptimizationModelAccessConfig) -> Self {
        self.model_access_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The access configuration settings for the source ML model for an optimization job, where you can accept the model end-user license agreement (EULA).</p>
    pub fn set_model_access_config(mut self, input: ::std::option::Option<crate::types::OptimizationModelAccessConfig>) -> Self {
        self.model_access_config = input;
        self
    }
    /// <p>The access configuration settings for the source ML model for an optimization job, where you can accept the model end-user license agreement (EULA).</p>
    pub fn get_model_access_config(&self) -> &::std::option::Option<crate::types::OptimizationModelAccessConfig> {
        &self.model_access_config
    }
    /// Consumes the builder and constructs a [`OptimizationJobModelSourceS3`](crate::types::OptimizationJobModelSourceS3).
    pub fn build(self) -> crate::types::OptimizationJobModelSourceS3 {
        crate::types::OptimizationJobModelSourceS3 {
            s3_uri: self.s3_uri,
            model_access_config: self.model_access_config,
        }
    }
}
