// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Use this optional parameter to constrain access to an Amazon S3 resource based on the IP address using supported IAM global condition keys. The Amazon S3 resource is accessed in the worker portal using a Amazon S3 presigned URL.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkerAccessConfiguration {
    /// <p>Defines any Amazon S3 resource constraints.</p>
    pub s3_presign: ::std::option::Option<crate::types::S3Presign>,
}
impl WorkerAccessConfiguration {
    /// <p>Defines any Amazon S3 resource constraints.</p>
    pub fn s3_presign(&self) -> ::std::option::Option<&crate::types::S3Presign> {
        self.s3_presign.as_ref()
    }
}
impl WorkerAccessConfiguration {
    /// Creates a new builder-style object to manufacture [`WorkerAccessConfiguration`](crate::types::WorkerAccessConfiguration).
    pub fn builder() -> crate::types::builders::WorkerAccessConfigurationBuilder {
        crate::types::builders::WorkerAccessConfigurationBuilder::default()
    }
}

/// A builder for [`WorkerAccessConfiguration`](crate::types::WorkerAccessConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WorkerAccessConfigurationBuilder {
    pub(crate) s3_presign: ::std::option::Option<crate::types::S3Presign>,
}
impl WorkerAccessConfigurationBuilder {
    /// <p>Defines any Amazon S3 resource constraints.</p>
    pub fn s3_presign(mut self, input: crate::types::S3Presign) -> Self {
        self.s3_presign = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines any Amazon S3 resource constraints.</p>
    pub fn set_s3_presign(mut self, input: ::std::option::Option<crate::types::S3Presign>) -> Self {
        self.s3_presign = input;
        self
    }
    /// <p>Defines any Amazon S3 resource constraints.</p>
    pub fn get_s3_presign(&self) -> &::std::option::Option<crate::types::S3Presign> {
        &self.s3_presign
    }
    /// Consumes the builder and constructs a [`WorkerAccessConfiguration`](crate::types::WorkerAccessConfiguration).
    pub fn build(self) -> crate::types::WorkerAccessConfiguration {
        crate::types::WorkerAccessConfiguration { s3_presign: self.s3_presign }
    }
}
