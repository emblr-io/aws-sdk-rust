// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The application settings for a Code Editor space.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SpaceCodeEditorAppSettings {
    /// <p>Specifies the ARN's of a SageMaker AI image and SageMaker AI image version, and the instance type that the version runs on.</p><note>
    /// <p>When both <code>SageMakerImageVersionArn</code> and <code>SageMakerImageArn</code> are passed, <code>SageMakerImageVersionArn</code> is used. Any updates to <code>SageMakerImageArn</code> will not take effect if <code>SageMakerImageVersionArn</code> already exists in the <code>ResourceSpec</code> because <code>SageMakerImageVersionArn</code> always takes precedence. To clear the value set for <code>SageMakerImageVersionArn</code>, pass <code>None</code> as the value.</p>
    /// </note>
    pub default_resource_spec: ::std::option::Option<crate::types::ResourceSpec>,
    /// <p>Settings that are used to configure and manage the lifecycle of CodeEditor applications in a space.</p>
    pub app_lifecycle_management: ::std::option::Option<crate::types::SpaceAppLifecycleManagement>,
}
impl SpaceCodeEditorAppSettings {
    /// <p>Specifies the ARN's of a SageMaker AI image and SageMaker AI image version, and the instance type that the version runs on.</p><note>
    /// <p>When both <code>SageMakerImageVersionArn</code> and <code>SageMakerImageArn</code> are passed, <code>SageMakerImageVersionArn</code> is used. Any updates to <code>SageMakerImageArn</code> will not take effect if <code>SageMakerImageVersionArn</code> already exists in the <code>ResourceSpec</code> because <code>SageMakerImageVersionArn</code> always takes precedence. To clear the value set for <code>SageMakerImageVersionArn</code>, pass <code>None</code> as the value.</p>
    /// </note>
    pub fn default_resource_spec(&self) -> ::std::option::Option<&crate::types::ResourceSpec> {
        self.default_resource_spec.as_ref()
    }
    /// <p>Settings that are used to configure and manage the lifecycle of CodeEditor applications in a space.</p>
    pub fn app_lifecycle_management(&self) -> ::std::option::Option<&crate::types::SpaceAppLifecycleManagement> {
        self.app_lifecycle_management.as_ref()
    }
}
impl SpaceCodeEditorAppSettings {
    /// Creates a new builder-style object to manufacture [`SpaceCodeEditorAppSettings`](crate::types::SpaceCodeEditorAppSettings).
    pub fn builder() -> crate::types::builders::SpaceCodeEditorAppSettingsBuilder {
        crate::types::builders::SpaceCodeEditorAppSettingsBuilder::default()
    }
}

/// A builder for [`SpaceCodeEditorAppSettings`](crate::types::SpaceCodeEditorAppSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SpaceCodeEditorAppSettingsBuilder {
    pub(crate) default_resource_spec: ::std::option::Option<crate::types::ResourceSpec>,
    pub(crate) app_lifecycle_management: ::std::option::Option<crate::types::SpaceAppLifecycleManagement>,
}
impl SpaceCodeEditorAppSettingsBuilder {
    /// <p>Specifies the ARN's of a SageMaker AI image and SageMaker AI image version, and the instance type that the version runs on.</p><note>
    /// <p>When both <code>SageMakerImageVersionArn</code> and <code>SageMakerImageArn</code> are passed, <code>SageMakerImageVersionArn</code> is used. Any updates to <code>SageMakerImageArn</code> will not take effect if <code>SageMakerImageVersionArn</code> already exists in the <code>ResourceSpec</code> because <code>SageMakerImageVersionArn</code> always takes precedence. To clear the value set for <code>SageMakerImageVersionArn</code>, pass <code>None</code> as the value.</p>
    /// </note>
    pub fn default_resource_spec(mut self, input: crate::types::ResourceSpec) -> Self {
        self.default_resource_spec = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the ARN's of a SageMaker AI image and SageMaker AI image version, and the instance type that the version runs on.</p><note>
    /// <p>When both <code>SageMakerImageVersionArn</code> and <code>SageMakerImageArn</code> are passed, <code>SageMakerImageVersionArn</code> is used. Any updates to <code>SageMakerImageArn</code> will not take effect if <code>SageMakerImageVersionArn</code> already exists in the <code>ResourceSpec</code> because <code>SageMakerImageVersionArn</code> always takes precedence. To clear the value set for <code>SageMakerImageVersionArn</code>, pass <code>None</code> as the value.</p>
    /// </note>
    pub fn set_default_resource_spec(mut self, input: ::std::option::Option<crate::types::ResourceSpec>) -> Self {
        self.default_resource_spec = input;
        self
    }
    /// <p>Specifies the ARN's of a SageMaker AI image and SageMaker AI image version, and the instance type that the version runs on.</p><note>
    /// <p>When both <code>SageMakerImageVersionArn</code> and <code>SageMakerImageArn</code> are passed, <code>SageMakerImageVersionArn</code> is used. Any updates to <code>SageMakerImageArn</code> will not take effect if <code>SageMakerImageVersionArn</code> already exists in the <code>ResourceSpec</code> because <code>SageMakerImageVersionArn</code> always takes precedence. To clear the value set for <code>SageMakerImageVersionArn</code>, pass <code>None</code> as the value.</p>
    /// </note>
    pub fn get_default_resource_spec(&self) -> &::std::option::Option<crate::types::ResourceSpec> {
        &self.default_resource_spec
    }
    /// <p>Settings that are used to configure and manage the lifecycle of CodeEditor applications in a space.</p>
    pub fn app_lifecycle_management(mut self, input: crate::types::SpaceAppLifecycleManagement) -> Self {
        self.app_lifecycle_management = ::std::option::Option::Some(input);
        self
    }
    /// <p>Settings that are used to configure and manage the lifecycle of CodeEditor applications in a space.</p>
    pub fn set_app_lifecycle_management(mut self, input: ::std::option::Option<crate::types::SpaceAppLifecycleManagement>) -> Self {
        self.app_lifecycle_management = input;
        self
    }
    /// <p>Settings that are used to configure and manage the lifecycle of CodeEditor applications in a space.</p>
    pub fn get_app_lifecycle_management(&self) -> &::std::option::Option<crate::types::SpaceAppLifecycleManagement> {
        &self.app_lifecycle_management
    }
    /// Consumes the builder and constructs a [`SpaceCodeEditorAppSettings`](crate::types::SpaceCodeEditorAppSettings).
    pub fn build(self) -> crate::types::SpaceCodeEditorAppSettings {
        crate::types::SpaceCodeEditorAppSettings {
            default_resource_spec: self.default_resource_spec,
            app_lifecycle_management: self.app_lifecycle_management,
        }
    }
}
