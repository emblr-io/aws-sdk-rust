// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The settings that apply to an Amazon SageMaker AI domain when you use it in Amazon SageMaker Unified Studio.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UnifiedStudioSettings {
    /// <p>Sets whether you can access the domain in Amazon SageMaker Studio:</p>
    /// <dl>
    /// <dt>
    /// ENABLED
    /// </dt>
    /// <dd>
    /// <p>You can access the domain in Amazon SageMaker Studio. If you migrate the domain to Amazon SageMaker Unified Studio, you can access it in both studio interfaces.</p>
    /// </dd>
    /// <dt>
    /// DISABLED
    /// </dt>
    /// <dd>
    /// <p>You can't access the domain in Amazon SageMaker Studio. If you migrate the domain to Amazon SageMaker Unified Studio, you can access it only in that studio interface.</p>
    /// </dd>
    /// </dl>
    /// <p>To migrate a domain to Amazon SageMaker Unified Studio, you specify the UnifiedStudioSettings data type when you use the UpdateDomain action.</p>
    pub studio_web_portal_access: ::std::option::Option<crate::types::FeatureStatus>,
    /// <p>The ID of the Amazon Web Services account that has the Amazon SageMaker Unified Studio domain. The default value, if you don't specify an ID, is the ID of the account that has the Amazon SageMaker AI domain.</p>
    pub domain_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region where the domain is located in Amazon SageMaker Unified Studio. The default value, if you don't specify a Region, is the Region where the Amazon SageMaker AI domain is located.</p>
    pub domain_region: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon SageMaker Unified Studio domain associated with this domain.</p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon SageMaker Unified Studio project that corresponds to the domain.</p>
    pub project_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the environment that Amazon SageMaker Unified Studio associates with the domain.</p>
    pub environment_id: ::std::option::Option<::std::string::String>,
    /// <p>The location where Amazon S3 stores temporary execution data and other artifacts for the project that corresponds to the domain.</p>
    pub project_s3_path: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the application managed by SageMaker AI and SageMaker Unified Studio in the Amazon Web Services IAM Identity Center.</p>
    pub single_sign_on_application_arn: ::std::option::Option<::std::string::String>,
}
impl UnifiedStudioSettings {
    /// <p>Sets whether you can access the domain in Amazon SageMaker Studio:</p>
    /// <dl>
    /// <dt>
    /// ENABLED
    /// </dt>
    /// <dd>
    /// <p>You can access the domain in Amazon SageMaker Studio. If you migrate the domain to Amazon SageMaker Unified Studio, you can access it in both studio interfaces.</p>
    /// </dd>
    /// <dt>
    /// DISABLED
    /// </dt>
    /// <dd>
    /// <p>You can't access the domain in Amazon SageMaker Studio. If you migrate the domain to Amazon SageMaker Unified Studio, you can access it only in that studio interface.</p>
    /// </dd>
    /// </dl>
    /// <p>To migrate a domain to Amazon SageMaker Unified Studio, you specify the UnifiedStudioSettings data type when you use the UpdateDomain action.</p>
    pub fn studio_web_portal_access(&self) -> ::std::option::Option<&crate::types::FeatureStatus> {
        self.studio_web_portal_access.as_ref()
    }
    /// <p>The ID of the Amazon Web Services account that has the Amazon SageMaker Unified Studio domain. The default value, if you don't specify an ID, is the ID of the account that has the Amazon SageMaker AI domain.</p>
    pub fn domain_account_id(&self) -> ::std::option::Option<&str> {
        self.domain_account_id.as_deref()
    }
    /// <p>The Amazon Web Services Region where the domain is located in Amazon SageMaker Unified Studio. The default value, if you don't specify a Region, is the Region where the Amazon SageMaker AI domain is located.</p>
    pub fn domain_region(&self) -> ::std::option::Option<&str> {
        self.domain_region.as_deref()
    }
    /// <p>The ID of the Amazon SageMaker Unified Studio domain associated with this domain.</p>
    pub fn domain_id(&self) -> ::std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The ID of the Amazon SageMaker Unified Studio project that corresponds to the domain.</p>
    pub fn project_id(&self) -> ::std::option::Option<&str> {
        self.project_id.as_deref()
    }
    /// <p>The ID of the environment that Amazon SageMaker Unified Studio associates with the domain.</p>
    pub fn environment_id(&self) -> ::std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>The location where Amazon S3 stores temporary execution data and other artifacts for the project that corresponds to the domain.</p>
    pub fn project_s3_path(&self) -> ::std::option::Option<&str> {
        self.project_s3_path.as_deref()
    }
    /// <p>The ARN of the application managed by SageMaker AI and SageMaker Unified Studio in the Amazon Web Services IAM Identity Center.</p>
    pub fn single_sign_on_application_arn(&self) -> ::std::option::Option<&str> {
        self.single_sign_on_application_arn.as_deref()
    }
}
impl UnifiedStudioSettings {
    /// Creates a new builder-style object to manufacture [`UnifiedStudioSettings`](crate::types::UnifiedStudioSettings).
    pub fn builder() -> crate::types::builders::UnifiedStudioSettingsBuilder {
        crate::types::builders::UnifiedStudioSettingsBuilder::default()
    }
}

/// A builder for [`UnifiedStudioSettings`](crate::types::UnifiedStudioSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UnifiedStudioSettingsBuilder {
    pub(crate) studio_web_portal_access: ::std::option::Option<crate::types::FeatureStatus>,
    pub(crate) domain_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) domain_region: ::std::option::Option<::std::string::String>,
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) project_id: ::std::option::Option<::std::string::String>,
    pub(crate) environment_id: ::std::option::Option<::std::string::String>,
    pub(crate) project_s3_path: ::std::option::Option<::std::string::String>,
    pub(crate) single_sign_on_application_arn: ::std::option::Option<::std::string::String>,
}
impl UnifiedStudioSettingsBuilder {
    /// <p>Sets whether you can access the domain in Amazon SageMaker Studio:</p>
    /// <dl>
    /// <dt>
    /// ENABLED
    /// </dt>
    /// <dd>
    /// <p>You can access the domain in Amazon SageMaker Studio. If you migrate the domain to Amazon SageMaker Unified Studio, you can access it in both studio interfaces.</p>
    /// </dd>
    /// <dt>
    /// DISABLED
    /// </dt>
    /// <dd>
    /// <p>You can't access the domain in Amazon SageMaker Studio. If you migrate the domain to Amazon SageMaker Unified Studio, you can access it only in that studio interface.</p>
    /// </dd>
    /// </dl>
    /// <p>To migrate a domain to Amazon SageMaker Unified Studio, you specify the UnifiedStudioSettings data type when you use the UpdateDomain action.</p>
    pub fn studio_web_portal_access(mut self, input: crate::types::FeatureStatus) -> Self {
        self.studio_web_portal_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sets whether you can access the domain in Amazon SageMaker Studio:</p>
    /// <dl>
    /// <dt>
    /// ENABLED
    /// </dt>
    /// <dd>
    /// <p>You can access the domain in Amazon SageMaker Studio. If you migrate the domain to Amazon SageMaker Unified Studio, you can access it in both studio interfaces.</p>
    /// </dd>
    /// <dt>
    /// DISABLED
    /// </dt>
    /// <dd>
    /// <p>You can't access the domain in Amazon SageMaker Studio. If you migrate the domain to Amazon SageMaker Unified Studio, you can access it only in that studio interface.</p>
    /// </dd>
    /// </dl>
    /// <p>To migrate a domain to Amazon SageMaker Unified Studio, you specify the UnifiedStudioSettings data type when you use the UpdateDomain action.</p>
    pub fn set_studio_web_portal_access(mut self, input: ::std::option::Option<crate::types::FeatureStatus>) -> Self {
        self.studio_web_portal_access = input;
        self
    }
    /// <p>Sets whether you can access the domain in Amazon SageMaker Studio:</p>
    /// <dl>
    /// <dt>
    /// ENABLED
    /// </dt>
    /// <dd>
    /// <p>You can access the domain in Amazon SageMaker Studio. If you migrate the domain to Amazon SageMaker Unified Studio, you can access it in both studio interfaces.</p>
    /// </dd>
    /// <dt>
    /// DISABLED
    /// </dt>
    /// <dd>
    /// <p>You can't access the domain in Amazon SageMaker Studio. If you migrate the domain to Amazon SageMaker Unified Studio, you can access it only in that studio interface.</p>
    /// </dd>
    /// </dl>
    /// <p>To migrate a domain to Amazon SageMaker Unified Studio, you specify the UnifiedStudioSettings data type when you use the UpdateDomain action.</p>
    pub fn get_studio_web_portal_access(&self) -> &::std::option::Option<crate::types::FeatureStatus> {
        &self.studio_web_portal_access
    }
    /// <p>The ID of the Amazon Web Services account that has the Amazon SageMaker Unified Studio domain. The default value, if you don't specify an ID, is the ID of the account that has the Amazon SageMaker AI domain.</p>
    pub fn domain_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that has the Amazon SageMaker Unified Studio domain. The default value, if you don't specify an ID, is the ID of the account that has the Amazon SageMaker AI domain.</p>
    pub fn set_domain_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_account_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that has the Amazon SageMaker Unified Studio domain. The default value, if you don't specify an ID, is the ID of the account that has the Amazon SageMaker AI domain.</p>
    pub fn get_domain_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_account_id
    }
    /// <p>The Amazon Web Services Region where the domain is located in Amazon SageMaker Unified Studio. The default value, if you don't specify a Region, is the Region where the Amazon SageMaker AI domain is located.</p>
    pub fn domain_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region where the domain is located in Amazon SageMaker Unified Studio. The default value, if you don't specify a Region, is the Region where the Amazon SageMaker AI domain is located.</p>
    pub fn set_domain_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_region = input;
        self
    }
    /// <p>The Amazon Web Services Region where the domain is located in Amazon SageMaker Unified Studio. The default value, if you don't specify a Region, is the Region where the Amazon SageMaker AI domain is located.</p>
    pub fn get_domain_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_region
    }
    /// <p>The ID of the Amazon SageMaker Unified Studio domain associated with this domain.</p>
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon SageMaker Unified Studio domain associated with this domain.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The ID of the Amazon SageMaker Unified Studio domain associated with this domain.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The ID of the Amazon SageMaker Unified Studio project that corresponds to the domain.</p>
    pub fn project_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon SageMaker Unified Studio project that corresponds to the domain.</p>
    pub fn set_project_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_id = input;
        self
    }
    /// <p>The ID of the Amazon SageMaker Unified Studio project that corresponds to the domain.</p>
    pub fn get_project_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_id
    }
    /// <p>The ID of the environment that Amazon SageMaker Unified Studio associates with the domain.</p>
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the environment that Amazon SageMaker Unified Studio associates with the domain.</p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>The ID of the environment that Amazon SageMaker Unified Studio associates with the domain.</p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_id
    }
    /// <p>The location where Amazon S3 stores temporary execution data and other artifacts for the project that corresponds to the domain.</p>
    pub fn project_s3_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_s3_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The location where Amazon S3 stores temporary execution data and other artifacts for the project that corresponds to the domain.</p>
    pub fn set_project_s3_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_s3_path = input;
        self
    }
    /// <p>The location where Amazon S3 stores temporary execution data and other artifacts for the project that corresponds to the domain.</p>
    pub fn get_project_s3_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_s3_path
    }
    /// <p>The ARN of the application managed by SageMaker AI and SageMaker Unified Studio in the Amazon Web Services IAM Identity Center.</p>
    pub fn single_sign_on_application_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.single_sign_on_application_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the application managed by SageMaker AI and SageMaker Unified Studio in the Amazon Web Services IAM Identity Center.</p>
    pub fn set_single_sign_on_application_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.single_sign_on_application_arn = input;
        self
    }
    /// <p>The ARN of the application managed by SageMaker AI and SageMaker Unified Studio in the Amazon Web Services IAM Identity Center.</p>
    pub fn get_single_sign_on_application_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.single_sign_on_application_arn
    }
    /// Consumes the builder and constructs a [`UnifiedStudioSettings`](crate::types::UnifiedStudioSettings).
    pub fn build(self) -> crate::types::UnifiedStudioSettings {
        crate::types::UnifiedStudioSettings {
            studio_web_portal_access: self.studio_web_portal_access,
            domain_account_id: self.domain_account_id,
            domain_region: self.domain_region,
            domain_id: self.domain_id,
            project_id: self.project_id,
            environment_id: self.environment_id,
            project_s3_path: self.project_s3_path,
            single_sign_on_application_arn: self.single_sign_on_application_arn,
        }
    }
}
