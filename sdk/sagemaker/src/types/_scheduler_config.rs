// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Cluster policy configuration. This policy is used for task prioritization and fair-share allocation. This helps prioritize critical workloads and distributes idle compute across entities.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SchedulerConfig {
    /// <p>List of the priority classes, <code>PriorityClass</code>, of the cluster policy. When specified, these class configurations define how tasks are queued.</p>
    pub priority_classes: ::std::option::Option<::std::vec::Vec<crate::types::PriorityClass>>,
    /// <p>When enabled, entities borrow idle compute based on their assigned <code>FairShareWeight</code>.</p>
    /// <p>When disabled, entities borrow idle compute based on a first-come first-serve basis.</p>
    /// <p>Default is <code>Enabled</code>.</p>
    pub fair_share: ::std::option::Option<crate::types::FairShare>,
}
impl SchedulerConfig {
    /// <p>List of the priority classes, <code>PriorityClass</code>, of the cluster policy. When specified, these class configurations define how tasks are queued.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.priority_classes.is_none()`.
    pub fn priority_classes(&self) -> &[crate::types::PriorityClass] {
        self.priority_classes.as_deref().unwrap_or_default()
    }
    /// <p>When enabled, entities borrow idle compute based on their assigned <code>FairShareWeight</code>.</p>
    /// <p>When disabled, entities borrow idle compute based on a first-come first-serve basis.</p>
    /// <p>Default is <code>Enabled</code>.</p>
    pub fn fair_share(&self) -> ::std::option::Option<&crate::types::FairShare> {
        self.fair_share.as_ref()
    }
}
impl SchedulerConfig {
    /// Creates a new builder-style object to manufacture [`SchedulerConfig`](crate::types::SchedulerConfig).
    pub fn builder() -> crate::types::builders::SchedulerConfigBuilder {
        crate::types::builders::SchedulerConfigBuilder::default()
    }
}

/// A builder for [`SchedulerConfig`](crate::types::SchedulerConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SchedulerConfigBuilder {
    pub(crate) priority_classes: ::std::option::Option<::std::vec::Vec<crate::types::PriorityClass>>,
    pub(crate) fair_share: ::std::option::Option<crate::types::FairShare>,
}
impl SchedulerConfigBuilder {
    /// Appends an item to `priority_classes`.
    ///
    /// To override the contents of this collection use [`set_priority_classes`](Self::set_priority_classes).
    ///
    /// <p>List of the priority classes, <code>PriorityClass</code>, of the cluster policy. When specified, these class configurations define how tasks are queued.</p>
    pub fn priority_classes(mut self, input: crate::types::PriorityClass) -> Self {
        let mut v = self.priority_classes.unwrap_or_default();
        v.push(input);
        self.priority_classes = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of the priority classes, <code>PriorityClass</code>, of the cluster policy. When specified, these class configurations define how tasks are queued.</p>
    pub fn set_priority_classes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PriorityClass>>) -> Self {
        self.priority_classes = input;
        self
    }
    /// <p>List of the priority classes, <code>PriorityClass</code>, of the cluster policy. When specified, these class configurations define how tasks are queued.</p>
    pub fn get_priority_classes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PriorityClass>> {
        &self.priority_classes
    }
    /// <p>When enabled, entities borrow idle compute based on their assigned <code>FairShareWeight</code>.</p>
    /// <p>When disabled, entities borrow idle compute based on a first-come first-serve basis.</p>
    /// <p>Default is <code>Enabled</code>.</p>
    pub fn fair_share(mut self, input: crate::types::FairShare) -> Self {
        self.fair_share = ::std::option::Option::Some(input);
        self
    }
    /// <p>When enabled, entities borrow idle compute based on their assigned <code>FairShareWeight</code>.</p>
    /// <p>When disabled, entities borrow idle compute based on a first-come first-serve basis.</p>
    /// <p>Default is <code>Enabled</code>.</p>
    pub fn set_fair_share(mut self, input: ::std::option::Option<crate::types::FairShare>) -> Self {
        self.fair_share = input;
        self
    }
    /// <p>When enabled, entities borrow idle compute based on their assigned <code>FairShareWeight</code>.</p>
    /// <p>When disabled, entities borrow idle compute based on a first-come first-serve basis.</p>
    /// <p>Default is <code>Enabled</code>.</p>
    pub fn get_fair_share(&self) -> &::std::option::Option<crate::types::FairShare> {
        &self.fair_share
    }
    /// Consumes the builder and constructs a [`SchedulerConfig`](crate::types::SchedulerConfig).
    pub fn build(self) -> crate::types::SchedulerConfig {
        crate::types::SchedulerConfig {
            priority_classes: self.priority_classes,
            fair_share: self.fair_share,
        }
    }
}
