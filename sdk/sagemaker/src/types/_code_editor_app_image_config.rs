// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for the file system and kernels in a SageMaker image running as a Code Editor app. The <code>FileSystemConfig</code> object is not supported.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeEditorAppImageConfig {
    /// <p>The Amazon Elastic File System storage configuration for a SageMaker AI image.</p>
    pub file_system_config: ::std::option::Option<crate::types::FileSystemConfig>,
    /// <p>The configuration used to run the application image container.</p>
    pub container_config: ::std::option::Option<crate::types::ContainerConfig>,
}
impl CodeEditorAppImageConfig {
    /// <p>The Amazon Elastic File System storage configuration for a SageMaker AI image.</p>
    pub fn file_system_config(&self) -> ::std::option::Option<&crate::types::FileSystemConfig> {
        self.file_system_config.as_ref()
    }
    /// <p>The configuration used to run the application image container.</p>
    pub fn container_config(&self) -> ::std::option::Option<&crate::types::ContainerConfig> {
        self.container_config.as_ref()
    }
}
impl CodeEditorAppImageConfig {
    /// Creates a new builder-style object to manufacture [`CodeEditorAppImageConfig`](crate::types::CodeEditorAppImageConfig).
    pub fn builder() -> crate::types::builders::CodeEditorAppImageConfigBuilder {
        crate::types::builders::CodeEditorAppImageConfigBuilder::default()
    }
}

/// A builder for [`CodeEditorAppImageConfig`](crate::types::CodeEditorAppImageConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CodeEditorAppImageConfigBuilder {
    pub(crate) file_system_config: ::std::option::Option<crate::types::FileSystemConfig>,
    pub(crate) container_config: ::std::option::Option<crate::types::ContainerConfig>,
}
impl CodeEditorAppImageConfigBuilder {
    /// <p>The Amazon Elastic File System storage configuration for a SageMaker AI image.</p>
    pub fn file_system_config(mut self, input: crate::types::FileSystemConfig) -> Self {
        self.file_system_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon Elastic File System storage configuration for a SageMaker AI image.</p>
    pub fn set_file_system_config(mut self, input: ::std::option::Option<crate::types::FileSystemConfig>) -> Self {
        self.file_system_config = input;
        self
    }
    /// <p>The Amazon Elastic File System storage configuration for a SageMaker AI image.</p>
    pub fn get_file_system_config(&self) -> &::std::option::Option<crate::types::FileSystemConfig> {
        &self.file_system_config
    }
    /// <p>The configuration used to run the application image container.</p>
    pub fn container_config(mut self, input: crate::types::ContainerConfig) -> Self {
        self.container_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration used to run the application image container.</p>
    pub fn set_container_config(mut self, input: ::std::option::Option<crate::types::ContainerConfig>) -> Self {
        self.container_config = input;
        self
    }
    /// <p>The configuration used to run the application image container.</p>
    pub fn get_container_config(&self) -> &::std::option::Option<crate::types::ContainerConfig> {
        &self.container_config
    }
    /// Consumes the builder and constructs a [`CodeEditorAppImageConfig`](crate::types::CodeEditorAppImageConfig).
    pub fn build(self) -> crate::types::CodeEditorAppImageConfig {
        crate::types::CodeEditorAppImageConfig {
            file_system_config: self.file_system_config,
            container_config: self.container_config,
        }
    }
}
