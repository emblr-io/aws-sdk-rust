// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings that are used to configure and manage the lifecycle of Amazon SageMaker Studio applications in a space.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SpaceAppLifecycleManagement {
    /// <p>Settings related to idle shutdown of Studio applications.</p>
    pub idle_settings: ::std::option::Option<crate::types::SpaceIdleSettings>,
}
impl SpaceAppLifecycleManagement {
    /// <p>Settings related to idle shutdown of Studio applications.</p>
    pub fn idle_settings(&self) -> ::std::option::Option<&crate::types::SpaceIdleSettings> {
        self.idle_settings.as_ref()
    }
}
impl SpaceAppLifecycleManagement {
    /// Creates a new builder-style object to manufacture [`SpaceAppLifecycleManagement`](crate::types::SpaceAppLifecycleManagement).
    pub fn builder() -> crate::types::builders::SpaceAppLifecycleManagementBuilder {
        crate::types::builders::SpaceAppLifecycleManagementBuilder::default()
    }
}

/// A builder for [`SpaceAppLifecycleManagement`](crate::types::SpaceAppLifecycleManagement).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SpaceAppLifecycleManagementBuilder {
    pub(crate) idle_settings: ::std::option::Option<crate::types::SpaceIdleSettings>,
}
impl SpaceAppLifecycleManagementBuilder {
    /// <p>Settings related to idle shutdown of Studio applications.</p>
    pub fn idle_settings(mut self, input: crate::types::SpaceIdleSettings) -> Self {
        self.idle_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>Settings related to idle shutdown of Studio applications.</p>
    pub fn set_idle_settings(mut self, input: ::std::option::Option<crate::types::SpaceIdleSettings>) -> Self {
        self.idle_settings = input;
        self
    }
    /// <p>Settings related to idle shutdown of Studio applications.</p>
    pub fn get_idle_settings(&self) -> &::std::option::Option<crate::types::SpaceIdleSettings> {
        &self.idle_settings
    }
    /// Consumes the builder and constructs a [`SpaceAppLifecycleManagement`](crate::types::SpaceAppLifecycleManagement).
    pub fn build(self) -> crate::types::SpaceAppLifecycleManagement {
        crate::types::SpaceAppLifecycleManagement {
            idle_settings: self.idle_settings,
        }
    }
}
