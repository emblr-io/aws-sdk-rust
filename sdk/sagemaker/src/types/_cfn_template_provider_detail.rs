// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a CloudFormation template provider configuration and associated provisioning information.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CfnTemplateProviderDetail {
    /// <p>The unique identifier of the template within the project.</p>
    pub template_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon S3 URL of the CloudFormation template.</p>
    pub template_url: ::std::option::Option<::std::string::String>,
    /// <p>The IAM role used by CloudFormation to create the stack.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>An array of CloudFormation stack parameters.</p>
    pub parameters: ::std::option::Option<::std::vec::Vec<crate::types::CfnStackParameter>>,
    /// <p>Information about the CloudFormation stack created by the template provider.</p>
    pub stack_detail: ::std::option::Option<crate::types::CfnStackDetail>,
}
impl CfnTemplateProviderDetail {
    /// <p>The unique identifier of the template within the project.</p>
    pub fn template_name(&self) -> ::std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>The Amazon S3 URL of the CloudFormation template.</p>
    pub fn template_url(&self) -> ::std::option::Option<&str> {
        self.template_url.as_deref()
    }
    /// <p>The IAM role used by CloudFormation to create the stack.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>An array of CloudFormation stack parameters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.parameters.is_none()`.
    pub fn parameters(&self) -> &[crate::types::CfnStackParameter] {
        self.parameters.as_deref().unwrap_or_default()
    }
    /// <p>Information about the CloudFormation stack created by the template provider.</p>
    pub fn stack_detail(&self) -> ::std::option::Option<&crate::types::CfnStackDetail> {
        self.stack_detail.as_ref()
    }
}
impl CfnTemplateProviderDetail {
    /// Creates a new builder-style object to manufacture [`CfnTemplateProviderDetail`](crate::types::CfnTemplateProviderDetail).
    pub fn builder() -> crate::types::builders::CfnTemplateProviderDetailBuilder {
        crate::types::builders::CfnTemplateProviderDetailBuilder::default()
    }
}

/// A builder for [`CfnTemplateProviderDetail`](crate::types::CfnTemplateProviderDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CfnTemplateProviderDetailBuilder {
    pub(crate) template_name: ::std::option::Option<::std::string::String>,
    pub(crate) template_url: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) parameters: ::std::option::Option<::std::vec::Vec<crate::types::CfnStackParameter>>,
    pub(crate) stack_detail: ::std::option::Option<crate::types::CfnStackDetail>,
}
impl CfnTemplateProviderDetailBuilder {
    /// <p>The unique identifier of the template within the project.</p>
    /// This field is required.
    pub fn template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the template within the project.</p>
    pub fn set_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The unique identifier of the template within the project.</p>
    pub fn get_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_name
    }
    /// <p>The Amazon S3 URL of the CloudFormation template.</p>
    /// This field is required.
    pub fn template_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 URL of the CloudFormation template.</p>
    pub fn set_template_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_url = input;
        self
    }
    /// <p>The Amazon S3 URL of the CloudFormation template.</p>
    pub fn get_template_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_url
    }
    /// <p>The IAM role used by CloudFormation to create the stack.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role used by CloudFormation to create the stack.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The IAM role used by CloudFormation to create the stack.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Appends an item to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>An array of CloudFormation stack parameters.</p>
    pub fn parameters(mut self, input: crate::types::CfnStackParameter) -> Self {
        let mut v = self.parameters.unwrap_or_default();
        v.push(input);
        self.parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of CloudFormation stack parameters.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CfnStackParameter>>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>An array of CloudFormation stack parameters.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CfnStackParameter>> {
        &self.parameters
    }
    /// <p>Information about the CloudFormation stack created by the template provider.</p>
    pub fn stack_detail(mut self, input: crate::types::CfnStackDetail) -> Self {
        self.stack_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the CloudFormation stack created by the template provider.</p>
    pub fn set_stack_detail(mut self, input: ::std::option::Option<crate::types::CfnStackDetail>) -> Self {
        self.stack_detail = input;
        self
    }
    /// <p>Information about the CloudFormation stack created by the template provider.</p>
    pub fn get_stack_detail(&self) -> &::std::option::Option<crate::types::CfnStackDetail> {
        &self.stack_detail
    }
    /// Consumes the builder and constructs a [`CfnTemplateProviderDetail`](crate::types::CfnTemplateProviderDetail).
    pub fn build(self) -> crate::types::CfnTemplateProviderDetail {
        crate::types::CfnTemplateProviderDetail {
            template_name: self.template_name,
            template_url: self.template_url,
            role_arn: self.role_arn,
            parameters: self.parameters,
            stack_detail: self.stack_detail,
        }
    }
}
