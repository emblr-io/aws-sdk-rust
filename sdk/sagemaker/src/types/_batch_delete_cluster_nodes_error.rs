// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents an error encountered when deleting a node from a SageMaker HyperPod cluster.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchDeleteClusterNodesError {
    /// <p>The error code associated with the error encountered when deleting a node.</p>
    /// <p>The code provides information about the specific issue encountered, such as the node not being found, the node's status being invalid for deletion, or the node ID being in use by another process.</p>
    pub code: ::std::option::Option<crate::types::BatchDeleteClusterNodesErrorCode>,
    /// <p>A message describing the error encountered when deleting a node.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the node that encountered an error during the deletion process.</p>
    pub node_id: ::std::option::Option<::std::string::String>,
}
impl BatchDeleteClusterNodesError {
    /// <p>The error code associated with the error encountered when deleting a node.</p>
    /// <p>The code provides information about the specific issue encountered, such as the node not being found, the node's status being invalid for deletion, or the node ID being in use by another process.</p>
    pub fn code(&self) -> ::std::option::Option<&crate::types::BatchDeleteClusterNodesErrorCode> {
        self.code.as_ref()
    }
    /// <p>A message describing the error encountered when deleting a node.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The ID of the node that encountered an error during the deletion process.</p>
    pub fn node_id(&self) -> ::std::option::Option<&str> {
        self.node_id.as_deref()
    }
}
impl BatchDeleteClusterNodesError {
    /// Creates a new builder-style object to manufacture [`BatchDeleteClusterNodesError`](crate::types::BatchDeleteClusterNodesError).
    pub fn builder() -> crate::types::builders::BatchDeleteClusterNodesErrorBuilder {
        crate::types::builders::BatchDeleteClusterNodesErrorBuilder::default()
    }
}

/// A builder for [`BatchDeleteClusterNodesError`](crate::types::BatchDeleteClusterNodesError).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchDeleteClusterNodesErrorBuilder {
    pub(crate) code: ::std::option::Option<crate::types::BatchDeleteClusterNodesErrorCode>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) node_id: ::std::option::Option<::std::string::String>,
}
impl BatchDeleteClusterNodesErrorBuilder {
    /// <p>The error code associated with the error encountered when deleting a node.</p>
    /// <p>The code provides information about the specific issue encountered, such as the node not being found, the node's status being invalid for deletion, or the node ID being in use by another process.</p>
    /// This field is required.
    pub fn code(mut self, input: crate::types::BatchDeleteClusterNodesErrorCode) -> Self {
        self.code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The error code associated with the error encountered when deleting a node.</p>
    /// <p>The code provides information about the specific issue encountered, such as the node not being found, the node's status being invalid for deletion, or the node ID being in use by another process.</p>
    pub fn set_code(mut self, input: ::std::option::Option<crate::types::BatchDeleteClusterNodesErrorCode>) -> Self {
        self.code = input;
        self
    }
    /// <p>The error code associated with the error encountered when deleting a node.</p>
    /// <p>The code provides information about the specific issue encountered, such as the node not being found, the node's status being invalid for deletion, or the node ID being in use by another process.</p>
    pub fn get_code(&self) -> &::std::option::Option<crate::types::BatchDeleteClusterNodesErrorCode> {
        &self.code
    }
    /// <p>A message describing the error encountered when deleting a node.</p>
    /// This field is required.
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message describing the error encountered when deleting a node.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>A message describing the error encountered when deleting a node.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>The ID of the node that encountered an error during the deletion process.</p>
    /// This field is required.
    pub fn node_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the node that encountered an error during the deletion process.</p>
    pub fn set_node_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_id = input;
        self
    }
    /// <p>The ID of the node that encountered an error during the deletion process.</p>
    pub fn get_node_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_id
    }
    /// Consumes the builder and constructs a [`BatchDeleteClusterNodesError`](crate::types::BatchDeleteClusterNodesError).
    pub fn build(self) -> crate::types::BatchDeleteClusterNodesError {
        crate::types::BatchDeleteClusterNodesError {
            code: self.code,
            message: self.message,
            node_id: self.node_id,
        }
    }
}
