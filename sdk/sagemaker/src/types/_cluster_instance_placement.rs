// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the placement details for the node in the SageMaker HyperPod cluster, including the Availability Zone and the unique identifier (ID) of the Availability Zone.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClusterInstancePlacement {
    /// <p>The Availability Zone where the node in the SageMaker HyperPod cluster is launched.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier (ID) of the Availability Zone where the node in the SageMaker HyperPod cluster is launched.</p>
    pub availability_zone_id: ::std::option::Option<::std::string::String>,
}
impl ClusterInstancePlacement {
    /// <p>The Availability Zone where the node in the SageMaker HyperPod cluster is launched.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The unique identifier (ID) of the Availability Zone where the node in the SageMaker HyperPod cluster is launched.</p>
    pub fn availability_zone_id(&self) -> ::std::option::Option<&str> {
        self.availability_zone_id.as_deref()
    }
}
impl ClusterInstancePlacement {
    /// Creates a new builder-style object to manufacture [`ClusterInstancePlacement`](crate::types::ClusterInstancePlacement).
    pub fn builder() -> crate::types::builders::ClusterInstancePlacementBuilder {
        crate::types::builders::ClusterInstancePlacementBuilder::default()
    }
}

/// A builder for [`ClusterInstancePlacement`](crate::types::ClusterInstancePlacement).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ClusterInstancePlacementBuilder {
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone_id: ::std::option::Option<::std::string::String>,
}
impl ClusterInstancePlacementBuilder {
    /// <p>The Availability Zone where the node in the SageMaker HyperPod cluster is launched.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone where the node in the SageMaker HyperPod cluster is launched.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The Availability Zone where the node in the SageMaker HyperPod cluster is launched.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The unique identifier (ID) of the Availability Zone where the node in the SageMaker HyperPod cluster is launched.</p>
    pub fn availability_zone_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier (ID) of the Availability Zone where the node in the SageMaker HyperPod cluster is launched.</p>
    pub fn set_availability_zone_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone_id = input;
        self
    }
    /// <p>The unique identifier (ID) of the Availability Zone where the node in the SageMaker HyperPod cluster is launched.</p>
    pub fn get_availability_zone_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone_id
    }
    /// Consumes the builder and constructs a [`ClusterInstancePlacement`](crate::types::ClusterInstancePlacement).
    pub fn build(self) -> crate::types::ClusterInstancePlacement {
        crate::types::ClusterInstancePlacement {
            availability_zone: self.availability_zone,
            availability_zone_id: self.availability_zone_id,
        }
    }
}
