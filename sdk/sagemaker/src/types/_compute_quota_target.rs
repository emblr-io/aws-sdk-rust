// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The target entity to allocate compute resources to.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComputeQuotaTarget {
    /// <p>Name of the team to allocate compute resources to.</p>
    pub team_name: ::std::option::Option<::std::string::String>,
    /// <p>Assigned entity fair-share weight. Idle compute will be shared across entities based on these assigned weights. This weight is only used when <code>FairShare</code> is enabled.</p>
    /// <p>A weight of 0 is the lowest priority and 100 is the highest. Weight 0 is the default.</p>
    pub fair_share_weight: ::std::option::Option<i32>,
}
impl ComputeQuotaTarget {
    /// <p>Name of the team to allocate compute resources to.</p>
    pub fn team_name(&self) -> ::std::option::Option<&str> {
        self.team_name.as_deref()
    }
    /// <p>Assigned entity fair-share weight. Idle compute will be shared across entities based on these assigned weights. This weight is only used when <code>FairShare</code> is enabled.</p>
    /// <p>A weight of 0 is the lowest priority and 100 is the highest. Weight 0 is the default.</p>
    pub fn fair_share_weight(&self) -> ::std::option::Option<i32> {
        self.fair_share_weight
    }
}
impl ComputeQuotaTarget {
    /// Creates a new builder-style object to manufacture [`ComputeQuotaTarget`](crate::types::ComputeQuotaTarget).
    pub fn builder() -> crate::types::builders::ComputeQuotaTargetBuilder {
        crate::types::builders::ComputeQuotaTargetBuilder::default()
    }
}

/// A builder for [`ComputeQuotaTarget`](crate::types::ComputeQuotaTarget).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ComputeQuotaTargetBuilder {
    pub(crate) team_name: ::std::option::Option<::std::string::String>,
    pub(crate) fair_share_weight: ::std::option::Option<i32>,
}
impl ComputeQuotaTargetBuilder {
    /// <p>Name of the team to allocate compute resources to.</p>
    /// This field is required.
    pub fn team_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.team_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the team to allocate compute resources to.</p>
    pub fn set_team_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.team_name = input;
        self
    }
    /// <p>Name of the team to allocate compute resources to.</p>
    pub fn get_team_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.team_name
    }
    /// <p>Assigned entity fair-share weight. Idle compute will be shared across entities based on these assigned weights. This weight is only used when <code>FairShare</code> is enabled.</p>
    /// <p>A weight of 0 is the lowest priority and 100 is the highest. Weight 0 is the default.</p>
    pub fn fair_share_weight(mut self, input: i32) -> Self {
        self.fair_share_weight = ::std::option::Option::Some(input);
        self
    }
    /// <p>Assigned entity fair-share weight. Idle compute will be shared across entities based on these assigned weights. This weight is only used when <code>FairShare</code> is enabled.</p>
    /// <p>A weight of 0 is the lowest priority and 100 is the highest. Weight 0 is the default.</p>
    pub fn set_fair_share_weight(mut self, input: ::std::option::Option<i32>) -> Self {
        self.fair_share_weight = input;
        self
    }
    /// <p>Assigned entity fair-share weight. Idle compute will be shared across entities based on these assigned weights. This weight is only used when <code>FairShare</code> is enabled.</p>
    /// <p>A weight of 0 is the lowest priority and 100 is the highest. Weight 0 is the default.</p>
    pub fn get_fair_share_weight(&self) -> &::std::option::Option<i32> {
        &self.fair_share_weight
    }
    /// Consumes the builder and constructs a [`ComputeQuotaTarget`](crate::types::ComputeQuotaTarget).
    pub fn build(self) -> crate::types::ComputeQuotaTarget {
        crate::types::ComputeQuotaTarget {
            team_name: self.team_name,
            fair_share_weight: self.fair_share_weight,
        }
    }
}
