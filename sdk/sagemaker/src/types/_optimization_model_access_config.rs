// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The access configuration settings for the source ML model for an optimization job, where you can accept the model end-user license agreement (EULA).</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OptimizationModelAccessConfig {
    /// <p>Specifies agreement to the model end-user license agreement (EULA). The <code>AcceptEula</code> value must be explicitly defined as <code>True</code> in order to accept the EULA that this model requires. You are responsible for reviewing and complying with any applicable license terms and making sure they are acceptable for your use case before downloading or using a model.</p>
    pub accept_eula: ::std::option::Option<bool>,
}
impl OptimizationModelAccessConfig {
    /// <p>Specifies agreement to the model end-user license agreement (EULA). The <code>AcceptEula</code> value must be explicitly defined as <code>True</code> in order to accept the EULA that this model requires. You are responsible for reviewing and complying with any applicable license terms and making sure they are acceptable for your use case before downloading or using a model.</p>
    pub fn accept_eula(&self) -> ::std::option::Option<bool> {
        self.accept_eula
    }
}
impl OptimizationModelAccessConfig {
    /// Creates a new builder-style object to manufacture [`OptimizationModelAccessConfig`](crate::types::OptimizationModelAccessConfig).
    pub fn builder() -> crate::types::builders::OptimizationModelAccessConfigBuilder {
        crate::types::builders::OptimizationModelAccessConfigBuilder::default()
    }
}

/// A builder for [`OptimizationModelAccessConfig`](crate::types::OptimizationModelAccessConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OptimizationModelAccessConfigBuilder {
    pub(crate) accept_eula: ::std::option::Option<bool>,
}
impl OptimizationModelAccessConfigBuilder {
    /// <p>Specifies agreement to the model end-user license agreement (EULA). The <code>AcceptEula</code> value must be explicitly defined as <code>True</code> in order to accept the EULA that this model requires. You are responsible for reviewing and complying with any applicable license terms and making sure they are acceptable for your use case before downloading or using a model.</p>
    /// This field is required.
    pub fn accept_eula(mut self, input: bool) -> Self {
        self.accept_eula = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies agreement to the model end-user license agreement (EULA). The <code>AcceptEula</code> value must be explicitly defined as <code>True</code> in order to accept the EULA that this model requires. You are responsible for reviewing and complying with any applicable license terms and making sure they are acceptable for your use case before downloading or using a model.</p>
    pub fn set_accept_eula(mut self, input: ::std::option::Option<bool>) -> Self {
        self.accept_eula = input;
        self
    }
    /// <p>Specifies agreement to the model end-user license agreement (EULA). The <code>AcceptEula</code> value must be explicitly defined as <code>True</code> in order to accept the EULA that this model requires. You are responsible for reviewing and complying with any applicable license terms and making sure they are acceptable for your use case before downloading or using a model.</p>
    pub fn get_accept_eula(&self) -> &::std::option::Option<bool> {
        &self.accept_eula
    }
    /// Consumes the builder and constructs a [`OptimizationModelAccessConfig`](crate::types::OptimizationModelAccessConfig).
    pub fn build(self) -> crate::types::OptimizationModelAccessConfig {
        crate::types::OptimizationModelAccessConfig {
            accept_eula: self.accept_eula,
        }
    }
}
