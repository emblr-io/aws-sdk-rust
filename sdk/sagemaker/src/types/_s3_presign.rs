// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This object defines the access restrictions to Amazon S3 resources that are included in custom worker task templates using the Liquid filter, <code>grant_read_access</code>.</p>
/// <p>To learn more about how custom templates are created, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-custom-templates.html">Create custom worker task templates</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3Presign {
    /// <p>Use this parameter to specify the allowed request source. Possible sources are either <code>SourceIp</code> or <code>VpcSourceIp</code>.</p>
    pub iam_policy_constraints: ::std::option::Option<crate::types::IamPolicyConstraints>,
}
impl S3Presign {
    /// <p>Use this parameter to specify the allowed request source. Possible sources are either <code>SourceIp</code> or <code>VpcSourceIp</code>.</p>
    pub fn iam_policy_constraints(&self) -> ::std::option::Option<&crate::types::IamPolicyConstraints> {
        self.iam_policy_constraints.as_ref()
    }
}
impl S3Presign {
    /// Creates a new builder-style object to manufacture [`S3Presign`](crate::types::S3Presign).
    pub fn builder() -> crate::types::builders::S3PresignBuilder {
        crate::types::builders::S3PresignBuilder::default()
    }
}

/// A builder for [`S3Presign`](crate::types::S3Presign).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct S3PresignBuilder {
    pub(crate) iam_policy_constraints: ::std::option::Option<crate::types::IamPolicyConstraints>,
}
impl S3PresignBuilder {
    /// <p>Use this parameter to specify the allowed request source. Possible sources are either <code>SourceIp</code> or <code>VpcSourceIp</code>.</p>
    pub fn iam_policy_constraints(mut self, input: crate::types::IamPolicyConstraints) -> Self {
        self.iam_policy_constraints = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to specify the allowed request source. Possible sources are either <code>SourceIp</code> or <code>VpcSourceIp</code>.</p>
    pub fn set_iam_policy_constraints(mut self, input: ::std::option::Option<crate::types::IamPolicyConstraints>) -> Self {
        self.iam_policy_constraints = input;
        self
    }
    /// <p>Use this parameter to specify the allowed request source. Possible sources are either <code>SourceIp</code> or <code>VpcSourceIp</code>.</p>
    pub fn get_iam_policy_constraints(&self) -> &::std::option::Option<crate::types::IamPolicyConstraints> {
        &self.iam_policy_constraints
    }
    /// Consumes the builder and constructs a [`S3Presign`](crate::types::S3Presign).
    pub fn build(self) -> crate::types::S3Presign {
        crate::types::S3Presign {
            iam_policy_constraints: self.iam_policy_constraints,
        }
    }
}
