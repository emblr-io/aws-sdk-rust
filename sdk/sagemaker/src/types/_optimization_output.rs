// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Output values produced by an optimization job.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OptimizationOutput {
    /// <p>The image that SageMaker recommends that you use to host the optimized model that you created with an optimization job.</p>
    pub recommended_inference_image: ::std::option::Option<::std::string::String>,
}
impl OptimizationOutput {
    /// <p>The image that SageMaker recommends that you use to host the optimized model that you created with an optimization job.</p>
    pub fn recommended_inference_image(&self) -> ::std::option::Option<&str> {
        self.recommended_inference_image.as_deref()
    }
}
impl OptimizationOutput {
    /// Creates a new builder-style object to manufacture [`OptimizationOutput`](crate::types::OptimizationOutput).
    pub fn builder() -> crate::types::builders::OptimizationOutputBuilder {
        crate::types::builders::OptimizationOutputBuilder::default()
    }
}

/// A builder for [`OptimizationOutput`](crate::types::OptimizationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OptimizationOutputBuilder {
    pub(crate) recommended_inference_image: ::std::option::Option<::std::string::String>,
}
impl OptimizationOutputBuilder {
    /// <p>The image that SageMaker recommends that you use to host the optimized model that you created with an optimization job.</p>
    pub fn recommended_inference_image(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recommended_inference_image = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The image that SageMaker recommends that you use to host the optimized model that you created with an optimization job.</p>
    pub fn set_recommended_inference_image(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recommended_inference_image = input;
        self
    }
    /// <p>The image that SageMaker recommends that you use to host the optimized model that you created with an optimization job.</p>
    pub fn get_recommended_inference_image(&self) -> &::std::option::Option<::std::string::String> {
        &self.recommended_inference_image
    }
    /// Consumes the builder and constructs a [`OptimizationOutput`](crate::types::OptimizationOutput).
    pub fn build(self) -> crate::types::OptimizationOutput {
        crate::types::OptimizationOutput {
            recommended_inference_image: self.recommended_inference_image,
        }
    }
}
