// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A subset of information related to a SageMaker Partner AI App. This information is used as part of the <code>ListPartnerApps</code> API response.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PartnerAppSummary {
    /// <p>The ARN of the SageMaker Partner AI App.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the SageMaker Partner AI App.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The type of SageMaker Partner AI App to create. Must be one of the following: <code>lakera-guard</code>, <code>comet</code>, <code>deepchecks-llm-evaluation</code>, or <code>fiddler</code>.</p>
    pub r#type: ::std::option::Option<crate::types::PartnerAppType>,
    /// <p>The status of the SageMaker Partner AI App.</p>
    pub status: ::std::option::Option<crate::types::PartnerAppStatus>,
    /// <p>The creation time of the SageMaker Partner AI App.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl PartnerAppSummary {
    /// <p>The ARN of the SageMaker Partner AI App.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the SageMaker Partner AI App.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of SageMaker Partner AI App to create. Must be one of the following: <code>lakera-guard</code>, <code>comet</code>, <code>deepchecks-llm-evaluation</code>, or <code>fiddler</code>.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::PartnerAppType> {
        self.r#type.as_ref()
    }
    /// <p>The status of the SageMaker Partner AI App.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::PartnerAppStatus> {
        self.status.as_ref()
    }
    /// <p>The creation time of the SageMaker Partner AI App.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
}
impl PartnerAppSummary {
    /// Creates a new builder-style object to manufacture [`PartnerAppSummary`](crate::types::PartnerAppSummary).
    pub fn builder() -> crate::types::builders::PartnerAppSummaryBuilder {
        crate::types::builders::PartnerAppSummaryBuilder::default()
    }
}

/// A builder for [`PartnerAppSummary`](crate::types::PartnerAppSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PartnerAppSummaryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::PartnerAppType>,
    pub(crate) status: ::std::option::Option<crate::types::PartnerAppStatus>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl PartnerAppSummaryBuilder {
    /// <p>The ARN of the SageMaker Partner AI App.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the SageMaker Partner AI App.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the SageMaker Partner AI App.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the SageMaker Partner AI App.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the SageMaker Partner AI App.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the SageMaker Partner AI App.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of SageMaker Partner AI App to create. Must be one of the following: <code>lakera-guard</code>, <code>comet</code>, <code>deepchecks-llm-evaluation</code>, or <code>fiddler</code>.</p>
    pub fn r#type(mut self, input: crate::types::PartnerAppType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of SageMaker Partner AI App to create. Must be one of the following: <code>lakera-guard</code>, <code>comet</code>, <code>deepchecks-llm-evaluation</code>, or <code>fiddler</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::PartnerAppType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of SageMaker Partner AI App to create. Must be one of the following: <code>lakera-guard</code>, <code>comet</code>, <code>deepchecks-llm-evaluation</code>, or <code>fiddler</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::PartnerAppType> {
        &self.r#type
    }
    /// <p>The status of the SageMaker Partner AI App.</p>
    pub fn status(mut self, input: crate::types::PartnerAppStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the SageMaker Partner AI App.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::PartnerAppStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the SageMaker Partner AI App.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::PartnerAppStatus> {
        &self.status
    }
    /// <p>The creation time of the SageMaker Partner AI App.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation time of the SageMaker Partner AI App.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The creation time of the SageMaker Partner AI App.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// Consumes the builder and constructs a [`PartnerAppSummary`](crate::types::PartnerAppSummary).
    pub fn build(self) -> crate::types::PartnerAppSummary {
        crate::types::PartnerAppSummary {
            arn: self.arn,
            name: self.name,
            r#type: self.r#type,
            status: self.status,
            creation_time: self.creation_time,
        }
    }
}
