// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_hub_content_presigned_urls_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_hub_content_presigned_urls::CreateHubContentPresignedUrlsInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.hub_name {
        object.key("HubName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.hub_content_type {
        object.key("HubContentType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.hub_content_name {
        object.key("HubContentName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.hub_content_version {
        object.key("HubContentVersion").string(var_4.as_str());
    }
    if let Some(var_5) = &input.access_config {
        #[allow(unused_mut)]
        let mut object_6 = object.key("AccessConfig").start_object();
        crate::protocol_serde::shape_presigned_url_access_config::ser_presigned_url_access_config(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.next_token {
        object.key("NextToken").string(var_8.as_str());
    }
    Ok(())
}
