// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Maps multiple measures from the source event to the same Timestream for LiveAnalytics record.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/concepts.html">Amazon Timestream for LiveAnalytics concepts</a></p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MultiMeasureMapping {
    /// <p>The name of the multiple measurements per record (multi-measure).</p>
    pub multi_measure_name: ::std::string::String,
    /// <p>Mappings that represent multiple source event fields mapped to measures in the same Timestream for LiveAnalytics record.</p>
    pub multi_measure_attribute_mappings: ::std::vec::Vec<crate::types::MultiMeasureAttributeMapping>,
}
impl MultiMeasureMapping {
    /// <p>The name of the multiple measurements per record (multi-measure).</p>
    pub fn multi_measure_name(&self) -> &str {
        use std::ops::Deref;
        self.multi_measure_name.deref()
    }
    /// <p>Mappings that represent multiple source event fields mapped to measures in the same Timestream for LiveAnalytics record.</p>
    pub fn multi_measure_attribute_mappings(&self) -> &[crate::types::MultiMeasureAttributeMapping] {
        use std::ops::Deref;
        self.multi_measure_attribute_mappings.deref()
    }
}
impl MultiMeasureMapping {
    /// Creates a new builder-style object to manufacture [`MultiMeasureMapping`](crate::types::MultiMeasureMapping).
    pub fn builder() -> crate::types::builders::MultiMeasureMappingBuilder {
        crate::types::builders::MultiMeasureMappingBuilder::default()
    }
}

/// A builder for [`MultiMeasureMapping`](crate::types::MultiMeasureMapping).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MultiMeasureMappingBuilder {
    pub(crate) multi_measure_name: ::std::option::Option<::std::string::String>,
    pub(crate) multi_measure_attribute_mappings: ::std::option::Option<::std::vec::Vec<crate::types::MultiMeasureAttributeMapping>>,
}
impl MultiMeasureMappingBuilder {
    /// <p>The name of the multiple measurements per record (multi-measure).</p>
    /// This field is required.
    pub fn multi_measure_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.multi_measure_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the multiple measurements per record (multi-measure).</p>
    pub fn set_multi_measure_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.multi_measure_name = input;
        self
    }
    /// <p>The name of the multiple measurements per record (multi-measure).</p>
    pub fn get_multi_measure_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.multi_measure_name
    }
    /// Appends an item to `multi_measure_attribute_mappings`.
    ///
    /// To override the contents of this collection use [`set_multi_measure_attribute_mappings`](Self::set_multi_measure_attribute_mappings).
    ///
    /// <p>Mappings that represent multiple source event fields mapped to measures in the same Timestream for LiveAnalytics record.</p>
    pub fn multi_measure_attribute_mappings(mut self, input: crate::types::MultiMeasureAttributeMapping) -> Self {
        let mut v = self.multi_measure_attribute_mappings.unwrap_or_default();
        v.push(input);
        self.multi_measure_attribute_mappings = ::std::option::Option::Some(v);
        self
    }
    /// <p>Mappings that represent multiple source event fields mapped to measures in the same Timestream for LiveAnalytics record.</p>
    pub fn set_multi_measure_attribute_mappings(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::MultiMeasureAttributeMapping>>,
    ) -> Self {
        self.multi_measure_attribute_mappings = input;
        self
    }
    /// <p>Mappings that represent multiple source event fields mapped to measures in the same Timestream for LiveAnalytics record.</p>
    pub fn get_multi_measure_attribute_mappings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MultiMeasureAttributeMapping>> {
        &self.multi_measure_attribute_mappings
    }
    /// Consumes the builder and constructs a [`MultiMeasureMapping`](crate::types::MultiMeasureMapping).
    /// This method will fail if any of the following fields are not set:
    /// - [`multi_measure_name`](crate::types::builders::MultiMeasureMappingBuilder::multi_measure_name)
    /// - [`multi_measure_attribute_mappings`](crate::types::builders::MultiMeasureMappingBuilder::multi_measure_attribute_mappings)
    pub fn build(self) -> ::std::result::Result<crate::types::MultiMeasureMapping, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MultiMeasureMapping {
            multi_measure_name: self.multi_measure_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "multi_measure_name",
                    "multi_measure_name was not specified but it is required when building MultiMeasureMapping",
                )
            })?,
            multi_measure_attribute_mappings: self.multi_measure_attribute_mappings.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "multi_measure_attribute_mappings",
                    "multi_measure_attribute_mappings was not specified but it is required when building MultiMeasureMapping",
                )
            })?,
        })
    }
}
