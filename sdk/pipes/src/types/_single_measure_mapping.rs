// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Maps a single source data field to a single record in the specified Timestream for LiveAnalytics table.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/concepts.html">Amazon Timestream for LiveAnalytics concepts</a></p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SingleMeasureMapping {
    /// <p>Dynamic path of the source field to map to the measure in the record.</p>
    pub measure_value: ::std::string::String,
    /// <p>Data type of the source field.</p>
    pub measure_value_type: crate::types::MeasureValueType,
    /// <p>Target measure name for the measurement attribute in the Timestream table.</p>
    pub measure_name: ::std::string::String,
}
impl SingleMeasureMapping {
    /// <p>Dynamic path of the source field to map to the measure in the record.</p>
    pub fn measure_value(&self) -> &str {
        use std::ops::Deref;
        self.measure_value.deref()
    }
    /// <p>Data type of the source field.</p>
    pub fn measure_value_type(&self) -> &crate::types::MeasureValueType {
        &self.measure_value_type
    }
    /// <p>Target measure name for the measurement attribute in the Timestream table.</p>
    pub fn measure_name(&self) -> &str {
        use std::ops::Deref;
        self.measure_name.deref()
    }
}
impl SingleMeasureMapping {
    /// Creates a new builder-style object to manufacture [`SingleMeasureMapping`](crate::types::SingleMeasureMapping).
    pub fn builder() -> crate::types::builders::SingleMeasureMappingBuilder {
        crate::types::builders::SingleMeasureMappingBuilder::default()
    }
}

/// A builder for [`SingleMeasureMapping`](crate::types::SingleMeasureMapping).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SingleMeasureMappingBuilder {
    pub(crate) measure_value: ::std::option::Option<::std::string::String>,
    pub(crate) measure_value_type: ::std::option::Option<crate::types::MeasureValueType>,
    pub(crate) measure_name: ::std::option::Option<::std::string::String>,
}
impl SingleMeasureMappingBuilder {
    /// <p>Dynamic path of the source field to map to the measure in the record.</p>
    /// This field is required.
    pub fn measure_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.measure_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Dynamic path of the source field to map to the measure in the record.</p>
    pub fn set_measure_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.measure_value = input;
        self
    }
    /// <p>Dynamic path of the source field to map to the measure in the record.</p>
    pub fn get_measure_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.measure_value
    }
    /// <p>Data type of the source field.</p>
    /// This field is required.
    pub fn measure_value_type(mut self, input: crate::types::MeasureValueType) -> Self {
        self.measure_value_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Data type of the source field.</p>
    pub fn set_measure_value_type(mut self, input: ::std::option::Option<crate::types::MeasureValueType>) -> Self {
        self.measure_value_type = input;
        self
    }
    /// <p>Data type of the source field.</p>
    pub fn get_measure_value_type(&self) -> &::std::option::Option<crate::types::MeasureValueType> {
        &self.measure_value_type
    }
    /// <p>Target measure name for the measurement attribute in the Timestream table.</p>
    /// This field is required.
    pub fn measure_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.measure_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Target measure name for the measurement attribute in the Timestream table.</p>
    pub fn set_measure_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.measure_name = input;
        self
    }
    /// <p>Target measure name for the measurement attribute in the Timestream table.</p>
    pub fn get_measure_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.measure_name
    }
    /// Consumes the builder and constructs a [`SingleMeasureMapping`](crate::types::SingleMeasureMapping).
    /// This method will fail if any of the following fields are not set:
    /// - [`measure_value`](crate::types::builders::SingleMeasureMappingBuilder::measure_value)
    /// - [`measure_value_type`](crate::types::builders::SingleMeasureMappingBuilder::measure_value_type)
    /// - [`measure_name`](crate::types::builders::SingleMeasureMappingBuilder::measure_name)
    pub fn build(self) -> ::std::result::Result<crate::types::SingleMeasureMapping, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SingleMeasureMapping {
            measure_value: self.measure_value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "measure_value",
                    "measure_value was not specified but it is required when building SingleMeasureMapping",
                )
            })?,
            measure_value_type: self.measure_value_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "measure_value_type",
                    "measure_value_type was not specified but it is required when building SingleMeasureMapping",
                )
            })?,
            measure_name: self.measure_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "measure_name",
                    "measure_name was not specified but it is required when building SingleMeasureMapping",
                )
            })?,
        })
    }
}
