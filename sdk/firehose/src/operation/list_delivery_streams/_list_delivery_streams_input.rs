// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListDeliveryStreamsInput {
    /// <p>The maximum number of Firehose streams to list. The default value is 10.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>The Firehose stream type. This can be one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>DirectPut</code>: Provider applications access the Firehose stream directly.</p></li>
    /// <li>
    /// <p><code>KinesisStreamAsSource</code>: The Firehose stream uses a Kinesis data stream as a source.</p></li>
    /// </ul>
    /// <p>This parameter is optional. If this parameter is omitted, Firehose streams of all types are returned.</p>
    pub delivery_stream_type: ::std::option::Option<crate::types::DeliveryStreamType>,
    /// <p>The list of Firehose streams returned by this call to <code>ListDeliveryStreams</code> will start with the Firehose stream whose name comes alphabetically immediately after the name you specify in <code>ExclusiveStartDeliveryStreamName</code>.</p>
    pub exclusive_start_delivery_stream_name: ::std::option::Option<::std::string::String>,
}
impl ListDeliveryStreamsInput {
    /// <p>The maximum number of Firehose streams to list. The default value is 10.</p>
    pub fn limit(&self) -> ::std::option::Option<i32> {
        self.limit
    }
    /// <p>The Firehose stream type. This can be one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>DirectPut</code>: Provider applications access the Firehose stream directly.</p></li>
    /// <li>
    /// <p><code>KinesisStreamAsSource</code>: The Firehose stream uses a Kinesis data stream as a source.</p></li>
    /// </ul>
    /// <p>This parameter is optional. If this parameter is omitted, Firehose streams of all types are returned.</p>
    pub fn delivery_stream_type(&self) -> ::std::option::Option<&crate::types::DeliveryStreamType> {
        self.delivery_stream_type.as_ref()
    }
    /// <p>The list of Firehose streams returned by this call to <code>ListDeliveryStreams</code> will start with the Firehose stream whose name comes alphabetically immediately after the name you specify in <code>ExclusiveStartDeliveryStreamName</code>.</p>
    pub fn exclusive_start_delivery_stream_name(&self) -> ::std::option::Option<&str> {
        self.exclusive_start_delivery_stream_name.as_deref()
    }
}
impl ListDeliveryStreamsInput {
    /// Creates a new builder-style object to manufacture [`ListDeliveryStreamsInput`](crate::operation::list_delivery_streams::ListDeliveryStreamsInput).
    pub fn builder() -> crate::operation::list_delivery_streams::builders::ListDeliveryStreamsInputBuilder {
        crate::operation::list_delivery_streams::builders::ListDeliveryStreamsInputBuilder::default()
    }
}

/// A builder for [`ListDeliveryStreamsInput`](crate::operation::list_delivery_streams::ListDeliveryStreamsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListDeliveryStreamsInputBuilder {
    pub(crate) limit: ::std::option::Option<i32>,
    pub(crate) delivery_stream_type: ::std::option::Option<crate::types::DeliveryStreamType>,
    pub(crate) exclusive_start_delivery_stream_name: ::std::option::Option<::std::string::String>,
}
impl ListDeliveryStreamsInputBuilder {
    /// <p>The maximum number of Firehose streams to list. The default value is 10.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of Firehose streams to list. The default value is 10.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>The maximum number of Firehose streams to list. The default value is 10.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        &self.limit
    }
    /// <p>The Firehose stream type. This can be one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>DirectPut</code>: Provider applications access the Firehose stream directly.</p></li>
    /// <li>
    /// <p><code>KinesisStreamAsSource</code>: The Firehose stream uses a Kinesis data stream as a source.</p></li>
    /// </ul>
    /// <p>This parameter is optional. If this parameter is omitted, Firehose streams of all types are returned.</p>
    pub fn delivery_stream_type(mut self, input: crate::types::DeliveryStreamType) -> Self {
        self.delivery_stream_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Firehose stream type. This can be one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>DirectPut</code>: Provider applications access the Firehose stream directly.</p></li>
    /// <li>
    /// <p><code>KinesisStreamAsSource</code>: The Firehose stream uses a Kinesis data stream as a source.</p></li>
    /// </ul>
    /// <p>This parameter is optional. If this parameter is omitted, Firehose streams of all types are returned.</p>
    pub fn set_delivery_stream_type(mut self, input: ::std::option::Option<crate::types::DeliveryStreamType>) -> Self {
        self.delivery_stream_type = input;
        self
    }
    /// <p>The Firehose stream type. This can be one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>DirectPut</code>: Provider applications access the Firehose stream directly.</p></li>
    /// <li>
    /// <p><code>KinesisStreamAsSource</code>: The Firehose stream uses a Kinesis data stream as a source.</p></li>
    /// </ul>
    /// <p>This parameter is optional. If this parameter is omitted, Firehose streams of all types are returned.</p>
    pub fn get_delivery_stream_type(&self) -> &::std::option::Option<crate::types::DeliveryStreamType> {
        &self.delivery_stream_type
    }
    /// <p>The list of Firehose streams returned by this call to <code>ListDeliveryStreams</code> will start with the Firehose stream whose name comes alphabetically immediately after the name you specify in <code>ExclusiveStartDeliveryStreamName</code>.</p>
    pub fn exclusive_start_delivery_stream_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.exclusive_start_delivery_stream_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The list of Firehose streams returned by this call to <code>ListDeliveryStreams</code> will start with the Firehose stream whose name comes alphabetically immediately after the name you specify in <code>ExclusiveStartDeliveryStreamName</code>.</p>
    pub fn set_exclusive_start_delivery_stream_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.exclusive_start_delivery_stream_name = input;
        self
    }
    /// <p>The list of Firehose streams returned by this call to <code>ListDeliveryStreams</code> will start with the Firehose stream whose name comes alphabetically immediately after the name you specify in <code>ExclusiveStartDeliveryStreamName</code>.</p>
    pub fn get_exclusive_start_delivery_stream_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.exclusive_start_delivery_stream_name
    }
    /// Consumes the builder and constructs a [`ListDeliveryStreamsInput`](crate::operation::list_delivery_streams::ListDeliveryStreamsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_delivery_streams::ListDeliveryStreamsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_delivery_streams::ListDeliveryStreamsInput {
            limit: self.limit,
            delivery_stream_type: self.delivery_stream_type,
            exclusive_start_delivery_stream_name: self.exclusive_start_delivery_stream_name,
        })
    }
}
