// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure used to configure the list of table patterns in source database endpoint for Firehose to read from.</p>
/// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DatabaseTableList {
    /// <p>The list of table patterns in source database endpoint to be included for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub include: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The list of table patterns in source database endpoint to be excluded for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub exclude: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DatabaseTableList {
    /// <p>The list of table patterns in source database endpoint to be included for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.include.is_none()`.
    pub fn include(&self) -> &[::std::string::String] {
        self.include.as_deref().unwrap_or_default()
    }
    /// <p>The list of table patterns in source database endpoint to be excluded for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.exclude.is_none()`.
    pub fn exclude(&self) -> &[::std::string::String] {
        self.exclude.as_deref().unwrap_or_default()
    }
}
impl DatabaseTableList {
    /// Creates a new builder-style object to manufacture [`DatabaseTableList`](crate::types::DatabaseTableList).
    pub fn builder() -> crate::types::builders::DatabaseTableListBuilder {
        crate::types::builders::DatabaseTableListBuilder::default()
    }
}

/// A builder for [`DatabaseTableList`](crate::types::DatabaseTableList).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DatabaseTableListBuilder {
    pub(crate) include: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) exclude: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DatabaseTableListBuilder {
    /// Appends an item to `include`.
    ///
    /// To override the contents of this collection use [`set_include`](Self::set_include).
    ///
    /// <p>The list of table patterns in source database endpoint to be included for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn include(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.include.unwrap_or_default();
        v.push(input.into());
        self.include = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of table patterns in source database endpoint to be included for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_include(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.include = input;
        self
    }
    /// <p>The list of table patterns in source database endpoint to be included for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_include(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.include
    }
    /// Appends an item to `exclude`.
    ///
    /// To override the contents of this collection use [`set_exclude`](Self::set_exclude).
    ///
    /// <p>The list of table patterns in source database endpoint to be excluded for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn exclude(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.exclude.unwrap_or_default();
        v.push(input.into());
        self.exclude = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of table patterns in source database endpoint to be excluded for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_exclude(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.exclude = input;
        self
    }
    /// <p>The list of table patterns in source database endpoint to be excluded for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_exclude(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.exclude
    }
    /// Consumes the builder and constructs a [`DatabaseTableList`](crate::types::DatabaseTableList).
    pub fn build(self) -> crate::types::DatabaseTableList {
        crate::types::DatabaseTableList {
            include: self.include,
            exclude: self.exclude,
        }
    }
}
