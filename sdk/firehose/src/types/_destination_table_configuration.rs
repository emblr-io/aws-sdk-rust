// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration of a destination in Apache Iceberg Tables.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DestinationTableConfiguration {
    /// <p>Specifies the name of the Apache Iceberg Table.</p>
    pub destination_table_name: ::std::string::String,
    /// <p>The name of the Apache Iceberg database.</p>
    pub destination_database_name: ::std::string::String,
    /// <p>A list of unique keys for a given Apache Iceberg table. Firehose will use these for running Create, Update, or Delete operations on the given Iceberg table.</p>
    pub unique_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The partition spec configuration for a table that is used by automatic table creation.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub partition_spec: ::std::option::Option<crate::types::PartitionSpec>,
    /// <p>The table specific S3 error output prefix. All the errors that occurred while delivering to this table will be prefixed with this value in S3 destination.</p>
    pub s3_error_output_prefix: ::std::option::Option<::std::string::String>,
}
impl DestinationTableConfiguration {
    /// <p>Specifies the name of the Apache Iceberg Table.</p>
    pub fn destination_table_name(&self) -> &str {
        use std::ops::Deref;
        self.destination_table_name.deref()
    }
    /// <p>The name of the Apache Iceberg database.</p>
    pub fn destination_database_name(&self) -> &str {
        use std::ops::Deref;
        self.destination_database_name.deref()
    }
    /// <p>A list of unique keys for a given Apache Iceberg table. Firehose will use these for running Create, Update, or Delete operations on the given Iceberg table.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.unique_keys.is_none()`.
    pub fn unique_keys(&self) -> &[::std::string::String] {
        self.unique_keys.as_deref().unwrap_or_default()
    }
    /// <p>The partition spec configuration for a table that is used by automatic table creation.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn partition_spec(&self) -> ::std::option::Option<&crate::types::PartitionSpec> {
        self.partition_spec.as_ref()
    }
    /// <p>The table specific S3 error output prefix. All the errors that occurred while delivering to this table will be prefixed with this value in S3 destination.</p>
    pub fn s3_error_output_prefix(&self) -> ::std::option::Option<&str> {
        self.s3_error_output_prefix.as_deref()
    }
}
impl DestinationTableConfiguration {
    /// Creates a new builder-style object to manufacture [`DestinationTableConfiguration`](crate::types::DestinationTableConfiguration).
    pub fn builder() -> crate::types::builders::DestinationTableConfigurationBuilder {
        crate::types::builders::DestinationTableConfigurationBuilder::default()
    }
}

/// A builder for [`DestinationTableConfiguration`](crate::types::DestinationTableConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DestinationTableConfigurationBuilder {
    pub(crate) destination_table_name: ::std::option::Option<::std::string::String>,
    pub(crate) destination_database_name: ::std::option::Option<::std::string::String>,
    pub(crate) unique_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) partition_spec: ::std::option::Option<crate::types::PartitionSpec>,
    pub(crate) s3_error_output_prefix: ::std::option::Option<::std::string::String>,
}
impl DestinationTableConfigurationBuilder {
    /// <p>Specifies the name of the Apache Iceberg Table.</p>
    /// This field is required.
    pub fn destination_table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the name of the Apache Iceberg Table.</p>
    pub fn set_destination_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_table_name = input;
        self
    }
    /// <p>Specifies the name of the Apache Iceberg Table.</p>
    pub fn get_destination_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_table_name
    }
    /// <p>The name of the Apache Iceberg database.</p>
    /// This field is required.
    pub fn destination_database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Apache Iceberg database.</p>
    pub fn set_destination_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_database_name = input;
        self
    }
    /// <p>The name of the Apache Iceberg database.</p>
    pub fn get_destination_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_database_name
    }
    /// Appends an item to `unique_keys`.
    ///
    /// To override the contents of this collection use [`set_unique_keys`](Self::set_unique_keys).
    ///
    /// <p>A list of unique keys for a given Apache Iceberg table. Firehose will use these for running Create, Update, or Delete operations on the given Iceberg table.</p>
    pub fn unique_keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.unique_keys.unwrap_or_default();
        v.push(input.into());
        self.unique_keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of unique keys for a given Apache Iceberg table. Firehose will use these for running Create, Update, or Delete operations on the given Iceberg table.</p>
    pub fn set_unique_keys(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.unique_keys = input;
        self
    }
    /// <p>A list of unique keys for a given Apache Iceberg table. Firehose will use these for running Create, Update, or Delete operations on the given Iceberg table.</p>
    pub fn get_unique_keys(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.unique_keys
    }
    /// <p>The partition spec configuration for a table that is used by automatic table creation.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn partition_spec(mut self, input: crate::types::PartitionSpec) -> Self {
        self.partition_spec = ::std::option::Option::Some(input);
        self
    }
    /// <p>The partition spec configuration for a table that is used by automatic table creation.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_partition_spec(mut self, input: ::std::option::Option<crate::types::PartitionSpec>) -> Self {
        self.partition_spec = input;
        self
    }
    /// <p>The partition spec configuration for a table that is used by automatic table creation.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_partition_spec(&self) -> &::std::option::Option<crate::types::PartitionSpec> {
        &self.partition_spec
    }
    /// <p>The table specific S3 error output prefix. All the errors that occurred while delivering to this table will be prefixed with this value in S3 destination.</p>
    pub fn s3_error_output_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_error_output_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The table specific S3 error output prefix. All the errors that occurred while delivering to this table will be prefixed with this value in S3 destination.</p>
    pub fn set_s3_error_output_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_error_output_prefix = input;
        self
    }
    /// <p>The table specific S3 error output prefix. All the errors that occurred while delivering to this table will be prefixed with this value in S3 destination.</p>
    pub fn get_s3_error_output_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_error_output_prefix
    }
    /// Consumes the builder and constructs a [`DestinationTableConfiguration`](crate::types::DestinationTableConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`destination_table_name`](crate::types::builders::DestinationTableConfigurationBuilder::destination_table_name)
    /// - [`destination_database_name`](crate::types::builders::DestinationTableConfigurationBuilder::destination_database_name)
    pub fn build(self) -> ::std::result::Result<crate::types::DestinationTableConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DestinationTableConfiguration {
            destination_table_name: self.destination_table_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "destination_table_name",
                    "destination_table_name was not specified but it is required when building DestinationTableConfiguration",
                )
            })?,
            destination_database_name: self.destination_database_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "destination_database_name",
                    "destination_database_name was not specified but it is required when building DestinationTableConfiguration",
                )
            })?,
            unique_keys: self.unique_keys,
            partition_spec: self.partition_spec,
            s3_error_output_prefix: self.s3_error_output_prefix,
        })
    }
}
