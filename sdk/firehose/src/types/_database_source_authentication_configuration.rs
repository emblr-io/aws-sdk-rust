// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure to configure the authentication methods for Firehose to connect to source database endpoint.</p>
/// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DatabaseSourceAuthenticationConfiguration {
    /// <p>The structure that defines how Firehose accesses the secret.</p>
    pub secrets_manager_configuration: ::std::option::Option<crate::types::SecretsManagerConfiguration>,
}
impl DatabaseSourceAuthenticationConfiguration {
    /// <p>The structure that defines how Firehose accesses the secret.</p>
    pub fn secrets_manager_configuration(&self) -> ::std::option::Option<&crate::types::SecretsManagerConfiguration> {
        self.secrets_manager_configuration.as_ref()
    }
}
impl DatabaseSourceAuthenticationConfiguration {
    /// Creates a new builder-style object to manufacture [`DatabaseSourceAuthenticationConfiguration`](crate::types::DatabaseSourceAuthenticationConfiguration).
    pub fn builder() -> crate::types::builders::DatabaseSourceAuthenticationConfigurationBuilder {
        crate::types::builders::DatabaseSourceAuthenticationConfigurationBuilder::default()
    }
}

/// A builder for [`DatabaseSourceAuthenticationConfiguration`](crate::types::DatabaseSourceAuthenticationConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DatabaseSourceAuthenticationConfigurationBuilder {
    pub(crate) secrets_manager_configuration: ::std::option::Option<crate::types::SecretsManagerConfiguration>,
}
impl DatabaseSourceAuthenticationConfigurationBuilder {
    /// <p>The structure that defines how Firehose accesses the secret.</p>
    /// This field is required.
    pub fn secrets_manager_configuration(mut self, input: crate::types::SecretsManagerConfiguration) -> Self {
        self.secrets_manager_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The structure that defines how Firehose accesses the secret.</p>
    pub fn set_secrets_manager_configuration(mut self, input: ::std::option::Option<crate::types::SecretsManagerConfiguration>) -> Self {
        self.secrets_manager_configuration = input;
        self
    }
    /// <p>The structure that defines how Firehose accesses the secret.</p>
    pub fn get_secrets_manager_configuration(&self) -> &::std::option::Option<crate::types::SecretsManagerConfiguration> {
        &self.secrets_manager_configuration
    }
    /// Consumes the builder and constructs a [`DatabaseSourceAuthenticationConfiguration`](crate::types::DatabaseSourceAuthenticationConfiguration).
    pub fn build(self) -> crate::types::DatabaseSourceAuthenticationConfiguration {
        crate::types::DatabaseSourceAuthenticationConfiguration {
            secrets_manager_configuration: self.secrets_manager_configuration,
        }
    }
}
