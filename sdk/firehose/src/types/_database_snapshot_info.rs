// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure that describes the snapshot information of a table in source database endpoint that Firehose reads.</p>
/// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DatabaseSnapshotInfo {
    /// <p>The identifier of the current snapshot of the table in source database endpoint.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub id: ::std::string::String,
    /// <p>The fully qualified name of the table in source database endpoint that Firehose reads.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub table: ::std::string::String,
    /// <p>The timestamp when the current snapshot is taken on the table.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub request_timestamp: ::aws_smithy_types::DateTime,
    /// <p>The principal that sent the request to take the current snapshot on the table.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub requested_by: crate::types::SnapshotRequestedBy,
    /// <p>The status of the current snapshot of the table.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub status: crate::types::SnapshotStatus,
    /// <p>Provides details in case one of the following operations fails due to an error related to KMS: <code>CreateDeliveryStream</code>, <code>DeleteDeliveryStream</code>, <code>StartDeliveryStreamEncryption</code>, <code>StopDeliveryStreamEncryption</code>.</p>
    pub failure_description: ::std::option::Option<crate::types::FailureDescription>,
}
impl DatabaseSnapshotInfo {
    /// <p>The identifier of the current snapshot of the table in source database endpoint.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The fully qualified name of the table in source database endpoint that Firehose reads.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn table(&self) -> &str {
        use std::ops::Deref;
        self.table.deref()
    }
    /// <p>The timestamp when the current snapshot is taken on the table.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn request_timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.request_timestamp
    }
    /// <p>The principal that sent the request to take the current snapshot on the table.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn requested_by(&self) -> &crate::types::SnapshotRequestedBy {
        &self.requested_by
    }
    /// <p>The status of the current snapshot of the table.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn status(&self) -> &crate::types::SnapshotStatus {
        &self.status
    }
    /// <p>Provides details in case one of the following operations fails due to an error related to KMS: <code>CreateDeliveryStream</code>, <code>DeleteDeliveryStream</code>, <code>StartDeliveryStreamEncryption</code>, <code>StopDeliveryStreamEncryption</code>.</p>
    pub fn failure_description(&self) -> ::std::option::Option<&crate::types::FailureDescription> {
        self.failure_description.as_ref()
    }
}
impl DatabaseSnapshotInfo {
    /// Creates a new builder-style object to manufacture [`DatabaseSnapshotInfo`](crate::types::DatabaseSnapshotInfo).
    pub fn builder() -> crate::types::builders::DatabaseSnapshotInfoBuilder {
        crate::types::builders::DatabaseSnapshotInfoBuilder::default()
    }
}

/// A builder for [`DatabaseSnapshotInfo`](crate::types::DatabaseSnapshotInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DatabaseSnapshotInfoBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) table: ::std::option::Option<::std::string::String>,
    pub(crate) request_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) requested_by: ::std::option::Option<crate::types::SnapshotRequestedBy>,
    pub(crate) status: ::std::option::Option<crate::types::SnapshotStatus>,
    pub(crate) failure_description: ::std::option::Option<crate::types::FailureDescription>,
}
impl DatabaseSnapshotInfoBuilder {
    /// <p>The identifier of the current snapshot of the table in source database endpoint.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the current snapshot of the table in source database endpoint.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the current snapshot of the table in source database endpoint.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The fully qualified name of the table in source database endpoint that Firehose reads.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    /// This field is required.
    pub fn table(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The fully qualified name of the table in source database endpoint that Firehose reads.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_table(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table = input;
        self
    }
    /// <p>The fully qualified name of the table in source database endpoint that Firehose reads.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_table(&self) -> &::std::option::Option<::std::string::String> {
        &self.table
    }
    /// <p>The timestamp when the current snapshot is taken on the table.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    /// This field is required.
    pub fn request_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.request_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the current snapshot is taken on the table.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_request_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.request_timestamp = input;
        self
    }
    /// <p>The timestamp when the current snapshot is taken on the table.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_request_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.request_timestamp
    }
    /// <p>The principal that sent the request to take the current snapshot on the table.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    /// This field is required.
    pub fn requested_by(mut self, input: crate::types::SnapshotRequestedBy) -> Self {
        self.requested_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>The principal that sent the request to take the current snapshot on the table.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_requested_by(mut self, input: ::std::option::Option<crate::types::SnapshotRequestedBy>) -> Self {
        self.requested_by = input;
        self
    }
    /// <p>The principal that sent the request to take the current snapshot on the table.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_requested_by(&self) -> &::std::option::Option<crate::types::SnapshotRequestedBy> {
        &self.requested_by
    }
    /// <p>The status of the current snapshot of the table.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::SnapshotStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the current snapshot of the table.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SnapshotStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the current snapshot of the table.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SnapshotStatus> {
        &self.status
    }
    /// <p>Provides details in case one of the following operations fails due to an error related to KMS: <code>CreateDeliveryStream</code>, <code>DeleteDeliveryStream</code>, <code>StartDeliveryStreamEncryption</code>, <code>StopDeliveryStreamEncryption</code>.</p>
    pub fn failure_description(mut self, input: crate::types::FailureDescription) -> Self {
        self.failure_description = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides details in case one of the following operations fails due to an error related to KMS: <code>CreateDeliveryStream</code>, <code>DeleteDeliveryStream</code>, <code>StartDeliveryStreamEncryption</code>, <code>StopDeliveryStreamEncryption</code>.</p>
    pub fn set_failure_description(mut self, input: ::std::option::Option<crate::types::FailureDescription>) -> Self {
        self.failure_description = input;
        self
    }
    /// <p>Provides details in case one of the following operations fails due to an error related to KMS: <code>CreateDeliveryStream</code>, <code>DeleteDeliveryStream</code>, <code>StartDeliveryStreamEncryption</code>, <code>StopDeliveryStreamEncryption</code>.</p>
    pub fn get_failure_description(&self) -> &::std::option::Option<crate::types::FailureDescription> {
        &self.failure_description
    }
    /// Consumes the builder and constructs a [`DatabaseSnapshotInfo`](crate::types::DatabaseSnapshotInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::DatabaseSnapshotInfoBuilder::id)
    /// - [`table`](crate::types::builders::DatabaseSnapshotInfoBuilder::table)
    /// - [`request_timestamp`](crate::types::builders::DatabaseSnapshotInfoBuilder::request_timestamp)
    /// - [`requested_by`](crate::types::builders::DatabaseSnapshotInfoBuilder::requested_by)
    /// - [`status`](crate::types::builders::DatabaseSnapshotInfoBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::DatabaseSnapshotInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DatabaseSnapshotInfo {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building DatabaseSnapshotInfo",
                )
            })?,
            table: self.table.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "table",
                    "table was not specified but it is required when building DatabaseSnapshotInfo",
                )
            })?,
            request_timestamp: self.request_timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "request_timestamp",
                    "request_timestamp was not specified but it is required when building DatabaseSnapshotInfo",
                )
            })?,
            requested_by: self.requested_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "requested_by",
                    "requested_by was not specified but it is required when building DatabaseSnapshotInfo",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building DatabaseSnapshotInfo",
                )
            })?,
            failure_description: self.failure_description,
        })
    }
}
