// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The top level object for configuring streams with database as a source.</p>
/// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DatabaseSourceConfiguration {
    /// <p>The type of database engine. This can be one of the following values.</p>
    /// <ul>
    /// <li>
    /// <p>MySQL</p></li>
    /// <li>
    /// <p>PostgreSQL</p></li>
    /// </ul>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub r#type: crate::types::DatabaseType,
    /// <p>The endpoint of the database server.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub endpoint: ::std::string::String,
    /// <p>The port of the database. This can be one of the following values.</p>
    /// <ul>
    /// <li>
    /// <p>3306 for MySQL database type</p></li>
    /// <li>
    /// <p>5432 for PostgreSQL database type</p></li>
    /// </ul>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub port: i32,
    /// <p>The mode to enable or disable SSL when Firehose connects to the database endpoint.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub ssl_mode: ::std::option::Option<crate::types::SslMode>,
    /// <p>The list of database patterns in source database endpoint for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub databases: ::std::option::Option<crate::types::DatabaseList>,
    /// <p>The list of table patterns in source database endpoint for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub tables: ::std::option::Option<crate::types::DatabaseTableList>,
    /// <p>The list of column patterns in source database endpoint for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub columns: ::std::option::Option<crate::types::DatabaseColumnList>,
    /// <p>The optional list of table and column names used as unique key columns when taking snapshot if the tables don’t have primary keys configured.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub surrogate_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The fully qualified name of the table in source database endpoint that Firehose uses to track snapshot progress.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub snapshot_watermark_table: ::std::string::String,
    /// <p>The structure to configure the authentication methods for Firehose to connect to source database endpoint.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub database_source_authentication_configuration: ::std::option::Option<crate::types::DatabaseSourceAuthenticationConfiguration>,
    /// <p>The details of the VPC Endpoint Service which Firehose uses to create a PrivateLink to the database.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub database_source_vpc_configuration: ::std::option::Option<crate::types::DatabaseSourceVpcConfiguration>,
}
impl DatabaseSourceConfiguration {
    /// <p>The type of database engine. This can be one of the following values.</p>
    /// <ul>
    /// <li>
    /// <p>MySQL</p></li>
    /// <li>
    /// <p>PostgreSQL</p></li>
    /// </ul>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn r#type(&self) -> &crate::types::DatabaseType {
        &self.r#type
    }
    /// <p>The endpoint of the database server.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn endpoint(&self) -> &str {
        use std::ops::Deref;
        self.endpoint.deref()
    }
    /// <p>The port of the database. This can be one of the following values.</p>
    /// <ul>
    /// <li>
    /// <p>3306 for MySQL database type</p></li>
    /// <li>
    /// <p>5432 for PostgreSQL database type</p></li>
    /// </ul>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn port(&self) -> i32 {
        self.port
    }
    /// <p>The mode to enable or disable SSL when Firehose connects to the database endpoint.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn ssl_mode(&self) -> ::std::option::Option<&crate::types::SslMode> {
        self.ssl_mode.as_ref()
    }
    /// <p>The list of database patterns in source database endpoint for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn databases(&self) -> ::std::option::Option<&crate::types::DatabaseList> {
        self.databases.as_ref()
    }
    /// <p>The list of table patterns in source database endpoint for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn tables(&self) -> ::std::option::Option<&crate::types::DatabaseTableList> {
        self.tables.as_ref()
    }
    /// <p>The list of column patterns in source database endpoint for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn columns(&self) -> ::std::option::Option<&crate::types::DatabaseColumnList> {
        self.columns.as_ref()
    }
    /// <p>The optional list of table and column names used as unique key columns when taking snapshot if the tables don’t have primary keys configured.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.surrogate_keys.is_none()`.
    pub fn surrogate_keys(&self) -> &[::std::string::String] {
        self.surrogate_keys.as_deref().unwrap_or_default()
    }
    /// <p>The fully qualified name of the table in source database endpoint that Firehose uses to track snapshot progress.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn snapshot_watermark_table(&self) -> &str {
        use std::ops::Deref;
        self.snapshot_watermark_table.deref()
    }
    /// <p>The structure to configure the authentication methods for Firehose to connect to source database endpoint.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn database_source_authentication_configuration(&self) -> ::std::option::Option<&crate::types::DatabaseSourceAuthenticationConfiguration> {
        self.database_source_authentication_configuration.as_ref()
    }
    /// <p>The details of the VPC Endpoint Service which Firehose uses to create a PrivateLink to the database.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn database_source_vpc_configuration(&self) -> ::std::option::Option<&crate::types::DatabaseSourceVpcConfiguration> {
        self.database_source_vpc_configuration.as_ref()
    }
}
impl DatabaseSourceConfiguration {
    /// Creates a new builder-style object to manufacture [`DatabaseSourceConfiguration`](crate::types::DatabaseSourceConfiguration).
    pub fn builder() -> crate::types::builders::DatabaseSourceConfigurationBuilder {
        crate::types::builders::DatabaseSourceConfigurationBuilder::default()
    }
}

/// A builder for [`DatabaseSourceConfiguration`](crate::types::DatabaseSourceConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DatabaseSourceConfigurationBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::DatabaseType>,
    pub(crate) endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) port: ::std::option::Option<i32>,
    pub(crate) ssl_mode: ::std::option::Option<crate::types::SslMode>,
    pub(crate) databases: ::std::option::Option<crate::types::DatabaseList>,
    pub(crate) tables: ::std::option::Option<crate::types::DatabaseTableList>,
    pub(crate) columns: ::std::option::Option<crate::types::DatabaseColumnList>,
    pub(crate) surrogate_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) snapshot_watermark_table: ::std::option::Option<::std::string::String>,
    pub(crate) database_source_authentication_configuration: ::std::option::Option<crate::types::DatabaseSourceAuthenticationConfiguration>,
    pub(crate) database_source_vpc_configuration: ::std::option::Option<crate::types::DatabaseSourceVpcConfiguration>,
}
impl DatabaseSourceConfigurationBuilder {
    /// <p>The type of database engine. This can be one of the following values.</p>
    /// <ul>
    /// <li>
    /// <p>MySQL</p></li>
    /// <li>
    /// <p>PostgreSQL</p></li>
    /// </ul>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::DatabaseType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of database engine. This can be one of the following values.</p>
    /// <ul>
    /// <li>
    /// <p>MySQL</p></li>
    /// <li>
    /// <p>PostgreSQL</p></li>
    /// </ul>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::DatabaseType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of database engine. This can be one of the following values.</p>
    /// <ul>
    /// <li>
    /// <p>MySQL</p></li>
    /// <li>
    /// <p>PostgreSQL</p></li>
    /// </ul>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::DatabaseType> {
        &self.r#type
    }
    /// <p>The endpoint of the database server.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    /// This field is required.
    pub fn endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The endpoint of the database server.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint = input;
        self
    }
    /// <p>The endpoint of the database server.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint
    }
    /// <p>The port of the database. This can be one of the following values.</p>
    /// <ul>
    /// <li>
    /// <p>3306 for MySQL database type</p></li>
    /// <li>
    /// <p>5432 for PostgreSQL database type</p></li>
    /// </ul>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    /// This field is required.
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port of the database. This can be one of the following values.</p>
    /// <ul>
    /// <li>
    /// <p>3306 for MySQL database type</p></li>
    /// <li>
    /// <p>5432 for PostgreSQL database type</p></li>
    /// </ul>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The port of the database. This can be one of the following values.</p>
    /// <ul>
    /// <li>
    /// <p>3306 for MySQL database type</p></li>
    /// <li>
    /// <p>5432 for PostgreSQL database type</p></li>
    /// </ul>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// <p>The mode to enable or disable SSL when Firehose connects to the database endpoint.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn ssl_mode(mut self, input: crate::types::SslMode) -> Self {
        self.ssl_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The mode to enable or disable SSL when Firehose connects to the database endpoint.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_ssl_mode(mut self, input: ::std::option::Option<crate::types::SslMode>) -> Self {
        self.ssl_mode = input;
        self
    }
    /// <p>The mode to enable or disable SSL when Firehose connects to the database endpoint.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_ssl_mode(&self) -> &::std::option::Option<crate::types::SslMode> {
        &self.ssl_mode
    }
    /// <p>The list of database patterns in source database endpoint for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    /// This field is required.
    pub fn databases(mut self, input: crate::types::DatabaseList) -> Self {
        self.databases = ::std::option::Option::Some(input);
        self
    }
    /// <p>The list of database patterns in source database endpoint for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_databases(mut self, input: ::std::option::Option<crate::types::DatabaseList>) -> Self {
        self.databases = input;
        self
    }
    /// <p>The list of database patterns in source database endpoint for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_databases(&self) -> &::std::option::Option<crate::types::DatabaseList> {
        &self.databases
    }
    /// <p>The list of table patterns in source database endpoint for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    /// This field is required.
    pub fn tables(mut self, input: crate::types::DatabaseTableList) -> Self {
        self.tables = ::std::option::Option::Some(input);
        self
    }
    /// <p>The list of table patterns in source database endpoint for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_tables(mut self, input: ::std::option::Option<crate::types::DatabaseTableList>) -> Self {
        self.tables = input;
        self
    }
    /// <p>The list of table patterns in source database endpoint for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_tables(&self) -> &::std::option::Option<crate::types::DatabaseTableList> {
        &self.tables
    }
    /// <p>The list of column patterns in source database endpoint for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn columns(mut self, input: crate::types::DatabaseColumnList) -> Self {
        self.columns = ::std::option::Option::Some(input);
        self
    }
    /// <p>The list of column patterns in source database endpoint for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_columns(mut self, input: ::std::option::Option<crate::types::DatabaseColumnList>) -> Self {
        self.columns = input;
        self
    }
    /// <p>The list of column patterns in source database endpoint for Firehose to read from.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_columns(&self) -> &::std::option::Option<crate::types::DatabaseColumnList> {
        &self.columns
    }
    /// Appends an item to `surrogate_keys`.
    ///
    /// To override the contents of this collection use [`set_surrogate_keys`](Self::set_surrogate_keys).
    ///
    /// <p>The optional list of table and column names used as unique key columns when taking snapshot if the tables don’t have primary keys configured.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn surrogate_keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.surrogate_keys.unwrap_or_default();
        v.push(input.into());
        self.surrogate_keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>The optional list of table and column names used as unique key columns when taking snapshot if the tables don’t have primary keys configured.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_surrogate_keys(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.surrogate_keys = input;
        self
    }
    /// <p>The optional list of table and column names used as unique key columns when taking snapshot if the tables don’t have primary keys configured.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_surrogate_keys(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.surrogate_keys
    }
    /// <p>The fully qualified name of the table in source database endpoint that Firehose uses to track snapshot progress.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    /// This field is required.
    pub fn snapshot_watermark_table(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.snapshot_watermark_table = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The fully qualified name of the table in source database endpoint that Firehose uses to track snapshot progress.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_snapshot_watermark_table(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.snapshot_watermark_table = input;
        self
    }
    /// <p>The fully qualified name of the table in source database endpoint that Firehose uses to track snapshot progress.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_snapshot_watermark_table(&self) -> &::std::option::Option<::std::string::String> {
        &self.snapshot_watermark_table
    }
    /// <p>The structure to configure the authentication methods for Firehose to connect to source database endpoint.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    /// This field is required.
    pub fn database_source_authentication_configuration(mut self, input: crate::types::DatabaseSourceAuthenticationConfiguration) -> Self {
        self.database_source_authentication_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The structure to configure the authentication methods for Firehose to connect to source database endpoint.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_database_source_authentication_configuration(
        mut self,
        input: ::std::option::Option<crate::types::DatabaseSourceAuthenticationConfiguration>,
    ) -> Self {
        self.database_source_authentication_configuration = input;
        self
    }
    /// <p>The structure to configure the authentication methods for Firehose to connect to source database endpoint.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_database_source_authentication_configuration(
        &self,
    ) -> &::std::option::Option<crate::types::DatabaseSourceAuthenticationConfiguration> {
        &self.database_source_authentication_configuration
    }
    /// <p>The details of the VPC Endpoint Service which Firehose uses to create a PrivateLink to the database.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    /// This field is required.
    pub fn database_source_vpc_configuration(mut self, input: crate::types::DatabaseSourceVpcConfiguration) -> Self {
        self.database_source_vpc_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the VPC Endpoint Service which Firehose uses to create a PrivateLink to the database.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_database_source_vpc_configuration(mut self, input: ::std::option::Option<crate::types::DatabaseSourceVpcConfiguration>) -> Self {
        self.database_source_vpc_configuration = input;
        self
    }
    /// <p>The details of the VPC Endpoint Service which Firehose uses to create a PrivateLink to the database.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_database_source_vpc_configuration(&self) -> &::std::option::Option<crate::types::DatabaseSourceVpcConfiguration> {
        &self.database_source_vpc_configuration
    }
    /// Consumes the builder and constructs a [`DatabaseSourceConfiguration`](crate::types::DatabaseSourceConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::DatabaseSourceConfigurationBuilder::type)
    /// - [`endpoint`](crate::types::builders::DatabaseSourceConfigurationBuilder::endpoint)
    /// - [`port`](crate::types::builders::DatabaseSourceConfigurationBuilder::port)
    /// - [`snapshot_watermark_table`](crate::types::builders::DatabaseSourceConfigurationBuilder::snapshot_watermark_table)
    pub fn build(self) -> ::std::result::Result<crate::types::DatabaseSourceConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DatabaseSourceConfiguration {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building DatabaseSourceConfiguration",
                )
            })?,
            endpoint: self.endpoint.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "endpoint",
                    "endpoint was not specified but it is required when building DatabaseSourceConfiguration",
                )
            })?,
            port: self.port.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "port",
                    "port was not specified but it is required when building DatabaseSourceConfiguration",
                )
            })?,
            ssl_mode: self.ssl_mode,
            databases: self.databases,
            tables: self.tables,
            columns: self.columns,
            surrogate_keys: self.surrogate_keys,
            snapshot_watermark_table: self.snapshot_watermark_table.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "snapshot_watermark_table",
                    "snapshot_watermark_table was not specified but it is required when building DatabaseSourceConfiguration",
                )
            })?,
            database_source_authentication_configuration: self.database_source_authentication_configuration,
            database_source_vpc_configuration: self.database_source_vpc_configuration,
        })
    }
}
