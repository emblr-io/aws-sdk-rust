// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the destination configure settings for Apache Iceberg Table.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IcebergDestinationConfiguration {
    /// <p>Provides a list of <code>DestinationTableConfigurations</code> which Firehose uses to deliver data to Apache Iceberg Tables. Firehose will write data with insert if table specific configuration is not provided here.</p>
    pub destination_table_configuration_list: ::std::option::Option<::std::vec::Vec<crate::types::DestinationTableConfiguration>>,
    /// <p>The configuration to enable automatic schema evolution.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub schema_evolution_configuration: ::std::option::Option<crate::types::SchemaEvolutionConfiguration>,
    /// <p>The configuration to enable automatic table creation.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub table_creation_configuration: ::std::option::Option<crate::types::TableCreationConfiguration>,
    /// <p>Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Firehose might choose to use different values when it is optimal. The <code>SizeInMBs</code> and <code>IntervalInSeconds</code> parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.</p>
    pub buffering_hints: ::std::option::Option<crate::types::BufferingHints>,
    /// <p>Describes the Amazon CloudWatch logging options for your Firehose stream.</p>
    pub cloud_watch_logging_options: ::std::option::Option<crate::types::CloudWatchLoggingOptions>,
    /// <p>Describes a data processing configuration.</p>
    pub processing_configuration: ::std::option::Option<crate::types::ProcessingConfiguration>,
    /// <p>Describes how Firehose will backup records. Currently,S3 backup only supports <code>FailedDataOnly</code>.</p>
    pub s3_backup_mode: ::std::option::Option<crate::types::IcebergS3BackupMode>,
    /// <p>The retry behavior in case Firehose is unable to deliver data to a destination.</p>
    pub retry_options: ::std::option::Option<crate::types::RetryOptions>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role to be assumed by Firehose for calling Apache Iceberg Tables.</p>
    pub role_arn: ::std::string::String,
    /// <p>Describes whether all incoming data for this delivery stream will be append only (inserts only and not for updates and deletes) for Iceberg delivery. This feature is only applicable for Apache Iceberg Tables.</p>
    /// <p>The default value is false. If you set this value to true, Firehose automatically increases the throughput limit of a stream based on the throttling levels of the stream. If you set this parameter to true for a stream with updates and deletes, you will see out of order delivery.</p>
    pub append_only: ::std::option::Option<bool>,
    /// <p>Configuration describing where the destination Apache Iceberg Tables are persisted.</p>
    pub catalog_configuration: ::std::option::Option<crate::types::CatalogConfiguration>,
    /// <p>Describes the configuration of a destination in Amazon S3.</p>
    pub s3_configuration: ::std::option::Option<crate::types::S3DestinationConfiguration>,
}
impl IcebergDestinationConfiguration {
    /// <p>Provides a list of <code>DestinationTableConfigurations</code> which Firehose uses to deliver data to Apache Iceberg Tables. Firehose will write data with insert if table specific configuration is not provided here.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destination_table_configuration_list.is_none()`.
    pub fn destination_table_configuration_list(&self) -> &[crate::types::DestinationTableConfiguration] {
        self.destination_table_configuration_list.as_deref().unwrap_or_default()
    }
    /// <p>The configuration to enable automatic schema evolution.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn schema_evolution_configuration(&self) -> ::std::option::Option<&crate::types::SchemaEvolutionConfiguration> {
        self.schema_evolution_configuration.as_ref()
    }
    /// <p>The configuration to enable automatic table creation.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn table_creation_configuration(&self) -> ::std::option::Option<&crate::types::TableCreationConfiguration> {
        self.table_creation_configuration.as_ref()
    }
    /// <p>Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Firehose might choose to use different values when it is optimal. The <code>SizeInMBs</code> and <code>IntervalInSeconds</code> parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.</p>
    pub fn buffering_hints(&self) -> ::std::option::Option<&crate::types::BufferingHints> {
        self.buffering_hints.as_ref()
    }
    /// <p>Describes the Amazon CloudWatch logging options for your Firehose stream.</p>
    pub fn cloud_watch_logging_options(&self) -> ::std::option::Option<&crate::types::CloudWatchLoggingOptions> {
        self.cloud_watch_logging_options.as_ref()
    }
    /// <p>Describes a data processing configuration.</p>
    pub fn processing_configuration(&self) -> ::std::option::Option<&crate::types::ProcessingConfiguration> {
        self.processing_configuration.as_ref()
    }
    /// <p>Describes how Firehose will backup records. Currently,S3 backup only supports <code>FailedDataOnly</code>.</p>
    pub fn s3_backup_mode(&self) -> ::std::option::Option<&crate::types::IcebergS3BackupMode> {
        self.s3_backup_mode.as_ref()
    }
    /// <p>The retry behavior in case Firehose is unable to deliver data to a destination.</p>
    pub fn retry_options(&self) -> ::std::option::Option<&crate::types::RetryOptions> {
        self.retry_options.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role to be assumed by Firehose for calling Apache Iceberg Tables.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>Describes whether all incoming data for this delivery stream will be append only (inserts only and not for updates and deletes) for Iceberg delivery. This feature is only applicable for Apache Iceberg Tables.</p>
    /// <p>The default value is false. If you set this value to true, Firehose automatically increases the throughput limit of a stream based on the throttling levels of the stream. If you set this parameter to true for a stream with updates and deletes, you will see out of order delivery.</p>
    pub fn append_only(&self) -> ::std::option::Option<bool> {
        self.append_only
    }
    /// <p>Configuration describing where the destination Apache Iceberg Tables are persisted.</p>
    pub fn catalog_configuration(&self) -> ::std::option::Option<&crate::types::CatalogConfiguration> {
        self.catalog_configuration.as_ref()
    }
    /// <p>Describes the configuration of a destination in Amazon S3.</p>
    pub fn s3_configuration(&self) -> ::std::option::Option<&crate::types::S3DestinationConfiguration> {
        self.s3_configuration.as_ref()
    }
}
impl IcebergDestinationConfiguration {
    /// Creates a new builder-style object to manufacture [`IcebergDestinationConfiguration`](crate::types::IcebergDestinationConfiguration).
    pub fn builder() -> crate::types::builders::IcebergDestinationConfigurationBuilder {
        crate::types::builders::IcebergDestinationConfigurationBuilder::default()
    }
}

/// A builder for [`IcebergDestinationConfiguration`](crate::types::IcebergDestinationConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IcebergDestinationConfigurationBuilder {
    pub(crate) destination_table_configuration_list: ::std::option::Option<::std::vec::Vec<crate::types::DestinationTableConfiguration>>,
    pub(crate) schema_evolution_configuration: ::std::option::Option<crate::types::SchemaEvolutionConfiguration>,
    pub(crate) table_creation_configuration: ::std::option::Option<crate::types::TableCreationConfiguration>,
    pub(crate) buffering_hints: ::std::option::Option<crate::types::BufferingHints>,
    pub(crate) cloud_watch_logging_options: ::std::option::Option<crate::types::CloudWatchLoggingOptions>,
    pub(crate) processing_configuration: ::std::option::Option<crate::types::ProcessingConfiguration>,
    pub(crate) s3_backup_mode: ::std::option::Option<crate::types::IcebergS3BackupMode>,
    pub(crate) retry_options: ::std::option::Option<crate::types::RetryOptions>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) append_only: ::std::option::Option<bool>,
    pub(crate) catalog_configuration: ::std::option::Option<crate::types::CatalogConfiguration>,
    pub(crate) s3_configuration: ::std::option::Option<crate::types::S3DestinationConfiguration>,
}
impl IcebergDestinationConfigurationBuilder {
    /// Appends an item to `destination_table_configuration_list`.
    ///
    /// To override the contents of this collection use [`set_destination_table_configuration_list`](Self::set_destination_table_configuration_list).
    ///
    /// <p>Provides a list of <code>DestinationTableConfigurations</code> which Firehose uses to deliver data to Apache Iceberg Tables. Firehose will write data with insert if table specific configuration is not provided here.</p>
    pub fn destination_table_configuration_list(mut self, input: crate::types::DestinationTableConfiguration) -> Self {
        let mut v = self.destination_table_configuration_list.unwrap_or_default();
        v.push(input);
        self.destination_table_configuration_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>Provides a list of <code>DestinationTableConfigurations</code> which Firehose uses to deliver data to Apache Iceberg Tables. Firehose will write data with insert if table specific configuration is not provided here.</p>
    pub fn set_destination_table_configuration_list(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::DestinationTableConfiguration>>,
    ) -> Self {
        self.destination_table_configuration_list = input;
        self
    }
    /// <p>Provides a list of <code>DestinationTableConfigurations</code> which Firehose uses to deliver data to Apache Iceberg Tables. Firehose will write data with insert if table specific configuration is not provided here.</p>
    pub fn get_destination_table_configuration_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DestinationTableConfiguration>> {
        &self.destination_table_configuration_list
    }
    /// <p>The configuration to enable automatic schema evolution.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn schema_evolution_configuration(mut self, input: crate::types::SchemaEvolutionConfiguration) -> Self {
        self.schema_evolution_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration to enable automatic schema evolution.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_schema_evolution_configuration(mut self, input: ::std::option::Option<crate::types::SchemaEvolutionConfiguration>) -> Self {
        self.schema_evolution_configuration = input;
        self
    }
    /// <p>The configuration to enable automatic schema evolution.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_schema_evolution_configuration(&self) -> &::std::option::Option<crate::types::SchemaEvolutionConfiguration> {
        &self.schema_evolution_configuration
    }
    /// <p>The configuration to enable automatic table creation.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn table_creation_configuration(mut self, input: crate::types::TableCreationConfiguration) -> Self {
        self.table_creation_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration to enable automatic table creation.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_table_creation_configuration(mut self, input: ::std::option::Option<crate::types::TableCreationConfiguration>) -> Self {
        self.table_creation_configuration = input;
        self
    }
    /// <p>The configuration to enable automatic table creation.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_table_creation_configuration(&self) -> &::std::option::Option<crate::types::TableCreationConfiguration> {
        &self.table_creation_configuration
    }
    /// <p>Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Firehose might choose to use different values when it is optimal. The <code>SizeInMBs</code> and <code>IntervalInSeconds</code> parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.</p>
    pub fn buffering_hints(mut self, input: crate::types::BufferingHints) -> Self {
        self.buffering_hints = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Firehose might choose to use different values when it is optimal. The <code>SizeInMBs</code> and <code>IntervalInSeconds</code> parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.</p>
    pub fn set_buffering_hints(mut self, input: ::std::option::Option<crate::types::BufferingHints>) -> Self {
        self.buffering_hints = input;
        self
    }
    /// <p>Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Firehose might choose to use different values when it is optimal. The <code>SizeInMBs</code> and <code>IntervalInSeconds</code> parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.</p>
    pub fn get_buffering_hints(&self) -> &::std::option::Option<crate::types::BufferingHints> {
        &self.buffering_hints
    }
    /// <p>Describes the Amazon CloudWatch logging options for your Firehose stream.</p>
    pub fn cloud_watch_logging_options(mut self, input: crate::types::CloudWatchLoggingOptions) -> Self {
        self.cloud_watch_logging_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the Amazon CloudWatch logging options for your Firehose stream.</p>
    pub fn set_cloud_watch_logging_options(mut self, input: ::std::option::Option<crate::types::CloudWatchLoggingOptions>) -> Self {
        self.cloud_watch_logging_options = input;
        self
    }
    /// <p>Describes the Amazon CloudWatch logging options for your Firehose stream.</p>
    pub fn get_cloud_watch_logging_options(&self) -> &::std::option::Option<crate::types::CloudWatchLoggingOptions> {
        &self.cloud_watch_logging_options
    }
    /// <p>Describes a data processing configuration.</p>
    pub fn processing_configuration(mut self, input: crate::types::ProcessingConfiguration) -> Self {
        self.processing_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes a data processing configuration.</p>
    pub fn set_processing_configuration(mut self, input: ::std::option::Option<crate::types::ProcessingConfiguration>) -> Self {
        self.processing_configuration = input;
        self
    }
    /// <p>Describes a data processing configuration.</p>
    pub fn get_processing_configuration(&self) -> &::std::option::Option<crate::types::ProcessingConfiguration> {
        &self.processing_configuration
    }
    /// <p>Describes how Firehose will backup records. Currently,S3 backup only supports <code>FailedDataOnly</code>.</p>
    pub fn s3_backup_mode(mut self, input: crate::types::IcebergS3BackupMode) -> Self {
        self.s3_backup_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes how Firehose will backup records. Currently,S3 backup only supports <code>FailedDataOnly</code>.</p>
    pub fn set_s3_backup_mode(mut self, input: ::std::option::Option<crate::types::IcebergS3BackupMode>) -> Self {
        self.s3_backup_mode = input;
        self
    }
    /// <p>Describes how Firehose will backup records. Currently,S3 backup only supports <code>FailedDataOnly</code>.</p>
    pub fn get_s3_backup_mode(&self) -> &::std::option::Option<crate::types::IcebergS3BackupMode> {
        &self.s3_backup_mode
    }
    /// <p>The retry behavior in case Firehose is unable to deliver data to a destination.</p>
    pub fn retry_options(mut self, input: crate::types::RetryOptions) -> Self {
        self.retry_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The retry behavior in case Firehose is unable to deliver data to a destination.</p>
    pub fn set_retry_options(mut self, input: ::std::option::Option<crate::types::RetryOptions>) -> Self {
        self.retry_options = input;
        self
    }
    /// <p>The retry behavior in case Firehose is unable to deliver data to a destination.</p>
    pub fn get_retry_options(&self) -> &::std::option::Option<crate::types::RetryOptions> {
        &self.retry_options
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role to be assumed by Firehose for calling Apache Iceberg Tables.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role to be assumed by Firehose for calling Apache Iceberg Tables.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role to be assumed by Firehose for calling Apache Iceberg Tables.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>Describes whether all incoming data for this delivery stream will be append only (inserts only and not for updates and deletes) for Iceberg delivery. This feature is only applicable for Apache Iceberg Tables.</p>
    /// <p>The default value is false. If you set this value to true, Firehose automatically increases the throughput limit of a stream based on the throttling levels of the stream. If you set this parameter to true for a stream with updates and deletes, you will see out of order delivery.</p>
    pub fn append_only(mut self, input: bool) -> Self {
        self.append_only = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes whether all incoming data for this delivery stream will be append only (inserts only and not for updates and deletes) for Iceberg delivery. This feature is only applicable for Apache Iceberg Tables.</p>
    /// <p>The default value is false. If you set this value to true, Firehose automatically increases the throughput limit of a stream based on the throttling levels of the stream. If you set this parameter to true for a stream with updates and deletes, you will see out of order delivery.</p>
    pub fn set_append_only(mut self, input: ::std::option::Option<bool>) -> Self {
        self.append_only = input;
        self
    }
    /// <p>Describes whether all incoming data for this delivery stream will be append only (inserts only and not for updates and deletes) for Iceberg delivery. This feature is only applicable for Apache Iceberg Tables.</p>
    /// <p>The default value is false. If you set this value to true, Firehose automatically increases the throughput limit of a stream based on the throttling levels of the stream. If you set this parameter to true for a stream with updates and deletes, you will see out of order delivery.</p>
    pub fn get_append_only(&self) -> &::std::option::Option<bool> {
        &self.append_only
    }
    /// <p>Configuration describing where the destination Apache Iceberg Tables are persisted.</p>
    /// This field is required.
    pub fn catalog_configuration(mut self, input: crate::types::CatalogConfiguration) -> Self {
        self.catalog_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration describing where the destination Apache Iceberg Tables are persisted.</p>
    pub fn set_catalog_configuration(mut self, input: ::std::option::Option<crate::types::CatalogConfiguration>) -> Self {
        self.catalog_configuration = input;
        self
    }
    /// <p>Configuration describing where the destination Apache Iceberg Tables are persisted.</p>
    pub fn get_catalog_configuration(&self) -> &::std::option::Option<crate::types::CatalogConfiguration> {
        &self.catalog_configuration
    }
    /// <p>Describes the configuration of a destination in Amazon S3.</p>
    /// This field is required.
    pub fn s3_configuration(mut self, input: crate::types::S3DestinationConfiguration) -> Self {
        self.s3_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the configuration of a destination in Amazon S3.</p>
    pub fn set_s3_configuration(mut self, input: ::std::option::Option<crate::types::S3DestinationConfiguration>) -> Self {
        self.s3_configuration = input;
        self
    }
    /// <p>Describes the configuration of a destination in Amazon S3.</p>
    pub fn get_s3_configuration(&self) -> &::std::option::Option<crate::types::S3DestinationConfiguration> {
        &self.s3_configuration
    }
    /// Consumes the builder and constructs a [`IcebergDestinationConfiguration`](crate::types::IcebergDestinationConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`role_arn`](crate::types::builders::IcebergDestinationConfigurationBuilder::role_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::IcebergDestinationConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IcebergDestinationConfiguration {
            destination_table_configuration_list: self.destination_table_configuration_list,
            schema_evolution_configuration: self.schema_evolution_configuration,
            table_creation_configuration: self.table_creation_configuration,
            buffering_hints: self.buffering_hints,
            cloud_watch_logging_options: self.cloud_watch_logging_options,
            processing_configuration: self.processing_configuration,
            s3_backup_mode: self.s3_backup_mode,
            retry_options: self.retry_options,
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building IcebergDestinationConfiguration",
                )
            })?,
            append_only: self.append_only,
            catalog_configuration: self.catalog_configuration,
            s3_configuration: self.s3_configuration,
        })
    }
}
