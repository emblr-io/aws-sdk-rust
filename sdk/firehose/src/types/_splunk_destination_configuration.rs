// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration of a destination in Splunk.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SplunkDestinationConfiguration {
    /// <p>The HTTP Event Collector (HEC) endpoint to which Firehose sends your data.</p>
    pub hec_endpoint: ::std::string::String,
    /// <p>This type can be either "Raw" or "Event."</p>
    pub hec_endpoint_type: crate::types::HecEndpointType,
    /// <p>This is a GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.</p>
    pub hec_token: ::std::option::Option<::std::string::String>,
    /// <p>The amount of time that Firehose waits to receive an acknowledgment from Splunk after it sends it data. At the end of the timeout period, Firehose either tries to send the data again or considers it an error, based on your retry settings.</p>
    pub hec_acknowledgment_timeout_in_seconds: ::std::option::Option<i32>,
    /// <p>The retry behavior in case Firehose is unable to deliver data to Splunk, or if it doesn't receive an acknowledgment of receipt from Splunk.</p>
    pub retry_options: ::std::option::Option<crate::types::SplunkRetryOptions>,
    /// <p>Defines how documents should be delivered to Amazon S3. When set to <code>FailedEventsOnly</code>, Firehose writes any data that could not be indexed to the configured Amazon S3 destination. When set to <code>AllEvents</code>, Firehose delivers all incoming records to Amazon S3, and also writes failed documents to Amazon S3. The default value is <code>FailedEventsOnly</code>.</p>
    /// <p>You can update this backup mode from <code>FailedEventsOnly</code> to <code>AllEvents</code>. You can't update it from <code>AllEvents</code> to <code>FailedEventsOnly</code>.</p>
    pub s3_backup_mode: ::std::option::Option<crate::types::SplunkS3BackupMode>,
    /// <p>The configuration for the backup Amazon S3 location.</p>
    pub s3_configuration: ::std::option::Option<crate::types::S3DestinationConfiguration>,
    /// <p>The data processing configuration.</p>
    pub processing_configuration: ::std::option::Option<crate::types::ProcessingConfiguration>,
    /// <p>The Amazon CloudWatch logging options for your Firehose stream.</p>
    pub cloud_watch_logging_options: ::std::option::Option<crate::types::CloudWatchLoggingOptions>,
    /// <p>The buffering options. If no value is specified, the default values for Splunk are used.</p>
    pub buffering_hints: ::std::option::Option<crate::types::SplunkBufferingHints>,
    /// <p>The configuration that defines how you access secrets for Splunk.</p>
    pub secrets_manager_configuration: ::std::option::Option<crate::types::SecretsManagerConfiguration>,
}
impl SplunkDestinationConfiguration {
    /// <p>The HTTP Event Collector (HEC) endpoint to which Firehose sends your data.</p>
    pub fn hec_endpoint(&self) -> &str {
        use std::ops::Deref;
        self.hec_endpoint.deref()
    }
    /// <p>This type can be either "Raw" or "Event."</p>
    pub fn hec_endpoint_type(&self) -> &crate::types::HecEndpointType {
        &self.hec_endpoint_type
    }
    /// <p>This is a GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.</p>
    pub fn hec_token(&self) -> ::std::option::Option<&str> {
        self.hec_token.as_deref()
    }
    /// <p>The amount of time that Firehose waits to receive an acknowledgment from Splunk after it sends it data. At the end of the timeout period, Firehose either tries to send the data again or considers it an error, based on your retry settings.</p>
    pub fn hec_acknowledgment_timeout_in_seconds(&self) -> ::std::option::Option<i32> {
        self.hec_acknowledgment_timeout_in_seconds
    }
    /// <p>The retry behavior in case Firehose is unable to deliver data to Splunk, or if it doesn't receive an acknowledgment of receipt from Splunk.</p>
    pub fn retry_options(&self) -> ::std::option::Option<&crate::types::SplunkRetryOptions> {
        self.retry_options.as_ref()
    }
    /// <p>Defines how documents should be delivered to Amazon S3. When set to <code>FailedEventsOnly</code>, Firehose writes any data that could not be indexed to the configured Amazon S3 destination. When set to <code>AllEvents</code>, Firehose delivers all incoming records to Amazon S3, and also writes failed documents to Amazon S3. The default value is <code>FailedEventsOnly</code>.</p>
    /// <p>You can update this backup mode from <code>FailedEventsOnly</code> to <code>AllEvents</code>. You can't update it from <code>AllEvents</code> to <code>FailedEventsOnly</code>.</p>
    pub fn s3_backup_mode(&self) -> ::std::option::Option<&crate::types::SplunkS3BackupMode> {
        self.s3_backup_mode.as_ref()
    }
    /// <p>The configuration for the backup Amazon S3 location.</p>
    pub fn s3_configuration(&self) -> ::std::option::Option<&crate::types::S3DestinationConfiguration> {
        self.s3_configuration.as_ref()
    }
    /// <p>The data processing configuration.</p>
    pub fn processing_configuration(&self) -> ::std::option::Option<&crate::types::ProcessingConfiguration> {
        self.processing_configuration.as_ref()
    }
    /// <p>The Amazon CloudWatch logging options for your Firehose stream.</p>
    pub fn cloud_watch_logging_options(&self) -> ::std::option::Option<&crate::types::CloudWatchLoggingOptions> {
        self.cloud_watch_logging_options.as_ref()
    }
    /// <p>The buffering options. If no value is specified, the default values for Splunk are used.</p>
    pub fn buffering_hints(&self) -> ::std::option::Option<&crate::types::SplunkBufferingHints> {
        self.buffering_hints.as_ref()
    }
    /// <p>The configuration that defines how you access secrets for Splunk.</p>
    pub fn secrets_manager_configuration(&self) -> ::std::option::Option<&crate::types::SecretsManagerConfiguration> {
        self.secrets_manager_configuration.as_ref()
    }
}
impl SplunkDestinationConfiguration {
    /// Creates a new builder-style object to manufacture [`SplunkDestinationConfiguration`](crate::types::SplunkDestinationConfiguration).
    pub fn builder() -> crate::types::builders::SplunkDestinationConfigurationBuilder {
        crate::types::builders::SplunkDestinationConfigurationBuilder::default()
    }
}

/// A builder for [`SplunkDestinationConfiguration`](crate::types::SplunkDestinationConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SplunkDestinationConfigurationBuilder {
    pub(crate) hec_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) hec_endpoint_type: ::std::option::Option<crate::types::HecEndpointType>,
    pub(crate) hec_token: ::std::option::Option<::std::string::String>,
    pub(crate) hec_acknowledgment_timeout_in_seconds: ::std::option::Option<i32>,
    pub(crate) retry_options: ::std::option::Option<crate::types::SplunkRetryOptions>,
    pub(crate) s3_backup_mode: ::std::option::Option<crate::types::SplunkS3BackupMode>,
    pub(crate) s3_configuration: ::std::option::Option<crate::types::S3DestinationConfiguration>,
    pub(crate) processing_configuration: ::std::option::Option<crate::types::ProcessingConfiguration>,
    pub(crate) cloud_watch_logging_options: ::std::option::Option<crate::types::CloudWatchLoggingOptions>,
    pub(crate) buffering_hints: ::std::option::Option<crate::types::SplunkBufferingHints>,
    pub(crate) secrets_manager_configuration: ::std::option::Option<crate::types::SecretsManagerConfiguration>,
}
impl SplunkDestinationConfigurationBuilder {
    /// <p>The HTTP Event Collector (HEC) endpoint to which Firehose sends your data.</p>
    /// This field is required.
    pub fn hec_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hec_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The HTTP Event Collector (HEC) endpoint to which Firehose sends your data.</p>
    pub fn set_hec_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hec_endpoint = input;
        self
    }
    /// <p>The HTTP Event Collector (HEC) endpoint to which Firehose sends your data.</p>
    pub fn get_hec_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.hec_endpoint
    }
    /// <p>This type can be either "Raw" or "Event."</p>
    /// This field is required.
    pub fn hec_endpoint_type(mut self, input: crate::types::HecEndpointType) -> Self {
        self.hec_endpoint_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>This type can be either "Raw" or "Event."</p>
    pub fn set_hec_endpoint_type(mut self, input: ::std::option::Option<crate::types::HecEndpointType>) -> Self {
        self.hec_endpoint_type = input;
        self
    }
    /// <p>This type can be either "Raw" or "Event."</p>
    pub fn get_hec_endpoint_type(&self) -> &::std::option::Option<crate::types::HecEndpointType> {
        &self.hec_endpoint_type
    }
    /// <p>This is a GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.</p>
    pub fn hec_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hec_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This is a GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.</p>
    pub fn set_hec_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hec_token = input;
        self
    }
    /// <p>This is a GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.</p>
    pub fn get_hec_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.hec_token
    }
    /// <p>The amount of time that Firehose waits to receive an acknowledgment from Splunk after it sends it data. At the end of the timeout period, Firehose either tries to send the data again or considers it an error, based on your retry settings.</p>
    pub fn hec_acknowledgment_timeout_in_seconds(mut self, input: i32) -> Self {
        self.hec_acknowledgment_timeout_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of time that Firehose waits to receive an acknowledgment from Splunk after it sends it data. At the end of the timeout period, Firehose either tries to send the data again or considers it an error, based on your retry settings.</p>
    pub fn set_hec_acknowledgment_timeout_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.hec_acknowledgment_timeout_in_seconds = input;
        self
    }
    /// <p>The amount of time that Firehose waits to receive an acknowledgment from Splunk after it sends it data. At the end of the timeout period, Firehose either tries to send the data again or considers it an error, based on your retry settings.</p>
    pub fn get_hec_acknowledgment_timeout_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.hec_acknowledgment_timeout_in_seconds
    }
    /// <p>The retry behavior in case Firehose is unable to deliver data to Splunk, or if it doesn't receive an acknowledgment of receipt from Splunk.</p>
    pub fn retry_options(mut self, input: crate::types::SplunkRetryOptions) -> Self {
        self.retry_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The retry behavior in case Firehose is unable to deliver data to Splunk, or if it doesn't receive an acknowledgment of receipt from Splunk.</p>
    pub fn set_retry_options(mut self, input: ::std::option::Option<crate::types::SplunkRetryOptions>) -> Self {
        self.retry_options = input;
        self
    }
    /// <p>The retry behavior in case Firehose is unable to deliver data to Splunk, or if it doesn't receive an acknowledgment of receipt from Splunk.</p>
    pub fn get_retry_options(&self) -> &::std::option::Option<crate::types::SplunkRetryOptions> {
        &self.retry_options
    }
    /// <p>Defines how documents should be delivered to Amazon S3. When set to <code>FailedEventsOnly</code>, Firehose writes any data that could not be indexed to the configured Amazon S3 destination. When set to <code>AllEvents</code>, Firehose delivers all incoming records to Amazon S3, and also writes failed documents to Amazon S3. The default value is <code>FailedEventsOnly</code>.</p>
    /// <p>You can update this backup mode from <code>FailedEventsOnly</code> to <code>AllEvents</code>. You can't update it from <code>AllEvents</code> to <code>FailedEventsOnly</code>.</p>
    pub fn s3_backup_mode(mut self, input: crate::types::SplunkS3BackupMode) -> Self {
        self.s3_backup_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines how documents should be delivered to Amazon S3. When set to <code>FailedEventsOnly</code>, Firehose writes any data that could not be indexed to the configured Amazon S3 destination. When set to <code>AllEvents</code>, Firehose delivers all incoming records to Amazon S3, and also writes failed documents to Amazon S3. The default value is <code>FailedEventsOnly</code>.</p>
    /// <p>You can update this backup mode from <code>FailedEventsOnly</code> to <code>AllEvents</code>. You can't update it from <code>AllEvents</code> to <code>FailedEventsOnly</code>.</p>
    pub fn set_s3_backup_mode(mut self, input: ::std::option::Option<crate::types::SplunkS3BackupMode>) -> Self {
        self.s3_backup_mode = input;
        self
    }
    /// <p>Defines how documents should be delivered to Amazon S3. When set to <code>FailedEventsOnly</code>, Firehose writes any data that could not be indexed to the configured Amazon S3 destination. When set to <code>AllEvents</code>, Firehose delivers all incoming records to Amazon S3, and also writes failed documents to Amazon S3. The default value is <code>FailedEventsOnly</code>.</p>
    /// <p>You can update this backup mode from <code>FailedEventsOnly</code> to <code>AllEvents</code>. You can't update it from <code>AllEvents</code> to <code>FailedEventsOnly</code>.</p>
    pub fn get_s3_backup_mode(&self) -> &::std::option::Option<crate::types::SplunkS3BackupMode> {
        &self.s3_backup_mode
    }
    /// <p>The configuration for the backup Amazon S3 location.</p>
    /// This field is required.
    pub fn s3_configuration(mut self, input: crate::types::S3DestinationConfiguration) -> Self {
        self.s3_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for the backup Amazon S3 location.</p>
    pub fn set_s3_configuration(mut self, input: ::std::option::Option<crate::types::S3DestinationConfiguration>) -> Self {
        self.s3_configuration = input;
        self
    }
    /// <p>The configuration for the backup Amazon S3 location.</p>
    pub fn get_s3_configuration(&self) -> &::std::option::Option<crate::types::S3DestinationConfiguration> {
        &self.s3_configuration
    }
    /// <p>The data processing configuration.</p>
    pub fn processing_configuration(mut self, input: crate::types::ProcessingConfiguration) -> Self {
        self.processing_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data processing configuration.</p>
    pub fn set_processing_configuration(mut self, input: ::std::option::Option<crate::types::ProcessingConfiguration>) -> Self {
        self.processing_configuration = input;
        self
    }
    /// <p>The data processing configuration.</p>
    pub fn get_processing_configuration(&self) -> &::std::option::Option<crate::types::ProcessingConfiguration> {
        &self.processing_configuration
    }
    /// <p>The Amazon CloudWatch logging options for your Firehose stream.</p>
    pub fn cloud_watch_logging_options(mut self, input: crate::types::CloudWatchLoggingOptions) -> Self {
        self.cloud_watch_logging_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon CloudWatch logging options for your Firehose stream.</p>
    pub fn set_cloud_watch_logging_options(mut self, input: ::std::option::Option<crate::types::CloudWatchLoggingOptions>) -> Self {
        self.cloud_watch_logging_options = input;
        self
    }
    /// <p>The Amazon CloudWatch logging options for your Firehose stream.</p>
    pub fn get_cloud_watch_logging_options(&self) -> &::std::option::Option<crate::types::CloudWatchLoggingOptions> {
        &self.cloud_watch_logging_options
    }
    /// <p>The buffering options. If no value is specified, the default values for Splunk are used.</p>
    pub fn buffering_hints(mut self, input: crate::types::SplunkBufferingHints) -> Self {
        self.buffering_hints = ::std::option::Option::Some(input);
        self
    }
    /// <p>The buffering options. If no value is specified, the default values for Splunk are used.</p>
    pub fn set_buffering_hints(mut self, input: ::std::option::Option<crate::types::SplunkBufferingHints>) -> Self {
        self.buffering_hints = input;
        self
    }
    /// <p>The buffering options. If no value is specified, the default values for Splunk are used.</p>
    pub fn get_buffering_hints(&self) -> &::std::option::Option<crate::types::SplunkBufferingHints> {
        &self.buffering_hints
    }
    /// <p>The configuration that defines how you access secrets for Splunk.</p>
    pub fn secrets_manager_configuration(mut self, input: crate::types::SecretsManagerConfiguration) -> Self {
        self.secrets_manager_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration that defines how you access secrets for Splunk.</p>
    pub fn set_secrets_manager_configuration(mut self, input: ::std::option::Option<crate::types::SecretsManagerConfiguration>) -> Self {
        self.secrets_manager_configuration = input;
        self
    }
    /// <p>The configuration that defines how you access secrets for Splunk.</p>
    pub fn get_secrets_manager_configuration(&self) -> &::std::option::Option<crate::types::SecretsManagerConfiguration> {
        &self.secrets_manager_configuration
    }
    /// Consumes the builder and constructs a [`SplunkDestinationConfiguration`](crate::types::SplunkDestinationConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`hec_endpoint`](crate::types::builders::SplunkDestinationConfigurationBuilder::hec_endpoint)
    /// - [`hec_endpoint_type`](crate::types::builders::SplunkDestinationConfigurationBuilder::hec_endpoint_type)
    pub fn build(self) -> ::std::result::Result<crate::types::SplunkDestinationConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SplunkDestinationConfiguration {
            hec_endpoint: self.hec_endpoint.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "hec_endpoint",
                    "hec_endpoint was not specified but it is required when building SplunkDestinationConfiguration",
                )
            })?,
            hec_endpoint_type: self.hec_endpoint_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "hec_endpoint_type",
                    "hec_endpoint_type was not specified but it is required when building SplunkDestinationConfiguration",
                )
            })?,
            hec_token: self.hec_token,
            hec_acknowledgment_timeout_in_seconds: self.hec_acknowledgment_timeout_in_seconds,
            retry_options: self.retry_options,
            s3_backup_mode: self.s3_backup_mode,
            s3_configuration: self.s3_configuration,
            processing_configuration: self.processing_configuration,
            cloud_watch_logging_options: self.cloud_watch_logging_options,
            buffering_hints: self.buffering_hints,
            secrets_manager_configuration: self.secrets_manager_configuration,
        })
    }
}
