// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the Amazon MSK cluster used as the source for a Firehose stream.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MskSourceDescription {
    /// <p>The ARN of the Amazon MSK cluster.</p>
    pub msk_cluster_arn: ::std::option::Option<::std::string::String>,
    /// <p>The topic name within the Amazon MSK cluster.</p>
    pub topic_name: ::std::option::Option<::std::string::String>,
    /// <p>The authentication configuration of the Amazon MSK cluster.</p>
    pub authentication_configuration: ::std::option::Option<crate::types::AuthenticationConfiguration>,
    /// <p>Firehose starts retrieving records from the topic within the Amazon MSK cluster starting with this timestamp.</p>
    pub delivery_start_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The start date and time in UTC for the offset position within your MSK topic from where Firehose begins to read. By default, this is set to timestamp when Firehose becomes Active.</p>
    /// <p>If you want to create a Firehose stream with Earliest start position from SDK or CLI, you need to set the <code>ReadFromTimestampUTC</code> parameter to Epoch (1970-01-01T00:00:00Z).</p>
    pub read_from_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl MskSourceDescription {
    /// <p>The ARN of the Amazon MSK cluster.</p>
    pub fn msk_cluster_arn(&self) -> ::std::option::Option<&str> {
        self.msk_cluster_arn.as_deref()
    }
    /// <p>The topic name within the Amazon MSK cluster.</p>
    pub fn topic_name(&self) -> ::std::option::Option<&str> {
        self.topic_name.as_deref()
    }
    /// <p>The authentication configuration of the Amazon MSK cluster.</p>
    pub fn authentication_configuration(&self) -> ::std::option::Option<&crate::types::AuthenticationConfiguration> {
        self.authentication_configuration.as_ref()
    }
    /// <p>Firehose starts retrieving records from the topic within the Amazon MSK cluster starting with this timestamp.</p>
    pub fn delivery_start_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.delivery_start_timestamp.as_ref()
    }
    /// <p>The start date and time in UTC for the offset position within your MSK topic from where Firehose begins to read. By default, this is set to timestamp when Firehose becomes Active.</p>
    /// <p>If you want to create a Firehose stream with Earliest start position from SDK or CLI, you need to set the <code>ReadFromTimestampUTC</code> parameter to Epoch (1970-01-01T00:00:00Z).</p>
    pub fn read_from_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.read_from_timestamp.as_ref()
    }
}
impl MskSourceDescription {
    /// Creates a new builder-style object to manufacture [`MskSourceDescription`](crate::types::MskSourceDescription).
    pub fn builder() -> crate::types::builders::MskSourceDescriptionBuilder {
        crate::types::builders::MskSourceDescriptionBuilder::default()
    }
}

/// A builder for [`MskSourceDescription`](crate::types::MskSourceDescription).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MskSourceDescriptionBuilder {
    pub(crate) msk_cluster_arn: ::std::option::Option<::std::string::String>,
    pub(crate) topic_name: ::std::option::Option<::std::string::String>,
    pub(crate) authentication_configuration: ::std::option::Option<crate::types::AuthenticationConfiguration>,
    pub(crate) delivery_start_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) read_from_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl MskSourceDescriptionBuilder {
    /// <p>The ARN of the Amazon MSK cluster.</p>
    pub fn msk_cluster_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.msk_cluster_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Amazon MSK cluster.</p>
    pub fn set_msk_cluster_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.msk_cluster_arn = input;
        self
    }
    /// <p>The ARN of the Amazon MSK cluster.</p>
    pub fn get_msk_cluster_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.msk_cluster_arn
    }
    /// <p>The topic name within the Amazon MSK cluster.</p>
    pub fn topic_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.topic_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The topic name within the Amazon MSK cluster.</p>
    pub fn set_topic_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.topic_name = input;
        self
    }
    /// <p>The topic name within the Amazon MSK cluster.</p>
    pub fn get_topic_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.topic_name
    }
    /// <p>The authentication configuration of the Amazon MSK cluster.</p>
    pub fn authentication_configuration(mut self, input: crate::types::AuthenticationConfiguration) -> Self {
        self.authentication_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication configuration of the Amazon MSK cluster.</p>
    pub fn set_authentication_configuration(mut self, input: ::std::option::Option<crate::types::AuthenticationConfiguration>) -> Self {
        self.authentication_configuration = input;
        self
    }
    /// <p>The authentication configuration of the Amazon MSK cluster.</p>
    pub fn get_authentication_configuration(&self) -> &::std::option::Option<crate::types::AuthenticationConfiguration> {
        &self.authentication_configuration
    }
    /// <p>Firehose starts retrieving records from the topic within the Amazon MSK cluster starting with this timestamp.</p>
    pub fn delivery_start_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.delivery_start_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>Firehose starts retrieving records from the topic within the Amazon MSK cluster starting with this timestamp.</p>
    pub fn set_delivery_start_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.delivery_start_timestamp = input;
        self
    }
    /// <p>Firehose starts retrieving records from the topic within the Amazon MSK cluster starting with this timestamp.</p>
    pub fn get_delivery_start_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.delivery_start_timestamp
    }
    /// <p>The start date and time in UTC for the offset position within your MSK topic from where Firehose begins to read. By default, this is set to timestamp when Firehose becomes Active.</p>
    /// <p>If you want to create a Firehose stream with Earliest start position from SDK or CLI, you need to set the <code>ReadFromTimestampUTC</code> parameter to Epoch (1970-01-01T00:00:00Z).</p>
    pub fn read_from_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.read_from_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start date and time in UTC for the offset position within your MSK topic from where Firehose begins to read. By default, this is set to timestamp when Firehose becomes Active.</p>
    /// <p>If you want to create a Firehose stream with Earliest start position from SDK or CLI, you need to set the <code>ReadFromTimestampUTC</code> parameter to Epoch (1970-01-01T00:00:00Z).</p>
    pub fn set_read_from_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.read_from_timestamp = input;
        self
    }
    /// <p>The start date and time in UTC for the offset position within your MSK topic from where Firehose begins to read. By default, this is set to timestamp when Firehose becomes Active.</p>
    /// <p>If you want to create a Firehose stream with Earliest start position from SDK or CLI, you need to set the <code>ReadFromTimestampUTC</code> parameter to Epoch (1970-01-01T00:00:00Z).</p>
    pub fn get_read_from_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.read_from_timestamp
    }
    /// Consumes the builder and constructs a [`MskSourceDescription`](crate::types::MskSourceDescription).
    pub fn build(self) -> crate::types::MskSourceDescription {
        crate::types::MskSourceDescription {
            msk_cluster_arn: self.msk_cluster_arn,
            topic_name: self.topic_name,
            authentication_configuration: self.authentication_configuration,
            delivery_start_timestamp: self.delivery_start_timestamp,
            read_from_timestamp: self.read_from_timestamp,
        }
    }
}
