// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the association between a service network and a VPC endpoint.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceNetworkEndpointAssociation {
    /// <p>The ID of the VPC endpoint associated with the service network.</p>
    pub vpc_endpoint_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the VPC for the association.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The owner of the VPC endpoint associated with the service network.</p>
    pub vpc_endpoint_owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the association.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The state of the association.</p>
    pub state: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the service network.</p>
    pub service_network_arn: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the association was created, in ISO-8601 format.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ServiceNetworkEndpointAssociation {
    /// <p>The ID of the VPC endpoint associated with the service network.</p>
    pub fn vpc_endpoint_id(&self) -> ::std::option::Option<&str> {
        self.vpc_endpoint_id.as_deref()
    }
    /// <p>The ID of the VPC for the association.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The owner of the VPC endpoint associated with the service network.</p>
    pub fn vpc_endpoint_owner_id(&self) -> ::std::option::Option<&str> {
        self.vpc_endpoint_owner_id.as_deref()
    }
    /// <p>The ID of the association.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The state of the association.</p>
    pub fn state(&self) -> ::std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the service network.</p>
    pub fn service_network_arn(&self) -> ::std::option::Option<&str> {
        self.service_network_arn.as_deref()
    }
    /// <p>The date and time that the association was created, in ISO-8601 format.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
}
impl ServiceNetworkEndpointAssociation {
    /// Creates a new builder-style object to manufacture [`ServiceNetworkEndpointAssociation`](crate::types::ServiceNetworkEndpointAssociation).
    pub fn builder() -> crate::types::builders::ServiceNetworkEndpointAssociationBuilder {
        crate::types::builders::ServiceNetworkEndpointAssociationBuilder::default()
    }
}

/// A builder for [`ServiceNetworkEndpointAssociation`](crate::types::ServiceNetworkEndpointAssociation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceNetworkEndpointAssociationBuilder {
    pub(crate) vpc_endpoint_id: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_endpoint_owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<::std::string::String>,
    pub(crate) service_network_arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ServiceNetworkEndpointAssociationBuilder {
    /// <p>The ID of the VPC endpoint associated with the service network.</p>
    pub fn vpc_endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC endpoint associated with the service network.</p>
    pub fn set_vpc_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_endpoint_id = input;
        self
    }
    /// <p>The ID of the VPC endpoint associated with the service network.</p>
    pub fn get_vpc_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_endpoint_id
    }
    /// <p>The ID of the VPC for the association.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC for the association.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The ID of the VPC for the association.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// <p>The owner of the VPC endpoint associated with the service network.</p>
    pub fn vpc_endpoint_owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_endpoint_owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The owner of the VPC endpoint associated with the service network.</p>
    pub fn set_vpc_endpoint_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_endpoint_owner_id = input;
        self
    }
    /// <p>The owner of the VPC endpoint associated with the service network.</p>
    pub fn get_vpc_endpoint_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_endpoint_owner_id
    }
    /// <p>The ID of the association.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the association.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the association.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The state of the association.</p>
    pub fn state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The state of the association.</p>
    pub fn set_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the association.</p>
    pub fn get_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.state
    }
    /// <p>The Amazon Resource Name (ARN) of the service network.</p>
    pub fn service_network_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_network_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the service network.</p>
    pub fn set_service_network_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_network_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the service network.</p>
    pub fn get_service_network_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_network_arn
    }
    /// <p>The date and time that the association was created, in ISO-8601 format.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the association was created, in ISO-8601 format.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time that the association was created, in ISO-8601 format.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// Consumes the builder and constructs a [`ServiceNetworkEndpointAssociation`](crate::types::ServiceNetworkEndpointAssociation).
    pub fn build(self) -> crate::types::ServiceNetworkEndpointAssociation {
        crate::types::ServiceNetworkEndpointAssociation {
            vpc_endpoint_id: self.vpc_endpoint_id,
            vpc_id: self.vpc_id,
            vpc_endpoint_owner_id: self.vpc_endpoint_owner_id,
            id: self.id,
            state: self.state,
            service_network_arn: self.service_network_arn,
            created_at: self.created_at,
        }
    }
}
