// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration of a target group.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vpc-lattice/latest/ug/target-groups.html">Target groups</a> in the <i>Amazon VPC Lattice User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TargetGroupConfig {
    /// <p>The port on which the targets are listening. For HTTP, the default is 80. For HTTPS, the default is 443. Not supported if the target group type is <code>LAMBDA</code>.</p>
    pub port: ::std::option::Option<i32>,
    /// <p>The protocol to use for routing traffic to the targets. The default is the protocol of the target group. Not supported if the target group type is <code>LAMBDA</code>.</p>
    pub protocol: ::std::option::Option<crate::types::TargetGroupProtocol>,
    /// <p>The protocol version. The default is <code>HTTP1</code>. Not supported if the target group type is <code>LAMBDA</code>.</p>
    pub protocol_version: ::std::option::Option<crate::types::TargetGroupProtocolVersion>,
    /// <p>The type of IP address used for the target group. Supported only if the target group type is <code>IP</code>. The default is <code>IPV4</code>.</p>
    pub ip_address_type: ::std::option::Option<crate::types::IpAddressType>,
    /// <p>The ID of the VPC. Not supported if the target group type is <code>LAMBDA</code>.</p>
    pub vpc_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The health check configuration. Not supported if the target group type is <code>LAMBDA</code> or <code>ALB</code>.</p>
    pub health_check: ::std::option::Option<crate::types::HealthCheckConfig>,
    /// <p>The version of the event structure that your Lambda function receives. Supported only if the target group type is <code>LAMBDA</code>. The default is <code>V1</code>.</p>
    pub lambda_event_structure_version: ::std::option::Option<crate::types::LambdaEventStructureVersion>,
}
impl TargetGroupConfig {
    /// <p>The port on which the targets are listening. For HTTP, the default is 80. For HTTPS, the default is 443. Not supported if the target group type is <code>LAMBDA</code>.</p>
    pub fn port(&self) -> ::std::option::Option<i32> {
        self.port
    }
    /// <p>The protocol to use for routing traffic to the targets. The default is the protocol of the target group. Not supported if the target group type is <code>LAMBDA</code>.</p>
    pub fn protocol(&self) -> ::std::option::Option<&crate::types::TargetGroupProtocol> {
        self.protocol.as_ref()
    }
    /// <p>The protocol version. The default is <code>HTTP1</code>. Not supported if the target group type is <code>LAMBDA</code>.</p>
    pub fn protocol_version(&self) -> ::std::option::Option<&crate::types::TargetGroupProtocolVersion> {
        self.protocol_version.as_ref()
    }
    /// <p>The type of IP address used for the target group. Supported only if the target group type is <code>IP</code>. The default is <code>IPV4</code>.</p>
    pub fn ip_address_type(&self) -> ::std::option::Option<&crate::types::IpAddressType> {
        self.ip_address_type.as_ref()
    }
    /// <p>The ID of the VPC. Not supported if the target group type is <code>LAMBDA</code>.</p>
    pub fn vpc_identifier(&self) -> ::std::option::Option<&str> {
        self.vpc_identifier.as_deref()
    }
    /// <p>The health check configuration. Not supported if the target group type is <code>LAMBDA</code> or <code>ALB</code>.</p>
    pub fn health_check(&self) -> ::std::option::Option<&crate::types::HealthCheckConfig> {
        self.health_check.as_ref()
    }
    /// <p>The version of the event structure that your Lambda function receives. Supported only if the target group type is <code>LAMBDA</code>. The default is <code>V1</code>.</p>
    pub fn lambda_event_structure_version(&self) -> ::std::option::Option<&crate::types::LambdaEventStructureVersion> {
        self.lambda_event_structure_version.as_ref()
    }
}
impl TargetGroupConfig {
    /// Creates a new builder-style object to manufacture [`TargetGroupConfig`](crate::types::TargetGroupConfig).
    pub fn builder() -> crate::types::builders::TargetGroupConfigBuilder {
        crate::types::builders::TargetGroupConfigBuilder::default()
    }
}

/// A builder for [`TargetGroupConfig`](crate::types::TargetGroupConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TargetGroupConfigBuilder {
    pub(crate) port: ::std::option::Option<i32>,
    pub(crate) protocol: ::std::option::Option<crate::types::TargetGroupProtocol>,
    pub(crate) protocol_version: ::std::option::Option<crate::types::TargetGroupProtocolVersion>,
    pub(crate) ip_address_type: ::std::option::Option<crate::types::IpAddressType>,
    pub(crate) vpc_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) health_check: ::std::option::Option<crate::types::HealthCheckConfig>,
    pub(crate) lambda_event_structure_version: ::std::option::Option<crate::types::LambdaEventStructureVersion>,
}
impl TargetGroupConfigBuilder {
    /// <p>The port on which the targets are listening. For HTTP, the default is 80. For HTTPS, the default is 443. Not supported if the target group type is <code>LAMBDA</code>.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port on which the targets are listening. For HTTP, the default is 80. For HTTPS, the default is 443. Not supported if the target group type is <code>LAMBDA</code>.</p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The port on which the targets are listening. For HTTP, the default is 80. For HTTPS, the default is 443. Not supported if the target group type is <code>LAMBDA</code>.</p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// <p>The protocol to use for routing traffic to the targets. The default is the protocol of the target group. Not supported if the target group type is <code>LAMBDA</code>.</p>
    pub fn protocol(mut self, input: crate::types::TargetGroupProtocol) -> Self {
        self.protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>The protocol to use for routing traffic to the targets. The default is the protocol of the target group. Not supported if the target group type is <code>LAMBDA</code>.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<crate::types::TargetGroupProtocol>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The protocol to use for routing traffic to the targets. The default is the protocol of the target group. Not supported if the target group type is <code>LAMBDA</code>.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<crate::types::TargetGroupProtocol> {
        &self.protocol
    }
    /// <p>The protocol version. The default is <code>HTTP1</code>. Not supported if the target group type is <code>LAMBDA</code>.</p>
    pub fn protocol_version(mut self, input: crate::types::TargetGroupProtocolVersion) -> Self {
        self.protocol_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The protocol version. The default is <code>HTTP1</code>. Not supported if the target group type is <code>LAMBDA</code>.</p>
    pub fn set_protocol_version(mut self, input: ::std::option::Option<crate::types::TargetGroupProtocolVersion>) -> Self {
        self.protocol_version = input;
        self
    }
    /// <p>The protocol version. The default is <code>HTTP1</code>. Not supported if the target group type is <code>LAMBDA</code>.</p>
    pub fn get_protocol_version(&self) -> &::std::option::Option<crate::types::TargetGroupProtocolVersion> {
        &self.protocol_version
    }
    /// <p>The type of IP address used for the target group. Supported only if the target group type is <code>IP</code>. The default is <code>IPV4</code>.</p>
    pub fn ip_address_type(mut self, input: crate::types::IpAddressType) -> Self {
        self.ip_address_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of IP address used for the target group. Supported only if the target group type is <code>IP</code>. The default is <code>IPV4</code>.</p>
    pub fn set_ip_address_type(mut self, input: ::std::option::Option<crate::types::IpAddressType>) -> Self {
        self.ip_address_type = input;
        self
    }
    /// <p>The type of IP address used for the target group. Supported only if the target group type is <code>IP</code>. The default is <code>IPV4</code>.</p>
    pub fn get_ip_address_type(&self) -> &::std::option::Option<crate::types::IpAddressType> {
        &self.ip_address_type
    }
    /// <p>The ID of the VPC. Not supported if the target group type is <code>LAMBDA</code>.</p>
    pub fn vpc_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC. Not supported if the target group type is <code>LAMBDA</code>.</p>
    pub fn set_vpc_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_identifier = input;
        self
    }
    /// <p>The ID of the VPC. Not supported if the target group type is <code>LAMBDA</code>.</p>
    pub fn get_vpc_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_identifier
    }
    /// <p>The health check configuration. Not supported if the target group type is <code>LAMBDA</code> or <code>ALB</code>.</p>
    pub fn health_check(mut self, input: crate::types::HealthCheckConfig) -> Self {
        self.health_check = ::std::option::Option::Some(input);
        self
    }
    /// <p>The health check configuration. Not supported if the target group type is <code>LAMBDA</code> or <code>ALB</code>.</p>
    pub fn set_health_check(mut self, input: ::std::option::Option<crate::types::HealthCheckConfig>) -> Self {
        self.health_check = input;
        self
    }
    /// <p>The health check configuration. Not supported if the target group type is <code>LAMBDA</code> or <code>ALB</code>.</p>
    pub fn get_health_check(&self) -> &::std::option::Option<crate::types::HealthCheckConfig> {
        &self.health_check
    }
    /// <p>The version of the event structure that your Lambda function receives. Supported only if the target group type is <code>LAMBDA</code>. The default is <code>V1</code>.</p>
    pub fn lambda_event_structure_version(mut self, input: crate::types::LambdaEventStructureVersion) -> Self {
        self.lambda_event_structure_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version of the event structure that your Lambda function receives. Supported only if the target group type is <code>LAMBDA</code>. The default is <code>V1</code>.</p>
    pub fn set_lambda_event_structure_version(mut self, input: ::std::option::Option<crate::types::LambdaEventStructureVersion>) -> Self {
        self.lambda_event_structure_version = input;
        self
    }
    /// <p>The version of the event structure that your Lambda function receives. Supported only if the target group type is <code>LAMBDA</code>. The default is <code>V1</code>.</p>
    pub fn get_lambda_event_structure_version(&self) -> &::std::option::Option<crate::types::LambdaEventStructureVersion> {
        &self.lambda_event_structure_version
    }
    /// Consumes the builder and constructs a [`TargetGroupConfig`](crate::types::TargetGroupConfig).
    pub fn build(self) -> crate::types::TargetGroupConfig {
        crate::types::TargetGroupConfig {
            port: self.port,
            protocol: self.protocol,
            protocol_version: self.protocol_version,
            ip_address_type: self.ip_address_type,
            vpc_identifier: self.vpc_identifier,
            health_check: self.health_check,
            lambda_event_structure_version: self.lambda_event_structure_version,
        }
    }
}
