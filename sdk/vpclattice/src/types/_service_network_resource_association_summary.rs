// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information about an association between a service network and a resource configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceNetworkResourceAssociationSummary {
    /// <p>The ID of the association between the service network and resource configuration.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the association.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the service network associated with the resource configuration.</p>
    pub status: ::std::option::Option<crate::types::ServiceNetworkResourceAssociationStatus>,
    /// <p>The account that created the association.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the association was created, in ISO-8601 format.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The ID of the resource configuration associated with the service network.</p>
    pub resource_configuration_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the association.</p>
    pub resource_configuration_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the resource configuration associated with the service network.</p>
    pub resource_configuration_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the service network associated with the resource configuration.</p>
    pub service_network_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the service network associated with the resource configuration.</p>
    pub service_network_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the service network associated with the resource configuration.</p>
    pub service_network_name: ::std::option::Option<::std::string::String>,
    /// <p>The DNS entry for the service.</p>
    pub dns_entry: ::std::option::Option<crate::types::DnsEntry>,
    /// <p>The private DNS entry for the service.</p>
    pub private_dns_entry: ::std::option::Option<crate::types::DnsEntry>,
    /// <p>Specifies whether the association is managed by Amazon.</p>
    pub is_managed_association: ::std::option::Option<bool>,
    /// <p>The failure code.</p>
    pub failure_code: ::std::option::Option<::std::string::String>,
}
impl ServiceNetworkResourceAssociationSummary {
    /// <p>The ID of the association between the service network and resource configuration.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the association.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The status of the service network associated with the resource configuration.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ServiceNetworkResourceAssociationStatus> {
        self.status.as_ref()
    }
    /// <p>The account that created the association.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The date and time that the association was created, in ISO-8601 format.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The ID of the resource configuration associated with the service network.</p>
    pub fn resource_configuration_id(&self) -> ::std::option::Option<&str> {
        self.resource_configuration_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the association.</p>
    pub fn resource_configuration_arn(&self) -> ::std::option::Option<&str> {
        self.resource_configuration_arn.as_deref()
    }
    /// <p>The name of the resource configuration associated with the service network.</p>
    pub fn resource_configuration_name(&self) -> ::std::option::Option<&str> {
        self.resource_configuration_name.as_deref()
    }
    /// <p>The ID of the service network associated with the resource configuration.</p>
    pub fn service_network_id(&self) -> ::std::option::Option<&str> {
        self.service_network_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the service network associated with the resource configuration.</p>
    pub fn service_network_arn(&self) -> ::std::option::Option<&str> {
        self.service_network_arn.as_deref()
    }
    /// <p>The name of the service network associated with the resource configuration.</p>
    pub fn service_network_name(&self) -> ::std::option::Option<&str> {
        self.service_network_name.as_deref()
    }
    /// <p>The DNS entry for the service.</p>
    pub fn dns_entry(&self) -> ::std::option::Option<&crate::types::DnsEntry> {
        self.dns_entry.as_ref()
    }
    /// <p>The private DNS entry for the service.</p>
    pub fn private_dns_entry(&self) -> ::std::option::Option<&crate::types::DnsEntry> {
        self.private_dns_entry.as_ref()
    }
    /// <p>Specifies whether the association is managed by Amazon.</p>
    pub fn is_managed_association(&self) -> ::std::option::Option<bool> {
        self.is_managed_association
    }
    /// <p>The failure code.</p>
    pub fn failure_code(&self) -> ::std::option::Option<&str> {
        self.failure_code.as_deref()
    }
}
impl ServiceNetworkResourceAssociationSummary {
    /// Creates a new builder-style object to manufacture [`ServiceNetworkResourceAssociationSummary`](crate::types::ServiceNetworkResourceAssociationSummary).
    pub fn builder() -> crate::types::builders::ServiceNetworkResourceAssociationSummaryBuilder {
        crate::types::builders::ServiceNetworkResourceAssociationSummaryBuilder::default()
    }
}

/// A builder for [`ServiceNetworkResourceAssociationSummary`](crate::types::ServiceNetworkResourceAssociationSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceNetworkResourceAssociationSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ServiceNetworkResourceAssociationStatus>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) resource_configuration_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) resource_configuration_name: ::std::option::Option<::std::string::String>,
    pub(crate) service_network_id: ::std::option::Option<::std::string::String>,
    pub(crate) service_network_arn: ::std::option::Option<::std::string::String>,
    pub(crate) service_network_name: ::std::option::Option<::std::string::String>,
    pub(crate) dns_entry: ::std::option::Option<crate::types::DnsEntry>,
    pub(crate) private_dns_entry: ::std::option::Option<crate::types::DnsEntry>,
    pub(crate) is_managed_association: ::std::option::Option<bool>,
    pub(crate) failure_code: ::std::option::Option<::std::string::String>,
}
impl ServiceNetworkResourceAssociationSummaryBuilder {
    /// <p>The ID of the association between the service network and resource configuration.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the association between the service network and resource configuration.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the association between the service network and resource configuration.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The Amazon Resource Name (ARN) of the association.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the association.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the association.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The status of the service network associated with the resource configuration.</p>
    pub fn status(mut self, input: crate::types::ServiceNetworkResourceAssociationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the service network associated with the resource configuration.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ServiceNetworkResourceAssociationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the service network associated with the resource configuration.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ServiceNetworkResourceAssociationStatus> {
        &self.status
    }
    /// <p>The account that created the association.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account that created the association.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The account that created the association.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The date and time that the association was created, in ISO-8601 format.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the association was created, in ISO-8601 format.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time that the association was created, in ISO-8601 format.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The ID of the resource configuration associated with the service network.</p>
    pub fn resource_configuration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_configuration_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the resource configuration associated with the service network.</p>
    pub fn set_resource_configuration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_configuration_id = input;
        self
    }
    /// <p>The ID of the resource configuration associated with the service network.</p>
    pub fn get_resource_configuration_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_configuration_id
    }
    /// <p>The Amazon Resource Name (ARN) of the association.</p>
    pub fn resource_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the association.</p>
    pub fn set_resource_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_configuration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the association.</p>
    pub fn get_resource_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_configuration_arn
    }
    /// <p>The name of the resource configuration associated with the service network.</p>
    pub fn resource_configuration_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_configuration_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the resource configuration associated with the service network.</p>
    pub fn set_resource_configuration_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_configuration_name = input;
        self
    }
    /// <p>The name of the resource configuration associated with the service network.</p>
    pub fn get_resource_configuration_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_configuration_name
    }
    /// <p>The ID of the service network associated with the resource configuration.</p>
    pub fn service_network_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_network_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the service network associated with the resource configuration.</p>
    pub fn set_service_network_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_network_id = input;
        self
    }
    /// <p>The ID of the service network associated with the resource configuration.</p>
    pub fn get_service_network_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_network_id
    }
    /// <p>The Amazon Resource Name (ARN) of the service network associated with the resource configuration.</p>
    pub fn service_network_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_network_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the service network associated with the resource configuration.</p>
    pub fn set_service_network_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_network_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the service network associated with the resource configuration.</p>
    pub fn get_service_network_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_network_arn
    }
    /// <p>The name of the service network associated with the resource configuration.</p>
    pub fn service_network_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_network_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the service network associated with the resource configuration.</p>
    pub fn set_service_network_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_network_name = input;
        self
    }
    /// <p>The name of the service network associated with the resource configuration.</p>
    pub fn get_service_network_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_network_name
    }
    /// <p>The DNS entry for the service.</p>
    pub fn dns_entry(mut self, input: crate::types::DnsEntry) -> Self {
        self.dns_entry = ::std::option::Option::Some(input);
        self
    }
    /// <p>The DNS entry for the service.</p>
    pub fn set_dns_entry(mut self, input: ::std::option::Option<crate::types::DnsEntry>) -> Self {
        self.dns_entry = input;
        self
    }
    /// <p>The DNS entry for the service.</p>
    pub fn get_dns_entry(&self) -> &::std::option::Option<crate::types::DnsEntry> {
        &self.dns_entry
    }
    /// <p>The private DNS entry for the service.</p>
    pub fn private_dns_entry(mut self, input: crate::types::DnsEntry) -> Self {
        self.private_dns_entry = ::std::option::Option::Some(input);
        self
    }
    /// <p>The private DNS entry for the service.</p>
    pub fn set_private_dns_entry(mut self, input: ::std::option::Option<crate::types::DnsEntry>) -> Self {
        self.private_dns_entry = input;
        self
    }
    /// <p>The private DNS entry for the service.</p>
    pub fn get_private_dns_entry(&self) -> &::std::option::Option<crate::types::DnsEntry> {
        &self.private_dns_entry
    }
    /// <p>Specifies whether the association is managed by Amazon.</p>
    pub fn is_managed_association(mut self, input: bool) -> Self {
        self.is_managed_association = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the association is managed by Amazon.</p>
    pub fn set_is_managed_association(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_managed_association = input;
        self
    }
    /// <p>Specifies whether the association is managed by Amazon.</p>
    pub fn get_is_managed_association(&self) -> &::std::option::Option<bool> {
        &self.is_managed_association
    }
    /// <p>The failure code.</p>
    pub fn failure_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The failure code.</p>
    pub fn set_failure_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_code = input;
        self
    }
    /// <p>The failure code.</p>
    pub fn get_failure_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_code
    }
    /// Consumes the builder and constructs a [`ServiceNetworkResourceAssociationSummary`](crate::types::ServiceNetworkResourceAssociationSummary).
    pub fn build(self) -> crate::types::ServiceNetworkResourceAssociationSummary {
        crate::types::ServiceNetworkResourceAssociationSummary {
            id: self.id,
            arn: self.arn,
            status: self.status,
            created_by: self.created_by,
            created_at: self.created_at,
            resource_configuration_id: self.resource_configuration_id,
            resource_configuration_arn: self.resource_configuration_arn,
            resource_configuration_name: self.resource_configuration_name,
            service_network_id: self.service_network_id,
            service_network_arn: self.service_network_arn,
            service_network_name: self.service_network_name,
            dns_entry: self.dns_entry,
            private_dns_entry: self.private_dns_entry,
            is_managed_association: self.is_managed_association,
            failure_code: self.failure_code,
        }
    }
}
