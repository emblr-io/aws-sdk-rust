// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The DNS name of the resource.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DnsResource {
    /// <p>The domain name of the resource.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of IP address.</p>
    pub ip_address_type: ::std::option::Option<crate::types::ResourceConfigurationIpAddressType>,
}
impl DnsResource {
    /// <p>The domain name of the resource.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The type of IP address.</p>
    pub fn ip_address_type(&self) -> ::std::option::Option<&crate::types::ResourceConfigurationIpAddressType> {
        self.ip_address_type.as_ref()
    }
}
impl DnsResource {
    /// Creates a new builder-style object to manufacture [`DnsResource`](crate::types::DnsResource).
    pub fn builder() -> crate::types::builders::DnsResourceBuilder {
        crate::types::builders::DnsResourceBuilder::default()
    }
}

/// A builder for [`DnsResource`](crate::types::DnsResource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DnsResourceBuilder {
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) ip_address_type: ::std::option::Option<crate::types::ResourceConfigurationIpAddressType>,
}
impl DnsResourceBuilder {
    /// <p>The domain name of the resource.</p>
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name of the resource.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The domain name of the resource.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>The type of IP address.</p>
    pub fn ip_address_type(mut self, input: crate::types::ResourceConfigurationIpAddressType) -> Self {
        self.ip_address_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of IP address.</p>
    pub fn set_ip_address_type(mut self, input: ::std::option::Option<crate::types::ResourceConfigurationIpAddressType>) -> Self {
        self.ip_address_type = input;
        self
    }
    /// <p>The type of IP address.</p>
    pub fn get_ip_address_type(&self) -> &::std::option::Option<crate::types::ResourceConfigurationIpAddressType> {
        &self.ip_address_type
    }
    /// Consumes the builder and constructs a [`DnsResource`](crate::types::DnsResource).
    pub fn build(self) -> crate::types::DnsResource {
        crate::types::DnsResource {
            domain_name: self.domain_name,
            ip_address_type: self.ip_address_type,
        }
    }
}
