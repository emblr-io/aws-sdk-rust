// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateResourceConfigurationInput {
    /// <p>The name of the resource configuration. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The type of resource configuration.</p>
    /// <ul>
    /// <li>
    /// <p><code>SINGLE</code> - A single resource.</p></li>
    /// <li>
    /// <p><code>GROUP</code> - A group of resources. You must create a group resource configuration before you create a child resource configuration.</p></li>
    /// <li>
    /// <p><code>CHILD</code> - A single resource that is part of a group resource configuration.</p></li>
    /// <li>
    /// <p><code>ARN</code> - An Amazon Web Services resource.</p></li>
    /// </ul>
    pub r#type: ::std::option::Option<crate::types::ResourceConfigurationType>,
    /// <p>(SINGLE, GROUP, CHILD) The TCP port ranges that a consumer can use to access a resource configuration (for example: 1-65535). You can separate port ranges using commas (for example: 1,2,22-30).</p>
    pub port_ranges: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>(SINGLE, GROUP) The protocol accepted by the resource configuration.</p>
    pub protocol: ::std::option::Option<crate::types::ProtocolType>,
    /// <p>(SINGLE, GROUP, ARN) The ID or ARN of the resource gateway used to connect to the resource configuration. For a child resource configuration, this value is inherited from the parent resource configuration.</p>
    pub resource_gateway_identifier: ::std::option::Option<::std::string::String>,
    /// <p>(CHILD) The ID or ARN of the parent resource configuration (type is <code>GROUP</code>). This is used to associate a child resource configuration with a group resource configuration.</p>
    pub resource_configuration_group_identifier: ::std::option::Option<::std::string::String>,
    /// <p>(SINGLE, CHILD, ARN) The resource configuration.</p>
    pub resource_configuration_definition: ::std::option::Option<crate::types::ResourceConfigurationDefinition>,
    /// <p>(SINGLE, GROUP, ARN) Specifies whether the resource configuration can be associated with a sharable service network. The default is false.</p>
    pub allow_association_to_shareable_service_network: ::std::option::Option<bool>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The tags for the resource configuration.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateResourceConfigurationInput {
    /// <p>The name of the resource configuration. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of resource configuration.</p>
    /// <ul>
    /// <li>
    /// <p><code>SINGLE</code> - A single resource.</p></li>
    /// <li>
    /// <p><code>GROUP</code> - A group of resources. You must create a group resource configuration before you create a child resource configuration.</p></li>
    /// <li>
    /// <p><code>CHILD</code> - A single resource that is part of a group resource configuration.</p></li>
    /// <li>
    /// <p><code>ARN</code> - An Amazon Web Services resource.</p></li>
    /// </ul>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::ResourceConfigurationType> {
        self.r#type.as_ref()
    }
    /// <p>(SINGLE, GROUP, CHILD) The TCP port ranges that a consumer can use to access a resource configuration (for example: 1-65535). You can separate port ranges using commas (for example: 1,2,22-30).</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.port_ranges.is_none()`.
    pub fn port_ranges(&self) -> &[::std::string::String] {
        self.port_ranges.as_deref().unwrap_or_default()
    }
    /// <p>(SINGLE, GROUP) The protocol accepted by the resource configuration.</p>
    pub fn protocol(&self) -> ::std::option::Option<&crate::types::ProtocolType> {
        self.protocol.as_ref()
    }
    /// <p>(SINGLE, GROUP, ARN) The ID or ARN of the resource gateway used to connect to the resource configuration. For a child resource configuration, this value is inherited from the parent resource configuration.</p>
    pub fn resource_gateway_identifier(&self) -> ::std::option::Option<&str> {
        self.resource_gateway_identifier.as_deref()
    }
    /// <p>(CHILD) The ID or ARN of the parent resource configuration (type is <code>GROUP</code>). This is used to associate a child resource configuration with a group resource configuration.</p>
    pub fn resource_configuration_group_identifier(&self) -> ::std::option::Option<&str> {
        self.resource_configuration_group_identifier.as_deref()
    }
    /// <p>(SINGLE, CHILD, ARN) The resource configuration.</p>
    pub fn resource_configuration_definition(&self) -> ::std::option::Option<&crate::types::ResourceConfigurationDefinition> {
        self.resource_configuration_definition.as_ref()
    }
    /// <p>(SINGLE, GROUP, ARN) Specifies whether the resource configuration can be associated with a sharable service network. The default is false.</p>
    pub fn allow_association_to_shareable_service_network(&self) -> ::std::option::Option<bool> {
        self.allow_association_to_shareable_service_network
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The tags for the resource configuration.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateResourceConfigurationInput {
    /// Creates a new builder-style object to manufacture [`CreateResourceConfigurationInput`](crate::operation::create_resource_configuration::CreateResourceConfigurationInput).
    pub fn builder() -> crate::operation::create_resource_configuration::builders::CreateResourceConfigurationInputBuilder {
        crate::operation::create_resource_configuration::builders::CreateResourceConfigurationInputBuilder::default()
    }
}

/// A builder for [`CreateResourceConfigurationInput`](crate::operation::create_resource_configuration::CreateResourceConfigurationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateResourceConfigurationInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::ResourceConfigurationType>,
    pub(crate) port_ranges: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) protocol: ::std::option::Option<crate::types::ProtocolType>,
    pub(crate) resource_gateway_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) resource_configuration_group_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) resource_configuration_definition: ::std::option::Option<crate::types::ResourceConfigurationDefinition>,
    pub(crate) allow_association_to_shareable_service_network: ::std::option::Option<bool>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateResourceConfigurationInputBuilder {
    /// <p>The name of the resource configuration. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the resource configuration. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the resource configuration. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of resource configuration.</p>
    /// <ul>
    /// <li>
    /// <p><code>SINGLE</code> - A single resource.</p></li>
    /// <li>
    /// <p><code>GROUP</code> - A group of resources. You must create a group resource configuration before you create a child resource configuration.</p></li>
    /// <li>
    /// <p><code>CHILD</code> - A single resource that is part of a group resource configuration.</p></li>
    /// <li>
    /// <p><code>ARN</code> - An Amazon Web Services resource.</p></li>
    /// </ul>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::ResourceConfigurationType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of resource configuration.</p>
    /// <ul>
    /// <li>
    /// <p><code>SINGLE</code> - A single resource.</p></li>
    /// <li>
    /// <p><code>GROUP</code> - A group of resources. You must create a group resource configuration before you create a child resource configuration.</p></li>
    /// <li>
    /// <p><code>CHILD</code> - A single resource that is part of a group resource configuration.</p></li>
    /// <li>
    /// <p><code>ARN</code> - An Amazon Web Services resource.</p></li>
    /// </ul>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ResourceConfigurationType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of resource configuration.</p>
    /// <ul>
    /// <li>
    /// <p><code>SINGLE</code> - A single resource.</p></li>
    /// <li>
    /// <p><code>GROUP</code> - A group of resources. You must create a group resource configuration before you create a child resource configuration.</p></li>
    /// <li>
    /// <p><code>CHILD</code> - A single resource that is part of a group resource configuration.</p></li>
    /// <li>
    /// <p><code>ARN</code> - An Amazon Web Services resource.</p></li>
    /// </ul>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ResourceConfigurationType> {
        &self.r#type
    }
    /// Appends an item to `port_ranges`.
    ///
    /// To override the contents of this collection use [`set_port_ranges`](Self::set_port_ranges).
    ///
    /// <p>(SINGLE, GROUP, CHILD) The TCP port ranges that a consumer can use to access a resource configuration (for example: 1-65535). You can separate port ranges using commas (for example: 1,2,22-30).</p>
    pub fn port_ranges(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.port_ranges.unwrap_or_default();
        v.push(input.into());
        self.port_ranges = ::std::option::Option::Some(v);
        self
    }
    /// <p>(SINGLE, GROUP, CHILD) The TCP port ranges that a consumer can use to access a resource configuration (for example: 1-65535). You can separate port ranges using commas (for example: 1,2,22-30).</p>
    pub fn set_port_ranges(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.port_ranges = input;
        self
    }
    /// <p>(SINGLE, GROUP, CHILD) The TCP port ranges that a consumer can use to access a resource configuration (for example: 1-65535). You can separate port ranges using commas (for example: 1,2,22-30).</p>
    pub fn get_port_ranges(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.port_ranges
    }
    /// <p>(SINGLE, GROUP) The protocol accepted by the resource configuration.</p>
    pub fn protocol(mut self, input: crate::types::ProtocolType) -> Self {
        self.protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>(SINGLE, GROUP) The protocol accepted by the resource configuration.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<crate::types::ProtocolType>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>(SINGLE, GROUP) The protocol accepted by the resource configuration.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<crate::types::ProtocolType> {
        &self.protocol
    }
    /// <p>(SINGLE, GROUP, ARN) The ID or ARN of the resource gateway used to connect to the resource configuration. For a child resource configuration, this value is inherited from the parent resource configuration.</p>
    pub fn resource_gateway_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_gateway_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>(SINGLE, GROUP, ARN) The ID or ARN of the resource gateway used to connect to the resource configuration. For a child resource configuration, this value is inherited from the parent resource configuration.</p>
    pub fn set_resource_gateway_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_gateway_identifier = input;
        self
    }
    /// <p>(SINGLE, GROUP, ARN) The ID or ARN of the resource gateway used to connect to the resource configuration. For a child resource configuration, this value is inherited from the parent resource configuration.</p>
    pub fn get_resource_gateway_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_gateway_identifier
    }
    /// <p>(CHILD) The ID or ARN of the parent resource configuration (type is <code>GROUP</code>). This is used to associate a child resource configuration with a group resource configuration.</p>
    pub fn resource_configuration_group_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_configuration_group_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>(CHILD) The ID or ARN of the parent resource configuration (type is <code>GROUP</code>). This is used to associate a child resource configuration with a group resource configuration.</p>
    pub fn set_resource_configuration_group_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_configuration_group_identifier = input;
        self
    }
    /// <p>(CHILD) The ID or ARN of the parent resource configuration (type is <code>GROUP</code>). This is used to associate a child resource configuration with a group resource configuration.</p>
    pub fn get_resource_configuration_group_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_configuration_group_identifier
    }
    /// <p>(SINGLE, CHILD, ARN) The resource configuration.</p>
    pub fn resource_configuration_definition(mut self, input: crate::types::ResourceConfigurationDefinition) -> Self {
        self.resource_configuration_definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>(SINGLE, CHILD, ARN) The resource configuration.</p>
    pub fn set_resource_configuration_definition(mut self, input: ::std::option::Option<crate::types::ResourceConfigurationDefinition>) -> Self {
        self.resource_configuration_definition = input;
        self
    }
    /// <p>(SINGLE, CHILD, ARN) The resource configuration.</p>
    pub fn get_resource_configuration_definition(&self) -> &::std::option::Option<crate::types::ResourceConfigurationDefinition> {
        &self.resource_configuration_definition
    }
    /// <p>(SINGLE, GROUP, ARN) Specifies whether the resource configuration can be associated with a sharable service network. The default is false.</p>
    pub fn allow_association_to_shareable_service_network(mut self, input: bool) -> Self {
        self.allow_association_to_shareable_service_network = ::std::option::Option::Some(input);
        self
    }
    /// <p>(SINGLE, GROUP, ARN) Specifies whether the resource configuration can be associated with a sharable service network. The default is false.</p>
    pub fn set_allow_association_to_shareable_service_network(mut self, input: ::std::option::Option<bool>) -> Self {
        self.allow_association_to_shareable_service_network = input;
        self
    }
    /// <p>(SINGLE, GROUP, ARN) Specifies whether the resource configuration can be associated with a sharable service network. The default is false.</p>
    pub fn get_allow_association_to_shareable_service_network(&self) -> &::std::option::Option<bool> {
        &self.allow_association_to_shareable_service_network
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags for the resource configuration.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags for the resource configuration.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags for the resource configuration.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateResourceConfigurationInput`](crate::operation::create_resource_configuration::CreateResourceConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_resource_configuration::CreateResourceConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_resource_configuration::CreateResourceConfigurationInput {
            name: self.name,
            r#type: self.r#type,
            port_ranges: self.port_ranges,
            protocol: self.protocol,
            resource_gateway_identifier: self.resource_gateway_identifier,
            resource_configuration_group_identifier: self.resource_configuration_group_identifier,
            resource_configuration_definition: self.resource_configuration_definition,
            allow_association_to_shareable_service_network: self.allow_association_to_shareable_service_network,
            client_token: self.client_token,
            tags: self.tags,
        })
    }
}
