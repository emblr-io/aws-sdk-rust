// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateResourceConfigurationOutput {
    /// <p>The ID of the resource configuration.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the resource configuration.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the resource configuration.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the resource gateway associated with the resource configuration.</p>
    pub resource_gateway_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the parent resource configuration (type is GROUP).</p>
    pub resource_configuration_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of resource configuration.</p>
    pub r#type: ::std::option::Option<crate::types::ResourceConfigurationType>,
    /// <p>The port range.</p>
    pub port_ranges: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The protocol.</p>
    pub protocol: ::std::option::Option<crate::types::ProtocolType>,
    /// <p>The current status of the resource configuration.</p>
    pub status: ::std::option::Option<crate::types::ResourceConfigurationStatus>,
    /// <p>The resource configuration.</p>
    pub resource_configuration_definition: ::std::option::Option<crate::types::ResourceConfigurationDefinition>,
    /// <p>Specifies whether the resource configuration can be associated with a sharable service network.</p>
    pub allow_association_to_shareable_service_network: ::std::option::Option<bool>,
    /// <p>The date and time that the resource configuration was created, in ISO-8601 format.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The reason that the request failed.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateResourceConfigurationOutput {
    /// <p>The ID of the resource configuration.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the resource configuration.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the resource configuration.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The ID of the resource gateway associated with the resource configuration.</p>
    pub fn resource_gateway_id(&self) -> ::std::option::Option<&str> {
        self.resource_gateway_id.as_deref()
    }
    /// <p>The ID of the parent resource configuration (type is GROUP).</p>
    pub fn resource_configuration_group_id(&self) -> ::std::option::Option<&str> {
        self.resource_configuration_group_id.as_deref()
    }
    /// <p>The type of resource configuration.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::ResourceConfigurationType> {
        self.r#type.as_ref()
    }
    /// <p>The port range.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.port_ranges.is_none()`.
    pub fn port_ranges(&self) -> &[::std::string::String] {
        self.port_ranges.as_deref().unwrap_or_default()
    }
    /// <p>The protocol.</p>
    pub fn protocol(&self) -> ::std::option::Option<&crate::types::ProtocolType> {
        self.protocol.as_ref()
    }
    /// <p>The current status of the resource configuration.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ResourceConfigurationStatus> {
        self.status.as_ref()
    }
    /// <p>The resource configuration.</p>
    pub fn resource_configuration_definition(&self) -> ::std::option::Option<&crate::types::ResourceConfigurationDefinition> {
        self.resource_configuration_definition.as_ref()
    }
    /// <p>Specifies whether the resource configuration can be associated with a sharable service network.</p>
    pub fn allow_association_to_shareable_service_network(&self) -> ::std::option::Option<bool> {
        self.allow_association_to_shareable_service_network
    }
    /// <p>The date and time that the resource configuration was created, in ISO-8601 format.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The reason that the request failed.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for CreateResourceConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateResourceConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`CreateResourceConfigurationOutput`](crate::operation::create_resource_configuration::CreateResourceConfigurationOutput).
    pub fn builder() -> crate::operation::create_resource_configuration::builders::CreateResourceConfigurationOutputBuilder {
        crate::operation::create_resource_configuration::builders::CreateResourceConfigurationOutputBuilder::default()
    }
}

/// A builder for [`CreateResourceConfigurationOutput`](crate::operation::create_resource_configuration::CreateResourceConfigurationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateResourceConfigurationOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) resource_gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_configuration_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::ResourceConfigurationType>,
    pub(crate) port_ranges: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) protocol: ::std::option::Option<crate::types::ProtocolType>,
    pub(crate) status: ::std::option::Option<crate::types::ResourceConfigurationStatus>,
    pub(crate) resource_configuration_definition: ::std::option::Option<crate::types::ResourceConfigurationDefinition>,
    pub(crate) allow_association_to_shareable_service_network: ::std::option::Option<bool>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateResourceConfigurationOutputBuilder {
    /// <p>The ID of the resource configuration.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the resource configuration.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the resource configuration.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the resource configuration.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the resource configuration.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the resource configuration.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the resource configuration.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource configuration.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource configuration.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The ID of the resource gateway associated with the resource configuration.</p>
    pub fn resource_gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the resource gateway associated with the resource configuration.</p>
    pub fn set_resource_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_gateway_id = input;
        self
    }
    /// <p>The ID of the resource gateway associated with the resource configuration.</p>
    pub fn get_resource_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_gateway_id
    }
    /// <p>The ID of the parent resource configuration (type is GROUP).</p>
    pub fn resource_configuration_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_configuration_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the parent resource configuration (type is GROUP).</p>
    pub fn set_resource_configuration_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_configuration_group_id = input;
        self
    }
    /// <p>The ID of the parent resource configuration (type is GROUP).</p>
    pub fn get_resource_configuration_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_configuration_group_id
    }
    /// <p>The type of resource configuration.</p>
    pub fn r#type(mut self, input: crate::types::ResourceConfigurationType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of resource configuration.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ResourceConfigurationType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of resource configuration.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ResourceConfigurationType> {
        &self.r#type
    }
    /// Appends an item to `port_ranges`.
    ///
    /// To override the contents of this collection use [`set_port_ranges`](Self::set_port_ranges).
    ///
    /// <p>The port range.</p>
    pub fn port_ranges(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.port_ranges.unwrap_or_default();
        v.push(input.into());
        self.port_ranges = ::std::option::Option::Some(v);
        self
    }
    /// <p>The port range.</p>
    pub fn set_port_ranges(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.port_ranges = input;
        self
    }
    /// <p>The port range.</p>
    pub fn get_port_ranges(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.port_ranges
    }
    /// <p>The protocol.</p>
    pub fn protocol(mut self, input: crate::types::ProtocolType) -> Self {
        self.protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>The protocol.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<crate::types::ProtocolType>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The protocol.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<crate::types::ProtocolType> {
        &self.protocol
    }
    /// <p>The current status of the resource configuration.</p>
    pub fn status(mut self, input: crate::types::ResourceConfigurationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the resource configuration.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ResourceConfigurationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the resource configuration.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ResourceConfigurationStatus> {
        &self.status
    }
    /// <p>The resource configuration.</p>
    pub fn resource_configuration_definition(mut self, input: crate::types::ResourceConfigurationDefinition) -> Self {
        self.resource_configuration_definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The resource configuration.</p>
    pub fn set_resource_configuration_definition(mut self, input: ::std::option::Option<crate::types::ResourceConfigurationDefinition>) -> Self {
        self.resource_configuration_definition = input;
        self
    }
    /// <p>The resource configuration.</p>
    pub fn get_resource_configuration_definition(&self) -> &::std::option::Option<crate::types::ResourceConfigurationDefinition> {
        &self.resource_configuration_definition
    }
    /// <p>Specifies whether the resource configuration can be associated with a sharable service network.</p>
    pub fn allow_association_to_shareable_service_network(mut self, input: bool) -> Self {
        self.allow_association_to_shareable_service_network = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the resource configuration can be associated with a sharable service network.</p>
    pub fn set_allow_association_to_shareable_service_network(mut self, input: ::std::option::Option<bool>) -> Self {
        self.allow_association_to_shareable_service_network = input;
        self
    }
    /// <p>Specifies whether the resource configuration can be associated with a sharable service network.</p>
    pub fn get_allow_association_to_shareable_service_network(&self) -> &::std::option::Option<bool> {
        &self.allow_association_to_shareable_service_network
    }
    /// <p>The date and time that the resource configuration was created, in ISO-8601 format.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the resource configuration was created, in ISO-8601 format.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time that the resource configuration was created, in ISO-8601 format.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The reason that the request failed.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason that the request failed.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The reason that the request failed.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateResourceConfigurationOutput`](crate::operation::create_resource_configuration::CreateResourceConfigurationOutput).
    pub fn build(self) -> crate::operation::create_resource_configuration::CreateResourceConfigurationOutput {
        crate::operation::create_resource_configuration::CreateResourceConfigurationOutput {
            id: self.id,
            name: self.name,
            arn: self.arn,
            resource_gateway_id: self.resource_gateway_id,
            resource_configuration_group_id: self.resource_configuration_group_id,
            r#type: self.r#type,
            port_ranges: self.port_ranges,
            protocol: self.protocol,
            status: self.status,
            resource_configuration_definition: self.resource_configuration_definition,
            allow_association_to_shareable_service_network: self.allow_association_to_shareable_service_network,
            created_at: self.created_at,
            failure_reason: self.failure_reason,
            _request_id: self._request_id,
        }
    }
}
