// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListResourceEndpointAssociationsInput {
    /// <p>The ID for the resource configuration associated with the VPC endpoint.</p>
    pub resource_configuration_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the association.</p>
    pub resource_endpoint_association_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the VPC endpoint in the association.</p>
    pub vpc_endpoint_id: ::std::option::Option<::std::string::String>,
    /// <p>The owner of the VPC endpoint in the association.</p>
    pub vpc_endpoint_owner: ::std::option::Option<::std::string::String>,
    /// <p>The maximum page size.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>A pagination token for the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListResourceEndpointAssociationsInput {
    /// <p>The ID for the resource configuration associated with the VPC endpoint.</p>
    pub fn resource_configuration_identifier(&self) -> ::std::option::Option<&str> {
        self.resource_configuration_identifier.as_deref()
    }
    /// <p>The ID of the association.</p>
    pub fn resource_endpoint_association_identifier(&self) -> ::std::option::Option<&str> {
        self.resource_endpoint_association_identifier.as_deref()
    }
    /// <p>The ID of the VPC endpoint in the association.</p>
    pub fn vpc_endpoint_id(&self) -> ::std::option::Option<&str> {
        self.vpc_endpoint_id.as_deref()
    }
    /// <p>The owner of the VPC endpoint in the association.</p>
    pub fn vpc_endpoint_owner(&self) -> ::std::option::Option<&str> {
        self.vpc_endpoint_owner.as_deref()
    }
    /// <p>The maximum page size.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>A pagination token for the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListResourceEndpointAssociationsInput {
    /// Creates a new builder-style object to manufacture [`ListResourceEndpointAssociationsInput`](crate::operation::list_resource_endpoint_associations::ListResourceEndpointAssociationsInput).
    pub fn builder() -> crate::operation::list_resource_endpoint_associations::builders::ListResourceEndpointAssociationsInputBuilder {
        crate::operation::list_resource_endpoint_associations::builders::ListResourceEndpointAssociationsInputBuilder::default()
    }
}

/// A builder for [`ListResourceEndpointAssociationsInput`](crate::operation::list_resource_endpoint_associations::ListResourceEndpointAssociationsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListResourceEndpointAssociationsInputBuilder {
    pub(crate) resource_configuration_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) resource_endpoint_association_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_endpoint_id: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_endpoint_owner: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListResourceEndpointAssociationsInputBuilder {
    /// <p>The ID for the resource configuration associated with the VPC endpoint.</p>
    /// This field is required.
    pub fn resource_configuration_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_configuration_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID for the resource configuration associated with the VPC endpoint.</p>
    pub fn set_resource_configuration_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_configuration_identifier = input;
        self
    }
    /// <p>The ID for the resource configuration associated with the VPC endpoint.</p>
    pub fn get_resource_configuration_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_configuration_identifier
    }
    /// <p>The ID of the association.</p>
    pub fn resource_endpoint_association_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_endpoint_association_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the association.</p>
    pub fn set_resource_endpoint_association_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_endpoint_association_identifier = input;
        self
    }
    /// <p>The ID of the association.</p>
    pub fn get_resource_endpoint_association_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_endpoint_association_identifier
    }
    /// <p>The ID of the VPC endpoint in the association.</p>
    pub fn vpc_endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC endpoint in the association.</p>
    pub fn set_vpc_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_endpoint_id = input;
        self
    }
    /// <p>The ID of the VPC endpoint in the association.</p>
    pub fn get_vpc_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_endpoint_id
    }
    /// <p>The owner of the VPC endpoint in the association.</p>
    pub fn vpc_endpoint_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_endpoint_owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The owner of the VPC endpoint in the association.</p>
    pub fn set_vpc_endpoint_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_endpoint_owner = input;
        self
    }
    /// <p>The owner of the VPC endpoint in the association.</p>
    pub fn get_vpc_endpoint_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_endpoint_owner
    }
    /// <p>The maximum page size.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum page size.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum page size.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>A pagination token for the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A pagination token for the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A pagination token for the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListResourceEndpointAssociationsInput`](crate::operation::list_resource_endpoint_associations::ListResourceEndpointAssociationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_resource_endpoint_associations::ListResourceEndpointAssociationsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::list_resource_endpoint_associations::ListResourceEndpointAssociationsInput {
                resource_configuration_identifier: self.resource_configuration_identifier,
                resource_endpoint_association_identifier: self.resource_endpoint_association_identifier,
                vpc_endpoint_id: self.vpc_endpoint_id,
                vpc_endpoint_owner: self.vpc_endpoint_owner,
                max_results: self.max_results,
                next_token: self.next_token,
            },
        )
    }
}
