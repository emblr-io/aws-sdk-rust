// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The cellular network communication infrastructure that the device uses.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CellSignals {
    /// <p>Information about the Long-Term Evolution (LTE) network the device is connected to.</p>
    pub lte_cell_details: ::std::vec::Vec<crate::types::LteCellDetails>,
}
impl CellSignals {
    /// <p>Information about the Long-Term Evolution (LTE) network the device is connected to.</p>
    pub fn lte_cell_details(&self) -> &[crate::types::LteCellDetails] {
        use std::ops::Deref;
        self.lte_cell_details.deref()
    }
}
impl CellSignals {
    /// Creates a new builder-style object to manufacture [`CellSignals`](crate::types::CellSignals).
    pub fn builder() -> crate::types::builders::CellSignalsBuilder {
        crate::types::builders::CellSignalsBuilder::default()
    }
}

/// A builder for [`CellSignals`](crate::types::CellSignals).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CellSignalsBuilder {
    pub(crate) lte_cell_details: ::std::option::Option<::std::vec::Vec<crate::types::LteCellDetails>>,
}
impl CellSignalsBuilder {
    /// Appends an item to `lte_cell_details`.
    ///
    /// To override the contents of this collection use [`set_lte_cell_details`](Self::set_lte_cell_details).
    ///
    /// <p>Information about the Long-Term Evolution (LTE) network the device is connected to.</p>
    pub fn lte_cell_details(mut self, input: crate::types::LteCellDetails) -> Self {
        let mut v = self.lte_cell_details.unwrap_or_default();
        v.push(input);
        self.lte_cell_details = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the Long-Term Evolution (LTE) network the device is connected to.</p>
    pub fn set_lte_cell_details(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LteCellDetails>>) -> Self {
        self.lte_cell_details = input;
        self
    }
    /// <p>Information about the Long-Term Evolution (LTE) network the device is connected to.</p>
    pub fn get_lte_cell_details(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LteCellDetails>> {
        &self.lte_cell_details
    }
    /// Consumes the builder and constructs a [`CellSignals`](crate::types::CellSignals).
    /// This method will fail if any of the following fields are not set:
    /// - [`lte_cell_details`](crate::types::builders::CellSignalsBuilder::lte_cell_details)
    pub fn build(self) -> ::std::result::Result<crate::types::CellSignals, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CellSignals {
            lte_cell_details: self.lte_cell_details.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "lte_cell_details",
                    "lte_cell_details was not specified but it is required when building CellSignals",
                )
            })?,
        })
    }
}
