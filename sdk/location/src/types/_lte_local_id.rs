// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>LTE local identification information (local ID).</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LteLocalId {
    /// <p>E-UTRA (Evolved Universal Terrestrial Radio Access) absolute radio frequency channel number (EARFCN).</p>
    pub earfcn: i32,
    /// <p>Physical Cell ID (PCI).</p>
    pub pci: i32,
}
impl LteLocalId {
    /// <p>E-UTRA (Evolved Universal Terrestrial Radio Access) absolute radio frequency channel number (EARFCN).</p>
    pub fn earfcn(&self) -> i32 {
        self.earfcn
    }
    /// <p>Physical Cell ID (PCI).</p>
    pub fn pci(&self) -> i32 {
        self.pci
    }
}
impl LteLocalId {
    /// Creates a new builder-style object to manufacture [`LteLocalId`](crate::types::LteLocalId).
    pub fn builder() -> crate::types::builders::LteLocalIdBuilder {
        crate::types::builders::LteLocalIdBuilder::default()
    }
}

/// A builder for [`LteLocalId`](crate::types::LteLocalId).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LteLocalIdBuilder {
    pub(crate) earfcn: ::std::option::Option<i32>,
    pub(crate) pci: ::std::option::Option<i32>,
}
impl LteLocalIdBuilder {
    /// <p>E-UTRA (Evolved Universal Terrestrial Radio Access) absolute radio frequency channel number (EARFCN).</p>
    /// This field is required.
    pub fn earfcn(mut self, input: i32) -> Self {
        self.earfcn = ::std::option::Option::Some(input);
        self
    }
    /// <p>E-UTRA (Evolved Universal Terrestrial Radio Access) absolute radio frequency channel number (EARFCN).</p>
    pub fn set_earfcn(mut self, input: ::std::option::Option<i32>) -> Self {
        self.earfcn = input;
        self
    }
    /// <p>E-UTRA (Evolved Universal Terrestrial Radio Access) absolute radio frequency channel number (EARFCN).</p>
    pub fn get_earfcn(&self) -> &::std::option::Option<i32> {
        &self.earfcn
    }
    /// <p>Physical Cell ID (PCI).</p>
    /// This field is required.
    pub fn pci(mut self, input: i32) -> Self {
        self.pci = ::std::option::Option::Some(input);
        self
    }
    /// <p>Physical Cell ID (PCI).</p>
    pub fn set_pci(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pci = input;
        self
    }
    /// <p>Physical Cell ID (PCI).</p>
    pub fn get_pci(&self) -> &::std::option::Option<i32> {
        &self.pci
    }
    /// Consumes the builder and constructs a [`LteLocalId`](crate::types::LteLocalId).
    pub fn build(self) -> crate::types::LteLocalId {
        crate::types::LteLocalId {
            earfcn: self.earfcn.unwrap_or_default(),
            pci: self.pci.unwrap_or_default(),
        }
    }
}
