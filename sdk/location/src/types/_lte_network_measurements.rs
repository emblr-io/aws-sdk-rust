// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>LTE network measurements.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LteNetworkMeasurements {
    /// <p>E-UTRA (Evolved Universal Terrestrial Radio Access) absolute radio frequency channel number (EARFCN).</p>
    pub earfcn: i32,
    /// <p>E-UTRAN Cell Identifier (ECI).</p>
    pub cell_id: i32,
    /// <p>Physical Cell ID (PCI).</p>
    pub pci: i32,
    /// <p>Signal power of the reference signal received, measured in dBm (decibel-milliwatts).</p>
    pub rsrp: ::std::option::Option<i32>,
    /// <p>Signal quality of the reference Signal received, measured in decibels (dB).</p>
    pub rsrq: ::std::option::Option<f32>,
}
impl LteNetworkMeasurements {
    /// <p>E-UTRA (Evolved Universal Terrestrial Radio Access) absolute radio frequency channel number (EARFCN).</p>
    pub fn earfcn(&self) -> i32 {
        self.earfcn
    }
    /// <p>E-UTRAN Cell Identifier (ECI).</p>
    pub fn cell_id(&self) -> i32 {
        self.cell_id
    }
    /// <p>Physical Cell ID (PCI).</p>
    pub fn pci(&self) -> i32 {
        self.pci
    }
    /// <p>Signal power of the reference signal received, measured in dBm (decibel-milliwatts).</p>
    pub fn rsrp(&self) -> ::std::option::Option<i32> {
        self.rsrp
    }
    /// <p>Signal quality of the reference Signal received, measured in decibels (dB).</p>
    pub fn rsrq(&self) -> ::std::option::Option<f32> {
        self.rsrq
    }
}
impl LteNetworkMeasurements {
    /// Creates a new builder-style object to manufacture [`LteNetworkMeasurements`](crate::types::LteNetworkMeasurements).
    pub fn builder() -> crate::types::builders::LteNetworkMeasurementsBuilder {
        crate::types::builders::LteNetworkMeasurementsBuilder::default()
    }
}

/// A builder for [`LteNetworkMeasurements`](crate::types::LteNetworkMeasurements).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LteNetworkMeasurementsBuilder {
    pub(crate) earfcn: ::std::option::Option<i32>,
    pub(crate) cell_id: ::std::option::Option<i32>,
    pub(crate) pci: ::std::option::Option<i32>,
    pub(crate) rsrp: ::std::option::Option<i32>,
    pub(crate) rsrq: ::std::option::Option<f32>,
}
impl LteNetworkMeasurementsBuilder {
    /// <p>E-UTRA (Evolved Universal Terrestrial Radio Access) absolute radio frequency channel number (EARFCN).</p>
    /// This field is required.
    pub fn earfcn(mut self, input: i32) -> Self {
        self.earfcn = ::std::option::Option::Some(input);
        self
    }
    /// <p>E-UTRA (Evolved Universal Terrestrial Radio Access) absolute radio frequency channel number (EARFCN).</p>
    pub fn set_earfcn(mut self, input: ::std::option::Option<i32>) -> Self {
        self.earfcn = input;
        self
    }
    /// <p>E-UTRA (Evolved Universal Terrestrial Radio Access) absolute radio frequency channel number (EARFCN).</p>
    pub fn get_earfcn(&self) -> &::std::option::Option<i32> {
        &self.earfcn
    }
    /// <p>E-UTRAN Cell Identifier (ECI).</p>
    /// This field is required.
    pub fn cell_id(mut self, input: i32) -> Self {
        self.cell_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>E-UTRAN Cell Identifier (ECI).</p>
    pub fn set_cell_id(mut self, input: ::std::option::Option<i32>) -> Self {
        self.cell_id = input;
        self
    }
    /// <p>E-UTRAN Cell Identifier (ECI).</p>
    pub fn get_cell_id(&self) -> &::std::option::Option<i32> {
        &self.cell_id
    }
    /// <p>Physical Cell ID (PCI).</p>
    /// This field is required.
    pub fn pci(mut self, input: i32) -> Self {
        self.pci = ::std::option::Option::Some(input);
        self
    }
    /// <p>Physical Cell ID (PCI).</p>
    pub fn set_pci(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pci = input;
        self
    }
    /// <p>Physical Cell ID (PCI).</p>
    pub fn get_pci(&self) -> &::std::option::Option<i32> {
        &self.pci
    }
    /// <p>Signal power of the reference signal received, measured in dBm (decibel-milliwatts).</p>
    pub fn rsrp(mut self, input: i32) -> Self {
        self.rsrp = ::std::option::Option::Some(input);
        self
    }
    /// <p>Signal power of the reference signal received, measured in dBm (decibel-milliwatts).</p>
    pub fn set_rsrp(mut self, input: ::std::option::Option<i32>) -> Self {
        self.rsrp = input;
        self
    }
    /// <p>Signal power of the reference signal received, measured in dBm (decibel-milliwatts).</p>
    pub fn get_rsrp(&self) -> &::std::option::Option<i32> {
        &self.rsrp
    }
    /// <p>Signal quality of the reference Signal received, measured in decibels (dB).</p>
    pub fn rsrq(mut self, input: f32) -> Self {
        self.rsrq = ::std::option::Option::Some(input);
        self
    }
    /// <p>Signal quality of the reference Signal received, measured in decibels (dB).</p>
    pub fn set_rsrq(mut self, input: ::std::option::Option<f32>) -> Self {
        self.rsrq = input;
        self
    }
    /// <p>Signal quality of the reference Signal received, measured in decibels (dB).</p>
    pub fn get_rsrq(&self) -> &::std::option::Option<f32> {
        &self.rsrq
    }
    /// Consumes the builder and constructs a [`LteNetworkMeasurements`](crate::types::LteNetworkMeasurements).
    pub fn build(self) -> crate::types::LteNetworkMeasurements {
        crate::types::LteNetworkMeasurements {
            earfcn: self.earfcn.unwrap_or_default(),
            cell_id: self.cell_id.unwrap_or_default(),
            pci: self.pci.unwrap_or_default(),
            rsrp: self.rsrp,
            rsrq: self.rsrq,
        }
    }
}
