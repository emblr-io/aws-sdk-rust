// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VerifyDevicePositionInput {
    /// <p>The name of the tracker resource to be associated with verification request.</p>
    pub tracker_name: ::std::option::Option<::std::string::String>,
    /// <p>The device's state, including position, IP address, cell signals and Wi-Fi access points.</p>
    pub device_state: ::std::option::Option<crate::types::DeviceState>,
    /// <p>The distance unit for the verification request.</p>
    /// <p>Default Value: <code>Kilometers</code></p>
    pub distance_unit: ::std::option::Option<crate::types::DistanceUnit>,
}
impl VerifyDevicePositionInput {
    /// <p>The name of the tracker resource to be associated with verification request.</p>
    pub fn tracker_name(&self) -> ::std::option::Option<&str> {
        self.tracker_name.as_deref()
    }
    /// <p>The device's state, including position, IP address, cell signals and Wi-Fi access points.</p>
    pub fn device_state(&self) -> ::std::option::Option<&crate::types::DeviceState> {
        self.device_state.as_ref()
    }
    /// <p>The distance unit for the verification request.</p>
    /// <p>Default Value: <code>Kilometers</code></p>
    pub fn distance_unit(&self) -> ::std::option::Option<&crate::types::DistanceUnit> {
        self.distance_unit.as_ref()
    }
}
impl VerifyDevicePositionInput {
    /// Creates a new builder-style object to manufacture [`VerifyDevicePositionInput`](crate::operation::verify_device_position::VerifyDevicePositionInput).
    pub fn builder() -> crate::operation::verify_device_position::builders::VerifyDevicePositionInputBuilder {
        crate::operation::verify_device_position::builders::VerifyDevicePositionInputBuilder::default()
    }
}

/// A builder for [`VerifyDevicePositionInput`](crate::operation::verify_device_position::VerifyDevicePositionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VerifyDevicePositionInputBuilder {
    pub(crate) tracker_name: ::std::option::Option<::std::string::String>,
    pub(crate) device_state: ::std::option::Option<crate::types::DeviceState>,
    pub(crate) distance_unit: ::std::option::Option<crate::types::DistanceUnit>,
}
impl VerifyDevicePositionInputBuilder {
    /// <p>The name of the tracker resource to be associated with verification request.</p>
    /// This field is required.
    pub fn tracker_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tracker_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the tracker resource to be associated with verification request.</p>
    pub fn set_tracker_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tracker_name = input;
        self
    }
    /// <p>The name of the tracker resource to be associated with verification request.</p>
    pub fn get_tracker_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.tracker_name
    }
    /// <p>The device's state, including position, IP address, cell signals and Wi-Fi access points.</p>
    /// This field is required.
    pub fn device_state(mut self, input: crate::types::DeviceState) -> Self {
        self.device_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The device's state, including position, IP address, cell signals and Wi-Fi access points.</p>
    pub fn set_device_state(mut self, input: ::std::option::Option<crate::types::DeviceState>) -> Self {
        self.device_state = input;
        self
    }
    /// <p>The device's state, including position, IP address, cell signals and Wi-Fi access points.</p>
    pub fn get_device_state(&self) -> &::std::option::Option<crate::types::DeviceState> {
        &self.device_state
    }
    /// <p>The distance unit for the verification request.</p>
    /// <p>Default Value: <code>Kilometers</code></p>
    pub fn distance_unit(mut self, input: crate::types::DistanceUnit) -> Self {
        self.distance_unit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The distance unit for the verification request.</p>
    /// <p>Default Value: <code>Kilometers</code></p>
    pub fn set_distance_unit(mut self, input: ::std::option::Option<crate::types::DistanceUnit>) -> Self {
        self.distance_unit = input;
        self
    }
    /// <p>The distance unit for the verification request.</p>
    /// <p>Default Value: <code>Kilometers</code></p>
    pub fn get_distance_unit(&self) -> &::std::option::Option<crate::types::DistanceUnit> {
        &self.distance_unit
    }
    /// Consumes the builder and constructs a [`VerifyDevicePositionInput`](crate::operation::verify_device_position::VerifyDevicePositionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::verify_device_position::VerifyDevicePositionInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::verify_device_position::VerifyDevicePositionInput {
            tracker_name: self.tracker_name,
            device_state: self.device_state,
            distance_unit: self.distance_unit,
        })
    }
}
