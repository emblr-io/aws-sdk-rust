// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VerifyDevicePositionOutput {
    /// <p>The inferred state of the device, given the provided position, IP address, cellular signals, and Wi-Fi- access points.</p>
    pub inferred_state: ::std::option::Option<crate::types::InferredState>,
    /// <p>The device identifier.</p>
    pub device_id: ::std::string::String,
    /// <p>The timestamp at which the device's position was determined. Uses <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601 </a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    pub sample_time: ::aws_smithy_types::DateTime,
    /// <p>The timestamp for when the tracker resource received the device position in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601 </a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    pub received_time: ::aws_smithy_types::DateTime,
    /// <p>The distance unit for the verification response.</p>
    pub distance_unit: crate::types::DistanceUnit,
    _request_id: Option<String>,
}
impl VerifyDevicePositionOutput {
    /// <p>The inferred state of the device, given the provided position, IP address, cellular signals, and Wi-Fi- access points.</p>
    pub fn inferred_state(&self) -> ::std::option::Option<&crate::types::InferredState> {
        self.inferred_state.as_ref()
    }
    /// <p>The device identifier.</p>
    pub fn device_id(&self) -> &str {
        use std::ops::Deref;
        self.device_id.deref()
    }
    /// <p>The timestamp at which the device's position was determined. Uses <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601 </a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    pub fn sample_time(&self) -> &::aws_smithy_types::DateTime {
        &self.sample_time
    }
    /// <p>The timestamp for when the tracker resource received the device position in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601 </a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    pub fn received_time(&self) -> &::aws_smithy_types::DateTime {
        &self.received_time
    }
    /// <p>The distance unit for the verification response.</p>
    pub fn distance_unit(&self) -> &crate::types::DistanceUnit {
        &self.distance_unit
    }
}
impl ::aws_types::request_id::RequestId for VerifyDevicePositionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl VerifyDevicePositionOutput {
    /// Creates a new builder-style object to manufacture [`VerifyDevicePositionOutput`](crate::operation::verify_device_position::VerifyDevicePositionOutput).
    pub fn builder() -> crate::operation::verify_device_position::builders::VerifyDevicePositionOutputBuilder {
        crate::operation::verify_device_position::builders::VerifyDevicePositionOutputBuilder::default()
    }
}

/// A builder for [`VerifyDevicePositionOutput`](crate::operation::verify_device_position::VerifyDevicePositionOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VerifyDevicePositionOutputBuilder {
    pub(crate) inferred_state: ::std::option::Option<crate::types::InferredState>,
    pub(crate) device_id: ::std::option::Option<::std::string::String>,
    pub(crate) sample_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) received_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) distance_unit: ::std::option::Option<crate::types::DistanceUnit>,
    _request_id: Option<String>,
}
impl VerifyDevicePositionOutputBuilder {
    /// <p>The inferred state of the device, given the provided position, IP address, cellular signals, and Wi-Fi- access points.</p>
    /// This field is required.
    pub fn inferred_state(mut self, input: crate::types::InferredState) -> Self {
        self.inferred_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The inferred state of the device, given the provided position, IP address, cellular signals, and Wi-Fi- access points.</p>
    pub fn set_inferred_state(mut self, input: ::std::option::Option<crate::types::InferredState>) -> Self {
        self.inferred_state = input;
        self
    }
    /// <p>The inferred state of the device, given the provided position, IP address, cellular signals, and Wi-Fi- access points.</p>
    pub fn get_inferred_state(&self) -> &::std::option::Option<crate::types::InferredState> {
        &self.inferred_state
    }
    /// <p>The device identifier.</p>
    /// This field is required.
    pub fn device_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The device identifier.</p>
    pub fn set_device_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_id = input;
        self
    }
    /// <p>The device identifier.</p>
    pub fn get_device_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_id
    }
    /// <p>The timestamp at which the device's position was determined. Uses <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601 </a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    /// This field is required.
    pub fn sample_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.sample_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which the device's position was determined. Uses <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601 </a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    pub fn set_sample_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.sample_time = input;
        self
    }
    /// <p>The timestamp at which the device's position was determined. Uses <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601 </a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    pub fn get_sample_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.sample_time
    }
    /// <p>The timestamp for when the tracker resource received the device position in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601 </a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    /// This field is required.
    pub fn received_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.received_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp for when the tracker resource received the device position in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601 </a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    pub fn set_received_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.received_time = input;
        self
    }
    /// <p>The timestamp for when the tracker resource received the device position in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601 </a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    pub fn get_received_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.received_time
    }
    /// <p>The distance unit for the verification response.</p>
    /// This field is required.
    pub fn distance_unit(mut self, input: crate::types::DistanceUnit) -> Self {
        self.distance_unit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The distance unit for the verification response.</p>
    pub fn set_distance_unit(mut self, input: ::std::option::Option<crate::types::DistanceUnit>) -> Self {
        self.distance_unit = input;
        self
    }
    /// <p>The distance unit for the verification response.</p>
    pub fn get_distance_unit(&self) -> &::std::option::Option<crate::types::DistanceUnit> {
        &self.distance_unit
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`VerifyDevicePositionOutput`](crate::operation::verify_device_position::VerifyDevicePositionOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`device_id`](crate::operation::verify_device_position::builders::VerifyDevicePositionOutputBuilder::device_id)
    /// - [`sample_time`](crate::operation::verify_device_position::builders::VerifyDevicePositionOutputBuilder::sample_time)
    /// - [`received_time`](crate::operation::verify_device_position::builders::VerifyDevicePositionOutputBuilder::received_time)
    /// - [`distance_unit`](crate::operation::verify_device_position::builders::VerifyDevicePositionOutputBuilder::distance_unit)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::verify_device_position::VerifyDevicePositionOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::verify_device_position::VerifyDevicePositionOutput {
            inferred_state: self.inferred_state,
            device_id: self.device_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "device_id",
                    "device_id was not specified but it is required when building VerifyDevicePositionOutput",
                )
            })?,
            sample_time: self.sample_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sample_time",
                    "sample_time was not specified but it is required when building VerifyDevicePositionOutput",
                )
            })?,
            received_time: self.received_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "received_time",
                    "received_time was not specified but it is required when building VerifyDevicePositionOutput",
                )
            })?,
            distance_unit: self.distance_unit.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "distance_unit",
                    "distance_unit was not specified but it is required when building VerifyDevicePositionOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
