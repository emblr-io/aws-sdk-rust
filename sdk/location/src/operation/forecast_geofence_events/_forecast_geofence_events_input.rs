// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ForecastGeofenceEventsInput {
    /// <p>The name of the geofence collection.</p>
    pub collection_name: ::std::option::Option<::std::string::String>,
    /// <p>The device's state, including current position and speed.</p>
    pub device_state: ::std::option::Option<crate::types::ForecastGeofenceEventsDeviceState>,
    /// <p>Specifies the time horizon in minutes for the forecasted events.</p>
    pub time_horizon_minutes: ::std::option::Option<f64>,
    /// <p>The distance unit used for the <code>NearestDistance</code> property returned in a forecasted event. The measurement system must match for <code>DistanceUnit</code> and <code>SpeedUnit</code>; if <code>Kilometers</code> is specified for <code>DistanceUnit</code>, then <code>SpeedUnit</code> must be <code>KilometersPerHour</code>.</p>
    /// <p>Default Value: <code>Kilometers</code></p>
    pub distance_unit: ::std::option::Option<crate::types::DistanceUnit>,
    /// <p>The speed unit for the device captured by the device state. The measurement system must match for <code>DistanceUnit</code> and <code>SpeedUnit</code>; if <code>Kilometers</code> is specified for <code>DistanceUnit</code>, then <code>SpeedUnit</code> must be <code>KilometersPerHour</code>.</p>
    /// <p>Default Value: <code>KilometersPerHour</code>.</p>
    pub speed_unit: ::std::option::Option<crate::types::SpeedUnit>,
    /// <p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page.</p>
    /// <p>Default value: <code>null</code></p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>An optional limit for the number of resources returned in a single call.</p>
    /// <p>Default value: <code>20</code></p>
    pub max_results: ::std::option::Option<i32>,
}
impl ForecastGeofenceEventsInput {
    /// <p>The name of the geofence collection.</p>
    pub fn collection_name(&self) -> ::std::option::Option<&str> {
        self.collection_name.as_deref()
    }
    /// <p>The device's state, including current position and speed.</p>
    pub fn device_state(&self) -> ::std::option::Option<&crate::types::ForecastGeofenceEventsDeviceState> {
        self.device_state.as_ref()
    }
    /// <p>Specifies the time horizon in minutes for the forecasted events.</p>
    pub fn time_horizon_minutes(&self) -> ::std::option::Option<f64> {
        self.time_horizon_minutes
    }
    /// <p>The distance unit used for the <code>NearestDistance</code> property returned in a forecasted event. The measurement system must match for <code>DistanceUnit</code> and <code>SpeedUnit</code>; if <code>Kilometers</code> is specified for <code>DistanceUnit</code>, then <code>SpeedUnit</code> must be <code>KilometersPerHour</code>.</p>
    /// <p>Default Value: <code>Kilometers</code></p>
    pub fn distance_unit(&self) -> ::std::option::Option<&crate::types::DistanceUnit> {
        self.distance_unit.as_ref()
    }
    /// <p>The speed unit for the device captured by the device state. The measurement system must match for <code>DistanceUnit</code> and <code>SpeedUnit</code>; if <code>Kilometers</code> is specified for <code>DistanceUnit</code>, then <code>SpeedUnit</code> must be <code>KilometersPerHour</code>.</p>
    /// <p>Default Value: <code>KilometersPerHour</code>.</p>
    pub fn speed_unit(&self) -> ::std::option::Option<&crate::types::SpeedUnit> {
        self.speed_unit.as_ref()
    }
    /// <p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page.</p>
    /// <p>Default value: <code>null</code></p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>An optional limit for the number of resources returned in a single call.</p>
    /// <p>Default value: <code>20</code></p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ForecastGeofenceEventsInput {
    /// Creates a new builder-style object to manufacture [`ForecastGeofenceEventsInput`](crate::operation::forecast_geofence_events::ForecastGeofenceEventsInput).
    pub fn builder() -> crate::operation::forecast_geofence_events::builders::ForecastGeofenceEventsInputBuilder {
        crate::operation::forecast_geofence_events::builders::ForecastGeofenceEventsInputBuilder::default()
    }
}

/// A builder for [`ForecastGeofenceEventsInput`](crate::operation::forecast_geofence_events::ForecastGeofenceEventsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ForecastGeofenceEventsInputBuilder {
    pub(crate) collection_name: ::std::option::Option<::std::string::String>,
    pub(crate) device_state: ::std::option::Option<crate::types::ForecastGeofenceEventsDeviceState>,
    pub(crate) time_horizon_minutes: ::std::option::Option<f64>,
    pub(crate) distance_unit: ::std::option::Option<crate::types::DistanceUnit>,
    pub(crate) speed_unit: ::std::option::Option<crate::types::SpeedUnit>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ForecastGeofenceEventsInputBuilder {
    /// <p>The name of the geofence collection.</p>
    /// This field is required.
    pub fn collection_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collection_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the geofence collection.</p>
    pub fn set_collection_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collection_name = input;
        self
    }
    /// <p>The name of the geofence collection.</p>
    pub fn get_collection_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.collection_name
    }
    /// <p>The device's state, including current position and speed.</p>
    /// This field is required.
    pub fn device_state(mut self, input: crate::types::ForecastGeofenceEventsDeviceState) -> Self {
        self.device_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The device's state, including current position and speed.</p>
    pub fn set_device_state(mut self, input: ::std::option::Option<crate::types::ForecastGeofenceEventsDeviceState>) -> Self {
        self.device_state = input;
        self
    }
    /// <p>The device's state, including current position and speed.</p>
    pub fn get_device_state(&self) -> &::std::option::Option<crate::types::ForecastGeofenceEventsDeviceState> {
        &self.device_state
    }
    /// <p>Specifies the time horizon in minutes for the forecasted events.</p>
    pub fn time_horizon_minutes(mut self, input: f64) -> Self {
        self.time_horizon_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the time horizon in minutes for the forecasted events.</p>
    pub fn set_time_horizon_minutes(mut self, input: ::std::option::Option<f64>) -> Self {
        self.time_horizon_minutes = input;
        self
    }
    /// <p>Specifies the time horizon in minutes for the forecasted events.</p>
    pub fn get_time_horizon_minutes(&self) -> &::std::option::Option<f64> {
        &self.time_horizon_minutes
    }
    /// <p>The distance unit used for the <code>NearestDistance</code> property returned in a forecasted event. The measurement system must match for <code>DistanceUnit</code> and <code>SpeedUnit</code>; if <code>Kilometers</code> is specified for <code>DistanceUnit</code>, then <code>SpeedUnit</code> must be <code>KilometersPerHour</code>.</p>
    /// <p>Default Value: <code>Kilometers</code></p>
    pub fn distance_unit(mut self, input: crate::types::DistanceUnit) -> Self {
        self.distance_unit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The distance unit used for the <code>NearestDistance</code> property returned in a forecasted event. The measurement system must match for <code>DistanceUnit</code> and <code>SpeedUnit</code>; if <code>Kilometers</code> is specified for <code>DistanceUnit</code>, then <code>SpeedUnit</code> must be <code>KilometersPerHour</code>.</p>
    /// <p>Default Value: <code>Kilometers</code></p>
    pub fn set_distance_unit(mut self, input: ::std::option::Option<crate::types::DistanceUnit>) -> Self {
        self.distance_unit = input;
        self
    }
    /// <p>The distance unit used for the <code>NearestDistance</code> property returned in a forecasted event. The measurement system must match for <code>DistanceUnit</code> and <code>SpeedUnit</code>; if <code>Kilometers</code> is specified for <code>DistanceUnit</code>, then <code>SpeedUnit</code> must be <code>KilometersPerHour</code>.</p>
    /// <p>Default Value: <code>Kilometers</code></p>
    pub fn get_distance_unit(&self) -> &::std::option::Option<crate::types::DistanceUnit> {
        &self.distance_unit
    }
    /// <p>The speed unit for the device captured by the device state. The measurement system must match for <code>DistanceUnit</code> and <code>SpeedUnit</code>; if <code>Kilometers</code> is specified for <code>DistanceUnit</code>, then <code>SpeedUnit</code> must be <code>KilometersPerHour</code>.</p>
    /// <p>Default Value: <code>KilometersPerHour</code>.</p>
    pub fn speed_unit(mut self, input: crate::types::SpeedUnit) -> Self {
        self.speed_unit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The speed unit for the device captured by the device state. The measurement system must match for <code>DistanceUnit</code> and <code>SpeedUnit</code>; if <code>Kilometers</code> is specified for <code>DistanceUnit</code>, then <code>SpeedUnit</code> must be <code>KilometersPerHour</code>.</p>
    /// <p>Default Value: <code>KilometersPerHour</code>.</p>
    pub fn set_speed_unit(mut self, input: ::std::option::Option<crate::types::SpeedUnit>) -> Self {
        self.speed_unit = input;
        self
    }
    /// <p>The speed unit for the device captured by the device state. The measurement system must match for <code>DistanceUnit</code> and <code>SpeedUnit</code>; if <code>Kilometers</code> is specified for <code>DistanceUnit</code>, then <code>SpeedUnit</code> must be <code>KilometersPerHour</code>.</p>
    /// <p>Default Value: <code>KilometersPerHour</code>.</p>
    pub fn get_speed_unit(&self) -> &::std::option::Option<crate::types::SpeedUnit> {
        &self.speed_unit
    }
    /// <p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page.</p>
    /// <p>Default value: <code>null</code></p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page.</p>
    /// <p>Default value: <code>null</code></p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page.</p>
    /// <p>Default value: <code>null</code></p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>An optional limit for the number of resources returned in a single call.</p>
    /// <p>Default value: <code>20</code></p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>An optional limit for the number of resources returned in a single call.</p>
    /// <p>Default value: <code>20</code></p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>An optional limit for the number of resources returned in a single call.</p>
    /// <p>Default value: <code>20</code></p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ForecastGeofenceEventsInput`](crate::operation::forecast_geofence_events::ForecastGeofenceEventsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::forecast_geofence_events::ForecastGeofenceEventsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::forecast_geofence_events::ForecastGeofenceEventsInput {
            collection_name: self.collection_name,
            device_state: self.device_state,
            time_horizon_minutes: self.time_horizon_minutes,
            distance_unit: self.distance_unit,
            speed_unit: self.speed_unit,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
