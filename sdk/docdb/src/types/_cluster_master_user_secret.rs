// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the secret managed by Amazon DocumentDB in Amazon Web Services Secrets Manager for the master user password.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClusterMasterUserSecret {
    /// <p>The Amazon Resource Name (ARN) of the secret.</p>
    pub secret_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the secret.</p>
    /// <p>The possible status values include the following:</p>
    /// <ul>
    /// <li>
    /// <p>creating - The secret is being created.</p></li>
    /// <li>
    /// <p>active - The secret is available for normal use and rotation.</p></li>
    /// <li>
    /// <p>rotating - The secret is being rotated.</p></li>
    /// <li>
    /// <p>impaired - The secret can be used to access database credentials, but it can't be rotated. A secret might have this status if, for example, permissions are changed so that Amazon DocumentDB can no longer access either the secret or the KMS key for the secret.</p>
    /// <p>When a secret has this status, you can correct the condition that caused the status. Alternatively, modify the instance to turn off automatic management of database credentials, and then modify the instance again to turn on automatic management of database credentials.</p></li>
    /// </ul>
    pub secret_status: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services KMS key identifier that is used to encrypt the secret.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
}
impl ClusterMasterUserSecret {
    /// <p>The Amazon Resource Name (ARN) of the secret.</p>
    pub fn secret_arn(&self) -> ::std::option::Option<&str> {
        self.secret_arn.as_deref()
    }
    /// <p>The status of the secret.</p>
    /// <p>The possible status values include the following:</p>
    /// <ul>
    /// <li>
    /// <p>creating - The secret is being created.</p></li>
    /// <li>
    /// <p>active - The secret is available for normal use and rotation.</p></li>
    /// <li>
    /// <p>rotating - The secret is being rotated.</p></li>
    /// <li>
    /// <p>impaired - The secret can be used to access database credentials, but it can't be rotated. A secret might have this status if, for example, permissions are changed so that Amazon DocumentDB can no longer access either the secret or the KMS key for the secret.</p>
    /// <p>When a secret has this status, you can correct the condition that caused the status. Alternatively, modify the instance to turn off automatic management of database credentials, and then modify the instance again to turn on automatic management of database credentials.</p></li>
    /// </ul>
    pub fn secret_status(&self) -> ::std::option::Option<&str> {
        self.secret_status.as_deref()
    }
    /// <p>The Amazon Web Services KMS key identifier that is used to encrypt the secret.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
}
impl ClusterMasterUserSecret {
    /// Creates a new builder-style object to manufacture [`ClusterMasterUserSecret`](crate::types::ClusterMasterUserSecret).
    pub fn builder() -> crate::types::builders::ClusterMasterUserSecretBuilder {
        crate::types::builders::ClusterMasterUserSecretBuilder::default()
    }
}

/// A builder for [`ClusterMasterUserSecret`](crate::types::ClusterMasterUserSecret).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ClusterMasterUserSecretBuilder {
    pub(crate) secret_arn: ::std::option::Option<::std::string::String>,
    pub(crate) secret_status: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
}
impl ClusterMasterUserSecretBuilder {
    /// <p>The Amazon Resource Name (ARN) of the secret.</p>
    pub fn secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the secret.</p>
    pub fn set_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the secret.</p>
    pub fn get_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_arn
    }
    /// <p>The status of the secret.</p>
    /// <p>The possible status values include the following:</p>
    /// <ul>
    /// <li>
    /// <p>creating - The secret is being created.</p></li>
    /// <li>
    /// <p>active - The secret is available for normal use and rotation.</p></li>
    /// <li>
    /// <p>rotating - The secret is being rotated.</p></li>
    /// <li>
    /// <p>impaired - The secret can be used to access database credentials, but it can't be rotated. A secret might have this status if, for example, permissions are changed so that Amazon DocumentDB can no longer access either the secret or the KMS key for the secret.</p>
    /// <p>When a secret has this status, you can correct the condition that caused the status. Alternatively, modify the instance to turn off automatic management of database credentials, and then modify the instance again to turn on automatic management of database credentials.</p></li>
    /// </ul>
    pub fn secret_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the secret.</p>
    /// <p>The possible status values include the following:</p>
    /// <ul>
    /// <li>
    /// <p>creating - The secret is being created.</p></li>
    /// <li>
    /// <p>active - The secret is available for normal use and rotation.</p></li>
    /// <li>
    /// <p>rotating - The secret is being rotated.</p></li>
    /// <li>
    /// <p>impaired - The secret can be used to access database credentials, but it can't be rotated. A secret might have this status if, for example, permissions are changed so that Amazon DocumentDB can no longer access either the secret or the KMS key for the secret.</p>
    /// <p>When a secret has this status, you can correct the condition that caused the status. Alternatively, modify the instance to turn off automatic management of database credentials, and then modify the instance again to turn on automatic management of database credentials.</p></li>
    /// </ul>
    pub fn set_secret_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_status = input;
        self
    }
    /// <p>The status of the secret.</p>
    /// <p>The possible status values include the following:</p>
    /// <ul>
    /// <li>
    /// <p>creating - The secret is being created.</p></li>
    /// <li>
    /// <p>active - The secret is available for normal use and rotation.</p></li>
    /// <li>
    /// <p>rotating - The secret is being rotated.</p></li>
    /// <li>
    /// <p>impaired - The secret can be used to access database credentials, but it can't be rotated. A secret might have this status if, for example, permissions are changed so that Amazon DocumentDB can no longer access either the secret or the KMS key for the secret.</p>
    /// <p>When a secret has this status, you can correct the condition that caused the status. Alternatively, modify the instance to turn off automatic management of database credentials, and then modify the instance again to turn on automatic management of database credentials.</p></li>
    /// </ul>
    pub fn get_secret_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_status
    }
    /// <p>The Amazon Web Services KMS key identifier that is used to encrypt the secret.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services KMS key identifier that is used to encrypt the secret.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The Amazon Web Services KMS key identifier that is used to encrypt the secret.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// Consumes the builder and constructs a [`ClusterMasterUserSecret`](crate::types::ClusterMasterUserSecret).
    pub fn build(self) -> crate::types::ClusterMasterUserSecret {
        crate::types::ClusterMasterUserSecret {
            secret_arn: self.secret_arn,
            secret_status: self.secret_status,
            kms_key_id: self.kms_key_id,
        }
    }
}
