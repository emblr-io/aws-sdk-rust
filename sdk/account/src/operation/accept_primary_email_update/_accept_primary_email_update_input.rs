// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AcceptPrimaryEmailUpdateInput {
    /// <p>Specifies the 12-digit account ID number of the Amazon Web Services account that you want to access or modify with this operation. To use this parameter, the caller must be an identity in the <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account">organization's management account</a> or a delegated administrator account. The specified account ID must be a member account in the same organization. The organization must have <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">all features enabled</a>, and the organization must have <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html">trusted access</a> enabled for the Account Management service, and optionally a <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#delegated-admin">delegated admin</a> account assigned.</p>
    /// <p>This operation can only be called from the management account or the delegated administrator account of an organization for a member account.</p><note>
    /// <p>The management account can't specify its own <code>AccountId</code>.</p>
    /// </note>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The new primary email address for use with the specified account. This must match the <code>PrimaryEmail</code> from the <code>StartPrimaryEmailUpdate</code> API call.</p>
    pub primary_email: ::std::option::Option<::std::string::String>,
    /// <p>The OTP code sent to the <code>PrimaryEmail</code> specified on the <code>StartPrimaryEmailUpdate</code> API call.</p>
    pub otp: ::std::option::Option<::std::string::String>,
}
impl AcceptPrimaryEmailUpdateInput {
    /// <p>Specifies the 12-digit account ID number of the Amazon Web Services account that you want to access or modify with this operation. To use this parameter, the caller must be an identity in the <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account">organization's management account</a> or a delegated administrator account. The specified account ID must be a member account in the same organization. The organization must have <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">all features enabled</a>, and the organization must have <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html">trusted access</a> enabled for the Account Management service, and optionally a <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#delegated-admin">delegated admin</a> account assigned.</p>
    /// <p>This operation can only be called from the management account or the delegated administrator account of an organization for a member account.</p><note>
    /// <p>The management account can't specify its own <code>AccountId</code>.</p>
    /// </note>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The new primary email address for use with the specified account. This must match the <code>PrimaryEmail</code> from the <code>StartPrimaryEmailUpdate</code> API call.</p>
    pub fn primary_email(&self) -> ::std::option::Option<&str> {
        self.primary_email.as_deref()
    }
    /// <p>The OTP code sent to the <code>PrimaryEmail</code> specified on the <code>StartPrimaryEmailUpdate</code> API call.</p>
    pub fn otp(&self) -> ::std::option::Option<&str> {
        self.otp.as_deref()
    }
}
impl ::std::fmt::Debug for AcceptPrimaryEmailUpdateInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AcceptPrimaryEmailUpdateInput");
        formatter.field("account_id", &self.account_id);
        formatter.field("primary_email", &"*** Sensitive Data Redacted ***");
        formatter.field("otp", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AcceptPrimaryEmailUpdateInput {
    /// Creates a new builder-style object to manufacture [`AcceptPrimaryEmailUpdateInput`](crate::operation::accept_primary_email_update::AcceptPrimaryEmailUpdateInput).
    pub fn builder() -> crate::operation::accept_primary_email_update::builders::AcceptPrimaryEmailUpdateInputBuilder {
        crate::operation::accept_primary_email_update::builders::AcceptPrimaryEmailUpdateInputBuilder::default()
    }
}

/// A builder for [`AcceptPrimaryEmailUpdateInput`](crate::operation::accept_primary_email_update::AcceptPrimaryEmailUpdateInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AcceptPrimaryEmailUpdateInputBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) primary_email: ::std::option::Option<::std::string::String>,
    pub(crate) otp: ::std::option::Option<::std::string::String>,
}
impl AcceptPrimaryEmailUpdateInputBuilder {
    /// <p>Specifies the 12-digit account ID number of the Amazon Web Services account that you want to access or modify with this operation. To use this parameter, the caller must be an identity in the <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account">organization's management account</a> or a delegated administrator account. The specified account ID must be a member account in the same organization. The organization must have <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">all features enabled</a>, and the organization must have <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html">trusted access</a> enabled for the Account Management service, and optionally a <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#delegated-admin">delegated admin</a> account assigned.</p>
    /// <p>This operation can only be called from the management account or the delegated administrator account of an organization for a member account.</p><note>
    /// <p>The management account can't specify its own <code>AccountId</code>.</p>
    /// </note>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the 12-digit account ID number of the Amazon Web Services account that you want to access or modify with this operation. To use this parameter, the caller must be an identity in the <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account">organization's management account</a> or a delegated administrator account. The specified account ID must be a member account in the same organization. The organization must have <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">all features enabled</a>, and the organization must have <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html">trusted access</a> enabled for the Account Management service, and optionally a <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#delegated-admin">delegated admin</a> account assigned.</p>
    /// <p>This operation can only be called from the management account or the delegated administrator account of an organization for a member account.</p><note>
    /// <p>The management account can't specify its own <code>AccountId</code>.</p>
    /// </note>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>Specifies the 12-digit account ID number of the Amazon Web Services account that you want to access or modify with this operation. To use this parameter, the caller must be an identity in the <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account">organization's management account</a> or a delegated administrator account. The specified account ID must be a member account in the same organization. The organization must have <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">all features enabled</a>, and the organization must have <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html">trusted access</a> enabled for the Account Management service, and optionally a <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#delegated-admin">delegated admin</a> account assigned.</p>
    /// <p>This operation can only be called from the management account or the delegated administrator account of an organization for a member account.</p><note>
    /// <p>The management account can't specify its own <code>AccountId</code>.</p>
    /// </note>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The new primary email address for use with the specified account. This must match the <code>PrimaryEmail</code> from the <code>StartPrimaryEmailUpdate</code> API call.</p>
    /// This field is required.
    pub fn primary_email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.primary_email = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new primary email address for use with the specified account. This must match the <code>PrimaryEmail</code> from the <code>StartPrimaryEmailUpdate</code> API call.</p>
    pub fn set_primary_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.primary_email = input;
        self
    }
    /// <p>The new primary email address for use with the specified account. This must match the <code>PrimaryEmail</code> from the <code>StartPrimaryEmailUpdate</code> API call.</p>
    pub fn get_primary_email(&self) -> &::std::option::Option<::std::string::String> {
        &self.primary_email
    }
    /// <p>The OTP code sent to the <code>PrimaryEmail</code> specified on the <code>StartPrimaryEmailUpdate</code> API call.</p>
    /// This field is required.
    pub fn otp(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.otp = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The OTP code sent to the <code>PrimaryEmail</code> specified on the <code>StartPrimaryEmailUpdate</code> API call.</p>
    pub fn set_otp(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.otp = input;
        self
    }
    /// <p>The OTP code sent to the <code>PrimaryEmail</code> specified on the <code>StartPrimaryEmailUpdate</code> API call.</p>
    pub fn get_otp(&self) -> &::std::option::Option<::std::string::String> {
        &self.otp
    }
    /// Consumes the builder and constructs a [`AcceptPrimaryEmailUpdateInput`](crate::operation::accept_primary_email_update::AcceptPrimaryEmailUpdateInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::accept_primary_email_update::AcceptPrimaryEmailUpdateInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::accept_primary_email_update::AcceptPrimaryEmailUpdateInput {
            account_id: self.account_id,
            primary_email: self.primary_email,
            otp: self.otp,
        })
    }
}
impl ::std::fmt::Debug for AcceptPrimaryEmailUpdateInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AcceptPrimaryEmailUpdateInputBuilder");
        formatter.field("account_id", &self.account_id);
        formatter.field("primary_email", &"*** Sensitive Data Redacted ***");
        formatter.field("otp", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
