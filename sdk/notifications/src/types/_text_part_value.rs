// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes text information objects containing fields that determine how text part objects are composed.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TextPartValue {
    /// <p>The type of text part. Determines the usage of all other fields and whether or not they're required.</p>
    pub r#type: crate::types::TextPartType,
    /// <p>A short single line description of the link. Must be hyper-linked with the URL itself.</p>
    /// <p>Used for text parts with the type <code>URL</code>.</p>
    pub display_text: ::std::option::Option<::std::string::String>,
    /// <p>A map of locales to the text in that locale.</p>
    pub text_by_locale: ::std::option::Option<::std::collections::HashMap<crate::types::LocaleCode, ::std::string::String>>,
    /// <p>The URL itself.</p>
    pub url: ::std::option::Option<::std::string::String>,
}
impl TextPartValue {
    /// <p>The type of text part. Determines the usage of all other fields and whether or not they're required.</p>
    pub fn r#type(&self) -> &crate::types::TextPartType {
        &self.r#type
    }
    /// <p>A short single line description of the link. Must be hyper-linked with the URL itself.</p>
    /// <p>Used for text parts with the type <code>URL</code>.</p>
    pub fn display_text(&self) -> ::std::option::Option<&str> {
        self.display_text.as_deref()
    }
    /// <p>A map of locales to the text in that locale.</p>
    pub fn text_by_locale(&self) -> ::std::option::Option<&::std::collections::HashMap<crate::types::LocaleCode, ::std::string::String>> {
        self.text_by_locale.as_ref()
    }
    /// <p>The URL itself.</p>
    pub fn url(&self) -> ::std::option::Option<&str> {
        self.url.as_deref()
    }
}
impl TextPartValue {
    /// Creates a new builder-style object to manufacture [`TextPartValue`](crate::types::TextPartValue).
    pub fn builder() -> crate::types::builders::TextPartValueBuilder {
        crate::types::builders::TextPartValueBuilder::default()
    }
}

/// A builder for [`TextPartValue`](crate::types::TextPartValue).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TextPartValueBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::TextPartType>,
    pub(crate) display_text: ::std::option::Option<::std::string::String>,
    pub(crate) text_by_locale: ::std::option::Option<::std::collections::HashMap<crate::types::LocaleCode, ::std::string::String>>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
}
impl TextPartValueBuilder {
    /// <p>The type of text part. Determines the usage of all other fields and whether or not they're required.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::TextPartType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of text part. Determines the usage of all other fields and whether or not they're required.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::TextPartType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of text part. Determines the usage of all other fields and whether or not they're required.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::TextPartType> {
        &self.r#type
    }
    /// <p>A short single line description of the link. Must be hyper-linked with the URL itself.</p>
    /// <p>Used for text parts with the type <code>URL</code>.</p>
    pub fn display_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A short single line description of the link. Must be hyper-linked with the URL itself.</p>
    /// <p>Used for text parts with the type <code>URL</code>.</p>
    pub fn set_display_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_text = input;
        self
    }
    /// <p>A short single line description of the link. Must be hyper-linked with the URL itself.</p>
    /// <p>Used for text parts with the type <code>URL</code>.</p>
    pub fn get_display_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_text
    }
    /// Adds a key-value pair to `text_by_locale`.
    ///
    /// To override the contents of this collection use [`set_text_by_locale`](Self::set_text_by_locale).
    ///
    /// <p>A map of locales to the text in that locale.</p>
    pub fn text_by_locale(mut self, k: crate::types::LocaleCode, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.text_by_locale.unwrap_or_default();
        hash_map.insert(k, v.into());
        self.text_by_locale = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of locales to the text in that locale.</p>
    pub fn set_text_by_locale(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::LocaleCode, ::std::string::String>>,
    ) -> Self {
        self.text_by_locale = input;
        self
    }
    /// <p>A map of locales to the text in that locale.</p>
    pub fn get_text_by_locale(&self) -> &::std::option::Option<::std::collections::HashMap<crate::types::LocaleCode, ::std::string::String>> {
        &self.text_by_locale
    }
    /// <p>The URL itself.</p>
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL itself.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The URL itself.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// Consumes the builder and constructs a [`TextPartValue`](crate::types::TextPartValue).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::TextPartValueBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::TextPartValue, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TextPartValue {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building TextPartValue",
                )
            })?,
            display_text: self.display_text,
            text_by_locale: self.text_by_locale,
            url: self.url,
        })
    }
}
