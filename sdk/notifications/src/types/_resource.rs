// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A resource affected by or closely linked to an event.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Resource {
    /// <p>The unique identifier for the resource.</p>
    /// <p>At least one id or ARN is required.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the resource. At least one id or ARN is required.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The URL to the resource's detail page. If a detail page URL is unavailable, it is the URL to an informational page that describes the resource's type.</p>
    pub detail_url: ::std::option::Option<::std::string::String>,
    /// <p>A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl Resource {
    /// <p>The unique identifier for the resource.</p>
    /// <p>At least one id or ARN is required.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the resource. At least one id or ARN is required.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The URL to the resource's detail page. If a detail page URL is unavailable, it is the URL to an informational page that describes the resource's type.</p>
    pub fn detail_url(&self) -> ::std::option::Option<&str> {
        self.detail_url.as_deref()
    }
    /// <p>A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[::std::string::String] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl Resource {
    /// Creates a new builder-style object to manufacture [`Resource`](crate::types::Resource).
    pub fn builder() -> crate::types::builders::ResourceBuilder {
        crate::types::builders::ResourceBuilder::default()
    }
}

/// A builder for [`Resource`](crate::types::Resource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ResourceBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) detail_url: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ResourceBuilder {
    /// <p>The unique identifier for the resource.</p>
    /// <p>At least one id or ARN is required.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the resource.</p>
    /// <p>At least one id or ARN is required.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier for the resource.</p>
    /// <p>At least one id or ARN is required.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The Amazon Resource Name (ARN) of the resource. At least one id or ARN is required.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource. At least one id or ARN is required.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource. At least one id or ARN is required.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The URL to the resource's detail page. If a detail page URL is unavailable, it is the URL to an informational page that describes the resource's type.</p>
    pub fn detail_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.detail_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL to the resource's detail page. If a detail page URL is unavailable, it is the URL to an informational page that describes the resource's type.</p>
    pub fn set_detail_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.detail_url = input;
        self
    }
    /// <p>The URL to the resource's detail page. If a detail page URL is unavailable, it is the URL to an informational page that describes the resource's type.</p>
    pub fn get_detail_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.detail_url
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.</p>
    pub fn tags(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input.into());
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`Resource`](crate::types::Resource).
    pub fn build(self) -> crate::types::Resource {
        crate::types::Resource {
            id: self.id,
            arn: self.arn,
            detail_url: self.detail_url,
            tags: self.tags,
        }
    }
}
