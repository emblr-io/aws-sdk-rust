// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an overview and metadata for a <code>ManagedNotificationChildEvent</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ManagedNotificationChildEventOverview {
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationChildEvent</code>.</p>
    pub arn: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code>.</p>
    pub managed_notification_configuration_arn: ::std::string::String,
    /// <p>The account that related to the <code>ManagedNotificationChildEvent</code>.</p>
    pub related_account: ::std::string::String,
    /// <p>The creation time of the <code>ManagedNotificationChildEvent</code>.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>The content of the <code>ManagedNotificationChildEvent</code>.</p>
    pub child_event: ::std::option::Option<crate::types::ManagedNotificationChildEventSummary>,
    /// <p>The Amazon Resource Name (ARN) of the ManagedNotificationEvent that is associated with this <code>ManagedNotificationChildEvent</code>.</p>
    pub aggregate_managed_notification_event_arn: ::std::string::String,
    /// <p>The Organizational Unit Id that an AWS account belongs to.</p>
    pub organizational_unit_id: ::std::option::Option<::std::string::String>,
}
impl ManagedNotificationChildEventOverview {
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationChildEvent</code>.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code>.</p>
    pub fn managed_notification_configuration_arn(&self) -> &str {
        use std::ops::Deref;
        self.managed_notification_configuration_arn.deref()
    }
    /// <p>The account that related to the <code>ManagedNotificationChildEvent</code>.</p>
    pub fn related_account(&self) -> &str {
        use std::ops::Deref;
        self.related_account.deref()
    }
    /// <p>The creation time of the <code>ManagedNotificationChildEvent</code>.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>The content of the <code>ManagedNotificationChildEvent</code>.</p>
    pub fn child_event(&self) -> ::std::option::Option<&crate::types::ManagedNotificationChildEventSummary> {
        self.child_event.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the ManagedNotificationEvent that is associated with this <code>ManagedNotificationChildEvent</code>.</p>
    pub fn aggregate_managed_notification_event_arn(&self) -> &str {
        use std::ops::Deref;
        self.aggregate_managed_notification_event_arn.deref()
    }
    /// <p>The Organizational Unit Id that an AWS account belongs to.</p>
    pub fn organizational_unit_id(&self) -> ::std::option::Option<&str> {
        self.organizational_unit_id.as_deref()
    }
}
impl ManagedNotificationChildEventOverview {
    /// Creates a new builder-style object to manufacture [`ManagedNotificationChildEventOverview`](crate::types::ManagedNotificationChildEventOverview).
    pub fn builder() -> crate::types::builders::ManagedNotificationChildEventOverviewBuilder {
        crate::types::builders::ManagedNotificationChildEventOverviewBuilder::default()
    }
}

/// A builder for [`ManagedNotificationChildEventOverview`](crate::types::ManagedNotificationChildEventOverview).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ManagedNotificationChildEventOverviewBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) managed_notification_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) related_account: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) child_event: ::std::option::Option<crate::types::ManagedNotificationChildEventSummary>,
    pub(crate) aggregate_managed_notification_event_arn: ::std::option::Option<::std::string::String>,
    pub(crate) organizational_unit_id: ::std::option::Option<::std::string::String>,
}
impl ManagedNotificationChildEventOverviewBuilder {
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationChildEvent</code>.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationChildEvent</code>.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationChildEvent</code>.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code>.</p>
    /// This field is required.
    pub fn managed_notification_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.managed_notification_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code>.</p>
    pub fn set_managed_notification_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.managed_notification_configuration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code>.</p>
    pub fn get_managed_notification_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.managed_notification_configuration_arn
    }
    /// <p>The account that related to the <code>ManagedNotificationChildEvent</code>.</p>
    /// This field is required.
    pub fn related_account(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.related_account = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account that related to the <code>ManagedNotificationChildEvent</code>.</p>
    pub fn set_related_account(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.related_account = input;
        self
    }
    /// <p>The account that related to the <code>ManagedNotificationChildEvent</code>.</p>
    pub fn get_related_account(&self) -> &::std::option::Option<::std::string::String> {
        &self.related_account
    }
    /// <p>The creation time of the <code>ManagedNotificationChildEvent</code>.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation time of the <code>ManagedNotificationChildEvent</code>.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The creation time of the <code>ManagedNotificationChildEvent</code>.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The content of the <code>ManagedNotificationChildEvent</code>.</p>
    /// This field is required.
    pub fn child_event(mut self, input: crate::types::ManagedNotificationChildEventSummary) -> Self {
        self.child_event = ::std::option::Option::Some(input);
        self
    }
    /// <p>The content of the <code>ManagedNotificationChildEvent</code>.</p>
    pub fn set_child_event(mut self, input: ::std::option::Option<crate::types::ManagedNotificationChildEventSummary>) -> Self {
        self.child_event = input;
        self
    }
    /// <p>The content of the <code>ManagedNotificationChildEvent</code>.</p>
    pub fn get_child_event(&self) -> &::std::option::Option<crate::types::ManagedNotificationChildEventSummary> {
        &self.child_event
    }
    /// <p>The Amazon Resource Name (ARN) of the ManagedNotificationEvent that is associated with this <code>ManagedNotificationChildEvent</code>.</p>
    /// This field is required.
    pub fn aggregate_managed_notification_event_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aggregate_managed_notification_event_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ManagedNotificationEvent that is associated with this <code>ManagedNotificationChildEvent</code>.</p>
    pub fn set_aggregate_managed_notification_event_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aggregate_managed_notification_event_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ManagedNotificationEvent that is associated with this <code>ManagedNotificationChildEvent</code>.</p>
    pub fn get_aggregate_managed_notification_event_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.aggregate_managed_notification_event_arn
    }
    /// <p>The Organizational Unit Id that an AWS account belongs to.</p>
    pub fn organizational_unit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organizational_unit_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Organizational Unit Id that an AWS account belongs to.</p>
    pub fn set_organizational_unit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organizational_unit_id = input;
        self
    }
    /// <p>The Organizational Unit Id that an AWS account belongs to.</p>
    pub fn get_organizational_unit_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.organizational_unit_id
    }
    /// Consumes the builder and constructs a [`ManagedNotificationChildEventOverview`](crate::types::ManagedNotificationChildEventOverview).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::ManagedNotificationChildEventOverviewBuilder::arn)
    /// - [`managed_notification_configuration_arn`](crate::types::builders::ManagedNotificationChildEventOverviewBuilder::managed_notification_configuration_arn)
    /// - [`related_account`](crate::types::builders::ManagedNotificationChildEventOverviewBuilder::related_account)
    /// - [`creation_time`](crate::types::builders::ManagedNotificationChildEventOverviewBuilder::creation_time)
    /// - [`aggregate_managed_notification_event_arn`](crate::types::builders::ManagedNotificationChildEventOverviewBuilder::aggregate_managed_notification_event_arn)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ManagedNotificationChildEventOverview, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::types::ManagedNotificationChildEventOverview {
                arn: self.arn
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("arn", "arn was not specified but it is required when building ManagedNotificationChildEventOverview")
                    )?
                ,
                managed_notification_configuration_arn: self.managed_notification_configuration_arn
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("managed_notification_configuration_arn", "managed_notification_configuration_arn was not specified but it is required when building ManagedNotificationChildEventOverview")
                    )?
                ,
                related_account: self.related_account
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("related_account", "related_account was not specified but it is required when building ManagedNotificationChildEventOverview")
                    )?
                ,
                creation_time: self.creation_time
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("creation_time", "creation_time was not specified but it is required when building ManagedNotificationChildEventOverview")
                    )?
                ,
                child_event: self.child_event
                ,
                aggregate_managed_notification_event_arn: self.aggregate_managed_notification_event_arn
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("aggregate_managed_notification_event_arn", "aggregate_managed_notification_event_arn was not specified but it is required when building ManagedNotificationChildEventOverview")
                    )?
                ,
                organizational_unit_id: self.organizational_unit_id
                ,
            }
        )
    }
}
