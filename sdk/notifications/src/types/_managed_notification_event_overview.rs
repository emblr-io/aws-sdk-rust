// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an overview and metadata for a ManagedNotificationEvent.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ManagedNotificationEventOverview {
    /// <p>The Amazon Resource Name (ARN) of the ManagedNotificationEvent.</p>
    pub arn: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code>.</p>
    pub managed_notification_configuration_arn: ::std::string::String,
    /// <p>The account that related to the <code>ManagedNotificationEvent</code>.</p>
    pub related_account: ::std::string::String,
    /// <p>The creation time of the <code>ManagedNotificationEvent</code>.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>A short summary of a <code>ManagedNotificationEvent</code>. This is only used when listing managed notification events.</p>
    pub notification_event: ::std::option::Option<crate::types::ManagedNotificationEventSummary>,
    /// <p>The notifications aggregation type.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>AGGREGATE</code></p>
    /// <ul>
    /// <li>
    /// <p>The notification event is an aggregate notification. Aggregate notifications summarize grouped events over a specified time period.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>CHILD</code></p>
    /// <ul>
    /// <li>
    /// <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>. Any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>NONE</code></p>
    /// <ul>
    /// <li>
    /// <p>The notification isn't aggregated.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub aggregation_event_type: ::std::option::Option<crate::types::AggregationEventType>,
    /// <p>The Organizational Unit Id that an Amazon Web Services account belongs to.</p>
    pub organizational_unit_id: ::std::option::Option<::std::string::String>,
    /// <p>Provides additional information about the aggregation key.</p>
    pub aggregation_summary: ::std::option::Option<crate::types::AggregationSummary>,
    /// <p>The list of the regions where the aggregated notifications in this <code>NotificationEvent</code> originated.</p>
    pub aggregated_notification_regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ManagedNotificationEventOverview {
    /// <p>The Amazon Resource Name (ARN) of the ManagedNotificationEvent.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code>.</p>
    pub fn managed_notification_configuration_arn(&self) -> &str {
        use std::ops::Deref;
        self.managed_notification_configuration_arn.deref()
    }
    /// <p>The account that related to the <code>ManagedNotificationEvent</code>.</p>
    pub fn related_account(&self) -> &str {
        use std::ops::Deref;
        self.related_account.deref()
    }
    /// <p>The creation time of the <code>ManagedNotificationEvent</code>.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>A short summary of a <code>ManagedNotificationEvent</code>. This is only used when listing managed notification events.</p>
    pub fn notification_event(&self) -> ::std::option::Option<&crate::types::ManagedNotificationEventSummary> {
        self.notification_event.as_ref()
    }
    /// <p>The notifications aggregation type.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>AGGREGATE</code></p>
    /// <ul>
    /// <li>
    /// <p>The notification event is an aggregate notification. Aggregate notifications summarize grouped events over a specified time period.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>CHILD</code></p>
    /// <ul>
    /// <li>
    /// <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>. Any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>NONE</code></p>
    /// <ul>
    /// <li>
    /// <p>The notification isn't aggregated.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn aggregation_event_type(&self) -> ::std::option::Option<&crate::types::AggregationEventType> {
        self.aggregation_event_type.as_ref()
    }
    /// <p>The Organizational Unit Id that an Amazon Web Services account belongs to.</p>
    pub fn organizational_unit_id(&self) -> ::std::option::Option<&str> {
        self.organizational_unit_id.as_deref()
    }
    /// <p>Provides additional information about the aggregation key.</p>
    pub fn aggregation_summary(&self) -> ::std::option::Option<&crate::types::AggregationSummary> {
        self.aggregation_summary.as_ref()
    }
    /// <p>The list of the regions where the aggregated notifications in this <code>NotificationEvent</code> originated.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.aggregated_notification_regions.is_none()`.
    pub fn aggregated_notification_regions(&self) -> &[::std::string::String] {
        self.aggregated_notification_regions.as_deref().unwrap_or_default()
    }
}
impl ManagedNotificationEventOverview {
    /// Creates a new builder-style object to manufacture [`ManagedNotificationEventOverview`](crate::types::ManagedNotificationEventOverview).
    pub fn builder() -> crate::types::builders::ManagedNotificationEventOverviewBuilder {
        crate::types::builders::ManagedNotificationEventOverviewBuilder::default()
    }
}

/// A builder for [`ManagedNotificationEventOverview`](crate::types::ManagedNotificationEventOverview).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ManagedNotificationEventOverviewBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) managed_notification_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) related_account: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) notification_event: ::std::option::Option<crate::types::ManagedNotificationEventSummary>,
    pub(crate) aggregation_event_type: ::std::option::Option<crate::types::AggregationEventType>,
    pub(crate) organizational_unit_id: ::std::option::Option<::std::string::String>,
    pub(crate) aggregation_summary: ::std::option::Option<crate::types::AggregationSummary>,
    pub(crate) aggregated_notification_regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ManagedNotificationEventOverviewBuilder {
    /// <p>The Amazon Resource Name (ARN) of the ManagedNotificationEvent.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ManagedNotificationEvent.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ManagedNotificationEvent.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code>.</p>
    /// This field is required.
    pub fn managed_notification_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.managed_notification_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code>.</p>
    pub fn set_managed_notification_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.managed_notification_configuration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code>.</p>
    pub fn get_managed_notification_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.managed_notification_configuration_arn
    }
    /// <p>The account that related to the <code>ManagedNotificationEvent</code>.</p>
    /// This field is required.
    pub fn related_account(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.related_account = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account that related to the <code>ManagedNotificationEvent</code>.</p>
    pub fn set_related_account(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.related_account = input;
        self
    }
    /// <p>The account that related to the <code>ManagedNotificationEvent</code>.</p>
    pub fn get_related_account(&self) -> &::std::option::Option<::std::string::String> {
        &self.related_account
    }
    /// <p>The creation time of the <code>ManagedNotificationEvent</code>.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation time of the <code>ManagedNotificationEvent</code>.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The creation time of the <code>ManagedNotificationEvent</code>.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>A short summary of a <code>ManagedNotificationEvent</code>. This is only used when listing managed notification events.</p>
    /// This field is required.
    pub fn notification_event(mut self, input: crate::types::ManagedNotificationEventSummary) -> Self {
        self.notification_event = ::std::option::Option::Some(input);
        self
    }
    /// <p>A short summary of a <code>ManagedNotificationEvent</code>. This is only used when listing managed notification events.</p>
    pub fn set_notification_event(mut self, input: ::std::option::Option<crate::types::ManagedNotificationEventSummary>) -> Self {
        self.notification_event = input;
        self
    }
    /// <p>A short summary of a <code>ManagedNotificationEvent</code>. This is only used when listing managed notification events.</p>
    pub fn get_notification_event(&self) -> &::std::option::Option<crate::types::ManagedNotificationEventSummary> {
        &self.notification_event
    }
    /// <p>The notifications aggregation type.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>AGGREGATE</code></p>
    /// <ul>
    /// <li>
    /// <p>The notification event is an aggregate notification. Aggregate notifications summarize grouped events over a specified time period.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>CHILD</code></p>
    /// <ul>
    /// <li>
    /// <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>. Any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>NONE</code></p>
    /// <ul>
    /// <li>
    /// <p>The notification isn't aggregated.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn aggregation_event_type(mut self, input: crate::types::AggregationEventType) -> Self {
        self.aggregation_event_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The notifications aggregation type.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>AGGREGATE</code></p>
    /// <ul>
    /// <li>
    /// <p>The notification event is an aggregate notification. Aggregate notifications summarize grouped events over a specified time period.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>CHILD</code></p>
    /// <ul>
    /// <li>
    /// <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>. Any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>NONE</code></p>
    /// <ul>
    /// <li>
    /// <p>The notification isn't aggregated.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn set_aggregation_event_type(mut self, input: ::std::option::Option<crate::types::AggregationEventType>) -> Self {
        self.aggregation_event_type = input;
        self
    }
    /// <p>The notifications aggregation type.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>AGGREGATE</code></p>
    /// <ul>
    /// <li>
    /// <p>The notification event is an aggregate notification. Aggregate notifications summarize grouped events over a specified time period.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>CHILD</code></p>
    /// <ul>
    /// <li>
    /// <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>. Any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>NONE</code></p>
    /// <ul>
    /// <li>
    /// <p>The notification isn't aggregated.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn get_aggregation_event_type(&self) -> &::std::option::Option<crate::types::AggregationEventType> {
        &self.aggregation_event_type
    }
    /// <p>The Organizational Unit Id that an Amazon Web Services account belongs to.</p>
    pub fn organizational_unit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organizational_unit_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Organizational Unit Id that an Amazon Web Services account belongs to.</p>
    pub fn set_organizational_unit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organizational_unit_id = input;
        self
    }
    /// <p>The Organizational Unit Id that an Amazon Web Services account belongs to.</p>
    pub fn get_organizational_unit_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.organizational_unit_id
    }
    /// <p>Provides additional information about the aggregation key.</p>
    pub fn aggregation_summary(mut self, input: crate::types::AggregationSummary) -> Self {
        self.aggregation_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides additional information about the aggregation key.</p>
    pub fn set_aggregation_summary(mut self, input: ::std::option::Option<crate::types::AggregationSummary>) -> Self {
        self.aggregation_summary = input;
        self
    }
    /// <p>Provides additional information about the aggregation key.</p>
    pub fn get_aggregation_summary(&self) -> &::std::option::Option<crate::types::AggregationSummary> {
        &self.aggregation_summary
    }
    /// Appends an item to `aggregated_notification_regions`.
    ///
    /// To override the contents of this collection use [`set_aggregated_notification_regions`](Self::set_aggregated_notification_regions).
    ///
    /// <p>The list of the regions where the aggregated notifications in this <code>NotificationEvent</code> originated.</p>
    pub fn aggregated_notification_regions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.aggregated_notification_regions.unwrap_or_default();
        v.push(input.into());
        self.aggregated_notification_regions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of the regions where the aggregated notifications in this <code>NotificationEvent</code> originated.</p>
    pub fn set_aggregated_notification_regions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.aggregated_notification_regions = input;
        self
    }
    /// <p>The list of the regions where the aggregated notifications in this <code>NotificationEvent</code> originated.</p>
    pub fn get_aggregated_notification_regions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.aggregated_notification_regions
    }
    /// Consumes the builder and constructs a [`ManagedNotificationEventOverview`](crate::types::ManagedNotificationEventOverview).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::ManagedNotificationEventOverviewBuilder::arn)
    /// - [`managed_notification_configuration_arn`](crate::types::builders::ManagedNotificationEventOverviewBuilder::managed_notification_configuration_arn)
    /// - [`related_account`](crate::types::builders::ManagedNotificationEventOverviewBuilder::related_account)
    /// - [`creation_time`](crate::types::builders::ManagedNotificationEventOverviewBuilder::creation_time)
    pub fn build(self) -> ::std::result::Result<crate::types::ManagedNotificationEventOverview, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ManagedNotificationEventOverview {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building ManagedNotificationEventOverview",
                )
            })?,
            managed_notification_configuration_arn: self.managed_notification_configuration_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "managed_notification_configuration_arn",
                    "managed_notification_configuration_arn was not specified but it is required when building ManagedNotificationEventOverview",
                )
            })?,
            related_account: self.related_account.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "related_account",
                    "related_account was not specified but it is required when building ManagedNotificationEventOverview",
                )
            })?,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building ManagedNotificationEventOverview",
                )
            })?,
            notification_event: self.notification_event,
            aggregation_event_type: self.aggregation_event_type,
            organizational_unit_id: self.organizational_unit_id,
            aggregation_summary: self.aggregation_summary,
            aggregated_notification_regions: self.aggregated_notification_regions,
        })
    }
}
