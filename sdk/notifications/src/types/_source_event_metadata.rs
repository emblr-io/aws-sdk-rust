// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the metadata for a source event.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-events-structure.html">Event structure reference</a> in the <i>Amazon EventBridge User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SourceEventMetadata {
    /// <p>The version of the type of event.</p>
    pub event_type_version: ::std::string::String,
    /// <p>The source event id.</p>
    pub source_event_id: ::std::string::String,
    /// <p>The Region the event originated from.</p>
    pub event_origin_region: ::std::option::Option<::std::string::String>,
    /// <p>The primary Amazon Web Services account of <code>SourceEvent</code>.</p>
    pub related_account: ::std::string::String,
    /// <p>The Amazon Web Services service the event originates from. For example <code>aws.cloudwatch</code>.</p>
    pub source: ::std::string::String,
    /// <p>The date and time the source event occurred. This is based on the Source Event.</p>
    pub event_occurrence_time: ::aws_smithy_types::DateTime,
    /// <p>The type of event. For example, an Amazon CloudWatch state change.</p>
    pub event_type: ::std::string::String,
    /// <p>A list of resources related to this <code>NotificationEvent</code>.</p>
    pub related_resources: ::std::vec::Vec<crate::types::Resource>,
}
impl SourceEventMetadata {
    /// <p>The version of the type of event.</p>
    pub fn event_type_version(&self) -> &str {
        use std::ops::Deref;
        self.event_type_version.deref()
    }
    /// <p>The source event id.</p>
    pub fn source_event_id(&self) -> &str {
        use std::ops::Deref;
        self.source_event_id.deref()
    }
    /// <p>The Region the event originated from.</p>
    pub fn event_origin_region(&self) -> ::std::option::Option<&str> {
        self.event_origin_region.as_deref()
    }
    /// <p>The primary Amazon Web Services account of <code>SourceEvent</code>.</p>
    pub fn related_account(&self) -> &str {
        use std::ops::Deref;
        self.related_account.deref()
    }
    /// <p>The Amazon Web Services service the event originates from. For example <code>aws.cloudwatch</code>.</p>
    pub fn source(&self) -> &str {
        use std::ops::Deref;
        self.source.deref()
    }
    /// <p>The date and time the source event occurred. This is based on the Source Event.</p>
    pub fn event_occurrence_time(&self) -> &::aws_smithy_types::DateTime {
        &self.event_occurrence_time
    }
    /// <p>The type of event. For example, an Amazon CloudWatch state change.</p>
    pub fn event_type(&self) -> &str {
        use std::ops::Deref;
        self.event_type.deref()
    }
    /// <p>A list of resources related to this <code>NotificationEvent</code>.</p>
    pub fn related_resources(&self) -> &[crate::types::Resource] {
        use std::ops::Deref;
        self.related_resources.deref()
    }
}
impl SourceEventMetadata {
    /// Creates a new builder-style object to manufacture [`SourceEventMetadata`](crate::types::SourceEventMetadata).
    pub fn builder() -> crate::types::builders::SourceEventMetadataBuilder {
        crate::types::builders::SourceEventMetadataBuilder::default()
    }
}

/// A builder for [`SourceEventMetadata`](crate::types::SourceEventMetadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SourceEventMetadataBuilder {
    pub(crate) event_type_version: ::std::option::Option<::std::string::String>,
    pub(crate) source_event_id: ::std::option::Option<::std::string::String>,
    pub(crate) event_origin_region: ::std::option::Option<::std::string::String>,
    pub(crate) related_account: ::std::option::Option<::std::string::String>,
    pub(crate) source: ::std::option::Option<::std::string::String>,
    pub(crate) event_occurrence_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) event_type: ::std::option::Option<::std::string::String>,
    pub(crate) related_resources: ::std::option::Option<::std::vec::Vec<crate::types::Resource>>,
}
impl SourceEventMetadataBuilder {
    /// <p>The version of the type of event.</p>
    /// This field is required.
    pub fn event_type_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_type_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the type of event.</p>
    pub fn set_event_type_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_type_version = input;
        self
    }
    /// <p>The version of the type of event.</p>
    pub fn get_event_type_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_type_version
    }
    /// <p>The source event id.</p>
    /// This field is required.
    pub fn source_event_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_event_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source event id.</p>
    pub fn set_source_event_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_event_id = input;
        self
    }
    /// <p>The source event id.</p>
    pub fn get_source_event_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_event_id
    }
    /// <p>The Region the event originated from.</p>
    pub fn event_origin_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_origin_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Region the event originated from.</p>
    pub fn set_event_origin_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_origin_region = input;
        self
    }
    /// <p>The Region the event originated from.</p>
    pub fn get_event_origin_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_origin_region
    }
    /// <p>The primary Amazon Web Services account of <code>SourceEvent</code>.</p>
    /// This field is required.
    pub fn related_account(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.related_account = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The primary Amazon Web Services account of <code>SourceEvent</code>.</p>
    pub fn set_related_account(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.related_account = input;
        self
    }
    /// <p>The primary Amazon Web Services account of <code>SourceEvent</code>.</p>
    pub fn get_related_account(&self) -> &::std::option::Option<::std::string::String> {
        &self.related_account
    }
    /// <p>The Amazon Web Services service the event originates from. For example <code>aws.cloudwatch</code>.</p>
    /// This field is required.
    pub fn source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services service the event originates from. For example <code>aws.cloudwatch</code>.</p>
    pub fn set_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// <p>The Amazon Web Services service the event originates from. For example <code>aws.cloudwatch</code>.</p>
    pub fn get_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.source
    }
    /// <p>The date and time the source event occurred. This is based on the Source Event.</p>
    /// This field is required.
    pub fn event_occurrence_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.event_occurrence_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the source event occurred. This is based on the Source Event.</p>
    pub fn set_event_occurrence_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.event_occurrence_time = input;
        self
    }
    /// <p>The date and time the source event occurred. This is based on the Source Event.</p>
    pub fn get_event_occurrence_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.event_occurrence_time
    }
    /// <p>The type of event. For example, an Amazon CloudWatch state change.</p>
    /// This field is required.
    pub fn event_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of event. For example, an Amazon CloudWatch state change.</p>
    pub fn set_event_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_type = input;
        self
    }
    /// <p>The type of event. For example, an Amazon CloudWatch state change.</p>
    pub fn get_event_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_type
    }
    /// Appends an item to `related_resources`.
    ///
    /// To override the contents of this collection use [`set_related_resources`](Self::set_related_resources).
    ///
    /// <p>A list of resources related to this <code>NotificationEvent</code>.</p>
    pub fn related_resources(mut self, input: crate::types::Resource) -> Self {
        let mut v = self.related_resources.unwrap_or_default();
        v.push(input);
        self.related_resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of resources related to this <code>NotificationEvent</code>.</p>
    pub fn set_related_resources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Resource>>) -> Self {
        self.related_resources = input;
        self
    }
    /// <p>A list of resources related to this <code>NotificationEvent</code>.</p>
    pub fn get_related_resources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Resource>> {
        &self.related_resources
    }
    /// Consumes the builder and constructs a [`SourceEventMetadata`](crate::types::SourceEventMetadata).
    /// This method will fail if any of the following fields are not set:
    /// - [`event_type_version`](crate::types::builders::SourceEventMetadataBuilder::event_type_version)
    /// - [`source_event_id`](crate::types::builders::SourceEventMetadataBuilder::source_event_id)
    /// - [`related_account`](crate::types::builders::SourceEventMetadataBuilder::related_account)
    /// - [`source`](crate::types::builders::SourceEventMetadataBuilder::source)
    /// - [`event_occurrence_time`](crate::types::builders::SourceEventMetadataBuilder::event_occurrence_time)
    /// - [`event_type`](crate::types::builders::SourceEventMetadataBuilder::event_type)
    /// - [`related_resources`](crate::types::builders::SourceEventMetadataBuilder::related_resources)
    pub fn build(self) -> ::std::result::Result<crate::types::SourceEventMetadata, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SourceEventMetadata {
            event_type_version: self.event_type_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_type_version",
                    "event_type_version was not specified but it is required when building SourceEventMetadata",
                )
            })?,
            source_event_id: self.source_event_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_event_id",
                    "source_event_id was not specified but it is required when building SourceEventMetadata",
                )
            })?,
            event_origin_region: self.event_origin_region,
            related_account: self.related_account.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "related_account",
                    "related_account was not specified but it is required when building SourceEventMetadata",
                )
            })?,
            source: self.source.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source",
                    "source was not specified but it is required when building SourceEventMetadata",
                )
            })?,
            event_occurrence_time: self.event_occurrence_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_occurrence_time",
                    "event_occurrence_time was not specified but it is required when building SourceEventMetadata",
                )
            })?,
            event_type: self.event_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_type",
                    "event_type was not specified but it is required when building SourceEventMetadata",
                )
            })?,
            related_resources: self.related_resources.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "related_resources",
                    "related_resources was not specified but it is required when building SourceEventMetadata",
                )
            })?,
        })
    }
}
