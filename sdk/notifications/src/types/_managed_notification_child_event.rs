// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A ManagedNotificationChildEvent is a notification-focused representation of an event. They contain semantic information used to create aggregated or non-aggregated end-user notifications.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ManagedNotificationChildEvent {
    /// <p>The schema version of the Managed Notification Child Event.</p>
    pub schema_version: crate::types::SchemaVersion,
    /// <p>The unique identifier for a Managed Notification Child Event.</p>
    pub id: ::std::string::String,
    /// <p>Describes the components of a notification message.</p>
    pub message_components: ::std::option::Option<crate::types::MessageComponents>,
    /// <p>The source event URL.</p>
    pub source_event_detail_url: ::std::option::Option<::std::string::String>,
    /// <p>The detailed URL for the source event.</p>
    pub source_event_detail_url_display_text: ::std::option::Option<::std::string::String>,
    /// <p>The type of event causing the notification.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALERT</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an event where something was triggered, initiated, reopened, deployed, or a threshold was breached.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>WARNING</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an event where an issue is about to arise. For example, something is approaching a threshold.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>ANNOUNCEMENT</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an important event. For example, a step in a workflow or escalation path or that a workflow was updated.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>INFORMATIONAL</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about informational messages. For example, recommendations, service announcements, or reminders.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub notification_type: crate::types::NotificationType,
    /// <p>The assesed nature of the event.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>HEALTHY</code></p>
    /// <ul>
    /// <li>
    /// <p>All <code>EventRules</code> are <code>ACTIVE</code>.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>UNHEALTHY</code></p>
    /// <ul>
    /// <li>
    /// <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub event_status: ::std::option::Option<crate::types::EventStatus>,
    /// <p>The Amazon Resource Name (ARN) of the ManagedNotificationEvent that is associated with this Managed Notification Child Event.</p>
    pub aggregate_managed_notification_event_arn: ::std::string::String,
    /// <p>The notification event start time.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The end time of the event.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A list of text values.</p>
    pub text_parts: ::std::collections::HashMap<::std::string::String, crate::types::TextPartValue>,
    /// <p>The Organizational Unit Id that an Amazon Web Services account belongs to.</p>
    pub organizational_unit_id: ::std::option::Option<::std::string::String>,
    /// <p>Provides detailed information about the dimensions used for event summarization and aggregation.</p>
    pub aggregation_detail: ::std::option::Option<crate::types::AggregationDetail>,
}
impl ManagedNotificationChildEvent {
    /// <p>The schema version of the Managed Notification Child Event.</p>
    pub fn schema_version(&self) -> &crate::types::SchemaVersion {
        &self.schema_version
    }
    /// <p>The unique identifier for a Managed Notification Child Event.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>Describes the components of a notification message.</p>
    pub fn message_components(&self) -> ::std::option::Option<&crate::types::MessageComponents> {
        self.message_components.as_ref()
    }
    /// <p>The source event URL.</p>
    pub fn source_event_detail_url(&self) -> ::std::option::Option<&str> {
        self.source_event_detail_url.as_deref()
    }
    /// <p>The detailed URL for the source event.</p>
    pub fn source_event_detail_url_display_text(&self) -> ::std::option::Option<&str> {
        self.source_event_detail_url_display_text.as_deref()
    }
    /// <p>The type of event causing the notification.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALERT</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an event where something was triggered, initiated, reopened, deployed, or a threshold was breached.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>WARNING</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an event where an issue is about to arise. For example, something is approaching a threshold.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>ANNOUNCEMENT</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an important event. For example, a step in a workflow or escalation path or that a workflow was updated.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>INFORMATIONAL</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about informational messages. For example, recommendations, service announcements, or reminders.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn notification_type(&self) -> &crate::types::NotificationType {
        &self.notification_type
    }
    /// <p>The assesed nature of the event.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>HEALTHY</code></p>
    /// <ul>
    /// <li>
    /// <p>All <code>EventRules</code> are <code>ACTIVE</code>.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>UNHEALTHY</code></p>
    /// <ul>
    /// <li>
    /// <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn event_status(&self) -> ::std::option::Option<&crate::types::EventStatus> {
        self.event_status.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the ManagedNotificationEvent that is associated with this Managed Notification Child Event.</p>
    pub fn aggregate_managed_notification_event_arn(&self) -> &str {
        use std::ops::Deref;
        self.aggregate_managed_notification_event_arn.deref()
    }
    /// <p>The notification event start time.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The end time of the event.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>A list of text values.</p>
    pub fn text_parts(&self) -> &::std::collections::HashMap<::std::string::String, crate::types::TextPartValue> {
        &self.text_parts
    }
    /// <p>The Organizational Unit Id that an Amazon Web Services account belongs to.</p>
    pub fn organizational_unit_id(&self) -> ::std::option::Option<&str> {
        self.organizational_unit_id.as_deref()
    }
    /// <p>Provides detailed information about the dimensions used for event summarization and aggregation.</p>
    pub fn aggregation_detail(&self) -> ::std::option::Option<&crate::types::AggregationDetail> {
        self.aggregation_detail.as_ref()
    }
}
impl ManagedNotificationChildEvent {
    /// Creates a new builder-style object to manufacture [`ManagedNotificationChildEvent`](crate::types::ManagedNotificationChildEvent).
    pub fn builder() -> crate::types::builders::ManagedNotificationChildEventBuilder {
        crate::types::builders::ManagedNotificationChildEventBuilder::default()
    }
}

/// A builder for [`ManagedNotificationChildEvent`](crate::types::ManagedNotificationChildEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ManagedNotificationChildEventBuilder {
    pub(crate) schema_version: ::std::option::Option<crate::types::SchemaVersion>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) message_components: ::std::option::Option<crate::types::MessageComponents>,
    pub(crate) source_event_detail_url: ::std::option::Option<::std::string::String>,
    pub(crate) source_event_detail_url_display_text: ::std::option::Option<::std::string::String>,
    pub(crate) notification_type: ::std::option::Option<crate::types::NotificationType>,
    pub(crate) event_status: ::std::option::Option<crate::types::EventStatus>,
    pub(crate) aggregate_managed_notification_event_arn: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) text_parts: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::TextPartValue>>,
    pub(crate) organizational_unit_id: ::std::option::Option<::std::string::String>,
    pub(crate) aggregation_detail: ::std::option::Option<crate::types::AggregationDetail>,
}
impl ManagedNotificationChildEventBuilder {
    /// <p>The schema version of the Managed Notification Child Event.</p>
    /// This field is required.
    pub fn schema_version(mut self, input: crate::types::SchemaVersion) -> Self {
        self.schema_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The schema version of the Managed Notification Child Event.</p>
    pub fn set_schema_version(mut self, input: ::std::option::Option<crate::types::SchemaVersion>) -> Self {
        self.schema_version = input;
        self
    }
    /// <p>The schema version of the Managed Notification Child Event.</p>
    pub fn get_schema_version(&self) -> &::std::option::Option<crate::types::SchemaVersion> {
        &self.schema_version
    }
    /// <p>The unique identifier for a Managed Notification Child Event.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for a Managed Notification Child Event.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier for a Managed Notification Child Event.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Describes the components of a notification message.</p>
    /// This field is required.
    pub fn message_components(mut self, input: crate::types::MessageComponents) -> Self {
        self.message_components = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the components of a notification message.</p>
    pub fn set_message_components(mut self, input: ::std::option::Option<crate::types::MessageComponents>) -> Self {
        self.message_components = input;
        self
    }
    /// <p>Describes the components of a notification message.</p>
    pub fn get_message_components(&self) -> &::std::option::Option<crate::types::MessageComponents> {
        &self.message_components
    }
    /// <p>The source event URL.</p>
    pub fn source_event_detail_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_event_detail_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source event URL.</p>
    pub fn set_source_event_detail_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_event_detail_url = input;
        self
    }
    /// <p>The source event URL.</p>
    pub fn get_source_event_detail_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_event_detail_url
    }
    /// <p>The detailed URL for the source event.</p>
    pub fn source_event_detail_url_display_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_event_detail_url_display_text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The detailed URL for the source event.</p>
    pub fn set_source_event_detail_url_display_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_event_detail_url_display_text = input;
        self
    }
    /// <p>The detailed URL for the source event.</p>
    pub fn get_source_event_detail_url_display_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_event_detail_url_display_text
    }
    /// <p>The type of event causing the notification.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALERT</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an event where something was triggered, initiated, reopened, deployed, or a threshold was breached.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>WARNING</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an event where an issue is about to arise. For example, something is approaching a threshold.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>ANNOUNCEMENT</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an important event. For example, a step in a workflow or escalation path or that a workflow was updated.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>INFORMATIONAL</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about informational messages. For example, recommendations, service announcements, or reminders.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    /// This field is required.
    pub fn notification_type(mut self, input: crate::types::NotificationType) -> Self {
        self.notification_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of event causing the notification.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALERT</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an event where something was triggered, initiated, reopened, deployed, or a threshold was breached.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>WARNING</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an event where an issue is about to arise. For example, something is approaching a threshold.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>ANNOUNCEMENT</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an important event. For example, a step in a workflow or escalation path or that a workflow was updated.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>INFORMATIONAL</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about informational messages. For example, recommendations, service announcements, or reminders.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn set_notification_type(mut self, input: ::std::option::Option<crate::types::NotificationType>) -> Self {
        self.notification_type = input;
        self
    }
    /// <p>The type of event causing the notification.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALERT</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an event where something was triggered, initiated, reopened, deployed, or a threshold was breached.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>WARNING</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an event where an issue is about to arise. For example, something is approaching a threshold.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>ANNOUNCEMENT</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an important event. For example, a step in a workflow or escalation path or that a workflow was updated.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>INFORMATIONAL</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about informational messages. For example, recommendations, service announcements, or reminders.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn get_notification_type(&self) -> &::std::option::Option<crate::types::NotificationType> {
        &self.notification_type
    }
    /// <p>The assesed nature of the event.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>HEALTHY</code></p>
    /// <ul>
    /// <li>
    /// <p>All <code>EventRules</code> are <code>ACTIVE</code>.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>UNHEALTHY</code></p>
    /// <ul>
    /// <li>
    /// <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn event_status(mut self, input: crate::types::EventStatus) -> Self {
        self.event_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The assesed nature of the event.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>HEALTHY</code></p>
    /// <ul>
    /// <li>
    /// <p>All <code>EventRules</code> are <code>ACTIVE</code>.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>UNHEALTHY</code></p>
    /// <ul>
    /// <li>
    /// <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn set_event_status(mut self, input: ::std::option::Option<crate::types::EventStatus>) -> Self {
        self.event_status = input;
        self
    }
    /// <p>The assesed nature of the event.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>HEALTHY</code></p>
    /// <ul>
    /// <li>
    /// <p>All <code>EventRules</code> are <code>ACTIVE</code>.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>UNHEALTHY</code></p>
    /// <ul>
    /// <li>
    /// <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn get_event_status(&self) -> &::std::option::Option<crate::types::EventStatus> {
        &self.event_status
    }
    /// <p>The Amazon Resource Name (ARN) of the ManagedNotificationEvent that is associated with this Managed Notification Child Event.</p>
    /// This field is required.
    pub fn aggregate_managed_notification_event_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aggregate_managed_notification_event_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ManagedNotificationEvent that is associated with this Managed Notification Child Event.</p>
    pub fn set_aggregate_managed_notification_event_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aggregate_managed_notification_event_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ManagedNotificationEvent that is associated with this Managed Notification Child Event.</p>
    pub fn get_aggregate_managed_notification_event_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.aggregate_managed_notification_event_arn
    }
    /// <p>The notification event start time.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The notification event start time.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The notification event start time.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The end time of the event.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end time of the event.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The end time of the event.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// Adds a key-value pair to `text_parts`.
    ///
    /// To override the contents of this collection use [`set_text_parts`](Self::set_text_parts).
    ///
    /// <p>A list of text values.</p>
    pub fn text_parts(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::TextPartValue) -> Self {
        let mut hash_map = self.text_parts.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.text_parts = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A list of text values.</p>
    pub fn set_text_parts(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::TextPartValue>>,
    ) -> Self {
        self.text_parts = input;
        self
    }
    /// <p>A list of text values.</p>
    pub fn get_text_parts(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::TextPartValue>> {
        &self.text_parts
    }
    /// <p>The Organizational Unit Id that an Amazon Web Services account belongs to.</p>
    pub fn organizational_unit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organizational_unit_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Organizational Unit Id that an Amazon Web Services account belongs to.</p>
    pub fn set_organizational_unit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organizational_unit_id = input;
        self
    }
    /// <p>The Organizational Unit Id that an Amazon Web Services account belongs to.</p>
    pub fn get_organizational_unit_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.organizational_unit_id
    }
    /// <p>Provides detailed information about the dimensions used for event summarization and aggregation.</p>
    pub fn aggregation_detail(mut self, input: crate::types::AggregationDetail) -> Self {
        self.aggregation_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides detailed information about the dimensions used for event summarization and aggregation.</p>
    pub fn set_aggregation_detail(mut self, input: ::std::option::Option<crate::types::AggregationDetail>) -> Self {
        self.aggregation_detail = input;
        self
    }
    /// <p>Provides detailed information about the dimensions used for event summarization and aggregation.</p>
    pub fn get_aggregation_detail(&self) -> &::std::option::Option<crate::types::AggregationDetail> {
        &self.aggregation_detail
    }
    /// Consumes the builder and constructs a [`ManagedNotificationChildEvent`](crate::types::ManagedNotificationChildEvent).
    /// This method will fail if any of the following fields are not set:
    /// - [`schema_version`](crate::types::builders::ManagedNotificationChildEventBuilder::schema_version)
    /// - [`id`](crate::types::builders::ManagedNotificationChildEventBuilder::id)
    /// - [`notification_type`](crate::types::builders::ManagedNotificationChildEventBuilder::notification_type)
    /// - [`aggregate_managed_notification_event_arn`](crate::types::builders::ManagedNotificationChildEventBuilder::aggregate_managed_notification_event_arn)
    /// - [`text_parts`](crate::types::builders::ManagedNotificationChildEventBuilder::text_parts)
    pub fn build(self) -> ::std::result::Result<crate::types::ManagedNotificationChildEvent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ManagedNotificationChildEvent {
            schema_version: self.schema_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "schema_version",
                    "schema_version was not specified but it is required when building ManagedNotificationChildEvent",
                )
            })?,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building ManagedNotificationChildEvent",
                )
            })?,
            message_components: self.message_components,
            source_event_detail_url: self.source_event_detail_url,
            source_event_detail_url_display_text: self.source_event_detail_url_display_text,
            notification_type: self.notification_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "notification_type",
                    "notification_type was not specified but it is required when building ManagedNotificationChildEvent",
                )
            })?,
            event_status: self.event_status,
            aggregate_managed_notification_event_arn: self.aggregate_managed_notification_event_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "aggregate_managed_notification_event_arn",
                    "aggregate_managed_notification_event_arn was not specified but it is required when building ManagedNotificationChildEvent",
                )
            })?,
            start_time: self.start_time,
            end_time: self.end_time,
            text_parts: self.text_parts.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "text_parts",
                    "text_parts was not specified but it is required when building ManagedNotificationChildEvent",
                )
            })?,
            organizational_unit_id: self.organizational_unit_id,
            aggregation_detail: self.aggregation_detail,
        })
    }
}
