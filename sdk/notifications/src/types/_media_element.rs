// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a media element.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MediaElement {
    /// <p>The unique ID for the media.</p>
    pub media_id: ::std::string::String,
    /// <p>The type of media.</p>
    pub r#type: crate::types::MediaElementType,
    /// <p>The URL of the media.</p>
    pub url: ::std::string::String,
    /// <p>The caption of the media.</p>
    pub caption: ::std::string::String,
}
impl MediaElement {
    /// <p>The unique ID for the media.</p>
    pub fn media_id(&self) -> &str {
        use std::ops::Deref;
        self.media_id.deref()
    }
    /// <p>The type of media.</p>
    pub fn r#type(&self) -> &crate::types::MediaElementType {
        &self.r#type
    }
    /// <p>The URL of the media.</p>
    pub fn url(&self) -> &str {
        use std::ops::Deref;
        self.url.deref()
    }
    /// <p>The caption of the media.</p>
    pub fn caption(&self) -> &str {
        use std::ops::Deref;
        self.caption.deref()
    }
}
impl MediaElement {
    /// Creates a new builder-style object to manufacture [`MediaElement`](crate::types::MediaElement).
    pub fn builder() -> crate::types::builders::MediaElementBuilder {
        crate::types::builders::MediaElementBuilder::default()
    }
}

/// A builder for [`MediaElement`](crate::types::MediaElement).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MediaElementBuilder {
    pub(crate) media_id: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::MediaElementType>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) caption: ::std::option::Option<::std::string::String>,
}
impl MediaElementBuilder {
    /// <p>The unique ID for the media.</p>
    /// This field is required.
    pub fn media_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.media_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID for the media.</p>
    pub fn set_media_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.media_id = input;
        self
    }
    /// <p>The unique ID for the media.</p>
    pub fn get_media_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.media_id
    }
    /// <p>The type of media.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::MediaElementType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of media.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::MediaElementType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of media.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::MediaElementType> {
        &self.r#type
    }
    /// <p>The URL of the media.</p>
    /// This field is required.
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of the media.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The URL of the media.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// <p>The caption of the media.</p>
    /// This field is required.
    pub fn caption(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.caption = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The caption of the media.</p>
    pub fn set_caption(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.caption = input;
        self
    }
    /// <p>The caption of the media.</p>
    pub fn get_caption(&self) -> &::std::option::Option<::std::string::String> {
        &self.caption
    }
    /// Consumes the builder and constructs a [`MediaElement`](crate::types::MediaElement).
    /// This method will fail if any of the following fields are not set:
    /// - [`media_id`](crate::types::builders::MediaElementBuilder::media_id)
    /// - [`r#type`](crate::types::builders::MediaElementBuilder::type)
    /// - [`url`](crate::types::builders::MediaElementBuilder::url)
    /// - [`caption`](crate::types::builders::MediaElementBuilder::caption)
    pub fn build(self) -> ::std::result::Result<crate::types::MediaElement, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MediaElement {
            media_id: self.media_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "media_id",
                    "media_id was not specified but it is required when building MediaElement",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building MediaElement",
                )
            })?,
            url: self.url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "url",
                    "url was not specified but it is required when building MediaElement",
                )
            })?,
            caption: self.caption.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "caption",
                    "caption was not specified but it is required when building MediaElement",
                )
            })?,
        })
    }
}
