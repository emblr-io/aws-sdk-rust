// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides additional information about the aggregation key.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AggregationSummary {
    /// <p>Indicates the number of events associated with the aggregation key.</p>
    pub event_count: i32,
    /// <p>Indicates the criteria or rules by which notifications have been grouped together.</p>
    pub aggregated_by: ::std::vec::Vec<crate::types::AggregationKey>,
    /// <p>Indicates the Amazon Web Services accounts in the aggregation key.</p>
    pub aggregated_accounts: ::std::option::Option<crate::types::SummarizationDimensionOverview>,
    /// <p>Indicates the Amazon Web Services Regions in the aggregation key.</p>
    pub aggregated_regions: ::std::option::Option<crate::types::SummarizationDimensionOverview>,
    /// <p>Indicates the collection of organizational units that are involved in the aggregation key.</p>
    pub aggregated_organizational_units: ::std::option::Option<crate::types::SummarizationDimensionOverview>,
    /// <p>List of additional dimensions used to group and summarize data.</p>
    pub additional_summarization_dimensions: ::std::option::Option<::std::vec::Vec<crate::types::SummarizationDimensionOverview>>,
}
impl AggregationSummary {
    /// <p>Indicates the number of events associated with the aggregation key.</p>
    pub fn event_count(&self) -> i32 {
        self.event_count
    }
    /// <p>Indicates the criteria or rules by which notifications have been grouped together.</p>
    pub fn aggregated_by(&self) -> &[crate::types::AggregationKey] {
        use std::ops::Deref;
        self.aggregated_by.deref()
    }
    /// <p>Indicates the Amazon Web Services accounts in the aggregation key.</p>
    pub fn aggregated_accounts(&self) -> ::std::option::Option<&crate::types::SummarizationDimensionOverview> {
        self.aggregated_accounts.as_ref()
    }
    /// <p>Indicates the Amazon Web Services Regions in the aggregation key.</p>
    pub fn aggregated_regions(&self) -> ::std::option::Option<&crate::types::SummarizationDimensionOverview> {
        self.aggregated_regions.as_ref()
    }
    /// <p>Indicates the collection of organizational units that are involved in the aggregation key.</p>
    pub fn aggregated_organizational_units(&self) -> ::std::option::Option<&crate::types::SummarizationDimensionOverview> {
        self.aggregated_organizational_units.as_ref()
    }
    /// <p>List of additional dimensions used to group and summarize data.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.additional_summarization_dimensions.is_none()`.
    pub fn additional_summarization_dimensions(&self) -> &[crate::types::SummarizationDimensionOverview] {
        self.additional_summarization_dimensions.as_deref().unwrap_or_default()
    }
}
impl AggregationSummary {
    /// Creates a new builder-style object to manufacture [`AggregationSummary`](crate::types::AggregationSummary).
    pub fn builder() -> crate::types::builders::AggregationSummaryBuilder {
        crate::types::builders::AggregationSummaryBuilder::default()
    }
}

/// A builder for [`AggregationSummary`](crate::types::AggregationSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AggregationSummaryBuilder {
    pub(crate) event_count: ::std::option::Option<i32>,
    pub(crate) aggregated_by: ::std::option::Option<::std::vec::Vec<crate::types::AggregationKey>>,
    pub(crate) aggregated_accounts: ::std::option::Option<crate::types::SummarizationDimensionOverview>,
    pub(crate) aggregated_regions: ::std::option::Option<crate::types::SummarizationDimensionOverview>,
    pub(crate) aggregated_organizational_units: ::std::option::Option<crate::types::SummarizationDimensionOverview>,
    pub(crate) additional_summarization_dimensions: ::std::option::Option<::std::vec::Vec<crate::types::SummarizationDimensionOverview>>,
}
impl AggregationSummaryBuilder {
    /// <p>Indicates the number of events associated with the aggregation key.</p>
    /// This field is required.
    pub fn event_count(mut self, input: i32) -> Self {
        self.event_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the number of events associated with the aggregation key.</p>
    pub fn set_event_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.event_count = input;
        self
    }
    /// <p>Indicates the number of events associated with the aggregation key.</p>
    pub fn get_event_count(&self) -> &::std::option::Option<i32> {
        &self.event_count
    }
    /// Appends an item to `aggregated_by`.
    ///
    /// To override the contents of this collection use [`set_aggregated_by`](Self::set_aggregated_by).
    ///
    /// <p>Indicates the criteria or rules by which notifications have been grouped together.</p>
    pub fn aggregated_by(mut self, input: crate::types::AggregationKey) -> Self {
        let mut v = self.aggregated_by.unwrap_or_default();
        v.push(input);
        self.aggregated_by = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates the criteria or rules by which notifications have been grouped together.</p>
    pub fn set_aggregated_by(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AggregationKey>>) -> Self {
        self.aggregated_by = input;
        self
    }
    /// <p>Indicates the criteria or rules by which notifications have been grouped together.</p>
    pub fn get_aggregated_by(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AggregationKey>> {
        &self.aggregated_by
    }
    /// <p>Indicates the Amazon Web Services accounts in the aggregation key.</p>
    /// This field is required.
    pub fn aggregated_accounts(mut self, input: crate::types::SummarizationDimensionOverview) -> Self {
        self.aggregated_accounts = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the Amazon Web Services accounts in the aggregation key.</p>
    pub fn set_aggregated_accounts(mut self, input: ::std::option::Option<crate::types::SummarizationDimensionOverview>) -> Self {
        self.aggregated_accounts = input;
        self
    }
    /// <p>Indicates the Amazon Web Services accounts in the aggregation key.</p>
    pub fn get_aggregated_accounts(&self) -> &::std::option::Option<crate::types::SummarizationDimensionOverview> {
        &self.aggregated_accounts
    }
    /// <p>Indicates the Amazon Web Services Regions in the aggregation key.</p>
    /// This field is required.
    pub fn aggregated_regions(mut self, input: crate::types::SummarizationDimensionOverview) -> Self {
        self.aggregated_regions = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the Amazon Web Services Regions in the aggregation key.</p>
    pub fn set_aggregated_regions(mut self, input: ::std::option::Option<crate::types::SummarizationDimensionOverview>) -> Self {
        self.aggregated_regions = input;
        self
    }
    /// <p>Indicates the Amazon Web Services Regions in the aggregation key.</p>
    pub fn get_aggregated_regions(&self) -> &::std::option::Option<crate::types::SummarizationDimensionOverview> {
        &self.aggregated_regions
    }
    /// <p>Indicates the collection of organizational units that are involved in the aggregation key.</p>
    pub fn aggregated_organizational_units(mut self, input: crate::types::SummarizationDimensionOverview) -> Self {
        self.aggregated_organizational_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the collection of organizational units that are involved in the aggregation key.</p>
    pub fn set_aggregated_organizational_units(mut self, input: ::std::option::Option<crate::types::SummarizationDimensionOverview>) -> Self {
        self.aggregated_organizational_units = input;
        self
    }
    /// <p>Indicates the collection of organizational units that are involved in the aggregation key.</p>
    pub fn get_aggregated_organizational_units(&self) -> &::std::option::Option<crate::types::SummarizationDimensionOverview> {
        &self.aggregated_organizational_units
    }
    /// Appends an item to `additional_summarization_dimensions`.
    ///
    /// To override the contents of this collection use [`set_additional_summarization_dimensions`](Self::set_additional_summarization_dimensions).
    ///
    /// <p>List of additional dimensions used to group and summarize data.</p>
    pub fn additional_summarization_dimensions(mut self, input: crate::types::SummarizationDimensionOverview) -> Self {
        let mut v = self.additional_summarization_dimensions.unwrap_or_default();
        v.push(input);
        self.additional_summarization_dimensions = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of additional dimensions used to group and summarize data.</p>
    pub fn set_additional_summarization_dimensions(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::SummarizationDimensionOverview>>,
    ) -> Self {
        self.additional_summarization_dimensions = input;
        self
    }
    /// <p>List of additional dimensions used to group and summarize data.</p>
    pub fn get_additional_summarization_dimensions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SummarizationDimensionOverview>> {
        &self.additional_summarization_dimensions
    }
    /// Consumes the builder and constructs a [`AggregationSummary`](crate::types::AggregationSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`event_count`](crate::types::builders::AggregationSummaryBuilder::event_count)
    /// - [`aggregated_by`](crate::types::builders::AggregationSummaryBuilder::aggregated_by)
    pub fn build(self) -> ::std::result::Result<crate::types::AggregationSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AggregationSummary {
            event_count: self.event_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_count",
                    "event_count was not specified but it is required when building AggregationSummary",
                )
            })?,
            aggregated_by: self.aggregated_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "aggregated_by",
                    "aggregated_by was not specified but it is required when building AggregationSummary",
                )
            })?,
            aggregated_accounts: self.aggregated_accounts,
            aggregated_regions: self.aggregated_regions,
            aggregated_organizational_units: self.aggregated_organizational_units,
            additional_summarization_dimensions: self.additional_summarization_dimensions,
        })
    }
}
