// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a summary of channel associations for a managed notification configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ManagedNotificationChannelAssociationSummary {
    /// <p>The unique identifier for the notification channel.</p>
    pub channel_identifier: ::std::string::String,
    /// <p>The type of notification channel used for message delivery.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACCOUNT_CONTACT</code></p>
    /// <ul>
    /// <li>
    /// <p>Delivers notifications to Account Managed contacts through the User Notification Service.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>MOBILE</code></p>
    /// <ul>
    /// <li>
    /// <p>Delivers notifications through the Amazon Web Services Console Mobile Application to mobile devices.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>CHATBOT</code></p>
    /// <ul>
    /// <li>
    /// <p>Delivers notifications through Chatbot to collaboration platforms (Slack, Chime).</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>EMAIL</code></p>
    /// <ul>
    /// <li>
    /// <p>Delivers notifications to email addresses.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub channel_type: crate::types::ChannelType,
    /// <p>Controls whether users can modify channel associations for a notification configuration.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code></p>
    /// <ul>
    /// <li>
    /// <p>Users can associate or disassociate channels with the notification configuration.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>DISABLED</code></p>
    /// <ul>
    /// <li>
    /// <p>Users cannot associate or disassociate channels with the notification configuration.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub override_option: ::std::option::Option<crate::types::ChannelAssociationOverrideOption>,
}
impl ManagedNotificationChannelAssociationSummary {
    /// <p>The unique identifier for the notification channel.</p>
    pub fn channel_identifier(&self) -> &str {
        use std::ops::Deref;
        self.channel_identifier.deref()
    }
    /// <p>The type of notification channel used for message delivery.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACCOUNT_CONTACT</code></p>
    /// <ul>
    /// <li>
    /// <p>Delivers notifications to Account Managed contacts through the User Notification Service.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>MOBILE</code></p>
    /// <ul>
    /// <li>
    /// <p>Delivers notifications through the Amazon Web Services Console Mobile Application to mobile devices.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>CHATBOT</code></p>
    /// <ul>
    /// <li>
    /// <p>Delivers notifications through Chatbot to collaboration platforms (Slack, Chime).</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>EMAIL</code></p>
    /// <ul>
    /// <li>
    /// <p>Delivers notifications to email addresses.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn channel_type(&self) -> &crate::types::ChannelType {
        &self.channel_type
    }
    /// <p>Controls whether users can modify channel associations for a notification configuration.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code></p>
    /// <ul>
    /// <li>
    /// <p>Users can associate or disassociate channels with the notification configuration.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>DISABLED</code></p>
    /// <ul>
    /// <li>
    /// <p>Users cannot associate or disassociate channels with the notification configuration.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn override_option(&self) -> ::std::option::Option<&crate::types::ChannelAssociationOverrideOption> {
        self.override_option.as_ref()
    }
}
impl ManagedNotificationChannelAssociationSummary {
    /// Creates a new builder-style object to manufacture [`ManagedNotificationChannelAssociationSummary`](crate::types::ManagedNotificationChannelAssociationSummary).
    pub fn builder() -> crate::types::builders::ManagedNotificationChannelAssociationSummaryBuilder {
        crate::types::builders::ManagedNotificationChannelAssociationSummaryBuilder::default()
    }
}

/// A builder for [`ManagedNotificationChannelAssociationSummary`](crate::types::ManagedNotificationChannelAssociationSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ManagedNotificationChannelAssociationSummaryBuilder {
    pub(crate) channel_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) channel_type: ::std::option::Option<crate::types::ChannelType>,
    pub(crate) override_option: ::std::option::Option<crate::types::ChannelAssociationOverrideOption>,
}
impl ManagedNotificationChannelAssociationSummaryBuilder {
    /// <p>The unique identifier for the notification channel.</p>
    /// This field is required.
    pub fn channel_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the notification channel.</p>
    pub fn set_channel_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_identifier = input;
        self
    }
    /// <p>The unique identifier for the notification channel.</p>
    pub fn get_channel_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_identifier
    }
    /// <p>The type of notification channel used for message delivery.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACCOUNT_CONTACT</code></p>
    /// <ul>
    /// <li>
    /// <p>Delivers notifications to Account Managed contacts through the User Notification Service.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>MOBILE</code></p>
    /// <ul>
    /// <li>
    /// <p>Delivers notifications through the Amazon Web Services Console Mobile Application to mobile devices.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>CHATBOT</code></p>
    /// <ul>
    /// <li>
    /// <p>Delivers notifications through Chatbot to collaboration platforms (Slack, Chime).</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>EMAIL</code></p>
    /// <ul>
    /// <li>
    /// <p>Delivers notifications to email addresses.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    /// This field is required.
    pub fn channel_type(mut self, input: crate::types::ChannelType) -> Self {
        self.channel_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of notification channel used for message delivery.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACCOUNT_CONTACT</code></p>
    /// <ul>
    /// <li>
    /// <p>Delivers notifications to Account Managed contacts through the User Notification Service.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>MOBILE</code></p>
    /// <ul>
    /// <li>
    /// <p>Delivers notifications through the Amazon Web Services Console Mobile Application to mobile devices.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>CHATBOT</code></p>
    /// <ul>
    /// <li>
    /// <p>Delivers notifications through Chatbot to collaboration platforms (Slack, Chime).</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>EMAIL</code></p>
    /// <ul>
    /// <li>
    /// <p>Delivers notifications to email addresses.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn set_channel_type(mut self, input: ::std::option::Option<crate::types::ChannelType>) -> Self {
        self.channel_type = input;
        self
    }
    /// <p>The type of notification channel used for message delivery.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACCOUNT_CONTACT</code></p>
    /// <ul>
    /// <li>
    /// <p>Delivers notifications to Account Managed contacts through the User Notification Service.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>MOBILE</code></p>
    /// <ul>
    /// <li>
    /// <p>Delivers notifications through the Amazon Web Services Console Mobile Application to mobile devices.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>CHATBOT</code></p>
    /// <ul>
    /// <li>
    /// <p>Delivers notifications through Chatbot to collaboration platforms (Slack, Chime).</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>EMAIL</code></p>
    /// <ul>
    /// <li>
    /// <p>Delivers notifications to email addresses.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn get_channel_type(&self) -> &::std::option::Option<crate::types::ChannelType> {
        &self.channel_type
    }
    /// <p>Controls whether users can modify channel associations for a notification configuration.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code></p>
    /// <ul>
    /// <li>
    /// <p>Users can associate or disassociate channels with the notification configuration.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>DISABLED</code></p>
    /// <ul>
    /// <li>
    /// <p>Users cannot associate or disassociate channels with the notification configuration.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn override_option(mut self, input: crate::types::ChannelAssociationOverrideOption) -> Self {
        self.override_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>Controls whether users can modify channel associations for a notification configuration.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code></p>
    /// <ul>
    /// <li>
    /// <p>Users can associate or disassociate channels with the notification configuration.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>DISABLED</code></p>
    /// <ul>
    /// <li>
    /// <p>Users cannot associate or disassociate channels with the notification configuration.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn set_override_option(mut self, input: ::std::option::Option<crate::types::ChannelAssociationOverrideOption>) -> Self {
        self.override_option = input;
        self
    }
    /// <p>Controls whether users can modify channel associations for a notification configuration.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code></p>
    /// <ul>
    /// <li>
    /// <p>Users can associate or disassociate channels with the notification configuration.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>DISABLED</code></p>
    /// <ul>
    /// <li>
    /// <p>Users cannot associate or disassociate channels with the notification configuration.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn get_override_option(&self) -> &::std::option::Option<crate::types::ChannelAssociationOverrideOption> {
        &self.override_option
    }
    /// Consumes the builder and constructs a [`ManagedNotificationChannelAssociationSummary`](crate::types::ManagedNotificationChannelAssociationSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`channel_identifier`](crate::types::builders::ManagedNotificationChannelAssociationSummaryBuilder::channel_identifier)
    /// - [`channel_type`](crate::types::builders::ManagedNotificationChannelAssociationSummaryBuilder::channel_type)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ManagedNotificationChannelAssociationSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ManagedNotificationChannelAssociationSummary {
            channel_identifier: self.channel_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "channel_identifier",
                    "channel_identifier was not specified but it is required when building ManagedNotificationChannelAssociationSummary",
                )
            })?,
            channel_type: self.channel_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "channel_type",
                    "channel_type was not specified but it is required when building ManagedNotificationChannelAssociationSummary",
                )
            })?,
            override_option: self.override_option,
        })
    }
}
