// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a short summary and metadata for a <code>NotificationEvent</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NotificationEventSummary {
    /// <p>The schema version of the Notification Event.</p>
    pub schema_version: crate::types::SchemaVersion,
    /// <p>The source event metadata.</p>
    pub source_event_metadata: ::std::option::Option<crate::types::SourceEventMetadataSummary>,
    /// <p>The message components of a notification event.</p>
    pub message_components: ::std::option::Option<crate::types::MessageComponentsSummary>,
    /// <p>Provides additional information about the current status of the <code>NotificationEvent</code>.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>HEALTHY</code></p>
    /// <ul>
    /// <li>
    /// <p>All <code>EventRules</code> are <code>ACTIVE</code>.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>UNHEALTHY</code></p>
    /// <ul>
    /// <li>
    /// <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub event_status: crate::types::EventStatus,
    /// <p>The type of event causing the notification.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALERT</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an event where something was triggered, initiated, reopened, deployed, or a threshold was breached.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>WARNING</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an event where an issue is about to arise. For example, something is approaching a threshold.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>ANNOUNCEMENT</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an important event. For example, a step in a workflow or escalation path or that a workflow was updated.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>INFORMATIONAL</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about informational messages. For example, recommendations, service announcements, or reminders.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub notification_type: crate::types::NotificationType,
}
impl NotificationEventSummary {
    /// <p>The schema version of the Notification Event.</p>
    pub fn schema_version(&self) -> &crate::types::SchemaVersion {
        &self.schema_version
    }
    /// <p>The source event metadata.</p>
    pub fn source_event_metadata(&self) -> ::std::option::Option<&crate::types::SourceEventMetadataSummary> {
        self.source_event_metadata.as_ref()
    }
    /// <p>The message components of a notification event.</p>
    pub fn message_components(&self) -> ::std::option::Option<&crate::types::MessageComponentsSummary> {
        self.message_components.as_ref()
    }
    /// <p>Provides additional information about the current status of the <code>NotificationEvent</code>.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>HEALTHY</code></p>
    /// <ul>
    /// <li>
    /// <p>All <code>EventRules</code> are <code>ACTIVE</code>.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>UNHEALTHY</code></p>
    /// <ul>
    /// <li>
    /// <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn event_status(&self) -> &crate::types::EventStatus {
        &self.event_status
    }
    /// <p>The type of event causing the notification.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALERT</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an event where something was triggered, initiated, reopened, deployed, or a threshold was breached.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>WARNING</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an event where an issue is about to arise. For example, something is approaching a threshold.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>ANNOUNCEMENT</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an important event. For example, a step in a workflow or escalation path or that a workflow was updated.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>INFORMATIONAL</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about informational messages. For example, recommendations, service announcements, or reminders.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn notification_type(&self) -> &crate::types::NotificationType {
        &self.notification_type
    }
}
impl NotificationEventSummary {
    /// Creates a new builder-style object to manufacture [`NotificationEventSummary`](crate::types::NotificationEventSummary).
    pub fn builder() -> crate::types::builders::NotificationEventSummaryBuilder {
        crate::types::builders::NotificationEventSummaryBuilder::default()
    }
}

/// A builder for [`NotificationEventSummary`](crate::types::NotificationEventSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NotificationEventSummaryBuilder {
    pub(crate) schema_version: ::std::option::Option<crate::types::SchemaVersion>,
    pub(crate) source_event_metadata: ::std::option::Option<crate::types::SourceEventMetadataSummary>,
    pub(crate) message_components: ::std::option::Option<crate::types::MessageComponentsSummary>,
    pub(crate) event_status: ::std::option::Option<crate::types::EventStatus>,
    pub(crate) notification_type: ::std::option::Option<crate::types::NotificationType>,
}
impl NotificationEventSummaryBuilder {
    /// <p>The schema version of the Notification Event.</p>
    /// This field is required.
    pub fn schema_version(mut self, input: crate::types::SchemaVersion) -> Self {
        self.schema_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The schema version of the Notification Event.</p>
    pub fn set_schema_version(mut self, input: ::std::option::Option<crate::types::SchemaVersion>) -> Self {
        self.schema_version = input;
        self
    }
    /// <p>The schema version of the Notification Event.</p>
    pub fn get_schema_version(&self) -> &::std::option::Option<crate::types::SchemaVersion> {
        &self.schema_version
    }
    /// <p>The source event metadata.</p>
    /// This field is required.
    pub fn source_event_metadata(mut self, input: crate::types::SourceEventMetadataSummary) -> Self {
        self.source_event_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source event metadata.</p>
    pub fn set_source_event_metadata(mut self, input: ::std::option::Option<crate::types::SourceEventMetadataSummary>) -> Self {
        self.source_event_metadata = input;
        self
    }
    /// <p>The source event metadata.</p>
    pub fn get_source_event_metadata(&self) -> &::std::option::Option<crate::types::SourceEventMetadataSummary> {
        &self.source_event_metadata
    }
    /// <p>The message components of a notification event.</p>
    /// This field is required.
    pub fn message_components(mut self, input: crate::types::MessageComponentsSummary) -> Self {
        self.message_components = ::std::option::Option::Some(input);
        self
    }
    /// <p>The message components of a notification event.</p>
    pub fn set_message_components(mut self, input: ::std::option::Option<crate::types::MessageComponentsSummary>) -> Self {
        self.message_components = input;
        self
    }
    /// <p>The message components of a notification event.</p>
    pub fn get_message_components(&self) -> &::std::option::Option<crate::types::MessageComponentsSummary> {
        &self.message_components
    }
    /// <p>Provides additional information about the current status of the <code>NotificationEvent</code>.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>HEALTHY</code></p>
    /// <ul>
    /// <li>
    /// <p>All <code>EventRules</code> are <code>ACTIVE</code>.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>UNHEALTHY</code></p>
    /// <ul>
    /// <li>
    /// <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    /// This field is required.
    pub fn event_status(mut self, input: crate::types::EventStatus) -> Self {
        self.event_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides additional information about the current status of the <code>NotificationEvent</code>.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>HEALTHY</code></p>
    /// <ul>
    /// <li>
    /// <p>All <code>EventRules</code> are <code>ACTIVE</code>.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>UNHEALTHY</code></p>
    /// <ul>
    /// <li>
    /// <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn set_event_status(mut self, input: ::std::option::Option<crate::types::EventStatus>) -> Self {
        self.event_status = input;
        self
    }
    /// <p>Provides additional information about the current status of the <code>NotificationEvent</code>.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>HEALTHY</code></p>
    /// <ul>
    /// <li>
    /// <p>All <code>EventRules</code> are <code>ACTIVE</code>.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>UNHEALTHY</code></p>
    /// <ul>
    /// <li>
    /// <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn get_event_status(&self) -> &::std::option::Option<crate::types::EventStatus> {
        &self.event_status
    }
    /// <p>The type of event causing the notification.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALERT</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an event where something was triggered, initiated, reopened, deployed, or a threshold was breached.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>WARNING</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an event where an issue is about to arise. For example, something is approaching a threshold.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>ANNOUNCEMENT</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an important event. For example, a step in a workflow or escalation path or that a workflow was updated.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>INFORMATIONAL</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about informational messages. For example, recommendations, service announcements, or reminders.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    /// This field is required.
    pub fn notification_type(mut self, input: crate::types::NotificationType) -> Self {
        self.notification_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of event causing the notification.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALERT</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an event where something was triggered, initiated, reopened, deployed, or a threshold was breached.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>WARNING</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an event where an issue is about to arise. For example, something is approaching a threshold.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>ANNOUNCEMENT</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an important event. For example, a step in a workflow or escalation path or that a workflow was updated.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>INFORMATIONAL</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about informational messages. For example, recommendations, service announcements, or reminders.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn set_notification_type(mut self, input: ::std::option::Option<crate::types::NotificationType>) -> Self {
        self.notification_type = input;
        self
    }
    /// <p>The type of event causing the notification.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALERT</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an event where something was triggered, initiated, reopened, deployed, or a threshold was breached.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>WARNING</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an event where an issue is about to arise. For example, something is approaching a threshold.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>ANNOUNCEMENT</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about an important event. For example, a step in a workflow or escalation path or that a workflow was updated.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>INFORMATIONAL</code></p>
    /// <ul>
    /// <li>
    /// <p>A notification about informational messages. For example, recommendations, service announcements, or reminders.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn get_notification_type(&self) -> &::std::option::Option<crate::types::NotificationType> {
        &self.notification_type
    }
    /// Consumes the builder and constructs a [`NotificationEventSummary`](crate::types::NotificationEventSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`schema_version`](crate::types::builders::NotificationEventSummaryBuilder::schema_version)
    /// - [`event_status`](crate::types::builders::NotificationEventSummaryBuilder::event_status)
    /// - [`notification_type`](crate::types::builders::NotificationEventSummaryBuilder::notification_type)
    pub fn build(self) -> ::std::result::Result<crate::types::NotificationEventSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NotificationEventSummary {
            schema_version: self.schema_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "schema_version",
                    "schema_version was not specified but it is required when building NotificationEventSummary",
                )
            })?,
            source_event_metadata: self.source_event_metadata,
            message_components: self.message_components,
            event_status: self.event_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_status",
                    "event_status was not specified but it is required when building NotificationEventSummary",
                )
            })?,
            notification_type: self.notification_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "notification_type",
                    "notification_type was not specified but it is required when building NotificationEventSummary",
                )
            })?,
        })
    }
}
