// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListManagedNotificationChildEventsInput {
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationEvent</code>.</p>
    pub aggregate_managed_notification_event_arn: ::std::option::Option<::std::string::String>,
    /// <p>The earliest time of events to return from this call.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Latest time of events to return from this call.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The locale code of the language used for the retrieved <code>NotificationEvent</code>. The default locale is English.<code>en_US</code>.</p>
    pub locale: ::std::option::Option<crate::types::LocaleCode>,
    /// <p>The maximum number of results to be returned in this call. Defaults to 20.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The Amazon Web Services account ID associated with the Managed Notification Child Events.</p>
    pub related_account: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the Amazon Web Services Organizations organizational unit (OU) associated with the Managed Notification Child Events.</p>
    pub organizational_unit_id: ::std::option::Option<::std::string::String>,
    /// <p>The start token for paginated calls. Retrieved from the response of a previous ListManagedNotificationChannelAssociations call. Next token uses Base64 encoding.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListManagedNotificationChildEventsInput {
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationEvent</code>.</p>
    pub fn aggregate_managed_notification_event_arn(&self) -> ::std::option::Option<&str> {
        self.aggregate_managed_notification_event_arn.as_deref()
    }
    /// <p>The earliest time of events to return from this call.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>Latest time of events to return from this call.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The locale code of the language used for the retrieved <code>NotificationEvent</code>. The default locale is English.<code>en_US</code>.</p>
    pub fn locale(&self) -> ::std::option::Option<&crate::types::LocaleCode> {
        self.locale.as_ref()
    }
    /// <p>The maximum number of results to be returned in this call. Defaults to 20.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The Amazon Web Services account ID associated with the Managed Notification Child Events.</p>
    pub fn related_account(&self) -> ::std::option::Option<&str> {
        self.related_account.as_deref()
    }
    /// <p>The identifier of the Amazon Web Services Organizations organizational unit (OU) associated with the Managed Notification Child Events.</p>
    pub fn organizational_unit_id(&self) -> ::std::option::Option<&str> {
        self.organizational_unit_id.as_deref()
    }
    /// <p>The start token for paginated calls. Retrieved from the response of a previous ListManagedNotificationChannelAssociations call. Next token uses Base64 encoding.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListManagedNotificationChildEventsInput {
    /// Creates a new builder-style object to manufacture [`ListManagedNotificationChildEventsInput`](crate::operation::list_managed_notification_child_events::ListManagedNotificationChildEventsInput).
    pub fn builder() -> crate::operation::list_managed_notification_child_events::builders::ListManagedNotificationChildEventsInputBuilder {
        crate::operation::list_managed_notification_child_events::builders::ListManagedNotificationChildEventsInputBuilder::default()
    }
}

/// A builder for [`ListManagedNotificationChildEventsInput`](crate::operation::list_managed_notification_child_events::ListManagedNotificationChildEventsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListManagedNotificationChildEventsInputBuilder {
    pub(crate) aggregate_managed_notification_event_arn: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) locale: ::std::option::Option<crate::types::LocaleCode>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) related_account: ::std::option::Option<::std::string::String>,
    pub(crate) organizational_unit_id: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListManagedNotificationChildEventsInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationEvent</code>.</p>
    /// This field is required.
    pub fn aggregate_managed_notification_event_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aggregate_managed_notification_event_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationEvent</code>.</p>
    pub fn set_aggregate_managed_notification_event_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aggregate_managed_notification_event_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationEvent</code>.</p>
    pub fn get_aggregate_managed_notification_event_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.aggregate_managed_notification_event_arn
    }
    /// <p>The earliest time of events to return from this call.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The earliest time of events to return from this call.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The earliest time of events to return from this call.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>Latest time of events to return from this call.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Latest time of events to return from this call.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>Latest time of events to return from this call.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The locale code of the language used for the retrieved <code>NotificationEvent</code>. The default locale is English.<code>en_US</code>.</p>
    pub fn locale(mut self, input: crate::types::LocaleCode) -> Self {
        self.locale = ::std::option::Option::Some(input);
        self
    }
    /// <p>The locale code of the language used for the retrieved <code>NotificationEvent</code>. The default locale is English.<code>en_US</code>.</p>
    pub fn set_locale(mut self, input: ::std::option::Option<crate::types::LocaleCode>) -> Self {
        self.locale = input;
        self
    }
    /// <p>The locale code of the language used for the retrieved <code>NotificationEvent</code>. The default locale is English.<code>en_US</code>.</p>
    pub fn get_locale(&self) -> &::std::option::Option<crate::types::LocaleCode> {
        &self.locale
    }
    /// <p>The maximum number of results to be returned in this call. Defaults to 20.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to be returned in this call. Defaults to 20.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to be returned in this call. Defaults to 20.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The Amazon Web Services account ID associated with the Managed Notification Child Events.</p>
    pub fn related_account(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.related_account = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID associated with the Managed Notification Child Events.</p>
    pub fn set_related_account(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.related_account = input;
        self
    }
    /// <p>The Amazon Web Services account ID associated with the Managed Notification Child Events.</p>
    pub fn get_related_account(&self) -> &::std::option::Option<::std::string::String> {
        &self.related_account
    }
    /// <p>The identifier of the Amazon Web Services Organizations organizational unit (OU) associated with the Managed Notification Child Events.</p>
    pub fn organizational_unit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organizational_unit_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Web Services Organizations organizational unit (OU) associated with the Managed Notification Child Events.</p>
    pub fn set_organizational_unit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organizational_unit_id = input;
        self
    }
    /// <p>The identifier of the Amazon Web Services Organizations organizational unit (OU) associated with the Managed Notification Child Events.</p>
    pub fn get_organizational_unit_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.organizational_unit_id
    }
    /// <p>The start token for paginated calls. Retrieved from the response of a previous ListManagedNotificationChannelAssociations call. Next token uses Base64 encoding.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The start token for paginated calls. Retrieved from the response of a previous ListManagedNotificationChannelAssociations call. Next token uses Base64 encoding.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The start token for paginated calls. Retrieved from the response of a previous ListManagedNotificationChannelAssociations call. Next token uses Base64 encoding.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListManagedNotificationChildEventsInput`](crate::operation::list_managed_notification_child_events::ListManagedNotificationChildEventsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_managed_notification_child_events::ListManagedNotificationChildEventsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::list_managed_notification_child_events::ListManagedNotificationChildEventsInput {
                aggregate_managed_notification_event_arn: self.aggregate_managed_notification_event_arn,
                start_time: self.start_time,
                end_time: self.end_time,
                locale: self.locale,
                max_results: self.max_results,
                related_account: self.related_account,
                organizational_unit_id: self.organizational_unit_id,
                next_token: self.next_token,
            },
        )
    }
}
