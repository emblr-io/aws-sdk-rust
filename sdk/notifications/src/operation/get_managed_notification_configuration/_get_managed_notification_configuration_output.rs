// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetManagedNotificationConfigurationOutput {
    /// <p>The ARN of the <code>ManagedNotificationConfiguration</code> resource.</p>
    pub arn: ::std::string::String,
    /// <p>The name of the <code>ManagedNotificationConfiguration</code>.</p>
    pub name: ::std::string::String,
    /// <p>The description of the <code>ManagedNotificationConfiguration</code>.</p>
    pub description: ::std::string::String,
    /// <p>The category of the <code>ManagedNotificationConfiguration</code>.</p>
    pub category: ::std::string::String,
    /// <p>The subCategory of the <code>ManagedNotificationConfiguration</code>.</p>
    pub sub_category: ::std::string::String,
    _request_id: Option<String>,
}
impl GetManagedNotificationConfigurationOutput {
    /// <p>The ARN of the <code>ManagedNotificationConfiguration</code> resource.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The name of the <code>ManagedNotificationConfiguration</code>.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of the <code>ManagedNotificationConfiguration</code>.</p>
    pub fn description(&self) -> &str {
        use std::ops::Deref;
        self.description.deref()
    }
    /// <p>The category of the <code>ManagedNotificationConfiguration</code>.</p>
    pub fn category(&self) -> &str {
        use std::ops::Deref;
        self.category.deref()
    }
    /// <p>The subCategory of the <code>ManagedNotificationConfiguration</code>.</p>
    pub fn sub_category(&self) -> &str {
        use std::ops::Deref;
        self.sub_category.deref()
    }
}
impl ::aws_types::request_id::RequestId for GetManagedNotificationConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetManagedNotificationConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetManagedNotificationConfigurationOutput`](crate::operation::get_managed_notification_configuration::GetManagedNotificationConfigurationOutput).
    pub fn builder() -> crate::operation::get_managed_notification_configuration::builders::GetManagedNotificationConfigurationOutputBuilder {
        crate::operation::get_managed_notification_configuration::builders::GetManagedNotificationConfigurationOutputBuilder::default()
    }
}

/// A builder for [`GetManagedNotificationConfigurationOutput`](crate::operation::get_managed_notification_configuration::GetManagedNotificationConfigurationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetManagedNotificationConfigurationOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) category: ::std::option::Option<::std::string::String>,
    pub(crate) sub_category: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetManagedNotificationConfigurationOutputBuilder {
    /// <p>The ARN of the <code>ManagedNotificationConfiguration</code> resource.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the <code>ManagedNotificationConfiguration</code> resource.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the <code>ManagedNotificationConfiguration</code> resource.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the <code>ManagedNotificationConfiguration</code>.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the <code>ManagedNotificationConfiguration</code>.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the <code>ManagedNotificationConfiguration</code>.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the <code>ManagedNotificationConfiguration</code>.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the <code>ManagedNotificationConfiguration</code>.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the <code>ManagedNotificationConfiguration</code>.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The category of the <code>ManagedNotificationConfiguration</code>.</p>
    /// This field is required.
    pub fn category(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.category = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The category of the <code>ManagedNotificationConfiguration</code>.</p>
    pub fn set_category(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.category = input;
        self
    }
    /// <p>The category of the <code>ManagedNotificationConfiguration</code>.</p>
    pub fn get_category(&self) -> &::std::option::Option<::std::string::String> {
        &self.category
    }
    /// <p>The subCategory of the <code>ManagedNotificationConfiguration</code>.</p>
    /// This field is required.
    pub fn sub_category(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sub_category = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subCategory of the <code>ManagedNotificationConfiguration</code>.</p>
    pub fn set_sub_category(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sub_category = input;
        self
    }
    /// <p>The subCategory of the <code>ManagedNotificationConfiguration</code>.</p>
    pub fn get_sub_category(&self) -> &::std::option::Option<::std::string::String> {
        &self.sub_category
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetManagedNotificationConfigurationOutput`](crate::operation::get_managed_notification_configuration::GetManagedNotificationConfigurationOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::operation::get_managed_notification_configuration::builders::GetManagedNotificationConfigurationOutputBuilder::arn)
    /// - [`name`](crate::operation::get_managed_notification_configuration::builders::GetManagedNotificationConfigurationOutputBuilder::name)
    /// - [`description`](crate::operation::get_managed_notification_configuration::builders::GetManagedNotificationConfigurationOutputBuilder::description)
    /// - [`category`](crate::operation::get_managed_notification_configuration::builders::GetManagedNotificationConfigurationOutputBuilder::category)
    /// - [`sub_category`](crate::operation::get_managed_notification_configuration::builders::GetManagedNotificationConfigurationOutputBuilder::sub_category)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_managed_notification_configuration::GetManagedNotificationConfigurationOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::get_managed_notification_configuration::GetManagedNotificationConfigurationOutput {
                arn: self.arn.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "arn",
                        "arn was not specified but it is required when building GetManagedNotificationConfigurationOutput",
                    )
                })?,
                name: self.name.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "name",
                        "name was not specified but it is required when building GetManagedNotificationConfigurationOutput",
                    )
                })?,
                description: self.description.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "description",
                        "description was not specified but it is required when building GetManagedNotificationConfigurationOutput",
                    )
                })?,
                category: self.category.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "category",
                        "category was not specified but it is required when building GetManagedNotificationConfigurationOutput",
                    )
                })?,
                sub_category: self.sub_category.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "sub_category",
                        "sub_category was not specified but it is required when building GetManagedNotificationConfigurationOutput",
                    )
                })?,
                _request_id: self._request_id,
            },
        )
    }
}
