// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateNotificationConfigurationInput {
    /// <p>The Amazon Resource Name (ARN) used to update the <code>NotificationConfiguration</code>.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the <code>NotificationConfiguration</code>.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the <code>NotificationConfiguration</code>.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The aggregation preference of the <code>NotificationConfiguration</code>.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>LONG</code></p>
    /// <ul>
    /// <li>
    /// <p>Aggregate notifications for long periods of time (12 hours).</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>SHORT</code></p>
    /// <ul>
    /// <li>
    /// <p>Aggregate notifications for short periods of time (5 minutes).</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>NONE</code></p>
    /// <ul>
    /// <li>
    /// <p>Don't aggregate notifications.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub aggregation_duration: ::std::option::Option<crate::types::AggregationDuration>,
}
impl UpdateNotificationConfigurationInput {
    /// <p>The Amazon Resource Name (ARN) used to update the <code>NotificationConfiguration</code>.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the <code>NotificationConfiguration</code>.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the <code>NotificationConfiguration</code>.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The aggregation preference of the <code>NotificationConfiguration</code>.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>LONG</code></p>
    /// <ul>
    /// <li>
    /// <p>Aggregate notifications for long periods of time (12 hours).</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>SHORT</code></p>
    /// <ul>
    /// <li>
    /// <p>Aggregate notifications for short periods of time (5 minutes).</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>NONE</code></p>
    /// <ul>
    /// <li>
    /// <p>Don't aggregate notifications.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn aggregation_duration(&self) -> ::std::option::Option<&crate::types::AggregationDuration> {
        self.aggregation_duration.as_ref()
    }
}
impl UpdateNotificationConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateNotificationConfigurationInput`](crate::operation::update_notification_configuration::UpdateNotificationConfigurationInput).
    pub fn builder() -> crate::operation::update_notification_configuration::builders::UpdateNotificationConfigurationInputBuilder {
        crate::operation::update_notification_configuration::builders::UpdateNotificationConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateNotificationConfigurationInput`](crate::operation::update_notification_configuration::UpdateNotificationConfigurationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateNotificationConfigurationInputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) aggregation_duration: ::std::option::Option<crate::types::AggregationDuration>,
}
impl UpdateNotificationConfigurationInputBuilder {
    /// <p>The Amazon Resource Name (ARN) used to update the <code>NotificationConfiguration</code>.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) used to update the <code>NotificationConfiguration</code>.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) used to update the <code>NotificationConfiguration</code>.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the <code>NotificationConfiguration</code>.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the <code>NotificationConfiguration</code>.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the <code>NotificationConfiguration</code>.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the <code>NotificationConfiguration</code>.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the <code>NotificationConfiguration</code>.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the <code>NotificationConfiguration</code>.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The aggregation preference of the <code>NotificationConfiguration</code>.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>LONG</code></p>
    /// <ul>
    /// <li>
    /// <p>Aggregate notifications for long periods of time (12 hours).</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>SHORT</code></p>
    /// <ul>
    /// <li>
    /// <p>Aggregate notifications for short periods of time (5 minutes).</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>NONE</code></p>
    /// <ul>
    /// <li>
    /// <p>Don't aggregate notifications.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn aggregation_duration(mut self, input: crate::types::AggregationDuration) -> Self {
        self.aggregation_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The aggregation preference of the <code>NotificationConfiguration</code>.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>LONG</code></p>
    /// <ul>
    /// <li>
    /// <p>Aggregate notifications for long periods of time (12 hours).</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>SHORT</code></p>
    /// <ul>
    /// <li>
    /// <p>Aggregate notifications for short periods of time (5 minutes).</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>NONE</code></p>
    /// <ul>
    /// <li>
    /// <p>Don't aggregate notifications.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn set_aggregation_duration(mut self, input: ::std::option::Option<crate::types::AggregationDuration>) -> Self {
        self.aggregation_duration = input;
        self
    }
    /// <p>The aggregation preference of the <code>NotificationConfiguration</code>.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>LONG</code></p>
    /// <ul>
    /// <li>
    /// <p>Aggregate notifications for long periods of time (12 hours).</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>SHORT</code></p>
    /// <ul>
    /// <li>
    /// <p>Aggregate notifications for short periods of time (5 minutes).</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>NONE</code></p>
    /// <ul>
    /// <li>
    /// <p>Don't aggregate notifications.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn get_aggregation_duration(&self) -> &::std::option::Option<crate::types::AggregationDuration> {
        &self.aggregation_duration
    }
    /// Consumes the builder and constructs a [`UpdateNotificationConfigurationInput`](crate::operation::update_notification_configuration::UpdateNotificationConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_notification_configuration::UpdateNotificationConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_notification_configuration::UpdateNotificationConfigurationInput {
                arn: self.arn,
                name: self.name,
                description: self.description,
                aggregation_duration: self.aggregation_duration,
            },
        )
    }
}
