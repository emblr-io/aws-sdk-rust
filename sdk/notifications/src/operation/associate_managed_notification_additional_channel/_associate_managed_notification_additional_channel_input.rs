// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociateManagedNotificationAdditionalChannelInput {
    /// <p>The Amazon Resource Name (ARN) of the Channel to associate with the <code>ManagedNotificationConfiguration</code>.</p>
    /// <p>Supported ARNs include Chatbot, the Console Mobile Application, and email (notifications-contacts).</p>
    pub channel_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code> to associate with the additional Channel.</p>
    pub managed_notification_configuration_arn: ::std::option::Option<::std::string::String>,
}
impl AssociateManagedNotificationAdditionalChannelInput {
    /// <p>The Amazon Resource Name (ARN) of the Channel to associate with the <code>ManagedNotificationConfiguration</code>.</p>
    /// <p>Supported ARNs include Chatbot, the Console Mobile Application, and email (notifications-contacts).</p>
    pub fn channel_arn(&self) -> ::std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code> to associate with the additional Channel.</p>
    pub fn managed_notification_configuration_arn(&self) -> ::std::option::Option<&str> {
        self.managed_notification_configuration_arn.as_deref()
    }
}
impl AssociateManagedNotificationAdditionalChannelInput {
    /// Creates a new builder-style object to manufacture [`AssociateManagedNotificationAdditionalChannelInput`](crate::operation::associate_managed_notification_additional_channel::AssociateManagedNotificationAdditionalChannelInput).
    pub fn builder(
    ) -> crate::operation::associate_managed_notification_additional_channel::builders::AssociateManagedNotificationAdditionalChannelInputBuilder
    {
        crate::operation::associate_managed_notification_additional_channel::builders::AssociateManagedNotificationAdditionalChannelInputBuilder::default()
    }
}

/// A builder for [`AssociateManagedNotificationAdditionalChannelInput`](crate::operation::associate_managed_notification_additional_channel::AssociateManagedNotificationAdditionalChannelInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssociateManagedNotificationAdditionalChannelInputBuilder {
    pub(crate) channel_arn: ::std::option::Option<::std::string::String>,
    pub(crate) managed_notification_configuration_arn: ::std::option::Option<::std::string::String>,
}
impl AssociateManagedNotificationAdditionalChannelInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Channel to associate with the <code>ManagedNotificationConfiguration</code>.</p>
    /// <p>Supported ARNs include Chatbot, the Console Mobile Application, and email (notifications-contacts).</p>
    /// This field is required.
    pub fn channel_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Channel to associate with the <code>ManagedNotificationConfiguration</code>.</p>
    /// <p>Supported ARNs include Chatbot, the Console Mobile Application, and email (notifications-contacts).</p>
    pub fn set_channel_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Channel to associate with the <code>ManagedNotificationConfiguration</code>.</p>
    /// <p>Supported ARNs include Chatbot, the Console Mobile Application, and email (notifications-contacts).</p>
    pub fn get_channel_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code> to associate with the additional Channel.</p>
    /// This field is required.
    pub fn managed_notification_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.managed_notification_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code> to associate with the additional Channel.</p>
    pub fn set_managed_notification_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.managed_notification_configuration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code> to associate with the additional Channel.</p>
    pub fn get_managed_notification_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.managed_notification_configuration_arn
    }
    /// Consumes the builder and constructs a [`AssociateManagedNotificationAdditionalChannelInput`](crate::operation::associate_managed_notification_additional_channel::AssociateManagedNotificationAdditionalChannelInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::associate_managed_notification_additional_channel::AssociateManagedNotificationAdditionalChannelInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::associate_managed_notification_additional_channel::AssociateManagedNotificationAdditionalChannelInput {
                channel_arn: self.channel_arn,
                managed_notification_configuration_arn: self.managed_notification_configuration_arn,
            },
        )
    }
}
