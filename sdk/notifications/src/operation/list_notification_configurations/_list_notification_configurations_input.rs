// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListNotificationConfigurationsInput {
    /// <p>The matched event source.</p>
    /// <p>Must match one of the valid EventBridge sources. Only Amazon Web Services service sourced events are supported. For example, <code>aws.ec2</code> and <code>aws.cloudwatch</code>. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level">Event delivery from Amazon Web Services services</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    pub event_rule_source: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Channel to match.</p>
    pub channel_arn: ::std::option::Option<::std::string::String>,
    /// <p>The <code>NotificationConfiguration</code> status to match.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVE</code></p>
    /// <ul>
    /// <li>
    /// <p>All <code>EventRules</code> are <code>ACTIVE</code> and any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>PARTIALLY_ACTIVE</code></p>
    /// <ul>
    /// <li>
    /// <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>. Any call can be run.</p></li>
    /// <li>
    /// <p>Any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>INACTIVE</code></p>
    /// <ul>
    /// <li>
    /// <p>All <code>EventRules</code> are <code>INACTIVE</code> and any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>DELETING</code></p>
    /// <ul>
    /// <li>
    /// <p>This <code>NotificationConfiguration</code> is being deleted.</p></li>
    /// <li>
    /// <p>Only <code>GET</code> and <code>LIST</code> calls can be run.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::NotificationConfigurationStatus>,
    /// <p>The maximum number of results to be returned in this call. Defaults to 20.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The start token for paginated calls. Retrieved from the response of a previous <code>ListEventRules</code> call. Next token uses Base64 encoding.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListNotificationConfigurationsInput {
    /// <p>The matched event source.</p>
    /// <p>Must match one of the valid EventBridge sources. Only Amazon Web Services service sourced events are supported. For example, <code>aws.ec2</code> and <code>aws.cloudwatch</code>. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level">Event delivery from Amazon Web Services services</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    pub fn event_rule_source(&self) -> ::std::option::Option<&str> {
        self.event_rule_source.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Channel to match.</p>
    pub fn channel_arn(&self) -> ::std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>The <code>NotificationConfiguration</code> status to match.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVE</code></p>
    /// <ul>
    /// <li>
    /// <p>All <code>EventRules</code> are <code>ACTIVE</code> and any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>PARTIALLY_ACTIVE</code></p>
    /// <ul>
    /// <li>
    /// <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>. Any call can be run.</p></li>
    /// <li>
    /// <p>Any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>INACTIVE</code></p>
    /// <ul>
    /// <li>
    /// <p>All <code>EventRules</code> are <code>INACTIVE</code> and any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>DELETING</code></p>
    /// <ul>
    /// <li>
    /// <p>This <code>NotificationConfiguration</code> is being deleted.</p></li>
    /// <li>
    /// <p>Only <code>GET</code> and <code>LIST</code> calls can be run.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::NotificationConfigurationStatus> {
        self.status.as_ref()
    }
    /// <p>The maximum number of results to be returned in this call. Defaults to 20.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The start token for paginated calls. Retrieved from the response of a previous <code>ListEventRules</code> call. Next token uses Base64 encoding.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListNotificationConfigurationsInput {
    /// Creates a new builder-style object to manufacture [`ListNotificationConfigurationsInput`](crate::operation::list_notification_configurations::ListNotificationConfigurationsInput).
    pub fn builder() -> crate::operation::list_notification_configurations::builders::ListNotificationConfigurationsInputBuilder {
        crate::operation::list_notification_configurations::builders::ListNotificationConfigurationsInputBuilder::default()
    }
}

/// A builder for [`ListNotificationConfigurationsInput`](crate::operation::list_notification_configurations::ListNotificationConfigurationsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListNotificationConfigurationsInputBuilder {
    pub(crate) event_rule_source: ::std::option::Option<::std::string::String>,
    pub(crate) channel_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::NotificationConfigurationStatus>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListNotificationConfigurationsInputBuilder {
    /// <p>The matched event source.</p>
    /// <p>Must match one of the valid EventBridge sources. Only Amazon Web Services service sourced events are supported. For example, <code>aws.ec2</code> and <code>aws.cloudwatch</code>. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level">Event delivery from Amazon Web Services services</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    pub fn event_rule_source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_rule_source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The matched event source.</p>
    /// <p>Must match one of the valid EventBridge sources. Only Amazon Web Services service sourced events are supported. For example, <code>aws.ec2</code> and <code>aws.cloudwatch</code>. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level">Event delivery from Amazon Web Services services</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    pub fn set_event_rule_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_rule_source = input;
        self
    }
    /// <p>The matched event source.</p>
    /// <p>Must match one of the valid EventBridge sources. Only Amazon Web Services service sourced events are supported. For example, <code>aws.ec2</code> and <code>aws.cloudwatch</code>. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level">Event delivery from Amazon Web Services services</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    pub fn get_event_rule_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_rule_source
    }
    /// <p>The Amazon Resource Name (ARN) of the Channel to match.</p>
    pub fn channel_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Channel to match.</p>
    pub fn set_channel_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Channel to match.</p>
    pub fn get_channel_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_arn
    }
    /// <p>The <code>NotificationConfiguration</code> status to match.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVE</code></p>
    /// <ul>
    /// <li>
    /// <p>All <code>EventRules</code> are <code>ACTIVE</code> and any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>PARTIALLY_ACTIVE</code></p>
    /// <ul>
    /// <li>
    /// <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>. Any call can be run.</p></li>
    /// <li>
    /// <p>Any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>INACTIVE</code></p>
    /// <ul>
    /// <li>
    /// <p>All <code>EventRules</code> are <code>INACTIVE</code> and any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>DELETING</code></p>
    /// <ul>
    /// <li>
    /// <p>This <code>NotificationConfiguration</code> is being deleted.</p></li>
    /// <li>
    /// <p>Only <code>GET</code> and <code>LIST</code> calls can be run.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::NotificationConfigurationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>NotificationConfiguration</code> status to match.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVE</code></p>
    /// <ul>
    /// <li>
    /// <p>All <code>EventRules</code> are <code>ACTIVE</code> and any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>PARTIALLY_ACTIVE</code></p>
    /// <ul>
    /// <li>
    /// <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>. Any call can be run.</p></li>
    /// <li>
    /// <p>Any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>INACTIVE</code></p>
    /// <ul>
    /// <li>
    /// <p>All <code>EventRules</code> are <code>INACTIVE</code> and any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>DELETING</code></p>
    /// <ul>
    /// <li>
    /// <p>This <code>NotificationConfiguration</code> is being deleted.</p></li>
    /// <li>
    /// <p>Only <code>GET</code> and <code>LIST</code> calls can be run.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::NotificationConfigurationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The <code>NotificationConfiguration</code> status to match.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVE</code></p>
    /// <ul>
    /// <li>
    /// <p>All <code>EventRules</code> are <code>ACTIVE</code> and any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>PARTIALLY_ACTIVE</code></p>
    /// <ul>
    /// <li>
    /// <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>. Any call can be run.</p></li>
    /// <li>
    /// <p>Any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>INACTIVE</code></p>
    /// <ul>
    /// <li>
    /// <p>All <code>EventRules</code> are <code>INACTIVE</code> and any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>DELETING</code></p>
    /// <ul>
    /// <li>
    /// <p>This <code>NotificationConfiguration</code> is being deleted.</p></li>
    /// <li>
    /// <p>Only <code>GET</code> and <code>LIST</code> calls can be run.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::NotificationConfigurationStatus> {
        &self.status
    }
    /// <p>The maximum number of results to be returned in this call. Defaults to 20.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to be returned in this call. Defaults to 20.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to be returned in this call. Defaults to 20.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The start token for paginated calls. Retrieved from the response of a previous <code>ListEventRules</code> call. Next token uses Base64 encoding.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The start token for paginated calls. Retrieved from the response of a previous <code>ListEventRules</code> call. Next token uses Base64 encoding.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The start token for paginated calls. Retrieved from the response of a previous <code>ListEventRules</code> call. Next token uses Base64 encoding.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListNotificationConfigurationsInput`](crate::operation::list_notification_configurations::ListNotificationConfigurationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_notification_configurations::ListNotificationConfigurationsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_notification_configurations::ListNotificationConfigurationsInput {
            event_rule_source: self.event_rule_source,
            channel_arn: self.channel_arn,
            status: self.status,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
