// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListNotificationEventsInput {
    /// <p>The earliest time of events to return from this call.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Latest time of events to return from this call.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The locale code of the language used for the retrieved <code>NotificationEvent</code>. The default locale is English <code>(en_US)</code>.</p>
    pub locale: ::std::option::Option<crate::types::LocaleCode>,
    /// <p>The matched event source.</p>
    /// <p>Must match one of the valid EventBridge sources. Only Amazon Web Services service sourced events are supported. For example, <code>aws.ec2</code> and <code>aws.cloudwatch</code>. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level">Event delivery from Amazon Web Services services</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    pub source: ::std::option::Option<::std::string::String>,
    /// <p>Include aggregated child events in the result.</p>
    pub include_child_events: ::std::option::Option<bool>,
    /// <p>The Amazon Resource Name (ARN) of the <code>aggregatedNotificationEventArn</code> to match.</p>
    pub aggregate_notification_event_arn: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to be returned in this call. Defaults to 20.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The start token for paginated calls. Retrieved from the response of a previous <code>ListEventRules</code> call. Next token uses Base64 encoding.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListNotificationEventsInput {
    /// <p>The earliest time of events to return from this call.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>Latest time of events to return from this call.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The locale code of the language used for the retrieved <code>NotificationEvent</code>. The default locale is English <code>(en_US)</code>.</p>
    pub fn locale(&self) -> ::std::option::Option<&crate::types::LocaleCode> {
        self.locale.as_ref()
    }
    /// <p>The matched event source.</p>
    /// <p>Must match one of the valid EventBridge sources. Only Amazon Web Services service sourced events are supported. For example, <code>aws.ec2</code> and <code>aws.cloudwatch</code>. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level">Event delivery from Amazon Web Services services</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    pub fn source(&self) -> ::std::option::Option<&str> {
        self.source.as_deref()
    }
    /// <p>Include aggregated child events in the result.</p>
    pub fn include_child_events(&self) -> ::std::option::Option<bool> {
        self.include_child_events
    }
    /// <p>The Amazon Resource Name (ARN) of the <code>aggregatedNotificationEventArn</code> to match.</p>
    pub fn aggregate_notification_event_arn(&self) -> ::std::option::Option<&str> {
        self.aggregate_notification_event_arn.as_deref()
    }
    /// <p>The maximum number of results to be returned in this call. Defaults to 20.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The start token for paginated calls. Retrieved from the response of a previous <code>ListEventRules</code> call. Next token uses Base64 encoding.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListNotificationEventsInput {
    /// Creates a new builder-style object to manufacture [`ListNotificationEventsInput`](crate::operation::list_notification_events::ListNotificationEventsInput).
    pub fn builder() -> crate::operation::list_notification_events::builders::ListNotificationEventsInputBuilder {
        crate::operation::list_notification_events::builders::ListNotificationEventsInputBuilder::default()
    }
}

/// A builder for [`ListNotificationEventsInput`](crate::operation::list_notification_events::ListNotificationEventsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListNotificationEventsInputBuilder {
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) locale: ::std::option::Option<crate::types::LocaleCode>,
    pub(crate) source: ::std::option::Option<::std::string::String>,
    pub(crate) include_child_events: ::std::option::Option<bool>,
    pub(crate) aggregate_notification_event_arn: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListNotificationEventsInputBuilder {
    /// <p>The earliest time of events to return from this call.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The earliest time of events to return from this call.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The earliest time of events to return from this call.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>Latest time of events to return from this call.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Latest time of events to return from this call.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>Latest time of events to return from this call.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The locale code of the language used for the retrieved <code>NotificationEvent</code>. The default locale is English <code>(en_US)</code>.</p>
    pub fn locale(mut self, input: crate::types::LocaleCode) -> Self {
        self.locale = ::std::option::Option::Some(input);
        self
    }
    /// <p>The locale code of the language used for the retrieved <code>NotificationEvent</code>. The default locale is English <code>(en_US)</code>.</p>
    pub fn set_locale(mut self, input: ::std::option::Option<crate::types::LocaleCode>) -> Self {
        self.locale = input;
        self
    }
    /// <p>The locale code of the language used for the retrieved <code>NotificationEvent</code>. The default locale is English <code>(en_US)</code>.</p>
    pub fn get_locale(&self) -> &::std::option::Option<crate::types::LocaleCode> {
        &self.locale
    }
    /// <p>The matched event source.</p>
    /// <p>Must match one of the valid EventBridge sources. Only Amazon Web Services service sourced events are supported. For example, <code>aws.ec2</code> and <code>aws.cloudwatch</code>. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level">Event delivery from Amazon Web Services services</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    pub fn source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The matched event source.</p>
    /// <p>Must match one of the valid EventBridge sources. Only Amazon Web Services service sourced events are supported. For example, <code>aws.ec2</code> and <code>aws.cloudwatch</code>. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level">Event delivery from Amazon Web Services services</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    pub fn set_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// <p>The matched event source.</p>
    /// <p>Must match one of the valid EventBridge sources. Only Amazon Web Services service sourced events are supported. For example, <code>aws.ec2</code> and <code>aws.cloudwatch</code>. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level">Event delivery from Amazon Web Services services</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    pub fn get_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.source
    }
    /// <p>Include aggregated child events in the result.</p>
    pub fn include_child_events(mut self, input: bool) -> Self {
        self.include_child_events = ::std::option::Option::Some(input);
        self
    }
    /// <p>Include aggregated child events in the result.</p>
    pub fn set_include_child_events(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_child_events = input;
        self
    }
    /// <p>Include aggregated child events in the result.</p>
    pub fn get_include_child_events(&self) -> &::std::option::Option<bool> {
        &self.include_child_events
    }
    /// <p>The Amazon Resource Name (ARN) of the <code>aggregatedNotificationEventArn</code> to match.</p>
    pub fn aggregate_notification_event_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aggregate_notification_event_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the <code>aggregatedNotificationEventArn</code> to match.</p>
    pub fn set_aggregate_notification_event_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aggregate_notification_event_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the <code>aggregatedNotificationEventArn</code> to match.</p>
    pub fn get_aggregate_notification_event_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.aggregate_notification_event_arn
    }
    /// <p>The maximum number of results to be returned in this call. Defaults to 20.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to be returned in this call. Defaults to 20.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to be returned in this call. Defaults to 20.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The start token for paginated calls. Retrieved from the response of a previous <code>ListEventRules</code> call. Next token uses Base64 encoding.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The start token for paginated calls. Retrieved from the response of a previous <code>ListEventRules</code> call. Next token uses Base64 encoding.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The start token for paginated calls. Retrieved from the response of a previous <code>ListEventRules</code> call. Next token uses Base64 encoding.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListNotificationEventsInput`](crate::operation::list_notification_events::ListNotificationEventsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_notification_events::ListNotificationEventsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_notification_events::ListNotificationEventsInput {
            start_time: self.start_time,
            end_time: self.end_time,
            locale: self.locale,
            source: self.source,
            include_child_events: self.include_child_events,
            aggregate_notification_event_arn: self.aggregate_notification_event_arn,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
