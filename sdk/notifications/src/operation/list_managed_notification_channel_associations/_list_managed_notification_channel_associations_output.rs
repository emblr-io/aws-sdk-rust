// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListManagedNotificationChannelAssociationsOutput {
    /// <p>A pagination token. If a non-null pagination token is returned in a result, pass its value in another request to retrieve more entries.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>A list that contains the following information about a channel association.</p>
    pub channel_associations: ::std::vec::Vec<crate::types::ManagedNotificationChannelAssociationSummary>,
    _request_id: Option<String>,
}
impl ListManagedNotificationChannelAssociationsOutput {
    /// <p>A pagination token. If a non-null pagination token is returned in a result, pass its value in another request to retrieve more entries.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A list that contains the following information about a channel association.</p>
    pub fn channel_associations(&self) -> &[crate::types::ManagedNotificationChannelAssociationSummary] {
        use std::ops::Deref;
        self.channel_associations.deref()
    }
}
impl ::aws_types::request_id::RequestId for ListManagedNotificationChannelAssociationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListManagedNotificationChannelAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`ListManagedNotificationChannelAssociationsOutput`](crate::operation::list_managed_notification_channel_associations::ListManagedNotificationChannelAssociationsOutput).
    pub fn builder(
    ) -> crate::operation::list_managed_notification_channel_associations::builders::ListManagedNotificationChannelAssociationsOutputBuilder {
        crate::operation::list_managed_notification_channel_associations::builders::ListManagedNotificationChannelAssociationsOutputBuilder::default()
    }
}

/// A builder for [`ListManagedNotificationChannelAssociationsOutput`](crate::operation::list_managed_notification_channel_associations::ListManagedNotificationChannelAssociationsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListManagedNotificationChannelAssociationsOutputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) channel_associations: ::std::option::Option<::std::vec::Vec<crate::types::ManagedNotificationChannelAssociationSummary>>,
    _request_id: Option<String>,
}
impl ListManagedNotificationChannelAssociationsOutputBuilder {
    /// <p>A pagination token. If a non-null pagination token is returned in a result, pass its value in another request to retrieve more entries.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A pagination token. If a non-null pagination token is returned in a result, pass its value in another request to retrieve more entries.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A pagination token. If a non-null pagination token is returned in a result, pass its value in another request to retrieve more entries.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `channel_associations`.
    ///
    /// To override the contents of this collection use [`set_channel_associations`](Self::set_channel_associations).
    ///
    /// <p>A list that contains the following information about a channel association.</p>
    pub fn channel_associations(mut self, input: crate::types::ManagedNotificationChannelAssociationSummary) -> Self {
        let mut v = self.channel_associations.unwrap_or_default();
        v.push(input);
        self.channel_associations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list that contains the following information about a channel association.</p>
    pub fn set_channel_associations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ManagedNotificationChannelAssociationSummary>>,
    ) -> Self {
        self.channel_associations = input;
        self
    }
    /// <p>A list that contains the following information about a channel association.</p>
    pub fn get_channel_associations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ManagedNotificationChannelAssociationSummary>> {
        &self.channel_associations
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListManagedNotificationChannelAssociationsOutput`](crate::operation::list_managed_notification_channel_associations::ListManagedNotificationChannelAssociationsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`channel_associations`](crate::operation::list_managed_notification_channel_associations::builders::ListManagedNotificationChannelAssociationsOutputBuilder::channel_associations)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_managed_notification_channel_associations::ListManagedNotificationChannelAssociationsOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::list_managed_notification_channel_associations::ListManagedNotificationChannelAssociationsOutput {
                next_token: self.next_token,
                channel_associations: self.channel_associations.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "channel_associations",
                        "channel_associations was not specified but it is required when building ListManagedNotificationChannelAssociationsOutput",
                    )
                })?,
                _request_id: self._request_id,
            },
        )
    }
}
