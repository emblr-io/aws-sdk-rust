// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListStatementsInput {
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of SQL statements to return in the response. If more SQL statements exist than fit in one response, then <code>NextToken</code> is returned to page through the results.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The name of the SQL statement specified as input to <code>BatchExecuteStatement</code> or <code>ExecuteStatement</code> to identify the query. You can list multiple statements by providing a prefix that matches the beginning of the statement name. For example, to list myStatement1, myStatement2, myStatement3, and so on, then provide the a value of <code>myStatement</code>. Data API does a case-sensitive match of SQL statement names to the prefix value you provide.</p>
    pub statement_name: ::std::option::Option<::std::string::String>,
    /// <p>The status of the SQL statement to list. Status values are defined as follows:</p>
    /// <ul>
    /// <li>
    /// <p>ABORTED - The query run was stopped by the user.</p></li>
    /// <li>
    /// <p>ALL - A status value that includes all query statuses. This value can be used to filter results.</p></li>
    /// <li>
    /// <p>FAILED - The query run failed.</p></li>
    /// <li>
    /// <p>FINISHED - The query has finished running.</p></li>
    /// <li>
    /// <p>PICKED - The query has been chosen to be run.</p></li>
    /// <li>
    /// <p>STARTED - The query run has started.</p></li>
    /// <li>
    /// <p>SUBMITTED - The query was submitted, but not yet processed.</p></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::StatusString>,
    /// <p>A value that filters which statements to return in the response. If true, all statements run by the caller's IAM role are returned. If false, only statements run by the caller's IAM role in the current IAM session are returned. The default is true.</p>
    pub role_level: ::std::option::Option<bool>,
    /// <p>The name of the database when listing statements run against a <code>ClusterIdentifier</code> or <code>WorkgroupName</code>.</p>
    pub database: ::std::option::Option<::std::string::String>,
    /// <p>The cluster identifier. Only statements that ran on this cluster are returned. When providing <code>ClusterIdentifier</code>, then <code>WorkgroupName</code> can't be specified.</p>
    pub cluster_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The serverless workgroup name or Amazon Resource Name (ARN). Only statements that ran on this workgroup are returned. When providing <code>WorkgroupName</code>, then <code>ClusterIdentifier</code> can't be specified.</p>
    pub workgroup_name: ::std::option::Option<::std::string::String>,
}
impl ListStatementsInput {
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of SQL statements to return in the response. If more SQL statements exist than fit in one response, then <code>NextToken</code> is returned to page through the results.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The name of the SQL statement specified as input to <code>BatchExecuteStatement</code> or <code>ExecuteStatement</code> to identify the query. You can list multiple statements by providing a prefix that matches the beginning of the statement name. For example, to list myStatement1, myStatement2, myStatement3, and so on, then provide the a value of <code>myStatement</code>. Data API does a case-sensitive match of SQL statement names to the prefix value you provide.</p>
    pub fn statement_name(&self) -> ::std::option::Option<&str> {
        self.statement_name.as_deref()
    }
    /// <p>The status of the SQL statement to list. Status values are defined as follows:</p>
    /// <ul>
    /// <li>
    /// <p>ABORTED - The query run was stopped by the user.</p></li>
    /// <li>
    /// <p>ALL - A status value that includes all query statuses. This value can be used to filter results.</p></li>
    /// <li>
    /// <p>FAILED - The query run failed.</p></li>
    /// <li>
    /// <p>FINISHED - The query has finished running.</p></li>
    /// <li>
    /// <p>PICKED - The query has been chosen to be run.</p></li>
    /// <li>
    /// <p>STARTED - The query run has started.</p></li>
    /// <li>
    /// <p>SUBMITTED - The query was submitted, but not yet processed.</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::StatusString> {
        self.status.as_ref()
    }
    /// <p>A value that filters which statements to return in the response. If true, all statements run by the caller's IAM role are returned. If false, only statements run by the caller's IAM role in the current IAM session are returned. The default is true.</p>
    pub fn role_level(&self) -> ::std::option::Option<bool> {
        self.role_level
    }
    /// <p>The name of the database when listing statements run against a <code>ClusterIdentifier</code> or <code>WorkgroupName</code>.</p>
    pub fn database(&self) -> ::std::option::Option<&str> {
        self.database.as_deref()
    }
    /// <p>The cluster identifier. Only statements that ran on this cluster are returned. When providing <code>ClusterIdentifier</code>, then <code>WorkgroupName</code> can't be specified.</p>
    pub fn cluster_identifier(&self) -> ::std::option::Option<&str> {
        self.cluster_identifier.as_deref()
    }
    /// <p>The serverless workgroup name or Amazon Resource Name (ARN). Only statements that ran on this workgroup are returned. When providing <code>WorkgroupName</code>, then <code>ClusterIdentifier</code> can't be specified.</p>
    pub fn workgroup_name(&self) -> ::std::option::Option<&str> {
        self.workgroup_name.as_deref()
    }
}
impl ListStatementsInput {
    /// Creates a new builder-style object to manufacture [`ListStatementsInput`](crate::operation::list_statements::ListStatementsInput).
    pub fn builder() -> crate::operation::list_statements::builders::ListStatementsInputBuilder {
        crate::operation::list_statements::builders::ListStatementsInputBuilder::default()
    }
}

/// A builder for [`ListStatementsInput`](crate::operation::list_statements::ListStatementsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListStatementsInputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) statement_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::StatusString>,
    pub(crate) role_level: ::std::option::Option<bool>,
    pub(crate) database: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) workgroup_name: ::std::option::Option<::std::string::String>,
}
impl ListStatementsInputBuilder {
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of SQL statements to return in the response. If more SQL statements exist than fit in one response, then <code>NextToken</code> is returned to page through the results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of SQL statements to return in the response. If more SQL statements exist than fit in one response, then <code>NextToken</code> is returned to page through the results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of SQL statements to return in the response. If more SQL statements exist than fit in one response, then <code>NextToken</code> is returned to page through the results.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The name of the SQL statement specified as input to <code>BatchExecuteStatement</code> or <code>ExecuteStatement</code> to identify the query. You can list multiple statements by providing a prefix that matches the beginning of the statement name. For example, to list myStatement1, myStatement2, myStatement3, and so on, then provide the a value of <code>myStatement</code>. Data API does a case-sensitive match of SQL statement names to the prefix value you provide.</p>
    pub fn statement_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.statement_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the SQL statement specified as input to <code>BatchExecuteStatement</code> or <code>ExecuteStatement</code> to identify the query. You can list multiple statements by providing a prefix that matches the beginning of the statement name. For example, to list myStatement1, myStatement2, myStatement3, and so on, then provide the a value of <code>myStatement</code>. Data API does a case-sensitive match of SQL statement names to the prefix value you provide.</p>
    pub fn set_statement_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.statement_name = input;
        self
    }
    /// <p>The name of the SQL statement specified as input to <code>BatchExecuteStatement</code> or <code>ExecuteStatement</code> to identify the query. You can list multiple statements by providing a prefix that matches the beginning of the statement name. For example, to list myStatement1, myStatement2, myStatement3, and so on, then provide the a value of <code>myStatement</code>. Data API does a case-sensitive match of SQL statement names to the prefix value you provide.</p>
    pub fn get_statement_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.statement_name
    }
    /// <p>The status of the SQL statement to list. Status values are defined as follows:</p>
    /// <ul>
    /// <li>
    /// <p>ABORTED - The query run was stopped by the user.</p></li>
    /// <li>
    /// <p>ALL - A status value that includes all query statuses. This value can be used to filter results.</p></li>
    /// <li>
    /// <p>FAILED - The query run failed.</p></li>
    /// <li>
    /// <p>FINISHED - The query has finished running.</p></li>
    /// <li>
    /// <p>PICKED - The query has been chosen to be run.</p></li>
    /// <li>
    /// <p>STARTED - The query run has started.</p></li>
    /// <li>
    /// <p>SUBMITTED - The query was submitted, but not yet processed.</p></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::StatusString) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the SQL statement to list. Status values are defined as follows:</p>
    /// <ul>
    /// <li>
    /// <p>ABORTED - The query run was stopped by the user.</p></li>
    /// <li>
    /// <p>ALL - A status value that includes all query statuses. This value can be used to filter results.</p></li>
    /// <li>
    /// <p>FAILED - The query run failed.</p></li>
    /// <li>
    /// <p>FINISHED - The query has finished running.</p></li>
    /// <li>
    /// <p>PICKED - The query has been chosen to be run.</p></li>
    /// <li>
    /// <p>STARTED - The query run has started.</p></li>
    /// <li>
    /// <p>SUBMITTED - The query was submitted, but not yet processed.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::StatusString>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the SQL statement to list. Status values are defined as follows:</p>
    /// <ul>
    /// <li>
    /// <p>ABORTED - The query run was stopped by the user.</p></li>
    /// <li>
    /// <p>ALL - A status value that includes all query statuses. This value can be used to filter results.</p></li>
    /// <li>
    /// <p>FAILED - The query run failed.</p></li>
    /// <li>
    /// <p>FINISHED - The query has finished running.</p></li>
    /// <li>
    /// <p>PICKED - The query has been chosen to be run.</p></li>
    /// <li>
    /// <p>STARTED - The query run has started.</p></li>
    /// <li>
    /// <p>SUBMITTED - The query was submitted, but not yet processed.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::StatusString> {
        &self.status
    }
    /// <p>A value that filters which statements to return in the response. If true, all statements run by the caller's IAM role are returned. If false, only statements run by the caller's IAM role in the current IAM session are returned. The default is true.</p>
    pub fn role_level(mut self, input: bool) -> Self {
        self.role_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>A value that filters which statements to return in the response. If true, all statements run by the caller's IAM role are returned. If false, only statements run by the caller's IAM role in the current IAM session are returned. The default is true.</p>
    pub fn set_role_level(mut self, input: ::std::option::Option<bool>) -> Self {
        self.role_level = input;
        self
    }
    /// <p>A value that filters which statements to return in the response. If true, all statements run by the caller's IAM role are returned. If false, only statements run by the caller's IAM role in the current IAM session are returned. The default is true.</p>
    pub fn get_role_level(&self) -> &::std::option::Option<bool> {
        &self.role_level
    }
    /// <p>The name of the database when listing statements run against a <code>ClusterIdentifier</code> or <code>WorkgroupName</code>.</p>
    pub fn database(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database when listing statements run against a <code>ClusterIdentifier</code> or <code>WorkgroupName</code>.</p>
    pub fn set_database(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database = input;
        self
    }
    /// <p>The name of the database when listing statements run against a <code>ClusterIdentifier</code> or <code>WorkgroupName</code>.</p>
    pub fn get_database(&self) -> &::std::option::Option<::std::string::String> {
        &self.database
    }
    /// <p>The cluster identifier. Only statements that ran on this cluster are returned. When providing <code>ClusterIdentifier</code>, then <code>WorkgroupName</code> can't be specified.</p>
    pub fn cluster_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cluster identifier. Only statements that ran on this cluster are returned. When providing <code>ClusterIdentifier</code>, then <code>WorkgroupName</code> can't be specified.</p>
    pub fn set_cluster_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_identifier = input;
        self
    }
    /// <p>The cluster identifier. Only statements that ran on this cluster are returned. When providing <code>ClusterIdentifier</code>, then <code>WorkgroupName</code> can't be specified.</p>
    pub fn get_cluster_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_identifier
    }
    /// <p>The serverless workgroup name or Amazon Resource Name (ARN). Only statements that ran on this workgroup are returned. When providing <code>WorkgroupName</code>, then <code>ClusterIdentifier</code> can't be specified.</p>
    pub fn workgroup_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workgroup_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The serverless workgroup name or Amazon Resource Name (ARN). Only statements that ran on this workgroup are returned. When providing <code>WorkgroupName</code>, then <code>ClusterIdentifier</code> can't be specified.</p>
    pub fn set_workgroup_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workgroup_name = input;
        self
    }
    /// <p>The serverless workgroup name or Amazon Resource Name (ARN). Only statements that ran on this workgroup are returned. When providing <code>WorkgroupName</code>, then <code>ClusterIdentifier</code> can't be specified.</p>
    pub fn get_workgroup_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.workgroup_name
    }
    /// Consumes the builder and constructs a [`ListStatementsInput`](crate::operation::list_statements::ListStatementsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_statements::ListStatementsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_statements::ListStatementsInput {
            next_token: self.next_token,
            max_results: self.max_results,
            statement_name: self.statement_name,
            status: self.status,
            role_level: self.role_level,
            database: self.database,
            cluster_identifier: self.cluster_identifier,
            workgroup_name: self.workgroup_name,
        })
    }
}
