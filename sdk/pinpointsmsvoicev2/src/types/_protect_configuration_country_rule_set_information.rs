// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The types of statuses that can be used.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProtectConfigurationCountryRuleSetInformation {
    /// <p>The types of protection that can be used.</p>
    pub protect_status: crate::types::ProtectStatus,
}
impl ProtectConfigurationCountryRuleSetInformation {
    /// <p>The types of protection that can be used.</p>
    pub fn protect_status(&self) -> &crate::types::ProtectStatus {
        &self.protect_status
    }
}
impl ProtectConfigurationCountryRuleSetInformation {
    /// Creates a new builder-style object to manufacture [`ProtectConfigurationCountryRuleSetInformation`](crate::types::ProtectConfigurationCountryRuleSetInformation).
    pub fn builder() -> crate::types::builders::ProtectConfigurationCountryRuleSetInformationBuilder {
        crate::types::builders::ProtectConfigurationCountryRuleSetInformationBuilder::default()
    }
}

/// A builder for [`ProtectConfigurationCountryRuleSetInformation`](crate::types::ProtectConfigurationCountryRuleSetInformation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProtectConfigurationCountryRuleSetInformationBuilder {
    pub(crate) protect_status: ::std::option::Option<crate::types::ProtectStatus>,
}
impl ProtectConfigurationCountryRuleSetInformationBuilder {
    /// <p>The types of protection that can be used.</p>
    /// This field is required.
    pub fn protect_status(mut self, input: crate::types::ProtectStatus) -> Self {
        self.protect_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The types of protection that can be used.</p>
    pub fn set_protect_status(mut self, input: ::std::option::Option<crate::types::ProtectStatus>) -> Self {
        self.protect_status = input;
        self
    }
    /// <p>The types of protection that can be used.</p>
    pub fn get_protect_status(&self) -> &::std::option::Option<crate::types::ProtectStatus> {
        &self.protect_status
    }
    /// Consumes the builder and constructs a [`ProtectConfigurationCountryRuleSetInformation`](crate::types::ProtectConfigurationCountryRuleSetInformation).
    /// This method will fail if any of the following fields are not set:
    /// - [`protect_status`](crate::types::builders::ProtectConfigurationCountryRuleSetInformationBuilder::protect_status)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ProtectConfigurationCountryRuleSetInformation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ProtectConfigurationCountryRuleSetInformation {
            protect_status: self.protect_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "protect_status",
                    "protect_status was not specified but it is required when building ProtectConfigurationCountryRuleSetInformation",
                )
            })?,
        })
    }
}
