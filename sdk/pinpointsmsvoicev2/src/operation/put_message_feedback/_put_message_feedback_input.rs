// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutMessageFeedbackInput {
    /// <p>The unique identifier for the message.</p>
    pub message_id: ::std::option::Option<::std::string::String>,
    /// <p>Set the message feedback to be either <code>RECEIVED</code> or <code>FAILED</code>.</p>
    pub message_feedback_status: ::std::option::Option<crate::types::MessageFeedbackStatus>,
}
impl PutMessageFeedbackInput {
    /// <p>The unique identifier for the message.</p>
    pub fn message_id(&self) -> ::std::option::Option<&str> {
        self.message_id.as_deref()
    }
    /// <p>Set the message feedback to be either <code>RECEIVED</code> or <code>FAILED</code>.</p>
    pub fn message_feedback_status(&self) -> ::std::option::Option<&crate::types::MessageFeedbackStatus> {
        self.message_feedback_status.as_ref()
    }
}
impl PutMessageFeedbackInput {
    /// Creates a new builder-style object to manufacture [`PutMessageFeedbackInput`](crate::operation::put_message_feedback::PutMessageFeedbackInput).
    pub fn builder() -> crate::operation::put_message_feedback::builders::PutMessageFeedbackInputBuilder {
        crate::operation::put_message_feedback::builders::PutMessageFeedbackInputBuilder::default()
    }
}

/// A builder for [`PutMessageFeedbackInput`](crate::operation::put_message_feedback::PutMessageFeedbackInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PutMessageFeedbackInputBuilder {
    pub(crate) message_id: ::std::option::Option<::std::string::String>,
    pub(crate) message_feedback_status: ::std::option::Option<crate::types::MessageFeedbackStatus>,
}
impl PutMessageFeedbackInputBuilder {
    /// <p>The unique identifier for the message.</p>
    /// This field is required.
    pub fn message_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the message.</p>
    pub fn set_message_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_id = input;
        self
    }
    /// <p>The unique identifier for the message.</p>
    pub fn get_message_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_id
    }
    /// <p>Set the message feedback to be either <code>RECEIVED</code> or <code>FAILED</code>.</p>
    /// This field is required.
    pub fn message_feedback_status(mut self, input: crate::types::MessageFeedbackStatus) -> Self {
        self.message_feedback_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Set the message feedback to be either <code>RECEIVED</code> or <code>FAILED</code>.</p>
    pub fn set_message_feedback_status(mut self, input: ::std::option::Option<crate::types::MessageFeedbackStatus>) -> Self {
        self.message_feedback_status = input;
        self
    }
    /// <p>Set the message feedback to be either <code>RECEIVED</code> or <code>FAILED</code>.</p>
    pub fn get_message_feedback_status(&self) -> &::std::option::Option<crate::types::MessageFeedbackStatus> {
        &self.message_feedback_status
    }
    /// Consumes the builder and constructs a [`PutMessageFeedbackInput`](crate::operation::put_message_feedback::PutMessageFeedbackInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::put_message_feedback::PutMessageFeedbackInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::put_message_feedback::PutMessageFeedbackInput {
            message_id: self.message_id,
            message_feedback_status: self.message_feedback_status,
        })
    }
}
