// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summarized definition of a Quick Setup configuration definition.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfigurationDefinitionSummary {
    /// <p>The ID of the configuration definition.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The type of the Quick Setup configuration used by the configuration definition.</p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>The version of the Quick Setup type used by the configuration definition.</p>
    pub type_version: ::std::option::Option<::std::string::String>,
    /// <p>The common parameters and values for the configuration definition.</p>
    pub first_class_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ConfigurationDefinitionSummary {
    /// <p>The ID of the configuration definition.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The type of the Quick Setup configuration used by the configuration definition.</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The version of the Quick Setup type used by the configuration definition.</p>
    pub fn type_version(&self) -> ::std::option::Option<&str> {
        self.type_version.as_deref()
    }
    /// <p>The common parameters and values for the configuration definition.</p>
    pub fn first_class_parameters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.first_class_parameters.as_ref()
    }
}
impl ConfigurationDefinitionSummary {
    /// Creates a new builder-style object to manufacture [`ConfigurationDefinitionSummary`](crate::types::ConfigurationDefinitionSummary).
    pub fn builder() -> crate::types::builders::ConfigurationDefinitionSummaryBuilder {
        crate::types::builders::ConfigurationDefinitionSummaryBuilder::default()
    }
}

/// A builder for [`ConfigurationDefinitionSummary`](crate::types::ConfigurationDefinitionSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConfigurationDefinitionSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) type_version: ::std::option::Option<::std::string::String>,
    pub(crate) first_class_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ConfigurationDefinitionSummaryBuilder {
    /// <p>The ID of the configuration definition.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the configuration definition.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the configuration definition.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The type of the Quick Setup configuration used by the configuration definition.</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of the Quick Setup configuration used by the configuration definition.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the Quick Setup configuration used by the configuration definition.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The version of the Quick Setup type used by the configuration definition.</p>
    pub fn type_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the Quick Setup type used by the configuration definition.</p>
    pub fn set_type_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_version = input;
        self
    }
    /// <p>The version of the Quick Setup type used by the configuration definition.</p>
    pub fn get_type_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_version
    }
    /// Adds a key-value pair to `first_class_parameters`.
    ///
    /// To override the contents of this collection use [`set_first_class_parameters`](Self::set_first_class_parameters).
    ///
    /// <p>The common parameters and values for the configuration definition.</p>
    pub fn first_class_parameters(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.first_class_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.first_class_parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The common parameters and values for the configuration definition.</p>
    pub fn set_first_class_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.first_class_parameters = input;
        self
    }
    /// <p>The common parameters and values for the configuration definition.</p>
    pub fn get_first_class_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.first_class_parameters
    }
    /// Consumes the builder and constructs a [`ConfigurationDefinitionSummary`](crate::types::ConfigurationDefinitionSummary).
    pub fn build(self) -> crate::types::ConfigurationDefinitionSummary {
        crate::types::ConfigurationDefinitionSummary {
            id: self.id,
            r#type: self.r#type,
            type_version: self.type_version,
            first_class_parameters: self.first_class_parameters,
        }
    }
}
