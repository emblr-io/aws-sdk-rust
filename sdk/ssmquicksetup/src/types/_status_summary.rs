// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summarized description of the status.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StatusSummary {
    /// <p>The type of a status summary.</p>
    pub status_type: crate::types::StatusType,
    /// <p>The current status.</p>
    pub status: ::std::option::Option<crate::types::Status>,
    /// <p>When applicable, returns an informational message relevant to the current status and status type of the status summary object. We don't recommend implementing parsing logic around this value since the messages returned can vary in format.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>The datetime stamp when the status was last updated.</p>
    pub last_updated_at: ::aws_smithy_types::DateTime,
    /// <p>Details about the status.</p>
    pub status_details: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl StatusSummary {
    /// <p>The type of a status summary.</p>
    pub fn status_type(&self) -> &crate::types::StatusType {
        &self.status_type
    }
    /// <p>The current status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
    /// <p>When applicable, returns an informational message relevant to the current status and status type of the status summary object. We don't recommend implementing parsing logic around this value since the messages returned can vary in format.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The datetime stamp when the status was last updated.</p>
    pub fn last_updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.last_updated_at
    }
    /// <p>Details about the status.</p>
    pub fn status_details(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.status_details.as_ref()
    }
}
impl StatusSummary {
    /// Creates a new builder-style object to manufacture [`StatusSummary`](crate::types::StatusSummary).
    pub fn builder() -> crate::types::builders::StatusSummaryBuilder {
        crate::types::builders::StatusSummaryBuilder::default()
    }
}

/// A builder for [`StatusSummary`](crate::types::StatusSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StatusSummaryBuilder {
    pub(crate) status_type: ::std::option::Option<crate::types::StatusType>,
    pub(crate) status: ::std::option::Option<crate::types::Status>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status_details: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl StatusSummaryBuilder {
    /// <p>The type of a status summary.</p>
    /// This field is required.
    pub fn status_type(mut self, input: crate::types::StatusType) -> Self {
        self.status_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of a status summary.</p>
    pub fn set_status_type(mut self, input: ::std::option::Option<crate::types::StatusType>) -> Self {
        self.status_type = input;
        self
    }
    /// <p>The type of a status summary.</p>
    pub fn get_status_type(&self) -> &::std::option::Option<crate::types::StatusType> {
        &self.status_type
    }
    /// <p>The current status.</p>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::Status> {
        &self.status
    }
    /// <p>When applicable, returns an informational message relevant to the current status and status type of the status summary object. We don't recommend implementing parsing logic around this value since the messages returned can vary in format.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>When applicable, returns an informational message relevant to the current status and status type of the status summary object. We don't recommend implementing parsing logic around this value since the messages returned can vary in format.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>When applicable, returns an informational message relevant to the current status and status type of the status summary object. We don't recommend implementing parsing logic around this value since the messages returned can vary in format.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>The datetime stamp when the status was last updated.</p>
    /// This field is required.
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The datetime stamp when the status was last updated.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>The datetime stamp when the status was last updated.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// Adds a key-value pair to `status_details`.
    ///
    /// To override the contents of this collection use [`set_status_details`](Self::set_status_details).
    ///
    /// <p>Details about the status.</p>
    pub fn status_details(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.status_details.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.status_details = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Details about the status.</p>
    pub fn set_status_details(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.status_details = input;
        self
    }
    /// <p>Details about the status.</p>
    pub fn get_status_details(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.status_details
    }
    /// Consumes the builder and constructs a [`StatusSummary`](crate::types::StatusSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`status_type`](crate::types::builders::StatusSummaryBuilder::status_type)
    /// - [`last_updated_at`](crate::types::builders::StatusSummaryBuilder::last_updated_at)
    pub fn build(self) -> ::std::result::Result<crate::types::StatusSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::StatusSummary {
            status_type: self.status_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status_type",
                    "status_type was not specified but it is required when building StatusSummary",
                )
            })?,
            status: self.status,
            status_message: self.status_message,
            last_updated_at: self.last_updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_updated_at",
                    "last_updated_at was not specified but it is required when building StatusSummary",
                )
            })?,
            status_details: self.status_details,
        })
    }
}
