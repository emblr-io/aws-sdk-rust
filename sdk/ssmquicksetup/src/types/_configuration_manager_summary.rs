// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of a Quick Setup configuration manager.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfigurationManagerSummary {
    /// <p>The ARN of the Quick Setup configuration.</p>
    pub manager_arn: ::std::string::String,
    /// <p>The description of the configuration.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The name of the configuration</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Summaries of the state of the configuration manager. These summaries include an aggregate of the statuses from the configuration definition associated with the configuration manager. This includes deployment statuses, association statuses, drift statuses, health checks, and more.</p>
    pub status_summaries: ::std::option::Option<::std::vec::Vec<crate::types::StatusSummary>>,
    /// <p>A summary of the Quick Setup configuration definition.</p>
    pub configuration_definition_summaries: ::std::option::Option<::std::vec::Vec<crate::types::ConfigurationDefinitionSummary>>,
}
impl ConfigurationManagerSummary {
    /// <p>The ARN of the Quick Setup configuration.</p>
    pub fn manager_arn(&self) -> &str {
        use std::ops::Deref;
        self.manager_arn.deref()
    }
    /// <p>The description of the configuration.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The name of the configuration</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Summaries of the state of the configuration manager. These summaries include an aggregate of the statuses from the configuration definition associated with the configuration manager. This includes deployment statuses, association statuses, drift statuses, health checks, and more.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.status_summaries.is_none()`.
    pub fn status_summaries(&self) -> &[crate::types::StatusSummary] {
        self.status_summaries.as_deref().unwrap_or_default()
    }
    /// <p>A summary of the Quick Setup configuration definition.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.configuration_definition_summaries.is_none()`.
    pub fn configuration_definition_summaries(&self) -> &[crate::types::ConfigurationDefinitionSummary] {
        self.configuration_definition_summaries.as_deref().unwrap_or_default()
    }
}
impl ConfigurationManagerSummary {
    /// Creates a new builder-style object to manufacture [`ConfigurationManagerSummary`](crate::types::ConfigurationManagerSummary).
    pub fn builder() -> crate::types::builders::ConfigurationManagerSummaryBuilder {
        crate::types::builders::ConfigurationManagerSummaryBuilder::default()
    }
}

/// A builder for [`ConfigurationManagerSummary`](crate::types::ConfigurationManagerSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConfigurationManagerSummaryBuilder {
    pub(crate) manager_arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status_summaries: ::std::option::Option<::std::vec::Vec<crate::types::StatusSummary>>,
    pub(crate) configuration_definition_summaries: ::std::option::Option<::std::vec::Vec<crate::types::ConfigurationDefinitionSummary>>,
}
impl ConfigurationManagerSummaryBuilder {
    /// <p>The ARN of the Quick Setup configuration.</p>
    /// This field is required.
    pub fn manager_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.manager_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Quick Setup configuration.</p>
    pub fn set_manager_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.manager_arn = input;
        self
    }
    /// <p>The ARN of the Quick Setup configuration.</p>
    pub fn get_manager_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.manager_arn
    }
    /// <p>The description of the configuration.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the configuration.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the configuration.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The name of the configuration</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the configuration</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the configuration</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `status_summaries`.
    ///
    /// To override the contents of this collection use [`set_status_summaries`](Self::set_status_summaries).
    ///
    /// <p>Summaries of the state of the configuration manager. These summaries include an aggregate of the statuses from the configuration definition associated with the configuration manager. This includes deployment statuses, association statuses, drift statuses, health checks, and more.</p>
    pub fn status_summaries(mut self, input: crate::types::StatusSummary) -> Self {
        let mut v = self.status_summaries.unwrap_or_default();
        v.push(input);
        self.status_summaries = ::std::option::Option::Some(v);
        self
    }
    /// <p>Summaries of the state of the configuration manager. These summaries include an aggregate of the statuses from the configuration definition associated with the configuration manager. This includes deployment statuses, association statuses, drift statuses, health checks, and more.</p>
    pub fn set_status_summaries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StatusSummary>>) -> Self {
        self.status_summaries = input;
        self
    }
    /// <p>Summaries of the state of the configuration manager. These summaries include an aggregate of the statuses from the configuration definition associated with the configuration manager. This includes deployment statuses, association statuses, drift statuses, health checks, and more.</p>
    pub fn get_status_summaries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StatusSummary>> {
        &self.status_summaries
    }
    /// Appends an item to `configuration_definition_summaries`.
    ///
    /// To override the contents of this collection use [`set_configuration_definition_summaries`](Self::set_configuration_definition_summaries).
    ///
    /// <p>A summary of the Quick Setup configuration definition.</p>
    pub fn configuration_definition_summaries(mut self, input: crate::types::ConfigurationDefinitionSummary) -> Self {
        let mut v = self.configuration_definition_summaries.unwrap_or_default();
        v.push(input);
        self.configuration_definition_summaries = ::std::option::Option::Some(v);
        self
    }
    /// <p>A summary of the Quick Setup configuration definition.</p>
    pub fn set_configuration_definition_summaries(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ConfigurationDefinitionSummary>>,
    ) -> Self {
        self.configuration_definition_summaries = input;
        self
    }
    /// <p>A summary of the Quick Setup configuration definition.</p>
    pub fn get_configuration_definition_summaries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ConfigurationDefinitionSummary>> {
        &self.configuration_definition_summaries
    }
    /// Consumes the builder and constructs a [`ConfigurationManagerSummary`](crate::types::ConfigurationManagerSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`manager_arn`](crate::types::builders::ConfigurationManagerSummaryBuilder::manager_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::ConfigurationManagerSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConfigurationManagerSummary {
            manager_arn: self.manager_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "manager_arn",
                    "manager_arn was not specified but it is required when building ConfigurationManagerSummary",
                )
            })?,
            description: self.description,
            name: self.name,
            status_summaries: self.status_summaries,
            configuration_definition_summaries: self.configuration_definition_summaries,
        })
    }
}
