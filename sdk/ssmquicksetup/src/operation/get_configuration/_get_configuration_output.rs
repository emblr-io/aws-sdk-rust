// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetConfigurationOutput {
    /// <p>A service generated identifier for the configuration.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the configuration manager.</p>
    pub manager_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the configuration definition.</p>
    pub configuration_definition_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of the Quick Setup configuration.</p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>The version of the Quick Setup type used.</p>
    pub type_version: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon Web Services account where the configuration was deployed.</p>
    pub account: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region where the configuration was deployed.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The datetime stamp when the configuration manager was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The datetime stamp when the configuration manager was last updated.</p>
    pub last_modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A summary of the state of the configuration manager. This includes deployment statuses, association statuses, drift statuses, health checks, and more.</p>
    pub status_summaries: ::std::option::Option<::std::vec::Vec<crate::types::StatusSummary>>,
    /// <p>The parameters for the configuration definition type.</p>
    pub parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetConfigurationOutput {
    /// <p>A service generated identifier for the configuration.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ARN of the configuration manager.</p>
    pub fn manager_arn(&self) -> ::std::option::Option<&str> {
        self.manager_arn.as_deref()
    }
    /// <p>The ID of the configuration definition.</p>
    pub fn configuration_definition_id(&self) -> ::std::option::Option<&str> {
        self.configuration_definition_id.as_deref()
    }
    /// <p>The type of the Quick Setup configuration.</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The version of the Quick Setup type used.</p>
    pub fn type_version(&self) -> ::std::option::Option<&str> {
        self.type_version.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account where the configuration was deployed.</p>
    pub fn account(&self) -> ::std::option::Option<&str> {
        self.account.as_deref()
    }
    /// <p>The Amazon Web Services Region where the configuration was deployed.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The datetime stamp when the configuration manager was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The datetime stamp when the configuration manager was last updated.</p>
    pub fn last_modified_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_at.as_ref()
    }
    /// <p>A summary of the state of the configuration manager. This includes deployment statuses, association statuses, drift statuses, health checks, and more.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.status_summaries.is_none()`.
    pub fn status_summaries(&self) -> &[crate::types::StatusSummary] {
        self.status_summaries.as_deref().unwrap_or_default()
    }
    /// <p>The parameters for the configuration definition type.</p>
    pub fn parameters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.parameters.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetConfigurationOutput`](crate::operation::get_configuration::GetConfigurationOutput).
    pub fn builder() -> crate::operation::get_configuration::builders::GetConfigurationOutputBuilder {
        crate::operation::get_configuration::builders::GetConfigurationOutputBuilder::default()
    }
}

/// A builder for [`GetConfigurationOutput`](crate::operation::get_configuration::GetConfigurationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetConfigurationOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) manager_arn: ::std::option::Option<::std::string::String>,
    pub(crate) configuration_definition_id: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) type_version: ::std::option::Option<::std::string::String>,
    pub(crate) account: ::std::option::Option<::std::string::String>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status_summaries: ::std::option::Option<::std::vec::Vec<crate::types::StatusSummary>>,
    pub(crate) parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetConfigurationOutputBuilder {
    /// <p>A service generated identifier for the configuration.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A service generated identifier for the configuration.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>A service generated identifier for the configuration.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ARN of the configuration manager.</p>
    pub fn manager_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.manager_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the configuration manager.</p>
    pub fn set_manager_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.manager_arn = input;
        self
    }
    /// <p>The ARN of the configuration manager.</p>
    pub fn get_manager_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.manager_arn
    }
    /// <p>The ID of the configuration definition.</p>
    pub fn configuration_definition_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configuration_definition_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the configuration definition.</p>
    pub fn set_configuration_definition_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configuration_definition_id = input;
        self
    }
    /// <p>The ID of the configuration definition.</p>
    pub fn get_configuration_definition_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.configuration_definition_id
    }
    /// <p>The type of the Quick Setup configuration.</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of the Quick Setup configuration.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the Quick Setup configuration.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The version of the Quick Setup type used.</p>
    pub fn type_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the Quick Setup type used.</p>
    pub fn set_type_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_version = input;
        self
    }
    /// <p>The version of the Quick Setup type used.</p>
    pub fn get_type_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_version
    }
    /// <p>The ID of the Amazon Web Services account where the configuration was deployed.</p>
    pub fn account(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account where the configuration was deployed.</p>
    pub fn set_account(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account where the configuration was deployed.</p>
    pub fn get_account(&self) -> &::std::option::Option<::std::string::String> {
        &self.account
    }
    /// <p>The Amazon Web Services Region where the configuration was deployed.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region where the configuration was deployed.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Amazon Web Services Region where the configuration was deployed.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The datetime stamp when the configuration manager was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The datetime stamp when the configuration manager was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The datetime stamp when the configuration manager was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The datetime stamp when the configuration manager was last updated.</p>
    pub fn last_modified_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The datetime stamp when the configuration manager was last updated.</p>
    pub fn set_last_modified_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_at = input;
        self
    }
    /// <p>The datetime stamp when the configuration manager was last updated.</p>
    pub fn get_last_modified_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_at
    }
    /// Appends an item to `status_summaries`.
    ///
    /// To override the contents of this collection use [`set_status_summaries`](Self::set_status_summaries).
    ///
    /// <p>A summary of the state of the configuration manager. This includes deployment statuses, association statuses, drift statuses, health checks, and more.</p>
    pub fn status_summaries(mut self, input: crate::types::StatusSummary) -> Self {
        let mut v = self.status_summaries.unwrap_or_default();
        v.push(input);
        self.status_summaries = ::std::option::Option::Some(v);
        self
    }
    /// <p>A summary of the state of the configuration manager. This includes deployment statuses, association statuses, drift statuses, health checks, and more.</p>
    pub fn set_status_summaries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StatusSummary>>) -> Self {
        self.status_summaries = input;
        self
    }
    /// <p>A summary of the state of the configuration manager. This includes deployment statuses, association statuses, drift statuses, health checks, and more.</p>
    pub fn get_status_summaries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StatusSummary>> {
        &self.status_summaries
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>The parameters for the configuration definition type.</p>
    pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The parameters for the configuration definition type.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>The parameters for the configuration definition type.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.parameters
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetConfigurationOutput`](crate::operation::get_configuration::GetConfigurationOutput).
    pub fn build(self) -> crate::operation::get_configuration::GetConfigurationOutput {
        crate::operation::get_configuration::GetConfigurationOutput {
            id: self.id,
            manager_arn: self.manager_arn,
            configuration_definition_id: self.configuration_definition_id,
            r#type: self.r#type,
            type_version: self.type_version,
            account: self.account,
            region: self.region,
            created_at: self.created_at,
            last_modified_at: self.last_modified_at,
            status_summaries: self.status_summaries,
            parameters: self.parameters,
            _request_id: self._request_id,
        }
    }
}
