// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateConfigurationManagerInput {
    /// <p>A name for the configuration manager.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the configuration manager.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The definition of the Quick Setup configuration that the configuration manager deploys.</p>
    pub configuration_definitions: ::std::option::Option<::std::vec::Vec<crate::types::ConfigurationDefinitionInput>>,
    /// <p>Key-value pairs of metadata to assign to the configuration manager.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateConfigurationManagerInput {
    /// <p>A name for the configuration manager.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the configuration manager.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The definition of the Quick Setup configuration that the configuration manager deploys.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.configuration_definitions.is_none()`.
    pub fn configuration_definitions(&self) -> &[crate::types::ConfigurationDefinitionInput] {
        self.configuration_definitions.as_deref().unwrap_or_default()
    }
    /// <p>Key-value pairs of metadata to assign to the configuration manager.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for CreateConfigurationManagerInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateConfigurationManagerInput");
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("configuration_definitions", &self.configuration_definitions);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CreateConfigurationManagerInput {
    /// Creates a new builder-style object to manufacture [`CreateConfigurationManagerInput`](crate::operation::create_configuration_manager::CreateConfigurationManagerInput).
    pub fn builder() -> crate::operation::create_configuration_manager::builders::CreateConfigurationManagerInputBuilder {
        crate::operation::create_configuration_manager::builders::CreateConfigurationManagerInputBuilder::default()
    }
}

/// A builder for [`CreateConfigurationManagerInput`](crate::operation::create_configuration_manager::CreateConfigurationManagerInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateConfigurationManagerInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) configuration_definitions: ::std::option::Option<::std::vec::Vec<crate::types::ConfigurationDefinitionInput>>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateConfigurationManagerInputBuilder {
    /// <p>A name for the configuration manager.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the configuration manager.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name for the configuration manager.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of the configuration manager.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the configuration manager.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the configuration manager.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `configuration_definitions`.
    ///
    /// To override the contents of this collection use [`set_configuration_definitions`](Self::set_configuration_definitions).
    ///
    /// <p>The definition of the Quick Setup configuration that the configuration manager deploys.</p>
    pub fn configuration_definitions(mut self, input: crate::types::ConfigurationDefinitionInput) -> Self {
        let mut v = self.configuration_definitions.unwrap_or_default();
        v.push(input);
        self.configuration_definitions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The definition of the Quick Setup configuration that the configuration manager deploys.</p>
    pub fn set_configuration_definitions(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ConfigurationDefinitionInput>>,
    ) -> Self {
        self.configuration_definitions = input;
        self
    }
    /// <p>The definition of the Quick Setup configuration that the configuration manager deploys.</p>
    pub fn get_configuration_definitions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ConfigurationDefinitionInput>> {
        &self.configuration_definitions
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Key-value pairs of metadata to assign to the configuration manager.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Key-value pairs of metadata to assign to the configuration manager.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Key-value pairs of metadata to assign to the configuration manager.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateConfigurationManagerInput`](crate::operation::create_configuration_manager::CreateConfigurationManagerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_configuration_manager::CreateConfigurationManagerInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_configuration_manager::CreateConfigurationManagerInput {
            name: self.name,
            description: self.description,
            configuration_definitions: self.configuration_definitions,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for CreateConfigurationManagerInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateConfigurationManagerInputBuilder");
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("configuration_definitions", &self.configuration_definitions);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
