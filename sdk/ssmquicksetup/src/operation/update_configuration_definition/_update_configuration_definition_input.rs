// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateConfigurationDefinitionInput {
    /// <p>The ARN of the configuration manager associated with the definition to update.</p>
    pub manager_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the configuration definition you want to update.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The version of the Quick Setup type to use.</p>
    pub type_version: ::std::option::Option<::std::string::String>,
    /// <p>The parameters for the configuration definition type.</p>
    pub parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The name of the IAM role used to deploy local configurations.</p>
    pub local_deployment_execution_role_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the IAM role used to administrate local configuration deployments.</p>
    pub local_deployment_administration_role_arn: ::std::option::Option<::std::string::String>,
}
impl UpdateConfigurationDefinitionInput {
    /// <p>The ARN of the configuration manager associated with the definition to update.</p>
    pub fn manager_arn(&self) -> ::std::option::Option<&str> {
        self.manager_arn.as_deref()
    }
    /// <p>The ID of the configuration definition you want to update.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The version of the Quick Setup type to use.</p>
    pub fn type_version(&self) -> ::std::option::Option<&str> {
        self.type_version.as_deref()
    }
    /// <p>The parameters for the configuration definition type.</p>
    pub fn parameters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.parameters.as_ref()
    }
    /// <p>The name of the IAM role used to deploy local configurations.</p>
    pub fn local_deployment_execution_role_name(&self) -> ::std::option::Option<&str> {
        self.local_deployment_execution_role_name.as_deref()
    }
    /// <p>The ARN of the IAM role used to administrate local configuration deployments.</p>
    pub fn local_deployment_administration_role_arn(&self) -> ::std::option::Option<&str> {
        self.local_deployment_administration_role_arn.as_deref()
    }
}
impl UpdateConfigurationDefinitionInput {
    /// Creates a new builder-style object to manufacture [`UpdateConfigurationDefinitionInput`](crate::operation::update_configuration_definition::UpdateConfigurationDefinitionInput).
    pub fn builder() -> crate::operation::update_configuration_definition::builders::UpdateConfigurationDefinitionInputBuilder {
        crate::operation::update_configuration_definition::builders::UpdateConfigurationDefinitionInputBuilder::default()
    }
}

/// A builder for [`UpdateConfigurationDefinitionInput`](crate::operation::update_configuration_definition::UpdateConfigurationDefinitionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateConfigurationDefinitionInputBuilder {
    pub(crate) manager_arn: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) type_version: ::std::option::Option<::std::string::String>,
    pub(crate) parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) local_deployment_execution_role_name: ::std::option::Option<::std::string::String>,
    pub(crate) local_deployment_administration_role_arn: ::std::option::Option<::std::string::String>,
}
impl UpdateConfigurationDefinitionInputBuilder {
    /// <p>The ARN of the configuration manager associated with the definition to update.</p>
    /// This field is required.
    pub fn manager_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.manager_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the configuration manager associated with the definition to update.</p>
    pub fn set_manager_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.manager_arn = input;
        self
    }
    /// <p>The ARN of the configuration manager associated with the definition to update.</p>
    pub fn get_manager_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.manager_arn
    }
    /// <p>The ID of the configuration definition you want to update.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the configuration definition you want to update.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the configuration definition you want to update.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The version of the Quick Setup type to use.</p>
    pub fn type_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the Quick Setup type to use.</p>
    pub fn set_type_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_version = input;
        self
    }
    /// <p>The version of the Quick Setup type to use.</p>
    pub fn get_type_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_version
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>The parameters for the configuration definition type.</p>
    pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The parameters for the configuration definition type.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>The parameters for the configuration definition type.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.parameters
    }
    /// <p>The name of the IAM role used to deploy local configurations.</p>
    pub fn local_deployment_execution_role_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_deployment_execution_role_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the IAM role used to deploy local configurations.</p>
    pub fn set_local_deployment_execution_role_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_deployment_execution_role_name = input;
        self
    }
    /// <p>The name of the IAM role used to deploy local configurations.</p>
    pub fn get_local_deployment_execution_role_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_deployment_execution_role_name
    }
    /// <p>The ARN of the IAM role used to administrate local configuration deployments.</p>
    pub fn local_deployment_administration_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_deployment_administration_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role used to administrate local configuration deployments.</p>
    pub fn set_local_deployment_administration_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_deployment_administration_role_arn = input;
        self
    }
    /// <p>The ARN of the IAM role used to administrate local configuration deployments.</p>
    pub fn get_local_deployment_administration_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_deployment_administration_role_arn
    }
    /// Consumes the builder and constructs a [`UpdateConfigurationDefinitionInput`](crate::operation::update_configuration_definition::UpdateConfigurationDefinitionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_configuration_definition::UpdateConfigurationDefinitionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_configuration_definition::UpdateConfigurationDefinitionInput {
            manager_arn: self.manager_arn,
            id: self.id,
            type_version: self.type_version,
            parameters: self.parameters,
            local_deployment_execution_role_name: self.local_deployment_execution_role_name,
            local_deployment_administration_role_arn: self.local_deployment_administration_role_arn,
        })
    }
}
