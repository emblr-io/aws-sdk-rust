// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListConfigurationManagersInput {
    /// <p>The token to use when requesting a specific set of items from a list.</p>
    pub starting_token: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the maximum number of configuration managers that are returned by the request.</p>
    pub max_items: ::std::option::Option<i32>,
    /// <p>Filters the results returned by the request.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
}
impl ListConfigurationManagersInput {
    /// <p>The token to use when requesting a specific set of items from a list.</p>
    pub fn starting_token(&self) -> ::std::option::Option<&str> {
        self.starting_token.as_deref()
    }
    /// <p>Specifies the maximum number of configuration managers that are returned by the request.</p>
    pub fn max_items(&self) -> ::std::option::Option<i32> {
        self.max_items
    }
    /// <p>Filters the results returned by the request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::Filter] {
        self.filters.as_deref().unwrap_or_default()
    }
}
impl ListConfigurationManagersInput {
    /// Creates a new builder-style object to manufacture [`ListConfigurationManagersInput`](crate::operation::list_configuration_managers::ListConfigurationManagersInput).
    pub fn builder() -> crate::operation::list_configuration_managers::builders::ListConfigurationManagersInputBuilder {
        crate::operation::list_configuration_managers::builders::ListConfigurationManagersInputBuilder::default()
    }
}

/// A builder for [`ListConfigurationManagersInput`](crate::operation::list_configuration_managers::ListConfigurationManagersInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListConfigurationManagersInputBuilder {
    pub(crate) starting_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_items: ::std::option::Option<i32>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
}
impl ListConfigurationManagersInputBuilder {
    /// <p>The token to use when requesting a specific set of items from a list.</p>
    pub fn starting_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.starting_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to use when requesting a specific set of items from a list.</p>
    pub fn set_starting_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.starting_token = input;
        self
    }
    /// <p>The token to use when requesting a specific set of items from a list.</p>
    pub fn get_starting_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.starting_token
    }
    /// <p>Specifies the maximum number of configuration managers that are returned by the request.</p>
    pub fn max_items(mut self, input: i32) -> Self {
        self.max_items = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the maximum number of configuration managers that are returned by the request.</p>
    pub fn set_max_items(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_items = input;
        self
    }
    /// <p>Specifies the maximum number of configuration managers that are returned by the request.</p>
    pub fn get_max_items(&self) -> &::std::option::Option<i32> {
        &self.max_items
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>Filters the results returned by the request.</p>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Filters the results returned by the request.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>Filters the results returned by the request.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        &self.filters
    }
    /// Consumes the builder and constructs a [`ListConfigurationManagersInput`](crate::operation::list_configuration_managers::ListConfigurationManagersInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_configuration_managers::ListConfigurationManagersInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_configuration_managers::ListConfigurationManagersInput {
            starting_token: self.starting_token,
            max_items: self.max_items,
            filters: self.filters,
        })
    }
}
