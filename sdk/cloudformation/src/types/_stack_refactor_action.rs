// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the stack and the action that CloudFormation will perform on it if you execute the stack refactor.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StackRefactorAction {
    /// <p>The action that CloudFormation takes on the stack.</p>
    pub action: ::std::option::Option<crate::types::StackRefactorActionType>,
    /// <p>The type that will be evaluated in the <code>StackRefactorAction</code>. The following are potential <code>Entity</code> types:</p>
    /// <ul>
    /// <li>
    /// <p><code>Stack</code></p></li>
    /// <li>
    /// <p><code>Resource</code></p></li>
    /// </ul>
    pub entity: ::std::option::Option<crate::types::StackRefactorActionEntity>,
    /// <p>The name or unique identifier associated with the physical instance of the resource.</p>
    pub physical_resource_id: ::std::option::Option<::std::string::String>,
    /// <p>A key-value pair that identifies the target resource. The key is an identifier property (for example, <code>BucketName</code> for <code>AWS::S3::Bucket</code> resources) and the value is the actual property value (for example, <code>MyS3Bucket</code>).</p>
    pub resource_identifier: ::std::option::Option<::std::string::String>,
    /// <p>A description to help you identify the refactor.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The detection type is one of the following:</p>
    /// <ul>
    /// <li>
    /// <p>Auto: CloudFormation figured out the mapping on its own.</p></li>
    /// <li>
    /// <p>Manual: The customer provided the mapping in the <code>ResourceMapping</code> parameter.</p></li>
    /// </ul>
    pub detection: ::std::option::Option<crate::types::StackRefactorDetection>,
    /// <p>The description of the detection type.</p>
    pub detection_reason: ::std::option::Option<::std::string::String>,
    /// <p>Assigns one or more tags to specified resources.</p>
    pub tag_resources: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>Removes one or more tags to specified resources.</p>
    pub untag_resources: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The mapping for the stack resource <code>Source</code> and stack resource <code>Destination</code>.</p>
    pub resource_mapping: ::std::option::Option<crate::types::ResourceMapping>,
}
impl StackRefactorAction {
    /// <p>The action that CloudFormation takes on the stack.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::StackRefactorActionType> {
        self.action.as_ref()
    }
    /// <p>The type that will be evaluated in the <code>StackRefactorAction</code>. The following are potential <code>Entity</code> types:</p>
    /// <ul>
    /// <li>
    /// <p><code>Stack</code></p></li>
    /// <li>
    /// <p><code>Resource</code></p></li>
    /// </ul>
    pub fn entity(&self) -> ::std::option::Option<&crate::types::StackRefactorActionEntity> {
        self.entity.as_ref()
    }
    /// <p>The name or unique identifier associated with the physical instance of the resource.</p>
    pub fn physical_resource_id(&self) -> ::std::option::Option<&str> {
        self.physical_resource_id.as_deref()
    }
    /// <p>A key-value pair that identifies the target resource. The key is an identifier property (for example, <code>BucketName</code> for <code>AWS::S3::Bucket</code> resources) and the value is the actual property value (for example, <code>MyS3Bucket</code>).</p>
    pub fn resource_identifier(&self) -> ::std::option::Option<&str> {
        self.resource_identifier.as_deref()
    }
    /// <p>A description to help you identify the refactor.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The detection type is one of the following:</p>
    /// <ul>
    /// <li>
    /// <p>Auto: CloudFormation figured out the mapping on its own.</p></li>
    /// <li>
    /// <p>Manual: The customer provided the mapping in the <code>ResourceMapping</code> parameter.</p></li>
    /// </ul>
    pub fn detection(&self) -> ::std::option::Option<&crate::types::StackRefactorDetection> {
        self.detection.as_ref()
    }
    /// <p>The description of the detection type.</p>
    pub fn detection_reason(&self) -> ::std::option::Option<&str> {
        self.detection_reason.as_deref()
    }
    /// <p>Assigns one or more tags to specified resources.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tag_resources.is_none()`.
    pub fn tag_resources(&self) -> &[crate::types::Tag] {
        self.tag_resources.as_deref().unwrap_or_default()
    }
    /// <p>Removes one or more tags to specified resources.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.untag_resources.is_none()`.
    pub fn untag_resources(&self) -> &[::std::string::String] {
        self.untag_resources.as_deref().unwrap_or_default()
    }
    /// <p>The mapping for the stack resource <code>Source</code> and stack resource <code>Destination</code>.</p>
    pub fn resource_mapping(&self) -> ::std::option::Option<&crate::types::ResourceMapping> {
        self.resource_mapping.as_ref()
    }
}
impl StackRefactorAction {
    /// Creates a new builder-style object to manufacture [`StackRefactorAction`](crate::types::StackRefactorAction).
    pub fn builder() -> crate::types::builders::StackRefactorActionBuilder {
        crate::types::builders::StackRefactorActionBuilder::default()
    }
}

/// A builder for [`StackRefactorAction`](crate::types::StackRefactorAction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StackRefactorActionBuilder {
    pub(crate) action: ::std::option::Option<crate::types::StackRefactorActionType>,
    pub(crate) entity: ::std::option::Option<crate::types::StackRefactorActionEntity>,
    pub(crate) physical_resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) detection: ::std::option::Option<crate::types::StackRefactorDetection>,
    pub(crate) detection_reason: ::std::option::Option<::std::string::String>,
    pub(crate) tag_resources: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) untag_resources: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) resource_mapping: ::std::option::Option<crate::types::ResourceMapping>,
}
impl StackRefactorActionBuilder {
    /// <p>The action that CloudFormation takes on the stack.</p>
    pub fn action(mut self, input: crate::types::StackRefactorActionType) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action that CloudFormation takes on the stack.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::StackRefactorActionType>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action that CloudFormation takes on the stack.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::StackRefactorActionType> {
        &self.action
    }
    /// <p>The type that will be evaluated in the <code>StackRefactorAction</code>. The following are potential <code>Entity</code> types:</p>
    /// <ul>
    /// <li>
    /// <p><code>Stack</code></p></li>
    /// <li>
    /// <p><code>Resource</code></p></li>
    /// </ul>
    pub fn entity(mut self, input: crate::types::StackRefactorActionEntity) -> Self {
        self.entity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type that will be evaluated in the <code>StackRefactorAction</code>. The following are potential <code>Entity</code> types:</p>
    /// <ul>
    /// <li>
    /// <p><code>Stack</code></p></li>
    /// <li>
    /// <p><code>Resource</code></p></li>
    /// </ul>
    pub fn set_entity(mut self, input: ::std::option::Option<crate::types::StackRefactorActionEntity>) -> Self {
        self.entity = input;
        self
    }
    /// <p>The type that will be evaluated in the <code>StackRefactorAction</code>. The following are potential <code>Entity</code> types:</p>
    /// <ul>
    /// <li>
    /// <p><code>Stack</code></p></li>
    /// <li>
    /// <p><code>Resource</code></p></li>
    /// </ul>
    pub fn get_entity(&self) -> &::std::option::Option<crate::types::StackRefactorActionEntity> {
        &self.entity
    }
    /// <p>The name or unique identifier associated with the physical instance of the resource.</p>
    pub fn physical_resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.physical_resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or unique identifier associated with the physical instance of the resource.</p>
    pub fn set_physical_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.physical_resource_id = input;
        self
    }
    /// <p>The name or unique identifier associated with the physical instance of the resource.</p>
    pub fn get_physical_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.physical_resource_id
    }
    /// <p>A key-value pair that identifies the target resource. The key is an identifier property (for example, <code>BucketName</code> for <code>AWS::S3::Bucket</code> resources) and the value is the actual property value (for example, <code>MyS3Bucket</code>).</p>
    pub fn resource_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A key-value pair that identifies the target resource. The key is an identifier property (for example, <code>BucketName</code> for <code>AWS::S3::Bucket</code> resources) and the value is the actual property value (for example, <code>MyS3Bucket</code>).</p>
    pub fn set_resource_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_identifier = input;
        self
    }
    /// <p>A key-value pair that identifies the target resource. The key is an identifier property (for example, <code>BucketName</code> for <code>AWS::S3::Bucket</code> resources) and the value is the actual property value (for example, <code>MyS3Bucket</code>).</p>
    pub fn get_resource_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_identifier
    }
    /// <p>A description to help you identify the refactor.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description to help you identify the refactor.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description to help you identify the refactor.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The detection type is one of the following:</p>
    /// <ul>
    /// <li>
    /// <p>Auto: CloudFormation figured out the mapping on its own.</p></li>
    /// <li>
    /// <p>Manual: The customer provided the mapping in the <code>ResourceMapping</code> parameter.</p></li>
    /// </ul>
    pub fn detection(mut self, input: crate::types::StackRefactorDetection) -> Self {
        self.detection = ::std::option::Option::Some(input);
        self
    }
    /// <p>The detection type is one of the following:</p>
    /// <ul>
    /// <li>
    /// <p>Auto: CloudFormation figured out the mapping on its own.</p></li>
    /// <li>
    /// <p>Manual: The customer provided the mapping in the <code>ResourceMapping</code> parameter.</p></li>
    /// </ul>
    pub fn set_detection(mut self, input: ::std::option::Option<crate::types::StackRefactorDetection>) -> Self {
        self.detection = input;
        self
    }
    /// <p>The detection type is one of the following:</p>
    /// <ul>
    /// <li>
    /// <p>Auto: CloudFormation figured out the mapping on its own.</p></li>
    /// <li>
    /// <p>Manual: The customer provided the mapping in the <code>ResourceMapping</code> parameter.</p></li>
    /// </ul>
    pub fn get_detection(&self) -> &::std::option::Option<crate::types::StackRefactorDetection> {
        &self.detection
    }
    /// <p>The description of the detection type.</p>
    pub fn detection_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.detection_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the detection type.</p>
    pub fn set_detection_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.detection_reason = input;
        self
    }
    /// <p>The description of the detection type.</p>
    pub fn get_detection_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.detection_reason
    }
    /// Appends an item to `tag_resources`.
    ///
    /// To override the contents of this collection use [`set_tag_resources`](Self::set_tag_resources).
    ///
    /// <p>Assigns one or more tags to specified resources.</p>
    pub fn tag_resources(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tag_resources.unwrap_or_default();
        v.push(input);
        self.tag_resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>Assigns one or more tags to specified resources.</p>
    pub fn set_tag_resources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tag_resources = input;
        self
    }
    /// <p>Assigns one or more tags to specified resources.</p>
    pub fn get_tag_resources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tag_resources
    }
    /// Appends an item to `untag_resources`.
    ///
    /// To override the contents of this collection use [`set_untag_resources`](Self::set_untag_resources).
    ///
    /// <p>Removes one or more tags to specified resources.</p>
    pub fn untag_resources(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.untag_resources.unwrap_or_default();
        v.push(input.into());
        self.untag_resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>Removes one or more tags to specified resources.</p>
    pub fn set_untag_resources(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.untag_resources = input;
        self
    }
    /// <p>Removes one or more tags to specified resources.</p>
    pub fn get_untag_resources(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.untag_resources
    }
    /// <p>The mapping for the stack resource <code>Source</code> and stack resource <code>Destination</code>.</p>
    pub fn resource_mapping(mut self, input: crate::types::ResourceMapping) -> Self {
        self.resource_mapping = ::std::option::Option::Some(input);
        self
    }
    /// <p>The mapping for the stack resource <code>Source</code> and stack resource <code>Destination</code>.</p>
    pub fn set_resource_mapping(mut self, input: ::std::option::Option<crate::types::ResourceMapping>) -> Self {
        self.resource_mapping = input;
        self
    }
    /// <p>The mapping for the stack resource <code>Source</code> and stack resource <code>Destination</code>.</p>
    pub fn get_resource_mapping(&self) -> &::std::option::Option<crate::types::ResourceMapping> {
        &self.resource_mapping
    }
    /// Consumes the builder and constructs a [`StackRefactorAction`](crate::types::StackRefactorAction).
    pub fn build(self) -> crate::types::StackRefactorAction {
        crate::types::StackRefactorAction {
            action: self.action,
            entity: self.entity,
            physical_resource_id: self.physical_resource_id,
            resource_identifier: self.resource_identifier,
            description: self.description,
            detection: self.detection,
            detection_reason: self.detection_reason,
            tag_resources: self.tag_resources,
            untag_resources: self.untag_resources,
            resource_mapping: self.resource_mapping,
        }
    }
}
