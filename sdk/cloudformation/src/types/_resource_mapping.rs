// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the current source of the resource and the destination of where it will be moved to.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceMapping {
    /// <p>The source stack <code>StackName</code> and <code>LogicalResourceId</code> for the resource being refactored.</p>
    pub source: ::std::option::Option<crate::types::ResourceLocation>,
    /// <p>The destination stack <code>StackName</code> and <code>LogicalResourceId</code> for the resource being refactored.</p>
    pub destination: ::std::option::Option<crate::types::ResourceLocation>,
}
impl ResourceMapping {
    /// <p>The source stack <code>StackName</code> and <code>LogicalResourceId</code> for the resource being refactored.</p>
    pub fn source(&self) -> ::std::option::Option<&crate::types::ResourceLocation> {
        self.source.as_ref()
    }
    /// <p>The destination stack <code>StackName</code> and <code>LogicalResourceId</code> for the resource being refactored.</p>
    pub fn destination(&self) -> ::std::option::Option<&crate::types::ResourceLocation> {
        self.destination.as_ref()
    }
}
impl ResourceMapping {
    /// Creates a new builder-style object to manufacture [`ResourceMapping`](crate::types::ResourceMapping).
    pub fn builder() -> crate::types::builders::ResourceMappingBuilder {
        crate::types::builders::ResourceMappingBuilder::default()
    }
}

/// A builder for [`ResourceMapping`](crate::types::ResourceMapping).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ResourceMappingBuilder {
    pub(crate) source: ::std::option::Option<crate::types::ResourceLocation>,
    pub(crate) destination: ::std::option::Option<crate::types::ResourceLocation>,
}
impl ResourceMappingBuilder {
    /// <p>The source stack <code>StackName</code> and <code>LogicalResourceId</code> for the resource being refactored.</p>
    /// This field is required.
    pub fn source(mut self, input: crate::types::ResourceLocation) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source stack <code>StackName</code> and <code>LogicalResourceId</code> for the resource being refactored.</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::ResourceLocation>) -> Self {
        self.source = input;
        self
    }
    /// <p>The source stack <code>StackName</code> and <code>LogicalResourceId</code> for the resource being refactored.</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::ResourceLocation> {
        &self.source
    }
    /// <p>The destination stack <code>StackName</code> and <code>LogicalResourceId</code> for the resource being refactored.</p>
    /// This field is required.
    pub fn destination(mut self, input: crate::types::ResourceLocation) -> Self {
        self.destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>The destination stack <code>StackName</code> and <code>LogicalResourceId</code> for the resource being refactored.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<crate::types::ResourceLocation>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The destination stack <code>StackName</code> and <code>LogicalResourceId</code> for the resource being refactored.</p>
    pub fn get_destination(&self) -> &::std::option::Option<crate::types::ResourceLocation> {
        &self.destination
    }
    /// Consumes the builder and constructs a [`ResourceMapping`](crate::types::ResourceMapping).
    pub fn build(self) -> crate::types::ResourceMapping {
        crate::types::ResourceMapping {
            source: self.source,
            destination: self.destination,
        }
    }
}
