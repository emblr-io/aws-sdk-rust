// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filter that is used to specify which resource types to scan.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScanFilter {
    /// <p>An array of strings where each string represents an Amazon Web Services resource type you want to scan. Each string defines the resource type using the format <code>AWS::ServiceName::ResourceType</code>, for example, <code>AWS::DynamoDB::Table</code>. For the full list of supported resource types, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resource-import-supported-resources.html">Resource type support</a> table in the <i>CloudFormation User Guide</i>.</p>
    /// <p>To scan all resource types within a service, you can use a wildcard, represented by an asterisk (<code>*</code>). You can place an asterisk at only the end of the string, for example, <code>AWS::S3::*</code>.</p>
    pub types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ScanFilter {
    /// <p>An array of strings where each string represents an Amazon Web Services resource type you want to scan. Each string defines the resource type using the format <code>AWS::ServiceName::ResourceType</code>, for example, <code>AWS::DynamoDB::Table</code>. For the full list of supported resource types, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resource-import-supported-resources.html">Resource type support</a> table in the <i>CloudFormation User Guide</i>.</p>
    /// <p>To scan all resource types within a service, you can use a wildcard, represented by an asterisk (<code>*</code>). You can place an asterisk at only the end of the string, for example, <code>AWS::S3::*</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.types.is_none()`.
    pub fn types(&self) -> &[::std::string::String] {
        self.types.as_deref().unwrap_or_default()
    }
}
impl ScanFilter {
    /// Creates a new builder-style object to manufacture [`ScanFilter`](crate::types::ScanFilter).
    pub fn builder() -> crate::types::builders::ScanFilterBuilder {
        crate::types::builders::ScanFilterBuilder::default()
    }
}

/// A builder for [`ScanFilter`](crate::types::ScanFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ScanFilterBuilder {
    pub(crate) types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ScanFilterBuilder {
    /// Appends an item to `types`.
    ///
    /// To override the contents of this collection use [`set_types`](Self::set_types).
    ///
    /// <p>An array of strings where each string represents an Amazon Web Services resource type you want to scan. Each string defines the resource type using the format <code>AWS::ServiceName::ResourceType</code>, for example, <code>AWS::DynamoDB::Table</code>. For the full list of supported resource types, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resource-import-supported-resources.html">Resource type support</a> table in the <i>CloudFormation User Guide</i>.</p>
    /// <p>To scan all resource types within a service, you can use a wildcard, represented by an asterisk (<code>*</code>). You can place an asterisk at only the end of the string, for example, <code>AWS::S3::*</code>.</p>
    pub fn types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.types.unwrap_or_default();
        v.push(input.into());
        self.types = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of strings where each string represents an Amazon Web Services resource type you want to scan. Each string defines the resource type using the format <code>AWS::ServiceName::ResourceType</code>, for example, <code>AWS::DynamoDB::Table</code>. For the full list of supported resource types, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resource-import-supported-resources.html">Resource type support</a> table in the <i>CloudFormation User Guide</i>.</p>
    /// <p>To scan all resource types within a service, you can use a wildcard, represented by an asterisk (<code>*</code>). You can place an asterisk at only the end of the string, for example, <code>AWS::S3::*</code>.</p>
    pub fn set_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.types = input;
        self
    }
    /// <p>An array of strings where each string represents an Amazon Web Services resource type you want to scan. Each string defines the resource type using the format <code>AWS::ServiceName::ResourceType</code>, for example, <code>AWS::DynamoDB::Table</code>. For the full list of supported resource types, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resource-import-supported-resources.html">Resource type support</a> table in the <i>CloudFormation User Guide</i>.</p>
    /// <p>To scan all resource types within a service, you can use a wildcard, represented by an asterisk (<code>*</code>). You can place an asterisk at only the end of the string, for example, <code>AWS::S3::*</code>.</p>
    pub fn get_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.types
    }
    /// Consumes the builder and constructs a [`ScanFilter`](crate::types::ScanFilter).
    pub fn build(self) -> crate::types::ScanFilter {
        crate::types::ScanFilter { types: self.types }
    }
}
