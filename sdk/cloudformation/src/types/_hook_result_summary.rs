// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a Hook invocation, its status, and the reason for its status.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HookResultSummary {
    /// <p>The exact point in the provisioning logic where the Hook runs.</p>
    pub invocation_point: ::std::option::Option<crate::types::HookInvocationPoint>,
    /// <p>The failure mode of the invocation. The following are potential modes:</p>
    /// <ul>
    /// <li>
    /// <p><code>FAIL</code>: If the hook invocation returns a failure, then the requested target operation should fail.</p></li>
    /// <li>
    /// <p><code>WARN</code>: If the hook invocation returns a failure, then the requested target operation should warn.</p></li>
    /// </ul>
    pub failure_mode: ::std::option::Option<crate::types::HookFailureMode>,
    /// <p>The type name of the Hook being invoked.</p>
    pub type_name: ::std::option::Option<::std::string::String>,
    /// <p>The version of the Hook being invoked.</p>
    pub type_version_id: ::std::option::Option<::std::string::String>,
    /// <p>The version of the Hook type configuration.</p>
    pub type_configuration_version_id: ::std::option::Option<::std::string::String>,
    /// <p>The state of the Hook invocation.</p>
    pub status: ::std::option::Option<crate::types::HookStatus>,
    /// <p>A description of the Hook results status. For example, if the Hook result is in a <code>FAILED</code> state, this may contain additional information for the <code>FAILED</code> state.</p>
    pub hook_status_reason: ::std::option::Option<::std::string::String>,
}
impl HookResultSummary {
    /// <p>The exact point in the provisioning logic where the Hook runs.</p>
    pub fn invocation_point(&self) -> ::std::option::Option<&crate::types::HookInvocationPoint> {
        self.invocation_point.as_ref()
    }
    /// <p>The failure mode of the invocation. The following are potential modes:</p>
    /// <ul>
    /// <li>
    /// <p><code>FAIL</code>: If the hook invocation returns a failure, then the requested target operation should fail.</p></li>
    /// <li>
    /// <p><code>WARN</code>: If the hook invocation returns a failure, then the requested target operation should warn.</p></li>
    /// </ul>
    pub fn failure_mode(&self) -> ::std::option::Option<&crate::types::HookFailureMode> {
        self.failure_mode.as_ref()
    }
    /// <p>The type name of the Hook being invoked.</p>
    pub fn type_name(&self) -> ::std::option::Option<&str> {
        self.type_name.as_deref()
    }
    /// <p>The version of the Hook being invoked.</p>
    pub fn type_version_id(&self) -> ::std::option::Option<&str> {
        self.type_version_id.as_deref()
    }
    /// <p>The version of the Hook type configuration.</p>
    pub fn type_configuration_version_id(&self) -> ::std::option::Option<&str> {
        self.type_configuration_version_id.as_deref()
    }
    /// <p>The state of the Hook invocation.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::HookStatus> {
        self.status.as_ref()
    }
    /// <p>A description of the Hook results status. For example, if the Hook result is in a <code>FAILED</code> state, this may contain additional information for the <code>FAILED</code> state.</p>
    pub fn hook_status_reason(&self) -> ::std::option::Option<&str> {
        self.hook_status_reason.as_deref()
    }
}
impl HookResultSummary {
    /// Creates a new builder-style object to manufacture [`HookResultSummary`](crate::types::HookResultSummary).
    pub fn builder() -> crate::types::builders::HookResultSummaryBuilder {
        crate::types::builders::HookResultSummaryBuilder::default()
    }
}

/// A builder for [`HookResultSummary`](crate::types::HookResultSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct HookResultSummaryBuilder {
    pub(crate) invocation_point: ::std::option::Option<crate::types::HookInvocationPoint>,
    pub(crate) failure_mode: ::std::option::Option<crate::types::HookFailureMode>,
    pub(crate) type_name: ::std::option::Option<::std::string::String>,
    pub(crate) type_version_id: ::std::option::Option<::std::string::String>,
    pub(crate) type_configuration_version_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::HookStatus>,
    pub(crate) hook_status_reason: ::std::option::Option<::std::string::String>,
}
impl HookResultSummaryBuilder {
    /// <p>The exact point in the provisioning logic where the Hook runs.</p>
    pub fn invocation_point(mut self, input: crate::types::HookInvocationPoint) -> Self {
        self.invocation_point = ::std::option::Option::Some(input);
        self
    }
    /// <p>The exact point in the provisioning logic where the Hook runs.</p>
    pub fn set_invocation_point(mut self, input: ::std::option::Option<crate::types::HookInvocationPoint>) -> Self {
        self.invocation_point = input;
        self
    }
    /// <p>The exact point in the provisioning logic where the Hook runs.</p>
    pub fn get_invocation_point(&self) -> &::std::option::Option<crate::types::HookInvocationPoint> {
        &self.invocation_point
    }
    /// <p>The failure mode of the invocation. The following are potential modes:</p>
    /// <ul>
    /// <li>
    /// <p><code>FAIL</code>: If the hook invocation returns a failure, then the requested target operation should fail.</p></li>
    /// <li>
    /// <p><code>WARN</code>: If the hook invocation returns a failure, then the requested target operation should warn.</p></li>
    /// </ul>
    pub fn failure_mode(mut self, input: crate::types::HookFailureMode) -> Self {
        self.failure_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The failure mode of the invocation. The following are potential modes:</p>
    /// <ul>
    /// <li>
    /// <p><code>FAIL</code>: If the hook invocation returns a failure, then the requested target operation should fail.</p></li>
    /// <li>
    /// <p><code>WARN</code>: If the hook invocation returns a failure, then the requested target operation should warn.</p></li>
    /// </ul>
    pub fn set_failure_mode(mut self, input: ::std::option::Option<crate::types::HookFailureMode>) -> Self {
        self.failure_mode = input;
        self
    }
    /// <p>The failure mode of the invocation. The following are potential modes:</p>
    /// <ul>
    /// <li>
    /// <p><code>FAIL</code>: If the hook invocation returns a failure, then the requested target operation should fail.</p></li>
    /// <li>
    /// <p><code>WARN</code>: If the hook invocation returns a failure, then the requested target operation should warn.</p></li>
    /// </ul>
    pub fn get_failure_mode(&self) -> &::std::option::Option<crate::types::HookFailureMode> {
        &self.failure_mode
    }
    /// <p>The type name of the Hook being invoked.</p>
    pub fn type_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type name of the Hook being invoked.</p>
    pub fn set_type_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_name = input;
        self
    }
    /// <p>The type name of the Hook being invoked.</p>
    pub fn get_type_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_name
    }
    /// <p>The version of the Hook being invoked.</p>
    pub fn type_version_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_version_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the Hook being invoked.</p>
    pub fn set_type_version_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_version_id = input;
        self
    }
    /// <p>The version of the Hook being invoked.</p>
    pub fn get_type_version_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_version_id
    }
    /// <p>The version of the Hook type configuration.</p>
    pub fn type_configuration_version_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_configuration_version_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the Hook type configuration.</p>
    pub fn set_type_configuration_version_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_configuration_version_id = input;
        self
    }
    /// <p>The version of the Hook type configuration.</p>
    pub fn get_type_configuration_version_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_configuration_version_id
    }
    /// <p>The state of the Hook invocation.</p>
    pub fn status(mut self, input: crate::types::HookStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the Hook invocation.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::HookStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The state of the Hook invocation.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::HookStatus> {
        &self.status
    }
    /// <p>A description of the Hook results status. For example, if the Hook result is in a <code>FAILED</code> state, this may contain additional information for the <code>FAILED</code> state.</p>
    pub fn hook_status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hook_status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the Hook results status. For example, if the Hook result is in a <code>FAILED</code> state, this may contain additional information for the <code>FAILED</code> state.</p>
    pub fn set_hook_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hook_status_reason = input;
        self
    }
    /// <p>A description of the Hook results status. For example, if the Hook result is in a <code>FAILED</code> state, this may contain additional information for the <code>FAILED</code> state.</p>
    pub fn get_hook_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.hook_status_reason
    }
    /// Consumes the builder and constructs a [`HookResultSummary`](crate::types::HookResultSummary).
    pub fn build(self) -> crate::types::HookResultSummary {
        crate::types::HookResultSummary {
            invocation_point: self.invocation_point,
            failure_mode: self.failure_mode,
            type_name: self.type_name,
            type_version_id: self.type_version_id,
            type_configuration_version_id: self.type_configuration_version_id,
            status: self.status,
            hook_status_reason: self.hook_status_reason,
        }
    }
}
