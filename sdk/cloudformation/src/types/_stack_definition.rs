// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the stack and the template used by the stack.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StackDefinition {
    /// <p>The name associated with the stack.</p>
    pub stack_name: ::std::option::Option<::std::string::String>,
    /// <p>The file path for the stack template file.</p>
    pub template_body: ::std::option::Option<::std::string::String>,
    /// <p>The desired final state of the stack template.</p>
    pub template_url: ::std::option::Option<::std::string::String>,
}
impl StackDefinition {
    /// <p>The name associated with the stack.</p>
    pub fn stack_name(&self) -> ::std::option::Option<&str> {
        self.stack_name.as_deref()
    }
    /// <p>The file path for the stack template file.</p>
    pub fn template_body(&self) -> ::std::option::Option<&str> {
        self.template_body.as_deref()
    }
    /// <p>The desired final state of the stack template.</p>
    pub fn template_url(&self) -> ::std::option::Option<&str> {
        self.template_url.as_deref()
    }
}
impl StackDefinition {
    /// Creates a new builder-style object to manufacture [`StackDefinition`](crate::types::StackDefinition).
    pub fn builder() -> crate::types::builders::StackDefinitionBuilder {
        crate::types::builders::StackDefinitionBuilder::default()
    }
}

/// A builder for [`StackDefinition`](crate::types::StackDefinition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StackDefinitionBuilder {
    pub(crate) stack_name: ::std::option::Option<::std::string::String>,
    pub(crate) template_body: ::std::option::Option<::std::string::String>,
    pub(crate) template_url: ::std::option::Option<::std::string::String>,
}
impl StackDefinitionBuilder {
    /// <p>The name associated with the stack.</p>
    pub fn stack_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name associated with the stack.</p>
    pub fn set_stack_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_name = input;
        self
    }
    /// <p>The name associated with the stack.</p>
    pub fn get_stack_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_name
    }
    /// <p>The file path for the stack template file.</p>
    pub fn template_body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The file path for the stack template file.</p>
    pub fn set_template_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_body = input;
        self
    }
    /// <p>The file path for the stack template file.</p>
    pub fn get_template_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_body
    }
    /// <p>The desired final state of the stack template.</p>
    pub fn template_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The desired final state of the stack template.</p>
    pub fn set_template_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_url = input;
        self
    }
    /// <p>The desired final state of the stack template.</p>
    pub fn get_template_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_url
    }
    /// Consumes the builder and constructs a [`StackDefinition`](crate::types::StackDefinition).
    pub fn build(self) -> crate::types::StackDefinition {
        crate::types::StackDefinition {
            stack_name: self.stack_name,
            template_body: self.template_body,
            template_url: self.template_url,
        }
    }
}
