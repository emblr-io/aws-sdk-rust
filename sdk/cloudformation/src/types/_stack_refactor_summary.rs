// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of a stack refactor operation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StackRefactorSummary {
    /// <p>The ID associated with the stack refactor created from the <code>CreateStackRefactor</code> action.</p>
    pub stack_refactor_id: ::std::option::Option<::std::string::String>,
    /// <p>A description to help you identify the refactor.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The operation status that's provided after calling the <code>ExecuteStackRefactor</code> action.</p>
    pub execution_status: ::std::option::Option<crate::types::StackRefactorExecutionStatus>,
    /// <p>A detailed explanation for the stack refactor <code>ExecutionStatus</code>.</p>
    pub execution_status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The stack refactor operation status that's provided after calling the <code>CreateStackRefactor</code> action.</p>
    pub status: ::std::option::Option<crate::types::StackRefactorStatus>,
    /// <p>A detailed explanation for the stack refactor <code>Status</code>.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
}
impl StackRefactorSummary {
    /// <p>The ID associated with the stack refactor created from the <code>CreateStackRefactor</code> action.</p>
    pub fn stack_refactor_id(&self) -> ::std::option::Option<&str> {
        self.stack_refactor_id.as_deref()
    }
    /// <p>A description to help you identify the refactor.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The operation status that's provided after calling the <code>ExecuteStackRefactor</code> action.</p>
    pub fn execution_status(&self) -> ::std::option::Option<&crate::types::StackRefactorExecutionStatus> {
        self.execution_status.as_ref()
    }
    /// <p>A detailed explanation for the stack refactor <code>ExecutionStatus</code>.</p>
    pub fn execution_status_reason(&self) -> ::std::option::Option<&str> {
        self.execution_status_reason.as_deref()
    }
    /// <p>The stack refactor operation status that's provided after calling the <code>CreateStackRefactor</code> action.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::StackRefactorStatus> {
        self.status.as_ref()
    }
    /// <p>A detailed explanation for the stack refactor <code>Status</code>.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
}
impl StackRefactorSummary {
    /// Creates a new builder-style object to manufacture [`StackRefactorSummary`](crate::types::StackRefactorSummary).
    pub fn builder() -> crate::types::builders::StackRefactorSummaryBuilder {
        crate::types::builders::StackRefactorSummaryBuilder::default()
    }
}

/// A builder for [`StackRefactorSummary`](crate::types::StackRefactorSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StackRefactorSummaryBuilder {
    pub(crate) stack_refactor_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) execution_status: ::std::option::Option<crate::types::StackRefactorExecutionStatus>,
    pub(crate) execution_status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::StackRefactorStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
}
impl StackRefactorSummaryBuilder {
    /// <p>The ID associated with the stack refactor created from the <code>CreateStackRefactor</code> action.</p>
    pub fn stack_refactor_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_refactor_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID associated with the stack refactor created from the <code>CreateStackRefactor</code> action.</p>
    pub fn set_stack_refactor_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_refactor_id = input;
        self
    }
    /// <p>The ID associated with the stack refactor created from the <code>CreateStackRefactor</code> action.</p>
    pub fn get_stack_refactor_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_refactor_id
    }
    /// <p>A description to help you identify the refactor.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description to help you identify the refactor.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description to help you identify the refactor.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The operation status that's provided after calling the <code>ExecuteStackRefactor</code> action.</p>
    pub fn execution_status(mut self, input: crate::types::StackRefactorExecutionStatus) -> Self {
        self.execution_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operation status that's provided after calling the <code>ExecuteStackRefactor</code> action.</p>
    pub fn set_execution_status(mut self, input: ::std::option::Option<crate::types::StackRefactorExecutionStatus>) -> Self {
        self.execution_status = input;
        self
    }
    /// <p>The operation status that's provided after calling the <code>ExecuteStackRefactor</code> action.</p>
    pub fn get_execution_status(&self) -> &::std::option::Option<crate::types::StackRefactorExecutionStatus> {
        &self.execution_status
    }
    /// <p>A detailed explanation for the stack refactor <code>ExecutionStatus</code>.</p>
    pub fn execution_status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A detailed explanation for the stack refactor <code>ExecutionStatus</code>.</p>
    pub fn set_execution_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_status_reason = input;
        self
    }
    /// <p>A detailed explanation for the stack refactor <code>ExecutionStatus</code>.</p>
    pub fn get_execution_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_status_reason
    }
    /// <p>The stack refactor operation status that's provided after calling the <code>CreateStackRefactor</code> action.</p>
    pub fn status(mut self, input: crate::types::StackRefactorStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The stack refactor operation status that's provided after calling the <code>CreateStackRefactor</code> action.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::StackRefactorStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The stack refactor operation status that's provided after calling the <code>CreateStackRefactor</code> action.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::StackRefactorStatus> {
        &self.status
    }
    /// <p>A detailed explanation for the stack refactor <code>Status</code>.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A detailed explanation for the stack refactor <code>Status</code>.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>A detailed explanation for the stack refactor <code>Status</code>.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// Consumes the builder and constructs a [`StackRefactorSummary`](crate::types::StackRefactorSummary).
    pub fn build(self) -> crate::types::StackRefactorSummary {
        crate::types::StackRefactorSummary {
            stack_refactor_id: self.stack_refactor_id,
            description: self.description,
            execution_status: self.execution_status,
            execution_status_reason: self.execution_status_reason,
            status: self.status,
            status_reason: self.status_reason,
        }
    }
}
