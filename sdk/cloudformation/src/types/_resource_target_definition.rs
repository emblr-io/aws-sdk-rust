// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The field that CloudFormation will change, such as the name of a resource's property, and whether the resource will be recreated.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceTargetDefinition {
    /// <p>Indicates which resource attribute is triggering this update, such as a change in the resource attribute's <code>Metadata</code>, <code>Properties</code>, or <code>Tags</code>.</p>
    pub attribute: ::std::option::Option<crate::types::ResourceAttribute>,
    /// <p>If the <code>Attribute</code> value is <code>Properties</code>, the name of the property. For all other attributes, the value is null.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>If the <code>Attribute</code> value is <code>Properties</code>, indicates whether a change to this property causes the resource to be recreated. The value can be <code>Never</code>, <code>Always</code>, or <code>Conditionally</code>. To determine the conditions for a <code>Conditionally</code> recreation, see the update behavior for that property in the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services resource and property types reference</a> in the <i>CloudFormation User Guide</i>.</p>
    pub requires_recreation: ::std::option::Option<crate::types::RequiresRecreation>,
    /// <p>The property path of the property.</p>
    pub path: ::std::option::Option<::std::string::String>,
    /// <p>The value of the property before the change is executed. Large values can be truncated.</p>
    pub before_value: ::std::option::Option<::std::string::String>,
    /// <p>The value of the property after the change is executed. Large values can be truncated.</p>
    pub after_value: ::std::option::Option<::std::string::String>,
    /// <p>The type of change to be made to the property if the change is executed.</p>
    /// <ul>
    /// <li>
    /// <p><code>Add</code> The item will be added.</p></li>
    /// <li>
    /// <p><code>Remove</code> The item will be removed.</p></li>
    /// <li>
    /// <p><code>Modify</code> The item will be modified.</p></li>
    /// </ul>
    pub attribute_change_type: ::std::option::Option<crate::types::AttributeChangeType>,
}
impl ResourceTargetDefinition {
    /// <p>Indicates which resource attribute is triggering this update, such as a change in the resource attribute's <code>Metadata</code>, <code>Properties</code>, or <code>Tags</code>.</p>
    pub fn attribute(&self) -> ::std::option::Option<&crate::types::ResourceAttribute> {
        self.attribute.as_ref()
    }
    /// <p>If the <code>Attribute</code> value is <code>Properties</code>, the name of the property. For all other attributes, the value is null.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>If the <code>Attribute</code> value is <code>Properties</code>, indicates whether a change to this property causes the resource to be recreated. The value can be <code>Never</code>, <code>Always</code>, or <code>Conditionally</code>. To determine the conditions for a <code>Conditionally</code> recreation, see the update behavior for that property in the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services resource and property types reference</a> in the <i>CloudFormation User Guide</i>.</p>
    pub fn requires_recreation(&self) -> ::std::option::Option<&crate::types::RequiresRecreation> {
        self.requires_recreation.as_ref()
    }
    /// <p>The property path of the property.</p>
    pub fn path(&self) -> ::std::option::Option<&str> {
        self.path.as_deref()
    }
    /// <p>The value of the property before the change is executed. Large values can be truncated.</p>
    pub fn before_value(&self) -> ::std::option::Option<&str> {
        self.before_value.as_deref()
    }
    /// <p>The value of the property after the change is executed. Large values can be truncated.</p>
    pub fn after_value(&self) -> ::std::option::Option<&str> {
        self.after_value.as_deref()
    }
    /// <p>The type of change to be made to the property if the change is executed.</p>
    /// <ul>
    /// <li>
    /// <p><code>Add</code> The item will be added.</p></li>
    /// <li>
    /// <p><code>Remove</code> The item will be removed.</p></li>
    /// <li>
    /// <p><code>Modify</code> The item will be modified.</p></li>
    /// </ul>
    pub fn attribute_change_type(&self) -> ::std::option::Option<&crate::types::AttributeChangeType> {
        self.attribute_change_type.as_ref()
    }
}
impl ResourceTargetDefinition {
    /// Creates a new builder-style object to manufacture [`ResourceTargetDefinition`](crate::types::ResourceTargetDefinition).
    pub fn builder() -> crate::types::builders::ResourceTargetDefinitionBuilder {
        crate::types::builders::ResourceTargetDefinitionBuilder::default()
    }
}

/// A builder for [`ResourceTargetDefinition`](crate::types::ResourceTargetDefinition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ResourceTargetDefinitionBuilder {
    pub(crate) attribute: ::std::option::Option<crate::types::ResourceAttribute>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) requires_recreation: ::std::option::Option<crate::types::RequiresRecreation>,
    pub(crate) path: ::std::option::Option<::std::string::String>,
    pub(crate) before_value: ::std::option::Option<::std::string::String>,
    pub(crate) after_value: ::std::option::Option<::std::string::String>,
    pub(crate) attribute_change_type: ::std::option::Option<crate::types::AttributeChangeType>,
}
impl ResourceTargetDefinitionBuilder {
    /// <p>Indicates which resource attribute is triggering this update, such as a change in the resource attribute's <code>Metadata</code>, <code>Properties</code>, or <code>Tags</code>.</p>
    pub fn attribute(mut self, input: crate::types::ResourceAttribute) -> Self {
        self.attribute = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates which resource attribute is triggering this update, such as a change in the resource attribute's <code>Metadata</code>, <code>Properties</code>, or <code>Tags</code>.</p>
    pub fn set_attribute(mut self, input: ::std::option::Option<crate::types::ResourceAttribute>) -> Self {
        self.attribute = input;
        self
    }
    /// <p>Indicates which resource attribute is triggering this update, such as a change in the resource attribute's <code>Metadata</code>, <code>Properties</code>, or <code>Tags</code>.</p>
    pub fn get_attribute(&self) -> &::std::option::Option<crate::types::ResourceAttribute> {
        &self.attribute
    }
    /// <p>If the <code>Attribute</code> value is <code>Properties</code>, the name of the property. For all other attributes, the value is null.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the <code>Attribute</code> value is <code>Properties</code>, the name of the property. For all other attributes, the value is null.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>If the <code>Attribute</code> value is <code>Properties</code>, the name of the property. For all other attributes, the value is null.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>If the <code>Attribute</code> value is <code>Properties</code>, indicates whether a change to this property causes the resource to be recreated. The value can be <code>Never</code>, <code>Always</code>, or <code>Conditionally</code>. To determine the conditions for a <code>Conditionally</code> recreation, see the update behavior for that property in the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services resource and property types reference</a> in the <i>CloudFormation User Guide</i>.</p>
    pub fn requires_recreation(mut self, input: crate::types::RequiresRecreation) -> Self {
        self.requires_recreation = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the <code>Attribute</code> value is <code>Properties</code>, indicates whether a change to this property causes the resource to be recreated. The value can be <code>Never</code>, <code>Always</code>, or <code>Conditionally</code>. To determine the conditions for a <code>Conditionally</code> recreation, see the update behavior for that property in the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services resource and property types reference</a> in the <i>CloudFormation User Guide</i>.</p>
    pub fn set_requires_recreation(mut self, input: ::std::option::Option<crate::types::RequiresRecreation>) -> Self {
        self.requires_recreation = input;
        self
    }
    /// <p>If the <code>Attribute</code> value is <code>Properties</code>, indicates whether a change to this property causes the resource to be recreated. The value can be <code>Never</code>, <code>Always</code>, or <code>Conditionally</code>. To determine the conditions for a <code>Conditionally</code> recreation, see the update behavior for that property in the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services resource and property types reference</a> in the <i>CloudFormation User Guide</i>.</p>
    pub fn get_requires_recreation(&self) -> &::std::option::Option<crate::types::RequiresRecreation> {
        &self.requires_recreation
    }
    /// <p>The property path of the property.</p>
    pub fn path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The property path of the property.</p>
    pub fn set_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.path = input;
        self
    }
    /// <p>The property path of the property.</p>
    pub fn get_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.path
    }
    /// <p>The value of the property before the change is executed. Large values can be truncated.</p>
    pub fn before_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.before_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the property before the change is executed. Large values can be truncated.</p>
    pub fn set_before_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.before_value = input;
        self
    }
    /// <p>The value of the property before the change is executed. Large values can be truncated.</p>
    pub fn get_before_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.before_value
    }
    /// <p>The value of the property after the change is executed. Large values can be truncated.</p>
    pub fn after_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.after_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the property after the change is executed. Large values can be truncated.</p>
    pub fn set_after_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.after_value = input;
        self
    }
    /// <p>The value of the property after the change is executed. Large values can be truncated.</p>
    pub fn get_after_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.after_value
    }
    /// <p>The type of change to be made to the property if the change is executed.</p>
    /// <ul>
    /// <li>
    /// <p><code>Add</code> The item will be added.</p></li>
    /// <li>
    /// <p><code>Remove</code> The item will be removed.</p></li>
    /// <li>
    /// <p><code>Modify</code> The item will be modified.</p></li>
    /// </ul>
    pub fn attribute_change_type(mut self, input: crate::types::AttributeChangeType) -> Self {
        self.attribute_change_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of change to be made to the property if the change is executed.</p>
    /// <ul>
    /// <li>
    /// <p><code>Add</code> The item will be added.</p></li>
    /// <li>
    /// <p><code>Remove</code> The item will be removed.</p></li>
    /// <li>
    /// <p><code>Modify</code> The item will be modified.</p></li>
    /// </ul>
    pub fn set_attribute_change_type(mut self, input: ::std::option::Option<crate::types::AttributeChangeType>) -> Self {
        self.attribute_change_type = input;
        self
    }
    /// <p>The type of change to be made to the property if the change is executed.</p>
    /// <ul>
    /// <li>
    /// <p><code>Add</code> The item will be added.</p></li>
    /// <li>
    /// <p><code>Remove</code> The item will be removed.</p></li>
    /// <li>
    /// <p><code>Modify</code> The item will be modified.</p></li>
    /// </ul>
    pub fn get_attribute_change_type(&self) -> &::std::option::Option<crate::types::AttributeChangeType> {
        &self.attribute_change_type
    }
    /// Consumes the builder and constructs a [`ResourceTargetDefinition`](crate::types::ResourceTargetDefinition).
    pub fn build(self) -> crate::types::ResourceTargetDefinition {
        crate::types::ResourceTargetDefinition {
            attribute: self.attribute,
            name: self.name,
            requires_recreation: self.requires_recreation,
            path: self.path,
            before_value: self.before_value,
            after_value: self.after_value,
            attribute_change_type: self.attribute_change_type,
        }
    }
}
