// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a resource in a generated template</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceDetail {
    /// <p>The type of the resource, such as <code>AWS::DynamoDB::Table</code>. For the list of supported resources, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resource-import-supported-resources.html">Resource type support for imports and drift detection</a> In the <i>CloudFormation User Guide</i></p>
    pub resource_type: ::std::option::Option<::std::string::String>,
    /// <p>The logical id for this resource in the final generated template.</p>
    pub logical_resource_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of up to 256 key-value pairs that identifies the resource in the generated template. The key is the name of one of the primary identifiers for the resource. (Primary identifiers are specified in the <code>primaryIdentifier</code> list in the resource schema.) The value is the value of that primary identifier. For example, for a <code>AWS::DynamoDB::Table</code> resource, the primary identifiers is <code>TableName</code> so the key-value pair could be <code>"TableName": "MyDDBTable"</code>. For more information, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html#schema-properties-primaryidentifier">primaryIdentifier</a> in the <i>CloudFormation Command Line Interface (CLI) User Guide</i>.</p>
    pub resource_identifier: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Status of the processing of a resource in a generated template.</p>
    /// <dl>
    /// <dt>
    /// InProgress
    /// </dt>
    /// <dd>
    /// <p>The resource processing is still in progress.</p>
    /// </dd>
    /// <dt>
    /// Complete
    /// </dt>
    /// <dd>
    /// <p>The resource processing is complete.</p>
    /// </dd>
    /// <dt>
    /// Pending
    /// </dt>
    /// <dd>
    /// <p>The resource processing is pending.</p>
    /// </dd>
    /// <dt>
    /// Failed
    /// </dt>
    /// <dd>
    /// <p>The resource processing has failed.</p>
    /// </dd>
    /// </dl>
    pub resource_status: ::std::option::Option<crate::types::GeneratedTemplateResourceStatus>,
    /// <p>The reason for the resource detail, providing more information if a failure happened.</p>
    pub resource_status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The warnings generated for this resource.</p>
    pub warnings: ::std::option::Option<::std::vec::Vec<crate::types::WarningDetail>>,
}
impl ResourceDetail {
    /// <p>The type of the resource, such as <code>AWS::DynamoDB::Table</code>. For the list of supported resources, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resource-import-supported-resources.html">Resource type support for imports and drift detection</a> In the <i>CloudFormation User Guide</i></p>
    pub fn resource_type(&self) -> ::std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The logical id for this resource in the final generated template.</p>
    pub fn logical_resource_id(&self) -> ::std::option::Option<&str> {
        self.logical_resource_id.as_deref()
    }
    /// <p>A list of up to 256 key-value pairs that identifies the resource in the generated template. The key is the name of one of the primary identifiers for the resource. (Primary identifiers are specified in the <code>primaryIdentifier</code> list in the resource schema.) The value is the value of that primary identifier. For example, for a <code>AWS::DynamoDB::Table</code> resource, the primary identifiers is <code>TableName</code> so the key-value pair could be <code>"TableName": "MyDDBTable"</code>. For more information, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html#schema-properties-primaryidentifier">primaryIdentifier</a> in the <i>CloudFormation Command Line Interface (CLI) User Guide</i>.</p>
    pub fn resource_identifier(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.resource_identifier.as_ref()
    }
    /// <p>Status of the processing of a resource in a generated template.</p>
    /// <dl>
    /// <dt>
    /// InProgress
    /// </dt>
    /// <dd>
    /// <p>The resource processing is still in progress.</p>
    /// </dd>
    /// <dt>
    /// Complete
    /// </dt>
    /// <dd>
    /// <p>The resource processing is complete.</p>
    /// </dd>
    /// <dt>
    /// Pending
    /// </dt>
    /// <dd>
    /// <p>The resource processing is pending.</p>
    /// </dd>
    /// <dt>
    /// Failed
    /// </dt>
    /// <dd>
    /// <p>The resource processing has failed.</p>
    /// </dd>
    /// </dl>
    pub fn resource_status(&self) -> ::std::option::Option<&crate::types::GeneratedTemplateResourceStatus> {
        self.resource_status.as_ref()
    }
    /// <p>The reason for the resource detail, providing more information if a failure happened.</p>
    pub fn resource_status_reason(&self) -> ::std::option::Option<&str> {
        self.resource_status_reason.as_deref()
    }
    /// <p>The warnings generated for this resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.warnings.is_none()`.
    pub fn warnings(&self) -> &[crate::types::WarningDetail] {
        self.warnings.as_deref().unwrap_or_default()
    }
}
impl ResourceDetail {
    /// Creates a new builder-style object to manufacture [`ResourceDetail`](crate::types::ResourceDetail).
    pub fn builder() -> crate::types::builders::ResourceDetailBuilder {
        crate::types::builders::ResourceDetailBuilder::default()
    }
}

/// A builder for [`ResourceDetail`](crate::types::ResourceDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ResourceDetailBuilder {
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) logical_resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_identifier: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) resource_status: ::std::option::Option<crate::types::GeneratedTemplateResourceStatus>,
    pub(crate) resource_status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) warnings: ::std::option::Option<::std::vec::Vec<crate::types::WarningDetail>>,
}
impl ResourceDetailBuilder {
    /// <p>The type of the resource, such as <code>AWS::DynamoDB::Table</code>. For the list of supported resources, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resource-import-supported-resources.html">Resource type support for imports and drift detection</a> In the <i>CloudFormation User Guide</i></p>
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of the resource, such as <code>AWS::DynamoDB::Table</code>. For the list of supported resources, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resource-import-supported-resources.html">Resource type support for imports and drift detection</a> In the <i>CloudFormation User Guide</i></p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of the resource, such as <code>AWS::DynamoDB::Table</code>. For the list of supported resources, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resource-import-supported-resources.html">Resource type support for imports and drift detection</a> In the <i>CloudFormation User Guide</i></p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// <p>The logical id for this resource in the final generated template.</p>
    pub fn logical_resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.logical_resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The logical id for this resource in the final generated template.</p>
    pub fn set_logical_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.logical_resource_id = input;
        self
    }
    /// <p>The logical id for this resource in the final generated template.</p>
    pub fn get_logical_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.logical_resource_id
    }
    /// Adds a key-value pair to `resource_identifier`.
    ///
    /// To override the contents of this collection use [`set_resource_identifier`](Self::set_resource_identifier).
    ///
    /// <p>A list of up to 256 key-value pairs that identifies the resource in the generated template. The key is the name of one of the primary identifiers for the resource. (Primary identifiers are specified in the <code>primaryIdentifier</code> list in the resource schema.) The value is the value of that primary identifier. For example, for a <code>AWS::DynamoDB::Table</code> resource, the primary identifiers is <code>TableName</code> so the key-value pair could be <code>"TableName": "MyDDBTable"</code>. For more information, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html#schema-properties-primaryidentifier">primaryIdentifier</a> in the <i>CloudFormation Command Line Interface (CLI) User Guide</i>.</p>
    pub fn resource_identifier(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.resource_identifier.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.resource_identifier = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A list of up to 256 key-value pairs that identifies the resource in the generated template. The key is the name of one of the primary identifiers for the resource. (Primary identifiers are specified in the <code>primaryIdentifier</code> list in the resource schema.) The value is the value of that primary identifier. For example, for a <code>AWS::DynamoDB::Table</code> resource, the primary identifiers is <code>TableName</code> so the key-value pair could be <code>"TableName": "MyDDBTable"</code>. For more information, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html#schema-properties-primaryidentifier">primaryIdentifier</a> in the <i>CloudFormation Command Line Interface (CLI) User Guide</i>.</p>
    pub fn set_resource_identifier(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.resource_identifier = input;
        self
    }
    /// <p>A list of up to 256 key-value pairs that identifies the resource in the generated template. The key is the name of one of the primary identifiers for the resource. (Primary identifiers are specified in the <code>primaryIdentifier</code> list in the resource schema.) The value is the value of that primary identifier. For example, for a <code>AWS::DynamoDB::Table</code> resource, the primary identifiers is <code>TableName</code> so the key-value pair could be <code>"TableName": "MyDDBTable"</code>. For more information, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html#schema-properties-primaryidentifier">primaryIdentifier</a> in the <i>CloudFormation Command Line Interface (CLI) User Guide</i>.</p>
    pub fn get_resource_identifier(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.resource_identifier
    }
    /// <p>Status of the processing of a resource in a generated template.</p>
    /// <dl>
    /// <dt>
    /// InProgress
    /// </dt>
    /// <dd>
    /// <p>The resource processing is still in progress.</p>
    /// </dd>
    /// <dt>
    /// Complete
    /// </dt>
    /// <dd>
    /// <p>The resource processing is complete.</p>
    /// </dd>
    /// <dt>
    /// Pending
    /// </dt>
    /// <dd>
    /// <p>The resource processing is pending.</p>
    /// </dd>
    /// <dt>
    /// Failed
    /// </dt>
    /// <dd>
    /// <p>The resource processing has failed.</p>
    /// </dd>
    /// </dl>
    pub fn resource_status(mut self, input: crate::types::GeneratedTemplateResourceStatus) -> Self {
        self.resource_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of the processing of a resource in a generated template.</p>
    /// <dl>
    /// <dt>
    /// InProgress
    /// </dt>
    /// <dd>
    /// <p>The resource processing is still in progress.</p>
    /// </dd>
    /// <dt>
    /// Complete
    /// </dt>
    /// <dd>
    /// <p>The resource processing is complete.</p>
    /// </dd>
    /// <dt>
    /// Pending
    /// </dt>
    /// <dd>
    /// <p>The resource processing is pending.</p>
    /// </dd>
    /// <dt>
    /// Failed
    /// </dt>
    /// <dd>
    /// <p>The resource processing has failed.</p>
    /// </dd>
    /// </dl>
    pub fn set_resource_status(mut self, input: ::std::option::Option<crate::types::GeneratedTemplateResourceStatus>) -> Self {
        self.resource_status = input;
        self
    }
    /// <p>Status of the processing of a resource in a generated template.</p>
    /// <dl>
    /// <dt>
    /// InProgress
    /// </dt>
    /// <dd>
    /// <p>The resource processing is still in progress.</p>
    /// </dd>
    /// <dt>
    /// Complete
    /// </dt>
    /// <dd>
    /// <p>The resource processing is complete.</p>
    /// </dd>
    /// <dt>
    /// Pending
    /// </dt>
    /// <dd>
    /// <p>The resource processing is pending.</p>
    /// </dd>
    /// <dt>
    /// Failed
    /// </dt>
    /// <dd>
    /// <p>The resource processing has failed.</p>
    /// </dd>
    /// </dl>
    pub fn get_resource_status(&self) -> &::std::option::Option<crate::types::GeneratedTemplateResourceStatus> {
        &self.resource_status
    }
    /// <p>The reason for the resource detail, providing more information if a failure happened.</p>
    pub fn resource_status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the resource detail, providing more information if a failure happened.</p>
    pub fn set_resource_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_status_reason = input;
        self
    }
    /// <p>The reason for the resource detail, providing more information if a failure happened.</p>
    pub fn get_resource_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_status_reason
    }
    /// Appends an item to `warnings`.
    ///
    /// To override the contents of this collection use [`set_warnings`](Self::set_warnings).
    ///
    /// <p>The warnings generated for this resource.</p>
    pub fn warnings(mut self, input: crate::types::WarningDetail) -> Self {
        let mut v = self.warnings.unwrap_or_default();
        v.push(input);
        self.warnings = ::std::option::Option::Some(v);
        self
    }
    /// <p>The warnings generated for this resource.</p>
    pub fn set_warnings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WarningDetail>>) -> Self {
        self.warnings = input;
        self
    }
    /// <p>The warnings generated for this resource.</p>
    pub fn get_warnings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WarningDetail>> {
        &self.warnings
    }
    /// Consumes the builder and constructs a [`ResourceDetail`](crate::types::ResourceDetail).
    pub fn build(self) -> crate::types::ResourceDetail {
        crate::types::ResourceDetail {
            resource_type: self.resource_type,
            logical_resource_id: self.logical_resource_id,
            resource_identifier: self.resource_identifier,
            resource_status: self.resource_status,
            resource_status_reason: self.resource_status_reason,
            warnings: self.warnings,
        }
    }
}
