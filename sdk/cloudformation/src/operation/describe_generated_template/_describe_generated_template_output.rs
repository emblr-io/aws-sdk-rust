// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeGeneratedTemplateOutput {
    /// <p>The Amazon Resource Name (ARN) of the generated template. The format is <code>arn:${Partition}:cloudformation:${Region}:${Account}:generatedtemplate/${Id}</code>. For example, <code>arn:aws:cloudformation:<i>us-east-1</i>:<i>123456789012</i>:generatedtemplate/<i>2e8465c1-9a80-43ea-a3a3-4f2d692fe6dc</i> </code>.</p>
    pub generated_template_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the generated template.</p>
    pub generated_template_name: ::std::option::Option<::std::string::String>,
    /// <p>A list of objects describing the details of the resources in the template generation.</p>
    pub resources: ::std::option::Option<::std::vec::Vec<crate::types::ResourceDetail>>,
    /// <p>The status of the template generation. Supported values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>CreatePending</code> - the creation of the template is pending.</p></li>
    /// <li>
    /// <p><code>CreateInProgress</code> - the creation of the template is in progress.</p></li>
    /// <li>
    /// <p><code>DeletePending</code> - the deletion of the template is pending.</p></li>
    /// <li>
    /// <p><code>DeleteInProgress</code> - the deletion of the template is in progress.</p></li>
    /// <li>
    /// <p><code>UpdatePending</code> - the update of the template is pending.</p></li>
    /// <li>
    /// <p><code>UpdateInProgress</code> - the update of the template is in progress.</p></li>
    /// <li>
    /// <p><code>Failed</code> - the template operation failed.</p></li>
    /// <li>
    /// <p><code>Complete</code> - the template operation is complete.</p></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::GeneratedTemplateStatus>,
    /// <p>The reason for the current template generation status. This will provide more details if a failure happened.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The time the generated template was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time the generated template was last updated.</p>
    pub last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>An object describing the progress of the template generation.</p>
    pub progress: ::std::option::Option<crate::types::TemplateProgress>,
    /// <p>The stack ARN of the base stack if a base stack was provided when generating the template.</p>
    pub stack_id: ::std::option::Option<::std::string::String>,
    /// <p>The configuration details of the generated template, including the <code>DeletionPolicy</code> and <code>UpdateReplacePolicy</code>.</p>
    pub template_configuration: ::std::option::Option<crate::types::TemplateConfiguration>,
    /// <p>The number of warnings generated for this template. The warnings are found in the details of each of the resources in the template.</p>
    pub total_warnings: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl DescribeGeneratedTemplateOutput {
    /// <p>The Amazon Resource Name (ARN) of the generated template. The format is <code>arn:${Partition}:cloudformation:${Region}:${Account}:generatedtemplate/${Id}</code>. For example, <code>arn:aws:cloudformation:<i>us-east-1</i>:<i>123456789012</i>:generatedtemplate/<i>2e8465c1-9a80-43ea-a3a3-4f2d692fe6dc</i> </code>.</p>
    pub fn generated_template_id(&self) -> ::std::option::Option<&str> {
        self.generated_template_id.as_deref()
    }
    /// <p>The name of the generated template.</p>
    pub fn generated_template_name(&self) -> ::std::option::Option<&str> {
        self.generated_template_name.as_deref()
    }
    /// <p>A list of objects describing the details of the resources in the template generation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resources.is_none()`.
    pub fn resources(&self) -> &[crate::types::ResourceDetail] {
        self.resources.as_deref().unwrap_or_default()
    }
    /// <p>The status of the template generation. Supported values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>CreatePending</code> - the creation of the template is pending.</p></li>
    /// <li>
    /// <p><code>CreateInProgress</code> - the creation of the template is in progress.</p></li>
    /// <li>
    /// <p><code>DeletePending</code> - the deletion of the template is pending.</p></li>
    /// <li>
    /// <p><code>DeleteInProgress</code> - the deletion of the template is in progress.</p></li>
    /// <li>
    /// <p><code>UpdatePending</code> - the update of the template is pending.</p></li>
    /// <li>
    /// <p><code>UpdateInProgress</code> - the update of the template is in progress.</p></li>
    /// <li>
    /// <p><code>Failed</code> - the template operation failed.</p></li>
    /// <li>
    /// <p><code>Complete</code> - the template operation is complete.</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::GeneratedTemplateStatus> {
        self.status.as_ref()
    }
    /// <p>The reason for the current template generation status. This will provide more details if a failure happened.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The time the generated template was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The time the generated template was last updated.</p>
    pub fn last_updated_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>An object describing the progress of the template generation.</p>
    pub fn progress(&self) -> ::std::option::Option<&crate::types::TemplateProgress> {
        self.progress.as_ref()
    }
    /// <p>The stack ARN of the base stack if a base stack was provided when generating the template.</p>
    pub fn stack_id(&self) -> ::std::option::Option<&str> {
        self.stack_id.as_deref()
    }
    /// <p>The configuration details of the generated template, including the <code>DeletionPolicy</code> and <code>UpdateReplacePolicy</code>.</p>
    pub fn template_configuration(&self) -> ::std::option::Option<&crate::types::TemplateConfiguration> {
        self.template_configuration.as_ref()
    }
    /// <p>The number of warnings generated for this template. The warnings are found in the details of each of the resources in the template.</p>
    pub fn total_warnings(&self) -> ::std::option::Option<i32> {
        self.total_warnings
    }
}
impl ::aws_types::request_id::RequestId for DescribeGeneratedTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeGeneratedTemplateOutput {
    /// Creates a new builder-style object to manufacture [`DescribeGeneratedTemplateOutput`](crate::operation::describe_generated_template::DescribeGeneratedTemplateOutput).
    pub fn builder() -> crate::operation::describe_generated_template::builders::DescribeGeneratedTemplateOutputBuilder {
        crate::operation::describe_generated_template::builders::DescribeGeneratedTemplateOutputBuilder::default()
    }
}

/// A builder for [`DescribeGeneratedTemplateOutput`](crate::operation::describe_generated_template::DescribeGeneratedTemplateOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeGeneratedTemplateOutputBuilder {
    pub(crate) generated_template_id: ::std::option::Option<::std::string::String>,
    pub(crate) generated_template_name: ::std::option::Option<::std::string::String>,
    pub(crate) resources: ::std::option::Option<::std::vec::Vec<crate::types::ResourceDetail>>,
    pub(crate) status: ::std::option::Option<crate::types::GeneratedTemplateStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) progress: ::std::option::Option<crate::types::TemplateProgress>,
    pub(crate) stack_id: ::std::option::Option<::std::string::String>,
    pub(crate) template_configuration: ::std::option::Option<crate::types::TemplateConfiguration>,
    pub(crate) total_warnings: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl DescribeGeneratedTemplateOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the generated template. The format is <code>arn:${Partition}:cloudformation:${Region}:${Account}:generatedtemplate/${Id}</code>. For example, <code>arn:aws:cloudformation:<i>us-east-1</i>:<i>123456789012</i>:generatedtemplate/<i>2e8465c1-9a80-43ea-a3a3-4f2d692fe6dc</i> </code>.</p>
    pub fn generated_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.generated_template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the generated template. The format is <code>arn:${Partition}:cloudformation:${Region}:${Account}:generatedtemplate/${Id}</code>. For example, <code>arn:aws:cloudformation:<i>us-east-1</i>:<i>123456789012</i>:generatedtemplate/<i>2e8465c1-9a80-43ea-a3a3-4f2d692fe6dc</i> </code>.</p>
    pub fn set_generated_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.generated_template_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the generated template. The format is <code>arn:${Partition}:cloudformation:${Region}:${Account}:generatedtemplate/${Id}</code>. For example, <code>arn:aws:cloudformation:<i>us-east-1</i>:<i>123456789012</i>:generatedtemplate/<i>2e8465c1-9a80-43ea-a3a3-4f2d692fe6dc</i> </code>.</p>
    pub fn get_generated_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.generated_template_id
    }
    /// <p>The name of the generated template.</p>
    pub fn generated_template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.generated_template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the generated template.</p>
    pub fn set_generated_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.generated_template_name = input;
        self
    }
    /// <p>The name of the generated template.</p>
    pub fn get_generated_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.generated_template_name
    }
    /// Appends an item to `resources`.
    ///
    /// To override the contents of this collection use [`set_resources`](Self::set_resources).
    ///
    /// <p>A list of objects describing the details of the resources in the template generation.</p>
    pub fn resources(mut self, input: crate::types::ResourceDetail) -> Self {
        let mut v = self.resources.unwrap_or_default();
        v.push(input);
        self.resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of objects describing the details of the resources in the template generation.</p>
    pub fn set_resources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourceDetail>>) -> Self {
        self.resources = input;
        self
    }
    /// <p>A list of objects describing the details of the resources in the template generation.</p>
    pub fn get_resources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourceDetail>> {
        &self.resources
    }
    /// <p>The status of the template generation. Supported values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>CreatePending</code> - the creation of the template is pending.</p></li>
    /// <li>
    /// <p><code>CreateInProgress</code> - the creation of the template is in progress.</p></li>
    /// <li>
    /// <p><code>DeletePending</code> - the deletion of the template is pending.</p></li>
    /// <li>
    /// <p><code>DeleteInProgress</code> - the deletion of the template is in progress.</p></li>
    /// <li>
    /// <p><code>UpdatePending</code> - the update of the template is pending.</p></li>
    /// <li>
    /// <p><code>UpdateInProgress</code> - the update of the template is in progress.</p></li>
    /// <li>
    /// <p><code>Failed</code> - the template operation failed.</p></li>
    /// <li>
    /// <p><code>Complete</code> - the template operation is complete.</p></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::GeneratedTemplateStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the template generation. Supported values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>CreatePending</code> - the creation of the template is pending.</p></li>
    /// <li>
    /// <p><code>CreateInProgress</code> - the creation of the template is in progress.</p></li>
    /// <li>
    /// <p><code>DeletePending</code> - the deletion of the template is pending.</p></li>
    /// <li>
    /// <p><code>DeleteInProgress</code> - the deletion of the template is in progress.</p></li>
    /// <li>
    /// <p><code>UpdatePending</code> - the update of the template is pending.</p></li>
    /// <li>
    /// <p><code>UpdateInProgress</code> - the update of the template is in progress.</p></li>
    /// <li>
    /// <p><code>Failed</code> - the template operation failed.</p></li>
    /// <li>
    /// <p><code>Complete</code> - the template operation is complete.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::GeneratedTemplateStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the template generation. Supported values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>CreatePending</code> - the creation of the template is pending.</p></li>
    /// <li>
    /// <p><code>CreateInProgress</code> - the creation of the template is in progress.</p></li>
    /// <li>
    /// <p><code>DeletePending</code> - the deletion of the template is pending.</p></li>
    /// <li>
    /// <p><code>DeleteInProgress</code> - the deletion of the template is in progress.</p></li>
    /// <li>
    /// <p><code>UpdatePending</code> - the update of the template is pending.</p></li>
    /// <li>
    /// <p><code>UpdateInProgress</code> - the update of the template is in progress.</p></li>
    /// <li>
    /// <p><code>Failed</code> - the template operation failed.</p></li>
    /// <li>
    /// <p><code>Complete</code> - the template operation is complete.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::GeneratedTemplateStatus> {
        &self.status
    }
    /// <p>The reason for the current template generation status. This will provide more details if a failure happened.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the current template generation status. This will provide more details if a failure happened.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The reason for the current template generation status. This will provide more details if a failure happened.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The time the generated template was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the generated template was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time the generated template was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The time the generated template was last updated.</p>
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the generated template was last updated.</p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The time the generated template was last updated.</p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// <p>An object describing the progress of the template generation.</p>
    pub fn progress(mut self, input: crate::types::TemplateProgress) -> Self {
        self.progress = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object describing the progress of the template generation.</p>
    pub fn set_progress(mut self, input: ::std::option::Option<crate::types::TemplateProgress>) -> Self {
        self.progress = input;
        self
    }
    /// <p>An object describing the progress of the template generation.</p>
    pub fn get_progress(&self) -> &::std::option::Option<crate::types::TemplateProgress> {
        &self.progress
    }
    /// <p>The stack ARN of the base stack if a base stack was provided when generating the template.</p>
    pub fn stack_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The stack ARN of the base stack if a base stack was provided when generating the template.</p>
    pub fn set_stack_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_id = input;
        self
    }
    /// <p>The stack ARN of the base stack if a base stack was provided when generating the template.</p>
    pub fn get_stack_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_id
    }
    /// <p>The configuration details of the generated template, including the <code>DeletionPolicy</code> and <code>UpdateReplacePolicy</code>.</p>
    pub fn template_configuration(mut self, input: crate::types::TemplateConfiguration) -> Self {
        self.template_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration details of the generated template, including the <code>DeletionPolicy</code> and <code>UpdateReplacePolicy</code>.</p>
    pub fn set_template_configuration(mut self, input: ::std::option::Option<crate::types::TemplateConfiguration>) -> Self {
        self.template_configuration = input;
        self
    }
    /// <p>The configuration details of the generated template, including the <code>DeletionPolicy</code> and <code>UpdateReplacePolicy</code>.</p>
    pub fn get_template_configuration(&self) -> &::std::option::Option<crate::types::TemplateConfiguration> {
        &self.template_configuration
    }
    /// <p>The number of warnings generated for this template. The warnings are found in the details of each of the resources in the template.</p>
    pub fn total_warnings(mut self, input: i32) -> Self {
        self.total_warnings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of warnings generated for this template. The warnings are found in the details of each of the resources in the template.</p>
    pub fn set_total_warnings(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_warnings = input;
        self
    }
    /// <p>The number of warnings generated for this template. The warnings are found in the details of each of the resources in the template.</p>
    pub fn get_total_warnings(&self) -> &::std::option::Option<i32> {
        &self.total_warnings
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeGeneratedTemplateOutput`](crate::operation::describe_generated_template::DescribeGeneratedTemplateOutput).
    pub fn build(self) -> crate::operation::describe_generated_template::DescribeGeneratedTemplateOutput {
        crate::operation::describe_generated_template::DescribeGeneratedTemplateOutput {
            generated_template_id: self.generated_template_id,
            generated_template_name: self.generated_template_name,
            resources: self.resources,
            status: self.status,
            status_reason: self.status_reason,
            creation_time: self.creation_time,
            last_updated_time: self.last_updated_time,
            progress: self.progress,
            stack_id: self.stack_id,
            template_configuration: self.template_configuration,
            total_warnings: self.total_warnings,
            _request_id: self._request_id,
        }
    }
}
