// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExecuteStackRefactorInput {
    /// <p>The ID associated with the stack refactor created from the <code>CreateStackRefactor</code> action.</p>
    pub stack_refactor_id: ::std::option::Option<::std::string::String>,
}
impl ExecuteStackRefactorInput {
    /// <p>The ID associated with the stack refactor created from the <code>CreateStackRefactor</code> action.</p>
    pub fn stack_refactor_id(&self) -> ::std::option::Option<&str> {
        self.stack_refactor_id.as_deref()
    }
}
impl ExecuteStackRefactorInput {
    /// Creates a new builder-style object to manufacture [`ExecuteStackRefactorInput`](crate::operation::execute_stack_refactor::ExecuteStackRefactorInput).
    pub fn builder() -> crate::operation::execute_stack_refactor::builders::ExecuteStackRefactorInputBuilder {
        crate::operation::execute_stack_refactor::builders::ExecuteStackRefactorInputBuilder::default()
    }
}

/// A builder for [`ExecuteStackRefactorInput`](crate::operation::execute_stack_refactor::ExecuteStackRefactorInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ExecuteStackRefactorInputBuilder {
    pub(crate) stack_refactor_id: ::std::option::Option<::std::string::String>,
}
impl ExecuteStackRefactorInputBuilder {
    /// <p>The ID associated with the stack refactor created from the <code>CreateStackRefactor</code> action.</p>
    /// This field is required.
    pub fn stack_refactor_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_refactor_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID associated with the stack refactor created from the <code>CreateStackRefactor</code> action.</p>
    pub fn set_stack_refactor_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_refactor_id = input;
        self
    }
    /// <p>The ID associated with the stack refactor created from the <code>CreateStackRefactor</code> action.</p>
    pub fn get_stack_refactor_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_refactor_id
    }
    /// Consumes the builder and constructs a [`ExecuteStackRefactorInput`](crate::operation::execute_stack_refactor::ExecuteStackRefactorInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::execute_stack_refactor::ExecuteStackRefactorInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::execute_stack_refactor::ExecuteStackRefactorInput {
            stack_refactor_id: self.stack_refactor_id,
        })
    }
}
