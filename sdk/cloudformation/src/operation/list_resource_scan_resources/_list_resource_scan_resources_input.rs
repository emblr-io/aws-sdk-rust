// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListResourceScanResourcesInput {
    /// <p>The Amazon Resource Name (ARN) of the resource scan.</p>
    pub resource_scan_id: ::std::option::Option<::std::string::String>,
    /// <p>If specified, the returned resources will have the specified resource identifier (or one of them in the case where the resource has multiple identifiers).</p>
    pub resource_identifier: ::std::option::Option<::std::string::String>,
    /// <p>If specified, the returned resources will be of any of the resource types with the specified prefix.</p>
    pub resource_type_prefix: ::std::option::Option<::std::string::String>,
    /// <p>If specified, the returned resources will have a matching tag key.</p>
    pub tag_key: ::std::option::Option<::std::string::String>,
    /// <p>If specified, the returned resources will have a matching tag value.</p>
    pub tag_value: ::std::option::Option<::std::string::String>,
    /// <p>A string that identifies the next page of resource scan results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can use for the <code>NextToken</code> parameter to get the next set of results. By default the <code>ListResourceScanResources</code> API action will return at most 100 results in each response. The maximum value is 100.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListResourceScanResourcesInput {
    /// <p>The Amazon Resource Name (ARN) of the resource scan.</p>
    pub fn resource_scan_id(&self) -> ::std::option::Option<&str> {
        self.resource_scan_id.as_deref()
    }
    /// <p>If specified, the returned resources will have the specified resource identifier (or one of them in the case where the resource has multiple identifiers).</p>
    pub fn resource_identifier(&self) -> ::std::option::Option<&str> {
        self.resource_identifier.as_deref()
    }
    /// <p>If specified, the returned resources will be of any of the resource types with the specified prefix.</p>
    pub fn resource_type_prefix(&self) -> ::std::option::Option<&str> {
        self.resource_type_prefix.as_deref()
    }
    /// <p>If specified, the returned resources will have a matching tag key.</p>
    pub fn tag_key(&self) -> ::std::option::Option<&str> {
        self.tag_key.as_deref()
    }
    /// <p>If specified, the returned resources will have a matching tag value.</p>
    pub fn tag_value(&self) -> ::std::option::Option<&str> {
        self.tag_value.as_deref()
    }
    /// <p>A string that identifies the next page of resource scan results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can use for the <code>NextToken</code> parameter to get the next set of results. By default the <code>ListResourceScanResources</code> API action will return at most 100 results in each response. The maximum value is 100.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListResourceScanResourcesInput {
    /// Creates a new builder-style object to manufacture [`ListResourceScanResourcesInput`](crate::operation::list_resource_scan_resources::ListResourceScanResourcesInput).
    pub fn builder() -> crate::operation::list_resource_scan_resources::builders::ListResourceScanResourcesInputBuilder {
        crate::operation::list_resource_scan_resources::builders::ListResourceScanResourcesInputBuilder::default()
    }
}

/// A builder for [`ListResourceScanResourcesInput`](crate::operation::list_resource_scan_resources::ListResourceScanResourcesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListResourceScanResourcesInputBuilder {
    pub(crate) resource_scan_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) tag_key: ::std::option::Option<::std::string::String>,
    pub(crate) tag_value: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListResourceScanResourcesInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the resource scan.</p>
    /// This field is required.
    pub fn resource_scan_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_scan_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource scan.</p>
    pub fn set_resource_scan_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_scan_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource scan.</p>
    pub fn get_resource_scan_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_scan_id
    }
    /// <p>If specified, the returned resources will have the specified resource identifier (or one of them in the case where the resource has multiple identifiers).</p>
    pub fn resource_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If specified, the returned resources will have the specified resource identifier (or one of them in the case where the resource has multiple identifiers).</p>
    pub fn set_resource_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_identifier = input;
        self
    }
    /// <p>If specified, the returned resources will have the specified resource identifier (or one of them in the case where the resource has multiple identifiers).</p>
    pub fn get_resource_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_identifier
    }
    /// <p>If specified, the returned resources will be of any of the resource types with the specified prefix.</p>
    pub fn resource_type_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If specified, the returned resources will be of any of the resource types with the specified prefix.</p>
    pub fn set_resource_type_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type_prefix = input;
        self
    }
    /// <p>If specified, the returned resources will be of any of the resource types with the specified prefix.</p>
    pub fn get_resource_type_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type_prefix
    }
    /// <p>If specified, the returned resources will have a matching tag key.</p>
    pub fn tag_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tag_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If specified, the returned resources will have a matching tag key.</p>
    pub fn set_tag_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tag_key = input;
        self
    }
    /// <p>If specified, the returned resources will have a matching tag key.</p>
    pub fn get_tag_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.tag_key
    }
    /// <p>If specified, the returned resources will have a matching tag value.</p>
    pub fn tag_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tag_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If specified, the returned resources will have a matching tag value.</p>
    pub fn set_tag_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tag_value = input;
        self
    }
    /// <p>If specified, the returned resources will have a matching tag value.</p>
    pub fn get_tag_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.tag_value
    }
    /// <p>A string that identifies the next page of resource scan results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string that identifies the next page of resource scan results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A string that identifies the next page of resource scan results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can use for the <code>NextToken</code> parameter to get the next set of results. By default the <code>ListResourceScanResources</code> API action will return at most 100 results in each response. The maximum value is 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can use for the <code>NextToken</code> parameter to get the next set of results. By default the <code>ListResourceScanResources</code> API action will return at most 100 results in each response. The maximum value is 100.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can use for the <code>NextToken</code> parameter to get the next set of results. By default the <code>ListResourceScanResources</code> API action will return at most 100 results in each response. The maximum value is 100.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListResourceScanResourcesInput`](crate::operation::list_resource_scan_resources::ListResourceScanResourcesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_resource_scan_resources::ListResourceScanResourcesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_resource_scan_resources::ListResourceScanResourcesInput {
            resource_scan_id: self.resource_scan_id,
            resource_identifier: self.resource_identifier,
            resource_type_prefix: self.resource_type_prefix,
            tag_key: self.tag_key,
            tag_value: self.tag_value,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
