// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListStackRefactorsInput {
    /// <p>Execution status to use as a filter. Specify one or more execution status codes to list only stack refactors with the specified execution status codes.</p>
    pub execution_status_filter: ::std::option::Option<::std::vec::Vec<crate::types::StackRefactorExecutionStatus>>,
    /// <p>If the request doesn't return all the remaining results, <code>NextToken</code> is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter. If the request returns all results, <code>NextToken</code> is set to <code>null</code>.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListStackRefactorsInput {
    /// <p>Execution status to use as a filter. Specify one or more execution status codes to list only stack refactors with the specified execution status codes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.execution_status_filter.is_none()`.
    pub fn execution_status_filter(&self) -> &[crate::types::StackRefactorExecutionStatus] {
        self.execution_status_filter.as_deref().unwrap_or_default()
    }
    /// <p>If the request doesn't return all the remaining results, <code>NextToken</code> is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter. If the request returns all results, <code>NextToken</code> is set to <code>null</code>.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListStackRefactorsInput {
    /// Creates a new builder-style object to manufacture [`ListStackRefactorsInput`](crate::operation::list_stack_refactors::ListStackRefactorsInput).
    pub fn builder() -> crate::operation::list_stack_refactors::builders::ListStackRefactorsInputBuilder {
        crate::operation::list_stack_refactors::builders::ListStackRefactorsInputBuilder::default()
    }
}

/// A builder for [`ListStackRefactorsInput`](crate::operation::list_stack_refactors::ListStackRefactorsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListStackRefactorsInputBuilder {
    pub(crate) execution_status_filter: ::std::option::Option<::std::vec::Vec<crate::types::StackRefactorExecutionStatus>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListStackRefactorsInputBuilder {
    /// Appends an item to `execution_status_filter`.
    ///
    /// To override the contents of this collection use [`set_execution_status_filter`](Self::set_execution_status_filter).
    ///
    /// <p>Execution status to use as a filter. Specify one or more execution status codes to list only stack refactors with the specified execution status codes.</p>
    pub fn execution_status_filter(mut self, input: crate::types::StackRefactorExecutionStatus) -> Self {
        let mut v = self.execution_status_filter.unwrap_or_default();
        v.push(input);
        self.execution_status_filter = ::std::option::Option::Some(v);
        self
    }
    /// <p>Execution status to use as a filter. Specify one or more execution status codes to list only stack refactors with the specified execution status codes.</p>
    pub fn set_execution_status_filter(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StackRefactorExecutionStatus>>) -> Self {
        self.execution_status_filter = input;
        self
    }
    /// <p>Execution status to use as a filter. Specify one or more execution status codes to list only stack refactors with the specified execution status codes.</p>
    pub fn get_execution_status_filter(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StackRefactorExecutionStatus>> {
        &self.execution_status_filter
    }
    /// <p>If the request doesn't return all the remaining results, <code>NextToken</code> is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter. If the request returns all results, <code>NextToken</code> is set to <code>null</code>.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the request doesn't return all the remaining results, <code>NextToken</code> is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter. If the request returns all results, <code>NextToken</code> is set to <code>null</code>.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If the request doesn't return all the remaining results, <code>NextToken</code> is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter. If the request returns all results, <code>NextToken</code> is set to <code>null</code>.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListStackRefactorsInput`](crate::operation::list_stack_refactors::ListStackRefactorsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_stack_refactors::ListStackRefactorsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_stack_refactors::ListStackRefactorsInput {
            execution_status_filter: self.execution_status_filter,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
