// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateStackRefactorOutput {
    /// <p>The ID associated with the stack refactor created from the <code>CreateStackRefactor</code> action.</p>
    pub stack_refactor_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateStackRefactorOutput {
    /// <p>The ID associated with the stack refactor created from the <code>CreateStackRefactor</code> action.</p>
    pub fn stack_refactor_id(&self) -> ::std::option::Option<&str> {
        self.stack_refactor_id.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for CreateStackRefactorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateStackRefactorOutput {
    /// Creates a new builder-style object to manufacture [`CreateStackRefactorOutput`](crate::operation::create_stack_refactor::CreateStackRefactorOutput).
    pub fn builder() -> crate::operation::create_stack_refactor::builders::CreateStackRefactorOutputBuilder {
        crate::operation::create_stack_refactor::builders::CreateStackRefactorOutputBuilder::default()
    }
}

/// A builder for [`CreateStackRefactorOutput`](crate::operation::create_stack_refactor::CreateStackRefactorOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateStackRefactorOutputBuilder {
    pub(crate) stack_refactor_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateStackRefactorOutputBuilder {
    /// <p>The ID associated with the stack refactor created from the <code>CreateStackRefactor</code> action.</p>
    /// This field is required.
    pub fn stack_refactor_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_refactor_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID associated with the stack refactor created from the <code>CreateStackRefactor</code> action.</p>
    pub fn set_stack_refactor_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_refactor_id = input;
        self
    }
    /// <p>The ID associated with the stack refactor created from the <code>CreateStackRefactor</code> action.</p>
    pub fn get_stack_refactor_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_refactor_id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateStackRefactorOutput`](crate::operation::create_stack_refactor::CreateStackRefactorOutput).
    pub fn build(self) -> crate::operation::create_stack_refactor::CreateStackRefactorOutput {
        crate::operation::create_stack_refactor::CreateStackRefactorOutput {
            stack_refactor_id: self.stack_refactor_id,
            _request_id: self._request_id,
        }
    }
}
