// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateStackRefactorInput {
    /// <p>A description to help you identify the stack refactor.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Determines if a new stack is created with the refactor.</p>
    pub enable_stack_creation: ::std::option::Option<bool>,
    /// <p>The mappings for the stack resource <code>Source</code> and stack resource <code>Destination</code>.</p>
    pub resource_mappings: ::std::option::Option<::std::vec::Vec<crate::types::ResourceMapping>>,
    /// <p>The stacks being refactored.</p>
    pub stack_definitions: ::std::option::Option<::std::vec::Vec<crate::types::StackDefinition>>,
}
impl CreateStackRefactorInput {
    /// <p>A description to help you identify the stack refactor.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Determines if a new stack is created with the refactor.</p>
    pub fn enable_stack_creation(&self) -> ::std::option::Option<bool> {
        self.enable_stack_creation
    }
    /// <p>The mappings for the stack resource <code>Source</code> and stack resource <code>Destination</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_mappings.is_none()`.
    pub fn resource_mappings(&self) -> &[crate::types::ResourceMapping] {
        self.resource_mappings.as_deref().unwrap_or_default()
    }
    /// <p>The stacks being refactored.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.stack_definitions.is_none()`.
    pub fn stack_definitions(&self) -> &[crate::types::StackDefinition] {
        self.stack_definitions.as_deref().unwrap_or_default()
    }
}
impl CreateStackRefactorInput {
    /// Creates a new builder-style object to manufacture [`CreateStackRefactorInput`](crate::operation::create_stack_refactor::CreateStackRefactorInput).
    pub fn builder() -> crate::operation::create_stack_refactor::builders::CreateStackRefactorInputBuilder {
        crate::operation::create_stack_refactor::builders::CreateStackRefactorInputBuilder::default()
    }
}

/// A builder for [`CreateStackRefactorInput`](crate::operation::create_stack_refactor::CreateStackRefactorInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateStackRefactorInputBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) enable_stack_creation: ::std::option::Option<bool>,
    pub(crate) resource_mappings: ::std::option::Option<::std::vec::Vec<crate::types::ResourceMapping>>,
    pub(crate) stack_definitions: ::std::option::Option<::std::vec::Vec<crate::types::StackDefinition>>,
}
impl CreateStackRefactorInputBuilder {
    /// <p>A description to help you identify the stack refactor.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description to help you identify the stack refactor.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description to help you identify the stack refactor.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Determines if a new stack is created with the refactor.</p>
    pub fn enable_stack_creation(mut self, input: bool) -> Self {
        self.enable_stack_creation = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines if a new stack is created with the refactor.</p>
    pub fn set_enable_stack_creation(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_stack_creation = input;
        self
    }
    /// <p>Determines if a new stack is created with the refactor.</p>
    pub fn get_enable_stack_creation(&self) -> &::std::option::Option<bool> {
        &self.enable_stack_creation
    }
    /// Appends an item to `resource_mappings`.
    ///
    /// To override the contents of this collection use [`set_resource_mappings`](Self::set_resource_mappings).
    ///
    /// <p>The mappings for the stack resource <code>Source</code> and stack resource <code>Destination</code>.</p>
    pub fn resource_mappings(mut self, input: crate::types::ResourceMapping) -> Self {
        let mut v = self.resource_mappings.unwrap_or_default();
        v.push(input);
        self.resource_mappings = ::std::option::Option::Some(v);
        self
    }
    /// <p>The mappings for the stack resource <code>Source</code> and stack resource <code>Destination</code>.</p>
    pub fn set_resource_mappings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourceMapping>>) -> Self {
        self.resource_mappings = input;
        self
    }
    /// <p>The mappings for the stack resource <code>Source</code> and stack resource <code>Destination</code>.</p>
    pub fn get_resource_mappings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourceMapping>> {
        &self.resource_mappings
    }
    /// Appends an item to `stack_definitions`.
    ///
    /// To override the contents of this collection use [`set_stack_definitions`](Self::set_stack_definitions).
    ///
    /// <p>The stacks being refactored.</p>
    pub fn stack_definitions(mut self, input: crate::types::StackDefinition) -> Self {
        let mut v = self.stack_definitions.unwrap_or_default();
        v.push(input);
        self.stack_definitions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The stacks being refactored.</p>
    pub fn set_stack_definitions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StackDefinition>>) -> Self {
        self.stack_definitions = input;
        self
    }
    /// <p>The stacks being refactored.</p>
    pub fn get_stack_definitions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StackDefinition>> {
        &self.stack_definitions
    }
    /// Consumes the builder and constructs a [`CreateStackRefactorInput`](crate::operation::create_stack_refactor::CreateStackRefactorInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_stack_refactor::CreateStackRefactorInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_stack_refactor::CreateStackRefactorInput {
            description: self.description,
            enable_stack_creation: self.enable_stack_creation,
            resource_mappings: self.resource_mappings,
            stack_definitions: self.stack_definitions,
        })
    }
}
