// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateGeneratedTemplateInput {
    /// <p>An optional list of resources to be included in the generated template.</p>
    /// <p>If no resources are specified,the template will be created without any resources. Resources can be added to the template using the <code>UpdateGeneratedTemplate</code> API action.</p>
    pub resources: ::std::option::Option<::std::vec::Vec<crate::types::ResourceDefinition>>,
    /// <p>The name assigned to the generated template.</p>
    pub generated_template_name: ::std::option::Option<::std::string::String>,
    /// <p>An optional name or ARN of a stack to use as the base stack for the generated template.</p>
    pub stack_name: ::std::option::Option<::std::string::String>,
    /// <p>The configuration details of the generated template, including the <code>DeletionPolicy</code> and <code>UpdateReplacePolicy</code>.</p>
    pub template_configuration: ::std::option::Option<crate::types::TemplateConfiguration>,
}
impl CreateGeneratedTemplateInput {
    /// <p>An optional list of resources to be included in the generated template.</p>
    /// <p>If no resources are specified,the template will be created without any resources. Resources can be added to the template using the <code>UpdateGeneratedTemplate</code> API action.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resources.is_none()`.
    pub fn resources(&self) -> &[crate::types::ResourceDefinition] {
        self.resources.as_deref().unwrap_or_default()
    }
    /// <p>The name assigned to the generated template.</p>
    pub fn generated_template_name(&self) -> ::std::option::Option<&str> {
        self.generated_template_name.as_deref()
    }
    /// <p>An optional name or ARN of a stack to use as the base stack for the generated template.</p>
    pub fn stack_name(&self) -> ::std::option::Option<&str> {
        self.stack_name.as_deref()
    }
    /// <p>The configuration details of the generated template, including the <code>DeletionPolicy</code> and <code>UpdateReplacePolicy</code>.</p>
    pub fn template_configuration(&self) -> ::std::option::Option<&crate::types::TemplateConfiguration> {
        self.template_configuration.as_ref()
    }
}
impl CreateGeneratedTemplateInput {
    /// Creates a new builder-style object to manufacture [`CreateGeneratedTemplateInput`](crate::operation::create_generated_template::CreateGeneratedTemplateInput).
    pub fn builder() -> crate::operation::create_generated_template::builders::CreateGeneratedTemplateInputBuilder {
        crate::operation::create_generated_template::builders::CreateGeneratedTemplateInputBuilder::default()
    }
}

/// A builder for [`CreateGeneratedTemplateInput`](crate::operation::create_generated_template::CreateGeneratedTemplateInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateGeneratedTemplateInputBuilder {
    pub(crate) resources: ::std::option::Option<::std::vec::Vec<crate::types::ResourceDefinition>>,
    pub(crate) generated_template_name: ::std::option::Option<::std::string::String>,
    pub(crate) stack_name: ::std::option::Option<::std::string::String>,
    pub(crate) template_configuration: ::std::option::Option<crate::types::TemplateConfiguration>,
}
impl CreateGeneratedTemplateInputBuilder {
    /// Appends an item to `resources`.
    ///
    /// To override the contents of this collection use [`set_resources`](Self::set_resources).
    ///
    /// <p>An optional list of resources to be included in the generated template.</p>
    /// <p>If no resources are specified,the template will be created without any resources. Resources can be added to the template using the <code>UpdateGeneratedTemplate</code> API action.</p>
    pub fn resources(mut self, input: crate::types::ResourceDefinition) -> Self {
        let mut v = self.resources.unwrap_or_default();
        v.push(input);
        self.resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>An optional list of resources to be included in the generated template.</p>
    /// <p>If no resources are specified,the template will be created without any resources. Resources can be added to the template using the <code>UpdateGeneratedTemplate</code> API action.</p>
    pub fn set_resources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourceDefinition>>) -> Self {
        self.resources = input;
        self
    }
    /// <p>An optional list of resources to be included in the generated template.</p>
    /// <p>If no resources are specified,the template will be created without any resources. Resources can be added to the template using the <code>UpdateGeneratedTemplate</code> API action.</p>
    pub fn get_resources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourceDefinition>> {
        &self.resources
    }
    /// <p>The name assigned to the generated template.</p>
    /// This field is required.
    pub fn generated_template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.generated_template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name assigned to the generated template.</p>
    pub fn set_generated_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.generated_template_name = input;
        self
    }
    /// <p>The name assigned to the generated template.</p>
    pub fn get_generated_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.generated_template_name
    }
    /// <p>An optional name or ARN of a stack to use as the base stack for the generated template.</p>
    pub fn stack_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional name or ARN of a stack to use as the base stack for the generated template.</p>
    pub fn set_stack_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_name = input;
        self
    }
    /// <p>An optional name or ARN of a stack to use as the base stack for the generated template.</p>
    pub fn get_stack_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_name
    }
    /// <p>The configuration details of the generated template, including the <code>DeletionPolicy</code> and <code>UpdateReplacePolicy</code>.</p>
    pub fn template_configuration(mut self, input: crate::types::TemplateConfiguration) -> Self {
        self.template_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration details of the generated template, including the <code>DeletionPolicy</code> and <code>UpdateReplacePolicy</code>.</p>
    pub fn set_template_configuration(mut self, input: ::std::option::Option<crate::types::TemplateConfiguration>) -> Self {
        self.template_configuration = input;
        self
    }
    /// <p>The configuration details of the generated template, including the <code>DeletionPolicy</code> and <code>UpdateReplacePolicy</code>.</p>
    pub fn get_template_configuration(&self) -> &::std::option::Option<crate::types::TemplateConfiguration> {
        &self.template_configuration
    }
    /// Consumes the builder and constructs a [`CreateGeneratedTemplateInput`](crate::operation::create_generated_template::CreateGeneratedTemplateInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_generated_template::CreateGeneratedTemplateInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_generated_template::CreateGeneratedTemplateInput {
            resources: self.resources,
            generated_template_name: self.generated_template_name,
            stack_name: self.stack_name,
            template_configuration: self.template_configuration,
        })
    }
}
