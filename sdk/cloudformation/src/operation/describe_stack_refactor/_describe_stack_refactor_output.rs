// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeStackRefactorOutput {
    /// <p>A description to help you identify the refactor.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The ID associated with the stack refactor created from the <code>CreateStackRefactor</code> action.</p>
    pub stack_refactor_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique ID for each stack.</p>
    pub stack_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The stack refactor execution operation status that's provided after calling the <code>ExecuteStackRefactor</code> action.</p>
    pub execution_status: ::std::option::Option<crate::types::StackRefactorExecutionStatus>,
    /// <p>A detailed explanation for the stack refactor <code>ExecutionStatus</code>.</p>
    pub execution_status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The stack refactor operation status that's provided after calling the <code>CreateStackRefactor</code> action.</p>
    pub status: ::std::option::Option<crate::types::StackRefactorStatus>,
    /// <p>A detailed explanation for the stack refactor operation <code>Status</code>.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeStackRefactorOutput {
    /// <p>A description to help you identify the refactor.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ID associated with the stack refactor created from the <code>CreateStackRefactor</code> action.</p>
    pub fn stack_refactor_id(&self) -> ::std::option::Option<&str> {
        self.stack_refactor_id.as_deref()
    }
    /// <p>The unique ID for each stack.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.stack_ids.is_none()`.
    pub fn stack_ids(&self) -> &[::std::string::String] {
        self.stack_ids.as_deref().unwrap_or_default()
    }
    /// <p>The stack refactor execution operation status that's provided after calling the <code>ExecuteStackRefactor</code> action.</p>
    pub fn execution_status(&self) -> ::std::option::Option<&crate::types::StackRefactorExecutionStatus> {
        self.execution_status.as_ref()
    }
    /// <p>A detailed explanation for the stack refactor <code>ExecutionStatus</code>.</p>
    pub fn execution_status_reason(&self) -> ::std::option::Option<&str> {
        self.execution_status_reason.as_deref()
    }
    /// <p>The stack refactor operation status that's provided after calling the <code>CreateStackRefactor</code> action.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::StackRefactorStatus> {
        self.status.as_ref()
    }
    /// <p>A detailed explanation for the stack refactor operation <code>Status</code>.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeStackRefactorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeStackRefactorOutput {
    /// Creates a new builder-style object to manufacture [`DescribeStackRefactorOutput`](crate::operation::describe_stack_refactor::DescribeStackRefactorOutput).
    pub fn builder() -> crate::operation::describe_stack_refactor::builders::DescribeStackRefactorOutputBuilder {
        crate::operation::describe_stack_refactor::builders::DescribeStackRefactorOutputBuilder::default()
    }
}

/// A builder for [`DescribeStackRefactorOutput`](crate::operation::describe_stack_refactor::DescribeStackRefactorOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeStackRefactorOutputBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) stack_refactor_id: ::std::option::Option<::std::string::String>,
    pub(crate) stack_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) execution_status: ::std::option::Option<crate::types::StackRefactorExecutionStatus>,
    pub(crate) execution_status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::StackRefactorStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeStackRefactorOutputBuilder {
    /// <p>A description to help you identify the refactor.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description to help you identify the refactor.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description to help you identify the refactor.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The ID associated with the stack refactor created from the <code>CreateStackRefactor</code> action.</p>
    pub fn stack_refactor_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_refactor_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID associated with the stack refactor created from the <code>CreateStackRefactor</code> action.</p>
    pub fn set_stack_refactor_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_refactor_id = input;
        self
    }
    /// <p>The ID associated with the stack refactor created from the <code>CreateStackRefactor</code> action.</p>
    pub fn get_stack_refactor_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_refactor_id
    }
    /// Appends an item to `stack_ids`.
    ///
    /// To override the contents of this collection use [`set_stack_ids`](Self::set_stack_ids).
    ///
    /// <p>The unique ID for each stack.</p>
    pub fn stack_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.stack_ids.unwrap_or_default();
        v.push(input.into());
        self.stack_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The unique ID for each stack.</p>
    pub fn set_stack_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.stack_ids = input;
        self
    }
    /// <p>The unique ID for each stack.</p>
    pub fn get_stack_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.stack_ids
    }
    /// <p>The stack refactor execution operation status that's provided after calling the <code>ExecuteStackRefactor</code> action.</p>
    pub fn execution_status(mut self, input: crate::types::StackRefactorExecutionStatus) -> Self {
        self.execution_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The stack refactor execution operation status that's provided after calling the <code>ExecuteStackRefactor</code> action.</p>
    pub fn set_execution_status(mut self, input: ::std::option::Option<crate::types::StackRefactorExecutionStatus>) -> Self {
        self.execution_status = input;
        self
    }
    /// <p>The stack refactor execution operation status that's provided after calling the <code>ExecuteStackRefactor</code> action.</p>
    pub fn get_execution_status(&self) -> &::std::option::Option<crate::types::StackRefactorExecutionStatus> {
        &self.execution_status
    }
    /// <p>A detailed explanation for the stack refactor <code>ExecutionStatus</code>.</p>
    pub fn execution_status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A detailed explanation for the stack refactor <code>ExecutionStatus</code>.</p>
    pub fn set_execution_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_status_reason = input;
        self
    }
    /// <p>A detailed explanation for the stack refactor <code>ExecutionStatus</code>.</p>
    pub fn get_execution_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_status_reason
    }
    /// <p>The stack refactor operation status that's provided after calling the <code>CreateStackRefactor</code> action.</p>
    pub fn status(mut self, input: crate::types::StackRefactorStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The stack refactor operation status that's provided after calling the <code>CreateStackRefactor</code> action.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::StackRefactorStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The stack refactor operation status that's provided after calling the <code>CreateStackRefactor</code> action.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::StackRefactorStatus> {
        &self.status
    }
    /// <p>A detailed explanation for the stack refactor operation <code>Status</code>.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A detailed explanation for the stack refactor operation <code>Status</code>.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>A detailed explanation for the stack refactor operation <code>Status</code>.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeStackRefactorOutput`](crate::operation::describe_stack_refactor::DescribeStackRefactorOutput).
    pub fn build(self) -> crate::operation::describe_stack_refactor::DescribeStackRefactorOutput {
        crate::operation::describe_stack_refactor::DescribeStackRefactorOutput {
            description: self.description,
            stack_refactor_id: self.stack_refactor_id,
            stack_ids: self.stack_ids,
            execution_status: self.execution_status,
            execution_status_reason: self.execution_status_reason,
            status: self.status,
            status_reason: self.status_reason,
            _request_id: self._request_id,
        }
    }
}
