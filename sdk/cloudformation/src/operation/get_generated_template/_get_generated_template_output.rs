// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetGeneratedTemplateOutput {
    /// <p>The status of the template generation. Supported values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>CreatePending</code> - the creation of the template is pending.</p></li>
    /// <li>
    /// <p><code>CreateInProgress</code> - the creation of the template is in progress.</p></li>
    /// <li>
    /// <p><code>DeletePending</code> - the deletion of the template is pending.</p></li>
    /// <li>
    /// <p><code>DeleteInProgress</code> - the deletion of the template is in progress.</p></li>
    /// <li>
    /// <p><code>UpdatePending</code> - the update of the template is pending.</p></li>
    /// <li>
    /// <p><code>UpdateInProgress</code> - the update of the template is in progress.</p></li>
    /// <li>
    /// <p><code>Failed</code> - the template operation failed.</p></li>
    /// <li>
    /// <p><code>Complete</code> - the template operation is complete.</p></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::GeneratedTemplateStatus>,
    /// <p>The template body of the generated template, in the language specified by the <code>Language</code> parameter.</p>
    pub template_body: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetGeneratedTemplateOutput {
    /// <p>The status of the template generation. Supported values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>CreatePending</code> - the creation of the template is pending.</p></li>
    /// <li>
    /// <p><code>CreateInProgress</code> - the creation of the template is in progress.</p></li>
    /// <li>
    /// <p><code>DeletePending</code> - the deletion of the template is pending.</p></li>
    /// <li>
    /// <p><code>DeleteInProgress</code> - the deletion of the template is in progress.</p></li>
    /// <li>
    /// <p><code>UpdatePending</code> - the update of the template is pending.</p></li>
    /// <li>
    /// <p><code>UpdateInProgress</code> - the update of the template is in progress.</p></li>
    /// <li>
    /// <p><code>Failed</code> - the template operation failed.</p></li>
    /// <li>
    /// <p><code>Complete</code> - the template operation is complete.</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::GeneratedTemplateStatus> {
        self.status.as_ref()
    }
    /// <p>The template body of the generated template, in the language specified by the <code>Language</code> parameter.</p>
    pub fn template_body(&self) -> ::std::option::Option<&str> {
        self.template_body.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetGeneratedTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetGeneratedTemplateOutput {
    /// Creates a new builder-style object to manufacture [`GetGeneratedTemplateOutput`](crate::operation::get_generated_template::GetGeneratedTemplateOutput).
    pub fn builder() -> crate::operation::get_generated_template::builders::GetGeneratedTemplateOutputBuilder {
        crate::operation::get_generated_template::builders::GetGeneratedTemplateOutputBuilder::default()
    }
}

/// A builder for [`GetGeneratedTemplateOutput`](crate::operation::get_generated_template::GetGeneratedTemplateOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetGeneratedTemplateOutputBuilder {
    pub(crate) status: ::std::option::Option<crate::types::GeneratedTemplateStatus>,
    pub(crate) template_body: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetGeneratedTemplateOutputBuilder {
    /// <p>The status of the template generation. Supported values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>CreatePending</code> - the creation of the template is pending.</p></li>
    /// <li>
    /// <p><code>CreateInProgress</code> - the creation of the template is in progress.</p></li>
    /// <li>
    /// <p><code>DeletePending</code> - the deletion of the template is pending.</p></li>
    /// <li>
    /// <p><code>DeleteInProgress</code> - the deletion of the template is in progress.</p></li>
    /// <li>
    /// <p><code>UpdatePending</code> - the update of the template is pending.</p></li>
    /// <li>
    /// <p><code>UpdateInProgress</code> - the update of the template is in progress.</p></li>
    /// <li>
    /// <p><code>Failed</code> - the template operation failed.</p></li>
    /// <li>
    /// <p><code>Complete</code> - the template operation is complete.</p></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::GeneratedTemplateStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the template generation. Supported values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>CreatePending</code> - the creation of the template is pending.</p></li>
    /// <li>
    /// <p><code>CreateInProgress</code> - the creation of the template is in progress.</p></li>
    /// <li>
    /// <p><code>DeletePending</code> - the deletion of the template is pending.</p></li>
    /// <li>
    /// <p><code>DeleteInProgress</code> - the deletion of the template is in progress.</p></li>
    /// <li>
    /// <p><code>UpdatePending</code> - the update of the template is pending.</p></li>
    /// <li>
    /// <p><code>UpdateInProgress</code> - the update of the template is in progress.</p></li>
    /// <li>
    /// <p><code>Failed</code> - the template operation failed.</p></li>
    /// <li>
    /// <p><code>Complete</code> - the template operation is complete.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::GeneratedTemplateStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the template generation. Supported values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>CreatePending</code> - the creation of the template is pending.</p></li>
    /// <li>
    /// <p><code>CreateInProgress</code> - the creation of the template is in progress.</p></li>
    /// <li>
    /// <p><code>DeletePending</code> - the deletion of the template is pending.</p></li>
    /// <li>
    /// <p><code>DeleteInProgress</code> - the deletion of the template is in progress.</p></li>
    /// <li>
    /// <p><code>UpdatePending</code> - the update of the template is pending.</p></li>
    /// <li>
    /// <p><code>UpdateInProgress</code> - the update of the template is in progress.</p></li>
    /// <li>
    /// <p><code>Failed</code> - the template operation failed.</p></li>
    /// <li>
    /// <p><code>Complete</code> - the template operation is complete.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::GeneratedTemplateStatus> {
        &self.status
    }
    /// <p>The template body of the generated template, in the language specified by the <code>Language</code> parameter.</p>
    pub fn template_body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The template body of the generated template, in the language specified by the <code>Language</code> parameter.</p>
    pub fn set_template_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_body = input;
        self
    }
    /// <p>The template body of the generated template, in the language specified by the <code>Language</code> parameter.</p>
    pub fn get_template_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_body
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetGeneratedTemplateOutput`](crate::operation::get_generated_template::GetGeneratedTemplateOutput).
    pub fn build(self) -> crate::operation::get_generated_template::GetGeneratedTemplateOutput {
        crate::operation::get_generated_template::GetGeneratedTemplateOutput {
            status: self.status,
            template_body: self.template_body,
            _request_id: self._request_id,
        }
    }
}
