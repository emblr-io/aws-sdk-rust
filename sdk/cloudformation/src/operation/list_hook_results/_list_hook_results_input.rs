// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListHookResultsInput {
    /// <p>The type of operation being targeted by the Hook.</p>
    pub target_type: ::std::option::Option<crate::types::ListHookResultsTargetType>,
    /// <p>The logical ID of the target the operation is acting on by the Hook. If the target is a change set, it's the ARN of the change set.</p>
    /// <p>If the target is a Cloud Control API operation, this will be the <code>HookRequestToken</code> returned by the Cloud Control API operation request. For more information on the <code>HookRequestToken</code>, see <a href="https://docs.aws.amazon.com/cloudcontrolapi/latest/APIReference/API_ProgressEvent.html">ProgressEvent</a>.</p>
    pub target_id: ::std::option::Option<::std::string::String>,
    /// <p>A string that identifies the next page of events that you want to retrieve.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListHookResultsInput {
    /// <p>The type of operation being targeted by the Hook.</p>
    pub fn target_type(&self) -> ::std::option::Option<&crate::types::ListHookResultsTargetType> {
        self.target_type.as_ref()
    }
    /// <p>The logical ID of the target the operation is acting on by the Hook. If the target is a change set, it's the ARN of the change set.</p>
    /// <p>If the target is a Cloud Control API operation, this will be the <code>HookRequestToken</code> returned by the Cloud Control API operation request. For more information on the <code>HookRequestToken</code>, see <a href="https://docs.aws.amazon.com/cloudcontrolapi/latest/APIReference/API_ProgressEvent.html">ProgressEvent</a>.</p>
    pub fn target_id(&self) -> ::std::option::Option<&str> {
        self.target_id.as_deref()
    }
    /// <p>A string that identifies the next page of events that you want to retrieve.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListHookResultsInput {
    /// Creates a new builder-style object to manufacture [`ListHookResultsInput`](crate::operation::list_hook_results::ListHookResultsInput).
    pub fn builder() -> crate::operation::list_hook_results::builders::ListHookResultsInputBuilder {
        crate::operation::list_hook_results::builders::ListHookResultsInputBuilder::default()
    }
}

/// A builder for [`ListHookResultsInput`](crate::operation::list_hook_results::ListHookResultsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListHookResultsInputBuilder {
    pub(crate) target_type: ::std::option::Option<crate::types::ListHookResultsTargetType>,
    pub(crate) target_id: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListHookResultsInputBuilder {
    /// <p>The type of operation being targeted by the Hook.</p>
    /// This field is required.
    pub fn target_type(mut self, input: crate::types::ListHookResultsTargetType) -> Self {
        self.target_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of operation being targeted by the Hook.</p>
    pub fn set_target_type(mut self, input: ::std::option::Option<crate::types::ListHookResultsTargetType>) -> Self {
        self.target_type = input;
        self
    }
    /// <p>The type of operation being targeted by the Hook.</p>
    pub fn get_target_type(&self) -> &::std::option::Option<crate::types::ListHookResultsTargetType> {
        &self.target_type
    }
    /// <p>The logical ID of the target the operation is acting on by the Hook. If the target is a change set, it's the ARN of the change set.</p>
    /// <p>If the target is a Cloud Control API operation, this will be the <code>HookRequestToken</code> returned by the Cloud Control API operation request. For more information on the <code>HookRequestToken</code>, see <a href="https://docs.aws.amazon.com/cloudcontrolapi/latest/APIReference/API_ProgressEvent.html">ProgressEvent</a>.</p>
    /// This field is required.
    pub fn target_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The logical ID of the target the operation is acting on by the Hook. If the target is a change set, it's the ARN of the change set.</p>
    /// <p>If the target is a Cloud Control API operation, this will be the <code>HookRequestToken</code> returned by the Cloud Control API operation request. For more information on the <code>HookRequestToken</code>, see <a href="https://docs.aws.amazon.com/cloudcontrolapi/latest/APIReference/API_ProgressEvent.html">ProgressEvent</a>.</p>
    pub fn set_target_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_id = input;
        self
    }
    /// <p>The logical ID of the target the operation is acting on by the Hook. If the target is a change set, it's the ARN of the change set.</p>
    /// <p>If the target is a Cloud Control API operation, this will be the <code>HookRequestToken</code> returned by the Cloud Control API operation request. For more information on the <code>HookRequestToken</code>, see <a href="https://docs.aws.amazon.com/cloudcontrolapi/latest/APIReference/API_ProgressEvent.html">ProgressEvent</a>.</p>
    pub fn get_target_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_id
    }
    /// <p>A string that identifies the next page of events that you want to retrieve.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string that identifies the next page of events that you want to retrieve.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A string that identifies the next page of events that you want to retrieve.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListHookResultsInput`](crate::operation::list_hook_results::ListHookResultsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_hook_results::ListHookResultsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_hook_results::ListHookResultsInput {
            target_type: self.target_type,
            target_id: self.target_id,
            next_token: self.next_token,
        })
    }
}
