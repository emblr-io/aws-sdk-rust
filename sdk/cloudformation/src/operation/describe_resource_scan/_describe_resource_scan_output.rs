// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeResourceScanOutput {
    /// <p>The Amazon Resource Name (ARN) of the resource scan. The format is <code>arn:${Partition}:cloudformation:${Region}:${Account}:resourceScan/${Id}</code>. An example is <code>arn:aws:cloudformation:<i>us-east-1</i>:<i>123456789012</i>:resourceScan/<i>f5b490f7-7ed4-428a-aa06-31ff25db0772</i> </code>.</p>
    pub resource_scan_id: ::std::option::Option<::std::string::String>,
    /// <p>Status of the resource scan.</p>
    /// <dl>
    /// <dt>
    /// IN_PROGRESS
    /// </dt>
    /// <dd>
    /// <p>The resource scan is still in progress.</p>
    /// </dd>
    /// <dt>
    /// COMPLETE
    /// </dt>
    /// <dd>
    /// <p>The resource scan is complete.</p>
    /// </dd>
    /// <dt>
    /// EXPIRED
    /// </dt>
    /// <dd>
    /// <p>The resource scan has expired.</p>
    /// </dd>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>The resource scan has failed.</p>
    /// </dd>
    /// </dl>
    pub status: ::std::option::Option<crate::types::ResourceScanStatus>,
    /// <p>The reason for the resource scan status, providing more information if a failure happened.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The time that the resource scan was started.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time that the resource scan was finished.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The percentage of the resource scan that has been completed.</p>
    pub percentage_completed: ::std::option::Option<f64>,
    /// <p>The list of resource types for the specified scan. Resource types are only available for scans with a <code>Status</code> set to <code>COMPLETE</code> or <code>FAILED </code>.</p>
    pub resource_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The number of resources that were listed. This is only available for scans with a <code>Status</code> set to <code>COMPLETE</code>, <code>EXPIRED</code>, or <code>FAILED </code>.</p>
    pub resources_scanned: ::std::option::Option<i32>,
    /// <p>The number of resources that were read. This is only available for scans with a <code>Status</code> set to <code>COMPLETE</code>, <code>EXPIRED</code>, or <code>FAILED</code>.</p><note>
    /// <p>This field may be 0 if the resource scan failed with a <code>ResourceScanLimitExceededException</code>.</p>
    /// </note>
    pub resources_read: ::std::option::Option<i32>,
    /// <p>The scan filters that were used.</p>
    pub scan_filters: ::std::option::Option<::std::vec::Vec<crate::types::ScanFilter>>,
    _request_id: Option<String>,
}
impl DescribeResourceScanOutput {
    /// <p>The Amazon Resource Name (ARN) of the resource scan. The format is <code>arn:${Partition}:cloudformation:${Region}:${Account}:resourceScan/${Id}</code>. An example is <code>arn:aws:cloudformation:<i>us-east-1</i>:<i>123456789012</i>:resourceScan/<i>f5b490f7-7ed4-428a-aa06-31ff25db0772</i> </code>.</p>
    pub fn resource_scan_id(&self) -> ::std::option::Option<&str> {
        self.resource_scan_id.as_deref()
    }
    /// <p>Status of the resource scan.</p>
    /// <dl>
    /// <dt>
    /// IN_PROGRESS
    /// </dt>
    /// <dd>
    /// <p>The resource scan is still in progress.</p>
    /// </dd>
    /// <dt>
    /// COMPLETE
    /// </dt>
    /// <dd>
    /// <p>The resource scan is complete.</p>
    /// </dd>
    /// <dt>
    /// EXPIRED
    /// </dt>
    /// <dd>
    /// <p>The resource scan has expired.</p>
    /// </dd>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>The resource scan has failed.</p>
    /// </dd>
    /// </dl>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ResourceScanStatus> {
        self.status.as_ref()
    }
    /// <p>The reason for the resource scan status, providing more information if a failure happened.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The time that the resource scan was started.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The time that the resource scan was finished.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The percentage of the resource scan that has been completed.</p>
    pub fn percentage_completed(&self) -> ::std::option::Option<f64> {
        self.percentage_completed
    }
    /// <p>The list of resource types for the specified scan. Resource types are only available for scans with a <code>Status</code> set to <code>COMPLETE</code> or <code>FAILED </code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_types.is_none()`.
    pub fn resource_types(&self) -> &[::std::string::String] {
        self.resource_types.as_deref().unwrap_or_default()
    }
    /// <p>The number of resources that were listed. This is only available for scans with a <code>Status</code> set to <code>COMPLETE</code>, <code>EXPIRED</code>, or <code>FAILED </code>.</p>
    pub fn resources_scanned(&self) -> ::std::option::Option<i32> {
        self.resources_scanned
    }
    /// <p>The number of resources that were read. This is only available for scans with a <code>Status</code> set to <code>COMPLETE</code>, <code>EXPIRED</code>, or <code>FAILED</code>.</p><note>
    /// <p>This field may be 0 if the resource scan failed with a <code>ResourceScanLimitExceededException</code>.</p>
    /// </note>
    pub fn resources_read(&self) -> ::std::option::Option<i32> {
        self.resources_read
    }
    /// <p>The scan filters that were used.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.scan_filters.is_none()`.
    pub fn scan_filters(&self) -> &[crate::types::ScanFilter] {
        self.scan_filters.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for DescribeResourceScanOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeResourceScanOutput {
    /// Creates a new builder-style object to manufacture [`DescribeResourceScanOutput`](crate::operation::describe_resource_scan::DescribeResourceScanOutput).
    pub fn builder() -> crate::operation::describe_resource_scan::builders::DescribeResourceScanOutputBuilder {
        crate::operation::describe_resource_scan::builders::DescribeResourceScanOutputBuilder::default()
    }
}

/// A builder for [`DescribeResourceScanOutput`](crate::operation::describe_resource_scan::DescribeResourceScanOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeResourceScanOutputBuilder {
    pub(crate) resource_scan_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ResourceScanStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) percentage_completed: ::std::option::Option<f64>,
    pub(crate) resource_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) resources_scanned: ::std::option::Option<i32>,
    pub(crate) resources_read: ::std::option::Option<i32>,
    pub(crate) scan_filters: ::std::option::Option<::std::vec::Vec<crate::types::ScanFilter>>,
    _request_id: Option<String>,
}
impl DescribeResourceScanOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the resource scan. The format is <code>arn:${Partition}:cloudformation:${Region}:${Account}:resourceScan/${Id}</code>. An example is <code>arn:aws:cloudformation:<i>us-east-1</i>:<i>123456789012</i>:resourceScan/<i>f5b490f7-7ed4-428a-aa06-31ff25db0772</i> </code>.</p>
    pub fn resource_scan_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_scan_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource scan. The format is <code>arn:${Partition}:cloudformation:${Region}:${Account}:resourceScan/${Id}</code>. An example is <code>arn:aws:cloudformation:<i>us-east-1</i>:<i>123456789012</i>:resourceScan/<i>f5b490f7-7ed4-428a-aa06-31ff25db0772</i> </code>.</p>
    pub fn set_resource_scan_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_scan_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource scan. The format is <code>arn:${Partition}:cloudformation:${Region}:${Account}:resourceScan/${Id}</code>. An example is <code>arn:aws:cloudformation:<i>us-east-1</i>:<i>123456789012</i>:resourceScan/<i>f5b490f7-7ed4-428a-aa06-31ff25db0772</i> </code>.</p>
    pub fn get_resource_scan_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_scan_id
    }
    /// <p>Status of the resource scan.</p>
    /// <dl>
    /// <dt>
    /// IN_PROGRESS
    /// </dt>
    /// <dd>
    /// <p>The resource scan is still in progress.</p>
    /// </dd>
    /// <dt>
    /// COMPLETE
    /// </dt>
    /// <dd>
    /// <p>The resource scan is complete.</p>
    /// </dd>
    /// <dt>
    /// EXPIRED
    /// </dt>
    /// <dd>
    /// <p>The resource scan has expired.</p>
    /// </dd>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>The resource scan has failed.</p>
    /// </dd>
    /// </dl>
    pub fn status(mut self, input: crate::types::ResourceScanStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of the resource scan.</p>
    /// <dl>
    /// <dt>
    /// IN_PROGRESS
    /// </dt>
    /// <dd>
    /// <p>The resource scan is still in progress.</p>
    /// </dd>
    /// <dt>
    /// COMPLETE
    /// </dt>
    /// <dd>
    /// <p>The resource scan is complete.</p>
    /// </dd>
    /// <dt>
    /// EXPIRED
    /// </dt>
    /// <dd>
    /// <p>The resource scan has expired.</p>
    /// </dd>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>The resource scan has failed.</p>
    /// </dd>
    /// </dl>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ResourceScanStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Status of the resource scan.</p>
    /// <dl>
    /// <dt>
    /// IN_PROGRESS
    /// </dt>
    /// <dd>
    /// <p>The resource scan is still in progress.</p>
    /// </dd>
    /// <dt>
    /// COMPLETE
    /// </dt>
    /// <dd>
    /// <p>The resource scan is complete.</p>
    /// </dd>
    /// <dt>
    /// EXPIRED
    /// </dt>
    /// <dd>
    /// <p>The resource scan has expired.</p>
    /// </dd>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>The resource scan has failed.</p>
    /// </dd>
    /// </dl>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ResourceScanStatus> {
        &self.status
    }
    /// <p>The reason for the resource scan status, providing more information if a failure happened.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the resource scan status, providing more information if a failure happened.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The reason for the resource scan status, providing more information if a failure happened.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The time that the resource scan was started.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the resource scan was started.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time that the resource scan was started.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The time that the resource scan was finished.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the resource scan was finished.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The time that the resource scan was finished.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The percentage of the resource scan that has been completed.</p>
    pub fn percentage_completed(mut self, input: f64) -> Self {
        self.percentage_completed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage of the resource scan that has been completed.</p>
    pub fn set_percentage_completed(mut self, input: ::std::option::Option<f64>) -> Self {
        self.percentage_completed = input;
        self
    }
    /// <p>The percentage of the resource scan that has been completed.</p>
    pub fn get_percentage_completed(&self) -> &::std::option::Option<f64> {
        &self.percentage_completed
    }
    /// Appends an item to `resource_types`.
    ///
    /// To override the contents of this collection use [`set_resource_types`](Self::set_resource_types).
    ///
    /// <p>The list of resource types for the specified scan. Resource types are only available for scans with a <code>Status</code> set to <code>COMPLETE</code> or <code>FAILED </code>.</p>
    pub fn resource_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.resource_types.unwrap_or_default();
        v.push(input.into());
        self.resource_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of resource types for the specified scan. Resource types are only available for scans with a <code>Status</code> set to <code>COMPLETE</code> or <code>FAILED </code>.</p>
    pub fn set_resource_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.resource_types = input;
        self
    }
    /// <p>The list of resource types for the specified scan. Resource types are only available for scans with a <code>Status</code> set to <code>COMPLETE</code> or <code>FAILED </code>.</p>
    pub fn get_resource_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.resource_types
    }
    /// <p>The number of resources that were listed. This is only available for scans with a <code>Status</code> set to <code>COMPLETE</code>, <code>EXPIRED</code>, or <code>FAILED </code>.</p>
    pub fn resources_scanned(mut self, input: i32) -> Self {
        self.resources_scanned = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of resources that were listed. This is only available for scans with a <code>Status</code> set to <code>COMPLETE</code>, <code>EXPIRED</code>, or <code>FAILED </code>.</p>
    pub fn set_resources_scanned(mut self, input: ::std::option::Option<i32>) -> Self {
        self.resources_scanned = input;
        self
    }
    /// <p>The number of resources that were listed. This is only available for scans with a <code>Status</code> set to <code>COMPLETE</code>, <code>EXPIRED</code>, or <code>FAILED </code>.</p>
    pub fn get_resources_scanned(&self) -> &::std::option::Option<i32> {
        &self.resources_scanned
    }
    /// <p>The number of resources that were read. This is only available for scans with a <code>Status</code> set to <code>COMPLETE</code>, <code>EXPIRED</code>, or <code>FAILED</code>.</p><note>
    /// <p>This field may be 0 if the resource scan failed with a <code>ResourceScanLimitExceededException</code>.</p>
    /// </note>
    pub fn resources_read(mut self, input: i32) -> Self {
        self.resources_read = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of resources that were read. This is only available for scans with a <code>Status</code> set to <code>COMPLETE</code>, <code>EXPIRED</code>, or <code>FAILED</code>.</p><note>
    /// <p>This field may be 0 if the resource scan failed with a <code>ResourceScanLimitExceededException</code>.</p>
    /// </note>
    pub fn set_resources_read(mut self, input: ::std::option::Option<i32>) -> Self {
        self.resources_read = input;
        self
    }
    /// <p>The number of resources that were read. This is only available for scans with a <code>Status</code> set to <code>COMPLETE</code>, <code>EXPIRED</code>, or <code>FAILED</code>.</p><note>
    /// <p>This field may be 0 if the resource scan failed with a <code>ResourceScanLimitExceededException</code>.</p>
    /// </note>
    pub fn get_resources_read(&self) -> &::std::option::Option<i32> {
        &self.resources_read
    }
    /// Appends an item to `scan_filters`.
    ///
    /// To override the contents of this collection use [`set_scan_filters`](Self::set_scan_filters).
    ///
    /// <p>The scan filters that were used.</p>
    pub fn scan_filters(mut self, input: crate::types::ScanFilter) -> Self {
        let mut v = self.scan_filters.unwrap_or_default();
        v.push(input);
        self.scan_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The scan filters that were used.</p>
    pub fn set_scan_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ScanFilter>>) -> Self {
        self.scan_filters = input;
        self
    }
    /// <p>The scan filters that were used.</p>
    pub fn get_scan_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ScanFilter>> {
        &self.scan_filters
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeResourceScanOutput`](crate::operation::describe_resource_scan::DescribeResourceScanOutput).
    pub fn build(self) -> crate::operation::describe_resource_scan::DescribeResourceScanOutput {
        crate::operation::describe_resource_scan::DescribeResourceScanOutput {
            resource_scan_id: self.resource_scan_id,
            status: self.status,
            status_reason: self.status_reason,
            start_time: self.start_time,
            end_time: self.end_time,
            percentage_completed: self.percentage_completed,
            resource_types: self.resource_types,
            resources_scanned: self.resources_scanned,
            resources_read: self.resources_read,
            scan_filters: self.scan_filters,
            _request_id: self._request_id,
        }
    }
}
