// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A legal hold is an administrative tool that helps prevent backups from being deleted while under a hold. While the hold is in place, backups under a hold cannot be deleted and lifecycle policies that would alter the backup status (such as transition to cold storage) are delayed until the legal hold is removed. A backup can have more than one legal hold. Legal holds are applied to one or more backups (also known as recovery points). These backups can be filtered by resource types and by resource IDs.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LegalHold {
    /// <p>The title of a legal hold.</p>
    pub title: ::std::option::Option<::std::string::String>,
    /// <p>The status of the legal hold.</p>
    pub status: ::std::option::Option<crate::types::LegalHoldStatus>,
    /// <p>The description of a legal hold.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the legal hold.</p>
    pub legal_hold_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the legal hold; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub legal_hold_arn: ::std::option::Option<::std::string::String>,
    /// <p>The time when the legal hold was created.</p>
    pub creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time when the legal hold was cancelled.</p>
    pub cancellation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl LegalHold {
    /// <p>The title of a legal hold.</p>
    pub fn title(&self) -> ::std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>The status of the legal hold.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::LegalHoldStatus> {
        self.status.as_ref()
    }
    /// <p>The description of a legal hold.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ID of the legal hold.</p>
    pub fn legal_hold_id(&self) -> ::std::option::Option<&str> {
        self.legal_hold_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the legal hold; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn legal_hold_arn(&self) -> ::std::option::Option<&str> {
        self.legal_hold_arn.as_deref()
    }
    /// <p>The time when the legal hold was created.</p>
    pub fn creation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The time when the legal hold was cancelled.</p>
    pub fn cancellation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.cancellation_date.as_ref()
    }
}
impl LegalHold {
    /// Creates a new builder-style object to manufacture [`LegalHold`](crate::types::LegalHold).
    pub fn builder() -> crate::types::builders::LegalHoldBuilder {
        crate::types::builders::LegalHoldBuilder::default()
    }
}

/// A builder for [`LegalHold`](crate::types::LegalHold).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LegalHoldBuilder {
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::LegalHoldStatus>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) legal_hold_id: ::std::option::Option<::std::string::String>,
    pub(crate) legal_hold_arn: ::std::option::Option<::std::string::String>,
    pub(crate) creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) cancellation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl LegalHoldBuilder {
    /// <p>The title of a legal hold.</p>
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of a legal hold.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title of a legal hold.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The status of the legal hold.</p>
    pub fn status(mut self, input: crate::types::LegalHoldStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the legal hold.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::LegalHoldStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the legal hold.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::LegalHoldStatus> {
        &self.status
    }
    /// <p>The description of a legal hold.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of a legal hold.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of a legal hold.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The ID of the legal hold.</p>
    pub fn legal_hold_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.legal_hold_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the legal hold.</p>
    pub fn set_legal_hold_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.legal_hold_id = input;
        self
    }
    /// <p>The ID of the legal hold.</p>
    pub fn get_legal_hold_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.legal_hold_id
    }
    /// <p>The Amazon Resource Name (ARN) of the legal hold; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn legal_hold_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.legal_hold_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the legal hold; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn set_legal_hold_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.legal_hold_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the legal hold; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn get_legal_hold_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.legal_hold_arn
    }
    /// <p>The time when the legal hold was created.</p>
    pub fn creation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the legal hold was created.</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The time when the legal hold was created.</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date
    }
    /// <p>The time when the legal hold was cancelled.</p>
    pub fn cancellation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.cancellation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the legal hold was cancelled.</p>
    pub fn set_cancellation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.cancellation_date = input;
        self
    }
    /// <p>The time when the legal hold was cancelled.</p>
    pub fn get_cancellation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.cancellation_date
    }
    /// Consumes the builder and constructs a [`LegalHold`](crate::types::LegalHold).
    pub fn build(self) -> crate::types::LegalHold {
        crate::types::LegalHold {
            title: self.title,
            status: self.status,
            description: self.description,
            legal_hold_id: self.legal_hold_id,
            legal_hold_arn: self.legal_hold_arn,
            creation_date: self.creation_date,
            cancellation_date: self.cancellation_date,
        }
    }
}
