// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This is an optional array within a BackupRule.</p>
/// <p>IndexAction consists of one ResourceTypes.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IndexAction {
    /// <p>0 or 1 index action will be accepted for each BackupRule.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>EBS</code> for Amazon Elastic Block Store</p></li>
    /// <li>
    /// <p><code>S3</code> for Amazon Simple Storage Service (Amazon S3)</p></li>
    /// </ul>
    pub resource_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl IndexAction {
    /// <p>0 or 1 index action will be accepted for each BackupRule.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>EBS</code> for Amazon Elastic Block Store</p></li>
    /// <li>
    /// <p><code>S3</code> for Amazon Simple Storage Service (Amazon S3)</p></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_types.is_none()`.
    pub fn resource_types(&self) -> &[::std::string::String] {
        self.resource_types.as_deref().unwrap_or_default()
    }
}
impl IndexAction {
    /// Creates a new builder-style object to manufacture [`IndexAction`](crate::types::IndexAction).
    pub fn builder() -> crate::types::builders::IndexActionBuilder {
        crate::types::builders::IndexActionBuilder::default()
    }
}

/// A builder for [`IndexAction`](crate::types::IndexAction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IndexActionBuilder {
    pub(crate) resource_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl IndexActionBuilder {
    /// Appends an item to `resource_types`.
    ///
    /// To override the contents of this collection use [`set_resource_types`](Self::set_resource_types).
    ///
    /// <p>0 or 1 index action will be accepted for each BackupRule.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>EBS</code> for Amazon Elastic Block Store</p></li>
    /// <li>
    /// <p><code>S3</code> for Amazon Simple Storage Service (Amazon S3)</p></li>
    /// </ul>
    pub fn resource_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.resource_types.unwrap_or_default();
        v.push(input.into());
        self.resource_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>0 or 1 index action will be accepted for each BackupRule.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>EBS</code> for Amazon Elastic Block Store</p></li>
    /// <li>
    /// <p><code>S3</code> for Amazon Simple Storage Service (Amazon S3)</p></li>
    /// </ul>
    pub fn set_resource_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.resource_types = input;
        self
    }
    /// <p>0 or 1 index action will be accepted for each BackupRule.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>EBS</code> for Amazon Elastic Block Store</p></li>
    /// <li>
    /// <p><code>S3</code> for Amazon Simple Storage Service (Amazon S3)</p></li>
    /// </ul>
    pub fn get_resource_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.resource_types
    }
    /// Consumes the builder and constructs a [`IndexAction`](crate::types::IndexAction).
    pub fn build(self) -> crate::types::IndexAction {
        crate::types::IndexAction {
            resource_types: self.resource_types,
        }
    }
}
