// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetLegalHoldOutput {
    /// <p>The title of the legal hold.</p>
    pub title: ::std::option::Option<::std::string::String>,
    /// <p>The status of the legal hold.</p>
    pub status: ::std::option::Option<crate::types::LegalHoldStatus>,
    /// <p>The description of the legal hold.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The reason for removing the legal hold.</p>
    pub cancel_description: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the legal hold.</p>
    pub legal_hold_id: ::std::option::Option<::std::string::String>,
    /// <p>The framework ARN for the specified legal hold. The format of the ARN depends on the resource type.</p>
    pub legal_hold_arn: ::std::option::Option<::std::string::String>,
    /// <p>The time when the legal hold was created.</p>
    pub creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time when the legal hold was cancelled.</p>
    pub cancellation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time until which the legal hold record is retained.</p>
    pub retain_record_until: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The criteria to assign a set of resources, such as resource types or backup vaults.</p>
    pub recovery_point_selection: ::std::option::Option<crate::types::RecoveryPointSelection>,
    _request_id: Option<String>,
}
impl GetLegalHoldOutput {
    /// <p>The title of the legal hold.</p>
    pub fn title(&self) -> ::std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>The status of the legal hold.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::LegalHoldStatus> {
        self.status.as_ref()
    }
    /// <p>The description of the legal hold.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The reason for removing the legal hold.</p>
    pub fn cancel_description(&self) -> ::std::option::Option<&str> {
        self.cancel_description.as_deref()
    }
    /// <p>The ID of the legal hold.</p>
    pub fn legal_hold_id(&self) -> ::std::option::Option<&str> {
        self.legal_hold_id.as_deref()
    }
    /// <p>The framework ARN for the specified legal hold. The format of the ARN depends on the resource type.</p>
    pub fn legal_hold_arn(&self) -> ::std::option::Option<&str> {
        self.legal_hold_arn.as_deref()
    }
    /// <p>The time when the legal hold was created.</p>
    pub fn creation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The time when the legal hold was cancelled.</p>
    pub fn cancellation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.cancellation_date.as_ref()
    }
    /// <p>The date and time until which the legal hold record is retained.</p>
    pub fn retain_record_until(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.retain_record_until.as_ref()
    }
    /// <p>The criteria to assign a set of resources, such as resource types or backup vaults.</p>
    pub fn recovery_point_selection(&self) -> ::std::option::Option<&crate::types::RecoveryPointSelection> {
        self.recovery_point_selection.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetLegalHoldOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetLegalHoldOutput {
    /// Creates a new builder-style object to manufacture [`GetLegalHoldOutput`](crate::operation::get_legal_hold::GetLegalHoldOutput).
    pub fn builder() -> crate::operation::get_legal_hold::builders::GetLegalHoldOutputBuilder {
        crate::operation::get_legal_hold::builders::GetLegalHoldOutputBuilder::default()
    }
}

/// A builder for [`GetLegalHoldOutput`](crate::operation::get_legal_hold::GetLegalHoldOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetLegalHoldOutputBuilder {
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::LegalHoldStatus>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) cancel_description: ::std::option::Option<::std::string::String>,
    pub(crate) legal_hold_id: ::std::option::Option<::std::string::String>,
    pub(crate) legal_hold_arn: ::std::option::Option<::std::string::String>,
    pub(crate) creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) cancellation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) retain_record_until: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) recovery_point_selection: ::std::option::Option<crate::types::RecoveryPointSelection>,
    _request_id: Option<String>,
}
impl GetLegalHoldOutputBuilder {
    /// <p>The title of the legal hold.</p>
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of the legal hold.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title of the legal hold.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The status of the legal hold.</p>
    pub fn status(mut self, input: crate::types::LegalHoldStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the legal hold.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::LegalHoldStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the legal hold.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::LegalHoldStatus> {
        &self.status
    }
    /// <p>The description of the legal hold.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the legal hold.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the legal hold.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The reason for removing the legal hold.</p>
    pub fn cancel_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cancel_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for removing the legal hold.</p>
    pub fn set_cancel_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cancel_description = input;
        self
    }
    /// <p>The reason for removing the legal hold.</p>
    pub fn get_cancel_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.cancel_description
    }
    /// <p>The ID of the legal hold.</p>
    pub fn legal_hold_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.legal_hold_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the legal hold.</p>
    pub fn set_legal_hold_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.legal_hold_id = input;
        self
    }
    /// <p>The ID of the legal hold.</p>
    pub fn get_legal_hold_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.legal_hold_id
    }
    /// <p>The framework ARN for the specified legal hold. The format of the ARN depends on the resource type.</p>
    pub fn legal_hold_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.legal_hold_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The framework ARN for the specified legal hold. The format of the ARN depends on the resource type.</p>
    pub fn set_legal_hold_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.legal_hold_arn = input;
        self
    }
    /// <p>The framework ARN for the specified legal hold. The format of the ARN depends on the resource type.</p>
    pub fn get_legal_hold_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.legal_hold_arn
    }
    /// <p>The time when the legal hold was created.</p>
    pub fn creation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the legal hold was created.</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The time when the legal hold was created.</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date
    }
    /// <p>The time when the legal hold was cancelled.</p>
    pub fn cancellation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.cancellation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the legal hold was cancelled.</p>
    pub fn set_cancellation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.cancellation_date = input;
        self
    }
    /// <p>The time when the legal hold was cancelled.</p>
    pub fn get_cancellation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.cancellation_date
    }
    /// <p>The date and time until which the legal hold record is retained.</p>
    pub fn retain_record_until(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.retain_record_until = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time until which the legal hold record is retained.</p>
    pub fn set_retain_record_until(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.retain_record_until = input;
        self
    }
    /// <p>The date and time until which the legal hold record is retained.</p>
    pub fn get_retain_record_until(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.retain_record_until
    }
    /// <p>The criteria to assign a set of resources, such as resource types or backup vaults.</p>
    pub fn recovery_point_selection(mut self, input: crate::types::RecoveryPointSelection) -> Self {
        self.recovery_point_selection = ::std::option::Option::Some(input);
        self
    }
    /// <p>The criteria to assign a set of resources, such as resource types or backup vaults.</p>
    pub fn set_recovery_point_selection(mut self, input: ::std::option::Option<crate::types::RecoveryPointSelection>) -> Self {
        self.recovery_point_selection = input;
        self
    }
    /// <p>The criteria to assign a set of resources, such as resource types or backup vaults.</p>
    pub fn get_recovery_point_selection(&self) -> &::std::option::Option<crate::types::RecoveryPointSelection> {
        &self.recovery_point_selection
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetLegalHoldOutput`](crate::operation::get_legal_hold::GetLegalHoldOutput).
    pub fn build(self) -> crate::operation::get_legal_hold::GetLegalHoldOutput {
        crate::operation::get_legal_hold::GetLegalHoldOutput {
            title: self.title,
            status: self.status,
            description: self.description,
            cancel_description: self.cancel_description,
            legal_hold_id: self.legal_hold_id,
            legal_hold_arn: self.legal_hold_arn,
            creation_date: self.creation_date,
            cancellation_date: self.cancellation_date,
            retain_record_until: self.retain_record_until,
            recovery_point_selection: self.recovery_point_selection,
            _request_id: self._request_id,
        }
    }
}
