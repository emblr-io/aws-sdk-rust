// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetLegalHoldInput {
    /// <p>The ID of the legal hold.</p>
    pub legal_hold_id: ::std::option::Option<::std::string::String>,
}
impl GetLegalHoldInput {
    /// <p>The ID of the legal hold.</p>
    pub fn legal_hold_id(&self) -> ::std::option::Option<&str> {
        self.legal_hold_id.as_deref()
    }
}
impl GetLegalHoldInput {
    /// Creates a new builder-style object to manufacture [`GetLegalHoldInput`](crate::operation::get_legal_hold::GetLegalHoldInput).
    pub fn builder() -> crate::operation::get_legal_hold::builders::GetLegalHoldInputBuilder {
        crate::operation::get_legal_hold::builders::GetLegalHoldInputBuilder::default()
    }
}

/// A builder for [`GetLegalHoldInput`](crate::operation::get_legal_hold::GetLegalHoldInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetLegalHoldInputBuilder {
    pub(crate) legal_hold_id: ::std::option::Option<::std::string::String>,
}
impl GetLegalHoldInputBuilder {
    /// <p>The ID of the legal hold.</p>
    /// This field is required.
    pub fn legal_hold_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.legal_hold_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the legal hold.</p>
    pub fn set_legal_hold_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.legal_hold_id = input;
        self
    }
    /// <p>The ID of the legal hold.</p>
    pub fn get_legal_hold_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.legal_hold_id
    }
    /// Consumes the builder and constructs a [`GetLegalHoldInput`](crate::operation::get_legal_hold::GetLegalHoldInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_legal_hold::GetLegalHoldInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_legal_hold::GetLegalHoldInput {
            legal_hold_id: self.legal_hold_id,
        })
    }
}
