// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListIndexedRecoveryPointsInput {
    /// <p>The next item following a partial list of returned recovery points.</p>
    /// <p>For example, if a request is made to return <code>MaxResults</code> number of indexed recovery points, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of resource list items to be returned.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>A string of the Amazon Resource Name (ARN) that uniquely identifies the source resource.</p>
    pub source_resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>Returns only indexed recovery points that were created before the specified date.</p>
    pub created_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Returns only indexed recovery points that were created after the specified date.</p>
    pub created_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Returns a list of indexed recovery points for the specified resource type(s).</p>
    /// <p>Accepted values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>EBS</code> for Amazon Elastic Block Store</p></li>
    /// <li>
    /// <p><code>S3</code> for Amazon Simple Storage Service (Amazon S3)</p></li>
    /// </ul>
    pub resource_type: ::std::option::Option<::std::string::String>,
    /// <p>Include this parameter to filter the returned list by the indicated statuses.</p>
    /// <p>Accepted values: <code>PENDING</code> | <code>ACTIVE</code> | <code>FAILED</code> | <code>DELETING</code></p>
    /// <p>A recovery point with an index that has the status of <code>ACTIVE</code> can be included in a search.</p>
    pub index_status: ::std::option::Option<crate::types::IndexStatus>,
}
impl ListIndexedRecoveryPointsInput {
    /// <p>The next item following a partial list of returned recovery points.</p>
    /// <p>For example, if a request is made to return <code>MaxResults</code> number of indexed recovery points, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of resource list items to be returned.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>A string of the Amazon Resource Name (ARN) that uniquely identifies the source resource.</p>
    pub fn source_resource_arn(&self) -> ::std::option::Option<&str> {
        self.source_resource_arn.as_deref()
    }
    /// <p>Returns only indexed recovery points that were created before the specified date.</p>
    pub fn created_before(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_before.as_ref()
    }
    /// <p>Returns only indexed recovery points that were created after the specified date.</p>
    pub fn created_after(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_after.as_ref()
    }
    /// <p>Returns a list of indexed recovery points for the specified resource type(s).</p>
    /// <p>Accepted values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>EBS</code> for Amazon Elastic Block Store</p></li>
    /// <li>
    /// <p><code>S3</code> for Amazon Simple Storage Service (Amazon S3)</p></li>
    /// </ul>
    pub fn resource_type(&self) -> ::std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>Include this parameter to filter the returned list by the indicated statuses.</p>
    /// <p>Accepted values: <code>PENDING</code> | <code>ACTIVE</code> | <code>FAILED</code> | <code>DELETING</code></p>
    /// <p>A recovery point with an index that has the status of <code>ACTIVE</code> can be included in a search.</p>
    pub fn index_status(&self) -> ::std::option::Option<&crate::types::IndexStatus> {
        self.index_status.as_ref()
    }
}
impl ListIndexedRecoveryPointsInput {
    /// Creates a new builder-style object to manufacture [`ListIndexedRecoveryPointsInput`](crate::operation::list_indexed_recovery_points::ListIndexedRecoveryPointsInput).
    pub fn builder() -> crate::operation::list_indexed_recovery_points::builders::ListIndexedRecoveryPointsInputBuilder {
        crate::operation::list_indexed_recovery_points::builders::ListIndexedRecoveryPointsInputBuilder::default()
    }
}

/// A builder for [`ListIndexedRecoveryPointsInput`](crate::operation::list_indexed_recovery_points::ListIndexedRecoveryPointsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListIndexedRecoveryPointsInputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) source_resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) index_status: ::std::option::Option<crate::types::IndexStatus>,
}
impl ListIndexedRecoveryPointsInputBuilder {
    /// <p>The next item following a partial list of returned recovery points.</p>
    /// <p>For example, if a request is made to return <code>MaxResults</code> number of indexed recovery points, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The next item following a partial list of returned recovery points.</p>
    /// <p>For example, if a request is made to return <code>MaxResults</code> number of indexed recovery points, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The next item following a partial list of returned recovery points.</p>
    /// <p>For example, if a request is made to return <code>MaxResults</code> number of indexed recovery points, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of resource list items to be returned.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of resource list items to be returned.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of resource list items to be returned.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>A string of the Amazon Resource Name (ARN) that uniquely identifies the source resource.</p>
    pub fn source_resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string of the Amazon Resource Name (ARN) that uniquely identifies the source resource.</p>
    pub fn set_source_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_resource_arn = input;
        self
    }
    /// <p>A string of the Amazon Resource Name (ARN) that uniquely identifies the source resource.</p>
    pub fn get_source_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_resource_arn
    }
    /// <p>Returns only indexed recovery points that were created before the specified date.</p>
    pub fn created_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_before = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns only indexed recovery points that were created before the specified date.</p>
    pub fn set_created_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_before = input;
        self
    }
    /// <p>Returns only indexed recovery points that were created before the specified date.</p>
    pub fn get_created_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_before
    }
    /// <p>Returns only indexed recovery points that were created after the specified date.</p>
    pub fn created_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_after = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns only indexed recovery points that were created after the specified date.</p>
    pub fn set_created_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_after = input;
        self
    }
    /// <p>Returns only indexed recovery points that were created after the specified date.</p>
    pub fn get_created_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_after
    }
    /// <p>Returns a list of indexed recovery points for the specified resource type(s).</p>
    /// <p>Accepted values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>EBS</code> for Amazon Elastic Block Store</p></li>
    /// <li>
    /// <p><code>S3</code> for Amazon Simple Storage Service (Amazon S3)</p></li>
    /// </ul>
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Returns a list of indexed recovery points for the specified resource type(s).</p>
    /// <p>Accepted values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>EBS</code> for Amazon Elastic Block Store</p></li>
    /// <li>
    /// <p><code>S3</code> for Amazon Simple Storage Service (Amazon S3)</p></li>
    /// </ul>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>Returns a list of indexed recovery points for the specified resource type(s).</p>
    /// <p>Accepted values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>EBS</code> for Amazon Elastic Block Store</p></li>
    /// <li>
    /// <p><code>S3</code> for Amazon Simple Storage Service (Amazon S3)</p></li>
    /// </ul>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// <p>Include this parameter to filter the returned list by the indicated statuses.</p>
    /// <p>Accepted values: <code>PENDING</code> | <code>ACTIVE</code> | <code>FAILED</code> | <code>DELETING</code></p>
    /// <p>A recovery point with an index that has the status of <code>ACTIVE</code> can be included in a search.</p>
    pub fn index_status(mut self, input: crate::types::IndexStatus) -> Self {
        self.index_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Include this parameter to filter the returned list by the indicated statuses.</p>
    /// <p>Accepted values: <code>PENDING</code> | <code>ACTIVE</code> | <code>FAILED</code> | <code>DELETING</code></p>
    /// <p>A recovery point with an index that has the status of <code>ACTIVE</code> can be included in a search.</p>
    pub fn set_index_status(mut self, input: ::std::option::Option<crate::types::IndexStatus>) -> Self {
        self.index_status = input;
        self
    }
    /// <p>Include this parameter to filter the returned list by the indicated statuses.</p>
    /// <p>Accepted values: <code>PENDING</code> | <code>ACTIVE</code> | <code>FAILED</code> | <code>DELETING</code></p>
    /// <p>A recovery point with an index that has the status of <code>ACTIVE</code> can be included in a search.</p>
    pub fn get_index_status(&self) -> &::std::option::Option<crate::types::IndexStatus> {
        &self.index_status
    }
    /// Consumes the builder and constructs a [`ListIndexedRecoveryPointsInput`](crate::operation::list_indexed_recovery_points::ListIndexedRecoveryPointsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_indexed_recovery_points::ListIndexedRecoveryPointsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_indexed_recovery_points::ListIndexedRecoveryPointsInput {
            next_token: self.next_token,
            max_results: self.max_results,
            source_resource_arn: self.source_resource_arn,
            created_before: self.created_before,
            created_after: self.created_after,
            resource_type: self.resource_type,
            index_status: self.index_status,
        })
    }
}
