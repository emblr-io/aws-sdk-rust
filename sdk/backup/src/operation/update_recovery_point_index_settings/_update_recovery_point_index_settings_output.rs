// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateRecoveryPointIndexSettingsOutput {
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Region where they are created.</p>
    pub backup_vault_name: ::std::option::Option<::std::string::String>,
    /// <p>An ARN that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub recovery_point_arn: ::std::option::Option<::std::string::String>,
    /// <p>This is the current status for the backup index associated with the specified recovery point.</p>
    /// <p>Statuses are: <code>PENDING</code> | <code>ACTIVE</code> | <code>FAILED</code> | <code>DELETING</code></p>
    /// <p>A recovery point with an index that has the status of <code>ACTIVE</code> can be included in a search.</p>
    pub index_status: ::std::option::Option<crate::types::IndexStatus>,
    /// <p>Index can have 1 of 2 possible values, either <code>ENABLED</code> or <code>DISABLED</code>.</p>
    /// <p>A value of <code>ENABLED</code> means a backup index for an eligible <code>ACTIVE</code> recovery point has been created.</p>
    /// <p>A value of <code>DISABLED</code> means a backup index was deleted.</p>
    pub index: ::std::option::Option<crate::types::Index>,
    _request_id: Option<String>,
}
impl UpdateRecoveryPointIndexSettingsOutput {
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Region where they are created.</p>
    pub fn backup_vault_name(&self) -> ::std::option::Option<&str> {
        self.backup_vault_name.as_deref()
    }
    /// <p>An ARN that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn recovery_point_arn(&self) -> ::std::option::Option<&str> {
        self.recovery_point_arn.as_deref()
    }
    /// <p>This is the current status for the backup index associated with the specified recovery point.</p>
    /// <p>Statuses are: <code>PENDING</code> | <code>ACTIVE</code> | <code>FAILED</code> | <code>DELETING</code></p>
    /// <p>A recovery point with an index that has the status of <code>ACTIVE</code> can be included in a search.</p>
    pub fn index_status(&self) -> ::std::option::Option<&crate::types::IndexStatus> {
        self.index_status.as_ref()
    }
    /// <p>Index can have 1 of 2 possible values, either <code>ENABLED</code> or <code>DISABLED</code>.</p>
    /// <p>A value of <code>ENABLED</code> means a backup index for an eligible <code>ACTIVE</code> recovery point has been created.</p>
    /// <p>A value of <code>DISABLED</code> means a backup index was deleted.</p>
    pub fn index(&self) -> ::std::option::Option<&crate::types::Index> {
        self.index.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for UpdateRecoveryPointIndexSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateRecoveryPointIndexSettingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateRecoveryPointIndexSettingsOutput`](crate::operation::update_recovery_point_index_settings::UpdateRecoveryPointIndexSettingsOutput).
    pub fn builder() -> crate::operation::update_recovery_point_index_settings::builders::UpdateRecoveryPointIndexSettingsOutputBuilder {
        crate::operation::update_recovery_point_index_settings::builders::UpdateRecoveryPointIndexSettingsOutputBuilder::default()
    }
}

/// A builder for [`UpdateRecoveryPointIndexSettingsOutput`](crate::operation::update_recovery_point_index_settings::UpdateRecoveryPointIndexSettingsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateRecoveryPointIndexSettingsOutputBuilder {
    pub(crate) backup_vault_name: ::std::option::Option<::std::string::String>,
    pub(crate) recovery_point_arn: ::std::option::Option<::std::string::String>,
    pub(crate) index_status: ::std::option::Option<crate::types::IndexStatus>,
    pub(crate) index: ::std::option::Option<crate::types::Index>,
    _request_id: Option<String>,
}
impl UpdateRecoveryPointIndexSettingsOutputBuilder {
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Region where they are created.</p>
    pub fn backup_vault_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_vault_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Region where they are created.</p>
    pub fn set_backup_vault_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_vault_name = input;
        self
    }
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Region where they are created.</p>
    pub fn get_backup_vault_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_vault_name
    }
    /// <p>An ARN that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn recovery_point_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recovery_point_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An ARN that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn set_recovery_point_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recovery_point_arn = input;
        self
    }
    /// <p>An ARN that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn get_recovery_point_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.recovery_point_arn
    }
    /// <p>This is the current status for the backup index associated with the specified recovery point.</p>
    /// <p>Statuses are: <code>PENDING</code> | <code>ACTIVE</code> | <code>FAILED</code> | <code>DELETING</code></p>
    /// <p>A recovery point with an index that has the status of <code>ACTIVE</code> can be included in a search.</p>
    pub fn index_status(mut self, input: crate::types::IndexStatus) -> Self {
        self.index_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>This is the current status for the backup index associated with the specified recovery point.</p>
    /// <p>Statuses are: <code>PENDING</code> | <code>ACTIVE</code> | <code>FAILED</code> | <code>DELETING</code></p>
    /// <p>A recovery point with an index that has the status of <code>ACTIVE</code> can be included in a search.</p>
    pub fn set_index_status(mut self, input: ::std::option::Option<crate::types::IndexStatus>) -> Self {
        self.index_status = input;
        self
    }
    /// <p>This is the current status for the backup index associated with the specified recovery point.</p>
    /// <p>Statuses are: <code>PENDING</code> | <code>ACTIVE</code> | <code>FAILED</code> | <code>DELETING</code></p>
    /// <p>A recovery point with an index that has the status of <code>ACTIVE</code> can be included in a search.</p>
    pub fn get_index_status(&self) -> &::std::option::Option<crate::types::IndexStatus> {
        &self.index_status
    }
    /// <p>Index can have 1 of 2 possible values, either <code>ENABLED</code> or <code>DISABLED</code>.</p>
    /// <p>A value of <code>ENABLED</code> means a backup index for an eligible <code>ACTIVE</code> recovery point has been created.</p>
    /// <p>A value of <code>DISABLED</code> means a backup index was deleted.</p>
    pub fn index(mut self, input: crate::types::Index) -> Self {
        self.index = ::std::option::Option::Some(input);
        self
    }
    /// <p>Index can have 1 of 2 possible values, either <code>ENABLED</code> or <code>DISABLED</code>.</p>
    /// <p>A value of <code>ENABLED</code> means a backup index for an eligible <code>ACTIVE</code> recovery point has been created.</p>
    /// <p>A value of <code>DISABLED</code> means a backup index was deleted.</p>
    pub fn set_index(mut self, input: ::std::option::Option<crate::types::Index>) -> Self {
        self.index = input;
        self
    }
    /// <p>Index can have 1 of 2 possible values, either <code>ENABLED</code> or <code>DISABLED</code>.</p>
    /// <p>A value of <code>ENABLED</code> means a backup index for an eligible <code>ACTIVE</code> recovery point has been created.</p>
    /// <p>A value of <code>DISABLED</code> means a backup index was deleted.</p>
    pub fn get_index(&self) -> &::std::option::Option<crate::types::Index> {
        &self.index
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateRecoveryPointIndexSettingsOutput`](crate::operation::update_recovery_point_index_settings::UpdateRecoveryPointIndexSettingsOutput).
    pub fn build(self) -> crate::operation::update_recovery_point_index_settings::UpdateRecoveryPointIndexSettingsOutput {
        crate::operation::update_recovery_point_index_settings::UpdateRecoveryPointIndexSettingsOutput {
            backup_vault_name: self.backup_vault_name,
            recovery_point_arn: self.recovery_point_arn,
            index_status: self.index_status,
            index: self.index,
            _request_id: self._request_id,
        }
    }
}
