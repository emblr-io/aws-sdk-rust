// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateRestoreAccessBackupVaultInput {
    /// <p>The ARN of the source backup vault containing the recovery points to which temporary access is requested.</p>
    pub source_backup_vault_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the backup vault to associate with an MPA approval team.</p>
    pub backup_vault_name: ::std::option::Option<::std::string::String>,
    /// <p>Optional tags to assign to the restore access backup vault.</p>
    pub backup_vault_tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>A unique string that identifies the request and allows failed requests to be retried without the risk of executing the operation twice.</p>
    pub creator_request_id: ::std::option::Option<::std::string::String>,
    /// <p>A comment explaining the reason for requesting restore access to the backup vault.</p>
    pub requester_comment: ::std::option::Option<::std::string::String>,
}
impl CreateRestoreAccessBackupVaultInput {
    /// <p>The ARN of the source backup vault containing the recovery points to which temporary access is requested.</p>
    pub fn source_backup_vault_arn(&self) -> ::std::option::Option<&str> {
        self.source_backup_vault_arn.as_deref()
    }
    /// <p>The name of the backup vault to associate with an MPA approval team.</p>
    pub fn backup_vault_name(&self) -> ::std::option::Option<&str> {
        self.backup_vault_name.as_deref()
    }
    /// <p>Optional tags to assign to the restore access backup vault.</p>
    pub fn backup_vault_tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.backup_vault_tags.as_ref()
    }
    /// <p>A unique string that identifies the request and allows failed requests to be retried without the risk of executing the operation twice.</p>
    pub fn creator_request_id(&self) -> ::std::option::Option<&str> {
        self.creator_request_id.as_deref()
    }
    /// <p>A comment explaining the reason for requesting restore access to the backup vault.</p>
    pub fn requester_comment(&self) -> ::std::option::Option<&str> {
        self.requester_comment.as_deref()
    }
}
impl ::std::fmt::Debug for CreateRestoreAccessBackupVaultInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateRestoreAccessBackupVaultInput");
        formatter.field("source_backup_vault_arn", &self.source_backup_vault_arn);
        formatter.field("backup_vault_name", &self.backup_vault_name);
        formatter.field("backup_vault_tags", &"*** Sensitive Data Redacted ***");
        formatter.field("creator_request_id", &self.creator_request_id);
        formatter.field("requester_comment", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CreateRestoreAccessBackupVaultInput {
    /// Creates a new builder-style object to manufacture [`CreateRestoreAccessBackupVaultInput`](crate::operation::create_restore_access_backup_vault::CreateRestoreAccessBackupVaultInput).
    pub fn builder() -> crate::operation::create_restore_access_backup_vault::builders::CreateRestoreAccessBackupVaultInputBuilder {
        crate::operation::create_restore_access_backup_vault::builders::CreateRestoreAccessBackupVaultInputBuilder::default()
    }
}

/// A builder for [`CreateRestoreAccessBackupVaultInput`](crate::operation::create_restore_access_backup_vault::CreateRestoreAccessBackupVaultInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateRestoreAccessBackupVaultInputBuilder {
    pub(crate) source_backup_vault_arn: ::std::option::Option<::std::string::String>,
    pub(crate) backup_vault_name: ::std::option::Option<::std::string::String>,
    pub(crate) backup_vault_tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) creator_request_id: ::std::option::Option<::std::string::String>,
    pub(crate) requester_comment: ::std::option::Option<::std::string::String>,
}
impl CreateRestoreAccessBackupVaultInputBuilder {
    /// <p>The ARN of the source backup vault containing the recovery points to which temporary access is requested.</p>
    /// This field is required.
    pub fn source_backup_vault_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_backup_vault_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the source backup vault containing the recovery points to which temporary access is requested.</p>
    pub fn set_source_backup_vault_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_backup_vault_arn = input;
        self
    }
    /// <p>The ARN of the source backup vault containing the recovery points to which temporary access is requested.</p>
    pub fn get_source_backup_vault_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_backup_vault_arn
    }
    /// <p>The name of the backup vault to associate with an MPA approval team.</p>
    pub fn backup_vault_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_vault_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the backup vault to associate with an MPA approval team.</p>
    pub fn set_backup_vault_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_vault_name = input;
        self
    }
    /// <p>The name of the backup vault to associate with an MPA approval team.</p>
    pub fn get_backup_vault_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_vault_name
    }
    /// Adds a key-value pair to `backup_vault_tags`.
    ///
    /// To override the contents of this collection use [`set_backup_vault_tags`](Self::set_backup_vault_tags).
    ///
    /// <p>Optional tags to assign to the restore access backup vault.</p>
    pub fn backup_vault_tags(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.backup_vault_tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.backup_vault_tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Optional tags to assign to the restore access backup vault.</p>
    pub fn set_backup_vault_tags(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.backup_vault_tags = input;
        self
    }
    /// <p>Optional tags to assign to the restore access backup vault.</p>
    pub fn get_backup_vault_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.backup_vault_tags
    }
    /// <p>A unique string that identifies the request and allows failed requests to be retried without the risk of executing the operation twice.</p>
    pub fn creator_request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creator_request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique string that identifies the request and allows failed requests to be retried without the risk of executing the operation twice.</p>
    pub fn set_creator_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creator_request_id = input;
        self
    }
    /// <p>A unique string that identifies the request and allows failed requests to be retried without the risk of executing the operation twice.</p>
    pub fn get_creator_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.creator_request_id
    }
    /// <p>A comment explaining the reason for requesting restore access to the backup vault.</p>
    pub fn requester_comment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.requester_comment = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A comment explaining the reason for requesting restore access to the backup vault.</p>
    pub fn set_requester_comment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.requester_comment = input;
        self
    }
    /// <p>A comment explaining the reason for requesting restore access to the backup vault.</p>
    pub fn get_requester_comment(&self) -> &::std::option::Option<::std::string::String> {
        &self.requester_comment
    }
    /// Consumes the builder and constructs a [`CreateRestoreAccessBackupVaultInput`](crate::operation::create_restore_access_backup_vault::CreateRestoreAccessBackupVaultInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_restore_access_backup_vault::CreateRestoreAccessBackupVaultInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_restore_access_backup_vault::CreateRestoreAccessBackupVaultInput {
                source_backup_vault_arn: self.source_backup_vault_arn,
                backup_vault_name: self.backup_vault_name,
                backup_vault_tags: self.backup_vault_tags,
                creator_request_id: self.creator_request_id,
                requester_comment: self.requester_comment,
            },
        )
    }
}
impl ::std::fmt::Debug for CreateRestoreAccessBackupVaultInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateRestoreAccessBackupVaultInputBuilder");
        formatter.field("source_backup_vault_arn", &self.source_backup_vault_arn);
        formatter.field("backup_vault_name", &self.backup_vault_name);
        formatter.field("backup_vault_tags", &"*** Sensitive Data Redacted ***");
        formatter.field("creator_request_id", &self.creator_request_id);
        formatter.field("requester_comment", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
