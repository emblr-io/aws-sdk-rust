// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListRestoreAccessBackupVaultsOutput {
    /// <p>The pagination token to use in a subsequent request to retrieve the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>A list of restore access backup vaults associated with the specified backup vault.</p>
    pub restore_access_backup_vaults: ::std::option::Option<::std::vec::Vec<crate::types::RestoreAccessBackupVaultListMember>>,
    _request_id: Option<String>,
}
impl ListRestoreAccessBackupVaultsOutput {
    /// <p>The pagination token to use in a subsequent request to retrieve the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A list of restore access backup vaults associated with the specified backup vault.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.restore_access_backup_vaults.is_none()`.
    pub fn restore_access_backup_vaults(&self) -> &[crate::types::RestoreAccessBackupVaultListMember] {
        self.restore_access_backup_vaults.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for ListRestoreAccessBackupVaultsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListRestoreAccessBackupVaultsOutput {
    /// Creates a new builder-style object to manufacture [`ListRestoreAccessBackupVaultsOutput`](crate::operation::list_restore_access_backup_vaults::ListRestoreAccessBackupVaultsOutput).
    pub fn builder() -> crate::operation::list_restore_access_backup_vaults::builders::ListRestoreAccessBackupVaultsOutputBuilder {
        crate::operation::list_restore_access_backup_vaults::builders::ListRestoreAccessBackupVaultsOutputBuilder::default()
    }
}

/// A builder for [`ListRestoreAccessBackupVaultsOutput`](crate::operation::list_restore_access_backup_vaults::ListRestoreAccessBackupVaultsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListRestoreAccessBackupVaultsOutputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) restore_access_backup_vaults: ::std::option::Option<::std::vec::Vec<crate::types::RestoreAccessBackupVaultListMember>>,
    _request_id: Option<String>,
}
impl ListRestoreAccessBackupVaultsOutputBuilder {
    /// <p>The pagination token to use in a subsequent request to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token to use in a subsequent request to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token to use in a subsequent request to retrieve the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `restore_access_backup_vaults`.
    ///
    /// To override the contents of this collection use [`set_restore_access_backup_vaults`](Self::set_restore_access_backup_vaults).
    ///
    /// <p>A list of restore access backup vaults associated with the specified backup vault.</p>
    pub fn restore_access_backup_vaults(mut self, input: crate::types::RestoreAccessBackupVaultListMember) -> Self {
        let mut v = self.restore_access_backup_vaults.unwrap_or_default();
        v.push(input);
        self.restore_access_backup_vaults = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of restore access backup vaults associated with the specified backup vault.</p>
    pub fn set_restore_access_backup_vaults(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::RestoreAccessBackupVaultListMember>>,
    ) -> Self {
        self.restore_access_backup_vaults = input;
        self
    }
    /// <p>A list of restore access backup vaults associated with the specified backup vault.</p>
    pub fn get_restore_access_backup_vaults(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RestoreAccessBackupVaultListMember>> {
        &self.restore_access_backup_vaults
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListRestoreAccessBackupVaultsOutput`](crate::operation::list_restore_access_backup_vaults::ListRestoreAccessBackupVaultsOutput).
    pub fn build(self) -> crate::operation::list_restore_access_backup_vaults::ListRestoreAccessBackupVaultsOutput {
        crate::operation::list_restore_access_backup_vaults::ListRestoreAccessBackupVaultsOutput {
            next_token: self.next_token,
            restore_access_backup_vaults: self.restore_access_backup_vaults,
            _request_id: self._request_id,
        }
    }
}
