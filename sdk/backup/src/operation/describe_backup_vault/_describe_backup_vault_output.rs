// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeBackupVaultOutput {
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Region where they are created.</p>
    pub backup_vault_name: ::std::option::Option<::std::string::String>,
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a backup vault; for example, <code>arn:aws:backup:us-east-1:123456789012:backup-vault:aBackupVault</code>.</p>
    pub backup_vault_arn: ::std::option::Option<::std::string::String>,
    /// <p>The type of vault described.</p>
    pub vault_type: ::std::option::Option<crate::types::VaultType>,
    /// <p>The current state of the vault.-&gt;</p>
    pub vault_state: ::std::option::Option<crate::types::VaultState>,
    /// <p>The server-side encryption key that is used to protect your backups; for example, <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
    pub encryption_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that a backup vault is created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A unique string that identifies the request and allows failed requests to be retried without the risk of running the operation twice. This parameter is optional. If used, this parameter must contain 1 to 50 alphanumeric or '-_.' characters.</p>
    pub creator_request_id: ::std::option::Option<::std::string::String>,
    /// <p>The number of recovery points that are stored in a backup vault.</p>
    /// <p>Recovery point count value displayed in the console can be an approximation. Use <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/API_ListRecoveryPointsByBackupVault.html"> <code>ListRecoveryPointsByBackupVault</code> </a> API to obtain the exact count.</p>
    pub number_of_recovery_points: i64,
    /// <p>A Boolean that indicates whether Backup Vault Lock is currently protecting the backup vault. <code>True</code> means that Vault Lock causes delete or update operations on the recovery points stored in the vault to fail.</p>
    pub locked: ::std::option::Option<bool>,
    /// <p>The Backup Vault Lock setting that specifies the minimum retention period that the vault retains its recovery points. If this parameter is not specified, Vault Lock will not enforce a minimum retention period.</p>
    /// <p>If specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or longer than the minimum retention period. If the job's retention period is shorter than that minimum retention period, then the vault fails the backup or copy job, and you should either modify your lifecycle settings or use a different vault. Recovery points already stored in the vault prior to Vault Lock are not affected.</p>
    pub min_retention_days: ::std::option::Option<i64>,
    /// <p>The Backup Vault Lock setting that specifies the maximum retention period that the vault retains its recovery points. If this parameter is not specified, Vault Lock does not enforce a maximum retention period on the recovery points in the vault (allowing indefinite storage).</p>
    /// <p>If specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or shorter than the maximum retention period. If the job's retention period is longer than that maximum retention period, then the vault fails the backup or copy job, and you should either modify your lifecycle settings or use a different vault. Recovery points already stored in the vault prior to Vault Lock are not affected.</p>
    pub max_retention_days: ::std::option::Option<i64>,
    /// <p>The date and time when Backup Vault Lock configuration cannot be changed or deleted.</p>
    /// <p>If you applied Vault Lock to your vault without specifying a lock date, you can change any of your Vault Lock settings, or delete Vault Lock from the vault entirely, at any time.</p>
    /// <p>This value is in Unix format, Coordinated Universal Time (UTC), and accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub lock_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The ARN of the source backup vault from which this restore access backup vault was created.</p>
    pub source_backup_vault_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the MPA approval team associated with this backup vault.</p>
    pub mpa_approval_team_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the MPA session associated with this backup vault.</p>
    pub mpa_session_arn: ::std::option::Option<::std::string::String>,
    /// <p>Information about the latest update to the MPA approval team association for this backup vault.</p>
    pub latest_mpa_approval_team_update: ::std::option::Option<crate::types::LatestMpaApprovalTeamUpdate>,
    _request_id: Option<String>,
}
impl DescribeBackupVaultOutput {
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Region where they are created.</p>
    pub fn backup_vault_name(&self) -> ::std::option::Option<&str> {
        self.backup_vault_name.as_deref()
    }
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a backup vault; for example, <code>arn:aws:backup:us-east-1:123456789012:backup-vault:aBackupVault</code>.</p>
    pub fn backup_vault_arn(&self) -> ::std::option::Option<&str> {
        self.backup_vault_arn.as_deref()
    }
    /// <p>The type of vault described.</p>
    pub fn vault_type(&self) -> ::std::option::Option<&crate::types::VaultType> {
        self.vault_type.as_ref()
    }
    /// <p>The current state of the vault.-&gt;</p>
    pub fn vault_state(&self) -> ::std::option::Option<&crate::types::VaultState> {
        self.vault_state.as_ref()
    }
    /// <p>The server-side encryption key that is used to protect your backups; for example, <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
    pub fn encryption_key_arn(&self) -> ::std::option::Option<&str> {
        self.encryption_key_arn.as_deref()
    }
    /// <p>The date and time that a backup vault is created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn creation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>A unique string that identifies the request and allows failed requests to be retried without the risk of running the operation twice. This parameter is optional. If used, this parameter must contain 1 to 50 alphanumeric or '-_.' characters.</p>
    pub fn creator_request_id(&self) -> ::std::option::Option<&str> {
        self.creator_request_id.as_deref()
    }
    /// <p>The number of recovery points that are stored in a backup vault.</p>
    /// <p>Recovery point count value displayed in the console can be an approximation. Use <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/API_ListRecoveryPointsByBackupVault.html"> <code>ListRecoveryPointsByBackupVault</code> </a> API to obtain the exact count.</p>
    pub fn number_of_recovery_points(&self) -> i64 {
        self.number_of_recovery_points
    }
    /// <p>A Boolean that indicates whether Backup Vault Lock is currently protecting the backup vault. <code>True</code> means that Vault Lock causes delete or update operations on the recovery points stored in the vault to fail.</p>
    pub fn locked(&self) -> ::std::option::Option<bool> {
        self.locked
    }
    /// <p>The Backup Vault Lock setting that specifies the minimum retention period that the vault retains its recovery points. If this parameter is not specified, Vault Lock will not enforce a minimum retention period.</p>
    /// <p>If specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or longer than the minimum retention period. If the job's retention period is shorter than that minimum retention period, then the vault fails the backup or copy job, and you should either modify your lifecycle settings or use a different vault. Recovery points already stored in the vault prior to Vault Lock are not affected.</p>
    pub fn min_retention_days(&self) -> ::std::option::Option<i64> {
        self.min_retention_days
    }
    /// <p>The Backup Vault Lock setting that specifies the maximum retention period that the vault retains its recovery points. If this parameter is not specified, Vault Lock does not enforce a maximum retention period on the recovery points in the vault (allowing indefinite storage).</p>
    /// <p>If specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or shorter than the maximum retention period. If the job's retention period is longer than that maximum retention period, then the vault fails the backup or copy job, and you should either modify your lifecycle settings or use a different vault. Recovery points already stored in the vault prior to Vault Lock are not affected.</p>
    pub fn max_retention_days(&self) -> ::std::option::Option<i64> {
        self.max_retention_days
    }
    /// <p>The date and time when Backup Vault Lock configuration cannot be changed or deleted.</p>
    /// <p>If you applied Vault Lock to your vault without specifying a lock date, you can change any of your Vault Lock settings, or delete Vault Lock from the vault entirely, at any time.</p>
    /// <p>This value is in Unix format, Coordinated Universal Time (UTC), and accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn lock_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.lock_date.as_ref()
    }
    /// <p>The ARN of the source backup vault from which this restore access backup vault was created.</p>
    pub fn source_backup_vault_arn(&self) -> ::std::option::Option<&str> {
        self.source_backup_vault_arn.as_deref()
    }
    /// <p>The ARN of the MPA approval team associated with this backup vault.</p>
    pub fn mpa_approval_team_arn(&self) -> ::std::option::Option<&str> {
        self.mpa_approval_team_arn.as_deref()
    }
    /// <p>The ARN of the MPA session associated with this backup vault.</p>
    pub fn mpa_session_arn(&self) -> ::std::option::Option<&str> {
        self.mpa_session_arn.as_deref()
    }
    /// <p>Information about the latest update to the MPA approval team association for this backup vault.</p>
    pub fn latest_mpa_approval_team_update(&self) -> ::std::option::Option<&crate::types::LatestMpaApprovalTeamUpdate> {
        self.latest_mpa_approval_team_update.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeBackupVaultOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeBackupVaultOutput {
    /// Creates a new builder-style object to manufacture [`DescribeBackupVaultOutput`](crate::operation::describe_backup_vault::DescribeBackupVaultOutput).
    pub fn builder() -> crate::operation::describe_backup_vault::builders::DescribeBackupVaultOutputBuilder {
        crate::operation::describe_backup_vault::builders::DescribeBackupVaultOutputBuilder::default()
    }
}

/// A builder for [`DescribeBackupVaultOutput`](crate::operation::describe_backup_vault::DescribeBackupVaultOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeBackupVaultOutputBuilder {
    pub(crate) backup_vault_name: ::std::option::Option<::std::string::String>,
    pub(crate) backup_vault_arn: ::std::option::Option<::std::string::String>,
    pub(crate) vault_type: ::std::option::Option<crate::types::VaultType>,
    pub(crate) vault_state: ::std::option::Option<crate::types::VaultState>,
    pub(crate) encryption_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) creator_request_id: ::std::option::Option<::std::string::String>,
    pub(crate) number_of_recovery_points: ::std::option::Option<i64>,
    pub(crate) locked: ::std::option::Option<bool>,
    pub(crate) min_retention_days: ::std::option::Option<i64>,
    pub(crate) max_retention_days: ::std::option::Option<i64>,
    pub(crate) lock_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) source_backup_vault_arn: ::std::option::Option<::std::string::String>,
    pub(crate) mpa_approval_team_arn: ::std::option::Option<::std::string::String>,
    pub(crate) mpa_session_arn: ::std::option::Option<::std::string::String>,
    pub(crate) latest_mpa_approval_team_update: ::std::option::Option<crate::types::LatestMpaApprovalTeamUpdate>,
    _request_id: Option<String>,
}
impl DescribeBackupVaultOutputBuilder {
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Region where they are created.</p>
    pub fn backup_vault_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_vault_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Region where they are created.</p>
    pub fn set_backup_vault_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_vault_name = input;
        self
    }
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Region where they are created.</p>
    pub fn get_backup_vault_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_vault_name
    }
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a backup vault; for example, <code>arn:aws:backup:us-east-1:123456789012:backup-vault:aBackupVault</code>.</p>
    pub fn backup_vault_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_vault_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a backup vault; for example, <code>arn:aws:backup:us-east-1:123456789012:backup-vault:aBackupVault</code>.</p>
    pub fn set_backup_vault_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_vault_arn = input;
        self
    }
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a backup vault; for example, <code>arn:aws:backup:us-east-1:123456789012:backup-vault:aBackupVault</code>.</p>
    pub fn get_backup_vault_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_vault_arn
    }
    /// <p>The type of vault described.</p>
    pub fn vault_type(mut self, input: crate::types::VaultType) -> Self {
        self.vault_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of vault described.</p>
    pub fn set_vault_type(mut self, input: ::std::option::Option<crate::types::VaultType>) -> Self {
        self.vault_type = input;
        self
    }
    /// <p>The type of vault described.</p>
    pub fn get_vault_type(&self) -> &::std::option::Option<crate::types::VaultType> {
        &self.vault_type
    }
    /// <p>The current state of the vault.-&gt;</p>
    pub fn vault_state(mut self, input: crate::types::VaultState) -> Self {
        self.vault_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the vault.-&gt;</p>
    pub fn set_vault_state(mut self, input: ::std::option::Option<crate::types::VaultState>) -> Self {
        self.vault_state = input;
        self
    }
    /// <p>The current state of the vault.-&gt;</p>
    pub fn get_vault_state(&self) -> &::std::option::Option<crate::types::VaultState> {
        &self.vault_state
    }
    /// <p>The server-side encryption key that is used to protect your backups; for example, <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
    pub fn encryption_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encryption_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The server-side encryption key that is used to protect your backups; for example, <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
    pub fn set_encryption_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encryption_key_arn = input;
        self
    }
    /// <p>The server-side encryption key that is used to protect your backups; for example, <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
    pub fn get_encryption_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.encryption_key_arn
    }
    /// <p>The date and time that a backup vault is created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn creation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that a backup vault is created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date and time that a backup vault is created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date
    }
    /// <p>A unique string that identifies the request and allows failed requests to be retried without the risk of running the operation twice. This parameter is optional. If used, this parameter must contain 1 to 50 alphanumeric or '-_.' characters.</p>
    pub fn creator_request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creator_request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique string that identifies the request and allows failed requests to be retried without the risk of running the operation twice. This parameter is optional. If used, this parameter must contain 1 to 50 alphanumeric or '-_.' characters.</p>
    pub fn set_creator_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creator_request_id = input;
        self
    }
    /// <p>A unique string that identifies the request and allows failed requests to be retried without the risk of running the operation twice. This parameter is optional. If used, this parameter must contain 1 to 50 alphanumeric or '-_.' characters.</p>
    pub fn get_creator_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.creator_request_id
    }
    /// <p>The number of recovery points that are stored in a backup vault.</p>
    /// <p>Recovery point count value displayed in the console can be an approximation. Use <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/API_ListRecoveryPointsByBackupVault.html"> <code>ListRecoveryPointsByBackupVault</code> </a> API to obtain the exact count.</p>
    pub fn number_of_recovery_points(mut self, input: i64) -> Self {
        self.number_of_recovery_points = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of recovery points that are stored in a backup vault.</p>
    /// <p>Recovery point count value displayed in the console can be an approximation. Use <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/API_ListRecoveryPointsByBackupVault.html"> <code>ListRecoveryPointsByBackupVault</code> </a> API to obtain the exact count.</p>
    pub fn set_number_of_recovery_points(mut self, input: ::std::option::Option<i64>) -> Self {
        self.number_of_recovery_points = input;
        self
    }
    /// <p>The number of recovery points that are stored in a backup vault.</p>
    /// <p>Recovery point count value displayed in the console can be an approximation. Use <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/API_ListRecoveryPointsByBackupVault.html"> <code>ListRecoveryPointsByBackupVault</code> </a> API to obtain the exact count.</p>
    pub fn get_number_of_recovery_points(&self) -> &::std::option::Option<i64> {
        &self.number_of_recovery_points
    }
    /// <p>A Boolean that indicates whether Backup Vault Lock is currently protecting the backup vault. <code>True</code> means that Vault Lock causes delete or update operations on the recovery points stored in the vault to fail.</p>
    pub fn locked(mut self, input: bool) -> Self {
        self.locked = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Boolean that indicates whether Backup Vault Lock is currently protecting the backup vault. <code>True</code> means that Vault Lock causes delete or update operations on the recovery points stored in the vault to fail.</p>
    pub fn set_locked(mut self, input: ::std::option::Option<bool>) -> Self {
        self.locked = input;
        self
    }
    /// <p>A Boolean that indicates whether Backup Vault Lock is currently protecting the backup vault. <code>True</code> means that Vault Lock causes delete or update operations on the recovery points stored in the vault to fail.</p>
    pub fn get_locked(&self) -> &::std::option::Option<bool> {
        &self.locked
    }
    /// <p>The Backup Vault Lock setting that specifies the minimum retention period that the vault retains its recovery points. If this parameter is not specified, Vault Lock will not enforce a minimum retention period.</p>
    /// <p>If specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or longer than the minimum retention period. If the job's retention period is shorter than that minimum retention period, then the vault fails the backup or copy job, and you should either modify your lifecycle settings or use a different vault. Recovery points already stored in the vault prior to Vault Lock are not affected.</p>
    pub fn min_retention_days(mut self, input: i64) -> Self {
        self.min_retention_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Backup Vault Lock setting that specifies the minimum retention period that the vault retains its recovery points. If this parameter is not specified, Vault Lock will not enforce a minimum retention period.</p>
    /// <p>If specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or longer than the minimum retention period. If the job's retention period is shorter than that minimum retention period, then the vault fails the backup or copy job, and you should either modify your lifecycle settings or use a different vault. Recovery points already stored in the vault prior to Vault Lock are not affected.</p>
    pub fn set_min_retention_days(mut self, input: ::std::option::Option<i64>) -> Self {
        self.min_retention_days = input;
        self
    }
    /// <p>The Backup Vault Lock setting that specifies the minimum retention period that the vault retains its recovery points. If this parameter is not specified, Vault Lock will not enforce a minimum retention period.</p>
    /// <p>If specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or longer than the minimum retention period. If the job's retention period is shorter than that minimum retention period, then the vault fails the backup or copy job, and you should either modify your lifecycle settings or use a different vault. Recovery points already stored in the vault prior to Vault Lock are not affected.</p>
    pub fn get_min_retention_days(&self) -> &::std::option::Option<i64> {
        &self.min_retention_days
    }
    /// <p>The Backup Vault Lock setting that specifies the maximum retention period that the vault retains its recovery points. If this parameter is not specified, Vault Lock does not enforce a maximum retention period on the recovery points in the vault (allowing indefinite storage).</p>
    /// <p>If specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or shorter than the maximum retention period. If the job's retention period is longer than that maximum retention period, then the vault fails the backup or copy job, and you should either modify your lifecycle settings or use a different vault. Recovery points already stored in the vault prior to Vault Lock are not affected.</p>
    pub fn max_retention_days(mut self, input: i64) -> Self {
        self.max_retention_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Backup Vault Lock setting that specifies the maximum retention period that the vault retains its recovery points. If this parameter is not specified, Vault Lock does not enforce a maximum retention period on the recovery points in the vault (allowing indefinite storage).</p>
    /// <p>If specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or shorter than the maximum retention period. If the job's retention period is longer than that maximum retention period, then the vault fails the backup or copy job, and you should either modify your lifecycle settings or use a different vault. Recovery points already stored in the vault prior to Vault Lock are not affected.</p>
    pub fn set_max_retention_days(mut self, input: ::std::option::Option<i64>) -> Self {
        self.max_retention_days = input;
        self
    }
    /// <p>The Backup Vault Lock setting that specifies the maximum retention period that the vault retains its recovery points. If this parameter is not specified, Vault Lock does not enforce a maximum retention period on the recovery points in the vault (allowing indefinite storage).</p>
    /// <p>If specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or shorter than the maximum retention period. If the job's retention period is longer than that maximum retention period, then the vault fails the backup or copy job, and you should either modify your lifecycle settings or use a different vault. Recovery points already stored in the vault prior to Vault Lock are not affected.</p>
    pub fn get_max_retention_days(&self) -> &::std::option::Option<i64> {
        &self.max_retention_days
    }
    /// <p>The date and time when Backup Vault Lock configuration cannot be changed or deleted.</p>
    /// <p>If you applied Vault Lock to your vault without specifying a lock date, you can change any of your Vault Lock settings, or delete Vault Lock from the vault entirely, at any time.</p>
    /// <p>This value is in Unix format, Coordinated Universal Time (UTC), and accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn lock_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.lock_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when Backup Vault Lock configuration cannot be changed or deleted.</p>
    /// <p>If you applied Vault Lock to your vault without specifying a lock date, you can change any of your Vault Lock settings, or delete Vault Lock from the vault entirely, at any time.</p>
    /// <p>This value is in Unix format, Coordinated Universal Time (UTC), and accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn set_lock_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.lock_date = input;
        self
    }
    /// <p>The date and time when Backup Vault Lock configuration cannot be changed or deleted.</p>
    /// <p>If you applied Vault Lock to your vault without specifying a lock date, you can change any of your Vault Lock settings, or delete Vault Lock from the vault entirely, at any time.</p>
    /// <p>This value is in Unix format, Coordinated Universal Time (UTC), and accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn get_lock_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.lock_date
    }
    /// <p>The ARN of the source backup vault from which this restore access backup vault was created.</p>
    pub fn source_backup_vault_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_backup_vault_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the source backup vault from which this restore access backup vault was created.</p>
    pub fn set_source_backup_vault_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_backup_vault_arn = input;
        self
    }
    /// <p>The ARN of the source backup vault from which this restore access backup vault was created.</p>
    pub fn get_source_backup_vault_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_backup_vault_arn
    }
    /// <p>The ARN of the MPA approval team associated with this backup vault.</p>
    pub fn mpa_approval_team_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mpa_approval_team_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the MPA approval team associated with this backup vault.</p>
    pub fn set_mpa_approval_team_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mpa_approval_team_arn = input;
        self
    }
    /// <p>The ARN of the MPA approval team associated with this backup vault.</p>
    pub fn get_mpa_approval_team_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.mpa_approval_team_arn
    }
    /// <p>The ARN of the MPA session associated with this backup vault.</p>
    pub fn mpa_session_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mpa_session_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the MPA session associated with this backup vault.</p>
    pub fn set_mpa_session_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mpa_session_arn = input;
        self
    }
    /// <p>The ARN of the MPA session associated with this backup vault.</p>
    pub fn get_mpa_session_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.mpa_session_arn
    }
    /// <p>Information about the latest update to the MPA approval team association for this backup vault.</p>
    pub fn latest_mpa_approval_team_update(mut self, input: crate::types::LatestMpaApprovalTeamUpdate) -> Self {
        self.latest_mpa_approval_team_update = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the latest update to the MPA approval team association for this backup vault.</p>
    pub fn set_latest_mpa_approval_team_update(mut self, input: ::std::option::Option<crate::types::LatestMpaApprovalTeamUpdate>) -> Self {
        self.latest_mpa_approval_team_update = input;
        self
    }
    /// <p>Information about the latest update to the MPA approval team association for this backup vault.</p>
    pub fn get_latest_mpa_approval_team_update(&self) -> &::std::option::Option<crate::types::LatestMpaApprovalTeamUpdate> {
        &self.latest_mpa_approval_team_update
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeBackupVaultOutput`](crate::operation::describe_backup_vault::DescribeBackupVaultOutput).
    pub fn build(self) -> crate::operation::describe_backup_vault::DescribeBackupVaultOutput {
        crate::operation::describe_backup_vault::DescribeBackupVaultOutput {
            backup_vault_name: self.backup_vault_name,
            backup_vault_arn: self.backup_vault_arn,
            vault_type: self.vault_type,
            vault_state: self.vault_state,
            encryption_key_arn: self.encryption_key_arn,
            creation_date: self.creation_date,
            creator_request_id: self.creator_request_id,
            number_of_recovery_points: self.number_of_recovery_points.unwrap_or_default(),
            locked: self.locked,
            min_retention_days: self.min_retention_days,
            max_retention_days: self.max_retention_days,
            lock_date: self.lock_date,
            source_backup_vault_arn: self.source_backup_vault_arn,
            mpa_approval_team_arn: self.mpa_approval_team_arn,
            mpa_session_arn: self.mpa_session_arn,
            latest_mpa_approval_team_update: self.latest_mpa_approval_team_update,
            _request_id: self._request_id,
        }
    }
}
