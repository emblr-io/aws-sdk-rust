// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutRumEventsInput {
    /// <p>The ID of the app monitor that is sending this data.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for this batch of RUM event data.</p>
    pub batch_id: ::std::option::Option<::std::string::String>,
    /// <p>A structure that contains information about the app monitor that collected this telemetry information.</p>
    pub app_monitor_details: ::std::option::Option<crate::types::AppMonitorDetails>,
    /// <p>A structure that contains information about the user session that this batch of events was collected from.</p>
    pub user_details: ::std::option::Option<crate::types::UserDetails>,
    /// <p>An array of structures that contain the telemetry event data.</p>
    pub rum_events: ::std::option::Option<::std::vec::Vec<crate::types::RumEvent>>,
    /// <p>If the app monitor uses a resource-based policy that requires <code>PutRumEvents</code> requests to specify a certain alias, specify that alias here. This alias will be compared to the <code>rum:alias</code> context key in the resource-based policy. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-resource-policies.html">Using resource-based policies with CloudWatch RUM</a>.</p>
    pub alias: ::std::option::Option<::std::string::String>,
}
impl PutRumEventsInput {
    /// <p>The ID of the app monitor that is sending this data.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>A unique identifier for this batch of RUM event data.</p>
    pub fn batch_id(&self) -> ::std::option::Option<&str> {
        self.batch_id.as_deref()
    }
    /// <p>A structure that contains information about the app monitor that collected this telemetry information.</p>
    pub fn app_monitor_details(&self) -> ::std::option::Option<&crate::types::AppMonitorDetails> {
        self.app_monitor_details.as_ref()
    }
    /// <p>A structure that contains information about the user session that this batch of events was collected from.</p>
    pub fn user_details(&self) -> ::std::option::Option<&crate::types::UserDetails> {
        self.user_details.as_ref()
    }
    /// <p>An array of structures that contain the telemetry event data.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rum_events.is_none()`.
    pub fn rum_events(&self) -> &[crate::types::RumEvent] {
        self.rum_events.as_deref().unwrap_or_default()
    }
    /// <p>If the app monitor uses a resource-based policy that requires <code>PutRumEvents</code> requests to specify a certain alias, specify that alias here. This alias will be compared to the <code>rum:alias</code> context key in the resource-based policy. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-resource-policies.html">Using resource-based policies with CloudWatch RUM</a>.</p>
    pub fn alias(&self) -> ::std::option::Option<&str> {
        self.alias.as_deref()
    }
}
impl PutRumEventsInput {
    /// Creates a new builder-style object to manufacture [`PutRumEventsInput`](crate::operation::put_rum_events::PutRumEventsInput).
    pub fn builder() -> crate::operation::put_rum_events::builders::PutRumEventsInputBuilder {
        crate::operation::put_rum_events::builders::PutRumEventsInputBuilder::default()
    }
}

/// A builder for [`PutRumEventsInput`](crate::operation::put_rum_events::PutRumEventsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PutRumEventsInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) batch_id: ::std::option::Option<::std::string::String>,
    pub(crate) app_monitor_details: ::std::option::Option<crate::types::AppMonitorDetails>,
    pub(crate) user_details: ::std::option::Option<crate::types::UserDetails>,
    pub(crate) rum_events: ::std::option::Option<::std::vec::Vec<crate::types::RumEvent>>,
    pub(crate) alias: ::std::option::Option<::std::string::String>,
}
impl PutRumEventsInputBuilder {
    /// <p>The ID of the app monitor that is sending this data.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the app monitor that is sending this data.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the app monitor that is sending this data.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>A unique identifier for this batch of RUM event data.</p>
    /// This field is required.
    pub fn batch_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.batch_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for this batch of RUM event data.</p>
    pub fn set_batch_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.batch_id = input;
        self
    }
    /// <p>A unique identifier for this batch of RUM event data.</p>
    pub fn get_batch_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.batch_id
    }
    /// <p>A structure that contains information about the app monitor that collected this telemetry information.</p>
    /// This field is required.
    pub fn app_monitor_details(mut self, input: crate::types::AppMonitorDetails) -> Self {
        self.app_monitor_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that contains information about the app monitor that collected this telemetry information.</p>
    pub fn set_app_monitor_details(mut self, input: ::std::option::Option<crate::types::AppMonitorDetails>) -> Self {
        self.app_monitor_details = input;
        self
    }
    /// <p>A structure that contains information about the app monitor that collected this telemetry information.</p>
    pub fn get_app_monitor_details(&self) -> &::std::option::Option<crate::types::AppMonitorDetails> {
        &self.app_monitor_details
    }
    /// <p>A structure that contains information about the user session that this batch of events was collected from.</p>
    /// This field is required.
    pub fn user_details(mut self, input: crate::types::UserDetails) -> Self {
        self.user_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that contains information about the user session that this batch of events was collected from.</p>
    pub fn set_user_details(mut self, input: ::std::option::Option<crate::types::UserDetails>) -> Self {
        self.user_details = input;
        self
    }
    /// <p>A structure that contains information about the user session that this batch of events was collected from.</p>
    pub fn get_user_details(&self) -> &::std::option::Option<crate::types::UserDetails> {
        &self.user_details
    }
    /// Appends an item to `rum_events`.
    ///
    /// To override the contents of this collection use [`set_rum_events`](Self::set_rum_events).
    ///
    /// <p>An array of structures that contain the telemetry event data.</p>
    pub fn rum_events(mut self, input: crate::types::RumEvent) -> Self {
        let mut v = self.rum_events.unwrap_or_default();
        v.push(input);
        self.rum_events = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of structures that contain the telemetry event data.</p>
    pub fn set_rum_events(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RumEvent>>) -> Self {
        self.rum_events = input;
        self
    }
    /// <p>An array of structures that contain the telemetry event data.</p>
    pub fn get_rum_events(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RumEvent>> {
        &self.rum_events
    }
    /// <p>If the app monitor uses a resource-based policy that requires <code>PutRumEvents</code> requests to specify a certain alias, specify that alias here. This alias will be compared to the <code>rum:alias</code> context key in the resource-based policy. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-resource-policies.html">Using resource-based policies with CloudWatch RUM</a>.</p>
    pub fn alias(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.alias = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the app monitor uses a resource-based policy that requires <code>PutRumEvents</code> requests to specify a certain alias, specify that alias here. This alias will be compared to the <code>rum:alias</code> context key in the resource-based policy. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-resource-policies.html">Using resource-based policies with CloudWatch RUM</a>.</p>
    pub fn set_alias(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.alias = input;
        self
    }
    /// <p>If the app monitor uses a resource-based policy that requires <code>PutRumEvents</code> requests to specify a certain alias, specify that alias here. This alias will be compared to the <code>rum:alias</code> context key in the resource-based policy. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-resource-policies.html">Using resource-based policies with CloudWatch RUM</a>.</p>
    pub fn get_alias(&self) -> &::std::option::Option<::std::string::String> {
        &self.alias
    }
    /// Consumes the builder and constructs a [`PutRumEventsInput`](crate::operation::put_rum_events::PutRumEventsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::put_rum_events::PutRumEventsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::put_rum_events::PutRumEventsInput {
            id: self.id,
            batch_id: self.batch_id,
            app_monitor_details: self.app_monitor_details,
            user_details: self.user_details,
            rum_events: self.rum_events,
            alias: self.alias,
        })
    }
}
