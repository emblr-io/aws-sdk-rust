// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains the configuration for how an app monitor can deobfuscate stack traces.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeobfuscationConfiguration {
    /// <p>A structure that contains the configuration for how an app monitor can unminify JavaScript error stack traces using source maps.</p>
    pub java_script_source_maps: ::std::option::Option<crate::types::JavaScriptSourceMaps>,
}
impl DeobfuscationConfiguration {
    /// <p>A structure that contains the configuration for how an app monitor can unminify JavaScript error stack traces using source maps.</p>
    pub fn java_script_source_maps(&self) -> ::std::option::Option<&crate::types::JavaScriptSourceMaps> {
        self.java_script_source_maps.as_ref()
    }
}
impl DeobfuscationConfiguration {
    /// Creates a new builder-style object to manufacture [`DeobfuscationConfiguration`](crate::types::DeobfuscationConfiguration).
    pub fn builder() -> crate::types::builders::DeobfuscationConfigurationBuilder {
        crate::types::builders::DeobfuscationConfigurationBuilder::default()
    }
}

/// A builder for [`DeobfuscationConfiguration`](crate::types::DeobfuscationConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeobfuscationConfigurationBuilder {
    pub(crate) java_script_source_maps: ::std::option::Option<crate::types::JavaScriptSourceMaps>,
}
impl DeobfuscationConfigurationBuilder {
    /// <p>A structure that contains the configuration for how an app monitor can unminify JavaScript error stack traces using source maps.</p>
    pub fn java_script_source_maps(mut self, input: crate::types::JavaScriptSourceMaps) -> Self {
        self.java_script_source_maps = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that contains the configuration for how an app monitor can unminify JavaScript error stack traces using source maps.</p>
    pub fn set_java_script_source_maps(mut self, input: ::std::option::Option<crate::types::JavaScriptSourceMaps>) -> Self {
        self.java_script_source_maps = input;
        self
    }
    /// <p>A structure that contains the configuration for how an app monitor can unminify JavaScript error stack traces using source maps.</p>
    pub fn get_java_script_source_maps(&self) -> &::std::option::Option<crate::types::JavaScriptSourceMaps> {
        &self.java_script_source_maps
    }
    /// Consumes the builder and constructs a [`DeobfuscationConfiguration`](crate::types::DeobfuscationConfiguration).
    pub fn build(self) -> crate::types::DeobfuscationConfiguration {
        crate::types::DeobfuscationConfiguration {
            java_script_source_maps: self.java_script_source_maps,
        }
    }
}
