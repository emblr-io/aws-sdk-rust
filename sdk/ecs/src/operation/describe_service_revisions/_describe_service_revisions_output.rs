// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeServiceRevisionsOutput {
    /// <p>The list of service revisions described.</p>
    pub service_revisions: ::std::option::Option<::std::vec::Vec<crate::types::ServiceRevision>>,
    /// <p>Any failures associated with the call.</p>
    pub failures: ::std::option::Option<::std::vec::Vec<crate::types::Failure>>,
    _request_id: Option<String>,
}
impl DescribeServiceRevisionsOutput {
    /// <p>The list of service revisions described.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.service_revisions.is_none()`.
    pub fn service_revisions(&self) -> &[crate::types::ServiceRevision] {
        self.service_revisions.as_deref().unwrap_or_default()
    }
    /// <p>Any failures associated with the call.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.failures.is_none()`.
    pub fn failures(&self) -> &[crate::types::Failure] {
        self.failures.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for DescribeServiceRevisionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeServiceRevisionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeServiceRevisionsOutput`](crate::operation::describe_service_revisions::DescribeServiceRevisionsOutput).
    pub fn builder() -> crate::operation::describe_service_revisions::builders::DescribeServiceRevisionsOutputBuilder {
        crate::operation::describe_service_revisions::builders::DescribeServiceRevisionsOutputBuilder::default()
    }
}

/// A builder for [`DescribeServiceRevisionsOutput`](crate::operation::describe_service_revisions::DescribeServiceRevisionsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeServiceRevisionsOutputBuilder {
    pub(crate) service_revisions: ::std::option::Option<::std::vec::Vec<crate::types::ServiceRevision>>,
    pub(crate) failures: ::std::option::Option<::std::vec::Vec<crate::types::Failure>>,
    _request_id: Option<String>,
}
impl DescribeServiceRevisionsOutputBuilder {
    /// Appends an item to `service_revisions`.
    ///
    /// To override the contents of this collection use [`set_service_revisions`](Self::set_service_revisions).
    ///
    /// <p>The list of service revisions described.</p>
    pub fn service_revisions(mut self, input: crate::types::ServiceRevision) -> Self {
        let mut v = self.service_revisions.unwrap_or_default();
        v.push(input);
        self.service_revisions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of service revisions described.</p>
    pub fn set_service_revisions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ServiceRevision>>) -> Self {
        self.service_revisions = input;
        self
    }
    /// <p>The list of service revisions described.</p>
    pub fn get_service_revisions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ServiceRevision>> {
        &self.service_revisions
    }
    /// Appends an item to `failures`.
    ///
    /// To override the contents of this collection use [`set_failures`](Self::set_failures).
    ///
    /// <p>Any failures associated with the call.</p>
    pub fn failures(mut self, input: crate::types::Failure) -> Self {
        let mut v = self.failures.unwrap_or_default();
        v.push(input);
        self.failures = ::std::option::Option::Some(v);
        self
    }
    /// <p>Any failures associated with the call.</p>
    pub fn set_failures(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Failure>>) -> Self {
        self.failures = input;
        self
    }
    /// <p>Any failures associated with the call.</p>
    pub fn get_failures(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Failure>> {
        &self.failures
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeServiceRevisionsOutput`](crate::operation::describe_service_revisions::DescribeServiceRevisionsOutput).
    pub fn build(self) -> crate::operation::describe_service_revisions::DescribeServiceRevisionsOutput {
        crate::operation::describe_service_revisions::DescribeServiceRevisionsOutput {
            service_revisions: self.service_revisions,
            failures: self.failures,
            _request_id: self._request_id,
        }
    }
}
