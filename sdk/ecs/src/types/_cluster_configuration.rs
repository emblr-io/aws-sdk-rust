// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The execute command and managed storage configuration for the cluster.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClusterConfiguration {
    /// <p>The details of the execute command configuration.</p>
    pub execute_command_configuration: ::std::option::Option<crate::types::ExecuteCommandConfiguration>,
    /// <p>The details of the managed storage configuration.</p>
    pub managed_storage_configuration: ::std::option::Option<crate::types::ManagedStorageConfiguration>,
}
impl ClusterConfiguration {
    /// <p>The details of the execute command configuration.</p>
    pub fn execute_command_configuration(&self) -> ::std::option::Option<&crate::types::ExecuteCommandConfiguration> {
        self.execute_command_configuration.as_ref()
    }
    /// <p>The details of the managed storage configuration.</p>
    pub fn managed_storage_configuration(&self) -> ::std::option::Option<&crate::types::ManagedStorageConfiguration> {
        self.managed_storage_configuration.as_ref()
    }
}
impl ClusterConfiguration {
    /// Creates a new builder-style object to manufacture [`ClusterConfiguration`](crate::types::ClusterConfiguration).
    pub fn builder() -> crate::types::builders::ClusterConfigurationBuilder {
        crate::types::builders::ClusterConfigurationBuilder::default()
    }
}

/// A builder for [`ClusterConfiguration`](crate::types::ClusterConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ClusterConfigurationBuilder {
    pub(crate) execute_command_configuration: ::std::option::Option<crate::types::ExecuteCommandConfiguration>,
    pub(crate) managed_storage_configuration: ::std::option::Option<crate::types::ManagedStorageConfiguration>,
}
impl ClusterConfigurationBuilder {
    /// <p>The details of the execute command configuration.</p>
    pub fn execute_command_configuration(mut self, input: crate::types::ExecuteCommandConfiguration) -> Self {
        self.execute_command_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the execute command configuration.</p>
    pub fn set_execute_command_configuration(mut self, input: ::std::option::Option<crate::types::ExecuteCommandConfiguration>) -> Self {
        self.execute_command_configuration = input;
        self
    }
    /// <p>The details of the execute command configuration.</p>
    pub fn get_execute_command_configuration(&self) -> &::std::option::Option<crate::types::ExecuteCommandConfiguration> {
        &self.execute_command_configuration
    }
    /// <p>The details of the managed storage configuration.</p>
    pub fn managed_storage_configuration(mut self, input: crate::types::ManagedStorageConfiguration) -> Self {
        self.managed_storage_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the managed storage configuration.</p>
    pub fn set_managed_storage_configuration(mut self, input: ::std::option::Option<crate::types::ManagedStorageConfiguration>) -> Self {
        self.managed_storage_configuration = input;
        self
    }
    /// <p>The details of the managed storage configuration.</p>
    pub fn get_managed_storage_configuration(&self) -> &::std::option::Option<crate::types::ManagedStorageConfiguration> {
        &self.managed_storage_configuration
    }
    /// Consumes the builder and constructs a [`ClusterConfiguration`](crate::types::ClusterConfiguration).
    pub fn build(self) -> crate::types::ClusterConfiguration {
        crate::types::ClusterConfiguration {
            execute_command_configuration: self.execute_command_configuration,
            managed_storage_configuration: self.managed_storage_configuration,
        }
    }
}
