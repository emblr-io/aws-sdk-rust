// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>You can enable a restart policy for each container defined in your task definition, to overcome transient failures faster and maintain task availability. When you enable a restart policy for a container, Amazon ECS can restart the container if it exits, without needing to replace the task. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-restart-policy.html">Restart individual containers in Amazon ECS tasks with container restart policies</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContainerRestartPolicy {
    /// <p>Specifies whether a restart policy is enabled for the container.</p>
    pub enabled: bool,
    /// <p>A list of exit codes that Amazon ECS will ignore and not attempt a restart on. You can specify a maximum of 50 container exit codes. By default, Amazon ECS does not ignore any exit codes.</p>
    pub ignored_exit_codes: ::std::option::Option<::std::vec::Vec<i32>>,
    /// <p>A period of time (in seconds) that the container must run for before a restart can be attempted. A container can be restarted only once every <code>restartAttemptPeriod</code> seconds. If a container isn't able to run for this time period and exits early, it will not be restarted. You can set a minimum <code>restartAttemptPeriod</code> of 60 seconds and a maximum <code>restartAttemptPeriod</code> of 1800 seconds. By default, a container must run for 300 seconds before it can be restarted.</p>
    pub restart_attempt_period: ::std::option::Option<i32>,
}
impl ContainerRestartPolicy {
    /// <p>Specifies whether a restart policy is enabled for the container.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>A list of exit codes that Amazon ECS will ignore and not attempt a restart on. You can specify a maximum of 50 container exit codes. By default, Amazon ECS does not ignore any exit codes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ignored_exit_codes.is_none()`.
    pub fn ignored_exit_codes(&self) -> &[i32] {
        self.ignored_exit_codes.as_deref().unwrap_or_default()
    }
    /// <p>A period of time (in seconds) that the container must run for before a restart can be attempted. A container can be restarted only once every <code>restartAttemptPeriod</code> seconds. If a container isn't able to run for this time period and exits early, it will not be restarted. You can set a minimum <code>restartAttemptPeriod</code> of 60 seconds and a maximum <code>restartAttemptPeriod</code> of 1800 seconds. By default, a container must run for 300 seconds before it can be restarted.</p>
    pub fn restart_attempt_period(&self) -> ::std::option::Option<i32> {
        self.restart_attempt_period
    }
}
impl ContainerRestartPolicy {
    /// Creates a new builder-style object to manufacture [`ContainerRestartPolicy`](crate::types::ContainerRestartPolicy).
    pub fn builder() -> crate::types::builders::ContainerRestartPolicyBuilder {
        crate::types::builders::ContainerRestartPolicyBuilder::default()
    }
}

/// A builder for [`ContainerRestartPolicy`](crate::types::ContainerRestartPolicy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContainerRestartPolicyBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) ignored_exit_codes: ::std::option::Option<::std::vec::Vec<i32>>,
    pub(crate) restart_attempt_period: ::std::option::Option<i32>,
}
impl ContainerRestartPolicyBuilder {
    /// <p>Specifies whether a restart policy is enabled for the container.</p>
    /// This field is required.
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether a restart policy is enabled for the container.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Specifies whether a restart policy is enabled for the container.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// Appends an item to `ignored_exit_codes`.
    ///
    /// To override the contents of this collection use [`set_ignored_exit_codes`](Self::set_ignored_exit_codes).
    ///
    /// <p>A list of exit codes that Amazon ECS will ignore and not attempt a restart on. You can specify a maximum of 50 container exit codes. By default, Amazon ECS does not ignore any exit codes.</p>
    pub fn ignored_exit_codes(mut self, input: i32) -> Self {
        let mut v = self.ignored_exit_codes.unwrap_or_default();
        v.push(input);
        self.ignored_exit_codes = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of exit codes that Amazon ECS will ignore and not attempt a restart on. You can specify a maximum of 50 container exit codes. By default, Amazon ECS does not ignore any exit codes.</p>
    pub fn set_ignored_exit_codes(mut self, input: ::std::option::Option<::std::vec::Vec<i32>>) -> Self {
        self.ignored_exit_codes = input;
        self
    }
    /// <p>A list of exit codes that Amazon ECS will ignore and not attempt a restart on. You can specify a maximum of 50 container exit codes. By default, Amazon ECS does not ignore any exit codes.</p>
    pub fn get_ignored_exit_codes(&self) -> &::std::option::Option<::std::vec::Vec<i32>> {
        &self.ignored_exit_codes
    }
    /// <p>A period of time (in seconds) that the container must run for before a restart can be attempted. A container can be restarted only once every <code>restartAttemptPeriod</code> seconds. If a container isn't able to run for this time period and exits early, it will not be restarted. You can set a minimum <code>restartAttemptPeriod</code> of 60 seconds and a maximum <code>restartAttemptPeriod</code> of 1800 seconds. By default, a container must run for 300 seconds before it can be restarted.</p>
    pub fn restart_attempt_period(mut self, input: i32) -> Self {
        self.restart_attempt_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>A period of time (in seconds) that the container must run for before a restart can be attempted. A container can be restarted only once every <code>restartAttemptPeriod</code> seconds. If a container isn't able to run for this time period and exits early, it will not be restarted. You can set a minimum <code>restartAttemptPeriod</code> of 60 seconds and a maximum <code>restartAttemptPeriod</code> of 1800 seconds. By default, a container must run for 300 seconds before it can be restarted.</p>
    pub fn set_restart_attempt_period(mut self, input: ::std::option::Option<i32>) -> Self {
        self.restart_attempt_period = input;
        self
    }
    /// <p>A period of time (in seconds) that the container must run for before a restart can be attempted. A container can be restarted only once every <code>restartAttemptPeriod</code> seconds. If a container isn't able to run for this time period and exits early, it will not be restarted. You can set a minimum <code>restartAttemptPeriod</code> of 60 seconds and a maximum <code>restartAttemptPeriod</code> of 1800 seconds. By default, a container must run for 300 seconds before it can be restarted.</p>
    pub fn get_restart_attempt_period(&self) -> &::std::option::Option<i32> {
        &self.restart_attempt_period
    }
    /// Consumes the builder and constructs a [`ContainerRestartPolicy`](crate::types::ContainerRestartPolicy).
    /// This method will fail if any of the following fields are not set:
    /// - [`enabled`](crate::types::builders::ContainerRestartPolicyBuilder::enabled)
    pub fn build(self) -> ::std::result::Result<crate::types::ContainerRestartPolicy, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ContainerRestartPolicy {
            enabled: self.enabled.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "enabled",
                    "enabled was not specified but it is required when building ContainerRestartPolicy",
                )
            })?,
            ignored_exit_codes: self.ignored_exit_codes,
            restart_attempt_period: self.restart_attempt_period,
        })
    }
}
