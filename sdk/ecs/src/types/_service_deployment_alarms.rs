// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The CloudWatch alarms used to determine a service deployment failed.</p>
/// <p>Amazon ECS considers the service deployment as failed when any of the alarms move to the <code>ALARM</code> state. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-alarm-failure.html">How CloudWatch alarms detect Amazon ECS deployment failures</a> in the Amazon ECS Developer Guide.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceDeploymentAlarms {
    /// <p>The status of the alarms check. Amazon ECS is not using alarms for service deployment failures when the status is <code>DISABLED</code>.</p>
    pub status: ::std::option::Option<crate::types::ServiceDeploymentRollbackMonitorsStatus>,
    /// <p>The name of the CloudWatch alarms that determine when a service deployment failed. A "," separates the alarms.</p>
    pub alarm_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>One or more CloudWatch alarm names that have been triggered during the service deployment. A "," separates the alarm names.</p>
    pub triggered_alarm_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ServiceDeploymentAlarms {
    /// <p>The status of the alarms check. Amazon ECS is not using alarms for service deployment failures when the status is <code>DISABLED</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ServiceDeploymentRollbackMonitorsStatus> {
        self.status.as_ref()
    }
    /// <p>The name of the CloudWatch alarms that determine when a service deployment failed. A "," separates the alarms.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.alarm_names.is_none()`.
    pub fn alarm_names(&self) -> &[::std::string::String] {
        self.alarm_names.as_deref().unwrap_or_default()
    }
    /// <p>One or more CloudWatch alarm names that have been triggered during the service deployment. A "," separates the alarm names.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.triggered_alarm_names.is_none()`.
    pub fn triggered_alarm_names(&self) -> &[::std::string::String] {
        self.triggered_alarm_names.as_deref().unwrap_or_default()
    }
}
impl ServiceDeploymentAlarms {
    /// Creates a new builder-style object to manufacture [`ServiceDeploymentAlarms`](crate::types::ServiceDeploymentAlarms).
    pub fn builder() -> crate::types::builders::ServiceDeploymentAlarmsBuilder {
        crate::types::builders::ServiceDeploymentAlarmsBuilder::default()
    }
}

/// A builder for [`ServiceDeploymentAlarms`](crate::types::ServiceDeploymentAlarms).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceDeploymentAlarmsBuilder {
    pub(crate) status: ::std::option::Option<crate::types::ServiceDeploymentRollbackMonitorsStatus>,
    pub(crate) alarm_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) triggered_alarm_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ServiceDeploymentAlarmsBuilder {
    /// <p>The status of the alarms check. Amazon ECS is not using alarms for service deployment failures when the status is <code>DISABLED</code>.</p>
    pub fn status(mut self, input: crate::types::ServiceDeploymentRollbackMonitorsStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the alarms check. Amazon ECS is not using alarms for service deployment failures when the status is <code>DISABLED</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ServiceDeploymentRollbackMonitorsStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the alarms check. Amazon ECS is not using alarms for service deployment failures when the status is <code>DISABLED</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ServiceDeploymentRollbackMonitorsStatus> {
        &self.status
    }
    /// Appends an item to `alarm_names`.
    ///
    /// To override the contents of this collection use [`set_alarm_names`](Self::set_alarm_names).
    ///
    /// <p>The name of the CloudWatch alarms that determine when a service deployment failed. A "," separates the alarms.</p>
    pub fn alarm_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.alarm_names.unwrap_or_default();
        v.push(input.into());
        self.alarm_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>The name of the CloudWatch alarms that determine when a service deployment failed. A "," separates the alarms.</p>
    pub fn set_alarm_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.alarm_names = input;
        self
    }
    /// <p>The name of the CloudWatch alarms that determine when a service deployment failed. A "," separates the alarms.</p>
    pub fn get_alarm_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.alarm_names
    }
    /// Appends an item to `triggered_alarm_names`.
    ///
    /// To override the contents of this collection use [`set_triggered_alarm_names`](Self::set_triggered_alarm_names).
    ///
    /// <p>One or more CloudWatch alarm names that have been triggered during the service deployment. A "," separates the alarm names.</p>
    pub fn triggered_alarm_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.triggered_alarm_names.unwrap_or_default();
        v.push(input.into());
        self.triggered_alarm_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more CloudWatch alarm names that have been triggered during the service deployment. A "," separates the alarm names.</p>
    pub fn set_triggered_alarm_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.triggered_alarm_names = input;
        self
    }
    /// <p>One or more CloudWatch alarm names that have been triggered during the service deployment. A "," separates the alarm names.</p>
    pub fn get_triggered_alarm_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.triggered_alarm_names
    }
    /// Consumes the builder and constructs a [`ServiceDeploymentAlarms`](crate::types::ServiceDeploymentAlarms).
    pub fn build(self) -> crate::types::ServiceDeploymentAlarms {
        crate::types::ServiceDeploymentAlarms {
            status: self.status,
            alarm_names: self.alarm_names,
            triggered_alarm_names: self.triggered_alarm_names,
        }
    }
}
