// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the service deployment.</p>
/// <p>Service deployments provide a comprehensive view of your deployments. For information about service deployments, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-deployment.html">View service history using Amazon ECS service deployments</a> in the <i> <i>Amazon Elastic Container Service Developer Guide</i> </i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceDeployment {
    /// <p>The ARN of the service deployment.</p>
    pub service_deployment_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the service for this service deployment.</p>
    pub service_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the cluster that hosts the service.</p>
    pub cluster_arn: ::std::option::Option<::std::string::String>,
    /// <p>The time the service deployment was created. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time the service deployment statred. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time the service deployment finished. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub finished_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time the service deployment stopped. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    /// <p>The service deployment stops when any of the following actions happen:</p>
    /// <ul>
    /// <li>
    /// <p>A user manually stops the deployment</p></li>
    /// <li>
    /// <p>The rollback option is not in use for the failure detection mechanism (the circuit breaker or alarm-based) and the service fails.</p></li>
    /// </ul>
    pub stopped_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time that the service deployment was last updated. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The currently deployed workload configuration.</p>
    pub source_service_revisions: ::std::option::Option<::std::vec::Vec<crate::types::ServiceRevisionSummary>>,
    /// <p>The workload configuration being deployed.</p>
    pub target_service_revision: ::std::option::Option<crate::types::ServiceRevisionSummary>,
    /// <p>The service deployment state.</p>
    pub status: ::std::option::Option<crate::types::ServiceDeploymentStatus>,
    /// <p>Information about why the service deployment is in the current status. For example, the circuit breaker detected a failure.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>Optional deployment parameters that control how many tasks run during a deployment and the ordering of stopping and starting tasks.</p>
    pub deployment_configuration: ::std::option::Option<crate::types::DeploymentConfiguration>,
    /// <p>The rollback options the service deployment uses when the deployment fails.</p>
    pub rollback: ::std::option::Option<crate::types::Rollback>,
    /// <p>The circuit breaker configuration that determines a service deployment failed.</p>
    pub deployment_circuit_breaker: ::std::option::Option<crate::types::ServiceDeploymentCircuitBreaker>,
    /// <p>The CloudWatch alarms that determine when a service deployment fails.</p>
    pub alarms: ::std::option::Option<crate::types::ServiceDeploymentAlarms>,
}
impl ServiceDeployment {
    /// <p>The ARN of the service deployment.</p>
    pub fn service_deployment_arn(&self) -> ::std::option::Option<&str> {
        self.service_deployment_arn.as_deref()
    }
    /// <p>The ARN of the service for this service deployment.</p>
    pub fn service_arn(&self) -> ::std::option::Option<&str> {
        self.service_arn.as_deref()
    }
    /// <p>The ARN of the cluster that hosts the service.</p>
    pub fn cluster_arn(&self) -> ::std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The time the service deployment was created. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The time the service deployment statred. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn started_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.started_at.as_ref()
    }
    /// <p>The time the service deployment finished. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn finished_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.finished_at.as_ref()
    }
    /// <p>The time the service deployment stopped. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    /// <p>The service deployment stops when any of the following actions happen:</p>
    /// <ul>
    /// <li>
    /// <p>A user manually stops the deployment</p></li>
    /// <li>
    /// <p>The rollback option is not in use for the failure detection mechanism (the circuit breaker or alarm-based) and the service fails.</p></li>
    /// </ul>
    pub fn stopped_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.stopped_at.as_ref()
    }
    /// <p>The time that the service deployment was last updated. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The currently deployed workload configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.source_service_revisions.is_none()`.
    pub fn source_service_revisions(&self) -> &[crate::types::ServiceRevisionSummary] {
        self.source_service_revisions.as_deref().unwrap_or_default()
    }
    /// <p>The workload configuration being deployed.</p>
    pub fn target_service_revision(&self) -> ::std::option::Option<&crate::types::ServiceRevisionSummary> {
        self.target_service_revision.as_ref()
    }
    /// <p>The service deployment state.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ServiceDeploymentStatus> {
        self.status.as_ref()
    }
    /// <p>Information about why the service deployment is in the current status. For example, the circuit breaker detected a failure.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>Optional deployment parameters that control how many tasks run during a deployment and the ordering of stopping and starting tasks.</p>
    pub fn deployment_configuration(&self) -> ::std::option::Option<&crate::types::DeploymentConfiguration> {
        self.deployment_configuration.as_ref()
    }
    /// <p>The rollback options the service deployment uses when the deployment fails.</p>
    pub fn rollback(&self) -> ::std::option::Option<&crate::types::Rollback> {
        self.rollback.as_ref()
    }
    /// <p>The circuit breaker configuration that determines a service deployment failed.</p>
    pub fn deployment_circuit_breaker(&self) -> ::std::option::Option<&crate::types::ServiceDeploymentCircuitBreaker> {
        self.deployment_circuit_breaker.as_ref()
    }
    /// <p>The CloudWatch alarms that determine when a service deployment fails.</p>
    pub fn alarms(&self) -> ::std::option::Option<&crate::types::ServiceDeploymentAlarms> {
        self.alarms.as_ref()
    }
}
impl ServiceDeployment {
    /// Creates a new builder-style object to manufacture [`ServiceDeployment`](crate::types::ServiceDeployment).
    pub fn builder() -> crate::types::builders::ServiceDeploymentBuilder {
        crate::types::builders::ServiceDeploymentBuilder::default()
    }
}

/// A builder for [`ServiceDeployment`](crate::types::ServiceDeployment).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceDeploymentBuilder {
    pub(crate) service_deployment_arn: ::std::option::Option<::std::string::String>,
    pub(crate) service_arn: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) finished_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) stopped_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) source_service_revisions: ::std::option::Option<::std::vec::Vec<crate::types::ServiceRevisionSummary>>,
    pub(crate) target_service_revision: ::std::option::Option<crate::types::ServiceRevisionSummary>,
    pub(crate) status: ::std::option::Option<crate::types::ServiceDeploymentStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) deployment_configuration: ::std::option::Option<crate::types::DeploymentConfiguration>,
    pub(crate) rollback: ::std::option::Option<crate::types::Rollback>,
    pub(crate) deployment_circuit_breaker: ::std::option::Option<crate::types::ServiceDeploymentCircuitBreaker>,
    pub(crate) alarms: ::std::option::Option<crate::types::ServiceDeploymentAlarms>,
}
impl ServiceDeploymentBuilder {
    /// <p>The ARN of the service deployment.</p>
    pub fn service_deployment_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_deployment_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the service deployment.</p>
    pub fn set_service_deployment_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_deployment_arn = input;
        self
    }
    /// <p>The ARN of the service deployment.</p>
    pub fn get_service_deployment_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_deployment_arn
    }
    /// <p>The ARN of the service for this service deployment.</p>
    pub fn service_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the service for this service deployment.</p>
    pub fn set_service_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_arn = input;
        self
    }
    /// <p>The ARN of the service for this service deployment.</p>
    pub fn get_service_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_arn
    }
    /// <p>The ARN of the cluster that hosts the service.</p>
    pub fn cluster_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the cluster that hosts the service.</p>
    pub fn set_cluster_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_arn = input;
        self
    }
    /// <p>The ARN of the cluster that hosts the service.</p>
    pub fn get_cluster_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_arn
    }
    /// <p>The time the service deployment was created. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the service deployment was created. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time the service deployment was created. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The time the service deployment statred. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn started_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the service deployment statred. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn set_started_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The time the service deployment statred. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn get_started_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_at
    }
    /// <p>The time the service deployment finished. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn finished_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.finished_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the service deployment finished. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn set_finished_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.finished_at = input;
        self
    }
    /// <p>The time the service deployment finished. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn get_finished_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.finished_at
    }
    /// <p>The time the service deployment stopped. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    /// <p>The service deployment stops when any of the following actions happen:</p>
    /// <ul>
    /// <li>
    /// <p>A user manually stops the deployment</p></li>
    /// <li>
    /// <p>The rollback option is not in use for the failure detection mechanism (the circuit breaker or alarm-based) and the service fails.</p></li>
    /// </ul>
    pub fn stopped_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.stopped_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the service deployment stopped. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    /// <p>The service deployment stops when any of the following actions happen:</p>
    /// <ul>
    /// <li>
    /// <p>A user manually stops the deployment</p></li>
    /// <li>
    /// <p>The rollback option is not in use for the failure detection mechanism (the circuit breaker or alarm-based) and the service fails.</p></li>
    /// </ul>
    pub fn set_stopped_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.stopped_at = input;
        self
    }
    /// <p>The time the service deployment stopped. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    /// <p>The service deployment stops when any of the following actions happen:</p>
    /// <ul>
    /// <li>
    /// <p>A user manually stops the deployment</p></li>
    /// <li>
    /// <p>The rollback option is not in use for the failure detection mechanism (the circuit breaker or alarm-based) and the service fails.</p></li>
    /// </ul>
    pub fn get_stopped_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.stopped_at
    }
    /// <p>The time that the service deployment was last updated. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the service deployment was last updated. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The time that the service deployment was last updated. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Appends an item to `source_service_revisions`.
    ///
    /// To override the contents of this collection use [`set_source_service_revisions`](Self::set_source_service_revisions).
    ///
    /// <p>The currently deployed workload configuration.</p>
    pub fn source_service_revisions(mut self, input: crate::types::ServiceRevisionSummary) -> Self {
        let mut v = self.source_service_revisions.unwrap_or_default();
        v.push(input);
        self.source_service_revisions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The currently deployed workload configuration.</p>
    pub fn set_source_service_revisions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ServiceRevisionSummary>>) -> Self {
        self.source_service_revisions = input;
        self
    }
    /// <p>The currently deployed workload configuration.</p>
    pub fn get_source_service_revisions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ServiceRevisionSummary>> {
        &self.source_service_revisions
    }
    /// <p>The workload configuration being deployed.</p>
    pub fn target_service_revision(mut self, input: crate::types::ServiceRevisionSummary) -> Self {
        self.target_service_revision = ::std::option::Option::Some(input);
        self
    }
    /// <p>The workload configuration being deployed.</p>
    pub fn set_target_service_revision(mut self, input: ::std::option::Option<crate::types::ServiceRevisionSummary>) -> Self {
        self.target_service_revision = input;
        self
    }
    /// <p>The workload configuration being deployed.</p>
    pub fn get_target_service_revision(&self) -> &::std::option::Option<crate::types::ServiceRevisionSummary> {
        &self.target_service_revision
    }
    /// <p>The service deployment state.</p>
    pub fn status(mut self, input: crate::types::ServiceDeploymentStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The service deployment state.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ServiceDeploymentStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The service deployment state.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ServiceDeploymentStatus> {
        &self.status
    }
    /// <p>Information about why the service deployment is in the current status. For example, the circuit breaker detected a failure.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Information about why the service deployment is in the current status. For example, the circuit breaker detected a failure.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>Information about why the service deployment is in the current status. For example, the circuit breaker detected a failure.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>Optional deployment parameters that control how many tasks run during a deployment and the ordering of stopping and starting tasks.</p>
    pub fn deployment_configuration(mut self, input: crate::types::DeploymentConfiguration) -> Self {
        self.deployment_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Optional deployment parameters that control how many tasks run during a deployment and the ordering of stopping and starting tasks.</p>
    pub fn set_deployment_configuration(mut self, input: ::std::option::Option<crate::types::DeploymentConfiguration>) -> Self {
        self.deployment_configuration = input;
        self
    }
    /// <p>Optional deployment parameters that control how many tasks run during a deployment and the ordering of stopping and starting tasks.</p>
    pub fn get_deployment_configuration(&self) -> &::std::option::Option<crate::types::DeploymentConfiguration> {
        &self.deployment_configuration
    }
    /// <p>The rollback options the service deployment uses when the deployment fails.</p>
    pub fn rollback(mut self, input: crate::types::Rollback) -> Self {
        self.rollback = ::std::option::Option::Some(input);
        self
    }
    /// <p>The rollback options the service deployment uses when the deployment fails.</p>
    pub fn set_rollback(mut self, input: ::std::option::Option<crate::types::Rollback>) -> Self {
        self.rollback = input;
        self
    }
    /// <p>The rollback options the service deployment uses when the deployment fails.</p>
    pub fn get_rollback(&self) -> &::std::option::Option<crate::types::Rollback> {
        &self.rollback
    }
    /// <p>The circuit breaker configuration that determines a service deployment failed.</p>
    pub fn deployment_circuit_breaker(mut self, input: crate::types::ServiceDeploymentCircuitBreaker) -> Self {
        self.deployment_circuit_breaker = ::std::option::Option::Some(input);
        self
    }
    /// <p>The circuit breaker configuration that determines a service deployment failed.</p>
    pub fn set_deployment_circuit_breaker(mut self, input: ::std::option::Option<crate::types::ServiceDeploymentCircuitBreaker>) -> Self {
        self.deployment_circuit_breaker = input;
        self
    }
    /// <p>The circuit breaker configuration that determines a service deployment failed.</p>
    pub fn get_deployment_circuit_breaker(&self) -> &::std::option::Option<crate::types::ServiceDeploymentCircuitBreaker> {
        &self.deployment_circuit_breaker
    }
    /// <p>The CloudWatch alarms that determine when a service deployment fails.</p>
    pub fn alarms(mut self, input: crate::types::ServiceDeploymentAlarms) -> Self {
        self.alarms = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CloudWatch alarms that determine when a service deployment fails.</p>
    pub fn set_alarms(mut self, input: ::std::option::Option<crate::types::ServiceDeploymentAlarms>) -> Self {
        self.alarms = input;
        self
    }
    /// <p>The CloudWatch alarms that determine when a service deployment fails.</p>
    pub fn get_alarms(&self) -> &::std::option::Option<crate::types::ServiceDeploymentAlarms> {
        &self.alarms
    }
    /// Consumes the builder and constructs a [`ServiceDeployment`](crate::types::ServiceDeployment).
    pub fn build(self) -> crate::types::ServiceDeployment {
        crate::types::ServiceDeployment {
            service_deployment_arn: self.service_deployment_arn,
            service_arn: self.service_arn,
            cluster_arn: self.cluster_arn,
            created_at: self.created_at,
            started_at: self.started_at,
            finished_at: self.finished_at,
            stopped_at: self.stopped_at,
            updated_at: self.updated_at,
            source_service_revisions: self.source_service_revisions,
            target_service_revision: self.target_service_revision,
            status: self.status,
            status_reason: self.status_reason,
            deployment_configuration: self.deployment_configuration,
            rollback: self.rollback,
            deployment_circuit_breaker: self.deployment_circuit_breaker,
            alarms: self.alarms,
        }
    }
}
