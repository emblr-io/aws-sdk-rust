// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The service deployment properties that are retured when you call <code>ListServiceDeployments</code>.</p>
/// <p>This provides a high-level overview of the service deployment.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceDeploymentBrief {
    /// <p>The ARN of the service deployment.</p>
    pub service_deployment_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the service for this service deployment.</p>
    pub service_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the cluster that hosts the service.</p>
    pub cluster_arn: ::std::option::Option<::std::string::String>,
    /// <p>The time that the service deployment statred. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time that the service deployment was created. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time that the service deployment completed. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub finished_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The ARN of the service revision being deplyed.</p>
    pub target_service_revision_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the service deployment</p>
    pub status: ::std::option::Option<crate::types::ServiceDeploymentStatus>,
    /// <p>Information about why the service deployment is in the current status. For example, the circuit breaker detected a deployment failure.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
}
impl ServiceDeploymentBrief {
    /// <p>The ARN of the service deployment.</p>
    pub fn service_deployment_arn(&self) -> ::std::option::Option<&str> {
        self.service_deployment_arn.as_deref()
    }
    /// <p>The ARN of the service for this service deployment.</p>
    pub fn service_arn(&self) -> ::std::option::Option<&str> {
        self.service_arn.as_deref()
    }
    /// <p>The ARN of the cluster that hosts the service.</p>
    pub fn cluster_arn(&self) -> ::std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The time that the service deployment statred. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn started_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.started_at.as_ref()
    }
    /// <p>The time that the service deployment was created. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The time that the service deployment completed. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn finished_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.finished_at.as_ref()
    }
    /// <p>The ARN of the service revision being deplyed.</p>
    pub fn target_service_revision_arn(&self) -> ::std::option::Option<&str> {
        self.target_service_revision_arn.as_deref()
    }
    /// <p>The status of the service deployment</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ServiceDeploymentStatus> {
        self.status.as_ref()
    }
    /// <p>Information about why the service deployment is in the current status. For example, the circuit breaker detected a deployment failure.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
}
impl ServiceDeploymentBrief {
    /// Creates a new builder-style object to manufacture [`ServiceDeploymentBrief`](crate::types::ServiceDeploymentBrief).
    pub fn builder() -> crate::types::builders::ServiceDeploymentBriefBuilder {
        crate::types::builders::ServiceDeploymentBriefBuilder::default()
    }
}

/// A builder for [`ServiceDeploymentBrief`](crate::types::ServiceDeploymentBrief).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceDeploymentBriefBuilder {
    pub(crate) service_deployment_arn: ::std::option::Option<::std::string::String>,
    pub(crate) service_arn: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_arn: ::std::option::Option<::std::string::String>,
    pub(crate) started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) finished_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) target_service_revision_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ServiceDeploymentStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
}
impl ServiceDeploymentBriefBuilder {
    /// <p>The ARN of the service deployment.</p>
    pub fn service_deployment_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_deployment_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the service deployment.</p>
    pub fn set_service_deployment_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_deployment_arn = input;
        self
    }
    /// <p>The ARN of the service deployment.</p>
    pub fn get_service_deployment_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_deployment_arn
    }
    /// <p>The ARN of the service for this service deployment.</p>
    pub fn service_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the service for this service deployment.</p>
    pub fn set_service_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_arn = input;
        self
    }
    /// <p>The ARN of the service for this service deployment.</p>
    pub fn get_service_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_arn
    }
    /// <p>The ARN of the cluster that hosts the service.</p>
    pub fn cluster_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the cluster that hosts the service.</p>
    pub fn set_cluster_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_arn = input;
        self
    }
    /// <p>The ARN of the cluster that hosts the service.</p>
    pub fn get_cluster_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_arn
    }
    /// <p>The time that the service deployment statred. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn started_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the service deployment statred. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn set_started_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The time that the service deployment statred. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn get_started_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_at
    }
    /// <p>The time that the service deployment was created. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the service deployment was created. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time that the service deployment was created. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The time that the service deployment completed. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn finished_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.finished_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the service deployment completed. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn set_finished_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.finished_at = input;
        self
    }
    /// <p>The time that the service deployment completed. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
    pub fn get_finished_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.finished_at
    }
    /// <p>The ARN of the service revision being deplyed.</p>
    pub fn target_service_revision_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_service_revision_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the service revision being deplyed.</p>
    pub fn set_target_service_revision_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_service_revision_arn = input;
        self
    }
    /// <p>The ARN of the service revision being deplyed.</p>
    pub fn get_target_service_revision_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_service_revision_arn
    }
    /// <p>The status of the service deployment</p>
    pub fn status(mut self, input: crate::types::ServiceDeploymentStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the service deployment</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ServiceDeploymentStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the service deployment</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ServiceDeploymentStatus> {
        &self.status
    }
    /// <p>Information about why the service deployment is in the current status. For example, the circuit breaker detected a deployment failure.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Information about why the service deployment is in the current status. For example, the circuit breaker detected a deployment failure.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>Information about why the service deployment is in the current status. For example, the circuit breaker detected a deployment failure.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// Consumes the builder and constructs a [`ServiceDeploymentBrief`](crate::types::ServiceDeploymentBrief).
    pub fn build(self) -> crate::types::ServiceDeploymentBrief {
        crate::types::ServiceDeploymentBrief {
            service_deployment_arn: self.service_deployment_arn,
            service_arn: self.service_arn,
            cluster_arn: self.cluster_arn,
            started_at: self.started_at,
            created_at: self.created_at,
            finished_at: self.finished_at,
            target_service_revision_arn: self.target_service_revision_arn,
            status: self.status,
            status_reason: self.status_reason,
        }
    }
}
