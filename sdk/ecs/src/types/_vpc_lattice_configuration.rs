// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The VPC Lattice configuration for your service that holds the information for the target group(s) Amazon ECS tasks will be registered to.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VpcLatticeConfiguration {
    /// <p>The ARN of the IAM role to associate with this VPC Lattice configuration. This is the Amazon ECS  infrastructure IAM role that is used to manage your VPC Lattice infrastructure.</p>
    pub role_arn: ::std::string::String,
    /// <p>The full Amazon Resource Name (ARN) of the target group or groups associated with the VPC Lattice configuration that the Amazon ECS tasks will be registered to.</p>
    pub target_group_arn: ::std::string::String,
    /// <p>The name of the port mapping to register in the VPC Lattice target group. This is the name of the <code>portMapping</code> you defined in your task definition.</p>
    pub port_name: ::std::string::String,
}
impl VpcLatticeConfiguration {
    /// <p>The ARN of the IAM role to associate with this VPC Lattice configuration. This is the Amazon ECS  infrastructure IAM role that is used to manage your VPC Lattice infrastructure.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>The full Amazon Resource Name (ARN) of the target group or groups associated with the VPC Lattice configuration that the Amazon ECS tasks will be registered to.</p>
    pub fn target_group_arn(&self) -> &str {
        use std::ops::Deref;
        self.target_group_arn.deref()
    }
    /// <p>The name of the port mapping to register in the VPC Lattice target group. This is the name of the <code>portMapping</code> you defined in your task definition.</p>
    pub fn port_name(&self) -> &str {
        use std::ops::Deref;
        self.port_name.deref()
    }
}
impl VpcLatticeConfiguration {
    /// Creates a new builder-style object to manufacture [`VpcLatticeConfiguration`](crate::types::VpcLatticeConfiguration).
    pub fn builder() -> crate::types::builders::VpcLatticeConfigurationBuilder {
        crate::types::builders::VpcLatticeConfigurationBuilder::default()
    }
}

/// A builder for [`VpcLatticeConfiguration`](crate::types::VpcLatticeConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VpcLatticeConfigurationBuilder {
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) target_group_arn: ::std::option::Option<::std::string::String>,
    pub(crate) port_name: ::std::option::Option<::std::string::String>,
}
impl VpcLatticeConfigurationBuilder {
    /// <p>The ARN of the IAM role to associate with this VPC Lattice configuration. This is the Amazon ECS  infrastructure IAM role that is used to manage your VPC Lattice infrastructure.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role to associate with this VPC Lattice configuration. This is the Amazon ECS  infrastructure IAM role that is used to manage your VPC Lattice infrastructure.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of the IAM role to associate with this VPC Lattice configuration. This is the Amazon ECS  infrastructure IAM role that is used to manage your VPC Lattice infrastructure.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The full Amazon Resource Name (ARN) of the target group or groups associated with the VPC Lattice configuration that the Amazon ECS tasks will be registered to.</p>
    /// This field is required.
    pub fn target_group_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_group_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The full Amazon Resource Name (ARN) of the target group or groups associated with the VPC Lattice configuration that the Amazon ECS tasks will be registered to.</p>
    pub fn set_target_group_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_group_arn = input;
        self
    }
    /// <p>The full Amazon Resource Name (ARN) of the target group or groups associated with the VPC Lattice configuration that the Amazon ECS tasks will be registered to.</p>
    pub fn get_target_group_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_group_arn
    }
    /// <p>The name of the port mapping to register in the VPC Lattice target group. This is the name of the <code>portMapping</code> you defined in your task definition.</p>
    /// This field is required.
    pub fn port_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.port_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the port mapping to register in the VPC Lattice target group. This is the name of the <code>portMapping</code> you defined in your task definition.</p>
    pub fn set_port_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.port_name = input;
        self
    }
    /// <p>The name of the port mapping to register in the VPC Lattice target group. This is the name of the <code>portMapping</code> you defined in your task definition.</p>
    pub fn get_port_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.port_name
    }
    /// Consumes the builder and constructs a [`VpcLatticeConfiguration`](crate::types::VpcLatticeConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`role_arn`](crate::types::builders::VpcLatticeConfigurationBuilder::role_arn)
    /// - [`target_group_arn`](crate::types::builders::VpcLatticeConfigurationBuilder::target_group_arn)
    /// - [`port_name`](crate::types::builders::VpcLatticeConfigurationBuilder::port_name)
    pub fn build(self) -> ::std::result::Result<crate::types::VpcLatticeConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::VpcLatticeConfiguration {
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building VpcLatticeConfiguration",
                )
            })?,
            target_group_arn: self.target_group_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target_group_arn",
                    "target_group_arn was not specified but it is required when building VpcLatticeConfiguration",
                )
            })?,
            port_name: self.port_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "port_name",
                    "port_name was not specified but it is required when building VpcLatticeConfiguration",
                )
            })?,
        })
    }
}
