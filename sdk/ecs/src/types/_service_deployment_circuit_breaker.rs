// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the circuit breaker used to determine when a service deployment has failed.</p>
/// <p>The deployment circuit breaker is the rolling update mechanism that determines if the tasks reach a steady state. The deployment circuit breaker has an option that will automatically roll back a failed deployment to the last cpompleted service revision. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-circuit-breaker.html">How the Amazon ECS deployment circuit breaker detects failures</a> in the<i> Amazon ECS Developer Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceDeploymentCircuitBreaker {
    /// <p>The circuit breaker status. Amazon ECS is not using the circuit breaker for service deployment failures when the status is <code>DISABLED</code>.</p>
    pub status: ::std::option::Option<crate::types::ServiceDeploymentRollbackMonitorsStatus>,
    /// <p>The number of times the circuit breaker detected a service deploymeny failure.</p>
    pub failure_count: i32,
    /// <p>The threshhold which determines that the service deployment failed.</p>
    /// <p>The deployment circuit breaker calculates the threshold value, and then uses the value to determine when to move the deployment to a FAILED state. The deployment circuit breaker has a minimum threshold of 3 and a maximum threshold of 200. and uses the values in the following formula to determine the deployment failure.</p>
    /// <p><code>0.5 * desired task count</code></p>
    pub threshold: i32,
}
impl ServiceDeploymentCircuitBreaker {
    /// <p>The circuit breaker status. Amazon ECS is not using the circuit breaker for service deployment failures when the status is <code>DISABLED</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ServiceDeploymentRollbackMonitorsStatus> {
        self.status.as_ref()
    }
    /// <p>The number of times the circuit breaker detected a service deploymeny failure.</p>
    pub fn failure_count(&self) -> i32 {
        self.failure_count
    }
    /// <p>The threshhold which determines that the service deployment failed.</p>
    /// <p>The deployment circuit breaker calculates the threshold value, and then uses the value to determine when to move the deployment to a FAILED state. The deployment circuit breaker has a minimum threshold of 3 and a maximum threshold of 200. and uses the values in the following formula to determine the deployment failure.</p>
    /// <p><code>0.5 * desired task count</code></p>
    pub fn threshold(&self) -> i32 {
        self.threshold
    }
}
impl ServiceDeploymentCircuitBreaker {
    /// Creates a new builder-style object to manufacture [`ServiceDeploymentCircuitBreaker`](crate::types::ServiceDeploymentCircuitBreaker).
    pub fn builder() -> crate::types::builders::ServiceDeploymentCircuitBreakerBuilder {
        crate::types::builders::ServiceDeploymentCircuitBreakerBuilder::default()
    }
}

/// A builder for [`ServiceDeploymentCircuitBreaker`](crate::types::ServiceDeploymentCircuitBreaker).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceDeploymentCircuitBreakerBuilder {
    pub(crate) status: ::std::option::Option<crate::types::ServiceDeploymentRollbackMonitorsStatus>,
    pub(crate) failure_count: ::std::option::Option<i32>,
    pub(crate) threshold: ::std::option::Option<i32>,
}
impl ServiceDeploymentCircuitBreakerBuilder {
    /// <p>The circuit breaker status. Amazon ECS is not using the circuit breaker for service deployment failures when the status is <code>DISABLED</code>.</p>
    pub fn status(mut self, input: crate::types::ServiceDeploymentRollbackMonitorsStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The circuit breaker status. Amazon ECS is not using the circuit breaker for service deployment failures when the status is <code>DISABLED</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ServiceDeploymentRollbackMonitorsStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The circuit breaker status. Amazon ECS is not using the circuit breaker for service deployment failures when the status is <code>DISABLED</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ServiceDeploymentRollbackMonitorsStatus> {
        &self.status
    }
    /// <p>The number of times the circuit breaker detected a service deploymeny failure.</p>
    pub fn failure_count(mut self, input: i32) -> Self {
        self.failure_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of times the circuit breaker detected a service deploymeny failure.</p>
    pub fn set_failure_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.failure_count = input;
        self
    }
    /// <p>The number of times the circuit breaker detected a service deploymeny failure.</p>
    pub fn get_failure_count(&self) -> &::std::option::Option<i32> {
        &self.failure_count
    }
    /// <p>The threshhold which determines that the service deployment failed.</p>
    /// <p>The deployment circuit breaker calculates the threshold value, and then uses the value to determine when to move the deployment to a FAILED state. The deployment circuit breaker has a minimum threshold of 3 and a maximum threshold of 200. and uses the values in the following formula to determine the deployment failure.</p>
    /// <p><code>0.5 * desired task count</code></p>
    pub fn threshold(mut self, input: i32) -> Self {
        self.threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>The threshhold which determines that the service deployment failed.</p>
    /// <p>The deployment circuit breaker calculates the threshold value, and then uses the value to determine when to move the deployment to a FAILED state. The deployment circuit breaker has a minimum threshold of 3 and a maximum threshold of 200. and uses the values in the following formula to determine the deployment failure.</p>
    /// <p><code>0.5 * desired task count</code></p>
    pub fn set_threshold(mut self, input: ::std::option::Option<i32>) -> Self {
        self.threshold = input;
        self
    }
    /// <p>The threshhold which determines that the service deployment failed.</p>
    /// <p>The deployment circuit breaker calculates the threshold value, and then uses the value to determine when to move the deployment to a FAILED state. The deployment circuit breaker has a minimum threshold of 3 and a maximum threshold of 200. and uses the values in the following formula to determine the deployment failure.</p>
    /// <p><code>0.5 * desired task count</code></p>
    pub fn get_threshold(&self) -> &::std::option::Option<i32> {
        &self.threshold
    }
    /// Consumes the builder and constructs a [`ServiceDeploymentCircuitBreaker`](crate::types::ServiceDeploymentCircuitBreaker).
    pub fn build(self) -> crate::types::ServiceDeploymentCircuitBreaker {
        crate::types::ServiceDeploymentCircuitBreaker {
            status: self.status,
            failure_count: self.failure_count.unwrap_or_default(),
            threshold: self.threshold.unwrap_or_default(),
        }
    }
}
