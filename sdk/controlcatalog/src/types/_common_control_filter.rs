// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An optional filter that narrows the results to a specific objective.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CommonControlFilter {
    /// <p>The objective that's used as filter criteria.</p>
    /// <p>You can use this parameter to specify one objective ARN at a time. Passing multiple ARNs in the <code>CommonControlFilter</code> isn’t supported.</p>
    pub objectives: ::std::option::Option<::std::vec::Vec<crate::types::ObjectiveResourceFilter>>,
}
impl CommonControlFilter {
    /// <p>The objective that's used as filter criteria.</p>
    /// <p>You can use this parameter to specify one objective ARN at a time. Passing multiple ARNs in the <code>CommonControlFilter</code> isn’t supported.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.objectives.is_none()`.
    pub fn objectives(&self) -> &[crate::types::ObjectiveResourceFilter] {
        self.objectives.as_deref().unwrap_or_default()
    }
}
impl CommonControlFilter {
    /// Creates a new builder-style object to manufacture [`CommonControlFilter`](crate::types::CommonControlFilter).
    pub fn builder() -> crate::types::builders::CommonControlFilterBuilder {
        crate::types::builders::CommonControlFilterBuilder::default()
    }
}

/// A builder for [`CommonControlFilter`](crate::types::CommonControlFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CommonControlFilterBuilder {
    pub(crate) objectives: ::std::option::Option<::std::vec::Vec<crate::types::ObjectiveResourceFilter>>,
}
impl CommonControlFilterBuilder {
    /// Appends an item to `objectives`.
    ///
    /// To override the contents of this collection use [`set_objectives`](Self::set_objectives).
    ///
    /// <p>The objective that's used as filter criteria.</p>
    /// <p>You can use this parameter to specify one objective ARN at a time. Passing multiple ARNs in the <code>CommonControlFilter</code> isn’t supported.</p>
    pub fn objectives(mut self, input: crate::types::ObjectiveResourceFilter) -> Self {
        let mut v = self.objectives.unwrap_or_default();
        v.push(input);
        self.objectives = ::std::option::Option::Some(v);
        self
    }
    /// <p>The objective that's used as filter criteria.</p>
    /// <p>You can use this parameter to specify one objective ARN at a time. Passing multiple ARNs in the <code>CommonControlFilter</code> isn’t supported.</p>
    pub fn set_objectives(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ObjectiveResourceFilter>>) -> Self {
        self.objectives = input;
        self
    }
    /// <p>The objective that's used as filter criteria.</p>
    /// <p>You can use this parameter to specify one objective ARN at a time. Passing multiple ARNs in the <code>CommonControlFilter</code> isn’t supported.</p>
    pub fn get_objectives(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ObjectiveResourceFilter>> {
        &self.objectives
    }
    /// Consumes the builder and constructs a [`CommonControlFilter`](crate::types::CommonControlFilter).
    pub fn build(self) -> crate::types::CommonControlFilter {
        crate::types::CommonControlFilter { objectives: self.objectives }
    }
}
