// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that defines filtering criteria for control implementations. You can use this filter to find controls that are implemented by specific Amazon Web Services services or with specific service identifiers.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImplementationFilter {
    /// <p>A list of implementation types that can serve as filters. For example, you can filter for controls implemented as Amazon Web Services Config Rules by specifying AWS::Config::ConfigRule as a type.</p>
    pub types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of service-specific identifiers that can serve as filters. For example, you can filter for controls with specific Amazon Web Services Config Rule IDs or Security Hub Control IDs.</p>
    pub identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ImplementationFilter {
    /// <p>A list of implementation types that can serve as filters. For example, you can filter for controls implemented as Amazon Web Services Config Rules by specifying AWS::Config::ConfigRule as a type.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.types.is_none()`.
    pub fn types(&self) -> &[::std::string::String] {
        self.types.as_deref().unwrap_or_default()
    }
    /// <p>A list of service-specific identifiers that can serve as filters. For example, you can filter for controls with specific Amazon Web Services Config Rule IDs or Security Hub Control IDs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.identifiers.is_none()`.
    pub fn identifiers(&self) -> &[::std::string::String] {
        self.identifiers.as_deref().unwrap_or_default()
    }
}
impl ImplementationFilter {
    /// Creates a new builder-style object to manufacture [`ImplementationFilter`](crate::types::ImplementationFilter).
    pub fn builder() -> crate::types::builders::ImplementationFilterBuilder {
        crate::types::builders::ImplementationFilterBuilder::default()
    }
}

/// A builder for [`ImplementationFilter`](crate::types::ImplementationFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ImplementationFilterBuilder {
    pub(crate) types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ImplementationFilterBuilder {
    /// Appends an item to `types`.
    ///
    /// To override the contents of this collection use [`set_types`](Self::set_types).
    ///
    /// <p>A list of implementation types that can serve as filters. For example, you can filter for controls implemented as Amazon Web Services Config Rules by specifying AWS::Config::ConfigRule as a type.</p>
    pub fn types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.types.unwrap_or_default();
        v.push(input.into());
        self.types = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of implementation types that can serve as filters. For example, you can filter for controls implemented as Amazon Web Services Config Rules by specifying AWS::Config::ConfigRule as a type.</p>
    pub fn set_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.types = input;
        self
    }
    /// <p>A list of implementation types that can serve as filters. For example, you can filter for controls implemented as Amazon Web Services Config Rules by specifying AWS::Config::ConfigRule as a type.</p>
    pub fn get_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.types
    }
    /// Appends an item to `identifiers`.
    ///
    /// To override the contents of this collection use [`set_identifiers`](Self::set_identifiers).
    ///
    /// <p>A list of service-specific identifiers that can serve as filters. For example, you can filter for controls with specific Amazon Web Services Config Rule IDs or Security Hub Control IDs.</p>
    pub fn identifiers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.identifiers.unwrap_or_default();
        v.push(input.into());
        self.identifiers = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of service-specific identifiers that can serve as filters. For example, you can filter for controls with specific Amazon Web Services Config Rule IDs or Security Hub Control IDs.</p>
    pub fn set_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.identifiers = input;
        self
    }
    /// <p>A list of service-specific identifiers that can serve as filters. For example, you can filter for controls with specific Amazon Web Services Config Rule IDs or Security Hub Control IDs.</p>
    pub fn get_identifiers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.identifiers
    }
    /// Consumes the builder and constructs a [`ImplementationFilter`](crate::types::ImplementationFilter).
    pub fn build(self) -> crate::types::ImplementationFilter {
        crate::types::ImplementationFilter {
            types: self.types,
            identifiers: self.identifiers,
        }
    }
}
