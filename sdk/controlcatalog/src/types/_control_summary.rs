// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Overview of information about a control.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ControlSummary {
    /// <p>The Amazon Resource Name (ARN) of the control.</p>
    pub arn: ::std::string::String,
    /// <p>A list of alternative identifiers for the control. These are human-readable designators, such as <code>SH.S3.1</code>. Several aliases can refer to the same control across different Amazon Web Services services or compliance frameworks.</p>
    pub aliases: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The display name of the control.</p>
    pub name: ::std::string::String,
    /// <p>A description of the control, as it may appear in the console. Describes the functionality of the control.</p>
    pub description: ::std::string::String,
    /// <p>An enumerated type, with the following possible values:</p>
    pub behavior: ::std::option::Option<crate::types::ControlBehavior>,
    /// <p>An enumerated type, with the following possible values:</p>
    pub severity: ::std::option::Option<crate::types::ControlSeverity>,
    /// <p>An object of type <code>ImplementationSummary</code> that describes how the control is implemented.</p>
    pub implementation: ::std::option::Option<crate::types::ImplementationSummary>,
    /// <p>A timestamp that notes the time when the control was released (start of its life) as a governance capability in Amazon Web Services.</p>
    pub create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A list of Amazon Web Services resource types that are governed by this control. This information helps you understand which controls can govern certain types of resources, and conversely, which resources are affected when the control is implemented. The resources are represented as Amazon Web Services CloudFormation resource types. If <code>GovernedResources</code> cannot be represented by available CloudFormation resource types, it’s returned as an empty list.</p>
    pub governed_resources: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ControlSummary {
    /// <p>The Amazon Resource Name (ARN) of the control.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>A list of alternative identifiers for the control. These are human-readable designators, such as <code>SH.S3.1</code>. Several aliases can refer to the same control across different Amazon Web Services services or compliance frameworks.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.aliases.is_none()`.
    pub fn aliases(&self) -> &[::std::string::String] {
        self.aliases.as_deref().unwrap_or_default()
    }
    /// <p>The display name of the control.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>A description of the control, as it may appear in the console. Describes the functionality of the control.</p>
    pub fn description(&self) -> &str {
        use std::ops::Deref;
        self.description.deref()
    }
    /// <p>An enumerated type, with the following possible values:</p>
    pub fn behavior(&self) -> ::std::option::Option<&crate::types::ControlBehavior> {
        self.behavior.as_ref()
    }
    /// <p>An enumerated type, with the following possible values:</p>
    pub fn severity(&self) -> ::std::option::Option<&crate::types::ControlSeverity> {
        self.severity.as_ref()
    }
    /// <p>An object of type <code>ImplementationSummary</code> that describes how the control is implemented.</p>
    pub fn implementation(&self) -> ::std::option::Option<&crate::types::ImplementationSummary> {
        self.implementation.as_ref()
    }
    /// <p>A timestamp that notes the time when the control was released (start of its life) as a governance capability in Amazon Web Services.</p>
    pub fn create_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.create_time.as_ref()
    }
    /// <p>A list of Amazon Web Services resource types that are governed by this control. This information helps you understand which controls can govern certain types of resources, and conversely, which resources are affected when the control is implemented. The resources are represented as Amazon Web Services CloudFormation resource types. If <code>GovernedResources</code> cannot be represented by available CloudFormation resource types, it’s returned as an empty list.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.governed_resources.is_none()`.
    pub fn governed_resources(&self) -> &[::std::string::String] {
        self.governed_resources.as_deref().unwrap_or_default()
    }
}
impl ControlSummary {
    /// Creates a new builder-style object to manufacture [`ControlSummary`](crate::types::ControlSummary).
    pub fn builder() -> crate::types::builders::ControlSummaryBuilder {
        crate::types::builders::ControlSummaryBuilder::default()
    }
}

/// A builder for [`ControlSummary`](crate::types::ControlSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ControlSummaryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) aliases: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) behavior: ::std::option::Option<crate::types::ControlBehavior>,
    pub(crate) severity: ::std::option::Option<crate::types::ControlSeverity>,
    pub(crate) implementation: ::std::option::Option<crate::types::ImplementationSummary>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) governed_resources: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ControlSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the control.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the control.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the control.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Appends an item to `aliases`.
    ///
    /// To override the contents of this collection use [`set_aliases`](Self::set_aliases).
    ///
    /// <p>A list of alternative identifiers for the control. These are human-readable designators, such as <code>SH.S3.1</code>. Several aliases can refer to the same control across different Amazon Web Services services or compliance frameworks.</p>
    pub fn aliases(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.aliases.unwrap_or_default();
        v.push(input.into());
        self.aliases = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of alternative identifiers for the control. These are human-readable designators, such as <code>SH.S3.1</code>. Several aliases can refer to the same control across different Amazon Web Services services or compliance frameworks.</p>
    pub fn set_aliases(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.aliases = input;
        self
    }
    /// <p>A list of alternative identifiers for the control. These are human-readable designators, such as <code>SH.S3.1</code>. Several aliases can refer to the same control across different Amazon Web Services services or compliance frameworks.</p>
    pub fn get_aliases(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.aliases
    }
    /// <p>The display name of the control.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the control.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The display name of the control.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of the control, as it may appear in the console. Describes the functionality of the control.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the control, as it may appear in the console. Describes the functionality of the control.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the control, as it may appear in the console. Describes the functionality of the control.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>An enumerated type, with the following possible values:</p>
    pub fn behavior(mut self, input: crate::types::ControlBehavior) -> Self {
        self.behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>An enumerated type, with the following possible values:</p>
    pub fn set_behavior(mut self, input: ::std::option::Option<crate::types::ControlBehavior>) -> Self {
        self.behavior = input;
        self
    }
    /// <p>An enumerated type, with the following possible values:</p>
    pub fn get_behavior(&self) -> &::std::option::Option<crate::types::ControlBehavior> {
        &self.behavior
    }
    /// <p>An enumerated type, with the following possible values:</p>
    pub fn severity(mut self, input: crate::types::ControlSeverity) -> Self {
        self.severity = ::std::option::Option::Some(input);
        self
    }
    /// <p>An enumerated type, with the following possible values:</p>
    pub fn set_severity(mut self, input: ::std::option::Option<crate::types::ControlSeverity>) -> Self {
        self.severity = input;
        self
    }
    /// <p>An enumerated type, with the following possible values:</p>
    pub fn get_severity(&self) -> &::std::option::Option<crate::types::ControlSeverity> {
        &self.severity
    }
    /// <p>An object of type <code>ImplementationSummary</code> that describes how the control is implemented.</p>
    pub fn implementation(mut self, input: crate::types::ImplementationSummary) -> Self {
        self.implementation = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object of type <code>ImplementationSummary</code> that describes how the control is implemented.</p>
    pub fn set_implementation(mut self, input: ::std::option::Option<crate::types::ImplementationSummary>) -> Self {
        self.implementation = input;
        self
    }
    /// <p>An object of type <code>ImplementationSummary</code> that describes how the control is implemented.</p>
    pub fn get_implementation(&self) -> &::std::option::Option<crate::types::ImplementationSummary> {
        &self.implementation
    }
    /// <p>A timestamp that notes the time when the control was released (start of its life) as a governance capability in Amazon Web Services.</p>
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp that notes the time when the control was released (start of its life) as a governance capability in Amazon Web Services.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>A timestamp that notes the time when the control was released (start of its life) as a governance capability in Amazon Web Services.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// Appends an item to `governed_resources`.
    ///
    /// To override the contents of this collection use [`set_governed_resources`](Self::set_governed_resources).
    ///
    /// <p>A list of Amazon Web Services resource types that are governed by this control. This information helps you understand which controls can govern certain types of resources, and conversely, which resources are affected when the control is implemented. The resources are represented as Amazon Web Services CloudFormation resource types. If <code>GovernedResources</code> cannot be represented by available CloudFormation resource types, it’s returned as an empty list.</p>
    pub fn governed_resources(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.governed_resources.unwrap_or_default();
        v.push(input.into());
        self.governed_resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Amazon Web Services resource types that are governed by this control. This information helps you understand which controls can govern certain types of resources, and conversely, which resources are affected when the control is implemented. The resources are represented as Amazon Web Services CloudFormation resource types. If <code>GovernedResources</code> cannot be represented by available CloudFormation resource types, it’s returned as an empty list.</p>
    pub fn set_governed_resources(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.governed_resources = input;
        self
    }
    /// <p>A list of Amazon Web Services resource types that are governed by this control. This information helps you understand which controls can govern certain types of resources, and conversely, which resources are affected when the control is implemented. The resources are represented as Amazon Web Services CloudFormation resource types. If <code>GovernedResources</code> cannot be represented by available CloudFormation resource types, it’s returned as an empty list.</p>
    pub fn get_governed_resources(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.governed_resources
    }
    /// Consumes the builder and constructs a [`ControlSummary`](crate::types::ControlSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::ControlSummaryBuilder::arn)
    /// - [`name`](crate::types::builders::ControlSummaryBuilder::name)
    /// - [`description`](crate::types::builders::ControlSummaryBuilder::description)
    pub fn build(self) -> ::std::result::Result<crate::types::ControlSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ControlSummary {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building ControlSummary",
                )
            })?,
            aliases: self.aliases,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building ControlSummary",
                )
            })?,
            description: self.description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "description",
                    "description was not specified but it is required when building ControlSummary",
                )
            })?,
            behavior: self.behavior,
            severity: self.severity,
            implementation: self.implementation,
            create_time: self.create_time,
            governed_resources: self.governed_resources,
        })
    }
}
