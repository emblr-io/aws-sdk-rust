// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that defines filtering criteria for the ListControls operation. You can use this filter to narrow down the list of controls based on their implementation details.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ControlFilter {
    /// <p>A filter that narrows the results to controls with specific implementation types or identifiers. This field allows you to find controls that are implemented by specific Amazon Web Services services or with specific service identifiers.</p>
    pub implementations: ::std::option::Option<crate::types::ImplementationFilter>,
}
impl ControlFilter {
    /// <p>A filter that narrows the results to controls with specific implementation types or identifiers. This field allows you to find controls that are implemented by specific Amazon Web Services services or with specific service identifiers.</p>
    pub fn implementations(&self) -> ::std::option::Option<&crate::types::ImplementationFilter> {
        self.implementations.as_ref()
    }
}
impl ControlFilter {
    /// Creates a new builder-style object to manufacture [`ControlFilter`](crate::types::ControlFilter).
    pub fn builder() -> crate::types::builders::ControlFilterBuilder {
        crate::types::builders::ControlFilterBuilder::default()
    }
}

/// A builder for [`ControlFilter`](crate::types::ControlFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ControlFilterBuilder {
    pub(crate) implementations: ::std::option::Option<crate::types::ImplementationFilter>,
}
impl ControlFilterBuilder {
    /// <p>A filter that narrows the results to controls with specific implementation types or identifiers. This field allows you to find controls that are implemented by specific Amazon Web Services services or with specific service identifiers.</p>
    pub fn implementations(mut self, input: crate::types::ImplementationFilter) -> Self {
        self.implementations = ::std::option::Option::Some(input);
        self
    }
    /// <p>A filter that narrows the results to controls with specific implementation types or identifiers. This field allows you to find controls that are implemented by specific Amazon Web Services services or with specific service identifiers.</p>
    pub fn set_implementations(mut self, input: ::std::option::Option<crate::types::ImplementationFilter>) -> Self {
        self.implementations = input;
        self
    }
    /// <p>A filter that narrows the results to controls with specific implementation types or identifiers. This field allows you to find controls that are implemented by specific Amazon Web Services services or with specific service identifiers.</p>
    pub fn get_implementations(&self) -> &::std::option::Option<crate::types::ImplementationFilter> {
        &self.implementations
    }
    /// Consumes the builder and constructs a [`ControlFilter`](crate::types::ControlFilter).
    pub fn build(self) -> crate::types::ControlFilter {
        crate::types::ControlFilter {
            implementations: self.implementations,
        }
    }
}
