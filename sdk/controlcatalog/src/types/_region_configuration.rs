// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns information about the control, including the scope of the control, if enabled, and the Regions in which the control is available for deployment. For more information about scope, see <a href="https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html">Global services</a>.</p>
/// <p>If you are applying controls through an Amazon Web Services Control Tower landing zone environment, remember that the values returned in the <code>RegionConfiguration</code> API operation are not related to the governed Regions in your landing zone. For example, if you are governing Regions <code>A</code>,<code>B</code>,and <code>C</code> while the control is available in Regions <code>A</code>, <code>B</code>, C<code>,</code> and <code>D</code>, you'd see a response with <code>DeployableRegions</code> of <code>A</code>, <code>B</code>, <code>C</code>, and <code>D</code> for a control with <code>REGIONAL</code> scope, even though you may not intend to deploy the control in Region <code>D</code>, because you do not govern it through your landing zone.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RegionConfiguration {
    /// <p>The coverage of the control, if deployed. Scope is an enumerated type, with value <code>Regional</code>, or <code>Global</code>. A control with Global scope is effective in all Amazon Web Services Regions, regardless of the Region from which it is enabled, or to which it is deployed. A control implemented by an SCP is usually Global in scope. A control with Regional scope has operations that are restricted specifically to the Region from which it is enabled and to which it is deployed. Controls implemented by Config rules and CloudFormation hooks usually are Regional in scope. Security Hub controls usually are Regional in scope.</p>
    pub scope: crate::types::ControlScope,
    /// <p>Regions in which the control is available to be deployed.</p>
    pub deployable_regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RegionConfiguration {
    /// <p>The coverage of the control, if deployed. Scope is an enumerated type, with value <code>Regional</code>, or <code>Global</code>. A control with Global scope is effective in all Amazon Web Services Regions, regardless of the Region from which it is enabled, or to which it is deployed. A control implemented by an SCP is usually Global in scope. A control with Regional scope has operations that are restricted specifically to the Region from which it is enabled and to which it is deployed. Controls implemented by Config rules and CloudFormation hooks usually are Regional in scope. Security Hub controls usually are Regional in scope.</p>
    pub fn scope(&self) -> &crate::types::ControlScope {
        &self.scope
    }
    /// <p>Regions in which the control is available to be deployed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.deployable_regions.is_none()`.
    pub fn deployable_regions(&self) -> &[::std::string::String] {
        self.deployable_regions.as_deref().unwrap_or_default()
    }
}
impl RegionConfiguration {
    /// Creates a new builder-style object to manufacture [`RegionConfiguration`](crate::types::RegionConfiguration).
    pub fn builder() -> crate::types::builders::RegionConfigurationBuilder {
        crate::types::builders::RegionConfigurationBuilder::default()
    }
}

/// A builder for [`RegionConfiguration`](crate::types::RegionConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RegionConfigurationBuilder {
    pub(crate) scope: ::std::option::Option<crate::types::ControlScope>,
    pub(crate) deployable_regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RegionConfigurationBuilder {
    /// <p>The coverage of the control, if deployed. Scope is an enumerated type, with value <code>Regional</code>, or <code>Global</code>. A control with Global scope is effective in all Amazon Web Services Regions, regardless of the Region from which it is enabled, or to which it is deployed. A control implemented by an SCP is usually Global in scope. A control with Regional scope has operations that are restricted specifically to the Region from which it is enabled and to which it is deployed. Controls implemented by Config rules and CloudFormation hooks usually are Regional in scope. Security Hub controls usually are Regional in scope.</p>
    /// This field is required.
    pub fn scope(mut self, input: crate::types::ControlScope) -> Self {
        self.scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>The coverage of the control, if deployed. Scope is an enumerated type, with value <code>Regional</code>, or <code>Global</code>. A control with Global scope is effective in all Amazon Web Services Regions, regardless of the Region from which it is enabled, or to which it is deployed. A control implemented by an SCP is usually Global in scope. A control with Regional scope has operations that are restricted specifically to the Region from which it is enabled and to which it is deployed. Controls implemented by Config rules and CloudFormation hooks usually are Regional in scope. Security Hub controls usually are Regional in scope.</p>
    pub fn set_scope(mut self, input: ::std::option::Option<crate::types::ControlScope>) -> Self {
        self.scope = input;
        self
    }
    /// <p>The coverage of the control, if deployed. Scope is an enumerated type, with value <code>Regional</code>, or <code>Global</code>. A control with Global scope is effective in all Amazon Web Services Regions, regardless of the Region from which it is enabled, or to which it is deployed. A control implemented by an SCP is usually Global in scope. A control with Regional scope has operations that are restricted specifically to the Region from which it is enabled and to which it is deployed. Controls implemented by Config rules and CloudFormation hooks usually are Regional in scope. Security Hub controls usually are Regional in scope.</p>
    pub fn get_scope(&self) -> &::std::option::Option<crate::types::ControlScope> {
        &self.scope
    }
    /// Appends an item to `deployable_regions`.
    ///
    /// To override the contents of this collection use [`set_deployable_regions`](Self::set_deployable_regions).
    ///
    /// <p>Regions in which the control is available to be deployed.</p>
    pub fn deployable_regions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.deployable_regions.unwrap_or_default();
        v.push(input.into());
        self.deployable_regions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Regions in which the control is available to be deployed.</p>
    pub fn set_deployable_regions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.deployable_regions = input;
        self
    }
    /// <p>Regions in which the control is available to be deployed.</p>
    pub fn get_deployable_regions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.deployable_regions
    }
    /// Consumes the builder and constructs a [`RegionConfiguration`](crate::types::RegionConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`scope`](crate::types::builders::RegionConfigurationBuilder::scope)
    pub fn build(self) -> ::std::result::Result<crate::types::RegionConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RegionConfiguration {
            scope: self.scope.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "scope",
                    "scope was not specified but it is required when building RegionConfiguration",
                )
            })?,
            deployable_regions: self.deployable_regions,
        })
    }
}
