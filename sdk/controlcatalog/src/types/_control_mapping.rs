// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains information about a control mapping, including the control ARN, mapping type, and mapping details.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ControlMapping {
    /// <p>The Amazon Resource Name (ARN) that identifies the control in the mapping.</p>
    pub control_arn: ::std::string::String,
    /// <p>The type of mapping relationship between the control and other entities. Indicates whether the mapping is to a framework or common control.</p>
    pub mapping_type: crate::types::MappingType,
    /// <p>The details of the mapping relationship, containing either framework or common control information.</p>
    pub mapping: ::std::option::Option<crate::types::Mapping>,
}
impl ControlMapping {
    /// <p>The Amazon Resource Name (ARN) that identifies the control in the mapping.</p>
    pub fn control_arn(&self) -> &str {
        use std::ops::Deref;
        self.control_arn.deref()
    }
    /// <p>The type of mapping relationship between the control and other entities. Indicates whether the mapping is to a framework or common control.</p>
    pub fn mapping_type(&self) -> &crate::types::MappingType {
        &self.mapping_type
    }
    /// <p>The details of the mapping relationship, containing either framework or common control information.</p>
    pub fn mapping(&self) -> ::std::option::Option<&crate::types::Mapping> {
        self.mapping.as_ref()
    }
}
impl ControlMapping {
    /// Creates a new builder-style object to manufacture [`ControlMapping`](crate::types::ControlMapping).
    pub fn builder() -> crate::types::builders::ControlMappingBuilder {
        crate::types::builders::ControlMappingBuilder::default()
    }
}

/// A builder for [`ControlMapping`](crate::types::ControlMapping).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ControlMappingBuilder {
    pub(crate) control_arn: ::std::option::Option<::std::string::String>,
    pub(crate) mapping_type: ::std::option::Option<crate::types::MappingType>,
    pub(crate) mapping: ::std::option::Option<crate::types::Mapping>,
}
impl ControlMappingBuilder {
    /// <p>The Amazon Resource Name (ARN) that identifies the control in the mapping.</p>
    /// This field is required.
    pub fn control_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.control_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that identifies the control in the mapping.</p>
    pub fn set_control_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.control_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that identifies the control in the mapping.</p>
    pub fn get_control_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.control_arn
    }
    /// <p>The type of mapping relationship between the control and other entities. Indicates whether the mapping is to a framework or common control.</p>
    /// This field is required.
    pub fn mapping_type(mut self, input: crate::types::MappingType) -> Self {
        self.mapping_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of mapping relationship between the control and other entities. Indicates whether the mapping is to a framework or common control.</p>
    pub fn set_mapping_type(mut self, input: ::std::option::Option<crate::types::MappingType>) -> Self {
        self.mapping_type = input;
        self
    }
    /// <p>The type of mapping relationship between the control and other entities. Indicates whether the mapping is to a framework or common control.</p>
    pub fn get_mapping_type(&self) -> &::std::option::Option<crate::types::MappingType> {
        &self.mapping_type
    }
    /// <p>The details of the mapping relationship, containing either framework or common control information.</p>
    /// This field is required.
    pub fn mapping(mut self, input: crate::types::Mapping) -> Self {
        self.mapping = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the mapping relationship, containing either framework or common control information.</p>
    pub fn set_mapping(mut self, input: ::std::option::Option<crate::types::Mapping>) -> Self {
        self.mapping = input;
        self
    }
    /// <p>The details of the mapping relationship, containing either framework or common control information.</p>
    pub fn get_mapping(&self) -> &::std::option::Option<crate::types::Mapping> {
        &self.mapping
    }
    /// Consumes the builder and constructs a [`ControlMapping`](crate::types::ControlMapping).
    /// This method will fail if any of the following fields are not set:
    /// - [`control_arn`](crate::types::builders::ControlMappingBuilder::control_arn)
    /// - [`mapping_type`](crate::types::builders::ControlMappingBuilder::mapping_type)
    pub fn build(self) -> ::std::result::Result<crate::types::ControlMapping, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ControlMapping {
            control_arn: self.control_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "control_arn",
                    "control_arn was not specified but it is required when building ControlMapping",
                )
            })?,
            mapping_type: self.mapping_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mapping_type",
                    "mapping_type was not specified but it is required when building ControlMapping",
                )
            })?,
            mapping: self.mapping,
        })
    }
}
