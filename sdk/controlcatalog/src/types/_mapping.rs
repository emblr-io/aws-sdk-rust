// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains the details of a mapping relationship, which can be either to a framework or to a common control.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum Mapping {
    /// <p>The common control mapping details when the mapping type relates to a common control.</p>
    CommonControl(crate::types::CommonControlMappingDetails),
    /// <p>The framework mapping details when the mapping type relates to a compliance framework.</p>
    Framework(crate::types::FrameworkMappingDetails),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl Mapping {
    /// Tries to convert the enum instance into [`CommonControl`](crate::types::Mapping::CommonControl), extracting the inner [`CommonControlMappingDetails`](crate::types::CommonControlMappingDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_common_control(&self) -> ::std::result::Result<&crate::types::CommonControlMappingDetails, &Self> {
        if let Mapping::CommonControl(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`CommonControl`](crate::types::Mapping::CommonControl).
    pub fn is_common_control(&self) -> bool {
        self.as_common_control().is_ok()
    }
    /// Tries to convert the enum instance into [`Framework`](crate::types::Mapping::Framework), extracting the inner [`FrameworkMappingDetails`](crate::types::FrameworkMappingDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_framework(&self) -> ::std::result::Result<&crate::types::FrameworkMappingDetails, &Self> {
        if let Mapping::Framework(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Framework`](crate::types::Mapping::Framework).
    pub fn is_framework(&self) -> bool {
        self.as_framework().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
