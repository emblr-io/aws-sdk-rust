// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that defines filtering criteria for the ListControlMappings operation. You can use this filter to narrow down the list of control mappings based on control ARNs, common control ARNs, or mapping types.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ControlMappingFilter {
    /// <p>A list of control ARNs to filter the mappings. When specified, only mappings associated with these controls are returned.</p>
    pub control_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of common control ARNs to filter the mappings. When specified, only mappings associated with these common controls are returned.</p>
    pub common_control_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of mapping types to filter the mappings. When specified, only mappings of these types are returned.</p>
    pub mapping_types: ::std::option::Option<::std::vec::Vec<crate::types::MappingType>>,
}
impl ControlMappingFilter {
    /// <p>A list of control ARNs to filter the mappings. When specified, only mappings associated with these controls are returned.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.control_arns.is_none()`.
    pub fn control_arns(&self) -> &[::std::string::String] {
        self.control_arns.as_deref().unwrap_or_default()
    }
    /// <p>A list of common control ARNs to filter the mappings. When specified, only mappings associated with these common controls are returned.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.common_control_arns.is_none()`.
    pub fn common_control_arns(&self) -> &[::std::string::String] {
        self.common_control_arns.as_deref().unwrap_or_default()
    }
    /// <p>A list of mapping types to filter the mappings. When specified, only mappings of these types are returned.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.mapping_types.is_none()`.
    pub fn mapping_types(&self) -> &[crate::types::MappingType] {
        self.mapping_types.as_deref().unwrap_or_default()
    }
}
impl ControlMappingFilter {
    /// Creates a new builder-style object to manufacture [`ControlMappingFilter`](crate::types::ControlMappingFilter).
    pub fn builder() -> crate::types::builders::ControlMappingFilterBuilder {
        crate::types::builders::ControlMappingFilterBuilder::default()
    }
}

/// A builder for [`ControlMappingFilter`](crate::types::ControlMappingFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ControlMappingFilterBuilder {
    pub(crate) control_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) common_control_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) mapping_types: ::std::option::Option<::std::vec::Vec<crate::types::MappingType>>,
}
impl ControlMappingFilterBuilder {
    /// Appends an item to `control_arns`.
    ///
    /// To override the contents of this collection use [`set_control_arns`](Self::set_control_arns).
    ///
    /// <p>A list of control ARNs to filter the mappings. When specified, only mappings associated with these controls are returned.</p>
    pub fn control_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.control_arns.unwrap_or_default();
        v.push(input.into());
        self.control_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of control ARNs to filter the mappings. When specified, only mappings associated with these controls are returned.</p>
    pub fn set_control_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.control_arns = input;
        self
    }
    /// <p>A list of control ARNs to filter the mappings. When specified, only mappings associated with these controls are returned.</p>
    pub fn get_control_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.control_arns
    }
    /// Appends an item to `common_control_arns`.
    ///
    /// To override the contents of this collection use [`set_common_control_arns`](Self::set_common_control_arns).
    ///
    /// <p>A list of common control ARNs to filter the mappings. When specified, only mappings associated with these common controls are returned.</p>
    pub fn common_control_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.common_control_arns.unwrap_or_default();
        v.push(input.into());
        self.common_control_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of common control ARNs to filter the mappings. When specified, only mappings associated with these common controls are returned.</p>
    pub fn set_common_control_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.common_control_arns = input;
        self
    }
    /// <p>A list of common control ARNs to filter the mappings. When specified, only mappings associated with these common controls are returned.</p>
    pub fn get_common_control_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.common_control_arns
    }
    /// Appends an item to `mapping_types`.
    ///
    /// To override the contents of this collection use [`set_mapping_types`](Self::set_mapping_types).
    ///
    /// <p>A list of mapping types to filter the mappings. When specified, only mappings of these types are returned.</p>
    pub fn mapping_types(mut self, input: crate::types::MappingType) -> Self {
        let mut v = self.mapping_types.unwrap_or_default();
        v.push(input);
        self.mapping_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of mapping types to filter the mappings. When specified, only mappings of these types are returned.</p>
    pub fn set_mapping_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MappingType>>) -> Self {
        self.mapping_types = input;
        self
    }
    /// <p>A list of mapping types to filter the mappings. When specified, only mappings of these types are returned.</p>
    pub fn get_mapping_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MappingType>> {
        &self.mapping_types
    }
    /// Consumes the builder and constructs a [`ControlMappingFilter`](crate::types::ControlMappingFilter).
    pub fn build(self) -> crate::types::ControlMappingFilter {
        crate::types::ControlMappingFilter {
            control_arns: self.control_arns,
            common_control_arns: self.common_control_arns,
            mapping_types: self.mapping_types,
        }
    }
}
