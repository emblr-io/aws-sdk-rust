// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListFilteredTransactionEventsInput {
    /// <p>The blockchain network where the transaction occurred.</p>
    /// <p>Valid Values: <code>BITCOIN_MAINNET</code> | <code>BITCOIN_TESTNET</code></p>
    pub network: ::std::option::Option<::std::string::String>,
    /// <p>This is the unique public address on the blockchain for which the transaction events are being requested.</p>
    pub address_identifier_filter: ::std::option::Option<crate::types::AddressIdentifierFilter>,
    /// <p>This container specifies the time frame for the transaction events returned in the response.</p>
    pub time_filter: ::std::option::Option<crate::types::TimeFilter>,
    /// <p>This container specifies filtering attributes related to BITCOIN_VOUT event types</p>
    pub vout_filter: ::std::option::Option<crate::types::VoutFilter>,
    /// <p>The container for the <code>ConfirmationStatusFilter</code> that filters for the <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ambq-dg/key-concepts.html#finality"> <i>finality</i> </a> of the results.</p>
    pub confirmation_status_filter: ::std::option::Option<crate::types::ConfirmationStatusFilter>,
    /// <p>The order by which the results will be sorted.</p>
    pub sort: ::std::option::Option<crate::types::ListFilteredTransactionEventsSort>,
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of transaction events to list.</p>
    /// <p>Default: <code>100</code></p><note>
    /// <p>Even if additional results can be retrieved, the request can return less results than <code>maxResults</code> or an empty array of results.</p>
    /// <p>To retrieve the next set of results, make another request with the returned <code>nextToken</code> value. The value of <code>nextToken</code> is <code>null</code> when there are no more results to return</p>
    /// </note>
    pub max_results: ::std::option::Option<i32>,
}
impl ListFilteredTransactionEventsInput {
    /// <p>The blockchain network where the transaction occurred.</p>
    /// <p>Valid Values: <code>BITCOIN_MAINNET</code> | <code>BITCOIN_TESTNET</code></p>
    pub fn network(&self) -> ::std::option::Option<&str> {
        self.network.as_deref()
    }
    /// <p>This is the unique public address on the blockchain for which the transaction events are being requested.</p>
    pub fn address_identifier_filter(&self) -> ::std::option::Option<&crate::types::AddressIdentifierFilter> {
        self.address_identifier_filter.as_ref()
    }
    /// <p>This container specifies the time frame for the transaction events returned in the response.</p>
    pub fn time_filter(&self) -> ::std::option::Option<&crate::types::TimeFilter> {
        self.time_filter.as_ref()
    }
    /// <p>This container specifies filtering attributes related to BITCOIN_VOUT event types</p>
    pub fn vout_filter(&self) -> ::std::option::Option<&crate::types::VoutFilter> {
        self.vout_filter.as_ref()
    }
    /// <p>The container for the <code>ConfirmationStatusFilter</code> that filters for the <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ambq-dg/key-concepts.html#finality"> <i>finality</i> </a> of the results.</p>
    pub fn confirmation_status_filter(&self) -> ::std::option::Option<&crate::types::ConfirmationStatusFilter> {
        self.confirmation_status_filter.as_ref()
    }
    /// <p>The order by which the results will be sorted.</p>
    pub fn sort(&self) -> ::std::option::Option<&crate::types::ListFilteredTransactionEventsSort> {
        self.sort.as_ref()
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of transaction events to list.</p>
    /// <p>Default: <code>100</code></p><note>
    /// <p>Even if additional results can be retrieved, the request can return less results than <code>maxResults</code> or an empty array of results.</p>
    /// <p>To retrieve the next set of results, make another request with the returned <code>nextToken</code> value. The value of <code>nextToken</code> is <code>null</code> when there are no more results to return</p>
    /// </note>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListFilteredTransactionEventsInput {
    /// Creates a new builder-style object to manufacture [`ListFilteredTransactionEventsInput`](crate::operation::list_filtered_transaction_events::ListFilteredTransactionEventsInput).
    pub fn builder() -> crate::operation::list_filtered_transaction_events::builders::ListFilteredTransactionEventsInputBuilder {
        crate::operation::list_filtered_transaction_events::builders::ListFilteredTransactionEventsInputBuilder::default()
    }
}

/// A builder for [`ListFilteredTransactionEventsInput`](crate::operation::list_filtered_transaction_events::ListFilteredTransactionEventsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListFilteredTransactionEventsInputBuilder {
    pub(crate) network: ::std::option::Option<::std::string::String>,
    pub(crate) address_identifier_filter: ::std::option::Option<crate::types::AddressIdentifierFilter>,
    pub(crate) time_filter: ::std::option::Option<crate::types::TimeFilter>,
    pub(crate) vout_filter: ::std::option::Option<crate::types::VoutFilter>,
    pub(crate) confirmation_status_filter: ::std::option::Option<crate::types::ConfirmationStatusFilter>,
    pub(crate) sort: ::std::option::Option<crate::types::ListFilteredTransactionEventsSort>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListFilteredTransactionEventsInputBuilder {
    /// <p>The blockchain network where the transaction occurred.</p>
    /// <p>Valid Values: <code>BITCOIN_MAINNET</code> | <code>BITCOIN_TESTNET</code></p>
    /// This field is required.
    pub fn network(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The blockchain network where the transaction occurred.</p>
    /// <p>Valid Values: <code>BITCOIN_MAINNET</code> | <code>BITCOIN_TESTNET</code></p>
    pub fn set_network(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network = input;
        self
    }
    /// <p>The blockchain network where the transaction occurred.</p>
    /// <p>Valid Values: <code>BITCOIN_MAINNET</code> | <code>BITCOIN_TESTNET</code></p>
    pub fn get_network(&self) -> &::std::option::Option<::std::string::String> {
        &self.network
    }
    /// <p>This is the unique public address on the blockchain for which the transaction events are being requested.</p>
    /// This field is required.
    pub fn address_identifier_filter(mut self, input: crate::types::AddressIdentifierFilter) -> Self {
        self.address_identifier_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>This is the unique public address on the blockchain for which the transaction events are being requested.</p>
    pub fn set_address_identifier_filter(mut self, input: ::std::option::Option<crate::types::AddressIdentifierFilter>) -> Self {
        self.address_identifier_filter = input;
        self
    }
    /// <p>This is the unique public address on the blockchain for which the transaction events are being requested.</p>
    pub fn get_address_identifier_filter(&self) -> &::std::option::Option<crate::types::AddressIdentifierFilter> {
        &self.address_identifier_filter
    }
    /// <p>This container specifies the time frame for the transaction events returned in the response.</p>
    pub fn time_filter(mut self, input: crate::types::TimeFilter) -> Self {
        self.time_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>This container specifies the time frame for the transaction events returned in the response.</p>
    pub fn set_time_filter(mut self, input: ::std::option::Option<crate::types::TimeFilter>) -> Self {
        self.time_filter = input;
        self
    }
    /// <p>This container specifies the time frame for the transaction events returned in the response.</p>
    pub fn get_time_filter(&self) -> &::std::option::Option<crate::types::TimeFilter> {
        &self.time_filter
    }
    /// <p>This container specifies filtering attributes related to BITCOIN_VOUT event types</p>
    pub fn vout_filter(mut self, input: crate::types::VoutFilter) -> Self {
        self.vout_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>This container specifies filtering attributes related to BITCOIN_VOUT event types</p>
    pub fn set_vout_filter(mut self, input: ::std::option::Option<crate::types::VoutFilter>) -> Self {
        self.vout_filter = input;
        self
    }
    /// <p>This container specifies filtering attributes related to BITCOIN_VOUT event types</p>
    pub fn get_vout_filter(&self) -> &::std::option::Option<crate::types::VoutFilter> {
        &self.vout_filter
    }
    /// <p>The container for the <code>ConfirmationStatusFilter</code> that filters for the <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ambq-dg/key-concepts.html#finality"> <i>finality</i> </a> of the results.</p>
    pub fn confirmation_status_filter(mut self, input: crate::types::ConfirmationStatusFilter) -> Self {
        self.confirmation_status_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>The container for the <code>ConfirmationStatusFilter</code> that filters for the <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ambq-dg/key-concepts.html#finality"> <i>finality</i> </a> of the results.</p>
    pub fn set_confirmation_status_filter(mut self, input: ::std::option::Option<crate::types::ConfirmationStatusFilter>) -> Self {
        self.confirmation_status_filter = input;
        self
    }
    /// <p>The container for the <code>ConfirmationStatusFilter</code> that filters for the <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ambq-dg/key-concepts.html#finality"> <i>finality</i> </a> of the results.</p>
    pub fn get_confirmation_status_filter(&self) -> &::std::option::Option<crate::types::ConfirmationStatusFilter> {
        &self.confirmation_status_filter
    }
    /// <p>The order by which the results will be sorted.</p>
    pub fn sort(mut self, input: crate::types::ListFilteredTransactionEventsSort) -> Self {
        self.sort = ::std::option::Option::Some(input);
        self
    }
    /// <p>The order by which the results will be sorted.</p>
    pub fn set_sort(mut self, input: ::std::option::Option<crate::types::ListFilteredTransactionEventsSort>) -> Self {
        self.sort = input;
        self
    }
    /// <p>The order by which the results will be sorted.</p>
    pub fn get_sort(&self) -> &::std::option::Option<crate::types::ListFilteredTransactionEventsSort> {
        &self.sort
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of transaction events to list.</p>
    /// <p>Default: <code>100</code></p><note>
    /// <p>Even if additional results can be retrieved, the request can return less results than <code>maxResults</code> or an empty array of results.</p>
    /// <p>To retrieve the next set of results, make another request with the returned <code>nextToken</code> value. The value of <code>nextToken</code> is <code>null</code> when there are no more results to return</p>
    /// </note>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of transaction events to list.</p>
    /// <p>Default: <code>100</code></p><note>
    /// <p>Even if additional results can be retrieved, the request can return less results than <code>maxResults</code> or an empty array of results.</p>
    /// <p>To retrieve the next set of results, make another request with the returned <code>nextToken</code> value. The value of <code>nextToken</code> is <code>null</code> when there are no more results to return</p>
    /// </note>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of transaction events to list.</p>
    /// <p>Default: <code>100</code></p><note>
    /// <p>Even if additional results can be retrieved, the request can return less results than <code>maxResults</code> or an empty array of results.</p>
    /// <p>To retrieve the next set of results, make another request with the returned <code>nextToken</code> value. The value of <code>nextToken</code> is <code>null</code> when there are no more results to return</p>
    /// </note>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListFilteredTransactionEventsInput`](crate::operation::list_filtered_transaction_events::ListFilteredTransactionEventsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_filtered_transaction_events::ListFilteredTransactionEventsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_filtered_transaction_events::ListFilteredTransactionEventsInput {
            network: self.network,
            address_identifier_filter: self.address_identifier_filter,
            time_filter: self.time_filter,
            vout_filter: self.vout_filter,
            confirmation_status_filter: self.confirmation_status_filter,
            sort: self.sort,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
