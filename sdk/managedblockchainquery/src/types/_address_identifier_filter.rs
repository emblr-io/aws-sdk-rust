// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This is the container for the unique public address on the blockchain.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AddressIdentifierFilter {
    /// <p>The container for the recipient address of the transaction.</p>
    pub transaction_event_to_address: ::std::vec::Vec<::std::string::String>,
}
impl AddressIdentifierFilter {
    /// <p>The container for the recipient address of the transaction.</p>
    pub fn transaction_event_to_address(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.transaction_event_to_address.deref()
    }
}
impl AddressIdentifierFilter {
    /// Creates a new builder-style object to manufacture [`AddressIdentifierFilter`](crate::types::AddressIdentifierFilter).
    pub fn builder() -> crate::types::builders::AddressIdentifierFilterBuilder {
        crate::types::builders::AddressIdentifierFilterBuilder::default()
    }
}

/// A builder for [`AddressIdentifierFilter`](crate::types::AddressIdentifierFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AddressIdentifierFilterBuilder {
    pub(crate) transaction_event_to_address: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AddressIdentifierFilterBuilder {
    /// Appends an item to `transaction_event_to_address`.
    ///
    /// To override the contents of this collection use [`set_transaction_event_to_address`](Self::set_transaction_event_to_address).
    ///
    /// <p>The container for the recipient address of the transaction.</p>
    pub fn transaction_event_to_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.transaction_event_to_address.unwrap_or_default();
        v.push(input.into());
        self.transaction_event_to_address = ::std::option::Option::Some(v);
        self
    }
    /// <p>The container for the recipient address of the transaction.</p>
    pub fn set_transaction_event_to_address(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.transaction_event_to_address = input;
        self
    }
    /// <p>The container for the recipient address of the transaction.</p>
    pub fn get_transaction_event_to_address(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.transaction_event_to_address
    }
    /// Consumes the builder and constructs a [`AddressIdentifierFilter`](crate::types::AddressIdentifierFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`transaction_event_to_address`](crate::types::builders::AddressIdentifierFilterBuilder::transaction_event_to_address)
    pub fn build(self) -> ::std::result::Result<crate::types::AddressIdentifierFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AddressIdentifierFilter {
            transaction_event_to_address: self.transaction_event_to_address.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "transaction_event_to_address",
                    "transaction_event_to_address was not specified but it is required when building AddressIdentifierFilter",
                )
            })?,
        })
    }
}
