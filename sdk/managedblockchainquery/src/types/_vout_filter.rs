// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This container specifies filtering attributes related to <code>BITCOIN_VOUT</code> event types</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VoutFilter {
    /// <p>Specifies if the transaction output is spent or unspent.</p>
    pub vout_spent: bool,
}
impl VoutFilter {
    /// <p>Specifies if the transaction output is spent or unspent.</p>
    pub fn vout_spent(&self) -> bool {
        self.vout_spent
    }
}
impl VoutFilter {
    /// Creates a new builder-style object to manufacture [`VoutFilter`](crate::types::VoutFilter).
    pub fn builder() -> crate::types::builders::VoutFilterBuilder {
        crate::types::builders::VoutFilterBuilder::default()
    }
}

/// A builder for [`VoutFilter`](crate::types::VoutFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VoutFilterBuilder {
    pub(crate) vout_spent: ::std::option::Option<bool>,
}
impl VoutFilterBuilder {
    /// <p>Specifies if the transaction output is spent or unspent.</p>
    /// This field is required.
    pub fn vout_spent(mut self, input: bool) -> Self {
        self.vout_spent = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies if the transaction output is spent or unspent.</p>
    pub fn set_vout_spent(mut self, input: ::std::option::Option<bool>) -> Self {
        self.vout_spent = input;
        self
    }
    /// <p>Specifies if the transaction output is spent or unspent.</p>
    pub fn get_vout_spent(&self) -> &::std::option::Option<bool> {
        &self.vout_spent
    }
    /// Consumes the builder and constructs a [`VoutFilter`](crate::types::VoutFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`vout_spent`](crate::types::builders::VoutFilterBuilder::vout_spent)
    pub fn build(self) -> ::std::result::Result<crate::types::VoutFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::VoutFilter {
            vout_spent: self.vout_spent.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "vout_spent",
                    "vout_spent was not specified but it is required when building VoutFilter",
                )
            })?,
        })
    }
}
