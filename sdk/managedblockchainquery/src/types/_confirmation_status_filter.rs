// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The container for the <code>ConfirmationStatusFilter</code> that filters for the <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ambq-dg/key-concepts.html#finality"> <i>finality</i> </a> of the results.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfirmationStatusFilter {
    /// <p>The container to determine whether to list results that have only reached <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ambq-dg/key-concepts.html#finality"> <i>finality</i> </a>. Transactions that have reached finality are always part of the response.</p>
    pub include: ::std::vec::Vec<crate::types::ConfirmationStatus>,
}
impl ConfirmationStatusFilter {
    /// <p>The container to determine whether to list results that have only reached <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ambq-dg/key-concepts.html#finality"> <i>finality</i> </a>. Transactions that have reached finality are always part of the response.</p>
    pub fn include(&self) -> &[crate::types::ConfirmationStatus] {
        use std::ops::Deref;
        self.include.deref()
    }
}
impl ConfirmationStatusFilter {
    /// Creates a new builder-style object to manufacture [`ConfirmationStatusFilter`](crate::types::ConfirmationStatusFilter).
    pub fn builder() -> crate::types::builders::ConfirmationStatusFilterBuilder {
        crate::types::builders::ConfirmationStatusFilterBuilder::default()
    }
}

/// A builder for [`ConfirmationStatusFilter`](crate::types::ConfirmationStatusFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConfirmationStatusFilterBuilder {
    pub(crate) include: ::std::option::Option<::std::vec::Vec<crate::types::ConfirmationStatus>>,
}
impl ConfirmationStatusFilterBuilder {
    /// Appends an item to `include`.
    ///
    /// To override the contents of this collection use [`set_include`](Self::set_include).
    ///
    /// <p>The container to determine whether to list results that have only reached <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ambq-dg/key-concepts.html#finality"> <i>finality</i> </a>. Transactions that have reached finality are always part of the response.</p>
    pub fn include(mut self, input: crate::types::ConfirmationStatus) -> Self {
        let mut v = self.include.unwrap_or_default();
        v.push(input);
        self.include = ::std::option::Option::Some(v);
        self
    }
    /// <p>The container to determine whether to list results that have only reached <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ambq-dg/key-concepts.html#finality"> <i>finality</i> </a>. Transactions that have reached finality are always part of the response.</p>
    pub fn set_include(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ConfirmationStatus>>) -> Self {
        self.include = input;
        self
    }
    /// <p>The container to determine whether to list results that have only reached <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ambq-dg/key-concepts.html#finality"> <i>finality</i> </a>. Transactions that have reached finality are always part of the response.</p>
    pub fn get_include(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ConfirmationStatus>> {
        &self.include
    }
    /// Consumes the builder and constructs a [`ConfirmationStatusFilter`](crate::types::ConfirmationStatusFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`include`](crate::types::builders::ConfirmationStatusFilterBuilder::include)
    pub fn build(self) -> ::std::result::Result<crate::types::ConfirmationStatusFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConfirmationStatusFilter {
            include: self.include.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "include",
                    "include was not specified but it is required when building ConfirmationStatusFilter",
                )
            })?,
        })
    }
}
