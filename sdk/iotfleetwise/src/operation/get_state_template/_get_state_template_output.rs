// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetStateTemplateOutput {
    /// <p>The name of the state template.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the state template.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>A brief description of the state template.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the signal catalog associated with the state template.</p>
    pub signal_catalog_arn: ::std::option::Option<::std::string::String>,
    /// <p>A list of signals from which data is collected. The state template properties contain the fully qualified names of the signals.</p>
    pub state_template_properties: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of vehicle attributes associated with the payload published on the state template's MQTT topic.</p>
    /// <p>Default: An empty array</p>
    pub data_extra_dimensions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of vehicle attributes to associate with user properties of the messages published on the state template's MQTT topic.</p>
    /// <p>Default: An empty array</p>
    pub metadata_extra_dimensions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The time the state template was created in seconds since epoch (January 1, 1970 at midnight UTC time).</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time the state template was last updated in seconds since epoch (January 1, 1970 at midnight UTC time).</p>
    pub last_modification_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The unique ID of the state template.</p>
    pub id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetStateTemplateOutput {
    /// <p>The name of the state template.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the state template.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A brief description of the state template.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ARN of the signal catalog associated with the state template.</p>
    pub fn signal_catalog_arn(&self) -> ::std::option::Option<&str> {
        self.signal_catalog_arn.as_deref()
    }
    /// <p>A list of signals from which data is collected. The state template properties contain the fully qualified names of the signals.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.state_template_properties.is_none()`.
    pub fn state_template_properties(&self) -> &[::std::string::String] {
        self.state_template_properties.as_deref().unwrap_or_default()
    }
    /// <p>A list of vehicle attributes associated with the payload published on the state template's MQTT topic.</p>
    /// <p>Default: An empty array</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.data_extra_dimensions.is_none()`.
    pub fn data_extra_dimensions(&self) -> &[::std::string::String] {
        self.data_extra_dimensions.as_deref().unwrap_or_default()
    }
    /// <p>A list of vehicle attributes to associate with user properties of the messages published on the state template's MQTT topic.</p>
    /// <p>Default: An empty array</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metadata_extra_dimensions.is_none()`.
    pub fn metadata_extra_dimensions(&self) -> &[::std::string::String] {
        self.metadata_extra_dimensions.as_deref().unwrap_or_default()
    }
    /// <p>The time the state template was created in seconds since epoch (January 1, 1970 at midnight UTC time).</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The time the state template was last updated in seconds since epoch (January 1, 1970 at midnight UTC time).</p>
    pub fn last_modification_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modification_time.as_ref()
    }
    /// <p>The unique ID of the state template.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetStateTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetStateTemplateOutput {
    /// Creates a new builder-style object to manufacture [`GetStateTemplateOutput`](crate::operation::get_state_template::GetStateTemplateOutput).
    pub fn builder() -> crate::operation::get_state_template::builders::GetStateTemplateOutputBuilder {
        crate::operation::get_state_template::builders::GetStateTemplateOutputBuilder::default()
    }
}

/// A builder for [`GetStateTemplateOutput`](crate::operation::get_state_template::GetStateTemplateOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetStateTemplateOutputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) signal_catalog_arn: ::std::option::Option<::std::string::String>,
    pub(crate) state_template_properties: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) data_extra_dimensions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) metadata_extra_dimensions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modification_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetStateTemplateOutputBuilder {
    /// <p>The name of the state template.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the state template.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the state template.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the state template.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the state template.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the state template.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>A brief description of the state template.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A brief description of the state template.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A brief description of the state template.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The ARN of the signal catalog associated with the state template.</p>
    pub fn signal_catalog_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.signal_catalog_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the signal catalog associated with the state template.</p>
    pub fn set_signal_catalog_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.signal_catalog_arn = input;
        self
    }
    /// <p>The ARN of the signal catalog associated with the state template.</p>
    pub fn get_signal_catalog_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.signal_catalog_arn
    }
    /// Appends an item to `state_template_properties`.
    ///
    /// To override the contents of this collection use [`set_state_template_properties`](Self::set_state_template_properties).
    ///
    /// <p>A list of signals from which data is collected. The state template properties contain the fully qualified names of the signals.</p>
    pub fn state_template_properties(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.state_template_properties.unwrap_or_default();
        v.push(input.into());
        self.state_template_properties = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of signals from which data is collected. The state template properties contain the fully qualified names of the signals.</p>
    pub fn set_state_template_properties(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.state_template_properties = input;
        self
    }
    /// <p>A list of signals from which data is collected. The state template properties contain the fully qualified names of the signals.</p>
    pub fn get_state_template_properties(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.state_template_properties
    }
    /// Appends an item to `data_extra_dimensions`.
    ///
    /// To override the contents of this collection use [`set_data_extra_dimensions`](Self::set_data_extra_dimensions).
    ///
    /// <p>A list of vehicle attributes associated with the payload published on the state template's MQTT topic.</p>
    /// <p>Default: An empty array</p>
    pub fn data_extra_dimensions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.data_extra_dimensions.unwrap_or_default();
        v.push(input.into());
        self.data_extra_dimensions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of vehicle attributes associated with the payload published on the state template's MQTT topic.</p>
    /// <p>Default: An empty array</p>
    pub fn set_data_extra_dimensions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.data_extra_dimensions = input;
        self
    }
    /// <p>A list of vehicle attributes associated with the payload published on the state template's MQTT topic.</p>
    /// <p>Default: An empty array</p>
    pub fn get_data_extra_dimensions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.data_extra_dimensions
    }
    /// Appends an item to `metadata_extra_dimensions`.
    ///
    /// To override the contents of this collection use [`set_metadata_extra_dimensions`](Self::set_metadata_extra_dimensions).
    ///
    /// <p>A list of vehicle attributes to associate with user properties of the messages published on the state template's MQTT topic.</p>
    /// <p>Default: An empty array</p>
    pub fn metadata_extra_dimensions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.metadata_extra_dimensions.unwrap_or_default();
        v.push(input.into());
        self.metadata_extra_dimensions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of vehicle attributes to associate with user properties of the messages published on the state template's MQTT topic.</p>
    /// <p>Default: An empty array</p>
    pub fn set_metadata_extra_dimensions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.metadata_extra_dimensions = input;
        self
    }
    /// <p>A list of vehicle attributes to associate with user properties of the messages published on the state template's MQTT topic.</p>
    /// <p>Default: An empty array</p>
    pub fn get_metadata_extra_dimensions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.metadata_extra_dimensions
    }
    /// <p>The time the state template was created in seconds since epoch (January 1, 1970 at midnight UTC time).</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the state template was created in seconds since epoch (January 1, 1970 at midnight UTC time).</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time the state template was created in seconds since epoch (January 1, 1970 at midnight UTC time).</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The time the state template was last updated in seconds since epoch (January 1, 1970 at midnight UTC time).</p>
    pub fn last_modification_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modification_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the state template was last updated in seconds since epoch (January 1, 1970 at midnight UTC time).</p>
    pub fn set_last_modification_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modification_time = input;
        self
    }
    /// <p>The time the state template was last updated in seconds since epoch (January 1, 1970 at midnight UTC time).</p>
    pub fn get_last_modification_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modification_time
    }
    /// <p>The unique ID of the state template.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the state template.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique ID of the state template.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetStateTemplateOutput`](crate::operation::get_state_template::GetStateTemplateOutput).
    pub fn build(self) -> crate::operation::get_state_template::GetStateTemplateOutput {
        crate::operation::get_state_template::GetStateTemplateOutput {
            name: self.name,
            arn: self.arn,
            description: self.description,
            signal_catalog_arn: self.signal_catalog_arn,
            state_template_properties: self.state_template_properties,
            data_extra_dimensions: self.data_extra_dimensions,
            metadata_extra_dimensions: self.metadata_extra_dimensions,
            creation_time: self.creation_time,
            last_modification_time: self.last_modification_time,
            id: self.id,
            _request_id: self._request_id,
        }
    }
}
