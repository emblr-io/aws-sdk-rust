// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateStateTemplateInput {
    /// <p>The unique ID of the state template.</p>
    pub identifier: ::std::option::Option<::std::string::String>,
    /// <p>A brief description of the state template.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Add signals from which data is collected as part of the state template.</p>
    pub state_template_properties_to_add: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Remove signals from which data is collected as part of the state template.</p>
    pub state_template_properties_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of vehicle attributes to associate with the payload published on the state template's MQTT topic. (See <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/process-visualize-data.html#process-last-known-state-vehicle-data"> Processing last known state vehicle data using MQTT messaging</a>). For example, if you add <code>Vehicle.Attributes.Make</code> and <code>Vehicle.Attributes.Model</code> attributes, Amazon Web Services IoT FleetWise will enrich the protobuf encoded payload with those attributes in the <code>extraDimensions</code> field.</p>
    /// <p>Default: An empty array</p>
    pub data_extra_dimensions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of vehicle attributes to associate with user properties of the messages published on the state template's MQTT topic. (See <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/process-visualize-data.html#process-last-known-state-vehicle-data"> Processing last known state vehicle data using MQTT messaging</a>). For example, if you add <code>Vehicle.Attributes.Make</code> and <code>Vehicle.Attributes.Model</code> attributes, Amazon Web Services IoT FleetWise will include these attributes as User Properties with the MQTT message.</p>
    pub metadata_extra_dimensions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateStateTemplateInput {
    /// <p>The unique ID of the state template.</p>
    pub fn identifier(&self) -> ::std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>A brief description of the state template.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Add signals from which data is collected as part of the state template.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.state_template_properties_to_add.is_none()`.
    pub fn state_template_properties_to_add(&self) -> &[::std::string::String] {
        self.state_template_properties_to_add.as_deref().unwrap_or_default()
    }
    /// <p>Remove signals from which data is collected as part of the state template.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.state_template_properties_to_remove.is_none()`.
    pub fn state_template_properties_to_remove(&self) -> &[::std::string::String] {
        self.state_template_properties_to_remove.as_deref().unwrap_or_default()
    }
    /// <p>A list of vehicle attributes to associate with the payload published on the state template's MQTT topic. (See <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/process-visualize-data.html#process-last-known-state-vehicle-data"> Processing last known state vehicle data using MQTT messaging</a>). For example, if you add <code>Vehicle.Attributes.Make</code> and <code>Vehicle.Attributes.Model</code> attributes, Amazon Web Services IoT FleetWise will enrich the protobuf encoded payload with those attributes in the <code>extraDimensions</code> field.</p>
    /// <p>Default: An empty array</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.data_extra_dimensions.is_none()`.
    pub fn data_extra_dimensions(&self) -> &[::std::string::String] {
        self.data_extra_dimensions.as_deref().unwrap_or_default()
    }
    /// <p>A list of vehicle attributes to associate with user properties of the messages published on the state template's MQTT topic. (See <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/process-visualize-data.html#process-last-known-state-vehicle-data"> Processing last known state vehicle data using MQTT messaging</a>). For example, if you add <code>Vehicle.Attributes.Make</code> and <code>Vehicle.Attributes.Model</code> attributes, Amazon Web Services IoT FleetWise will include these attributes as User Properties with the MQTT message.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metadata_extra_dimensions.is_none()`.
    pub fn metadata_extra_dimensions(&self) -> &[::std::string::String] {
        self.metadata_extra_dimensions.as_deref().unwrap_or_default()
    }
}
impl UpdateStateTemplateInput {
    /// Creates a new builder-style object to manufacture [`UpdateStateTemplateInput`](crate::operation::update_state_template::UpdateStateTemplateInput).
    pub fn builder() -> crate::operation::update_state_template::builders::UpdateStateTemplateInputBuilder {
        crate::operation::update_state_template::builders::UpdateStateTemplateInputBuilder::default()
    }
}

/// A builder for [`UpdateStateTemplateInput`](crate::operation::update_state_template::UpdateStateTemplateInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateStateTemplateInputBuilder {
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) state_template_properties_to_add: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) state_template_properties_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) data_extra_dimensions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) metadata_extra_dimensions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateStateTemplateInputBuilder {
    /// <p>The unique ID of the state template.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the state template.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The unique ID of the state template.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>A brief description of the state template.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A brief description of the state template.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A brief description of the state template.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `state_template_properties_to_add`.
    ///
    /// To override the contents of this collection use [`set_state_template_properties_to_add`](Self::set_state_template_properties_to_add).
    ///
    /// <p>Add signals from which data is collected as part of the state template.</p>
    pub fn state_template_properties_to_add(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.state_template_properties_to_add.unwrap_or_default();
        v.push(input.into());
        self.state_template_properties_to_add = ::std::option::Option::Some(v);
        self
    }
    /// <p>Add signals from which data is collected as part of the state template.</p>
    pub fn set_state_template_properties_to_add(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.state_template_properties_to_add = input;
        self
    }
    /// <p>Add signals from which data is collected as part of the state template.</p>
    pub fn get_state_template_properties_to_add(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.state_template_properties_to_add
    }
    /// Appends an item to `state_template_properties_to_remove`.
    ///
    /// To override the contents of this collection use [`set_state_template_properties_to_remove`](Self::set_state_template_properties_to_remove).
    ///
    /// <p>Remove signals from which data is collected as part of the state template.</p>
    pub fn state_template_properties_to_remove(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.state_template_properties_to_remove.unwrap_or_default();
        v.push(input.into());
        self.state_template_properties_to_remove = ::std::option::Option::Some(v);
        self
    }
    /// <p>Remove signals from which data is collected as part of the state template.</p>
    pub fn set_state_template_properties_to_remove(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.state_template_properties_to_remove = input;
        self
    }
    /// <p>Remove signals from which data is collected as part of the state template.</p>
    pub fn get_state_template_properties_to_remove(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.state_template_properties_to_remove
    }
    /// Appends an item to `data_extra_dimensions`.
    ///
    /// To override the contents of this collection use [`set_data_extra_dimensions`](Self::set_data_extra_dimensions).
    ///
    /// <p>A list of vehicle attributes to associate with the payload published on the state template's MQTT topic. (See <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/process-visualize-data.html#process-last-known-state-vehicle-data"> Processing last known state vehicle data using MQTT messaging</a>). For example, if you add <code>Vehicle.Attributes.Make</code> and <code>Vehicle.Attributes.Model</code> attributes, Amazon Web Services IoT FleetWise will enrich the protobuf encoded payload with those attributes in the <code>extraDimensions</code> field.</p>
    /// <p>Default: An empty array</p>
    pub fn data_extra_dimensions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.data_extra_dimensions.unwrap_or_default();
        v.push(input.into());
        self.data_extra_dimensions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of vehicle attributes to associate with the payload published on the state template's MQTT topic. (See <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/process-visualize-data.html#process-last-known-state-vehicle-data"> Processing last known state vehicle data using MQTT messaging</a>). For example, if you add <code>Vehicle.Attributes.Make</code> and <code>Vehicle.Attributes.Model</code> attributes, Amazon Web Services IoT FleetWise will enrich the protobuf encoded payload with those attributes in the <code>extraDimensions</code> field.</p>
    /// <p>Default: An empty array</p>
    pub fn set_data_extra_dimensions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.data_extra_dimensions = input;
        self
    }
    /// <p>A list of vehicle attributes to associate with the payload published on the state template's MQTT topic. (See <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/process-visualize-data.html#process-last-known-state-vehicle-data"> Processing last known state vehicle data using MQTT messaging</a>). For example, if you add <code>Vehicle.Attributes.Make</code> and <code>Vehicle.Attributes.Model</code> attributes, Amazon Web Services IoT FleetWise will enrich the protobuf encoded payload with those attributes in the <code>extraDimensions</code> field.</p>
    /// <p>Default: An empty array</p>
    pub fn get_data_extra_dimensions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.data_extra_dimensions
    }
    /// Appends an item to `metadata_extra_dimensions`.
    ///
    /// To override the contents of this collection use [`set_metadata_extra_dimensions`](Self::set_metadata_extra_dimensions).
    ///
    /// <p>A list of vehicle attributes to associate with user properties of the messages published on the state template's MQTT topic. (See <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/process-visualize-data.html#process-last-known-state-vehicle-data"> Processing last known state vehicle data using MQTT messaging</a>). For example, if you add <code>Vehicle.Attributes.Make</code> and <code>Vehicle.Attributes.Model</code> attributes, Amazon Web Services IoT FleetWise will include these attributes as User Properties with the MQTT message.</p>
    pub fn metadata_extra_dimensions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.metadata_extra_dimensions.unwrap_or_default();
        v.push(input.into());
        self.metadata_extra_dimensions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of vehicle attributes to associate with user properties of the messages published on the state template's MQTT topic. (See <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/process-visualize-data.html#process-last-known-state-vehicle-data"> Processing last known state vehicle data using MQTT messaging</a>). For example, if you add <code>Vehicle.Attributes.Make</code> and <code>Vehicle.Attributes.Model</code> attributes, Amazon Web Services IoT FleetWise will include these attributes as User Properties with the MQTT message.</p>
    pub fn set_metadata_extra_dimensions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.metadata_extra_dimensions = input;
        self
    }
    /// <p>A list of vehicle attributes to associate with user properties of the messages published on the state template's MQTT topic. (See <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/process-visualize-data.html#process-last-known-state-vehicle-data"> Processing last known state vehicle data using MQTT messaging</a>). For example, if you add <code>Vehicle.Attributes.Make</code> and <code>Vehicle.Attributes.Model</code> attributes, Amazon Web Services IoT FleetWise will include these attributes as User Properties with the MQTT message.</p>
    pub fn get_metadata_extra_dimensions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.metadata_extra_dimensions
    }
    /// Consumes the builder and constructs a [`UpdateStateTemplateInput`](crate::operation::update_state_template::UpdateStateTemplateInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_state_template::UpdateStateTemplateInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_state_template::UpdateStateTemplateInput {
            identifier: self.identifier,
            description: self.description,
            state_template_properties_to_add: self.state_template_properties_to_add,
            state_template_properties_to_remove: self.state_template_properties_to_remove,
            data_extra_dimensions: self.data_extra_dimensions,
            metadata_extra_dimensions: self.metadata_extra_dimensions,
        })
    }
}
