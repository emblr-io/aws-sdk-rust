// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of the signal fetch operation.</p><important>
/// <p>Access to certain Amazon Web Services IoT FleetWise features is currently gated. For more information, see <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/fleetwise-regions.html">Amazon Web Services Region and feature availability</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>
/// </important>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum SignalFetchConfig {
    /// <p>The configuration of a condition-based signal fetch operation.</p>
    ConditionBased(crate::types::ConditionBasedSignalFetchConfig),
    /// <p>The configuration of a time-based signal fetch operation.</p>
    TimeBased(crate::types::TimeBasedSignalFetchConfig),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl SignalFetchConfig {
    /// Tries to convert the enum instance into [`ConditionBased`](crate::types::SignalFetchConfig::ConditionBased), extracting the inner [`ConditionBasedSignalFetchConfig`](crate::types::ConditionBasedSignalFetchConfig).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_condition_based(&self) -> ::std::result::Result<&crate::types::ConditionBasedSignalFetchConfig, &Self> {
        if let SignalFetchConfig::ConditionBased(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ConditionBased`](crate::types::SignalFetchConfig::ConditionBased).
    pub fn is_condition_based(&self) -> bool {
        self.as_condition_based().is_ok()
    }
    /// Tries to convert the enum instance into [`TimeBased`](crate::types::SignalFetchConfig::TimeBased), extracting the inner [`TimeBasedSignalFetchConfig`](crate::types::TimeBasedSignalFetchConfig).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_time_based(&self) -> ::std::result::Result<&crate::types::TimeBasedSignalFetchConfig, &Self> {
        if let SignalFetchConfig::TimeBased(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`TimeBased`](crate::types::SignalFetchConfig::TimeBased).
    pub fn is_time_based(&self) -> bool {
        self.as_time_based().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
