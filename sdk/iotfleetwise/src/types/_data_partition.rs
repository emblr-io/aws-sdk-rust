// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for signal data storage and upload options. You can only specify these options when the campaign's spooling mode is <code>TO_DISK</code>.</p><important>
/// <p>Access to certain Amazon Web Services IoT FleetWise features is currently gated. For more information, see <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/fleetwise-regions.html">Amazon Web Services Region and feature availability</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>
/// </important>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataPartition {
    /// <p>The ID of the data partition. The data partition ID must be unique within a campaign. You can establish a data partition as the default partition for a campaign by using <code>default</code> as the ID.</p>
    pub id: ::std::string::String,
    /// <p>The storage options for a data partition.</p>
    pub storage_options: ::std::option::Option<crate::types::DataPartitionStorageOptions>,
    /// <p>The upload options for the data partition.</p>
    pub upload_options: ::std::option::Option<crate::types::DataPartitionUploadOptions>,
}
impl DataPartition {
    /// <p>The ID of the data partition. The data partition ID must be unique within a campaign. You can establish a data partition as the default partition for a campaign by using <code>default</code> as the ID.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The storage options for a data partition.</p>
    pub fn storage_options(&self) -> ::std::option::Option<&crate::types::DataPartitionStorageOptions> {
        self.storage_options.as_ref()
    }
    /// <p>The upload options for the data partition.</p>
    pub fn upload_options(&self) -> ::std::option::Option<&crate::types::DataPartitionUploadOptions> {
        self.upload_options.as_ref()
    }
}
impl DataPartition {
    /// Creates a new builder-style object to manufacture [`DataPartition`](crate::types::DataPartition).
    pub fn builder() -> crate::types::builders::DataPartitionBuilder {
        crate::types::builders::DataPartitionBuilder::default()
    }
}

/// A builder for [`DataPartition`](crate::types::DataPartition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataPartitionBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) storage_options: ::std::option::Option<crate::types::DataPartitionStorageOptions>,
    pub(crate) upload_options: ::std::option::Option<crate::types::DataPartitionUploadOptions>,
}
impl DataPartitionBuilder {
    /// <p>The ID of the data partition. The data partition ID must be unique within a campaign. You can establish a data partition as the default partition for a campaign by using <code>default</code> as the ID.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the data partition. The data partition ID must be unique within a campaign. You can establish a data partition as the default partition for a campaign by using <code>default</code> as the ID.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the data partition. The data partition ID must be unique within a campaign. You can establish a data partition as the default partition for a campaign by using <code>default</code> as the ID.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The storage options for a data partition.</p>
    /// This field is required.
    pub fn storage_options(mut self, input: crate::types::DataPartitionStorageOptions) -> Self {
        self.storage_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The storage options for a data partition.</p>
    pub fn set_storage_options(mut self, input: ::std::option::Option<crate::types::DataPartitionStorageOptions>) -> Self {
        self.storage_options = input;
        self
    }
    /// <p>The storage options for a data partition.</p>
    pub fn get_storage_options(&self) -> &::std::option::Option<crate::types::DataPartitionStorageOptions> {
        &self.storage_options
    }
    /// <p>The upload options for the data partition.</p>
    pub fn upload_options(mut self, input: crate::types::DataPartitionUploadOptions) -> Self {
        self.upload_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The upload options for the data partition.</p>
    pub fn set_upload_options(mut self, input: ::std::option::Option<crate::types::DataPartitionUploadOptions>) -> Self {
        self.upload_options = input;
        self
    }
    /// <p>The upload options for the data partition.</p>
    pub fn get_upload_options(&self) -> &::std::option::Option<crate::types::DataPartitionUploadOptions> {
        &self.upload_options
    }
    /// Consumes the builder and constructs a [`DataPartition`](crate::types::DataPartition).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::DataPartitionBuilder::id)
    pub fn build(self) -> ::std::result::Result<crate::types::DataPartition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataPartition {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building DataPartition",
                )
            })?,
            storage_options: self.storage_options,
            upload_options: self.upload_options,
        })
    }
}
