// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a signal.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SignalInformation {
    /// <p>The name of the signal.</p>
    pub name: ::std::string::String,
    /// <p>The maximum number of samples to collect.</p>
    pub max_sample_count: ::std::option::Option<i64>,
    /// <p>The minimum duration of time (in milliseconds) between two triggering events to collect data.</p><note>
    /// <p>If a signal changes often, you might want to collect data at a slower rate.</p>
    /// </note>
    pub minimum_sampling_interval_ms: ::std::option::Option<i64>,
    /// <p>The ID of the data partition this signal is associated with.</p>
    /// <p>The ID must match one of the IDs provided in <code>dataPartitions</code>. This is accomplished either by specifying a particular data partition ID or by using <code>default</code> for an established default partition. You can establish a default partition in the <code>DataPartition</code> data type.</p><note>
    /// <p>If you upload a signal as a condition for a campaign's data partition, the same signal must be included in <code>signalsToCollect</code>.</p>
    /// </note> <important>
    /// <p>Access to certain Amazon Web Services IoT FleetWise features is currently gated. For more information, see <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/fleetwise-regions.html">Amazon Web Services Region and feature availability</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>
    /// </important>
    pub data_partition_id: ::std::option::Option<::std::string::String>,
}
impl SignalInformation {
    /// <p>The name of the signal.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The maximum number of samples to collect.</p>
    pub fn max_sample_count(&self) -> ::std::option::Option<i64> {
        self.max_sample_count
    }
    /// <p>The minimum duration of time (in milliseconds) between two triggering events to collect data.</p><note>
    /// <p>If a signal changes often, you might want to collect data at a slower rate.</p>
    /// </note>
    pub fn minimum_sampling_interval_ms(&self) -> ::std::option::Option<i64> {
        self.minimum_sampling_interval_ms
    }
    /// <p>The ID of the data partition this signal is associated with.</p>
    /// <p>The ID must match one of the IDs provided in <code>dataPartitions</code>. This is accomplished either by specifying a particular data partition ID or by using <code>default</code> for an established default partition. You can establish a default partition in the <code>DataPartition</code> data type.</p><note>
    /// <p>If you upload a signal as a condition for a campaign's data partition, the same signal must be included in <code>signalsToCollect</code>.</p>
    /// </note> <important>
    /// <p>Access to certain Amazon Web Services IoT FleetWise features is currently gated. For more information, see <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/fleetwise-regions.html">Amazon Web Services Region and feature availability</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>
    /// </important>
    pub fn data_partition_id(&self) -> ::std::option::Option<&str> {
        self.data_partition_id.as_deref()
    }
}
impl SignalInformation {
    /// Creates a new builder-style object to manufacture [`SignalInformation`](crate::types::SignalInformation).
    pub fn builder() -> crate::types::builders::SignalInformationBuilder {
        crate::types::builders::SignalInformationBuilder::default()
    }
}

/// A builder for [`SignalInformation`](crate::types::SignalInformation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SignalInformationBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) max_sample_count: ::std::option::Option<i64>,
    pub(crate) minimum_sampling_interval_ms: ::std::option::Option<i64>,
    pub(crate) data_partition_id: ::std::option::Option<::std::string::String>,
}
impl SignalInformationBuilder {
    /// <p>The name of the signal.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the signal.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the signal.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The maximum number of samples to collect.</p>
    pub fn max_sample_count(mut self, input: i64) -> Self {
        self.max_sample_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of samples to collect.</p>
    pub fn set_max_sample_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.max_sample_count = input;
        self
    }
    /// <p>The maximum number of samples to collect.</p>
    pub fn get_max_sample_count(&self) -> &::std::option::Option<i64> {
        &self.max_sample_count
    }
    /// <p>The minimum duration of time (in milliseconds) between two triggering events to collect data.</p><note>
    /// <p>If a signal changes often, you might want to collect data at a slower rate.</p>
    /// </note>
    pub fn minimum_sampling_interval_ms(mut self, input: i64) -> Self {
        self.minimum_sampling_interval_ms = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum duration of time (in milliseconds) between two triggering events to collect data.</p><note>
    /// <p>If a signal changes often, you might want to collect data at a slower rate.</p>
    /// </note>
    pub fn set_minimum_sampling_interval_ms(mut self, input: ::std::option::Option<i64>) -> Self {
        self.minimum_sampling_interval_ms = input;
        self
    }
    /// <p>The minimum duration of time (in milliseconds) between two triggering events to collect data.</p><note>
    /// <p>If a signal changes often, you might want to collect data at a slower rate.</p>
    /// </note>
    pub fn get_minimum_sampling_interval_ms(&self) -> &::std::option::Option<i64> {
        &self.minimum_sampling_interval_ms
    }
    /// <p>The ID of the data partition this signal is associated with.</p>
    /// <p>The ID must match one of the IDs provided in <code>dataPartitions</code>. This is accomplished either by specifying a particular data partition ID or by using <code>default</code> for an established default partition. You can establish a default partition in the <code>DataPartition</code> data type.</p><note>
    /// <p>If you upload a signal as a condition for a campaign's data partition, the same signal must be included in <code>signalsToCollect</code>.</p>
    /// </note> <important>
    /// <p>Access to certain Amazon Web Services IoT FleetWise features is currently gated. For more information, see <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/fleetwise-regions.html">Amazon Web Services Region and feature availability</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>
    /// </important>
    pub fn data_partition_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_partition_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the data partition this signal is associated with.</p>
    /// <p>The ID must match one of the IDs provided in <code>dataPartitions</code>. This is accomplished either by specifying a particular data partition ID or by using <code>default</code> for an established default partition. You can establish a default partition in the <code>DataPartition</code> data type.</p><note>
    /// <p>If you upload a signal as a condition for a campaign's data partition, the same signal must be included in <code>signalsToCollect</code>.</p>
    /// </note> <important>
    /// <p>Access to certain Amazon Web Services IoT FleetWise features is currently gated. For more information, see <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/fleetwise-regions.html">Amazon Web Services Region and feature availability</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>
    /// </important>
    pub fn set_data_partition_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_partition_id = input;
        self
    }
    /// <p>The ID of the data partition this signal is associated with.</p>
    /// <p>The ID must match one of the IDs provided in <code>dataPartitions</code>. This is accomplished either by specifying a particular data partition ID or by using <code>default</code> for an established default partition. You can establish a default partition in the <code>DataPartition</code> data type.</p><note>
    /// <p>If you upload a signal as a condition for a campaign's data partition, the same signal must be included in <code>signalsToCollect</code>.</p>
    /// </note> <important>
    /// <p>Access to certain Amazon Web Services IoT FleetWise features is currently gated. For more information, see <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/fleetwise-regions.html">Amazon Web Services Region and feature availability</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>
    /// </important>
    pub fn get_data_partition_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_partition_id
    }
    /// Consumes the builder and constructs a [`SignalInformation`](crate::types::SignalInformation).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::SignalInformationBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::SignalInformation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SignalInformation {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building SignalInformation",
                )
            })?,
            max_sample_count: self.max_sample_count,
            minimum_sampling_interval_ms: self.minimum_sampling_interval_ms,
            data_partition_id: self.data_partition_id,
        })
    }
}
