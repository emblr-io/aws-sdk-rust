// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the vehicle to update.</p><important>
/// <p>Access to certain Amazon Web Services IoT FleetWise features is currently gated. For more information, see <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/fleetwise-regions.html">Amazon Web Services Region and feature availability</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>
/// </important>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateVehicleRequestItem {
    /// <p>The unique ID of the vehicle to update.</p>
    pub vehicle_name: ::std::string::String,
    /// <p>The ARN of the vehicle model (model manifest) associated with the vehicle to update.</p>
    pub model_manifest_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the signal decoder manifest associated with the vehicle to update.</p>
    pub decoder_manifest_arn: ::std::option::Option<::std::string::String>,
    /// <p>Static information about a vehicle in a key-value pair. For example:</p>
    /// <p><code>"engineType"</code> : <code>"1.3 L R2"</code></p>
    pub attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The method the specified attributes will update the existing attributes on the vehicle. Use<code>Overwite</code> to replace the vehicle attributes with the specified attributes. Or use <code>Merge</code> to combine all attributes.</p>
    /// <p>This is required if attributes are present in the input.</p>
    pub attribute_update_mode: ::std::option::Option<crate::types::UpdateMode>,
    /// <p>Associate additional state templates to track the state of the vehicle. State templates determine which signal updates the vehicle sends to the cloud.</p>
    pub state_templates_to_add: ::std::option::Option<::std::vec::Vec<crate::types::StateTemplateAssociation>>,
    /// <p>Remove existing state template associations from the vehicle.</p>
    pub state_templates_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Change the <code>stateTemplateUpdateStrategy</code> of state templates already associated with the vehicle.</p>
    pub state_templates_to_update: ::std::option::Option<::std::vec::Vec<crate::types::StateTemplateAssociation>>,
}
impl UpdateVehicleRequestItem {
    /// <p>The unique ID of the vehicle to update.</p>
    pub fn vehicle_name(&self) -> &str {
        use std::ops::Deref;
        self.vehicle_name.deref()
    }
    /// <p>The ARN of the vehicle model (model manifest) associated with the vehicle to update.</p>
    pub fn model_manifest_arn(&self) -> ::std::option::Option<&str> {
        self.model_manifest_arn.as_deref()
    }
    /// <p>The ARN of the signal decoder manifest associated with the vehicle to update.</p>
    pub fn decoder_manifest_arn(&self) -> ::std::option::Option<&str> {
        self.decoder_manifest_arn.as_deref()
    }
    /// <p>Static information about a vehicle in a key-value pair. For example:</p>
    /// <p><code>"engineType"</code> : <code>"1.3 L R2"</code></p>
    pub fn attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.attributes.as_ref()
    }
    /// <p>The method the specified attributes will update the existing attributes on the vehicle. Use<code>Overwite</code> to replace the vehicle attributes with the specified attributes. Or use <code>Merge</code> to combine all attributes.</p>
    /// <p>This is required if attributes are present in the input.</p>
    pub fn attribute_update_mode(&self) -> ::std::option::Option<&crate::types::UpdateMode> {
        self.attribute_update_mode.as_ref()
    }
    /// <p>Associate additional state templates to track the state of the vehicle. State templates determine which signal updates the vehicle sends to the cloud.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.state_templates_to_add.is_none()`.
    pub fn state_templates_to_add(&self) -> &[crate::types::StateTemplateAssociation] {
        self.state_templates_to_add.as_deref().unwrap_or_default()
    }
    /// <p>Remove existing state template associations from the vehicle.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.state_templates_to_remove.is_none()`.
    pub fn state_templates_to_remove(&self) -> &[::std::string::String] {
        self.state_templates_to_remove.as_deref().unwrap_or_default()
    }
    /// <p>Change the <code>stateTemplateUpdateStrategy</code> of state templates already associated with the vehicle.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.state_templates_to_update.is_none()`.
    pub fn state_templates_to_update(&self) -> &[crate::types::StateTemplateAssociation] {
        self.state_templates_to_update.as_deref().unwrap_or_default()
    }
}
impl UpdateVehicleRequestItem {
    /// Creates a new builder-style object to manufacture [`UpdateVehicleRequestItem`](crate::types::UpdateVehicleRequestItem).
    pub fn builder() -> crate::types::builders::UpdateVehicleRequestItemBuilder {
        crate::types::builders::UpdateVehicleRequestItemBuilder::default()
    }
}

/// A builder for [`UpdateVehicleRequestItem`](crate::types::UpdateVehicleRequestItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateVehicleRequestItemBuilder {
    pub(crate) vehicle_name: ::std::option::Option<::std::string::String>,
    pub(crate) model_manifest_arn: ::std::option::Option<::std::string::String>,
    pub(crate) decoder_manifest_arn: ::std::option::Option<::std::string::String>,
    pub(crate) attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) attribute_update_mode: ::std::option::Option<crate::types::UpdateMode>,
    pub(crate) state_templates_to_add: ::std::option::Option<::std::vec::Vec<crate::types::StateTemplateAssociation>>,
    pub(crate) state_templates_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) state_templates_to_update: ::std::option::Option<::std::vec::Vec<crate::types::StateTemplateAssociation>>,
}
impl UpdateVehicleRequestItemBuilder {
    /// <p>The unique ID of the vehicle to update.</p>
    /// This field is required.
    pub fn vehicle_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vehicle_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the vehicle to update.</p>
    pub fn set_vehicle_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vehicle_name = input;
        self
    }
    /// <p>The unique ID of the vehicle to update.</p>
    pub fn get_vehicle_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vehicle_name
    }
    /// <p>The ARN of the vehicle model (model manifest) associated with the vehicle to update.</p>
    pub fn model_manifest_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_manifest_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the vehicle model (model manifest) associated with the vehicle to update.</p>
    pub fn set_model_manifest_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_manifest_arn = input;
        self
    }
    /// <p>The ARN of the vehicle model (model manifest) associated with the vehicle to update.</p>
    pub fn get_model_manifest_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_manifest_arn
    }
    /// <p>The ARN of the signal decoder manifest associated with the vehicle to update.</p>
    pub fn decoder_manifest_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.decoder_manifest_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the signal decoder manifest associated with the vehicle to update.</p>
    pub fn set_decoder_manifest_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.decoder_manifest_arn = input;
        self
    }
    /// <p>The ARN of the signal decoder manifest associated with the vehicle to update.</p>
    pub fn get_decoder_manifest_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.decoder_manifest_arn
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>Static information about a vehicle in a key-value pair. For example:</p>
    /// <p><code>"engineType"</code> : <code>"1.3 L R2"</code></p>
    pub fn attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Static information about a vehicle in a key-value pair. For example:</p>
    /// <p><code>"engineType"</code> : <code>"1.3 L R2"</code></p>
    pub fn set_attributes(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.attributes = input;
        self
    }
    /// <p>Static information about a vehicle in a key-value pair. For example:</p>
    /// <p><code>"engineType"</code> : <code>"1.3 L R2"</code></p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.attributes
    }
    /// <p>The method the specified attributes will update the existing attributes on the vehicle. Use<code>Overwite</code> to replace the vehicle attributes with the specified attributes. Or use <code>Merge</code> to combine all attributes.</p>
    /// <p>This is required if attributes are present in the input.</p>
    pub fn attribute_update_mode(mut self, input: crate::types::UpdateMode) -> Self {
        self.attribute_update_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The method the specified attributes will update the existing attributes on the vehicle. Use<code>Overwite</code> to replace the vehicle attributes with the specified attributes. Or use <code>Merge</code> to combine all attributes.</p>
    /// <p>This is required if attributes are present in the input.</p>
    pub fn set_attribute_update_mode(mut self, input: ::std::option::Option<crate::types::UpdateMode>) -> Self {
        self.attribute_update_mode = input;
        self
    }
    /// <p>The method the specified attributes will update the existing attributes on the vehicle. Use<code>Overwite</code> to replace the vehicle attributes with the specified attributes. Or use <code>Merge</code> to combine all attributes.</p>
    /// <p>This is required if attributes are present in the input.</p>
    pub fn get_attribute_update_mode(&self) -> &::std::option::Option<crate::types::UpdateMode> {
        &self.attribute_update_mode
    }
    /// Appends an item to `state_templates_to_add`.
    ///
    /// To override the contents of this collection use [`set_state_templates_to_add`](Self::set_state_templates_to_add).
    ///
    /// <p>Associate additional state templates to track the state of the vehicle. State templates determine which signal updates the vehicle sends to the cloud.</p>
    pub fn state_templates_to_add(mut self, input: crate::types::StateTemplateAssociation) -> Self {
        let mut v = self.state_templates_to_add.unwrap_or_default();
        v.push(input);
        self.state_templates_to_add = ::std::option::Option::Some(v);
        self
    }
    /// <p>Associate additional state templates to track the state of the vehicle. State templates determine which signal updates the vehicle sends to the cloud.</p>
    pub fn set_state_templates_to_add(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StateTemplateAssociation>>) -> Self {
        self.state_templates_to_add = input;
        self
    }
    /// <p>Associate additional state templates to track the state of the vehicle. State templates determine which signal updates the vehicle sends to the cloud.</p>
    pub fn get_state_templates_to_add(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StateTemplateAssociation>> {
        &self.state_templates_to_add
    }
    /// Appends an item to `state_templates_to_remove`.
    ///
    /// To override the contents of this collection use [`set_state_templates_to_remove`](Self::set_state_templates_to_remove).
    ///
    /// <p>Remove existing state template associations from the vehicle.</p>
    pub fn state_templates_to_remove(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.state_templates_to_remove.unwrap_or_default();
        v.push(input.into());
        self.state_templates_to_remove = ::std::option::Option::Some(v);
        self
    }
    /// <p>Remove existing state template associations from the vehicle.</p>
    pub fn set_state_templates_to_remove(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.state_templates_to_remove = input;
        self
    }
    /// <p>Remove existing state template associations from the vehicle.</p>
    pub fn get_state_templates_to_remove(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.state_templates_to_remove
    }
    /// Appends an item to `state_templates_to_update`.
    ///
    /// To override the contents of this collection use [`set_state_templates_to_update`](Self::set_state_templates_to_update).
    ///
    /// <p>Change the <code>stateTemplateUpdateStrategy</code> of state templates already associated with the vehicle.</p>
    pub fn state_templates_to_update(mut self, input: crate::types::StateTemplateAssociation) -> Self {
        let mut v = self.state_templates_to_update.unwrap_or_default();
        v.push(input);
        self.state_templates_to_update = ::std::option::Option::Some(v);
        self
    }
    /// <p>Change the <code>stateTemplateUpdateStrategy</code> of state templates already associated with the vehicle.</p>
    pub fn set_state_templates_to_update(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StateTemplateAssociation>>) -> Self {
        self.state_templates_to_update = input;
        self
    }
    /// <p>Change the <code>stateTemplateUpdateStrategy</code> of state templates already associated with the vehicle.</p>
    pub fn get_state_templates_to_update(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StateTemplateAssociation>> {
        &self.state_templates_to_update
    }
    /// Consumes the builder and constructs a [`UpdateVehicleRequestItem`](crate::types::UpdateVehicleRequestItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`vehicle_name`](crate::types::builders::UpdateVehicleRequestItemBuilder::vehicle_name)
    pub fn build(self) -> ::std::result::Result<crate::types::UpdateVehicleRequestItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UpdateVehicleRequestItem {
            vehicle_name: self.vehicle_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "vehicle_name",
                    "vehicle_name was not specified but it is required when building UpdateVehicleRequestItem",
                )
            })?,
            model_manifest_arn: self.model_manifest_arn,
            decoder_manifest_arn: self.decoder_manifest_arn,
            attributes: self.attributes,
            attribute_update_mode: self.attribute_update_mode,
            state_templates_to_add: self.state_templates_to_add,
            state_templates_to_remove: self.state_templates_to_remove,
            state_templates_to_update: self.state_templates_to_update,
        })
    }
}
