// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The upload options for the data partition. If upload options are specified, you must also specify storage options. See <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/APIReference/API_DataPartitionStorageOptions.html">DataPartitionStorageOptions</a>.</p><important>
/// <p>Access to certain Amazon Web Services IoT FleetWise features is currently gated. For more information, see <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/fleetwise-regions.html">Amazon Web Services Region and feature availability</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>
/// </important>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DataPartitionUploadOptions {
    /// <p>The logical expression used to recognize what data to collect. For example, <code>$variable.`Vehicle.OutsideAirTemperature` &gt;= 105.0</code>.</p>
    pub expression: ::std::string::String,
    /// <p>The version of the condition language. Defaults to the most recent condition language version.</p>
    pub condition_language_version: ::std::option::Option<i32>,
}
impl DataPartitionUploadOptions {
    /// <p>The logical expression used to recognize what data to collect. For example, <code>$variable.`Vehicle.OutsideAirTemperature` &gt;= 105.0</code>.</p>
    pub fn expression(&self) -> &str {
        use std::ops::Deref;
        self.expression.deref()
    }
    /// <p>The version of the condition language. Defaults to the most recent condition language version.</p>
    pub fn condition_language_version(&self) -> ::std::option::Option<i32> {
        self.condition_language_version
    }
}
impl ::std::fmt::Debug for DataPartitionUploadOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DataPartitionUploadOptions");
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.field("condition_language_version", &self.condition_language_version);
        formatter.finish()
    }
}
impl DataPartitionUploadOptions {
    /// Creates a new builder-style object to manufacture [`DataPartitionUploadOptions`](crate::types::DataPartitionUploadOptions).
    pub fn builder() -> crate::types::builders::DataPartitionUploadOptionsBuilder {
        crate::types::builders::DataPartitionUploadOptionsBuilder::default()
    }
}

/// A builder for [`DataPartitionUploadOptions`](crate::types::DataPartitionUploadOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct DataPartitionUploadOptionsBuilder {
    pub(crate) expression: ::std::option::Option<::std::string::String>,
    pub(crate) condition_language_version: ::std::option::Option<i32>,
}
impl DataPartitionUploadOptionsBuilder {
    /// <p>The logical expression used to recognize what data to collect. For example, <code>$variable.`Vehicle.OutsideAirTemperature` &gt;= 105.0</code>.</p>
    /// This field is required.
    pub fn expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The logical expression used to recognize what data to collect. For example, <code>$variable.`Vehicle.OutsideAirTemperature` &gt;= 105.0</code>.</p>
    pub fn set_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expression = input;
        self
    }
    /// <p>The logical expression used to recognize what data to collect. For example, <code>$variable.`Vehicle.OutsideAirTemperature` &gt;= 105.0</code>.</p>
    pub fn get_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.expression
    }
    /// <p>The version of the condition language. Defaults to the most recent condition language version.</p>
    pub fn condition_language_version(mut self, input: i32) -> Self {
        self.condition_language_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version of the condition language. Defaults to the most recent condition language version.</p>
    pub fn set_condition_language_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.condition_language_version = input;
        self
    }
    /// <p>The version of the condition language. Defaults to the most recent condition language version.</p>
    pub fn get_condition_language_version(&self) -> &::std::option::Option<i32> {
        &self.condition_language_version
    }
    /// Consumes the builder and constructs a [`DataPartitionUploadOptions`](crate::types::DataPartitionUploadOptions).
    /// This method will fail if any of the following fields are not set:
    /// - [`expression`](crate::types::builders::DataPartitionUploadOptionsBuilder::expression)
    pub fn build(self) -> ::std::result::Result<crate::types::DataPartitionUploadOptions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataPartitionUploadOptions {
            expression: self.expression.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "expression",
                    "expression was not specified but it is required when building DataPartitionUploadOptions",
                )
            })?,
            condition_language_version: self.condition_language_version,
        })
    }
}
impl ::std::fmt::Debug for DataPartitionUploadOptionsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DataPartitionUploadOptionsBuilder");
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.field("condition_language_version", &self.condition_language_version);
        formatter.finish()
    }
}
