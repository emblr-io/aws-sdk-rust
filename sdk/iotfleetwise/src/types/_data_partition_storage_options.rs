// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Size, time, and location options for the data partition.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DataPartitionStorageOptions {
    /// <p>The maximum storage size of the data stored in the data partition.</p><note>
    /// <p>Newer data overwrites older data when the partition reaches the maximum size.</p>
    /// </note>
    pub maximum_size: ::std::option::Option<crate::types::StorageMaximumSize>,
    /// <p>The folder name for the data partition under the campaign storage folder.</p>
    pub storage_location: ::std::string::String,
    /// <p>The amount of time that data in this partition will be kept on disk.</p>
    /// <ul>
    /// <li>
    /// <p>After the designated amount of time passes, the data can be removed, but it's not guaranteed to be removed.</p></li>
    /// <li>
    /// <p>Before the time expires, data in this partition can still be deleted if the partition reaches its configured maximum size.</p></li>
    /// <li>
    /// <p>Newer data will overwrite older data when the partition reaches the maximum size.</p></li>
    /// </ul>
    pub minimum_time_to_live: ::std::option::Option<crate::types::StorageMinimumTimeToLive>,
}
impl DataPartitionStorageOptions {
    /// <p>The maximum storage size of the data stored in the data partition.</p><note>
    /// <p>Newer data overwrites older data when the partition reaches the maximum size.</p>
    /// </note>
    pub fn maximum_size(&self) -> ::std::option::Option<&crate::types::StorageMaximumSize> {
        self.maximum_size.as_ref()
    }
    /// <p>The folder name for the data partition under the campaign storage folder.</p>
    pub fn storage_location(&self) -> &str {
        use std::ops::Deref;
        self.storage_location.deref()
    }
    /// <p>The amount of time that data in this partition will be kept on disk.</p>
    /// <ul>
    /// <li>
    /// <p>After the designated amount of time passes, the data can be removed, but it's not guaranteed to be removed.</p></li>
    /// <li>
    /// <p>Before the time expires, data in this partition can still be deleted if the partition reaches its configured maximum size.</p></li>
    /// <li>
    /// <p>Newer data will overwrite older data when the partition reaches the maximum size.</p></li>
    /// </ul>
    pub fn minimum_time_to_live(&self) -> ::std::option::Option<&crate::types::StorageMinimumTimeToLive> {
        self.minimum_time_to_live.as_ref()
    }
}
impl ::std::fmt::Debug for DataPartitionStorageOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DataPartitionStorageOptions");
        formatter.field("maximum_size", &self.maximum_size);
        formatter.field("storage_location", &"*** Sensitive Data Redacted ***");
        formatter.field("minimum_time_to_live", &self.minimum_time_to_live);
        formatter.finish()
    }
}
impl DataPartitionStorageOptions {
    /// Creates a new builder-style object to manufacture [`DataPartitionStorageOptions`](crate::types::DataPartitionStorageOptions).
    pub fn builder() -> crate::types::builders::DataPartitionStorageOptionsBuilder {
        crate::types::builders::DataPartitionStorageOptionsBuilder::default()
    }
}

/// A builder for [`DataPartitionStorageOptions`](crate::types::DataPartitionStorageOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct DataPartitionStorageOptionsBuilder {
    pub(crate) maximum_size: ::std::option::Option<crate::types::StorageMaximumSize>,
    pub(crate) storage_location: ::std::option::Option<::std::string::String>,
    pub(crate) minimum_time_to_live: ::std::option::Option<crate::types::StorageMinimumTimeToLive>,
}
impl DataPartitionStorageOptionsBuilder {
    /// <p>The maximum storage size of the data stored in the data partition.</p><note>
    /// <p>Newer data overwrites older data when the partition reaches the maximum size.</p>
    /// </note>
    /// This field is required.
    pub fn maximum_size(mut self, input: crate::types::StorageMaximumSize) -> Self {
        self.maximum_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum storage size of the data stored in the data partition.</p><note>
    /// <p>Newer data overwrites older data when the partition reaches the maximum size.</p>
    /// </note>
    pub fn set_maximum_size(mut self, input: ::std::option::Option<crate::types::StorageMaximumSize>) -> Self {
        self.maximum_size = input;
        self
    }
    /// <p>The maximum storage size of the data stored in the data partition.</p><note>
    /// <p>Newer data overwrites older data when the partition reaches the maximum size.</p>
    /// </note>
    pub fn get_maximum_size(&self) -> &::std::option::Option<crate::types::StorageMaximumSize> {
        &self.maximum_size
    }
    /// <p>The folder name for the data partition under the campaign storage folder.</p>
    /// This field is required.
    pub fn storage_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.storage_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The folder name for the data partition under the campaign storage folder.</p>
    pub fn set_storage_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.storage_location = input;
        self
    }
    /// <p>The folder name for the data partition under the campaign storage folder.</p>
    pub fn get_storage_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.storage_location
    }
    /// <p>The amount of time that data in this partition will be kept on disk.</p>
    /// <ul>
    /// <li>
    /// <p>After the designated amount of time passes, the data can be removed, but it's not guaranteed to be removed.</p></li>
    /// <li>
    /// <p>Before the time expires, data in this partition can still be deleted if the partition reaches its configured maximum size.</p></li>
    /// <li>
    /// <p>Newer data will overwrite older data when the partition reaches the maximum size.</p></li>
    /// </ul>
    /// This field is required.
    pub fn minimum_time_to_live(mut self, input: crate::types::StorageMinimumTimeToLive) -> Self {
        self.minimum_time_to_live = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of time that data in this partition will be kept on disk.</p>
    /// <ul>
    /// <li>
    /// <p>After the designated amount of time passes, the data can be removed, but it's not guaranteed to be removed.</p></li>
    /// <li>
    /// <p>Before the time expires, data in this partition can still be deleted if the partition reaches its configured maximum size.</p></li>
    /// <li>
    /// <p>Newer data will overwrite older data when the partition reaches the maximum size.</p></li>
    /// </ul>
    pub fn set_minimum_time_to_live(mut self, input: ::std::option::Option<crate::types::StorageMinimumTimeToLive>) -> Self {
        self.minimum_time_to_live = input;
        self
    }
    /// <p>The amount of time that data in this partition will be kept on disk.</p>
    /// <ul>
    /// <li>
    /// <p>After the designated amount of time passes, the data can be removed, but it's not guaranteed to be removed.</p></li>
    /// <li>
    /// <p>Before the time expires, data in this partition can still be deleted if the partition reaches its configured maximum size.</p></li>
    /// <li>
    /// <p>Newer data will overwrite older data when the partition reaches the maximum size.</p></li>
    /// </ul>
    pub fn get_minimum_time_to_live(&self) -> &::std::option::Option<crate::types::StorageMinimumTimeToLive> {
        &self.minimum_time_to_live
    }
    /// Consumes the builder and constructs a [`DataPartitionStorageOptions`](crate::types::DataPartitionStorageOptions).
    /// This method will fail if any of the following fields are not set:
    /// - [`storage_location`](crate::types::builders::DataPartitionStorageOptionsBuilder::storage_location)
    pub fn build(self) -> ::std::result::Result<crate::types::DataPartitionStorageOptions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataPartitionStorageOptions {
            maximum_size: self.maximum_size,
            storage_location: self.storage_location.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "storage_location",
                    "storage_location was not specified but it is required when building DataPartitionStorageOptions",
                )
            })?,
            minimum_time_to_live: self.minimum_time_to_live,
        })
    }
}
impl ::std::fmt::Debug for DataPartitionStorageOptionsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DataPartitionStorageOptionsBuilder");
        formatter.field("maximum_size", &self.maximum_size);
        formatter.field("storage_location", &"*** Sensitive Data Redacted ***");
        formatter.field("minimum_time_to_live", &self.minimum_time_to_live);
        formatter.finish()
    }
}
