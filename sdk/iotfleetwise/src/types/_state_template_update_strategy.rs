// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The update strategy for the state template. Vehicles associated with the state template can stream telemetry data with either an <code>onChange</code> or <code>periodic</code> update strategy.</p><important>
/// <p>Access to certain Amazon Web Services IoT FleetWise features is currently gated. For more information, see <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/fleetwise-regions.html">Amazon Web Services Region and feature availability</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>
/// </important>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum StateTemplateUpdateStrategy {
    /// <p>Vehicles associated with the state template will stream telemetry data when there is a change.</p>
    OnChange(crate::types::OnChangeStateTemplateUpdateStrategy),
    /// <p>Vehicles associated with the state template will stream telemetry data during a specified time period.</p>
    Periodic(crate::types::PeriodicStateTemplateUpdateStrategy),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl StateTemplateUpdateStrategy {
    /// Tries to convert the enum instance into [`OnChange`](crate::types::StateTemplateUpdateStrategy::OnChange), extracting the inner [`OnChangeStateTemplateUpdateStrategy`](crate::types::OnChangeStateTemplateUpdateStrategy).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_on_change(&self) -> ::std::result::Result<&crate::types::OnChangeStateTemplateUpdateStrategy, &Self> {
        if let StateTemplateUpdateStrategy::OnChange(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`OnChange`](crate::types::StateTemplateUpdateStrategy::OnChange).
    pub fn is_on_change(&self) -> bool {
        self.as_on_change().is_ok()
    }
    /// Tries to convert the enum instance into [`Periodic`](crate::types::StateTemplateUpdateStrategy::Periodic), extracting the inner [`PeriodicStateTemplateUpdateStrategy`](crate::types::PeriodicStateTemplateUpdateStrategy).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_periodic(&self) -> ::std::result::Result<&crate::types::PeriodicStateTemplateUpdateStrategy, &Self> {
        if let StateTemplateUpdateStrategy::Periodic(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Periodic`](crate::types::StateTemplateUpdateStrategy::Periodic).
    pub fn is_periodic(&self) -> bool {
        self.as_periodic().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
