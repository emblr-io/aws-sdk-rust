// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a single controller area network (CAN) signal and the messages it receives and transmits.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CanSignal {
    /// <p>The ID of the message.</p>
    pub message_id: i32,
    /// <p>Whether the byte ordering of a CAN message is big-endian.</p>
    pub is_big_endian: bool,
    /// <p>Determines whether the message is signed (<code>true</code>) or not (<code>false</code>). If it's signed, the message can represent both positive and negative numbers. The <code>isSigned</code> parameter only applies to the <code>INTEGER</code> raw signal type, and it doesn't affect the <code>FLOATING_POINT</code> raw signal type.</p>
    pub is_signed: bool,
    /// <p>Indicates the beginning of the CAN signal. This should always be the least significant bit (LSB).</p>
    /// <p>This value might be different from the value in a DBC file. For little endian signals, <code>startBit</code> is the same value as in the DBC file. For big endian signals in a DBC file, the start bit is the most significant bit (MSB). You will have to calculate the LSB instead and pass it as the <code>startBit</code>.</p>
    pub start_bit: i32,
    /// <p>The offset used to calculate the signal value. Combined with factor, the calculation is <code>value = raw_value * factor + offset</code>.</p>
    pub offset: f64,
    /// <p>A multiplier used to decode the CAN message.</p>
    pub factor: f64,
    /// <p>How many bytes of data are in the message.</p>
    pub length: i32,
    /// <p>The name of the signal.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The value type of the signal. The default value is <code>INTEGER</code>.</p>
    pub signal_value_type: ::std::option::Option<crate::types::SignalValueType>,
}
impl CanSignal {
    /// <p>The ID of the message.</p>
    pub fn message_id(&self) -> i32 {
        self.message_id
    }
    /// <p>Whether the byte ordering of a CAN message is big-endian.</p>
    pub fn is_big_endian(&self) -> bool {
        self.is_big_endian
    }
    /// <p>Determines whether the message is signed (<code>true</code>) or not (<code>false</code>). If it's signed, the message can represent both positive and negative numbers. The <code>isSigned</code> parameter only applies to the <code>INTEGER</code> raw signal type, and it doesn't affect the <code>FLOATING_POINT</code> raw signal type.</p>
    pub fn is_signed(&self) -> bool {
        self.is_signed
    }
    /// <p>Indicates the beginning of the CAN signal. This should always be the least significant bit (LSB).</p>
    /// <p>This value might be different from the value in a DBC file. For little endian signals, <code>startBit</code> is the same value as in the DBC file. For big endian signals in a DBC file, the start bit is the most significant bit (MSB). You will have to calculate the LSB instead and pass it as the <code>startBit</code>.</p>
    pub fn start_bit(&self) -> i32 {
        self.start_bit
    }
    /// <p>The offset used to calculate the signal value. Combined with factor, the calculation is <code>value = raw_value * factor + offset</code>.</p>
    pub fn offset(&self) -> f64 {
        self.offset
    }
    /// <p>A multiplier used to decode the CAN message.</p>
    pub fn factor(&self) -> f64 {
        self.factor
    }
    /// <p>How many bytes of data are in the message.</p>
    pub fn length(&self) -> i32 {
        self.length
    }
    /// <p>The name of the signal.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The value type of the signal. The default value is <code>INTEGER</code>.</p>
    pub fn signal_value_type(&self) -> ::std::option::Option<&crate::types::SignalValueType> {
        self.signal_value_type.as_ref()
    }
}
impl CanSignal {
    /// Creates a new builder-style object to manufacture [`CanSignal`](crate::types::CanSignal).
    pub fn builder() -> crate::types::builders::CanSignalBuilder {
        crate::types::builders::CanSignalBuilder::default()
    }
}

/// A builder for [`CanSignal`](crate::types::CanSignal).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CanSignalBuilder {
    pub(crate) message_id: ::std::option::Option<i32>,
    pub(crate) is_big_endian: ::std::option::Option<bool>,
    pub(crate) is_signed: ::std::option::Option<bool>,
    pub(crate) start_bit: ::std::option::Option<i32>,
    pub(crate) offset: ::std::option::Option<f64>,
    pub(crate) factor: ::std::option::Option<f64>,
    pub(crate) length: ::std::option::Option<i32>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) signal_value_type: ::std::option::Option<crate::types::SignalValueType>,
}
impl CanSignalBuilder {
    /// <p>The ID of the message.</p>
    /// This field is required.
    pub fn message_id(mut self, input: i32) -> Self {
        self.message_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ID of the message.</p>
    pub fn set_message_id(mut self, input: ::std::option::Option<i32>) -> Self {
        self.message_id = input;
        self
    }
    /// <p>The ID of the message.</p>
    pub fn get_message_id(&self) -> &::std::option::Option<i32> {
        &self.message_id
    }
    /// <p>Whether the byte ordering of a CAN message is big-endian.</p>
    /// This field is required.
    pub fn is_big_endian(mut self, input: bool) -> Self {
        self.is_big_endian = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the byte ordering of a CAN message is big-endian.</p>
    pub fn set_is_big_endian(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_big_endian = input;
        self
    }
    /// <p>Whether the byte ordering of a CAN message is big-endian.</p>
    pub fn get_is_big_endian(&self) -> &::std::option::Option<bool> {
        &self.is_big_endian
    }
    /// <p>Determines whether the message is signed (<code>true</code>) or not (<code>false</code>). If it's signed, the message can represent both positive and negative numbers. The <code>isSigned</code> parameter only applies to the <code>INTEGER</code> raw signal type, and it doesn't affect the <code>FLOATING_POINT</code> raw signal type.</p>
    /// This field is required.
    pub fn is_signed(mut self, input: bool) -> Self {
        self.is_signed = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether the message is signed (<code>true</code>) or not (<code>false</code>). If it's signed, the message can represent both positive and negative numbers. The <code>isSigned</code> parameter only applies to the <code>INTEGER</code> raw signal type, and it doesn't affect the <code>FLOATING_POINT</code> raw signal type.</p>
    pub fn set_is_signed(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_signed = input;
        self
    }
    /// <p>Determines whether the message is signed (<code>true</code>) or not (<code>false</code>). If it's signed, the message can represent both positive and negative numbers. The <code>isSigned</code> parameter only applies to the <code>INTEGER</code> raw signal type, and it doesn't affect the <code>FLOATING_POINT</code> raw signal type.</p>
    pub fn get_is_signed(&self) -> &::std::option::Option<bool> {
        &self.is_signed
    }
    /// <p>Indicates the beginning of the CAN signal. This should always be the least significant bit (LSB).</p>
    /// <p>This value might be different from the value in a DBC file. For little endian signals, <code>startBit</code> is the same value as in the DBC file. For big endian signals in a DBC file, the start bit is the most significant bit (MSB). You will have to calculate the LSB instead and pass it as the <code>startBit</code>.</p>
    /// This field is required.
    pub fn start_bit(mut self, input: i32) -> Self {
        self.start_bit = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the beginning of the CAN signal. This should always be the least significant bit (LSB).</p>
    /// <p>This value might be different from the value in a DBC file. For little endian signals, <code>startBit</code> is the same value as in the DBC file. For big endian signals in a DBC file, the start bit is the most significant bit (MSB). You will have to calculate the LSB instead and pass it as the <code>startBit</code>.</p>
    pub fn set_start_bit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.start_bit = input;
        self
    }
    /// <p>Indicates the beginning of the CAN signal. This should always be the least significant bit (LSB).</p>
    /// <p>This value might be different from the value in a DBC file. For little endian signals, <code>startBit</code> is the same value as in the DBC file. For big endian signals in a DBC file, the start bit is the most significant bit (MSB). You will have to calculate the LSB instead and pass it as the <code>startBit</code>.</p>
    pub fn get_start_bit(&self) -> &::std::option::Option<i32> {
        &self.start_bit
    }
    /// <p>The offset used to calculate the signal value. Combined with factor, the calculation is <code>value = raw_value * factor + offset</code>.</p>
    /// This field is required.
    pub fn offset(mut self, input: f64) -> Self {
        self.offset = ::std::option::Option::Some(input);
        self
    }
    /// <p>The offset used to calculate the signal value. Combined with factor, the calculation is <code>value = raw_value * factor + offset</code>.</p>
    pub fn set_offset(mut self, input: ::std::option::Option<f64>) -> Self {
        self.offset = input;
        self
    }
    /// <p>The offset used to calculate the signal value. Combined with factor, the calculation is <code>value = raw_value * factor + offset</code>.</p>
    pub fn get_offset(&self) -> &::std::option::Option<f64> {
        &self.offset
    }
    /// <p>A multiplier used to decode the CAN message.</p>
    /// This field is required.
    pub fn factor(mut self, input: f64) -> Self {
        self.factor = ::std::option::Option::Some(input);
        self
    }
    /// <p>A multiplier used to decode the CAN message.</p>
    pub fn set_factor(mut self, input: ::std::option::Option<f64>) -> Self {
        self.factor = input;
        self
    }
    /// <p>A multiplier used to decode the CAN message.</p>
    pub fn get_factor(&self) -> &::std::option::Option<f64> {
        &self.factor
    }
    /// <p>How many bytes of data are in the message.</p>
    /// This field is required.
    pub fn length(mut self, input: i32) -> Self {
        self.length = ::std::option::Option::Some(input);
        self
    }
    /// <p>How many bytes of data are in the message.</p>
    pub fn set_length(mut self, input: ::std::option::Option<i32>) -> Self {
        self.length = input;
        self
    }
    /// <p>How many bytes of data are in the message.</p>
    pub fn get_length(&self) -> &::std::option::Option<i32> {
        &self.length
    }
    /// <p>The name of the signal.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the signal.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the signal.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The value type of the signal. The default value is <code>INTEGER</code>.</p>
    pub fn signal_value_type(mut self, input: crate::types::SignalValueType) -> Self {
        self.signal_value_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value type of the signal. The default value is <code>INTEGER</code>.</p>
    pub fn set_signal_value_type(mut self, input: ::std::option::Option<crate::types::SignalValueType>) -> Self {
        self.signal_value_type = input;
        self
    }
    /// <p>The value type of the signal. The default value is <code>INTEGER</code>.</p>
    pub fn get_signal_value_type(&self) -> &::std::option::Option<crate::types::SignalValueType> {
        &self.signal_value_type
    }
    /// Consumes the builder and constructs a [`CanSignal`](crate::types::CanSignal).
    /// This method will fail if any of the following fields are not set:
    /// - [`offset`](crate::types::builders::CanSignalBuilder::offset)
    /// - [`factor`](crate::types::builders::CanSignalBuilder::factor)
    pub fn build(self) -> ::std::result::Result<crate::types::CanSignal, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CanSignal {
            message_id: self.message_id.unwrap_or_default(),
            is_big_endian: self.is_big_endian.unwrap_or_default(),
            is_signed: self.is_signed.unwrap_or_default(),
            start_bit: self.start_bit.unwrap_or_default(),
            offset: self.offset.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "offset",
                    "offset was not specified but it is required when building CanSignal",
                )
            })?,
            factor: self.factor.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "factor",
                    "factor was not specified but it is required when building CanSignal",
                )
            })?,
            length: self.length.unwrap_or_default(),
            name: self.name,
            signal_value_type: self.signal_value_type,
        })
    }
}
