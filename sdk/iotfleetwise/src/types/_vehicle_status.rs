// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a campaign associated with a vehicle.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VehicleStatus {
    /// <p>The name of a campaign.</p>
    pub campaign_name: ::std::option::Option<::std::string::String>,
    /// <p>The unique ID of the vehicle.</p>
    pub vehicle_name: ::std::option::Option<::std::string::String>,
    /// <p>The status of a campaign, which can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATED</code> - The campaign exists but is not yet approved.</p></li>
    /// <li>
    /// <p><code>READY</code> - The campaign is approved but has not been deployed to the vehicle. Data has not arrived at the vehicle yet.</p></li>
    /// <li>
    /// <p><code>HEALTHY</code> - The campaign is deployed to the vehicle.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code> - The campaign is suspended and data collection is paused.</p></li>
    /// <li>
    /// <p><code>DELETING</code> - The campaign is being removed from the vehicle.</p></li>
    /// <li>
    /// <p><code>READY_FOR_CHECKIN</code> - The campaign is approved and waiting for vehicle check-in before deployment.</p></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::VehicleState>,
}
impl VehicleStatus {
    /// <p>The name of a campaign.</p>
    pub fn campaign_name(&self) -> ::std::option::Option<&str> {
        self.campaign_name.as_deref()
    }
    /// <p>The unique ID of the vehicle.</p>
    pub fn vehicle_name(&self) -> ::std::option::Option<&str> {
        self.vehicle_name.as_deref()
    }
    /// <p>The status of a campaign, which can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATED</code> - The campaign exists but is not yet approved.</p></li>
    /// <li>
    /// <p><code>READY</code> - The campaign is approved but has not been deployed to the vehicle. Data has not arrived at the vehicle yet.</p></li>
    /// <li>
    /// <p><code>HEALTHY</code> - The campaign is deployed to the vehicle.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code> - The campaign is suspended and data collection is paused.</p></li>
    /// <li>
    /// <p><code>DELETING</code> - The campaign is being removed from the vehicle.</p></li>
    /// <li>
    /// <p><code>READY_FOR_CHECKIN</code> - The campaign is approved and waiting for vehicle check-in before deployment.</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::VehicleState> {
        self.status.as_ref()
    }
}
impl VehicleStatus {
    /// Creates a new builder-style object to manufacture [`VehicleStatus`](crate::types::VehicleStatus).
    pub fn builder() -> crate::types::builders::VehicleStatusBuilder {
        crate::types::builders::VehicleStatusBuilder::default()
    }
}

/// A builder for [`VehicleStatus`](crate::types::VehicleStatus).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VehicleStatusBuilder {
    pub(crate) campaign_name: ::std::option::Option<::std::string::String>,
    pub(crate) vehicle_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::VehicleState>,
}
impl VehicleStatusBuilder {
    /// <p>The name of a campaign.</p>
    pub fn campaign_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.campaign_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a campaign.</p>
    pub fn set_campaign_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.campaign_name = input;
        self
    }
    /// <p>The name of a campaign.</p>
    pub fn get_campaign_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.campaign_name
    }
    /// <p>The unique ID of the vehicle.</p>
    pub fn vehicle_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vehicle_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the vehicle.</p>
    pub fn set_vehicle_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vehicle_name = input;
        self
    }
    /// <p>The unique ID of the vehicle.</p>
    pub fn get_vehicle_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vehicle_name
    }
    /// <p>The status of a campaign, which can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATED</code> - The campaign exists but is not yet approved.</p></li>
    /// <li>
    /// <p><code>READY</code> - The campaign is approved but has not been deployed to the vehicle. Data has not arrived at the vehicle yet.</p></li>
    /// <li>
    /// <p><code>HEALTHY</code> - The campaign is deployed to the vehicle.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code> - The campaign is suspended and data collection is paused.</p></li>
    /// <li>
    /// <p><code>DELETING</code> - The campaign is being removed from the vehicle.</p></li>
    /// <li>
    /// <p><code>READY_FOR_CHECKIN</code> - The campaign is approved and waiting for vehicle check-in before deployment.</p></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::VehicleState) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of a campaign, which can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATED</code> - The campaign exists but is not yet approved.</p></li>
    /// <li>
    /// <p><code>READY</code> - The campaign is approved but has not been deployed to the vehicle. Data has not arrived at the vehicle yet.</p></li>
    /// <li>
    /// <p><code>HEALTHY</code> - The campaign is deployed to the vehicle.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code> - The campaign is suspended and data collection is paused.</p></li>
    /// <li>
    /// <p><code>DELETING</code> - The campaign is being removed from the vehicle.</p></li>
    /// <li>
    /// <p><code>READY_FOR_CHECKIN</code> - The campaign is approved and waiting for vehicle check-in before deployment.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::VehicleState>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of a campaign, which can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATED</code> - The campaign exists but is not yet approved.</p></li>
    /// <li>
    /// <p><code>READY</code> - The campaign is approved but has not been deployed to the vehicle. Data has not arrived at the vehicle yet.</p></li>
    /// <li>
    /// <p><code>HEALTHY</code> - The campaign is deployed to the vehicle.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code> - The campaign is suspended and data collection is paused.</p></li>
    /// <li>
    /// <p><code>DELETING</code> - The campaign is being removed from the vehicle.</p></li>
    /// <li>
    /// <p><code>READY_FOR_CHECKIN</code> - The campaign is approved and waiting for vehicle check-in before deployment.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::VehicleState> {
        &self.status
    }
    /// Consumes the builder and constructs a [`VehicleStatus`](crate::types::VehicleStatus).
    pub fn build(self) -> crate::types::VehicleStatus {
        crate::types::VehicleStatus {
            campaign_name: self.campaign_name,
            vehicle_name: self.vehicle_name,
            status: self.status,
        }
    }
}
