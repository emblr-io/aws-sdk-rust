// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the signal to be fetched.</p><important>
/// <p>Access to certain Amazon Web Services IoT FleetWise features is currently gated. For more information, see <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/fleetwise-regions.html">Amazon Web Services Region and feature availability</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>
/// </important>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SignalFetchInformation {
    /// <p>The fully qualified name of the signal to be fetched.</p>
    pub fully_qualified_name: ::std::string::String,
    /// <p>The configuration of the signal fetch operation.</p>
    pub signal_fetch_config: ::std::option::Option<crate::types::SignalFetchConfig>,
    /// <p>The version of the condition language used.</p>
    pub condition_language_version: ::std::option::Option<i32>,
    /// <p>The actions to be performed by the signal fetch.</p>
    pub actions: ::std::vec::Vec<::std::string::String>,
}
impl SignalFetchInformation {
    /// <p>The fully qualified name of the signal to be fetched.</p>
    pub fn fully_qualified_name(&self) -> &str {
        use std::ops::Deref;
        self.fully_qualified_name.deref()
    }
    /// <p>The configuration of the signal fetch operation.</p>
    pub fn signal_fetch_config(&self) -> ::std::option::Option<&crate::types::SignalFetchConfig> {
        self.signal_fetch_config.as_ref()
    }
    /// <p>The version of the condition language used.</p>
    pub fn condition_language_version(&self) -> ::std::option::Option<i32> {
        self.condition_language_version
    }
    /// <p>The actions to be performed by the signal fetch.</p>
    pub fn actions(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.actions.deref()
    }
}
impl SignalFetchInformation {
    /// Creates a new builder-style object to manufacture [`SignalFetchInformation`](crate::types::SignalFetchInformation).
    pub fn builder() -> crate::types::builders::SignalFetchInformationBuilder {
        crate::types::builders::SignalFetchInformationBuilder::default()
    }
}

/// A builder for [`SignalFetchInformation`](crate::types::SignalFetchInformation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SignalFetchInformationBuilder {
    pub(crate) fully_qualified_name: ::std::option::Option<::std::string::String>,
    pub(crate) signal_fetch_config: ::std::option::Option<crate::types::SignalFetchConfig>,
    pub(crate) condition_language_version: ::std::option::Option<i32>,
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SignalFetchInformationBuilder {
    /// <p>The fully qualified name of the signal to be fetched.</p>
    /// This field is required.
    pub fn fully_qualified_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fully_qualified_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The fully qualified name of the signal to be fetched.</p>
    pub fn set_fully_qualified_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fully_qualified_name = input;
        self
    }
    /// <p>The fully qualified name of the signal to be fetched.</p>
    pub fn get_fully_qualified_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.fully_qualified_name
    }
    /// <p>The configuration of the signal fetch operation.</p>
    /// This field is required.
    pub fn signal_fetch_config(mut self, input: crate::types::SignalFetchConfig) -> Self {
        self.signal_fetch_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the signal fetch operation.</p>
    pub fn set_signal_fetch_config(mut self, input: ::std::option::Option<crate::types::SignalFetchConfig>) -> Self {
        self.signal_fetch_config = input;
        self
    }
    /// <p>The configuration of the signal fetch operation.</p>
    pub fn get_signal_fetch_config(&self) -> &::std::option::Option<crate::types::SignalFetchConfig> {
        &self.signal_fetch_config
    }
    /// <p>The version of the condition language used.</p>
    pub fn condition_language_version(mut self, input: i32) -> Self {
        self.condition_language_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version of the condition language used.</p>
    pub fn set_condition_language_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.condition_language_version = input;
        self
    }
    /// <p>The version of the condition language used.</p>
    pub fn get_condition_language_version(&self) -> &::std::option::Option<i32> {
        &self.condition_language_version
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The actions to be performed by the signal fetch.</p>
    pub fn actions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input.into());
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The actions to be performed by the signal fetch.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>The actions to be performed by the signal fetch.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.actions
    }
    /// Consumes the builder and constructs a [`SignalFetchInformation`](crate::types::SignalFetchInformation).
    /// This method will fail if any of the following fields are not set:
    /// - [`fully_qualified_name`](crate::types::builders::SignalFetchInformationBuilder::fully_qualified_name)
    /// - [`actions`](crate::types::builders::SignalFetchInformationBuilder::actions)
    pub fn build(self) -> ::std::result::Result<crate::types::SignalFetchInformation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SignalFetchInformation {
            fully_qualified_name: self.fully_qualified_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "fully_qualified_name",
                    "fully_qualified_name was not specified but it is required when building SignalFetchInformation",
                )
            })?,
            signal_fetch_config: self.signal_fetch_config,
            condition_language_version: self.condition_language_version,
            actions: self.actions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "actions",
                    "actions was not specified but it is required when building SignalFetchInformation",
                )
            })?,
        })
    }
}
