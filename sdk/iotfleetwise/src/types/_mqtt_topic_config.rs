// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The MQTT topic to which the Amazon Web Services IoT FleetWise campaign routes data. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/protocols.html">Device communication protocols</a> in the <i>Amazon Web Services IoT Core Developer Guide</i>.</p><important>
/// <p>Access to certain Amazon Web Services IoT FleetWise features is currently gated. For more information, see <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/fleetwise-regions.html">Amazon Web Services Region and feature availability</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>
/// </important>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MqttTopicConfig {
    /// <p>The ARN of the MQTT topic.</p>
    pub mqtt_topic_arn: ::std::string::String,
    /// <p>The ARN of the role that grants Amazon Web Services IoT FleetWise permission to access and act on messages sent to the MQTT topic.</p>
    pub execution_role_arn: ::std::string::String,
}
impl MqttTopicConfig {
    /// <p>The ARN of the MQTT topic.</p>
    pub fn mqtt_topic_arn(&self) -> &str {
        use std::ops::Deref;
        self.mqtt_topic_arn.deref()
    }
    /// <p>The ARN of the role that grants Amazon Web Services IoT FleetWise permission to access and act on messages sent to the MQTT topic.</p>
    pub fn execution_role_arn(&self) -> &str {
        use std::ops::Deref;
        self.execution_role_arn.deref()
    }
}
impl MqttTopicConfig {
    /// Creates a new builder-style object to manufacture [`MqttTopicConfig`](crate::types::MqttTopicConfig).
    pub fn builder() -> crate::types::builders::MqttTopicConfigBuilder {
        crate::types::builders::MqttTopicConfigBuilder::default()
    }
}

/// A builder for [`MqttTopicConfig`](crate::types::MqttTopicConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MqttTopicConfigBuilder {
    pub(crate) mqtt_topic_arn: ::std::option::Option<::std::string::String>,
    pub(crate) execution_role_arn: ::std::option::Option<::std::string::String>,
}
impl MqttTopicConfigBuilder {
    /// <p>The ARN of the MQTT topic.</p>
    /// This field is required.
    pub fn mqtt_topic_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mqtt_topic_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the MQTT topic.</p>
    pub fn set_mqtt_topic_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mqtt_topic_arn = input;
        self
    }
    /// <p>The ARN of the MQTT topic.</p>
    pub fn get_mqtt_topic_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.mqtt_topic_arn
    }
    /// <p>The ARN of the role that grants Amazon Web Services IoT FleetWise permission to access and act on messages sent to the MQTT topic.</p>
    /// This field is required.
    pub fn execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the role that grants Amazon Web Services IoT FleetWise permission to access and act on messages sent to the MQTT topic.</p>
    pub fn set_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role_arn = input;
        self
    }
    /// <p>The ARN of the role that grants Amazon Web Services IoT FleetWise permission to access and act on messages sent to the MQTT topic.</p>
    pub fn get_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role_arn
    }
    /// Consumes the builder and constructs a [`MqttTopicConfig`](crate::types::MqttTopicConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`mqtt_topic_arn`](crate::types::builders::MqttTopicConfigBuilder::mqtt_topic_arn)
    /// - [`execution_role_arn`](crate::types::builders::MqttTopicConfigBuilder::execution_role_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::MqttTopicConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MqttTopicConfig {
            mqtt_topic_arn: self.mqtt_topic_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mqtt_topic_arn",
                    "mqtt_topic_arn was not specified but it is required when building MqttTopicConfig",
                )
            })?,
            execution_role_arn: self.execution_role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "execution_role_arn",
                    "execution_role_arn was not specified but it is required when building MqttTopicConfig",
                )
            })?,
        })
    }
}
