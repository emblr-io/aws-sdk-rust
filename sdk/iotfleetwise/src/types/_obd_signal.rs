// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about signal messages using the on-board diagnostics (OBD) II protocol in a vehicle.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ObdSignal {
    /// <p>The length of the requested data.</p>
    pub pid_response_length: i32,
    /// <p>The mode of operation (diagnostic service) in a message.</p>
    pub service_mode: i32,
    /// <p>The diagnostic code used to request data from a vehicle for this signal.</p>
    pub pid: i32,
    /// <p>A multiplier used to decode the message.</p>
    pub scaling: f64,
    /// <p>The offset used to calculate the signal value. Combined with scaling, the calculation is <code>value = raw_value * scaling + offset</code>.</p>
    pub offset: f64,
    /// <p>Indicates the beginning of the message.</p>
    pub start_byte: i32,
    /// <p>The length of a message.</p>
    pub byte_length: i32,
    /// <p>The number of positions to shift bits in the message.</p>
    pub bit_right_shift: i32,
    /// <p>The number of bits to mask in a message.</p>
    pub bit_mask_length: ::std::option::Option<i32>,
    /// <p>Determines whether the message is signed (<code>true</code>) or not (<code>false</code>). If it's signed, the message can represent both positive and negative numbers. The <code>isSigned</code> parameter only applies to the <code>INTEGER</code> raw signal type, and it doesn't affect the <code>FLOATING_POINT</code> raw signal type. The default value is <code>false</code>.</p>
    pub is_signed: ::std::option::Option<bool>,
    /// <p>The value type of the signal. The default value is <code>INTEGER</code>.</p>
    pub signal_value_type: ::std::option::Option<crate::types::SignalValueType>,
}
impl ObdSignal {
    /// <p>The length of the requested data.</p>
    pub fn pid_response_length(&self) -> i32 {
        self.pid_response_length
    }
    /// <p>The mode of operation (diagnostic service) in a message.</p>
    pub fn service_mode(&self) -> i32 {
        self.service_mode
    }
    /// <p>The diagnostic code used to request data from a vehicle for this signal.</p>
    pub fn pid(&self) -> i32 {
        self.pid
    }
    /// <p>A multiplier used to decode the message.</p>
    pub fn scaling(&self) -> f64 {
        self.scaling
    }
    /// <p>The offset used to calculate the signal value. Combined with scaling, the calculation is <code>value = raw_value * scaling + offset</code>.</p>
    pub fn offset(&self) -> f64 {
        self.offset
    }
    /// <p>Indicates the beginning of the message.</p>
    pub fn start_byte(&self) -> i32 {
        self.start_byte
    }
    /// <p>The length of a message.</p>
    pub fn byte_length(&self) -> i32 {
        self.byte_length
    }
    /// <p>The number of positions to shift bits in the message.</p>
    pub fn bit_right_shift(&self) -> i32 {
        self.bit_right_shift
    }
    /// <p>The number of bits to mask in a message.</p>
    pub fn bit_mask_length(&self) -> ::std::option::Option<i32> {
        self.bit_mask_length
    }
    /// <p>Determines whether the message is signed (<code>true</code>) or not (<code>false</code>). If it's signed, the message can represent both positive and negative numbers. The <code>isSigned</code> parameter only applies to the <code>INTEGER</code> raw signal type, and it doesn't affect the <code>FLOATING_POINT</code> raw signal type. The default value is <code>false</code>.</p>
    pub fn is_signed(&self) -> ::std::option::Option<bool> {
        self.is_signed
    }
    /// <p>The value type of the signal. The default value is <code>INTEGER</code>.</p>
    pub fn signal_value_type(&self) -> ::std::option::Option<&crate::types::SignalValueType> {
        self.signal_value_type.as_ref()
    }
}
impl ObdSignal {
    /// Creates a new builder-style object to manufacture [`ObdSignal`](crate::types::ObdSignal).
    pub fn builder() -> crate::types::builders::ObdSignalBuilder {
        crate::types::builders::ObdSignalBuilder::default()
    }
}

/// A builder for [`ObdSignal`](crate::types::ObdSignal).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ObdSignalBuilder {
    pub(crate) pid_response_length: ::std::option::Option<i32>,
    pub(crate) service_mode: ::std::option::Option<i32>,
    pub(crate) pid: ::std::option::Option<i32>,
    pub(crate) scaling: ::std::option::Option<f64>,
    pub(crate) offset: ::std::option::Option<f64>,
    pub(crate) start_byte: ::std::option::Option<i32>,
    pub(crate) byte_length: ::std::option::Option<i32>,
    pub(crate) bit_right_shift: ::std::option::Option<i32>,
    pub(crate) bit_mask_length: ::std::option::Option<i32>,
    pub(crate) is_signed: ::std::option::Option<bool>,
    pub(crate) signal_value_type: ::std::option::Option<crate::types::SignalValueType>,
}
impl ObdSignalBuilder {
    /// <p>The length of the requested data.</p>
    /// This field is required.
    pub fn pid_response_length(mut self, input: i32) -> Self {
        self.pid_response_length = ::std::option::Option::Some(input);
        self
    }
    /// <p>The length of the requested data.</p>
    pub fn set_pid_response_length(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pid_response_length = input;
        self
    }
    /// <p>The length of the requested data.</p>
    pub fn get_pid_response_length(&self) -> &::std::option::Option<i32> {
        &self.pid_response_length
    }
    /// <p>The mode of operation (diagnostic service) in a message.</p>
    /// This field is required.
    pub fn service_mode(mut self, input: i32) -> Self {
        self.service_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The mode of operation (diagnostic service) in a message.</p>
    pub fn set_service_mode(mut self, input: ::std::option::Option<i32>) -> Self {
        self.service_mode = input;
        self
    }
    /// <p>The mode of operation (diagnostic service) in a message.</p>
    pub fn get_service_mode(&self) -> &::std::option::Option<i32> {
        &self.service_mode
    }
    /// <p>The diagnostic code used to request data from a vehicle for this signal.</p>
    /// This field is required.
    pub fn pid(mut self, input: i32) -> Self {
        self.pid = ::std::option::Option::Some(input);
        self
    }
    /// <p>The diagnostic code used to request data from a vehicle for this signal.</p>
    pub fn set_pid(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pid = input;
        self
    }
    /// <p>The diagnostic code used to request data from a vehicle for this signal.</p>
    pub fn get_pid(&self) -> &::std::option::Option<i32> {
        &self.pid
    }
    /// <p>A multiplier used to decode the message.</p>
    /// This field is required.
    pub fn scaling(mut self, input: f64) -> Self {
        self.scaling = ::std::option::Option::Some(input);
        self
    }
    /// <p>A multiplier used to decode the message.</p>
    pub fn set_scaling(mut self, input: ::std::option::Option<f64>) -> Self {
        self.scaling = input;
        self
    }
    /// <p>A multiplier used to decode the message.</p>
    pub fn get_scaling(&self) -> &::std::option::Option<f64> {
        &self.scaling
    }
    /// <p>The offset used to calculate the signal value. Combined with scaling, the calculation is <code>value = raw_value * scaling + offset</code>.</p>
    /// This field is required.
    pub fn offset(mut self, input: f64) -> Self {
        self.offset = ::std::option::Option::Some(input);
        self
    }
    /// <p>The offset used to calculate the signal value. Combined with scaling, the calculation is <code>value = raw_value * scaling + offset</code>.</p>
    pub fn set_offset(mut self, input: ::std::option::Option<f64>) -> Self {
        self.offset = input;
        self
    }
    /// <p>The offset used to calculate the signal value. Combined with scaling, the calculation is <code>value = raw_value * scaling + offset</code>.</p>
    pub fn get_offset(&self) -> &::std::option::Option<f64> {
        &self.offset
    }
    /// <p>Indicates the beginning of the message.</p>
    /// This field is required.
    pub fn start_byte(mut self, input: i32) -> Self {
        self.start_byte = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the beginning of the message.</p>
    pub fn set_start_byte(mut self, input: ::std::option::Option<i32>) -> Self {
        self.start_byte = input;
        self
    }
    /// <p>Indicates the beginning of the message.</p>
    pub fn get_start_byte(&self) -> &::std::option::Option<i32> {
        &self.start_byte
    }
    /// <p>The length of a message.</p>
    /// This field is required.
    pub fn byte_length(mut self, input: i32) -> Self {
        self.byte_length = ::std::option::Option::Some(input);
        self
    }
    /// <p>The length of a message.</p>
    pub fn set_byte_length(mut self, input: ::std::option::Option<i32>) -> Self {
        self.byte_length = input;
        self
    }
    /// <p>The length of a message.</p>
    pub fn get_byte_length(&self) -> &::std::option::Option<i32> {
        &self.byte_length
    }
    /// <p>The number of positions to shift bits in the message.</p>
    pub fn bit_right_shift(mut self, input: i32) -> Self {
        self.bit_right_shift = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of positions to shift bits in the message.</p>
    pub fn set_bit_right_shift(mut self, input: ::std::option::Option<i32>) -> Self {
        self.bit_right_shift = input;
        self
    }
    /// <p>The number of positions to shift bits in the message.</p>
    pub fn get_bit_right_shift(&self) -> &::std::option::Option<i32> {
        &self.bit_right_shift
    }
    /// <p>The number of bits to mask in a message.</p>
    pub fn bit_mask_length(mut self, input: i32) -> Self {
        self.bit_mask_length = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of bits to mask in a message.</p>
    pub fn set_bit_mask_length(mut self, input: ::std::option::Option<i32>) -> Self {
        self.bit_mask_length = input;
        self
    }
    /// <p>The number of bits to mask in a message.</p>
    pub fn get_bit_mask_length(&self) -> &::std::option::Option<i32> {
        &self.bit_mask_length
    }
    /// <p>Determines whether the message is signed (<code>true</code>) or not (<code>false</code>). If it's signed, the message can represent both positive and negative numbers. The <code>isSigned</code> parameter only applies to the <code>INTEGER</code> raw signal type, and it doesn't affect the <code>FLOATING_POINT</code> raw signal type. The default value is <code>false</code>.</p>
    pub fn is_signed(mut self, input: bool) -> Self {
        self.is_signed = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether the message is signed (<code>true</code>) or not (<code>false</code>). If it's signed, the message can represent both positive and negative numbers. The <code>isSigned</code> parameter only applies to the <code>INTEGER</code> raw signal type, and it doesn't affect the <code>FLOATING_POINT</code> raw signal type. The default value is <code>false</code>.</p>
    pub fn set_is_signed(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_signed = input;
        self
    }
    /// <p>Determines whether the message is signed (<code>true</code>) or not (<code>false</code>). If it's signed, the message can represent both positive and negative numbers. The <code>isSigned</code> parameter only applies to the <code>INTEGER</code> raw signal type, and it doesn't affect the <code>FLOATING_POINT</code> raw signal type. The default value is <code>false</code>.</p>
    pub fn get_is_signed(&self) -> &::std::option::Option<bool> {
        &self.is_signed
    }
    /// <p>The value type of the signal. The default value is <code>INTEGER</code>.</p>
    pub fn signal_value_type(mut self, input: crate::types::SignalValueType) -> Self {
        self.signal_value_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value type of the signal. The default value is <code>INTEGER</code>.</p>
    pub fn set_signal_value_type(mut self, input: ::std::option::Option<crate::types::SignalValueType>) -> Self {
        self.signal_value_type = input;
        self
    }
    /// <p>The value type of the signal. The default value is <code>INTEGER</code>.</p>
    pub fn get_signal_value_type(&self) -> &::std::option::Option<crate::types::SignalValueType> {
        &self.signal_value_type
    }
    /// Consumes the builder and constructs a [`ObdSignal`](crate::types::ObdSignal).
    /// This method will fail if any of the following fields are not set:
    /// - [`pid_response_length`](crate::types::builders::ObdSignalBuilder::pid_response_length)
    /// - [`scaling`](crate::types::builders::ObdSignalBuilder::scaling)
    /// - [`offset`](crate::types::builders::ObdSignalBuilder::offset)
    /// - [`byte_length`](crate::types::builders::ObdSignalBuilder::byte_length)
    pub fn build(self) -> ::std::result::Result<crate::types::ObdSignal, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ObdSignal {
            pid_response_length: self.pid_response_length.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "pid_response_length",
                    "pid_response_length was not specified but it is required when building ObdSignal",
                )
            })?,
            service_mode: self.service_mode.unwrap_or_default(),
            pid: self.pid.unwrap_or_default(),
            scaling: self.scaling.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "scaling",
                    "scaling was not specified but it is required when building ObdSignal",
                )
            })?,
            offset: self.offset.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "offset",
                    "offset was not specified but it is required when building ObdSignal",
                )
            })?,
            start_byte: self.start_byte.unwrap_or_default(),
            byte_length: self.byte_length.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "byte_length",
                    "byte_length was not specified but it is required when building ObdSignal",
                )
            })?,
            bit_right_shift: self.bit_right_shift.unwrap_or_default(),
            bit_mask_length: self.bit_mask_length,
            is_signed: self.is_signed,
            signal_value_type: self.signal_value_type,
        })
    }
}
