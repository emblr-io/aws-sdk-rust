// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Vehicles associated with the state template will stream telemetry data during a specified time period.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PeriodicStateTemplateUpdateStrategy {
    /// <p>The length of time between state template updates.</p>
    pub state_template_update_rate: ::std::option::Option<crate::types::TimePeriod>,
}
impl PeriodicStateTemplateUpdateStrategy {
    /// <p>The length of time between state template updates.</p>
    pub fn state_template_update_rate(&self) -> ::std::option::Option<&crate::types::TimePeriod> {
        self.state_template_update_rate.as_ref()
    }
}
impl PeriodicStateTemplateUpdateStrategy {
    /// Creates a new builder-style object to manufacture [`PeriodicStateTemplateUpdateStrategy`](crate::types::PeriodicStateTemplateUpdateStrategy).
    pub fn builder() -> crate::types::builders::PeriodicStateTemplateUpdateStrategyBuilder {
        crate::types::builders::PeriodicStateTemplateUpdateStrategyBuilder::default()
    }
}

/// A builder for [`PeriodicStateTemplateUpdateStrategy`](crate::types::PeriodicStateTemplateUpdateStrategy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PeriodicStateTemplateUpdateStrategyBuilder {
    pub(crate) state_template_update_rate: ::std::option::Option<crate::types::TimePeriod>,
}
impl PeriodicStateTemplateUpdateStrategyBuilder {
    /// <p>The length of time between state template updates.</p>
    /// This field is required.
    pub fn state_template_update_rate(mut self, input: crate::types::TimePeriod) -> Self {
        self.state_template_update_rate = ::std::option::Option::Some(input);
        self
    }
    /// <p>The length of time between state template updates.</p>
    pub fn set_state_template_update_rate(mut self, input: ::std::option::Option<crate::types::TimePeriod>) -> Self {
        self.state_template_update_rate = input;
        self
    }
    /// <p>The length of time between state template updates.</p>
    pub fn get_state_template_update_rate(&self) -> &::std::option::Option<crate::types::TimePeriod> {
        &self.state_template_update_rate
    }
    /// Consumes the builder and constructs a [`PeriodicStateTemplateUpdateStrategy`](crate::types::PeriodicStateTemplateUpdateStrategy).
    pub fn build(self) -> crate::types::PeriodicStateTemplateUpdateStrategy {
        crate::types::PeriodicStateTemplateUpdateStrategy {
            state_template_update_rate: self.state_template_update_rate,
        }
    }
}
