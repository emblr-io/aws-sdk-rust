// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Mixin for common fields returned by CRUD APIs
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetWorkloadEstimateOutput {
    /// <p>The unique identifier of the retrieved workload estimate.</p>
    pub id: ::std::string::String,
    /// <p>The name of the retrieved workload estimate.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the workload estimate was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the workload estimate will expire.</p>
    pub expires_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The type of pricing rates used for the estimate.</p>
    pub rate_type: ::std::option::Option<crate::types::WorkloadEstimateRateType>,
    /// <p>The timestamp of the pricing rates used for the estimate.</p>
    pub rate_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The current status of the workload estimate.</p>
    pub status: ::std::option::Option<crate::types::WorkloadEstimateStatus>,
    /// <p>The total estimated cost for the workload.</p>
    pub total_cost: ::std::option::Option<f64>,
    /// <p>The currency of the estimated cost.</p>
    pub cost_currency: ::std::option::Option<crate::types::CurrencyCode>,
    /// <p>An error message if the workload estimate retrieval failed.</p>
    pub failure_message: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetWorkloadEstimateOutput {
    /// <p>The unique identifier of the retrieved workload estimate.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The name of the retrieved workload estimate.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The timestamp when the workload estimate was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp when the workload estimate will expire.</p>
    pub fn expires_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.expires_at.as_ref()
    }
    /// <p>The type of pricing rates used for the estimate.</p>
    pub fn rate_type(&self) -> ::std::option::Option<&crate::types::WorkloadEstimateRateType> {
        self.rate_type.as_ref()
    }
    /// <p>The timestamp of the pricing rates used for the estimate.</p>
    pub fn rate_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.rate_timestamp.as_ref()
    }
    /// <p>The current status of the workload estimate.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::WorkloadEstimateStatus> {
        self.status.as_ref()
    }
    /// <p>The total estimated cost for the workload.</p>
    pub fn total_cost(&self) -> ::std::option::Option<f64> {
        self.total_cost
    }
    /// <p>The currency of the estimated cost.</p>
    pub fn cost_currency(&self) -> ::std::option::Option<&crate::types::CurrencyCode> {
        self.cost_currency.as_ref()
    }
    /// <p>An error message if the workload estimate retrieval failed.</p>
    pub fn failure_message(&self) -> ::std::option::Option<&str> {
        self.failure_message.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetWorkloadEstimateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetWorkloadEstimateOutput {
    /// Creates a new builder-style object to manufacture [`GetWorkloadEstimateOutput`](crate::operation::get_workload_estimate::GetWorkloadEstimateOutput).
    pub fn builder() -> crate::operation::get_workload_estimate::builders::GetWorkloadEstimateOutputBuilder {
        crate::operation::get_workload_estimate::builders::GetWorkloadEstimateOutputBuilder::default()
    }
}

/// A builder for [`GetWorkloadEstimateOutput`](crate::operation::get_workload_estimate::GetWorkloadEstimateOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetWorkloadEstimateOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) expires_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) rate_type: ::std::option::Option<crate::types::WorkloadEstimateRateType>,
    pub(crate) rate_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::WorkloadEstimateStatus>,
    pub(crate) total_cost: ::std::option::Option<f64>,
    pub(crate) cost_currency: ::std::option::Option<crate::types::CurrencyCode>,
    pub(crate) failure_message: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetWorkloadEstimateOutputBuilder {
    /// <p>The unique identifier of the retrieved workload estimate.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the retrieved workload estimate.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the retrieved workload estimate.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the retrieved workload estimate.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the retrieved workload estimate.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the retrieved workload estimate.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The timestamp when the workload estimate was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the workload estimate was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the workload estimate was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when the workload estimate will expire.</p>
    pub fn expires_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expires_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the workload estimate will expire.</p>
    pub fn set_expires_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expires_at = input;
        self
    }
    /// <p>The timestamp when the workload estimate will expire.</p>
    pub fn get_expires_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expires_at
    }
    /// <p>The type of pricing rates used for the estimate.</p>
    pub fn rate_type(mut self, input: crate::types::WorkloadEstimateRateType) -> Self {
        self.rate_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of pricing rates used for the estimate.</p>
    pub fn set_rate_type(mut self, input: ::std::option::Option<crate::types::WorkloadEstimateRateType>) -> Self {
        self.rate_type = input;
        self
    }
    /// <p>The type of pricing rates used for the estimate.</p>
    pub fn get_rate_type(&self) -> &::std::option::Option<crate::types::WorkloadEstimateRateType> {
        &self.rate_type
    }
    /// <p>The timestamp of the pricing rates used for the estimate.</p>
    pub fn rate_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.rate_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of the pricing rates used for the estimate.</p>
    pub fn set_rate_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.rate_timestamp = input;
        self
    }
    /// <p>The timestamp of the pricing rates used for the estimate.</p>
    pub fn get_rate_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.rate_timestamp
    }
    /// <p>The current status of the workload estimate.</p>
    pub fn status(mut self, input: crate::types::WorkloadEstimateStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the workload estimate.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::WorkloadEstimateStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the workload estimate.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::WorkloadEstimateStatus> {
        &self.status
    }
    /// <p>The total estimated cost for the workload.</p>
    pub fn total_cost(mut self, input: f64) -> Self {
        self.total_cost = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total estimated cost for the workload.</p>
    pub fn set_total_cost(mut self, input: ::std::option::Option<f64>) -> Self {
        self.total_cost = input;
        self
    }
    /// <p>The total estimated cost for the workload.</p>
    pub fn get_total_cost(&self) -> &::std::option::Option<f64> {
        &self.total_cost
    }
    /// <p>The currency of the estimated cost.</p>
    pub fn cost_currency(mut self, input: crate::types::CurrencyCode) -> Self {
        self.cost_currency = ::std::option::Option::Some(input);
        self
    }
    /// <p>The currency of the estimated cost.</p>
    pub fn set_cost_currency(mut self, input: ::std::option::Option<crate::types::CurrencyCode>) -> Self {
        self.cost_currency = input;
        self
    }
    /// <p>The currency of the estimated cost.</p>
    pub fn get_cost_currency(&self) -> &::std::option::Option<crate::types::CurrencyCode> {
        &self.cost_currency
    }
    /// <p>An error message if the workload estimate retrieval failed.</p>
    pub fn failure_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An error message if the workload estimate retrieval failed.</p>
    pub fn set_failure_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_message = input;
        self
    }
    /// <p>An error message if the workload estimate retrieval failed.</p>
    pub fn get_failure_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_message
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetWorkloadEstimateOutput`](crate::operation::get_workload_estimate::GetWorkloadEstimateOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::operation::get_workload_estimate::builders::GetWorkloadEstimateOutputBuilder::id)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_workload_estimate::GetWorkloadEstimateOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_workload_estimate::GetWorkloadEstimateOutput {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building GetWorkloadEstimateOutput",
                )
            })?,
            name: self.name,
            created_at: self.created_at,
            expires_at: self.expires_at,
            rate_type: self.rate_type,
            rate_timestamp: self.rate_timestamp,
            status: self.status,
            total_cost: self.total_cost,
            cost_currency: self.cost_currency,
            failure_message: self.failure_message,
            _request_id: self._request_id,
        })
    }
}
