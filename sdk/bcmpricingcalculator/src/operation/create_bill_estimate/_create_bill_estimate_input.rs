// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateBillEstimateInput {
    /// <p>The ID of the Bill Scenario for which you want to create a Bill estimate.</p>
    pub bill_scenario_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Bill estimate that will be created. Names must be unique for an account.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>An optional list of tags to associate with the specified BillEstimate. You can use resource tags to control access to your BillEstimate using IAM policies. Each tag consists of a key and a value, and each key must be unique for the resource. The following restrictions apply to resource tags:</p>
    /// <ul>
    /// <li>
    /// <p>Although the maximum number of array members is 200, you can assign a maximum of 50 user-tags to one resource. The remaining are reserved for Amazon Web Services.</p></li>
    /// <li>
    /// <p>The maximum length of a key is 128 characters.</p></li>
    /// <li>
    /// <p>The maximum length of a value is 256 characters.</p></li>
    /// <li>
    /// <p>Keys and values can only contain alphanumeric characters, spaces, and any of the following: <code>_.:/=+@-</code>.</p></li>
    /// <li>
    /// <p>Keys and values are case sensitive.</p></li>
    /// <li>
    /// <p>Keys and values are trimmed for any leading or trailing whitespaces.</p></li>
    /// <li>
    /// <p>Don't use <code>aws:</code> as a prefix for your keys. This prefix is reserved for Amazon Web Services.</p></li>
    /// </ul>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateBillEstimateInput {
    /// <p>The ID of the Bill Scenario for which you want to create a Bill estimate.</p>
    pub fn bill_scenario_id(&self) -> ::std::option::Option<&str> {
        self.bill_scenario_id.as_deref()
    }
    /// <p>The name of the Bill estimate that will be created. Names must be unique for an account.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>An optional list of tags to associate with the specified BillEstimate. You can use resource tags to control access to your BillEstimate using IAM policies. Each tag consists of a key and a value, and each key must be unique for the resource. The following restrictions apply to resource tags:</p>
    /// <ul>
    /// <li>
    /// <p>Although the maximum number of array members is 200, you can assign a maximum of 50 user-tags to one resource. The remaining are reserved for Amazon Web Services.</p></li>
    /// <li>
    /// <p>The maximum length of a key is 128 characters.</p></li>
    /// <li>
    /// <p>The maximum length of a value is 256 characters.</p></li>
    /// <li>
    /// <p>Keys and values can only contain alphanumeric characters, spaces, and any of the following: <code>_.:/=+@-</code>.</p></li>
    /// <li>
    /// <p>Keys and values are case sensitive.</p></li>
    /// <li>
    /// <p>Keys and values are trimmed for any leading or trailing whitespaces.</p></li>
    /// <li>
    /// <p>Don't use <code>aws:</code> as a prefix for your keys. This prefix is reserved for Amazon Web Services.</p></li>
    /// </ul>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateBillEstimateInput {
    /// Creates a new builder-style object to manufacture [`CreateBillEstimateInput`](crate::operation::create_bill_estimate::CreateBillEstimateInput).
    pub fn builder() -> crate::operation::create_bill_estimate::builders::CreateBillEstimateInputBuilder {
        crate::operation::create_bill_estimate::builders::CreateBillEstimateInputBuilder::default()
    }
}

/// A builder for [`CreateBillEstimateInput`](crate::operation::create_bill_estimate::CreateBillEstimateInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateBillEstimateInputBuilder {
    pub(crate) bill_scenario_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateBillEstimateInputBuilder {
    /// <p>The ID of the Bill Scenario for which you want to create a Bill estimate.</p>
    /// This field is required.
    pub fn bill_scenario_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bill_scenario_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Bill Scenario for which you want to create a Bill estimate.</p>
    pub fn set_bill_scenario_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bill_scenario_id = input;
        self
    }
    /// <p>The ID of the Bill Scenario for which you want to create a Bill estimate.</p>
    pub fn get_bill_scenario_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bill_scenario_id
    }
    /// <p>The name of the Bill estimate that will be created. Names must be unique for an account.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Bill estimate that will be created. Names must be unique for an account.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Bill estimate that will be created. Names must be unique for an account.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An optional list of tags to associate with the specified BillEstimate. You can use resource tags to control access to your BillEstimate using IAM policies. Each tag consists of a key and a value, and each key must be unique for the resource. The following restrictions apply to resource tags:</p>
    /// <ul>
    /// <li>
    /// <p>Although the maximum number of array members is 200, you can assign a maximum of 50 user-tags to one resource. The remaining are reserved for Amazon Web Services.</p></li>
    /// <li>
    /// <p>The maximum length of a key is 128 characters.</p></li>
    /// <li>
    /// <p>The maximum length of a value is 256 characters.</p></li>
    /// <li>
    /// <p>Keys and values can only contain alphanumeric characters, spaces, and any of the following: <code>_.:/=+@-</code>.</p></li>
    /// <li>
    /// <p>Keys and values are case sensitive.</p></li>
    /// <li>
    /// <p>Keys and values are trimmed for any leading or trailing whitespaces.</p></li>
    /// <li>
    /// <p>Don't use <code>aws:</code> as a prefix for your keys. This prefix is reserved for Amazon Web Services.</p></li>
    /// </ul>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>An optional list of tags to associate with the specified BillEstimate. You can use resource tags to control access to your BillEstimate using IAM policies. Each tag consists of a key and a value, and each key must be unique for the resource. The following restrictions apply to resource tags:</p>
    /// <ul>
    /// <li>
    /// <p>Although the maximum number of array members is 200, you can assign a maximum of 50 user-tags to one resource. The remaining are reserved for Amazon Web Services.</p></li>
    /// <li>
    /// <p>The maximum length of a key is 128 characters.</p></li>
    /// <li>
    /// <p>The maximum length of a value is 256 characters.</p></li>
    /// <li>
    /// <p>Keys and values can only contain alphanumeric characters, spaces, and any of the following: <code>_.:/=+@-</code>.</p></li>
    /// <li>
    /// <p>Keys and values are case sensitive.</p></li>
    /// <li>
    /// <p>Keys and values are trimmed for any leading or trailing whitespaces.</p></li>
    /// <li>
    /// <p>Don't use <code>aws:</code> as a prefix for your keys. This prefix is reserved for Amazon Web Services.</p></li>
    /// </ul>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>An optional list of tags to associate with the specified BillEstimate. You can use resource tags to control access to your BillEstimate using IAM policies. Each tag consists of a key and a value, and each key must be unique for the resource. The following restrictions apply to resource tags:</p>
    /// <ul>
    /// <li>
    /// <p>Although the maximum number of array members is 200, you can assign a maximum of 50 user-tags to one resource. The remaining are reserved for Amazon Web Services.</p></li>
    /// <li>
    /// <p>The maximum length of a key is 128 characters.</p></li>
    /// <li>
    /// <p>The maximum length of a value is 256 characters.</p></li>
    /// <li>
    /// <p>Keys and values can only contain alphanumeric characters, spaces, and any of the following: <code>_.:/=+@-</code>.</p></li>
    /// <li>
    /// <p>Keys and values are case sensitive.</p></li>
    /// <li>
    /// <p>Keys and values are trimmed for any leading or trailing whitespaces.</p></li>
    /// <li>
    /// <p>Don't use <code>aws:</code> as a prefix for your keys. This prefix is reserved for Amazon Web Services.</p></li>
    /// </ul>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateBillEstimateInput`](crate::operation::create_bill_estimate::CreateBillEstimateInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_bill_estimate::CreateBillEstimateInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_bill_estimate::CreateBillEstimateInput {
            bill_scenario_id: self.bill_scenario_id,
            name: self.name,
            client_token: self.client_token,
            tags: self.tags,
        })
    }
}
