// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchUpdateBillScenarioCommitmentModificationInput {
    /// <p>The ID of the Bill Scenario for which you want to modify the commitment group of a modeled commitment.</p>
    pub bill_scenario_id: ::std::option::Option<::std::string::String>,
    /// <p>List of commitments that you want to update in a Bill Scenario.</p>
    pub commitment_modifications: ::std::option::Option<::std::vec::Vec<crate::types::BatchUpdateBillScenarioCommitmentModificationEntry>>,
}
impl BatchUpdateBillScenarioCommitmentModificationInput {
    /// <p>The ID of the Bill Scenario for which you want to modify the commitment group of a modeled commitment.</p>
    pub fn bill_scenario_id(&self) -> ::std::option::Option<&str> {
        self.bill_scenario_id.as_deref()
    }
    /// <p>List of commitments that you want to update in a Bill Scenario.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.commitment_modifications.is_none()`.
    pub fn commitment_modifications(&self) -> &[crate::types::BatchUpdateBillScenarioCommitmentModificationEntry] {
        self.commitment_modifications.as_deref().unwrap_or_default()
    }
}
impl BatchUpdateBillScenarioCommitmentModificationInput {
    /// Creates a new builder-style object to manufacture [`BatchUpdateBillScenarioCommitmentModificationInput`](crate::operation::batch_update_bill_scenario_commitment_modification::BatchUpdateBillScenarioCommitmentModificationInput).
    pub fn builder(
    ) -> crate::operation::batch_update_bill_scenario_commitment_modification::builders::BatchUpdateBillScenarioCommitmentModificationInputBuilder
    {
        crate::operation::batch_update_bill_scenario_commitment_modification::builders::BatchUpdateBillScenarioCommitmentModificationInputBuilder::default()
    }
}

/// A builder for [`BatchUpdateBillScenarioCommitmentModificationInput`](crate::operation::batch_update_bill_scenario_commitment_modification::BatchUpdateBillScenarioCommitmentModificationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchUpdateBillScenarioCommitmentModificationInputBuilder {
    pub(crate) bill_scenario_id: ::std::option::Option<::std::string::String>,
    pub(crate) commitment_modifications: ::std::option::Option<::std::vec::Vec<crate::types::BatchUpdateBillScenarioCommitmentModificationEntry>>,
}
impl BatchUpdateBillScenarioCommitmentModificationInputBuilder {
    /// <p>The ID of the Bill Scenario for which you want to modify the commitment group of a modeled commitment.</p>
    /// This field is required.
    pub fn bill_scenario_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bill_scenario_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Bill Scenario for which you want to modify the commitment group of a modeled commitment.</p>
    pub fn set_bill_scenario_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bill_scenario_id = input;
        self
    }
    /// <p>The ID of the Bill Scenario for which you want to modify the commitment group of a modeled commitment.</p>
    pub fn get_bill_scenario_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bill_scenario_id
    }
    /// Appends an item to `commitment_modifications`.
    ///
    /// To override the contents of this collection use [`set_commitment_modifications`](Self::set_commitment_modifications).
    ///
    /// <p>List of commitments that you want to update in a Bill Scenario.</p>
    pub fn commitment_modifications(mut self, input: crate::types::BatchUpdateBillScenarioCommitmentModificationEntry) -> Self {
        let mut v = self.commitment_modifications.unwrap_or_default();
        v.push(input);
        self.commitment_modifications = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of commitments that you want to update in a Bill Scenario.</p>
    pub fn set_commitment_modifications(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::BatchUpdateBillScenarioCommitmentModificationEntry>>,
    ) -> Self {
        self.commitment_modifications = input;
        self
    }
    /// <p>List of commitments that you want to update in a Bill Scenario.</p>
    pub fn get_commitment_modifications(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::BatchUpdateBillScenarioCommitmentModificationEntry>> {
        &self.commitment_modifications
    }
    /// Consumes the builder and constructs a [`BatchUpdateBillScenarioCommitmentModificationInput`](crate::operation::batch_update_bill_scenario_commitment_modification::BatchUpdateBillScenarioCommitmentModificationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_update_bill_scenario_commitment_modification::BatchUpdateBillScenarioCommitmentModificationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::batch_update_bill_scenario_commitment_modification::BatchUpdateBillScenarioCommitmentModificationInput {
                bill_scenario_id: self.bill_scenario_id,
                commitment_modifications: self.commitment_modifications,
            },
        )
    }
}
