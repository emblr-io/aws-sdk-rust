// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchCreateBillScenarioUsageModificationInput {
    /// <p>The ID of the Bill Scenario for which you want to create the modeled usage.</p>
    pub bill_scenario_id: ::std::option::Option<::std::string::String>,
    /// <p>List of usage that you want to model in the Bill Scenario.</p>
    pub usage_modifications: ::std::option::Option<::std::vec::Vec<crate::types::BatchCreateBillScenarioUsageModificationEntry>>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl BatchCreateBillScenarioUsageModificationInput {
    /// <p>The ID of the Bill Scenario for which you want to create the modeled usage.</p>
    pub fn bill_scenario_id(&self) -> ::std::option::Option<&str> {
        self.bill_scenario_id.as_deref()
    }
    /// <p>List of usage that you want to model in the Bill Scenario.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.usage_modifications.is_none()`.
    pub fn usage_modifications(&self) -> &[crate::types::BatchCreateBillScenarioUsageModificationEntry] {
        self.usage_modifications.as_deref().unwrap_or_default()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl BatchCreateBillScenarioUsageModificationInput {
    /// Creates a new builder-style object to manufacture [`BatchCreateBillScenarioUsageModificationInput`](crate::operation::batch_create_bill_scenario_usage_modification::BatchCreateBillScenarioUsageModificationInput).
    pub fn builder() -> crate::operation::batch_create_bill_scenario_usage_modification::builders::BatchCreateBillScenarioUsageModificationInputBuilder
    {
        crate::operation::batch_create_bill_scenario_usage_modification::builders::BatchCreateBillScenarioUsageModificationInputBuilder::default()
    }
}

/// A builder for [`BatchCreateBillScenarioUsageModificationInput`](crate::operation::batch_create_bill_scenario_usage_modification::BatchCreateBillScenarioUsageModificationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchCreateBillScenarioUsageModificationInputBuilder {
    pub(crate) bill_scenario_id: ::std::option::Option<::std::string::String>,
    pub(crate) usage_modifications: ::std::option::Option<::std::vec::Vec<crate::types::BatchCreateBillScenarioUsageModificationEntry>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl BatchCreateBillScenarioUsageModificationInputBuilder {
    /// <p>The ID of the Bill Scenario for which you want to create the modeled usage.</p>
    /// This field is required.
    pub fn bill_scenario_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bill_scenario_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Bill Scenario for which you want to create the modeled usage.</p>
    pub fn set_bill_scenario_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bill_scenario_id = input;
        self
    }
    /// <p>The ID of the Bill Scenario for which you want to create the modeled usage.</p>
    pub fn get_bill_scenario_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bill_scenario_id
    }
    /// Appends an item to `usage_modifications`.
    ///
    /// To override the contents of this collection use [`set_usage_modifications`](Self::set_usage_modifications).
    ///
    /// <p>List of usage that you want to model in the Bill Scenario.</p>
    pub fn usage_modifications(mut self, input: crate::types::BatchCreateBillScenarioUsageModificationEntry) -> Self {
        let mut v = self.usage_modifications.unwrap_or_default();
        v.push(input);
        self.usage_modifications = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of usage that you want to model in the Bill Scenario.</p>
    pub fn set_usage_modifications(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::BatchCreateBillScenarioUsageModificationEntry>>,
    ) -> Self {
        self.usage_modifications = input;
        self
    }
    /// <p>List of usage that you want to model in the Bill Scenario.</p>
    pub fn get_usage_modifications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BatchCreateBillScenarioUsageModificationEntry>> {
        &self.usage_modifications
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`BatchCreateBillScenarioUsageModificationInput`](crate::operation::batch_create_bill_scenario_usage_modification::BatchCreateBillScenarioUsageModificationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_create_bill_scenario_usage_modification::BatchCreateBillScenarioUsageModificationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::batch_create_bill_scenario_usage_modification::BatchCreateBillScenarioUsageModificationInput {
                bill_scenario_id: self.bill_scenario_id,
                usage_modifications: self.usage_modifications,
                client_token: self.client_token,
            },
        )
    }
}
