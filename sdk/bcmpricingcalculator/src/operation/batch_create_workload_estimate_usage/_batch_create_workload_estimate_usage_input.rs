// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchCreateWorkloadEstimateUsageInput {
    /// <p>The ID of the Workload estimate for which you want to create the modeled usage.</p>
    pub workload_estimate_id: ::std::option::Option<::std::string::String>,
    /// <p>List of usage that you want to model in the Workload estimate.</p>
    pub usage: ::std::option::Option<::std::vec::Vec<crate::types::BatchCreateWorkloadEstimateUsageEntry>>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl BatchCreateWorkloadEstimateUsageInput {
    /// <p>The ID of the Workload estimate for which you want to create the modeled usage.</p>
    pub fn workload_estimate_id(&self) -> ::std::option::Option<&str> {
        self.workload_estimate_id.as_deref()
    }
    /// <p>List of usage that you want to model in the Workload estimate.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.usage.is_none()`.
    pub fn usage(&self) -> &[crate::types::BatchCreateWorkloadEstimateUsageEntry] {
        self.usage.as_deref().unwrap_or_default()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl BatchCreateWorkloadEstimateUsageInput {
    /// Creates a new builder-style object to manufacture [`BatchCreateWorkloadEstimateUsageInput`](crate::operation::batch_create_workload_estimate_usage::BatchCreateWorkloadEstimateUsageInput).
    pub fn builder() -> crate::operation::batch_create_workload_estimate_usage::builders::BatchCreateWorkloadEstimateUsageInputBuilder {
        crate::operation::batch_create_workload_estimate_usage::builders::BatchCreateWorkloadEstimateUsageInputBuilder::default()
    }
}

/// A builder for [`BatchCreateWorkloadEstimateUsageInput`](crate::operation::batch_create_workload_estimate_usage::BatchCreateWorkloadEstimateUsageInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchCreateWorkloadEstimateUsageInputBuilder {
    pub(crate) workload_estimate_id: ::std::option::Option<::std::string::String>,
    pub(crate) usage: ::std::option::Option<::std::vec::Vec<crate::types::BatchCreateWorkloadEstimateUsageEntry>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl BatchCreateWorkloadEstimateUsageInputBuilder {
    /// <p>The ID of the Workload estimate for which you want to create the modeled usage.</p>
    /// This field is required.
    pub fn workload_estimate_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workload_estimate_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Workload estimate for which you want to create the modeled usage.</p>
    pub fn set_workload_estimate_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workload_estimate_id = input;
        self
    }
    /// <p>The ID of the Workload estimate for which you want to create the modeled usage.</p>
    pub fn get_workload_estimate_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workload_estimate_id
    }
    /// Appends an item to `usage`.
    ///
    /// To override the contents of this collection use [`set_usage`](Self::set_usage).
    ///
    /// <p>List of usage that you want to model in the Workload estimate.</p>
    pub fn usage(mut self, input: crate::types::BatchCreateWorkloadEstimateUsageEntry) -> Self {
        let mut v = self.usage.unwrap_or_default();
        v.push(input);
        self.usage = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of usage that you want to model in the Workload estimate.</p>
    pub fn set_usage(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BatchCreateWorkloadEstimateUsageEntry>>) -> Self {
        self.usage = input;
        self
    }
    /// <p>List of usage that you want to model in the Workload estimate.</p>
    pub fn get_usage(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BatchCreateWorkloadEstimateUsageEntry>> {
        &self.usage
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`BatchCreateWorkloadEstimateUsageInput`](crate::operation::batch_create_workload_estimate_usage::BatchCreateWorkloadEstimateUsageInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_create_workload_estimate_usage::BatchCreateWorkloadEstimateUsageInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::batch_create_workload_estimate_usage::BatchCreateWorkloadEstimateUsageInput {
                workload_estimate_id: self.workload_estimate_id,
                usage: self.usage,
                client_token: self.client_token,
            },
        )
    }
}
