// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a summary of a bill scenario.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BillScenarioSummary {
    /// <p>The unique identifier of the bill scenario.</p>
    pub id: ::std::string::String,
    /// <p>The name of the bill scenario.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The time period covered by the bill scenario.</p>
    pub bill_interval: ::std::option::Option<crate::types::BillInterval>,
    /// <p>The current status of the bill scenario.</p>
    pub status: ::std::option::Option<crate::types::BillScenarioStatus>,
    /// <p>The timestamp when the bill scenario was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the bill scenario will expire.</p>
    pub expires_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>An error message if the bill scenario creation or processing failed.</p>
    pub failure_message: ::std::option::Option<::std::string::String>,
}
impl BillScenarioSummary {
    /// <p>The unique identifier of the bill scenario.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The name of the bill scenario.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The time period covered by the bill scenario.</p>
    pub fn bill_interval(&self) -> ::std::option::Option<&crate::types::BillInterval> {
        self.bill_interval.as_ref()
    }
    /// <p>The current status of the bill scenario.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::BillScenarioStatus> {
        self.status.as_ref()
    }
    /// <p>The timestamp when the bill scenario was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp when the bill scenario will expire.</p>
    pub fn expires_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.expires_at.as_ref()
    }
    /// <p>An error message if the bill scenario creation or processing failed.</p>
    pub fn failure_message(&self) -> ::std::option::Option<&str> {
        self.failure_message.as_deref()
    }
}
impl BillScenarioSummary {
    /// Creates a new builder-style object to manufacture [`BillScenarioSummary`](crate::types::BillScenarioSummary).
    pub fn builder() -> crate::types::builders::BillScenarioSummaryBuilder {
        crate::types::builders::BillScenarioSummaryBuilder::default()
    }
}

/// A builder for [`BillScenarioSummary`](crate::types::BillScenarioSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BillScenarioSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) bill_interval: ::std::option::Option<crate::types::BillInterval>,
    pub(crate) status: ::std::option::Option<crate::types::BillScenarioStatus>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) expires_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) failure_message: ::std::option::Option<::std::string::String>,
}
impl BillScenarioSummaryBuilder {
    /// <p>The unique identifier of the bill scenario.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the bill scenario.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the bill scenario.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the bill scenario.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the bill scenario.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the bill scenario.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The time period covered by the bill scenario.</p>
    pub fn bill_interval(mut self, input: crate::types::BillInterval) -> Self {
        self.bill_interval = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time period covered by the bill scenario.</p>
    pub fn set_bill_interval(mut self, input: ::std::option::Option<crate::types::BillInterval>) -> Self {
        self.bill_interval = input;
        self
    }
    /// <p>The time period covered by the bill scenario.</p>
    pub fn get_bill_interval(&self) -> &::std::option::Option<crate::types::BillInterval> {
        &self.bill_interval
    }
    /// <p>The current status of the bill scenario.</p>
    pub fn status(mut self, input: crate::types::BillScenarioStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the bill scenario.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::BillScenarioStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the bill scenario.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::BillScenarioStatus> {
        &self.status
    }
    /// <p>The timestamp when the bill scenario was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the bill scenario was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the bill scenario was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when the bill scenario will expire.</p>
    pub fn expires_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expires_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the bill scenario will expire.</p>
    pub fn set_expires_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expires_at = input;
        self
    }
    /// <p>The timestamp when the bill scenario will expire.</p>
    pub fn get_expires_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expires_at
    }
    /// <p>An error message if the bill scenario creation or processing failed.</p>
    pub fn failure_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An error message if the bill scenario creation or processing failed.</p>
    pub fn set_failure_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_message = input;
        self
    }
    /// <p>An error message if the bill scenario creation or processing failed.</p>
    pub fn get_failure_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_message
    }
    /// Consumes the builder and constructs a [`BillScenarioSummary`](crate::types::BillScenarioSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::BillScenarioSummaryBuilder::id)
    pub fn build(self) -> ::std::result::Result<crate::types::BillScenarioSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BillScenarioSummary {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building BillScenarioSummary",
                )
            })?,
            name: self.name,
            bill_interval: self.bill_interval,
            status: self.status,
            created_at: self.created_at,
            expires_at: self.expires_at,
            failure_message: self.failure_message,
        })
    }
}
