// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents an entry in a batch operation to update bill scenario usage modifications.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchUpdateBillScenarioUsageModificationEntry {
    /// <p>The unique identifier of the usage modification to update.</p>
    pub id: ::std::string::String,
    /// <p>The updated group identifier for the usage modification.</p>
    pub group: ::std::option::Option<::std::string::String>,
    /// <p>The updated usage amounts for the modification.</p>
    pub amounts: ::std::option::Option<::std::vec::Vec<crate::types::UsageAmount>>,
}
impl BatchUpdateBillScenarioUsageModificationEntry {
    /// <p>The unique identifier of the usage modification to update.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The updated group identifier for the usage modification.</p>
    pub fn group(&self) -> ::std::option::Option<&str> {
        self.group.as_deref()
    }
    /// <p>The updated usage amounts for the modification.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.amounts.is_none()`.
    pub fn amounts(&self) -> &[crate::types::UsageAmount] {
        self.amounts.as_deref().unwrap_or_default()
    }
}
impl BatchUpdateBillScenarioUsageModificationEntry {
    /// Creates a new builder-style object to manufacture [`BatchUpdateBillScenarioUsageModificationEntry`](crate::types::BatchUpdateBillScenarioUsageModificationEntry).
    pub fn builder() -> crate::types::builders::BatchUpdateBillScenarioUsageModificationEntryBuilder {
        crate::types::builders::BatchUpdateBillScenarioUsageModificationEntryBuilder::default()
    }
}

/// A builder for [`BatchUpdateBillScenarioUsageModificationEntry`](crate::types::BatchUpdateBillScenarioUsageModificationEntry).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchUpdateBillScenarioUsageModificationEntryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) group: ::std::option::Option<::std::string::String>,
    pub(crate) amounts: ::std::option::Option<::std::vec::Vec<crate::types::UsageAmount>>,
}
impl BatchUpdateBillScenarioUsageModificationEntryBuilder {
    /// <p>The unique identifier of the usage modification to update.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the usage modification to update.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the usage modification to update.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The updated group identifier for the usage modification.</p>
    pub fn group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated group identifier for the usage modification.</p>
    pub fn set_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group = input;
        self
    }
    /// <p>The updated group identifier for the usage modification.</p>
    pub fn get_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.group
    }
    /// Appends an item to `amounts`.
    ///
    /// To override the contents of this collection use [`set_amounts`](Self::set_amounts).
    ///
    /// <p>The updated usage amounts for the modification.</p>
    pub fn amounts(mut self, input: crate::types::UsageAmount) -> Self {
        let mut v = self.amounts.unwrap_or_default();
        v.push(input);
        self.amounts = ::std::option::Option::Some(v);
        self
    }
    /// <p>The updated usage amounts for the modification.</p>
    pub fn set_amounts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UsageAmount>>) -> Self {
        self.amounts = input;
        self
    }
    /// <p>The updated usage amounts for the modification.</p>
    pub fn get_amounts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UsageAmount>> {
        &self.amounts
    }
    /// Consumes the builder and constructs a [`BatchUpdateBillScenarioUsageModificationEntry`](crate::types::BatchUpdateBillScenarioUsageModificationEntry).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::BatchUpdateBillScenarioUsageModificationEntryBuilder::id)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::BatchUpdateBillScenarioUsageModificationEntry, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BatchUpdateBillScenarioUsageModificationEntry {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building BatchUpdateBillScenarioUsageModificationEntry",
                )
            })?,
            group: self.group,
            amounts: self.amounts,
        })
    }
}
