// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents an action to modify commitments in a bill scenario.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum BillScenarioCommitmentModificationAction {
    /// <p>Action to add a Reserved Instance to the scenario.</p>
    AddReservedInstanceAction(crate::types::AddReservedInstanceAction),
    /// <p>Action to add a Savings Plan to the scenario.</p>
    AddSavingsPlanAction(crate::types::AddSavingsPlanAction),
    /// <p>Action to remove a Reserved Instance from the scenario.</p>
    NegateReservedInstanceAction(crate::types::NegateReservedInstanceAction),
    /// <p>Action to remove a Savings Plan from the scenario.</p>
    NegateSavingsPlanAction(crate::types::NegateSavingsPlanAction),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl BillScenarioCommitmentModificationAction {
    /// Tries to convert the enum instance into [`AddReservedInstanceAction`](crate::types::BillScenarioCommitmentModificationAction::AddReservedInstanceAction), extracting the inner [`AddReservedInstanceAction`](crate::types::AddReservedInstanceAction).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_add_reserved_instance_action(&self) -> ::std::result::Result<&crate::types::AddReservedInstanceAction, &Self> {
        if let BillScenarioCommitmentModificationAction::AddReservedInstanceAction(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AddReservedInstanceAction`](crate::types::BillScenarioCommitmentModificationAction::AddReservedInstanceAction).
    pub fn is_add_reserved_instance_action(&self) -> bool {
        self.as_add_reserved_instance_action().is_ok()
    }
    /// Tries to convert the enum instance into [`AddSavingsPlanAction`](crate::types::BillScenarioCommitmentModificationAction::AddSavingsPlanAction), extracting the inner [`AddSavingsPlanAction`](crate::types::AddSavingsPlanAction).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_add_savings_plan_action(&self) -> ::std::result::Result<&crate::types::AddSavingsPlanAction, &Self> {
        if let BillScenarioCommitmentModificationAction::AddSavingsPlanAction(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AddSavingsPlanAction`](crate::types::BillScenarioCommitmentModificationAction::AddSavingsPlanAction).
    pub fn is_add_savings_plan_action(&self) -> bool {
        self.as_add_savings_plan_action().is_ok()
    }
    /// Tries to convert the enum instance into [`NegateReservedInstanceAction`](crate::types::BillScenarioCommitmentModificationAction::NegateReservedInstanceAction), extracting the inner [`NegateReservedInstanceAction`](crate::types::NegateReservedInstanceAction).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_negate_reserved_instance_action(&self) -> ::std::result::Result<&crate::types::NegateReservedInstanceAction, &Self> {
        if let BillScenarioCommitmentModificationAction::NegateReservedInstanceAction(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`NegateReservedInstanceAction`](crate::types::BillScenarioCommitmentModificationAction::NegateReservedInstanceAction).
    pub fn is_negate_reserved_instance_action(&self) -> bool {
        self.as_negate_reserved_instance_action().is_ok()
    }
    /// Tries to convert the enum instance into [`NegateSavingsPlanAction`](crate::types::BillScenarioCommitmentModificationAction::NegateSavingsPlanAction), extracting the inner [`NegateSavingsPlanAction`](crate::types::NegateSavingsPlanAction).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_negate_savings_plan_action(&self) -> ::std::result::Result<&crate::types::NegateSavingsPlanAction, &Self> {
        if let BillScenarioCommitmentModificationAction::NegateSavingsPlanAction(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`NegateSavingsPlanAction`](crate::types::BillScenarioCommitmentModificationAction::NegateSavingsPlanAction).
    pub fn is_negate_savings_plan_action(&self) -> bool {
        self.as_negate_savings_plan_action().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
