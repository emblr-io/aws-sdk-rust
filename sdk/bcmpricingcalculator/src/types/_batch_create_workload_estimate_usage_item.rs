// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a successfully created item in a batch operation for workload estimate usage.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchCreateWorkloadEstimateUsageItem {
    /// <p>The Amazon Web Services service code for this usage estimate.</p>
    pub service_code: ::std::string::String,
    /// <p>The type of usage that was estimated.</p>
    pub usage_type: ::std::string::String,
    /// <p>The specific operation associated with this usage estimate.</p>
    pub operation: ::std::string::String,
    /// <p>The location associated with this usage estimate.</p>
    pub location: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier assigned to the created usage estimate.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID associated with the created usage estimate.</p>
    pub usage_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The group identifier for the created usage estimate.</p>
    pub group: ::std::option::Option<::std::string::String>,
    /// <p>The estimated usage quantity.</p>
    pub quantity: ::std::option::Option<crate::types::WorkloadEstimateUsageQuantity>,
    /// <p>The estimated cost associated with this usage.</p>
    pub cost: ::std::option::Option<f64>,
    /// <p>The currency of the estimated cost.</p>
    pub currency: ::std::option::Option<crate::types::CurrencyCode>,
    /// <p>The current status of the created usage estimate.</p>
    pub status: ::std::option::Option<crate::types::WorkloadEstimateCostStatus>,
    /// <p>Historical usage data associated with this estimate, if available.</p>
    pub historical_usage: ::std::option::Option<crate::types::HistoricalUsageEntity>,
    /// <p>The key of the successfully created entry.</p>
    pub key: ::std::option::Option<::std::string::String>,
}
impl BatchCreateWorkloadEstimateUsageItem {
    /// <p>The Amazon Web Services service code for this usage estimate.</p>
    pub fn service_code(&self) -> &str {
        use std::ops::Deref;
        self.service_code.deref()
    }
    /// <p>The type of usage that was estimated.</p>
    pub fn usage_type(&self) -> &str {
        use std::ops::Deref;
        self.usage_type.deref()
    }
    /// <p>The specific operation associated with this usage estimate.</p>
    pub fn operation(&self) -> &str {
        use std::ops::Deref;
        self.operation.deref()
    }
    /// <p>The location associated with this usage estimate.</p>
    pub fn location(&self) -> ::std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>The unique identifier assigned to the created usage estimate.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Web Services account ID associated with the created usage estimate.</p>
    pub fn usage_account_id(&self) -> ::std::option::Option<&str> {
        self.usage_account_id.as_deref()
    }
    /// <p>The group identifier for the created usage estimate.</p>
    pub fn group(&self) -> ::std::option::Option<&str> {
        self.group.as_deref()
    }
    /// <p>The estimated usage quantity.</p>
    pub fn quantity(&self) -> ::std::option::Option<&crate::types::WorkloadEstimateUsageQuantity> {
        self.quantity.as_ref()
    }
    /// <p>The estimated cost associated with this usage.</p>
    pub fn cost(&self) -> ::std::option::Option<f64> {
        self.cost
    }
    /// <p>The currency of the estimated cost.</p>
    pub fn currency(&self) -> ::std::option::Option<&crate::types::CurrencyCode> {
        self.currency.as_ref()
    }
    /// <p>The current status of the created usage estimate.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::WorkloadEstimateCostStatus> {
        self.status.as_ref()
    }
    /// <p>Historical usage data associated with this estimate, if available.</p>
    pub fn historical_usage(&self) -> ::std::option::Option<&crate::types::HistoricalUsageEntity> {
        self.historical_usage.as_ref()
    }
    /// <p>The key of the successfully created entry.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
}
impl BatchCreateWorkloadEstimateUsageItem {
    /// Creates a new builder-style object to manufacture [`BatchCreateWorkloadEstimateUsageItem`](crate::types::BatchCreateWorkloadEstimateUsageItem).
    pub fn builder() -> crate::types::builders::BatchCreateWorkloadEstimateUsageItemBuilder {
        crate::types::builders::BatchCreateWorkloadEstimateUsageItemBuilder::default()
    }
}

/// A builder for [`BatchCreateWorkloadEstimateUsageItem`](crate::types::BatchCreateWorkloadEstimateUsageItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchCreateWorkloadEstimateUsageItemBuilder {
    pub(crate) service_code: ::std::option::Option<::std::string::String>,
    pub(crate) usage_type: ::std::option::Option<::std::string::String>,
    pub(crate) operation: ::std::option::Option<::std::string::String>,
    pub(crate) location: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) usage_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) group: ::std::option::Option<::std::string::String>,
    pub(crate) quantity: ::std::option::Option<crate::types::WorkloadEstimateUsageQuantity>,
    pub(crate) cost: ::std::option::Option<f64>,
    pub(crate) currency: ::std::option::Option<crate::types::CurrencyCode>,
    pub(crate) status: ::std::option::Option<crate::types::WorkloadEstimateCostStatus>,
    pub(crate) historical_usage: ::std::option::Option<crate::types::HistoricalUsageEntity>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
}
impl BatchCreateWorkloadEstimateUsageItemBuilder {
    /// <p>The Amazon Web Services service code for this usage estimate.</p>
    /// This field is required.
    pub fn service_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services service code for this usage estimate.</p>
    pub fn set_service_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_code = input;
        self
    }
    /// <p>The Amazon Web Services service code for this usage estimate.</p>
    pub fn get_service_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_code
    }
    /// <p>The type of usage that was estimated.</p>
    /// This field is required.
    pub fn usage_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.usage_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of usage that was estimated.</p>
    pub fn set_usage_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.usage_type = input;
        self
    }
    /// <p>The type of usage that was estimated.</p>
    pub fn get_usage_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.usage_type
    }
    /// <p>The specific operation associated with this usage estimate.</p>
    /// This field is required.
    pub fn operation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The specific operation associated with this usage estimate.</p>
    pub fn set_operation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation = input;
        self
    }
    /// <p>The specific operation associated with this usage estimate.</p>
    pub fn get_operation(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation
    }
    /// <p>The location associated with this usage estimate.</p>
    pub fn location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The location associated with this usage estimate.</p>
    pub fn set_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>The location associated with this usage estimate.</p>
    pub fn get_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.location
    }
    /// <p>The unique identifier assigned to the created usage estimate.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier assigned to the created usage estimate.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier assigned to the created usage estimate.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The Amazon Web Services account ID associated with the created usage estimate.</p>
    pub fn usage_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.usage_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID associated with the created usage estimate.</p>
    pub fn set_usage_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.usage_account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID associated with the created usage estimate.</p>
    pub fn get_usage_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.usage_account_id
    }
    /// <p>The group identifier for the created usage estimate.</p>
    pub fn group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The group identifier for the created usage estimate.</p>
    pub fn set_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group = input;
        self
    }
    /// <p>The group identifier for the created usage estimate.</p>
    pub fn get_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.group
    }
    /// <p>The estimated usage quantity.</p>
    pub fn quantity(mut self, input: crate::types::WorkloadEstimateUsageQuantity) -> Self {
        self.quantity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The estimated usage quantity.</p>
    pub fn set_quantity(mut self, input: ::std::option::Option<crate::types::WorkloadEstimateUsageQuantity>) -> Self {
        self.quantity = input;
        self
    }
    /// <p>The estimated usage quantity.</p>
    pub fn get_quantity(&self) -> &::std::option::Option<crate::types::WorkloadEstimateUsageQuantity> {
        &self.quantity
    }
    /// <p>The estimated cost associated with this usage.</p>
    pub fn cost(mut self, input: f64) -> Self {
        self.cost = ::std::option::Option::Some(input);
        self
    }
    /// <p>The estimated cost associated with this usage.</p>
    pub fn set_cost(mut self, input: ::std::option::Option<f64>) -> Self {
        self.cost = input;
        self
    }
    /// <p>The estimated cost associated with this usage.</p>
    pub fn get_cost(&self) -> &::std::option::Option<f64> {
        &self.cost
    }
    /// <p>The currency of the estimated cost.</p>
    pub fn currency(mut self, input: crate::types::CurrencyCode) -> Self {
        self.currency = ::std::option::Option::Some(input);
        self
    }
    /// <p>The currency of the estimated cost.</p>
    pub fn set_currency(mut self, input: ::std::option::Option<crate::types::CurrencyCode>) -> Self {
        self.currency = input;
        self
    }
    /// <p>The currency of the estimated cost.</p>
    pub fn get_currency(&self) -> &::std::option::Option<crate::types::CurrencyCode> {
        &self.currency
    }
    /// <p>The current status of the created usage estimate.</p>
    pub fn status(mut self, input: crate::types::WorkloadEstimateCostStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the created usage estimate.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::WorkloadEstimateCostStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the created usage estimate.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::WorkloadEstimateCostStatus> {
        &self.status
    }
    /// <p>Historical usage data associated with this estimate, if available.</p>
    pub fn historical_usage(mut self, input: crate::types::HistoricalUsageEntity) -> Self {
        self.historical_usage = ::std::option::Option::Some(input);
        self
    }
    /// <p>Historical usage data associated with this estimate, if available.</p>
    pub fn set_historical_usage(mut self, input: ::std::option::Option<crate::types::HistoricalUsageEntity>) -> Self {
        self.historical_usage = input;
        self
    }
    /// <p>Historical usage data associated with this estimate, if available.</p>
    pub fn get_historical_usage(&self) -> &::std::option::Option<crate::types::HistoricalUsageEntity> {
        &self.historical_usage
    }
    /// <p>The key of the successfully created entry.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key of the successfully created entry.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The key of the successfully created entry.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// Consumes the builder and constructs a [`BatchCreateWorkloadEstimateUsageItem`](crate::types::BatchCreateWorkloadEstimateUsageItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`service_code`](crate::types::builders::BatchCreateWorkloadEstimateUsageItemBuilder::service_code)
    /// - [`usage_type`](crate::types::builders::BatchCreateWorkloadEstimateUsageItemBuilder::usage_type)
    /// - [`operation`](crate::types::builders::BatchCreateWorkloadEstimateUsageItemBuilder::operation)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::BatchCreateWorkloadEstimateUsageItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BatchCreateWorkloadEstimateUsageItem {
            service_code: self.service_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "service_code",
                    "service_code was not specified but it is required when building BatchCreateWorkloadEstimateUsageItem",
                )
            })?,
            usage_type: self.usage_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "usage_type",
                    "usage_type was not specified but it is required when building BatchCreateWorkloadEstimateUsageItem",
                )
            })?,
            operation: self.operation.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operation",
                    "operation was not specified but it is required when building BatchCreateWorkloadEstimateUsageItem",
                )
            })?,
            location: self.location,
            id: self.id,
            usage_account_id: self.usage_account_id,
            group: self.group,
            quantity: self.quantity,
            cost: self.cost,
            currency: self.currency,
            status: self.status,
            historical_usage: self.historical_usage,
            key: self.key,
        })
    }
}
