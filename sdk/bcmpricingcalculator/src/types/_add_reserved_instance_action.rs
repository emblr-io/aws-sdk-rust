// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents an action to add a Reserved Instance to a bill scenario.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AddReservedInstanceAction {
    /// <p>The ID of the Reserved Instance offering to add. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeReservedInstancesOfferings.html"> DescribeReservedInstancesOfferings</a>.</p>
    pub reserved_instances_offering_id: ::std::option::Option<::std::string::String>,
    /// <p>The number of instances to add for this Reserved Instance offering.</p>
    pub instance_count: ::std::option::Option<i32>,
}
impl AddReservedInstanceAction {
    /// <p>The ID of the Reserved Instance offering to add. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeReservedInstancesOfferings.html"> DescribeReservedInstancesOfferings</a>.</p>
    pub fn reserved_instances_offering_id(&self) -> ::std::option::Option<&str> {
        self.reserved_instances_offering_id.as_deref()
    }
    /// <p>The number of instances to add for this Reserved Instance offering.</p>
    pub fn instance_count(&self) -> ::std::option::Option<i32> {
        self.instance_count
    }
}
impl AddReservedInstanceAction {
    /// Creates a new builder-style object to manufacture [`AddReservedInstanceAction`](crate::types::AddReservedInstanceAction).
    pub fn builder() -> crate::types::builders::AddReservedInstanceActionBuilder {
        crate::types::builders::AddReservedInstanceActionBuilder::default()
    }
}

/// A builder for [`AddReservedInstanceAction`](crate::types::AddReservedInstanceAction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AddReservedInstanceActionBuilder {
    pub(crate) reserved_instances_offering_id: ::std::option::Option<::std::string::String>,
    pub(crate) instance_count: ::std::option::Option<i32>,
}
impl AddReservedInstanceActionBuilder {
    /// <p>The ID of the Reserved Instance offering to add. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeReservedInstancesOfferings.html"> DescribeReservedInstancesOfferings</a>.</p>
    pub fn reserved_instances_offering_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reserved_instances_offering_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Reserved Instance offering to add. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeReservedInstancesOfferings.html"> DescribeReservedInstancesOfferings</a>.</p>
    pub fn set_reserved_instances_offering_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reserved_instances_offering_id = input;
        self
    }
    /// <p>The ID of the Reserved Instance offering to add. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeReservedInstancesOfferings.html"> DescribeReservedInstancesOfferings</a>.</p>
    pub fn get_reserved_instances_offering_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.reserved_instances_offering_id
    }
    /// <p>The number of instances to add for this Reserved Instance offering.</p>
    pub fn instance_count(mut self, input: i32) -> Self {
        self.instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of instances to add for this Reserved Instance offering.</p>
    pub fn set_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.instance_count = input;
        self
    }
    /// <p>The number of instances to add for this Reserved Instance offering.</p>
    pub fn get_instance_count(&self) -> &::std::option::Option<i32> {
        &self.instance_count
    }
    /// Consumes the builder and constructs a [`AddReservedInstanceAction`](crate::types::AddReservedInstanceAction).
    pub fn build(self) -> crate::types::AddReservedInstanceAction {
        crate::types::AddReservedInstanceAction {
            reserved_instances_offering_id: self.reserved_instances_offering_id,
            instance_count: self.instance_count,
        }
    }
}
