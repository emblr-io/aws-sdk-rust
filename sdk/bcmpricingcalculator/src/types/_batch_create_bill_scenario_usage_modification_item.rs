// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a successfully created item in a batch operation for bill scenario usage modifications.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchCreateBillScenarioUsageModificationItem {
    /// <p>The Amazon Web Services service code for this usage modification.</p>
    pub service_code: ::std::string::String,
    /// <p>The type of usage that was modified.</p>
    pub usage_type: ::std::string::String,
    /// <p>The specific operation associated with this usage modification.</p>
    pub operation: ::std::string::String,
    /// <p>The location associated with this usage modification.</p>
    pub location: ::std::option::Option<::std::string::String>,
    /// <p>The availability zone associated with this usage modification, if applicable.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier assigned to the created usage modification.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The group identifier for the created usage modification.</p>
    pub group: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID associated with the created usage modification.</p>
    pub usage_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The modified usage quantities.</p>
    pub quantities: ::std::option::Option<::std::vec::Vec<crate::types::UsageQuantity>>,
    /// <p>Historical usage data associated with this modification, if available.</p>
    pub historical_usage: ::std::option::Option<crate::types::HistoricalUsageEntity>,
    /// <p>The key of the successfully created entry.</p>
    pub key: ::std::option::Option<::std::string::String>,
}
impl BatchCreateBillScenarioUsageModificationItem {
    /// <p>The Amazon Web Services service code for this usage modification.</p>
    pub fn service_code(&self) -> &str {
        use std::ops::Deref;
        self.service_code.deref()
    }
    /// <p>The type of usage that was modified.</p>
    pub fn usage_type(&self) -> &str {
        use std::ops::Deref;
        self.usage_type.deref()
    }
    /// <p>The specific operation associated with this usage modification.</p>
    pub fn operation(&self) -> &str {
        use std::ops::Deref;
        self.operation.deref()
    }
    /// <p>The location associated with this usage modification.</p>
    pub fn location(&self) -> ::std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>The availability zone associated with this usage modification, if applicable.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The unique identifier assigned to the created usage modification.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The group identifier for the created usage modification.</p>
    pub fn group(&self) -> ::std::option::Option<&str> {
        self.group.as_deref()
    }
    /// <p>The Amazon Web Services account ID associated with the created usage modification.</p>
    pub fn usage_account_id(&self) -> ::std::option::Option<&str> {
        self.usage_account_id.as_deref()
    }
    /// <p>The modified usage quantities.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.quantities.is_none()`.
    pub fn quantities(&self) -> &[crate::types::UsageQuantity] {
        self.quantities.as_deref().unwrap_or_default()
    }
    /// <p>Historical usage data associated with this modification, if available.</p>
    pub fn historical_usage(&self) -> ::std::option::Option<&crate::types::HistoricalUsageEntity> {
        self.historical_usage.as_ref()
    }
    /// <p>The key of the successfully created entry.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
}
impl BatchCreateBillScenarioUsageModificationItem {
    /// Creates a new builder-style object to manufacture [`BatchCreateBillScenarioUsageModificationItem`](crate::types::BatchCreateBillScenarioUsageModificationItem).
    pub fn builder() -> crate::types::builders::BatchCreateBillScenarioUsageModificationItemBuilder {
        crate::types::builders::BatchCreateBillScenarioUsageModificationItemBuilder::default()
    }
}

/// A builder for [`BatchCreateBillScenarioUsageModificationItem`](crate::types::BatchCreateBillScenarioUsageModificationItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchCreateBillScenarioUsageModificationItemBuilder {
    pub(crate) service_code: ::std::option::Option<::std::string::String>,
    pub(crate) usage_type: ::std::option::Option<::std::string::String>,
    pub(crate) operation: ::std::option::Option<::std::string::String>,
    pub(crate) location: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) group: ::std::option::Option<::std::string::String>,
    pub(crate) usage_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) quantities: ::std::option::Option<::std::vec::Vec<crate::types::UsageQuantity>>,
    pub(crate) historical_usage: ::std::option::Option<crate::types::HistoricalUsageEntity>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
}
impl BatchCreateBillScenarioUsageModificationItemBuilder {
    /// <p>The Amazon Web Services service code for this usage modification.</p>
    /// This field is required.
    pub fn service_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services service code for this usage modification.</p>
    pub fn set_service_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_code = input;
        self
    }
    /// <p>The Amazon Web Services service code for this usage modification.</p>
    pub fn get_service_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_code
    }
    /// <p>The type of usage that was modified.</p>
    /// This field is required.
    pub fn usage_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.usage_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of usage that was modified.</p>
    pub fn set_usage_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.usage_type = input;
        self
    }
    /// <p>The type of usage that was modified.</p>
    pub fn get_usage_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.usage_type
    }
    /// <p>The specific operation associated with this usage modification.</p>
    /// This field is required.
    pub fn operation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The specific operation associated with this usage modification.</p>
    pub fn set_operation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation = input;
        self
    }
    /// <p>The specific operation associated with this usage modification.</p>
    pub fn get_operation(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation
    }
    /// <p>The location associated with this usage modification.</p>
    pub fn location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The location associated with this usage modification.</p>
    pub fn set_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>The location associated with this usage modification.</p>
    pub fn get_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.location
    }
    /// <p>The availability zone associated with this usage modification, if applicable.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The availability zone associated with this usage modification, if applicable.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The availability zone associated with this usage modification, if applicable.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The unique identifier assigned to the created usage modification.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier assigned to the created usage modification.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier assigned to the created usage modification.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The group identifier for the created usage modification.</p>
    pub fn group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The group identifier for the created usage modification.</p>
    pub fn set_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group = input;
        self
    }
    /// <p>The group identifier for the created usage modification.</p>
    pub fn get_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.group
    }
    /// <p>The Amazon Web Services account ID associated with the created usage modification.</p>
    pub fn usage_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.usage_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID associated with the created usage modification.</p>
    pub fn set_usage_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.usage_account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID associated with the created usage modification.</p>
    pub fn get_usage_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.usage_account_id
    }
    /// Appends an item to `quantities`.
    ///
    /// To override the contents of this collection use [`set_quantities`](Self::set_quantities).
    ///
    /// <p>The modified usage quantities.</p>
    pub fn quantities(mut self, input: crate::types::UsageQuantity) -> Self {
        let mut v = self.quantities.unwrap_or_default();
        v.push(input);
        self.quantities = ::std::option::Option::Some(v);
        self
    }
    /// <p>The modified usage quantities.</p>
    pub fn set_quantities(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UsageQuantity>>) -> Self {
        self.quantities = input;
        self
    }
    /// <p>The modified usage quantities.</p>
    pub fn get_quantities(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UsageQuantity>> {
        &self.quantities
    }
    /// <p>Historical usage data associated with this modification, if available.</p>
    pub fn historical_usage(mut self, input: crate::types::HistoricalUsageEntity) -> Self {
        self.historical_usage = ::std::option::Option::Some(input);
        self
    }
    /// <p>Historical usage data associated with this modification, if available.</p>
    pub fn set_historical_usage(mut self, input: ::std::option::Option<crate::types::HistoricalUsageEntity>) -> Self {
        self.historical_usage = input;
        self
    }
    /// <p>Historical usage data associated with this modification, if available.</p>
    pub fn get_historical_usage(&self) -> &::std::option::Option<crate::types::HistoricalUsageEntity> {
        &self.historical_usage
    }
    /// <p>The key of the successfully created entry.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key of the successfully created entry.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The key of the successfully created entry.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// Consumes the builder and constructs a [`BatchCreateBillScenarioUsageModificationItem`](crate::types::BatchCreateBillScenarioUsageModificationItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`service_code`](crate::types::builders::BatchCreateBillScenarioUsageModificationItemBuilder::service_code)
    /// - [`usage_type`](crate::types::builders::BatchCreateBillScenarioUsageModificationItemBuilder::usage_type)
    /// - [`operation`](crate::types::builders::BatchCreateBillScenarioUsageModificationItemBuilder::operation)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::BatchCreateBillScenarioUsageModificationItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BatchCreateBillScenarioUsageModificationItem {
            service_code: self.service_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "service_code",
                    "service_code was not specified but it is required when building BatchCreateBillScenarioUsageModificationItem",
                )
            })?,
            usage_type: self.usage_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "usage_type",
                    "usage_type was not specified but it is required when building BatchCreateBillScenarioUsageModificationItem",
                )
            })?,
            operation: self.operation.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operation",
                    "operation was not specified but it is required when building BatchCreateBillScenarioUsageModificationItem",
                )
            })?,
            location: self.location,
            availability_zone: self.availability_zone,
            id: self.id,
            group: self.group,
            usage_account_id: self.usage_account_id,
            quantities: self.quantities,
            historical_usage: self.historical_usage,
            key: self.key,
        })
    }
}
