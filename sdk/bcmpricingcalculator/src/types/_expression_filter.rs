// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a filter used within an expression.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExpressionFilter {
    /// <p>The key or attribute to filter on.</p>
    pub key: ::std::option::Option<::std::string::String>,
    /// <p>The match options for the filter (e.g., equals, contains).</p>
    pub match_options: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The values to match against.</p>
    pub values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ExpressionFilter {
    /// <p>The key or attribute to filter on.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The match options for the filter (e.g., equals, contains).</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.match_options.is_none()`.
    pub fn match_options(&self) -> &[::std::string::String] {
        self.match_options.as_deref().unwrap_or_default()
    }
    /// <p>The values to match against.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.values.is_none()`.
    pub fn values(&self) -> &[::std::string::String] {
        self.values.as_deref().unwrap_or_default()
    }
}
impl ExpressionFilter {
    /// Creates a new builder-style object to manufacture [`ExpressionFilter`](crate::types::ExpressionFilter).
    pub fn builder() -> crate::types::builders::ExpressionFilterBuilder {
        crate::types::builders::ExpressionFilterBuilder::default()
    }
}

/// A builder for [`ExpressionFilter`](crate::types::ExpressionFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ExpressionFilterBuilder {
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) match_options: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ExpressionFilterBuilder {
    /// <p>The key or attribute to filter on.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key or attribute to filter on.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The key or attribute to filter on.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// Appends an item to `match_options`.
    ///
    /// To override the contents of this collection use [`set_match_options`](Self::set_match_options).
    ///
    /// <p>The match options for the filter (e.g., equals, contains).</p>
    pub fn match_options(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.match_options.unwrap_or_default();
        v.push(input.into());
        self.match_options = ::std::option::Option::Some(v);
        self
    }
    /// <p>The match options for the filter (e.g., equals, contains).</p>
    pub fn set_match_options(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.match_options = input;
        self
    }
    /// <p>The match options for the filter (e.g., equals, contains).</p>
    pub fn get_match_options(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.match_options
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The values to match against.</p>
    pub fn values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The values to match against.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The values to match against.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`ExpressionFilter`](crate::types::ExpressionFilter).
    pub fn build(self) -> crate::types::ExpressionFilter {
        crate::types::ExpressionFilter {
            key: self.key,
            match_options: self.match_options,
            values: self.values,
        }
    }
}
