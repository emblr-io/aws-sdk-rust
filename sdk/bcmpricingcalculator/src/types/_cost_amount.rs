// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a monetary amount with associated currency.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CostAmount {
    /// <p>The numeric value of the cost.</p>
    pub amount: ::std::option::Option<f64>,
    /// <p>The currency code for the cost amount.</p>
    pub currency: ::std::option::Option<crate::types::CurrencyCode>,
}
impl CostAmount {
    /// <p>The numeric value of the cost.</p>
    pub fn amount(&self) -> ::std::option::Option<f64> {
        self.amount
    }
    /// <p>The currency code for the cost amount.</p>
    pub fn currency(&self) -> ::std::option::Option<&crate::types::CurrencyCode> {
        self.currency.as_ref()
    }
}
impl CostAmount {
    /// Creates a new builder-style object to manufacture [`CostAmount`](crate::types::CostAmount).
    pub fn builder() -> crate::types::builders::CostAmountBuilder {
        crate::types::builders::CostAmountBuilder::default()
    }
}

/// A builder for [`CostAmount`](crate::types::CostAmount).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CostAmountBuilder {
    pub(crate) amount: ::std::option::Option<f64>,
    pub(crate) currency: ::std::option::Option<crate::types::CurrencyCode>,
}
impl CostAmountBuilder {
    /// <p>The numeric value of the cost.</p>
    pub fn amount(mut self, input: f64) -> Self {
        self.amount = ::std::option::Option::Some(input);
        self
    }
    /// <p>The numeric value of the cost.</p>
    pub fn set_amount(mut self, input: ::std::option::Option<f64>) -> Self {
        self.amount = input;
        self
    }
    /// <p>The numeric value of the cost.</p>
    pub fn get_amount(&self) -> &::std::option::Option<f64> {
        &self.amount
    }
    /// <p>The currency code for the cost amount.</p>
    pub fn currency(mut self, input: crate::types::CurrencyCode) -> Self {
        self.currency = ::std::option::Option::Some(input);
        self
    }
    /// <p>The currency code for the cost amount.</p>
    pub fn set_currency(mut self, input: ::std::option::Option<crate::types::CurrencyCode>) -> Self {
        self.currency = input;
        self
    }
    /// <p>The currency code for the cost amount.</p>
    pub fn get_currency(&self) -> &::std::option::Option<crate::types::CurrencyCode> {
        &self.currency
    }
    /// Consumes the builder and constructs a [`CostAmount`](crate::types::CostAmount).
    pub fn build(self) -> crate::types::CostAmount {
        crate::types::CostAmount {
            amount: self.amount,
            currency: self.currency,
        }
    }
}
