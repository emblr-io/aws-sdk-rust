// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents historical usage data for a specific entity.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HistoricalUsageEntity {
    /// <p>The Amazon Web Services service code associated with the usage.</p>
    pub service_code: ::std::string::String,
    /// <p>The type of usage.</p>
    pub usage_type: ::std::string::String,
    /// <p>The specific operation associated with the usage.</p>
    pub operation: ::std::string::String,
    /// <p>The location associated with the usage.</p>
    pub location: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID associated with the usage.</p>
    pub usage_account_id: ::std::string::String,
    /// <p>The time interval for the historical usage data.</p>
    pub bill_interval: ::std::option::Option<crate::types::BillInterval>,
    /// <p>An optional filter expression to apply to the historical usage data.</p>
    pub filter_expression: ::std::option::Option<crate::types::Expression>,
}
impl HistoricalUsageEntity {
    /// <p>The Amazon Web Services service code associated with the usage.</p>
    pub fn service_code(&self) -> &str {
        use std::ops::Deref;
        self.service_code.deref()
    }
    /// <p>The type of usage.</p>
    pub fn usage_type(&self) -> &str {
        use std::ops::Deref;
        self.usage_type.deref()
    }
    /// <p>The specific operation associated with the usage.</p>
    pub fn operation(&self) -> &str {
        use std::ops::Deref;
        self.operation.deref()
    }
    /// <p>The location associated with the usage.</p>
    pub fn location(&self) -> ::std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>The Amazon Web Services account ID associated with the usage.</p>
    pub fn usage_account_id(&self) -> &str {
        use std::ops::Deref;
        self.usage_account_id.deref()
    }
    /// <p>The time interval for the historical usage data.</p>
    pub fn bill_interval(&self) -> ::std::option::Option<&crate::types::BillInterval> {
        self.bill_interval.as_ref()
    }
    /// <p>An optional filter expression to apply to the historical usage data.</p>
    pub fn filter_expression(&self) -> ::std::option::Option<&crate::types::Expression> {
        self.filter_expression.as_ref()
    }
}
impl HistoricalUsageEntity {
    /// Creates a new builder-style object to manufacture [`HistoricalUsageEntity`](crate::types::HistoricalUsageEntity).
    pub fn builder() -> crate::types::builders::HistoricalUsageEntityBuilder {
        crate::types::builders::HistoricalUsageEntityBuilder::default()
    }
}

/// A builder for [`HistoricalUsageEntity`](crate::types::HistoricalUsageEntity).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct HistoricalUsageEntityBuilder {
    pub(crate) service_code: ::std::option::Option<::std::string::String>,
    pub(crate) usage_type: ::std::option::Option<::std::string::String>,
    pub(crate) operation: ::std::option::Option<::std::string::String>,
    pub(crate) location: ::std::option::Option<::std::string::String>,
    pub(crate) usage_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) bill_interval: ::std::option::Option<crate::types::BillInterval>,
    pub(crate) filter_expression: ::std::option::Option<crate::types::Expression>,
}
impl HistoricalUsageEntityBuilder {
    /// <p>The Amazon Web Services service code associated with the usage.</p>
    /// This field is required.
    pub fn service_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services service code associated with the usage.</p>
    pub fn set_service_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_code = input;
        self
    }
    /// <p>The Amazon Web Services service code associated with the usage.</p>
    pub fn get_service_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_code
    }
    /// <p>The type of usage.</p>
    /// This field is required.
    pub fn usage_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.usage_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of usage.</p>
    pub fn set_usage_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.usage_type = input;
        self
    }
    /// <p>The type of usage.</p>
    pub fn get_usage_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.usage_type
    }
    /// <p>The specific operation associated with the usage.</p>
    /// This field is required.
    pub fn operation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The specific operation associated with the usage.</p>
    pub fn set_operation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation = input;
        self
    }
    /// <p>The specific operation associated with the usage.</p>
    pub fn get_operation(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation
    }
    /// <p>The location associated with the usage.</p>
    pub fn location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The location associated with the usage.</p>
    pub fn set_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>The location associated with the usage.</p>
    pub fn get_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.location
    }
    /// <p>The Amazon Web Services account ID associated with the usage.</p>
    /// This field is required.
    pub fn usage_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.usage_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID associated with the usage.</p>
    pub fn set_usage_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.usage_account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID associated with the usage.</p>
    pub fn get_usage_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.usage_account_id
    }
    /// <p>The time interval for the historical usage data.</p>
    /// This field is required.
    pub fn bill_interval(mut self, input: crate::types::BillInterval) -> Self {
        self.bill_interval = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time interval for the historical usage data.</p>
    pub fn set_bill_interval(mut self, input: ::std::option::Option<crate::types::BillInterval>) -> Self {
        self.bill_interval = input;
        self
    }
    /// <p>The time interval for the historical usage data.</p>
    pub fn get_bill_interval(&self) -> &::std::option::Option<crate::types::BillInterval> {
        &self.bill_interval
    }
    /// <p>An optional filter expression to apply to the historical usage data.</p>
    /// This field is required.
    pub fn filter_expression(mut self, input: crate::types::Expression) -> Self {
        self.filter_expression = ::std::option::Option::Some(input);
        self
    }
    /// <p>An optional filter expression to apply to the historical usage data.</p>
    pub fn set_filter_expression(mut self, input: ::std::option::Option<crate::types::Expression>) -> Self {
        self.filter_expression = input;
        self
    }
    /// <p>An optional filter expression to apply to the historical usage data.</p>
    pub fn get_filter_expression(&self) -> &::std::option::Option<crate::types::Expression> {
        &self.filter_expression
    }
    /// Consumes the builder and constructs a [`HistoricalUsageEntity`](crate::types::HistoricalUsageEntity).
    /// This method will fail if any of the following fields are not set:
    /// - [`service_code`](crate::types::builders::HistoricalUsageEntityBuilder::service_code)
    /// - [`usage_type`](crate::types::builders::HistoricalUsageEntityBuilder::usage_type)
    /// - [`operation`](crate::types::builders::HistoricalUsageEntityBuilder::operation)
    /// - [`usage_account_id`](crate::types::builders::HistoricalUsageEntityBuilder::usage_account_id)
    pub fn build(self) -> ::std::result::Result<crate::types::HistoricalUsageEntity, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::HistoricalUsageEntity {
            service_code: self.service_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "service_code",
                    "service_code was not specified but it is required when building HistoricalUsageEntity",
                )
            })?,
            usage_type: self.usage_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "usage_type",
                    "usage_type was not specified but it is required when building HistoricalUsageEntity",
                )
            })?,
            operation: self.operation.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operation",
                    "operation was not specified but it is required when building HistoricalUsageEntity",
                )
            })?,
            location: self.location,
            usage_account_id: self.usage_account_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "usage_account_id",
                    "usage_account_id was not specified but it is required when building HistoricalUsageEntity",
                )
            })?,
            bill_interval: self.bill_interval,
            filter_expression: self.filter_expression,
        })
    }
}
