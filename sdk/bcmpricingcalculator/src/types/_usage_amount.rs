// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a usage amount for a specific time period.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UsageAmount {
    /// <p>The start hour of the usage period.</p>
    pub start_hour: ::aws_smithy_types::DateTime,
    /// <p>The usage amount for the period.</p>
    pub amount: f64,
}
impl UsageAmount {
    /// <p>The start hour of the usage period.</p>
    pub fn start_hour(&self) -> &::aws_smithy_types::DateTime {
        &self.start_hour
    }
    /// <p>The usage amount for the period.</p>
    pub fn amount(&self) -> f64 {
        self.amount
    }
}
impl UsageAmount {
    /// Creates a new builder-style object to manufacture [`UsageAmount`](crate::types::UsageAmount).
    pub fn builder() -> crate::types::builders::UsageAmountBuilder {
        crate::types::builders::UsageAmountBuilder::default()
    }
}

/// A builder for [`UsageAmount`](crate::types::UsageAmount).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UsageAmountBuilder {
    pub(crate) start_hour: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) amount: ::std::option::Option<f64>,
}
impl UsageAmountBuilder {
    /// <p>The start hour of the usage period.</p>
    /// This field is required.
    pub fn start_hour(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_hour = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start hour of the usage period.</p>
    pub fn set_start_hour(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_hour = input;
        self
    }
    /// <p>The start hour of the usage period.</p>
    pub fn get_start_hour(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_hour
    }
    /// <p>The usage amount for the period.</p>
    /// This field is required.
    pub fn amount(mut self, input: f64) -> Self {
        self.amount = ::std::option::Option::Some(input);
        self
    }
    /// <p>The usage amount for the period.</p>
    pub fn set_amount(mut self, input: ::std::option::Option<f64>) -> Self {
        self.amount = input;
        self
    }
    /// <p>The usage amount for the period.</p>
    pub fn get_amount(&self) -> &::std::option::Option<f64> {
        &self.amount
    }
    /// Consumes the builder and constructs a [`UsageAmount`](crate::types::UsageAmount).
    /// This method will fail if any of the following fields are not set:
    /// - [`start_hour`](crate::types::builders::UsageAmountBuilder::start_hour)
    /// - [`amount`](crate::types::builders::UsageAmountBuilder::amount)
    pub fn build(self) -> ::std::result::Result<crate::types::UsageAmount, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UsageAmount {
            start_hour: self.start_hour.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_hour",
                    "start_hour was not specified but it is required when building UsageAmount",
                )
            })?,
            amount: self.amount.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "amount",
                    "amount was not specified but it is required when building UsageAmount",
                )
            })?,
        })
    }
}
