// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a summary of a line item in a bill estimate.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BillEstimateLineItemSummary {
    /// <p>The Amazon Web Services service code associated with this line item.</p>
    pub service_code: ::std::string::String,
    /// <p>The type of usage for this line item.</p>
    pub usage_type: ::std::string::String,
    /// <p>The specific operation associated with this line item.</p>
    pub operation: ::std::string::String,
    /// <p>The location associated with this line item.</p>
    pub location: ::std::option::Option<::std::string::String>,
    /// <p>The availability zone associated with this line item, if applicable.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of this line item.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The line item identifier from the original bill.</p>
    pub line_item_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of this line item (e.g., Usage, Tax, Credit).</p>
    pub line_item_type: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID of the payer for this line item.</p>
    pub payer_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID associated with the usage for this line item.</p>
    pub usage_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The estimated usage quantity for this line item.</p>
    pub estimated_usage_quantity: ::std::option::Option<crate::types::UsageQuantityResult>,
    /// <p>The estimated cost for this line item.</p>
    pub estimated_cost: ::std::option::Option<crate::types::CostAmount>,
    /// <p>The historical usage quantity for this line item.</p>
    pub historical_usage_quantity: ::std::option::Option<crate::types::UsageQuantityResult>,
    /// <p>The historical cost for this line item.</p>
    pub historical_cost: ::std::option::Option<crate::types::CostAmount>,
    /// <p>The Amazon Resource Names (ARNs) of any Savings Plans applied to this line item.</p>
    pub savings_plan_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl BillEstimateLineItemSummary {
    /// <p>The Amazon Web Services service code associated with this line item.</p>
    pub fn service_code(&self) -> &str {
        use std::ops::Deref;
        self.service_code.deref()
    }
    /// <p>The type of usage for this line item.</p>
    pub fn usage_type(&self) -> &str {
        use std::ops::Deref;
        self.usage_type.deref()
    }
    /// <p>The specific operation associated with this line item.</p>
    pub fn operation(&self) -> &str {
        use std::ops::Deref;
        self.operation.deref()
    }
    /// <p>The location associated with this line item.</p>
    pub fn location(&self) -> ::std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>The availability zone associated with this line item, if applicable.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The unique identifier of this line item.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The line item identifier from the original bill.</p>
    pub fn line_item_id(&self) -> ::std::option::Option<&str> {
        self.line_item_id.as_deref()
    }
    /// <p>The type of this line item (e.g., Usage, Tax, Credit).</p>
    pub fn line_item_type(&self) -> ::std::option::Option<&str> {
        self.line_item_type.as_deref()
    }
    /// <p>The Amazon Web Services account ID of the payer for this line item.</p>
    pub fn payer_account_id(&self) -> ::std::option::Option<&str> {
        self.payer_account_id.as_deref()
    }
    /// <p>The Amazon Web Services account ID associated with the usage for this line item.</p>
    pub fn usage_account_id(&self) -> ::std::option::Option<&str> {
        self.usage_account_id.as_deref()
    }
    /// <p>The estimated usage quantity for this line item.</p>
    pub fn estimated_usage_quantity(&self) -> ::std::option::Option<&crate::types::UsageQuantityResult> {
        self.estimated_usage_quantity.as_ref()
    }
    /// <p>The estimated cost for this line item.</p>
    pub fn estimated_cost(&self) -> ::std::option::Option<&crate::types::CostAmount> {
        self.estimated_cost.as_ref()
    }
    /// <p>The historical usage quantity for this line item.</p>
    pub fn historical_usage_quantity(&self) -> ::std::option::Option<&crate::types::UsageQuantityResult> {
        self.historical_usage_quantity.as_ref()
    }
    /// <p>The historical cost for this line item.</p>
    pub fn historical_cost(&self) -> ::std::option::Option<&crate::types::CostAmount> {
        self.historical_cost.as_ref()
    }
    /// <p>The Amazon Resource Names (ARNs) of any Savings Plans applied to this line item.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.savings_plan_arns.is_none()`.
    pub fn savings_plan_arns(&self) -> &[::std::string::String] {
        self.savings_plan_arns.as_deref().unwrap_or_default()
    }
}
impl BillEstimateLineItemSummary {
    /// Creates a new builder-style object to manufacture [`BillEstimateLineItemSummary`](crate::types::BillEstimateLineItemSummary).
    pub fn builder() -> crate::types::builders::BillEstimateLineItemSummaryBuilder {
        crate::types::builders::BillEstimateLineItemSummaryBuilder::default()
    }
}

/// A builder for [`BillEstimateLineItemSummary`](crate::types::BillEstimateLineItemSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BillEstimateLineItemSummaryBuilder {
    pub(crate) service_code: ::std::option::Option<::std::string::String>,
    pub(crate) usage_type: ::std::option::Option<::std::string::String>,
    pub(crate) operation: ::std::option::Option<::std::string::String>,
    pub(crate) location: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) line_item_id: ::std::option::Option<::std::string::String>,
    pub(crate) line_item_type: ::std::option::Option<::std::string::String>,
    pub(crate) payer_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) usage_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) estimated_usage_quantity: ::std::option::Option<crate::types::UsageQuantityResult>,
    pub(crate) estimated_cost: ::std::option::Option<crate::types::CostAmount>,
    pub(crate) historical_usage_quantity: ::std::option::Option<crate::types::UsageQuantityResult>,
    pub(crate) historical_cost: ::std::option::Option<crate::types::CostAmount>,
    pub(crate) savings_plan_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl BillEstimateLineItemSummaryBuilder {
    /// <p>The Amazon Web Services service code associated with this line item.</p>
    /// This field is required.
    pub fn service_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services service code associated with this line item.</p>
    pub fn set_service_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_code = input;
        self
    }
    /// <p>The Amazon Web Services service code associated with this line item.</p>
    pub fn get_service_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_code
    }
    /// <p>The type of usage for this line item.</p>
    /// This field is required.
    pub fn usage_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.usage_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of usage for this line item.</p>
    pub fn set_usage_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.usage_type = input;
        self
    }
    /// <p>The type of usage for this line item.</p>
    pub fn get_usage_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.usage_type
    }
    /// <p>The specific operation associated with this line item.</p>
    /// This field is required.
    pub fn operation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The specific operation associated with this line item.</p>
    pub fn set_operation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation = input;
        self
    }
    /// <p>The specific operation associated with this line item.</p>
    pub fn get_operation(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation
    }
    /// <p>The location associated with this line item.</p>
    pub fn location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The location associated with this line item.</p>
    pub fn set_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>The location associated with this line item.</p>
    pub fn get_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.location
    }
    /// <p>The availability zone associated with this line item, if applicable.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The availability zone associated with this line item, if applicable.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The availability zone associated with this line item, if applicable.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The unique identifier of this line item.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of this line item.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of this line item.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The line item identifier from the original bill.</p>
    pub fn line_item_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.line_item_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The line item identifier from the original bill.</p>
    pub fn set_line_item_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.line_item_id = input;
        self
    }
    /// <p>The line item identifier from the original bill.</p>
    pub fn get_line_item_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.line_item_id
    }
    /// <p>The type of this line item (e.g., Usage, Tax, Credit).</p>
    pub fn line_item_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.line_item_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of this line item (e.g., Usage, Tax, Credit).</p>
    pub fn set_line_item_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.line_item_type = input;
        self
    }
    /// <p>The type of this line item (e.g., Usage, Tax, Credit).</p>
    pub fn get_line_item_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.line_item_type
    }
    /// <p>The Amazon Web Services account ID of the payer for this line item.</p>
    pub fn payer_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.payer_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the payer for this line item.</p>
    pub fn set_payer_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.payer_account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the payer for this line item.</p>
    pub fn get_payer_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.payer_account_id
    }
    /// <p>The Amazon Web Services account ID associated with the usage for this line item.</p>
    pub fn usage_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.usage_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID associated with the usage for this line item.</p>
    pub fn set_usage_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.usage_account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID associated with the usage for this line item.</p>
    pub fn get_usage_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.usage_account_id
    }
    /// <p>The estimated usage quantity for this line item.</p>
    pub fn estimated_usage_quantity(mut self, input: crate::types::UsageQuantityResult) -> Self {
        self.estimated_usage_quantity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The estimated usage quantity for this line item.</p>
    pub fn set_estimated_usage_quantity(mut self, input: ::std::option::Option<crate::types::UsageQuantityResult>) -> Self {
        self.estimated_usage_quantity = input;
        self
    }
    /// <p>The estimated usage quantity for this line item.</p>
    pub fn get_estimated_usage_quantity(&self) -> &::std::option::Option<crate::types::UsageQuantityResult> {
        &self.estimated_usage_quantity
    }
    /// <p>The estimated cost for this line item.</p>
    pub fn estimated_cost(mut self, input: crate::types::CostAmount) -> Self {
        self.estimated_cost = ::std::option::Option::Some(input);
        self
    }
    /// <p>The estimated cost for this line item.</p>
    pub fn set_estimated_cost(mut self, input: ::std::option::Option<crate::types::CostAmount>) -> Self {
        self.estimated_cost = input;
        self
    }
    /// <p>The estimated cost for this line item.</p>
    pub fn get_estimated_cost(&self) -> &::std::option::Option<crate::types::CostAmount> {
        &self.estimated_cost
    }
    /// <p>The historical usage quantity for this line item.</p>
    pub fn historical_usage_quantity(mut self, input: crate::types::UsageQuantityResult) -> Self {
        self.historical_usage_quantity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The historical usage quantity for this line item.</p>
    pub fn set_historical_usage_quantity(mut self, input: ::std::option::Option<crate::types::UsageQuantityResult>) -> Self {
        self.historical_usage_quantity = input;
        self
    }
    /// <p>The historical usage quantity for this line item.</p>
    pub fn get_historical_usage_quantity(&self) -> &::std::option::Option<crate::types::UsageQuantityResult> {
        &self.historical_usage_quantity
    }
    /// <p>The historical cost for this line item.</p>
    pub fn historical_cost(mut self, input: crate::types::CostAmount) -> Self {
        self.historical_cost = ::std::option::Option::Some(input);
        self
    }
    /// <p>The historical cost for this line item.</p>
    pub fn set_historical_cost(mut self, input: ::std::option::Option<crate::types::CostAmount>) -> Self {
        self.historical_cost = input;
        self
    }
    /// <p>The historical cost for this line item.</p>
    pub fn get_historical_cost(&self) -> &::std::option::Option<crate::types::CostAmount> {
        &self.historical_cost
    }
    /// Appends an item to `savings_plan_arns`.
    ///
    /// To override the contents of this collection use [`set_savings_plan_arns`](Self::set_savings_plan_arns).
    ///
    /// <p>The Amazon Resource Names (ARNs) of any Savings Plans applied to this line item.</p>
    pub fn savings_plan_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.savings_plan_arns.unwrap_or_default();
        v.push(input.into());
        self.savings_plan_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of any Savings Plans applied to this line item.</p>
    pub fn set_savings_plan_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.savings_plan_arns = input;
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of any Savings Plans applied to this line item.</p>
    pub fn get_savings_plan_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.savings_plan_arns
    }
    /// Consumes the builder and constructs a [`BillEstimateLineItemSummary`](crate::types::BillEstimateLineItemSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`service_code`](crate::types::builders::BillEstimateLineItemSummaryBuilder::service_code)
    /// - [`usage_type`](crate::types::builders::BillEstimateLineItemSummaryBuilder::usage_type)
    /// - [`operation`](crate::types::builders::BillEstimateLineItemSummaryBuilder::operation)
    pub fn build(self) -> ::std::result::Result<crate::types::BillEstimateLineItemSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BillEstimateLineItemSummary {
            service_code: self.service_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "service_code",
                    "service_code was not specified but it is required when building BillEstimateLineItemSummary",
                )
            })?,
            usage_type: self.usage_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "usage_type",
                    "usage_type was not specified but it is required when building BillEstimateLineItemSummary",
                )
            })?,
            operation: self.operation.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operation",
                    "operation was not specified but it is required when building BillEstimateLineItemSummary",
                )
            })?,
            location: self.location,
            availability_zone: self.availability_zone,
            id: self.id,
            line_item_id: self.line_item_id,
            line_item_type: self.line_item_type,
            payer_account_id: self.payer_account_id,
            usage_account_id: self.usage_account_id,
            estimated_usage_quantity: self.estimated_usage_quantity,
            estimated_cost: self.estimated_cost,
            historical_usage_quantity: self.historical_usage_quantity,
            historical_cost: self.historical_cost,
            savings_plan_arns: self.savings_plan_arns,
        })
    }
}
