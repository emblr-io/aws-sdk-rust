// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents an entry in a batch operation to create workload estimate usage.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchCreateWorkloadEstimateUsageEntry {
    /// <p>The Amazon Web Services service code for this usage estimate.</p>
    pub service_code: ::std::string::String,
    /// <p>The type of usage being estimated.</p>
    pub usage_type: ::std::string::String,
    /// <p>The specific operation associated with this usage estimate.</p>
    pub operation: ::std::string::String,
    /// <p>A unique identifier for this entry in the batch operation.</p>
    pub key: ::std::string::String,
    /// <p>An optional group identifier for the usage estimate.</p>
    pub group: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID associated with this usage estimate.</p>
    pub usage_account_id: ::std::string::String,
    /// <p>The estimated usage amount.</p>
    pub amount: f64,
    /// <p>Historical usage data associated with this estimate, if available.</p>
    pub historical_usage: ::std::option::Option<crate::types::HistoricalUsageEntity>,
}
impl BatchCreateWorkloadEstimateUsageEntry {
    /// <p>The Amazon Web Services service code for this usage estimate.</p>
    pub fn service_code(&self) -> &str {
        use std::ops::Deref;
        self.service_code.deref()
    }
    /// <p>The type of usage being estimated.</p>
    pub fn usage_type(&self) -> &str {
        use std::ops::Deref;
        self.usage_type.deref()
    }
    /// <p>The specific operation associated with this usage estimate.</p>
    pub fn operation(&self) -> &str {
        use std::ops::Deref;
        self.operation.deref()
    }
    /// <p>A unique identifier for this entry in the batch operation.</p>
    pub fn key(&self) -> &str {
        use std::ops::Deref;
        self.key.deref()
    }
    /// <p>An optional group identifier for the usage estimate.</p>
    pub fn group(&self) -> ::std::option::Option<&str> {
        self.group.as_deref()
    }
    /// <p>The Amazon Web Services account ID associated with this usage estimate.</p>
    pub fn usage_account_id(&self) -> &str {
        use std::ops::Deref;
        self.usage_account_id.deref()
    }
    /// <p>The estimated usage amount.</p>
    pub fn amount(&self) -> f64 {
        self.amount
    }
    /// <p>Historical usage data associated with this estimate, if available.</p>
    pub fn historical_usage(&self) -> ::std::option::Option<&crate::types::HistoricalUsageEntity> {
        self.historical_usage.as_ref()
    }
}
impl BatchCreateWorkloadEstimateUsageEntry {
    /// Creates a new builder-style object to manufacture [`BatchCreateWorkloadEstimateUsageEntry`](crate::types::BatchCreateWorkloadEstimateUsageEntry).
    pub fn builder() -> crate::types::builders::BatchCreateWorkloadEstimateUsageEntryBuilder {
        crate::types::builders::BatchCreateWorkloadEstimateUsageEntryBuilder::default()
    }
}

/// A builder for [`BatchCreateWorkloadEstimateUsageEntry`](crate::types::BatchCreateWorkloadEstimateUsageEntry).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchCreateWorkloadEstimateUsageEntryBuilder {
    pub(crate) service_code: ::std::option::Option<::std::string::String>,
    pub(crate) usage_type: ::std::option::Option<::std::string::String>,
    pub(crate) operation: ::std::option::Option<::std::string::String>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) group: ::std::option::Option<::std::string::String>,
    pub(crate) usage_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) amount: ::std::option::Option<f64>,
    pub(crate) historical_usage: ::std::option::Option<crate::types::HistoricalUsageEntity>,
}
impl BatchCreateWorkloadEstimateUsageEntryBuilder {
    /// <p>The Amazon Web Services service code for this usage estimate.</p>
    /// This field is required.
    pub fn service_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services service code for this usage estimate.</p>
    pub fn set_service_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_code = input;
        self
    }
    /// <p>The Amazon Web Services service code for this usage estimate.</p>
    pub fn get_service_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_code
    }
    /// <p>The type of usage being estimated.</p>
    /// This field is required.
    pub fn usage_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.usage_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of usage being estimated.</p>
    pub fn set_usage_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.usage_type = input;
        self
    }
    /// <p>The type of usage being estimated.</p>
    pub fn get_usage_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.usage_type
    }
    /// <p>The specific operation associated with this usage estimate.</p>
    /// This field is required.
    pub fn operation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The specific operation associated with this usage estimate.</p>
    pub fn set_operation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation = input;
        self
    }
    /// <p>The specific operation associated with this usage estimate.</p>
    pub fn get_operation(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation
    }
    /// <p>A unique identifier for this entry in the batch operation.</p>
    /// This field is required.
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for this entry in the batch operation.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>A unique identifier for this entry in the batch operation.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>An optional group identifier for the usage estimate.</p>
    pub fn group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional group identifier for the usage estimate.</p>
    pub fn set_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group = input;
        self
    }
    /// <p>An optional group identifier for the usage estimate.</p>
    pub fn get_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.group
    }
    /// <p>The Amazon Web Services account ID associated with this usage estimate.</p>
    /// This field is required.
    pub fn usage_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.usage_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID associated with this usage estimate.</p>
    pub fn set_usage_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.usage_account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID associated with this usage estimate.</p>
    pub fn get_usage_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.usage_account_id
    }
    /// <p>The estimated usage amount.</p>
    /// This field is required.
    pub fn amount(mut self, input: f64) -> Self {
        self.amount = ::std::option::Option::Some(input);
        self
    }
    /// <p>The estimated usage amount.</p>
    pub fn set_amount(mut self, input: ::std::option::Option<f64>) -> Self {
        self.amount = input;
        self
    }
    /// <p>The estimated usage amount.</p>
    pub fn get_amount(&self) -> &::std::option::Option<f64> {
        &self.amount
    }
    /// <p>Historical usage data associated with this estimate, if available.</p>
    pub fn historical_usage(mut self, input: crate::types::HistoricalUsageEntity) -> Self {
        self.historical_usage = ::std::option::Option::Some(input);
        self
    }
    /// <p>Historical usage data associated with this estimate, if available.</p>
    pub fn set_historical_usage(mut self, input: ::std::option::Option<crate::types::HistoricalUsageEntity>) -> Self {
        self.historical_usage = input;
        self
    }
    /// <p>Historical usage data associated with this estimate, if available.</p>
    pub fn get_historical_usage(&self) -> &::std::option::Option<crate::types::HistoricalUsageEntity> {
        &self.historical_usage
    }
    /// Consumes the builder and constructs a [`BatchCreateWorkloadEstimateUsageEntry`](crate::types::BatchCreateWorkloadEstimateUsageEntry).
    /// This method will fail if any of the following fields are not set:
    /// - [`service_code`](crate::types::builders::BatchCreateWorkloadEstimateUsageEntryBuilder::service_code)
    /// - [`usage_type`](crate::types::builders::BatchCreateWorkloadEstimateUsageEntryBuilder::usage_type)
    /// - [`operation`](crate::types::builders::BatchCreateWorkloadEstimateUsageEntryBuilder::operation)
    /// - [`key`](crate::types::builders::BatchCreateWorkloadEstimateUsageEntryBuilder::key)
    /// - [`usage_account_id`](crate::types::builders::BatchCreateWorkloadEstimateUsageEntryBuilder::usage_account_id)
    /// - [`amount`](crate::types::builders::BatchCreateWorkloadEstimateUsageEntryBuilder::amount)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::BatchCreateWorkloadEstimateUsageEntry, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BatchCreateWorkloadEstimateUsageEntry {
            service_code: self.service_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "service_code",
                    "service_code was not specified but it is required when building BatchCreateWorkloadEstimateUsageEntry",
                )
            })?,
            usage_type: self.usage_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "usage_type",
                    "usage_type was not specified but it is required when building BatchCreateWorkloadEstimateUsageEntry",
                )
            })?,
            operation: self.operation.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operation",
                    "operation was not specified but it is required when building BatchCreateWorkloadEstimateUsageEntry",
                )
            })?,
            key: self.key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key",
                    "key was not specified but it is required when building BatchCreateWorkloadEstimateUsageEntry",
                )
            })?,
            group: self.group,
            usage_account_id: self.usage_account_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "usage_account_id",
                    "usage_account_id was not specified but it is required when building BatchCreateWorkloadEstimateUsageEntry",
                )
            })?,
            amount: self.amount.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "amount",
                    "amount was not specified but it is required when building BatchCreateWorkloadEstimateUsageEntry",
                )
            })?,
            historical_usage: self.historical_usage,
        })
    }
}
