// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListIndicatorsInput {
    /// <p>The Amazon Resource Name (ARN) of the behavior graph.</p>
    pub graph_arn: ::std::option::Option<::std::string::String>,
    /// <p>The investigation ID of the investigation report.</p>
    pub investigation_id: ::std::option::Option<::std::string::String>,
    /// <p>For the list of indicators of compromise that are generated by Detective investigations, see <a href="https://docs.aws.amazon.com/detective/latest/userguide/detective-investigation-about.html">Detective investigations</a>.</p>
    pub indicator_type: ::std::option::Option<crate::types::IndicatorType>,
    /// <p>Lists if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged.</p>
    /// <p>Each pagination token expires after 24 hours. Using an expired pagination token will return a Validation Exception error.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Lists the maximum number of indicators in a page.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListIndicatorsInput {
    /// <p>The Amazon Resource Name (ARN) of the behavior graph.</p>
    pub fn graph_arn(&self) -> ::std::option::Option<&str> {
        self.graph_arn.as_deref()
    }
    /// <p>The investigation ID of the investigation report.</p>
    pub fn investigation_id(&self) -> ::std::option::Option<&str> {
        self.investigation_id.as_deref()
    }
    /// <p>For the list of indicators of compromise that are generated by Detective investigations, see <a href="https://docs.aws.amazon.com/detective/latest/userguide/detective-investigation-about.html">Detective investigations</a>.</p>
    pub fn indicator_type(&self) -> ::std::option::Option<&crate::types::IndicatorType> {
        self.indicator_type.as_ref()
    }
    /// <p>Lists if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged.</p>
    /// <p>Each pagination token expires after 24 hours. Using an expired pagination token will return a Validation Exception error.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Lists the maximum number of indicators in a page.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListIndicatorsInput {
    /// Creates a new builder-style object to manufacture [`ListIndicatorsInput`](crate::operation::list_indicators::ListIndicatorsInput).
    pub fn builder() -> crate::operation::list_indicators::builders::ListIndicatorsInputBuilder {
        crate::operation::list_indicators::builders::ListIndicatorsInputBuilder::default()
    }
}

/// A builder for [`ListIndicatorsInput`](crate::operation::list_indicators::ListIndicatorsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListIndicatorsInputBuilder {
    pub(crate) graph_arn: ::std::option::Option<::std::string::String>,
    pub(crate) investigation_id: ::std::option::Option<::std::string::String>,
    pub(crate) indicator_type: ::std::option::Option<crate::types::IndicatorType>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListIndicatorsInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the behavior graph.</p>
    /// This field is required.
    pub fn graph_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.graph_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the behavior graph.</p>
    pub fn set_graph_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.graph_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the behavior graph.</p>
    pub fn get_graph_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.graph_arn
    }
    /// <p>The investigation ID of the investigation report.</p>
    /// This field is required.
    pub fn investigation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.investigation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The investigation ID of the investigation report.</p>
    pub fn set_investigation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.investigation_id = input;
        self
    }
    /// <p>The investigation ID of the investigation report.</p>
    pub fn get_investigation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.investigation_id
    }
    /// <p>For the list of indicators of compromise that are generated by Detective investigations, see <a href="https://docs.aws.amazon.com/detective/latest/userguide/detective-investigation-about.html">Detective investigations</a>.</p>
    pub fn indicator_type(mut self, input: crate::types::IndicatorType) -> Self {
        self.indicator_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>For the list of indicators of compromise that are generated by Detective investigations, see <a href="https://docs.aws.amazon.com/detective/latest/userguide/detective-investigation-about.html">Detective investigations</a>.</p>
    pub fn set_indicator_type(mut self, input: ::std::option::Option<crate::types::IndicatorType>) -> Self {
        self.indicator_type = input;
        self
    }
    /// <p>For the list of indicators of compromise that are generated by Detective investigations, see <a href="https://docs.aws.amazon.com/detective/latest/userguide/detective-investigation-about.html">Detective investigations</a>.</p>
    pub fn get_indicator_type(&self) -> &::std::option::Option<crate::types::IndicatorType> {
        &self.indicator_type
    }
    /// <p>Lists if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged.</p>
    /// <p>Each pagination token expires after 24 hours. Using an expired pagination token will return a Validation Exception error.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Lists if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged.</p>
    /// <p>Each pagination token expires after 24 hours. Using an expired pagination token will return a Validation Exception error.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Lists if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged.</p>
    /// <p>Each pagination token expires after 24 hours. Using an expired pagination token will return a Validation Exception error.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>Lists the maximum number of indicators in a page.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>Lists the maximum number of indicators in a page.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Lists the maximum number of indicators in a page.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListIndicatorsInput`](crate::operation::list_indicators::ListIndicatorsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_indicators::ListIndicatorsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_indicators::ListIndicatorsInput {
            graph_arn: self.graph_arn,
            investigation_id: self.investigation_id,
            indicator_type: self.indicator_type,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
