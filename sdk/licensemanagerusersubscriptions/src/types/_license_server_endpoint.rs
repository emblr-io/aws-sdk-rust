// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about a network endpoint for a Remote Desktop Services (RDS) license server.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LicenseServerEndpoint {
    /// <p>The Amazon Resource Name (ARN) of the identity provider that's associated with the RDS license server endpoint.</p>
    pub identity_provider_arn: ::std::option::Option<::std::string::String>,
    /// <p>The type of license server.</p>
    pub server_type: ::std::option::Option<crate::types::ServerType>,
    /// <p>The <code>ServerEndpoint</code> resource contains the network address of the RDS license server endpoint.</p>
    pub server_endpoint: ::std::option::Option<crate::types::ServerEndpoint>,
    /// <p>The message associated with the provisioning status, if there is one.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the license server endpoint.</p>
    pub license_server_endpoint_id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the <code>ServerEndpoint</code> resource for the RDS license server.</p>
    pub license_server_endpoint_arn: ::std::option::Option<::std::string::String>,
    /// <p>The current state of the provisioning process for the RDS license server endpoint</p>
    pub license_server_endpoint_provisioning_status: ::std::option::Option<crate::types::LicenseServerEndpointProvisioningStatus>,
    /// <p>An array of <code>LicenseServer</code> resources that represent the license servers that are accessed through this endpoint.</p>
    pub license_servers: ::std::option::Option<::std::vec::Vec<crate::types::LicenseServer>>,
    /// <p>The timestamp when License Manager created the license server endpoint.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl LicenseServerEndpoint {
    /// <p>The Amazon Resource Name (ARN) of the identity provider that's associated with the RDS license server endpoint.</p>
    pub fn identity_provider_arn(&self) -> ::std::option::Option<&str> {
        self.identity_provider_arn.as_deref()
    }
    /// <p>The type of license server.</p>
    pub fn server_type(&self) -> ::std::option::Option<&crate::types::ServerType> {
        self.server_type.as_ref()
    }
    /// <p>The <code>ServerEndpoint</code> resource contains the network address of the RDS license server endpoint.</p>
    pub fn server_endpoint(&self) -> ::std::option::Option<&crate::types::ServerEndpoint> {
        self.server_endpoint.as_ref()
    }
    /// <p>The message associated with the provisioning status, if there is one.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The ID of the license server endpoint.</p>
    pub fn license_server_endpoint_id(&self) -> ::std::option::Option<&str> {
        self.license_server_endpoint_id.as_deref()
    }
    /// <p>The ARN of the <code>ServerEndpoint</code> resource for the RDS license server.</p>
    pub fn license_server_endpoint_arn(&self) -> ::std::option::Option<&str> {
        self.license_server_endpoint_arn.as_deref()
    }
    /// <p>The current state of the provisioning process for the RDS license server endpoint</p>
    pub fn license_server_endpoint_provisioning_status(&self) -> ::std::option::Option<&crate::types::LicenseServerEndpointProvisioningStatus> {
        self.license_server_endpoint_provisioning_status.as_ref()
    }
    /// <p>An array of <code>LicenseServer</code> resources that represent the license servers that are accessed through this endpoint.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.license_servers.is_none()`.
    pub fn license_servers(&self) -> &[crate::types::LicenseServer] {
        self.license_servers.as_deref().unwrap_or_default()
    }
    /// <p>The timestamp when License Manager created the license server endpoint.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
}
impl LicenseServerEndpoint {
    /// Creates a new builder-style object to manufacture [`LicenseServerEndpoint`](crate::types::LicenseServerEndpoint).
    pub fn builder() -> crate::types::builders::LicenseServerEndpointBuilder {
        crate::types::builders::LicenseServerEndpointBuilder::default()
    }
}

/// A builder for [`LicenseServerEndpoint`](crate::types::LicenseServerEndpoint).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LicenseServerEndpointBuilder {
    pub(crate) identity_provider_arn: ::std::option::Option<::std::string::String>,
    pub(crate) server_type: ::std::option::Option<crate::types::ServerType>,
    pub(crate) server_endpoint: ::std::option::Option<crate::types::ServerEndpoint>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) license_server_endpoint_id: ::std::option::Option<::std::string::String>,
    pub(crate) license_server_endpoint_arn: ::std::option::Option<::std::string::String>,
    pub(crate) license_server_endpoint_provisioning_status: ::std::option::Option<crate::types::LicenseServerEndpointProvisioningStatus>,
    pub(crate) license_servers: ::std::option::Option<::std::vec::Vec<crate::types::LicenseServer>>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl LicenseServerEndpointBuilder {
    /// <p>The Amazon Resource Name (ARN) of the identity provider that's associated with the RDS license server endpoint.</p>
    pub fn identity_provider_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity_provider_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the identity provider that's associated with the RDS license server endpoint.</p>
    pub fn set_identity_provider_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity_provider_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the identity provider that's associated with the RDS license server endpoint.</p>
    pub fn get_identity_provider_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity_provider_arn
    }
    /// <p>The type of license server.</p>
    pub fn server_type(mut self, input: crate::types::ServerType) -> Self {
        self.server_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of license server.</p>
    pub fn set_server_type(mut self, input: ::std::option::Option<crate::types::ServerType>) -> Self {
        self.server_type = input;
        self
    }
    /// <p>The type of license server.</p>
    pub fn get_server_type(&self) -> &::std::option::Option<crate::types::ServerType> {
        &self.server_type
    }
    /// <p>The <code>ServerEndpoint</code> resource contains the network address of the RDS license server endpoint.</p>
    pub fn server_endpoint(mut self, input: crate::types::ServerEndpoint) -> Self {
        self.server_endpoint = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>ServerEndpoint</code> resource contains the network address of the RDS license server endpoint.</p>
    pub fn set_server_endpoint(mut self, input: ::std::option::Option<crate::types::ServerEndpoint>) -> Self {
        self.server_endpoint = input;
        self
    }
    /// <p>The <code>ServerEndpoint</code> resource contains the network address of the RDS license server endpoint.</p>
    pub fn get_server_endpoint(&self) -> &::std::option::Option<crate::types::ServerEndpoint> {
        &self.server_endpoint
    }
    /// <p>The message associated with the provisioning status, if there is one.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message associated with the provisioning status, if there is one.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The message associated with the provisioning status, if there is one.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>The ID of the license server endpoint.</p>
    pub fn license_server_endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.license_server_endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the license server endpoint.</p>
    pub fn set_license_server_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.license_server_endpoint_id = input;
        self
    }
    /// <p>The ID of the license server endpoint.</p>
    pub fn get_license_server_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.license_server_endpoint_id
    }
    /// <p>The ARN of the <code>ServerEndpoint</code> resource for the RDS license server.</p>
    pub fn license_server_endpoint_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.license_server_endpoint_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the <code>ServerEndpoint</code> resource for the RDS license server.</p>
    pub fn set_license_server_endpoint_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.license_server_endpoint_arn = input;
        self
    }
    /// <p>The ARN of the <code>ServerEndpoint</code> resource for the RDS license server.</p>
    pub fn get_license_server_endpoint_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.license_server_endpoint_arn
    }
    /// <p>The current state of the provisioning process for the RDS license server endpoint</p>
    pub fn license_server_endpoint_provisioning_status(mut self, input: crate::types::LicenseServerEndpointProvisioningStatus) -> Self {
        self.license_server_endpoint_provisioning_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the provisioning process for the RDS license server endpoint</p>
    pub fn set_license_server_endpoint_provisioning_status(
        mut self,
        input: ::std::option::Option<crate::types::LicenseServerEndpointProvisioningStatus>,
    ) -> Self {
        self.license_server_endpoint_provisioning_status = input;
        self
    }
    /// <p>The current state of the provisioning process for the RDS license server endpoint</p>
    pub fn get_license_server_endpoint_provisioning_status(&self) -> &::std::option::Option<crate::types::LicenseServerEndpointProvisioningStatus> {
        &self.license_server_endpoint_provisioning_status
    }
    /// Appends an item to `license_servers`.
    ///
    /// To override the contents of this collection use [`set_license_servers`](Self::set_license_servers).
    ///
    /// <p>An array of <code>LicenseServer</code> resources that represent the license servers that are accessed through this endpoint.</p>
    pub fn license_servers(mut self, input: crate::types::LicenseServer) -> Self {
        let mut v = self.license_servers.unwrap_or_default();
        v.push(input);
        self.license_servers = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>LicenseServer</code> resources that represent the license servers that are accessed through this endpoint.</p>
    pub fn set_license_servers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LicenseServer>>) -> Self {
        self.license_servers = input;
        self
    }
    /// <p>An array of <code>LicenseServer</code> resources that represent the license servers that are accessed through this endpoint.</p>
    pub fn get_license_servers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LicenseServer>> {
        &self.license_servers
    }
    /// <p>The timestamp when License Manager created the license server endpoint.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when License Manager created the license server endpoint.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The timestamp when License Manager created the license server endpoint.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// Consumes the builder and constructs a [`LicenseServerEndpoint`](crate::types::LicenseServerEndpoint).
    pub fn build(self) -> crate::types::LicenseServerEndpoint {
        crate::types::LicenseServerEndpoint {
            identity_provider_arn: self.identity_provider_arn,
            server_type: self.server_type,
            server_endpoint: self.server_endpoint,
            status_message: self.status_message,
            license_server_endpoint_id: self.license_server_endpoint_id,
            license_server_endpoint_arn: self.license_server_endpoint_arn,
            license_server_endpoint_provisioning_status: self.license_server_endpoint_provisioning_status,
            license_servers: self.license_servers,
            creation_time: self.creation_time,
        }
    }
}
