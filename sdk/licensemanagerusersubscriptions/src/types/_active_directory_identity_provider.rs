// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about an Active Directory identity provider.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ActiveDirectoryIdentityProvider {
    /// <p>The directory ID for an Active Directory identity provider.</p>
    pub directory_id: ::std::option::Option<::std::string::String>,
    /// <p>The <code>ActiveDirectorySettings</code> resource contains details about the Active Directory, including network access details such as domain name and IP addresses, and the credential provider for user administration.</p>
    pub active_directory_settings: ::std::option::Option<crate::types::ActiveDirectorySettings>,
    /// <p>The type of Active Directory – either a self-managed Active Directory or an Amazon Web Services Managed Active Directory.</p>
    pub active_directory_type: ::std::option::Option<crate::types::ActiveDirectoryType>,
}
impl ActiveDirectoryIdentityProvider {
    /// <p>The directory ID for an Active Directory identity provider.</p>
    pub fn directory_id(&self) -> ::std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>The <code>ActiveDirectorySettings</code> resource contains details about the Active Directory, including network access details such as domain name and IP addresses, and the credential provider for user administration.</p>
    pub fn active_directory_settings(&self) -> ::std::option::Option<&crate::types::ActiveDirectorySettings> {
        self.active_directory_settings.as_ref()
    }
    /// <p>The type of Active Directory – either a self-managed Active Directory or an Amazon Web Services Managed Active Directory.</p>
    pub fn active_directory_type(&self) -> ::std::option::Option<&crate::types::ActiveDirectoryType> {
        self.active_directory_type.as_ref()
    }
}
impl ActiveDirectoryIdentityProvider {
    /// Creates a new builder-style object to manufacture [`ActiveDirectoryIdentityProvider`](crate::types::ActiveDirectoryIdentityProvider).
    pub fn builder() -> crate::types::builders::ActiveDirectoryIdentityProviderBuilder {
        crate::types::builders::ActiveDirectoryIdentityProviderBuilder::default()
    }
}

/// A builder for [`ActiveDirectoryIdentityProvider`](crate::types::ActiveDirectoryIdentityProvider).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ActiveDirectoryIdentityProviderBuilder {
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) active_directory_settings: ::std::option::Option<crate::types::ActiveDirectorySettings>,
    pub(crate) active_directory_type: ::std::option::Option<crate::types::ActiveDirectoryType>,
}
impl ActiveDirectoryIdentityProviderBuilder {
    /// <p>The directory ID for an Active Directory identity provider.</p>
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The directory ID for an Active Directory identity provider.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The directory ID for an Active Directory identity provider.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// <p>The <code>ActiveDirectorySettings</code> resource contains details about the Active Directory, including network access details such as domain name and IP addresses, and the credential provider for user administration.</p>
    pub fn active_directory_settings(mut self, input: crate::types::ActiveDirectorySettings) -> Self {
        self.active_directory_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>ActiveDirectorySettings</code> resource contains details about the Active Directory, including network access details such as domain name and IP addresses, and the credential provider for user administration.</p>
    pub fn set_active_directory_settings(mut self, input: ::std::option::Option<crate::types::ActiveDirectorySettings>) -> Self {
        self.active_directory_settings = input;
        self
    }
    /// <p>The <code>ActiveDirectorySettings</code> resource contains details about the Active Directory, including network access details such as domain name and IP addresses, and the credential provider for user administration.</p>
    pub fn get_active_directory_settings(&self) -> &::std::option::Option<crate::types::ActiveDirectorySettings> {
        &self.active_directory_settings
    }
    /// <p>The type of Active Directory – either a self-managed Active Directory or an Amazon Web Services Managed Active Directory.</p>
    pub fn active_directory_type(mut self, input: crate::types::ActiveDirectoryType) -> Self {
        self.active_directory_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of Active Directory – either a self-managed Active Directory or an Amazon Web Services Managed Active Directory.</p>
    pub fn set_active_directory_type(mut self, input: ::std::option::Option<crate::types::ActiveDirectoryType>) -> Self {
        self.active_directory_type = input;
        self
    }
    /// <p>The type of Active Directory – either a self-managed Active Directory or an Amazon Web Services Managed Active Directory.</p>
    pub fn get_active_directory_type(&self) -> &::std::option::Option<crate::types::ActiveDirectoryType> {
        &self.active_directory_type
    }
    /// Consumes the builder and constructs a [`ActiveDirectoryIdentityProvider`](crate::types::ActiveDirectoryIdentityProvider).
    pub fn build(self) -> crate::types::ActiveDirectoryIdentityProvider {
        crate::types::ActiveDirectoryIdentityProvider {
            directory_id: self.directory_id,
            active_directory_settings: self.active_directory_settings,
            active_directory_type: self.active_directory_type,
        }
    }
}
