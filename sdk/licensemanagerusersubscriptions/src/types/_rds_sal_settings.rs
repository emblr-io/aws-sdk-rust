// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Server settings that are specific to a Remote Desktop Services (RDS) license server.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RdsSalSettings {
    /// <p>The <code>CredentialsProvider</code> resource contains a reference to the credentials provider that's used for RDS license server user administration.</p>
    pub rds_sal_credentials_provider: ::std::option::Option<crate::types::CredentialsProvider>,
}
impl RdsSalSettings {
    /// <p>The <code>CredentialsProvider</code> resource contains a reference to the credentials provider that's used for RDS license server user administration.</p>
    pub fn rds_sal_credentials_provider(&self) -> ::std::option::Option<&crate::types::CredentialsProvider> {
        self.rds_sal_credentials_provider.as_ref()
    }
}
impl RdsSalSettings {
    /// Creates a new builder-style object to manufacture [`RdsSalSettings`](crate::types::RdsSalSettings).
    pub fn builder() -> crate::types::builders::RdsSalSettingsBuilder {
        crate::types::builders::RdsSalSettingsBuilder::default()
    }
}

/// A builder for [`RdsSalSettings`](crate::types::RdsSalSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RdsSalSettingsBuilder {
    pub(crate) rds_sal_credentials_provider: ::std::option::Option<crate::types::CredentialsProvider>,
}
impl RdsSalSettingsBuilder {
    /// <p>The <code>CredentialsProvider</code> resource contains a reference to the credentials provider that's used for RDS license server user administration.</p>
    /// This field is required.
    pub fn rds_sal_credentials_provider(mut self, input: crate::types::CredentialsProvider) -> Self {
        self.rds_sal_credentials_provider = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>CredentialsProvider</code> resource contains a reference to the credentials provider that's used for RDS license server user administration.</p>
    pub fn set_rds_sal_credentials_provider(mut self, input: ::std::option::Option<crate::types::CredentialsProvider>) -> Self {
        self.rds_sal_credentials_provider = input;
        self
    }
    /// <p>The <code>CredentialsProvider</code> resource contains a reference to the credentials provider that's used for RDS license server user administration.</p>
    pub fn get_rds_sal_credentials_provider(&self) -> &::std::option::Option<crate::types::CredentialsProvider> {
        &self.rds_sal_credentials_provider
    }
    /// Consumes the builder and constructs a [`RdsSalSettings`](crate::types::RdsSalSettings).
    pub fn build(self) -> crate::types::RdsSalSettings {
        crate::types::RdsSalSettings {
            rds_sal_credentials_provider: self.rds_sal_credentials_provider,
        }
    }
}
