// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A network endpoint through which you can access one or more servers.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServerEndpoint {
    /// <p>The network address of the endpoint.</p>
    pub endpoint: ::std::option::Option<::std::string::String>,
}
impl ServerEndpoint {
    /// <p>The network address of the endpoint.</p>
    pub fn endpoint(&self) -> ::std::option::Option<&str> {
        self.endpoint.as_deref()
    }
}
impl ServerEndpoint {
    /// Creates a new builder-style object to manufacture [`ServerEndpoint`](crate::types::ServerEndpoint).
    pub fn builder() -> crate::types::builders::ServerEndpointBuilder {
        crate::types::builders::ServerEndpointBuilder::default()
    }
}

/// A builder for [`ServerEndpoint`](crate::types::ServerEndpoint).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServerEndpointBuilder {
    pub(crate) endpoint: ::std::option::Option<::std::string::String>,
}
impl ServerEndpointBuilder {
    /// <p>The network address of the endpoint.</p>
    pub fn endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The network address of the endpoint.</p>
    pub fn set_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint = input;
        self
    }
    /// <p>The network address of the endpoint.</p>
    pub fn get_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint
    }
    /// Consumes the builder and constructs a [`ServerEndpoint`](crate::types::ServerEndpoint).
    pub fn build(self) -> crate::types::ServerEndpoint {
        crate::types::ServerEndpoint { endpoint: self.endpoint }
    }
}
