// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateLicenseServerEndpointInput {
    /// <p>The Amazon Resource Name (ARN) that identifies the <code>IdentityProvider</code> resource that contains details about a registered identity provider. In the case of Active Directory, that can be a self-managed Active Directory or an Amazon Web Services Managed Active Directory that contains user identity details.</p>
    pub identity_provider_arn: ::std::option::Option<::std::string::String>,
    /// <p>The <code>LicenseServerSettings</code> resource to create for the endpoint. The settings include the type of license server and the Secrets Manager secret that enables administrators to add or remove users associated with the license server.</p>
    pub license_server_settings: ::std::option::Option<crate::types::LicenseServerSettings>,
    /// <p>The tags that apply for the license server endpoint.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateLicenseServerEndpointInput {
    /// <p>The Amazon Resource Name (ARN) that identifies the <code>IdentityProvider</code> resource that contains details about a registered identity provider. In the case of Active Directory, that can be a self-managed Active Directory or an Amazon Web Services Managed Active Directory that contains user identity details.</p>
    pub fn identity_provider_arn(&self) -> ::std::option::Option<&str> {
        self.identity_provider_arn.as_deref()
    }
    /// <p>The <code>LicenseServerSettings</code> resource to create for the endpoint. The settings include the type of license server and the Secrets Manager secret that enables administrators to add or remove users associated with the license server.</p>
    pub fn license_server_settings(&self) -> ::std::option::Option<&crate::types::LicenseServerSettings> {
        self.license_server_settings.as_ref()
    }
    /// <p>The tags that apply for the license server endpoint.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for CreateLicenseServerEndpointInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateLicenseServerEndpointInput");
        formatter.field("identity_provider_arn", &self.identity_provider_arn);
        formatter.field("license_server_settings", &self.license_server_settings);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CreateLicenseServerEndpointInput {
    /// Creates a new builder-style object to manufacture [`CreateLicenseServerEndpointInput`](crate::operation::create_license_server_endpoint::CreateLicenseServerEndpointInput).
    pub fn builder() -> crate::operation::create_license_server_endpoint::builders::CreateLicenseServerEndpointInputBuilder {
        crate::operation::create_license_server_endpoint::builders::CreateLicenseServerEndpointInputBuilder::default()
    }
}

/// A builder for [`CreateLicenseServerEndpointInput`](crate::operation::create_license_server_endpoint::CreateLicenseServerEndpointInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateLicenseServerEndpointInputBuilder {
    pub(crate) identity_provider_arn: ::std::option::Option<::std::string::String>,
    pub(crate) license_server_settings: ::std::option::Option<crate::types::LicenseServerSettings>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateLicenseServerEndpointInputBuilder {
    /// <p>The Amazon Resource Name (ARN) that identifies the <code>IdentityProvider</code> resource that contains details about a registered identity provider. In the case of Active Directory, that can be a self-managed Active Directory or an Amazon Web Services Managed Active Directory that contains user identity details.</p>
    /// This field is required.
    pub fn identity_provider_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity_provider_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that identifies the <code>IdentityProvider</code> resource that contains details about a registered identity provider. In the case of Active Directory, that can be a self-managed Active Directory or an Amazon Web Services Managed Active Directory that contains user identity details.</p>
    pub fn set_identity_provider_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity_provider_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that identifies the <code>IdentityProvider</code> resource that contains details about a registered identity provider. In the case of Active Directory, that can be a self-managed Active Directory or an Amazon Web Services Managed Active Directory that contains user identity details.</p>
    pub fn get_identity_provider_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity_provider_arn
    }
    /// <p>The <code>LicenseServerSettings</code> resource to create for the endpoint. The settings include the type of license server and the Secrets Manager secret that enables administrators to add or remove users associated with the license server.</p>
    /// This field is required.
    pub fn license_server_settings(mut self, input: crate::types::LicenseServerSettings) -> Self {
        self.license_server_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>LicenseServerSettings</code> resource to create for the endpoint. The settings include the type of license server and the Secrets Manager secret that enables administrators to add or remove users associated with the license server.</p>
    pub fn set_license_server_settings(mut self, input: ::std::option::Option<crate::types::LicenseServerSettings>) -> Self {
        self.license_server_settings = input;
        self
    }
    /// <p>The <code>LicenseServerSettings</code> resource to create for the endpoint. The settings include the type of license server and the Secrets Manager secret that enables administrators to add or remove users associated with the license server.</p>
    pub fn get_license_server_settings(&self) -> &::std::option::Option<crate::types::LicenseServerSettings> {
        &self.license_server_settings
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags that apply for the license server endpoint.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags that apply for the license server endpoint.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags that apply for the license server endpoint.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateLicenseServerEndpointInput`](crate::operation::create_license_server_endpoint::CreateLicenseServerEndpointInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_license_server_endpoint::CreateLicenseServerEndpointInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_license_server_endpoint::CreateLicenseServerEndpointInput {
            identity_provider_arn: self.identity_provider_arn,
            license_server_settings: self.license_server_settings,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for CreateLicenseServerEndpointInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateLicenseServerEndpointInputBuilder");
        formatter.field("identity_provider_arn", &self.identity_provider_arn);
        formatter.field("license_server_settings", &self.license_server_settings);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
