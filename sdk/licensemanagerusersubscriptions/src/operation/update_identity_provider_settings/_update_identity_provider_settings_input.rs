// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateIdentityProviderSettingsInput {
    /// <p>Refers to an identity provider.</p>
    pub identity_provider: ::std::option::Option<crate::types::IdentityProvider>,
    /// <p>The name of the user-based subscription product.</p>
    /// <p>Valid values: <code>VISUAL_STUDIO_ENTERPRISE</code> | <code>VISUAL_STUDIO_PROFESSIONAL</code> | <code>OFFICE_PROFESSIONAL_PLUS</code> | <code>REMOTE_DESKTOP_SERVICES</code></p>
    pub product: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the identity provider to update.</p>
    pub identity_provider_arn: ::std::option::Option<::std::string::String>,
    /// <p>Updates the registered identity provider’s product related configuration settings. You can update any combination of settings in a single operation such as the:</p>
    /// <ul>
    /// <li>
    /// <p>Subnets which you want to add to provision VPC endpoints.</p></li>
    /// <li>
    /// <p>Subnets which you want to remove the VPC endpoints from.</p></li>
    /// <li>
    /// <p>Security group ID which permits traffic to the VPC endpoints.</p></li>
    /// </ul>
    pub update_settings: ::std::option::Option<crate::types::UpdateSettings>,
}
impl UpdateIdentityProviderSettingsInput {
    /// <p>Refers to an identity provider.</p>
    pub fn identity_provider(&self) -> ::std::option::Option<&crate::types::IdentityProvider> {
        self.identity_provider.as_ref()
    }
    /// <p>The name of the user-based subscription product.</p>
    /// <p>Valid values: <code>VISUAL_STUDIO_ENTERPRISE</code> | <code>VISUAL_STUDIO_PROFESSIONAL</code> | <code>OFFICE_PROFESSIONAL_PLUS</code> | <code>REMOTE_DESKTOP_SERVICES</code></p>
    pub fn product(&self) -> ::std::option::Option<&str> {
        self.product.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the identity provider to update.</p>
    pub fn identity_provider_arn(&self) -> ::std::option::Option<&str> {
        self.identity_provider_arn.as_deref()
    }
    /// <p>Updates the registered identity provider’s product related configuration settings. You can update any combination of settings in a single operation such as the:</p>
    /// <ul>
    /// <li>
    /// <p>Subnets which you want to add to provision VPC endpoints.</p></li>
    /// <li>
    /// <p>Subnets which you want to remove the VPC endpoints from.</p></li>
    /// <li>
    /// <p>Security group ID which permits traffic to the VPC endpoints.</p></li>
    /// </ul>
    pub fn update_settings(&self) -> ::std::option::Option<&crate::types::UpdateSettings> {
        self.update_settings.as_ref()
    }
}
impl UpdateIdentityProviderSettingsInput {
    /// Creates a new builder-style object to manufacture [`UpdateIdentityProviderSettingsInput`](crate::operation::update_identity_provider_settings::UpdateIdentityProviderSettingsInput).
    pub fn builder() -> crate::operation::update_identity_provider_settings::builders::UpdateIdentityProviderSettingsInputBuilder {
        crate::operation::update_identity_provider_settings::builders::UpdateIdentityProviderSettingsInputBuilder::default()
    }
}

/// A builder for [`UpdateIdentityProviderSettingsInput`](crate::operation::update_identity_provider_settings::UpdateIdentityProviderSettingsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateIdentityProviderSettingsInputBuilder {
    pub(crate) identity_provider: ::std::option::Option<crate::types::IdentityProvider>,
    pub(crate) product: ::std::option::Option<::std::string::String>,
    pub(crate) identity_provider_arn: ::std::option::Option<::std::string::String>,
    pub(crate) update_settings: ::std::option::Option<crate::types::UpdateSettings>,
}
impl UpdateIdentityProviderSettingsInputBuilder {
    /// <p>Refers to an identity provider.</p>
    pub fn identity_provider(mut self, input: crate::types::IdentityProvider) -> Self {
        self.identity_provider = ::std::option::Option::Some(input);
        self
    }
    /// <p>Refers to an identity provider.</p>
    pub fn set_identity_provider(mut self, input: ::std::option::Option<crate::types::IdentityProvider>) -> Self {
        self.identity_provider = input;
        self
    }
    /// <p>Refers to an identity provider.</p>
    pub fn get_identity_provider(&self) -> &::std::option::Option<crate::types::IdentityProvider> {
        &self.identity_provider
    }
    /// <p>The name of the user-based subscription product.</p>
    /// <p>Valid values: <code>VISUAL_STUDIO_ENTERPRISE</code> | <code>VISUAL_STUDIO_PROFESSIONAL</code> | <code>OFFICE_PROFESSIONAL_PLUS</code> | <code>REMOTE_DESKTOP_SERVICES</code></p>
    pub fn product(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.product = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the user-based subscription product.</p>
    /// <p>Valid values: <code>VISUAL_STUDIO_ENTERPRISE</code> | <code>VISUAL_STUDIO_PROFESSIONAL</code> | <code>OFFICE_PROFESSIONAL_PLUS</code> | <code>REMOTE_DESKTOP_SERVICES</code></p>
    pub fn set_product(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.product = input;
        self
    }
    /// <p>The name of the user-based subscription product.</p>
    /// <p>Valid values: <code>VISUAL_STUDIO_ENTERPRISE</code> | <code>VISUAL_STUDIO_PROFESSIONAL</code> | <code>OFFICE_PROFESSIONAL_PLUS</code> | <code>REMOTE_DESKTOP_SERVICES</code></p>
    pub fn get_product(&self) -> &::std::option::Option<::std::string::String> {
        &self.product
    }
    /// <p>The Amazon Resource Name (ARN) of the identity provider to update.</p>
    pub fn identity_provider_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity_provider_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the identity provider to update.</p>
    pub fn set_identity_provider_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity_provider_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the identity provider to update.</p>
    pub fn get_identity_provider_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity_provider_arn
    }
    /// <p>Updates the registered identity provider’s product related configuration settings. You can update any combination of settings in a single operation such as the:</p>
    /// <ul>
    /// <li>
    /// <p>Subnets which you want to add to provision VPC endpoints.</p></li>
    /// <li>
    /// <p>Subnets which you want to remove the VPC endpoints from.</p></li>
    /// <li>
    /// <p>Security group ID which permits traffic to the VPC endpoints.</p></li>
    /// </ul>
    /// This field is required.
    pub fn update_settings(mut self, input: crate::types::UpdateSettings) -> Self {
        self.update_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>Updates the registered identity provider’s product related configuration settings. You can update any combination of settings in a single operation such as the:</p>
    /// <ul>
    /// <li>
    /// <p>Subnets which you want to add to provision VPC endpoints.</p></li>
    /// <li>
    /// <p>Subnets which you want to remove the VPC endpoints from.</p></li>
    /// <li>
    /// <p>Security group ID which permits traffic to the VPC endpoints.</p></li>
    /// </ul>
    pub fn set_update_settings(mut self, input: ::std::option::Option<crate::types::UpdateSettings>) -> Self {
        self.update_settings = input;
        self
    }
    /// <p>Updates the registered identity provider’s product related configuration settings. You can update any combination of settings in a single operation such as the:</p>
    /// <ul>
    /// <li>
    /// <p>Subnets which you want to add to provision VPC endpoints.</p></li>
    /// <li>
    /// <p>Subnets which you want to remove the VPC endpoints from.</p></li>
    /// <li>
    /// <p>Security group ID which permits traffic to the VPC endpoints.</p></li>
    /// </ul>
    pub fn get_update_settings(&self) -> &::std::option::Option<crate::types::UpdateSettings> {
        &self.update_settings
    }
    /// Consumes the builder and constructs a [`UpdateIdentityProviderSettingsInput`](crate::operation::update_identity_provider_settings::UpdateIdentityProviderSettingsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_identity_provider_settings::UpdateIdentityProviderSettingsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_identity_provider_settings::UpdateIdentityProviderSettingsInput {
            identity_provider: self.identity_provider,
            product: self.product,
            identity_provider_arn: self.identity_provider_arn,
            update_settings: self.update_settings,
        })
    }
}
