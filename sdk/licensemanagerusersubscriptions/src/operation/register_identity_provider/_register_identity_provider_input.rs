// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RegisterIdentityProviderInput {
    /// <p>An object that specifies details for the identity provider to register.</p>
    pub identity_provider: ::std::option::Option<crate::types::IdentityProvider>,
    /// <p>The name of the user-based subscription product.</p>
    /// <p>Valid values: <code>VISUAL_STUDIO_ENTERPRISE</code> | <code>VISUAL_STUDIO_PROFESSIONAL</code> | <code>OFFICE_PROFESSIONAL_PLUS</code> | <code>REMOTE_DESKTOP_SERVICES</code></p>
    pub product: ::std::option::Option<::std::string::String>,
    /// <p>The registered identity provider’s product related configuration settings such as the subnets to provision VPC endpoints.</p>
    pub settings: ::std::option::Option<crate::types::Settings>,
    /// <p>The tags that apply to the identity provider's registration.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl RegisterIdentityProviderInput {
    /// <p>An object that specifies details for the identity provider to register.</p>
    pub fn identity_provider(&self) -> ::std::option::Option<&crate::types::IdentityProvider> {
        self.identity_provider.as_ref()
    }
    /// <p>The name of the user-based subscription product.</p>
    /// <p>Valid values: <code>VISUAL_STUDIO_ENTERPRISE</code> | <code>VISUAL_STUDIO_PROFESSIONAL</code> | <code>OFFICE_PROFESSIONAL_PLUS</code> | <code>REMOTE_DESKTOP_SERVICES</code></p>
    pub fn product(&self) -> ::std::option::Option<&str> {
        self.product.as_deref()
    }
    /// <p>The registered identity provider’s product related configuration settings such as the subnets to provision VPC endpoints.</p>
    pub fn settings(&self) -> ::std::option::Option<&crate::types::Settings> {
        self.settings.as_ref()
    }
    /// <p>The tags that apply to the identity provider's registration.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for RegisterIdentityProviderInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RegisterIdentityProviderInput");
        formatter.field("identity_provider", &self.identity_provider);
        formatter.field("product", &self.product);
        formatter.field("settings", &self.settings);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RegisterIdentityProviderInput {
    /// Creates a new builder-style object to manufacture [`RegisterIdentityProviderInput`](crate::operation::register_identity_provider::RegisterIdentityProviderInput).
    pub fn builder() -> crate::operation::register_identity_provider::builders::RegisterIdentityProviderInputBuilder {
        crate::operation::register_identity_provider::builders::RegisterIdentityProviderInputBuilder::default()
    }
}

/// A builder for [`RegisterIdentityProviderInput`](crate::operation::register_identity_provider::RegisterIdentityProviderInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RegisterIdentityProviderInputBuilder {
    pub(crate) identity_provider: ::std::option::Option<crate::types::IdentityProvider>,
    pub(crate) product: ::std::option::Option<::std::string::String>,
    pub(crate) settings: ::std::option::Option<crate::types::Settings>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl RegisterIdentityProviderInputBuilder {
    /// <p>An object that specifies details for the identity provider to register.</p>
    /// This field is required.
    pub fn identity_provider(mut self, input: crate::types::IdentityProvider) -> Self {
        self.identity_provider = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that specifies details for the identity provider to register.</p>
    pub fn set_identity_provider(mut self, input: ::std::option::Option<crate::types::IdentityProvider>) -> Self {
        self.identity_provider = input;
        self
    }
    /// <p>An object that specifies details for the identity provider to register.</p>
    pub fn get_identity_provider(&self) -> &::std::option::Option<crate::types::IdentityProvider> {
        &self.identity_provider
    }
    /// <p>The name of the user-based subscription product.</p>
    /// <p>Valid values: <code>VISUAL_STUDIO_ENTERPRISE</code> | <code>VISUAL_STUDIO_PROFESSIONAL</code> | <code>OFFICE_PROFESSIONAL_PLUS</code> | <code>REMOTE_DESKTOP_SERVICES</code></p>
    /// This field is required.
    pub fn product(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.product = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the user-based subscription product.</p>
    /// <p>Valid values: <code>VISUAL_STUDIO_ENTERPRISE</code> | <code>VISUAL_STUDIO_PROFESSIONAL</code> | <code>OFFICE_PROFESSIONAL_PLUS</code> | <code>REMOTE_DESKTOP_SERVICES</code></p>
    pub fn set_product(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.product = input;
        self
    }
    /// <p>The name of the user-based subscription product.</p>
    /// <p>Valid values: <code>VISUAL_STUDIO_ENTERPRISE</code> | <code>VISUAL_STUDIO_PROFESSIONAL</code> | <code>OFFICE_PROFESSIONAL_PLUS</code> | <code>REMOTE_DESKTOP_SERVICES</code></p>
    pub fn get_product(&self) -> &::std::option::Option<::std::string::String> {
        &self.product
    }
    /// <p>The registered identity provider’s product related configuration settings such as the subnets to provision VPC endpoints.</p>
    pub fn settings(mut self, input: crate::types::Settings) -> Self {
        self.settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The registered identity provider’s product related configuration settings such as the subnets to provision VPC endpoints.</p>
    pub fn set_settings(mut self, input: ::std::option::Option<crate::types::Settings>) -> Self {
        self.settings = input;
        self
    }
    /// <p>The registered identity provider’s product related configuration settings such as the subnets to provision VPC endpoints.</p>
    pub fn get_settings(&self) -> &::std::option::Option<crate::types::Settings> {
        &self.settings
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags that apply to the identity provider's registration.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags that apply to the identity provider's registration.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags that apply to the identity provider's registration.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`RegisterIdentityProviderInput`](crate::operation::register_identity_provider::RegisterIdentityProviderInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::register_identity_provider::RegisterIdentityProviderInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::register_identity_provider::RegisterIdentityProviderInput {
            identity_provider: self.identity_provider,
            product: self.product,
            settings: self.settings,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for RegisterIdentityProviderInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RegisterIdentityProviderInputBuilder");
        formatter.field("identity_provider", &self.identity_provider);
        formatter.field("product", &self.product);
        formatter.field("settings", &self.settings);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
