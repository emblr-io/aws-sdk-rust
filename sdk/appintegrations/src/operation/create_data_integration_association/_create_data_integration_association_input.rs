// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateDataIntegrationAssociationInput {
    /// <p>A unique identifier for the DataIntegration.</p>
    pub data_integration_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The identifier for the client that is associated with the DataIntegration association.</p>
    pub client_id: ::std::option::Option<::std::string::String>,
    /// <p>The configuration for what data should be pulled from the source.</p>
    pub object_configuration: ::std::option::Option<
        ::std::collections::HashMap<
            ::std::string::String,
            ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>,
        >,
    >,
    /// <p>The URI of the data destination.</p>
    pub destination_uri: ::std::option::Option<::std::string::String>,
    /// <p>The mapping of metadata to be extracted from the data.</p>
    pub client_association_metadata: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The configuration for how the files should be pulled from the source.</p>
    pub execution_configuration: ::std::option::Option<crate::types::ExecutionConfiguration>,
}
impl CreateDataIntegrationAssociationInput {
    /// <p>A unique identifier for the DataIntegration.</p>
    pub fn data_integration_identifier(&self) -> ::std::option::Option<&str> {
        self.data_integration_identifier.as_deref()
    }
    /// <p>The identifier for the client that is associated with the DataIntegration association.</p>
    pub fn client_id(&self) -> ::std::option::Option<&str> {
        self.client_id.as_deref()
    }
    /// <p>The configuration for what data should be pulled from the source.</p>
    pub fn object_configuration(
        &self,
    ) -> ::std::option::Option<
        &::std::collections::HashMap<
            ::std::string::String,
            ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>,
        >,
    > {
        self.object_configuration.as_ref()
    }
    /// <p>The URI of the data destination.</p>
    pub fn destination_uri(&self) -> ::std::option::Option<&str> {
        self.destination_uri.as_deref()
    }
    /// <p>The mapping of metadata to be extracted from the data.</p>
    pub fn client_association_metadata(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.client_association_metadata.as_ref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The configuration for how the files should be pulled from the source.</p>
    pub fn execution_configuration(&self) -> ::std::option::Option<&crate::types::ExecutionConfiguration> {
        self.execution_configuration.as_ref()
    }
}
impl CreateDataIntegrationAssociationInput {
    /// Creates a new builder-style object to manufacture [`CreateDataIntegrationAssociationInput`](crate::operation::create_data_integration_association::CreateDataIntegrationAssociationInput).
    pub fn builder() -> crate::operation::create_data_integration_association::builders::CreateDataIntegrationAssociationInputBuilder {
        crate::operation::create_data_integration_association::builders::CreateDataIntegrationAssociationInputBuilder::default()
    }
}

/// A builder for [`CreateDataIntegrationAssociationInput`](crate::operation::create_data_integration_association::CreateDataIntegrationAssociationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateDataIntegrationAssociationInputBuilder {
    pub(crate) data_integration_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) client_id: ::std::option::Option<::std::string::String>,
    pub(crate) object_configuration: ::std::option::Option<
        ::std::collections::HashMap<
            ::std::string::String,
            ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>,
        >,
    >,
    pub(crate) destination_uri: ::std::option::Option<::std::string::String>,
    pub(crate) client_association_metadata: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) execution_configuration: ::std::option::Option<crate::types::ExecutionConfiguration>,
}
impl CreateDataIntegrationAssociationInputBuilder {
    /// <p>A unique identifier for the DataIntegration.</p>
    /// This field is required.
    pub fn data_integration_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_integration_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the DataIntegration.</p>
    pub fn set_data_integration_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_integration_identifier = input;
        self
    }
    /// <p>A unique identifier for the DataIntegration.</p>
    pub fn get_data_integration_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_integration_identifier
    }
    /// <p>The identifier for the client that is associated with the DataIntegration association.</p>
    pub fn client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the client that is associated with the DataIntegration association.</p>
    pub fn set_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_id = input;
        self
    }
    /// <p>The identifier for the client that is associated with the DataIntegration association.</p>
    pub fn get_client_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_id
    }
    /// Adds a key-value pair to `object_configuration`.
    ///
    /// To override the contents of this collection use [`set_object_configuration`](Self::set_object_configuration).
    ///
    /// <p>The configuration for what data should be pulled from the source.</p>
    pub fn object_configuration(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>,
    ) -> Self {
        let mut hash_map = self.object_configuration.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.object_configuration = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The configuration for what data should be pulled from the source.</p>
    pub fn set_object_configuration(
        mut self,
        input: ::std::option::Option<
            ::std::collections::HashMap<
                ::std::string::String,
                ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>,
            >,
        >,
    ) -> Self {
        self.object_configuration = input;
        self
    }
    /// <p>The configuration for what data should be pulled from the source.</p>
    pub fn get_object_configuration(
        &self,
    ) -> &::std::option::Option<
        ::std::collections::HashMap<
            ::std::string::String,
            ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>,
        >,
    > {
        &self.object_configuration
    }
    /// <p>The URI of the data destination.</p>
    pub fn destination_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URI of the data destination.</p>
    pub fn set_destination_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_uri = input;
        self
    }
    /// <p>The URI of the data destination.</p>
    pub fn get_destination_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_uri
    }
    /// Adds a key-value pair to `client_association_metadata`.
    ///
    /// To override the contents of this collection use [`set_client_association_metadata`](Self::set_client_association_metadata).
    ///
    /// <p>The mapping of metadata to be extracted from the data.</p>
    pub fn client_association_metadata(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.client_association_metadata.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.client_association_metadata = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The mapping of metadata to be extracted from the data.</p>
    pub fn set_client_association_metadata(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.client_association_metadata = input;
        self
    }
    /// <p>The mapping of metadata to be extracted from the data.</p>
    pub fn get_client_association_metadata(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.client_association_metadata
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The configuration for how the files should be pulled from the source.</p>
    pub fn execution_configuration(mut self, input: crate::types::ExecutionConfiguration) -> Self {
        self.execution_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for how the files should be pulled from the source.</p>
    pub fn set_execution_configuration(mut self, input: ::std::option::Option<crate::types::ExecutionConfiguration>) -> Self {
        self.execution_configuration = input;
        self
    }
    /// <p>The configuration for how the files should be pulled from the source.</p>
    pub fn get_execution_configuration(&self) -> &::std::option::Option<crate::types::ExecutionConfiguration> {
        &self.execution_configuration
    }
    /// Consumes the builder and constructs a [`CreateDataIntegrationAssociationInput`](crate::operation::create_data_integration_association::CreateDataIntegrationAssociationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_data_integration_association::CreateDataIntegrationAssociationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_data_integration_association::CreateDataIntegrationAssociationInput {
                data_integration_identifier: self.data_integration_identifier,
                client_id: self.client_id,
                object_configuration: self.object_configuration,
                destination_uri: self.destination_uri,
                client_association_metadata: self.client_association_metadata,
                client_token: self.client_token,
                execution_configuration: self.execution_configuration,
            },
        )
    }
}
