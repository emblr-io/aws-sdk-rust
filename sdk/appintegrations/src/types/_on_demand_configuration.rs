// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The start and end time for data pull from the source.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OnDemandConfiguration {
    /// <p>The start time for data pull from the source as an Unix/epoch string in milliseconds</p>
    pub start_time: ::std::string::String,
    /// <p>The end time for data pull from the source as an Unix/epoch string in milliseconds</p>
    pub end_time: ::std::option::Option<::std::string::String>,
}
impl OnDemandConfiguration {
    /// <p>The start time for data pull from the source as an Unix/epoch string in milliseconds</p>
    pub fn start_time(&self) -> &str {
        use std::ops::Deref;
        self.start_time.deref()
    }
    /// <p>The end time for data pull from the source as an Unix/epoch string in milliseconds</p>
    pub fn end_time(&self) -> ::std::option::Option<&str> {
        self.end_time.as_deref()
    }
}
impl OnDemandConfiguration {
    /// Creates a new builder-style object to manufacture [`OnDemandConfiguration`](crate::types::OnDemandConfiguration).
    pub fn builder() -> crate::types::builders::OnDemandConfigurationBuilder {
        crate::types::builders::OnDemandConfigurationBuilder::default()
    }
}

/// A builder for [`OnDemandConfiguration`](crate::types::OnDemandConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OnDemandConfigurationBuilder {
    pub(crate) start_time: ::std::option::Option<::std::string::String>,
    pub(crate) end_time: ::std::option::Option<::std::string::String>,
}
impl OnDemandConfigurationBuilder {
    /// <p>The start time for data pull from the source as an Unix/epoch string in milliseconds</p>
    /// This field is required.
    pub fn start_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.start_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The start time for data pull from the source as an Unix/epoch string in milliseconds</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The start time for data pull from the source as an Unix/epoch string in milliseconds</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.start_time
    }
    /// <p>The end time for data pull from the source as an Unix/epoch string in milliseconds</p>
    pub fn end_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.end_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The end time for data pull from the source as an Unix/epoch string in milliseconds</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The end time for data pull from the source as an Unix/epoch string in milliseconds</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.end_time
    }
    /// Consumes the builder and constructs a [`OnDemandConfiguration`](crate::types::OnDemandConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`start_time`](crate::types::builders::OnDemandConfigurationBuilder::start_time)
    pub fn build(self) -> ::std::result::Result<crate::types::OnDemandConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OnDemandConfiguration {
            start_time: self.start_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_time",
                    "start_time was not specified but it is required when building OnDemandConfiguration",
                )
            })?,
            end_time: self.end_time,
        })
    }
}
