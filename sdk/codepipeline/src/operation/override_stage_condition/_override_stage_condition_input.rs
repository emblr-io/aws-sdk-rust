// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OverrideStageConditionInput {
    /// <p>The name of the pipeline with the stage that will override the condition.</p>
    pub pipeline_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the stage for the override.</p>
    pub stage_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the pipeline execution for the override.</p>
    pub pipeline_execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of condition to override for the stage, such as entry conditions, failure conditions, or success conditions.</p>
    pub condition_type: ::std::option::Option<crate::types::ConditionType>,
}
impl OverrideStageConditionInput {
    /// <p>The name of the pipeline with the stage that will override the condition.</p>
    pub fn pipeline_name(&self) -> ::std::option::Option<&str> {
        self.pipeline_name.as_deref()
    }
    /// <p>The name of the stage for the override.</p>
    pub fn stage_name(&self) -> ::std::option::Option<&str> {
        self.stage_name.as_deref()
    }
    /// <p>The ID of the pipeline execution for the override.</p>
    pub fn pipeline_execution_id(&self) -> ::std::option::Option<&str> {
        self.pipeline_execution_id.as_deref()
    }
    /// <p>The type of condition to override for the stage, such as entry conditions, failure conditions, or success conditions.</p>
    pub fn condition_type(&self) -> ::std::option::Option<&crate::types::ConditionType> {
        self.condition_type.as_ref()
    }
}
impl OverrideStageConditionInput {
    /// Creates a new builder-style object to manufacture [`OverrideStageConditionInput`](crate::operation::override_stage_condition::OverrideStageConditionInput).
    pub fn builder() -> crate::operation::override_stage_condition::builders::OverrideStageConditionInputBuilder {
        crate::operation::override_stage_condition::builders::OverrideStageConditionInputBuilder::default()
    }
}

/// A builder for [`OverrideStageConditionInput`](crate::operation::override_stage_condition::OverrideStageConditionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OverrideStageConditionInputBuilder {
    pub(crate) pipeline_name: ::std::option::Option<::std::string::String>,
    pub(crate) stage_name: ::std::option::Option<::std::string::String>,
    pub(crate) pipeline_execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) condition_type: ::std::option::Option<crate::types::ConditionType>,
}
impl OverrideStageConditionInputBuilder {
    /// <p>The name of the pipeline with the stage that will override the condition.</p>
    /// This field is required.
    pub fn pipeline_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pipeline_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the pipeline with the stage that will override the condition.</p>
    pub fn set_pipeline_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pipeline_name = input;
        self
    }
    /// <p>The name of the pipeline with the stage that will override the condition.</p>
    pub fn get_pipeline_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.pipeline_name
    }
    /// <p>The name of the stage for the override.</p>
    /// This field is required.
    pub fn stage_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stage_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the stage for the override.</p>
    pub fn set_stage_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stage_name = input;
        self
    }
    /// <p>The name of the stage for the override.</p>
    pub fn get_stage_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.stage_name
    }
    /// <p>The ID of the pipeline execution for the override.</p>
    /// This field is required.
    pub fn pipeline_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pipeline_execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the pipeline execution for the override.</p>
    pub fn set_pipeline_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pipeline_execution_id = input;
        self
    }
    /// <p>The ID of the pipeline execution for the override.</p>
    pub fn get_pipeline_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.pipeline_execution_id
    }
    /// <p>The type of condition to override for the stage, such as entry conditions, failure conditions, or success conditions.</p>
    /// This field is required.
    pub fn condition_type(mut self, input: crate::types::ConditionType) -> Self {
        self.condition_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of condition to override for the stage, such as entry conditions, failure conditions, or success conditions.</p>
    pub fn set_condition_type(mut self, input: ::std::option::Option<crate::types::ConditionType>) -> Self {
        self.condition_type = input;
        self
    }
    /// <p>The type of condition to override for the stage, such as entry conditions, failure conditions, or success conditions.</p>
    pub fn get_condition_type(&self) -> &::std::option::Option<crate::types::ConditionType> {
        &self.condition_type
    }
    /// Consumes the builder and constructs a [`OverrideStageConditionInput`](crate::operation::override_stage_condition::OverrideStageConditionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::override_stage_condition::OverrideStageConditionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::override_stage_condition::OverrideStageConditionInput {
            pipeline_name: self.pipeline_name,
            stage_name: self.stage_name,
            pipeline_execution_id: self.pipeline_execution_id,
            condition_type: self.condition_type,
        })
    }
}
