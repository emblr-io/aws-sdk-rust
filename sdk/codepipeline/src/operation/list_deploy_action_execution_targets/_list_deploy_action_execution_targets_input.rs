// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListDeployActionExecutionTargetsInput {
    /// <p>The name of the pipeline with the deploy action.</p>
    pub pipeline_name: ::std::option::Option<::std::string::String>,
    /// <p>The execution ID for the deploy action.</p>
    pub action_execution_id: ::std::option::Option<::std::string::String>,
    /// <p>Filters the targets for a specified deploy action.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::TargetFilter>>,
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>An identifier that was returned from the previous list action types call, which can be used to return the next set of action types in the list.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListDeployActionExecutionTargetsInput {
    /// <p>The name of the pipeline with the deploy action.</p>
    pub fn pipeline_name(&self) -> ::std::option::Option<&str> {
        self.pipeline_name.as_deref()
    }
    /// <p>The execution ID for the deploy action.</p>
    pub fn action_execution_id(&self) -> ::std::option::Option<&str> {
        self.action_execution_id.as_deref()
    }
    /// <p>Filters the targets for a specified deploy action.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::TargetFilter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>An identifier that was returned from the previous list action types call, which can be used to return the next set of action types in the list.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListDeployActionExecutionTargetsInput {
    /// Creates a new builder-style object to manufacture [`ListDeployActionExecutionTargetsInput`](crate::operation::list_deploy_action_execution_targets::ListDeployActionExecutionTargetsInput).
    pub fn builder() -> crate::operation::list_deploy_action_execution_targets::builders::ListDeployActionExecutionTargetsInputBuilder {
        crate::operation::list_deploy_action_execution_targets::builders::ListDeployActionExecutionTargetsInputBuilder::default()
    }
}

/// A builder for [`ListDeployActionExecutionTargetsInput`](crate::operation::list_deploy_action_execution_targets::ListDeployActionExecutionTargetsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListDeployActionExecutionTargetsInputBuilder {
    pub(crate) pipeline_name: ::std::option::Option<::std::string::String>,
    pub(crate) action_execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::TargetFilter>>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListDeployActionExecutionTargetsInputBuilder {
    /// <p>The name of the pipeline with the deploy action.</p>
    pub fn pipeline_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pipeline_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the pipeline with the deploy action.</p>
    pub fn set_pipeline_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pipeline_name = input;
        self
    }
    /// <p>The name of the pipeline with the deploy action.</p>
    pub fn get_pipeline_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.pipeline_name
    }
    /// <p>The execution ID for the deploy action.</p>
    /// This field is required.
    pub fn action_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The execution ID for the deploy action.</p>
    pub fn set_action_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_execution_id = input;
        self
    }
    /// <p>The execution ID for the deploy action.</p>
    pub fn get_action_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_execution_id
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>Filters the targets for a specified deploy action.</p>
    pub fn filters(mut self, input: crate::types::TargetFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Filters the targets for a specified deploy action.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TargetFilter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>Filters the targets for a specified deploy action.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TargetFilter>> {
        &self.filters
    }
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>An identifier that was returned from the previous list action types call, which can be used to return the next set of action types in the list.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An identifier that was returned from the previous list action types call, which can be used to return the next set of action types in the list.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>An identifier that was returned from the previous list action types call, which can be used to return the next set of action types in the list.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListDeployActionExecutionTargetsInput`](crate::operation::list_deploy_action_execution_targets::ListDeployActionExecutionTargetsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_deploy_action_execution_targets::ListDeployActionExecutionTargetsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::list_deploy_action_execution_targets::ListDeployActionExecutionTargetsInput {
                pipeline_name: self.pipeline_name,
                action_execution_id: self.action_execution_id,
                filters: self.filters,
                max_results: self.max_results,
                next_token: self.next_token,
            },
        )
    }
}
