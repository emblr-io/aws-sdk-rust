// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListRuleExecutionsInput {
    /// <p>The name of the pipeline for which you want to get execution summary information.</p>
    pub pipeline_name: ::std::option::Option<::std::string::String>,
    /// <p>Input information used to filter rule execution history.</p>
    pub filter: ::std::option::Option<crate::types::RuleExecutionFilter>,
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value. Pipeline history is limited to the most recent 12 months, based on pipeline execution start times. Default value is 100.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The token that was returned from the previous <code>ListRuleExecutions</code> call, which can be used to return the next set of rule executions in the list.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListRuleExecutionsInput {
    /// <p>The name of the pipeline for which you want to get execution summary information.</p>
    pub fn pipeline_name(&self) -> ::std::option::Option<&str> {
        self.pipeline_name.as_deref()
    }
    /// <p>Input information used to filter rule execution history.</p>
    pub fn filter(&self) -> ::std::option::Option<&crate::types::RuleExecutionFilter> {
        self.filter.as_ref()
    }
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value. Pipeline history is limited to the most recent 12 months, based on pipeline execution start times. Default value is 100.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token that was returned from the previous <code>ListRuleExecutions</code> call, which can be used to return the next set of rule executions in the list.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListRuleExecutionsInput {
    /// Creates a new builder-style object to manufacture [`ListRuleExecutionsInput`](crate::operation::list_rule_executions::ListRuleExecutionsInput).
    pub fn builder() -> crate::operation::list_rule_executions::builders::ListRuleExecutionsInputBuilder {
        crate::operation::list_rule_executions::builders::ListRuleExecutionsInputBuilder::default()
    }
}

/// A builder for [`ListRuleExecutionsInput`](crate::operation::list_rule_executions::ListRuleExecutionsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListRuleExecutionsInputBuilder {
    pub(crate) pipeline_name: ::std::option::Option<::std::string::String>,
    pub(crate) filter: ::std::option::Option<crate::types::RuleExecutionFilter>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListRuleExecutionsInputBuilder {
    /// <p>The name of the pipeline for which you want to get execution summary information.</p>
    /// This field is required.
    pub fn pipeline_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pipeline_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the pipeline for which you want to get execution summary information.</p>
    pub fn set_pipeline_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pipeline_name = input;
        self
    }
    /// <p>The name of the pipeline for which you want to get execution summary information.</p>
    pub fn get_pipeline_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.pipeline_name
    }
    /// <p>Input information used to filter rule execution history.</p>
    pub fn filter(mut self, input: crate::types::RuleExecutionFilter) -> Self {
        self.filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>Input information used to filter rule execution history.</p>
    pub fn set_filter(mut self, input: ::std::option::Option<crate::types::RuleExecutionFilter>) -> Self {
        self.filter = input;
        self
    }
    /// <p>Input information used to filter rule execution history.</p>
    pub fn get_filter(&self) -> &::std::option::Option<crate::types::RuleExecutionFilter> {
        &self.filter
    }
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value. Pipeline history is limited to the most recent 12 months, based on pipeline execution start times. Default value is 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value. Pipeline history is limited to the most recent 12 months, based on pipeline execution start times. Default value is 100.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value. Pipeline history is limited to the most recent 12 months, based on pipeline execution start times. Default value is 100.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The token that was returned from the previous <code>ListRuleExecutions</code> call, which can be used to return the next set of rule executions in the list.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token that was returned from the previous <code>ListRuleExecutions</code> call, which can be used to return the next set of rule executions in the list.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token that was returned from the previous <code>ListRuleExecutions</code> call, which can be used to return the next set of rule executions in the list.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListRuleExecutionsInput`](crate::operation::list_rule_executions::ListRuleExecutionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_rule_executions::ListRuleExecutionsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_rule_executions::ListRuleExecutionsInput {
            pipeline_name: self.pipeline_name,
            filter: self.filter,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
