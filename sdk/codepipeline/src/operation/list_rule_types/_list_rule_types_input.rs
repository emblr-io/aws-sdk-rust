// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListRuleTypesInput {
    /// <p>The rule owner to filter on.</p>
    pub rule_owner_filter: ::std::option::Option<crate::types::RuleOwner>,
    /// <p>The rule Region to filter on.</p>
    pub region_filter: ::std::option::Option<::std::string::String>,
}
impl ListRuleTypesInput {
    /// <p>The rule owner to filter on.</p>
    pub fn rule_owner_filter(&self) -> ::std::option::Option<&crate::types::RuleOwner> {
        self.rule_owner_filter.as_ref()
    }
    /// <p>The rule Region to filter on.</p>
    pub fn region_filter(&self) -> ::std::option::Option<&str> {
        self.region_filter.as_deref()
    }
}
impl ListRuleTypesInput {
    /// Creates a new builder-style object to manufacture [`ListRuleTypesInput`](crate::operation::list_rule_types::ListRuleTypesInput).
    pub fn builder() -> crate::operation::list_rule_types::builders::ListRuleTypesInputBuilder {
        crate::operation::list_rule_types::builders::ListRuleTypesInputBuilder::default()
    }
}

/// A builder for [`ListRuleTypesInput`](crate::operation::list_rule_types::ListRuleTypesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListRuleTypesInputBuilder {
    pub(crate) rule_owner_filter: ::std::option::Option<crate::types::RuleOwner>,
    pub(crate) region_filter: ::std::option::Option<::std::string::String>,
}
impl ListRuleTypesInputBuilder {
    /// <p>The rule owner to filter on.</p>
    pub fn rule_owner_filter(mut self, input: crate::types::RuleOwner) -> Self {
        self.rule_owner_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>The rule owner to filter on.</p>
    pub fn set_rule_owner_filter(mut self, input: ::std::option::Option<crate::types::RuleOwner>) -> Self {
        self.rule_owner_filter = input;
        self
    }
    /// <p>The rule owner to filter on.</p>
    pub fn get_rule_owner_filter(&self) -> &::std::option::Option<crate::types::RuleOwner> {
        &self.rule_owner_filter
    }
    /// <p>The rule Region to filter on.</p>
    pub fn region_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region_filter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The rule Region to filter on.</p>
    pub fn set_region_filter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region_filter = input;
        self
    }
    /// <p>The rule Region to filter on.</p>
    pub fn get_region_filter(&self) -> &::std::option::Option<::std::string::String> {
        &self.region_filter
    }
    /// Consumes the builder and constructs a [`ListRuleTypesInput`](crate::operation::list_rule_types::ListRuleTypesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_rule_types::ListRuleTypesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_rule_types::ListRuleTypesInput {
            rule_owner_filter: self.rule_owner_filter,
            region_filter: self.region_filter,
        })
    }
}
