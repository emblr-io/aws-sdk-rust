// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Input information used for a rule execution.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleExecutionInput {
    /// <p>The ID for the rule type, which is made up of the combined values for category, owner, provider, and version. For more information about conditions, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/stage-conditions.html">Stage conditions</a>. For more information about rules, see the <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/rule-reference.html">CodePipeline rule reference</a>.</p>
    pub rule_type_id: ::std::option::Option<crate::types::RuleTypeId>,
    /// <p>Configuration data for a rule execution, such as the resolved values for that run.</p>
    pub configuration: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Configuration data for a rule execution with all variable references replaced with their real values for the execution.</p>
    pub resolved_configuration: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The ARN of the IAM service role that performs the declared rule. This is assumed through the roleArn for the pipeline.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region for the rule, such as us-east-1.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>Details of input artifacts of the rule that correspond to the rule execution.</p>
    pub input_artifacts: ::std::option::Option<::std::vec::Vec<crate::types::ArtifactDetail>>,
}
impl RuleExecutionInput {
    /// <p>The ID for the rule type, which is made up of the combined values for category, owner, provider, and version. For more information about conditions, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/stage-conditions.html">Stage conditions</a>. For more information about rules, see the <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/rule-reference.html">CodePipeline rule reference</a>.</p>
    pub fn rule_type_id(&self) -> ::std::option::Option<&crate::types::RuleTypeId> {
        self.rule_type_id.as_ref()
    }
    /// <p>Configuration data for a rule execution, such as the resolved values for that run.</p>
    pub fn configuration(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.configuration.as_ref()
    }
    /// <p>Configuration data for a rule execution with all variable references replaced with their real values for the execution.</p>
    pub fn resolved_configuration(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.resolved_configuration.as_ref()
    }
    /// <p>The ARN of the IAM service role that performs the declared rule. This is assumed through the roleArn for the pipeline.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The Amazon Web Services Region for the rule, such as us-east-1.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>Details of input artifacts of the rule that correspond to the rule execution.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.input_artifacts.is_none()`.
    pub fn input_artifacts(&self) -> &[crate::types::ArtifactDetail] {
        self.input_artifacts.as_deref().unwrap_or_default()
    }
}
impl RuleExecutionInput {
    /// Creates a new builder-style object to manufacture [`RuleExecutionInput`](crate::types::RuleExecutionInput).
    pub fn builder() -> crate::types::builders::RuleExecutionInputBuilder {
        crate::types::builders::RuleExecutionInputBuilder::default()
    }
}

/// A builder for [`RuleExecutionInput`](crate::types::RuleExecutionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuleExecutionInputBuilder {
    pub(crate) rule_type_id: ::std::option::Option<crate::types::RuleTypeId>,
    pub(crate) configuration: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) resolved_configuration: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) input_artifacts: ::std::option::Option<::std::vec::Vec<crate::types::ArtifactDetail>>,
}
impl RuleExecutionInputBuilder {
    /// <p>The ID for the rule type, which is made up of the combined values for category, owner, provider, and version. For more information about conditions, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/stage-conditions.html">Stage conditions</a>. For more information about rules, see the <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/rule-reference.html">CodePipeline rule reference</a>.</p>
    pub fn rule_type_id(mut self, input: crate::types::RuleTypeId) -> Self {
        self.rule_type_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ID for the rule type, which is made up of the combined values for category, owner, provider, and version. For more information about conditions, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/stage-conditions.html">Stage conditions</a>. For more information about rules, see the <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/rule-reference.html">CodePipeline rule reference</a>.</p>
    pub fn set_rule_type_id(mut self, input: ::std::option::Option<crate::types::RuleTypeId>) -> Self {
        self.rule_type_id = input;
        self
    }
    /// <p>The ID for the rule type, which is made up of the combined values for category, owner, provider, and version. For more information about conditions, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/stage-conditions.html">Stage conditions</a>. For more information about rules, see the <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/rule-reference.html">CodePipeline rule reference</a>.</p>
    pub fn get_rule_type_id(&self) -> &::std::option::Option<crate::types::RuleTypeId> {
        &self.rule_type_id
    }
    /// Adds a key-value pair to `configuration`.
    ///
    /// To override the contents of this collection use [`set_configuration`](Self::set_configuration).
    ///
    /// <p>Configuration data for a rule execution, such as the resolved values for that run.</p>
    pub fn configuration(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.configuration.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.configuration = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Configuration data for a rule execution, such as the resolved values for that run.</p>
    pub fn set_configuration(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.configuration = input;
        self
    }
    /// <p>Configuration data for a rule execution, such as the resolved values for that run.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.configuration
    }
    /// Adds a key-value pair to `resolved_configuration`.
    ///
    /// To override the contents of this collection use [`set_resolved_configuration`](Self::set_resolved_configuration).
    ///
    /// <p>Configuration data for a rule execution with all variable references replaced with their real values for the execution.</p>
    pub fn resolved_configuration(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.resolved_configuration.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.resolved_configuration = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Configuration data for a rule execution with all variable references replaced with their real values for the execution.</p>
    pub fn set_resolved_configuration(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.resolved_configuration = input;
        self
    }
    /// <p>Configuration data for a rule execution with all variable references replaced with their real values for the execution.</p>
    pub fn get_resolved_configuration(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.resolved_configuration
    }
    /// <p>The ARN of the IAM service role that performs the declared rule. This is assumed through the roleArn for the pipeline.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM service role that performs the declared rule. This is assumed through the roleArn for the pipeline.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of the IAM service role that performs the declared rule. This is assumed through the roleArn for the pipeline.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The Amazon Web Services Region for the rule, such as us-east-1.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region for the rule, such as us-east-1.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Amazon Web Services Region for the rule, such as us-east-1.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// Appends an item to `input_artifacts`.
    ///
    /// To override the contents of this collection use [`set_input_artifacts`](Self::set_input_artifacts).
    ///
    /// <p>Details of input artifacts of the rule that correspond to the rule execution.</p>
    pub fn input_artifacts(mut self, input: crate::types::ArtifactDetail) -> Self {
        let mut v = self.input_artifacts.unwrap_or_default();
        v.push(input);
        self.input_artifacts = ::std::option::Option::Some(v);
        self
    }
    /// <p>Details of input artifacts of the rule that correspond to the rule execution.</p>
    pub fn set_input_artifacts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ArtifactDetail>>) -> Self {
        self.input_artifacts = input;
        self
    }
    /// <p>Details of input artifacts of the rule that correspond to the rule execution.</p>
    pub fn get_input_artifacts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ArtifactDetail>> {
        &self.input_artifacts
    }
    /// Consumes the builder and constructs a [`RuleExecutionInput`](crate::types::RuleExecutionInput).
    pub fn build(self) -> crate::types::RuleExecutionInput {
        crate::types::RuleExecutionInput {
            rule_type_id: self.rule_type_id,
            configuration: self.configuration,
            resolved_configuration: self.resolved_configuration,
            role_arn: self.role_arn,
            region: self.region,
            input_artifacts: self.input_artifacts,
        }
    }
}
