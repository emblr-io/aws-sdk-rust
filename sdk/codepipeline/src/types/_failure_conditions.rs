// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration that specifies the result, such as rollback, to occur upon stage failure. For more information about conditions, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/stage-conditions.html">Stage conditions</a> and <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts-how-it-works-conditions.html">How do stage conditions work?</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FailureConditions {
    /// <p>The specified result for when the failure conditions are met, such as rolling back the stage.</p>
    pub result: ::std::option::Option<crate::types::Result>,
    /// <p>The retry configuration specifies automatic retry for a failed stage, along with the configured retry mode.</p>
    pub retry_configuration: ::std::option::Option<crate::types::RetryConfiguration>,
    /// <p>The conditions that are configured as failure conditions. For more information about conditions, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/stage-conditions.html">Stage conditions</a> and <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts-how-it-works-conditions.html">How do stage conditions work?</a>.</p>
    pub conditions: ::std::option::Option<::std::vec::Vec<crate::types::Condition>>,
}
impl FailureConditions {
    /// <p>The specified result for when the failure conditions are met, such as rolling back the stage.</p>
    pub fn result(&self) -> ::std::option::Option<&crate::types::Result> {
        self.result.as_ref()
    }
    /// <p>The retry configuration specifies automatic retry for a failed stage, along with the configured retry mode.</p>
    pub fn retry_configuration(&self) -> ::std::option::Option<&crate::types::RetryConfiguration> {
        self.retry_configuration.as_ref()
    }
    /// <p>The conditions that are configured as failure conditions. For more information about conditions, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/stage-conditions.html">Stage conditions</a> and <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts-how-it-works-conditions.html">How do stage conditions work?</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.conditions.is_none()`.
    pub fn conditions(&self) -> &[crate::types::Condition] {
        self.conditions.as_deref().unwrap_or_default()
    }
}
impl FailureConditions {
    /// Creates a new builder-style object to manufacture [`FailureConditions`](crate::types::FailureConditions).
    pub fn builder() -> crate::types::builders::FailureConditionsBuilder {
        crate::types::builders::FailureConditionsBuilder::default()
    }
}

/// A builder for [`FailureConditions`](crate::types::FailureConditions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FailureConditionsBuilder {
    pub(crate) result: ::std::option::Option<crate::types::Result>,
    pub(crate) retry_configuration: ::std::option::Option<crate::types::RetryConfiguration>,
    pub(crate) conditions: ::std::option::Option<::std::vec::Vec<crate::types::Condition>>,
}
impl FailureConditionsBuilder {
    /// <p>The specified result for when the failure conditions are met, such as rolling back the stage.</p>
    pub fn result(mut self, input: crate::types::Result) -> Self {
        self.result = ::std::option::Option::Some(input);
        self
    }
    /// <p>The specified result for when the failure conditions are met, such as rolling back the stage.</p>
    pub fn set_result(mut self, input: ::std::option::Option<crate::types::Result>) -> Self {
        self.result = input;
        self
    }
    /// <p>The specified result for when the failure conditions are met, such as rolling back the stage.</p>
    pub fn get_result(&self) -> &::std::option::Option<crate::types::Result> {
        &self.result
    }
    /// <p>The retry configuration specifies automatic retry for a failed stage, along with the configured retry mode.</p>
    pub fn retry_configuration(mut self, input: crate::types::RetryConfiguration) -> Self {
        self.retry_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The retry configuration specifies automatic retry for a failed stage, along with the configured retry mode.</p>
    pub fn set_retry_configuration(mut self, input: ::std::option::Option<crate::types::RetryConfiguration>) -> Self {
        self.retry_configuration = input;
        self
    }
    /// <p>The retry configuration specifies automatic retry for a failed stage, along with the configured retry mode.</p>
    pub fn get_retry_configuration(&self) -> &::std::option::Option<crate::types::RetryConfiguration> {
        &self.retry_configuration
    }
    /// Appends an item to `conditions`.
    ///
    /// To override the contents of this collection use [`set_conditions`](Self::set_conditions).
    ///
    /// <p>The conditions that are configured as failure conditions. For more information about conditions, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/stage-conditions.html">Stage conditions</a> and <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts-how-it-works-conditions.html">How do stage conditions work?</a>.</p>
    pub fn conditions(mut self, input: crate::types::Condition) -> Self {
        let mut v = self.conditions.unwrap_or_default();
        v.push(input);
        self.conditions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The conditions that are configured as failure conditions. For more information about conditions, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/stage-conditions.html">Stage conditions</a> and <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts-how-it-works-conditions.html">How do stage conditions work?</a>.</p>
    pub fn set_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Condition>>) -> Self {
        self.conditions = input;
        self
    }
    /// <p>The conditions that are configured as failure conditions. For more information about conditions, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/stage-conditions.html">Stage conditions</a> and <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts-how-it-works-conditions.html">How do stage conditions work?</a>.</p>
    pub fn get_conditions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Condition>> {
        &self.conditions
    }
    /// Consumes the builder and constructs a [`FailureConditions`](crate::types::FailureConditions).
    pub fn build(self) -> crate::types::FailureConditions {
        crate::types::FailureConditions {
            result: self.result,
            retry_configuration: self.retry_configuration,
            conditions: self.conditions,
        }
    }
}
