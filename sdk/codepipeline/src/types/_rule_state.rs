// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns information about the state of a rule.</p><note>
/// <p>Values returned in the <code>revisionId</code> field indicate the rule revision information, such as the commit ID, for the current state.</p>
/// </note>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleState {
    /// <p>The name of the rule.</p>
    pub rule_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the current revision of the artifact successfully worked on by the job.</p>
    pub current_revision: ::std::option::Option<crate::types::RuleRevision>,
    /// <p>Represents information about the latest run of an rule.</p>
    pub latest_execution: ::std::option::Option<crate::types::RuleExecution>,
    /// <p>A URL link for more information about the state of the action, such as a details page.</p>
    pub entity_url: ::std::option::Option<::std::string::String>,
    /// <p>A URL link for more information about the revision, such as a commit details page.</p>
    pub revision_url: ::std::option::Option<::std::string::String>,
}
impl RuleState {
    /// <p>The name of the rule.</p>
    pub fn rule_name(&self) -> ::std::option::Option<&str> {
        self.rule_name.as_deref()
    }
    /// <p>The ID of the current revision of the artifact successfully worked on by the job.</p>
    pub fn current_revision(&self) -> ::std::option::Option<&crate::types::RuleRevision> {
        self.current_revision.as_ref()
    }
    /// <p>Represents information about the latest run of an rule.</p>
    pub fn latest_execution(&self) -> ::std::option::Option<&crate::types::RuleExecution> {
        self.latest_execution.as_ref()
    }
    /// <p>A URL link for more information about the state of the action, such as a details page.</p>
    pub fn entity_url(&self) -> ::std::option::Option<&str> {
        self.entity_url.as_deref()
    }
    /// <p>A URL link for more information about the revision, such as a commit details page.</p>
    pub fn revision_url(&self) -> ::std::option::Option<&str> {
        self.revision_url.as_deref()
    }
}
impl RuleState {
    /// Creates a new builder-style object to manufacture [`RuleState`](crate::types::RuleState).
    pub fn builder() -> crate::types::builders::RuleStateBuilder {
        crate::types::builders::RuleStateBuilder::default()
    }
}

/// A builder for [`RuleState`](crate::types::RuleState).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuleStateBuilder {
    pub(crate) rule_name: ::std::option::Option<::std::string::String>,
    pub(crate) current_revision: ::std::option::Option<crate::types::RuleRevision>,
    pub(crate) latest_execution: ::std::option::Option<crate::types::RuleExecution>,
    pub(crate) entity_url: ::std::option::Option<::std::string::String>,
    pub(crate) revision_url: ::std::option::Option<::std::string::String>,
}
impl RuleStateBuilder {
    /// <p>The name of the rule.</p>
    pub fn rule_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the rule.</p>
    pub fn set_rule_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_name = input;
        self
    }
    /// <p>The name of the rule.</p>
    pub fn get_rule_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_name
    }
    /// <p>The ID of the current revision of the artifact successfully worked on by the job.</p>
    pub fn current_revision(mut self, input: crate::types::RuleRevision) -> Self {
        self.current_revision = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ID of the current revision of the artifact successfully worked on by the job.</p>
    pub fn set_current_revision(mut self, input: ::std::option::Option<crate::types::RuleRevision>) -> Self {
        self.current_revision = input;
        self
    }
    /// <p>The ID of the current revision of the artifact successfully worked on by the job.</p>
    pub fn get_current_revision(&self) -> &::std::option::Option<crate::types::RuleRevision> {
        &self.current_revision
    }
    /// <p>Represents information about the latest run of an rule.</p>
    pub fn latest_execution(mut self, input: crate::types::RuleExecution) -> Self {
        self.latest_execution = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents information about the latest run of an rule.</p>
    pub fn set_latest_execution(mut self, input: ::std::option::Option<crate::types::RuleExecution>) -> Self {
        self.latest_execution = input;
        self
    }
    /// <p>Represents information about the latest run of an rule.</p>
    pub fn get_latest_execution(&self) -> &::std::option::Option<crate::types::RuleExecution> {
        &self.latest_execution
    }
    /// <p>A URL link for more information about the state of the action, such as a details page.</p>
    pub fn entity_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A URL link for more information about the state of the action, such as a details page.</p>
    pub fn set_entity_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_url = input;
        self
    }
    /// <p>A URL link for more information about the state of the action, such as a details page.</p>
    pub fn get_entity_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_url
    }
    /// <p>A URL link for more information about the revision, such as a commit details page.</p>
    pub fn revision_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.revision_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A URL link for more information about the revision, such as a commit details page.</p>
    pub fn set_revision_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.revision_url = input;
        self
    }
    /// <p>A URL link for more information about the revision, such as a commit details page.</p>
    pub fn get_revision_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.revision_url
    }
    /// Consumes the builder and constructs a [`RuleState`](crate::types::RuleState).
    pub fn build(self) -> crate::types::RuleState {
        crate::types::RuleState {
            rule_name: self.rule_name,
            current_revision: self.current_revision,
            latest_execution: self.latest_execution,
            entity_url: self.entity_url,
            revision_url: self.revision_url,
        }
    }
}
