// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents information about the state of the stage.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StageState {
    /// <p>The name of the stage.</p>
    pub stage_name: ::std::option::Option<::std::string::String>,
    /// <p>Represents information about the run of a stage.</p>
    pub inbound_execution: ::std::option::Option<crate::types::StageExecution>,
    /// <p>The inbound executions for a stage.</p>
    pub inbound_executions: ::std::option::Option<::std::vec::Vec<crate::types::StageExecution>>,
    /// <p>The state of the inbound transition, which is either enabled or disabled.</p>
    pub inbound_transition_state: ::std::option::Option<crate::types::TransitionState>,
    /// <p>The state of the stage.</p>
    pub action_states: ::std::option::Option<::std::vec::Vec<crate::types::ActionState>>,
    /// <p>Information about the latest execution in the stage, including its ID and status.</p>
    pub latest_execution: ::std::option::Option<crate::types::StageExecution>,
    /// <p>The state of the entry conditions for a stage.</p>
    pub before_entry_condition_state: ::std::option::Option<crate::types::StageConditionState>,
    /// <p>The state of the success conditions for a stage.</p>
    pub on_success_condition_state: ::std::option::Option<crate::types::StageConditionState>,
    /// <p>The state of the failure conditions for a stage.</p>
    pub on_failure_condition_state: ::std::option::Option<crate::types::StageConditionState>,
    /// <p>he details of a specific automatic retry on stage failure, including the attempt number and trigger.</p>
    pub retry_stage_metadata: ::std::option::Option<crate::types::RetryStageMetadata>,
}
impl StageState {
    /// <p>The name of the stage.</p>
    pub fn stage_name(&self) -> ::std::option::Option<&str> {
        self.stage_name.as_deref()
    }
    /// <p>Represents information about the run of a stage.</p>
    pub fn inbound_execution(&self) -> ::std::option::Option<&crate::types::StageExecution> {
        self.inbound_execution.as_ref()
    }
    /// <p>The inbound executions for a stage.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.inbound_executions.is_none()`.
    pub fn inbound_executions(&self) -> &[crate::types::StageExecution] {
        self.inbound_executions.as_deref().unwrap_or_default()
    }
    /// <p>The state of the inbound transition, which is either enabled or disabled.</p>
    pub fn inbound_transition_state(&self) -> ::std::option::Option<&crate::types::TransitionState> {
        self.inbound_transition_state.as_ref()
    }
    /// <p>The state of the stage.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.action_states.is_none()`.
    pub fn action_states(&self) -> &[crate::types::ActionState] {
        self.action_states.as_deref().unwrap_or_default()
    }
    /// <p>Information about the latest execution in the stage, including its ID and status.</p>
    pub fn latest_execution(&self) -> ::std::option::Option<&crate::types::StageExecution> {
        self.latest_execution.as_ref()
    }
    /// <p>The state of the entry conditions for a stage.</p>
    pub fn before_entry_condition_state(&self) -> ::std::option::Option<&crate::types::StageConditionState> {
        self.before_entry_condition_state.as_ref()
    }
    /// <p>The state of the success conditions for a stage.</p>
    pub fn on_success_condition_state(&self) -> ::std::option::Option<&crate::types::StageConditionState> {
        self.on_success_condition_state.as_ref()
    }
    /// <p>The state of the failure conditions for a stage.</p>
    pub fn on_failure_condition_state(&self) -> ::std::option::Option<&crate::types::StageConditionState> {
        self.on_failure_condition_state.as_ref()
    }
    /// <p>he details of a specific automatic retry on stage failure, including the attempt number and trigger.</p>
    pub fn retry_stage_metadata(&self) -> ::std::option::Option<&crate::types::RetryStageMetadata> {
        self.retry_stage_metadata.as_ref()
    }
}
impl StageState {
    /// Creates a new builder-style object to manufacture [`StageState`](crate::types::StageState).
    pub fn builder() -> crate::types::builders::StageStateBuilder {
        crate::types::builders::StageStateBuilder::default()
    }
}

/// A builder for [`StageState`](crate::types::StageState).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StageStateBuilder {
    pub(crate) stage_name: ::std::option::Option<::std::string::String>,
    pub(crate) inbound_execution: ::std::option::Option<crate::types::StageExecution>,
    pub(crate) inbound_executions: ::std::option::Option<::std::vec::Vec<crate::types::StageExecution>>,
    pub(crate) inbound_transition_state: ::std::option::Option<crate::types::TransitionState>,
    pub(crate) action_states: ::std::option::Option<::std::vec::Vec<crate::types::ActionState>>,
    pub(crate) latest_execution: ::std::option::Option<crate::types::StageExecution>,
    pub(crate) before_entry_condition_state: ::std::option::Option<crate::types::StageConditionState>,
    pub(crate) on_success_condition_state: ::std::option::Option<crate::types::StageConditionState>,
    pub(crate) on_failure_condition_state: ::std::option::Option<crate::types::StageConditionState>,
    pub(crate) retry_stage_metadata: ::std::option::Option<crate::types::RetryStageMetadata>,
}
impl StageStateBuilder {
    /// <p>The name of the stage.</p>
    pub fn stage_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stage_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the stage.</p>
    pub fn set_stage_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stage_name = input;
        self
    }
    /// <p>The name of the stage.</p>
    pub fn get_stage_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.stage_name
    }
    /// <p>Represents information about the run of a stage.</p>
    pub fn inbound_execution(mut self, input: crate::types::StageExecution) -> Self {
        self.inbound_execution = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents information about the run of a stage.</p>
    pub fn set_inbound_execution(mut self, input: ::std::option::Option<crate::types::StageExecution>) -> Self {
        self.inbound_execution = input;
        self
    }
    /// <p>Represents information about the run of a stage.</p>
    pub fn get_inbound_execution(&self) -> &::std::option::Option<crate::types::StageExecution> {
        &self.inbound_execution
    }
    /// Appends an item to `inbound_executions`.
    ///
    /// To override the contents of this collection use [`set_inbound_executions`](Self::set_inbound_executions).
    ///
    /// <p>The inbound executions for a stage.</p>
    pub fn inbound_executions(mut self, input: crate::types::StageExecution) -> Self {
        let mut v = self.inbound_executions.unwrap_or_default();
        v.push(input);
        self.inbound_executions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The inbound executions for a stage.</p>
    pub fn set_inbound_executions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StageExecution>>) -> Self {
        self.inbound_executions = input;
        self
    }
    /// <p>The inbound executions for a stage.</p>
    pub fn get_inbound_executions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StageExecution>> {
        &self.inbound_executions
    }
    /// <p>The state of the inbound transition, which is either enabled or disabled.</p>
    pub fn inbound_transition_state(mut self, input: crate::types::TransitionState) -> Self {
        self.inbound_transition_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the inbound transition, which is either enabled or disabled.</p>
    pub fn set_inbound_transition_state(mut self, input: ::std::option::Option<crate::types::TransitionState>) -> Self {
        self.inbound_transition_state = input;
        self
    }
    /// <p>The state of the inbound transition, which is either enabled or disabled.</p>
    pub fn get_inbound_transition_state(&self) -> &::std::option::Option<crate::types::TransitionState> {
        &self.inbound_transition_state
    }
    /// Appends an item to `action_states`.
    ///
    /// To override the contents of this collection use [`set_action_states`](Self::set_action_states).
    ///
    /// <p>The state of the stage.</p>
    pub fn action_states(mut self, input: crate::types::ActionState) -> Self {
        let mut v = self.action_states.unwrap_or_default();
        v.push(input);
        self.action_states = ::std::option::Option::Some(v);
        self
    }
    /// <p>The state of the stage.</p>
    pub fn set_action_states(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ActionState>>) -> Self {
        self.action_states = input;
        self
    }
    /// <p>The state of the stage.</p>
    pub fn get_action_states(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ActionState>> {
        &self.action_states
    }
    /// <p>Information about the latest execution in the stage, including its ID and status.</p>
    pub fn latest_execution(mut self, input: crate::types::StageExecution) -> Self {
        self.latest_execution = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the latest execution in the stage, including its ID and status.</p>
    pub fn set_latest_execution(mut self, input: ::std::option::Option<crate::types::StageExecution>) -> Self {
        self.latest_execution = input;
        self
    }
    /// <p>Information about the latest execution in the stage, including its ID and status.</p>
    pub fn get_latest_execution(&self) -> &::std::option::Option<crate::types::StageExecution> {
        &self.latest_execution
    }
    /// <p>The state of the entry conditions for a stage.</p>
    pub fn before_entry_condition_state(mut self, input: crate::types::StageConditionState) -> Self {
        self.before_entry_condition_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the entry conditions for a stage.</p>
    pub fn set_before_entry_condition_state(mut self, input: ::std::option::Option<crate::types::StageConditionState>) -> Self {
        self.before_entry_condition_state = input;
        self
    }
    /// <p>The state of the entry conditions for a stage.</p>
    pub fn get_before_entry_condition_state(&self) -> &::std::option::Option<crate::types::StageConditionState> {
        &self.before_entry_condition_state
    }
    /// <p>The state of the success conditions for a stage.</p>
    pub fn on_success_condition_state(mut self, input: crate::types::StageConditionState) -> Self {
        self.on_success_condition_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the success conditions for a stage.</p>
    pub fn set_on_success_condition_state(mut self, input: ::std::option::Option<crate::types::StageConditionState>) -> Self {
        self.on_success_condition_state = input;
        self
    }
    /// <p>The state of the success conditions for a stage.</p>
    pub fn get_on_success_condition_state(&self) -> &::std::option::Option<crate::types::StageConditionState> {
        &self.on_success_condition_state
    }
    /// <p>The state of the failure conditions for a stage.</p>
    pub fn on_failure_condition_state(mut self, input: crate::types::StageConditionState) -> Self {
        self.on_failure_condition_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the failure conditions for a stage.</p>
    pub fn set_on_failure_condition_state(mut self, input: ::std::option::Option<crate::types::StageConditionState>) -> Self {
        self.on_failure_condition_state = input;
        self
    }
    /// <p>The state of the failure conditions for a stage.</p>
    pub fn get_on_failure_condition_state(&self) -> &::std::option::Option<crate::types::StageConditionState> {
        &self.on_failure_condition_state
    }
    /// <p>he details of a specific automatic retry on stage failure, including the attempt number and trigger.</p>
    pub fn retry_stage_metadata(mut self, input: crate::types::RetryStageMetadata) -> Self {
        self.retry_stage_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>he details of a specific automatic retry on stage failure, including the attempt number and trigger.</p>
    pub fn set_retry_stage_metadata(mut self, input: ::std::option::Option<crate::types::RetryStageMetadata>) -> Self {
        self.retry_stage_metadata = input;
        self
    }
    /// <p>he details of a specific automatic retry on stage failure, including the attempt number and trigger.</p>
    pub fn get_retry_stage_metadata(&self) -> &::std::option::Option<crate::types::RetryStageMetadata> {
        &self.retry_stage_metadata
    }
    /// Consumes the builder and constructs a [`StageState`](crate::types::StageState).
    pub fn build(self) -> crate::types::StageState {
        crate::types::StageState {
            stage_name: self.stage_name,
            inbound_execution: self.inbound_execution,
            inbound_executions: self.inbound_executions,
            inbound_transition_state: self.inbound_transition_state,
            action_states: self.action_states,
            latest_execution: self.latest_execution,
            before_entry_condition_state: self.before_entry_condition_state,
            on_success_condition_state: self.on_success_condition_state,
            on_failure_condition_state: self.on_failure_condition_state,
            retry_stage_metadata: self.retry_stage_metadata,
        }
    }
}
