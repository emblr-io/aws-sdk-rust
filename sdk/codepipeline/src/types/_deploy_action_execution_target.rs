// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The target for the deploy action.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeployActionExecutionTarget {
    /// <p>The ID of the target for the deploy action.</p>
    pub target_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of target for the deploy action.</p>
    pub target_type: ::std::option::Option<::std::string::String>,
    /// <p>The status of the deploy action.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>The start time for the deploy action.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The end time for the deploy action.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The lifecycle events for the deploy action.</p>
    pub events: ::std::option::Option<::std::vec::Vec<crate::types::DeployTargetEvent>>,
}
impl DeployActionExecutionTarget {
    /// <p>The ID of the target for the deploy action.</p>
    pub fn target_id(&self) -> ::std::option::Option<&str> {
        self.target_id.as_deref()
    }
    /// <p>The type of target for the deploy action.</p>
    pub fn target_type(&self) -> ::std::option::Option<&str> {
        self.target_type.as_deref()
    }
    /// <p>The status of the deploy action.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The start time for the deploy action.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The end time for the deploy action.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The lifecycle events for the deploy action.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.events.is_none()`.
    pub fn events(&self) -> &[crate::types::DeployTargetEvent] {
        self.events.as_deref().unwrap_or_default()
    }
}
impl DeployActionExecutionTarget {
    /// Creates a new builder-style object to manufacture [`DeployActionExecutionTarget`](crate::types::DeployActionExecutionTarget).
    pub fn builder() -> crate::types::builders::DeployActionExecutionTargetBuilder {
        crate::types::builders::DeployActionExecutionTargetBuilder::default()
    }
}

/// A builder for [`DeployActionExecutionTarget`](crate::types::DeployActionExecutionTarget).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeployActionExecutionTargetBuilder {
    pub(crate) target_id: ::std::option::Option<::std::string::String>,
    pub(crate) target_type: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) events: ::std::option::Option<::std::vec::Vec<crate::types::DeployTargetEvent>>,
}
impl DeployActionExecutionTargetBuilder {
    /// <p>The ID of the target for the deploy action.</p>
    pub fn target_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the target for the deploy action.</p>
    pub fn set_target_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_id = input;
        self
    }
    /// <p>The ID of the target for the deploy action.</p>
    pub fn get_target_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_id
    }
    /// <p>The type of target for the deploy action.</p>
    pub fn target_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of target for the deploy action.</p>
    pub fn set_target_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_type = input;
        self
    }
    /// <p>The type of target for the deploy action.</p>
    pub fn get_target_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_type
    }
    /// <p>The status of the deploy action.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the deploy action.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the deploy action.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The start time for the deploy action.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start time for the deploy action.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The start time for the deploy action.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The end time for the deploy action.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end time for the deploy action.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The end time for the deploy action.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// Appends an item to `events`.
    ///
    /// To override the contents of this collection use [`set_events`](Self::set_events).
    ///
    /// <p>The lifecycle events for the deploy action.</p>
    pub fn events(mut self, input: crate::types::DeployTargetEvent) -> Self {
        let mut v = self.events.unwrap_or_default();
        v.push(input);
        self.events = ::std::option::Option::Some(v);
        self
    }
    /// <p>The lifecycle events for the deploy action.</p>
    pub fn set_events(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DeployTargetEvent>>) -> Self {
        self.events = input;
        self
    }
    /// <p>The lifecycle events for the deploy action.</p>
    pub fn get_events(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DeployTargetEvent>> {
        &self.events
    }
    /// Consumes the builder and constructs a [`DeployActionExecutionTarget`](crate::types::DeployActionExecutionTarget).
    pub fn build(self) -> crate::types::DeployActionExecutionTarget {
        crate::types::DeployActionExecutionTarget {
            target_id: self.target_id,
            target_type: self.target_type,
            status: self.status,
            start_time: self.start_time,
            end_time: self.end_time,
            events: self.events,
        }
    }
}
