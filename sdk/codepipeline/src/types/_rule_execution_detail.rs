// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the runs for a rule and the results produced on an artifact as it passes through stages in the pipeline.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleExecutionDetail {
    /// <p>The ID of the pipeline execution in the stage where the rule was run. Use the <code>GetPipelineState</code> action to retrieve the current pipelineExecutionId of the stage.</p>
    pub pipeline_execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the run for the rule.</p>
    pub rule_execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The version number of the pipeline with the stage where the rule was run.</p>
    pub pipeline_version: ::std::option::Option<i32>,
    /// <p>The name of the stage where the rule was run.</p>
    pub stage_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the rule that was run in the stage.</p>
    pub rule_name: ::std::option::Option<::std::string::String>,
    /// <p>The start time of the rule execution.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time of the last change to the rule execution, in timestamp format.</p>
    pub last_update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The ARN of the user who changed the rule execution details.</p>
    pub updated_by: ::std::option::Option<::std::string::String>,
    /// <p>The status of the rule execution. Status categories are <code>InProgress</code>, <code>Succeeded</code>, and <code>Failed</code>.</p>
    pub status: ::std::option::Option<crate::types::RuleExecutionStatus>,
    /// <p>Input details for the rule execution, such as role ARN, Region, and input artifacts.</p>
    pub input: ::std::option::Option<crate::types::RuleExecutionInput>,
    /// <p>Output details for the rule execution, such as the rule execution result.</p>
    pub output: ::std::option::Option<crate::types::RuleExecutionOutput>,
}
impl RuleExecutionDetail {
    /// <p>The ID of the pipeline execution in the stage where the rule was run. Use the <code>GetPipelineState</code> action to retrieve the current pipelineExecutionId of the stage.</p>
    pub fn pipeline_execution_id(&self) -> ::std::option::Option<&str> {
        self.pipeline_execution_id.as_deref()
    }
    /// <p>The ID of the run for the rule.</p>
    pub fn rule_execution_id(&self) -> ::std::option::Option<&str> {
        self.rule_execution_id.as_deref()
    }
    /// <p>The version number of the pipeline with the stage where the rule was run.</p>
    pub fn pipeline_version(&self) -> ::std::option::Option<i32> {
        self.pipeline_version
    }
    /// <p>The name of the stage where the rule was run.</p>
    pub fn stage_name(&self) -> ::std::option::Option<&str> {
        self.stage_name.as_deref()
    }
    /// <p>The name of the rule that was run in the stage.</p>
    pub fn rule_name(&self) -> ::std::option::Option<&str> {
        self.rule_name.as_deref()
    }
    /// <p>The start time of the rule execution.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The date and time of the last change to the rule execution, in timestamp format.</p>
    pub fn last_update_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_update_time.as_ref()
    }
    /// <p>The ARN of the user who changed the rule execution details.</p>
    pub fn updated_by(&self) -> ::std::option::Option<&str> {
        self.updated_by.as_deref()
    }
    /// <p>The status of the rule execution. Status categories are <code>InProgress</code>, <code>Succeeded</code>, and <code>Failed</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::RuleExecutionStatus> {
        self.status.as_ref()
    }
    /// <p>Input details for the rule execution, such as role ARN, Region, and input artifacts.</p>
    pub fn input(&self) -> ::std::option::Option<&crate::types::RuleExecutionInput> {
        self.input.as_ref()
    }
    /// <p>Output details for the rule execution, such as the rule execution result.</p>
    pub fn output(&self) -> ::std::option::Option<&crate::types::RuleExecutionOutput> {
        self.output.as_ref()
    }
}
impl RuleExecutionDetail {
    /// Creates a new builder-style object to manufacture [`RuleExecutionDetail`](crate::types::RuleExecutionDetail).
    pub fn builder() -> crate::types::builders::RuleExecutionDetailBuilder {
        crate::types::builders::RuleExecutionDetailBuilder::default()
    }
}

/// A builder for [`RuleExecutionDetail`](crate::types::RuleExecutionDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuleExecutionDetailBuilder {
    pub(crate) pipeline_execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) rule_execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) pipeline_version: ::std::option::Option<i32>,
    pub(crate) stage_name: ::std::option::Option<::std::string::String>,
    pub(crate) rule_name: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_by: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::RuleExecutionStatus>,
    pub(crate) input: ::std::option::Option<crate::types::RuleExecutionInput>,
    pub(crate) output: ::std::option::Option<crate::types::RuleExecutionOutput>,
}
impl RuleExecutionDetailBuilder {
    /// <p>The ID of the pipeline execution in the stage where the rule was run. Use the <code>GetPipelineState</code> action to retrieve the current pipelineExecutionId of the stage.</p>
    pub fn pipeline_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pipeline_execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the pipeline execution in the stage where the rule was run. Use the <code>GetPipelineState</code> action to retrieve the current pipelineExecutionId of the stage.</p>
    pub fn set_pipeline_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pipeline_execution_id = input;
        self
    }
    /// <p>The ID of the pipeline execution in the stage where the rule was run. Use the <code>GetPipelineState</code> action to retrieve the current pipelineExecutionId of the stage.</p>
    pub fn get_pipeline_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.pipeline_execution_id
    }
    /// <p>The ID of the run for the rule.</p>
    pub fn rule_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the run for the rule.</p>
    pub fn set_rule_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_execution_id = input;
        self
    }
    /// <p>The ID of the run for the rule.</p>
    pub fn get_rule_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_execution_id
    }
    /// <p>The version number of the pipeline with the stage where the rule was run.</p>
    pub fn pipeline_version(mut self, input: i32) -> Self {
        self.pipeline_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version number of the pipeline with the stage where the rule was run.</p>
    pub fn set_pipeline_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pipeline_version = input;
        self
    }
    /// <p>The version number of the pipeline with the stage where the rule was run.</p>
    pub fn get_pipeline_version(&self) -> &::std::option::Option<i32> {
        &self.pipeline_version
    }
    /// <p>The name of the stage where the rule was run.</p>
    pub fn stage_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stage_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the stage where the rule was run.</p>
    pub fn set_stage_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stage_name = input;
        self
    }
    /// <p>The name of the stage where the rule was run.</p>
    pub fn get_stage_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.stage_name
    }
    /// <p>The name of the rule that was run in the stage.</p>
    pub fn rule_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the rule that was run in the stage.</p>
    pub fn set_rule_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_name = input;
        self
    }
    /// <p>The name of the rule that was run in the stage.</p>
    pub fn get_rule_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_name
    }
    /// <p>The start time of the rule execution.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start time of the rule execution.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The start time of the rule execution.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The date and time of the last change to the rule execution, in timestamp format.</p>
    pub fn last_update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time of the last change to the rule execution, in timestamp format.</p>
    pub fn set_last_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_update_time = input;
        self
    }
    /// <p>The date and time of the last change to the rule execution, in timestamp format.</p>
    pub fn get_last_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_update_time
    }
    /// <p>The ARN of the user who changed the rule execution details.</p>
    pub fn updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the user who changed the rule execution details.</p>
    pub fn set_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_by = input;
        self
    }
    /// <p>The ARN of the user who changed the rule execution details.</p>
    pub fn get_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_by
    }
    /// <p>The status of the rule execution. Status categories are <code>InProgress</code>, <code>Succeeded</code>, and <code>Failed</code>.</p>
    pub fn status(mut self, input: crate::types::RuleExecutionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the rule execution. Status categories are <code>InProgress</code>, <code>Succeeded</code>, and <code>Failed</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::RuleExecutionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the rule execution. Status categories are <code>InProgress</code>, <code>Succeeded</code>, and <code>Failed</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::RuleExecutionStatus> {
        &self.status
    }
    /// <p>Input details for the rule execution, such as role ARN, Region, and input artifacts.</p>
    pub fn input(mut self, input: crate::types::RuleExecutionInput) -> Self {
        self.input = ::std::option::Option::Some(input);
        self
    }
    /// <p>Input details for the rule execution, such as role ARN, Region, and input artifacts.</p>
    pub fn set_input(mut self, input: ::std::option::Option<crate::types::RuleExecutionInput>) -> Self {
        self.input = input;
        self
    }
    /// <p>Input details for the rule execution, such as role ARN, Region, and input artifacts.</p>
    pub fn get_input(&self) -> &::std::option::Option<crate::types::RuleExecutionInput> {
        &self.input
    }
    /// <p>Output details for the rule execution, such as the rule execution result.</p>
    pub fn output(mut self, input: crate::types::RuleExecutionOutput) -> Self {
        self.output = ::std::option::Option::Some(input);
        self
    }
    /// <p>Output details for the rule execution, such as the rule execution result.</p>
    pub fn set_output(mut self, input: ::std::option::Option<crate::types::RuleExecutionOutput>) -> Self {
        self.output = input;
        self
    }
    /// <p>Output details for the rule execution, such as the rule execution result.</p>
    pub fn get_output(&self) -> &::std::option::Option<crate::types::RuleExecutionOutput> {
        &self.output
    }
    /// Consumes the builder and constructs a [`RuleExecutionDetail`](crate::types::RuleExecutionDetail).
    pub fn build(self) -> crate::types::RuleExecutionDetail {
        crate::types::RuleExecutionDetail {
            pipeline_execution_id: self.pipeline_execution_id,
            rule_execution_id: self.rule_execution_id,
            pipeline_version: self.pipeline_version,
            stage_name: self.stage_name,
            rule_name: self.rule_name,
            start_time: self.start_time,
            last_update_time: self.last_update_time,
            updated_by: self.updated_by,
            status: self.status,
            input: self.input,
            output: self.output,
        }
    }
}
