// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The retry configuration specifies automatic retry for a failed stage, along with the configured retry mode.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RetryConfiguration {
    /// <p>The method that you want to configure for automatic stage retry on stage failure. You can specify to retry only failed action in the stage or all actions in the stage.</p>
    pub retry_mode: ::std::option::Option<crate::types::StageRetryMode>,
}
impl RetryConfiguration {
    /// <p>The method that you want to configure for automatic stage retry on stage failure. You can specify to retry only failed action in the stage or all actions in the stage.</p>
    pub fn retry_mode(&self) -> ::std::option::Option<&crate::types::StageRetryMode> {
        self.retry_mode.as_ref()
    }
}
impl RetryConfiguration {
    /// Creates a new builder-style object to manufacture [`RetryConfiguration`](crate::types::RetryConfiguration).
    pub fn builder() -> crate::types::builders::RetryConfigurationBuilder {
        crate::types::builders::RetryConfigurationBuilder::default()
    }
}

/// A builder for [`RetryConfiguration`](crate::types::RetryConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RetryConfigurationBuilder {
    pub(crate) retry_mode: ::std::option::Option<crate::types::StageRetryMode>,
}
impl RetryConfigurationBuilder {
    /// <p>The method that you want to configure for automatic stage retry on stage failure. You can specify to retry only failed action in the stage or all actions in the stage.</p>
    pub fn retry_mode(mut self, input: crate::types::StageRetryMode) -> Self {
        self.retry_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The method that you want to configure for automatic stage retry on stage failure. You can specify to retry only failed action in the stage or all actions in the stage.</p>
    pub fn set_retry_mode(mut self, input: ::std::option::Option<crate::types::StageRetryMode>) -> Self {
        self.retry_mode = input;
        self
    }
    /// <p>The method that you want to configure for automatic stage retry on stage failure. You can specify to retry only failed action in the stage or all actions in the stage.</p>
    pub fn get_retry_mode(&self) -> &::std::option::Option<crate::types::StageRetryMode> {
        &self.retry_mode
    }
    /// Consumes the builder and constructs a [`RetryConfiguration`](crate::types::RetryConfiguration).
    pub fn build(self) -> crate::types::RetryConfiguration {
        crate::types::RetryConfiguration { retry_mode: self.retry_mode }
    }
}
