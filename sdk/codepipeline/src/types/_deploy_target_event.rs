// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A lifecycle event for the deploy action.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeployTargetEvent {
    /// <p>The name of the event for the deploy action.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The status of the event for the deploy action.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>The start time for the event for the deploy action.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The end time for the event for the deploy action.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The context for the event for the deploy action.</p>
    pub context: ::std::option::Option<crate::types::DeployTargetEventContext>,
}
impl DeployTargetEvent {
    /// <p>The name of the event for the deploy action.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The status of the event for the deploy action.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The start time for the event for the deploy action.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The end time for the event for the deploy action.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The context for the event for the deploy action.</p>
    pub fn context(&self) -> ::std::option::Option<&crate::types::DeployTargetEventContext> {
        self.context.as_ref()
    }
}
impl DeployTargetEvent {
    /// Creates a new builder-style object to manufacture [`DeployTargetEvent`](crate::types::DeployTargetEvent).
    pub fn builder() -> crate::types::builders::DeployTargetEventBuilder {
        crate::types::builders::DeployTargetEventBuilder::default()
    }
}

/// A builder for [`DeployTargetEvent`](crate::types::DeployTargetEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeployTargetEventBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) context: ::std::option::Option<crate::types::DeployTargetEventContext>,
}
impl DeployTargetEventBuilder {
    /// <p>The name of the event for the deploy action.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the event for the deploy action.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the event for the deploy action.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The status of the event for the deploy action.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the event for the deploy action.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the event for the deploy action.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The start time for the event for the deploy action.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start time for the event for the deploy action.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The start time for the event for the deploy action.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The end time for the event for the deploy action.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end time for the event for the deploy action.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The end time for the event for the deploy action.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The context for the event for the deploy action.</p>
    pub fn context(mut self, input: crate::types::DeployTargetEventContext) -> Self {
        self.context = ::std::option::Option::Some(input);
        self
    }
    /// <p>The context for the event for the deploy action.</p>
    pub fn set_context(mut self, input: ::std::option::Option<crate::types::DeployTargetEventContext>) -> Self {
        self.context = input;
        self
    }
    /// <p>The context for the event for the deploy action.</p>
    pub fn get_context(&self) -> &::std::option::Option<crate::types::DeployTargetEventContext> {
        &self.context
    }
    /// Consumes the builder and constructs a [`DeployTargetEvent`](crate::types::DeployTargetEvent).
    pub fn build(self) -> crate::types::DeployTargetEvent {
        crate::types::DeployTargetEvent {
            name: self.name,
            status: self.status,
            start_time: self.start_time,
            end_time: self.end_time,
            context: self.context,
        }
    }
}
