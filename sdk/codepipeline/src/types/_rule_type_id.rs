// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The ID for the rule type, which is made up of the combined values for category, owner, provider, and version. For more information about conditions, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/stage-conditions.html">Stage conditions</a>. For more information about rules, see the <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/rule-reference.html">CodePipeline rule reference</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleTypeId {
    /// <p>A category defines what kind of rule can be run in the stage, and constrains the provider type for the rule. The valid category is <code>Rule</code>.</p>
    pub category: crate::types::RuleCategory,
    /// <p>The creator of the rule being called. The valid value for the <code>Owner</code> field in the rule category is <code>AWS</code>.</p>
    pub owner: ::std::option::Option<crate::types::RuleOwner>,
    /// <p>The rule provider, such as the <code>DeploymentWindow</code> rule. For a list of rule provider names, see the rules listed in the <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/rule-reference.html">CodePipeline rule reference</a>.</p>
    pub provider: ::std::string::String,
    /// <p>A string that describes the rule version.</p>
    pub version: ::std::option::Option<::std::string::String>,
}
impl RuleTypeId {
    /// <p>A category defines what kind of rule can be run in the stage, and constrains the provider type for the rule. The valid category is <code>Rule</code>.</p>
    pub fn category(&self) -> &crate::types::RuleCategory {
        &self.category
    }
    /// <p>The creator of the rule being called. The valid value for the <code>Owner</code> field in the rule category is <code>AWS</code>.</p>
    pub fn owner(&self) -> ::std::option::Option<&crate::types::RuleOwner> {
        self.owner.as_ref()
    }
    /// <p>The rule provider, such as the <code>DeploymentWindow</code> rule. For a list of rule provider names, see the rules listed in the <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/rule-reference.html">CodePipeline rule reference</a>.</p>
    pub fn provider(&self) -> &str {
        use std::ops::Deref;
        self.provider.deref()
    }
    /// <p>A string that describes the rule version.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl RuleTypeId {
    /// Creates a new builder-style object to manufacture [`RuleTypeId`](crate::types::RuleTypeId).
    pub fn builder() -> crate::types::builders::RuleTypeIdBuilder {
        crate::types::builders::RuleTypeIdBuilder::default()
    }
}

/// A builder for [`RuleTypeId`](crate::types::RuleTypeId).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuleTypeIdBuilder {
    pub(crate) category: ::std::option::Option<crate::types::RuleCategory>,
    pub(crate) owner: ::std::option::Option<crate::types::RuleOwner>,
    pub(crate) provider: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
}
impl RuleTypeIdBuilder {
    /// <p>A category defines what kind of rule can be run in the stage, and constrains the provider type for the rule. The valid category is <code>Rule</code>.</p>
    /// This field is required.
    pub fn category(mut self, input: crate::types::RuleCategory) -> Self {
        self.category = ::std::option::Option::Some(input);
        self
    }
    /// <p>A category defines what kind of rule can be run in the stage, and constrains the provider type for the rule. The valid category is <code>Rule</code>.</p>
    pub fn set_category(mut self, input: ::std::option::Option<crate::types::RuleCategory>) -> Self {
        self.category = input;
        self
    }
    /// <p>A category defines what kind of rule can be run in the stage, and constrains the provider type for the rule. The valid category is <code>Rule</code>.</p>
    pub fn get_category(&self) -> &::std::option::Option<crate::types::RuleCategory> {
        &self.category
    }
    /// <p>The creator of the rule being called. The valid value for the <code>Owner</code> field in the rule category is <code>AWS</code>.</p>
    pub fn owner(mut self, input: crate::types::RuleOwner) -> Self {
        self.owner = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creator of the rule being called. The valid value for the <code>Owner</code> field in the rule category is <code>AWS</code>.</p>
    pub fn set_owner(mut self, input: ::std::option::Option<crate::types::RuleOwner>) -> Self {
        self.owner = input;
        self
    }
    /// <p>The creator of the rule being called. The valid value for the <code>Owner</code> field in the rule category is <code>AWS</code>.</p>
    pub fn get_owner(&self) -> &::std::option::Option<crate::types::RuleOwner> {
        &self.owner
    }
    /// <p>The rule provider, such as the <code>DeploymentWindow</code> rule. For a list of rule provider names, see the rules listed in the <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/rule-reference.html">CodePipeline rule reference</a>.</p>
    /// This field is required.
    pub fn provider(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provider = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The rule provider, such as the <code>DeploymentWindow</code> rule. For a list of rule provider names, see the rules listed in the <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/rule-reference.html">CodePipeline rule reference</a>.</p>
    pub fn set_provider(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provider = input;
        self
    }
    /// <p>The rule provider, such as the <code>DeploymentWindow</code> rule. For a list of rule provider names, see the rules listed in the <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/rule-reference.html">CodePipeline rule reference</a>.</p>
    pub fn get_provider(&self) -> &::std::option::Option<::std::string::String> {
        &self.provider
    }
    /// <p>A string that describes the rule version.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string that describes the rule version.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>A string that describes the rule version.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// Consumes the builder and constructs a [`RuleTypeId`](crate::types::RuleTypeId).
    /// This method will fail if any of the following fields are not set:
    /// - [`category`](crate::types::builders::RuleTypeIdBuilder::category)
    /// - [`provider`](crate::types::builders::RuleTypeIdBuilder::provider)
    pub fn build(self) -> ::std::result::Result<crate::types::RuleTypeId, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RuleTypeId {
            category: self.category.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "category",
                    "category was not specified but it is required when building RuleTypeId",
                )
            })?,
            owner: self.owner,
            provider: self.provider.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "provider",
                    "provider was not specified but it is required when building RuleTypeId",
                )
            })?,
            version: self.version,
        })
    }
}
