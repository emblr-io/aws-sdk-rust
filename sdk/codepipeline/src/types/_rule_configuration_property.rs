// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents information about a rule configuration property.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleConfigurationProperty {
    /// <p>The name of the rule configuration property.</p>
    pub name: ::std::string::String,
    /// <p>Whether the configuration property is a required value.</p>
    pub required: bool,
    /// <p>Whether the configuration property is a key.</p>
    pub key: bool,
    /// <p>Whether the configuration property is secret.</p>
    /// <p>When updating a pipeline, passing * * * * * without changing any other values of the action preserves the previous value of the secret.</p>
    pub secret: bool,
    /// <p>Indicates whether the property can be queried.</p>
    /// <p>If you create a pipeline with a condition and rule, and that rule contains a queryable property, the value for that configuration property is subject to other restrictions. The value must be less than or equal to twenty (20) characters. The value can contain only alphanumeric characters, underscores, and hyphens.</p>
    pub queryable: bool,
    /// <p>The description of the action configuration property that is displayed to users.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The type of the configuration property.</p>
    pub r#type: ::std::option::Option<crate::types::RuleConfigurationPropertyType>,
}
impl RuleConfigurationProperty {
    /// <p>The name of the rule configuration property.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Whether the configuration property is a required value.</p>
    pub fn required(&self) -> bool {
        self.required
    }
    /// <p>Whether the configuration property is a key.</p>
    pub fn key(&self) -> bool {
        self.key
    }
    /// <p>Whether the configuration property is secret.</p>
    /// <p>When updating a pipeline, passing * * * * * without changing any other values of the action preserves the previous value of the secret.</p>
    pub fn secret(&self) -> bool {
        self.secret
    }
    /// <p>Indicates whether the property can be queried.</p>
    /// <p>If you create a pipeline with a condition and rule, and that rule contains a queryable property, the value for that configuration property is subject to other restrictions. The value must be less than or equal to twenty (20) characters. The value can contain only alphanumeric characters, underscores, and hyphens.</p>
    pub fn queryable(&self) -> bool {
        self.queryable
    }
    /// <p>The description of the action configuration property that is displayed to users.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The type of the configuration property.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::RuleConfigurationPropertyType> {
        self.r#type.as_ref()
    }
}
impl RuleConfigurationProperty {
    /// Creates a new builder-style object to manufacture [`RuleConfigurationProperty`](crate::types::RuleConfigurationProperty).
    pub fn builder() -> crate::types::builders::RuleConfigurationPropertyBuilder {
        crate::types::builders::RuleConfigurationPropertyBuilder::default()
    }
}

/// A builder for [`RuleConfigurationProperty`](crate::types::RuleConfigurationProperty).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuleConfigurationPropertyBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) required: ::std::option::Option<bool>,
    pub(crate) key: ::std::option::Option<bool>,
    pub(crate) secret: ::std::option::Option<bool>,
    pub(crate) queryable: ::std::option::Option<bool>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::RuleConfigurationPropertyType>,
}
impl RuleConfigurationPropertyBuilder {
    /// <p>The name of the rule configuration property.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the rule configuration property.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the rule configuration property.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Whether the configuration property is a required value.</p>
    /// This field is required.
    pub fn required(mut self, input: bool) -> Self {
        self.required = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the configuration property is a required value.</p>
    pub fn set_required(mut self, input: ::std::option::Option<bool>) -> Self {
        self.required = input;
        self
    }
    /// <p>Whether the configuration property is a required value.</p>
    pub fn get_required(&self) -> &::std::option::Option<bool> {
        &self.required
    }
    /// <p>Whether the configuration property is a key.</p>
    /// This field is required.
    pub fn key(mut self, input: bool) -> Self {
        self.key = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the configuration property is a key.</p>
    pub fn set_key(mut self, input: ::std::option::Option<bool>) -> Self {
        self.key = input;
        self
    }
    /// <p>Whether the configuration property is a key.</p>
    pub fn get_key(&self) -> &::std::option::Option<bool> {
        &self.key
    }
    /// <p>Whether the configuration property is secret.</p>
    /// <p>When updating a pipeline, passing * * * * * without changing any other values of the action preserves the previous value of the secret.</p>
    /// This field is required.
    pub fn secret(mut self, input: bool) -> Self {
        self.secret = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the configuration property is secret.</p>
    /// <p>When updating a pipeline, passing * * * * * without changing any other values of the action preserves the previous value of the secret.</p>
    pub fn set_secret(mut self, input: ::std::option::Option<bool>) -> Self {
        self.secret = input;
        self
    }
    /// <p>Whether the configuration property is secret.</p>
    /// <p>When updating a pipeline, passing * * * * * without changing any other values of the action preserves the previous value of the secret.</p>
    pub fn get_secret(&self) -> &::std::option::Option<bool> {
        &self.secret
    }
    /// <p>Indicates whether the property can be queried.</p>
    /// <p>If you create a pipeline with a condition and rule, and that rule contains a queryable property, the value for that configuration property is subject to other restrictions. The value must be less than or equal to twenty (20) characters. The value can contain only alphanumeric characters, underscores, and hyphens.</p>
    pub fn queryable(mut self, input: bool) -> Self {
        self.queryable = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the property can be queried.</p>
    /// <p>If you create a pipeline with a condition and rule, and that rule contains a queryable property, the value for that configuration property is subject to other restrictions. The value must be less than or equal to twenty (20) characters. The value can contain only alphanumeric characters, underscores, and hyphens.</p>
    pub fn set_queryable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.queryable = input;
        self
    }
    /// <p>Indicates whether the property can be queried.</p>
    /// <p>If you create a pipeline with a condition and rule, and that rule contains a queryable property, the value for that configuration property is subject to other restrictions. The value must be less than or equal to twenty (20) characters. The value can contain only alphanumeric characters, underscores, and hyphens.</p>
    pub fn get_queryable(&self) -> &::std::option::Option<bool> {
        &self.queryable
    }
    /// <p>The description of the action configuration property that is displayed to users.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the action configuration property that is displayed to users.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the action configuration property that is displayed to users.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The type of the configuration property.</p>
    pub fn r#type(mut self, input: crate::types::RuleConfigurationPropertyType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the configuration property.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RuleConfigurationPropertyType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the configuration property.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RuleConfigurationPropertyType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`RuleConfigurationProperty`](crate::types::RuleConfigurationProperty).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::RuleConfigurationPropertyBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::RuleConfigurationProperty, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RuleConfigurationProperty {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building RuleConfigurationProperty",
                )
            })?,
            required: self.required.unwrap_or_default(),
            key: self.key.unwrap_or_default(),
            secret: self.secret.unwrap_or_default(),
            queryable: self.queryable.unwrap_or_default(),
            description: self.description,
            r#type: self.r#type,
        })
    }
}
