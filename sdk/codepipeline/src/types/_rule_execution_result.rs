// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Execution result information, such as the external execution ID.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleExecutionResult {
    /// <p>The external ID for the rule execution.</p>
    pub external_execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The external provider summary for the rule execution.</p>
    pub external_execution_summary: ::std::option::Option<::std::string::String>,
    /// <p>The deepest external link to the external resource (for example, a repository URL or deployment endpoint) that is used when running the rule.</p>
    pub external_execution_url: ::std::option::Option<::std::string::String>,
    /// <p>Represents information about an error in CodePipeline.</p>
    pub error_details: ::std::option::Option<crate::types::ErrorDetails>,
}
impl RuleExecutionResult {
    /// <p>The external ID for the rule execution.</p>
    pub fn external_execution_id(&self) -> ::std::option::Option<&str> {
        self.external_execution_id.as_deref()
    }
    /// <p>The external provider summary for the rule execution.</p>
    pub fn external_execution_summary(&self) -> ::std::option::Option<&str> {
        self.external_execution_summary.as_deref()
    }
    /// <p>The deepest external link to the external resource (for example, a repository URL or deployment endpoint) that is used when running the rule.</p>
    pub fn external_execution_url(&self) -> ::std::option::Option<&str> {
        self.external_execution_url.as_deref()
    }
    /// <p>Represents information about an error in CodePipeline.</p>
    pub fn error_details(&self) -> ::std::option::Option<&crate::types::ErrorDetails> {
        self.error_details.as_ref()
    }
}
impl RuleExecutionResult {
    /// Creates a new builder-style object to manufacture [`RuleExecutionResult`](crate::types::RuleExecutionResult).
    pub fn builder() -> crate::types::builders::RuleExecutionResultBuilder {
        crate::types::builders::RuleExecutionResultBuilder::default()
    }
}

/// A builder for [`RuleExecutionResult`](crate::types::RuleExecutionResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuleExecutionResultBuilder {
    pub(crate) external_execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) external_execution_summary: ::std::option::Option<::std::string::String>,
    pub(crate) external_execution_url: ::std::option::Option<::std::string::String>,
    pub(crate) error_details: ::std::option::Option<crate::types::ErrorDetails>,
}
impl RuleExecutionResultBuilder {
    /// <p>The external ID for the rule execution.</p>
    pub fn external_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.external_execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The external ID for the rule execution.</p>
    pub fn set_external_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.external_execution_id = input;
        self
    }
    /// <p>The external ID for the rule execution.</p>
    pub fn get_external_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.external_execution_id
    }
    /// <p>The external provider summary for the rule execution.</p>
    pub fn external_execution_summary(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.external_execution_summary = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The external provider summary for the rule execution.</p>
    pub fn set_external_execution_summary(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.external_execution_summary = input;
        self
    }
    /// <p>The external provider summary for the rule execution.</p>
    pub fn get_external_execution_summary(&self) -> &::std::option::Option<::std::string::String> {
        &self.external_execution_summary
    }
    /// <p>The deepest external link to the external resource (for example, a repository URL or deployment endpoint) that is used when running the rule.</p>
    pub fn external_execution_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.external_execution_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The deepest external link to the external resource (for example, a repository URL or deployment endpoint) that is used when running the rule.</p>
    pub fn set_external_execution_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.external_execution_url = input;
        self
    }
    /// <p>The deepest external link to the external resource (for example, a repository URL or deployment endpoint) that is used when running the rule.</p>
    pub fn get_external_execution_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.external_execution_url
    }
    /// <p>Represents information about an error in CodePipeline.</p>
    pub fn error_details(mut self, input: crate::types::ErrorDetails) -> Self {
        self.error_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents information about an error in CodePipeline.</p>
    pub fn set_error_details(mut self, input: ::std::option::Option<crate::types::ErrorDetails>) -> Self {
        self.error_details = input;
        self
    }
    /// <p>Represents information about an error in CodePipeline.</p>
    pub fn get_error_details(&self) -> &::std::option::Option<crate::types::ErrorDetails> {
        &self.error_details
    }
    /// Consumes the builder and constructs a [`RuleExecutionResult`](crate::types::RuleExecutionResult).
    pub fn build(self) -> crate::types::RuleExecutionResult {
        crate::types::RuleExecutionResult {
            external_execution_id: self.external_execution_id,
            external_execution_summary: self.external_execution_summary,
            external_execution_url: self.external_execution_url,
            error_details: self.error_details,
        }
    }
}
