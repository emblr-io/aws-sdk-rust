// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the state of the condition.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConditionState {
    /// <p>The state of the latest run of the rule.</p>
    pub latest_execution: ::std::option::Option<crate::types::ConditionExecution>,
    /// <p>The state of the rules for the condition.</p>
    pub rule_states: ::std::option::Option<::std::vec::Vec<crate::types::RuleState>>,
}
impl ConditionState {
    /// <p>The state of the latest run of the rule.</p>
    pub fn latest_execution(&self) -> ::std::option::Option<&crate::types::ConditionExecution> {
        self.latest_execution.as_ref()
    }
    /// <p>The state of the rules for the condition.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rule_states.is_none()`.
    pub fn rule_states(&self) -> &[crate::types::RuleState] {
        self.rule_states.as_deref().unwrap_or_default()
    }
}
impl ConditionState {
    /// Creates a new builder-style object to manufacture [`ConditionState`](crate::types::ConditionState).
    pub fn builder() -> crate::types::builders::ConditionStateBuilder {
        crate::types::builders::ConditionStateBuilder::default()
    }
}

/// A builder for [`ConditionState`](crate::types::ConditionState).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConditionStateBuilder {
    pub(crate) latest_execution: ::std::option::Option<crate::types::ConditionExecution>,
    pub(crate) rule_states: ::std::option::Option<::std::vec::Vec<crate::types::RuleState>>,
}
impl ConditionStateBuilder {
    /// <p>The state of the latest run of the rule.</p>
    pub fn latest_execution(mut self, input: crate::types::ConditionExecution) -> Self {
        self.latest_execution = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the latest run of the rule.</p>
    pub fn set_latest_execution(mut self, input: ::std::option::Option<crate::types::ConditionExecution>) -> Self {
        self.latest_execution = input;
        self
    }
    /// <p>The state of the latest run of the rule.</p>
    pub fn get_latest_execution(&self) -> &::std::option::Option<crate::types::ConditionExecution> {
        &self.latest_execution
    }
    /// Appends an item to `rule_states`.
    ///
    /// To override the contents of this collection use [`set_rule_states`](Self::set_rule_states).
    ///
    /// <p>The state of the rules for the condition.</p>
    pub fn rule_states(mut self, input: crate::types::RuleState) -> Self {
        let mut v = self.rule_states.unwrap_or_default();
        v.push(input);
        self.rule_states = ::std::option::Option::Some(v);
        self
    }
    /// <p>The state of the rules for the condition.</p>
    pub fn set_rule_states(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RuleState>>) -> Self {
        self.rule_states = input;
        self
    }
    /// <p>The state of the rules for the condition.</p>
    pub fn get_rule_states(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RuleState>> {
        &self.rule_states
    }
    /// Consumes the builder and constructs a [`ConditionState`](crate::types::ConditionState).
    pub fn build(self) -> crate::types::ConditionState {
        crate::types::ConditionState {
            latest_execution: self.latest_execution,
            rule_states: self.rule_states,
        }
    }
}
