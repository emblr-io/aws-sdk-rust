// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents information about each time a rule is run as part of the pipeline execution for a pipeline configured with conditions.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleExecution {
    /// <p>The execution ID for the run of the rule.</p>
    pub rule_execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the run of the rule, such as FAILED.</p>
    pub status: ::std::option::Option<crate::types::RuleExecutionStatus>,
    /// <p>A summary of the run of the rule.</p>
    pub summary: ::std::option::Option<::std::string::String>,
    /// <p>The last status change of the rule.</p>
    pub last_status_change: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The system-generated token used to identify a unique request.</p>
    pub token: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the user who last changed the rule.</p>
    pub last_updated_by: ::std::option::Option<::std::string::String>,
    /// <p>The external ID of the run of the rule.</p>
    pub external_execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The URL of a resource external to Amazon Web Services that is used when running the rule (for example, an external repository URL).</p>
    pub external_execution_url: ::std::option::Option<::std::string::String>,
    /// <p>Represents information about an error in CodePipeline.</p>
    pub error_details: ::std::option::Option<crate::types::ErrorDetails>,
}
impl RuleExecution {
    /// <p>The execution ID for the run of the rule.</p>
    pub fn rule_execution_id(&self) -> ::std::option::Option<&str> {
        self.rule_execution_id.as_deref()
    }
    /// <p>The status of the run of the rule, such as FAILED.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::RuleExecutionStatus> {
        self.status.as_ref()
    }
    /// <p>A summary of the run of the rule.</p>
    pub fn summary(&self) -> ::std::option::Option<&str> {
        self.summary.as_deref()
    }
    /// <p>The last status change of the rule.</p>
    pub fn last_status_change(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_status_change.as_ref()
    }
    /// <p>The system-generated token used to identify a unique request.</p>
    pub fn token(&self) -> ::std::option::Option<&str> {
        self.token.as_deref()
    }
    /// <p>The ARN of the user who last changed the rule.</p>
    pub fn last_updated_by(&self) -> ::std::option::Option<&str> {
        self.last_updated_by.as_deref()
    }
    /// <p>The external ID of the run of the rule.</p>
    pub fn external_execution_id(&self) -> ::std::option::Option<&str> {
        self.external_execution_id.as_deref()
    }
    /// <p>The URL of a resource external to Amazon Web Services that is used when running the rule (for example, an external repository URL).</p>
    pub fn external_execution_url(&self) -> ::std::option::Option<&str> {
        self.external_execution_url.as_deref()
    }
    /// <p>Represents information about an error in CodePipeline.</p>
    pub fn error_details(&self) -> ::std::option::Option<&crate::types::ErrorDetails> {
        self.error_details.as_ref()
    }
}
impl RuleExecution {
    /// Creates a new builder-style object to manufacture [`RuleExecution`](crate::types::RuleExecution).
    pub fn builder() -> crate::types::builders::RuleExecutionBuilder {
        crate::types::builders::RuleExecutionBuilder::default()
    }
}

/// A builder for [`RuleExecution`](crate::types::RuleExecution).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuleExecutionBuilder {
    pub(crate) rule_execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::RuleExecutionStatus>,
    pub(crate) summary: ::std::option::Option<::std::string::String>,
    pub(crate) last_status_change: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) token: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_by: ::std::option::Option<::std::string::String>,
    pub(crate) external_execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) external_execution_url: ::std::option::Option<::std::string::String>,
    pub(crate) error_details: ::std::option::Option<crate::types::ErrorDetails>,
}
impl RuleExecutionBuilder {
    /// <p>The execution ID for the run of the rule.</p>
    pub fn rule_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The execution ID for the run of the rule.</p>
    pub fn set_rule_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_execution_id = input;
        self
    }
    /// <p>The execution ID for the run of the rule.</p>
    pub fn get_rule_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_execution_id
    }
    /// <p>The status of the run of the rule, such as FAILED.</p>
    pub fn status(mut self, input: crate::types::RuleExecutionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the run of the rule, such as FAILED.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::RuleExecutionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the run of the rule, such as FAILED.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::RuleExecutionStatus> {
        &self.status
    }
    /// <p>A summary of the run of the rule.</p>
    pub fn summary(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.summary = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A summary of the run of the rule.</p>
    pub fn set_summary(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.summary = input;
        self
    }
    /// <p>A summary of the run of the rule.</p>
    pub fn get_summary(&self) -> &::std::option::Option<::std::string::String> {
        &self.summary
    }
    /// <p>The last status change of the rule.</p>
    pub fn last_status_change(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_status_change = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last status change of the rule.</p>
    pub fn set_last_status_change(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_status_change = input;
        self
    }
    /// <p>The last status change of the rule.</p>
    pub fn get_last_status_change(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_status_change
    }
    /// <p>The system-generated token used to identify a unique request.</p>
    pub fn token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The system-generated token used to identify a unique request.</p>
    pub fn set_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.token = input;
        self
    }
    /// <p>The system-generated token used to identify a unique request.</p>
    pub fn get_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.token
    }
    /// <p>The ARN of the user who last changed the rule.</p>
    pub fn last_updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the user who last changed the rule.</p>
    pub fn set_last_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_updated_by = input;
        self
    }
    /// <p>The ARN of the user who last changed the rule.</p>
    pub fn get_last_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_updated_by
    }
    /// <p>The external ID of the run of the rule.</p>
    pub fn external_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.external_execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The external ID of the run of the rule.</p>
    pub fn set_external_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.external_execution_id = input;
        self
    }
    /// <p>The external ID of the run of the rule.</p>
    pub fn get_external_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.external_execution_id
    }
    /// <p>The URL of a resource external to Amazon Web Services that is used when running the rule (for example, an external repository URL).</p>
    pub fn external_execution_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.external_execution_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of a resource external to Amazon Web Services that is used when running the rule (for example, an external repository URL).</p>
    pub fn set_external_execution_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.external_execution_url = input;
        self
    }
    /// <p>The URL of a resource external to Amazon Web Services that is used when running the rule (for example, an external repository URL).</p>
    pub fn get_external_execution_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.external_execution_url
    }
    /// <p>Represents information about an error in CodePipeline.</p>
    pub fn error_details(mut self, input: crate::types::ErrorDetails) -> Self {
        self.error_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents information about an error in CodePipeline.</p>
    pub fn set_error_details(mut self, input: ::std::option::Option<crate::types::ErrorDetails>) -> Self {
        self.error_details = input;
        self
    }
    /// <p>Represents information about an error in CodePipeline.</p>
    pub fn get_error_details(&self) -> &::std::option::Option<crate::types::ErrorDetails> {
        &self.error_details
    }
    /// Consumes the builder and constructs a [`RuleExecution`](crate::types::RuleExecution).
    pub fn build(self) -> crate::types::RuleExecution {
        crate::types::RuleExecution {
            rule_execution_id: self.rule_execution_id,
            status: self.status,
            summary: self.summary,
            last_status_change: self.last_status_change,
            token: self.token,
            last_updated_by: self.last_updated_by,
            external_execution_id: self.external_execution_id,
            external_execution_url: self.external_execution_url,
            error_details: self.error_details,
        }
    }
}
