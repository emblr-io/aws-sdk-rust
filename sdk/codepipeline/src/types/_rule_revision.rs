// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The change to a rule that creates a revision of the rule.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleRevision {
    /// <p>The system-generated unique ID that identifies the revision number of the rule.</p>
    pub revision_id: ::std::string::String,
    /// <p>The unique identifier of the change that set the state to this revision (for example, a deployment ID or timestamp).</p>
    pub revision_change_id: ::std::string::String,
    /// <p>The date and time when the most recent version of the rule was created, in timestamp format.</p>
    pub created: ::aws_smithy_types::DateTime,
}
impl RuleRevision {
    /// <p>The system-generated unique ID that identifies the revision number of the rule.</p>
    pub fn revision_id(&self) -> &str {
        use std::ops::Deref;
        self.revision_id.deref()
    }
    /// <p>The unique identifier of the change that set the state to this revision (for example, a deployment ID or timestamp).</p>
    pub fn revision_change_id(&self) -> &str {
        use std::ops::Deref;
        self.revision_change_id.deref()
    }
    /// <p>The date and time when the most recent version of the rule was created, in timestamp format.</p>
    pub fn created(&self) -> &::aws_smithy_types::DateTime {
        &self.created
    }
}
impl RuleRevision {
    /// Creates a new builder-style object to manufacture [`RuleRevision`](crate::types::RuleRevision).
    pub fn builder() -> crate::types::builders::RuleRevisionBuilder {
        crate::types::builders::RuleRevisionBuilder::default()
    }
}

/// A builder for [`RuleRevision`](crate::types::RuleRevision).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuleRevisionBuilder {
    pub(crate) revision_id: ::std::option::Option<::std::string::String>,
    pub(crate) revision_change_id: ::std::option::Option<::std::string::String>,
    pub(crate) created: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl RuleRevisionBuilder {
    /// <p>The system-generated unique ID that identifies the revision number of the rule.</p>
    /// This field is required.
    pub fn revision_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.revision_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The system-generated unique ID that identifies the revision number of the rule.</p>
    pub fn set_revision_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.revision_id = input;
        self
    }
    /// <p>The system-generated unique ID that identifies the revision number of the rule.</p>
    pub fn get_revision_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.revision_id
    }
    /// <p>The unique identifier of the change that set the state to this revision (for example, a deployment ID or timestamp).</p>
    /// This field is required.
    pub fn revision_change_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.revision_change_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the change that set the state to this revision (for example, a deployment ID or timestamp).</p>
    pub fn set_revision_change_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.revision_change_id = input;
        self
    }
    /// <p>The unique identifier of the change that set the state to this revision (for example, a deployment ID or timestamp).</p>
    pub fn get_revision_change_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.revision_change_id
    }
    /// <p>The date and time when the most recent version of the rule was created, in timestamp format.</p>
    /// This field is required.
    pub fn created(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the most recent version of the rule was created, in timestamp format.</p>
    pub fn set_created(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created = input;
        self
    }
    /// <p>The date and time when the most recent version of the rule was created, in timestamp format.</p>
    pub fn get_created(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created
    }
    /// Consumes the builder and constructs a [`RuleRevision`](crate::types::RuleRevision).
    /// This method will fail if any of the following fields are not set:
    /// - [`revision_id`](crate::types::builders::RuleRevisionBuilder::revision_id)
    /// - [`revision_change_id`](crate::types::builders::RuleRevisionBuilder::revision_change_id)
    /// - [`created`](crate::types::builders::RuleRevisionBuilder::created)
    pub fn build(self) -> ::std::result::Result<crate::types::RuleRevision, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RuleRevision {
            revision_id: self.revision_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "revision_id",
                    "revision_id was not specified but it is required when building RuleRevision",
                )
            })?,
            revision_change_id: self.revision_change_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "revision_change_id",
                    "revision_change_id was not specified but it is required when building RuleRevision",
                )
            })?,
            created: self.created.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created",
                    "created was not specified but it is required when building RuleRevision",
                )
            })?,
        })
    }
}
