// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The event criteria that specify when a specified repository event will start the pipeline for the specified trigger configuration, such as the lists of Git tags to include and exclude.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GitPushFilter {
    /// <p>The field that contains the details for the Git tags trigger configuration.</p>
    pub tags: ::std::option::Option<crate::types::GitTagFilterCriteria>,
    /// <p>The field that specifies to filter on branches for the push trigger configuration.</p>
    pub branches: ::std::option::Option<crate::types::GitBranchFilterCriteria>,
    /// <p>The field that specifies to filter on file paths for the push trigger configuration.</p>
    pub file_paths: ::std::option::Option<crate::types::GitFilePathFilterCriteria>,
}
impl GitPushFilter {
    /// <p>The field that contains the details for the Git tags trigger configuration.</p>
    pub fn tags(&self) -> ::std::option::Option<&crate::types::GitTagFilterCriteria> {
        self.tags.as_ref()
    }
    /// <p>The field that specifies to filter on branches for the push trigger configuration.</p>
    pub fn branches(&self) -> ::std::option::Option<&crate::types::GitBranchFilterCriteria> {
        self.branches.as_ref()
    }
    /// <p>The field that specifies to filter on file paths for the push trigger configuration.</p>
    pub fn file_paths(&self) -> ::std::option::Option<&crate::types::GitFilePathFilterCriteria> {
        self.file_paths.as_ref()
    }
}
impl GitPushFilter {
    /// Creates a new builder-style object to manufacture [`GitPushFilter`](crate::types::GitPushFilter).
    pub fn builder() -> crate::types::builders::GitPushFilterBuilder {
        crate::types::builders::GitPushFilterBuilder::default()
    }
}

/// A builder for [`GitPushFilter`](crate::types::GitPushFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GitPushFilterBuilder {
    pub(crate) tags: ::std::option::Option<crate::types::GitTagFilterCriteria>,
    pub(crate) branches: ::std::option::Option<crate::types::GitBranchFilterCriteria>,
    pub(crate) file_paths: ::std::option::Option<crate::types::GitFilePathFilterCriteria>,
}
impl GitPushFilterBuilder {
    /// <p>The field that contains the details for the Git tags trigger configuration.</p>
    pub fn tags(mut self, input: crate::types::GitTagFilterCriteria) -> Self {
        self.tags = ::std::option::Option::Some(input);
        self
    }
    /// <p>The field that contains the details for the Git tags trigger configuration.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<crate::types::GitTagFilterCriteria>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The field that contains the details for the Git tags trigger configuration.</p>
    pub fn get_tags(&self) -> &::std::option::Option<crate::types::GitTagFilterCriteria> {
        &self.tags
    }
    /// <p>The field that specifies to filter on branches for the push trigger configuration.</p>
    pub fn branches(mut self, input: crate::types::GitBranchFilterCriteria) -> Self {
        self.branches = ::std::option::Option::Some(input);
        self
    }
    /// <p>The field that specifies to filter on branches for the push trigger configuration.</p>
    pub fn set_branches(mut self, input: ::std::option::Option<crate::types::GitBranchFilterCriteria>) -> Self {
        self.branches = input;
        self
    }
    /// <p>The field that specifies to filter on branches for the push trigger configuration.</p>
    pub fn get_branches(&self) -> &::std::option::Option<crate::types::GitBranchFilterCriteria> {
        &self.branches
    }
    /// <p>The field that specifies to filter on file paths for the push trigger configuration.</p>
    pub fn file_paths(mut self, input: crate::types::GitFilePathFilterCriteria) -> Self {
        self.file_paths = ::std::option::Option::Some(input);
        self
    }
    /// <p>The field that specifies to filter on file paths for the push trigger configuration.</p>
    pub fn set_file_paths(mut self, input: ::std::option::Option<crate::types::GitFilePathFilterCriteria>) -> Self {
        self.file_paths = input;
        self
    }
    /// <p>The field that specifies to filter on file paths for the push trigger configuration.</p>
    pub fn get_file_paths(&self) -> &::std::option::Option<crate::types::GitFilePathFilterCriteria> {
        &self.file_paths
    }
    /// Consumes the builder and constructs a [`GitPushFilter`](crate::types::GitPushFilter).
    pub fn build(self) -> crate::types::GitPushFilter {
        crate::types::GitPushFilter {
            tags: self.tags,
            branches: self.branches,
            file_paths: self.file_paths,
        }
    }
}
