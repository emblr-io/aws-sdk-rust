// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The field that specifies to filter on the latest execution in the pipeline.</p><note>
/// <p>Filtering on the latest execution is available for executions run on or after February 08, 2024.</p>
/// </note>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LatestInPipelineExecutionFilter {
    /// <p>The execution ID for the latest execution in the pipeline.</p>
    pub pipeline_execution_id: ::std::string::String,
    /// <p>The start time to filter on for the latest execution in the pipeline. Valid options:</p>
    /// <ul>
    /// <li>
    /// <p>All</p></li>
    /// <li>
    /// <p>Latest</p></li>
    /// </ul>
    pub start_time_range: crate::types::StartTimeRange,
}
impl LatestInPipelineExecutionFilter {
    /// <p>The execution ID for the latest execution in the pipeline.</p>
    pub fn pipeline_execution_id(&self) -> &str {
        use std::ops::Deref;
        self.pipeline_execution_id.deref()
    }
    /// <p>The start time to filter on for the latest execution in the pipeline. Valid options:</p>
    /// <ul>
    /// <li>
    /// <p>All</p></li>
    /// <li>
    /// <p>Latest</p></li>
    /// </ul>
    pub fn start_time_range(&self) -> &crate::types::StartTimeRange {
        &self.start_time_range
    }
}
impl LatestInPipelineExecutionFilter {
    /// Creates a new builder-style object to manufacture [`LatestInPipelineExecutionFilter`](crate::types::LatestInPipelineExecutionFilter).
    pub fn builder() -> crate::types::builders::LatestInPipelineExecutionFilterBuilder {
        crate::types::builders::LatestInPipelineExecutionFilterBuilder::default()
    }
}

/// A builder for [`LatestInPipelineExecutionFilter`](crate::types::LatestInPipelineExecutionFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LatestInPipelineExecutionFilterBuilder {
    pub(crate) pipeline_execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) start_time_range: ::std::option::Option<crate::types::StartTimeRange>,
}
impl LatestInPipelineExecutionFilterBuilder {
    /// <p>The execution ID for the latest execution in the pipeline.</p>
    /// This field is required.
    pub fn pipeline_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pipeline_execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The execution ID for the latest execution in the pipeline.</p>
    pub fn set_pipeline_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pipeline_execution_id = input;
        self
    }
    /// <p>The execution ID for the latest execution in the pipeline.</p>
    pub fn get_pipeline_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.pipeline_execution_id
    }
    /// <p>The start time to filter on for the latest execution in the pipeline. Valid options:</p>
    /// <ul>
    /// <li>
    /// <p>All</p></li>
    /// <li>
    /// <p>Latest</p></li>
    /// </ul>
    /// This field is required.
    pub fn start_time_range(mut self, input: crate::types::StartTimeRange) -> Self {
        self.start_time_range = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start time to filter on for the latest execution in the pipeline. Valid options:</p>
    /// <ul>
    /// <li>
    /// <p>All</p></li>
    /// <li>
    /// <p>Latest</p></li>
    /// </ul>
    pub fn set_start_time_range(mut self, input: ::std::option::Option<crate::types::StartTimeRange>) -> Self {
        self.start_time_range = input;
        self
    }
    /// <p>The start time to filter on for the latest execution in the pipeline. Valid options:</p>
    /// <ul>
    /// <li>
    /// <p>All</p></li>
    /// <li>
    /// <p>Latest</p></li>
    /// </ul>
    pub fn get_start_time_range(&self) -> &::std::option::Option<crate::types::StartTimeRange> {
        &self.start_time_range
    }
    /// Consumes the builder and constructs a [`LatestInPipelineExecutionFilter`](crate::types::LatestInPipelineExecutionFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`pipeline_execution_id`](crate::types::builders::LatestInPipelineExecutionFilterBuilder::pipeline_execution_id)
    /// - [`start_time_range`](crate::types::builders::LatestInPipelineExecutionFilterBuilder::start_time_range)
    pub fn build(self) -> ::std::result::Result<crate::types::LatestInPipelineExecutionFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LatestInPipelineExecutionFilter {
            pipeline_execution_id: self.pipeline_execution_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "pipeline_execution_id",
                    "pipeline_execution_id was not specified but it is required when building LatestInPipelineExecutionFilter",
                )
            })?,
            start_time_range: self.start_time_range.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_time_range",
                    "start_time_range was not specified but it is required when building LatestInPipelineExecutionFilter",
                )
            })?,
        })
    }
}
