// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The event criteria for the pull request trigger configuration, such as the lists of branches or file paths to include and exclude.</p>
/// <p>The following are valid values for the events for this filter:</p>
/// <ul>
/// <li>
/// <p>CLOSED</p></li>
/// <li>
/// <p>OPEN</p></li>
/// <li>
/// <p>UPDATED</p></li>
/// </ul>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GitPullRequestFilter {
    /// <p>The field that specifies which pull request events to filter on (OPEN, UPDATED, CLOSED) for the trigger configuration.</p>
    pub events: ::std::option::Option<::std::vec::Vec<crate::types::GitPullRequestEventType>>,
    /// <p>The field that specifies to filter on branches for the pull request trigger configuration.</p>
    pub branches: ::std::option::Option<crate::types::GitBranchFilterCriteria>,
    /// <p>The field that specifies to filter on file paths for the pull request trigger configuration.</p>
    pub file_paths: ::std::option::Option<crate::types::GitFilePathFilterCriteria>,
}
impl GitPullRequestFilter {
    /// <p>The field that specifies which pull request events to filter on (OPEN, UPDATED, CLOSED) for the trigger configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.events.is_none()`.
    pub fn events(&self) -> &[crate::types::GitPullRequestEventType] {
        self.events.as_deref().unwrap_or_default()
    }
    /// <p>The field that specifies to filter on branches for the pull request trigger configuration.</p>
    pub fn branches(&self) -> ::std::option::Option<&crate::types::GitBranchFilterCriteria> {
        self.branches.as_ref()
    }
    /// <p>The field that specifies to filter on file paths for the pull request trigger configuration.</p>
    pub fn file_paths(&self) -> ::std::option::Option<&crate::types::GitFilePathFilterCriteria> {
        self.file_paths.as_ref()
    }
}
impl GitPullRequestFilter {
    /// Creates a new builder-style object to manufacture [`GitPullRequestFilter`](crate::types::GitPullRequestFilter).
    pub fn builder() -> crate::types::builders::GitPullRequestFilterBuilder {
        crate::types::builders::GitPullRequestFilterBuilder::default()
    }
}

/// A builder for [`GitPullRequestFilter`](crate::types::GitPullRequestFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GitPullRequestFilterBuilder {
    pub(crate) events: ::std::option::Option<::std::vec::Vec<crate::types::GitPullRequestEventType>>,
    pub(crate) branches: ::std::option::Option<crate::types::GitBranchFilterCriteria>,
    pub(crate) file_paths: ::std::option::Option<crate::types::GitFilePathFilterCriteria>,
}
impl GitPullRequestFilterBuilder {
    /// Appends an item to `events`.
    ///
    /// To override the contents of this collection use [`set_events`](Self::set_events).
    ///
    /// <p>The field that specifies which pull request events to filter on (OPEN, UPDATED, CLOSED) for the trigger configuration.</p>
    pub fn events(mut self, input: crate::types::GitPullRequestEventType) -> Self {
        let mut v = self.events.unwrap_or_default();
        v.push(input);
        self.events = ::std::option::Option::Some(v);
        self
    }
    /// <p>The field that specifies which pull request events to filter on (OPEN, UPDATED, CLOSED) for the trigger configuration.</p>
    pub fn set_events(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GitPullRequestEventType>>) -> Self {
        self.events = input;
        self
    }
    /// <p>The field that specifies which pull request events to filter on (OPEN, UPDATED, CLOSED) for the trigger configuration.</p>
    pub fn get_events(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GitPullRequestEventType>> {
        &self.events
    }
    /// <p>The field that specifies to filter on branches for the pull request trigger configuration.</p>
    pub fn branches(mut self, input: crate::types::GitBranchFilterCriteria) -> Self {
        self.branches = ::std::option::Option::Some(input);
        self
    }
    /// <p>The field that specifies to filter on branches for the pull request trigger configuration.</p>
    pub fn set_branches(mut self, input: ::std::option::Option<crate::types::GitBranchFilterCriteria>) -> Self {
        self.branches = input;
        self
    }
    /// <p>The field that specifies to filter on branches for the pull request trigger configuration.</p>
    pub fn get_branches(&self) -> &::std::option::Option<crate::types::GitBranchFilterCriteria> {
        &self.branches
    }
    /// <p>The field that specifies to filter on file paths for the pull request trigger configuration.</p>
    pub fn file_paths(mut self, input: crate::types::GitFilePathFilterCriteria) -> Self {
        self.file_paths = ::std::option::Option::Some(input);
        self
    }
    /// <p>The field that specifies to filter on file paths for the pull request trigger configuration.</p>
    pub fn set_file_paths(mut self, input: ::std::option::Option<crate::types::GitFilePathFilterCriteria>) -> Self {
        self.file_paths = input;
        self
    }
    /// <p>The field that specifies to filter on file paths for the pull request trigger configuration.</p>
    pub fn get_file_paths(&self) -> &::std::option::Option<crate::types::GitFilePathFilterCriteria> {
        &self.file_paths
    }
    /// Consumes the builder and constructs a [`GitPullRequestFilter`](crate::types::GitPullRequestFilter).
    pub fn build(self) -> crate::types::GitPullRequestFilter {
        crate::types::GitPullRequestFilter {
            events: self.events,
            branches: self.branches,
            file_paths: self.file_paths,
        }
    }
}
