// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents information about the rule to be created for an associated condition. An example would be creating a new rule for an entry condition, such as a rule that checks for a test result before allowing the run to enter the deployment stage. For more information about conditions, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/stage-conditions.html">Stage conditions</a> and <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts-how-it-works-conditions.html">How do stage conditions work?</a>. For more information about rules, see the <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/rule-reference.html">CodePipeline rule reference</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleDeclaration {
    /// <p>The name of the rule that is created for the condition, such as <code>VariableCheck</code>.</p>
    pub name: ::std::string::String,
    /// <p>The ID for the rule type, which is made up of the combined values for category, owner, provider, and version.</p>
    pub rule_type_id: ::std::option::Option<crate::types::RuleTypeId>,
    /// <p>The action configuration fields for the rule.</p>
    pub configuration: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The shell commands to run with your commands rule in CodePipeline. All commands are supported except multi-line formats. While CodeBuild logs and permissions are used, you do not need to create any resources in CodeBuild.</p><note>
    /// <p>Using compute time for this action will incur separate charges in CodeBuild.</p>
    /// </note>
    pub commands: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The input artifacts fields for the rule, such as specifying an input file for the rule.</p>
    pub input_artifacts: ::std::option::Option<::std::vec::Vec<crate::types::InputArtifact>>,
    /// <p>The pipeline role ARN associated with the rule.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Region for the condition associated with the rule.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The action timeout for the rule.</p>
    pub timeout_in_minutes: ::std::option::Option<i32>,
}
impl RuleDeclaration {
    /// <p>The name of the rule that is created for the condition, such as <code>VariableCheck</code>.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The ID for the rule type, which is made up of the combined values for category, owner, provider, and version.</p>
    pub fn rule_type_id(&self) -> ::std::option::Option<&crate::types::RuleTypeId> {
        self.rule_type_id.as_ref()
    }
    /// <p>The action configuration fields for the rule.</p>
    pub fn configuration(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.configuration.as_ref()
    }
    /// <p>The shell commands to run with your commands rule in CodePipeline. All commands are supported except multi-line formats. While CodeBuild logs and permissions are used, you do not need to create any resources in CodeBuild.</p><note>
    /// <p>Using compute time for this action will incur separate charges in CodeBuild.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.commands.is_none()`.
    pub fn commands(&self) -> &[::std::string::String] {
        self.commands.as_deref().unwrap_or_default()
    }
    /// <p>The input artifacts fields for the rule, such as specifying an input file for the rule.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.input_artifacts.is_none()`.
    pub fn input_artifacts(&self) -> &[crate::types::InputArtifact] {
        self.input_artifacts.as_deref().unwrap_or_default()
    }
    /// <p>The pipeline role ARN associated with the rule.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The Region for the condition associated with the rule.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The action timeout for the rule.</p>
    pub fn timeout_in_minutes(&self) -> ::std::option::Option<i32> {
        self.timeout_in_minutes
    }
}
impl RuleDeclaration {
    /// Creates a new builder-style object to manufacture [`RuleDeclaration`](crate::types::RuleDeclaration).
    pub fn builder() -> crate::types::builders::RuleDeclarationBuilder {
        crate::types::builders::RuleDeclarationBuilder::default()
    }
}

/// A builder for [`RuleDeclaration`](crate::types::RuleDeclaration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuleDeclarationBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) rule_type_id: ::std::option::Option<crate::types::RuleTypeId>,
    pub(crate) configuration: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) commands: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) input_artifacts: ::std::option::Option<::std::vec::Vec<crate::types::InputArtifact>>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) timeout_in_minutes: ::std::option::Option<i32>,
}
impl RuleDeclarationBuilder {
    /// <p>The name of the rule that is created for the condition, such as <code>VariableCheck</code>.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the rule that is created for the condition, such as <code>VariableCheck</code>.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the rule that is created for the condition, such as <code>VariableCheck</code>.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The ID for the rule type, which is made up of the combined values for category, owner, provider, and version.</p>
    /// This field is required.
    pub fn rule_type_id(mut self, input: crate::types::RuleTypeId) -> Self {
        self.rule_type_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ID for the rule type, which is made up of the combined values for category, owner, provider, and version.</p>
    pub fn set_rule_type_id(mut self, input: ::std::option::Option<crate::types::RuleTypeId>) -> Self {
        self.rule_type_id = input;
        self
    }
    /// <p>The ID for the rule type, which is made up of the combined values for category, owner, provider, and version.</p>
    pub fn get_rule_type_id(&self) -> &::std::option::Option<crate::types::RuleTypeId> {
        &self.rule_type_id
    }
    /// Adds a key-value pair to `configuration`.
    ///
    /// To override the contents of this collection use [`set_configuration`](Self::set_configuration).
    ///
    /// <p>The action configuration fields for the rule.</p>
    pub fn configuration(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.configuration.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.configuration = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The action configuration fields for the rule.</p>
    pub fn set_configuration(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.configuration = input;
        self
    }
    /// <p>The action configuration fields for the rule.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.configuration
    }
    /// Appends an item to `commands`.
    ///
    /// To override the contents of this collection use [`set_commands`](Self::set_commands).
    ///
    /// <p>The shell commands to run with your commands rule in CodePipeline. All commands are supported except multi-line formats. While CodeBuild logs and permissions are used, you do not need to create any resources in CodeBuild.</p><note>
    /// <p>Using compute time for this action will incur separate charges in CodeBuild.</p>
    /// </note>
    pub fn commands(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.commands.unwrap_or_default();
        v.push(input.into());
        self.commands = ::std::option::Option::Some(v);
        self
    }
    /// <p>The shell commands to run with your commands rule in CodePipeline. All commands are supported except multi-line formats. While CodeBuild logs and permissions are used, you do not need to create any resources in CodeBuild.</p><note>
    /// <p>Using compute time for this action will incur separate charges in CodeBuild.</p>
    /// </note>
    pub fn set_commands(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.commands = input;
        self
    }
    /// <p>The shell commands to run with your commands rule in CodePipeline. All commands are supported except multi-line formats. While CodeBuild logs and permissions are used, you do not need to create any resources in CodeBuild.</p><note>
    /// <p>Using compute time for this action will incur separate charges in CodeBuild.</p>
    /// </note>
    pub fn get_commands(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.commands
    }
    /// Appends an item to `input_artifacts`.
    ///
    /// To override the contents of this collection use [`set_input_artifacts`](Self::set_input_artifacts).
    ///
    /// <p>The input artifacts fields for the rule, such as specifying an input file for the rule.</p>
    pub fn input_artifacts(mut self, input: crate::types::InputArtifact) -> Self {
        let mut v = self.input_artifacts.unwrap_or_default();
        v.push(input);
        self.input_artifacts = ::std::option::Option::Some(v);
        self
    }
    /// <p>The input artifacts fields for the rule, such as specifying an input file for the rule.</p>
    pub fn set_input_artifacts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InputArtifact>>) -> Self {
        self.input_artifacts = input;
        self
    }
    /// <p>The input artifacts fields for the rule, such as specifying an input file for the rule.</p>
    pub fn get_input_artifacts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InputArtifact>> {
        &self.input_artifacts
    }
    /// <p>The pipeline role ARN associated with the rule.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pipeline role ARN associated with the rule.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The pipeline role ARN associated with the rule.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The Region for the condition associated with the rule.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Region for the condition associated with the rule.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Region for the condition associated with the rule.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The action timeout for the rule.</p>
    pub fn timeout_in_minutes(mut self, input: i32) -> Self {
        self.timeout_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action timeout for the rule.</p>
    pub fn set_timeout_in_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.timeout_in_minutes = input;
        self
    }
    /// <p>The action timeout for the rule.</p>
    pub fn get_timeout_in_minutes(&self) -> &::std::option::Option<i32> {
        &self.timeout_in_minutes
    }
    /// Consumes the builder and constructs a [`RuleDeclaration`](crate::types::RuleDeclaration).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::RuleDeclarationBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::RuleDeclaration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RuleDeclaration {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building RuleDeclaration",
                )
            })?,
            rule_type_id: self.rule_type_id,
            configuration: self.configuration,
            commands: self.commands,
            input_artifacts: self.input_artifacts,
            role_arn: self.role_arn,
            region: self.region,
            timeout_in_minutes: self.timeout_in_minutes,
        })
    }
}
