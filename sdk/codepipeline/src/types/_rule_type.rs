// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The rule type, which is made up of the combined values for category, owner, provider, and version.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleType {
    /// <p>Represents information about a rule type.</p>
    pub id: ::std::option::Option<crate::types::RuleTypeId>,
    /// <p>Returns information about the settings for a rule type.</p>
    pub settings: ::std::option::Option<crate::types::RuleTypeSettings>,
    /// <p>The configuration properties for the rule type.</p>
    pub rule_configuration_properties: ::std::option::Option<::std::vec::Vec<crate::types::RuleConfigurationProperty>>,
    /// <p>Returns information about the details of an artifact.</p>
    pub input_artifact_details: ::std::option::Option<crate::types::ArtifactDetails>,
}
impl RuleType {
    /// <p>Represents information about a rule type.</p>
    pub fn id(&self) -> ::std::option::Option<&crate::types::RuleTypeId> {
        self.id.as_ref()
    }
    /// <p>Returns information about the settings for a rule type.</p>
    pub fn settings(&self) -> ::std::option::Option<&crate::types::RuleTypeSettings> {
        self.settings.as_ref()
    }
    /// <p>The configuration properties for the rule type.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rule_configuration_properties.is_none()`.
    pub fn rule_configuration_properties(&self) -> &[crate::types::RuleConfigurationProperty] {
        self.rule_configuration_properties.as_deref().unwrap_or_default()
    }
    /// <p>Returns information about the details of an artifact.</p>
    pub fn input_artifact_details(&self) -> ::std::option::Option<&crate::types::ArtifactDetails> {
        self.input_artifact_details.as_ref()
    }
}
impl RuleType {
    /// Creates a new builder-style object to manufacture [`RuleType`](crate::types::RuleType).
    pub fn builder() -> crate::types::builders::RuleTypeBuilder {
        crate::types::builders::RuleTypeBuilder::default()
    }
}

/// A builder for [`RuleType`](crate::types::RuleType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuleTypeBuilder {
    pub(crate) id: ::std::option::Option<crate::types::RuleTypeId>,
    pub(crate) settings: ::std::option::Option<crate::types::RuleTypeSettings>,
    pub(crate) rule_configuration_properties: ::std::option::Option<::std::vec::Vec<crate::types::RuleConfigurationProperty>>,
    pub(crate) input_artifact_details: ::std::option::Option<crate::types::ArtifactDetails>,
}
impl RuleTypeBuilder {
    /// <p>Represents information about a rule type.</p>
    /// This field is required.
    pub fn id(mut self, input: crate::types::RuleTypeId) -> Self {
        self.id = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents information about a rule type.</p>
    pub fn set_id(mut self, input: ::std::option::Option<crate::types::RuleTypeId>) -> Self {
        self.id = input;
        self
    }
    /// <p>Represents information about a rule type.</p>
    pub fn get_id(&self) -> &::std::option::Option<crate::types::RuleTypeId> {
        &self.id
    }
    /// <p>Returns information about the settings for a rule type.</p>
    pub fn settings(mut self, input: crate::types::RuleTypeSettings) -> Self {
        self.settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns information about the settings for a rule type.</p>
    pub fn set_settings(mut self, input: ::std::option::Option<crate::types::RuleTypeSettings>) -> Self {
        self.settings = input;
        self
    }
    /// <p>Returns information about the settings for a rule type.</p>
    pub fn get_settings(&self) -> &::std::option::Option<crate::types::RuleTypeSettings> {
        &self.settings
    }
    /// Appends an item to `rule_configuration_properties`.
    ///
    /// To override the contents of this collection use [`set_rule_configuration_properties`](Self::set_rule_configuration_properties).
    ///
    /// <p>The configuration properties for the rule type.</p>
    pub fn rule_configuration_properties(mut self, input: crate::types::RuleConfigurationProperty) -> Self {
        let mut v = self.rule_configuration_properties.unwrap_or_default();
        v.push(input);
        self.rule_configuration_properties = ::std::option::Option::Some(v);
        self
    }
    /// <p>The configuration properties for the rule type.</p>
    pub fn set_rule_configuration_properties(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::RuleConfigurationProperty>>,
    ) -> Self {
        self.rule_configuration_properties = input;
        self
    }
    /// <p>The configuration properties for the rule type.</p>
    pub fn get_rule_configuration_properties(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RuleConfigurationProperty>> {
        &self.rule_configuration_properties
    }
    /// <p>Returns information about the details of an artifact.</p>
    /// This field is required.
    pub fn input_artifact_details(mut self, input: crate::types::ArtifactDetails) -> Self {
        self.input_artifact_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns information about the details of an artifact.</p>
    pub fn set_input_artifact_details(mut self, input: ::std::option::Option<crate::types::ArtifactDetails>) -> Self {
        self.input_artifact_details = input;
        self
    }
    /// <p>Returns information about the details of an artifact.</p>
    pub fn get_input_artifact_details(&self) -> &::std::option::Option<crate::types::ArtifactDetails> {
        &self.input_artifact_details
    }
    /// Consumes the builder and constructs a [`RuleType`](crate::types::RuleType).
    pub fn build(self) -> crate::types::RuleType {
        crate::types::RuleType {
            id: self.id,
            settings: self.settings,
            rule_configuration_properties: self.rule_configuration_properties,
            input_artifact_details: self.input_artifact_details,
        }
    }
}
