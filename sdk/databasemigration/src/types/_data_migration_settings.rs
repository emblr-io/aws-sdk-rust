// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Options for configuring a data migration, including whether to enable CloudWatch logs, and the selection rules to use to include or exclude database objects from the migration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DataMigrationSettings {
    /// <p>The number of parallel jobs that trigger parallel threads to unload the tables from the source, and then load them to the target.</p>
    pub number_of_jobs: ::std::option::Option<i32>,
    /// <p>Whether to enable CloudWatch logging for the data migration.</p>
    pub cloudwatch_logs_enabled: ::std::option::Option<bool>,
    /// <p>A JSON-formatted string that defines what objects to include and exclude from the migration.</p>
    pub selection_rules: ::std::option::Option<::std::string::String>,
}
impl DataMigrationSettings {
    /// <p>The number of parallel jobs that trigger parallel threads to unload the tables from the source, and then load them to the target.</p>
    pub fn number_of_jobs(&self) -> ::std::option::Option<i32> {
        self.number_of_jobs
    }
    /// <p>Whether to enable CloudWatch logging for the data migration.</p>
    pub fn cloudwatch_logs_enabled(&self) -> ::std::option::Option<bool> {
        self.cloudwatch_logs_enabled
    }
    /// <p>A JSON-formatted string that defines what objects to include and exclude from the migration.</p>
    pub fn selection_rules(&self) -> ::std::option::Option<&str> {
        self.selection_rules.as_deref()
    }
}
impl ::std::fmt::Debug for DataMigrationSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DataMigrationSettings");
        formatter.field("number_of_jobs", &self.number_of_jobs);
        formatter.field("cloudwatch_logs_enabled", &self.cloudwatch_logs_enabled);
        formatter.field("selection_rules", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl DataMigrationSettings {
    /// Creates a new builder-style object to manufacture [`DataMigrationSettings`](crate::types::DataMigrationSettings).
    pub fn builder() -> crate::types::builders::DataMigrationSettingsBuilder {
        crate::types::builders::DataMigrationSettingsBuilder::default()
    }
}

/// A builder for [`DataMigrationSettings`](crate::types::DataMigrationSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct DataMigrationSettingsBuilder {
    pub(crate) number_of_jobs: ::std::option::Option<i32>,
    pub(crate) cloudwatch_logs_enabled: ::std::option::Option<bool>,
    pub(crate) selection_rules: ::std::option::Option<::std::string::String>,
}
impl DataMigrationSettingsBuilder {
    /// <p>The number of parallel jobs that trigger parallel threads to unload the tables from the source, and then load them to the target.</p>
    pub fn number_of_jobs(mut self, input: i32) -> Self {
        self.number_of_jobs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of parallel jobs that trigger parallel threads to unload the tables from the source, and then load them to the target.</p>
    pub fn set_number_of_jobs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_jobs = input;
        self
    }
    /// <p>The number of parallel jobs that trigger parallel threads to unload the tables from the source, and then load them to the target.</p>
    pub fn get_number_of_jobs(&self) -> &::std::option::Option<i32> {
        &self.number_of_jobs
    }
    /// <p>Whether to enable CloudWatch logging for the data migration.</p>
    pub fn cloudwatch_logs_enabled(mut self, input: bool) -> Self {
        self.cloudwatch_logs_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to enable CloudWatch logging for the data migration.</p>
    pub fn set_cloudwatch_logs_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.cloudwatch_logs_enabled = input;
        self
    }
    /// <p>Whether to enable CloudWatch logging for the data migration.</p>
    pub fn get_cloudwatch_logs_enabled(&self) -> &::std::option::Option<bool> {
        &self.cloudwatch_logs_enabled
    }
    /// <p>A JSON-formatted string that defines what objects to include and exclude from the migration.</p>
    pub fn selection_rules(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.selection_rules = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A JSON-formatted string that defines what objects to include and exclude from the migration.</p>
    pub fn set_selection_rules(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.selection_rules = input;
        self
    }
    /// <p>A JSON-formatted string that defines what objects to include and exclude from the migration.</p>
    pub fn get_selection_rules(&self) -> &::std::option::Option<::std::string::String> {
        &self.selection_rules
    }
    /// Consumes the builder and constructs a [`DataMigrationSettings`](crate::types::DataMigrationSettings).
    pub fn build(self) -> crate::types::DataMigrationSettings {
        crate::types::DataMigrationSettings {
            number_of_jobs: self.number_of_jobs,
            cloudwatch_logs_enabled: self.cloudwatch_logs_enabled,
            selection_rules: self.selection_rules,
        }
    }
}
impl ::std::fmt::Debug for DataMigrationSettingsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DataMigrationSettingsBuilder");
        formatter.field("number_of_jobs", &self.number_of_jobs);
        formatter.field("cloudwatch_logs_enabled", &self.cloudwatch_logs_enabled);
        formatter.field("selection_rules", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
