// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines settings for a target data provider for a data migration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TargetDataSetting {
    /// <p>This setting determines how DMS handles the target tables before starting a data migration, either by leaving them untouched, dropping and recreating them, or truncating the existing data in the target tables.</p>
    pub table_preparation_mode: ::std::option::Option<crate::types::TablePreparationMode>,
}
impl TargetDataSetting {
    /// <p>This setting determines how DMS handles the target tables before starting a data migration, either by leaving them untouched, dropping and recreating them, or truncating the existing data in the target tables.</p>
    pub fn table_preparation_mode(&self) -> ::std::option::Option<&crate::types::TablePreparationMode> {
        self.table_preparation_mode.as_ref()
    }
}
impl TargetDataSetting {
    /// Creates a new builder-style object to manufacture [`TargetDataSetting`](crate::types::TargetDataSetting).
    pub fn builder() -> crate::types::builders::TargetDataSettingBuilder {
        crate::types::builders::TargetDataSettingBuilder::default()
    }
}

/// A builder for [`TargetDataSetting`](crate::types::TargetDataSetting).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TargetDataSettingBuilder {
    pub(crate) table_preparation_mode: ::std::option::Option<crate::types::TablePreparationMode>,
}
impl TargetDataSettingBuilder {
    /// <p>This setting determines how DMS handles the target tables before starting a data migration, either by leaving them untouched, dropping and recreating them, or truncating the existing data in the target tables.</p>
    pub fn table_preparation_mode(mut self, input: crate::types::TablePreparationMode) -> Self {
        self.table_preparation_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>This setting determines how DMS handles the target tables before starting a data migration, either by leaving them untouched, dropping and recreating them, or truncating the existing data in the target tables.</p>
    pub fn set_table_preparation_mode(mut self, input: ::std::option::Option<crate::types::TablePreparationMode>) -> Self {
        self.table_preparation_mode = input;
        self
    }
    /// <p>This setting determines how DMS handles the target tables before starting a data migration, either by leaving them untouched, dropping and recreating them, or truncating the existing data in the target tables.</p>
    pub fn get_table_preparation_mode(&self) -> &::std::option::Option<crate::types::TablePreparationMode> {
        &self.table_preparation_mode
    }
    /// Consumes the builder and constructs a [`TargetDataSetting`](crate::types::TargetDataSetting).
    pub fn build(self) -> crate::types::TargetDataSetting {
        crate::types::TargetDataSetting {
            table_preparation_mode: self.table_preparation_mode,
        }
    }
}
