// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The object containing the result statistics for a completed assessment run.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReplicationTaskAssessmentRunResultStatistic {
    /// <p>The number of individual assessments that successfully passed all checks in the assessment run.</p>
    pub passed: i32,
    /// <p>The number of individual assessments that failed to meet the criteria defined in the assessment run.</p>
    pub failed: i32,
    /// <p>The number of individual assessments that encountered a critical error and could not complete properly.</p>
    pub error: i32,
    /// <p>Indicates that the recent completed AssessmentRun triggered a warning.</p>
    pub warning: i32,
    /// <p>The number of individual assessments that were cancelled during the assessment run.</p>
    pub cancelled: i32,
    /// <p>The number of individual assessments that were skipped during the assessment run.</p>
    pub skipped: i32,
}
impl ReplicationTaskAssessmentRunResultStatistic {
    /// <p>The number of individual assessments that successfully passed all checks in the assessment run.</p>
    pub fn passed(&self) -> i32 {
        self.passed
    }
    /// <p>The number of individual assessments that failed to meet the criteria defined in the assessment run.</p>
    pub fn failed(&self) -> i32 {
        self.failed
    }
    /// <p>The number of individual assessments that encountered a critical error and could not complete properly.</p>
    pub fn error(&self) -> i32 {
        self.error
    }
    /// <p>Indicates that the recent completed AssessmentRun triggered a warning.</p>
    pub fn warning(&self) -> i32 {
        self.warning
    }
    /// <p>The number of individual assessments that were cancelled during the assessment run.</p>
    pub fn cancelled(&self) -> i32 {
        self.cancelled
    }
    /// <p>The number of individual assessments that were skipped during the assessment run.</p>
    pub fn skipped(&self) -> i32 {
        self.skipped
    }
}
impl ReplicationTaskAssessmentRunResultStatistic {
    /// Creates a new builder-style object to manufacture [`ReplicationTaskAssessmentRunResultStatistic`](crate::types::ReplicationTaskAssessmentRunResultStatistic).
    pub fn builder() -> crate::types::builders::ReplicationTaskAssessmentRunResultStatisticBuilder {
        crate::types::builders::ReplicationTaskAssessmentRunResultStatisticBuilder::default()
    }
}

/// A builder for [`ReplicationTaskAssessmentRunResultStatistic`](crate::types::ReplicationTaskAssessmentRunResultStatistic).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ReplicationTaskAssessmentRunResultStatisticBuilder {
    pub(crate) passed: ::std::option::Option<i32>,
    pub(crate) failed: ::std::option::Option<i32>,
    pub(crate) error: ::std::option::Option<i32>,
    pub(crate) warning: ::std::option::Option<i32>,
    pub(crate) cancelled: ::std::option::Option<i32>,
    pub(crate) skipped: ::std::option::Option<i32>,
}
impl ReplicationTaskAssessmentRunResultStatisticBuilder {
    /// <p>The number of individual assessments that successfully passed all checks in the assessment run.</p>
    pub fn passed(mut self, input: i32) -> Self {
        self.passed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of individual assessments that successfully passed all checks in the assessment run.</p>
    pub fn set_passed(mut self, input: ::std::option::Option<i32>) -> Self {
        self.passed = input;
        self
    }
    /// <p>The number of individual assessments that successfully passed all checks in the assessment run.</p>
    pub fn get_passed(&self) -> &::std::option::Option<i32> {
        &self.passed
    }
    /// <p>The number of individual assessments that failed to meet the criteria defined in the assessment run.</p>
    pub fn failed(mut self, input: i32) -> Self {
        self.failed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of individual assessments that failed to meet the criteria defined in the assessment run.</p>
    pub fn set_failed(mut self, input: ::std::option::Option<i32>) -> Self {
        self.failed = input;
        self
    }
    /// <p>The number of individual assessments that failed to meet the criteria defined in the assessment run.</p>
    pub fn get_failed(&self) -> &::std::option::Option<i32> {
        &self.failed
    }
    /// <p>The number of individual assessments that encountered a critical error and could not complete properly.</p>
    pub fn error(mut self, input: i32) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of individual assessments that encountered a critical error and could not complete properly.</p>
    pub fn set_error(mut self, input: ::std::option::Option<i32>) -> Self {
        self.error = input;
        self
    }
    /// <p>The number of individual assessments that encountered a critical error and could not complete properly.</p>
    pub fn get_error(&self) -> &::std::option::Option<i32> {
        &self.error
    }
    /// <p>Indicates that the recent completed AssessmentRun triggered a warning.</p>
    pub fn warning(mut self, input: i32) -> Self {
        self.warning = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates that the recent completed AssessmentRun triggered a warning.</p>
    pub fn set_warning(mut self, input: ::std::option::Option<i32>) -> Self {
        self.warning = input;
        self
    }
    /// <p>Indicates that the recent completed AssessmentRun triggered a warning.</p>
    pub fn get_warning(&self) -> &::std::option::Option<i32> {
        &self.warning
    }
    /// <p>The number of individual assessments that were cancelled during the assessment run.</p>
    pub fn cancelled(mut self, input: i32) -> Self {
        self.cancelled = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of individual assessments that were cancelled during the assessment run.</p>
    pub fn set_cancelled(mut self, input: ::std::option::Option<i32>) -> Self {
        self.cancelled = input;
        self
    }
    /// <p>The number of individual assessments that were cancelled during the assessment run.</p>
    pub fn get_cancelled(&self) -> &::std::option::Option<i32> {
        &self.cancelled
    }
    /// <p>The number of individual assessments that were skipped during the assessment run.</p>
    pub fn skipped(mut self, input: i32) -> Self {
        self.skipped = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of individual assessments that were skipped during the assessment run.</p>
    pub fn set_skipped(mut self, input: ::std::option::Option<i32>) -> Self {
        self.skipped = input;
        self
    }
    /// <p>The number of individual assessments that were skipped during the assessment run.</p>
    pub fn get_skipped(&self) -> &::std::option::Option<i32> {
        &self.skipped
    }
    /// Consumes the builder and constructs a [`ReplicationTaskAssessmentRunResultStatistic`](crate::types::ReplicationTaskAssessmentRunResultStatistic).
    pub fn build(self) -> crate::types::ReplicationTaskAssessmentRunResultStatistic {
        crate::types::ReplicationTaskAssessmentRunResultStatistic {
            passed: self.passed.unwrap_or_default(),
            failed: self.failed.unwrap_or_default(),
            error: self.error.unwrap_or_default(),
            warning: self.warning.unwrap_or_default(),
            cancelled: self.cancelled.unwrap_or_default(),
            skipped: self.skipped.unwrap_or_default(),
        }
    }
}
