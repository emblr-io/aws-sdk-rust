// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The results returned in <code>describe-replications</code> to display the results of the premigration assessment from the replication configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PremigrationAssessmentStatus {
    /// <p>The Amazon Resource Name (ARN) of this assessment run.</p>
    pub premigration_assessment_run_arn: ::std::option::Option<::std::string::String>,
    /// <p>A configurable setting you can set to <code>true</code> (the defualt setting) or <code>false</code>. Use this setting to to stop the replication from starting automatically if the assessment fails. This can help you evaluate the issue that is preventing the replication from running successfully.</p>
    pub fail_on_assessment_failure: bool,
    /// <p>This describes the assessment run status. The status can be one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>cancelling</code>: The assessment run was canceled.</p></li>
    /// <li>
    /// <p><code>deleting</code>: The assessment run was deleted.</p></li>
    /// <li>
    /// <p><code>failed</code>: At least one individual assessment completed with a failed status.</p></li>
    /// <li>
    /// <p><code>error-provisioning</code>: An internal error occurred while resources were provisioned (during the <code>provisioning</code> status).</p></li>
    /// <li>
    /// <p><code>error-executing</code> An internal error occurred while individual assessments ran (during the <code>running</code> status).</p></li>
    /// <li>
    /// <p><code>invalid state</code>: The assessment run is in an unknown state.</p></li>
    /// <li>
    /// <p><code>passed</code>: All individual assessments have completed and none have a failed status.</p></li>
    /// <li>
    /// <p><code>provisioning</code>: The resources required to run individual assessments are being provisioned.</p></li>
    /// <li>
    /// <p><code>running</code>: Individual assessments are being run.</p></li>
    /// <li>
    /// <p><code>starting</code>: The assessment run is starting, but resources are not yet being provisioned for individual assessments.</p></li>
    /// <li>
    /// <p><code>warning</code>: At least one individual assessment completed with a warning status.</p></li>
    /// </ul>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>The date which the assessment run was created.</p>
    pub premigration_assessment_run_creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The progress values reported by the <code>AssessmentProgress</code> response element.</p>
    pub assessment_progress: ::std::option::Option<crate::types::ReplicationTaskAssessmentRunProgress>,
    /// <p>The last message generated by an individual assessment failure.</p>
    pub last_failure_message: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon S3 bucket that Database Migration Service Serverless created to store the results of this assessment run.</p>
    pub result_location_bucket: ::std::option::Option<::std::string::String>,
    /// <p>The folder within an Amazon S3 bucket where you want Database Migration Service to store the results of this assessment run.</p>
    pub result_location_folder: ::std::option::Option<::std::string::String>,
    /// <p>The supported values are <code>SSE_KMS</code> and <code>SSE_S3</code>. If these values are not provided, then the files are not encrypted at rest. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3.html#CHAP_Target.S3.KMSKeys">Creating Amazon Web Services KMS keys to encrypt Amazon S3 target objects</a>.</p>
    pub result_encryption_mode: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of a custom KMS encryption key that you specify when you set <code>ResultEncryptionMode</code> to <code>SSE_KMS</code>.</p>
    pub result_kms_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The object containing the result statistics for a completed assessment run.</p>
    pub result_statistic: ::std::option::Option<crate::types::ReplicationTaskAssessmentRunResultStatistic>,
}
impl PremigrationAssessmentStatus {
    /// <p>The Amazon Resource Name (ARN) of this assessment run.</p>
    pub fn premigration_assessment_run_arn(&self) -> ::std::option::Option<&str> {
        self.premigration_assessment_run_arn.as_deref()
    }
    /// <p>A configurable setting you can set to <code>true</code> (the defualt setting) or <code>false</code>. Use this setting to to stop the replication from starting automatically if the assessment fails. This can help you evaluate the issue that is preventing the replication from running successfully.</p>
    pub fn fail_on_assessment_failure(&self) -> bool {
        self.fail_on_assessment_failure
    }
    /// <p>This describes the assessment run status. The status can be one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>cancelling</code>: The assessment run was canceled.</p></li>
    /// <li>
    /// <p><code>deleting</code>: The assessment run was deleted.</p></li>
    /// <li>
    /// <p><code>failed</code>: At least one individual assessment completed with a failed status.</p></li>
    /// <li>
    /// <p><code>error-provisioning</code>: An internal error occurred while resources were provisioned (during the <code>provisioning</code> status).</p></li>
    /// <li>
    /// <p><code>error-executing</code> An internal error occurred while individual assessments ran (during the <code>running</code> status).</p></li>
    /// <li>
    /// <p><code>invalid state</code>: The assessment run is in an unknown state.</p></li>
    /// <li>
    /// <p><code>passed</code>: All individual assessments have completed and none have a failed status.</p></li>
    /// <li>
    /// <p><code>provisioning</code>: The resources required to run individual assessments are being provisioned.</p></li>
    /// <li>
    /// <p><code>running</code>: Individual assessments are being run.</p></li>
    /// <li>
    /// <p><code>starting</code>: The assessment run is starting, but resources are not yet being provisioned for individual assessments.</p></li>
    /// <li>
    /// <p><code>warning</code>: At least one individual assessment completed with a warning status.</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The date which the assessment run was created.</p>
    pub fn premigration_assessment_run_creation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.premigration_assessment_run_creation_date.as_ref()
    }
    /// <p>The progress values reported by the <code>AssessmentProgress</code> response element.</p>
    pub fn assessment_progress(&self) -> ::std::option::Option<&crate::types::ReplicationTaskAssessmentRunProgress> {
        self.assessment_progress.as_ref()
    }
    /// <p>The last message generated by an individual assessment failure.</p>
    pub fn last_failure_message(&self) -> ::std::option::Option<&str> {
        self.last_failure_message.as_deref()
    }
    /// <p>The Amazon S3 bucket that Database Migration Service Serverless created to store the results of this assessment run.</p>
    pub fn result_location_bucket(&self) -> ::std::option::Option<&str> {
        self.result_location_bucket.as_deref()
    }
    /// <p>The folder within an Amazon S3 bucket where you want Database Migration Service to store the results of this assessment run.</p>
    pub fn result_location_folder(&self) -> ::std::option::Option<&str> {
        self.result_location_folder.as_deref()
    }
    /// <p>The supported values are <code>SSE_KMS</code> and <code>SSE_S3</code>. If these values are not provided, then the files are not encrypted at rest. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3.html#CHAP_Target.S3.KMSKeys">Creating Amazon Web Services KMS keys to encrypt Amazon S3 target objects</a>.</p>
    pub fn result_encryption_mode(&self) -> ::std::option::Option<&str> {
        self.result_encryption_mode.as_deref()
    }
    /// <p>The ARN of a custom KMS encryption key that you specify when you set <code>ResultEncryptionMode</code> to <code>SSE_KMS</code>.</p>
    pub fn result_kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.result_kms_key_arn.as_deref()
    }
    /// <p>The object containing the result statistics for a completed assessment run.</p>
    pub fn result_statistic(&self) -> ::std::option::Option<&crate::types::ReplicationTaskAssessmentRunResultStatistic> {
        self.result_statistic.as_ref()
    }
}
impl PremigrationAssessmentStatus {
    /// Creates a new builder-style object to manufacture [`PremigrationAssessmentStatus`](crate::types::PremigrationAssessmentStatus).
    pub fn builder() -> crate::types::builders::PremigrationAssessmentStatusBuilder {
        crate::types::builders::PremigrationAssessmentStatusBuilder::default()
    }
}

/// A builder for [`PremigrationAssessmentStatus`](crate::types::PremigrationAssessmentStatus).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PremigrationAssessmentStatusBuilder {
    pub(crate) premigration_assessment_run_arn: ::std::option::Option<::std::string::String>,
    pub(crate) fail_on_assessment_failure: ::std::option::Option<bool>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) premigration_assessment_run_creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) assessment_progress: ::std::option::Option<crate::types::ReplicationTaskAssessmentRunProgress>,
    pub(crate) last_failure_message: ::std::option::Option<::std::string::String>,
    pub(crate) result_location_bucket: ::std::option::Option<::std::string::String>,
    pub(crate) result_location_folder: ::std::option::Option<::std::string::String>,
    pub(crate) result_encryption_mode: ::std::option::Option<::std::string::String>,
    pub(crate) result_kms_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) result_statistic: ::std::option::Option<crate::types::ReplicationTaskAssessmentRunResultStatistic>,
}
impl PremigrationAssessmentStatusBuilder {
    /// <p>The Amazon Resource Name (ARN) of this assessment run.</p>
    pub fn premigration_assessment_run_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.premigration_assessment_run_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of this assessment run.</p>
    pub fn set_premigration_assessment_run_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.premigration_assessment_run_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of this assessment run.</p>
    pub fn get_premigration_assessment_run_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.premigration_assessment_run_arn
    }
    /// <p>A configurable setting you can set to <code>true</code> (the defualt setting) or <code>false</code>. Use this setting to to stop the replication from starting automatically if the assessment fails. This can help you evaluate the issue that is preventing the replication from running successfully.</p>
    pub fn fail_on_assessment_failure(mut self, input: bool) -> Self {
        self.fail_on_assessment_failure = ::std::option::Option::Some(input);
        self
    }
    /// <p>A configurable setting you can set to <code>true</code> (the defualt setting) or <code>false</code>. Use this setting to to stop the replication from starting automatically if the assessment fails. This can help you evaluate the issue that is preventing the replication from running successfully.</p>
    pub fn set_fail_on_assessment_failure(mut self, input: ::std::option::Option<bool>) -> Self {
        self.fail_on_assessment_failure = input;
        self
    }
    /// <p>A configurable setting you can set to <code>true</code> (the defualt setting) or <code>false</code>. Use this setting to to stop the replication from starting automatically if the assessment fails. This can help you evaluate the issue that is preventing the replication from running successfully.</p>
    pub fn get_fail_on_assessment_failure(&self) -> &::std::option::Option<bool> {
        &self.fail_on_assessment_failure
    }
    /// <p>This describes the assessment run status. The status can be one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>cancelling</code>: The assessment run was canceled.</p></li>
    /// <li>
    /// <p><code>deleting</code>: The assessment run was deleted.</p></li>
    /// <li>
    /// <p><code>failed</code>: At least one individual assessment completed with a failed status.</p></li>
    /// <li>
    /// <p><code>error-provisioning</code>: An internal error occurred while resources were provisioned (during the <code>provisioning</code> status).</p></li>
    /// <li>
    /// <p><code>error-executing</code> An internal error occurred while individual assessments ran (during the <code>running</code> status).</p></li>
    /// <li>
    /// <p><code>invalid state</code>: The assessment run is in an unknown state.</p></li>
    /// <li>
    /// <p><code>passed</code>: All individual assessments have completed and none have a failed status.</p></li>
    /// <li>
    /// <p><code>provisioning</code>: The resources required to run individual assessments are being provisioned.</p></li>
    /// <li>
    /// <p><code>running</code>: Individual assessments are being run.</p></li>
    /// <li>
    /// <p><code>starting</code>: The assessment run is starting, but resources are not yet being provisioned for individual assessments.</p></li>
    /// <li>
    /// <p><code>warning</code>: At least one individual assessment completed with a warning status.</p></li>
    /// </ul>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This describes the assessment run status. The status can be one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>cancelling</code>: The assessment run was canceled.</p></li>
    /// <li>
    /// <p><code>deleting</code>: The assessment run was deleted.</p></li>
    /// <li>
    /// <p><code>failed</code>: At least one individual assessment completed with a failed status.</p></li>
    /// <li>
    /// <p><code>error-provisioning</code>: An internal error occurred while resources were provisioned (during the <code>provisioning</code> status).</p></li>
    /// <li>
    /// <p><code>error-executing</code> An internal error occurred while individual assessments ran (during the <code>running</code> status).</p></li>
    /// <li>
    /// <p><code>invalid state</code>: The assessment run is in an unknown state.</p></li>
    /// <li>
    /// <p><code>passed</code>: All individual assessments have completed and none have a failed status.</p></li>
    /// <li>
    /// <p><code>provisioning</code>: The resources required to run individual assessments are being provisioned.</p></li>
    /// <li>
    /// <p><code>running</code>: Individual assessments are being run.</p></li>
    /// <li>
    /// <p><code>starting</code>: The assessment run is starting, but resources are not yet being provisioned for individual assessments.</p></li>
    /// <li>
    /// <p><code>warning</code>: At least one individual assessment completed with a warning status.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>This describes the assessment run status. The status can be one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>cancelling</code>: The assessment run was canceled.</p></li>
    /// <li>
    /// <p><code>deleting</code>: The assessment run was deleted.</p></li>
    /// <li>
    /// <p><code>failed</code>: At least one individual assessment completed with a failed status.</p></li>
    /// <li>
    /// <p><code>error-provisioning</code>: An internal error occurred while resources were provisioned (during the <code>provisioning</code> status).</p></li>
    /// <li>
    /// <p><code>error-executing</code> An internal error occurred while individual assessments ran (during the <code>running</code> status).</p></li>
    /// <li>
    /// <p><code>invalid state</code>: The assessment run is in an unknown state.</p></li>
    /// <li>
    /// <p><code>passed</code>: All individual assessments have completed and none have a failed status.</p></li>
    /// <li>
    /// <p><code>provisioning</code>: The resources required to run individual assessments are being provisioned.</p></li>
    /// <li>
    /// <p><code>running</code>: Individual assessments are being run.</p></li>
    /// <li>
    /// <p><code>starting</code>: The assessment run is starting, but resources are not yet being provisioned for individual assessments.</p></li>
    /// <li>
    /// <p><code>warning</code>: At least one individual assessment completed with a warning status.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The date which the assessment run was created.</p>
    pub fn premigration_assessment_run_creation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.premigration_assessment_run_creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date which the assessment run was created.</p>
    pub fn set_premigration_assessment_run_creation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.premigration_assessment_run_creation_date = input;
        self
    }
    /// <p>The date which the assessment run was created.</p>
    pub fn get_premigration_assessment_run_creation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.premigration_assessment_run_creation_date
    }
    /// <p>The progress values reported by the <code>AssessmentProgress</code> response element.</p>
    pub fn assessment_progress(mut self, input: crate::types::ReplicationTaskAssessmentRunProgress) -> Self {
        self.assessment_progress = ::std::option::Option::Some(input);
        self
    }
    /// <p>The progress values reported by the <code>AssessmentProgress</code> response element.</p>
    pub fn set_assessment_progress(mut self, input: ::std::option::Option<crate::types::ReplicationTaskAssessmentRunProgress>) -> Self {
        self.assessment_progress = input;
        self
    }
    /// <p>The progress values reported by the <code>AssessmentProgress</code> response element.</p>
    pub fn get_assessment_progress(&self) -> &::std::option::Option<crate::types::ReplicationTaskAssessmentRunProgress> {
        &self.assessment_progress
    }
    /// <p>The last message generated by an individual assessment failure.</p>
    pub fn last_failure_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_failure_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The last message generated by an individual assessment failure.</p>
    pub fn set_last_failure_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_failure_message = input;
        self
    }
    /// <p>The last message generated by an individual assessment failure.</p>
    pub fn get_last_failure_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_failure_message
    }
    /// <p>The Amazon S3 bucket that Database Migration Service Serverless created to store the results of this assessment run.</p>
    pub fn result_location_bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.result_location_bucket = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 bucket that Database Migration Service Serverless created to store the results of this assessment run.</p>
    pub fn set_result_location_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.result_location_bucket = input;
        self
    }
    /// <p>The Amazon S3 bucket that Database Migration Service Serverless created to store the results of this assessment run.</p>
    pub fn get_result_location_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.result_location_bucket
    }
    /// <p>The folder within an Amazon S3 bucket where you want Database Migration Service to store the results of this assessment run.</p>
    pub fn result_location_folder(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.result_location_folder = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The folder within an Amazon S3 bucket where you want Database Migration Service to store the results of this assessment run.</p>
    pub fn set_result_location_folder(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.result_location_folder = input;
        self
    }
    /// <p>The folder within an Amazon S3 bucket where you want Database Migration Service to store the results of this assessment run.</p>
    pub fn get_result_location_folder(&self) -> &::std::option::Option<::std::string::String> {
        &self.result_location_folder
    }
    /// <p>The supported values are <code>SSE_KMS</code> and <code>SSE_S3</code>. If these values are not provided, then the files are not encrypted at rest. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3.html#CHAP_Target.S3.KMSKeys">Creating Amazon Web Services KMS keys to encrypt Amazon S3 target objects</a>.</p>
    pub fn result_encryption_mode(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.result_encryption_mode = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The supported values are <code>SSE_KMS</code> and <code>SSE_S3</code>. If these values are not provided, then the files are not encrypted at rest. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3.html#CHAP_Target.S3.KMSKeys">Creating Amazon Web Services KMS keys to encrypt Amazon S3 target objects</a>.</p>
    pub fn set_result_encryption_mode(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.result_encryption_mode = input;
        self
    }
    /// <p>The supported values are <code>SSE_KMS</code> and <code>SSE_S3</code>. If these values are not provided, then the files are not encrypted at rest. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3.html#CHAP_Target.S3.KMSKeys">Creating Amazon Web Services KMS keys to encrypt Amazon S3 target objects</a>.</p>
    pub fn get_result_encryption_mode(&self) -> &::std::option::Option<::std::string::String> {
        &self.result_encryption_mode
    }
    /// <p>The ARN of a custom KMS encryption key that you specify when you set <code>ResultEncryptionMode</code> to <code>SSE_KMS</code>.</p>
    pub fn result_kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.result_kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of a custom KMS encryption key that you specify when you set <code>ResultEncryptionMode</code> to <code>SSE_KMS</code>.</p>
    pub fn set_result_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.result_kms_key_arn = input;
        self
    }
    /// <p>The ARN of a custom KMS encryption key that you specify when you set <code>ResultEncryptionMode</code> to <code>SSE_KMS</code>.</p>
    pub fn get_result_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.result_kms_key_arn
    }
    /// <p>The object containing the result statistics for a completed assessment run.</p>
    pub fn result_statistic(mut self, input: crate::types::ReplicationTaskAssessmentRunResultStatistic) -> Self {
        self.result_statistic = ::std::option::Option::Some(input);
        self
    }
    /// <p>The object containing the result statistics for a completed assessment run.</p>
    pub fn set_result_statistic(mut self, input: ::std::option::Option<crate::types::ReplicationTaskAssessmentRunResultStatistic>) -> Self {
        self.result_statistic = input;
        self
    }
    /// <p>The object containing the result statistics for a completed assessment run.</p>
    pub fn get_result_statistic(&self) -> &::std::option::Option<crate::types::ReplicationTaskAssessmentRunResultStatistic> {
        &self.result_statistic
    }
    /// Consumes the builder and constructs a [`PremigrationAssessmentStatus`](crate::types::PremigrationAssessmentStatus).
    pub fn build(self) -> crate::types::PremigrationAssessmentStatus {
        crate::types::PremigrationAssessmentStatus {
            premigration_assessment_run_arn: self.premigration_assessment_run_arn,
            fail_on_assessment_failure: self.fail_on_assessment_failure.unwrap_or_default(),
            status: self.status,
            premigration_assessment_run_creation_date: self.premigration_assessment_run_creation_date,
            assessment_progress: self.assessment_progress,
            last_failure_message: self.last_failure_message,
            result_location_bucket: self.result_location_bucket,
            result_location_folder: self.result_location_folder,
            result_encryption_mode: self.result_encryption_mode,
            result_kms_key_arn: self.result_kms_key_arn,
            result_statistic: self.result_statistic,
        }
    }
}
