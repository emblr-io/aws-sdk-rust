// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the settings required for kerberos authentication when creating the replication instance.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KerberosAuthenticationSettings {
    /// <p>Specifies the ID of the secret that stores the key cache file required for kerberos authentication.</p>
    pub key_cache_secret_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the Amazon Resource Name (ARN) of the IAM role that grants Amazon Web Services DMS access to the secret containing key cache file for the kerberos authentication.</p>
    pub key_cache_secret_iam_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the contents of krb5 configuration file required for kerberos authentication.</p>
    pub krb5_file_contents: ::std::option::Option<::std::string::String>,
}
impl KerberosAuthenticationSettings {
    /// <p>Specifies the ID of the secret that stores the key cache file required for kerberos authentication.</p>
    pub fn key_cache_secret_id(&self) -> ::std::option::Option<&str> {
        self.key_cache_secret_id.as_deref()
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the IAM role that grants Amazon Web Services DMS access to the secret containing key cache file for the kerberos authentication.</p>
    pub fn key_cache_secret_iam_arn(&self) -> ::std::option::Option<&str> {
        self.key_cache_secret_iam_arn.as_deref()
    }
    /// <p>Specifies the contents of krb5 configuration file required for kerberos authentication.</p>
    pub fn krb5_file_contents(&self) -> ::std::option::Option<&str> {
        self.krb5_file_contents.as_deref()
    }
}
impl KerberosAuthenticationSettings {
    /// Creates a new builder-style object to manufacture [`KerberosAuthenticationSettings`](crate::types::KerberosAuthenticationSettings).
    pub fn builder() -> crate::types::builders::KerberosAuthenticationSettingsBuilder {
        crate::types::builders::KerberosAuthenticationSettingsBuilder::default()
    }
}

/// A builder for [`KerberosAuthenticationSettings`](crate::types::KerberosAuthenticationSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct KerberosAuthenticationSettingsBuilder {
    pub(crate) key_cache_secret_id: ::std::option::Option<::std::string::String>,
    pub(crate) key_cache_secret_iam_arn: ::std::option::Option<::std::string::String>,
    pub(crate) krb5_file_contents: ::std::option::Option<::std::string::String>,
}
impl KerberosAuthenticationSettingsBuilder {
    /// <p>Specifies the ID of the secret that stores the key cache file required for kerberos authentication.</p>
    pub fn key_cache_secret_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_cache_secret_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the ID of the secret that stores the key cache file required for kerberos authentication.</p>
    pub fn set_key_cache_secret_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_cache_secret_id = input;
        self
    }
    /// <p>Specifies the ID of the secret that stores the key cache file required for kerberos authentication.</p>
    pub fn get_key_cache_secret_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_cache_secret_id
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the IAM role that grants Amazon Web Services DMS access to the secret containing key cache file for the kerberos authentication.</p>
    pub fn key_cache_secret_iam_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_cache_secret_iam_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the IAM role that grants Amazon Web Services DMS access to the secret containing key cache file for the kerberos authentication.</p>
    pub fn set_key_cache_secret_iam_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_cache_secret_iam_arn = input;
        self
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the IAM role that grants Amazon Web Services DMS access to the secret containing key cache file for the kerberos authentication.</p>
    pub fn get_key_cache_secret_iam_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_cache_secret_iam_arn
    }
    /// <p>Specifies the contents of krb5 configuration file required for kerberos authentication.</p>
    pub fn krb5_file_contents(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.krb5_file_contents = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the contents of krb5 configuration file required for kerberos authentication.</p>
    pub fn set_krb5_file_contents(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.krb5_file_contents = input;
        self
    }
    /// <p>Specifies the contents of krb5 configuration file required for kerberos authentication.</p>
    pub fn get_krb5_file_contents(&self) -> &::std::option::Option<::std::string::String> {
        &self.krb5_file_contents
    }
    /// Consumes the builder and constructs a [`KerberosAuthenticationSettings`](crate::types::KerberosAuthenticationSettings).
    pub fn build(self) -> crate::types::KerberosAuthenticationSettings {
        crate::types::KerberosAuthenticationSettings {
            key_cache_secret_id: self.key_cache_secret_id,
            key_cache_secret_iam_arn: self.key_cache_secret_iam_arn,
            krb5_file_contents: self.krb5_file_contents,
        }
    }
}
