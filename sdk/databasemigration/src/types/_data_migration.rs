// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This object provides information about a DMS data migration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DataMigration {
    /// <p>The user-friendly name for the data migration.</p>
    pub data_migration_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) that identifies this replication.</p>
    pub data_migration_arn: ::std::option::Option<::std::string::String>,
    /// <p>The UTC time when DMS created the data migration.</p>
    pub data_migration_create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The UTC time when DMS started the data migration.</p>
    pub data_migration_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The UTC time when data migration ended.</p>
    pub data_migration_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The IAM role that the data migration uses to access Amazon Web Services resources.</p>
    pub service_access_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the data migration's associated migration project.</p>
    pub migration_project_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the data migration is full-load only, change data capture (CDC) only, or full-load and CDC.</p>
    pub data_migration_type: ::std::option::Option<crate::types::MigrationTypeValue>,
    /// <p>Specifies CloudWatch settings and selection rules for the data migration.</p>
    pub data_migration_settings: ::std::option::Option<crate::types::DataMigrationSettings>,
    /// <p>Specifies information about the data migration's source data provider.</p>
    pub source_data_settings: ::std::option::Option<::std::vec::Vec<crate::types::SourceDataSetting>>,
    /// <p>Specifies information about the data migration's target data provider.</p>
    pub target_data_settings: ::std::option::Option<::std::vec::Vec<crate::types::TargetDataSetting>>,
    /// <p>Provides information about the data migration's run, including start and stop time, latency, and data migration progress.</p>
    pub data_migration_statistics: ::std::option::Option<crate::types::DataMigrationStatistics>,
    /// <p>The current status of the data migration.</p>
    pub data_migration_status: ::std::option::Option<::std::string::String>,
    /// <p>The IP addresses of the endpoints for the data migration.</p>
    pub public_ip_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The CIDR blocks of the endpoints for the data migration.</p>
    pub data_migration_cidr_blocks: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Information about the data migration's most recent error or failure.</p>
    pub last_failure_message: ::std::option::Option<::std::string::String>,
    /// <p>The reason the data migration last stopped.</p>
    pub stop_reason: ::std::option::Option<::std::string::String>,
}
impl DataMigration {
    /// <p>The user-friendly name for the data migration.</p>
    pub fn data_migration_name(&self) -> ::std::option::Option<&str> {
        self.data_migration_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) that identifies this replication.</p>
    pub fn data_migration_arn(&self) -> ::std::option::Option<&str> {
        self.data_migration_arn.as_deref()
    }
    /// <p>The UTC time when DMS created the data migration.</p>
    pub fn data_migration_create_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.data_migration_create_time.as_ref()
    }
    /// <p>The UTC time when DMS started the data migration.</p>
    pub fn data_migration_start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.data_migration_start_time.as_ref()
    }
    /// <p>The UTC time when data migration ended.</p>
    pub fn data_migration_end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.data_migration_end_time.as_ref()
    }
    /// <p>The IAM role that the data migration uses to access Amazon Web Services resources.</p>
    pub fn service_access_role_arn(&self) -> ::std::option::Option<&str> {
        self.service_access_role_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the data migration's associated migration project.</p>
    pub fn migration_project_arn(&self) -> ::std::option::Option<&str> {
        self.migration_project_arn.as_deref()
    }
    /// <p>Specifies whether the data migration is full-load only, change data capture (CDC) only, or full-load and CDC.</p>
    pub fn data_migration_type(&self) -> ::std::option::Option<&crate::types::MigrationTypeValue> {
        self.data_migration_type.as_ref()
    }
    /// <p>Specifies CloudWatch settings and selection rules for the data migration.</p>
    pub fn data_migration_settings(&self) -> ::std::option::Option<&crate::types::DataMigrationSettings> {
        self.data_migration_settings.as_ref()
    }
    /// <p>Specifies information about the data migration's source data provider.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.source_data_settings.is_none()`.
    pub fn source_data_settings(&self) -> &[crate::types::SourceDataSetting] {
        self.source_data_settings.as_deref().unwrap_or_default()
    }
    /// <p>Specifies information about the data migration's target data provider.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.target_data_settings.is_none()`.
    pub fn target_data_settings(&self) -> &[crate::types::TargetDataSetting] {
        self.target_data_settings.as_deref().unwrap_or_default()
    }
    /// <p>Provides information about the data migration's run, including start and stop time, latency, and data migration progress.</p>
    pub fn data_migration_statistics(&self) -> ::std::option::Option<&crate::types::DataMigrationStatistics> {
        self.data_migration_statistics.as_ref()
    }
    /// <p>The current status of the data migration.</p>
    pub fn data_migration_status(&self) -> ::std::option::Option<&str> {
        self.data_migration_status.as_deref()
    }
    /// <p>The IP addresses of the endpoints for the data migration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.public_ip_addresses.is_none()`.
    pub fn public_ip_addresses(&self) -> &[::std::string::String] {
        self.public_ip_addresses.as_deref().unwrap_or_default()
    }
    /// <p>The CIDR blocks of the endpoints for the data migration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.data_migration_cidr_blocks.is_none()`.
    pub fn data_migration_cidr_blocks(&self) -> &[::std::string::String] {
        self.data_migration_cidr_blocks.as_deref().unwrap_or_default()
    }
    /// <p>Information about the data migration's most recent error or failure.</p>
    pub fn last_failure_message(&self) -> ::std::option::Option<&str> {
        self.last_failure_message.as_deref()
    }
    /// <p>The reason the data migration last stopped.</p>
    pub fn stop_reason(&self) -> ::std::option::Option<&str> {
        self.stop_reason.as_deref()
    }
}
impl ::std::fmt::Debug for DataMigration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DataMigration");
        formatter.field("data_migration_name", &self.data_migration_name);
        formatter.field("data_migration_arn", &self.data_migration_arn);
        formatter.field("data_migration_create_time", &self.data_migration_create_time);
        formatter.field("data_migration_start_time", &self.data_migration_start_time);
        formatter.field("data_migration_end_time", &self.data_migration_end_time);
        formatter.field("service_access_role_arn", &self.service_access_role_arn);
        formatter.field("migration_project_arn", &self.migration_project_arn);
        formatter.field("data_migration_type", &self.data_migration_type);
        formatter.field("data_migration_settings", &self.data_migration_settings);
        formatter.field("source_data_settings", &self.source_data_settings);
        formatter.field("target_data_settings", &self.target_data_settings);
        formatter.field("data_migration_statistics", &self.data_migration_statistics);
        formatter.field("data_migration_status", &self.data_migration_status);
        formatter.field("public_ip_addresses", &"*** Sensitive Data Redacted ***");
        formatter.field("data_migration_cidr_blocks", &self.data_migration_cidr_blocks);
        formatter.field("last_failure_message", &self.last_failure_message);
        formatter.field("stop_reason", &self.stop_reason);
        formatter.finish()
    }
}
impl DataMigration {
    /// Creates a new builder-style object to manufacture [`DataMigration`](crate::types::DataMigration).
    pub fn builder() -> crate::types::builders::DataMigrationBuilder {
        crate::types::builders::DataMigrationBuilder::default()
    }
}

/// A builder for [`DataMigration`](crate::types::DataMigration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct DataMigrationBuilder {
    pub(crate) data_migration_name: ::std::option::Option<::std::string::String>,
    pub(crate) data_migration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) data_migration_create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) data_migration_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) data_migration_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) service_access_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) migration_project_arn: ::std::option::Option<::std::string::String>,
    pub(crate) data_migration_type: ::std::option::Option<crate::types::MigrationTypeValue>,
    pub(crate) data_migration_settings: ::std::option::Option<crate::types::DataMigrationSettings>,
    pub(crate) source_data_settings: ::std::option::Option<::std::vec::Vec<crate::types::SourceDataSetting>>,
    pub(crate) target_data_settings: ::std::option::Option<::std::vec::Vec<crate::types::TargetDataSetting>>,
    pub(crate) data_migration_statistics: ::std::option::Option<crate::types::DataMigrationStatistics>,
    pub(crate) data_migration_status: ::std::option::Option<::std::string::String>,
    pub(crate) public_ip_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) data_migration_cidr_blocks: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) last_failure_message: ::std::option::Option<::std::string::String>,
    pub(crate) stop_reason: ::std::option::Option<::std::string::String>,
}
impl DataMigrationBuilder {
    /// <p>The user-friendly name for the data migration.</p>
    pub fn data_migration_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_migration_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user-friendly name for the data migration.</p>
    pub fn set_data_migration_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_migration_name = input;
        self
    }
    /// <p>The user-friendly name for the data migration.</p>
    pub fn get_data_migration_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_migration_name
    }
    /// <p>The Amazon Resource Name (ARN) that identifies this replication.</p>
    pub fn data_migration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_migration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that identifies this replication.</p>
    pub fn set_data_migration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_migration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that identifies this replication.</p>
    pub fn get_data_migration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_migration_arn
    }
    /// <p>The UTC time when DMS created the data migration.</p>
    pub fn data_migration_create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.data_migration_create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The UTC time when DMS created the data migration.</p>
    pub fn set_data_migration_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.data_migration_create_time = input;
        self
    }
    /// <p>The UTC time when DMS created the data migration.</p>
    pub fn get_data_migration_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.data_migration_create_time
    }
    /// <p>The UTC time when DMS started the data migration.</p>
    pub fn data_migration_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.data_migration_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The UTC time when DMS started the data migration.</p>
    pub fn set_data_migration_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.data_migration_start_time = input;
        self
    }
    /// <p>The UTC time when DMS started the data migration.</p>
    pub fn get_data_migration_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.data_migration_start_time
    }
    /// <p>The UTC time when data migration ended.</p>
    pub fn data_migration_end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.data_migration_end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The UTC time when data migration ended.</p>
    pub fn set_data_migration_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.data_migration_end_time = input;
        self
    }
    /// <p>The UTC time when data migration ended.</p>
    pub fn get_data_migration_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.data_migration_end_time
    }
    /// <p>The IAM role that the data migration uses to access Amazon Web Services resources.</p>
    pub fn service_access_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_access_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role that the data migration uses to access Amazon Web Services resources.</p>
    pub fn set_service_access_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_access_role_arn = input;
        self
    }
    /// <p>The IAM role that the data migration uses to access Amazon Web Services resources.</p>
    pub fn get_service_access_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_access_role_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the data migration's associated migration project.</p>
    pub fn migration_project_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.migration_project_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the data migration's associated migration project.</p>
    pub fn set_migration_project_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.migration_project_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the data migration's associated migration project.</p>
    pub fn get_migration_project_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.migration_project_arn
    }
    /// <p>Specifies whether the data migration is full-load only, change data capture (CDC) only, or full-load and CDC.</p>
    pub fn data_migration_type(mut self, input: crate::types::MigrationTypeValue) -> Self {
        self.data_migration_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the data migration is full-load only, change data capture (CDC) only, or full-load and CDC.</p>
    pub fn set_data_migration_type(mut self, input: ::std::option::Option<crate::types::MigrationTypeValue>) -> Self {
        self.data_migration_type = input;
        self
    }
    /// <p>Specifies whether the data migration is full-load only, change data capture (CDC) only, or full-load and CDC.</p>
    pub fn get_data_migration_type(&self) -> &::std::option::Option<crate::types::MigrationTypeValue> {
        &self.data_migration_type
    }
    /// <p>Specifies CloudWatch settings and selection rules for the data migration.</p>
    pub fn data_migration_settings(mut self, input: crate::types::DataMigrationSettings) -> Self {
        self.data_migration_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies CloudWatch settings and selection rules for the data migration.</p>
    pub fn set_data_migration_settings(mut self, input: ::std::option::Option<crate::types::DataMigrationSettings>) -> Self {
        self.data_migration_settings = input;
        self
    }
    /// <p>Specifies CloudWatch settings and selection rules for the data migration.</p>
    pub fn get_data_migration_settings(&self) -> &::std::option::Option<crate::types::DataMigrationSettings> {
        &self.data_migration_settings
    }
    /// Appends an item to `source_data_settings`.
    ///
    /// To override the contents of this collection use [`set_source_data_settings`](Self::set_source_data_settings).
    ///
    /// <p>Specifies information about the data migration's source data provider.</p>
    pub fn source_data_settings(mut self, input: crate::types::SourceDataSetting) -> Self {
        let mut v = self.source_data_settings.unwrap_or_default();
        v.push(input);
        self.source_data_settings = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies information about the data migration's source data provider.</p>
    pub fn set_source_data_settings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SourceDataSetting>>) -> Self {
        self.source_data_settings = input;
        self
    }
    /// <p>Specifies information about the data migration's source data provider.</p>
    pub fn get_source_data_settings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SourceDataSetting>> {
        &self.source_data_settings
    }
    /// Appends an item to `target_data_settings`.
    ///
    /// To override the contents of this collection use [`set_target_data_settings`](Self::set_target_data_settings).
    ///
    /// <p>Specifies information about the data migration's target data provider.</p>
    pub fn target_data_settings(mut self, input: crate::types::TargetDataSetting) -> Self {
        let mut v = self.target_data_settings.unwrap_or_default();
        v.push(input);
        self.target_data_settings = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies information about the data migration's target data provider.</p>
    pub fn set_target_data_settings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TargetDataSetting>>) -> Self {
        self.target_data_settings = input;
        self
    }
    /// <p>Specifies information about the data migration's target data provider.</p>
    pub fn get_target_data_settings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TargetDataSetting>> {
        &self.target_data_settings
    }
    /// <p>Provides information about the data migration's run, including start and stop time, latency, and data migration progress.</p>
    pub fn data_migration_statistics(mut self, input: crate::types::DataMigrationStatistics) -> Self {
        self.data_migration_statistics = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides information about the data migration's run, including start and stop time, latency, and data migration progress.</p>
    pub fn set_data_migration_statistics(mut self, input: ::std::option::Option<crate::types::DataMigrationStatistics>) -> Self {
        self.data_migration_statistics = input;
        self
    }
    /// <p>Provides information about the data migration's run, including start and stop time, latency, and data migration progress.</p>
    pub fn get_data_migration_statistics(&self) -> &::std::option::Option<crate::types::DataMigrationStatistics> {
        &self.data_migration_statistics
    }
    /// <p>The current status of the data migration.</p>
    pub fn data_migration_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_migration_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current status of the data migration.</p>
    pub fn set_data_migration_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_migration_status = input;
        self
    }
    /// <p>The current status of the data migration.</p>
    pub fn get_data_migration_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_migration_status
    }
    /// Appends an item to `public_ip_addresses`.
    ///
    /// To override the contents of this collection use [`set_public_ip_addresses`](Self::set_public_ip_addresses).
    ///
    /// <p>The IP addresses of the endpoints for the data migration.</p>
    pub fn public_ip_addresses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.public_ip_addresses.unwrap_or_default();
        v.push(input.into());
        self.public_ip_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IP addresses of the endpoints for the data migration.</p>
    pub fn set_public_ip_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.public_ip_addresses = input;
        self
    }
    /// <p>The IP addresses of the endpoints for the data migration.</p>
    pub fn get_public_ip_addresses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.public_ip_addresses
    }
    /// Appends an item to `data_migration_cidr_blocks`.
    ///
    /// To override the contents of this collection use [`set_data_migration_cidr_blocks`](Self::set_data_migration_cidr_blocks).
    ///
    /// <p>The CIDR blocks of the endpoints for the data migration.</p>
    pub fn data_migration_cidr_blocks(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.data_migration_cidr_blocks.unwrap_or_default();
        v.push(input.into());
        self.data_migration_cidr_blocks = ::std::option::Option::Some(v);
        self
    }
    /// <p>The CIDR blocks of the endpoints for the data migration.</p>
    pub fn set_data_migration_cidr_blocks(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.data_migration_cidr_blocks = input;
        self
    }
    /// <p>The CIDR blocks of the endpoints for the data migration.</p>
    pub fn get_data_migration_cidr_blocks(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.data_migration_cidr_blocks
    }
    /// <p>Information about the data migration's most recent error or failure.</p>
    pub fn last_failure_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_failure_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Information about the data migration's most recent error or failure.</p>
    pub fn set_last_failure_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_failure_message = input;
        self
    }
    /// <p>Information about the data migration's most recent error or failure.</p>
    pub fn get_last_failure_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_failure_message
    }
    /// <p>The reason the data migration last stopped.</p>
    pub fn stop_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stop_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason the data migration last stopped.</p>
    pub fn set_stop_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stop_reason = input;
        self
    }
    /// <p>The reason the data migration last stopped.</p>
    pub fn get_stop_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.stop_reason
    }
    /// Consumes the builder and constructs a [`DataMigration`](crate::types::DataMigration).
    pub fn build(self) -> crate::types::DataMigration {
        crate::types::DataMigration {
            data_migration_name: self.data_migration_name,
            data_migration_arn: self.data_migration_arn,
            data_migration_create_time: self.data_migration_create_time,
            data_migration_start_time: self.data_migration_start_time,
            data_migration_end_time: self.data_migration_end_time,
            service_access_role_arn: self.service_access_role_arn,
            migration_project_arn: self.migration_project_arn,
            data_migration_type: self.data_migration_type,
            data_migration_settings: self.data_migration_settings,
            source_data_settings: self.source_data_settings,
            target_data_settings: self.target_data_settings,
            data_migration_statistics: self.data_migration_statistics,
            data_migration_status: self.data_migration_status,
            public_ip_addresses: self.public_ip_addresses,
            data_migration_cidr_blocks: self.data_migration_cidr_blocks,
            last_failure_message: self.last_failure_message,
            stop_reason: self.stop_reason,
        }
    }
}
impl ::std::fmt::Debug for DataMigrationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DataMigrationBuilder");
        formatter.field("data_migration_name", &self.data_migration_name);
        formatter.field("data_migration_arn", &self.data_migration_arn);
        formatter.field("data_migration_create_time", &self.data_migration_create_time);
        formatter.field("data_migration_start_time", &self.data_migration_start_time);
        formatter.field("data_migration_end_time", &self.data_migration_end_time);
        formatter.field("service_access_role_arn", &self.service_access_role_arn);
        formatter.field("migration_project_arn", &self.migration_project_arn);
        formatter.field("data_migration_type", &self.data_migration_type);
        formatter.field("data_migration_settings", &self.data_migration_settings);
        formatter.field("source_data_settings", &self.source_data_settings);
        formatter.field("target_data_settings", &self.target_data_settings);
        formatter.field("data_migration_statistics", &self.data_migration_statistics);
        formatter.field("data_migration_status", &self.data_migration_status);
        formatter.field("public_ip_addresses", &"*** Sensitive Data Redacted ***");
        formatter.field("data_migration_cidr_blocks", &self.data_migration_cidr_blocks);
        formatter.field("last_failure_message", &self.last_failure_message);
        formatter.field("stop_reason", &self.stop_reason);
        formatter.finish()
    }
}
