// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the data migration run, including start and stop time, latency, and migration progress.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataMigrationStatistics {
    /// <p>The number of tables loaded in the current data migration run.</p>
    pub tables_loaded: i32,
    /// <p>The elapsed duration of the data migration run.</p>
    pub elapsed_time_millis: i64,
    /// <p>The data migration's table loading progress.</p>
    pub tables_loading: i32,
    /// <p>The data migration's progress in the full-load migration phase.</p>
    pub full_load_percentage: i32,
    /// <p>The current latency of the change data capture (CDC) operation.</p>
    pub cdc_latency: i32,
    /// <p>The number of tables that are waiting for processing.</p>
    pub tables_queued: i32,
    /// <p>The number of tables that DMS failed to process.</p>
    pub tables_errored: i32,
    /// <p>The time when the migration started.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time when the migration stopped or failed.</p>
    pub stop_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DataMigrationStatistics {
    /// <p>The number of tables loaded in the current data migration run.</p>
    pub fn tables_loaded(&self) -> i32 {
        self.tables_loaded
    }
    /// <p>The elapsed duration of the data migration run.</p>
    pub fn elapsed_time_millis(&self) -> i64 {
        self.elapsed_time_millis
    }
    /// <p>The data migration's table loading progress.</p>
    pub fn tables_loading(&self) -> i32 {
        self.tables_loading
    }
    /// <p>The data migration's progress in the full-load migration phase.</p>
    pub fn full_load_percentage(&self) -> i32 {
        self.full_load_percentage
    }
    /// <p>The current latency of the change data capture (CDC) operation.</p>
    pub fn cdc_latency(&self) -> i32 {
        self.cdc_latency
    }
    /// <p>The number of tables that are waiting for processing.</p>
    pub fn tables_queued(&self) -> i32 {
        self.tables_queued
    }
    /// <p>The number of tables that DMS failed to process.</p>
    pub fn tables_errored(&self) -> i32 {
        self.tables_errored
    }
    /// <p>The time when the migration started.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The time when the migration stopped or failed.</p>
    pub fn stop_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.stop_time.as_ref()
    }
}
impl DataMigrationStatistics {
    /// Creates a new builder-style object to manufacture [`DataMigrationStatistics`](crate::types::DataMigrationStatistics).
    pub fn builder() -> crate::types::builders::DataMigrationStatisticsBuilder {
        crate::types::builders::DataMigrationStatisticsBuilder::default()
    }
}

/// A builder for [`DataMigrationStatistics`](crate::types::DataMigrationStatistics).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataMigrationStatisticsBuilder {
    pub(crate) tables_loaded: ::std::option::Option<i32>,
    pub(crate) elapsed_time_millis: ::std::option::Option<i64>,
    pub(crate) tables_loading: ::std::option::Option<i32>,
    pub(crate) full_load_percentage: ::std::option::Option<i32>,
    pub(crate) cdc_latency: ::std::option::Option<i32>,
    pub(crate) tables_queued: ::std::option::Option<i32>,
    pub(crate) tables_errored: ::std::option::Option<i32>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) stop_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DataMigrationStatisticsBuilder {
    /// <p>The number of tables loaded in the current data migration run.</p>
    pub fn tables_loaded(mut self, input: i32) -> Self {
        self.tables_loaded = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of tables loaded in the current data migration run.</p>
    pub fn set_tables_loaded(mut self, input: ::std::option::Option<i32>) -> Self {
        self.tables_loaded = input;
        self
    }
    /// <p>The number of tables loaded in the current data migration run.</p>
    pub fn get_tables_loaded(&self) -> &::std::option::Option<i32> {
        &self.tables_loaded
    }
    /// <p>The elapsed duration of the data migration run.</p>
    pub fn elapsed_time_millis(mut self, input: i64) -> Self {
        self.elapsed_time_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>The elapsed duration of the data migration run.</p>
    pub fn set_elapsed_time_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.elapsed_time_millis = input;
        self
    }
    /// <p>The elapsed duration of the data migration run.</p>
    pub fn get_elapsed_time_millis(&self) -> &::std::option::Option<i64> {
        &self.elapsed_time_millis
    }
    /// <p>The data migration's table loading progress.</p>
    pub fn tables_loading(mut self, input: i32) -> Self {
        self.tables_loading = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data migration's table loading progress.</p>
    pub fn set_tables_loading(mut self, input: ::std::option::Option<i32>) -> Self {
        self.tables_loading = input;
        self
    }
    /// <p>The data migration's table loading progress.</p>
    pub fn get_tables_loading(&self) -> &::std::option::Option<i32> {
        &self.tables_loading
    }
    /// <p>The data migration's progress in the full-load migration phase.</p>
    pub fn full_load_percentage(mut self, input: i32) -> Self {
        self.full_load_percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data migration's progress in the full-load migration phase.</p>
    pub fn set_full_load_percentage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.full_load_percentage = input;
        self
    }
    /// <p>The data migration's progress in the full-load migration phase.</p>
    pub fn get_full_load_percentage(&self) -> &::std::option::Option<i32> {
        &self.full_load_percentage
    }
    /// <p>The current latency of the change data capture (CDC) operation.</p>
    pub fn cdc_latency(mut self, input: i32) -> Self {
        self.cdc_latency = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current latency of the change data capture (CDC) operation.</p>
    pub fn set_cdc_latency(mut self, input: ::std::option::Option<i32>) -> Self {
        self.cdc_latency = input;
        self
    }
    /// <p>The current latency of the change data capture (CDC) operation.</p>
    pub fn get_cdc_latency(&self) -> &::std::option::Option<i32> {
        &self.cdc_latency
    }
    /// <p>The number of tables that are waiting for processing.</p>
    pub fn tables_queued(mut self, input: i32) -> Self {
        self.tables_queued = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of tables that are waiting for processing.</p>
    pub fn set_tables_queued(mut self, input: ::std::option::Option<i32>) -> Self {
        self.tables_queued = input;
        self
    }
    /// <p>The number of tables that are waiting for processing.</p>
    pub fn get_tables_queued(&self) -> &::std::option::Option<i32> {
        &self.tables_queued
    }
    /// <p>The number of tables that DMS failed to process.</p>
    pub fn tables_errored(mut self, input: i32) -> Self {
        self.tables_errored = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of tables that DMS failed to process.</p>
    pub fn set_tables_errored(mut self, input: ::std::option::Option<i32>) -> Self {
        self.tables_errored = input;
        self
    }
    /// <p>The number of tables that DMS failed to process.</p>
    pub fn get_tables_errored(&self) -> &::std::option::Option<i32> {
        &self.tables_errored
    }
    /// <p>The time when the migration started.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the migration started.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time when the migration started.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The time when the migration stopped or failed.</p>
    pub fn stop_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.stop_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the migration stopped or failed.</p>
    pub fn set_stop_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.stop_time = input;
        self
    }
    /// <p>The time when the migration stopped or failed.</p>
    pub fn get_stop_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.stop_time
    }
    /// Consumes the builder and constructs a [`DataMigrationStatistics`](crate::types::DataMigrationStatistics).
    pub fn build(self) -> crate::types::DataMigrationStatistics {
        crate::types::DataMigrationStatistics {
            tables_loaded: self.tables_loaded.unwrap_or_default(),
            elapsed_time_millis: self.elapsed_time_millis.unwrap_or_default(),
            tables_loading: self.tables_loading.unwrap_or_default(),
            full_load_percentage: self.full_load_percentage.unwrap_or_default(),
            cdc_latency: self.cdc_latency.unwrap_or_default(),
            tables_queued: self.tables_queued.unwrap_or_default(),
            tables_errored: self.tables_errored.unwrap_or_default(),
            start_time: self.start_time,
            stop_time: self.stop_time,
        }
    }
}
