// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information that defines an Amazon Redshift data provider.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RedshiftDataProviderSettings {
    /// <p>The name of the Amazon Redshift server.</p>
    pub server_name: ::std::option::Option<::std::string::String>,
    /// <p>The port value for the Amazon Redshift data provider.</p>
    pub port: ::std::option::Option<i32>,
    /// <p>The database name on the Amazon Redshift data provider.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>The path for the Amazon S3 bucket that the application uses for accessing the user-defined schema.</p>
    pub s3_path: ::std::option::Option<::std::string::String>,
    /// <p>The ARN for the role the application uses to access its Amazon S3 bucket.</p>
    pub s3_access_role_arn: ::std::option::Option<::std::string::String>,
}
impl RedshiftDataProviderSettings {
    /// <p>The name of the Amazon Redshift server.</p>
    pub fn server_name(&self) -> ::std::option::Option<&str> {
        self.server_name.as_deref()
    }
    /// <p>The port value for the Amazon Redshift data provider.</p>
    pub fn port(&self) -> ::std::option::Option<i32> {
        self.port
    }
    /// <p>The database name on the Amazon Redshift data provider.</p>
    pub fn database_name(&self) -> ::std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The path for the Amazon S3 bucket that the application uses for accessing the user-defined schema.</p>
    pub fn s3_path(&self) -> ::std::option::Option<&str> {
        self.s3_path.as_deref()
    }
    /// <p>The ARN for the role the application uses to access its Amazon S3 bucket.</p>
    pub fn s3_access_role_arn(&self) -> ::std::option::Option<&str> {
        self.s3_access_role_arn.as_deref()
    }
}
impl RedshiftDataProviderSettings {
    /// Creates a new builder-style object to manufacture [`RedshiftDataProviderSettings`](crate::types::RedshiftDataProviderSettings).
    pub fn builder() -> crate::types::builders::RedshiftDataProviderSettingsBuilder {
        crate::types::builders::RedshiftDataProviderSettingsBuilder::default()
    }
}

/// A builder for [`RedshiftDataProviderSettings`](crate::types::RedshiftDataProviderSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RedshiftDataProviderSettingsBuilder {
    pub(crate) server_name: ::std::option::Option<::std::string::String>,
    pub(crate) port: ::std::option::Option<i32>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) s3_path: ::std::option::Option<::std::string::String>,
    pub(crate) s3_access_role_arn: ::std::option::Option<::std::string::String>,
}
impl RedshiftDataProviderSettingsBuilder {
    /// <p>The name of the Amazon Redshift server.</p>
    pub fn server_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.server_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon Redshift server.</p>
    pub fn set_server_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.server_name = input;
        self
    }
    /// <p>The name of the Amazon Redshift server.</p>
    pub fn get_server_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.server_name
    }
    /// <p>The port value for the Amazon Redshift data provider.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port value for the Amazon Redshift data provider.</p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The port value for the Amazon Redshift data provider.</p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// <p>The database name on the Amazon Redshift data provider.</p>
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database name on the Amazon Redshift data provider.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The database name on the Amazon Redshift data provider.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The path for the Amazon S3 bucket that the application uses for accessing the user-defined schema.</p>
    pub fn s3_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path for the Amazon S3 bucket that the application uses for accessing the user-defined schema.</p>
    pub fn set_s3_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_path = input;
        self
    }
    /// <p>The path for the Amazon S3 bucket that the application uses for accessing the user-defined schema.</p>
    pub fn get_s3_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_path
    }
    /// <p>The ARN for the role the application uses to access its Amazon S3 bucket.</p>
    pub fn s3_access_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_access_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN for the role the application uses to access its Amazon S3 bucket.</p>
    pub fn set_s3_access_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_access_role_arn = input;
        self
    }
    /// <p>The ARN for the role the application uses to access its Amazon S3 bucket.</p>
    pub fn get_s3_access_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_access_role_arn
    }
    /// Consumes the builder and constructs a [`RedshiftDataProviderSettings`](crate::types::RedshiftDataProviderSettings).
    pub fn build(self) -> crate::types::RedshiftDataProviderSettings {
        crate::types::RedshiftDataProviderSettings {
            server_name: self.server_name,
            port: self.port,
            database_name: self.database_name,
            s3_path: self.s3_path,
            s3_access_role_arn: self.s3_access_role_arn,
        }
    }
}
