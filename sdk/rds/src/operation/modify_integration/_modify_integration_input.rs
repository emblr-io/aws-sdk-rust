// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModifyIntegrationInput {
    /// <p>The unique identifier of the integration to modify.</p>
    pub integration_identifier: ::std::option::Option<::std::string::String>,
    /// <p>A new name for the integration.</p>
    pub integration_name: ::std::option::Option<::std::string::String>,
    /// <p>A new data filter for the integration. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Zero_ETL_Filtering.html">Data filtering for Aurora zero-ETL integrations with Amazon Redshift</a> or <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/zero-etl.filtering.html">Data filtering for Amazon RDS zero-ETL integrations with Amazon Redshift</a>.</p>
    pub data_filter: ::std::option::Option<::std::string::String>,
    /// <p>A new description for the integration.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl ModifyIntegrationInput {
    /// <p>The unique identifier of the integration to modify.</p>
    pub fn integration_identifier(&self) -> ::std::option::Option<&str> {
        self.integration_identifier.as_deref()
    }
    /// <p>A new name for the integration.</p>
    pub fn integration_name(&self) -> ::std::option::Option<&str> {
        self.integration_name.as_deref()
    }
    /// <p>A new data filter for the integration. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Zero_ETL_Filtering.html">Data filtering for Aurora zero-ETL integrations with Amazon Redshift</a> or <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/zero-etl.filtering.html">Data filtering for Amazon RDS zero-ETL integrations with Amazon Redshift</a>.</p>
    pub fn data_filter(&self) -> ::std::option::Option<&str> {
        self.data_filter.as_deref()
    }
    /// <p>A new description for the integration.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl ModifyIntegrationInput {
    /// Creates a new builder-style object to manufacture [`ModifyIntegrationInput`](crate::operation::modify_integration::ModifyIntegrationInput).
    pub fn builder() -> crate::operation::modify_integration::builders::ModifyIntegrationInputBuilder {
        crate::operation::modify_integration::builders::ModifyIntegrationInputBuilder::default()
    }
}

/// A builder for [`ModifyIntegrationInput`](crate::operation::modify_integration::ModifyIntegrationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ModifyIntegrationInputBuilder {
    pub(crate) integration_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) integration_name: ::std::option::Option<::std::string::String>,
    pub(crate) data_filter: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl ModifyIntegrationInputBuilder {
    /// <p>The unique identifier of the integration to modify.</p>
    /// This field is required.
    pub fn integration_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.integration_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the integration to modify.</p>
    pub fn set_integration_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.integration_identifier = input;
        self
    }
    /// <p>The unique identifier of the integration to modify.</p>
    pub fn get_integration_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.integration_identifier
    }
    /// <p>A new name for the integration.</p>
    pub fn integration_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.integration_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A new name for the integration.</p>
    pub fn set_integration_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.integration_name = input;
        self
    }
    /// <p>A new name for the integration.</p>
    pub fn get_integration_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.integration_name
    }
    /// <p>A new data filter for the integration. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Zero_ETL_Filtering.html">Data filtering for Aurora zero-ETL integrations with Amazon Redshift</a> or <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/zero-etl.filtering.html">Data filtering for Amazon RDS zero-ETL integrations with Amazon Redshift</a>.</p>
    pub fn data_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_filter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A new data filter for the integration. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Zero_ETL_Filtering.html">Data filtering for Aurora zero-ETL integrations with Amazon Redshift</a> or <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/zero-etl.filtering.html">Data filtering for Amazon RDS zero-ETL integrations with Amazon Redshift</a>.</p>
    pub fn set_data_filter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_filter = input;
        self
    }
    /// <p>A new data filter for the integration. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Zero_ETL_Filtering.html">Data filtering for Aurora zero-ETL integrations with Amazon Redshift</a> or <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/zero-etl.filtering.html">Data filtering for Amazon RDS zero-ETL integrations with Amazon Redshift</a>.</p>
    pub fn get_data_filter(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_filter
    }
    /// <p>A new description for the integration.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A new description for the integration.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A new description for the integration.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`ModifyIntegrationInput`](crate::operation::modify_integration::ModifyIntegrationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::modify_integration::ModifyIntegrationInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::modify_integration::ModifyIntegrationInput {
            integration_identifier: self.integration_identifier,
            integration_name: self.integration_name,
            data_filter: self.data_filter,
            description: self.description,
        })
    }
}
