// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeDbMajorEngineVersionsInput {
    /// <p>The database engine to return major version details for.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>aurora-mysql</code></p></li>
    /// <li>
    /// <p><code>aurora-postgresql</code></p></li>
    /// <li>
    /// <p><code>custom-sqlserver-ee</code></p></li>
    /// <li>
    /// <p><code>custom-sqlserver-se</code></p></li>
    /// <li>
    /// <p><code>custom-sqlserver-web</code></p></li>
    /// <li>
    /// <p><code>db2-ae</code></p></li>
    /// <li>
    /// <p><code>db2-se</code></p></li>
    /// <li>
    /// <p><code>mariadb</code></p></li>
    /// <li>
    /// <p><code>mysql</code></p></li>
    /// <li>
    /// <p><code>oracle-ee</code></p></li>
    /// <li>
    /// <p><code>oracle-ee-cdb</code></p></li>
    /// <li>
    /// <p><code>oracle-se2</code></p></li>
    /// <li>
    /// <p><code>oracle-se2-cdb</code></p></li>
    /// <li>
    /// <p><code>postgres</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ee</code></p></li>
    /// <li>
    /// <p><code>sqlserver-se</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ex</code></p></li>
    /// <li>
    /// <p><code>sqlserver-web</code></p></li>
    /// </ul>
    pub engine: ::std::option::Option<::std::string::String>,
    /// <p>A specific database major engine version to return details for.</p>
    /// <p>Example: <code>8.4</code></p>
    pub major_engine_version: ::std::option::Option<::std::string::String>,
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    pub max_records: ::std::option::Option<i32>,
}
impl DescribeDbMajorEngineVersionsInput {
    /// <p>The database engine to return major version details for.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>aurora-mysql</code></p></li>
    /// <li>
    /// <p><code>aurora-postgresql</code></p></li>
    /// <li>
    /// <p><code>custom-sqlserver-ee</code></p></li>
    /// <li>
    /// <p><code>custom-sqlserver-se</code></p></li>
    /// <li>
    /// <p><code>custom-sqlserver-web</code></p></li>
    /// <li>
    /// <p><code>db2-ae</code></p></li>
    /// <li>
    /// <p><code>db2-se</code></p></li>
    /// <li>
    /// <p><code>mariadb</code></p></li>
    /// <li>
    /// <p><code>mysql</code></p></li>
    /// <li>
    /// <p><code>oracle-ee</code></p></li>
    /// <li>
    /// <p><code>oracle-ee-cdb</code></p></li>
    /// <li>
    /// <p><code>oracle-se2</code></p></li>
    /// <li>
    /// <p><code>oracle-se2-cdb</code></p></li>
    /// <li>
    /// <p><code>postgres</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ee</code></p></li>
    /// <li>
    /// <p><code>sqlserver-se</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ex</code></p></li>
    /// <li>
    /// <p><code>sqlserver-web</code></p></li>
    /// </ul>
    pub fn engine(&self) -> ::std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>A specific database major engine version to return details for.</p>
    /// <p>Example: <code>8.4</code></p>
    pub fn major_engine_version(&self) -> ::std::option::Option<&str> {
        self.major_engine_version.as_deref()
    }
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    pub fn max_records(&self) -> ::std::option::Option<i32> {
        self.max_records
    }
}
impl DescribeDbMajorEngineVersionsInput {
    /// Creates a new builder-style object to manufacture [`DescribeDbMajorEngineVersionsInput`](crate::operation::describe_db_major_engine_versions::DescribeDbMajorEngineVersionsInput).
    pub fn builder() -> crate::operation::describe_db_major_engine_versions::builders::DescribeDbMajorEngineVersionsInputBuilder {
        crate::operation::describe_db_major_engine_versions::builders::DescribeDbMajorEngineVersionsInputBuilder::default()
    }
}

/// A builder for [`DescribeDbMajorEngineVersionsInput`](crate::operation::describe_db_major_engine_versions::DescribeDbMajorEngineVersionsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeDbMajorEngineVersionsInputBuilder {
    pub(crate) engine: ::std::option::Option<::std::string::String>,
    pub(crate) major_engine_version: ::std::option::Option<::std::string::String>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) max_records: ::std::option::Option<i32>,
}
impl DescribeDbMajorEngineVersionsInputBuilder {
    /// <p>The database engine to return major version details for.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>aurora-mysql</code></p></li>
    /// <li>
    /// <p><code>aurora-postgresql</code></p></li>
    /// <li>
    /// <p><code>custom-sqlserver-ee</code></p></li>
    /// <li>
    /// <p><code>custom-sqlserver-se</code></p></li>
    /// <li>
    /// <p><code>custom-sqlserver-web</code></p></li>
    /// <li>
    /// <p><code>db2-ae</code></p></li>
    /// <li>
    /// <p><code>db2-se</code></p></li>
    /// <li>
    /// <p><code>mariadb</code></p></li>
    /// <li>
    /// <p><code>mysql</code></p></li>
    /// <li>
    /// <p><code>oracle-ee</code></p></li>
    /// <li>
    /// <p><code>oracle-ee-cdb</code></p></li>
    /// <li>
    /// <p><code>oracle-se2</code></p></li>
    /// <li>
    /// <p><code>oracle-se2-cdb</code></p></li>
    /// <li>
    /// <p><code>postgres</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ee</code></p></li>
    /// <li>
    /// <p><code>sqlserver-se</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ex</code></p></li>
    /// <li>
    /// <p><code>sqlserver-web</code></p></li>
    /// </ul>
    pub fn engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database engine to return major version details for.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>aurora-mysql</code></p></li>
    /// <li>
    /// <p><code>aurora-postgresql</code></p></li>
    /// <li>
    /// <p><code>custom-sqlserver-ee</code></p></li>
    /// <li>
    /// <p><code>custom-sqlserver-se</code></p></li>
    /// <li>
    /// <p><code>custom-sqlserver-web</code></p></li>
    /// <li>
    /// <p><code>db2-ae</code></p></li>
    /// <li>
    /// <p><code>db2-se</code></p></li>
    /// <li>
    /// <p><code>mariadb</code></p></li>
    /// <li>
    /// <p><code>mysql</code></p></li>
    /// <li>
    /// <p><code>oracle-ee</code></p></li>
    /// <li>
    /// <p><code>oracle-ee-cdb</code></p></li>
    /// <li>
    /// <p><code>oracle-se2</code></p></li>
    /// <li>
    /// <p><code>oracle-se2-cdb</code></p></li>
    /// <li>
    /// <p><code>postgres</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ee</code></p></li>
    /// <li>
    /// <p><code>sqlserver-se</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ex</code></p></li>
    /// <li>
    /// <p><code>sqlserver-web</code></p></li>
    /// </ul>
    pub fn set_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>The database engine to return major version details for.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>aurora-mysql</code></p></li>
    /// <li>
    /// <p><code>aurora-postgresql</code></p></li>
    /// <li>
    /// <p><code>custom-sqlserver-ee</code></p></li>
    /// <li>
    /// <p><code>custom-sqlserver-se</code></p></li>
    /// <li>
    /// <p><code>custom-sqlserver-web</code></p></li>
    /// <li>
    /// <p><code>db2-ae</code></p></li>
    /// <li>
    /// <p><code>db2-se</code></p></li>
    /// <li>
    /// <p><code>mariadb</code></p></li>
    /// <li>
    /// <p><code>mysql</code></p></li>
    /// <li>
    /// <p><code>oracle-ee</code></p></li>
    /// <li>
    /// <p><code>oracle-ee-cdb</code></p></li>
    /// <li>
    /// <p><code>oracle-se2</code></p></li>
    /// <li>
    /// <p><code>oracle-se2-cdb</code></p></li>
    /// <li>
    /// <p><code>postgres</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ee</code></p></li>
    /// <li>
    /// <p><code>sqlserver-se</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ex</code></p></li>
    /// <li>
    /// <p><code>sqlserver-web</code></p></li>
    /// </ul>
    pub fn get_engine(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine
    }
    /// <p>A specific database major engine version to return details for.</p>
    /// <p>Example: <code>8.4</code></p>
    pub fn major_engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.major_engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A specific database major engine version to return details for.</p>
    /// <p>Example: <code>8.4</code></p>
    pub fn set_major_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.major_engine_version = input;
        self
    }
    /// <p>A specific database major engine version to return details for.</p>
    /// <p>Example: <code>8.4</code></p>
    pub fn get_major_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.major_engine_version
    }
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// <p>The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.max_records = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    pub fn set_max_records(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_records = input;
        self
    }
    /// <p>The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    pub fn get_max_records(&self) -> &::std::option::Option<i32> {
        &self.max_records
    }
    /// Consumes the builder and constructs a [`DescribeDbMajorEngineVersionsInput`](crate::operation::describe_db_major_engine_versions::DescribeDbMajorEngineVersionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_db_major_engine_versions::DescribeDbMajorEngineVersionsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_db_major_engine_versions::DescribeDbMajorEngineVersionsInput {
            engine: self.engine,
            major_engine_version: self.major_engine_version,
            marker: self.marker,
            max_records: self.max_records,
        })
    }
}
