// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This data type is used as a response element in the operation <code>DescribeDBMajorEngineVersions</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DbMajorEngineVersion {
    /// <p>The name of the database engine.</p>
    pub engine: ::std::option::Option<::std::string::String>,
    /// <p>The major version number of the database engine.</p>
    pub major_engine_version: ::std::option::Option<::std::string::String>,
    /// <p>A list of the lifecycles supported by this engine for the <code>DescribeDBMajorEngineVersions</code> operation.</p>
    pub supported_engine_lifecycles: ::std::option::Option<::std::vec::Vec<crate::types::SupportedEngineLifecycle>>,
}
impl DbMajorEngineVersion {
    /// <p>The name of the database engine.</p>
    pub fn engine(&self) -> ::std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>The major version number of the database engine.</p>
    pub fn major_engine_version(&self) -> ::std::option::Option<&str> {
        self.major_engine_version.as_deref()
    }
    /// <p>A list of the lifecycles supported by this engine for the <code>DescribeDBMajorEngineVersions</code> operation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.supported_engine_lifecycles.is_none()`.
    pub fn supported_engine_lifecycles(&self) -> &[crate::types::SupportedEngineLifecycle] {
        self.supported_engine_lifecycles.as_deref().unwrap_or_default()
    }
}
impl DbMajorEngineVersion {
    /// Creates a new builder-style object to manufacture [`DbMajorEngineVersion`](crate::types::DbMajorEngineVersion).
    pub fn builder() -> crate::types::builders::DbMajorEngineVersionBuilder {
        crate::types::builders::DbMajorEngineVersionBuilder::default()
    }
}

/// A builder for [`DbMajorEngineVersion`](crate::types::DbMajorEngineVersion).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DbMajorEngineVersionBuilder {
    pub(crate) engine: ::std::option::Option<::std::string::String>,
    pub(crate) major_engine_version: ::std::option::Option<::std::string::String>,
    pub(crate) supported_engine_lifecycles: ::std::option::Option<::std::vec::Vec<crate::types::SupportedEngineLifecycle>>,
}
impl DbMajorEngineVersionBuilder {
    /// <p>The name of the database engine.</p>
    pub fn engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database engine.</p>
    pub fn set_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>The name of the database engine.</p>
    pub fn get_engine(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine
    }
    /// <p>The major version number of the database engine.</p>
    pub fn major_engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.major_engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The major version number of the database engine.</p>
    pub fn set_major_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.major_engine_version = input;
        self
    }
    /// <p>The major version number of the database engine.</p>
    pub fn get_major_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.major_engine_version
    }
    /// Appends an item to `supported_engine_lifecycles`.
    ///
    /// To override the contents of this collection use [`set_supported_engine_lifecycles`](Self::set_supported_engine_lifecycles).
    ///
    /// <p>A list of the lifecycles supported by this engine for the <code>DescribeDBMajorEngineVersions</code> operation.</p>
    pub fn supported_engine_lifecycles(mut self, input: crate::types::SupportedEngineLifecycle) -> Self {
        let mut v = self.supported_engine_lifecycles.unwrap_or_default();
        v.push(input);
        self.supported_engine_lifecycles = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of the lifecycles supported by this engine for the <code>DescribeDBMajorEngineVersions</code> operation.</p>
    pub fn set_supported_engine_lifecycles(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SupportedEngineLifecycle>>) -> Self {
        self.supported_engine_lifecycles = input;
        self
    }
    /// <p>A list of the lifecycles supported by this engine for the <code>DescribeDBMajorEngineVersions</code> operation.</p>
    pub fn get_supported_engine_lifecycles(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SupportedEngineLifecycle>> {
        &self.supported_engine_lifecycles
    }
    /// Consumes the builder and constructs a [`DbMajorEngineVersion`](crate::types::DbMajorEngineVersion).
    pub fn build(self) -> crate::types::DbMajorEngineVersion {
        crate::types::DbMajorEngineVersion {
            engine: self.engine,
            major_engine_version: self.major_engine_version,
            supported_engine_lifecycles: self.supported_engine_lifecycles,
        }
    }
}
