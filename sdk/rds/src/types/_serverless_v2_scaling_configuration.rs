// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the scaling configuration of an Aurora Serverless v2 DB cluster.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the <i>Amazon Aurora User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServerlessV2ScalingConfiguration {
    /// <p>The minimum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can specify ACU values in half-step increments, such as 8, 8.5, 9, and so on. For Aurora versions that support the Aurora Serverless v2 auto-pause feature, the smallest value that you can use is 0. For versions that don't support Aurora Serverless v2 auto-pause, the smallest value that you can use is 0.5.</p>
    pub min_capacity: ::std::option::Option<f64>,
    /// <p>The maximum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can specify ACU values in half-step increments, such as 32, 32.5, 33, and so on. The largest value that you can use is 256 for recent Aurora versions, or 128 for older versions.</p>
    pub max_capacity: ::std::option::Option<f64>,
    /// <p>Specifies the number of seconds an Aurora Serverless v2 DB instance must be idle before Aurora attempts to automatically pause it.</p>
    /// <p>Specify a value between 300 seconds (five minutes) and 86,400 seconds (one day). The default is 300 seconds.</p>
    pub seconds_until_auto_pause: ::std::option::Option<i32>,
}
impl ServerlessV2ScalingConfiguration {
    /// <p>The minimum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can specify ACU values in half-step increments, such as 8, 8.5, 9, and so on. For Aurora versions that support the Aurora Serverless v2 auto-pause feature, the smallest value that you can use is 0. For versions that don't support Aurora Serverless v2 auto-pause, the smallest value that you can use is 0.5.</p>
    pub fn min_capacity(&self) -> ::std::option::Option<f64> {
        self.min_capacity
    }
    /// <p>The maximum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can specify ACU values in half-step increments, such as 32, 32.5, 33, and so on. The largest value that you can use is 256 for recent Aurora versions, or 128 for older versions.</p>
    pub fn max_capacity(&self) -> ::std::option::Option<f64> {
        self.max_capacity
    }
    /// <p>Specifies the number of seconds an Aurora Serverless v2 DB instance must be idle before Aurora attempts to automatically pause it.</p>
    /// <p>Specify a value between 300 seconds (five minutes) and 86,400 seconds (one day). The default is 300 seconds.</p>
    pub fn seconds_until_auto_pause(&self) -> ::std::option::Option<i32> {
        self.seconds_until_auto_pause
    }
}
impl ServerlessV2ScalingConfiguration {
    /// Creates a new builder-style object to manufacture [`ServerlessV2ScalingConfiguration`](crate::types::ServerlessV2ScalingConfiguration).
    pub fn builder() -> crate::types::builders::ServerlessV2ScalingConfigurationBuilder {
        crate::types::builders::ServerlessV2ScalingConfigurationBuilder::default()
    }
}

/// A builder for [`ServerlessV2ScalingConfiguration`](crate::types::ServerlessV2ScalingConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServerlessV2ScalingConfigurationBuilder {
    pub(crate) min_capacity: ::std::option::Option<f64>,
    pub(crate) max_capacity: ::std::option::Option<f64>,
    pub(crate) seconds_until_auto_pause: ::std::option::Option<i32>,
}
impl ServerlessV2ScalingConfigurationBuilder {
    /// <p>The minimum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can specify ACU values in half-step increments, such as 8, 8.5, 9, and so on. For Aurora versions that support the Aurora Serverless v2 auto-pause feature, the smallest value that you can use is 0. For versions that don't support Aurora Serverless v2 auto-pause, the smallest value that you can use is 0.5.</p>
    pub fn min_capacity(mut self, input: f64) -> Self {
        self.min_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can specify ACU values in half-step increments, such as 8, 8.5, 9, and so on. For Aurora versions that support the Aurora Serverless v2 auto-pause feature, the smallest value that you can use is 0. For versions that don't support Aurora Serverless v2 auto-pause, the smallest value that you can use is 0.5.</p>
    pub fn set_min_capacity(mut self, input: ::std::option::Option<f64>) -> Self {
        self.min_capacity = input;
        self
    }
    /// <p>The minimum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can specify ACU values in half-step increments, such as 8, 8.5, 9, and so on. For Aurora versions that support the Aurora Serverless v2 auto-pause feature, the smallest value that you can use is 0. For versions that don't support Aurora Serverless v2 auto-pause, the smallest value that you can use is 0.5.</p>
    pub fn get_min_capacity(&self) -> &::std::option::Option<f64> {
        &self.min_capacity
    }
    /// <p>The maximum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can specify ACU values in half-step increments, such as 32, 32.5, 33, and so on. The largest value that you can use is 256 for recent Aurora versions, or 128 for older versions.</p>
    pub fn max_capacity(mut self, input: f64) -> Self {
        self.max_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can specify ACU values in half-step increments, such as 32, 32.5, 33, and so on. The largest value that you can use is 256 for recent Aurora versions, or 128 for older versions.</p>
    pub fn set_max_capacity(mut self, input: ::std::option::Option<f64>) -> Self {
        self.max_capacity = input;
        self
    }
    /// <p>The maximum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can specify ACU values in half-step increments, such as 32, 32.5, 33, and so on. The largest value that you can use is 256 for recent Aurora versions, or 128 for older versions.</p>
    pub fn get_max_capacity(&self) -> &::std::option::Option<f64> {
        &self.max_capacity
    }
    /// <p>Specifies the number of seconds an Aurora Serverless v2 DB instance must be idle before Aurora attempts to automatically pause it.</p>
    /// <p>Specify a value between 300 seconds (five minutes) and 86,400 seconds (one day). The default is 300 seconds.</p>
    pub fn seconds_until_auto_pause(mut self, input: i32) -> Self {
        self.seconds_until_auto_pause = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the number of seconds an Aurora Serverless v2 DB instance must be idle before Aurora attempts to automatically pause it.</p>
    /// <p>Specify a value between 300 seconds (five minutes) and 86,400 seconds (one day). The default is 300 seconds.</p>
    pub fn set_seconds_until_auto_pause(mut self, input: ::std::option::Option<i32>) -> Self {
        self.seconds_until_auto_pause = input;
        self
    }
    /// <p>Specifies the number of seconds an Aurora Serverless v2 DB instance must be idle before Aurora attempts to automatically pause it.</p>
    /// <p>Specify a value between 300 seconds (five minutes) and 86,400 seconds (one day). The default is 300 seconds.</p>
    pub fn get_seconds_until_auto_pause(&self) -> &::std::option::Option<i32> {
        &self.seconds_until_auto_pause
    }
    /// Consumes the builder and constructs a [`ServerlessV2ScalingConfiguration`](crate::types::ServerlessV2ScalingConfiguration).
    pub fn build(self) -> crate::types::ServerlessV2ScalingConfiguration {
        crate::types::ServerlessV2ScalingConfiguration {
            min_capacity: self.min_capacity,
            max_capacity: self.max_capacity,
            seconds_until_auto_pause: self.seconds_until_auto_pause,
        }
    }
}
