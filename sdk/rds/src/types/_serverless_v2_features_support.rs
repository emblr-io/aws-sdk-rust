// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies any Aurora Serverless v2 properties or limits that differ between Aurora engine versions. You can test the values of this attribute when deciding which Aurora version to use in a new or upgraded DB cluster. You can also retrieve the version of an existing DB cluster and check whether that version supports certain Aurora Serverless v2 features before you attempt to use those features.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServerlessV2FeaturesSupport {
    /// <p>If the minimum capacity is 0 ACUs, the engine version supports the automatic pause/resume feature of Aurora Serverless v2.</p>
    pub min_capacity: ::std::option::Option<f64>,
    /// <p>Specifies the upper Aurora Serverless v2 capacity limit for a particular engine version. Depending on the engine version, the maximum capacity for an Aurora Serverless v2 cluster might be <code>256</code> or <code>128</code>.</p>
    pub max_capacity: ::std::option::Option<f64>,
}
impl ServerlessV2FeaturesSupport {
    /// <p>If the minimum capacity is 0 ACUs, the engine version supports the automatic pause/resume feature of Aurora Serverless v2.</p>
    pub fn min_capacity(&self) -> ::std::option::Option<f64> {
        self.min_capacity
    }
    /// <p>Specifies the upper Aurora Serverless v2 capacity limit for a particular engine version. Depending on the engine version, the maximum capacity for an Aurora Serverless v2 cluster might be <code>256</code> or <code>128</code>.</p>
    pub fn max_capacity(&self) -> ::std::option::Option<f64> {
        self.max_capacity
    }
}
impl ServerlessV2FeaturesSupport {
    /// Creates a new builder-style object to manufacture [`ServerlessV2FeaturesSupport`](crate::types::ServerlessV2FeaturesSupport).
    pub fn builder() -> crate::types::builders::ServerlessV2FeaturesSupportBuilder {
        crate::types::builders::ServerlessV2FeaturesSupportBuilder::default()
    }
}

/// A builder for [`ServerlessV2FeaturesSupport`](crate::types::ServerlessV2FeaturesSupport).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServerlessV2FeaturesSupportBuilder {
    pub(crate) min_capacity: ::std::option::Option<f64>,
    pub(crate) max_capacity: ::std::option::Option<f64>,
}
impl ServerlessV2FeaturesSupportBuilder {
    /// <p>If the minimum capacity is 0 ACUs, the engine version supports the automatic pause/resume feature of Aurora Serverless v2.</p>
    pub fn min_capacity(mut self, input: f64) -> Self {
        self.min_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the minimum capacity is 0 ACUs, the engine version supports the automatic pause/resume feature of Aurora Serverless v2.</p>
    pub fn set_min_capacity(mut self, input: ::std::option::Option<f64>) -> Self {
        self.min_capacity = input;
        self
    }
    /// <p>If the minimum capacity is 0 ACUs, the engine version supports the automatic pause/resume feature of Aurora Serverless v2.</p>
    pub fn get_min_capacity(&self) -> &::std::option::Option<f64> {
        &self.min_capacity
    }
    /// <p>Specifies the upper Aurora Serverless v2 capacity limit for a particular engine version. Depending on the engine version, the maximum capacity for an Aurora Serverless v2 cluster might be <code>256</code> or <code>128</code>.</p>
    pub fn max_capacity(mut self, input: f64) -> Self {
        self.max_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the upper Aurora Serverless v2 capacity limit for a particular engine version. Depending on the engine version, the maximum capacity for an Aurora Serverless v2 cluster might be <code>256</code> or <code>128</code>.</p>
    pub fn set_max_capacity(mut self, input: ::std::option::Option<f64>) -> Self {
        self.max_capacity = input;
        self
    }
    /// <p>Specifies the upper Aurora Serverless v2 capacity limit for a particular engine version. Depending on the engine version, the maximum capacity for an Aurora Serverless v2 cluster might be <code>256</code> or <code>128</code>.</p>
    pub fn get_max_capacity(&self) -> &::std::option::Option<f64> {
        &self.max_capacity
    }
    /// Consumes the builder and constructs a [`ServerlessV2FeaturesSupport`](crate::types::ServerlessV2FeaturesSupport).
    pub fn build(self) -> crate::types::ServerlessV2FeaturesSupport {
        crate::types::ServerlessV2FeaturesSupport {
            min_capacity: self.min_capacity,
            max_capacity: self.max_capacity,
        }
    }
}
