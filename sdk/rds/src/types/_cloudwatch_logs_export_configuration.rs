// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p>
/// <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used.</p>
/// <p>For more information about exporting CloudWatch Logs for Amazon RDS DB instances, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
/// <p>For more information about exporting CloudWatch Logs for Amazon Aurora DB clusters, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CloudwatchLogsExportConfiguration {
    /// <p>The list of log types to enable.</p>
    /// <p>The following values are valid for each DB engine:</p>
    /// <ul>
    /// <li>
    /// <p>Aurora MySQL - <code>audit | error | general | slowquery</code></p></li>
    /// <li>
    /// <p>Aurora PostgreSQL - <code>postgresql</code></p></li>
    /// <li>
    /// <p>RDS for MySQL - <code>error | general | slowquery</code></p></li>
    /// <li>
    /// <p>RDS for PostgreSQL - <code>postgresql | upgrade</code></p></li>
    /// </ul>
    pub enable_log_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The list of log types to disable.</p>
    /// <p>The following values are valid for each DB engine:</p>
    /// <ul>
    /// <li>
    /// <p>Aurora MySQL - <code>audit | error | general | slowquery</code></p></li>
    /// <li>
    /// <p>Aurora PostgreSQL - <code>postgresql</code></p></li>
    /// <li>
    /// <p>RDS for MySQL - <code>error | general | slowquery</code></p></li>
    /// <li>
    /// <p>RDS for PostgreSQL - <code>postgresql | upgrade</code></p></li>
    /// </ul>
    pub disable_log_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CloudwatchLogsExportConfiguration {
    /// <p>The list of log types to enable.</p>
    /// <p>The following values are valid for each DB engine:</p>
    /// <ul>
    /// <li>
    /// <p>Aurora MySQL - <code>audit | error | general | slowquery</code></p></li>
    /// <li>
    /// <p>Aurora PostgreSQL - <code>postgresql</code></p></li>
    /// <li>
    /// <p>RDS for MySQL - <code>error | general | slowquery</code></p></li>
    /// <li>
    /// <p>RDS for PostgreSQL - <code>postgresql | upgrade</code></p></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.enable_log_types.is_none()`.
    pub fn enable_log_types(&self) -> &[::std::string::String] {
        self.enable_log_types.as_deref().unwrap_or_default()
    }
    /// <p>The list of log types to disable.</p>
    /// <p>The following values are valid for each DB engine:</p>
    /// <ul>
    /// <li>
    /// <p>Aurora MySQL - <code>audit | error | general | slowquery</code></p></li>
    /// <li>
    /// <p>Aurora PostgreSQL - <code>postgresql</code></p></li>
    /// <li>
    /// <p>RDS for MySQL - <code>error | general | slowquery</code></p></li>
    /// <li>
    /// <p>RDS for PostgreSQL - <code>postgresql | upgrade</code></p></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.disable_log_types.is_none()`.
    pub fn disable_log_types(&self) -> &[::std::string::String] {
        self.disable_log_types.as_deref().unwrap_or_default()
    }
}
impl CloudwatchLogsExportConfiguration {
    /// Creates a new builder-style object to manufacture [`CloudwatchLogsExportConfiguration`](crate::types::CloudwatchLogsExportConfiguration).
    pub fn builder() -> crate::types::builders::CloudwatchLogsExportConfigurationBuilder {
        crate::types::builders::CloudwatchLogsExportConfigurationBuilder::default()
    }
}

/// A builder for [`CloudwatchLogsExportConfiguration`](crate::types::CloudwatchLogsExportConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CloudwatchLogsExportConfigurationBuilder {
    pub(crate) enable_log_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) disable_log_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CloudwatchLogsExportConfigurationBuilder {
    /// Appends an item to `enable_log_types`.
    ///
    /// To override the contents of this collection use [`set_enable_log_types`](Self::set_enable_log_types).
    ///
    /// <p>The list of log types to enable.</p>
    /// <p>The following values are valid for each DB engine:</p>
    /// <ul>
    /// <li>
    /// <p>Aurora MySQL - <code>audit | error | general | slowquery</code></p></li>
    /// <li>
    /// <p>Aurora PostgreSQL - <code>postgresql</code></p></li>
    /// <li>
    /// <p>RDS for MySQL - <code>error | general | slowquery</code></p></li>
    /// <li>
    /// <p>RDS for PostgreSQL - <code>postgresql | upgrade</code></p></li>
    /// </ul>
    pub fn enable_log_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.enable_log_types.unwrap_or_default();
        v.push(input.into());
        self.enable_log_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of log types to enable.</p>
    /// <p>The following values are valid for each DB engine:</p>
    /// <ul>
    /// <li>
    /// <p>Aurora MySQL - <code>audit | error | general | slowquery</code></p></li>
    /// <li>
    /// <p>Aurora PostgreSQL - <code>postgresql</code></p></li>
    /// <li>
    /// <p>RDS for MySQL - <code>error | general | slowquery</code></p></li>
    /// <li>
    /// <p>RDS for PostgreSQL - <code>postgresql | upgrade</code></p></li>
    /// </ul>
    pub fn set_enable_log_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.enable_log_types = input;
        self
    }
    /// <p>The list of log types to enable.</p>
    /// <p>The following values are valid for each DB engine:</p>
    /// <ul>
    /// <li>
    /// <p>Aurora MySQL - <code>audit | error | general | slowquery</code></p></li>
    /// <li>
    /// <p>Aurora PostgreSQL - <code>postgresql</code></p></li>
    /// <li>
    /// <p>RDS for MySQL - <code>error | general | slowquery</code></p></li>
    /// <li>
    /// <p>RDS for PostgreSQL - <code>postgresql | upgrade</code></p></li>
    /// </ul>
    pub fn get_enable_log_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.enable_log_types
    }
    /// Appends an item to `disable_log_types`.
    ///
    /// To override the contents of this collection use [`set_disable_log_types`](Self::set_disable_log_types).
    ///
    /// <p>The list of log types to disable.</p>
    /// <p>The following values are valid for each DB engine:</p>
    /// <ul>
    /// <li>
    /// <p>Aurora MySQL - <code>audit | error | general | slowquery</code></p></li>
    /// <li>
    /// <p>Aurora PostgreSQL - <code>postgresql</code></p></li>
    /// <li>
    /// <p>RDS for MySQL - <code>error | general | slowquery</code></p></li>
    /// <li>
    /// <p>RDS for PostgreSQL - <code>postgresql | upgrade</code></p></li>
    /// </ul>
    pub fn disable_log_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.disable_log_types.unwrap_or_default();
        v.push(input.into());
        self.disable_log_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of log types to disable.</p>
    /// <p>The following values are valid for each DB engine:</p>
    /// <ul>
    /// <li>
    /// <p>Aurora MySQL - <code>audit | error | general | slowquery</code></p></li>
    /// <li>
    /// <p>Aurora PostgreSQL - <code>postgresql</code></p></li>
    /// <li>
    /// <p>RDS for MySQL - <code>error | general | slowquery</code></p></li>
    /// <li>
    /// <p>RDS for PostgreSQL - <code>postgresql | upgrade</code></p></li>
    /// </ul>
    pub fn set_disable_log_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.disable_log_types = input;
        self
    }
    /// <p>The list of log types to disable.</p>
    /// <p>The following values are valid for each DB engine:</p>
    /// <ul>
    /// <li>
    /// <p>Aurora MySQL - <code>audit | error | general | slowquery</code></p></li>
    /// <li>
    /// <p>Aurora PostgreSQL - <code>postgresql</code></p></li>
    /// <li>
    /// <p>RDS for MySQL - <code>error | general | slowquery</code></p></li>
    /// <li>
    /// <p>RDS for PostgreSQL - <code>postgresql | upgrade</code></p></li>
    /// </ul>
    pub fn get_disable_log_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.disable_log_types
    }
    /// Consumes the builder and constructs a [`CloudwatchLogsExportConfiguration`](crate::types::CloudwatchLogsExportConfiguration).
    pub fn build(self) -> crate::types::CloudwatchLogsExportConfiguration {
        crate::types::CloudwatchLogsExportConfiguration {
            enable_log_types: self.enable_log_types,
            disable_log_types: self.disable_log_types,
        }
    }
}
