// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for a single Parameter in the Amazon Web Services Systems Manager (SSM) Parameter Store in a given Region.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SsmParameterConfiguration {
    /// <p>Specify the account that will own the Parameter in a given Region. During distribution, this account must be specified in distribution settings as a target account for the Region.</p>
    pub ami_account_id: ::std::option::Option<::std::string::String>,
    /// <p>This is the name of the Parameter in the target Region or account. The image distribution creates the Parameter if it doesn't already exist. Otherwise, it updates the parameter.</p>
    pub parameter_name: ::std::string::String,
    /// <p>The data type specifies what type of value the Parameter contains. We recommend that you use data type <code>aws:ec2:image</code>.</p>
    pub data_type: ::std::option::Option<crate::types::SsmParameterDataType>,
}
impl SsmParameterConfiguration {
    /// <p>Specify the account that will own the Parameter in a given Region. During distribution, this account must be specified in distribution settings as a target account for the Region.</p>
    pub fn ami_account_id(&self) -> ::std::option::Option<&str> {
        self.ami_account_id.as_deref()
    }
    /// <p>This is the name of the Parameter in the target Region or account. The image distribution creates the Parameter if it doesn't already exist. Otherwise, it updates the parameter.</p>
    pub fn parameter_name(&self) -> &str {
        use std::ops::Deref;
        self.parameter_name.deref()
    }
    /// <p>The data type specifies what type of value the Parameter contains. We recommend that you use data type <code>aws:ec2:image</code>.</p>
    pub fn data_type(&self) -> ::std::option::Option<&crate::types::SsmParameterDataType> {
        self.data_type.as_ref()
    }
}
impl SsmParameterConfiguration {
    /// Creates a new builder-style object to manufacture [`SsmParameterConfiguration`](crate::types::SsmParameterConfiguration).
    pub fn builder() -> crate::types::builders::SsmParameterConfigurationBuilder {
        crate::types::builders::SsmParameterConfigurationBuilder::default()
    }
}

/// A builder for [`SsmParameterConfiguration`](crate::types::SsmParameterConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SsmParameterConfigurationBuilder {
    pub(crate) ami_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) parameter_name: ::std::option::Option<::std::string::String>,
    pub(crate) data_type: ::std::option::Option<crate::types::SsmParameterDataType>,
}
impl SsmParameterConfigurationBuilder {
    /// <p>Specify the account that will own the Parameter in a given Region. During distribution, this account must be specified in distribution settings as a target account for the Region.</p>
    pub fn ami_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ami_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify the account that will own the Parameter in a given Region. During distribution, this account must be specified in distribution settings as a target account for the Region.</p>
    pub fn set_ami_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ami_account_id = input;
        self
    }
    /// <p>Specify the account that will own the Parameter in a given Region. During distribution, this account must be specified in distribution settings as a target account for the Region.</p>
    pub fn get_ami_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ami_account_id
    }
    /// <p>This is the name of the Parameter in the target Region or account. The image distribution creates the Parameter if it doesn't already exist. Otherwise, it updates the parameter.</p>
    /// This field is required.
    pub fn parameter_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parameter_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This is the name of the Parameter in the target Region or account. The image distribution creates the Parameter if it doesn't already exist. Otherwise, it updates the parameter.</p>
    pub fn set_parameter_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parameter_name = input;
        self
    }
    /// <p>This is the name of the Parameter in the target Region or account. The image distribution creates the Parameter if it doesn't already exist. Otherwise, it updates the parameter.</p>
    pub fn get_parameter_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.parameter_name
    }
    /// <p>The data type specifies what type of value the Parameter contains. We recommend that you use data type <code>aws:ec2:image</code>.</p>
    pub fn data_type(mut self, input: crate::types::SsmParameterDataType) -> Self {
        self.data_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data type specifies what type of value the Parameter contains. We recommend that you use data type <code>aws:ec2:image</code>.</p>
    pub fn set_data_type(mut self, input: ::std::option::Option<crate::types::SsmParameterDataType>) -> Self {
        self.data_type = input;
        self
    }
    /// <p>The data type specifies what type of value the Parameter contains. We recommend that you use data type <code>aws:ec2:image</code>.</p>
    pub fn get_data_type(&self) -> &::std::option::Option<crate::types::SsmParameterDataType> {
        &self.data_type
    }
    /// Consumes the builder and constructs a [`SsmParameterConfiguration`](crate::types::SsmParameterConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`parameter_name`](crate::types::builders::SsmParameterConfigurationBuilder::parameter_name)
    pub fn build(self) -> ::std::result::Result<crate::types::SsmParameterConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SsmParameterConfiguration {
            ami_account_id: self.ami_account_id,
            parameter_name: self.parameter_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "parameter_name",
                    "parameter_name was not specified but it is required when building SsmParameterConfiguration",
                )
            })?,
            data_type: self.data_type,
        })
    }
}
