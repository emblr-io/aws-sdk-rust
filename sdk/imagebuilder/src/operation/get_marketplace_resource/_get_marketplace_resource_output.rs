// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetMarketplaceResourceOutput {
    /// <p>The Amazon Resource Name (ARN) for the Amazon Web Services Marketplace resource that was requested.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The obfuscated S3 URL to download the component artifact from.</p>
    pub url: ::std::option::Option<::std::string::String>,
    /// <p>Returns obfuscated data that contains the YAML content of the component.</p>
    pub data: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetMarketplaceResourceOutput {
    /// <p>The Amazon Resource Name (ARN) for the Amazon Web Services Marketplace resource that was requested.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The obfuscated S3 URL to download the component artifact from.</p>
    pub fn url(&self) -> ::std::option::Option<&str> {
        self.url.as_deref()
    }
    /// <p>Returns obfuscated data that contains the YAML content of the component.</p>
    pub fn data(&self) -> ::std::option::Option<&str> {
        self.data.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetMarketplaceResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetMarketplaceResourceOutput {
    /// Creates a new builder-style object to manufacture [`GetMarketplaceResourceOutput`](crate::operation::get_marketplace_resource::GetMarketplaceResourceOutput).
    pub fn builder() -> crate::operation::get_marketplace_resource::builders::GetMarketplaceResourceOutputBuilder {
        crate::operation::get_marketplace_resource::builders::GetMarketplaceResourceOutputBuilder::default()
    }
}

/// A builder for [`GetMarketplaceResourceOutput`](crate::operation::get_marketplace_resource::GetMarketplaceResourceOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetMarketplaceResourceOutputBuilder {
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) data: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetMarketplaceResourceOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) for the Amazon Web Services Marketplace resource that was requested.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the Amazon Web Services Marketplace resource that was requested.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the Amazon Web Services Marketplace resource that was requested.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p>The obfuscated S3 URL to download the component artifact from.</p>
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The obfuscated S3 URL to download the component artifact from.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The obfuscated S3 URL to download the component artifact from.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// <p>Returns obfuscated data that contains the YAML content of the component.</p>
    pub fn data(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Returns obfuscated data that contains the YAML content of the component.</p>
    pub fn set_data(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data = input;
        self
    }
    /// <p>Returns obfuscated data that contains the YAML content of the component.</p>
    pub fn get_data(&self) -> &::std::option::Option<::std::string::String> {
        &self.data
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetMarketplaceResourceOutput`](crate::operation::get_marketplace_resource::GetMarketplaceResourceOutput).
    pub fn build(self) -> crate::operation::get_marketplace_resource::GetMarketplaceResourceOutput {
        crate::operation::get_marketplace_resource::GetMarketplaceResourceOutput {
            resource_arn: self.resource_arn,
            url: self.url,
            data: self.data,
            _request_id: self._request_id,
        }
    }
}
