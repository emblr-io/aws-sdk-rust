// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EnableOrganizationsRootCredentialsManagementOutput {
    /// <p>The unique identifier (ID) of an organization.</p>
    pub organization_id: ::std::option::Option<::std::string::String>,
    /// <p>The features you have enabled for centralized root access.</p>
    pub enabled_features: ::std::option::Option<::std::vec::Vec<crate::types::FeatureType>>,
    _request_id: Option<String>,
}
impl EnableOrganizationsRootCredentialsManagementOutput {
    /// <p>The unique identifier (ID) of an organization.</p>
    pub fn organization_id(&self) -> ::std::option::Option<&str> {
        self.organization_id.as_deref()
    }
    /// <p>The features you have enabled for centralized root access.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.enabled_features.is_none()`.
    pub fn enabled_features(&self) -> &[crate::types::FeatureType] {
        self.enabled_features.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for EnableOrganizationsRootCredentialsManagementOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl EnableOrganizationsRootCredentialsManagementOutput {
    /// Creates a new builder-style object to manufacture [`EnableOrganizationsRootCredentialsManagementOutput`](crate::operation::enable_organizations_root_credentials_management::EnableOrganizationsRootCredentialsManagementOutput).
    pub fn builder(
    ) -> crate::operation::enable_organizations_root_credentials_management::builders::EnableOrganizationsRootCredentialsManagementOutputBuilder {
        crate::operation::enable_organizations_root_credentials_management::builders::EnableOrganizationsRootCredentialsManagementOutputBuilder::default()
    }
}

/// A builder for [`EnableOrganizationsRootCredentialsManagementOutput`](crate::operation::enable_organizations_root_credentials_management::EnableOrganizationsRootCredentialsManagementOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EnableOrganizationsRootCredentialsManagementOutputBuilder {
    pub(crate) organization_id: ::std::option::Option<::std::string::String>,
    pub(crate) enabled_features: ::std::option::Option<::std::vec::Vec<crate::types::FeatureType>>,
    _request_id: Option<String>,
}
impl EnableOrganizationsRootCredentialsManagementOutputBuilder {
    /// <p>The unique identifier (ID) of an organization.</p>
    pub fn organization_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organization_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier (ID) of an organization.</p>
    pub fn set_organization_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organization_id = input;
        self
    }
    /// <p>The unique identifier (ID) of an organization.</p>
    pub fn get_organization_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.organization_id
    }
    /// Appends an item to `enabled_features`.
    ///
    /// To override the contents of this collection use [`set_enabled_features`](Self::set_enabled_features).
    ///
    /// <p>The features you have enabled for centralized root access.</p>
    pub fn enabled_features(mut self, input: crate::types::FeatureType) -> Self {
        let mut v = self.enabled_features.unwrap_or_default();
        v.push(input);
        self.enabled_features = ::std::option::Option::Some(v);
        self
    }
    /// <p>The features you have enabled for centralized root access.</p>
    pub fn set_enabled_features(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FeatureType>>) -> Self {
        self.enabled_features = input;
        self
    }
    /// <p>The features you have enabled for centralized root access.</p>
    pub fn get_enabled_features(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FeatureType>> {
        &self.enabled_features
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`EnableOrganizationsRootCredentialsManagementOutput`](crate::operation::enable_organizations_root_credentials_management::EnableOrganizationsRootCredentialsManagementOutput).
    pub fn build(self) -> crate::operation::enable_organizations_root_credentials_management::EnableOrganizationsRootCredentialsManagementOutput {
        crate::operation::enable_organizations_root_credentials_management::EnableOrganizationsRootCredentialsManagementOutput {
            organization_id: self.organization_id,
            enabled_features: self.enabled_features,
            _request_id: self._request_id,
        }
    }
}
