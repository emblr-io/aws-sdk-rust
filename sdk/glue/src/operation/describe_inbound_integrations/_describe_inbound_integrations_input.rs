// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeInboundIntegrationsInput {
    /// <p>The Amazon Resource Name (ARN) of the integration.</p>
    pub integration_arn: ::std::option::Option<::std::string::String>,
    /// <p>A token to specify where to start paginating. This is the marker from a previously truncated response.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>The total number of items to return in the output.</p>
    pub max_records: ::std::option::Option<i32>,
    /// <p>The Amazon Resource Name (ARN) of the target resource in the integration.</p>
    pub target_arn: ::std::option::Option<::std::string::String>,
}
impl DescribeInboundIntegrationsInput {
    /// <p>The Amazon Resource Name (ARN) of the integration.</p>
    pub fn integration_arn(&self) -> ::std::option::Option<&str> {
        self.integration_arn.as_deref()
    }
    /// <p>A token to specify where to start paginating. This is the marker from a previously truncated response.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>The total number of items to return in the output.</p>
    pub fn max_records(&self) -> ::std::option::Option<i32> {
        self.max_records
    }
    /// <p>The Amazon Resource Name (ARN) of the target resource in the integration.</p>
    pub fn target_arn(&self) -> ::std::option::Option<&str> {
        self.target_arn.as_deref()
    }
}
impl DescribeInboundIntegrationsInput {
    /// Creates a new builder-style object to manufacture [`DescribeInboundIntegrationsInput`](crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsInput).
    pub fn builder() -> crate::operation::describe_inbound_integrations::builders::DescribeInboundIntegrationsInputBuilder {
        crate::operation::describe_inbound_integrations::builders::DescribeInboundIntegrationsInputBuilder::default()
    }
}

/// A builder for [`DescribeInboundIntegrationsInput`](crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeInboundIntegrationsInputBuilder {
    pub(crate) integration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) max_records: ::std::option::Option<i32>,
    pub(crate) target_arn: ::std::option::Option<::std::string::String>,
}
impl DescribeInboundIntegrationsInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the integration.</p>
    pub fn integration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.integration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the integration.</p>
    pub fn set_integration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.integration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the integration.</p>
    pub fn get_integration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.integration_arn
    }
    /// <p>A token to specify where to start paginating. This is the marker from a previously truncated response.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token to specify where to start paginating. This is the marker from a previously truncated response.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>A token to specify where to start paginating. This is the marker from a previously truncated response.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// <p>The total number of items to return in the output.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.max_records = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of items to return in the output.</p>
    pub fn set_max_records(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_records = input;
        self
    }
    /// <p>The total number of items to return in the output.</p>
    pub fn get_max_records(&self) -> &::std::option::Option<i32> {
        &self.max_records
    }
    /// <p>The Amazon Resource Name (ARN) of the target resource in the integration.</p>
    pub fn target_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the target resource in the integration.</p>
    pub fn set_target_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the target resource in the integration.</p>
    pub fn get_target_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_arn
    }
    /// Consumes the builder and constructs a [`DescribeInboundIntegrationsInput`](crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsInput {
            integration_arn: self.integration_arn,
            marker: self.marker,
            max_records: self.max_records,
            target_arn: self.target_arn,
        })
    }
}
