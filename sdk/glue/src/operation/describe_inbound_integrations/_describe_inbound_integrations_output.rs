// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeInboundIntegrationsOutput {
    /// <p>A list of inbound integrations.</p>
    pub inbound_integrations: ::std::option::Option<::std::vec::Vec<crate::types::InboundIntegration>>,
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeInboundIntegrationsOutput {
    /// <p>A list of inbound integrations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.inbound_integrations.is_none()`.
    pub fn inbound_integrations(&self) -> &[crate::types::InboundIntegration] {
        self.inbound_integrations.as_deref().unwrap_or_default()
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeInboundIntegrationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeInboundIntegrationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInboundIntegrationsOutput`](crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsOutput).
    pub fn builder() -> crate::operation::describe_inbound_integrations::builders::DescribeInboundIntegrationsOutputBuilder {
        crate::operation::describe_inbound_integrations::builders::DescribeInboundIntegrationsOutputBuilder::default()
    }
}

/// A builder for [`DescribeInboundIntegrationsOutput`](crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeInboundIntegrationsOutputBuilder {
    pub(crate) inbound_integrations: ::std::option::Option<::std::vec::Vec<crate::types::InboundIntegration>>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeInboundIntegrationsOutputBuilder {
    /// Appends an item to `inbound_integrations`.
    ///
    /// To override the contents of this collection use [`set_inbound_integrations`](Self::set_inbound_integrations).
    ///
    /// <p>A list of inbound integrations.</p>
    pub fn inbound_integrations(mut self, input: crate::types::InboundIntegration) -> Self {
        let mut v = self.inbound_integrations.unwrap_or_default();
        v.push(input);
        self.inbound_integrations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of inbound integrations.</p>
    pub fn set_inbound_integrations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InboundIntegration>>) -> Self {
        self.inbound_integrations = input;
        self
    }
    /// <p>A list of inbound integrations.</p>
    pub fn get_inbound_integrations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InboundIntegration>> {
        &self.inbound_integrations
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeInboundIntegrationsOutput`](crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsOutput).
    pub fn build(self) -> crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsOutput {
        crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsOutput {
            inbound_integrations: self.inbound_integrations,
            marker: self.marker,
            _request_id: self._request_id,
        }
    }
}
