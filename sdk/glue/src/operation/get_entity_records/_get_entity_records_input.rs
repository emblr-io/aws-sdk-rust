// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetEntityRecordsInput {
    /// <p>The name of the connection that contains the connection type credentials.</p>
    pub connection_name: ::std::option::Option<::std::string::String>,
    /// <p>The catalog ID of the catalog that contains the connection. This can be null, By default, the Amazon Web Services Account ID is the catalog ID.</p>
    pub catalog_id: ::std::option::Option<::std::string::String>,
    /// <p>Name of the entity that we want to query the preview data from the given connection type.</p>
    pub entity_name: ::std::option::Option<::std::string::String>,
    /// <p>A continuation token, included if this is a continuation call.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The API version of the SaaS connector.</p>
    pub data_store_api_version: ::std::option::Option<::std::string::String>,
    /// <p>Connector options that are required to query the data.</p>
    pub connection_options: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>A filter predicate that you can apply in the query request.</p>
    pub filter_predicate: ::std::option::Option<::std::string::String>,
    /// <p>Limits the number of records fetched with the request.</p>
    pub limit: ::std::option::Option<i64>,
    /// <p>A parameter that orders the response preview data.</p>
    pub order_by: ::std::option::Option<::std::string::String>,
    /// <p>List of fields that we want to fetch as part of preview data.</p>
    pub selected_fields: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl GetEntityRecordsInput {
    /// <p>The name of the connection that contains the connection type credentials.</p>
    pub fn connection_name(&self) -> ::std::option::Option<&str> {
        self.connection_name.as_deref()
    }
    /// <p>The catalog ID of the catalog that contains the connection. This can be null, By default, the Amazon Web Services Account ID is the catalog ID.</p>
    pub fn catalog_id(&self) -> ::std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>Name of the entity that we want to query the preview data from the given connection type.</p>
    pub fn entity_name(&self) -> ::std::option::Option<&str> {
        self.entity_name.as_deref()
    }
    /// <p>A continuation token, included if this is a continuation call.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The API version of the SaaS connector.</p>
    pub fn data_store_api_version(&self) -> ::std::option::Option<&str> {
        self.data_store_api_version.as_deref()
    }
    /// <p>Connector options that are required to query the data.</p>
    pub fn connection_options(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.connection_options.as_ref()
    }
    /// <p>A filter predicate that you can apply in the query request.</p>
    pub fn filter_predicate(&self) -> ::std::option::Option<&str> {
        self.filter_predicate.as_deref()
    }
    /// <p>Limits the number of records fetched with the request.</p>
    pub fn limit(&self) -> ::std::option::Option<i64> {
        self.limit
    }
    /// <p>A parameter that orders the response preview data.</p>
    pub fn order_by(&self) -> ::std::option::Option<&str> {
        self.order_by.as_deref()
    }
    /// <p>List of fields that we want to fetch as part of preview data.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.selected_fields.is_none()`.
    pub fn selected_fields(&self) -> &[::std::string::String] {
        self.selected_fields.as_deref().unwrap_or_default()
    }
}
impl GetEntityRecordsInput {
    /// Creates a new builder-style object to manufacture [`GetEntityRecordsInput`](crate::operation::get_entity_records::GetEntityRecordsInput).
    pub fn builder() -> crate::operation::get_entity_records::builders::GetEntityRecordsInputBuilder {
        crate::operation::get_entity_records::builders::GetEntityRecordsInputBuilder::default()
    }
}

/// A builder for [`GetEntityRecordsInput`](crate::operation::get_entity_records::GetEntityRecordsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetEntityRecordsInputBuilder {
    pub(crate) connection_name: ::std::option::Option<::std::string::String>,
    pub(crate) catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) entity_name: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) data_store_api_version: ::std::option::Option<::std::string::String>,
    pub(crate) connection_options: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) filter_predicate: ::std::option::Option<::std::string::String>,
    pub(crate) limit: ::std::option::Option<i64>,
    pub(crate) order_by: ::std::option::Option<::std::string::String>,
    pub(crate) selected_fields: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl GetEntityRecordsInputBuilder {
    /// <p>The name of the connection that contains the connection type credentials.</p>
    pub fn connection_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the connection that contains the connection type credentials.</p>
    pub fn set_connection_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_name = input;
        self
    }
    /// <p>The name of the connection that contains the connection type credentials.</p>
    pub fn get_connection_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_name
    }
    /// <p>The catalog ID of the catalog that contains the connection. This can be null, By default, the Amazon Web Services Account ID is the catalog ID.</p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The catalog ID of the catalog that contains the connection. This can be null, By default, the Amazon Web Services Account ID is the catalog ID.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The catalog ID of the catalog that contains the connection. This can be null, By default, the Amazon Web Services Account ID is the catalog ID.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_id
    }
    /// <p>Name of the entity that we want to query the preview data from the given connection type.</p>
    /// This field is required.
    pub fn entity_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the entity that we want to query the preview data from the given connection type.</p>
    pub fn set_entity_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_name = input;
        self
    }
    /// <p>Name of the entity that we want to query the preview data from the given connection type.</p>
    pub fn get_entity_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_name
    }
    /// <p>A continuation token, included if this is a continuation call.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A continuation token, included if this is a continuation call.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A continuation token, included if this is a continuation call.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The API version of the SaaS connector.</p>
    pub fn data_store_api_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_store_api_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The API version of the SaaS connector.</p>
    pub fn set_data_store_api_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_store_api_version = input;
        self
    }
    /// <p>The API version of the SaaS connector.</p>
    pub fn get_data_store_api_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_store_api_version
    }
    /// Adds a key-value pair to `connection_options`.
    ///
    /// To override the contents of this collection use [`set_connection_options`](Self::set_connection_options).
    ///
    /// <p>Connector options that are required to query the data.</p>
    pub fn connection_options(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.connection_options.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.connection_options = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Connector options that are required to query the data.</p>
    pub fn set_connection_options(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.connection_options = input;
        self
    }
    /// <p>Connector options that are required to query the data.</p>
    pub fn get_connection_options(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.connection_options
    }
    /// <p>A filter predicate that you can apply in the query request.</p>
    pub fn filter_predicate(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter_predicate = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A filter predicate that you can apply in the query request.</p>
    pub fn set_filter_predicate(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter_predicate = input;
        self
    }
    /// <p>A filter predicate that you can apply in the query request.</p>
    pub fn get_filter_predicate(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter_predicate
    }
    /// <p>Limits the number of records fetched with the request.</p>
    /// This field is required.
    pub fn limit(mut self, input: i64) -> Self {
        self.limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>Limits the number of records fetched with the request.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i64>) -> Self {
        self.limit = input;
        self
    }
    /// <p>Limits the number of records fetched with the request.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i64> {
        &self.limit
    }
    /// <p>A parameter that orders the response preview data.</p>
    pub fn order_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.order_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A parameter that orders the response preview data.</p>
    pub fn set_order_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.order_by = input;
        self
    }
    /// <p>A parameter that orders the response preview data.</p>
    pub fn get_order_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.order_by
    }
    /// Appends an item to `selected_fields`.
    ///
    /// To override the contents of this collection use [`set_selected_fields`](Self::set_selected_fields).
    ///
    /// <p>List of fields that we want to fetch as part of preview data.</p>
    pub fn selected_fields(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.selected_fields.unwrap_or_default();
        v.push(input.into());
        self.selected_fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of fields that we want to fetch as part of preview data.</p>
    pub fn set_selected_fields(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.selected_fields = input;
        self
    }
    /// <p>List of fields that we want to fetch as part of preview data.</p>
    pub fn get_selected_fields(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.selected_fields
    }
    /// Consumes the builder and constructs a [`GetEntityRecordsInput`](crate::operation::get_entity_records::GetEntityRecordsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_entity_records::GetEntityRecordsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_entity_records::GetEntityRecordsInput {
            connection_name: self.connection_name,
            catalog_id: self.catalog_id,
            entity_name: self.entity_name,
            next_token: self.next_token,
            data_store_api_version: self.data_store_api_version,
            connection_options: self.connection_options,
            filter_predicate: self.filter_predicate,
            limit: self.limit,
            order_by: self.order_by,
            selected_fields: self.selected_fields,
        })
    }
}
