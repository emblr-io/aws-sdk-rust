// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDataQualityModelResultOutput {
    /// <p>The timestamp when the data quality model training completed.</p>
    pub completed_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A list of <code>StatisticModelResult</code></p>
    pub model: ::std::option::Option<::std::vec::Vec<crate::types::StatisticModelResult>>,
    _request_id: Option<String>,
}
impl GetDataQualityModelResultOutput {
    /// <p>The timestamp when the data quality model training completed.</p>
    pub fn completed_on(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.completed_on.as_ref()
    }
    /// <p>A list of <code>StatisticModelResult</code></p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.model.is_none()`.
    pub fn model(&self) -> &[crate::types::StatisticModelResult] {
        self.model.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for GetDataQualityModelResultOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDataQualityModelResultOutput {
    /// Creates a new builder-style object to manufacture [`GetDataQualityModelResultOutput`](crate::operation::get_data_quality_model_result::GetDataQualityModelResultOutput).
    pub fn builder() -> crate::operation::get_data_quality_model_result::builders::GetDataQualityModelResultOutputBuilder {
        crate::operation::get_data_quality_model_result::builders::GetDataQualityModelResultOutputBuilder::default()
    }
}

/// A builder for [`GetDataQualityModelResultOutput`](crate::operation::get_data_quality_model_result::GetDataQualityModelResultOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetDataQualityModelResultOutputBuilder {
    pub(crate) completed_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) model: ::std::option::Option<::std::vec::Vec<crate::types::StatisticModelResult>>,
    _request_id: Option<String>,
}
impl GetDataQualityModelResultOutputBuilder {
    /// <p>The timestamp when the data quality model training completed.</p>
    pub fn completed_on(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.completed_on = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the data quality model training completed.</p>
    pub fn set_completed_on(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.completed_on = input;
        self
    }
    /// <p>The timestamp when the data quality model training completed.</p>
    pub fn get_completed_on(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.completed_on
    }
    /// Appends an item to `model`.
    ///
    /// To override the contents of this collection use [`set_model`](Self::set_model).
    ///
    /// <p>A list of <code>StatisticModelResult</code></p>
    pub fn model(mut self, input: crate::types::StatisticModelResult) -> Self {
        let mut v = self.model.unwrap_or_default();
        v.push(input);
        self.model = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>StatisticModelResult</code></p>
    pub fn set_model(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StatisticModelResult>>) -> Self {
        self.model = input;
        self
    }
    /// <p>A list of <code>StatisticModelResult</code></p>
    pub fn get_model(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StatisticModelResult>> {
        &self.model
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDataQualityModelResultOutput`](crate::operation::get_data_quality_model_result::GetDataQualityModelResultOutput).
    pub fn build(self) -> crate::operation::get_data_quality_model_result::GetDataQualityModelResultOutput {
        crate::operation::get_data_quality_model_result::GetDataQualityModelResultOutput {
            completed_on: self.completed_on,
            model: self.model,
            _request_id: self._request_id,
        }
    }
}
