// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListDataQualityStatisticsInput {
    /// <p>The Statistic ID.</p>
    pub statistic_id: ::std::option::Option<::std::string::String>,
    /// <p>The Profile ID.</p>
    pub profile_id: ::std::option::Option<::std::string::String>,
    /// <p>A timestamp filter.</p>
    pub timestamp_filter: ::std::option::Option<crate::types::TimestampFilter>,
    /// <p>The maximum number of results to return in this request.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>A pagination token to request the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListDataQualityStatisticsInput {
    /// <p>The Statistic ID.</p>
    pub fn statistic_id(&self) -> ::std::option::Option<&str> {
        self.statistic_id.as_deref()
    }
    /// <p>The Profile ID.</p>
    pub fn profile_id(&self) -> ::std::option::Option<&str> {
        self.profile_id.as_deref()
    }
    /// <p>A timestamp filter.</p>
    pub fn timestamp_filter(&self) -> ::std::option::Option<&crate::types::TimestampFilter> {
        self.timestamp_filter.as_ref()
    }
    /// <p>The maximum number of results to return in this request.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>A pagination token to request the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListDataQualityStatisticsInput {
    /// Creates a new builder-style object to manufacture [`ListDataQualityStatisticsInput`](crate::operation::list_data_quality_statistics::ListDataQualityStatisticsInput).
    pub fn builder() -> crate::operation::list_data_quality_statistics::builders::ListDataQualityStatisticsInputBuilder {
        crate::operation::list_data_quality_statistics::builders::ListDataQualityStatisticsInputBuilder::default()
    }
}

/// A builder for [`ListDataQualityStatisticsInput`](crate::operation::list_data_quality_statistics::ListDataQualityStatisticsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListDataQualityStatisticsInputBuilder {
    pub(crate) statistic_id: ::std::option::Option<::std::string::String>,
    pub(crate) profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) timestamp_filter: ::std::option::Option<crate::types::TimestampFilter>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListDataQualityStatisticsInputBuilder {
    /// <p>The Statistic ID.</p>
    pub fn statistic_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.statistic_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Statistic ID.</p>
    pub fn set_statistic_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.statistic_id = input;
        self
    }
    /// <p>The Statistic ID.</p>
    pub fn get_statistic_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.statistic_id
    }
    /// <p>The Profile ID.</p>
    pub fn profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Profile ID.</p>
    pub fn set_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_id = input;
        self
    }
    /// <p>The Profile ID.</p>
    pub fn get_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_id
    }
    /// <p>A timestamp filter.</p>
    pub fn timestamp_filter(mut self, input: crate::types::TimestampFilter) -> Self {
        self.timestamp_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp filter.</p>
    pub fn set_timestamp_filter(mut self, input: ::std::option::Option<crate::types::TimestampFilter>) -> Self {
        self.timestamp_filter = input;
        self
    }
    /// <p>A timestamp filter.</p>
    pub fn get_timestamp_filter(&self) -> &::std::option::Option<crate::types::TimestampFilter> {
        &self.timestamp_filter
    }
    /// <p>The maximum number of results to return in this request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return in this request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return in this request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>A pagination token to request the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A pagination token to request the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A pagination token to request the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListDataQualityStatisticsInput`](crate::operation::list_data_quality_statistics::ListDataQualityStatisticsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_data_quality_statistics::ListDataQualityStatisticsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_data_quality_statistics::ListDataQualityStatisticsInput {
            statistic_id: self.statistic_id,
            profile_id: self.profile_id,
            timestamp_filter: self.timestamp_filter,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
