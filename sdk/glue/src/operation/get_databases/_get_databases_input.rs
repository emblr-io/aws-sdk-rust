// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDatabasesInput {
    /// <p>The ID of the Data Catalog from which to retrieve <code>Databases</code>. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub catalog_id: ::std::option::Option<::std::string::String>,
    /// <p>A continuation token, if this is a continuation call.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of databases to return in one response.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Allows you to specify that you want to list the databases shared with your account. The allowable values are <code>FEDERATED</code>, <code>FOREIGN</code> or <code>ALL</code>.</p>
    /// <ul>
    /// <li>
    /// <p>If set to <code>FEDERATED</code>, will list the federated databases (referencing an external entity) shared with your account.</p></li>
    /// <li>
    /// <p>If set to <code>FOREIGN</code>, will list the databases shared with your account.</p></li>
    /// <li>
    /// <p>If set to <code>ALL</code>, will list the databases shared with your account, as well as the databases in yor local account.</p></li>
    /// </ul>
    pub resource_share_type: ::std::option::Option<crate::types::ResourceShareType>,
    /// <p>Specifies the database fields returned by the <code>GetDatabases</code> call. This parameter doesn’t accept an empty list. The request must include the <code>NAME</code>.</p>
    pub attributes_to_get: ::std::option::Option<::std::vec::Vec<crate::types::DatabaseAttributes>>,
}
impl GetDatabasesInput {
    /// <p>The ID of the Data Catalog from which to retrieve <code>Databases</code>. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn catalog_id(&self) -> ::std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>A continuation token, if this is a continuation call.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of databases to return in one response.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Allows you to specify that you want to list the databases shared with your account. The allowable values are <code>FEDERATED</code>, <code>FOREIGN</code> or <code>ALL</code>.</p>
    /// <ul>
    /// <li>
    /// <p>If set to <code>FEDERATED</code>, will list the federated databases (referencing an external entity) shared with your account.</p></li>
    /// <li>
    /// <p>If set to <code>FOREIGN</code>, will list the databases shared with your account.</p></li>
    /// <li>
    /// <p>If set to <code>ALL</code>, will list the databases shared with your account, as well as the databases in yor local account.</p></li>
    /// </ul>
    pub fn resource_share_type(&self) -> ::std::option::Option<&crate::types::ResourceShareType> {
        self.resource_share_type.as_ref()
    }
    /// <p>Specifies the database fields returned by the <code>GetDatabases</code> call. This parameter doesn’t accept an empty list. The request must include the <code>NAME</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attributes_to_get.is_none()`.
    pub fn attributes_to_get(&self) -> &[crate::types::DatabaseAttributes] {
        self.attributes_to_get.as_deref().unwrap_or_default()
    }
}
impl GetDatabasesInput {
    /// Creates a new builder-style object to manufacture [`GetDatabasesInput`](crate::operation::get_databases::GetDatabasesInput).
    pub fn builder() -> crate::operation::get_databases::builders::GetDatabasesInputBuilder {
        crate::operation::get_databases::builders::GetDatabasesInputBuilder::default()
    }
}

/// A builder for [`GetDatabasesInput`](crate::operation::get_databases::GetDatabasesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetDatabasesInputBuilder {
    pub(crate) catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) resource_share_type: ::std::option::Option<crate::types::ResourceShareType>,
    pub(crate) attributes_to_get: ::std::option::Option<::std::vec::Vec<crate::types::DatabaseAttributes>>,
}
impl GetDatabasesInputBuilder {
    /// <p>The ID of the Data Catalog from which to retrieve <code>Databases</code>. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Data Catalog from which to retrieve <code>Databases</code>. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The ID of the Data Catalog from which to retrieve <code>Databases</code>. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_id
    }
    /// <p>A continuation token, if this is a continuation call.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A continuation token, if this is a continuation call.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A continuation token, if this is a continuation call.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of databases to return in one response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of databases to return in one response.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of databases to return in one response.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Allows you to specify that you want to list the databases shared with your account. The allowable values are <code>FEDERATED</code>, <code>FOREIGN</code> or <code>ALL</code>.</p>
    /// <ul>
    /// <li>
    /// <p>If set to <code>FEDERATED</code>, will list the federated databases (referencing an external entity) shared with your account.</p></li>
    /// <li>
    /// <p>If set to <code>FOREIGN</code>, will list the databases shared with your account.</p></li>
    /// <li>
    /// <p>If set to <code>ALL</code>, will list the databases shared with your account, as well as the databases in yor local account.</p></li>
    /// </ul>
    pub fn resource_share_type(mut self, input: crate::types::ResourceShareType) -> Self {
        self.resource_share_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allows you to specify that you want to list the databases shared with your account. The allowable values are <code>FEDERATED</code>, <code>FOREIGN</code> or <code>ALL</code>.</p>
    /// <ul>
    /// <li>
    /// <p>If set to <code>FEDERATED</code>, will list the federated databases (referencing an external entity) shared with your account.</p></li>
    /// <li>
    /// <p>If set to <code>FOREIGN</code>, will list the databases shared with your account.</p></li>
    /// <li>
    /// <p>If set to <code>ALL</code>, will list the databases shared with your account, as well as the databases in yor local account.</p></li>
    /// </ul>
    pub fn set_resource_share_type(mut self, input: ::std::option::Option<crate::types::ResourceShareType>) -> Self {
        self.resource_share_type = input;
        self
    }
    /// <p>Allows you to specify that you want to list the databases shared with your account. The allowable values are <code>FEDERATED</code>, <code>FOREIGN</code> or <code>ALL</code>.</p>
    /// <ul>
    /// <li>
    /// <p>If set to <code>FEDERATED</code>, will list the federated databases (referencing an external entity) shared with your account.</p></li>
    /// <li>
    /// <p>If set to <code>FOREIGN</code>, will list the databases shared with your account.</p></li>
    /// <li>
    /// <p>If set to <code>ALL</code>, will list the databases shared with your account, as well as the databases in yor local account.</p></li>
    /// </ul>
    pub fn get_resource_share_type(&self) -> &::std::option::Option<crate::types::ResourceShareType> {
        &self.resource_share_type
    }
    /// Appends an item to `attributes_to_get`.
    ///
    /// To override the contents of this collection use [`set_attributes_to_get`](Self::set_attributes_to_get).
    ///
    /// <p>Specifies the database fields returned by the <code>GetDatabases</code> call. This parameter doesn’t accept an empty list. The request must include the <code>NAME</code>.</p>
    pub fn attributes_to_get(mut self, input: crate::types::DatabaseAttributes) -> Self {
        let mut v = self.attributes_to_get.unwrap_or_default();
        v.push(input);
        self.attributes_to_get = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the database fields returned by the <code>GetDatabases</code> call. This parameter doesn’t accept an empty list. The request must include the <code>NAME</code>.</p>
    pub fn set_attributes_to_get(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DatabaseAttributes>>) -> Self {
        self.attributes_to_get = input;
        self
    }
    /// <p>Specifies the database fields returned by the <code>GetDatabases</code> call. This parameter doesn’t accept an empty list. The request must include the <code>NAME</code>.</p>
    pub fn get_attributes_to_get(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DatabaseAttributes>> {
        &self.attributes_to_get
    }
    /// Consumes the builder and constructs a [`GetDatabasesInput`](crate::operation::get_databases::GetDatabasesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_databases::GetDatabasesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_databases::GetDatabasesInput {
            catalog_id: self.catalog_id,
            next_token: self.next_token,
            max_results: self.max_results,
            resource_share_type: self.resource_share_type,
            attributes_to_get: self.attributes_to_get,
        })
    }
}
