// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateColumnStatisticsTaskSettingsInput {
    /// <p>The name of the database where the table resides.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the table for which to generate column statistics.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>The role used for running the column statistics.</p>
    pub role: ::std::option::Option<::std::string::String>,
    /// <p>A schedule for running the column statistics, specified in CRON syntax.</p>
    pub schedule: ::std::option::Option<::std::string::String>,
    /// <p>A list of column names for which to run statistics.</p>
    pub column_name_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The percentage of data to sample.</p>
    pub sample_size: ::std::option::Option<f64>,
    /// <p>The ID of the Data Catalog in which the database resides.</p>
    pub catalog_id: ::std::option::Option<::std::string::String>,
    /// <p>Name of the security configuration that is used to encrypt CloudWatch logs.</p>
    pub security_configuration: ::std::option::Option<::std::string::String>,
    /// <p>A map of tags.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateColumnStatisticsTaskSettingsInput {
    /// <p>The name of the database where the table resides.</p>
    pub fn database_name(&self) -> ::std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The name of the table for which to generate column statistics.</p>
    pub fn table_name(&self) -> ::std::option::Option<&str> {
        self.table_name.as_deref()
    }
    /// <p>The role used for running the column statistics.</p>
    pub fn role(&self) -> ::std::option::Option<&str> {
        self.role.as_deref()
    }
    /// <p>A schedule for running the column statistics, specified in CRON syntax.</p>
    pub fn schedule(&self) -> ::std::option::Option<&str> {
        self.schedule.as_deref()
    }
    /// <p>A list of column names for which to run statistics.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.column_name_list.is_none()`.
    pub fn column_name_list(&self) -> &[::std::string::String] {
        self.column_name_list.as_deref().unwrap_or_default()
    }
    /// <p>The percentage of data to sample.</p>
    pub fn sample_size(&self) -> ::std::option::Option<f64> {
        self.sample_size
    }
    /// <p>The ID of the Data Catalog in which the database resides.</p>
    pub fn catalog_id(&self) -> ::std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>Name of the security configuration that is used to encrypt CloudWatch logs.</p>
    pub fn security_configuration(&self) -> ::std::option::Option<&str> {
        self.security_configuration.as_deref()
    }
    /// <p>A map of tags.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateColumnStatisticsTaskSettingsInput {
    /// Creates a new builder-style object to manufacture [`CreateColumnStatisticsTaskSettingsInput`](crate::operation::create_column_statistics_task_settings::CreateColumnStatisticsTaskSettingsInput).
    pub fn builder() -> crate::operation::create_column_statistics_task_settings::builders::CreateColumnStatisticsTaskSettingsInputBuilder {
        crate::operation::create_column_statistics_task_settings::builders::CreateColumnStatisticsTaskSettingsInputBuilder::default()
    }
}

/// A builder for [`CreateColumnStatisticsTaskSettingsInput`](crate::operation::create_column_statistics_task_settings::CreateColumnStatisticsTaskSettingsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateColumnStatisticsTaskSettingsInputBuilder {
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
    pub(crate) role: ::std::option::Option<::std::string::String>,
    pub(crate) schedule: ::std::option::Option<::std::string::String>,
    pub(crate) column_name_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) sample_size: ::std::option::Option<f64>,
    pub(crate) catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) security_configuration: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateColumnStatisticsTaskSettingsInputBuilder {
    /// <p>The name of the database where the table resides.</p>
    /// This field is required.
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database where the table resides.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The name of the database where the table resides.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The name of the table for which to generate column statistics.</p>
    /// This field is required.
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the table for which to generate column statistics.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>The name of the table for which to generate column statistics.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// <p>The role used for running the column statistics.</p>
    /// This field is required.
    pub fn role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The role used for running the column statistics.</p>
    pub fn set_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role = input;
        self
    }
    /// <p>The role used for running the column statistics.</p>
    pub fn get_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.role
    }
    /// <p>A schedule for running the column statistics, specified in CRON syntax.</p>
    pub fn schedule(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schedule = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A schedule for running the column statistics, specified in CRON syntax.</p>
    pub fn set_schedule(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schedule = input;
        self
    }
    /// <p>A schedule for running the column statistics, specified in CRON syntax.</p>
    pub fn get_schedule(&self) -> &::std::option::Option<::std::string::String> {
        &self.schedule
    }
    /// Appends an item to `column_name_list`.
    ///
    /// To override the contents of this collection use [`set_column_name_list`](Self::set_column_name_list).
    ///
    /// <p>A list of column names for which to run statistics.</p>
    pub fn column_name_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.column_name_list.unwrap_or_default();
        v.push(input.into());
        self.column_name_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of column names for which to run statistics.</p>
    pub fn set_column_name_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.column_name_list = input;
        self
    }
    /// <p>A list of column names for which to run statistics.</p>
    pub fn get_column_name_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.column_name_list
    }
    /// <p>The percentage of data to sample.</p>
    pub fn sample_size(mut self, input: f64) -> Self {
        self.sample_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage of data to sample.</p>
    pub fn set_sample_size(mut self, input: ::std::option::Option<f64>) -> Self {
        self.sample_size = input;
        self
    }
    /// <p>The percentage of data to sample.</p>
    pub fn get_sample_size(&self) -> &::std::option::Option<f64> {
        &self.sample_size
    }
    /// <p>The ID of the Data Catalog in which the database resides.</p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Data Catalog in which the database resides.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The ID of the Data Catalog in which the database resides.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_id
    }
    /// <p>Name of the security configuration that is used to encrypt CloudWatch logs.</p>
    pub fn security_configuration(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.security_configuration = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the security configuration that is used to encrypt CloudWatch logs.</p>
    pub fn set_security_configuration(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.security_configuration = input;
        self
    }
    /// <p>Name of the security configuration that is used to encrypt CloudWatch logs.</p>
    pub fn get_security_configuration(&self) -> &::std::option::Option<::std::string::String> {
        &self.security_configuration
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map of tags.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of tags.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A map of tags.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateColumnStatisticsTaskSettingsInput`](crate::operation::create_column_statistics_task_settings::CreateColumnStatisticsTaskSettingsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_column_statistics_task_settings::CreateColumnStatisticsTaskSettingsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_column_statistics_task_settings::CreateColumnStatisticsTaskSettingsInput {
                database_name: self.database_name,
                table_name: self.table_name,
                role: self.role,
                schedule: self.schedule,
                column_name_list: self.column_name_list,
                sample_size: self.sample_size,
                catalog_id: self.catalog_id,
                security_configuration: self.security_configuration,
                tags: self.tags,
            },
        )
    }
}
