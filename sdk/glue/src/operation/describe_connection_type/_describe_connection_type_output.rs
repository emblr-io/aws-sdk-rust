// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeConnectionTypeOutput {
    /// <p>The name of the connection type.</p>
    pub connection_type: ::std::option::Option<::std::string::String>,
    /// <p>A description of the connection type.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The supported authentication types, data interface types (compute environments), and data operations of the connector.</p>
    pub capabilities: ::std::option::Option<crate::types::Capabilities>,
    /// <p>Connection properties which are common across compute environments.</p>
    pub connection_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    /// <p>Returns properties that can be set when creating a connection in the <code>ConnectionInput.ConnectionProperties</code>. <code>ConnectionOptions</code> defines parameters that can be set in a Spark ETL script in the connection options map passed to a dataframe.</p>
    pub connection_options: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    /// <p>The type of authentication used for the connection.</p>
    pub authentication_configuration: ::std::option::Option<crate::types::AuthConfiguration>,
    /// <p>The compute environments that are supported by the connection.</p>
    pub compute_environment_configurations:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComputeEnvironmentConfiguration>>,
    /// <p>Physical requirements for a connection, such as VPC, Subnet and Security Group specifications.</p>
    pub physical_connection_requirements: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    /// <p>Connection properties specific to the Athena compute environment.</p>
    pub athena_connection_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    /// <p>Connection properties specific to the Python compute environment.</p>
    pub python_connection_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    /// <p>Connection properties specific to the Spark compute environment.</p>
    pub spark_connection_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    _request_id: Option<String>,
}
impl DescribeConnectionTypeOutput {
    /// <p>The name of the connection type.</p>
    pub fn connection_type(&self) -> ::std::option::Option<&str> {
        self.connection_type.as_deref()
    }
    /// <p>A description of the connection type.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The supported authentication types, data interface types (compute environments), and data operations of the connector.</p>
    pub fn capabilities(&self) -> ::std::option::Option<&crate::types::Capabilities> {
        self.capabilities.as_ref()
    }
    /// <p>Connection properties which are common across compute environments.</p>
    pub fn connection_properties(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::Property>> {
        self.connection_properties.as_ref()
    }
    /// <p>Returns properties that can be set when creating a connection in the <code>ConnectionInput.ConnectionProperties</code>. <code>ConnectionOptions</code> defines parameters that can be set in a Spark ETL script in the connection options map passed to a dataframe.</p>
    pub fn connection_options(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::Property>> {
        self.connection_options.as_ref()
    }
    /// <p>The type of authentication used for the connection.</p>
    pub fn authentication_configuration(&self) -> ::std::option::Option<&crate::types::AuthConfiguration> {
        self.authentication_configuration.as_ref()
    }
    /// <p>The compute environments that are supported by the connection.</p>
    pub fn compute_environment_configurations(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::ComputeEnvironmentConfiguration>> {
        self.compute_environment_configurations.as_ref()
    }
    /// <p>Physical requirements for a connection, such as VPC, Subnet and Security Group specifications.</p>
    pub fn physical_connection_requirements(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::Property>> {
        self.physical_connection_requirements.as_ref()
    }
    /// <p>Connection properties specific to the Athena compute environment.</p>
    pub fn athena_connection_properties(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::Property>> {
        self.athena_connection_properties.as_ref()
    }
    /// <p>Connection properties specific to the Python compute environment.</p>
    pub fn python_connection_properties(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::Property>> {
        self.python_connection_properties.as_ref()
    }
    /// <p>Connection properties specific to the Spark compute environment.</p>
    pub fn spark_connection_properties(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::Property>> {
        self.spark_connection_properties.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeConnectionTypeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeConnectionTypeOutput {
    /// Creates a new builder-style object to manufacture [`DescribeConnectionTypeOutput`](crate::operation::describe_connection_type::DescribeConnectionTypeOutput).
    pub fn builder() -> crate::operation::describe_connection_type::builders::DescribeConnectionTypeOutputBuilder {
        crate::operation::describe_connection_type::builders::DescribeConnectionTypeOutputBuilder::default()
    }
}

/// A builder for [`DescribeConnectionTypeOutput`](crate::operation::describe_connection_type::DescribeConnectionTypeOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeConnectionTypeOutputBuilder {
    pub(crate) connection_type: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) capabilities: ::std::option::Option<crate::types::Capabilities>,
    pub(crate) connection_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    pub(crate) connection_options: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    pub(crate) authentication_configuration: ::std::option::Option<crate::types::AuthConfiguration>,
    pub(crate) compute_environment_configurations:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComputeEnvironmentConfiguration>>,
    pub(crate) physical_connection_requirements: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    pub(crate) athena_connection_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    pub(crate) python_connection_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    pub(crate) spark_connection_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    _request_id: Option<String>,
}
impl DescribeConnectionTypeOutputBuilder {
    /// <p>The name of the connection type.</p>
    pub fn connection_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the connection type.</p>
    pub fn set_connection_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_type = input;
        self
    }
    /// <p>The name of the connection type.</p>
    pub fn get_connection_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_type
    }
    /// <p>A description of the connection type.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the connection type.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the connection type.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The supported authentication types, data interface types (compute environments), and data operations of the connector.</p>
    pub fn capabilities(mut self, input: crate::types::Capabilities) -> Self {
        self.capabilities = ::std::option::Option::Some(input);
        self
    }
    /// <p>The supported authentication types, data interface types (compute environments), and data operations of the connector.</p>
    pub fn set_capabilities(mut self, input: ::std::option::Option<crate::types::Capabilities>) -> Self {
        self.capabilities = input;
        self
    }
    /// <p>The supported authentication types, data interface types (compute environments), and data operations of the connector.</p>
    pub fn get_capabilities(&self) -> &::std::option::Option<crate::types::Capabilities> {
        &self.capabilities
    }
    /// Adds a key-value pair to `connection_properties`.
    ///
    /// To override the contents of this collection use [`set_connection_properties`](Self::set_connection_properties).
    ///
    /// <p>Connection properties which are common across compute environments.</p>
    pub fn connection_properties(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::Property) -> Self {
        let mut hash_map = self.connection_properties.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.connection_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Connection properties which are common across compute environments.</p>
    pub fn set_connection_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    ) -> Self {
        self.connection_properties = input;
        self
    }
    /// <p>Connection properties which are common across compute environments.</p>
    pub fn get_connection_properties(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>> {
        &self.connection_properties
    }
    /// Adds a key-value pair to `connection_options`.
    ///
    /// To override the contents of this collection use [`set_connection_options`](Self::set_connection_options).
    ///
    /// <p>Returns properties that can be set when creating a connection in the <code>ConnectionInput.ConnectionProperties</code>. <code>ConnectionOptions</code> defines parameters that can be set in a Spark ETL script in the connection options map passed to a dataframe.</p>
    pub fn connection_options(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::Property) -> Self {
        let mut hash_map = self.connection_options.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.connection_options = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Returns properties that can be set when creating a connection in the <code>ConnectionInput.ConnectionProperties</code>. <code>ConnectionOptions</code> defines parameters that can be set in a Spark ETL script in the connection options map passed to a dataframe.</p>
    pub fn set_connection_options(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    ) -> Self {
        self.connection_options = input;
        self
    }
    /// <p>Returns properties that can be set when creating a connection in the <code>ConnectionInput.ConnectionProperties</code>. <code>ConnectionOptions</code> defines parameters that can be set in a Spark ETL script in the connection options map passed to a dataframe.</p>
    pub fn get_connection_options(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>> {
        &self.connection_options
    }
    /// <p>The type of authentication used for the connection.</p>
    pub fn authentication_configuration(mut self, input: crate::types::AuthConfiguration) -> Self {
        self.authentication_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of authentication used for the connection.</p>
    pub fn set_authentication_configuration(mut self, input: ::std::option::Option<crate::types::AuthConfiguration>) -> Self {
        self.authentication_configuration = input;
        self
    }
    /// <p>The type of authentication used for the connection.</p>
    pub fn get_authentication_configuration(&self) -> &::std::option::Option<crate::types::AuthConfiguration> {
        &self.authentication_configuration
    }
    /// Adds a key-value pair to `compute_environment_configurations`.
    ///
    /// To override the contents of this collection use [`set_compute_environment_configurations`](Self::set_compute_environment_configurations).
    ///
    /// <p>The compute environments that are supported by the connection.</p>
    pub fn compute_environment_configurations(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: crate::types::ComputeEnvironmentConfiguration,
    ) -> Self {
        let mut hash_map = self.compute_environment_configurations.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.compute_environment_configurations = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The compute environments that are supported by the connection.</p>
    pub fn set_compute_environment_configurations(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComputeEnvironmentConfiguration>>,
    ) -> Self {
        self.compute_environment_configurations = input;
        self
    }
    /// <p>The compute environments that are supported by the connection.</p>
    pub fn get_compute_environment_configurations(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComputeEnvironmentConfiguration>> {
        &self.compute_environment_configurations
    }
    /// Adds a key-value pair to `physical_connection_requirements`.
    ///
    /// To override the contents of this collection use [`set_physical_connection_requirements`](Self::set_physical_connection_requirements).
    ///
    /// <p>Physical requirements for a connection, such as VPC, Subnet and Security Group specifications.</p>
    pub fn physical_connection_requirements(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::Property) -> Self {
        let mut hash_map = self.physical_connection_requirements.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.physical_connection_requirements = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Physical requirements for a connection, such as VPC, Subnet and Security Group specifications.</p>
    pub fn set_physical_connection_requirements(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    ) -> Self {
        self.physical_connection_requirements = input;
        self
    }
    /// <p>Physical requirements for a connection, such as VPC, Subnet and Security Group specifications.</p>
    pub fn get_physical_connection_requirements(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>> {
        &self.physical_connection_requirements
    }
    /// Adds a key-value pair to `athena_connection_properties`.
    ///
    /// To override the contents of this collection use [`set_athena_connection_properties`](Self::set_athena_connection_properties).
    ///
    /// <p>Connection properties specific to the Athena compute environment.</p>
    pub fn athena_connection_properties(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::Property) -> Self {
        let mut hash_map = self.athena_connection_properties.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.athena_connection_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Connection properties specific to the Athena compute environment.</p>
    pub fn set_athena_connection_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    ) -> Self {
        self.athena_connection_properties = input;
        self
    }
    /// <p>Connection properties specific to the Athena compute environment.</p>
    pub fn get_athena_connection_properties(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>> {
        &self.athena_connection_properties
    }
    /// Adds a key-value pair to `python_connection_properties`.
    ///
    /// To override the contents of this collection use [`set_python_connection_properties`](Self::set_python_connection_properties).
    ///
    /// <p>Connection properties specific to the Python compute environment.</p>
    pub fn python_connection_properties(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::Property) -> Self {
        let mut hash_map = self.python_connection_properties.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.python_connection_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Connection properties specific to the Python compute environment.</p>
    pub fn set_python_connection_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    ) -> Self {
        self.python_connection_properties = input;
        self
    }
    /// <p>Connection properties specific to the Python compute environment.</p>
    pub fn get_python_connection_properties(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>> {
        &self.python_connection_properties
    }
    /// Adds a key-value pair to `spark_connection_properties`.
    ///
    /// To override the contents of this collection use [`set_spark_connection_properties`](Self::set_spark_connection_properties).
    ///
    /// <p>Connection properties specific to the Spark compute environment.</p>
    pub fn spark_connection_properties(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::Property) -> Self {
        let mut hash_map = self.spark_connection_properties.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.spark_connection_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Connection properties specific to the Spark compute environment.</p>
    pub fn set_spark_connection_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    ) -> Self {
        self.spark_connection_properties = input;
        self
    }
    /// <p>Connection properties specific to the Spark compute environment.</p>
    pub fn get_spark_connection_properties(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>> {
        &self.spark_connection_properties
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeConnectionTypeOutput`](crate::operation::describe_connection_type::DescribeConnectionTypeOutput).
    pub fn build(self) -> crate::operation::describe_connection_type::DescribeConnectionTypeOutput {
        crate::operation::describe_connection_type::DescribeConnectionTypeOutput {
            connection_type: self.connection_type,
            description: self.description,
            capabilities: self.capabilities,
            connection_properties: self.connection_properties,
            connection_options: self.connection_options,
            authentication_configuration: self.authentication_configuration,
            compute_environment_configurations: self.compute_environment_configurations,
            physical_connection_requirements: self.physical_connection_requirements,
            athena_connection_properties: self.athena_connection_properties,
            python_connection_properties: self.python_connection_properties,
            spark_connection_properties: self.spark_connection_properties,
            _request_id: self._request_id,
        }
    }
}
