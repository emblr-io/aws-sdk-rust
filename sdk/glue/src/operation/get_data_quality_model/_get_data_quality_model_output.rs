// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDataQualityModelOutput {
    /// <p>The training status of the data quality model.</p>
    pub status: ::std::option::Option<crate::types::DataQualityModelStatus>,
    /// <p>The timestamp when the data quality model training started.</p>
    pub started_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the data quality model training completed.</p>
    pub completed_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The training failure reason.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetDataQualityModelOutput {
    /// <p>The training status of the data quality model.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::DataQualityModelStatus> {
        self.status.as_ref()
    }
    /// <p>The timestamp when the data quality model training started.</p>
    pub fn started_on(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.started_on.as_ref()
    }
    /// <p>The timestamp when the data quality model training completed.</p>
    pub fn completed_on(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.completed_on.as_ref()
    }
    /// <p>The training failure reason.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetDataQualityModelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDataQualityModelOutput {
    /// Creates a new builder-style object to manufacture [`GetDataQualityModelOutput`](crate::operation::get_data_quality_model::GetDataQualityModelOutput).
    pub fn builder() -> crate::operation::get_data_quality_model::builders::GetDataQualityModelOutputBuilder {
        crate::operation::get_data_quality_model::builders::GetDataQualityModelOutputBuilder::default()
    }
}

/// A builder for [`GetDataQualityModelOutput`](crate::operation::get_data_quality_model::GetDataQualityModelOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetDataQualityModelOutputBuilder {
    pub(crate) status: ::std::option::Option<crate::types::DataQualityModelStatus>,
    pub(crate) started_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) completed_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetDataQualityModelOutputBuilder {
    /// <p>The training status of the data quality model.</p>
    pub fn status(mut self, input: crate::types::DataQualityModelStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The training status of the data quality model.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DataQualityModelStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The training status of the data quality model.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DataQualityModelStatus> {
        &self.status
    }
    /// <p>The timestamp when the data quality model training started.</p>
    pub fn started_on(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_on = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the data quality model training started.</p>
    pub fn set_started_on(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_on = input;
        self
    }
    /// <p>The timestamp when the data quality model training started.</p>
    pub fn get_started_on(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_on
    }
    /// <p>The timestamp when the data quality model training completed.</p>
    pub fn completed_on(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.completed_on = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the data quality model training completed.</p>
    pub fn set_completed_on(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.completed_on = input;
        self
    }
    /// <p>The timestamp when the data quality model training completed.</p>
    pub fn get_completed_on(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.completed_on
    }
    /// <p>The training failure reason.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The training failure reason.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The training failure reason.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDataQualityModelOutput`](crate::operation::get_data_quality_model::GetDataQualityModelOutput).
    pub fn build(self) -> crate::operation::get_data_quality_model::GetDataQualityModelOutput {
        crate::operation::get_data_quality_model::GetDataQualityModelOutput {
            status: self.status,
            started_on: self.started_on,
            completed_on: self.completed_on,
            failure_reason: self.failure_reason,
            _request_id: self._request_id,
        }
    }
}
