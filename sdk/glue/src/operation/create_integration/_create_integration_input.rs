// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateIntegrationInput {
    /// <p>A unique name for an integration in Glue.</p>
    pub integration_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the source resource for the integration.</p>
    pub source_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the target resource for the integration.</p>
    pub target_arn: ::std::option::Option<::std::string::String>,
    /// <p>A description of the integration.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Selects source tables for the integration using Maxwell filter syntax.</p>
    pub data_filter: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of a KMS key used for encrypting the channel.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>An optional set of non-secret key–value pairs that contains additional contextual information for encryption. This can only be provided if <code>KMSKeyId</code> is provided.</p>
    pub additional_encryption_context: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Metadata assigned to the resource consisting of a list of key-value pairs.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The configuration settings.</p>
    pub integration_config: ::std::option::Option<crate::types::IntegrationConfig>,
}
impl CreateIntegrationInput {
    /// <p>A unique name for an integration in Glue.</p>
    pub fn integration_name(&self) -> ::std::option::Option<&str> {
        self.integration_name.as_deref()
    }
    /// <p>The ARN of the source resource for the integration.</p>
    pub fn source_arn(&self) -> ::std::option::Option<&str> {
        self.source_arn.as_deref()
    }
    /// <p>The ARN of the target resource for the integration.</p>
    pub fn target_arn(&self) -> ::std::option::Option<&str> {
        self.target_arn.as_deref()
    }
    /// <p>A description of the integration.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Selects source tables for the integration using Maxwell filter syntax.</p>
    pub fn data_filter(&self) -> ::std::option::Option<&str> {
        self.data_filter.as_deref()
    }
    /// <p>The ARN of a KMS key used for encrypting the channel.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>An optional set of non-secret key–value pairs that contains additional contextual information for encryption. This can only be provided if <code>KMSKeyId</code> is provided.</p>
    pub fn additional_encryption_context(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.additional_encryption_context.as_ref()
    }
    /// <p>Metadata assigned to the resource consisting of a list of key-value pairs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The configuration settings.</p>
    pub fn integration_config(&self) -> ::std::option::Option<&crate::types::IntegrationConfig> {
        self.integration_config.as_ref()
    }
}
impl CreateIntegrationInput {
    /// Creates a new builder-style object to manufacture [`CreateIntegrationInput`](crate::operation::create_integration::CreateIntegrationInput).
    pub fn builder() -> crate::operation::create_integration::builders::CreateIntegrationInputBuilder {
        crate::operation::create_integration::builders::CreateIntegrationInputBuilder::default()
    }
}

/// A builder for [`CreateIntegrationInput`](crate::operation::create_integration::CreateIntegrationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateIntegrationInputBuilder {
    pub(crate) integration_name: ::std::option::Option<::std::string::String>,
    pub(crate) source_arn: ::std::option::Option<::std::string::String>,
    pub(crate) target_arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) data_filter: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) additional_encryption_context: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) integration_config: ::std::option::Option<crate::types::IntegrationConfig>,
}
impl CreateIntegrationInputBuilder {
    /// <p>A unique name for an integration in Glue.</p>
    /// This field is required.
    pub fn integration_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.integration_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique name for an integration in Glue.</p>
    pub fn set_integration_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.integration_name = input;
        self
    }
    /// <p>A unique name for an integration in Glue.</p>
    pub fn get_integration_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.integration_name
    }
    /// <p>The ARN of the source resource for the integration.</p>
    /// This field is required.
    pub fn source_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the source resource for the integration.</p>
    pub fn set_source_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_arn = input;
        self
    }
    /// <p>The ARN of the source resource for the integration.</p>
    pub fn get_source_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_arn
    }
    /// <p>The ARN of the target resource for the integration.</p>
    /// This field is required.
    pub fn target_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the target resource for the integration.</p>
    pub fn set_target_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_arn = input;
        self
    }
    /// <p>The ARN of the target resource for the integration.</p>
    pub fn get_target_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_arn
    }
    /// <p>A description of the integration.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the integration.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the integration.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Selects source tables for the integration using Maxwell filter syntax.</p>
    pub fn data_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_filter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Selects source tables for the integration using Maxwell filter syntax.</p>
    pub fn set_data_filter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_filter = input;
        self
    }
    /// <p>Selects source tables for the integration using Maxwell filter syntax.</p>
    pub fn get_data_filter(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_filter
    }
    /// <p>The ARN of a KMS key used for encrypting the channel.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of a KMS key used for encrypting the channel.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The ARN of a KMS key used for encrypting the channel.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// Adds a key-value pair to `additional_encryption_context`.
    ///
    /// To override the contents of this collection use [`set_additional_encryption_context`](Self::set_additional_encryption_context).
    ///
    /// <p>An optional set of non-secret key–value pairs that contains additional contextual information for encryption. This can only be provided if <code>KMSKeyId</code> is provided.</p>
    pub fn additional_encryption_context(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.additional_encryption_context.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.additional_encryption_context = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>An optional set of non-secret key–value pairs that contains additional contextual information for encryption. This can only be provided if <code>KMSKeyId</code> is provided.</p>
    pub fn set_additional_encryption_context(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.additional_encryption_context = input;
        self
    }
    /// <p>An optional set of non-secret key–value pairs that contains additional contextual information for encryption. This can only be provided if <code>KMSKeyId</code> is provided.</p>
    pub fn get_additional_encryption_context(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.additional_encryption_context
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Metadata assigned to the resource consisting of a list of key-value pairs.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Metadata assigned to the resource consisting of a list of key-value pairs.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Metadata assigned to the resource consisting of a list of key-value pairs.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The configuration settings.</p>
    pub fn integration_config(mut self, input: crate::types::IntegrationConfig) -> Self {
        self.integration_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration settings.</p>
    pub fn set_integration_config(mut self, input: ::std::option::Option<crate::types::IntegrationConfig>) -> Self {
        self.integration_config = input;
        self
    }
    /// <p>The configuration settings.</p>
    pub fn get_integration_config(&self) -> &::std::option::Option<crate::types::IntegrationConfig> {
        &self.integration_config
    }
    /// Consumes the builder and constructs a [`CreateIntegrationInput`](crate::operation::create_integration::CreateIntegrationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_integration::CreateIntegrationInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_integration::CreateIntegrationInput {
            integration_name: self.integration_name,
            source_arn: self.source_arn,
            target_arn: self.target_arn,
            description: self.description,
            data_filter: self.data_filter,
            kms_key_id: self.kms_key_id,
            additional_encryption_context: self.additional_encryption_context,
            tags: self.tags,
            integration_config: self.integration_config,
        })
    }
}
