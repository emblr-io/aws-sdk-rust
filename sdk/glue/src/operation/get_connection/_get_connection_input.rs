// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetConnectionInput {
    /// <p>The ID of the Data Catalog in which the connection resides. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub catalog_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the connection definition to retrieve.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Allows you to retrieve the connection metadata without returning the password. For instance, the Glue console uses this flag to retrieve the connection, and does not display the password. Set this parameter when the caller might not have permission to use the KMS key to decrypt the password, but it does have permission to access the rest of the connection properties.</p>
    pub hide_password: ::std::option::Option<bool>,
    /// <p>For connections that may be used in multiple services, specifies returning properties for the specified compute environment.</p>
    pub apply_override_for_compute_environment: ::std::option::Option<crate::types::ComputeEnvironment>,
}
impl GetConnectionInput {
    /// <p>The ID of the Data Catalog in which the connection resides. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn catalog_id(&self) -> ::std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>The name of the connection definition to retrieve.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Allows you to retrieve the connection metadata without returning the password. For instance, the Glue console uses this flag to retrieve the connection, and does not display the password. Set this parameter when the caller might not have permission to use the KMS key to decrypt the password, but it does have permission to access the rest of the connection properties.</p>
    pub fn hide_password(&self) -> ::std::option::Option<bool> {
        self.hide_password
    }
    /// <p>For connections that may be used in multiple services, specifies returning properties for the specified compute environment.</p>
    pub fn apply_override_for_compute_environment(&self) -> ::std::option::Option<&crate::types::ComputeEnvironment> {
        self.apply_override_for_compute_environment.as_ref()
    }
}
impl GetConnectionInput {
    /// Creates a new builder-style object to manufacture [`GetConnectionInput`](crate::operation::get_connection::GetConnectionInput).
    pub fn builder() -> crate::operation::get_connection::builders::GetConnectionInputBuilder {
        crate::operation::get_connection::builders::GetConnectionInputBuilder::default()
    }
}

/// A builder for [`GetConnectionInput`](crate::operation::get_connection::GetConnectionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetConnectionInputBuilder {
    pub(crate) catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) hide_password: ::std::option::Option<bool>,
    pub(crate) apply_override_for_compute_environment: ::std::option::Option<crate::types::ComputeEnvironment>,
}
impl GetConnectionInputBuilder {
    /// <p>The ID of the Data Catalog in which the connection resides. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Data Catalog in which the connection resides. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The ID of the Data Catalog in which the connection resides. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_id
    }
    /// <p>The name of the connection definition to retrieve.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the connection definition to retrieve.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the connection definition to retrieve.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Allows you to retrieve the connection metadata without returning the password. For instance, the Glue console uses this flag to retrieve the connection, and does not display the password. Set this parameter when the caller might not have permission to use the KMS key to decrypt the password, but it does have permission to access the rest of the connection properties.</p>
    pub fn hide_password(mut self, input: bool) -> Self {
        self.hide_password = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allows you to retrieve the connection metadata without returning the password. For instance, the Glue console uses this flag to retrieve the connection, and does not display the password. Set this parameter when the caller might not have permission to use the KMS key to decrypt the password, but it does have permission to access the rest of the connection properties.</p>
    pub fn set_hide_password(mut self, input: ::std::option::Option<bool>) -> Self {
        self.hide_password = input;
        self
    }
    /// <p>Allows you to retrieve the connection metadata without returning the password. For instance, the Glue console uses this flag to retrieve the connection, and does not display the password. Set this parameter when the caller might not have permission to use the KMS key to decrypt the password, but it does have permission to access the rest of the connection properties.</p>
    pub fn get_hide_password(&self) -> &::std::option::Option<bool> {
        &self.hide_password
    }
    /// <p>For connections that may be used in multiple services, specifies returning properties for the specified compute environment.</p>
    pub fn apply_override_for_compute_environment(mut self, input: crate::types::ComputeEnvironment) -> Self {
        self.apply_override_for_compute_environment = ::std::option::Option::Some(input);
        self
    }
    /// <p>For connections that may be used in multiple services, specifies returning properties for the specified compute environment.</p>
    pub fn set_apply_override_for_compute_environment(mut self, input: ::std::option::Option<crate::types::ComputeEnvironment>) -> Self {
        self.apply_override_for_compute_environment = input;
        self
    }
    /// <p>For connections that may be used in multiple services, specifies returning properties for the specified compute environment.</p>
    pub fn get_apply_override_for_compute_environment(&self) -> &::std::option::Option<crate::types::ComputeEnvironment> {
        &self.apply_override_for_compute_environment
    }
    /// Consumes the builder and constructs a [`GetConnectionInput`](crate::operation::get_connection::GetConnectionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_connection::GetConnectionInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_connection::GetConnectionInput {
            catalog_id: self.catalog_id,
            name: self.name,
            hide_password: self.hide_password,
            apply_override_for_compute_environment: self.apply_override_for_compute_environment,
        })
    }
}
