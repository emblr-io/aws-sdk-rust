// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateIntegrationResourcePropertyInput {
    /// <p>The connection ARN of the source, or the database ARN of the target.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The resource properties associated with the integration source.</p>
    pub source_processing_properties: ::std::option::Option<crate::types::SourceProcessingProperties>,
    /// <p>The resource properties associated with the integration target.</p>
    pub target_processing_properties: ::std::option::Option<crate::types::TargetProcessingProperties>,
}
impl CreateIntegrationResourcePropertyInput {
    /// <p>The connection ARN of the source, or the database ARN of the target.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The resource properties associated with the integration source.</p>
    pub fn source_processing_properties(&self) -> ::std::option::Option<&crate::types::SourceProcessingProperties> {
        self.source_processing_properties.as_ref()
    }
    /// <p>The resource properties associated with the integration target.</p>
    pub fn target_processing_properties(&self) -> ::std::option::Option<&crate::types::TargetProcessingProperties> {
        self.target_processing_properties.as_ref()
    }
}
impl CreateIntegrationResourcePropertyInput {
    /// Creates a new builder-style object to manufacture [`CreateIntegrationResourcePropertyInput`](crate::operation::create_integration_resource_property::CreateIntegrationResourcePropertyInput).
    pub fn builder() -> crate::operation::create_integration_resource_property::builders::CreateIntegrationResourcePropertyInputBuilder {
        crate::operation::create_integration_resource_property::builders::CreateIntegrationResourcePropertyInputBuilder::default()
    }
}

/// A builder for [`CreateIntegrationResourcePropertyInput`](crate::operation::create_integration_resource_property::CreateIntegrationResourcePropertyInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateIntegrationResourcePropertyInputBuilder {
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) source_processing_properties: ::std::option::Option<crate::types::SourceProcessingProperties>,
    pub(crate) target_processing_properties: ::std::option::Option<crate::types::TargetProcessingProperties>,
}
impl CreateIntegrationResourcePropertyInputBuilder {
    /// <p>The connection ARN of the source, or the database ARN of the target.</p>
    /// This field is required.
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The connection ARN of the source, or the database ARN of the target.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The connection ARN of the source, or the database ARN of the target.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p>The resource properties associated with the integration source.</p>
    pub fn source_processing_properties(mut self, input: crate::types::SourceProcessingProperties) -> Self {
        self.source_processing_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>The resource properties associated with the integration source.</p>
    pub fn set_source_processing_properties(mut self, input: ::std::option::Option<crate::types::SourceProcessingProperties>) -> Self {
        self.source_processing_properties = input;
        self
    }
    /// <p>The resource properties associated with the integration source.</p>
    pub fn get_source_processing_properties(&self) -> &::std::option::Option<crate::types::SourceProcessingProperties> {
        &self.source_processing_properties
    }
    /// <p>The resource properties associated with the integration target.</p>
    pub fn target_processing_properties(mut self, input: crate::types::TargetProcessingProperties) -> Self {
        self.target_processing_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>The resource properties associated with the integration target.</p>
    pub fn set_target_processing_properties(mut self, input: ::std::option::Option<crate::types::TargetProcessingProperties>) -> Self {
        self.target_processing_properties = input;
        self
    }
    /// <p>The resource properties associated with the integration target.</p>
    pub fn get_target_processing_properties(&self) -> &::std::option::Option<crate::types::TargetProcessingProperties> {
        &self.target_processing_properties
    }
    /// Consumes the builder and constructs a [`CreateIntegrationResourcePropertyInput`](crate::operation::create_integration_resource_property::CreateIntegrationResourcePropertyInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_integration_resource_property::CreateIntegrationResourcePropertyInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_integration_resource_property::CreateIntegrationResourcePropertyInput {
                resource_arn: self.resource_arn,
                source_processing_properties: self.source_processing_properties,
                target_processing_properties: self.target_processing_properties,
            },
        )
    }
}
