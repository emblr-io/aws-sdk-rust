// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetCatalogsInput {
    /// <p>The ID of the parent catalog in which the catalog resides. If none is provided, the Amazon Web Services Account Number is used by default.</p>
    pub parent_catalog_id: ::std::option::Option<::std::string::String>,
    /// <p>A continuation token, if this is a continuation call.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of catalogs to return in one response.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Whether to list all catalogs across the catalog hierarchy, starting from the <code>ParentCatalogId</code>. Defaults to <code>false</code> . When <code>true</code>, all catalog objects in the <code>ParentCatalogID</code> hierarchy are enumerated in the response.</p>
    pub recursive: ::std::option::Option<bool>,
    /// <p>Whether to list the default catalog in the account and region in the response. Defaults to <code>false</code>. When <code>true</code> and <code>ParentCatalogId = NULL | Amazon Web Services Account ID</code>, all catalogs and the default catalog are enumerated in the response.</p>
    /// <p>When the <code>ParentCatalogId</code> is not equal to null, and this attribute is passed as <code>false</code> or <code>true</code>, an <code>InvalidInputException</code> is thrown.</p>
    pub include_root: ::std::option::Option<bool>,
}
impl GetCatalogsInput {
    /// <p>The ID of the parent catalog in which the catalog resides. If none is provided, the Amazon Web Services Account Number is used by default.</p>
    pub fn parent_catalog_id(&self) -> ::std::option::Option<&str> {
        self.parent_catalog_id.as_deref()
    }
    /// <p>A continuation token, if this is a continuation call.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of catalogs to return in one response.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Whether to list all catalogs across the catalog hierarchy, starting from the <code>ParentCatalogId</code>. Defaults to <code>false</code> . When <code>true</code>, all catalog objects in the <code>ParentCatalogID</code> hierarchy are enumerated in the response.</p>
    pub fn recursive(&self) -> ::std::option::Option<bool> {
        self.recursive
    }
    /// <p>Whether to list the default catalog in the account and region in the response. Defaults to <code>false</code>. When <code>true</code> and <code>ParentCatalogId = NULL | Amazon Web Services Account ID</code>, all catalogs and the default catalog are enumerated in the response.</p>
    /// <p>When the <code>ParentCatalogId</code> is not equal to null, and this attribute is passed as <code>false</code> or <code>true</code>, an <code>InvalidInputException</code> is thrown.</p>
    pub fn include_root(&self) -> ::std::option::Option<bool> {
        self.include_root
    }
}
impl GetCatalogsInput {
    /// Creates a new builder-style object to manufacture [`GetCatalogsInput`](crate::operation::get_catalogs::GetCatalogsInput).
    pub fn builder() -> crate::operation::get_catalogs::builders::GetCatalogsInputBuilder {
        crate::operation::get_catalogs::builders::GetCatalogsInputBuilder::default()
    }
}

/// A builder for [`GetCatalogsInput`](crate::operation::get_catalogs::GetCatalogsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetCatalogsInputBuilder {
    pub(crate) parent_catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) recursive: ::std::option::Option<bool>,
    pub(crate) include_root: ::std::option::Option<bool>,
}
impl GetCatalogsInputBuilder {
    /// <p>The ID of the parent catalog in which the catalog resides. If none is provided, the Amazon Web Services Account Number is used by default.</p>
    pub fn parent_catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parent_catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the parent catalog in which the catalog resides. If none is provided, the Amazon Web Services Account Number is used by default.</p>
    pub fn set_parent_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parent_catalog_id = input;
        self
    }
    /// <p>The ID of the parent catalog in which the catalog resides. If none is provided, the Amazon Web Services Account Number is used by default.</p>
    pub fn get_parent_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.parent_catalog_id
    }
    /// <p>A continuation token, if this is a continuation call.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A continuation token, if this is a continuation call.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A continuation token, if this is a continuation call.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of catalogs to return in one response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of catalogs to return in one response.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of catalogs to return in one response.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Whether to list all catalogs across the catalog hierarchy, starting from the <code>ParentCatalogId</code>. Defaults to <code>false</code> . When <code>true</code>, all catalog objects in the <code>ParentCatalogID</code> hierarchy are enumerated in the response.</p>
    pub fn recursive(mut self, input: bool) -> Self {
        self.recursive = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to list all catalogs across the catalog hierarchy, starting from the <code>ParentCatalogId</code>. Defaults to <code>false</code> . When <code>true</code>, all catalog objects in the <code>ParentCatalogID</code> hierarchy are enumerated in the response.</p>
    pub fn set_recursive(mut self, input: ::std::option::Option<bool>) -> Self {
        self.recursive = input;
        self
    }
    /// <p>Whether to list all catalogs across the catalog hierarchy, starting from the <code>ParentCatalogId</code>. Defaults to <code>false</code> . When <code>true</code>, all catalog objects in the <code>ParentCatalogID</code> hierarchy are enumerated in the response.</p>
    pub fn get_recursive(&self) -> &::std::option::Option<bool> {
        &self.recursive
    }
    /// <p>Whether to list the default catalog in the account and region in the response. Defaults to <code>false</code>. When <code>true</code> and <code>ParentCatalogId = NULL | Amazon Web Services Account ID</code>, all catalogs and the default catalog are enumerated in the response.</p>
    /// <p>When the <code>ParentCatalogId</code> is not equal to null, and this attribute is passed as <code>false</code> or <code>true</code>, an <code>InvalidInputException</code> is thrown.</p>
    pub fn include_root(mut self, input: bool) -> Self {
        self.include_root = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to list the default catalog in the account and region in the response. Defaults to <code>false</code>. When <code>true</code> and <code>ParentCatalogId = NULL | Amazon Web Services Account ID</code>, all catalogs and the default catalog are enumerated in the response.</p>
    /// <p>When the <code>ParentCatalogId</code> is not equal to null, and this attribute is passed as <code>false</code> or <code>true</code>, an <code>InvalidInputException</code> is thrown.</p>
    pub fn set_include_root(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_root = input;
        self
    }
    /// <p>Whether to list the default catalog in the account and region in the response. Defaults to <code>false</code>. When <code>true</code> and <code>ParentCatalogId = NULL | Amazon Web Services Account ID</code>, all catalogs and the default catalog are enumerated in the response.</p>
    /// <p>When the <code>ParentCatalogId</code> is not equal to null, and this attribute is passed as <code>false</code> or <code>true</code>, an <code>InvalidInputException</code> is thrown.</p>
    pub fn get_include_root(&self) -> &::std::option::Option<bool> {
        &self.include_root
    }
    /// Consumes the builder and constructs a [`GetCatalogsInput`](crate::operation::get_catalogs::GetCatalogsInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::get_catalogs::GetCatalogsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_catalogs::GetCatalogsInput {
            parent_catalog_id: self.parent_catalog_id,
            next_token: self.next_token,
            max_results: self.max_results,
            recursive: self.recursive,
            include_root: self.include_root,
        })
    }
}
