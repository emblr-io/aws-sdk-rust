// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeIntegrationsInput {
    /// <p>The Amazon Resource Name (ARN) for the integration.</p>
    pub integration_identifier: ::std::option::Option<::std::string::String>,
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>The total number of items to return in the output.</p>
    pub max_records: ::std::option::Option<i32>,
    /// <p>A list of key and values, to filter down the results. Supported keys are "Status", "IntegrationName", and "SourceArn". IntegrationName is limited to only one value.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::IntegrationFilter>>,
}
impl DescribeIntegrationsInput {
    /// <p>The Amazon Resource Name (ARN) for the integration.</p>
    pub fn integration_identifier(&self) -> ::std::option::Option<&str> {
        self.integration_identifier.as_deref()
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>The total number of items to return in the output.</p>
    pub fn max_records(&self) -> ::std::option::Option<i32> {
        self.max_records
    }
    /// <p>A list of key and values, to filter down the results. Supported keys are "Status", "IntegrationName", and "SourceArn". IntegrationName is limited to only one value.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::IntegrationFilter] {
        self.filters.as_deref().unwrap_or_default()
    }
}
impl DescribeIntegrationsInput {
    /// Creates a new builder-style object to manufacture [`DescribeIntegrationsInput`](crate::operation::describe_integrations::DescribeIntegrationsInput).
    pub fn builder() -> crate::operation::describe_integrations::builders::DescribeIntegrationsInputBuilder {
        crate::operation::describe_integrations::builders::DescribeIntegrationsInputBuilder::default()
    }
}

/// A builder for [`DescribeIntegrationsInput`](crate::operation::describe_integrations::DescribeIntegrationsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeIntegrationsInputBuilder {
    pub(crate) integration_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) max_records: ::std::option::Option<i32>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::IntegrationFilter>>,
}
impl DescribeIntegrationsInputBuilder {
    /// <p>The Amazon Resource Name (ARN) for the integration.</p>
    pub fn integration_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.integration_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the integration.</p>
    pub fn set_integration_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.integration_identifier = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the integration.</p>
    pub fn get_integration_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.integration_identifier
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// <p>The total number of items to return in the output.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.max_records = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of items to return in the output.</p>
    pub fn set_max_records(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_records = input;
        self
    }
    /// <p>The total number of items to return in the output.</p>
    pub fn get_max_records(&self) -> &::std::option::Option<i32> {
        &self.max_records
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>A list of key and values, to filter down the results. Supported keys are "Status", "IntegrationName", and "SourceArn". IntegrationName is limited to only one value.</p>
    pub fn filters(mut self, input: crate::types::IntegrationFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of key and values, to filter down the results. Supported keys are "Status", "IntegrationName", and "SourceArn". IntegrationName is limited to only one value.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IntegrationFilter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>A list of key and values, to filter down the results. Supported keys are "Status", "IntegrationName", and "SourceArn". IntegrationName is limited to only one value.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IntegrationFilter>> {
        &self.filters
    }
    /// Consumes the builder and constructs a [`DescribeIntegrationsInput`](crate::operation::describe_integrations::DescribeIntegrationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_integrations::DescribeIntegrationsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::describe_integrations::DescribeIntegrationsInput {
            integration_identifier: self.integration_identifier,
            marker: self.marker,
            max_records: self.max_records,
            filters: self.filters,
        })
    }
}
