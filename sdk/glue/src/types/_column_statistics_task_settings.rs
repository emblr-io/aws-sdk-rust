// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The settings for a column statistics task.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ColumnStatisticsTaskSettings {
    /// <p>The name of the database where the table resides.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the table for which to generate column statistics.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>A schedule for running the column statistics, specified in CRON syntax.</p>
    pub schedule: ::std::option::Option<crate::types::Schedule>,
    /// <p>A list of column names for which to run statistics.</p>
    pub column_name_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The ID of the Data Catalog in which the database resides.</p>
    pub catalog_id: ::std::option::Option<::std::string::String>,
    /// <p>The role used for running the column statistics.</p>
    pub role: ::std::option::Option<::std::string::String>,
    /// <p>The percentage of data to sample.</p>
    pub sample_size: f64,
    /// <p>Name of the security configuration that is used to encrypt CloudWatch logs.</p>
    pub security_configuration: ::std::option::Option<::std::string::String>,
    /// <p>The type of schedule for a column statistics task. Possible values may be <code>CRON</code> or <code>AUTO</code>.</p>
    pub schedule_type: ::std::option::Option<crate::types::ScheduleType>,
    /// <p>The source of setting the column statistics task. Possible values may be <code>CATALOG</code> or <code>TABLE</code>.</p>
    pub setting_source: ::std::option::Option<crate::types::SettingSource>,
    /// <p>The last <code>ExecutionAttempt</code> for the column statistics task run.</p>
    pub last_execution_attempt: ::std::option::Option<crate::types::ExecutionAttempt>,
}
impl ColumnStatisticsTaskSettings {
    /// <p>The name of the database where the table resides.</p>
    pub fn database_name(&self) -> ::std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The name of the table for which to generate column statistics.</p>
    pub fn table_name(&self) -> ::std::option::Option<&str> {
        self.table_name.as_deref()
    }
    /// <p>A schedule for running the column statistics, specified in CRON syntax.</p>
    pub fn schedule(&self) -> ::std::option::Option<&crate::types::Schedule> {
        self.schedule.as_ref()
    }
    /// <p>A list of column names for which to run statistics.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.column_name_list.is_none()`.
    pub fn column_name_list(&self) -> &[::std::string::String] {
        self.column_name_list.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the Data Catalog in which the database resides.</p>
    pub fn catalog_id(&self) -> ::std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>The role used for running the column statistics.</p>
    pub fn role(&self) -> ::std::option::Option<&str> {
        self.role.as_deref()
    }
    /// <p>The percentage of data to sample.</p>
    pub fn sample_size(&self) -> f64 {
        self.sample_size
    }
    /// <p>Name of the security configuration that is used to encrypt CloudWatch logs.</p>
    pub fn security_configuration(&self) -> ::std::option::Option<&str> {
        self.security_configuration.as_deref()
    }
    /// <p>The type of schedule for a column statistics task. Possible values may be <code>CRON</code> or <code>AUTO</code>.</p>
    pub fn schedule_type(&self) -> ::std::option::Option<&crate::types::ScheduleType> {
        self.schedule_type.as_ref()
    }
    /// <p>The source of setting the column statistics task. Possible values may be <code>CATALOG</code> or <code>TABLE</code>.</p>
    pub fn setting_source(&self) -> ::std::option::Option<&crate::types::SettingSource> {
        self.setting_source.as_ref()
    }
    /// <p>The last <code>ExecutionAttempt</code> for the column statistics task run.</p>
    pub fn last_execution_attempt(&self) -> ::std::option::Option<&crate::types::ExecutionAttempt> {
        self.last_execution_attempt.as_ref()
    }
}
impl ColumnStatisticsTaskSettings {
    /// Creates a new builder-style object to manufacture [`ColumnStatisticsTaskSettings`](crate::types::ColumnStatisticsTaskSettings).
    pub fn builder() -> crate::types::builders::ColumnStatisticsTaskSettingsBuilder {
        crate::types::builders::ColumnStatisticsTaskSettingsBuilder::default()
    }
}

/// A builder for [`ColumnStatisticsTaskSettings`](crate::types::ColumnStatisticsTaskSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ColumnStatisticsTaskSettingsBuilder {
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
    pub(crate) schedule: ::std::option::Option<crate::types::Schedule>,
    pub(crate) column_name_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) role: ::std::option::Option<::std::string::String>,
    pub(crate) sample_size: ::std::option::Option<f64>,
    pub(crate) security_configuration: ::std::option::Option<::std::string::String>,
    pub(crate) schedule_type: ::std::option::Option<crate::types::ScheduleType>,
    pub(crate) setting_source: ::std::option::Option<crate::types::SettingSource>,
    pub(crate) last_execution_attempt: ::std::option::Option<crate::types::ExecutionAttempt>,
}
impl ColumnStatisticsTaskSettingsBuilder {
    /// <p>The name of the database where the table resides.</p>
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database where the table resides.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The name of the database where the table resides.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The name of the table for which to generate column statistics.</p>
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the table for which to generate column statistics.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>The name of the table for which to generate column statistics.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// <p>A schedule for running the column statistics, specified in CRON syntax.</p>
    pub fn schedule(mut self, input: crate::types::Schedule) -> Self {
        self.schedule = ::std::option::Option::Some(input);
        self
    }
    /// <p>A schedule for running the column statistics, specified in CRON syntax.</p>
    pub fn set_schedule(mut self, input: ::std::option::Option<crate::types::Schedule>) -> Self {
        self.schedule = input;
        self
    }
    /// <p>A schedule for running the column statistics, specified in CRON syntax.</p>
    pub fn get_schedule(&self) -> &::std::option::Option<crate::types::Schedule> {
        &self.schedule
    }
    /// Appends an item to `column_name_list`.
    ///
    /// To override the contents of this collection use [`set_column_name_list`](Self::set_column_name_list).
    ///
    /// <p>A list of column names for which to run statistics.</p>
    pub fn column_name_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.column_name_list.unwrap_or_default();
        v.push(input.into());
        self.column_name_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of column names for which to run statistics.</p>
    pub fn set_column_name_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.column_name_list = input;
        self
    }
    /// <p>A list of column names for which to run statistics.</p>
    pub fn get_column_name_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.column_name_list
    }
    /// <p>The ID of the Data Catalog in which the database resides.</p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Data Catalog in which the database resides.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The ID of the Data Catalog in which the database resides.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_id
    }
    /// <p>The role used for running the column statistics.</p>
    pub fn role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The role used for running the column statistics.</p>
    pub fn set_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role = input;
        self
    }
    /// <p>The role used for running the column statistics.</p>
    pub fn get_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.role
    }
    /// <p>The percentage of data to sample.</p>
    pub fn sample_size(mut self, input: f64) -> Self {
        self.sample_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage of data to sample.</p>
    pub fn set_sample_size(mut self, input: ::std::option::Option<f64>) -> Self {
        self.sample_size = input;
        self
    }
    /// <p>The percentage of data to sample.</p>
    pub fn get_sample_size(&self) -> &::std::option::Option<f64> {
        &self.sample_size
    }
    /// <p>Name of the security configuration that is used to encrypt CloudWatch logs.</p>
    pub fn security_configuration(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.security_configuration = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the security configuration that is used to encrypt CloudWatch logs.</p>
    pub fn set_security_configuration(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.security_configuration = input;
        self
    }
    /// <p>Name of the security configuration that is used to encrypt CloudWatch logs.</p>
    pub fn get_security_configuration(&self) -> &::std::option::Option<::std::string::String> {
        &self.security_configuration
    }
    /// <p>The type of schedule for a column statistics task. Possible values may be <code>CRON</code> or <code>AUTO</code>.</p>
    pub fn schedule_type(mut self, input: crate::types::ScheduleType) -> Self {
        self.schedule_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of schedule for a column statistics task. Possible values may be <code>CRON</code> or <code>AUTO</code>.</p>
    pub fn set_schedule_type(mut self, input: ::std::option::Option<crate::types::ScheduleType>) -> Self {
        self.schedule_type = input;
        self
    }
    /// <p>The type of schedule for a column statistics task. Possible values may be <code>CRON</code> or <code>AUTO</code>.</p>
    pub fn get_schedule_type(&self) -> &::std::option::Option<crate::types::ScheduleType> {
        &self.schedule_type
    }
    /// <p>The source of setting the column statistics task. Possible values may be <code>CATALOG</code> or <code>TABLE</code>.</p>
    pub fn setting_source(mut self, input: crate::types::SettingSource) -> Self {
        self.setting_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source of setting the column statistics task. Possible values may be <code>CATALOG</code> or <code>TABLE</code>.</p>
    pub fn set_setting_source(mut self, input: ::std::option::Option<crate::types::SettingSource>) -> Self {
        self.setting_source = input;
        self
    }
    /// <p>The source of setting the column statistics task. Possible values may be <code>CATALOG</code> or <code>TABLE</code>.</p>
    pub fn get_setting_source(&self) -> &::std::option::Option<crate::types::SettingSource> {
        &self.setting_source
    }
    /// <p>The last <code>ExecutionAttempt</code> for the column statistics task run.</p>
    pub fn last_execution_attempt(mut self, input: crate::types::ExecutionAttempt) -> Self {
        self.last_execution_attempt = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last <code>ExecutionAttempt</code> for the column statistics task run.</p>
    pub fn set_last_execution_attempt(mut self, input: ::std::option::Option<crate::types::ExecutionAttempt>) -> Self {
        self.last_execution_attempt = input;
        self
    }
    /// <p>The last <code>ExecutionAttempt</code> for the column statistics task run.</p>
    pub fn get_last_execution_attempt(&self) -> &::std::option::Option<crate::types::ExecutionAttempt> {
        &self.last_execution_attempt
    }
    /// Consumes the builder and constructs a [`ColumnStatisticsTaskSettings`](crate::types::ColumnStatisticsTaskSettings).
    pub fn build(self) -> crate::types::ColumnStatisticsTaskSettings {
        crate::types::ColumnStatisticsTaskSettings {
            database_name: self.database_name,
            table_name: self.table_name,
            schedule: self.schedule,
            column_name_list: self.column_name_list,
            catalog_id: self.catalog_id,
            role: self.role,
            sample_size: self.sample_size.unwrap_or_default(),
            security_configuration: self.security_configuration,
            schedule_type: self.schedule_type,
            setting_source: self.setting_source,
            last_execution_attempt: self.last_execution_attempt,
        }
    }
}
