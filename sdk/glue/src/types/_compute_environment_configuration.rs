// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object containing configuration for a compute environment (such as Spark, Python or Athena) returned by the <code>DescribeConnectionType</code> API.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComputeEnvironmentConfiguration {
    /// <p>A name for the compute environment configuration.</p>
    pub name: ::std::string::String,
    /// <p>A description of the compute environment.</p>
    pub description: ::std::string::String,
    /// <p>The type of compute environment.</p>
    pub compute_environment: crate::types::ComputeEnvironment,
    /// <p>The supported authentication types for the compute environment.</p>
    pub supported_authentication_types: ::std::vec::Vec<crate::types::AuthenticationType>,
    /// <p>The parameters used as connection options for the compute environment.</p>
    pub connection_options: ::std::collections::HashMap<::std::string::String, crate::types::Property>,
    /// <p>The connection property name overrides for the compute environment.</p>
    pub connection_property_name_overrides: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    /// <p>The connection option name overrides for the compute environment.</p>
    pub connection_option_name_overrides: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    /// <p>The connection properties that are required as overrides for the compute environment.</p>
    pub connection_properties_required_overrides: ::std::vec::Vec<::std::string::String>,
    /// <p>Indicates whether <code>PhysicalConnectionProperties</code> are required for the compute environment.</p>
    pub physical_connection_properties_required: ::std::option::Option<bool>,
}
impl ComputeEnvironmentConfiguration {
    /// <p>A name for the compute environment configuration.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>A description of the compute environment.</p>
    pub fn description(&self) -> &str {
        use std::ops::Deref;
        self.description.deref()
    }
    /// <p>The type of compute environment.</p>
    pub fn compute_environment(&self) -> &crate::types::ComputeEnvironment {
        &self.compute_environment
    }
    /// <p>The supported authentication types for the compute environment.</p>
    pub fn supported_authentication_types(&self) -> &[crate::types::AuthenticationType] {
        use std::ops::Deref;
        self.supported_authentication_types.deref()
    }
    /// <p>The parameters used as connection options for the compute environment.</p>
    pub fn connection_options(&self) -> &::std::collections::HashMap<::std::string::String, crate::types::Property> {
        &self.connection_options
    }
    /// <p>The connection property name overrides for the compute environment.</p>
    pub fn connection_property_name_overrides(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.connection_property_name_overrides
    }
    /// <p>The connection option name overrides for the compute environment.</p>
    pub fn connection_option_name_overrides(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.connection_option_name_overrides
    }
    /// <p>The connection properties that are required as overrides for the compute environment.</p>
    pub fn connection_properties_required_overrides(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.connection_properties_required_overrides.deref()
    }
    /// <p>Indicates whether <code>PhysicalConnectionProperties</code> are required for the compute environment.</p>
    pub fn physical_connection_properties_required(&self) -> ::std::option::Option<bool> {
        self.physical_connection_properties_required
    }
}
impl ComputeEnvironmentConfiguration {
    /// Creates a new builder-style object to manufacture [`ComputeEnvironmentConfiguration`](crate::types::ComputeEnvironmentConfiguration).
    pub fn builder() -> crate::types::builders::ComputeEnvironmentConfigurationBuilder {
        crate::types::builders::ComputeEnvironmentConfigurationBuilder::default()
    }
}

/// A builder for [`ComputeEnvironmentConfiguration`](crate::types::ComputeEnvironmentConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ComputeEnvironmentConfigurationBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) compute_environment: ::std::option::Option<crate::types::ComputeEnvironment>,
    pub(crate) supported_authentication_types: ::std::option::Option<::std::vec::Vec<crate::types::AuthenticationType>>,
    pub(crate) connection_options: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    pub(crate) connection_property_name_overrides: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) connection_option_name_overrides: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) connection_properties_required_overrides: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) physical_connection_properties_required: ::std::option::Option<bool>,
}
impl ComputeEnvironmentConfigurationBuilder {
    /// <p>A name for the compute environment configuration.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the compute environment configuration.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name for the compute environment configuration.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of the compute environment.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the compute environment.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the compute environment.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The type of compute environment.</p>
    /// This field is required.
    pub fn compute_environment(mut self, input: crate::types::ComputeEnvironment) -> Self {
        self.compute_environment = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of compute environment.</p>
    pub fn set_compute_environment(mut self, input: ::std::option::Option<crate::types::ComputeEnvironment>) -> Self {
        self.compute_environment = input;
        self
    }
    /// <p>The type of compute environment.</p>
    pub fn get_compute_environment(&self) -> &::std::option::Option<crate::types::ComputeEnvironment> {
        &self.compute_environment
    }
    /// Appends an item to `supported_authentication_types`.
    ///
    /// To override the contents of this collection use [`set_supported_authentication_types`](Self::set_supported_authentication_types).
    ///
    /// <p>The supported authentication types for the compute environment.</p>
    pub fn supported_authentication_types(mut self, input: crate::types::AuthenticationType) -> Self {
        let mut v = self.supported_authentication_types.unwrap_or_default();
        v.push(input);
        self.supported_authentication_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The supported authentication types for the compute environment.</p>
    pub fn set_supported_authentication_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AuthenticationType>>) -> Self {
        self.supported_authentication_types = input;
        self
    }
    /// <p>The supported authentication types for the compute environment.</p>
    pub fn get_supported_authentication_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AuthenticationType>> {
        &self.supported_authentication_types
    }
    /// Adds a key-value pair to `connection_options`.
    ///
    /// To override the contents of this collection use [`set_connection_options`](Self::set_connection_options).
    ///
    /// <p>The parameters used as connection options for the compute environment.</p>
    pub fn connection_options(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::Property) -> Self {
        let mut hash_map = self.connection_options.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.connection_options = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The parameters used as connection options for the compute environment.</p>
    pub fn set_connection_options(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    ) -> Self {
        self.connection_options = input;
        self
    }
    /// <p>The parameters used as connection options for the compute environment.</p>
    pub fn get_connection_options(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>> {
        &self.connection_options
    }
    /// Adds a key-value pair to `connection_property_name_overrides`.
    ///
    /// To override the contents of this collection use [`set_connection_property_name_overrides`](Self::set_connection_property_name_overrides).
    ///
    /// <p>The connection property name overrides for the compute environment.</p>
    pub fn connection_property_name_overrides(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.connection_property_name_overrides.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.connection_property_name_overrides = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The connection property name overrides for the compute environment.</p>
    pub fn set_connection_property_name_overrides(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.connection_property_name_overrides = input;
        self
    }
    /// <p>The connection property name overrides for the compute environment.</p>
    pub fn get_connection_property_name_overrides(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.connection_property_name_overrides
    }
    /// Adds a key-value pair to `connection_option_name_overrides`.
    ///
    /// To override the contents of this collection use [`set_connection_option_name_overrides`](Self::set_connection_option_name_overrides).
    ///
    /// <p>The connection option name overrides for the compute environment.</p>
    pub fn connection_option_name_overrides(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.connection_option_name_overrides.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.connection_option_name_overrides = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The connection option name overrides for the compute environment.</p>
    pub fn set_connection_option_name_overrides(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.connection_option_name_overrides = input;
        self
    }
    /// <p>The connection option name overrides for the compute environment.</p>
    pub fn get_connection_option_name_overrides(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.connection_option_name_overrides
    }
    /// Appends an item to `connection_properties_required_overrides`.
    ///
    /// To override the contents of this collection use [`set_connection_properties_required_overrides`](Self::set_connection_properties_required_overrides).
    ///
    /// <p>The connection properties that are required as overrides for the compute environment.</p>
    pub fn connection_properties_required_overrides(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.connection_properties_required_overrides.unwrap_or_default();
        v.push(input.into());
        self.connection_properties_required_overrides = ::std::option::Option::Some(v);
        self
    }
    /// <p>The connection properties that are required as overrides for the compute environment.</p>
    pub fn set_connection_properties_required_overrides(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.connection_properties_required_overrides = input;
        self
    }
    /// <p>The connection properties that are required as overrides for the compute environment.</p>
    pub fn get_connection_properties_required_overrides(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.connection_properties_required_overrides
    }
    /// <p>Indicates whether <code>PhysicalConnectionProperties</code> are required for the compute environment.</p>
    pub fn physical_connection_properties_required(mut self, input: bool) -> Self {
        self.physical_connection_properties_required = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether <code>PhysicalConnectionProperties</code> are required for the compute environment.</p>
    pub fn set_physical_connection_properties_required(mut self, input: ::std::option::Option<bool>) -> Self {
        self.physical_connection_properties_required = input;
        self
    }
    /// <p>Indicates whether <code>PhysicalConnectionProperties</code> are required for the compute environment.</p>
    pub fn get_physical_connection_properties_required(&self) -> &::std::option::Option<bool> {
        &self.physical_connection_properties_required
    }
    /// Consumes the builder and constructs a [`ComputeEnvironmentConfiguration`](crate::types::ComputeEnvironmentConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::ComputeEnvironmentConfigurationBuilder::name)
    /// - [`description`](crate::types::builders::ComputeEnvironmentConfigurationBuilder::description)
    /// - [`compute_environment`](crate::types::builders::ComputeEnvironmentConfigurationBuilder::compute_environment)
    /// - [`supported_authentication_types`](crate::types::builders::ComputeEnvironmentConfigurationBuilder::supported_authentication_types)
    /// - [`connection_options`](crate::types::builders::ComputeEnvironmentConfigurationBuilder::connection_options)
    /// - [`connection_property_name_overrides`](crate::types::builders::ComputeEnvironmentConfigurationBuilder::connection_property_name_overrides)
    /// - [`connection_option_name_overrides`](crate::types::builders::ComputeEnvironmentConfigurationBuilder::connection_option_name_overrides)
    pub fn build(self) -> ::std::result::Result<crate::types::ComputeEnvironmentConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ComputeEnvironmentConfiguration {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building ComputeEnvironmentConfiguration",
                )
            })?,
            description: self.description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "description",
                    "description was not specified but it is required when building ComputeEnvironmentConfiguration",
                )
            })?,
            compute_environment: self.compute_environment.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "compute_environment",
                    "compute_environment was not specified but it is required when building ComputeEnvironmentConfiguration",
                )
            })?,
            supported_authentication_types: self.supported_authentication_types.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "supported_authentication_types",
                    "supported_authentication_types was not specified but it is required when building ComputeEnvironmentConfiguration",
                )
            })?,
            connection_options: self.connection_options.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "connection_options",
                    "connection_options was not specified but it is required when building ComputeEnvironmentConfiguration",
                )
            })?,
            connection_property_name_overrides: self.connection_property_name_overrides.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "connection_property_name_overrides",
                    "connection_property_name_overrides was not specified but it is required when building ComputeEnvironmentConfiguration",
                )
            })?,
            connection_option_name_overrides: self.connection_option_name_overrides.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "connection_option_name_overrides",
                    "connection_option_name_overrides was not specified but it is required when building ComputeEnvironmentConfiguration",
                )
            })?,
            connection_properties_required_overrides: self.connection_properties_required_overrides.unwrap_or_default(),
            physical_connection_properties_required: self.physical_connection_properties_required,
        })
    }
}
