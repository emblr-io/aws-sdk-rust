// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that describes how data is partitioned on the target.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IntegrationPartition {
    /// <p>The field name used to partition data on the target. Avoid using columns that have unique values for each row (for example, `LastModifiedTimestamp`, `SystemModTimeStamp`) as the partition column. These columns are not suitable for partitioning because they create a large number of small partitions, which can lead to performance issues.</p>
    pub field_name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the function used to partition data on the target. The only accepted value for this parameter is `'identity'` (string). The `'identity'` function ensures that the data partitioning on the target follows the same scheme as the source. In other words, the partitioning structure of the source data is preserved in the target destination.</p>
    pub function_spec: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the timestamp format of the source data. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>epoch_sec</code> - Unix epoch timestamp in seconds</p></li>
    /// <li>
    /// <p><code>epoch_milli</code> - Unix epoch timestamp in milliseconds</p></li>
    /// <li>
    /// <p><code>iso</code> - ISO 8601 formatted timestamp</p></li>
    /// </ul><note>
    /// <p>Only specify <code>ConversionSpec</code> when using timestamp-based partition functions (year, month, day, or hour). Glue Zero-ETL uses this parameter to correctly transform source data into timestamp format before partitioning.</p>
    /// <p>Do not use high-cardinality columns with the <code>identity</code> partition function. High-cardinality columns include:</p>
    /// <ul>
    /// <li>
    /// <p>Primary keys</p></li>
    /// <li>
    /// <p>Timestamp fields (such as <code>LastModifiedTimestamp</code>, <code>CreatedDate</code>)</p></li>
    /// <li>
    /// <p>System-generated timestamps</p></li>
    /// </ul>
    /// <p>Using high-cardinality columns with identity partitioning creates many small partitions, which can significantly degrade ingestion performance.</p>
    /// </note>
    pub conversion_spec: ::std::option::Option<::std::string::String>,
}
impl IntegrationPartition {
    /// <p>The field name used to partition data on the target. Avoid using columns that have unique values for each row (for example, `LastModifiedTimestamp`, `SystemModTimeStamp`) as the partition column. These columns are not suitable for partitioning because they create a large number of small partitions, which can lead to performance issues.</p>
    pub fn field_name(&self) -> ::std::option::Option<&str> {
        self.field_name.as_deref()
    }
    /// <p>Specifies the function used to partition data on the target. The only accepted value for this parameter is `'identity'` (string). The `'identity'` function ensures that the data partitioning on the target follows the same scheme as the source. In other words, the partitioning structure of the source data is preserved in the target destination.</p>
    pub fn function_spec(&self) -> ::std::option::Option<&str> {
        self.function_spec.as_deref()
    }
    /// <p>Specifies the timestamp format of the source data. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>epoch_sec</code> - Unix epoch timestamp in seconds</p></li>
    /// <li>
    /// <p><code>epoch_milli</code> - Unix epoch timestamp in milliseconds</p></li>
    /// <li>
    /// <p><code>iso</code> - ISO 8601 formatted timestamp</p></li>
    /// </ul><note>
    /// <p>Only specify <code>ConversionSpec</code> when using timestamp-based partition functions (year, month, day, or hour). Glue Zero-ETL uses this parameter to correctly transform source data into timestamp format before partitioning.</p>
    /// <p>Do not use high-cardinality columns with the <code>identity</code> partition function. High-cardinality columns include:</p>
    /// <ul>
    /// <li>
    /// <p>Primary keys</p></li>
    /// <li>
    /// <p>Timestamp fields (such as <code>LastModifiedTimestamp</code>, <code>CreatedDate</code>)</p></li>
    /// <li>
    /// <p>System-generated timestamps</p></li>
    /// </ul>
    /// <p>Using high-cardinality columns with identity partitioning creates many small partitions, which can significantly degrade ingestion performance.</p>
    /// </note>
    pub fn conversion_spec(&self) -> ::std::option::Option<&str> {
        self.conversion_spec.as_deref()
    }
}
impl IntegrationPartition {
    /// Creates a new builder-style object to manufacture [`IntegrationPartition`](crate::types::IntegrationPartition).
    pub fn builder() -> crate::types::builders::IntegrationPartitionBuilder {
        crate::types::builders::IntegrationPartitionBuilder::default()
    }
}

/// A builder for [`IntegrationPartition`](crate::types::IntegrationPartition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IntegrationPartitionBuilder {
    pub(crate) field_name: ::std::option::Option<::std::string::String>,
    pub(crate) function_spec: ::std::option::Option<::std::string::String>,
    pub(crate) conversion_spec: ::std::option::Option<::std::string::String>,
}
impl IntegrationPartitionBuilder {
    /// <p>The field name used to partition data on the target. Avoid using columns that have unique values for each row (for example, `LastModifiedTimestamp`, `SystemModTimeStamp`) as the partition column. These columns are not suitable for partitioning because they create a large number of small partitions, which can lead to performance issues.</p>
    pub fn field_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The field name used to partition data on the target. Avoid using columns that have unique values for each row (for example, `LastModifiedTimestamp`, `SystemModTimeStamp`) as the partition column. These columns are not suitable for partitioning because they create a large number of small partitions, which can lead to performance issues.</p>
    pub fn set_field_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_name = input;
        self
    }
    /// <p>The field name used to partition data on the target. Avoid using columns that have unique values for each row (for example, `LastModifiedTimestamp`, `SystemModTimeStamp`) as the partition column. These columns are not suitable for partitioning because they create a large number of small partitions, which can lead to performance issues.</p>
    pub fn get_field_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_name
    }
    /// <p>Specifies the function used to partition data on the target. The only accepted value for this parameter is `'identity'` (string). The `'identity'` function ensures that the data partitioning on the target follows the same scheme as the source. In other words, the partitioning structure of the source data is preserved in the target destination.</p>
    pub fn function_spec(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.function_spec = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the function used to partition data on the target. The only accepted value for this parameter is `'identity'` (string). The `'identity'` function ensures that the data partitioning on the target follows the same scheme as the source. In other words, the partitioning structure of the source data is preserved in the target destination.</p>
    pub fn set_function_spec(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.function_spec = input;
        self
    }
    /// <p>Specifies the function used to partition data on the target. The only accepted value for this parameter is `'identity'` (string). The `'identity'` function ensures that the data partitioning on the target follows the same scheme as the source. In other words, the partitioning structure of the source data is preserved in the target destination.</p>
    pub fn get_function_spec(&self) -> &::std::option::Option<::std::string::String> {
        &self.function_spec
    }
    /// <p>Specifies the timestamp format of the source data. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>epoch_sec</code> - Unix epoch timestamp in seconds</p></li>
    /// <li>
    /// <p><code>epoch_milli</code> - Unix epoch timestamp in milliseconds</p></li>
    /// <li>
    /// <p><code>iso</code> - ISO 8601 formatted timestamp</p></li>
    /// </ul><note>
    /// <p>Only specify <code>ConversionSpec</code> when using timestamp-based partition functions (year, month, day, or hour). Glue Zero-ETL uses this parameter to correctly transform source data into timestamp format before partitioning.</p>
    /// <p>Do not use high-cardinality columns with the <code>identity</code> partition function. High-cardinality columns include:</p>
    /// <ul>
    /// <li>
    /// <p>Primary keys</p></li>
    /// <li>
    /// <p>Timestamp fields (such as <code>LastModifiedTimestamp</code>, <code>CreatedDate</code>)</p></li>
    /// <li>
    /// <p>System-generated timestamps</p></li>
    /// </ul>
    /// <p>Using high-cardinality columns with identity partitioning creates many small partitions, which can significantly degrade ingestion performance.</p>
    /// </note>
    pub fn conversion_spec(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.conversion_spec = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the timestamp format of the source data. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>epoch_sec</code> - Unix epoch timestamp in seconds</p></li>
    /// <li>
    /// <p><code>epoch_milli</code> - Unix epoch timestamp in milliseconds</p></li>
    /// <li>
    /// <p><code>iso</code> - ISO 8601 formatted timestamp</p></li>
    /// </ul><note>
    /// <p>Only specify <code>ConversionSpec</code> when using timestamp-based partition functions (year, month, day, or hour). Glue Zero-ETL uses this parameter to correctly transform source data into timestamp format before partitioning.</p>
    /// <p>Do not use high-cardinality columns with the <code>identity</code> partition function. High-cardinality columns include:</p>
    /// <ul>
    /// <li>
    /// <p>Primary keys</p></li>
    /// <li>
    /// <p>Timestamp fields (such as <code>LastModifiedTimestamp</code>, <code>CreatedDate</code>)</p></li>
    /// <li>
    /// <p>System-generated timestamps</p></li>
    /// </ul>
    /// <p>Using high-cardinality columns with identity partitioning creates many small partitions, which can significantly degrade ingestion performance.</p>
    /// </note>
    pub fn set_conversion_spec(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.conversion_spec = input;
        self
    }
    /// <p>Specifies the timestamp format of the source data. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>epoch_sec</code> - Unix epoch timestamp in seconds</p></li>
    /// <li>
    /// <p><code>epoch_milli</code> - Unix epoch timestamp in milliseconds</p></li>
    /// <li>
    /// <p><code>iso</code> - ISO 8601 formatted timestamp</p></li>
    /// </ul><note>
    /// <p>Only specify <code>ConversionSpec</code> when using timestamp-based partition functions (year, month, day, or hour). Glue Zero-ETL uses this parameter to correctly transform source data into timestamp format before partitioning.</p>
    /// <p>Do not use high-cardinality columns with the <code>identity</code> partition function. High-cardinality columns include:</p>
    /// <ul>
    /// <li>
    /// <p>Primary keys</p></li>
    /// <li>
    /// <p>Timestamp fields (such as <code>LastModifiedTimestamp</code>, <code>CreatedDate</code>)</p></li>
    /// <li>
    /// <p>System-generated timestamps</p></li>
    /// </ul>
    /// <p>Using high-cardinality columns with identity partitioning creates many small partitions, which can significantly degrade ingestion performance.</p>
    /// </note>
    pub fn get_conversion_spec(&self) -> &::std::option::Option<::std::string::String> {
        &self.conversion_spec
    }
    /// Consumes the builder and constructs a [`IntegrationPartition`](crate::types::IntegrationPartition).
    pub fn build(self) -> crate::types::IntegrationPartition {
        crate::types::IntegrationPartition {
            field_name: self.field_name,
            function_spec: self.function_spec,
            conversion_spec: self.conversion_spec,
        }
    }
}
