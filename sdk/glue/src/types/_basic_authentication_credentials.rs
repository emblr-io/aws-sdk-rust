// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>For supplying basic auth credentials when not providing a <code>SecretArn</code> value.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct BasicAuthenticationCredentials {
    /// <p>The username to connect to the data source.</p>
    pub username: ::std::option::Option<::std::string::String>,
    /// <p>The password to connect to the data source.</p>
    pub password: ::std::option::Option<::std::string::String>,
}
impl BasicAuthenticationCredentials {
    /// <p>The username to connect to the data source.</p>
    pub fn username(&self) -> ::std::option::Option<&str> {
        self.username.as_deref()
    }
    /// <p>The password to connect to the data source.</p>
    pub fn password(&self) -> ::std::option::Option<&str> {
        self.password.as_deref()
    }
}
impl ::std::fmt::Debug for BasicAuthenticationCredentials {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BasicAuthenticationCredentials");
        formatter.field("username", &self.username);
        formatter.field("password", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl BasicAuthenticationCredentials {
    /// Creates a new builder-style object to manufacture [`BasicAuthenticationCredentials`](crate::types::BasicAuthenticationCredentials).
    pub fn builder() -> crate::types::builders::BasicAuthenticationCredentialsBuilder {
        crate::types::builders::BasicAuthenticationCredentialsBuilder::default()
    }
}

/// A builder for [`BasicAuthenticationCredentials`](crate::types::BasicAuthenticationCredentials).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct BasicAuthenticationCredentialsBuilder {
    pub(crate) username: ::std::option::Option<::std::string::String>,
    pub(crate) password: ::std::option::Option<::std::string::String>,
}
impl BasicAuthenticationCredentialsBuilder {
    /// <p>The username to connect to the data source.</p>
    pub fn username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The username to connect to the data source.</p>
    pub fn set_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p>The username to connect to the data source.</p>
    pub fn get_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.username
    }
    /// <p>The password to connect to the data source.</p>
    pub fn password(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.password = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The password to connect to the data source.</p>
    pub fn set_password(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.password = input;
        self
    }
    /// <p>The password to connect to the data source.</p>
    pub fn get_password(&self) -> &::std::option::Option<::std::string::String> {
        &self.password
    }
    /// Consumes the builder and constructs a [`BasicAuthenticationCredentials`](crate::types::BasicAuthenticationCredentials).
    pub fn build(self) -> crate::types::BasicAuthenticationCredentials {
        crate::types::BasicAuthenticationCredentials {
            username: self.username,
            password: self.password,
        }
    }
}
impl ::std::fmt::Debug for BasicAuthenticationCredentialsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BasicAuthenticationCredentialsBuilder");
        formatter.field("username", &self.username);
        formatter.field("password", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
