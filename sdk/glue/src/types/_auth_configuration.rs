// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The authentication configuration for a connection returned by the <code>DescribeConnectionType</code> API.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuthConfiguration {
    /// <p>The type of authentication for a connection.</p>
    pub authentication_type: ::std::option::Option<crate::types::Property>,
    /// <p>The Amazon Resource Name (ARN) for the Secrets Manager.</p>
    pub secret_arn: ::std::option::Option<crate::types::Property>,
    /// <p>A map of key-value pairs for the OAuth2 properties. Each value is a a <code>Property</code> object.</p>
    pub o_auth2_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    /// <p>A map of key-value pairs for the OAuth2 properties. Each value is a a <code>Property</code> object.</p>
    pub basic_authentication_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    /// <p>A map of key-value pairs for the custom authentication properties. Each value is a a <code>Property</code> object.</p>
    pub custom_authentication_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
}
impl AuthConfiguration {
    /// <p>The type of authentication for a connection.</p>
    pub fn authentication_type(&self) -> ::std::option::Option<&crate::types::Property> {
        self.authentication_type.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) for the Secrets Manager.</p>
    pub fn secret_arn(&self) -> ::std::option::Option<&crate::types::Property> {
        self.secret_arn.as_ref()
    }
    /// <p>A map of key-value pairs for the OAuth2 properties. Each value is a a <code>Property</code> object.</p>
    pub fn o_auth2_properties(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::Property>> {
        self.o_auth2_properties.as_ref()
    }
    /// <p>A map of key-value pairs for the OAuth2 properties. Each value is a a <code>Property</code> object.</p>
    pub fn basic_authentication_properties(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::Property>> {
        self.basic_authentication_properties.as_ref()
    }
    /// <p>A map of key-value pairs for the custom authentication properties. Each value is a a <code>Property</code> object.</p>
    pub fn custom_authentication_properties(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::Property>> {
        self.custom_authentication_properties.as_ref()
    }
}
impl AuthConfiguration {
    /// Creates a new builder-style object to manufacture [`AuthConfiguration`](crate::types::AuthConfiguration).
    pub fn builder() -> crate::types::builders::AuthConfigurationBuilder {
        crate::types::builders::AuthConfigurationBuilder::default()
    }
}

/// A builder for [`AuthConfiguration`](crate::types::AuthConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AuthConfigurationBuilder {
    pub(crate) authentication_type: ::std::option::Option<crate::types::Property>,
    pub(crate) secret_arn: ::std::option::Option<crate::types::Property>,
    pub(crate) o_auth2_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    pub(crate) basic_authentication_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    pub(crate) custom_authentication_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
}
impl AuthConfigurationBuilder {
    /// <p>The type of authentication for a connection.</p>
    /// This field is required.
    pub fn authentication_type(mut self, input: crate::types::Property) -> Self {
        self.authentication_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of authentication for a connection.</p>
    pub fn set_authentication_type(mut self, input: ::std::option::Option<crate::types::Property>) -> Self {
        self.authentication_type = input;
        self
    }
    /// <p>The type of authentication for a connection.</p>
    pub fn get_authentication_type(&self) -> &::std::option::Option<crate::types::Property> {
        &self.authentication_type
    }
    /// <p>The Amazon Resource Name (ARN) for the Secrets Manager.</p>
    pub fn secret_arn(mut self, input: crate::types::Property) -> Self {
        self.secret_arn = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the Secrets Manager.</p>
    pub fn set_secret_arn(mut self, input: ::std::option::Option<crate::types::Property>) -> Self {
        self.secret_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the Secrets Manager.</p>
    pub fn get_secret_arn(&self) -> &::std::option::Option<crate::types::Property> {
        &self.secret_arn
    }
    /// Adds a key-value pair to `o_auth2_properties`.
    ///
    /// To override the contents of this collection use [`set_o_auth2_properties`](Self::set_o_auth2_properties).
    ///
    /// <p>A map of key-value pairs for the OAuth2 properties. Each value is a a <code>Property</code> object.</p>
    pub fn o_auth2_properties(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::Property) -> Self {
        let mut hash_map = self.o_auth2_properties.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.o_auth2_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of key-value pairs for the OAuth2 properties. Each value is a a <code>Property</code> object.</p>
    pub fn set_o_auth2_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    ) -> Self {
        self.o_auth2_properties = input;
        self
    }
    /// <p>A map of key-value pairs for the OAuth2 properties. Each value is a a <code>Property</code> object.</p>
    pub fn get_o_auth2_properties(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>> {
        &self.o_auth2_properties
    }
    /// Adds a key-value pair to `basic_authentication_properties`.
    ///
    /// To override the contents of this collection use [`set_basic_authentication_properties`](Self::set_basic_authentication_properties).
    ///
    /// <p>A map of key-value pairs for the OAuth2 properties. Each value is a a <code>Property</code> object.</p>
    pub fn basic_authentication_properties(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::Property) -> Self {
        let mut hash_map = self.basic_authentication_properties.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.basic_authentication_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of key-value pairs for the OAuth2 properties. Each value is a a <code>Property</code> object.</p>
    pub fn set_basic_authentication_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    ) -> Self {
        self.basic_authentication_properties = input;
        self
    }
    /// <p>A map of key-value pairs for the OAuth2 properties. Each value is a a <code>Property</code> object.</p>
    pub fn get_basic_authentication_properties(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>> {
        &self.basic_authentication_properties
    }
    /// Adds a key-value pair to `custom_authentication_properties`.
    ///
    /// To override the contents of this collection use [`set_custom_authentication_properties`](Self::set_custom_authentication_properties).
    ///
    /// <p>A map of key-value pairs for the custom authentication properties. Each value is a a <code>Property</code> object.</p>
    pub fn custom_authentication_properties(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::Property) -> Self {
        let mut hash_map = self.custom_authentication_properties.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.custom_authentication_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of key-value pairs for the custom authentication properties. Each value is a a <code>Property</code> object.</p>
    pub fn set_custom_authentication_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>>,
    ) -> Self {
        self.custom_authentication_properties = input;
        self
    }
    /// <p>A map of key-value pairs for the custom authentication properties. Each value is a a <code>Property</code> object.</p>
    pub fn get_custom_authentication_properties(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Property>> {
        &self.custom_authentication_properties
    }
    /// Consumes the builder and constructs a [`AuthConfiguration`](crate::types::AuthConfiguration).
    pub fn build(self) -> crate::types::AuthConfiguration {
        crate::types::AuthConfiguration {
            authentication_type: self.authentication_type,
            secret_arn: self.secret_arn,
            o_auth2_properties: self.o_auth2_properties,
            basic_authentication_properties: self.basic_authentication_properties,
            custom_authentication_properties: self.custom_authentication_properties,
        }
    }
}
