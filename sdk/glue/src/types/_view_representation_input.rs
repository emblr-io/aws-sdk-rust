// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure containing details of a representation to update or create a Lake Formation view.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ViewRepresentationInput {
    /// <p>A parameter that specifies the engine type of a specific representation.</p>
    pub dialect: ::std::option::Option<crate::types::ViewDialect>,
    /// <p>A parameter that specifies the version of the engine of a specific representation.</p>
    pub dialect_version: ::std::option::Option<::std::string::String>,
    /// <p>A string that represents the original SQL query that describes the view.</p>
    pub view_original_text: ::std::option::Option<::std::string::String>,
    /// <p>The name of the connection to be used to validate the specific representation of the view.</p>
    pub validation_connection: ::std::option::Option<::std::string::String>,
    /// <p>A string that represents the SQL query that describes the view with expanded resource ARNs</p>
    pub view_expanded_text: ::std::option::Option<::std::string::String>,
}
impl ViewRepresentationInput {
    /// <p>A parameter that specifies the engine type of a specific representation.</p>
    pub fn dialect(&self) -> ::std::option::Option<&crate::types::ViewDialect> {
        self.dialect.as_ref()
    }
    /// <p>A parameter that specifies the version of the engine of a specific representation.</p>
    pub fn dialect_version(&self) -> ::std::option::Option<&str> {
        self.dialect_version.as_deref()
    }
    /// <p>A string that represents the original SQL query that describes the view.</p>
    pub fn view_original_text(&self) -> ::std::option::Option<&str> {
        self.view_original_text.as_deref()
    }
    /// <p>The name of the connection to be used to validate the specific representation of the view.</p>
    pub fn validation_connection(&self) -> ::std::option::Option<&str> {
        self.validation_connection.as_deref()
    }
    /// <p>A string that represents the SQL query that describes the view with expanded resource ARNs</p>
    pub fn view_expanded_text(&self) -> ::std::option::Option<&str> {
        self.view_expanded_text.as_deref()
    }
}
impl ViewRepresentationInput {
    /// Creates a new builder-style object to manufacture [`ViewRepresentationInput`](crate::types::ViewRepresentationInput).
    pub fn builder() -> crate::types::builders::ViewRepresentationInputBuilder {
        crate::types::builders::ViewRepresentationInputBuilder::default()
    }
}

/// A builder for [`ViewRepresentationInput`](crate::types::ViewRepresentationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ViewRepresentationInputBuilder {
    pub(crate) dialect: ::std::option::Option<crate::types::ViewDialect>,
    pub(crate) dialect_version: ::std::option::Option<::std::string::String>,
    pub(crate) view_original_text: ::std::option::Option<::std::string::String>,
    pub(crate) validation_connection: ::std::option::Option<::std::string::String>,
    pub(crate) view_expanded_text: ::std::option::Option<::std::string::String>,
}
impl ViewRepresentationInputBuilder {
    /// <p>A parameter that specifies the engine type of a specific representation.</p>
    pub fn dialect(mut self, input: crate::types::ViewDialect) -> Self {
        self.dialect = ::std::option::Option::Some(input);
        self
    }
    /// <p>A parameter that specifies the engine type of a specific representation.</p>
    pub fn set_dialect(mut self, input: ::std::option::Option<crate::types::ViewDialect>) -> Self {
        self.dialect = input;
        self
    }
    /// <p>A parameter that specifies the engine type of a specific representation.</p>
    pub fn get_dialect(&self) -> &::std::option::Option<crate::types::ViewDialect> {
        &self.dialect
    }
    /// <p>A parameter that specifies the version of the engine of a specific representation.</p>
    pub fn dialect_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dialect_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A parameter that specifies the version of the engine of a specific representation.</p>
    pub fn set_dialect_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dialect_version = input;
        self
    }
    /// <p>A parameter that specifies the version of the engine of a specific representation.</p>
    pub fn get_dialect_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.dialect_version
    }
    /// <p>A string that represents the original SQL query that describes the view.</p>
    pub fn view_original_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.view_original_text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string that represents the original SQL query that describes the view.</p>
    pub fn set_view_original_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.view_original_text = input;
        self
    }
    /// <p>A string that represents the original SQL query that describes the view.</p>
    pub fn get_view_original_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.view_original_text
    }
    /// <p>The name of the connection to be used to validate the specific representation of the view.</p>
    pub fn validation_connection(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.validation_connection = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the connection to be used to validate the specific representation of the view.</p>
    pub fn set_validation_connection(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.validation_connection = input;
        self
    }
    /// <p>The name of the connection to be used to validate the specific representation of the view.</p>
    pub fn get_validation_connection(&self) -> &::std::option::Option<::std::string::String> {
        &self.validation_connection
    }
    /// <p>A string that represents the SQL query that describes the view with expanded resource ARNs</p>
    pub fn view_expanded_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.view_expanded_text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string that represents the SQL query that describes the view with expanded resource ARNs</p>
    pub fn set_view_expanded_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.view_expanded_text = input;
        self
    }
    /// <p>A string that represents the SQL query that describes the view with expanded resource ARNs</p>
    pub fn get_view_expanded_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.view_expanded_text
    }
    /// Consumes the builder and constructs a [`ViewRepresentationInput`](crate::types::ViewRepresentationInput).
    pub fn build(self) -> crate::types::ViewRepresentationInput {
        crate::types::ViewRepresentationInput {
            dialect: self.dialect,
            dialect_version: self.dialect_version,
            view_original_text: self.view_original_text,
            validation_connection: self.validation_connection,
            view_expanded_text: self.view_expanded_text,
        }
    }
}
