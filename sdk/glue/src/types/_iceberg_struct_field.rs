// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a single field within an Iceberg table schema, including its identifier, name, data type, nullability, and documentation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IcebergStructField {
    /// <p>The unique identifier assigned to this field within the Iceberg table schema, used for schema evolution and field tracking.</p>
    pub id: i32,
    /// <p>The name of the field as it appears in the table schema and query operations.</p>
    pub name: ::std::string::String,
    /// <p>The data type definition for this field, specifying the structure and format of the data it contains.</p>
    pub r#type: ::aws_smithy_types::Document,
    /// <p>Indicates whether this field is required (non-nullable) or optional (nullable) in the table schema.</p>
    pub required: bool,
    /// <p>Optional documentation or description text that provides additional context about the purpose and usage of this field.</p>
    pub doc: ::std::option::Option<::std::string::String>,
}
impl IcebergStructField {
    /// <p>The unique identifier assigned to this field within the Iceberg table schema, used for schema evolution and field tracking.</p>
    pub fn id(&self) -> i32 {
        self.id
    }
    /// <p>The name of the field as it appears in the table schema and query operations.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The data type definition for this field, specifying the structure and format of the data it contains.</p>
    pub fn r#type(&self) -> &::aws_smithy_types::Document {
        &self.r#type
    }
    /// <p>Indicates whether this field is required (non-nullable) or optional (nullable) in the table schema.</p>
    pub fn required(&self) -> bool {
        self.required
    }
    /// <p>Optional documentation or description text that provides additional context about the purpose and usage of this field.</p>
    pub fn doc(&self) -> ::std::option::Option<&str> {
        self.doc.as_deref()
    }
}
impl IcebergStructField {
    /// Creates a new builder-style object to manufacture [`IcebergStructField`](crate::types::IcebergStructField).
    pub fn builder() -> crate::types::builders::IcebergStructFieldBuilder {
        crate::types::builders::IcebergStructFieldBuilder::default()
    }
}

/// A builder for [`IcebergStructField`](crate::types::IcebergStructField).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IcebergStructFieldBuilder {
    pub(crate) id: ::std::option::Option<i32>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::aws_smithy_types::Document>,
    pub(crate) required: ::std::option::Option<bool>,
    pub(crate) doc: ::std::option::Option<::std::string::String>,
}
impl IcebergStructFieldBuilder {
    /// <p>The unique identifier assigned to this field within the Iceberg table schema, used for schema evolution and field tracking.</p>
    /// This field is required.
    pub fn id(mut self, input: i32) -> Self {
        self.id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The unique identifier assigned to this field within the Iceberg table schema, used for schema evolution and field tracking.</p>
    pub fn set_id(mut self, input: ::std::option::Option<i32>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier assigned to this field within the Iceberg table schema, used for schema evolution and field tracking.</p>
    pub fn get_id(&self) -> &::std::option::Option<i32> {
        &self.id
    }
    /// <p>The name of the field as it appears in the table schema and query operations.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the field as it appears in the table schema and query operations.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the field as it appears in the table schema and query operations.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The data type definition for this field, specifying the structure and format of the data it contains.</p>
    /// This field is required.
    pub fn r#type(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data type definition for this field, specifying the structure and format of the data it contains.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The data type definition for this field, specifying the structure and format of the data it contains.</p>
    pub fn get_type(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.r#type
    }
    /// <p>Indicates whether this field is required (non-nullable) or optional (nullable) in the table schema.</p>
    /// This field is required.
    pub fn required(mut self, input: bool) -> Self {
        self.required = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether this field is required (non-nullable) or optional (nullable) in the table schema.</p>
    pub fn set_required(mut self, input: ::std::option::Option<bool>) -> Self {
        self.required = input;
        self
    }
    /// <p>Indicates whether this field is required (non-nullable) or optional (nullable) in the table schema.</p>
    pub fn get_required(&self) -> &::std::option::Option<bool> {
        &self.required
    }
    /// <p>Optional documentation or description text that provides additional context about the purpose and usage of this field.</p>
    pub fn doc(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.doc = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional documentation or description text that provides additional context about the purpose and usage of this field.</p>
    pub fn set_doc(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.doc = input;
        self
    }
    /// <p>Optional documentation or description text that provides additional context about the purpose and usage of this field.</p>
    pub fn get_doc(&self) -> &::std::option::Option<::std::string::String> {
        &self.doc
    }
    /// Consumes the builder and constructs a [`IcebergStructField`](crate::types::IcebergStructField).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::IcebergStructFieldBuilder::name)
    /// - [`r#type`](crate::types::builders::IcebergStructFieldBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::IcebergStructField, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IcebergStructField {
            id: self.id.unwrap_or_default(),
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building IcebergStructField",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building IcebergStructField",
                )
            })?,
            required: self.required.unwrap_or_default(),
            doc: self.doc,
        })
    }
}
