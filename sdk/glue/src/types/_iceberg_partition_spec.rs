// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the partitioning specification for an Iceberg table, determining how table data will be organized and partitioned for optimal query performance.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IcebergPartitionSpec {
    /// <p>The list of partition fields that define how the table data should be partitioned, including source fields and their transformations.</p>
    pub fields: ::std::vec::Vec<crate::types::IcebergPartitionField>,
    /// <p>The unique identifier for this partition specification within the Iceberg table's metadata history.</p>
    pub spec_id: i32,
}
impl IcebergPartitionSpec {
    /// <p>The list of partition fields that define how the table data should be partitioned, including source fields and their transformations.</p>
    pub fn fields(&self) -> &[crate::types::IcebergPartitionField] {
        use std::ops::Deref;
        self.fields.deref()
    }
    /// <p>The unique identifier for this partition specification within the Iceberg table's metadata history.</p>
    pub fn spec_id(&self) -> i32 {
        self.spec_id
    }
}
impl IcebergPartitionSpec {
    /// Creates a new builder-style object to manufacture [`IcebergPartitionSpec`](crate::types::IcebergPartitionSpec).
    pub fn builder() -> crate::types::builders::IcebergPartitionSpecBuilder {
        crate::types::builders::IcebergPartitionSpecBuilder::default()
    }
}

/// A builder for [`IcebergPartitionSpec`](crate::types::IcebergPartitionSpec).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IcebergPartitionSpecBuilder {
    pub(crate) fields: ::std::option::Option<::std::vec::Vec<crate::types::IcebergPartitionField>>,
    pub(crate) spec_id: ::std::option::Option<i32>,
}
impl IcebergPartitionSpecBuilder {
    /// Appends an item to `fields`.
    ///
    /// To override the contents of this collection use [`set_fields`](Self::set_fields).
    ///
    /// <p>The list of partition fields that define how the table data should be partitioned, including source fields and their transformations.</p>
    pub fn fields(mut self, input: crate::types::IcebergPartitionField) -> Self {
        let mut v = self.fields.unwrap_or_default();
        v.push(input);
        self.fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of partition fields that define how the table data should be partitioned, including source fields and their transformations.</p>
    pub fn set_fields(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IcebergPartitionField>>) -> Self {
        self.fields = input;
        self
    }
    /// <p>The list of partition fields that define how the table data should be partitioned, including source fields and their transformations.</p>
    pub fn get_fields(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IcebergPartitionField>> {
        &self.fields
    }
    /// <p>The unique identifier for this partition specification within the Iceberg table's metadata history.</p>
    pub fn spec_id(mut self, input: i32) -> Self {
        self.spec_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The unique identifier for this partition specification within the Iceberg table's metadata history.</p>
    pub fn set_spec_id(mut self, input: ::std::option::Option<i32>) -> Self {
        self.spec_id = input;
        self
    }
    /// <p>The unique identifier for this partition specification within the Iceberg table's metadata history.</p>
    pub fn get_spec_id(&self) -> &::std::option::Option<i32> {
        &self.spec_id
    }
    /// Consumes the builder and constructs a [`IcebergPartitionSpec`](crate::types::IcebergPartitionSpec).
    /// This method will fail if any of the following fields are not set:
    /// - [`fields`](crate::types::builders::IcebergPartitionSpecBuilder::fields)
    pub fn build(self) -> ::std::result::Result<crate::types::IcebergPartitionSpec, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IcebergPartitionSpec {
            fields: self.fields.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "fields",
                    "fields was not specified but it is required when building IcebergPartitionSpec",
                )
            })?,
            spec_id: self.spec_id.unwrap_or_default(),
        })
    }
}
