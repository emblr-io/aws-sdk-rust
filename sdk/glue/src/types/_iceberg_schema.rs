// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the schema structure for an Iceberg table, including field definitions, data types, and schema metadata.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IcebergSchema {
    /// <p>The unique identifier for this schema version within the Iceberg table's schema evolution history.</p>
    pub schema_id: i32,
    /// <p>The list of field identifiers that uniquely identify records in the table, used for row-level operations and deduplication.</p>
    pub identifier_field_ids: ::std::option::Option<::std::vec::Vec<i32>>,
    /// <p>The root type of the schema structure, typically "struct" for Iceberg table schemas.</p>
    pub r#type: ::std::option::Option<crate::types::IcebergStructTypeEnum>,
    /// <p>The list of field definitions that make up the table schema, including field names, types, and metadata.</p>
    pub fields: ::std::vec::Vec<crate::types::IcebergStructField>,
}
impl IcebergSchema {
    /// <p>The unique identifier for this schema version within the Iceberg table's schema evolution history.</p>
    pub fn schema_id(&self) -> i32 {
        self.schema_id
    }
    /// <p>The list of field identifiers that uniquely identify records in the table, used for row-level operations and deduplication.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.identifier_field_ids.is_none()`.
    pub fn identifier_field_ids(&self) -> &[i32] {
        self.identifier_field_ids.as_deref().unwrap_or_default()
    }
    /// <p>The root type of the schema structure, typically "struct" for Iceberg table schemas.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::IcebergStructTypeEnum> {
        self.r#type.as_ref()
    }
    /// <p>The list of field definitions that make up the table schema, including field names, types, and metadata.</p>
    pub fn fields(&self) -> &[crate::types::IcebergStructField] {
        use std::ops::Deref;
        self.fields.deref()
    }
}
impl IcebergSchema {
    /// Creates a new builder-style object to manufacture [`IcebergSchema`](crate::types::IcebergSchema).
    pub fn builder() -> crate::types::builders::IcebergSchemaBuilder {
        crate::types::builders::IcebergSchemaBuilder::default()
    }
}

/// A builder for [`IcebergSchema`](crate::types::IcebergSchema).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IcebergSchemaBuilder {
    pub(crate) schema_id: ::std::option::Option<i32>,
    pub(crate) identifier_field_ids: ::std::option::Option<::std::vec::Vec<i32>>,
    pub(crate) r#type: ::std::option::Option<crate::types::IcebergStructTypeEnum>,
    pub(crate) fields: ::std::option::Option<::std::vec::Vec<crate::types::IcebergStructField>>,
}
impl IcebergSchemaBuilder {
    /// <p>The unique identifier for this schema version within the Iceberg table's schema evolution history.</p>
    pub fn schema_id(mut self, input: i32) -> Self {
        self.schema_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The unique identifier for this schema version within the Iceberg table's schema evolution history.</p>
    pub fn set_schema_id(mut self, input: ::std::option::Option<i32>) -> Self {
        self.schema_id = input;
        self
    }
    /// <p>The unique identifier for this schema version within the Iceberg table's schema evolution history.</p>
    pub fn get_schema_id(&self) -> &::std::option::Option<i32> {
        &self.schema_id
    }
    /// Appends an item to `identifier_field_ids`.
    ///
    /// To override the contents of this collection use [`set_identifier_field_ids`](Self::set_identifier_field_ids).
    ///
    /// <p>The list of field identifiers that uniquely identify records in the table, used for row-level operations and deduplication.</p>
    pub fn identifier_field_ids(mut self, input: i32) -> Self {
        let mut v = self.identifier_field_ids.unwrap_or_default();
        v.push(input);
        self.identifier_field_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of field identifiers that uniquely identify records in the table, used for row-level operations and deduplication.</p>
    pub fn set_identifier_field_ids(mut self, input: ::std::option::Option<::std::vec::Vec<i32>>) -> Self {
        self.identifier_field_ids = input;
        self
    }
    /// <p>The list of field identifiers that uniquely identify records in the table, used for row-level operations and deduplication.</p>
    pub fn get_identifier_field_ids(&self) -> &::std::option::Option<::std::vec::Vec<i32>> {
        &self.identifier_field_ids
    }
    /// <p>The root type of the schema structure, typically "struct" for Iceberg table schemas.</p>
    pub fn r#type(mut self, input: crate::types::IcebergStructTypeEnum) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The root type of the schema structure, typically "struct" for Iceberg table schemas.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::IcebergStructTypeEnum>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The root type of the schema structure, typically "struct" for Iceberg table schemas.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::IcebergStructTypeEnum> {
        &self.r#type
    }
    /// Appends an item to `fields`.
    ///
    /// To override the contents of this collection use [`set_fields`](Self::set_fields).
    ///
    /// <p>The list of field definitions that make up the table schema, including field names, types, and metadata.</p>
    pub fn fields(mut self, input: crate::types::IcebergStructField) -> Self {
        let mut v = self.fields.unwrap_or_default();
        v.push(input);
        self.fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of field definitions that make up the table schema, including field names, types, and metadata.</p>
    pub fn set_fields(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IcebergStructField>>) -> Self {
        self.fields = input;
        self
    }
    /// <p>The list of field definitions that make up the table schema, including field names, types, and metadata.</p>
    pub fn get_fields(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IcebergStructField>> {
        &self.fields
    }
    /// Consumes the builder and constructs a [`IcebergSchema`](crate::types::IcebergSchema).
    /// This method will fail if any of the following fields are not set:
    /// - [`fields`](crate::types::builders::IcebergSchemaBuilder::fields)
    pub fn build(self) -> ::std::result::Result<crate::types::IcebergSchema, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IcebergSchema {
            schema_id: self.schema_id.unwrap_or_default(),
            identifier_field_ids: self.identifier_field_ids,
            r#type: self.r#type,
            fields: self.fields.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "fields",
                    "fields was not specified but it is required when building IcebergSchema",
                )
            })?,
        })
    }
}
