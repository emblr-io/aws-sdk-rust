// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The statistic model result.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StatisticModelResult {
    /// <p>The lower bound.</p>
    pub lower_bound: ::std::option::Option<f64>,
    /// <p>The upper bound.</p>
    pub upper_bound: ::std::option::Option<f64>,
    /// <p>The predicted value.</p>
    pub predicted_value: ::std::option::Option<f64>,
    /// <p>The actual value.</p>
    pub actual_value: ::std::option::Option<f64>,
    /// <p>The date.</p>
    pub date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The inclusion annotation.</p>
    pub inclusion_annotation: ::std::option::Option<crate::types::InclusionAnnotationValue>,
}
impl StatisticModelResult {
    /// <p>The lower bound.</p>
    pub fn lower_bound(&self) -> ::std::option::Option<f64> {
        self.lower_bound
    }
    /// <p>The upper bound.</p>
    pub fn upper_bound(&self) -> ::std::option::Option<f64> {
        self.upper_bound
    }
    /// <p>The predicted value.</p>
    pub fn predicted_value(&self) -> ::std::option::Option<f64> {
        self.predicted_value
    }
    /// <p>The actual value.</p>
    pub fn actual_value(&self) -> ::std::option::Option<f64> {
        self.actual_value
    }
    /// <p>The date.</p>
    pub fn date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.date.as_ref()
    }
    /// <p>The inclusion annotation.</p>
    pub fn inclusion_annotation(&self) -> ::std::option::Option<&crate::types::InclusionAnnotationValue> {
        self.inclusion_annotation.as_ref()
    }
}
impl StatisticModelResult {
    /// Creates a new builder-style object to manufacture [`StatisticModelResult`](crate::types::StatisticModelResult).
    pub fn builder() -> crate::types::builders::StatisticModelResultBuilder {
        crate::types::builders::StatisticModelResultBuilder::default()
    }
}

/// A builder for [`StatisticModelResult`](crate::types::StatisticModelResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StatisticModelResultBuilder {
    pub(crate) lower_bound: ::std::option::Option<f64>,
    pub(crate) upper_bound: ::std::option::Option<f64>,
    pub(crate) predicted_value: ::std::option::Option<f64>,
    pub(crate) actual_value: ::std::option::Option<f64>,
    pub(crate) date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) inclusion_annotation: ::std::option::Option<crate::types::InclusionAnnotationValue>,
}
impl StatisticModelResultBuilder {
    /// <p>The lower bound.</p>
    pub fn lower_bound(mut self, input: f64) -> Self {
        self.lower_bound = ::std::option::Option::Some(input);
        self
    }
    /// <p>The lower bound.</p>
    pub fn set_lower_bound(mut self, input: ::std::option::Option<f64>) -> Self {
        self.lower_bound = input;
        self
    }
    /// <p>The lower bound.</p>
    pub fn get_lower_bound(&self) -> &::std::option::Option<f64> {
        &self.lower_bound
    }
    /// <p>The upper bound.</p>
    pub fn upper_bound(mut self, input: f64) -> Self {
        self.upper_bound = ::std::option::Option::Some(input);
        self
    }
    /// <p>The upper bound.</p>
    pub fn set_upper_bound(mut self, input: ::std::option::Option<f64>) -> Self {
        self.upper_bound = input;
        self
    }
    /// <p>The upper bound.</p>
    pub fn get_upper_bound(&self) -> &::std::option::Option<f64> {
        &self.upper_bound
    }
    /// <p>The predicted value.</p>
    pub fn predicted_value(mut self, input: f64) -> Self {
        self.predicted_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The predicted value.</p>
    pub fn set_predicted_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.predicted_value = input;
        self
    }
    /// <p>The predicted value.</p>
    pub fn get_predicted_value(&self) -> &::std::option::Option<f64> {
        &self.predicted_value
    }
    /// <p>The actual value.</p>
    pub fn actual_value(mut self, input: f64) -> Self {
        self.actual_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The actual value.</p>
    pub fn set_actual_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.actual_value = input;
        self
    }
    /// <p>The actual value.</p>
    pub fn get_actual_value(&self) -> &::std::option::Option<f64> {
        &self.actual_value
    }
    /// <p>The date.</p>
    pub fn date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date.</p>
    pub fn set_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.date = input;
        self
    }
    /// <p>The date.</p>
    pub fn get_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.date
    }
    /// <p>The inclusion annotation.</p>
    pub fn inclusion_annotation(mut self, input: crate::types::InclusionAnnotationValue) -> Self {
        self.inclusion_annotation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The inclusion annotation.</p>
    pub fn set_inclusion_annotation(mut self, input: ::std::option::Option<crate::types::InclusionAnnotationValue>) -> Self {
        self.inclusion_annotation = input;
        self
    }
    /// <p>The inclusion annotation.</p>
    pub fn get_inclusion_annotation(&self) -> &::std::option::Option<crate::types::InclusionAnnotationValue> {
        &self.inclusion_annotation
    }
    /// Consumes the builder and constructs a [`StatisticModelResult`](crate::types::StatisticModelResult).
    pub fn build(self) -> crate::types::StatisticModelResult {
        crate::types::StatisticModelResult {
            lower_bound: self.lower_bound,
            upper_bound: self.upper_bound,
            predicted_value: self.predicted_value,
            actual_value: self.actual_value,
            date: self.date,
            inclusion_annotation: self.inclusion_annotation,
        }
    }
}
