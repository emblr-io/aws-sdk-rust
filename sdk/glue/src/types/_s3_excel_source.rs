// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies an S3 Excel data source.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3ExcelSource {
    /// <p>The name of the S3 Excel data source.</p>
    pub name: ::std::string::String,
    /// <p>The S3 paths where the Excel files are located.</p>
    pub paths: ::std::vec::Vec<::std::string::String>,
    /// <p>The compression format used for the Excel files.</p>
    pub compression_type: ::std::option::Option<crate::types::ParquetCompressionType>,
    /// <p>Patterns to exclude specific files or paths from processing.</p>
    pub exclusions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Defines the size of file groups for batch processing.</p>
    pub group_size: ::std::option::Option<::std::string::String>,
    /// <p>Specifies how files should be grouped for processing.</p>
    pub group_files: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether to recursively process subdirectories.</p>
    pub recurse: ::std::option::Option<bool>,
    /// <p>The maximum number of processing bands to use.</p>
    pub max_band: ::std::option::Option<i32>,
    /// <p>The maximum number of files to process in each band.</p>
    pub max_files_in_band: ::std::option::Option<i32>,
    /// <p>Additional configuration options for S3 direct source processing.</p>
    pub additional_options: ::std::option::Option<crate::types::S3DirectSourceAdditionalOptions>,
    /// <p>The number of rows to process from each Excel file.</p>
    pub number_rows: ::std::option::Option<i64>,
    /// <p>The number of rows to skip at the end of each Excel file.</p>
    pub skip_footer: ::std::option::Option<i32>,
    /// <p>The AWS Glue schemas to apply to the processed data.</p>
    pub output_schemas: ::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>>,
}
impl S3ExcelSource {
    /// <p>The name of the S3 Excel data source.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The S3 paths where the Excel files are located.</p>
    pub fn paths(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.paths.deref()
    }
    /// <p>The compression format used for the Excel files.</p>
    pub fn compression_type(&self) -> ::std::option::Option<&crate::types::ParquetCompressionType> {
        self.compression_type.as_ref()
    }
    /// <p>Patterns to exclude specific files or paths from processing.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.exclusions.is_none()`.
    pub fn exclusions(&self) -> &[::std::string::String] {
        self.exclusions.as_deref().unwrap_or_default()
    }
    /// <p>Defines the size of file groups for batch processing.</p>
    pub fn group_size(&self) -> ::std::option::Option<&str> {
        self.group_size.as_deref()
    }
    /// <p>Specifies how files should be grouped for processing.</p>
    pub fn group_files(&self) -> ::std::option::Option<&str> {
        self.group_files.as_deref()
    }
    /// <p>Indicates whether to recursively process subdirectories.</p>
    pub fn recurse(&self) -> ::std::option::Option<bool> {
        self.recurse
    }
    /// <p>The maximum number of processing bands to use.</p>
    pub fn max_band(&self) -> ::std::option::Option<i32> {
        self.max_band
    }
    /// <p>The maximum number of files to process in each band.</p>
    pub fn max_files_in_band(&self) -> ::std::option::Option<i32> {
        self.max_files_in_band
    }
    /// <p>Additional configuration options for S3 direct source processing.</p>
    pub fn additional_options(&self) -> ::std::option::Option<&crate::types::S3DirectSourceAdditionalOptions> {
        self.additional_options.as_ref()
    }
    /// <p>The number of rows to process from each Excel file.</p>
    pub fn number_rows(&self) -> ::std::option::Option<i64> {
        self.number_rows
    }
    /// <p>The number of rows to skip at the end of each Excel file.</p>
    pub fn skip_footer(&self) -> ::std::option::Option<i32> {
        self.skip_footer
    }
    /// <p>The AWS Glue schemas to apply to the processed data.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.output_schemas.is_none()`.
    pub fn output_schemas(&self) -> &[crate::types::GlueSchema] {
        self.output_schemas.as_deref().unwrap_or_default()
    }
}
impl S3ExcelSource {
    /// Creates a new builder-style object to manufacture [`S3ExcelSource`](crate::types::S3ExcelSource).
    pub fn builder() -> crate::types::builders::S3ExcelSourceBuilder {
        crate::types::builders::S3ExcelSourceBuilder::default()
    }
}

/// A builder for [`S3ExcelSource`](crate::types::S3ExcelSource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct S3ExcelSourceBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) paths: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) compression_type: ::std::option::Option<crate::types::ParquetCompressionType>,
    pub(crate) exclusions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) group_size: ::std::option::Option<::std::string::String>,
    pub(crate) group_files: ::std::option::Option<::std::string::String>,
    pub(crate) recurse: ::std::option::Option<bool>,
    pub(crate) max_band: ::std::option::Option<i32>,
    pub(crate) max_files_in_band: ::std::option::Option<i32>,
    pub(crate) additional_options: ::std::option::Option<crate::types::S3DirectSourceAdditionalOptions>,
    pub(crate) number_rows: ::std::option::Option<i64>,
    pub(crate) skip_footer: ::std::option::Option<i32>,
    pub(crate) output_schemas: ::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>>,
}
impl S3ExcelSourceBuilder {
    /// <p>The name of the S3 Excel data source.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the S3 Excel data source.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the S3 Excel data source.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `paths`.
    ///
    /// To override the contents of this collection use [`set_paths`](Self::set_paths).
    ///
    /// <p>The S3 paths where the Excel files are located.</p>
    pub fn paths(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.paths.unwrap_or_default();
        v.push(input.into());
        self.paths = ::std::option::Option::Some(v);
        self
    }
    /// <p>The S3 paths where the Excel files are located.</p>
    pub fn set_paths(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.paths = input;
        self
    }
    /// <p>The S3 paths where the Excel files are located.</p>
    pub fn get_paths(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.paths
    }
    /// <p>The compression format used for the Excel files.</p>
    pub fn compression_type(mut self, input: crate::types::ParquetCompressionType) -> Self {
        self.compression_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The compression format used for the Excel files.</p>
    pub fn set_compression_type(mut self, input: ::std::option::Option<crate::types::ParquetCompressionType>) -> Self {
        self.compression_type = input;
        self
    }
    /// <p>The compression format used for the Excel files.</p>
    pub fn get_compression_type(&self) -> &::std::option::Option<crate::types::ParquetCompressionType> {
        &self.compression_type
    }
    /// Appends an item to `exclusions`.
    ///
    /// To override the contents of this collection use [`set_exclusions`](Self::set_exclusions).
    ///
    /// <p>Patterns to exclude specific files or paths from processing.</p>
    pub fn exclusions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.exclusions.unwrap_or_default();
        v.push(input.into());
        self.exclusions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Patterns to exclude specific files or paths from processing.</p>
    pub fn set_exclusions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.exclusions = input;
        self
    }
    /// <p>Patterns to exclude specific files or paths from processing.</p>
    pub fn get_exclusions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.exclusions
    }
    /// <p>Defines the size of file groups for batch processing.</p>
    pub fn group_size(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_size = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Defines the size of file groups for batch processing.</p>
    pub fn set_group_size(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_size = input;
        self
    }
    /// <p>Defines the size of file groups for batch processing.</p>
    pub fn get_group_size(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_size
    }
    /// <p>Specifies how files should be grouped for processing.</p>
    pub fn group_files(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_files = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies how files should be grouped for processing.</p>
    pub fn set_group_files(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_files = input;
        self
    }
    /// <p>Specifies how files should be grouped for processing.</p>
    pub fn get_group_files(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_files
    }
    /// <p>Indicates whether to recursively process subdirectories.</p>
    pub fn recurse(mut self, input: bool) -> Self {
        self.recurse = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether to recursively process subdirectories.</p>
    pub fn set_recurse(mut self, input: ::std::option::Option<bool>) -> Self {
        self.recurse = input;
        self
    }
    /// <p>Indicates whether to recursively process subdirectories.</p>
    pub fn get_recurse(&self) -> &::std::option::Option<bool> {
        &self.recurse
    }
    /// <p>The maximum number of processing bands to use.</p>
    pub fn max_band(mut self, input: i32) -> Self {
        self.max_band = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of processing bands to use.</p>
    pub fn set_max_band(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_band = input;
        self
    }
    /// <p>The maximum number of processing bands to use.</p>
    pub fn get_max_band(&self) -> &::std::option::Option<i32> {
        &self.max_band
    }
    /// <p>The maximum number of files to process in each band.</p>
    pub fn max_files_in_band(mut self, input: i32) -> Self {
        self.max_files_in_band = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of files to process in each band.</p>
    pub fn set_max_files_in_band(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_files_in_band = input;
        self
    }
    /// <p>The maximum number of files to process in each band.</p>
    pub fn get_max_files_in_band(&self) -> &::std::option::Option<i32> {
        &self.max_files_in_band
    }
    /// <p>Additional configuration options for S3 direct source processing.</p>
    pub fn additional_options(mut self, input: crate::types::S3DirectSourceAdditionalOptions) -> Self {
        self.additional_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Additional configuration options for S3 direct source processing.</p>
    pub fn set_additional_options(mut self, input: ::std::option::Option<crate::types::S3DirectSourceAdditionalOptions>) -> Self {
        self.additional_options = input;
        self
    }
    /// <p>Additional configuration options for S3 direct source processing.</p>
    pub fn get_additional_options(&self) -> &::std::option::Option<crate::types::S3DirectSourceAdditionalOptions> {
        &self.additional_options
    }
    /// <p>The number of rows to process from each Excel file.</p>
    pub fn number_rows(mut self, input: i64) -> Self {
        self.number_rows = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of rows to process from each Excel file.</p>
    pub fn set_number_rows(mut self, input: ::std::option::Option<i64>) -> Self {
        self.number_rows = input;
        self
    }
    /// <p>The number of rows to process from each Excel file.</p>
    pub fn get_number_rows(&self) -> &::std::option::Option<i64> {
        &self.number_rows
    }
    /// <p>The number of rows to skip at the end of each Excel file.</p>
    pub fn skip_footer(mut self, input: i32) -> Self {
        self.skip_footer = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of rows to skip at the end of each Excel file.</p>
    pub fn set_skip_footer(mut self, input: ::std::option::Option<i32>) -> Self {
        self.skip_footer = input;
        self
    }
    /// <p>The number of rows to skip at the end of each Excel file.</p>
    pub fn get_skip_footer(&self) -> &::std::option::Option<i32> {
        &self.skip_footer
    }
    /// Appends an item to `output_schemas`.
    ///
    /// To override the contents of this collection use [`set_output_schemas`](Self::set_output_schemas).
    ///
    /// <p>The AWS Glue schemas to apply to the processed data.</p>
    pub fn output_schemas(mut self, input: crate::types::GlueSchema) -> Self {
        let mut v = self.output_schemas.unwrap_or_default();
        v.push(input);
        self.output_schemas = ::std::option::Option::Some(v);
        self
    }
    /// <p>The AWS Glue schemas to apply to the processed data.</p>
    pub fn set_output_schemas(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>>) -> Self {
        self.output_schemas = input;
        self
    }
    /// <p>The AWS Glue schemas to apply to the processed data.</p>
    pub fn get_output_schemas(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>> {
        &self.output_schemas
    }
    /// Consumes the builder and constructs a [`S3ExcelSource`](crate::types::S3ExcelSource).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::S3ExcelSourceBuilder::name)
    /// - [`paths`](crate::types::builders::S3ExcelSourceBuilder::paths)
    pub fn build(self) -> ::std::result::Result<crate::types::S3ExcelSource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::S3ExcelSource {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building S3ExcelSource",
                )
            })?,
            paths: self.paths.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "paths",
                    "paths was not specified but it is required when building S3ExcelSource",
                )
            })?,
            compression_type: self.compression_type,
            exclusions: self.exclusions,
            group_size: self.group_size,
            group_files: self.group_files,
            recurse: self.recurse,
            max_band: self.max_band,
            max_files_in_band: self.max_files_in_band,
            additional_options: self.additional_options,
            number_rows: self.number_rows,
            skip_footer: self.skip_footer,
            output_schemas: self.output_schemas,
        })
    }
}
