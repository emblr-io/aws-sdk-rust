// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The resource properties associated with the integration target.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TargetProcessingProperties {
    /// <p>The IAM role to access the Glue database.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the KMS key used for encryption.</p>
    pub kms_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Glue network connection to configure the Glue job running in the customer VPC.</p>
    pub connection_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of an Eventbridge event bus to receive the integration status notification.</p>
    pub event_bus_arn: ::std::option::Option<::std::string::String>,
}
impl TargetProcessingProperties {
    /// <p>The IAM role to access the Glue database.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The ARN of the KMS key used for encryption.</p>
    pub fn kms_arn(&self) -> ::std::option::Option<&str> {
        self.kms_arn.as_deref()
    }
    /// <p>The Glue network connection to configure the Glue job running in the customer VPC.</p>
    pub fn connection_name(&self) -> ::std::option::Option<&str> {
        self.connection_name.as_deref()
    }
    /// <p>The ARN of an Eventbridge event bus to receive the integration status notification.</p>
    pub fn event_bus_arn(&self) -> ::std::option::Option<&str> {
        self.event_bus_arn.as_deref()
    }
}
impl TargetProcessingProperties {
    /// Creates a new builder-style object to manufacture [`TargetProcessingProperties`](crate::types::TargetProcessingProperties).
    pub fn builder() -> crate::types::builders::TargetProcessingPropertiesBuilder {
        crate::types::builders::TargetProcessingPropertiesBuilder::default()
    }
}

/// A builder for [`TargetProcessingProperties`](crate::types::TargetProcessingProperties).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TargetProcessingPropertiesBuilder {
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) kms_arn: ::std::option::Option<::std::string::String>,
    pub(crate) connection_name: ::std::option::Option<::std::string::String>,
    pub(crate) event_bus_arn: ::std::option::Option<::std::string::String>,
}
impl TargetProcessingPropertiesBuilder {
    /// <p>The IAM role to access the Glue database.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role to access the Glue database.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The IAM role to access the Glue database.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The ARN of the KMS key used for encryption.</p>
    pub fn kms_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the KMS key used for encryption.</p>
    pub fn set_kms_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_arn = input;
        self
    }
    /// <p>The ARN of the KMS key used for encryption.</p>
    pub fn get_kms_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_arn
    }
    /// <p>The Glue network connection to configure the Glue job running in the customer VPC.</p>
    pub fn connection_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Glue network connection to configure the Glue job running in the customer VPC.</p>
    pub fn set_connection_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_name = input;
        self
    }
    /// <p>The Glue network connection to configure the Glue job running in the customer VPC.</p>
    pub fn get_connection_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_name
    }
    /// <p>The ARN of an Eventbridge event bus to receive the integration status notification.</p>
    pub fn event_bus_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_bus_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of an Eventbridge event bus to receive the integration status notification.</p>
    pub fn set_event_bus_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_bus_arn = input;
        self
    }
    /// <p>The ARN of an Eventbridge event bus to receive the integration status notification.</p>
    pub fn get_event_bus_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_bus_arn
    }
    /// Consumes the builder and constructs a [`TargetProcessingProperties`](crate::types::TargetProcessingProperties).
    pub fn build(self) -> crate::types::TargetProcessingProperties {
        crate::types::TargetProcessingProperties {
            role_arn: self.role_arn,
            kms_arn: self.kms_arn,
            connection_name: self.connection_name,
            event_bus_arn: self.event_bus_arn,
        }
    }
}
