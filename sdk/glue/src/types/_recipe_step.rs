// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A recipe step used in a Glue Studio data preparation recipe node.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecipeStep {
    /// <p>The transformation action of the recipe step.</p>
    pub action: ::std::option::Option<crate::types::RecipeAction>,
    /// <p>The condition expressions for the recipe step.</p>
    pub condition_expressions: ::std::option::Option<::std::vec::Vec<crate::types::ConditionExpression>>,
}
impl RecipeStep {
    /// <p>The transformation action of the recipe step.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::RecipeAction> {
        self.action.as_ref()
    }
    /// <p>The condition expressions for the recipe step.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.condition_expressions.is_none()`.
    pub fn condition_expressions(&self) -> &[crate::types::ConditionExpression] {
        self.condition_expressions.as_deref().unwrap_or_default()
    }
}
impl RecipeStep {
    /// Creates a new builder-style object to manufacture [`RecipeStep`](crate::types::RecipeStep).
    pub fn builder() -> crate::types::builders::RecipeStepBuilder {
        crate::types::builders::RecipeStepBuilder::default()
    }
}

/// A builder for [`RecipeStep`](crate::types::RecipeStep).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RecipeStepBuilder {
    pub(crate) action: ::std::option::Option<crate::types::RecipeAction>,
    pub(crate) condition_expressions: ::std::option::Option<::std::vec::Vec<crate::types::ConditionExpression>>,
}
impl RecipeStepBuilder {
    /// <p>The transformation action of the recipe step.</p>
    /// This field is required.
    pub fn action(mut self, input: crate::types::RecipeAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The transformation action of the recipe step.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::RecipeAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The transformation action of the recipe step.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::RecipeAction> {
        &self.action
    }
    /// Appends an item to `condition_expressions`.
    ///
    /// To override the contents of this collection use [`set_condition_expressions`](Self::set_condition_expressions).
    ///
    /// <p>The condition expressions for the recipe step.</p>
    pub fn condition_expressions(mut self, input: crate::types::ConditionExpression) -> Self {
        let mut v = self.condition_expressions.unwrap_or_default();
        v.push(input);
        self.condition_expressions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The condition expressions for the recipe step.</p>
    pub fn set_condition_expressions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ConditionExpression>>) -> Self {
        self.condition_expressions = input;
        self
    }
    /// <p>The condition expressions for the recipe step.</p>
    pub fn get_condition_expressions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ConditionExpression>> {
        &self.condition_expressions
    }
    /// Consumes the builder and constructs a [`RecipeStep`](crate::types::RecipeStep).
    pub fn build(self) -> crate::types::RecipeStep {
        crate::types::RecipeStep {
            action: self.action,
            condition_expressions: self.condition_expressions,
        }
    }
}
