// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure containing information about an asynchronous change to a table.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StatusDetails {
    /// <p>A <code>Table</code> object representing the requested changes.</p>
    pub requested_change: ::std::option::Option<::std::boxed::Box<crate::types::Table>>,
    /// <p>A list of <code>ViewValidation</code> objects that contain information for an analytical engine to validate a view.</p>
    pub view_validations: ::std::option::Option<::std::vec::Vec<crate::types::ViewValidation>>,
}
impl StatusDetails {
    /// <p>A <code>Table</code> object representing the requested changes.</p>
    pub fn requested_change(&self) -> ::std::option::Option<&crate::types::Table> {
        self.requested_change.as_deref()
    }
    /// <p>A list of <code>ViewValidation</code> objects that contain information for an analytical engine to validate a view.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.view_validations.is_none()`.
    pub fn view_validations(&self) -> &[crate::types::ViewValidation] {
        self.view_validations.as_deref().unwrap_or_default()
    }
}
impl StatusDetails {
    /// Creates a new builder-style object to manufacture [`StatusDetails`](crate::types::StatusDetails).
    pub fn builder() -> crate::types::builders::StatusDetailsBuilder {
        crate::types::builders::StatusDetailsBuilder::default()
    }
}

/// A builder for [`StatusDetails`](crate::types::StatusDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StatusDetailsBuilder {
    pub(crate) requested_change: ::std::option::Option<::std::boxed::Box<crate::types::Table>>,
    pub(crate) view_validations: ::std::option::Option<::std::vec::Vec<crate::types::ViewValidation>>,
}
impl StatusDetailsBuilder {
    /// <p>A <code>Table</code> object representing the requested changes.</p>
    pub fn requested_change(mut self, input: impl ::std::convert::Into<::std::boxed::Box<crate::types::Table>>) -> Self {
        self.requested_change = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A <code>Table</code> object representing the requested changes.</p>
    pub fn set_requested_change(mut self, input: ::std::option::Option<::std::boxed::Box<crate::types::Table>>) -> Self {
        self.requested_change = input;
        self
    }
    /// <p>A <code>Table</code> object representing the requested changes.</p>
    pub fn get_requested_change(&self) -> &::std::option::Option<::std::boxed::Box<crate::types::Table>> {
        &self.requested_change
    }
    /// Appends an item to `view_validations`.
    ///
    /// To override the contents of this collection use [`set_view_validations`](Self::set_view_validations).
    ///
    /// <p>A list of <code>ViewValidation</code> objects that contain information for an analytical engine to validate a view.</p>
    pub fn view_validations(mut self, input: crate::types::ViewValidation) -> Self {
        let mut v = self.view_validations.unwrap_or_default();
        v.push(input);
        self.view_validations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>ViewValidation</code> objects that contain information for an analytical engine to validate a view.</p>
    pub fn set_view_validations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ViewValidation>>) -> Self {
        self.view_validations = input;
        self
    }
    /// <p>A list of <code>ViewValidation</code> objects that contain information for an analytical engine to validate a view.</p>
    pub fn get_view_validations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ViewValidation>> {
        &self.view_validations
    }
    /// Consumes the builder and constructs a [`StatusDetails`](crate::types::StatusDetails).
    pub fn build(self) -> crate::types::StatusDetails {
        crate::types::StatusDetails {
            requested_change: self.requested_change,
            view_validations: self.view_validations,
        }
    }
}
