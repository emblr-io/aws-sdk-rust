// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The output properties of the data lake access configuration for your catalog resource in the Glue Data Catalog.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataLakeAccessPropertiesOutput {
    /// <p>Turns on or off data lake access for Apache Spark applications that access Amazon Redshift databases in the Data Catalog.</p>
    pub data_lake_access: bool,
    /// <p>A role that will be assumed by Glue for transferring data into/out of the staging bucket during a query.</p>
    pub data_transfer_role: ::std::option::Option<::std::string::String>,
    /// <p>An encryption key that will be used for the staging bucket that will be created along with the catalog.</p>
    pub kms_key: ::std::option::Option<::std::string::String>,
    /// <p>The managed Redshift Serverless compute name that is created for your catalog resource.</p>
    pub managed_workgroup_name: ::std::option::Option<::std::string::String>,
    /// <p>The managed Redshift Serverless compute status.</p>
    pub managed_workgroup_status: ::std::option::Option<::std::string::String>,
    /// <p>The default Redshift database resource name in the managed compute.</p>
    pub redshift_database_name: ::std::option::Option<::std::string::String>,
    /// <p>A message that gives more detailed information about the managed workgroup status.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>Specifies a federated catalog type for the native catalog resource. The currently supported type is <code>aws:redshift</code>.</p>
    pub catalog_type: ::std::option::Option<::std::string::String>,
}
impl DataLakeAccessPropertiesOutput {
    /// <p>Turns on or off data lake access for Apache Spark applications that access Amazon Redshift databases in the Data Catalog.</p>
    pub fn data_lake_access(&self) -> bool {
        self.data_lake_access
    }
    /// <p>A role that will be assumed by Glue for transferring data into/out of the staging bucket during a query.</p>
    pub fn data_transfer_role(&self) -> ::std::option::Option<&str> {
        self.data_transfer_role.as_deref()
    }
    /// <p>An encryption key that will be used for the staging bucket that will be created along with the catalog.</p>
    pub fn kms_key(&self) -> ::std::option::Option<&str> {
        self.kms_key.as_deref()
    }
    /// <p>The managed Redshift Serverless compute name that is created for your catalog resource.</p>
    pub fn managed_workgroup_name(&self) -> ::std::option::Option<&str> {
        self.managed_workgroup_name.as_deref()
    }
    /// <p>The managed Redshift Serverless compute status.</p>
    pub fn managed_workgroup_status(&self) -> ::std::option::Option<&str> {
        self.managed_workgroup_status.as_deref()
    }
    /// <p>The default Redshift database resource name in the managed compute.</p>
    pub fn redshift_database_name(&self) -> ::std::option::Option<&str> {
        self.redshift_database_name.as_deref()
    }
    /// <p>A message that gives more detailed information about the managed workgroup status.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>Specifies a federated catalog type for the native catalog resource. The currently supported type is <code>aws:redshift</code>.</p>
    pub fn catalog_type(&self) -> ::std::option::Option<&str> {
        self.catalog_type.as_deref()
    }
}
impl DataLakeAccessPropertiesOutput {
    /// Creates a new builder-style object to manufacture [`DataLakeAccessPropertiesOutput`](crate::types::DataLakeAccessPropertiesOutput).
    pub fn builder() -> crate::types::builders::DataLakeAccessPropertiesOutputBuilder {
        crate::types::builders::DataLakeAccessPropertiesOutputBuilder::default()
    }
}

/// A builder for [`DataLakeAccessPropertiesOutput`](crate::types::DataLakeAccessPropertiesOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataLakeAccessPropertiesOutputBuilder {
    pub(crate) data_lake_access: ::std::option::Option<bool>,
    pub(crate) data_transfer_role: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key: ::std::option::Option<::std::string::String>,
    pub(crate) managed_workgroup_name: ::std::option::Option<::std::string::String>,
    pub(crate) managed_workgroup_status: ::std::option::Option<::std::string::String>,
    pub(crate) redshift_database_name: ::std::option::Option<::std::string::String>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) catalog_type: ::std::option::Option<::std::string::String>,
}
impl DataLakeAccessPropertiesOutputBuilder {
    /// <p>Turns on or off data lake access for Apache Spark applications that access Amazon Redshift databases in the Data Catalog.</p>
    pub fn data_lake_access(mut self, input: bool) -> Self {
        self.data_lake_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>Turns on or off data lake access for Apache Spark applications that access Amazon Redshift databases in the Data Catalog.</p>
    pub fn set_data_lake_access(mut self, input: ::std::option::Option<bool>) -> Self {
        self.data_lake_access = input;
        self
    }
    /// <p>Turns on or off data lake access for Apache Spark applications that access Amazon Redshift databases in the Data Catalog.</p>
    pub fn get_data_lake_access(&self) -> &::std::option::Option<bool> {
        &self.data_lake_access
    }
    /// <p>A role that will be assumed by Glue for transferring data into/out of the staging bucket during a query.</p>
    pub fn data_transfer_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_transfer_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A role that will be assumed by Glue for transferring data into/out of the staging bucket during a query.</p>
    pub fn set_data_transfer_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_transfer_role = input;
        self
    }
    /// <p>A role that will be assumed by Glue for transferring data into/out of the staging bucket during a query.</p>
    pub fn get_data_transfer_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_transfer_role
    }
    /// <p>An encryption key that will be used for the staging bucket that will be created along with the catalog.</p>
    pub fn kms_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An encryption key that will be used for the staging bucket that will be created along with the catalog.</p>
    pub fn set_kms_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key = input;
        self
    }
    /// <p>An encryption key that will be used for the staging bucket that will be created along with the catalog.</p>
    pub fn get_kms_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key
    }
    /// <p>The managed Redshift Serverless compute name that is created for your catalog resource.</p>
    pub fn managed_workgroup_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.managed_workgroup_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The managed Redshift Serverless compute name that is created for your catalog resource.</p>
    pub fn set_managed_workgroup_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.managed_workgroup_name = input;
        self
    }
    /// <p>The managed Redshift Serverless compute name that is created for your catalog resource.</p>
    pub fn get_managed_workgroup_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.managed_workgroup_name
    }
    /// <p>The managed Redshift Serverless compute status.</p>
    pub fn managed_workgroup_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.managed_workgroup_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The managed Redshift Serverless compute status.</p>
    pub fn set_managed_workgroup_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.managed_workgroup_status = input;
        self
    }
    /// <p>The managed Redshift Serverless compute status.</p>
    pub fn get_managed_workgroup_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.managed_workgroup_status
    }
    /// <p>The default Redshift database resource name in the managed compute.</p>
    pub fn redshift_database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.redshift_database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The default Redshift database resource name in the managed compute.</p>
    pub fn set_redshift_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.redshift_database_name = input;
        self
    }
    /// <p>The default Redshift database resource name in the managed compute.</p>
    pub fn get_redshift_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.redshift_database_name
    }
    /// <p>A message that gives more detailed information about the managed workgroup status.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message that gives more detailed information about the managed workgroup status.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>A message that gives more detailed information about the managed workgroup status.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>Specifies a federated catalog type for the native catalog resource. The currently supported type is <code>aws:redshift</code>.</p>
    pub fn catalog_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a federated catalog type for the native catalog resource. The currently supported type is <code>aws:redshift</code>.</p>
    pub fn set_catalog_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_type = input;
        self
    }
    /// <p>Specifies a federated catalog type for the native catalog resource. The currently supported type is <code>aws:redshift</code>.</p>
    pub fn get_catalog_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_type
    }
    /// Consumes the builder and constructs a [`DataLakeAccessPropertiesOutput`](crate::types::DataLakeAccessPropertiesOutput).
    pub fn build(self) -> crate::types::DataLakeAccessPropertiesOutput {
        crate::types::DataLakeAccessPropertiesOutput {
            data_lake_access: self.data_lake_access.unwrap_or_default(),
            data_transfer_role: self.data_transfer_role,
            kms_key: self.kms_key,
            managed_workgroup_name: self.managed_workgroup_name,
            managed_workgroup_status: self.managed_workgroup_status,
            redshift_database_name: self.redshift_database_name,
            status_message: self.status_message,
            catalog_type: self.catalog_type,
        }
    }
}
