// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Condition expression defined in the Glue Studio data preparation recipe node.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConditionExpression {
    /// <p>The condition of the condition expression.</p>
    pub condition: ::std::string::String,
    /// <p>The value of the condition expression.</p>
    pub value: ::std::option::Option<::std::string::String>,
    /// <p>The target column of the condition expressions.</p>
    pub target_column: ::std::string::String,
}
impl ConditionExpression {
    /// <p>The condition of the condition expression.</p>
    pub fn condition(&self) -> &str {
        use std::ops::Deref;
        self.condition.deref()
    }
    /// <p>The value of the condition expression.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The target column of the condition expressions.</p>
    pub fn target_column(&self) -> &str {
        use std::ops::Deref;
        self.target_column.deref()
    }
}
impl ConditionExpression {
    /// Creates a new builder-style object to manufacture [`ConditionExpression`](crate::types::ConditionExpression).
    pub fn builder() -> crate::types::builders::ConditionExpressionBuilder {
        crate::types::builders::ConditionExpressionBuilder::default()
    }
}

/// A builder for [`ConditionExpression`](crate::types::ConditionExpression).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConditionExpressionBuilder {
    pub(crate) condition: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) target_column: ::std::option::Option<::std::string::String>,
}
impl ConditionExpressionBuilder {
    /// <p>The condition of the condition expression.</p>
    /// This field is required.
    pub fn condition(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.condition = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The condition of the condition expression.</p>
    pub fn set_condition(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.condition = input;
        self
    }
    /// <p>The condition of the condition expression.</p>
    pub fn get_condition(&self) -> &::std::option::Option<::std::string::String> {
        &self.condition
    }
    /// <p>The value of the condition expression.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the condition expression.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of the condition expression.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// <p>The target column of the condition expressions.</p>
    /// This field is required.
    pub fn target_column(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_column = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The target column of the condition expressions.</p>
    pub fn set_target_column(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_column = input;
        self
    }
    /// <p>The target column of the condition expressions.</p>
    pub fn get_target_column(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_column
    }
    /// Consumes the builder and constructs a [`ConditionExpression`](crate::types::ConditionExpression).
    /// This method will fail if any of the following fields are not set:
    /// - [`condition`](crate::types::builders::ConditionExpressionBuilder::condition)
    /// - [`target_column`](crate::types::builders::ConditionExpressionBuilder::target_column)
    pub fn build(self) -> ::std::result::Result<crate::types::ConditionExpression, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConditionExpression {
            condition: self.condition.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "condition",
                    "condition was not specified but it is required when building ConditionExpression",
                )
            })?,
            value: self.value,
            target_column: self.target_column.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target_column",
                    "target_column was not specified but it is required when building ConditionExpression",
                )
            })?,
        })
    }
}
