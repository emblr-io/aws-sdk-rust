// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the sort order specification for an Iceberg table, determining how data should be ordered within partitions to optimize query performance.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IcebergSortOrder {
    /// <p>The unique identifier for this sort order specification within the Iceberg table's metadata.</p>
    pub order_id: i32,
    /// <p>The list of fields and their sort directions that define the ordering criteria for the Iceberg table data.</p>
    pub fields: ::std::vec::Vec<crate::types::IcebergSortField>,
}
impl IcebergSortOrder {
    /// <p>The unique identifier for this sort order specification within the Iceberg table's metadata.</p>
    pub fn order_id(&self) -> i32 {
        self.order_id
    }
    /// <p>The list of fields and their sort directions that define the ordering criteria for the Iceberg table data.</p>
    pub fn fields(&self) -> &[crate::types::IcebergSortField] {
        use std::ops::Deref;
        self.fields.deref()
    }
}
impl IcebergSortOrder {
    /// Creates a new builder-style object to manufacture [`IcebergSortOrder`](crate::types::IcebergSortOrder).
    pub fn builder() -> crate::types::builders::IcebergSortOrderBuilder {
        crate::types::builders::IcebergSortOrderBuilder::default()
    }
}

/// A builder for [`IcebergSortOrder`](crate::types::IcebergSortOrder).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IcebergSortOrderBuilder {
    pub(crate) order_id: ::std::option::Option<i32>,
    pub(crate) fields: ::std::option::Option<::std::vec::Vec<crate::types::IcebergSortField>>,
}
impl IcebergSortOrderBuilder {
    /// <p>The unique identifier for this sort order specification within the Iceberg table's metadata.</p>
    /// This field is required.
    pub fn order_id(mut self, input: i32) -> Self {
        self.order_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The unique identifier for this sort order specification within the Iceberg table's metadata.</p>
    pub fn set_order_id(mut self, input: ::std::option::Option<i32>) -> Self {
        self.order_id = input;
        self
    }
    /// <p>The unique identifier for this sort order specification within the Iceberg table's metadata.</p>
    pub fn get_order_id(&self) -> &::std::option::Option<i32> {
        &self.order_id
    }
    /// Appends an item to `fields`.
    ///
    /// To override the contents of this collection use [`set_fields`](Self::set_fields).
    ///
    /// <p>The list of fields and their sort directions that define the ordering criteria for the Iceberg table data.</p>
    pub fn fields(mut self, input: crate::types::IcebergSortField) -> Self {
        let mut v = self.fields.unwrap_or_default();
        v.push(input);
        self.fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of fields and their sort directions that define the ordering criteria for the Iceberg table data.</p>
    pub fn set_fields(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IcebergSortField>>) -> Self {
        self.fields = input;
        self
    }
    /// <p>The list of fields and their sort directions that define the ordering criteria for the Iceberg table data.</p>
    pub fn get_fields(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IcebergSortField>> {
        &self.fields
    }
    /// Consumes the builder and constructs a [`IcebergSortOrder`](crate::types::IcebergSortOrder).
    /// This method will fail if any of the following fields are not set:
    /// - [`fields`](crate::types::builders::IcebergSortOrderBuilder::fields)
    pub fn build(self) -> ::std::result::Result<crate::types::IcebergSortOrder, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IcebergSortOrder {
            order_id: self.order_id.unwrap_or_default(),
            fields: self.fields.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "fields",
                    "fields was not specified but it is required when building IcebergSortOrder",
                )
            })?,
        })
    }
}
