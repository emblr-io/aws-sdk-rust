// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure for an integration that writes data into a resource.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InboundIntegration {
    /// <p>The ARN of the source resource for the integration.</p>
    pub source_arn: ::std::string::String,
    /// <p>The ARN of the target resource for the integration.</p>
    pub target_arn: ::std::string::String,
    /// <p>The ARN of the zero-ETL integration.</p>
    pub integration_arn: ::std::string::String,
    /// <p>The possible statuses are:</p>
    /// <ul>
    /// <li>
    /// <p>CREATING: The integration is being created.</p></li>
    /// <li>
    /// <p>ACTIVE: The integration creation succeeds.</p></li>
    /// <li>
    /// <p>MODIFYING: The integration is being modified.</p></li>
    /// <li>
    /// <p>FAILED: The integration creation fails.</p></li>
    /// <li>
    /// <p>DELETING: The integration is deleted.</p></li>
    /// <li>
    /// <p>SYNCING: The integration is synchronizing.</p></li>
    /// <li>
    /// <p>NEEDS_ATTENTION: The integration needs attention, such as synchronization.</p></li>
    /// </ul>
    pub status: crate::types::IntegrationStatus,
    /// <p>The time that the integration was created, in UTC.</p>
    pub create_time: ::aws_smithy_types::DateTime,
    /// <p>Properties associated with the integration.</p>
    pub integration_config: ::std::option::Option<crate::types::IntegrationConfig>,
    /// <p>A list of errors associated with the integration.</p>
    pub errors: ::std::option::Option<::std::vec::Vec<crate::types::IntegrationError>>,
}
impl InboundIntegration {
    /// <p>The ARN of the source resource for the integration.</p>
    pub fn source_arn(&self) -> &str {
        use std::ops::Deref;
        self.source_arn.deref()
    }
    /// <p>The ARN of the target resource for the integration.</p>
    pub fn target_arn(&self) -> &str {
        use std::ops::Deref;
        self.target_arn.deref()
    }
    /// <p>The ARN of the zero-ETL integration.</p>
    pub fn integration_arn(&self) -> &str {
        use std::ops::Deref;
        self.integration_arn.deref()
    }
    /// <p>The possible statuses are:</p>
    /// <ul>
    /// <li>
    /// <p>CREATING: The integration is being created.</p></li>
    /// <li>
    /// <p>ACTIVE: The integration creation succeeds.</p></li>
    /// <li>
    /// <p>MODIFYING: The integration is being modified.</p></li>
    /// <li>
    /// <p>FAILED: The integration creation fails.</p></li>
    /// <li>
    /// <p>DELETING: The integration is deleted.</p></li>
    /// <li>
    /// <p>SYNCING: The integration is synchronizing.</p></li>
    /// <li>
    /// <p>NEEDS_ATTENTION: The integration needs attention, such as synchronization.</p></li>
    /// </ul>
    pub fn status(&self) -> &crate::types::IntegrationStatus {
        &self.status
    }
    /// <p>The time that the integration was created, in UTC.</p>
    pub fn create_time(&self) -> &::aws_smithy_types::DateTime {
        &self.create_time
    }
    /// <p>Properties associated with the integration.</p>
    pub fn integration_config(&self) -> ::std::option::Option<&crate::types::IntegrationConfig> {
        self.integration_config.as_ref()
    }
    /// <p>A list of errors associated with the integration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.errors.is_none()`.
    pub fn errors(&self) -> &[crate::types::IntegrationError] {
        self.errors.as_deref().unwrap_or_default()
    }
}
impl InboundIntegration {
    /// Creates a new builder-style object to manufacture [`InboundIntegration`](crate::types::InboundIntegration).
    pub fn builder() -> crate::types::builders::InboundIntegrationBuilder {
        crate::types::builders::InboundIntegrationBuilder::default()
    }
}

/// A builder for [`InboundIntegration`](crate::types::InboundIntegration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InboundIntegrationBuilder {
    pub(crate) source_arn: ::std::option::Option<::std::string::String>,
    pub(crate) target_arn: ::std::option::Option<::std::string::String>,
    pub(crate) integration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::IntegrationStatus>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) integration_config: ::std::option::Option<crate::types::IntegrationConfig>,
    pub(crate) errors: ::std::option::Option<::std::vec::Vec<crate::types::IntegrationError>>,
}
impl InboundIntegrationBuilder {
    /// <p>The ARN of the source resource for the integration.</p>
    /// This field is required.
    pub fn source_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the source resource for the integration.</p>
    pub fn set_source_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_arn = input;
        self
    }
    /// <p>The ARN of the source resource for the integration.</p>
    pub fn get_source_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_arn
    }
    /// <p>The ARN of the target resource for the integration.</p>
    /// This field is required.
    pub fn target_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the target resource for the integration.</p>
    pub fn set_target_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_arn = input;
        self
    }
    /// <p>The ARN of the target resource for the integration.</p>
    pub fn get_target_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_arn
    }
    /// <p>The ARN of the zero-ETL integration.</p>
    /// This field is required.
    pub fn integration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.integration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the zero-ETL integration.</p>
    pub fn set_integration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.integration_arn = input;
        self
    }
    /// <p>The ARN of the zero-ETL integration.</p>
    pub fn get_integration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.integration_arn
    }
    /// <p>The possible statuses are:</p>
    /// <ul>
    /// <li>
    /// <p>CREATING: The integration is being created.</p></li>
    /// <li>
    /// <p>ACTIVE: The integration creation succeeds.</p></li>
    /// <li>
    /// <p>MODIFYING: The integration is being modified.</p></li>
    /// <li>
    /// <p>FAILED: The integration creation fails.</p></li>
    /// <li>
    /// <p>DELETING: The integration is deleted.</p></li>
    /// <li>
    /// <p>SYNCING: The integration is synchronizing.</p></li>
    /// <li>
    /// <p>NEEDS_ATTENTION: The integration needs attention, such as synchronization.</p></li>
    /// </ul>
    /// This field is required.
    pub fn status(mut self, input: crate::types::IntegrationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The possible statuses are:</p>
    /// <ul>
    /// <li>
    /// <p>CREATING: The integration is being created.</p></li>
    /// <li>
    /// <p>ACTIVE: The integration creation succeeds.</p></li>
    /// <li>
    /// <p>MODIFYING: The integration is being modified.</p></li>
    /// <li>
    /// <p>FAILED: The integration creation fails.</p></li>
    /// <li>
    /// <p>DELETING: The integration is deleted.</p></li>
    /// <li>
    /// <p>SYNCING: The integration is synchronizing.</p></li>
    /// <li>
    /// <p>NEEDS_ATTENTION: The integration needs attention, such as synchronization.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::IntegrationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The possible statuses are:</p>
    /// <ul>
    /// <li>
    /// <p>CREATING: The integration is being created.</p></li>
    /// <li>
    /// <p>ACTIVE: The integration creation succeeds.</p></li>
    /// <li>
    /// <p>MODIFYING: The integration is being modified.</p></li>
    /// <li>
    /// <p>FAILED: The integration creation fails.</p></li>
    /// <li>
    /// <p>DELETING: The integration is deleted.</p></li>
    /// <li>
    /// <p>SYNCING: The integration is synchronizing.</p></li>
    /// <li>
    /// <p>NEEDS_ATTENTION: The integration needs attention, such as synchronization.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::IntegrationStatus> {
        &self.status
    }
    /// <p>The time that the integration was created, in UTC.</p>
    /// This field is required.
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the integration was created, in UTC.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time that the integration was created, in UTC.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>Properties associated with the integration.</p>
    pub fn integration_config(mut self, input: crate::types::IntegrationConfig) -> Self {
        self.integration_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Properties associated with the integration.</p>
    pub fn set_integration_config(mut self, input: ::std::option::Option<crate::types::IntegrationConfig>) -> Self {
        self.integration_config = input;
        self
    }
    /// <p>Properties associated with the integration.</p>
    pub fn get_integration_config(&self) -> &::std::option::Option<crate::types::IntegrationConfig> {
        &self.integration_config
    }
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>A list of errors associated with the integration.</p>
    pub fn errors(mut self, input: crate::types::IntegrationError) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of errors associated with the integration.</p>
    pub fn set_errors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IntegrationError>>) -> Self {
        self.errors = input;
        self
    }
    /// <p>A list of errors associated with the integration.</p>
    pub fn get_errors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IntegrationError>> {
        &self.errors
    }
    /// Consumes the builder and constructs a [`InboundIntegration`](crate::types::InboundIntegration).
    /// This method will fail if any of the following fields are not set:
    /// - [`source_arn`](crate::types::builders::InboundIntegrationBuilder::source_arn)
    /// - [`target_arn`](crate::types::builders::InboundIntegrationBuilder::target_arn)
    /// - [`integration_arn`](crate::types::builders::InboundIntegrationBuilder::integration_arn)
    /// - [`status`](crate::types::builders::InboundIntegrationBuilder::status)
    /// - [`create_time`](crate::types::builders::InboundIntegrationBuilder::create_time)
    pub fn build(self) -> ::std::result::Result<crate::types::InboundIntegration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::InboundIntegration {
            source_arn: self.source_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_arn",
                    "source_arn was not specified but it is required when building InboundIntegration",
                )
            })?,
            target_arn: self.target_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target_arn",
                    "target_arn was not specified but it is required when building InboundIntegration",
                )
            })?,
            integration_arn: self.integration_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "integration_arn",
                    "integration_arn was not specified but it is required when building InboundIntegration",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building InboundIntegration",
                )
            })?,
            create_time: self.create_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_time",
                    "create_time was not specified but it is required when building InboundIntegration",
                )
            })?,
            integration_config: self.integration_config,
            errors: self.errors,
        })
    }
}
