// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The catalog object represents a logical grouping of databases in the Glue Data Catalog or a federated source. You can now create a Redshift-federated catalog or a catalog containing resource links to Redshift databases in another account or region.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Catalog {
    /// <p>The ID of the catalog. To grant access to the default catalog, this field should not be provided.</p>
    pub catalog_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the catalog. Cannot be the same as the account ID.</p>
    pub name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) assigned to the catalog resource.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>Description string, not more than 2048 bytes long, matching the URI address multi-line string pattern. A description of the catalog.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A map array of key-value pairs that define parameters and properties of the catalog.</p>
    pub parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The time at which the catalog was created.</p>
    pub create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time at which the catalog was last updated.</p>
    pub update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A <code>TargetRedshiftCatalog</code> object that describes a target catalog for database resource linking.</p>
    pub target_redshift_catalog: ::std::option::Option<crate::types::TargetRedshiftCatalog>,
    /// <p>A <code>FederatedCatalog</code> object that points to an entity outside the Glue Data Catalog.</p>
    pub federated_catalog: ::std::option::Option<crate::types::FederatedCatalog>,
    /// <p>A <code>CatalogProperties</code> object that specifies data lake access properties and other custom properties.</p>
    pub catalog_properties: ::std::option::Option<crate::types::CatalogPropertiesOutput>,
    /// <p>An array of <code>PrincipalPermissions</code> objects. Creates a set of default permissions on the table(s) for principals. Used by Amazon Web Services Lake Formation. Not used in the normal course of Glue operations.</p>
    pub create_table_default_permissions: ::std::option::Option<::std::vec::Vec<crate::types::PrincipalPermissions>>,
    /// <p>An array of <code>PrincipalPermissions</code> objects. Creates a set of default permissions on the database(s) for principals. Used by Amazon Web Services Lake Formation. Not used in the normal course of Glue operations.</p>
    pub create_database_default_permissions: ::std::option::Option<::std::vec::Vec<crate::types::PrincipalPermissions>>,
    /// <p>Allows third-party engines to access data in Amazon S3 locations that are registered with Lake Formation.</p>
    pub allow_full_table_external_data_access: ::std::option::Option<crate::types::AllowFullTableExternalDataAccessEnum>,
}
impl Catalog {
    /// <p>The ID of the catalog. To grant access to the default catalog, this field should not be provided.</p>
    pub fn catalog_id(&self) -> ::std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>The name of the catalog. Cannot be the same as the account ID.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) assigned to the catalog resource.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>Description string, not more than 2048 bytes long, matching the URI address multi-line string pattern. A description of the catalog.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A map array of key-value pairs that define parameters and properties of the catalog.</p>
    pub fn parameters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.parameters.as_ref()
    }
    /// <p>The time at which the catalog was created.</p>
    pub fn create_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.create_time.as_ref()
    }
    /// <p>The time at which the catalog was last updated.</p>
    pub fn update_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
    /// <p>A <code>TargetRedshiftCatalog</code> object that describes a target catalog for database resource linking.</p>
    pub fn target_redshift_catalog(&self) -> ::std::option::Option<&crate::types::TargetRedshiftCatalog> {
        self.target_redshift_catalog.as_ref()
    }
    /// <p>A <code>FederatedCatalog</code> object that points to an entity outside the Glue Data Catalog.</p>
    pub fn federated_catalog(&self) -> ::std::option::Option<&crate::types::FederatedCatalog> {
        self.federated_catalog.as_ref()
    }
    /// <p>A <code>CatalogProperties</code> object that specifies data lake access properties and other custom properties.</p>
    pub fn catalog_properties(&self) -> ::std::option::Option<&crate::types::CatalogPropertiesOutput> {
        self.catalog_properties.as_ref()
    }
    /// <p>An array of <code>PrincipalPermissions</code> objects. Creates a set of default permissions on the table(s) for principals. Used by Amazon Web Services Lake Formation. Not used in the normal course of Glue operations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.create_table_default_permissions.is_none()`.
    pub fn create_table_default_permissions(&self) -> &[crate::types::PrincipalPermissions] {
        self.create_table_default_permissions.as_deref().unwrap_or_default()
    }
    /// <p>An array of <code>PrincipalPermissions</code> objects. Creates a set of default permissions on the database(s) for principals. Used by Amazon Web Services Lake Formation. Not used in the normal course of Glue operations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.create_database_default_permissions.is_none()`.
    pub fn create_database_default_permissions(&self) -> &[crate::types::PrincipalPermissions] {
        self.create_database_default_permissions.as_deref().unwrap_or_default()
    }
    /// <p>Allows third-party engines to access data in Amazon S3 locations that are registered with Lake Formation.</p>
    pub fn allow_full_table_external_data_access(&self) -> ::std::option::Option<&crate::types::AllowFullTableExternalDataAccessEnum> {
        self.allow_full_table_external_data_access.as_ref()
    }
}
impl Catalog {
    /// Creates a new builder-style object to manufacture [`Catalog`](crate::types::Catalog).
    pub fn builder() -> crate::types::builders::CatalogBuilder {
        crate::types::builders::CatalogBuilder::default()
    }
}

/// A builder for [`Catalog`](crate::types::Catalog).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CatalogBuilder {
    pub(crate) catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) target_redshift_catalog: ::std::option::Option<crate::types::TargetRedshiftCatalog>,
    pub(crate) federated_catalog: ::std::option::Option<crate::types::FederatedCatalog>,
    pub(crate) catalog_properties: ::std::option::Option<crate::types::CatalogPropertiesOutput>,
    pub(crate) create_table_default_permissions: ::std::option::Option<::std::vec::Vec<crate::types::PrincipalPermissions>>,
    pub(crate) create_database_default_permissions: ::std::option::Option<::std::vec::Vec<crate::types::PrincipalPermissions>>,
    pub(crate) allow_full_table_external_data_access: ::std::option::Option<crate::types::AllowFullTableExternalDataAccessEnum>,
}
impl CatalogBuilder {
    /// <p>The ID of the catalog. To grant access to the default catalog, this field should not be provided.</p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the catalog. To grant access to the default catalog, this field should not be provided.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The ID of the catalog. To grant access to the default catalog, this field should not be provided.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_id
    }
    /// <p>The name of the catalog. Cannot be the same as the account ID.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the catalog. Cannot be the same as the account ID.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the catalog. Cannot be the same as the account ID.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) assigned to the catalog resource.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) assigned to the catalog resource.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) assigned to the catalog resource.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p>Description string, not more than 2048 bytes long, matching the URI address multi-line string pattern. A description of the catalog.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Description string, not more than 2048 bytes long, matching the URI address multi-line string pattern. A description of the catalog.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Description string, not more than 2048 bytes long, matching the URI address multi-line string pattern. A description of the catalog.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>A map array of key-value pairs that define parameters and properties of the catalog.</p>
    pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map array of key-value pairs that define parameters and properties of the catalog.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>A map array of key-value pairs that define parameters and properties of the catalog.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.parameters
    }
    /// <p>The time at which the catalog was created.</p>
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the catalog was created.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time at which the catalog was created.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The time at which the catalog was last updated.</p>
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the catalog was last updated.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The time at which the catalog was last updated.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// <p>A <code>TargetRedshiftCatalog</code> object that describes a target catalog for database resource linking.</p>
    pub fn target_redshift_catalog(mut self, input: crate::types::TargetRedshiftCatalog) -> Self {
        self.target_redshift_catalog = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>TargetRedshiftCatalog</code> object that describes a target catalog for database resource linking.</p>
    pub fn set_target_redshift_catalog(mut self, input: ::std::option::Option<crate::types::TargetRedshiftCatalog>) -> Self {
        self.target_redshift_catalog = input;
        self
    }
    /// <p>A <code>TargetRedshiftCatalog</code> object that describes a target catalog for database resource linking.</p>
    pub fn get_target_redshift_catalog(&self) -> &::std::option::Option<crate::types::TargetRedshiftCatalog> {
        &self.target_redshift_catalog
    }
    /// <p>A <code>FederatedCatalog</code> object that points to an entity outside the Glue Data Catalog.</p>
    pub fn federated_catalog(mut self, input: crate::types::FederatedCatalog) -> Self {
        self.federated_catalog = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>FederatedCatalog</code> object that points to an entity outside the Glue Data Catalog.</p>
    pub fn set_federated_catalog(mut self, input: ::std::option::Option<crate::types::FederatedCatalog>) -> Self {
        self.federated_catalog = input;
        self
    }
    /// <p>A <code>FederatedCatalog</code> object that points to an entity outside the Glue Data Catalog.</p>
    pub fn get_federated_catalog(&self) -> &::std::option::Option<crate::types::FederatedCatalog> {
        &self.federated_catalog
    }
    /// <p>A <code>CatalogProperties</code> object that specifies data lake access properties and other custom properties.</p>
    pub fn catalog_properties(mut self, input: crate::types::CatalogPropertiesOutput) -> Self {
        self.catalog_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>CatalogProperties</code> object that specifies data lake access properties and other custom properties.</p>
    pub fn set_catalog_properties(mut self, input: ::std::option::Option<crate::types::CatalogPropertiesOutput>) -> Self {
        self.catalog_properties = input;
        self
    }
    /// <p>A <code>CatalogProperties</code> object that specifies data lake access properties and other custom properties.</p>
    pub fn get_catalog_properties(&self) -> &::std::option::Option<crate::types::CatalogPropertiesOutput> {
        &self.catalog_properties
    }
    /// Appends an item to `create_table_default_permissions`.
    ///
    /// To override the contents of this collection use [`set_create_table_default_permissions`](Self::set_create_table_default_permissions).
    ///
    /// <p>An array of <code>PrincipalPermissions</code> objects. Creates a set of default permissions on the table(s) for principals. Used by Amazon Web Services Lake Formation. Not used in the normal course of Glue operations.</p>
    pub fn create_table_default_permissions(mut self, input: crate::types::PrincipalPermissions) -> Self {
        let mut v = self.create_table_default_permissions.unwrap_or_default();
        v.push(input);
        self.create_table_default_permissions = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>PrincipalPermissions</code> objects. Creates a set of default permissions on the table(s) for principals. Used by Amazon Web Services Lake Formation. Not used in the normal course of Glue operations.</p>
    pub fn set_create_table_default_permissions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PrincipalPermissions>>) -> Self {
        self.create_table_default_permissions = input;
        self
    }
    /// <p>An array of <code>PrincipalPermissions</code> objects. Creates a set of default permissions on the table(s) for principals. Used by Amazon Web Services Lake Formation. Not used in the normal course of Glue operations.</p>
    pub fn get_create_table_default_permissions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PrincipalPermissions>> {
        &self.create_table_default_permissions
    }
    /// Appends an item to `create_database_default_permissions`.
    ///
    /// To override the contents of this collection use [`set_create_database_default_permissions`](Self::set_create_database_default_permissions).
    ///
    /// <p>An array of <code>PrincipalPermissions</code> objects. Creates a set of default permissions on the database(s) for principals. Used by Amazon Web Services Lake Formation. Not used in the normal course of Glue operations.</p>
    pub fn create_database_default_permissions(mut self, input: crate::types::PrincipalPermissions) -> Self {
        let mut v = self.create_database_default_permissions.unwrap_or_default();
        v.push(input);
        self.create_database_default_permissions = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>PrincipalPermissions</code> objects. Creates a set of default permissions on the database(s) for principals. Used by Amazon Web Services Lake Formation. Not used in the normal course of Glue operations.</p>
    pub fn set_create_database_default_permissions(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::PrincipalPermissions>>,
    ) -> Self {
        self.create_database_default_permissions = input;
        self
    }
    /// <p>An array of <code>PrincipalPermissions</code> objects. Creates a set of default permissions on the database(s) for principals. Used by Amazon Web Services Lake Formation. Not used in the normal course of Glue operations.</p>
    pub fn get_create_database_default_permissions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PrincipalPermissions>> {
        &self.create_database_default_permissions
    }
    /// <p>Allows third-party engines to access data in Amazon S3 locations that are registered with Lake Formation.</p>
    pub fn allow_full_table_external_data_access(mut self, input: crate::types::AllowFullTableExternalDataAccessEnum) -> Self {
        self.allow_full_table_external_data_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allows third-party engines to access data in Amazon S3 locations that are registered with Lake Formation.</p>
    pub fn set_allow_full_table_external_data_access(
        mut self,
        input: ::std::option::Option<crate::types::AllowFullTableExternalDataAccessEnum>,
    ) -> Self {
        self.allow_full_table_external_data_access = input;
        self
    }
    /// <p>Allows third-party engines to access data in Amazon S3 locations that are registered with Lake Formation.</p>
    pub fn get_allow_full_table_external_data_access(&self) -> &::std::option::Option<crate::types::AllowFullTableExternalDataAccessEnum> {
        &self.allow_full_table_external_data_access
    }
    /// Consumes the builder and constructs a [`Catalog`](crate::types::Catalog).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::CatalogBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::Catalog, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Catalog {
            catalog_id: self.catalog_id,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building Catalog",
                )
            })?,
            resource_arn: self.resource_arn,
            description: self.description,
            parameters: self.parameters,
            create_time: self.create_time,
            update_time: self.update_time,
            target_redshift_catalog: self.target_redshift_catalog,
            federated_catalog: self.federated_catalog,
            catalog_properties: self.catalog_properties,
            create_table_default_permissions: self.create_table_default_permissions,
            create_database_default_permissions: self.create_database_default_permissions,
            allow_full_table_external_data_access: self.allow_full_table_external_data_access,
        })
    }
}
