// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for a compaction optimizer. This configuration defines how data files in your table will be compacted to improve query performance and reduce storage costs.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CompactionConfiguration {
    /// <p>The configuration for an Iceberg compaction optimizer.</p>
    pub iceberg_configuration: ::std::option::Option<crate::types::IcebergCompactionConfiguration>,
}
impl CompactionConfiguration {
    /// <p>The configuration for an Iceberg compaction optimizer.</p>
    pub fn iceberg_configuration(&self) -> ::std::option::Option<&crate::types::IcebergCompactionConfiguration> {
        self.iceberg_configuration.as_ref()
    }
}
impl CompactionConfiguration {
    /// Creates a new builder-style object to manufacture [`CompactionConfiguration`](crate::types::CompactionConfiguration).
    pub fn builder() -> crate::types::builders::CompactionConfigurationBuilder {
        crate::types::builders::CompactionConfigurationBuilder::default()
    }
}

/// A builder for [`CompactionConfiguration`](crate::types::CompactionConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CompactionConfigurationBuilder {
    pub(crate) iceberg_configuration: ::std::option::Option<crate::types::IcebergCompactionConfiguration>,
}
impl CompactionConfigurationBuilder {
    /// <p>The configuration for an Iceberg compaction optimizer.</p>
    pub fn iceberg_configuration(mut self, input: crate::types::IcebergCompactionConfiguration) -> Self {
        self.iceberg_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for an Iceberg compaction optimizer.</p>
    pub fn set_iceberg_configuration(mut self, input: ::std::option::Option<crate::types::IcebergCompactionConfiguration>) -> Self {
        self.iceberg_configuration = input;
        self
    }
    /// <p>The configuration for an Iceberg compaction optimizer.</p>
    pub fn get_iceberg_configuration(&self) -> &::std::option::Option<crate::types::IcebergCompactionConfiguration> {
        &self.iceberg_configuration
    }
    /// Consumes the builder and constructs a [`CompactionConfiguration`](crate::types::CompactionConfiguration).
    pub fn build(self) -> crate::types::CompactionConfiguration {
        crate::types::CompactionConfiguration {
            iceberg_configuration: self.iceberg_configuration,
        }
    }
}
