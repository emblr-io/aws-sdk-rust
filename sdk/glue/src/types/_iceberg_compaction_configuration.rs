// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for an Iceberg compaction optimizer. This configuration defines parameters for optimizing the layout of data files in Iceberg tables.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IcebergCompactionConfiguration {
    /// <p>The strategy to use for compaction. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>binpack</code>: Combines small files into larger files, typically targeting sizes over 100MB, while applying any pending deletes. This is the recommended compaction strategy for most use cases.</p></li>
    /// <li>
    /// <p><code>sort</code>: Organizes data based on specified columns which are sorted hierarchically during compaction, improving query performance for filtered operations. This strategy is recommended when your queries frequently filter on specific columns. To use this strategy, you must first define a sort order in your Iceberg table properties using the <code>sort_order</code> table property.</p></li>
    /// <li>
    /// <p><code>z-order</code>: Optimizes data organization by blending multiple attributes into a single scalar value that can be used for sorting, allowing efficient querying across multiple dimensions. This strategy is recommended when you need to query data across multiple dimensions simultaneously. To use this strategy, you must first define a sort order in your Iceberg table properties using the <code>sort_order</code> table property.</p></li>
    /// </ul>
    /// <p>If an input is not provided, the default value 'binpack' will be used.</p>
    pub strategy: ::std::option::Option<crate::types::CompactionStrategy>,
}
impl IcebergCompactionConfiguration {
    /// <p>The strategy to use for compaction. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>binpack</code>: Combines small files into larger files, typically targeting sizes over 100MB, while applying any pending deletes. This is the recommended compaction strategy for most use cases.</p></li>
    /// <li>
    /// <p><code>sort</code>: Organizes data based on specified columns which are sorted hierarchically during compaction, improving query performance for filtered operations. This strategy is recommended when your queries frequently filter on specific columns. To use this strategy, you must first define a sort order in your Iceberg table properties using the <code>sort_order</code> table property.</p></li>
    /// <li>
    /// <p><code>z-order</code>: Optimizes data organization by blending multiple attributes into a single scalar value that can be used for sorting, allowing efficient querying across multiple dimensions. This strategy is recommended when you need to query data across multiple dimensions simultaneously. To use this strategy, you must first define a sort order in your Iceberg table properties using the <code>sort_order</code> table property.</p></li>
    /// </ul>
    /// <p>If an input is not provided, the default value 'binpack' will be used.</p>
    pub fn strategy(&self) -> ::std::option::Option<&crate::types::CompactionStrategy> {
        self.strategy.as_ref()
    }
}
impl IcebergCompactionConfiguration {
    /// Creates a new builder-style object to manufacture [`IcebergCompactionConfiguration`](crate::types::IcebergCompactionConfiguration).
    pub fn builder() -> crate::types::builders::IcebergCompactionConfigurationBuilder {
        crate::types::builders::IcebergCompactionConfigurationBuilder::default()
    }
}

/// A builder for [`IcebergCompactionConfiguration`](crate::types::IcebergCompactionConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IcebergCompactionConfigurationBuilder {
    pub(crate) strategy: ::std::option::Option<crate::types::CompactionStrategy>,
}
impl IcebergCompactionConfigurationBuilder {
    /// <p>The strategy to use for compaction. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>binpack</code>: Combines small files into larger files, typically targeting sizes over 100MB, while applying any pending deletes. This is the recommended compaction strategy for most use cases.</p></li>
    /// <li>
    /// <p><code>sort</code>: Organizes data based on specified columns which are sorted hierarchically during compaction, improving query performance for filtered operations. This strategy is recommended when your queries frequently filter on specific columns. To use this strategy, you must first define a sort order in your Iceberg table properties using the <code>sort_order</code> table property.</p></li>
    /// <li>
    /// <p><code>z-order</code>: Optimizes data organization by blending multiple attributes into a single scalar value that can be used for sorting, allowing efficient querying across multiple dimensions. This strategy is recommended when you need to query data across multiple dimensions simultaneously. To use this strategy, you must first define a sort order in your Iceberg table properties using the <code>sort_order</code> table property.</p></li>
    /// </ul>
    /// <p>If an input is not provided, the default value 'binpack' will be used.</p>
    pub fn strategy(mut self, input: crate::types::CompactionStrategy) -> Self {
        self.strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The strategy to use for compaction. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>binpack</code>: Combines small files into larger files, typically targeting sizes over 100MB, while applying any pending deletes. This is the recommended compaction strategy for most use cases.</p></li>
    /// <li>
    /// <p><code>sort</code>: Organizes data based on specified columns which are sorted hierarchically during compaction, improving query performance for filtered operations. This strategy is recommended when your queries frequently filter on specific columns. To use this strategy, you must first define a sort order in your Iceberg table properties using the <code>sort_order</code> table property.</p></li>
    /// <li>
    /// <p><code>z-order</code>: Optimizes data organization by blending multiple attributes into a single scalar value that can be used for sorting, allowing efficient querying across multiple dimensions. This strategy is recommended when you need to query data across multiple dimensions simultaneously. To use this strategy, you must first define a sort order in your Iceberg table properties using the <code>sort_order</code> table property.</p></li>
    /// </ul>
    /// <p>If an input is not provided, the default value 'binpack' will be used.</p>
    pub fn set_strategy(mut self, input: ::std::option::Option<crate::types::CompactionStrategy>) -> Self {
        self.strategy = input;
        self
    }
    /// <p>The strategy to use for compaction. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>binpack</code>: Combines small files into larger files, typically targeting sizes over 100MB, while applying any pending deletes. This is the recommended compaction strategy for most use cases.</p></li>
    /// <li>
    /// <p><code>sort</code>: Organizes data based on specified columns which are sorted hierarchically during compaction, improving query performance for filtered operations. This strategy is recommended when your queries frequently filter on specific columns. To use this strategy, you must first define a sort order in your Iceberg table properties using the <code>sort_order</code> table property.</p></li>
    /// <li>
    /// <p><code>z-order</code>: Optimizes data organization by blending multiple attributes into a single scalar value that can be used for sorting, allowing efficient querying across multiple dimensions. This strategy is recommended when you need to query data across multiple dimensions simultaneously. To use this strategy, you must first define a sort order in your Iceberg table properties using the <code>sort_order</code> table property.</p></li>
    /// </ul>
    /// <p>If an input is not provided, the default value 'binpack' will be used.</p>
    pub fn get_strategy(&self) -> &::std::option::Option<crate::types::CompactionStrategy> {
        &self.strategy
    }
    /// Consumes the builder and constructs a [`IcebergCompactionConfiguration`](crate::types::IcebergCompactionConfiguration).
    pub fn build(self) -> crate::types::IcebergCompactionConfiguration {
        crate::types::IcebergCompactionConfiguration { strategy: self.strategy }
    }
}
