// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A table that points to an entity outside the Glue Data Catalog.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FederatedTable {
    /// <p>A unique identifier for the federated table.</p>
    pub identifier: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for the federated database.</p>
    pub database_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The name of the connection to the external metastore.</p>
    pub connection_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of connection used to access the federated table, specifying the protocol or method for connecting to the external data source.</p>
    pub connection_type: ::std::option::Option<::std::string::String>,
}
impl FederatedTable {
    /// <p>A unique identifier for the federated table.</p>
    pub fn identifier(&self) -> ::std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>A unique identifier for the federated database.</p>
    pub fn database_identifier(&self) -> ::std::option::Option<&str> {
        self.database_identifier.as_deref()
    }
    /// <p>The name of the connection to the external metastore.</p>
    pub fn connection_name(&self) -> ::std::option::Option<&str> {
        self.connection_name.as_deref()
    }
    /// <p>The type of connection used to access the federated table, specifying the protocol or method for connecting to the external data source.</p>
    pub fn connection_type(&self) -> ::std::option::Option<&str> {
        self.connection_type.as_deref()
    }
}
impl FederatedTable {
    /// Creates a new builder-style object to manufacture [`FederatedTable`](crate::types::FederatedTable).
    pub fn builder() -> crate::types::builders::FederatedTableBuilder {
        crate::types::builders::FederatedTableBuilder::default()
    }
}

/// A builder for [`FederatedTable`](crate::types::FederatedTable).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FederatedTableBuilder {
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) database_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) connection_name: ::std::option::Option<::std::string::String>,
    pub(crate) connection_type: ::std::option::Option<::std::string::String>,
}
impl FederatedTableBuilder {
    /// <p>A unique identifier for the federated table.</p>
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the federated table.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>A unique identifier for the federated table.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>A unique identifier for the federated database.</p>
    pub fn database_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the federated database.</p>
    pub fn set_database_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_identifier = input;
        self
    }
    /// <p>A unique identifier for the federated database.</p>
    pub fn get_database_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_identifier
    }
    /// <p>The name of the connection to the external metastore.</p>
    pub fn connection_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the connection to the external metastore.</p>
    pub fn set_connection_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_name = input;
        self
    }
    /// <p>The name of the connection to the external metastore.</p>
    pub fn get_connection_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_name
    }
    /// <p>The type of connection used to access the federated table, specifying the protocol or method for connecting to the external data source.</p>
    pub fn connection_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of connection used to access the federated table, specifying the protocol or method for connecting to the external data source.</p>
    pub fn set_connection_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_type = input;
        self
    }
    /// <p>The type of connection used to access the federated table, specifying the protocol or method for connecting to the external data source.</p>
    pub fn get_connection_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_type
    }
    /// Consumes the builder and constructs a [`FederatedTable`](crate::types::FederatedTable).
    pub fn build(self) -> crate::types::FederatedTable {
        crate::types::FederatedTable {
            identifier: self.identifier,
            database_identifier: self.database_identifier,
            connection_name: self.connection_name,
            connection_type: self.connection_type,
        }
    }
}
