// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure containing details for creating or updating an Glue view.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ViewDefinitionInput {
    /// <p>You can set this flag as true to instruct the engine not to push user-provided operations into the logical plan of the view during query planning. However, setting this flag does not guarantee that the engine will comply. Refer to the engine's documentation to understand the guarantees provided, if any.</p>
    pub is_protected: ::std::option::Option<bool>,
    /// <p>The definer of a view in SQL.</p>
    pub definer: ::std::option::Option<::std::string::String>,
    /// <p>A list of structures that contains the dialect of the view, and the query that defines the view.</p>
    pub representations: ::std::option::Option<::std::vec::Vec<crate::types::ViewRepresentationInput>>,
    /// <p>A list of base table ARNs that make up the view.</p>
    pub sub_objects: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ViewDefinitionInput {
    /// <p>You can set this flag as true to instruct the engine not to push user-provided operations into the logical plan of the view during query planning. However, setting this flag does not guarantee that the engine will comply. Refer to the engine's documentation to understand the guarantees provided, if any.</p>
    pub fn is_protected(&self) -> ::std::option::Option<bool> {
        self.is_protected
    }
    /// <p>The definer of a view in SQL.</p>
    pub fn definer(&self) -> ::std::option::Option<&str> {
        self.definer.as_deref()
    }
    /// <p>A list of structures that contains the dialect of the view, and the query that defines the view.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.representations.is_none()`.
    pub fn representations(&self) -> &[crate::types::ViewRepresentationInput] {
        self.representations.as_deref().unwrap_or_default()
    }
    /// <p>A list of base table ARNs that make up the view.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sub_objects.is_none()`.
    pub fn sub_objects(&self) -> &[::std::string::String] {
        self.sub_objects.as_deref().unwrap_or_default()
    }
}
impl ViewDefinitionInput {
    /// Creates a new builder-style object to manufacture [`ViewDefinitionInput`](crate::types::ViewDefinitionInput).
    pub fn builder() -> crate::types::builders::ViewDefinitionInputBuilder {
        crate::types::builders::ViewDefinitionInputBuilder::default()
    }
}

/// A builder for [`ViewDefinitionInput`](crate::types::ViewDefinitionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ViewDefinitionInputBuilder {
    pub(crate) is_protected: ::std::option::Option<bool>,
    pub(crate) definer: ::std::option::Option<::std::string::String>,
    pub(crate) representations: ::std::option::Option<::std::vec::Vec<crate::types::ViewRepresentationInput>>,
    pub(crate) sub_objects: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ViewDefinitionInputBuilder {
    /// <p>You can set this flag as true to instruct the engine not to push user-provided operations into the logical plan of the view during query planning. However, setting this flag does not guarantee that the engine will comply. Refer to the engine's documentation to understand the guarantees provided, if any.</p>
    pub fn is_protected(mut self, input: bool) -> Self {
        self.is_protected = ::std::option::Option::Some(input);
        self
    }
    /// <p>You can set this flag as true to instruct the engine not to push user-provided operations into the logical plan of the view during query planning. However, setting this flag does not guarantee that the engine will comply. Refer to the engine's documentation to understand the guarantees provided, if any.</p>
    pub fn set_is_protected(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_protected = input;
        self
    }
    /// <p>You can set this flag as true to instruct the engine not to push user-provided operations into the logical plan of the view during query planning. However, setting this flag does not guarantee that the engine will comply. Refer to the engine's documentation to understand the guarantees provided, if any.</p>
    pub fn get_is_protected(&self) -> &::std::option::Option<bool> {
        &self.is_protected
    }
    /// <p>The definer of a view in SQL.</p>
    pub fn definer(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.definer = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The definer of a view in SQL.</p>
    pub fn set_definer(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.definer = input;
        self
    }
    /// <p>The definer of a view in SQL.</p>
    pub fn get_definer(&self) -> &::std::option::Option<::std::string::String> {
        &self.definer
    }
    /// Appends an item to `representations`.
    ///
    /// To override the contents of this collection use [`set_representations`](Self::set_representations).
    ///
    /// <p>A list of structures that contains the dialect of the view, and the query that defines the view.</p>
    pub fn representations(mut self, input: crate::types::ViewRepresentationInput) -> Self {
        let mut v = self.representations.unwrap_or_default();
        v.push(input);
        self.representations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of structures that contains the dialect of the view, and the query that defines the view.</p>
    pub fn set_representations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ViewRepresentationInput>>) -> Self {
        self.representations = input;
        self
    }
    /// <p>A list of structures that contains the dialect of the view, and the query that defines the view.</p>
    pub fn get_representations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ViewRepresentationInput>> {
        &self.representations
    }
    /// Appends an item to `sub_objects`.
    ///
    /// To override the contents of this collection use [`set_sub_objects`](Self::set_sub_objects).
    ///
    /// <p>A list of base table ARNs that make up the view.</p>
    pub fn sub_objects(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.sub_objects.unwrap_or_default();
        v.push(input.into());
        self.sub_objects = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of base table ARNs that make up the view.</p>
    pub fn set_sub_objects(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.sub_objects = input;
        self
    }
    /// <p>A list of base table ARNs that make up the view.</p>
    pub fn get_sub_objects(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.sub_objects
    }
    /// Consumes the builder and constructs a [`ViewDefinitionInput`](crate::types::ViewDefinitionInput).
    pub fn build(self) -> crate::types::ViewDefinitionInput {
        crate::types::ViewDefinitionInput {
            is_protected: self.is_protected,
            definer: self.definer,
            representations: self.representations,
            sub_objects: self.sub_objects,
        }
    }
}
