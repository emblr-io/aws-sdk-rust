// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information about a statistic.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct StatisticSummary {
    /// <p>The Statistic ID.</p>
    pub statistic_id: ::std::option::Option<::std::string::String>,
    /// <p>The Profile ID.</p>
    pub profile_id: ::std::option::Option<::std::string::String>,
    /// <p>The Run Identifier</p>
    pub run_identifier: ::std::option::Option<crate::types::RunIdentifier>,
    /// <p>The name of the statistic.</p>
    pub statistic_name: ::std::option::Option<::std::string::String>,
    /// <p>The value of the statistic.</p>
    pub double_value: f64,
    /// <p>The evaluation level of the statistic. Possible values: <code>Dataset</code>, <code>Column</code>, <code>Multicolumn</code>.</p>
    pub evaluation_level: ::std::option::Option<crate::types::StatisticEvaluationLevel>,
    /// <p>The list of columns referenced by the statistic.</p>
    pub columns_referenced: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The list of datasets referenced by the statistic.</p>
    pub referenced_datasets: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A <code>StatisticPropertiesMap</code>, which contains a <code>NameString</code> and <code>DescriptionString</code></p>
    pub statistic_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The timestamp when the statistic was recorded.</p>
    pub recorded_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The inclusion annotation for the statistic.</p>
    pub inclusion_annotation: ::std::option::Option<crate::types::TimestampedInclusionAnnotation>,
}
impl StatisticSummary {
    /// <p>The Statistic ID.</p>
    pub fn statistic_id(&self) -> ::std::option::Option<&str> {
        self.statistic_id.as_deref()
    }
    /// <p>The Profile ID.</p>
    pub fn profile_id(&self) -> ::std::option::Option<&str> {
        self.profile_id.as_deref()
    }
    /// <p>The Run Identifier</p>
    pub fn run_identifier(&self) -> ::std::option::Option<&crate::types::RunIdentifier> {
        self.run_identifier.as_ref()
    }
    /// <p>The name of the statistic.</p>
    pub fn statistic_name(&self) -> ::std::option::Option<&str> {
        self.statistic_name.as_deref()
    }
    /// <p>The value of the statistic.</p>
    pub fn double_value(&self) -> f64 {
        self.double_value
    }
    /// <p>The evaluation level of the statistic. Possible values: <code>Dataset</code>, <code>Column</code>, <code>Multicolumn</code>.</p>
    pub fn evaluation_level(&self) -> ::std::option::Option<&crate::types::StatisticEvaluationLevel> {
        self.evaluation_level.as_ref()
    }
    /// <p>The list of columns referenced by the statistic.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.columns_referenced.is_none()`.
    pub fn columns_referenced(&self) -> &[::std::string::String] {
        self.columns_referenced.as_deref().unwrap_or_default()
    }
    /// <p>The list of datasets referenced by the statistic.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.referenced_datasets.is_none()`.
    pub fn referenced_datasets(&self) -> &[::std::string::String] {
        self.referenced_datasets.as_deref().unwrap_or_default()
    }
    /// <p>A <code>StatisticPropertiesMap</code>, which contains a <code>NameString</code> and <code>DescriptionString</code></p>
    pub fn statistic_properties(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.statistic_properties.as_ref()
    }
    /// <p>The timestamp when the statistic was recorded.</p>
    pub fn recorded_on(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.recorded_on.as_ref()
    }
    /// <p>The inclusion annotation for the statistic.</p>
    pub fn inclusion_annotation(&self) -> ::std::option::Option<&crate::types::TimestampedInclusionAnnotation> {
        self.inclusion_annotation.as_ref()
    }
}
impl ::std::fmt::Debug for StatisticSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StatisticSummary");
        formatter.field("statistic_id", &self.statistic_id);
        formatter.field("profile_id", &self.profile_id);
        formatter.field("run_identifier", &self.run_identifier);
        formatter.field("statistic_name", &self.statistic_name);
        formatter.field("double_value", &self.double_value);
        formatter.field("evaluation_level", &self.evaluation_level);
        formatter.field("columns_referenced", &self.columns_referenced);
        formatter.field("referenced_datasets", &self.referenced_datasets);
        formatter.field("statistic_properties", &"*** Sensitive Data Redacted ***");
        formatter.field("recorded_on", &self.recorded_on);
        formatter.field("inclusion_annotation", &self.inclusion_annotation);
        formatter.finish()
    }
}
impl StatisticSummary {
    /// Creates a new builder-style object to manufacture [`StatisticSummary`](crate::types::StatisticSummary).
    pub fn builder() -> crate::types::builders::StatisticSummaryBuilder {
        crate::types::builders::StatisticSummaryBuilder::default()
    }
}

/// A builder for [`StatisticSummary`](crate::types::StatisticSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct StatisticSummaryBuilder {
    pub(crate) statistic_id: ::std::option::Option<::std::string::String>,
    pub(crate) profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) run_identifier: ::std::option::Option<crate::types::RunIdentifier>,
    pub(crate) statistic_name: ::std::option::Option<::std::string::String>,
    pub(crate) double_value: ::std::option::Option<f64>,
    pub(crate) evaluation_level: ::std::option::Option<crate::types::StatisticEvaluationLevel>,
    pub(crate) columns_referenced: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) referenced_datasets: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) statistic_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) recorded_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) inclusion_annotation: ::std::option::Option<crate::types::TimestampedInclusionAnnotation>,
}
impl StatisticSummaryBuilder {
    /// <p>The Statistic ID.</p>
    pub fn statistic_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.statistic_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Statistic ID.</p>
    pub fn set_statistic_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.statistic_id = input;
        self
    }
    /// <p>The Statistic ID.</p>
    pub fn get_statistic_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.statistic_id
    }
    /// <p>The Profile ID.</p>
    pub fn profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Profile ID.</p>
    pub fn set_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_id = input;
        self
    }
    /// <p>The Profile ID.</p>
    pub fn get_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_id
    }
    /// <p>The Run Identifier</p>
    pub fn run_identifier(mut self, input: crate::types::RunIdentifier) -> Self {
        self.run_identifier = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Run Identifier</p>
    pub fn set_run_identifier(mut self, input: ::std::option::Option<crate::types::RunIdentifier>) -> Self {
        self.run_identifier = input;
        self
    }
    /// <p>The Run Identifier</p>
    pub fn get_run_identifier(&self) -> &::std::option::Option<crate::types::RunIdentifier> {
        &self.run_identifier
    }
    /// <p>The name of the statistic.</p>
    pub fn statistic_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.statistic_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the statistic.</p>
    pub fn set_statistic_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.statistic_name = input;
        self
    }
    /// <p>The name of the statistic.</p>
    pub fn get_statistic_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.statistic_name
    }
    /// <p>The value of the statistic.</p>
    pub fn double_value(mut self, input: f64) -> Self {
        self.double_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of the statistic.</p>
    pub fn set_double_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.double_value = input;
        self
    }
    /// <p>The value of the statistic.</p>
    pub fn get_double_value(&self) -> &::std::option::Option<f64> {
        &self.double_value
    }
    /// <p>The evaluation level of the statistic. Possible values: <code>Dataset</code>, <code>Column</code>, <code>Multicolumn</code>.</p>
    pub fn evaluation_level(mut self, input: crate::types::StatisticEvaluationLevel) -> Self {
        self.evaluation_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The evaluation level of the statistic. Possible values: <code>Dataset</code>, <code>Column</code>, <code>Multicolumn</code>.</p>
    pub fn set_evaluation_level(mut self, input: ::std::option::Option<crate::types::StatisticEvaluationLevel>) -> Self {
        self.evaluation_level = input;
        self
    }
    /// <p>The evaluation level of the statistic. Possible values: <code>Dataset</code>, <code>Column</code>, <code>Multicolumn</code>.</p>
    pub fn get_evaluation_level(&self) -> &::std::option::Option<crate::types::StatisticEvaluationLevel> {
        &self.evaluation_level
    }
    /// Appends an item to `columns_referenced`.
    ///
    /// To override the contents of this collection use [`set_columns_referenced`](Self::set_columns_referenced).
    ///
    /// <p>The list of columns referenced by the statistic.</p>
    pub fn columns_referenced(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.columns_referenced.unwrap_or_default();
        v.push(input.into());
        self.columns_referenced = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of columns referenced by the statistic.</p>
    pub fn set_columns_referenced(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.columns_referenced = input;
        self
    }
    /// <p>The list of columns referenced by the statistic.</p>
    pub fn get_columns_referenced(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.columns_referenced
    }
    /// Appends an item to `referenced_datasets`.
    ///
    /// To override the contents of this collection use [`set_referenced_datasets`](Self::set_referenced_datasets).
    ///
    /// <p>The list of datasets referenced by the statistic.</p>
    pub fn referenced_datasets(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.referenced_datasets.unwrap_or_default();
        v.push(input.into());
        self.referenced_datasets = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of datasets referenced by the statistic.</p>
    pub fn set_referenced_datasets(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.referenced_datasets = input;
        self
    }
    /// <p>The list of datasets referenced by the statistic.</p>
    pub fn get_referenced_datasets(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.referenced_datasets
    }
    /// Adds a key-value pair to `statistic_properties`.
    ///
    /// To override the contents of this collection use [`set_statistic_properties`](Self::set_statistic_properties).
    ///
    /// <p>A <code>StatisticPropertiesMap</code>, which contains a <code>NameString</code> and <code>DescriptionString</code></p>
    pub fn statistic_properties(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.statistic_properties.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.statistic_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A <code>StatisticPropertiesMap</code>, which contains a <code>NameString</code> and <code>DescriptionString</code></p>
    pub fn set_statistic_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.statistic_properties = input;
        self
    }
    /// <p>A <code>StatisticPropertiesMap</code>, which contains a <code>NameString</code> and <code>DescriptionString</code></p>
    pub fn get_statistic_properties(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.statistic_properties
    }
    /// <p>The timestamp when the statistic was recorded.</p>
    pub fn recorded_on(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.recorded_on = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the statistic was recorded.</p>
    pub fn set_recorded_on(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.recorded_on = input;
        self
    }
    /// <p>The timestamp when the statistic was recorded.</p>
    pub fn get_recorded_on(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.recorded_on
    }
    /// <p>The inclusion annotation for the statistic.</p>
    pub fn inclusion_annotation(mut self, input: crate::types::TimestampedInclusionAnnotation) -> Self {
        self.inclusion_annotation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The inclusion annotation for the statistic.</p>
    pub fn set_inclusion_annotation(mut self, input: ::std::option::Option<crate::types::TimestampedInclusionAnnotation>) -> Self {
        self.inclusion_annotation = input;
        self
    }
    /// <p>The inclusion annotation for the statistic.</p>
    pub fn get_inclusion_annotation(&self) -> &::std::option::Option<crate::types::TimestampedInclusionAnnotation> {
        &self.inclusion_annotation
    }
    /// Consumes the builder and constructs a [`StatisticSummary`](crate::types::StatisticSummary).
    pub fn build(self) -> crate::types::StatisticSummary {
        crate::types::StatisticSummary {
            statistic_id: self.statistic_id,
            profile_id: self.profile_id,
            run_identifier: self.run_identifier,
            statistic_name: self.statistic_name,
            double_value: self.double_value.unwrap_or_default(),
            evaluation_level: self.evaluation_level,
            columns_referenced: self.columns_referenced,
            referenced_datasets: self.referenced_datasets,
            statistic_properties: self.statistic_properties,
            recorded_on: self.recorded_on,
            inclusion_annotation: self.inclusion_annotation,
        }
    }
}
impl ::std::fmt::Debug for StatisticSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StatisticSummaryBuilder");
        formatter.field("statistic_id", &self.statistic_id);
        formatter.field("profile_id", &self.profile_id);
        formatter.field("run_identifier", &self.run_identifier);
        formatter.field("statistic_name", &self.statistic_name);
        formatter.field("double_value", &self.double_value);
        formatter.field("evaluation_level", &self.evaluation_level);
        formatter.field("columns_referenced", &self.columns_referenced);
        formatter.field("referenced_datasets", &self.referenced_datasets);
        formatter.field("statistic_properties", &"*** Sensitive Data Redacted ***");
        formatter.field("recorded_on", &self.recorded_on);
        formatter.field("inclusion_annotation", &self.inclusion_annotation);
        formatter.finish()
    }
}
