// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of metrics showing the total counts of processed rows and rules, including their pass/fail statistics based on row-level results.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataQualityAggregatedMetrics {
    /// <p>The total number of rows that were processed during the data quality evaluation.</p>
    pub total_rows_processed: ::std::option::Option<f64>,
    /// <p>The total number of rows that passed all applicable data quality rules.</p>
    pub total_rows_passed: ::std::option::Option<f64>,
    /// <p>The total number of rows that failed one or more data quality rules.</p>
    pub total_rows_failed: ::std::option::Option<f64>,
    /// <p>The total number of data quality rules that were evaluated.</p>
    pub total_rules_processed: ::std::option::Option<f64>,
    /// <p>The total number of data quality rules that passed their evaluation criteria.</p>
    pub total_rules_passed: ::std::option::Option<f64>,
    /// <p>The total number of data quality rules that failed their evaluation criteria.</p>
    pub total_rules_failed: ::std::option::Option<f64>,
}
impl DataQualityAggregatedMetrics {
    /// <p>The total number of rows that were processed during the data quality evaluation.</p>
    pub fn total_rows_processed(&self) -> ::std::option::Option<f64> {
        self.total_rows_processed
    }
    /// <p>The total number of rows that passed all applicable data quality rules.</p>
    pub fn total_rows_passed(&self) -> ::std::option::Option<f64> {
        self.total_rows_passed
    }
    /// <p>The total number of rows that failed one or more data quality rules.</p>
    pub fn total_rows_failed(&self) -> ::std::option::Option<f64> {
        self.total_rows_failed
    }
    /// <p>The total number of data quality rules that were evaluated.</p>
    pub fn total_rules_processed(&self) -> ::std::option::Option<f64> {
        self.total_rules_processed
    }
    /// <p>The total number of data quality rules that passed their evaluation criteria.</p>
    pub fn total_rules_passed(&self) -> ::std::option::Option<f64> {
        self.total_rules_passed
    }
    /// <p>The total number of data quality rules that failed their evaluation criteria.</p>
    pub fn total_rules_failed(&self) -> ::std::option::Option<f64> {
        self.total_rules_failed
    }
}
impl DataQualityAggregatedMetrics {
    /// Creates a new builder-style object to manufacture [`DataQualityAggregatedMetrics`](crate::types::DataQualityAggregatedMetrics).
    pub fn builder() -> crate::types::builders::DataQualityAggregatedMetricsBuilder {
        crate::types::builders::DataQualityAggregatedMetricsBuilder::default()
    }
}

/// A builder for [`DataQualityAggregatedMetrics`](crate::types::DataQualityAggregatedMetrics).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataQualityAggregatedMetricsBuilder {
    pub(crate) total_rows_processed: ::std::option::Option<f64>,
    pub(crate) total_rows_passed: ::std::option::Option<f64>,
    pub(crate) total_rows_failed: ::std::option::Option<f64>,
    pub(crate) total_rules_processed: ::std::option::Option<f64>,
    pub(crate) total_rules_passed: ::std::option::Option<f64>,
    pub(crate) total_rules_failed: ::std::option::Option<f64>,
}
impl DataQualityAggregatedMetricsBuilder {
    /// <p>The total number of rows that were processed during the data quality evaluation.</p>
    pub fn total_rows_processed(mut self, input: f64) -> Self {
        self.total_rows_processed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of rows that were processed during the data quality evaluation.</p>
    pub fn set_total_rows_processed(mut self, input: ::std::option::Option<f64>) -> Self {
        self.total_rows_processed = input;
        self
    }
    /// <p>The total number of rows that were processed during the data quality evaluation.</p>
    pub fn get_total_rows_processed(&self) -> &::std::option::Option<f64> {
        &self.total_rows_processed
    }
    /// <p>The total number of rows that passed all applicable data quality rules.</p>
    pub fn total_rows_passed(mut self, input: f64) -> Self {
        self.total_rows_passed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of rows that passed all applicable data quality rules.</p>
    pub fn set_total_rows_passed(mut self, input: ::std::option::Option<f64>) -> Self {
        self.total_rows_passed = input;
        self
    }
    /// <p>The total number of rows that passed all applicable data quality rules.</p>
    pub fn get_total_rows_passed(&self) -> &::std::option::Option<f64> {
        &self.total_rows_passed
    }
    /// <p>The total number of rows that failed one or more data quality rules.</p>
    pub fn total_rows_failed(mut self, input: f64) -> Self {
        self.total_rows_failed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of rows that failed one or more data quality rules.</p>
    pub fn set_total_rows_failed(mut self, input: ::std::option::Option<f64>) -> Self {
        self.total_rows_failed = input;
        self
    }
    /// <p>The total number of rows that failed one or more data quality rules.</p>
    pub fn get_total_rows_failed(&self) -> &::std::option::Option<f64> {
        &self.total_rows_failed
    }
    /// <p>The total number of data quality rules that were evaluated.</p>
    pub fn total_rules_processed(mut self, input: f64) -> Self {
        self.total_rules_processed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of data quality rules that were evaluated.</p>
    pub fn set_total_rules_processed(mut self, input: ::std::option::Option<f64>) -> Self {
        self.total_rules_processed = input;
        self
    }
    /// <p>The total number of data quality rules that were evaluated.</p>
    pub fn get_total_rules_processed(&self) -> &::std::option::Option<f64> {
        &self.total_rules_processed
    }
    /// <p>The total number of data quality rules that passed their evaluation criteria.</p>
    pub fn total_rules_passed(mut self, input: f64) -> Self {
        self.total_rules_passed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of data quality rules that passed their evaluation criteria.</p>
    pub fn set_total_rules_passed(mut self, input: ::std::option::Option<f64>) -> Self {
        self.total_rules_passed = input;
        self
    }
    /// <p>The total number of data quality rules that passed their evaluation criteria.</p>
    pub fn get_total_rules_passed(&self) -> &::std::option::Option<f64> {
        &self.total_rules_passed
    }
    /// <p>The total number of data quality rules that failed their evaluation criteria.</p>
    pub fn total_rules_failed(mut self, input: f64) -> Self {
        self.total_rules_failed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of data quality rules that failed their evaluation criteria.</p>
    pub fn set_total_rules_failed(mut self, input: ::std::option::Option<f64>) -> Self {
        self.total_rules_failed = input;
        self
    }
    /// <p>The total number of data quality rules that failed their evaluation criteria.</p>
    pub fn get_total_rules_failed(&self) -> &::std::option::Option<f64> {
        &self.total_rules_failed
    }
    /// Consumes the builder and constructs a [`DataQualityAggregatedMetrics`](crate::types::DataQualityAggregatedMetrics).
    pub fn build(self) -> crate::types::DataQualityAggregatedMetrics {
        crate::types::DataQualityAggregatedMetrics {
            total_rows_processed: self.total_rows_processed,
            total_rows_passed: self.total_rows_passed,
            total_rows_failed: self.total_rows_failed,
            total_rules_processed: self.total_rules_processed,
            total_rules_passed: self.total_rules_passed,
            total_rules_failed: self.total_rules_failed,
        }
    }
}
