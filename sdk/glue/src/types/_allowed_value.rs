// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing a value allowed for a property.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AllowedValue {
    /// <p>A description of the allowed value.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The value allowed for the property.</p>
    pub value: ::std::string::String,
}
impl AllowedValue {
    /// <p>A description of the allowed value.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The value allowed for the property.</p>
    pub fn value(&self) -> &str {
        use std::ops::Deref;
        self.value.deref()
    }
}
impl AllowedValue {
    /// Creates a new builder-style object to manufacture [`AllowedValue`](crate::types::AllowedValue).
    pub fn builder() -> crate::types::builders::AllowedValueBuilder {
        crate::types::builders::AllowedValueBuilder::default()
    }
}

/// A builder for [`AllowedValue`](crate::types::AllowedValue).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AllowedValueBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl AllowedValueBuilder {
    /// <p>A description of the allowed value.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the allowed value.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the allowed value.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The value allowed for the property.</p>
    /// This field is required.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value allowed for the property.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value allowed for the property.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`AllowedValue`](crate::types::AllowedValue).
    /// This method will fail if any of the following fields are not set:
    /// - [`value`](crate::types::builders::AllowedValueBuilder::value)
    pub fn build(self) -> ::std::result::Result<crate::types::AllowedValue, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AllowedValue {
            description: self.description,
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building AllowedValue",
                )
            })?,
        })
    }
}
