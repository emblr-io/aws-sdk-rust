// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A failed annotation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnnotationError {
    /// <p>The Profile ID for the failed annotation.</p>
    pub profile_id: ::std::option::Option<::std::string::String>,
    /// <p>The Statistic ID for the failed annotation.</p>
    pub statistic_id: ::std::option::Option<::std::string::String>,
    /// <p>The reason why the annotation failed.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
}
impl AnnotationError {
    /// <p>The Profile ID for the failed annotation.</p>
    pub fn profile_id(&self) -> ::std::option::Option<&str> {
        self.profile_id.as_deref()
    }
    /// <p>The Statistic ID for the failed annotation.</p>
    pub fn statistic_id(&self) -> ::std::option::Option<&str> {
        self.statistic_id.as_deref()
    }
    /// <p>The reason why the annotation failed.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
}
impl AnnotationError {
    /// Creates a new builder-style object to manufacture [`AnnotationError`](crate::types::AnnotationError).
    pub fn builder() -> crate::types::builders::AnnotationErrorBuilder {
        crate::types::builders::AnnotationErrorBuilder::default()
    }
}

/// A builder for [`AnnotationError`](crate::types::AnnotationError).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AnnotationErrorBuilder {
    pub(crate) profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) statistic_id: ::std::option::Option<::std::string::String>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
}
impl AnnotationErrorBuilder {
    /// <p>The Profile ID for the failed annotation.</p>
    pub fn profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Profile ID for the failed annotation.</p>
    pub fn set_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_id = input;
        self
    }
    /// <p>The Profile ID for the failed annotation.</p>
    pub fn get_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_id
    }
    /// <p>The Statistic ID for the failed annotation.</p>
    pub fn statistic_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.statistic_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Statistic ID for the failed annotation.</p>
    pub fn set_statistic_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.statistic_id = input;
        self
    }
    /// <p>The Statistic ID for the failed annotation.</p>
    pub fn get_statistic_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.statistic_id
    }
    /// <p>The reason why the annotation failed.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason why the annotation failed.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The reason why the annotation failed.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// Consumes the builder and constructs a [`AnnotationError`](crate::types::AnnotationError).
    pub fn build(self) -> crate::types::AnnotationError {
        crate::types::AnnotationError {
            profile_id: self.profile_id,
            statistic_id: self.statistic_id,
            failure_reason: self.failure_reason,
        }
    }
}
