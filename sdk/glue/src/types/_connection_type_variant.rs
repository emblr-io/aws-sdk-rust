// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a variant of a connection type in Glue Data Catalog. Connection type variants provide specific configurations and behaviors for different implementations of the same general connection type.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConnectionTypeVariant {
    /// <p>The unique identifier for the connection type variant. This name is used internally to identify the specific variant of a connection type.</p>
    pub connection_type_variant_name: ::std::option::Option<::std::string::String>,
    /// <p>The human-readable name for the connection type variant that is displayed in the Glue console.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>A detailed description of the connection type variant, including its purpose, use cases, and any specific configuration requirements.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The URL of the logo associated with a connection type variant.</p>
    pub logo_url: ::std::option::Option<::std::string::String>,
}
impl ConnectionTypeVariant {
    /// <p>The unique identifier for the connection type variant. This name is used internally to identify the specific variant of a connection type.</p>
    pub fn connection_type_variant_name(&self) -> ::std::option::Option<&str> {
        self.connection_type_variant_name.as_deref()
    }
    /// <p>The human-readable name for the connection type variant that is displayed in the Glue console.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>A detailed description of the connection type variant, including its purpose, use cases, and any specific configuration requirements.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The URL of the logo associated with a connection type variant.</p>
    pub fn logo_url(&self) -> ::std::option::Option<&str> {
        self.logo_url.as_deref()
    }
}
impl ConnectionTypeVariant {
    /// Creates a new builder-style object to manufacture [`ConnectionTypeVariant`](crate::types::ConnectionTypeVariant).
    pub fn builder() -> crate::types::builders::ConnectionTypeVariantBuilder {
        crate::types::builders::ConnectionTypeVariantBuilder::default()
    }
}

/// A builder for [`ConnectionTypeVariant`](crate::types::ConnectionTypeVariant).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConnectionTypeVariantBuilder {
    pub(crate) connection_type_variant_name: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) logo_url: ::std::option::Option<::std::string::String>,
}
impl ConnectionTypeVariantBuilder {
    /// <p>The unique identifier for the connection type variant. This name is used internally to identify the specific variant of a connection type.</p>
    pub fn connection_type_variant_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_type_variant_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the connection type variant. This name is used internally to identify the specific variant of a connection type.</p>
    pub fn set_connection_type_variant_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_type_variant_name = input;
        self
    }
    /// <p>The unique identifier for the connection type variant. This name is used internally to identify the specific variant of a connection type.</p>
    pub fn get_connection_type_variant_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_type_variant_name
    }
    /// <p>The human-readable name for the connection type variant that is displayed in the Glue console.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The human-readable name for the connection type variant that is displayed in the Glue console.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The human-readable name for the connection type variant that is displayed in the Glue console.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>A detailed description of the connection type variant, including its purpose, use cases, and any specific configuration requirements.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A detailed description of the connection type variant, including its purpose, use cases, and any specific configuration requirements.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A detailed description of the connection type variant, including its purpose, use cases, and any specific configuration requirements.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The URL of the logo associated with a connection type variant.</p>
    pub fn logo_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.logo_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of the logo associated with a connection type variant.</p>
    pub fn set_logo_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.logo_url = input;
        self
    }
    /// <p>The URL of the logo associated with a connection type variant.</p>
    pub fn get_logo_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.logo_url
    }
    /// Consumes the builder and constructs a [`ConnectionTypeVariant`](crate::types::ConnectionTypeVariant).
    pub fn build(self) -> crate::types::ConnectionTypeVariant {
        crate::types::ConnectionTypeVariant {
            connection_type_variant_name: self.connection_type_variant_name,
            display_name: self.display_name,
            description: self.description,
            logo_url: self.logo_url,
        }
    }
}
