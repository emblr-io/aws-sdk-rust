// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Property attributes that include configuration properties for the catalog resource.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CatalogPropertiesOutput {
    /// <p>A <code>DataLakeAccessProperties</code> object with input properties to configure data lake access for your catalog resource in the Glue Data Catalog.</p>
    pub data_lake_access_properties: ::std::option::Option<crate::types::DataLakeAccessPropertiesOutput>,
    /// <p>Additional key-value properties for the catalog, such as column statistics optimizations.</p>
    pub custom_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CatalogPropertiesOutput {
    /// <p>A <code>DataLakeAccessProperties</code> object with input properties to configure data lake access for your catalog resource in the Glue Data Catalog.</p>
    pub fn data_lake_access_properties(&self) -> ::std::option::Option<&crate::types::DataLakeAccessPropertiesOutput> {
        self.data_lake_access_properties.as_ref()
    }
    /// <p>Additional key-value properties for the catalog, such as column statistics optimizations.</p>
    pub fn custom_properties(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.custom_properties.as_ref()
    }
}
impl CatalogPropertiesOutput {
    /// Creates a new builder-style object to manufacture [`CatalogPropertiesOutput`](crate::types::CatalogPropertiesOutput).
    pub fn builder() -> crate::types::builders::CatalogPropertiesOutputBuilder {
        crate::types::builders::CatalogPropertiesOutputBuilder::default()
    }
}

/// A builder for [`CatalogPropertiesOutput`](crate::types::CatalogPropertiesOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CatalogPropertiesOutputBuilder {
    pub(crate) data_lake_access_properties: ::std::option::Option<crate::types::DataLakeAccessPropertiesOutput>,
    pub(crate) custom_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CatalogPropertiesOutputBuilder {
    /// <p>A <code>DataLakeAccessProperties</code> object with input properties to configure data lake access for your catalog resource in the Glue Data Catalog.</p>
    pub fn data_lake_access_properties(mut self, input: crate::types::DataLakeAccessPropertiesOutput) -> Self {
        self.data_lake_access_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>DataLakeAccessProperties</code> object with input properties to configure data lake access for your catalog resource in the Glue Data Catalog.</p>
    pub fn set_data_lake_access_properties(mut self, input: ::std::option::Option<crate::types::DataLakeAccessPropertiesOutput>) -> Self {
        self.data_lake_access_properties = input;
        self
    }
    /// <p>A <code>DataLakeAccessProperties</code> object with input properties to configure data lake access for your catalog resource in the Glue Data Catalog.</p>
    pub fn get_data_lake_access_properties(&self) -> &::std::option::Option<crate::types::DataLakeAccessPropertiesOutput> {
        &self.data_lake_access_properties
    }
    /// Adds a key-value pair to `custom_properties`.
    ///
    /// To override the contents of this collection use [`set_custom_properties`](Self::set_custom_properties).
    ///
    /// <p>Additional key-value properties for the catalog, such as column statistics optimizations.</p>
    pub fn custom_properties(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.custom_properties.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.custom_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Additional key-value properties for the catalog, such as column statistics optimizations.</p>
    pub fn set_custom_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.custom_properties = input;
        self
    }
    /// <p>Additional key-value properties for the catalog, such as column statistics optimizations.</p>
    pub fn get_custom_properties(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.custom_properties
    }
    /// Consumes the builder and constructs a [`CatalogPropertiesOutput`](crate::types::CatalogPropertiesOutput).
    pub fn build(self) -> crate::types::CatalogPropertiesOutput {
        crate::types::CatalogPropertiesOutput {
            data_lake_access_properties: self.data_lake_access_properties,
            custom_properties: self.custom_properties,
        }
    }
}
