// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains information for an analytical engine to validate a view, prior to persisting the view metadata. Used in the case of direct <code>UpdateTable</code> or <code>CreateTable</code> API calls.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ViewValidation {
    /// <p>The dialect of the query engine.</p>
    pub dialect: ::std::option::Option<crate::types::ViewDialect>,
    /// <p>The version of the dialect of the query engine. For example, 3.0.0.</p>
    pub dialect_version: ::std::option::Option<::std::string::String>,
    /// <p>The <code>SELECT</code> query that defines the view, as provided by the customer.</p>
    pub view_validation_text: ::std::option::Option<::std::string::String>,
    /// <p>The time of the last update.</p>
    pub update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The state of the validation.</p>
    pub state: ::std::option::Option<crate::types::ResourceState>,
    /// <p>An error associated with the validation.</p>
    pub error: ::std::option::Option<crate::types::ErrorDetail>,
}
impl ViewValidation {
    /// <p>The dialect of the query engine.</p>
    pub fn dialect(&self) -> ::std::option::Option<&crate::types::ViewDialect> {
        self.dialect.as_ref()
    }
    /// <p>The version of the dialect of the query engine. For example, 3.0.0.</p>
    pub fn dialect_version(&self) -> ::std::option::Option<&str> {
        self.dialect_version.as_deref()
    }
    /// <p>The <code>SELECT</code> query that defines the view, as provided by the customer.</p>
    pub fn view_validation_text(&self) -> ::std::option::Option<&str> {
        self.view_validation_text.as_deref()
    }
    /// <p>The time of the last update.</p>
    pub fn update_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
    /// <p>The state of the validation.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::ResourceState> {
        self.state.as_ref()
    }
    /// <p>An error associated with the validation.</p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::ErrorDetail> {
        self.error.as_ref()
    }
}
impl ViewValidation {
    /// Creates a new builder-style object to manufacture [`ViewValidation`](crate::types::ViewValidation).
    pub fn builder() -> crate::types::builders::ViewValidationBuilder {
        crate::types::builders::ViewValidationBuilder::default()
    }
}

/// A builder for [`ViewValidation`](crate::types::ViewValidation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ViewValidationBuilder {
    pub(crate) dialect: ::std::option::Option<crate::types::ViewDialect>,
    pub(crate) dialect_version: ::std::option::Option<::std::string::String>,
    pub(crate) view_validation_text: ::std::option::Option<::std::string::String>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) state: ::std::option::Option<crate::types::ResourceState>,
    pub(crate) error: ::std::option::Option<crate::types::ErrorDetail>,
}
impl ViewValidationBuilder {
    /// <p>The dialect of the query engine.</p>
    pub fn dialect(mut self, input: crate::types::ViewDialect) -> Self {
        self.dialect = ::std::option::Option::Some(input);
        self
    }
    /// <p>The dialect of the query engine.</p>
    pub fn set_dialect(mut self, input: ::std::option::Option<crate::types::ViewDialect>) -> Self {
        self.dialect = input;
        self
    }
    /// <p>The dialect of the query engine.</p>
    pub fn get_dialect(&self) -> &::std::option::Option<crate::types::ViewDialect> {
        &self.dialect
    }
    /// <p>The version of the dialect of the query engine. For example, 3.0.0.</p>
    pub fn dialect_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dialect_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the dialect of the query engine. For example, 3.0.0.</p>
    pub fn set_dialect_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dialect_version = input;
        self
    }
    /// <p>The version of the dialect of the query engine. For example, 3.0.0.</p>
    pub fn get_dialect_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.dialect_version
    }
    /// <p>The <code>SELECT</code> query that defines the view, as provided by the customer.</p>
    pub fn view_validation_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.view_validation_text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>SELECT</code> query that defines the view, as provided by the customer.</p>
    pub fn set_view_validation_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.view_validation_text = input;
        self
    }
    /// <p>The <code>SELECT</code> query that defines the view, as provided by the customer.</p>
    pub fn get_view_validation_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.view_validation_text
    }
    /// <p>The time of the last update.</p>
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time of the last update.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The time of the last update.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// <p>The state of the validation.</p>
    pub fn state(mut self, input: crate::types::ResourceState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the validation.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::ResourceState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the validation.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::ResourceState> {
        &self.state
    }
    /// <p>An error associated with the validation.</p>
    pub fn error(mut self, input: crate::types::ErrorDetail) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>An error associated with the validation.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::ErrorDetail>) -> Self {
        self.error = input;
        self
    }
    /// <p>An error associated with the validation.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::ErrorDetail> {
        &self.error
    }
    /// Consumes the builder and constructs a [`ViewValidation`](crate::types::ViewValidation).
    pub fn build(self) -> crate::types::ViewValidation {
        crate::types::ViewValidation {
            dialect: self.dialect,
            dialect_version: self.dialect_version,
            view_validation_text: self.view_validation_text,
            update_time: self.update_time,
            state: self.state,
            error: self.error,
        }
    }
}
