// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a single partition field within an Iceberg partition specification, including the source field, transformation function, partition name, and unique identifier.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IcebergPartitionField {
    /// <p>The identifier of the source field from the table schema that this partition field is based on.</p>
    pub source_id: i32,
    /// <p>The transformation function applied to the source field to create the partition, such as identity, bucket, truncate, year, month, day, or hour.</p>
    pub transform: ::std::string::String,
    /// <p>The name of the partition field as it will appear in the partitioned table structure.</p>
    pub name: ::std::string::String,
    /// <p>The unique identifier assigned to this partition field within the Iceberg table's partition specification.</p>
    pub field_id: i32,
}
impl IcebergPartitionField {
    /// <p>The identifier of the source field from the table schema that this partition field is based on.</p>
    pub fn source_id(&self) -> i32 {
        self.source_id
    }
    /// <p>The transformation function applied to the source field to create the partition, such as identity, bucket, truncate, year, month, day, or hour.</p>
    pub fn transform(&self) -> &str {
        use std::ops::Deref;
        self.transform.deref()
    }
    /// <p>The name of the partition field as it will appear in the partitioned table structure.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The unique identifier assigned to this partition field within the Iceberg table's partition specification.</p>
    pub fn field_id(&self) -> i32 {
        self.field_id
    }
}
impl IcebergPartitionField {
    /// Creates a new builder-style object to manufacture [`IcebergPartitionField`](crate::types::IcebergPartitionField).
    pub fn builder() -> crate::types::builders::IcebergPartitionFieldBuilder {
        crate::types::builders::IcebergPartitionFieldBuilder::default()
    }
}

/// A builder for [`IcebergPartitionField`](crate::types::IcebergPartitionField).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IcebergPartitionFieldBuilder {
    pub(crate) source_id: ::std::option::Option<i32>,
    pub(crate) transform: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) field_id: ::std::option::Option<i32>,
}
impl IcebergPartitionFieldBuilder {
    /// <p>The identifier of the source field from the table schema that this partition field is based on.</p>
    /// This field is required.
    pub fn source_id(mut self, input: i32) -> Self {
        self.source_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The identifier of the source field from the table schema that this partition field is based on.</p>
    pub fn set_source_id(mut self, input: ::std::option::Option<i32>) -> Self {
        self.source_id = input;
        self
    }
    /// <p>The identifier of the source field from the table schema that this partition field is based on.</p>
    pub fn get_source_id(&self) -> &::std::option::Option<i32> {
        &self.source_id
    }
    /// <p>The transformation function applied to the source field to create the partition, such as identity, bucket, truncate, year, month, day, or hour.</p>
    /// This field is required.
    pub fn transform(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.transform = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The transformation function applied to the source field to create the partition, such as identity, bucket, truncate, year, month, day, or hour.</p>
    pub fn set_transform(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.transform = input;
        self
    }
    /// <p>The transformation function applied to the source field to create the partition, such as identity, bucket, truncate, year, month, day, or hour.</p>
    pub fn get_transform(&self) -> &::std::option::Option<::std::string::String> {
        &self.transform
    }
    /// <p>The name of the partition field as it will appear in the partitioned table structure.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the partition field as it will appear in the partitioned table structure.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the partition field as it will appear in the partitioned table structure.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The unique identifier assigned to this partition field within the Iceberg table's partition specification.</p>
    pub fn field_id(mut self, input: i32) -> Self {
        self.field_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The unique identifier assigned to this partition field within the Iceberg table's partition specification.</p>
    pub fn set_field_id(mut self, input: ::std::option::Option<i32>) -> Self {
        self.field_id = input;
        self
    }
    /// <p>The unique identifier assigned to this partition field within the Iceberg table's partition specification.</p>
    pub fn get_field_id(&self) -> &::std::option::Option<i32> {
        &self.field_id
    }
    /// Consumes the builder and constructs a [`IcebergPartitionField`](crate::types::IcebergPartitionField).
    /// This method will fail if any of the following fields are not set:
    /// - [`transform`](crate::types::builders::IcebergPartitionFieldBuilder::transform)
    /// - [`name`](crate::types::builders::IcebergPartitionFieldBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::IcebergPartitionField, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IcebergPartitionField {
            source_id: self.source_id.unwrap_or_default(),
            transform: self.transform.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "transform",
                    "transform was not specified but it is required when building IcebergPartitionField",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building IcebergPartitionField",
                )
            })?,
            field_id: self.field_id.unwrap_or_default(),
        })
    }
}
