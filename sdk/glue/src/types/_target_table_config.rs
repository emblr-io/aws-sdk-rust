// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Properties used by the target leg to partition the data on the target.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TargetTableConfig {
    /// <p>Specifies how nested objects are flattened to top-level elements. Valid values are: "TOPLEVEL", "FULL", or "NOUNNEST".</p>
    pub unnest_spec: ::std::option::Option<crate::types::UnnestSpec>,
    /// <p>Determines the file layout on the target.</p>
    pub partition_spec: ::std::option::Option<::std::vec::Vec<crate::types::IntegrationPartition>>,
    /// <p>The optional name of a target table.</p>
    pub target_table_name: ::std::option::Option<::std::string::String>,
}
impl TargetTableConfig {
    /// <p>Specifies how nested objects are flattened to top-level elements. Valid values are: "TOPLEVEL", "FULL", or "NOUNNEST".</p>
    pub fn unnest_spec(&self) -> ::std::option::Option<&crate::types::UnnestSpec> {
        self.unnest_spec.as_ref()
    }
    /// <p>Determines the file layout on the target.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.partition_spec.is_none()`.
    pub fn partition_spec(&self) -> &[crate::types::IntegrationPartition] {
        self.partition_spec.as_deref().unwrap_or_default()
    }
    /// <p>The optional name of a target table.</p>
    pub fn target_table_name(&self) -> ::std::option::Option<&str> {
        self.target_table_name.as_deref()
    }
}
impl TargetTableConfig {
    /// Creates a new builder-style object to manufacture [`TargetTableConfig`](crate::types::TargetTableConfig).
    pub fn builder() -> crate::types::builders::TargetTableConfigBuilder {
        crate::types::builders::TargetTableConfigBuilder::default()
    }
}

/// A builder for [`TargetTableConfig`](crate::types::TargetTableConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TargetTableConfigBuilder {
    pub(crate) unnest_spec: ::std::option::Option<crate::types::UnnestSpec>,
    pub(crate) partition_spec: ::std::option::Option<::std::vec::Vec<crate::types::IntegrationPartition>>,
    pub(crate) target_table_name: ::std::option::Option<::std::string::String>,
}
impl TargetTableConfigBuilder {
    /// <p>Specifies how nested objects are flattened to top-level elements. Valid values are: "TOPLEVEL", "FULL", or "NOUNNEST".</p>
    pub fn unnest_spec(mut self, input: crate::types::UnnestSpec) -> Self {
        self.unnest_spec = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies how nested objects are flattened to top-level elements. Valid values are: "TOPLEVEL", "FULL", or "NOUNNEST".</p>
    pub fn set_unnest_spec(mut self, input: ::std::option::Option<crate::types::UnnestSpec>) -> Self {
        self.unnest_spec = input;
        self
    }
    /// <p>Specifies how nested objects are flattened to top-level elements. Valid values are: "TOPLEVEL", "FULL", or "NOUNNEST".</p>
    pub fn get_unnest_spec(&self) -> &::std::option::Option<crate::types::UnnestSpec> {
        &self.unnest_spec
    }
    /// Appends an item to `partition_spec`.
    ///
    /// To override the contents of this collection use [`set_partition_spec`](Self::set_partition_spec).
    ///
    /// <p>Determines the file layout on the target.</p>
    pub fn partition_spec(mut self, input: crate::types::IntegrationPartition) -> Self {
        let mut v = self.partition_spec.unwrap_or_default();
        v.push(input);
        self.partition_spec = ::std::option::Option::Some(v);
        self
    }
    /// <p>Determines the file layout on the target.</p>
    pub fn set_partition_spec(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IntegrationPartition>>) -> Self {
        self.partition_spec = input;
        self
    }
    /// <p>Determines the file layout on the target.</p>
    pub fn get_partition_spec(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IntegrationPartition>> {
        &self.partition_spec
    }
    /// <p>The optional name of a target table.</p>
    pub fn target_table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The optional name of a target table.</p>
    pub fn set_target_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_table_name = input;
        self
    }
    /// <p>The optional name of a target table.</p>
    pub fn get_target_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_table_name
    }
    /// Consumes the builder and constructs a [`TargetTableConfig`](crate::types::TargetTableConfig).
    pub fn build(self) -> crate::types::TargetTableConfig {
        crate::types::TargetTableConfig {
            unnest_spec: self.unnest_spec,
            partition_spec: self.partition_spec,
            target_table_name: self.target_table_name,
        }
    }
}
