// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Properties used by the source leg to process data from the source.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SourceTableConfig {
    /// <p>A list of fields used for column-level filtering. Currently unsupported.</p>
    pub fields: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A condition clause used for row-level filtering. Currently unsupported.</p>
    pub filter_predicate: ::std::option::Option<::std::string::String>,
    /// <p>Provide the primary key set for this table. Currently supported specifically for SAP <code>EntityOf</code> entities upon request. Contact Amazon Web Services Support to make this feature available.</p>
    pub primary_key: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Incremental pull timestamp-based field. Currently unsupported.</p>
    pub record_update_field: ::std::option::Option<::std::string::String>,
}
impl SourceTableConfig {
    /// <p>A list of fields used for column-level filtering. Currently unsupported.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.fields.is_none()`.
    pub fn fields(&self) -> &[::std::string::String] {
        self.fields.as_deref().unwrap_or_default()
    }
    /// <p>A condition clause used for row-level filtering. Currently unsupported.</p>
    pub fn filter_predicate(&self) -> ::std::option::Option<&str> {
        self.filter_predicate.as_deref()
    }
    /// <p>Provide the primary key set for this table. Currently supported specifically for SAP <code>EntityOf</code> entities upon request. Contact Amazon Web Services Support to make this feature available.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.primary_key.is_none()`.
    pub fn primary_key(&self) -> &[::std::string::String] {
        self.primary_key.as_deref().unwrap_or_default()
    }
    /// <p>Incremental pull timestamp-based field. Currently unsupported.</p>
    pub fn record_update_field(&self) -> ::std::option::Option<&str> {
        self.record_update_field.as_deref()
    }
}
impl SourceTableConfig {
    /// Creates a new builder-style object to manufacture [`SourceTableConfig`](crate::types::SourceTableConfig).
    pub fn builder() -> crate::types::builders::SourceTableConfigBuilder {
        crate::types::builders::SourceTableConfigBuilder::default()
    }
}

/// A builder for [`SourceTableConfig`](crate::types::SourceTableConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SourceTableConfigBuilder {
    pub(crate) fields: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) filter_predicate: ::std::option::Option<::std::string::String>,
    pub(crate) primary_key: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) record_update_field: ::std::option::Option<::std::string::String>,
}
impl SourceTableConfigBuilder {
    /// Appends an item to `fields`.
    ///
    /// To override the contents of this collection use [`set_fields`](Self::set_fields).
    ///
    /// <p>A list of fields used for column-level filtering. Currently unsupported.</p>
    pub fn fields(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.fields.unwrap_or_default();
        v.push(input.into());
        self.fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of fields used for column-level filtering. Currently unsupported.</p>
    pub fn set_fields(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.fields = input;
        self
    }
    /// <p>A list of fields used for column-level filtering. Currently unsupported.</p>
    pub fn get_fields(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.fields
    }
    /// <p>A condition clause used for row-level filtering. Currently unsupported.</p>
    pub fn filter_predicate(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter_predicate = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A condition clause used for row-level filtering. Currently unsupported.</p>
    pub fn set_filter_predicate(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter_predicate = input;
        self
    }
    /// <p>A condition clause used for row-level filtering. Currently unsupported.</p>
    pub fn get_filter_predicate(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter_predicate
    }
    /// Appends an item to `primary_key`.
    ///
    /// To override the contents of this collection use [`set_primary_key`](Self::set_primary_key).
    ///
    /// <p>Provide the primary key set for this table. Currently supported specifically for SAP <code>EntityOf</code> entities upon request. Contact Amazon Web Services Support to make this feature available.</p>
    pub fn primary_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.primary_key.unwrap_or_default();
        v.push(input.into());
        self.primary_key = ::std::option::Option::Some(v);
        self
    }
    /// <p>Provide the primary key set for this table. Currently supported specifically for SAP <code>EntityOf</code> entities upon request. Contact Amazon Web Services Support to make this feature available.</p>
    pub fn set_primary_key(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.primary_key = input;
        self
    }
    /// <p>Provide the primary key set for this table. Currently supported specifically for SAP <code>EntityOf</code> entities upon request. Contact Amazon Web Services Support to make this feature available.</p>
    pub fn get_primary_key(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.primary_key
    }
    /// <p>Incremental pull timestamp-based field. Currently unsupported.</p>
    pub fn record_update_field(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.record_update_field = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Incremental pull timestamp-based field. Currently unsupported.</p>
    pub fn set_record_update_field(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.record_update_field = input;
        self
    }
    /// <p>Incremental pull timestamp-based field. Currently unsupported.</p>
    pub fn get_record_update_field(&self) -> &::std::option::Option<::std::string::String> {
        &self.record_update_field
    }
    /// Consumes the builder and constructs a [`SourceTableConfig`](crate::types::SourceTableConfig).
    pub fn build(self) -> crate::types::SourceTableConfig {
        crate::types::SourceTableConfig {
            fields: self.fields,
            filter_predicate: self.filter_predicate,
            primary_key: self.primary_key,
            record_update_field: self.record_update_field,
        }
    }
}
