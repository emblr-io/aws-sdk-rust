// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure containing information about the state of an asynchronous change to a table.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TableStatus {
    /// <p>The ARN of the user who requested the asynchronous change.</p>
    pub requested_by: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the user to last manually alter the asynchronous change (requesting cancellation, etc).</p>
    pub updated_by: ::std::option::Option<::std::string::String>,
    /// <p>An ISO 8601 formatted date string indicating the time that the change was initiated.</p>
    pub request_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>An ISO 8601 formatted date string indicating the time that the state was last updated.</p>
    pub update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Indicates which action was called on the table, currently only <code>CREATE</code> or <code>UPDATE</code>.</p>
    pub action: ::std::option::Option<crate::types::ResourceAction>,
    /// <p>A generic status for the change in progress, such as QUEUED, IN_PROGRESS, SUCCESS, or FAILED.</p>
    pub state: ::std::option::Option<crate::types::ResourceState>,
    /// <p>An error that will only appear when the state is "FAILED". This is a parent level exception message, there may be different <code>Error</code>s for each dialect.</p>
    pub error: ::std::option::Option<crate::types::ErrorDetail>,
    /// <p>A <code>StatusDetails</code> object with information about the requested change.</p>
    pub details: ::std::option::Option<crate::types::StatusDetails>,
}
impl TableStatus {
    /// <p>The ARN of the user who requested the asynchronous change.</p>
    pub fn requested_by(&self) -> ::std::option::Option<&str> {
        self.requested_by.as_deref()
    }
    /// <p>The ARN of the user to last manually alter the asynchronous change (requesting cancellation, etc).</p>
    pub fn updated_by(&self) -> ::std::option::Option<&str> {
        self.updated_by.as_deref()
    }
    /// <p>An ISO 8601 formatted date string indicating the time that the change was initiated.</p>
    pub fn request_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.request_time.as_ref()
    }
    /// <p>An ISO 8601 formatted date string indicating the time that the state was last updated.</p>
    pub fn update_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
    /// <p>Indicates which action was called on the table, currently only <code>CREATE</code> or <code>UPDATE</code>.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::ResourceAction> {
        self.action.as_ref()
    }
    /// <p>A generic status for the change in progress, such as QUEUED, IN_PROGRESS, SUCCESS, or FAILED.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::ResourceState> {
        self.state.as_ref()
    }
    /// <p>An error that will only appear when the state is "FAILED". This is a parent level exception message, there may be different <code>Error</code>s for each dialect.</p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::ErrorDetail> {
        self.error.as_ref()
    }
    /// <p>A <code>StatusDetails</code> object with information about the requested change.</p>
    pub fn details(&self) -> ::std::option::Option<&crate::types::StatusDetails> {
        self.details.as_ref()
    }
}
impl TableStatus {
    /// Creates a new builder-style object to manufacture [`TableStatus`](crate::types::TableStatus).
    pub fn builder() -> crate::types::builders::TableStatusBuilder {
        crate::types::builders::TableStatusBuilder::default()
    }
}

/// A builder for [`TableStatus`](crate::types::TableStatus).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TableStatusBuilder {
    pub(crate) requested_by: ::std::option::Option<::std::string::String>,
    pub(crate) updated_by: ::std::option::Option<::std::string::String>,
    pub(crate) request_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) action: ::std::option::Option<crate::types::ResourceAction>,
    pub(crate) state: ::std::option::Option<crate::types::ResourceState>,
    pub(crate) error: ::std::option::Option<crate::types::ErrorDetail>,
    pub(crate) details: ::std::option::Option<crate::types::StatusDetails>,
}
impl TableStatusBuilder {
    /// <p>The ARN of the user who requested the asynchronous change.</p>
    pub fn requested_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.requested_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the user who requested the asynchronous change.</p>
    pub fn set_requested_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.requested_by = input;
        self
    }
    /// <p>The ARN of the user who requested the asynchronous change.</p>
    pub fn get_requested_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.requested_by
    }
    /// <p>The ARN of the user to last manually alter the asynchronous change (requesting cancellation, etc).</p>
    pub fn updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the user to last manually alter the asynchronous change (requesting cancellation, etc).</p>
    pub fn set_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_by = input;
        self
    }
    /// <p>The ARN of the user to last manually alter the asynchronous change (requesting cancellation, etc).</p>
    pub fn get_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_by
    }
    /// <p>An ISO 8601 formatted date string indicating the time that the change was initiated.</p>
    pub fn request_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.request_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>An ISO 8601 formatted date string indicating the time that the change was initiated.</p>
    pub fn set_request_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.request_time = input;
        self
    }
    /// <p>An ISO 8601 formatted date string indicating the time that the change was initiated.</p>
    pub fn get_request_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.request_time
    }
    /// <p>An ISO 8601 formatted date string indicating the time that the state was last updated.</p>
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>An ISO 8601 formatted date string indicating the time that the state was last updated.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>An ISO 8601 formatted date string indicating the time that the state was last updated.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// <p>Indicates which action was called on the table, currently only <code>CREATE</code> or <code>UPDATE</code>.</p>
    pub fn action(mut self, input: crate::types::ResourceAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates which action was called on the table, currently only <code>CREATE</code> or <code>UPDATE</code>.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::ResourceAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>Indicates which action was called on the table, currently only <code>CREATE</code> or <code>UPDATE</code>.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::ResourceAction> {
        &self.action
    }
    /// <p>A generic status for the change in progress, such as QUEUED, IN_PROGRESS, SUCCESS, or FAILED.</p>
    pub fn state(mut self, input: crate::types::ResourceState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>A generic status for the change in progress, such as QUEUED, IN_PROGRESS, SUCCESS, or FAILED.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::ResourceState>) -> Self {
        self.state = input;
        self
    }
    /// <p>A generic status for the change in progress, such as QUEUED, IN_PROGRESS, SUCCESS, or FAILED.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::ResourceState> {
        &self.state
    }
    /// <p>An error that will only appear when the state is "FAILED". This is a parent level exception message, there may be different <code>Error</code>s for each dialect.</p>
    pub fn error(mut self, input: crate::types::ErrorDetail) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>An error that will only appear when the state is "FAILED". This is a parent level exception message, there may be different <code>Error</code>s for each dialect.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::ErrorDetail>) -> Self {
        self.error = input;
        self
    }
    /// <p>An error that will only appear when the state is "FAILED". This is a parent level exception message, there may be different <code>Error</code>s for each dialect.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::ErrorDetail> {
        &self.error
    }
    /// <p>A <code>StatusDetails</code> object with information about the requested change.</p>
    pub fn details(mut self, input: crate::types::StatusDetails) -> Self {
        self.details = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>StatusDetails</code> object with information about the requested change.</p>
    pub fn set_details(mut self, input: ::std::option::Option<crate::types::StatusDetails>) -> Self {
        self.details = input;
        self
    }
    /// <p>A <code>StatusDetails</code> object with information about the requested change.</p>
    pub fn get_details(&self) -> &::std::option::Option<crate::types::StatusDetails> {
        &self.details
    }
    /// Consumes the builder and constructs a [`TableStatus`](crate::types::TableStatus).
    pub fn build(self) -> crate::types::TableStatus {
        crate::types::TableStatus {
            requested_by: self.requested_by,
            updated_by: self.updated_by,
            request_time: self.request_time,
            update_time: self.update_time,
            action: self.action,
            state: self.state,
            error: self.error,
            details: self.details,
        }
    }
}
