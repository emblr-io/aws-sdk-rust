// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies how Data Quality assets in your account should be encrypted.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataQualityEncryption {
    /// <p>The encryption mode to use for encrypting Data Quality assets. These assets include data quality rulesets, results, statistics, anomaly detection models and observations.</p>
    /// <p>Valid values are <code>SSEKMS</code> for encryption using a customer-managed KMS key, or <code>DISABLED</code>.</p>
    pub data_quality_encryption_mode: ::std::option::Option<crate::types::DataQualityEncryptionMode>,
    /// <p>The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.</p>
    pub kms_key_arn: ::std::option::Option<::std::string::String>,
}
impl DataQualityEncryption {
    /// <p>The encryption mode to use for encrypting Data Quality assets. These assets include data quality rulesets, results, statistics, anomaly detection models and observations.</p>
    /// <p>Valid values are <code>SSEKMS</code> for encryption using a customer-managed KMS key, or <code>DISABLED</code>.</p>
    pub fn data_quality_encryption_mode(&self) -> ::std::option::Option<&crate::types::DataQualityEncryptionMode> {
        self.data_quality_encryption_mode.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.</p>
    pub fn kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
}
impl DataQualityEncryption {
    /// Creates a new builder-style object to manufacture [`DataQualityEncryption`](crate::types::DataQualityEncryption).
    pub fn builder() -> crate::types::builders::DataQualityEncryptionBuilder {
        crate::types::builders::DataQualityEncryptionBuilder::default()
    }
}

/// A builder for [`DataQualityEncryption`](crate::types::DataQualityEncryption).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataQualityEncryptionBuilder {
    pub(crate) data_quality_encryption_mode: ::std::option::Option<crate::types::DataQualityEncryptionMode>,
    pub(crate) kms_key_arn: ::std::option::Option<::std::string::String>,
}
impl DataQualityEncryptionBuilder {
    /// <p>The encryption mode to use for encrypting Data Quality assets. These assets include data quality rulesets, results, statistics, anomaly detection models and observations.</p>
    /// <p>Valid values are <code>SSEKMS</code> for encryption using a customer-managed KMS key, or <code>DISABLED</code>.</p>
    pub fn data_quality_encryption_mode(mut self, input: crate::types::DataQualityEncryptionMode) -> Self {
        self.data_quality_encryption_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The encryption mode to use for encrypting Data Quality assets. These assets include data quality rulesets, results, statistics, anomaly detection models and observations.</p>
    /// <p>Valid values are <code>SSEKMS</code> for encryption using a customer-managed KMS key, or <code>DISABLED</code>.</p>
    pub fn set_data_quality_encryption_mode(mut self, input: ::std::option::Option<crate::types::DataQualityEncryptionMode>) -> Self {
        self.data_quality_encryption_mode = input;
        self
    }
    /// <p>The encryption mode to use for encrypting Data Quality assets. These assets include data quality rulesets, results, statistics, anomaly detection models and observations.</p>
    /// <p>Valid values are <code>SSEKMS</code> for encryption using a customer-managed KMS key, or <code>DISABLED</code>.</p>
    pub fn get_data_quality_encryption_mode(&self) -> &::std::option::Option<crate::types::DataQualityEncryptionMode> {
        &self.data_quality_encryption_mode
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.</p>
    pub fn kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.</p>
    pub fn set_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.</p>
    pub fn get_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_arn
    }
    /// Consumes the builder and constructs a [`DataQualityEncryption`](crate::types::DataQualityEncryption).
    pub fn build(self) -> crate::types::DataQualityEncryption {
        crate::types::DataQualityEncryption {
            data_quality_encryption_mode: self.data_quality_encryption_mode,
            kms_key_arn: self.kms_key_arn,
        }
    }
}
