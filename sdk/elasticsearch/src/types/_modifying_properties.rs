// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the domain properties that are currently being modified.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModifyingProperties {
    /// <p>The name of the property that is currently being modified.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The current value of the domain property that is being modified.</p>
    pub active_value: ::std::option::Option<::std::string::String>,
    /// <p>The value that the property that is currently being modified will eventually have.</p>
    pub pending_value: ::std::option::Option<::std::string::String>,
    /// <p>The type of value that is currently being modified. Properties can have two types:</p>
    /// <ul>
    /// <li><b>PLAIN_TEXT</b>: Contain direct values such as "1", "True", or "c5.large.search".</li>
    /// <li><b>STRINGIFIED_JSON</b>: Contain content in JSON format, such as {"Enabled":"True"}".</li>
    /// </ul>
    pub value_type: ::std::option::Option<crate::types::PropertyValueType>,
}
impl ModifyingProperties {
    /// <p>The name of the property that is currently being modified.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The current value of the domain property that is being modified.</p>
    pub fn active_value(&self) -> ::std::option::Option<&str> {
        self.active_value.as_deref()
    }
    /// <p>The value that the property that is currently being modified will eventually have.</p>
    pub fn pending_value(&self) -> ::std::option::Option<&str> {
        self.pending_value.as_deref()
    }
    /// <p>The type of value that is currently being modified. Properties can have two types:</p>
    /// <ul>
    /// <li><b>PLAIN_TEXT</b>: Contain direct values such as "1", "True", or "c5.large.search".</li>
    /// <li><b>STRINGIFIED_JSON</b>: Contain content in JSON format, such as {"Enabled":"True"}".</li>
    /// </ul>
    pub fn value_type(&self) -> ::std::option::Option<&crate::types::PropertyValueType> {
        self.value_type.as_ref()
    }
}
impl ModifyingProperties {
    /// Creates a new builder-style object to manufacture [`ModifyingProperties`](crate::types::ModifyingProperties).
    pub fn builder() -> crate::types::builders::ModifyingPropertiesBuilder {
        crate::types::builders::ModifyingPropertiesBuilder::default()
    }
}

/// A builder for [`ModifyingProperties`](crate::types::ModifyingProperties).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ModifyingPropertiesBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) active_value: ::std::option::Option<::std::string::String>,
    pub(crate) pending_value: ::std::option::Option<::std::string::String>,
    pub(crate) value_type: ::std::option::Option<crate::types::PropertyValueType>,
}
impl ModifyingPropertiesBuilder {
    /// <p>The name of the property that is currently being modified.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the property that is currently being modified.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the property that is currently being modified.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The current value of the domain property that is being modified.</p>
    pub fn active_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.active_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current value of the domain property that is being modified.</p>
    pub fn set_active_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.active_value = input;
        self
    }
    /// <p>The current value of the domain property that is being modified.</p>
    pub fn get_active_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.active_value
    }
    /// <p>The value that the property that is currently being modified will eventually have.</p>
    pub fn pending_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pending_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value that the property that is currently being modified will eventually have.</p>
    pub fn set_pending_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pending_value = input;
        self
    }
    /// <p>The value that the property that is currently being modified will eventually have.</p>
    pub fn get_pending_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.pending_value
    }
    /// <p>The type of value that is currently being modified. Properties can have two types:</p>
    /// <ul>
    /// <li><b>PLAIN_TEXT</b>: Contain direct values such as "1", "True", or "c5.large.search".</li>
    /// <li><b>STRINGIFIED_JSON</b>: Contain content in JSON format, such as {"Enabled":"True"}".</li>
    /// </ul>
    pub fn value_type(mut self, input: crate::types::PropertyValueType) -> Self {
        self.value_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of value that is currently being modified. Properties can have two types:</p>
    /// <ul>
    /// <li><b>PLAIN_TEXT</b>: Contain direct values such as "1", "True", or "c5.large.search".</li>
    /// <li><b>STRINGIFIED_JSON</b>: Contain content in JSON format, such as {"Enabled":"True"}".</li>
    /// </ul>
    pub fn set_value_type(mut self, input: ::std::option::Option<crate::types::PropertyValueType>) -> Self {
        self.value_type = input;
        self
    }
    /// <p>The type of value that is currently being modified. Properties can have two types:</p>
    /// <ul>
    /// <li><b>PLAIN_TEXT</b>: Contain direct values such as "1", "True", or "c5.large.search".</li>
    /// <li><b>STRINGIFIED_JSON</b>: Contain content in JSON format, such as {"Enabled":"True"}".</li>
    /// </ul>
    pub fn get_value_type(&self) -> &::std::option::Option<crate::types::PropertyValueType> {
        &self.value_type
    }
    /// Consumes the builder and constructs a [`ModifyingProperties`](crate::types::ModifyingProperties).
    pub fn build(self) -> crate::types::ModifyingProperties {
        crate::types::ModifyingProperties {
            name: self.name,
            active_value: self.active_value,
            pending_value: self.pending_value,
            value_type: self.value_type,
        }
    }
}
