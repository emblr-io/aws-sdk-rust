// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the nested item path and hash of the protected resource.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ItemPath {
    /// <p>The nested item path where the infected file was found.</p>
    pub nested_item_path: ::std::option::Option<::std::string::String>,
    /// <p>The hash value of the infected resource.</p>
    pub hash: ::std::option::Option<::std::string::String>,
}
impl ItemPath {
    /// <p>The nested item path where the infected file was found.</p>
    pub fn nested_item_path(&self) -> ::std::option::Option<&str> {
        self.nested_item_path.as_deref()
    }
    /// <p>The hash value of the infected resource.</p>
    pub fn hash(&self) -> ::std::option::Option<&str> {
        self.hash.as_deref()
    }
}
impl ItemPath {
    /// Creates a new builder-style object to manufacture [`ItemPath`](crate::types::ItemPath).
    pub fn builder() -> crate::types::builders::ItemPathBuilder {
        crate::types::builders::ItemPathBuilder::default()
    }
}

/// A builder for [`ItemPath`](crate::types::ItemPath).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ItemPathBuilder {
    pub(crate) nested_item_path: ::std::option::Option<::std::string::String>,
    pub(crate) hash: ::std::option::Option<::std::string::String>,
}
impl ItemPathBuilder {
    /// <p>The nested item path where the infected file was found.</p>
    pub fn nested_item_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nested_item_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The nested item path where the infected file was found.</p>
    pub fn set_nested_item_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nested_item_path = input;
        self
    }
    /// <p>The nested item path where the infected file was found.</p>
    pub fn get_nested_item_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.nested_item_path
    }
    /// <p>The hash value of the infected resource.</p>
    pub fn hash(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hash = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hash value of the infected resource.</p>
    pub fn set_hash(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hash = input;
        self
    }
    /// <p>The hash value of the infected resource.</p>
    pub fn get_hash(&self) -> &::std::option::Option<::std::string::String> {
        &self.hash
    }
    /// Consumes the builder and constructs a [`ItemPath`](crate::types::ItemPath).
    pub fn build(self) -> crate::types::ItemPath {
        crate::types::ItemPath {
            nested_item_path: self.nested_item_path,
            hash: self.hash,
        }
    }
}
