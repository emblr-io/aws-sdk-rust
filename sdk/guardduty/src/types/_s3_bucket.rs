// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the Amazon S3 bucket policies and encryption.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3Bucket {
    /// <p>The owner ID of the associated S3Amazon S3bucket.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp at which the Amazon S3 bucket was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The type of encryption used for the Amazon S3 buckets and its objects. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/serv-side-encryption.html">Protecting data with server-side encryption</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub encryption_type: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the encryption key that is used to encrypt the Amazon S3 bucket and its objects.</p>
    pub encryption_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>Describes the effective permissions on this S3 bucket, after factoring all the attached policies.</p>
    pub effective_permission: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether or not the public read access is allowed for an Amazon S3 bucket.</p>
    pub public_read_access: ::std::option::Option<crate::types::PublicAccessStatus>,
    /// <p>Indicates whether or not the public write access is allowed for an Amazon S3 bucket.</p>
    pub public_write_access: ::std::option::Option<crate::types::PublicAccessStatus>,
    /// <p>Contains information about the public access policies that apply to the Amazon S3 bucket at the account level.</p>
    pub account_public_access: ::std::option::Option<crate::types::PublicAccessConfiguration>,
    /// <p>Contains information about public access policies that apply to the Amazon S3 bucket.</p>
    pub bucket_public_access: ::std::option::Option<crate::types::PublicAccessConfiguration>,
    /// <p>Represents a list of Amazon S3 object identifiers.</p>
    pub s3_object_uids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl S3Bucket {
    /// <p>The owner ID of the associated S3Amazon S3bucket.</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The timestamp at which the Amazon S3 bucket was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The type of encryption used for the Amazon S3 buckets and its objects. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/serv-side-encryption.html">Protecting data with server-side encryption</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn encryption_type(&self) -> ::std::option::Option<&str> {
        self.encryption_type.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the encryption key that is used to encrypt the Amazon S3 bucket and its objects.</p>
    pub fn encryption_key_arn(&self) -> ::std::option::Option<&str> {
        self.encryption_key_arn.as_deref()
    }
    /// <p>Describes the effective permissions on this S3 bucket, after factoring all the attached policies.</p>
    pub fn effective_permission(&self) -> ::std::option::Option<&str> {
        self.effective_permission.as_deref()
    }
    /// <p>Indicates whether or not the public read access is allowed for an Amazon S3 bucket.</p>
    pub fn public_read_access(&self) -> ::std::option::Option<&crate::types::PublicAccessStatus> {
        self.public_read_access.as_ref()
    }
    /// <p>Indicates whether or not the public write access is allowed for an Amazon S3 bucket.</p>
    pub fn public_write_access(&self) -> ::std::option::Option<&crate::types::PublicAccessStatus> {
        self.public_write_access.as_ref()
    }
    /// <p>Contains information about the public access policies that apply to the Amazon S3 bucket at the account level.</p>
    pub fn account_public_access(&self) -> ::std::option::Option<&crate::types::PublicAccessConfiguration> {
        self.account_public_access.as_ref()
    }
    /// <p>Contains information about public access policies that apply to the Amazon S3 bucket.</p>
    pub fn bucket_public_access(&self) -> ::std::option::Option<&crate::types::PublicAccessConfiguration> {
        self.bucket_public_access.as_ref()
    }
    /// <p>Represents a list of Amazon S3 object identifiers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.s3_object_uids.is_none()`.
    pub fn s3_object_uids(&self) -> &[::std::string::String] {
        self.s3_object_uids.as_deref().unwrap_or_default()
    }
}
impl S3Bucket {
    /// Creates a new builder-style object to manufacture [`S3Bucket`](crate::types::S3Bucket).
    pub fn builder() -> crate::types::builders::S3BucketBuilder {
        crate::types::builders::S3BucketBuilder::default()
    }
}

/// A builder for [`S3Bucket`](crate::types::S3Bucket).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct S3BucketBuilder {
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) encryption_type: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) effective_permission: ::std::option::Option<::std::string::String>,
    pub(crate) public_read_access: ::std::option::Option<crate::types::PublicAccessStatus>,
    pub(crate) public_write_access: ::std::option::Option<crate::types::PublicAccessStatus>,
    pub(crate) account_public_access: ::std::option::Option<crate::types::PublicAccessConfiguration>,
    pub(crate) bucket_public_access: ::std::option::Option<crate::types::PublicAccessConfiguration>,
    pub(crate) s3_object_uids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl S3BucketBuilder {
    /// <p>The owner ID of the associated S3Amazon S3bucket.</p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The owner ID of the associated S3Amazon S3bucket.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The owner ID of the associated S3Amazon S3bucket.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// <p>The timestamp at which the Amazon S3 bucket was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which the Amazon S3 bucket was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp at which the Amazon S3 bucket was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The type of encryption used for the Amazon S3 buckets and its objects. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/serv-side-encryption.html">Protecting data with server-side encryption</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn encryption_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encryption_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of encryption used for the Amazon S3 buckets and its objects. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/serv-side-encryption.html">Protecting data with server-side encryption</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn set_encryption_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encryption_type = input;
        self
    }
    /// <p>The type of encryption used for the Amazon S3 buckets and its objects. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/serv-side-encryption.html">Protecting data with server-side encryption</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn get_encryption_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.encryption_type
    }
    /// <p>The Amazon Resource Name (ARN) of the encryption key that is used to encrypt the Amazon S3 bucket and its objects.</p>
    pub fn encryption_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encryption_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the encryption key that is used to encrypt the Amazon S3 bucket and its objects.</p>
    pub fn set_encryption_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encryption_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the encryption key that is used to encrypt the Amazon S3 bucket and its objects.</p>
    pub fn get_encryption_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.encryption_key_arn
    }
    /// <p>Describes the effective permissions on this S3 bucket, after factoring all the attached policies.</p>
    pub fn effective_permission(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.effective_permission = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes the effective permissions on this S3 bucket, after factoring all the attached policies.</p>
    pub fn set_effective_permission(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.effective_permission = input;
        self
    }
    /// <p>Describes the effective permissions on this S3 bucket, after factoring all the attached policies.</p>
    pub fn get_effective_permission(&self) -> &::std::option::Option<::std::string::String> {
        &self.effective_permission
    }
    /// <p>Indicates whether or not the public read access is allowed for an Amazon S3 bucket.</p>
    pub fn public_read_access(mut self, input: crate::types::PublicAccessStatus) -> Self {
        self.public_read_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether or not the public read access is allowed for an Amazon S3 bucket.</p>
    pub fn set_public_read_access(mut self, input: ::std::option::Option<crate::types::PublicAccessStatus>) -> Self {
        self.public_read_access = input;
        self
    }
    /// <p>Indicates whether or not the public read access is allowed for an Amazon S3 bucket.</p>
    pub fn get_public_read_access(&self) -> &::std::option::Option<crate::types::PublicAccessStatus> {
        &self.public_read_access
    }
    /// <p>Indicates whether or not the public write access is allowed for an Amazon S3 bucket.</p>
    pub fn public_write_access(mut self, input: crate::types::PublicAccessStatus) -> Self {
        self.public_write_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether or not the public write access is allowed for an Amazon S3 bucket.</p>
    pub fn set_public_write_access(mut self, input: ::std::option::Option<crate::types::PublicAccessStatus>) -> Self {
        self.public_write_access = input;
        self
    }
    /// <p>Indicates whether or not the public write access is allowed for an Amazon S3 bucket.</p>
    pub fn get_public_write_access(&self) -> &::std::option::Option<crate::types::PublicAccessStatus> {
        &self.public_write_access
    }
    /// <p>Contains information about the public access policies that apply to the Amazon S3 bucket at the account level.</p>
    pub fn account_public_access(mut self, input: crate::types::PublicAccessConfiguration) -> Self {
        self.account_public_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the public access policies that apply to the Amazon S3 bucket at the account level.</p>
    pub fn set_account_public_access(mut self, input: ::std::option::Option<crate::types::PublicAccessConfiguration>) -> Self {
        self.account_public_access = input;
        self
    }
    /// <p>Contains information about the public access policies that apply to the Amazon S3 bucket at the account level.</p>
    pub fn get_account_public_access(&self) -> &::std::option::Option<crate::types::PublicAccessConfiguration> {
        &self.account_public_access
    }
    /// <p>Contains information about public access policies that apply to the Amazon S3 bucket.</p>
    pub fn bucket_public_access(mut self, input: crate::types::PublicAccessConfiguration) -> Self {
        self.bucket_public_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about public access policies that apply to the Amazon S3 bucket.</p>
    pub fn set_bucket_public_access(mut self, input: ::std::option::Option<crate::types::PublicAccessConfiguration>) -> Self {
        self.bucket_public_access = input;
        self
    }
    /// <p>Contains information about public access policies that apply to the Amazon S3 bucket.</p>
    pub fn get_bucket_public_access(&self) -> &::std::option::Option<crate::types::PublicAccessConfiguration> {
        &self.bucket_public_access
    }
    /// Appends an item to `s3_object_uids`.
    ///
    /// To override the contents of this collection use [`set_s3_object_uids`](Self::set_s3_object_uids).
    ///
    /// <p>Represents a list of Amazon S3 object identifiers.</p>
    pub fn s3_object_uids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.s3_object_uids.unwrap_or_default();
        v.push(input.into());
        self.s3_object_uids = ::std::option::Option::Some(v);
        self
    }
    /// <p>Represents a list of Amazon S3 object identifiers.</p>
    pub fn set_s3_object_uids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.s3_object_uids = input;
        self
    }
    /// <p>Represents a list of Amazon S3 object identifiers.</p>
    pub fn get_s3_object_uids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.s3_object_uids
    }
    /// Consumes the builder and constructs a [`S3Bucket`](crate::types::S3Bucket).
    pub fn build(self) -> crate::types::S3Bucket {
        crate::types::S3Bucket {
            owner_id: self.owner_id,
            created_at: self.created_at,
            encryption_type: self.encryption_type,
            encryption_key_arn: self.encryption_key_arn,
            effective_permission: self.effective_permission,
            public_read_access: self.public_read_access,
            public_write_access: self.public_write_access,
            account_public_access: self.account_public_access,
            bucket_public_access: self.bucket_public_access,
            s3_object_uids: self.s3_object_uids,
        }
    }
}
