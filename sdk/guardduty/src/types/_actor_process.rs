// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a process involved in a GuardDuty finding, including process identification, execution details, and file information.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ActorProcess {
    /// <p>The name of the process as it appears in the system.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The full file path to the process executable on the system.</p>
    pub path: ::std::option::Option<::std::string::String>,
    /// <p>The SHA256 hash of the process executable file, which can be used for identification and verification purposes.</p>
    pub sha256: ::std::option::Option<::std::string::String>,
}
impl ActorProcess {
    /// <p>The name of the process as it appears in the system.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The full file path to the process executable on the system.</p>
    pub fn path(&self) -> ::std::option::Option<&str> {
        self.path.as_deref()
    }
    /// <p>The SHA256 hash of the process executable file, which can be used for identification and verification purposes.</p>
    pub fn sha256(&self) -> ::std::option::Option<&str> {
        self.sha256.as_deref()
    }
}
impl ActorProcess {
    /// Creates a new builder-style object to manufacture [`ActorProcess`](crate::types::ActorProcess).
    pub fn builder() -> crate::types::builders::ActorProcessBuilder {
        crate::types::builders::ActorProcessBuilder::default()
    }
}

/// A builder for [`ActorProcess`](crate::types::ActorProcess).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ActorProcessBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) path: ::std::option::Option<::std::string::String>,
    pub(crate) sha256: ::std::option::Option<::std::string::String>,
}
impl ActorProcessBuilder {
    /// <p>The name of the process as it appears in the system.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the process as it appears in the system.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the process as it appears in the system.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The full file path to the process executable on the system.</p>
    /// This field is required.
    pub fn path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The full file path to the process executable on the system.</p>
    pub fn set_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.path = input;
        self
    }
    /// <p>The full file path to the process executable on the system.</p>
    pub fn get_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.path
    }
    /// <p>The SHA256 hash of the process executable file, which can be used for identification and verification purposes.</p>
    pub fn sha256(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sha256 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The SHA256 hash of the process executable file, which can be used for identification and verification purposes.</p>
    pub fn set_sha256(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sha256 = input;
        self
    }
    /// <p>The SHA256 hash of the process executable file, which can be used for identification and verification purposes.</p>
    pub fn get_sha256(&self) -> &::std::option::Option<::std::string::String> {
        &self.sha256
    }
    /// Consumes the builder and constructs a [`ActorProcess`](crate::types::ActorProcess).
    pub fn build(self) -> crate::types::ActorProcess {
        crate::types::ActorProcess {
            name: self.name,
            path: self.path,
            sha256: self.sha256,
        }
    }
}
