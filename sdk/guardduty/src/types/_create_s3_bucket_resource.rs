// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the protected S3 bucket resource.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateS3BucketResource {
    /// <p>Name of the S3 bucket.</p>
    pub bucket_name: ::std::option::Option<::std::string::String>,
    /// <p>Information about the specified object prefixes. The S3 object will be scanned only if it belongs to any of the specified object prefixes.</p>
    pub object_prefixes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CreateS3BucketResource {
    /// <p>Name of the S3 bucket.</p>
    pub fn bucket_name(&self) -> ::std::option::Option<&str> {
        self.bucket_name.as_deref()
    }
    /// <p>Information about the specified object prefixes. The S3 object will be scanned only if it belongs to any of the specified object prefixes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.object_prefixes.is_none()`.
    pub fn object_prefixes(&self) -> &[::std::string::String] {
        self.object_prefixes.as_deref().unwrap_or_default()
    }
}
impl CreateS3BucketResource {
    /// Creates a new builder-style object to manufacture [`CreateS3BucketResource`](crate::types::CreateS3BucketResource).
    pub fn builder() -> crate::types::builders::CreateS3BucketResourceBuilder {
        crate::types::builders::CreateS3BucketResourceBuilder::default()
    }
}

/// A builder for [`CreateS3BucketResource`](crate::types::CreateS3BucketResource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateS3BucketResourceBuilder {
    pub(crate) bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) object_prefixes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CreateS3BucketResourceBuilder {
    /// <p>Name of the S3 bucket.</p>
    pub fn bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the S3 bucket.</p>
    pub fn set_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_name = input;
        self
    }
    /// <p>Name of the S3 bucket.</p>
    pub fn get_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_name
    }
    /// Appends an item to `object_prefixes`.
    ///
    /// To override the contents of this collection use [`set_object_prefixes`](Self::set_object_prefixes).
    ///
    /// <p>Information about the specified object prefixes. The S3 object will be scanned only if it belongs to any of the specified object prefixes.</p>
    pub fn object_prefixes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.object_prefixes.unwrap_or_default();
        v.push(input.into());
        self.object_prefixes = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the specified object prefixes. The S3 object will be scanned only if it belongs to any of the specified object prefixes.</p>
    pub fn set_object_prefixes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.object_prefixes = input;
        self
    }
    /// <p>Information about the specified object prefixes. The S3 object will be scanned only if it belongs to any of the specified object prefixes.</p>
    pub fn get_object_prefixes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.object_prefixes
    }
    /// Consumes the builder and constructs a [`CreateS3BucketResource`](crate::types::CreateS3BucketResource).
    pub fn build(self) -> crate::types::CreateS3BucketResource {
        crate::types::CreateS3BucketResource {
            bucket_name: self.bucket_name,
            object_prefixes: self.object_prefixes,
        }
    }
}
