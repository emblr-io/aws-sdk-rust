// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the user involved in the attack sequence.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct User {
    /// <p>The name of the user.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the user.</p>
    pub uid: ::std::option::Option<::std::string::String>,
    /// <p>The type of the user.</p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>The credentials of the user ID.</p>
    pub credential_uid: ::std::option::Option<::std::string::String>,
    /// <p>Contains information about the Amazon Web Services account.</p>
    pub account: ::std::option::Option<crate::types::Account>,
}
impl User {
    /// <p>The name of the user.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The unique identifier of the user.</p>
    pub fn uid(&self) -> ::std::option::Option<&str> {
        self.uid.as_deref()
    }
    /// <p>The type of the user.</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The credentials of the user ID.</p>
    pub fn credential_uid(&self) -> ::std::option::Option<&str> {
        self.credential_uid.as_deref()
    }
    /// <p>Contains information about the Amazon Web Services account.</p>
    pub fn account(&self) -> ::std::option::Option<&crate::types::Account> {
        self.account.as_ref()
    }
}
impl User {
    /// Creates a new builder-style object to manufacture [`User`](crate::types::User).
    pub fn builder() -> crate::types::builders::UserBuilder {
        crate::types::builders::UserBuilder::default()
    }
}

/// A builder for [`User`](crate::types::User).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UserBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) uid: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) credential_uid: ::std::option::Option<::std::string::String>,
    pub(crate) account: ::std::option::Option<crate::types::Account>,
}
impl UserBuilder {
    /// <p>The name of the user.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the user.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the user.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The unique identifier of the user.</p>
    /// This field is required.
    pub fn uid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.uid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the user.</p>
    pub fn set_uid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.uid = input;
        self
    }
    /// <p>The unique identifier of the user.</p>
    pub fn get_uid(&self) -> &::std::option::Option<::std::string::String> {
        &self.uid
    }
    /// <p>The type of the user.</p>
    /// This field is required.
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of the user.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the user.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The credentials of the user ID.</p>
    pub fn credential_uid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.credential_uid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The credentials of the user ID.</p>
    pub fn set_credential_uid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.credential_uid = input;
        self
    }
    /// <p>The credentials of the user ID.</p>
    pub fn get_credential_uid(&self) -> &::std::option::Option<::std::string::String> {
        &self.credential_uid
    }
    /// <p>Contains information about the Amazon Web Services account.</p>
    pub fn account(mut self, input: crate::types::Account) -> Self {
        self.account = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the Amazon Web Services account.</p>
    pub fn set_account(mut self, input: ::std::option::Option<crate::types::Account>) -> Self {
        self.account = input;
        self
    }
    /// <p>Contains information about the Amazon Web Services account.</p>
    pub fn get_account(&self) -> &::std::option::Option<crate::types::Account> {
        &self.account
    }
    /// Consumes the builder and constructs a [`User`](crate::types::User).
    pub fn build(self) -> crate::types::User {
        crate::types::User {
            name: self.name,
            uid: self.uid,
            r#type: self.r#type,
            credential_uid: self.credential_uid,
            account: self.account,
        }
    }
}
