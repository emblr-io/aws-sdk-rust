// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the account.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AccountDetail {
    /// <p>The member account ID.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The email address of the member account.</p>
    /// <p>The rules for a valid email address:</p>
    /// <ul>
    /// <li>
    /// <p>The email address must be a minimum of 6 and a maximum of 64 characters long.</p></li>
    /// <li>
    /// <p>All characters must be 7-bit ASCII characters.</p></li>
    /// <li>
    /// <p>There must be one and only one @ symbol, which separates the local name from the domain name.</p></li>
    /// <li>
    /// <p>The local name can't contain any of the following characters:</p>
    /// <p>whitespace, " ' ( ) &lt; &gt; \[ \] : ' , \ | % &amp;</p></li>
    /// <li>
    /// <p>The local name can't begin with a dot (.).</p></li>
    /// <li>
    /// <p>The domain name can consist of only the characters \[a-z\], \[A-Z\], \[0-9\], hyphen (-), or dot (.).</p></li>
    /// <li>
    /// <p>The domain name can't begin or end with a dot (.) or hyphen (-).</p></li>
    /// <li>
    /// <p>The domain name must contain at least one dot.</p></li>
    /// </ul>
    pub email: ::std::option::Option<::std::string::String>,
}
impl AccountDetail {
    /// <p>The member account ID.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The email address of the member account.</p>
    /// <p>The rules for a valid email address:</p>
    /// <ul>
    /// <li>
    /// <p>The email address must be a minimum of 6 and a maximum of 64 characters long.</p></li>
    /// <li>
    /// <p>All characters must be 7-bit ASCII characters.</p></li>
    /// <li>
    /// <p>There must be one and only one @ symbol, which separates the local name from the domain name.</p></li>
    /// <li>
    /// <p>The local name can't contain any of the following characters:</p>
    /// <p>whitespace, " ' ( ) &lt; &gt; \[ \] : ' , \ | % &amp;</p></li>
    /// <li>
    /// <p>The local name can't begin with a dot (.).</p></li>
    /// <li>
    /// <p>The domain name can consist of only the characters \[a-z\], \[A-Z\], \[0-9\], hyphen (-), or dot (.).</p></li>
    /// <li>
    /// <p>The domain name can't begin or end with a dot (.) or hyphen (-).</p></li>
    /// <li>
    /// <p>The domain name must contain at least one dot.</p></li>
    /// </ul>
    pub fn email(&self) -> ::std::option::Option<&str> {
        self.email.as_deref()
    }
}
impl ::std::fmt::Debug for AccountDetail {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AccountDetail");
        formatter.field("account_id", &self.account_id);
        formatter.field("email", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AccountDetail {
    /// Creates a new builder-style object to manufacture [`AccountDetail`](crate::types::AccountDetail).
    pub fn builder() -> crate::types::builders::AccountDetailBuilder {
        crate::types::builders::AccountDetailBuilder::default()
    }
}

/// A builder for [`AccountDetail`](crate::types::AccountDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AccountDetailBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) email: ::std::option::Option<::std::string::String>,
}
impl AccountDetailBuilder {
    /// <p>The member account ID.</p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The member account ID.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The member account ID.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The email address of the member account.</p>
    /// <p>The rules for a valid email address:</p>
    /// <ul>
    /// <li>
    /// <p>The email address must be a minimum of 6 and a maximum of 64 characters long.</p></li>
    /// <li>
    /// <p>All characters must be 7-bit ASCII characters.</p></li>
    /// <li>
    /// <p>There must be one and only one @ symbol, which separates the local name from the domain name.</p></li>
    /// <li>
    /// <p>The local name can't contain any of the following characters:</p>
    /// <p>whitespace, " ' ( ) &lt; &gt; \[ \] : ' , \ | % &amp;</p></li>
    /// <li>
    /// <p>The local name can't begin with a dot (.).</p></li>
    /// <li>
    /// <p>The domain name can consist of only the characters \[a-z\], \[A-Z\], \[0-9\], hyphen (-), or dot (.).</p></li>
    /// <li>
    /// <p>The domain name can't begin or end with a dot (.) or hyphen (-).</p></li>
    /// <li>
    /// <p>The domain name must contain at least one dot.</p></li>
    /// </ul>
    /// This field is required.
    pub fn email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address of the member account.</p>
    /// <p>The rules for a valid email address:</p>
    /// <ul>
    /// <li>
    /// <p>The email address must be a minimum of 6 and a maximum of 64 characters long.</p></li>
    /// <li>
    /// <p>All characters must be 7-bit ASCII characters.</p></li>
    /// <li>
    /// <p>There must be one and only one @ symbol, which separates the local name from the domain name.</p></li>
    /// <li>
    /// <p>The local name can't contain any of the following characters:</p>
    /// <p>whitespace, " ' ( ) &lt; &gt; \[ \] : ' , \ | % &amp;</p></li>
    /// <li>
    /// <p>The local name can't begin with a dot (.).</p></li>
    /// <li>
    /// <p>The domain name can consist of only the characters \[a-z\], \[A-Z\], \[0-9\], hyphen (-), or dot (.).</p></li>
    /// <li>
    /// <p>The domain name can't begin or end with a dot (.) or hyphen (-).</p></li>
    /// <li>
    /// <p>The domain name must contain at least one dot.</p></li>
    /// </ul>
    pub fn set_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email = input;
        self
    }
    /// <p>The email address of the member account.</p>
    /// <p>The rules for a valid email address:</p>
    /// <ul>
    /// <li>
    /// <p>The email address must be a minimum of 6 and a maximum of 64 characters long.</p></li>
    /// <li>
    /// <p>All characters must be 7-bit ASCII characters.</p></li>
    /// <li>
    /// <p>There must be one and only one @ symbol, which separates the local name from the domain name.</p></li>
    /// <li>
    /// <p>The local name can't contain any of the following characters:</p>
    /// <p>whitespace, " ' ( ) &lt; &gt; \[ \] : ' , \ | % &amp;</p></li>
    /// <li>
    /// <p>The local name can't begin with a dot (.).</p></li>
    /// <li>
    /// <p>The domain name can consist of only the characters \[a-z\], \[A-Z\], \[0-9\], hyphen (-), or dot (.).</p></li>
    /// <li>
    /// <p>The domain name can't begin or end with a dot (.) or hyphen (-).</p></li>
    /// <li>
    /// <p>The domain name must contain at least one dot.</p></li>
    /// </ul>
    pub fn get_email(&self) -> &::std::option::Option<::std::string::String> {
        &self.email
    }
    /// Consumes the builder and constructs a [`AccountDetail`](crate::types::AccountDetail).
    pub fn build(self) -> crate::types::AccountDetail {
        crate::types::AccountDetail {
            account_id: self.account_id,
            email: self.email,
        }
    }
}
impl ::std::fmt::Debug for AccountDetailBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AccountDetailBuilder");
        formatter.field("account_id", &self.account_id);
        formatter.field("email", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
