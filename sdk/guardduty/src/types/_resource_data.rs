// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the Amazon Web Services resource that is associated with the activity that prompted GuardDuty to generate a finding.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceData {
    /// <p>Contains information about the Amazon S3 bucket.</p>
    pub s3_bucket: ::std::option::Option<crate::types::S3Bucket>,
    /// <p>Contains information about the Amazon EC2 instance.</p>
    pub ec2_instance: ::std::option::Option<crate::types::Ec2Instance>,
    /// <p>Contains information about the IAM access key details of a user that involved in the GuardDuty finding.</p>
    pub access_key: ::std::option::Option<crate::types::AccessKey>,
    /// <p>Contains information about the elastic network interface of the Amazon EC2 instance.</p>
    pub ec2_network_interface: ::std::option::Option<crate::types::Ec2NetworkInterface>,
    /// <p>Contains information about the Amazon S3 object.</p>
    pub s3_object: ::std::option::Option<crate::types::S3Object>,
    /// <p>Contains detailed information about the Amazon EKS cluster associated with the activity that prompted GuardDuty to generate a finding.</p>
    pub eks_cluster: ::std::option::Option<crate::types::EksCluster>,
    /// <p>Contains detailed information about the Kubernetes workload associated with the activity that prompted GuardDuty to generate a finding.</p>
    pub kubernetes_workload: ::std::option::Option<crate::types::KubernetesWorkload>,
    /// <p>Contains detailed information about the container associated with the activity that prompted GuardDuty to generate a finding.</p>
    pub container: ::std::option::Option<crate::types::ContainerFindingResource>,
}
impl ResourceData {
    /// <p>Contains information about the Amazon S3 bucket.</p>
    pub fn s3_bucket(&self) -> ::std::option::Option<&crate::types::S3Bucket> {
        self.s3_bucket.as_ref()
    }
    /// <p>Contains information about the Amazon EC2 instance.</p>
    pub fn ec2_instance(&self) -> ::std::option::Option<&crate::types::Ec2Instance> {
        self.ec2_instance.as_ref()
    }
    /// <p>Contains information about the IAM access key details of a user that involved in the GuardDuty finding.</p>
    pub fn access_key(&self) -> ::std::option::Option<&crate::types::AccessKey> {
        self.access_key.as_ref()
    }
    /// <p>Contains information about the elastic network interface of the Amazon EC2 instance.</p>
    pub fn ec2_network_interface(&self) -> ::std::option::Option<&crate::types::Ec2NetworkInterface> {
        self.ec2_network_interface.as_ref()
    }
    /// <p>Contains information about the Amazon S3 object.</p>
    pub fn s3_object(&self) -> ::std::option::Option<&crate::types::S3Object> {
        self.s3_object.as_ref()
    }
    /// <p>Contains detailed information about the Amazon EKS cluster associated with the activity that prompted GuardDuty to generate a finding.</p>
    pub fn eks_cluster(&self) -> ::std::option::Option<&crate::types::EksCluster> {
        self.eks_cluster.as_ref()
    }
    /// <p>Contains detailed information about the Kubernetes workload associated with the activity that prompted GuardDuty to generate a finding.</p>
    pub fn kubernetes_workload(&self) -> ::std::option::Option<&crate::types::KubernetesWorkload> {
        self.kubernetes_workload.as_ref()
    }
    /// <p>Contains detailed information about the container associated with the activity that prompted GuardDuty to generate a finding.</p>
    pub fn container(&self) -> ::std::option::Option<&crate::types::ContainerFindingResource> {
        self.container.as_ref()
    }
}
impl ResourceData {
    /// Creates a new builder-style object to manufacture [`ResourceData`](crate::types::ResourceData).
    pub fn builder() -> crate::types::builders::ResourceDataBuilder {
        crate::types::builders::ResourceDataBuilder::default()
    }
}

/// A builder for [`ResourceData`](crate::types::ResourceData).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ResourceDataBuilder {
    pub(crate) s3_bucket: ::std::option::Option<crate::types::S3Bucket>,
    pub(crate) ec2_instance: ::std::option::Option<crate::types::Ec2Instance>,
    pub(crate) access_key: ::std::option::Option<crate::types::AccessKey>,
    pub(crate) ec2_network_interface: ::std::option::Option<crate::types::Ec2NetworkInterface>,
    pub(crate) s3_object: ::std::option::Option<crate::types::S3Object>,
    pub(crate) eks_cluster: ::std::option::Option<crate::types::EksCluster>,
    pub(crate) kubernetes_workload: ::std::option::Option<crate::types::KubernetesWorkload>,
    pub(crate) container: ::std::option::Option<crate::types::ContainerFindingResource>,
}
impl ResourceDataBuilder {
    /// <p>Contains information about the Amazon S3 bucket.</p>
    pub fn s3_bucket(mut self, input: crate::types::S3Bucket) -> Self {
        self.s3_bucket = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the Amazon S3 bucket.</p>
    pub fn set_s3_bucket(mut self, input: ::std::option::Option<crate::types::S3Bucket>) -> Self {
        self.s3_bucket = input;
        self
    }
    /// <p>Contains information about the Amazon S3 bucket.</p>
    pub fn get_s3_bucket(&self) -> &::std::option::Option<crate::types::S3Bucket> {
        &self.s3_bucket
    }
    /// <p>Contains information about the Amazon EC2 instance.</p>
    pub fn ec2_instance(mut self, input: crate::types::Ec2Instance) -> Self {
        self.ec2_instance = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the Amazon EC2 instance.</p>
    pub fn set_ec2_instance(mut self, input: ::std::option::Option<crate::types::Ec2Instance>) -> Self {
        self.ec2_instance = input;
        self
    }
    /// <p>Contains information about the Amazon EC2 instance.</p>
    pub fn get_ec2_instance(&self) -> &::std::option::Option<crate::types::Ec2Instance> {
        &self.ec2_instance
    }
    /// <p>Contains information about the IAM access key details of a user that involved in the GuardDuty finding.</p>
    pub fn access_key(mut self, input: crate::types::AccessKey) -> Self {
        self.access_key = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the IAM access key details of a user that involved in the GuardDuty finding.</p>
    pub fn set_access_key(mut self, input: ::std::option::Option<crate::types::AccessKey>) -> Self {
        self.access_key = input;
        self
    }
    /// <p>Contains information about the IAM access key details of a user that involved in the GuardDuty finding.</p>
    pub fn get_access_key(&self) -> &::std::option::Option<crate::types::AccessKey> {
        &self.access_key
    }
    /// <p>Contains information about the elastic network interface of the Amazon EC2 instance.</p>
    pub fn ec2_network_interface(mut self, input: crate::types::Ec2NetworkInterface) -> Self {
        self.ec2_network_interface = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the elastic network interface of the Amazon EC2 instance.</p>
    pub fn set_ec2_network_interface(mut self, input: ::std::option::Option<crate::types::Ec2NetworkInterface>) -> Self {
        self.ec2_network_interface = input;
        self
    }
    /// <p>Contains information about the elastic network interface of the Amazon EC2 instance.</p>
    pub fn get_ec2_network_interface(&self) -> &::std::option::Option<crate::types::Ec2NetworkInterface> {
        &self.ec2_network_interface
    }
    /// <p>Contains information about the Amazon S3 object.</p>
    pub fn s3_object(mut self, input: crate::types::S3Object) -> Self {
        self.s3_object = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the Amazon S3 object.</p>
    pub fn set_s3_object(mut self, input: ::std::option::Option<crate::types::S3Object>) -> Self {
        self.s3_object = input;
        self
    }
    /// <p>Contains information about the Amazon S3 object.</p>
    pub fn get_s3_object(&self) -> &::std::option::Option<crate::types::S3Object> {
        &self.s3_object
    }
    /// <p>Contains detailed information about the Amazon EKS cluster associated with the activity that prompted GuardDuty to generate a finding.</p>
    pub fn eks_cluster(mut self, input: crate::types::EksCluster) -> Self {
        self.eks_cluster = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains detailed information about the Amazon EKS cluster associated with the activity that prompted GuardDuty to generate a finding.</p>
    pub fn set_eks_cluster(mut self, input: ::std::option::Option<crate::types::EksCluster>) -> Self {
        self.eks_cluster = input;
        self
    }
    /// <p>Contains detailed information about the Amazon EKS cluster associated with the activity that prompted GuardDuty to generate a finding.</p>
    pub fn get_eks_cluster(&self) -> &::std::option::Option<crate::types::EksCluster> {
        &self.eks_cluster
    }
    /// <p>Contains detailed information about the Kubernetes workload associated with the activity that prompted GuardDuty to generate a finding.</p>
    pub fn kubernetes_workload(mut self, input: crate::types::KubernetesWorkload) -> Self {
        self.kubernetes_workload = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains detailed information about the Kubernetes workload associated with the activity that prompted GuardDuty to generate a finding.</p>
    pub fn set_kubernetes_workload(mut self, input: ::std::option::Option<crate::types::KubernetesWorkload>) -> Self {
        self.kubernetes_workload = input;
        self
    }
    /// <p>Contains detailed information about the Kubernetes workload associated with the activity that prompted GuardDuty to generate a finding.</p>
    pub fn get_kubernetes_workload(&self) -> &::std::option::Option<crate::types::KubernetesWorkload> {
        &self.kubernetes_workload
    }
    /// <p>Contains detailed information about the container associated with the activity that prompted GuardDuty to generate a finding.</p>
    pub fn container(mut self, input: crate::types::ContainerFindingResource) -> Self {
        self.container = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains detailed information about the container associated with the activity that prompted GuardDuty to generate a finding.</p>
    pub fn set_container(mut self, input: ::std::option::Option<crate::types::ContainerFindingResource>) -> Self {
        self.container = input;
        self
    }
    /// <p>Contains detailed information about the container associated with the activity that prompted GuardDuty to generate a finding.</p>
    pub fn get_container(&self) -> &::std::option::Option<crate::types::ContainerFindingResource> {
        &self.container
    }
    /// Consumes the builder and constructs a [`ResourceData`](crate::types::ResourceData).
    pub fn build(self) -> crate::types::ResourceData {
        crate::types::ResourceData {
            s3_bucket: self.s3_bucket,
            ec2_instance: self.ec2_instance,
            access_key: self.access_key,
            ec2_network_interface: self.ec2_network_interface,
            s3_object: self.s3_object,
            eks_cluster: self.eks_cluster,
            kubernetes_workload: self.kubernetes_workload,
            container: self.container,
        }
    }
}
