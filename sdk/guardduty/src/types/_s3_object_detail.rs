// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the S3 object that was scanned</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3ObjectDetail {
    /// <p>Amazon Resource Name (ARN) of the S3 object.</p>
    pub object_arn: ::std::option::Option<::std::string::String>,
    /// <p>Key of the S3 object.</p>
    pub key: ::std::option::Option<::std::string::String>,
    /// <p>The entity tag is a hash of the S3 object. The ETag reflects changes only to the contents of an object, and not its metadata.</p>
    pub e_tag: ::std::option::Option<::std::string::String>,
    /// <p>Hash of the threat detected in this finding.</p>
    pub hash: ::std::option::Option<::std::string::String>,
    /// <p>Version ID of the object.</p>
    pub version_id: ::std::option::Option<::std::string::String>,
}
impl S3ObjectDetail {
    /// <p>Amazon Resource Name (ARN) of the S3 object.</p>
    pub fn object_arn(&self) -> ::std::option::Option<&str> {
        self.object_arn.as_deref()
    }
    /// <p>Key of the S3 object.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The entity tag is a hash of the S3 object. The ETag reflects changes only to the contents of an object, and not its metadata.</p>
    pub fn e_tag(&self) -> ::std::option::Option<&str> {
        self.e_tag.as_deref()
    }
    /// <p>Hash of the threat detected in this finding.</p>
    pub fn hash(&self) -> ::std::option::Option<&str> {
        self.hash.as_deref()
    }
    /// <p>Version ID of the object.</p>
    pub fn version_id(&self) -> ::std::option::Option<&str> {
        self.version_id.as_deref()
    }
}
impl S3ObjectDetail {
    /// Creates a new builder-style object to manufacture [`S3ObjectDetail`](crate::types::S3ObjectDetail).
    pub fn builder() -> crate::types::builders::S3ObjectDetailBuilder {
        crate::types::builders::S3ObjectDetailBuilder::default()
    }
}

/// A builder for [`S3ObjectDetail`](crate::types::S3ObjectDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct S3ObjectDetailBuilder {
    pub(crate) object_arn: ::std::option::Option<::std::string::String>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) e_tag: ::std::option::Option<::std::string::String>,
    pub(crate) hash: ::std::option::Option<::std::string::String>,
    pub(crate) version_id: ::std::option::Option<::std::string::String>,
}
impl S3ObjectDetailBuilder {
    /// <p>Amazon Resource Name (ARN) of the S3 object.</p>
    pub fn object_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.object_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the S3 object.</p>
    pub fn set_object_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.object_arn = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) of the S3 object.</p>
    pub fn get_object_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.object_arn
    }
    /// <p>Key of the S3 object.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Key of the S3 object.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>Key of the S3 object.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>The entity tag is a hash of the S3 object. The ETag reflects changes only to the contents of an object, and not its metadata.</p>
    pub fn e_tag(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.e_tag = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The entity tag is a hash of the S3 object. The ETag reflects changes only to the contents of an object, and not its metadata.</p>
    pub fn set_e_tag(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.e_tag = input;
        self
    }
    /// <p>The entity tag is a hash of the S3 object. The ETag reflects changes only to the contents of an object, and not its metadata.</p>
    pub fn get_e_tag(&self) -> &::std::option::Option<::std::string::String> {
        &self.e_tag
    }
    /// <p>Hash of the threat detected in this finding.</p>
    pub fn hash(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hash = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Hash of the threat detected in this finding.</p>
    pub fn set_hash(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hash = input;
        self
    }
    /// <p>Hash of the threat detected in this finding.</p>
    pub fn get_hash(&self) -> &::std::option::Option<::std::string::String> {
        &self.hash
    }
    /// <p>Version ID of the object.</p>
    pub fn version_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Version ID of the object.</p>
    pub fn set_version_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_id = input;
        self
    }
    /// <p>Version ID of the object.</p>
    pub fn get_version_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_id
    }
    /// Consumes the builder and constructs a [`S3ObjectDetail`](crate::types::S3ObjectDetail).
    pub fn build(self) -> crate::types::S3ObjectDetail {
        crate::types::S3ObjectDetail {
            object_arn: self.object_arn,
            key: self.key,
            e_tag: self.e_tag,
            hash: self.hash,
            version_id: self.version_id,
        }
    }
}
