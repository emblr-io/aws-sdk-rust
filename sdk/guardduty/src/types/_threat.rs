// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the detected threats associated with the generated finding.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Threat {
    /// <p>Name of the detected threat that caused GuardDuty to generate this finding.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Source of the threat that generated this finding.</p>
    pub source: ::std::option::Option<::std::string::String>,
    /// <p>Information about the nested item path and hash of the protected resource.</p>
    pub item_paths: ::std::option::Option<::std::vec::Vec<crate::types::ItemPath>>,
}
impl Threat {
    /// <p>Name of the detected threat that caused GuardDuty to generate this finding.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Source of the threat that generated this finding.</p>
    pub fn source(&self) -> ::std::option::Option<&str> {
        self.source.as_deref()
    }
    /// <p>Information about the nested item path and hash of the protected resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.item_paths.is_none()`.
    pub fn item_paths(&self) -> &[crate::types::ItemPath] {
        self.item_paths.as_deref().unwrap_or_default()
    }
}
impl Threat {
    /// Creates a new builder-style object to manufacture [`Threat`](crate::types::Threat).
    pub fn builder() -> crate::types::builders::ThreatBuilder {
        crate::types::builders::ThreatBuilder::default()
    }
}

/// A builder for [`Threat`](crate::types::Threat).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ThreatBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) source: ::std::option::Option<::std::string::String>,
    pub(crate) item_paths: ::std::option::Option<::std::vec::Vec<crate::types::ItemPath>>,
}
impl ThreatBuilder {
    /// <p>Name of the detected threat that caused GuardDuty to generate this finding.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the detected threat that caused GuardDuty to generate this finding.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the detected threat that caused GuardDuty to generate this finding.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Source of the threat that generated this finding.</p>
    pub fn source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Source of the threat that generated this finding.</p>
    pub fn set_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// <p>Source of the threat that generated this finding.</p>
    pub fn get_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.source
    }
    /// Appends an item to `item_paths`.
    ///
    /// To override the contents of this collection use [`set_item_paths`](Self::set_item_paths).
    ///
    /// <p>Information about the nested item path and hash of the protected resource.</p>
    pub fn item_paths(mut self, input: crate::types::ItemPath) -> Self {
        let mut v = self.item_paths.unwrap_or_default();
        v.push(input);
        self.item_paths = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the nested item path and hash of the protected resource.</p>
    pub fn set_item_paths(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ItemPath>>) -> Self {
        self.item_paths = input;
        self
    }
    /// <p>Information about the nested item path and hash of the protected resource.</p>
    pub fn get_item_paths(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ItemPath>> {
        &self.item_paths
    }
    /// Consumes the builder and constructs a [`Threat`](crate::types::Threat).
    pub fn build(self) -> crate::types::Threat {
        crate::types::Threat {
            name: self.name,
            source: self.source,
            item_paths: self.item_paths,
        }
    }
}
