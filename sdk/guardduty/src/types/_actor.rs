// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the actors involved in an attack sequence.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Actor {
    /// <p>ID of the threat actor.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>Contains information about the user credentials used by the threat actor.</p>
    pub user: ::std::option::Option<crate::types::User>,
    /// <p>Contains information about the user session where the activity initiated.</p>
    pub session: ::std::option::Option<crate::types::Session>,
    /// <p>Contains information about the process associated with the threat actor. This includes details such as process name, path, execution time, and unique identifiers that help track the actor's activities within the system.</p>
    pub process: ::std::option::Option<crate::types::ActorProcess>,
}
impl Actor {
    /// <p>ID of the threat actor.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Contains information about the user credentials used by the threat actor.</p>
    pub fn user(&self) -> ::std::option::Option<&crate::types::User> {
        self.user.as_ref()
    }
    /// <p>Contains information about the user session where the activity initiated.</p>
    pub fn session(&self) -> ::std::option::Option<&crate::types::Session> {
        self.session.as_ref()
    }
    /// <p>Contains information about the process associated with the threat actor. This includes details such as process name, path, execution time, and unique identifiers that help track the actor's activities within the system.</p>
    pub fn process(&self) -> ::std::option::Option<&crate::types::ActorProcess> {
        self.process.as_ref()
    }
}
impl Actor {
    /// Creates a new builder-style object to manufacture [`Actor`](crate::types::Actor).
    pub fn builder() -> crate::types::builders::ActorBuilder {
        crate::types::builders::ActorBuilder::default()
    }
}

/// A builder for [`Actor`](crate::types::Actor).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ActorBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) user: ::std::option::Option<crate::types::User>,
    pub(crate) session: ::std::option::Option<crate::types::Session>,
    pub(crate) process: ::std::option::Option<crate::types::ActorProcess>,
}
impl ActorBuilder {
    /// <p>ID of the threat actor.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the threat actor.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>ID of the threat actor.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Contains information about the user credentials used by the threat actor.</p>
    pub fn user(mut self, input: crate::types::User) -> Self {
        self.user = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the user credentials used by the threat actor.</p>
    pub fn set_user(mut self, input: ::std::option::Option<crate::types::User>) -> Self {
        self.user = input;
        self
    }
    /// <p>Contains information about the user credentials used by the threat actor.</p>
    pub fn get_user(&self) -> &::std::option::Option<crate::types::User> {
        &self.user
    }
    /// <p>Contains information about the user session where the activity initiated.</p>
    pub fn session(mut self, input: crate::types::Session) -> Self {
        self.session = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the user session where the activity initiated.</p>
    pub fn set_session(mut self, input: ::std::option::Option<crate::types::Session>) -> Self {
        self.session = input;
        self
    }
    /// <p>Contains information about the user session where the activity initiated.</p>
    pub fn get_session(&self) -> &::std::option::Option<crate::types::Session> {
        &self.session
    }
    /// <p>Contains information about the process associated with the threat actor. This includes details such as process name, path, execution time, and unique identifiers that help track the actor's activities within the system.</p>
    pub fn process(mut self, input: crate::types::ActorProcess) -> Self {
        self.process = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the process associated with the threat actor. This includes details such as process name, path, execution time, and unique identifiers that help track the actor's activities within the system.</p>
    pub fn set_process(mut self, input: ::std::option::Option<crate::types::ActorProcess>) -> Self {
        self.process = input;
        self
    }
    /// <p>Contains information about the process associated with the threat actor. This includes details such as process name, path, execution time, and unique identifiers that help track the actor's activities within the system.</p>
    pub fn get_process(&self) -> &::std::option::Option<crate::types::ActorProcess> {
        &self.process
    }
    /// Consumes the builder and constructs a [`Actor`](crate::types::Actor).
    pub fn build(self) -> crate::types::Actor {
        crate::types::Actor {
            id: self.id,
            user: self.user,
            session: self.session,
            process: self.process,
        }
    }
}
