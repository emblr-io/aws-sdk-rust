// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about whether the tags will be added to the S3 object after scanning.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MalwareProtectionPlanActions {
    /// <p>Indicates whether the scanned S3 object will have tags about the scan result.</p>
    pub tagging: ::std::option::Option<crate::types::MalwareProtectionPlanTaggingAction>,
}
impl MalwareProtectionPlanActions {
    /// <p>Indicates whether the scanned S3 object will have tags about the scan result.</p>
    pub fn tagging(&self) -> ::std::option::Option<&crate::types::MalwareProtectionPlanTaggingAction> {
        self.tagging.as_ref()
    }
}
impl MalwareProtectionPlanActions {
    /// Creates a new builder-style object to manufacture [`MalwareProtectionPlanActions`](crate::types::MalwareProtectionPlanActions).
    pub fn builder() -> crate::types::builders::MalwareProtectionPlanActionsBuilder {
        crate::types::builders::MalwareProtectionPlanActionsBuilder::default()
    }
}

/// A builder for [`MalwareProtectionPlanActions`](crate::types::MalwareProtectionPlanActions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MalwareProtectionPlanActionsBuilder {
    pub(crate) tagging: ::std::option::Option<crate::types::MalwareProtectionPlanTaggingAction>,
}
impl MalwareProtectionPlanActionsBuilder {
    /// <p>Indicates whether the scanned S3 object will have tags about the scan result.</p>
    pub fn tagging(mut self, input: crate::types::MalwareProtectionPlanTaggingAction) -> Self {
        self.tagging = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the scanned S3 object will have tags about the scan result.</p>
    pub fn set_tagging(mut self, input: ::std::option::Option<crate::types::MalwareProtectionPlanTaggingAction>) -> Self {
        self.tagging = input;
        self
    }
    /// <p>Indicates whether the scanned S3 object will have tags about the scan result.</p>
    pub fn get_tagging(&self) -> &::std::option::Option<crate::types::MalwareProtectionPlanTaggingAction> {
        &self.tagging
    }
    /// Consumes the builder and constructs a [`MalwareProtectionPlanActions`](crate::types::MalwareProtectionPlanActions).
    pub fn build(self) -> crate::types::MalwareProtectionPlanActions {
        crate::types::MalwareProtectionPlanActions { tagging: self.tagging }
    }
}
