// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the access keys.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccessKey {
    /// <p>Principal ID of the user.</p>
    pub principal_id: ::std::option::Option<::std::string::String>,
    /// <p>Name of the user.</p>
    pub user_name: ::std::option::Option<::std::string::String>,
    /// <p>Type of the user.</p>
    pub user_type: ::std::option::Option<::std::string::String>,
}
impl AccessKey {
    /// <p>Principal ID of the user.</p>
    pub fn principal_id(&self) -> ::std::option::Option<&str> {
        self.principal_id.as_deref()
    }
    /// <p>Name of the user.</p>
    pub fn user_name(&self) -> ::std::option::Option<&str> {
        self.user_name.as_deref()
    }
    /// <p>Type of the user.</p>
    pub fn user_type(&self) -> ::std::option::Option<&str> {
        self.user_type.as_deref()
    }
}
impl AccessKey {
    /// Creates a new builder-style object to manufacture [`AccessKey`](crate::types::AccessKey).
    pub fn builder() -> crate::types::builders::AccessKeyBuilder {
        crate::types::builders::AccessKeyBuilder::default()
    }
}

/// A builder for [`AccessKey`](crate::types::AccessKey).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AccessKeyBuilder {
    pub(crate) principal_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_name: ::std::option::Option<::std::string::String>,
    pub(crate) user_type: ::std::option::Option<::std::string::String>,
}
impl AccessKeyBuilder {
    /// <p>Principal ID of the user.</p>
    pub fn principal_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Principal ID of the user.</p>
    pub fn set_principal_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal_id = input;
        self
    }
    /// <p>Principal ID of the user.</p>
    pub fn get_principal_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal_id
    }
    /// <p>Name of the user.</p>
    pub fn user_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the user.</p>
    pub fn set_user_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// <p>Name of the user.</p>
    pub fn get_user_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_name
    }
    /// <p>Type of the user.</p>
    pub fn user_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Type of the user.</p>
    pub fn set_user_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_type = input;
        self
    }
    /// <p>Type of the user.</p>
    pub fn get_user_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_type
    }
    /// Consumes the builder and constructs a [`AccessKey`](crate::types::AccessKey).
    pub fn build(self) -> crate::types::AccessKey {
        crate::types::AccessKey {
            principal_id: self.principal_id,
            user_name: self.user_name,
            user_type: self.user_type,
        }
    }
}
