// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the GuardDuty attack sequence finding.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Sequence {
    /// <p>Unique identifier of the attack sequence.</p>
    pub uid: ::std::option::Option<::std::string::String>,
    /// <p>Description of the attack sequence.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Contains information about the actors involved in the attack sequence.</p>
    pub actors: ::std::option::Option<::std::vec::Vec<crate::types::Actor>>,
    /// <p>Contains information about the resources involved in the attack sequence.</p>
    pub resources: ::std::option::Option<::std::vec::Vec<crate::types::ResourceV2>>,
    /// <p>Contains information about the network endpoints that were used in the attack sequence.</p>
    pub endpoints: ::std::option::Option<::std::vec::Vec<crate::types::NetworkEndpoint>>,
    /// <p>Contains information about the signals involved in the attack sequence.</p>
    pub signals: ::std::option::Option<::std::vec::Vec<crate::types::Signal>>,
    /// <p>Contains information about the indicators observed in the attack sequence.</p>
    pub sequence_indicators: ::std::option::Option<::std::vec::Vec<crate::types::Indicator>>,
    /// <p>Additional types of sequences that may be associated with the attack sequence finding, providing further context about the nature of the detected threat.</p>
    pub additional_sequence_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl Sequence {
    /// <p>Unique identifier of the attack sequence.</p>
    pub fn uid(&self) -> ::std::option::Option<&str> {
        self.uid.as_deref()
    }
    /// <p>Description of the attack sequence.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Contains information about the actors involved in the attack sequence.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.actors.is_none()`.
    pub fn actors(&self) -> &[crate::types::Actor] {
        self.actors.as_deref().unwrap_or_default()
    }
    /// <p>Contains information about the resources involved in the attack sequence.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resources.is_none()`.
    pub fn resources(&self) -> &[crate::types::ResourceV2] {
        self.resources.as_deref().unwrap_or_default()
    }
    /// <p>Contains information about the network endpoints that were used in the attack sequence.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.endpoints.is_none()`.
    pub fn endpoints(&self) -> &[crate::types::NetworkEndpoint] {
        self.endpoints.as_deref().unwrap_or_default()
    }
    /// <p>Contains information about the signals involved in the attack sequence.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.signals.is_none()`.
    pub fn signals(&self) -> &[crate::types::Signal] {
        self.signals.as_deref().unwrap_or_default()
    }
    /// <p>Contains information about the indicators observed in the attack sequence.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sequence_indicators.is_none()`.
    pub fn sequence_indicators(&self) -> &[crate::types::Indicator] {
        self.sequence_indicators.as_deref().unwrap_or_default()
    }
    /// <p>Additional types of sequences that may be associated with the attack sequence finding, providing further context about the nature of the detected threat.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.additional_sequence_types.is_none()`.
    pub fn additional_sequence_types(&self) -> &[::std::string::String] {
        self.additional_sequence_types.as_deref().unwrap_or_default()
    }
}
impl Sequence {
    /// Creates a new builder-style object to manufacture [`Sequence`](crate::types::Sequence).
    pub fn builder() -> crate::types::builders::SequenceBuilder {
        crate::types::builders::SequenceBuilder::default()
    }
}

/// A builder for [`Sequence`](crate::types::Sequence).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SequenceBuilder {
    pub(crate) uid: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) actors: ::std::option::Option<::std::vec::Vec<crate::types::Actor>>,
    pub(crate) resources: ::std::option::Option<::std::vec::Vec<crate::types::ResourceV2>>,
    pub(crate) endpoints: ::std::option::Option<::std::vec::Vec<crate::types::NetworkEndpoint>>,
    pub(crate) signals: ::std::option::Option<::std::vec::Vec<crate::types::Signal>>,
    pub(crate) sequence_indicators: ::std::option::Option<::std::vec::Vec<crate::types::Indicator>>,
    pub(crate) additional_sequence_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SequenceBuilder {
    /// <p>Unique identifier of the attack sequence.</p>
    /// This field is required.
    pub fn uid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.uid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier of the attack sequence.</p>
    pub fn set_uid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.uid = input;
        self
    }
    /// <p>Unique identifier of the attack sequence.</p>
    pub fn get_uid(&self) -> &::std::option::Option<::std::string::String> {
        &self.uid
    }
    /// <p>Description of the attack sequence.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Description of the attack sequence.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Description of the attack sequence.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `actors`.
    ///
    /// To override the contents of this collection use [`set_actors`](Self::set_actors).
    ///
    /// <p>Contains information about the actors involved in the attack sequence.</p>
    pub fn actors(mut self, input: crate::types::Actor) -> Self {
        let mut v = self.actors.unwrap_or_default();
        v.push(input);
        self.actors = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains information about the actors involved in the attack sequence.</p>
    pub fn set_actors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Actor>>) -> Self {
        self.actors = input;
        self
    }
    /// <p>Contains information about the actors involved in the attack sequence.</p>
    pub fn get_actors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Actor>> {
        &self.actors
    }
    /// Appends an item to `resources`.
    ///
    /// To override the contents of this collection use [`set_resources`](Self::set_resources).
    ///
    /// <p>Contains information about the resources involved in the attack sequence.</p>
    pub fn resources(mut self, input: crate::types::ResourceV2) -> Self {
        let mut v = self.resources.unwrap_or_default();
        v.push(input);
        self.resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains information about the resources involved in the attack sequence.</p>
    pub fn set_resources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourceV2>>) -> Self {
        self.resources = input;
        self
    }
    /// <p>Contains information about the resources involved in the attack sequence.</p>
    pub fn get_resources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourceV2>> {
        &self.resources
    }
    /// Appends an item to `endpoints`.
    ///
    /// To override the contents of this collection use [`set_endpoints`](Self::set_endpoints).
    ///
    /// <p>Contains information about the network endpoints that were used in the attack sequence.</p>
    pub fn endpoints(mut self, input: crate::types::NetworkEndpoint) -> Self {
        let mut v = self.endpoints.unwrap_or_default();
        v.push(input);
        self.endpoints = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains information about the network endpoints that were used in the attack sequence.</p>
    pub fn set_endpoints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NetworkEndpoint>>) -> Self {
        self.endpoints = input;
        self
    }
    /// <p>Contains information about the network endpoints that were used in the attack sequence.</p>
    pub fn get_endpoints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NetworkEndpoint>> {
        &self.endpoints
    }
    /// Appends an item to `signals`.
    ///
    /// To override the contents of this collection use [`set_signals`](Self::set_signals).
    ///
    /// <p>Contains information about the signals involved in the attack sequence.</p>
    pub fn signals(mut self, input: crate::types::Signal) -> Self {
        let mut v = self.signals.unwrap_or_default();
        v.push(input);
        self.signals = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains information about the signals involved in the attack sequence.</p>
    pub fn set_signals(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Signal>>) -> Self {
        self.signals = input;
        self
    }
    /// <p>Contains information about the signals involved in the attack sequence.</p>
    pub fn get_signals(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Signal>> {
        &self.signals
    }
    /// Appends an item to `sequence_indicators`.
    ///
    /// To override the contents of this collection use [`set_sequence_indicators`](Self::set_sequence_indicators).
    ///
    /// <p>Contains information about the indicators observed in the attack sequence.</p>
    pub fn sequence_indicators(mut self, input: crate::types::Indicator) -> Self {
        let mut v = self.sequence_indicators.unwrap_or_default();
        v.push(input);
        self.sequence_indicators = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains information about the indicators observed in the attack sequence.</p>
    pub fn set_sequence_indicators(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Indicator>>) -> Self {
        self.sequence_indicators = input;
        self
    }
    /// <p>Contains information about the indicators observed in the attack sequence.</p>
    pub fn get_sequence_indicators(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Indicator>> {
        &self.sequence_indicators
    }
    /// Appends an item to `additional_sequence_types`.
    ///
    /// To override the contents of this collection use [`set_additional_sequence_types`](Self::set_additional_sequence_types).
    ///
    /// <p>Additional types of sequences that may be associated with the attack sequence finding, providing further context about the nature of the detected threat.</p>
    pub fn additional_sequence_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.additional_sequence_types.unwrap_or_default();
        v.push(input.into());
        self.additional_sequence_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>Additional types of sequences that may be associated with the attack sequence finding, providing further context about the nature of the detected threat.</p>
    pub fn set_additional_sequence_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.additional_sequence_types = input;
        self
    }
    /// <p>Additional types of sequences that may be associated with the attack sequence finding, providing further context about the nature of the detected threat.</p>
    pub fn get_additional_sequence_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.additional_sequence_types
    }
    /// Consumes the builder and constructs a [`Sequence`](crate::types::Sequence).
    pub fn build(self) -> crate::types::Sequence {
        crate::types::Sequence {
            uid: self.uid,
            description: self.description,
            actors: self.actors,
            resources: self.resources,
            endpoints: self.endpoints,
            signals: self.signals,
            sequence_indicators: self.sequence_indicators,
            additional_sequence_types: self.additional_sequence_types,
        }
    }
}
