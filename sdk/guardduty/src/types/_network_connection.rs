// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the network connection.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NetworkConnection {
    /// <p>The direction in which the network traffic is flowing.</p>
    pub direction: ::std::option::Option<crate::types::NetworkDirection>,
}
impl NetworkConnection {
    /// <p>The direction in which the network traffic is flowing.</p>
    pub fn direction(&self) -> ::std::option::Option<&crate::types::NetworkDirection> {
        self.direction.as_ref()
    }
}
impl NetworkConnection {
    /// Creates a new builder-style object to manufacture [`NetworkConnection`](crate::types::NetworkConnection).
    pub fn builder() -> crate::types::builders::NetworkConnectionBuilder {
        crate::types::builders::NetworkConnectionBuilder::default()
    }
}

/// A builder for [`NetworkConnection`](crate::types::NetworkConnection).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NetworkConnectionBuilder {
    pub(crate) direction: ::std::option::Option<crate::types::NetworkDirection>,
}
impl NetworkConnectionBuilder {
    /// <p>The direction in which the network traffic is flowing.</p>
    /// This field is required.
    pub fn direction(mut self, input: crate::types::NetworkDirection) -> Self {
        self.direction = ::std::option::Option::Some(input);
        self
    }
    /// <p>The direction in which the network traffic is flowing.</p>
    pub fn set_direction(mut self, input: ::std::option::Option<crate::types::NetworkDirection>) -> Self {
        self.direction = input;
        self
    }
    /// <p>The direction in which the network traffic is flowing.</p>
    pub fn get_direction(&self) -> &::std::option::Option<crate::types::NetworkDirection> {
        &self.direction
    }
    /// Consumes the builder and constructs a [`NetworkConnection`](crate::types::NetworkConnection).
    pub fn build(self) -> crate::types::NetworkConnection {
        crate::types::NetworkConnection { direction: self.direction }
    }
}
