// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the malware scan that generated a GuardDuty finding.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MalwareScanDetails {
    /// <p>Information about the detected threats associated with the generated GuardDuty finding.</p>
    pub threats: ::std::option::Option<::std::vec::Vec<crate::types::Threat>>,
}
impl MalwareScanDetails {
    /// <p>Information about the detected threats associated with the generated GuardDuty finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.threats.is_none()`.
    pub fn threats(&self) -> &[crate::types::Threat] {
        self.threats.as_deref().unwrap_or_default()
    }
}
impl MalwareScanDetails {
    /// Creates a new builder-style object to manufacture [`MalwareScanDetails`](crate::types::MalwareScanDetails).
    pub fn builder() -> crate::types::builders::MalwareScanDetailsBuilder {
        crate::types::builders::MalwareScanDetailsBuilder::default()
    }
}

/// A builder for [`MalwareScanDetails`](crate::types::MalwareScanDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MalwareScanDetailsBuilder {
    pub(crate) threats: ::std::option::Option<::std::vec::Vec<crate::types::Threat>>,
}
impl MalwareScanDetailsBuilder {
    /// Appends an item to `threats`.
    ///
    /// To override the contents of this collection use [`set_threats`](Self::set_threats).
    ///
    /// <p>Information about the detected threats associated with the generated GuardDuty finding.</p>
    pub fn threats(mut self, input: crate::types::Threat) -> Self {
        let mut v = self.threats.unwrap_or_default();
        v.push(input);
        self.threats = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the detected threats associated with the generated GuardDuty finding.</p>
    pub fn set_threats(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Threat>>) -> Self {
        self.threats = input;
        self
    }
    /// <p>Information about the detected threats associated with the generated GuardDuty finding.</p>
    pub fn get_threats(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Threat>> {
        &self.threats
    }
    /// Consumes the builder and constructs a [`MalwareScanDetails`](crate::types::MalwareScanDetails).
    pub fn build(self) -> crate::types::MalwareScanDetails {
        crate::types::MalwareScanDetails { threats: self.threats }
    }
}
