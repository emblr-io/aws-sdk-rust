// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about container resources involved in a GuardDuty finding. This structure provides details about containers that were identified as part of suspicious or malicious activity.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContainerFindingResource {
    /// <p>The container image information, including the image name and tag used to run the container that was involved in the finding.</p>
    pub image: ::std::option::Option<::std::string::String>,
    /// <p>The unique ID associated with the container image.</p>
    pub image_uid: ::std::option::Option<::std::string::String>,
}
impl ContainerFindingResource {
    /// <p>The container image information, including the image name and tag used to run the container that was involved in the finding.</p>
    pub fn image(&self) -> ::std::option::Option<&str> {
        self.image.as_deref()
    }
    /// <p>The unique ID associated with the container image.</p>
    pub fn image_uid(&self) -> ::std::option::Option<&str> {
        self.image_uid.as_deref()
    }
}
impl ContainerFindingResource {
    /// Creates a new builder-style object to manufacture [`ContainerFindingResource`](crate::types::ContainerFindingResource).
    pub fn builder() -> crate::types::builders::ContainerFindingResourceBuilder {
        crate::types::builders::ContainerFindingResourceBuilder::default()
    }
}

/// A builder for [`ContainerFindingResource`](crate::types::ContainerFindingResource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContainerFindingResourceBuilder {
    pub(crate) image: ::std::option::Option<::std::string::String>,
    pub(crate) image_uid: ::std::option::Option<::std::string::String>,
}
impl ContainerFindingResourceBuilder {
    /// <p>The container image information, including the image name and tag used to run the container that was involved in the finding.</p>
    /// This field is required.
    pub fn image(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The container image information, including the image name and tag used to run the container that was involved in the finding.</p>
    pub fn set_image(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image = input;
        self
    }
    /// <p>The container image information, including the image name and tag used to run the container that was involved in the finding.</p>
    pub fn get_image(&self) -> &::std::option::Option<::std::string::String> {
        &self.image
    }
    /// <p>The unique ID associated with the container image.</p>
    pub fn image_uid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_uid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID associated with the container image.</p>
    pub fn set_image_uid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_uid = input;
        self
    }
    /// <p>The unique ID associated with the container image.</p>
    pub fn get_image_uid(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_uid
    }
    /// Consumes the builder and constructs a [`ContainerFindingResource`](crate::types::ContainerFindingResource).
    pub fn build(self) -> crate::types::ContainerFindingResource {
        crate::types::ContainerFindingResource {
            image: self.image,
            image_uid: self.image_uid,
        }
    }
}
