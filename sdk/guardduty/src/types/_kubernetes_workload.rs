// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about Kubernetes workloads involved in a GuardDuty finding, including pods, deployments, and other Kubernetes resources.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KubernetesWorkload {
    /// <p>A list of unique identifiers for the containers that are part of the Kubernetes workload.</p>
    pub container_uids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The Kubernetes namespace in which the workload is running, providing logical isolation within the cluster.</p>
    pub namespace: ::std::option::Option<::std::string::String>,
    /// <p>The types of Kubernetes resources involved in the workload.</p>
    pub kubernetes_resources_types: ::std::option::Option<crate::types::KubernetesResourcesTypes>,
}
impl KubernetesWorkload {
    /// <p>A list of unique identifiers for the containers that are part of the Kubernetes workload.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.container_uids.is_none()`.
    pub fn container_uids(&self) -> &[::std::string::String] {
        self.container_uids.as_deref().unwrap_or_default()
    }
    /// <p>The Kubernetes namespace in which the workload is running, providing logical isolation within the cluster.</p>
    pub fn namespace(&self) -> ::std::option::Option<&str> {
        self.namespace.as_deref()
    }
    /// <p>The types of Kubernetes resources involved in the workload.</p>
    pub fn kubernetes_resources_types(&self) -> ::std::option::Option<&crate::types::KubernetesResourcesTypes> {
        self.kubernetes_resources_types.as_ref()
    }
}
impl KubernetesWorkload {
    /// Creates a new builder-style object to manufacture [`KubernetesWorkload`](crate::types::KubernetesWorkload).
    pub fn builder() -> crate::types::builders::KubernetesWorkloadBuilder {
        crate::types::builders::KubernetesWorkloadBuilder::default()
    }
}

/// A builder for [`KubernetesWorkload`](crate::types::KubernetesWorkload).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct KubernetesWorkloadBuilder {
    pub(crate) container_uids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) namespace: ::std::option::Option<::std::string::String>,
    pub(crate) kubernetes_resources_types: ::std::option::Option<crate::types::KubernetesResourcesTypes>,
}
impl KubernetesWorkloadBuilder {
    /// Appends an item to `container_uids`.
    ///
    /// To override the contents of this collection use [`set_container_uids`](Self::set_container_uids).
    ///
    /// <p>A list of unique identifiers for the containers that are part of the Kubernetes workload.</p>
    pub fn container_uids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.container_uids.unwrap_or_default();
        v.push(input.into());
        self.container_uids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of unique identifiers for the containers that are part of the Kubernetes workload.</p>
    pub fn set_container_uids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.container_uids = input;
        self
    }
    /// <p>A list of unique identifiers for the containers that are part of the Kubernetes workload.</p>
    pub fn get_container_uids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.container_uids
    }
    /// <p>The Kubernetes namespace in which the workload is running, providing logical isolation within the cluster.</p>
    pub fn namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.namespace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Kubernetes namespace in which the workload is running, providing logical isolation within the cluster.</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The Kubernetes namespace in which the workload is running, providing logical isolation within the cluster.</p>
    pub fn get_namespace(&self) -> &::std::option::Option<::std::string::String> {
        &self.namespace
    }
    /// <p>The types of Kubernetes resources involved in the workload.</p>
    pub fn kubernetes_resources_types(mut self, input: crate::types::KubernetesResourcesTypes) -> Self {
        self.kubernetes_resources_types = ::std::option::Option::Some(input);
        self
    }
    /// <p>The types of Kubernetes resources involved in the workload.</p>
    pub fn set_kubernetes_resources_types(mut self, input: ::std::option::Option<crate::types::KubernetesResourcesTypes>) -> Self {
        self.kubernetes_resources_types = input;
        self
    }
    /// <p>The types of Kubernetes resources involved in the workload.</p>
    pub fn get_kubernetes_resources_types(&self) -> &::std::option::Option<crate::types::KubernetesResourcesTypes> {
        &self.kubernetes_resources_types
    }
    /// Consumes the builder and constructs a [`KubernetesWorkload`](crate::types::KubernetesWorkload).
    pub fn build(self) -> crate::types::KubernetesWorkload {
        crate::types::KubernetesWorkload {
            container_uids: self.container_uids,
            namespace: self.namespace,
            kubernetes_resources_types: self.kubernetes_resources_types,
        }
    }
}
