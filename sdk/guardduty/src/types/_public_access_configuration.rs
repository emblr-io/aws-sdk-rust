// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes public access policies that apply to the Amazon S3 bucket.</p>
/// <p>For information about each of the following settings, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-block-public-access.html">Blocking public access to your Amazon S3 storage</a> in the <i>Amazon S3 User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PublicAccessConfiguration {
    /// <p>Indicates whether or not there is a setting that allows public access to the Amazon S3 buckets through access control lists (ACLs).</p>
    pub public_acl_access: ::std::option::Option<crate::types::PublicAccessStatus>,
    /// <p>Indicates whether or not there is a setting that allows public access to the Amazon S3 bucket policy.</p>
    pub public_policy_access: ::std::option::Option<crate::types::PublicAccessStatus>,
    /// <p>Indicates whether or not there is a setting that ignores all public access control lists (ACLs) on the Amazon S3 bucket and the objects that it contains.</p>
    pub public_acl_ignore_behavior: ::std::option::Option<crate::types::PublicAclIgnoreBehavior>,
    /// <p>Indicates whether or not there is a setting that restricts access to the bucket with specified policies.</p>
    pub public_bucket_restrict_behavior: ::std::option::Option<crate::types::PublicBucketRestrictBehavior>,
}
impl PublicAccessConfiguration {
    /// <p>Indicates whether or not there is a setting that allows public access to the Amazon S3 buckets through access control lists (ACLs).</p>
    pub fn public_acl_access(&self) -> ::std::option::Option<&crate::types::PublicAccessStatus> {
        self.public_acl_access.as_ref()
    }
    /// <p>Indicates whether or not there is a setting that allows public access to the Amazon S3 bucket policy.</p>
    pub fn public_policy_access(&self) -> ::std::option::Option<&crate::types::PublicAccessStatus> {
        self.public_policy_access.as_ref()
    }
    /// <p>Indicates whether or not there is a setting that ignores all public access control lists (ACLs) on the Amazon S3 bucket and the objects that it contains.</p>
    pub fn public_acl_ignore_behavior(&self) -> ::std::option::Option<&crate::types::PublicAclIgnoreBehavior> {
        self.public_acl_ignore_behavior.as_ref()
    }
    /// <p>Indicates whether or not there is a setting that restricts access to the bucket with specified policies.</p>
    pub fn public_bucket_restrict_behavior(&self) -> ::std::option::Option<&crate::types::PublicBucketRestrictBehavior> {
        self.public_bucket_restrict_behavior.as_ref()
    }
}
impl PublicAccessConfiguration {
    /// Creates a new builder-style object to manufacture [`PublicAccessConfiguration`](crate::types::PublicAccessConfiguration).
    pub fn builder() -> crate::types::builders::PublicAccessConfigurationBuilder {
        crate::types::builders::PublicAccessConfigurationBuilder::default()
    }
}

/// A builder for [`PublicAccessConfiguration`](crate::types::PublicAccessConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PublicAccessConfigurationBuilder {
    pub(crate) public_acl_access: ::std::option::Option<crate::types::PublicAccessStatus>,
    pub(crate) public_policy_access: ::std::option::Option<crate::types::PublicAccessStatus>,
    pub(crate) public_acl_ignore_behavior: ::std::option::Option<crate::types::PublicAclIgnoreBehavior>,
    pub(crate) public_bucket_restrict_behavior: ::std::option::Option<crate::types::PublicBucketRestrictBehavior>,
}
impl PublicAccessConfigurationBuilder {
    /// <p>Indicates whether or not there is a setting that allows public access to the Amazon S3 buckets through access control lists (ACLs).</p>
    pub fn public_acl_access(mut self, input: crate::types::PublicAccessStatus) -> Self {
        self.public_acl_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether or not there is a setting that allows public access to the Amazon S3 buckets through access control lists (ACLs).</p>
    pub fn set_public_acl_access(mut self, input: ::std::option::Option<crate::types::PublicAccessStatus>) -> Self {
        self.public_acl_access = input;
        self
    }
    /// <p>Indicates whether or not there is a setting that allows public access to the Amazon S3 buckets through access control lists (ACLs).</p>
    pub fn get_public_acl_access(&self) -> &::std::option::Option<crate::types::PublicAccessStatus> {
        &self.public_acl_access
    }
    /// <p>Indicates whether or not there is a setting that allows public access to the Amazon S3 bucket policy.</p>
    pub fn public_policy_access(mut self, input: crate::types::PublicAccessStatus) -> Self {
        self.public_policy_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether or not there is a setting that allows public access to the Amazon S3 bucket policy.</p>
    pub fn set_public_policy_access(mut self, input: ::std::option::Option<crate::types::PublicAccessStatus>) -> Self {
        self.public_policy_access = input;
        self
    }
    /// <p>Indicates whether or not there is a setting that allows public access to the Amazon S3 bucket policy.</p>
    pub fn get_public_policy_access(&self) -> &::std::option::Option<crate::types::PublicAccessStatus> {
        &self.public_policy_access
    }
    /// <p>Indicates whether or not there is a setting that ignores all public access control lists (ACLs) on the Amazon S3 bucket and the objects that it contains.</p>
    pub fn public_acl_ignore_behavior(mut self, input: crate::types::PublicAclIgnoreBehavior) -> Self {
        self.public_acl_ignore_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether or not there is a setting that ignores all public access control lists (ACLs) on the Amazon S3 bucket and the objects that it contains.</p>
    pub fn set_public_acl_ignore_behavior(mut self, input: ::std::option::Option<crate::types::PublicAclIgnoreBehavior>) -> Self {
        self.public_acl_ignore_behavior = input;
        self
    }
    /// <p>Indicates whether or not there is a setting that ignores all public access control lists (ACLs) on the Amazon S3 bucket and the objects that it contains.</p>
    pub fn get_public_acl_ignore_behavior(&self) -> &::std::option::Option<crate::types::PublicAclIgnoreBehavior> {
        &self.public_acl_ignore_behavior
    }
    /// <p>Indicates whether or not there is a setting that restricts access to the bucket with specified policies.</p>
    pub fn public_bucket_restrict_behavior(mut self, input: crate::types::PublicBucketRestrictBehavior) -> Self {
        self.public_bucket_restrict_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether or not there is a setting that restricts access to the bucket with specified policies.</p>
    pub fn set_public_bucket_restrict_behavior(mut self, input: ::std::option::Option<crate::types::PublicBucketRestrictBehavior>) -> Self {
        self.public_bucket_restrict_behavior = input;
        self
    }
    /// <p>Indicates whether or not there is a setting that restricts access to the bucket with specified policies.</p>
    pub fn get_public_bucket_restrict_behavior(&self) -> &::std::option::Option<crate::types::PublicBucketRestrictBehavior> {
        &self.public_bucket_restrict_behavior
    }
    /// Consumes the builder and constructs a [`PublicAccessConfiguration`](crate::types::PublicAccessConfiguration).
    pub fn build(self) -> crate::types::PublicAccessConfiguration {
        crate::types::PublicAccessConfiguration {
            public_acl_access: self.public_acl_access,
            public_policy_access: self.public_policy_access,
            public_acl_ignore_behavior: self.public_acl_ignore_behavior,
            public_bucket_restrict_behavior: self.public_bucket_restrict_behavior,
        }
    }
}
