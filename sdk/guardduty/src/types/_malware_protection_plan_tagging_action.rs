// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about adding tags to the scanned S3 object after the scan result.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MalwareProtectionPlanTaggingAction {
    /// <p>Indicates whether or not the tags will added.</p>
    pub status: ::std::option::Option<crate::types::MalwareProtectionPlanTaggingActionStatus>,
}
impl MalwareProtectionPlanTaggingAction {
    /// <p>Indicates whether or not the tags will added.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::MalwareProtectionPlanTaggingActionStatus> {
        self.status.as_ref()
    }
}
impl MalwareProtectionPlanTaggingAction {
    /// Creates a new builder-style object to manufacture [`MalwareProtectionPlanTaggingAction`](crate::types::MalwareProtectionPlanTaggingAction).
    pub fn builder() -> crate::types::builders::MalwareProtectionPlanTaggingActionBuilder {
        crate::types::builders::MalwareProtectionPlanTaggingActionBuilder::default()
    }
}

/// A builder for [`MalwareProtectionPlanTaggingAction`](crate::types::MalwareProtectionPlanTaggingAction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MalwareProtectionPlanTaggingActionBuilder {
    pub(crate) status: ::std::option::Option<crate::types::MalwareProtectionPlanTaggingActionStatus>,
}
impl MalwareProtectionPlanTaggingActionBuilder {
    /// <p>Indicates whether or not the tags will added.</p>
    pub fn status(mut self, input: crate::types::MalwareProtectionPlanTaggingActionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether or not the tags will added.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::MalwareProtectionPlanTaggingActionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Indicates whether or not the tags will added.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::MalwareProtectionPlanTaggingActionStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`MalwareProtectionPlanTaggingAction`](crate::types::MalwareProtectionPlanTaggingAction).
    pub fn build(self) -> crate::types::MalwareProtectionPlanTaggingAction {
        crate::types::MalwareProtectionPlanTaggingAction { status: self.status }
    }
}
