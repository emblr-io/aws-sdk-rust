// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the Amazon EKS cluster involved in a GuardDuty finding, including cluster identification, status, and network configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EksCluster {
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the Amazon EKS cluster involved in the finding.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp indicating when the Amazon EKS cluster was created, in UTC format.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The current status of the Amazon EKS cluster.</p>
    pub status: ::std::option::Option<crate::types::ClusterStatus>,
    /// <p>The ID of the Amazon Virtual Private Cloud (Amazon VPC) associated with the Amazon EKS cluster.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of unique identifiers for the Amazon EC2 instances that serve as worker nodes in the Amazon EKS cluster.</p>
    pub ec2_instance_uids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl EksCluster {
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the Amazon EKS cluster involved in the finding.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The timestamp indicating when the Amazon EKS cluster was created, in UTC format.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The current status of the Amazon EKS cluster.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ClusterStatus> {
        self.status.as_ref()
    }
    /// <p>The ID of the Amazon Virtual Private Cloud (Amazon VPC) associated with the Amazon EKS cluster.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>A list of unique identifiers for the Amazon EC2 instances that serve as worker nodes in the Amazon EKS cluster.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ec2_instance_uids.is_none()`.
    pub fn ec2_instance_uids(&self) -> &[::std::string::String] {
        self.ec2_instance_uids.as_deref().unwrap_or_default()
    }
}
impl EksCluster {
    /// Creates a new builder-style object to manufacture [`EksCluster`](crate::types::EksCluster).
    pub fn builder() -> crate::types::builders::EksClusterBuilder {
        crate::types::builders::EksClusterBuilder::default()
    }
}

/// A builder for [`EksCluster`](crate::types::EksCluster).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EksClusterBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::ClusterStatus>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) ec2_instance_uids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl EksClusterBuilder {
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the Amazon EKS cluster involved in the finding.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the Amazon EKS cluster involved in the finding.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the Amazon EKS cluster involved in the finding.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The timestamp indicating when the Amazon EKS cluster was created, in UTC format.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp indicating when the Amazon EKS cluster was created, in UTC format.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp indicating when the Amazon EKS cluster was created, in UTC format.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The current status of the Amazon EKS cluster.</p>
    pub fn status(mut self, input: crate::types::ClusterStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the Amazon EKS cluster.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ClusterStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the Amazon EKS cluster.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ClusterStatus> {
        &self.status
    }
    /// <p>The ID of the Amazon Virtual Private Cloud (Amazon VPC) associated with the Amazon EKS cluster.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Virtual Private Cloud (Amazon VPC) associated with the Amazon EKS cluster.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The ID of the Amazon Virtual Private Cloud (Amazon VPC) associated with the Amazon EKS cluster.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// Appends an item to `ec2_instance_uids`.
    ///
    /// To override the contents of this collection use [`set_ec2_instance_uids`](Self::set_ec2_instance_uids).
    ///
    /// <p>A list of unique identifiers for the Amazon EC2 instances that serve as worker nodes in the Amazon EKS cluster.</p>
    pub fn ec2_instance_uids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.ec2_instance_uids.unwrap_or_default();
        v.push(input.into());
        self.ec2_instance_uids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of unique identifiers for the Amazon EC2 instances that serve as worker nodes in the Amazon EKS cluster.</p>
    pub fn set_ec2_instance_uids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.ec2_instance_uids = input;
        self
    }
    /// <p>A list of unique identifiers for the Amazon EC2 instances that serve as worker nodes in the Amazon EKS cluster.</p>
    pub fn get_ec2_instance_uids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.ec2_instance_uids
    }
    /// Consumes the builder and constructs a [`EksCluster`](crate::types::EksCluster).
    pub fn build(self) -> crate::types::EksCluster {
        crate::types::EksCluster {
            arn: self.arn,
            created_at: self.created_at,
            status: self.status,
            vpc_id: self.vpc_id,
            ec2_instance_uids: self.ec2_instance_uids,
        }
    }
}
