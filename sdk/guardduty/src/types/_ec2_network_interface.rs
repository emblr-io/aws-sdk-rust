// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the elastic network interface of the Amazon EC2 instance.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Ec2NetworkInterface {
    /// <p>A list of IPv6 addresses for the Amazon EC2 instance.</p>
    pub ipv6_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Other private IP address information of the Amazon EC2 instance.</p>
    pub private_ip_addresses: ::std::option::Option<::std::vec::Vec<crate::types::PrivateIpAddressDetails>>,
    /// <p>The public IP address of the Amazon EC2 instance.</p>
    pub public_ip: ::std::option::Option<::std::string::String>,
    /// <p>The security groups associated with the Amazon EC2 instance.</p>
    pub security_groups: ::std::option::Option<::std::vec::Vec<crate::types::SecurityGroup>>,
    /// <p>The subnet ID of the Amazon EC2 instance.</p>
    pub sub_net_id: ::std::option::Option<::std::string::String>,
    /// <p>The VPC ID of the Amazon EC2 instance.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
}
impl Ec2NetworkInterface {
    /// <p>A list of IPv6 addresses for the Amazon EC2 instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ipv6_addresses.is_none()`.
    pub fn ipv6_addresses(&self) -> &[::std::string::String] {
        self.ipv6_addresses.as_deref().unwrap_or_default()
    }
    /// <p>Other private IP address information of the Amazon EC2 instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.private_ip_addresses.is_none()`.
    pub fn private_ip_addresses(&self) -> &[crate::types::PrivateIpAddressDetails] {
        self.private_ip_addresses.as_deref().unwrap_or_default()
    }
    /// <p>The public IP address of the Amazon EC2 instance.</p>
    pub fn public_ip(&self) -> ::std::option::Option<&str> {
        self.public_ip.as_deref()
    }
    /// <p>The security groups associated with the Amazon EC2 instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_groups.is_none()`.
    pub fn security_groups(&self) -> &[crate::types::SecurityGroup] {
        self.security_groups.as_deref().unwrap_or_default()
    }
    /// <p>The subnet ID of the Amazon EC2 instance.</p>
    pub fn sub_net_id(&self) -> ::std::option::Option<&str> {
        self.sub_net_id.as_deref()
    }
    /// <p>The VPC ID of the Amazon EC2 instance.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
}
impl Ec2NetworkInterface {
    /// Creates a new builder-style object to manufacture [`Ec2NetworkInterface`](crate::types::Ec2NetworkInterface).
    pub fn builder() -> crate::types::builders::Ec2NetworkInterfaceBuilder {
        crate::types::builders::Ec2NetworkInterfaceBuilder::default()
    }
}

/// A builder for [`Ec2NetworkInterface`](crate::types::Ec2NetworkInterface).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct Ec2NetworkInterfaceBuilder {
    pub(crate) ipv6_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) private_ip_addresses: ::std::option::Option<::std::vec::Vec<crate::types::PrivateIpAddressDetails>>,
    pub(crate) public_ip: ::std::option::Option<::std::string::String>,
    pub(crate) security_groups: ::std::option::Option<::std::vec::Vec<crate::types::SecurityGroup>>,
    pub(crate) sub_net_id: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
}
impl Ec2NetworkInterfaceBuilder {
    /// Appends an item to `ipv6_addresses`.
    ///
    /// To override the contents of this collection use [`set_ipv6_addresses`](Self::set_ipv6_addresses).
    ///
    /// <p>A list of IPv6 addresses for the Amazon EC2 instance.</p>
    pub fn ipv6_addresses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.ipv6_addresses.unwrap_or_default();
        v.push(input.into());
        self.ipv6_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of IPv6 addresses for the Amazon EC2 instance.</p>
    pub fn set_ipv6_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.ipv6_addresses = input;
        self
    }
    /// <p>A list of IPv6 addresses for the Amazon EC2 instance.</p>
    pub fn get_ipv6_addresses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.ipv6_addresses
    }
    /// Appends an item to `private_ip_addresses`.
    ///
    /// To override the contents of this collection use [`set_private_ip_addresses`](Self::set_private_ip_addresses).
    ///
    /// <p>Other private IP address information of the Amazon EC2 instance.</p>
    pub fn private_ip_addresses(mut self, input: crate::types::PrivateIpAddressDetails) -> Self {
        let mut v = self.private_ip_addresses.unwrap_or_default();
        v.push(input);
        self.private_ip_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>Other private IP address information of the Amazon EC2 instance.</p>
    pub fn set_private_ip_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PrivateIpAddressDetails>>) -> Self {
        self.private_ip_addresses = input;
        self
    }
    /// <p>Other private IP address information of the Amazon EC2 instance.</p>
    pub fn get_private_ip_addresses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PrivateIpAddressDetails>> {
        &self.private_ip_addresses
    }
    /// <p>The public IP address of the Amazon EC2 instance.</p>
    pub fn public_ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_ip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The public IP address of the Amazon EC2 instance.</p>
    pub fn set_public_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_ip = input;
        self
    }
    /// <p>The public IP address of the Amazon EC2 instance.</p>
    pub fn get_public_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_ip
    }
    /// Appends an item to `security_groups`.
    ///
    /// To override the contents of this collection use [`set_security_groups`](Self::set_security_groups).
    ///
    /// <p>The security groups associated with the Amazon EC2 instance.</p>
    pub fn security_groups(mut self, input: crate::types::SecurityGroup) -> Self {
        let mut v = self.security_groups.unwrap_or_default();
        v.push(input);
        self.security_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>The security groups associated with the Amazon EC2 instance.</p>
    pub fn set_security_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SecurityGroup>>) -> Self {
        self.security_groups = input;
        self
    }
    /// <p>The security groups associated with the Amazon EC2 instance.</p>
    pub fn get_security_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SecurityGroup>> {
        &self.security_groups
    }
    /// <p>The subnet ID of the Amazon EC2 instance.</p>
    pub fn sub_net_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sub_net_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subnet ID of the Amazon EC2 instance.</p>
    pub fn set_sub_net_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sub_net_id = input;
        self
    }
    /// <p>The subnet ID of the Amazon EC2 instance.</p>
    pub fn get_sub_net_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sub_net_id
    }
    /// <p>The VPC ID of the Amazon EC2 instance.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The VPC ID of the Amazon EC2 instance.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The VPC ID of the Amazon EC2 instance.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// Consumes the builder and constructs a [`Ec2NetworkInterface`](crate::types::Ec2NetworkInterface).
    pub fn build(self) -> crate::types::Ec2NetworkInterface {
        crate::types::Ec2NetworkInterface {
            ipv6_addresses: self.ipv6_addresses,
            private_ip_addresses: self.private_ip_addresses,
            public_ip: self.public_ip,
            security_groups: self.security_groups,
            sub_net_id: self.sub_net_id,
            vpc_id: self.vpc_id,
        }
    }
}
