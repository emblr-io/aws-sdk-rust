// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the Amazon Web Services resource that is associated with the GuardDuty finding.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceV2 {
    /// <p>The unique identifier of the resource.</p>
    pub uid: ::std::option::Option<::std::string::String>,
    /// <p>The name of the resource.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID to which the resource belongs.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of the Amazon Web Services resource.</p>
    pub resource_type: ::std::option::Option<crate::types::FindingResourceType>,
    /// <p>The Amazon Web Services Region where the resource belongs.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services service of the resource.</p>
    pub service: ::std::option::Option<::std::string::String>,
    /// <p>The cloud partition within the Amazon Web Services Region to which the resource belongs.</p>
    pub cloud_partition: ::std::option::Option<::std::string::String>,
    /// <p>Contains information about the tags associated with the resource.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>Contains information about the Amazon Web Services resource associated with the activity that prompted GuardDuty to generate a finding.</p>
    pub data: ::std::option::Option<crate::types::ResourceData>,
}
impl ResourceV2 {
    /// <p>The unique identifier of the resource.</p>
    pub fn uid(&self) -> ::std::option::Option<&str> {
        self.uid.as_deref()
    }
    /// <p>The name of the resource.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Web Services account ID to which the resource belongs.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The type of the Amazon Web Services resource.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::FindingResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The Amazon Web Services Region where the resource belongs.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The Amazon Web Services service of the resource.</p>
    pub fn service(&self) -> ::std::option::Option<&str> {
        self.service.as_deref()
    }
    /// <p>The cloud partition within the Amazon Web Services Region to which the resource belongs.</p>
    pub fn cloud_partition(&self) -> ::std::option::Option<&str> {
        self.cloud_partition.as_deref()
    }
    /// <p>Contains information about the tags associated with the resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>Contains information about the Amazon Web Services resource associated with the activity that prompted GuardDuty to generate a finding.</p>
    pub fn data(&self) -> ::std::option::Option<&crate::types::ResourceData> {
        self.data.as_ref()
    }
}
impl ResourceV2 {
    /// Creates a new builder-style object to manufacture [`ResourceV2`](crate::types::ResourceV2).
    pub fn builder() -> crate::types::builders::ResourceV2Builder {
        crate::types::builders::ResourceV2Builder::default()
    }
}

/// A builder for [`ResourceV2`](crate::types::ResourceV2).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ResourceV2Builder {
    pub(crate) uid: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<crate::types::FindingResourceType>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) service: ::std::option::Option<::std::string::String>,
    pub(crate) cloud_partition: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) data: ::std::option::Option<crate::types::ResourceData>,
}
impl ResourceV2Builder {
    /// <p>The unique identifier of the resource.</p>
    /// This field is required.
    pub fn uid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.uid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the resource.</p>
    pub fn set_uid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.uid = input;
        self
    }
    /// <p>The unique identifier of the resource.</p>
    pub fn get_uid(&self) -> &::std::option::Option<::std::string::String> {
        &self.uid
    }
    /// <p>The name of the resource.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the resource.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the resource.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Web Services account ID to which the resource belongs.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID to which the resource belongs.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID to which the resource belongs.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The type of the Amazon Web Services resource.</p>
    /// This field is required.
    pub fn resource_type(mut self, input: crate::types::FindingResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the Amazon Web Services resource.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::FindingResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of the Amazon Web Services resource.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::FindingResourceType> {
        &self.resource_type
    }
    /// <p>The Amazon Web Services Region where the resource belongs.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region where the resource belongs.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Amazon Web Services Region where the resource belongs.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The Amazon Web Services service of the resource.</p>
    pub fn service(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services service of the resource.</p>
    pub fn set_service(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service = input;
        self
    }
    /// <p>The Amazon Web Services service of the resource.</p>
    pub fn get_service(&self) -> &::std::option::Option<::std::string::String> {
        &self.service
    }
    /// <p>The cloud partition within the Amazon Web Services Region to which the resource belongs.</p>
    pub fn cloud_partition(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloud_partition = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cloud partition within the Amazon Web Services Region to which the resource belongs.</p>
    pub fn set_cloud_partition(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloud_partition = input;
        self
    }
    /// <p>The cloud partition within the Amazon Web Services Region to which the resource belongs.</p>
    pub fn get_cloud_partition(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloud_partition
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Contains information about the tags associated with the resource.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains information about the tags associated with the resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Contains information about the tags associated with the resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>Contains information about the Amazon Web Services resource associated with the activity that prompted GuardDuty to generate a finding.</p>
    pub fn data(mut self, input: crate::types::ResourceData) -> Self {
        self.data = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the Amazon Web Services resource associated with the activity that prompted GuardDuty to generate a finding.</p>
    pub fn set_data(mut self, input: ::std::option::Option<crate::types::ResourceData>) -> Self {
        self.data = input;
        self
    }
    /// <p>Contains information about the Amazon Web Services resource associated with the activity that prompted GuardDuty to generate a finding.</p>
    pub fn get_data(&self) -> &::std::option::Option<crate::types::ResourceData> {
        &self.data
    }
    /// Consumes the builder and constructs a [`ResourceV2`](crate::types::ResourceV2).
    pub fn build(self) -> crate::types::ResourceV2 {
        crate::types::ResourceV2 {
            uid: self.uid,
            name: self.name,
            account_id: self.account_id,
            resource_type: self.resource_type,
            region: self.region,
            service: self.service,
            cloud_partition: self.cloud_partition,
            tags: self.tags,
            data: self.data,
        }
    }
}
