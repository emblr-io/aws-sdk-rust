// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListMalwareProtectionPlansOutput {
    /// <p>A list of unique identifiers associated with each Malware Protection plan.</p>
    pub malware_protection_plans: ::std::option::Option<::std::vec::Vec<crate::types::MalwareProtectionPlanSummary>>,
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of <code>NextToken</code> from the previous response to continue listing data.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListMalwareProtectionPlansOutput {
    /// <p>A list of unique identifiers associated with each Malware Protection plan.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.malware_protection_plans.is_none()`.
    pub fn malware_protection_plans(&self) -> &[crate::types::MalwareProtectionPlanSummary] {
        self.malware_protection_plans.as_deref().unwrap_or_default()
    }
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of <code>NextToken</code> from the previous response to continue listing data.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListMalwareProtectionPlansOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListMalwareProtectionPlansOutput {
    /// Creates a new builder-style object to manufacture [`ListMalwareProtectionPlansOutput`](crate::operation::list_malware_protection_plans::ListMalwareProtectionPlansOutput).
    pub fn builder() -> crate::operation::list_malware_protection_plans::builders::ListMalwareProtectionPlansOutputBuilder {
        crate::operation::list_malware_protection_plans::builders::ListMalwareProtectionPlansOutputBuilder::default()
    }
}

/// A builder for [`ListMalwareProtectionPlansOutput`](crate::operation::list_malware_protection_plans::ListMalwareProtectionPlansOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListMalwareProtectionPlansOutputBuilder {
    pub(crate) malware_protection_plans: ::std::option::Option<::std::vec::Vec<crate::types::MalwareProtectionPlanSummary>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListMalwareProtectionPlansOutputBuilder {
    /// Appends an item to `malware_protection_plans`.
    ///
    /// To override the contents of this collection use [`set_malware_protection_plans`](Self::set_malware_protection_plans).
    ///
    /// <p>A list of unique identifiers associated with each Malware Protection plan.</p>
    pub fn malware_protection_plans(mut self, input: crate::types::MalwareProtectionPlanSummary) -> Self {
        let mut v = self.malware_protection_plans.unwrap_or_default();
        v.push(input);
        self.malware_protection_plans = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of unique identifiers associated with each Malware Protection plan.</p>
    pub fn set_malware_protection_plans(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MalwareProtectionPlanSummary>>) -> Self {
        self.malware_protection_plans = input;
        self
    }
    /// <p>A list of unique identifiers associated with each Malware Protection plan.</p>
    pub fn get_malware_protection_plans(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MalwareProtectionPlanSummary>> {
        &self.malware_protection_plans
    }
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of <code>NextToken</code> from the previous response to continue listing data.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of <code>NextToken</code> from the previous response to continue listing data.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of <code>NextToken</code> from the previous response to continue listing data.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListMalwareProtectionPlansOutput`](crate::operation::list_malware_protection_plans::ListMalwareProtectionPlansOutput).
    pub fn build(self) -> crate::operation::list_malware_protection_plans::ListMalwareProtectionPlansOutput {
        crate::operation::list_malware_protection_plans::ListMalwareProtectionPlansOutput {
            malware_protection_plans: self.malware_protection_plans,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
