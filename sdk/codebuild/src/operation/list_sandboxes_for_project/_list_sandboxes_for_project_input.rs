// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListSandboxesForProjectInput {
    /// <p>The CodeBuild project name.</p>
    pub project_name: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of sandbox records to be retrieved.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The order in which sandbox records should be retrieved.</p>
    pub sort_order: ::std::option::Option<crate::types::SortOrderType>,
    /// <p>The next token, if any, to get paginated results. You will get this value from previous execution of list sandboxes.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListSandboxesForProjectInput {
    /// <p>The CodeBuild project name.</p>
    pub fn project_name(&self) -> ::std::option::Option<&str> {
        self.project_name.as_deref()
    }
    /// <p>The maximum number of sandbox records to be retrieved.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The order in which sandbox records should be retrieved.</p>
    pub fn sort_order(&self) -> ::std::option::Option<&crate::types::SortOrderType> {
        self.sort_order.as_ref()
    }
    /// <p>The next token, if any, to get paginated results. You will get this value from previous execution of list sandboxes.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::std::fmt::Debug for ListSandboxesForProjectInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListSandboxesForProjectInput");
        formatter.field("project_name", &self.project_name);
        formatter.field("max_results", &self.max_results);
        formatter.field("sort_order", &self.sort_order);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ListSandboxesForProjectInput {
    /// Creates a new builder-style object to manufacture [`ListSandboxesForProjectInput`](crate::operation::list_sandboxes_for_project::ListSandboxesForProjectInput).
    pub fn builder() -> crate::operation::list_sandboxes_for_project::builders::ListSandboxesForProjectInputBuilder {
        crate::operation::list_sandboxes_for_project::builders::ListSandboxesForProjectInputBuilder::default()
    }
}

/// A builder for [`ListSandboxesForProjectInput`](crate::operation::list_sandboxes_for_project::ListSandboxesForProjectInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ListSandboxesForProjectInputBuilder {
    pub(crate) project_name: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) sort_order: ::std::option::Option<crate::types::SortOrderType>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListSandboxesForProjectInputBuilder {
    /// <p>The CodeBuild project name.</p>
    /// This field is required.
    pub fn project_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CodeBuild project name.</p>
    pub fn set_project_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// <p>The CodeBuild project name.</p>
    pub fn get_project_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_name
    }
    /// <p>The maximum number of sandbox records to be retrieved.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of sandbox records to be retrieved.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of sandbox records to be retrieved.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The order in which sandbox records should be retrieved.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrderType) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>The order in which sandbox records should be retrieved.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortOrderType>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The order in which sandbox records should be retrieved.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortOrderType> {
        &self.sort_order
    }
    /// <p>The next token, if any, to get paginated results. You will get this value from previous execution of list sandboxes.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The next token, if any, to get paginated results. You will get this value from previous execution of list sandboxes.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The next token, if any, to get paginated results. You will get this value from previous execution of list sandboxes.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListSandboxesForProjectInput`](crate::operation::list_sandboxes_for_project::ListSandboxesForProjectInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_sandboxes_for_project::ListSandboxesForProjectInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_sandboxes_for_project::ListSandboxesForProjectInput {
            project_name: self.project_name,
            max_results: self.max_results,
            sort_order: self.sort_order,
            next_token: self.next_token,
        })
    }
}
impl ::std::fmt::Debug for ListSandboxesForProjectInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListSandboxesForProjectInputBuilder");
        formatter.field("project_name", &self.project_name);
        formatter.field("max_results", &self.max_results);
        formatter.field("sort_order", &self.sort_order);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
