// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetCommandExecutionsInput {
    /// <p>A <code>sandboxId</code> or <code>sandboxArn</code>.</p>
    pub sandbox_id: ::std::option::Option<::std::string::String>,
    /// <p>A comma separated list of <code>commandExecutionIds</code>.</p>
    pub command_execution_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl BatchGetCommandExecutionsInput {
    /// <p>A <code>sandboxId</code> or <code>sandboxArn</code>.</p>
    pub fn sandbox_id(&self) -> ::std::option::Option<&str> {
        self.sandbox_id.as_deref()
    }
    /// <p>A comma separated list of <code>commandExecutionIds</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.command_execution_ids.is_none()`.
    pub fn command_execution_ids(&self) -> &[::std::string::String] {
        self.command_execution_ids.as_deref().unwrap_or_default()
    }
}
impl BatchGetCommandExecutionsInput {
    /// Creates a new builder-style object to manufacture [`BatchGetCommandExecutionsInput`](crate::operation::batch_get_command_executions::BatchGetCommandExecutionsInput).
    pub fn builder() -> crate::operation::batch_get_command_executions::builders::BatchGetCommandExecutionsInputBuilder {
        crate::operation::batch_get_command_executions::builders::BatchGetCommandExecutionsInputBuilder::default()
    }
}

/// A builder for [`BatchGetCommandExecutionsInput`](crate::operation::batch_get_command_executions::BatchGetCommandExecutionsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchGetCommandExecutionsInputBuilder {
    pub(crate) sandbox_id: ::std::option::Option<::std::string::String>,
    pub(crate) command_execution_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl BatchGetCommandExecutionsInputBuilder {
    /// <p>A <code>sandboxId</code> or <code>sandboxArn</code>.</p>
    /// This field is required.
    pub fn sandbox_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sandbox_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A <code>sandboxId</code> or <code>sandboxArn</code>.</p>
    pub fn set_sandbox_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sandbox_id = input;
        self
    }
    /// <p>A <code>sandboxId</code> or <code>sandboxArn</code>.</p>
    pub fn get_sandbox_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sandbox_id
    }
    /// Appends an item to `command_execution_ids`.
    ///
    /// To override the contents of this collection use [`set_command_execution_ids`](Self::set_command_execution_ids).
    ///
    /// <p>A comma separated list of <code>commandExecutionIds</code>.</p>
    pub fn command_execution_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.command_execution_ids.unwrap_or_default();
        v.push(input.into());
        self.command_execution_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A comma separated list of <code>commandExecutionIds</code>.</p>
    pub fn set_command_execution_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.command_execution_ids = input;
        self
    }
    /// <p>A comma separated list of <code>commandExecutionIds</code>.</p>
    pub fn get_command_execution_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.command_execution_ids
    }
    /// Consumes the builder and constructs a [`BatchGetCommandExecutionsInput`](crate::operation::batch_get_command_executions::BatchGetCommandExecutionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_get_command_executions::BatchGetCommandExecutionsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::batch_get_command_executions::BatchGetCommandExecutionsInput {
            sandbox_id: self.sandbox_id,
            command_execution_ids: self.command_execution_ids,
        })
    }
}
