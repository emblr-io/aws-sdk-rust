// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains compute attributes. These attributes only need be specified when your project's or fleet's <code>computeType</code> is set to <code>ATTRIBUTE_BASED_COMPUTE</code> or <code>CUSTOM_INSTANCE_TYPE</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComputeConfiguration {
    /// <p>The number of vCPUs of the instance type included in your fleet.</p>
    pub v_cpu: ::std::option::Option<i64>,
    /// <p>The amount of memory of the instance type included in your fleet.</p>
    pub memory: ::std::option::Option<i64>,
    /// <p>The amount of disk space of the instance type included in your fleet.</p>
    pub disk: ::std::option::Option<i64>,
    /// <p>The machine type of the instance type included in your fleet.</p>
    pub machine_type: ::std::option::Option<crate::types::MachineType>,
    /// <p>The EC2 instance type to be launched in your fleet.</p>
    pub instance_type: ::std::option::Option<::std::string::String>,
}
impl ComputeConfiguration {
    /// <p>The number of vCPUs of the instance type included in your fleet.</p>
    pub fn v_cpu(&self) -> ::std::option::Option<i64> {
        self.v_cpu
    }
    /// <p>The amount of memory of the instance type included in your fleet.</p>
    pub fn memory(&self) -> ::std::option::Option<i64> {
        self.memory
    }
    /// <p>The amount of disk space of the instance type included in your fleet.</p>
    pub fn disk(&self) -> ::std::option::Option<i64> {
        self.disk
    }
    /// <p>The machine type of the instance type included in your fleet.</p>
    pub fn machine_type(&self) -> ::std::option::Option<&crate::types::MachineType> {
        self.machine_type.as_ref()
    }
    /// <p>The EC2 instance type to be launched in your fleet.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&str> {
        self.instance_type.as_deref()
    }
}
impl ComputeConfiguration {
    /// Creates a new builder-style object to manufacture [`ComputeConfiguration`](crate::types::ComputeConfiguration).
    pub fn builder() -> crate::types::builders::ComputeConfigurationBuilder {
        crate::types::builders::ComputeConfigurationBuilder::default()
    }
}

/// A builder for [`ComputeConfiguration`](crate::types::ComputeConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ComputeConfigurationBuilder {
    pub(crate) v_cpu: ::std::option::Option<i64>,
    pub(crate) memory: ::std::option::Option<i64>,
    pub(crate) disk: ::std::option::Option<i64>,
    pub(crate) machine_type: ::std::option::Option<crate::types::MachineType>,
    pub(crate) instance_type: ::std::option::Option<::std::string::String>,
}
impl ComputeConfigurationBuilder {
    /// <p>The number of vCPUs of the instance type included in your fleet.</p>
    pub fn v_cpu(mut self, input: i64) -> Self {
        self.v_cpu = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of vCPUs of the instance type included in your fleet.</p>
    pub fn set_v_cpu(mut self, input: ::std::option::Option<i64>) -> Self {
        self.v_cpu = input;
        self
    }
    /// <p>The number of vCPUs of the instance type included in your fleet.</p>
    pub fn get_v_cpu(&self) -> &::std::option::Option<i64> {
        &self.v_cpu
    }
    /// <p>The amount of memory of the instance type included in your fleet.</p>
    pub fn memory(mut self, input: i64) -> Self {
        self.memory = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of memory of the instance type included in your fleet.</p>
    pub fn set_memory(mut self, input: ::std::option::Option<i64>) -> Self {
        self.memory = input;
        self
    }
    /// <p>The amount of memory of the instance type included in your fleet.</p>
    pub fn get_memory(&self) -> &::std::option::Option<i64> {
        &self.memory
    }
    /// <p>The amount of disk space of the instance type included in your fleet.</p>
    pub fn disk(mut self, input: i64) -> Self {
        self.disk = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of disk space of the instance type included in your fleet.</p>
    pub fn set_disk(mut self, input: ::std::option::Option<i64>) -> Self {
        self.disk = input;
        self
    }
    /// <p>The amount of disk space of the instance type included in your fleet.</p>
    pub fn get_disk(&self) -> &::std::option::Option<i64> {
        &self.disk
    }
    /// <p>The machine type of the instance type included in your fleet.</p>
    pub fn machine_type(mut self, input: crate::types::MachineType) -> Self {
        self.machine_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The machine type of the instance type included in your fleet.</p>
    pub fn set_machine_type(mut self, input: ::std::option::Option<crate::types::MachineType>) -> Self {
        self.machine_type = input;
        self
    }
    /// <p>The machine type of the instance type included in your fleet.</p>
    pub fn get_machine_type(&self) -> &::std::option::Option<crate::types::MachineType> {
        &self.machine_type
    }
    /// <p>The EC2 instance type to be launched in your fleet.</p>
    pub fn instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The EC2 instance type to be launched in your fleet.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The EC2 instance type to be launched in your fleet.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_type
    }
    /// Consumes the builder and constructs a [`ComputeConfiguration`](crate::types::ComputeConfiguration).
    pub fn build(self) -> crate::types::ComputeConfiguration {
        crate::types::ComputeConfiguration {
            v_cpu: self.v_cpu,
            memory: self.memory,
            disk: self.disk,
            machine_type: self.machine_type,
            instance_type: self.instance_type,
        }
    }
}
