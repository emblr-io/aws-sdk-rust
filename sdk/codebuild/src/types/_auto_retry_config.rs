// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the auto-retry configuration for the build.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutoRetryConfig {
    /// <p>The maximum number of additional automatic retries after a failed build. For example, if the auto-retry limit is set to 2, CodeBuild will call the <code>RetryBuild</code> API to automatically retry your build for up to 2 additional times.</p>
    pub auto_retry_limit: ::std::option::Option<i32>,
    /// <p>The number of times that the build has been retried. The initial build will have an auto-retry number of 0.</p>
    pub auto_retry_number: ::std::option::Option<i32>,
    /// <p>The build ARN of the auto-retried build triggered by the current build. The next auto-retry will be <code>null</code> for builds that don't trigger an auto-retry.</p>
    pub next_auto_retry: ::std::option::Option<::std::string::String>,
    /// <p>The build ARN of the build that triggered the current auto-retry build. The previous auto-retry will be <code>null</code> for the initial build.</p>
    pub previous_auto_retry: ::std::option::Option<::std::string::String>,
}
impl AutoRetryConfig {
    /// <p>The maximum number of additional automatic retries after a failed build. For example, if the auto-retry limit is set to 2, CodeBuild will call the <code>RetryBuild</code> API to automatically retry your build for up to 2 additional times.</p>
    pub fn auto_retry_limit(&self) -> ::std::option::Option<i32> {
        self.auto_retry_limit
    }
    /// <p>The number of times that the build has been retried. The initial build will have an auto-retry number of 0.</p>
    pub fn auto_retry_number(&self) -> ::std::option::Option<i32> {
        self.auto_retry_number
    }
    /// <p>The build ARN of the auto-retried build triggered by the current build. The next auto-retry will be <code>null</code> for builds that don't trigger an auto-retry.</p>
    pub fn next_auto_retry(&self) -> ::std::option::Option<&str> {
        self.next_auto_retry.as_deref()
    }
    /// <p>The build ARN of the build that triggered the current auto-retry build. The previous auto-retry will be <code>null</code> for the initial build.</p>
    pub fn previous_auto_retry(&self) -> ::std::option::Option<&str> {
        self.previous_auto_retry.as_deref()
    }
}
impl AutoRetryConfig {
    /// Creates a new builder-style object to manufacture [`AutoRetryConfig`](crate::types::AutoRetryConfig).
    pub fn builder() -> crate::types::builders::AutoRetryConfigBuilder {
        crate::types::builders::AutoRetryConfigBuilder::default()
    }
}

/// A builder for [`AutoRetryConfig`](crate::types::AutoRetryConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutoRetryConfigBuilder {
    pub(crate) auto_retry_limit: ::std::option::Option<i32>,
    pub(crate) auto_retry_number: ::std::option::Option<i32>,
    pub(crate) next_auto_retry: ::std::option::Option<::std::string::String>,
    pub(crate) previous_auto_retry: ::std::option::Option<::std::string::String>,
}
impl AutoRetryConfigBuilder {
    /// <p>The maximum number of additional automatic retries after a failed build. For example, if the auto-retry limit is set to 2, CodeBuild will call the <code>RetryBuild</code> API to automatically retry your build for up to 2 additional times.</p>
    pub fn auto_retry_limit(mut self, input: i32) -> Self {
        self.auto_retry_limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of additional automatic retries after a failed build. For example, if the auto-retry limit is set to 2, CodeBuild will call the <code>RetryBuild</code> API to automatically retry your build for up to 2 additional times.</p>
    pub fn set_auto_retry_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.auto_retry_limit = input;
        self
    }
    /// <p>The maximum number of additional automatic retries after a failed build. For example, if the auto-retry limit is set to 2, CodeBuild will call the <code>RetryBuild</code> API to automatically retry your build for up to 2 additional times.</p>
    pub fn get_auto_retry_limit(&self) -> &::std::option::Option<i32> {
        &self.auto_retry_limit
    }
    /// <p>The number of times that the build has been retried. The initial build will have an auto-retry number of 0.</p>
    pub fn auto_retry_number(mut self, input: i32) -> Self {
        self.auto_retry_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of times that the build has been retried. The initial build will have an auto-retry number of 0.</p>
    pub fn set_auto_retry_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.auto_retry_number = input;
        self
    }
    /// <p>The number of times that the build has been retried. The initial build will have an auto-retry number of 0.</p>
    pub fn get_auto_retry_number(&self) -> &::std::option::Option<i32> {
        &self.auto_retry_number
    }
    /// <p>The build ARN of the auto-retried build triggered by the current build. The next auto-retry will be <code>null</code> for builds that don't trigger an auto-retry.</p>
    pub fn next_auto_retry(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_auto_retry = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The build ARN of the auto-retried build triggered by the current build. The next auto-retry will be <code>null</code> for builds that don't trigger an auto-retry.</p>
    pub fn set_next_auto_retry(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_auto_retry = input;
        self
    }
    /// <p>The build ARN of the auto-retried build triggered by the current build. The next auto-retry will be <code>null</code> for builds that don't trigger an auto-retry.</p>
    pub fn get_next_auto_retry(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_auto_retry
    }
    /// <p>The build ARN of the build that triggered the current auto-retry build. The previous auto-retry will be <code>null</code> for the initial build.</p>
    pub fn previous_auto_retry(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.previous_auto_retry = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The build ARN of the build that triggered the current auto-retry build. The previous auto-retry will be <code>null</code> for the initial build.</p>
    pub fn set_previous_auto_retry(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.previous_auto_retry = input;
        self
    }
    /// <p>The build ARN of the build that triggered the current auto-retry build. The previous auto-retry will be <code>null</code> for the initial build.</p>
    pub fn get_previous_auto_retry(&self) -> &::std::option::Option<::std::string::String> {
        &self.previous_auto_retry
    }
    /// Consumes the builder and constructs a [`AutoRetryConfig`](crate::types::AutoRetryConfig).
    pub fn build(self) -> crate::types::AutoRetryConfig {
        crate::types::AutoRetryConfig {
            auto_retry_limit: self.auto_retry_limit,
            auto_retry_number: self.auto_retry_number,
            next_auto_retry: self.next_auto_retry,
            previous_auto_retry: self.previous_auto_retry,
        }
    }
}
