// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the proxy configurations that apply network access control to your reserved capacity instances.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProxyConfiguration {
    /// <p>The default behavior of outgoing traffic.</p>
    pub default_behavior: ::std::option::Option<crate::types::FleetProxyRuleBehavior>,
    /// <p>An array of <code>FleetProxyRule</code> objects that represent the specified destination domains or IPs to allow or deny network access control to.</p>
    pub ordered_proxy_rules: ::std::option::Option<::std::vec::Vec<crate::types::FleetProxyRule>>,
}
impl ProxyConfiguration {
    /// <p>The default behavior of outgoing traffic.</p>
    pub fn default_behavior(&self) -> ::std::option::Option<&crate::types::FleetProxyRuleBehavior> {
        self.default_behavior.as_ref()
    }
    /// <p>An array of <code>FleetProxyRule</code> objects that represent the specified destination domains or IPs to allow or deny network access control to.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ordered_proxy_rules.is_none()`.
    pub fn ordered_proxy_rules(&self) -> &[crate::types::FleetProxyRule] {
        self.ordered_proxy_rules.as_deref().unwrap_or_default()
    }
}
impl ProxyConfiguration {
    /// Creates a new builder-style object to manufacture [`ProxyConfiguration`](crate::types::ProxyConfiguration).
    pub fn builder() -> crate::types::builders::ProxyConfigurationBuilder {
        crate::types::builders::ProxyConfigurationBuilder::default()
    }
}

/// A builder for [`ProxyConfiguration`](crate::types::ProxyConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProxyConfigurationBuilder {
    pub(crate) default_behavior: ::std::option::Option<crate::types::FleetProxyRuleBehavior>,
    pub(crate) ordered_proxy_rules: ::std::option::Option<::std::vec::Vec<crate::types::FleetProxyRule>>,
}
impl ProxyConfigurationBuilder {
    /// <p>The default behavior of outgoing traffic.</p>
    pub fn default_behavior(mut self, input: crate::types::FleetProxyRuleBehavior) -> Self {
        self.default_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default behavior of outgoing traffic.</p>
    pub fn set_default_behavior(mut self, input: ::std::option::Option<crate::types::FleetProxyRuleBehavior>) -> Self {
        self.default_behavior = input;
        self
    }
    /// <p>The default behavior of outgoing traffic.</p>
    pub fn get_default_behavior(&self) -> &::std::option::Option<crate::types::FleetProxyRuleBehavior> {
        &self.default_behavior
    }
    /// Appends an item to `ordered_proxy_rules`.
    ///
    /// To override the contents of this collection use [`set_ordered_proxy_rules`](Self::set_ordered_proxy_rules).
    ///
    /// <p>An array of <code>FleetProxyRule</code> objects that represent the specified destination domains or IPs to allow or deny network access control to.</p>
    pub fn ordered_proxy_rules(mut self, input: crate::types::FleetProxyRule) -> Self {
        let mut v = self.ordered_proxy_rules.unwrap_or_default();
        v.push(input);
        self.ordered_proxy_rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>FleetProxyRule</code> objects that represent the specified destination domains or IPs to allow or deny network access control to.</p>
    pub fn set_ordered_proxy_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FleetProxyRule>>) -> Self {
        self.ordered_proxy_rules = input;
        self
    }
    /// <p>An array of <code>FleetProxyRule</code> objects that represent the specified destination domains or IPs to allow or deny network access control to.</p>
    pub fn get_ordered_proxy_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FleetProxyRule>> {
        &self.ordered_proxy_rules
    }
    /// Consumes the builder and constructs a [`ProxyConfiguration`](crate::types::ProxyConfiguration).
    pub fn build(self) -> crate::types::ProxyConfiguration {
        crate::types::ProxyConfiguration {
            default_behavior: self.default_behavior,
            ordered_proxy_rules: self.ordered_proxy_rules,
        }
    }
}
