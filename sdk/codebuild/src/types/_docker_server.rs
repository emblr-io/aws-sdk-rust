// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains docker server information.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DockerServer {
    /// <p>Information about the compute resources the docker server uses. Available values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>BUILD_GENERAL1_SMALL</code>: Use up to 4 GiB memory and 2 vCPUs for your docker server.</p></li>
    /// <li>
    /// <p><code>BUILD_GENERAL1_MEDIUM</code>: Use up to 8 GiB memory and 4 vCPUs for your docker server.</p></li>
    /// <li>
    /// <p><code>BUILD_GENERAL1_LARGE</code>: Use up to 16 GiB memory and 8 vCPUs for your docker server.</p></li>
    /// <li>
    /// <p><code>BUILD_GENERAL1_XLARGE</code>: Use up to 64 GiB memory and 32 vCPUs for your docker server.</p></li>
    /// <li>
    /// <p><code>BUILD_GENERAL1_2XLARGE</code>: Use up to 128 GiB memory and 64 vCPUs for your docker server.</p></li>
    /// </ul>
    pub compute_type: crate::types::ComputeType,
    /// <p>A list of one or more security groups IDs.</p><note>
    /// <p>Security groups configured for Docker servers should allow ingress network traffic from the VPC configured in the project. They should allow ingress on port 9876.</p>
    /// </note>
    pub security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A DockerServerStatus object to use for this docker server.</p>
    pub status: ::std::option::Option<crate::types::DockerServerStatus>,
}
impl DockerServer {
    /// <p>Information about the compute resources the docker server uses. Available values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>BUILD_GENERAL1_SMALL</code>: Use up to 4 GiB memory and 2 vCPUs for your docker server.</p></li>
    /// <li>
    /// <p><code>BUILD_GENERAL1_MEDIUM</code>: Use up to 8 GiB memory and 4 vCPUs for your docker server.</p></li>
    /// <li>
    /// <p><code>BUILD_GENERAL1_LARGE</code>: Use up to 16 GiB memory and 8 vCPUs for your docker server.</p></li>
    /// <li>
    /// <p><code>BUILD_GENERAL1_XLARGE</code>: Use up to 64 GiB memory and 32 vCPUs for your docker server.</p></li>
    /// <li>
    /// <p><code>BUILD_GENERAL1_2XLARGE</code>: Use up to 128 GiB memory and 64 vCPUs for your docker server.</p></li>
    /// </ul>
    pub fn compute_type(&self) -> &crate::types::ComputeType {
        &self.compute_type
    }
    /// <p>A list of one or more security groups IDs.</p><note>
    /// <p>Security groups configured for Docker servers should allow ingress network traffic from the VPC configured in the project. They should allow ingress on port 9876.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_group_ids.is_none()`.
    pub fn security_group_ids(&self) -> &[::std::string::String] {
        self.security_group_ids.as_deref().unwrap_or_default()
    }
    /// <p>A DockerServerStatus object to use for this docker server.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::DockerServerStatus> {
        self.status.as_ref()
    }
}
impl DockerServer {
    /// Creates a new builder-style object to manufacture [`DockerServer`](crate::types::DockerServer).
    pub fn builder() -> crate::types::builders::DockerServerBuilder {
        crate::types::builders::DockerServerBuilder::default()
    }
}

/// A builder for [`DockerServer`](crate::types::DockerServer).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DockerServerBuilder {
    pub(crate) compute_type: ::std::option::Option<crate::types::ComputeType>,
    pub(crate) security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) status: ::std::option::Option<crate::types::DockerServerStatus>,
}
impl DockerServerBuilder {
    /// <p>Information about the compute resources the docker server uses. Available values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>BUILD_GENERAL1_SMALL</code>: Use up to 4 GiB memory and 2 vCPUs for your docker server.</p></li>
    /// <li>
    /// <p><code>BUILD_GENERAL1_MEDIUM</code>: Use up to 8 GiB memory and 4 vCPUs for your docker server.</p></li>
    /// <li>
    /// <p><code>BUILD_GENERAL1_LARGE</code>: Use up to 16 GiB memory and 8 vCPUs for your docker server.</p></li>
    /// <li>
    /// <p><code>BUILD_GENERAL1_XLARGE</code>: Use up to 64 GiB memory and 32 vCPUs for your docker server.</p></li>
    /// <li>
    /// <p><code>BUILD_GENERAL1_2XLARGE</code>: Use up to 128 GiB memory and 64 vCPUs for your docker server.</p></li>
    /// </ul>
    /// This field is required.
    pub fn compute_type(mut self, input: crate::types::ComputeType) -> Self {
        self.compute_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the compute resources the docker server uses. Available values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>BUILD_GENERAL1_SMALL</code>: Use up to 4 GiB memory and 2 vCPUs for your docker server.</p></li>
    /// <li>
    /// <p><code>BUILD_GENERAL1_MEDIUM</code>: Use up to 8 GiB memory and 4 vCPUs for your docker server.</p></li>
    /// <li>
    /// <p><code>BUILD_GENERAL1_LARGE</code>: Use up to 16 GiB memory and 8 vCPUs for your docker server.</p></li>
    /// <li>
    /// <p><code>BUILD_GENERAL1_XLARGE</code>: Use up to 64 GiB memory and 32 vCPUs for your docker server.</p></li>
    /// <li>
    /// <p><code>BUILD_GENERAL1_2XLARGE</code>: Use up to 128 GiB memory and 64 vCPUs for your docker server.</p></li>
    /// </ul>
    pub fn set_compute_type(mut self, input: ::std::option::Option<crate::types::ComputeType>) -> Self {
        self.compute_type = input;
        self
    }
    /// <p>Information about the compute resources the docker server uses. Available values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>BUILD_GENERAL1_SMALL</code>: Use up to 4 GiB memory and 2 vCPUs for your docker server.</p></li>
    /// <li>
    /// <p><code>BUILD_GENERAL1_MEDIUM</code>: Use up to 8 GiB memory and 4 vCPUs for your docker server.</p></li>
    /// <li>
    /// <p><code>BUILD_GENERAL1_LARGE</code>: Use up to 16 GiB memory and 8 vCPUs for your docker server.</p></li>
    /// <li>
    /// <p><code>BUILD_GENERAL1_XLARGE</code>: Use up to 64 GiB memory and 32 vCPUs for your docker server.</p></li>
    /// <li>
    /// <p><code>BUILD_GENERAL1_2XLARGE</code>: Use up to 128 GiB memory and 64 vCPUs for your docker server.</p></li>
    /// </ul>
    pub fn get_compute_type(&self) -> &::std::option::Option<crate::types::ComputeType> {
        &self.compute_type
    }
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>A list of one or more security groups IDs.</p><note>
    /// <p>Security groups configured for Docker servers should allow ingress network traffic from the VPC configured in the project. They should allow ingress on port 9876.</p>
    /// </note>
    pub fn security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of one or more security groups IDs.</p><note>
    /// <p>Security groups configured for Docker servers should allow ingress network traffic from the VPC configured in the project. They should allow ingress on port 9876.</p>
    /// </note>
    pub fn set_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_group_ids = input;
        self
    }
    /// <p>A list of one or more security groups IDs.</p><note>
    /// <p>Security groups configured for Docker servers should allow ingress network traffic from the VPC configured in the project. They should allow ingress on port 9876.</p>
    /// </note>
    pub fn get_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_group_ids
    }
    /// <p>A DockerServerStatus object to use for this docker server.</p>
    pub fn status(mut self, input: crate::types::DockerServerStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>A DockerServerStatus object to use for this docker server.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DockerServerStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>A DockerServerStatus object to use for this docker server.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DockerServerStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`DockerServer`](crate::types::DockerServer).
    /// This method will fail if any of the following fields are not set:
    /// - [`compute_type`](crate::types::builders::DockerServerBuilder::compute_type)
    pub fn build(self) -> ::std::result::Result<crate::types::DockerServer, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DockerServer {
            compute_type: self.compute_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "compute_type",
                    "compute_type was not specified but it is required when building DockerServer",
                )
            })?,
            security_group_ids: self.security_group_ids,
            status: self.status,
        })
    }
}
