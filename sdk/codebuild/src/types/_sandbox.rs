// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains sandbox information.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Sandbox {
    /// <p>The ID of the sandbox.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the sandbox.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The CodeBuild project name.</p>
    pub project_name: ::std::option::Option<::std::string::String>,
    /// <p>When the sandbox process was initially requested, expressed in Unix time format.</p>
    pub request_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>When the sandbox process started, expressed in Unix time format.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>When the sandbox process ended, expressed in Unix time format.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The status of the sandbox.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>Information about the build input source code for the build project.</p>
    pub source: ::std::option::Option<crate::types::ProjectSource>,
    /// <p>Any version identifier for the version of the sandbox to be built.</p>
    pub source_version: ::std::option::Option<::std::string::String>,
    /// <p>An array of <code>ProjectSource</code> objects.</p>
    pub secondary_sources: ::std::option::Option<::std::vec::Vec<crate::types::ProjectSource>>,
    /// <p>An array of <code>ProjectSourceVersion</code> objects.</p>
    pub secondary_source_versions: ::std::option::Option<::std::vec::Vec<crate::types::ProjectSourceVersion>>,
    /// <p>Information about the build environment of the build project.</p>
    pub environment: ::std::option::Option<crate::types::ProjectEnvironment>,
    /// <p>An array of <code>ProjectFileSystemLocation</code> objects for a CodeBuild build project. A <code>ProjectFileSystemLocation</code> object specifies the <code>identifier</code>, <code>location</code>, <code>mountOptions</code>, <code>mountPoint</code>, and <code>type</code> of a file system created using Amazon Elastic File System.</p>
    pub file_system_locations: ::std::option::Option<::std::vec::Vec<crate::types::ProjectFileSystemLocation>>,
    /// <p>How long, in minutes, from 5 to 2160 (36 hours), for CodeBuild to wait before timing out this sandbox if it does not get marked as completed.</p>
    pub timeout_in_minutes: ::std::option::Option<i32>,
    /// <p>The number of minutes a sandbox is allowed to be queued before it times out.</p>
    pub queued_timeout_in_minutes: ::std::option::Option<i32>,
    /// <p>Information about the VPC configuration that CodeBuild accesses.</p>
    pub vpc_config: ::std::option::Option<crate::types::VpcConfig>,
    /// <p>Information about logs for a build project. These can be logs in CloudWatch Logs, built in a specified S3 bucket, or both.</p>
    pub log_config: ::std::option::Option<crate::types::LogsConfig>,
    /// <p>The Key Management Service customer master key (CMK) to be used for encrypting the sandbox output artifacts.</p>
    pub encryption_key: ::std::option::Option<::std::string::String>,
    /// <p>The name of a service role used for this sandbox.</p>
    pub service_role: ::std::option::Option<::std::string::String>,
    /// <p>The current session for the sandbox.</p>
    pub current_session: ::std::option::Option<crate::types::SandboxSession>,
}
impl Sandbox {
    /// <p>The ID of the sandbox.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ARN of the sandbox.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The CodeBuild project name.</p>
    pub fn project_name(&self) -> ::std::option::Option<&str> {
        self.project_name.as_deref()
    }
    /// <p>When the sandbox process was initially requested, expressed in Unix time format.</p>
    pub fn request_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.request_time.as_ref()
    }
    /// <p>When the sandbox process started, expressed in Unix time format.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>When the sandbox process ended, expressed in Unix time format.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The status of the sandbox.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>Information about the build input source code for the build project.</p>
    pub fn source(&self) -> ::std::option::Option<&crate::types::ProjectSource> {
        self.source.as_ref()
    }
    /// <p>Any version identifier for the version of the sandbox to be built.</p>
    pub fn source_version(&self) -> ::std::option::Option<&str> {
        self.source_version.as_deref()
    }
    /// <p>An array of <code>ProjectSource</code> objects.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.secondary_sources.is_none()`.
    pub fn secondary_sources(&self) -> &[crate::types::ProjectSource] {
        self.secondary_sources.as_deref().unwrap_or_default()
    }
    /// <p>An array of <code>ProjectSourceVersion</code> objects.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.secondary_source_versions.is_none()`.
    pub fn secondary_source_versions(&self) -> &[crate::types::ProjectSourceVersion] {
        self.secondary_source_versions.as_deref().unwrap_or_default()
    }
    /// <p>Information about the build environment of the build project.</p>
    pub fn environment(&self) -> ::std::option::Option<&crate::types::ProjectEnvironment> {
        self.environment.as_ref()
    }
    /// <p>An array of <code>ProjectFileSystemLocation</code> objects for a CodeBuild build project. A <code>ProjectFileSystemLocation</code> object specifies the <code>identifier</code>, <code>location</code>, <code>mountOptions</code>, <code>mountPoint</code>, and <code>type</code> of a file system created using Amazon Elastic File System.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.file_system_locations.is_none()`.
    pub fn file_system_locations(&self) -> &[crate::types::ProjectFileSystemLocation] {
        self.file_system_locations.as_deref().unwrap_or_default()
    }
    /// <p>How long, in minutes, from 5 to 2160 (36 hours), for CodeBuild to wait before timing out this sandbox if it does not get marked as completed.</p>
    pub fn timeout_in_minutes(&self) -> ::std::option::Option<i32> {
        self.timeout_in_minutes
    }
    /// <p>The number of minutes a sandbox is allowed to be queued before it times out.</p>
    pub fn queued_timeout_in_minutes(&self) -> ::std::option::Option<i32> {
        self.queued_timeout_in_minutes
    }
    /// <p>Information about the VPC configuration that CodeBuild accesses.</p>
    pub fn vpc_config(&self) -> ::std::option::Option<&crate::types::VpcConfig> {
        self.vpc_config.as_ref()
    }
    /// <p>Information about logs for a build project. These can be logs in CloudWatch Logs, built in a specified S3 bucket, or both.</p>
    pub fn log_config(&self) -> ::std::option::Option<&crate::types::LogsConfig> {
        self.log_config.as_ref()
    }
    /// <p>The Key Management Service customer master key (CMK) to be used for encrypting the sandbox output artifacts.</p>
    pub fn encryption_key(&self) -> ::std::option::Option<&str> {
        self.encryption_key.as_deref()
    }
    /// <p>The name of a service role used for this sandbox.</p>
    pub fn service_role(&self) -> ::std::option::Option<&str> {
        self.service_role.as_deref()
    }
    /// <p>The current session for the sandbox.</p>
    pub fn current_session(&self) -> ::std::option::Option<&crate::types::SandboxSession> {
        self.current_session.as_ref()
    }
}
impl Sandbox {
    /// Creates a new builder-style object to manufacture [`Sandbox`](crate::types::Sandbox).
    pub fn builder() -> crate::types::builders::SandboxBuilder {
        crate::types::builders::SandboxBuilder::default()
    }
}

/// A builder for [`Sandbox`](crate::types::Sandbox).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SandboxBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) project_name: ::std::option::Option<::std::string::String>,
    pub(crate) request_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) source: ::std::option::Option<crate::types::ProjectSource>,
    pub(crate) source_version: ::std::option::Option<::std::string::String>,
    pub(crate) secondary_sources: ::std::option::Option<::std::vec::Vec<crate::types::ProjectSource>>,
    pub(crate) secondary_source_versions: ::std::option::Option<::std::vec::Vec<crate::types::ProjectSourceVersion>>,
    pub(crate) environment: ::std::option::Option<crate::types::ProjectEnvironment>,
    pub(crate) file_system_locations: ::std::option::Option<::std::vec::Vec<crate::types::ProjectFileSystemLocation>>,
    pub(crate) timeout_in_minutes: ::std::option::Option<i32>,
    pub(crate) queued_timeout_in_minutes: ::std::option::Option<i32>,
    pub(crate) vpc_config: ::std::option::Option<crate::types::VpcConfig>,
    pub(crate) log_config: ::std::option::Option<crate::types::LogsConfig>,
    pub(crate) encryption_key: ::std::option::Option<::std::string::String>,
    pub(crate) service_role: ::std::option::Option<::std::string::String>,
    pub(crate) current_session: ::std::option::Option<crate::types::SandboxSession>,
}
impl SandboxBuilder {
    /// <p>The ID of the sandbox.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the sandbox.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the sandbox.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ARN of the sandbox.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the sandbox.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the sandbox.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The CodeBuild project name.</p>
    pub fn project_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CodeBuild project name.</p>
    pub fn set_project_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// <p>The CodeBuild project name.</p>
    pub fn get_project_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_name
    }
    /// <p>When the sandbox process was initially requested, expressed in Unix time format.</p>
    pub fn request_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.request_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the sandbox process was initially requested, expressed in Unix time format.</p>
    pub fn set_request_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.request_time = input;
        self
    }
    /// <p>When the sandbox process was initially requested, expressed in Unix time format.</p>
    pub fn get_request_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.request_time
    }
    /// <p>When the sandbox process started, expressed in Unix time format.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the sandbox process started, expressed in Unix time format.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>When the sandbox process started, expressed in Unix time format.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>When the sandbox process ended, expressed in Unix time format.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the sandbox process ended, expressed in Unix time format.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>When the sandbox process ended, expressed in Unix time format.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The status of the sandbox.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the sandbox.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the sandbox.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>Information about the build input source code for the build project.</p>
    pub fn source(mut self, input: crate::types::ProjectSource) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the build input source code for the build project.</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::ProjectSource>) -> Self {
        self.source = input;
        self
    }
    /// <p>Information about the build input source code for the build project.</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::ProjectSource> {
        &self.source
    }
    /// <p>Any version identifier for the version of the sandbox to be built.</p>
    pub fn source_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Any version identifier for the version of the sandbox to be built.</p>
    pub fn set_source_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_version = input;
        self
    }
    /// <p>Any version identifier for the version of the sandbox to be built.</p>
    pub fn get_source_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_version
    }
    /// Appends an item to `secondary_sources`.
    ///
    /// To override the contents of this collection use [`set_secondary_sources`](Self::set_secondary_sources).
    ///
    /// <p>An array of <code>ProjectSource</code> objects.</p>
    pub fn secondary_sources(mut self, input: crate::types::ProjectSource) -> Self {
        let mut v = self.secondary_sources.unwrap_or_default();
        v.push(input);
        self.secondary_sources = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>ProjectSource</code> objects.</p>
    pub fn set_secondary_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ProjectSource>>) -> Self {
        self.secondary_sources = input;
        self
    }
    /// <p>An array of <code>ProjectSource</code> objects.</p>
    pub fn get_secondary_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProjectSource>> {
        &self.secondary_sources
    }
    /// Appends an item to `secondary_source_versions`.
    ///
    /// To override the contents of this collection use [`set_secondary_source_versions`](Self::set_secondary_source_versions).
    ///
    /// <p>An array of <code>ProjectSourceVersion</code> objects.</p>
    pub fn secondary_source_versions(mut self, input: crate::types::ProjectSourceVersion) -> Self {
        let mut v = self.secondary_source_versions.unwrap_or_default();
        v.push(input);
        self.secondary_source_versions = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>ProjectSourceVersion</code> objects.</p>
    pub fn set_secondary_source_versions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ProjectSourceVersion>>) -> Self {
        self.secondary_source_versions = input;
        self
    }
    /// <p>An array of <code>ProjectSourceVersion</code> objects.</p>
    pub fn get_secondary_source_versions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProjectSourceVersion>> {
        &self.secondary_source_versions
    }
    /// <p>Information about the build environment of the build project.</p>
    pub fn environment(mut self, input: crate::types::ProjectEnvironment) -> Self {
        self.environment = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the build environment of the build project.</p>
    pub fn set_environment(mut self, input: ::std::option::Option<crate::types::ProjectEnvironment>) -> Self {
        self.environment = input;
        self
    }
    /// <p>Information about the build environment of the build project.</p>
    pub fn get_environment(&self) -> &::std::option::Option<crate::types::ProjectEnvironment> {
        &self.environment
    }
    /// Appends an item to `file_system_locations`.
    ///
    /// To override the contents of this collection use [`set_file_system_locations`](Self::set_file_system_locations).
    ///
    /// <p>An array of <code>ProjectFileSystemLocation</code> objects for a CodeBuild build project. A <code>ProjectFileSystemLocation</code> object specifies the <code>identifier</code>, <code>location</code>, <code>mountOptions</code>, <code>mountPoint</code>, and <code>type</code> of a file system created using Amazon Elastic File System.</p>
    pub fn file_system_locations(mut self, input: crate::types::ProjectFileSystemLocation) -> Self {
        let mut v = self.file_system_locations.unwrap_or_default();
        v.push(input);
        self.file_system_locations = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>ProjectFileSystemLocation</code> objects for a CodeBuild build project. A <code>ProjectFileSystemLocation</code> object specifies the <code>identifier</code>, <code>location</code>, <code>mountOptions</code>, <code>mountPoint</code>, and <code>type</code> of a file system created using Amazon Elastic File System.</p>
    pub fn set_file_system_locations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ProjectFileSystemLocation>>) -> Self {
        self.file_system_locations = input;
        self
    }
    /// <p>An array of <code>ProjectFileSystemLocation</code> objects for a CodeBuild build project. A <code>ProjectFileSystemLocation</code> object specifies the <code>identifier</code>, <code>location</code>, <code>mountOptions</code>, <code>mountPoint</code>, and <code>type</code> of a file system created using Amazon Elastic File System.</p>
    pub fn get_file_system_locations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProjectFileSystemLocation>> {
        &self.file_system_locations
    }
    /// <p>How long, in minutes, from 5 to 2160 (36 hours), for CodeBuild to wait before timing out this sandbox if it does not get marked as completed.</p>
    pub fn timeout_in_minutes(mut self, input: i32) -> Self {
        self.timeout_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>How long, in minutes, from 5 to 2160 (36 hours), for CodeBuild to wait before timing out this sandbox if it does not get marked as completed.</p>
    pub fn set_timeout_in_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.timeout_in_minutes = input;
        self
    }
    /// <p>How long, in minutes, from 5 to 2160 (36 hours), for CodeBuild to wait before timing out this sandbox if it does not get marked as completed.</p>
    pub fn get_timeout_in_minutes(&self) -> &::std::option::Option<i32> {
        &self.timeout_in_minutes
    }
    /// <p>The number of minutes a sandbox is allowed to be queued before it times out.</p>
    pub fn queued_timeout_in_minutes(mut self, input: i32) -> Self {
        self.queued_timeout_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of minutes a sandbox is allowed to be queued before it times out.</p>
    pub fn set_queued_timeout_in_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.queued_timeout_in_minutes = input;
        self
    }
    /// <p>The number of minutes a sandbox is allowed to be queued before it times out.</p>
    pub fn get_queued_timeout_in_minutes(&self) -> &::std::option::Option<i32> {
        &self.queued_timeout_in_minutes
    }
    /// <p>Information about the VPC configuration that CodeBuild accesses.</p>
    pub fn vpc_config(mut self, input: crate::types::VpcConfig) -> Self {
        self.vpc_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the VPC configuration that CodeBuild accesses.</p>
    pub fn set_vpc_config(mut self, input: ::std::option::Option<crate::types::VpcConfig>) -> Self {
        self.vpc_config = input;
        self
    }
    /// <p>Information about the VPC configuration that CodeBuild accesses.</p>
    pub fn get_vpc_config(&self) -> &::std::option::Option<crate::types::VpcConfig> {
        &self.vpc_config
    }
    /// <p>Information about logs for a build project. These can be logs in CloudWatch Logs, built in a specified S3 bucket, or both.</p>
    pub fn log_config(mut self, input: crate::types::LogsConfig) -> Self {
        self.log_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about logs for a build project. These can be logs in CloudWatch Logs, built in a specified S3 bucket, or both.</p>
    pub fn set_log_config(mut self, input: ::std::option::Option<crate::types::LogsConfig>) -> Self {
        self.log_config = input;
        self
    }
    /// <p>Information about logs for a build project. These can be logs in CloudWatch Logs, built in a specified S3 bucket, or both.</p>
    pub fn get_log_config(&self) -> &::std::option::Option<crate::types::LogsConfig> {
        &self.log_config
    }
    /// <p>The Key Management Service customer master key (CMK) to be used for encrypting the sandbox output artifacts.</p>
    pub fn encryption_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encryption_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Key Management Service customer master key (CMK) to be used for encrypting the sandbox output artifacts.</p>
    pub fn set_encryption_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encryption_key = input;
        self
    }
    /// <p>The Key Management Service customer master key (CMK) to be used for encrypting the sandbox output artifacts.</p>
    pub fn get_encryption_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.encryption_key
    }
    /// <p>The name of a service role used for this sandbox.</p>
    pub fn service_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a service role used for this sandbox.</p>
    pub fn set_service_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_role = input;
        self
    }
    /// <p>The name of a service role used for this sandbox.</p>
    pub fn get_service_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_role
    }
    /// <p>The current session for the sandbox.</p>
    pub fn current_session(mut self, input: crate::types::SandboxSession) -> Self {
        self.current_session = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current session for the sandbox.</p>
    pub fn set_current_session(mut self, input: ::std::option::Option<crate::types::SandboxSession>) -> Self {
        self.current_session = input;
        self
    }
    /// <p>The current session for the sandbox.</p>
    pub fn get_current_session(&self) -> &::std::option::Option<crate::types::SandboxSession> {
        &self.current_session
    }
    /// Consumes the builder and constructs a [`Sandbox`](crate::types::Sandbox).
    pub fn build(self) -> crate::types::Sandbox {
        crate::types::Sandbox {
            id: self.id,
            arn: self.arn,
            project_name: self.project_name,
            request_time: self.request_time,
            start_time: self.start_time,
            end_time: self.end_time,
            status: self.status,
            source: self.source,
            source_version: self.source_version,
            secondary_sources: self.secondary_sources,
            secondary_source_versions: self.secondary_source_versions,
            environment: self.environment,
            file_system_locations: self.file_system_locations,
            timeout_in_minutes: self.timeout_in_minutes,
            queued_timeout_in_minutes: self.queued_timeout_in_minutes,
            vpc_config: self.vpc_config,
            log_config: self.log_config,
            encryption_key: self.encryption_key,
            service_role: self.service_role,
            current_session: self.current_session,
        }
    }
}
