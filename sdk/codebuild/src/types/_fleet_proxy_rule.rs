// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the proxy rule for your reserved capacity instances.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FleetProxyRule {
    /// <p>The type of proxy rule.</p>
    pub r#type: crate::types::FleetProxyRuleType,
    /// <p>The behavior of the proxy rule.</p>
    pub effect: crate::types::FleetProxyRuleEffectType,
    /// <p>The destination of the proxy rule.</p>
    pub entities: ::std::vec::Vec<::std::string::String>,
}
impl FleetProxyRule {
    /// <p>The type of proxy rule.</p>
    pub fn r#type(&self) -> &crate::types::FleetProxyRuleType {
        &self.r#type
    }
    /// <p>The behavior of the proxy rule.</p>
    pub fn effect(&self) -> &crate::types::FleetProxyRuleEffectType {
        &self.effect
    }
    /// <p>The destination of the proxy rule.</p>
    pub fn entities(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.entities.deref()
    }
}
impl FleetProxyRule {
    /// Creates a new builder-style object to manufacture [`FleetProxyRule`](crate::types::FleetProxyRule).
    pub fn builder() -> crate::types::builders::FleetProxyRuleBuilder {
        crate::types::builders::FleetProxyRuleBuilder::default()
    }
}

/// A builder for [`FleetProxyRule`](crate::types::FleetProxyRule).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FleetProxyRuleBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::FleetProxyRuleType>,
    pub(crate) effect: ::std::option::Option<crate::types::FleetProxyRuleEffectType>,
    pub(crate) entities: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl FleetProxyRuleBuilder {
    /// <p>The type of proxy rule.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::FleetProxyRuleType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of proxy rule.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::FleetProxyRuleType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of proxy rule.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::FleetProxyRuleType> {
        &self.r#type
    }
    /// <p>The behavior of the proxy rule.</p>
    /// This field is required.
    pub fn effect(mut self, input: crate::types::FleetProxyRuleEffectType) -> Self {
        self.effect = ::std::option::Option::Some(input);
        self
    }
    /// <p>The behavior of the proxy rule.</p>
    pub fn set_effect(mut self, input: ::std::option::Option<crate::types::FleetProxyRuleEffectType>) -> Self {
        self.effect = input;
        self
    }
    /// <p>The behavior of the proxy rule.</p>
    pub fn get_effect(&self) -> &::std::option::Option<crate::types::FleetProxyRuleEffectType> {
        &self.effect
    }
    /// Appends an item to `entities`.
    ///
    /// To override the contents of this collection use [`set_entities`](Self::set_entities).
    ///
    /// <p>The destination of the proxy rule.</p>
    pub fn entities(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.entities.unwrap_or_default();
        v.push(input.into());
        self.entities = ::std::option::Option::Some(v);
        self
    }
    /// <p>The destination of the proxy rule.</p>
    pub fn set_entities(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.entities = input;
        self
    }
    /// <p>The destination of the proxy rule.</p>
    pub fn get_entities(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.entities
    }
    /// Consumes the builder and constructs a [`FleetProxyRule`](crate::types::FleetProxyRule).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::FleetProxyRuleBuilder::type)
    /// - [`effect`](crate::types::builders::FleetProxyRuleBuilder::effect)
    /// - [`entities`](crate::types::builders::FleetProxyRuleBuilder::entities)
    pub fn build(self) -> ::std::result::Result<crate::types::FleetProxyRule, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FleetProxyRule {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building FleetProxyRule",
                )
            })?,
            effect: self.effect.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "effect",
                    "effect was not specified but it is required when building FleetProxyRule",
                )
            })?,
            entities: self.entities.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "entities",
                    "entities was not specified but it is required when building FleetProxyRule",
                )
            })?,
        })
    }
}
