// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the sandbox session.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SandboxSession {
    /// <p>The ID of the sandbox session.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the sandbox session.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>When the sandbox session started, expressed in Unix time format.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>When the sandbox session ended, expressed in Unix time format.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The current phase for the sandbox.</p>
    pub current_phase: ::std::option::Option<::std::string::String>,
    /// <p>An array of <code>SandboxSessionPhase</code> objects.</p>
    pub phases: ::std::option::Option<::std::vec::Vec<crate::types::SandboxSessionPhase>>,
    /// <p>An identifier for the version of this sandbox's source code.</p>
    pub resolved_source_version: ::std::option::Option<::std::string::String>,
    /// <p>Information about build logs in CloudWatch Logs.</p>
    pub logs: ::std::option::Option<crate::types::LogsLocation>,
    /// <p>Describes a network interface.</p>
    pub network_interface: ::std::option::Option<crate::types::NetworkInterface>,
}
impl SandboxSession {
    /// <p>The ID of the sandbox session.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The status of the sandbox session.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>When the sandbox session started, expressed in Unix time format.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>When the sandbox session ended, expressed in Unix time format.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The current phase for the sandbox.</p>
    pub fn current_phase(&self) -> ::std::option::Option<&str> {
        self.current_phase.as_deref()
    }
    /// <p>An array of <code>SandboxSessionPhase</code> objects.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.phases.is_none()`.
    pub fn phases(&self) -> &[crate::types::SandboxSessionPhase] {
        self.phases.as_deref().unwrap_or_default()
    }
    /// <p>An identifier for the version of this sandbox's source code.</p>
    pub fn resolved_source_version(&self) -> ::std::option::Option<&str> {
        self.resolved_source_version.as_deref()
    }
    /// <p>Information about build logs in CloudWatch Logs.</p>
    pub fn logs(&self) -> ::std::option::Option<&crate::types::LogsLocation> {
        self.logs.as_ref()
    }
    /// <p>Describes a network interface.</p>
    pub fn network_interface(&self) -> ::std::option::Option<&crate::types::NetworkInterface> {
        self.network_interface.as_ref()
    }
}
impl SandboxSession {
    /// Creates a new builder-style object to manufacture [`SandboxSession`](crate::types::SandboxSession).
    pub fn builder() -> crate::types::builders::SandboxSessionBuilder {
        crate::types::builders::SandboxSessionBuilder::default()
    }
}

/// A builder for [`SandboxSession`](crate::types::SandboxSession).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SandboxSessionBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) current_phase: ::std::option::Option<::std::string::String>,
    pub(crate) phases: ::std::option::Option<::std::vec::Vec<crate::types::SandboxSessionPhase>>,
    pub(crate) resolved_source_version: ::std::option::Option<::std::string::String>,
    pub(crate) logs: ::std::option::Option<crate::types::LogsLocation>,
    pub(crate) network_interface: ::std::option::Option<crate::types::NetworkInterface>,
}
impl SandboxSessionBuilder {
    /// <p>The ID of the sandbox session.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the sandbox session.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the sandbox session.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The status of the sandbox session.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the sandbox session.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the sandbox session.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>When the sandbox session started, expressed in Unix time format.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the sandbox session started, expressed in Unix time format.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>When the sandbox session started, expressed in Unix time format.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>When the sandbox session ended, expressed in Unix time format.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the sandbox session ended, expressed in Unix time format.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>When the sandbox session ended, expressed in Unix time format.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The current phase for the sandbox.</p>
    pub fn current_phase(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_phase = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current phase for the sandbox.</p>
    pub fn set_current_phase(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_phase = input;
        self
    }
    /// <p>The current phase for the sandbox.</p>
    pub fn get_current_phase(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_phase
    }
    /// Appends an item to `phases`.
    ///
    /// To override the contents of this collection use [`set_phases`](Self::set_phases).
    ///
    /// <p>An array of <code>SandboxSessionPhase</code> objects.</p>
    pub fn phases(mut self, input: crate::types::SandboxSessionPhase) -> Self {
        let mut v = self.phases.unwrap_or_default();
        v.push(input);
        self.phases = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>SandboxSessionPhase</code> objects.</p>
    pub fn set_phases(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SandboxSessionPhase>>) -> Self {
        self.phases = input;
        self
    }
    /// <p>An array of <code>SandboxSessionPhase</code> objects.</p>
    pub fn get_phases(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SandboxSessionPhase>> {
        &self.phases
    }
    /// <p>An identifier for the version of this sandbox's source code.</p>
    pub fn resolved_source_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resolved_source_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An identifier for the version of this sandbox's source code.</p>
    pub fn set_resolved_source_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resolved_source_version = input;
        self
    }
    /// <p>An identifier for the version of this sandbox's source code.</p>
    pub fn get_resolved_source_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.resolved_source_version
    }
    /// <p>Information about build logs in CloudWatch Logs.</p>
    pub fn logs(mut self, input: crate::types::LogsLocation) -> Self {
        self.logs = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about build logs in CloudWatch Logs.</p>
    pub fn set_logs(mut self, input: ::std::option::Option<crate::types::LogsLocation>) -> Self {
        self.logs = input;
        self
    }
    /// <p>Information about build logs in CloudWatch Logs.</p>
    pub fn get_logs(&self) -> &::std::option::Option<crate::types::LogsLocation> {
        &self.logs
    }
    /// <p>Describes a network interface.</p>
    pub fn network_interface(mut self, input: crate::types::NetworkInterface) -> Self {
        self.network_interface = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes a network interface.</p>
    pub fn set_network_interface(mut self, input: ::std::option::Option<crate::types::NetworkInterface>) -> Self {
        self.network_interface = input;
        self
    }
    /// <p>Describes a network interface.</p>
    pub fn get_network_interface(&self) -> &::std::option::Option<crate::types::NetworkInterface> {
        &self.network_interface
    }
    /// Consumes the builder and constructs a [`SandboxSession`](crate::types::SandboxSession).
    pub fn build(self) -> crate::types::SandboxSession {
        crate::types::SandboxSession {
            id: self.id,
            status: self.status,
            start_time: self.start_time,
            end_time: self.end_time,
            current_phase: self.current_phase,
            phases: self.phases,
            resolved_source_version: self.resolved_source_version,
            logs: self.logs,
            network_interface: self.network_interface,
        }
    }
}
