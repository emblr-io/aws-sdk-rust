// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the Session Manager session.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SsmSession {
    /// <p>The ID of the session.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>An encrypted token value containing session and caller information.</p>
    pub token_value: ::std::option::Option<::std::string::String>,
    /// <p>A URL back to SSM Agent on the managed node that the Session Manager client uses to send commands and receive output from the node.</p>
    pub stream_url: ::std::option::Option<::std::string::String>,
}
impl SsmSession {
    /// <p>The ID of the session.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>An encrypted token value containing session and caller information.</p>
    pub fn token_value(&self) -> ::std::option::Option<&str> {
        self.token_value.as_deref()
    }
    /// <p>A URL back to SSM Agent on the managed node that the Session Manager client uses to send commands and receive output from the node.</p>
    pub fn stream_url(&self) -> ::std::option::Option<&str> {
        self.stream_url.as_deref()
    }
}
impl SsmSession {
    /// Creates a new builder-style object to manufacture [`SsmSession`](crate::types::SsmSession).
    pub fn builder() -> crate::types::builders::SsmSessionBuilder {
        crate::types::builders::SsmSessionBuilder::default()
    }
}

/// A builder for [`SsmSession`](crate::types::SsmSession).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SsmSessionBuilder {
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) token_value: ::std::option::Option<::std::string::String>,
    pub(crate) stream_url: ::std::option::Option<::std::string::String>,
}
impl SsmSessionBuilder {
    /// <p>The ID of the session.</p>
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the session.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The ID of the session.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>An encrypted token value containing session and caller information.</p>
    pub fn token_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.token_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An encrypted token value containing session and caller information.</p>
    pub fn set_token_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.token_value = input;
        self
    }
    /// <p>An encrypted token value containing session and caller information.</p>
    pub fn get_token_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.token_value
    }
    /// <p>A URL back to SSM Agent on the managed node that the Session Manager client uses to send commands and receive output from the node.</p>
    pub fn stream_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stream_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A URL back to SSM Agent on the managed node that the Session Manager client uses to send commands and receive output from the node.</p>
    pub fn set_stream_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stream_url = input;
        self
    }
    /// <p>A URL back to SSM Agent on the managed node that the Session Manager client uses to send commands and receive output from the node.</p>
    pub fn get_stream_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.stream_url
    }
    /// Consumes the builder and constructs a [`SsmSession`](crate::types::SsmSession).
    pub fn build(self) -> crate::types::SsmSession {
        crate::types::SsmSession {
            session_id: self.session_id,
            token_value: self.token_value,
            stream_url: self.stream_url,
        }
    }
}
