// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains command execution information.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CommandExecution {
    /// <p>The ID of the command execution.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>A <code>sandboxId</code>.</p>
    pub sandbox_id: ::std::option::Option<::std::string::String>,
    /// <p>When the command execution process was initially submitted, expressed in Unix time format.</p>
    pub submit_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>When the command execution process started, expressed in Unix time format.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>When the command execution process ended, expressed in Unix time format.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The status of the command execution.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>The command that needs to be executed.</p>
    pub command: ::std::option::Option<::std::string::String>,
    /// <p>The command type.</p>
    pub r#type: ::std::option::Option<crate::types::CommandType>,
    /// <p>The exit code to return upon completion.</p>
    pub exit_code: ::std::option::Option<::std::string::String>,
    /// <p>The text written by the command to stdout.</p>
    pub standard_output_content: ::std::option::Option<::std::string::String>,
    /// <p>The text written by the command to stderr.</p>
    pub standard_err_content: ::std::option::Option<::std::string::String>,
    /// <p>Information about build logs in CloudWatch Logs.</p>
    pub logs: ::std::option::Option<crate::types::LogsLocation>,
    /// <p>A <code>sandboxArn</code>.</p>
    pub sandbox_arn: ::std::option::Option<::std::string::String>,
}
impl CommandExecution {
    /// <p>The ID of the command execution.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>A <code>sandboxId</code>.</p>
    pub fn sandbox_id(&self) -> ::std::option::Option<&str> {
        self.sandbox_id.as_deref()
    }
    /// <p>When the command execution process was initially submitted, expressed in Unix time format.</p>
    pub fn submit_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.submit_time.as_ref()
    }
    /// <p>When the command execution process started, expressed in Unix time format.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>When the command execution process ended, expressed in Unix time format.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The status of the command execution.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The command that needs to be executed.</p>
    pub fn command(&self) -> ::std::option::Option<&str> {
        self.command.as_deref()
    }
    /// <p>The command type.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::CommandType> {
        self.r#type.as_ref()
    }
    /// <p>The exit code to return upon completion.</p>
    pub fn exit_code(&self) -> ::std::option::Option<&str> {
        self.exit_code.as_deref()
    }
    /// <p>The text written by the command to stdout.</p>
    pub fn standard_output_content(&self) -> ::std::option::Option<&str> {
        self.standard_output_content.as_deref()
    }
    /// <p>The text written by the command to stderr.</p>
    pub fn standard_err_content(&self) -> ::std::option::Option<&str> {
        self.standard_err_content.as_deref()
    }
    /// <p>Information about build logs in CloudWatch Logs.</p>
    pub fn logs(&self) -> ::std::option::Option<&crate::types::LogsLocation> {
        self.logs.as_ref()
    }
    /// <p>A <code>sandboxArn</code>.</p>
    pub fn sandbox_arn(&self) -> ::std::option::Option<&str> {
        self.sandbox_arn.as_deref()
    }
}
impl ::std::fmt::Debug for CommandExecution {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CommandExecution");
        formatter.field("id", &self.id);
        formatter.field("sandbox_id", &self.sandbox_id);
        formatter.field("submit_time", &self.submit_time);
        formatter.field("start_time", &self.start_time);
        formatter.field("end_time", &self.end_time);
        formatter.field("status", &self.status);
        formatter.field("command", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.field("exit_code", &self.exit_code);
        formatter.field("standard_output_content", &"*** Sensitive Data Redacted ***");
        formatter.field("standard_err_content", &"*** Sensitive Data Redacted ***");
        formatter.field("logs", &self.logs);
        formatter.field("sandbox_arn", &self.sandbox_arn);
        formatter.finish()
    }
}
impl CommandExecution {
    /// Creates a new builder-style object to manufacture [`CommandExecution`](crate::types::CommandExecution).
    pub fn builder() -> crate::types::builders::CommandExecutionBuilder {
        crate::types::builders::CommandExecutionBuilder::default()
    }
}

/// A builder for [`CommandExecution`](crate::types::CommandExecution).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CommandExecutionBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) sandbox_id: ::std::option::Option<::std::string::String>,
    pub(crate) submit_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) command: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::CommandType>,
    pub(crate) exit_code: ::std::option::Option<::std::string::String>,
    pub(crate) standard_output_content: ::std::option::Option<::std::string::String>,
    pub(crate) standard_err_content: ::std::option::Option<::std::string::String>,
    pub(crate) logs: ::std::option::Option<crate::types::LogsLocation>,
    pub(crate) sandbox_arn: ::std::option::Option<::std::string::String>,
}
impl CommandExecutionBuilder {
    /// <p>The ID of the command execution.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the command execution.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the command execution.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>A <code>sandboxId</code>.</p>
    pub fn sandbox_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sandbox_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A <code>sandboxId</code>.</p>
    pub fn set_sandbox_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sandbox_id = input;
        self
    }
    /// <p>A <code>sandboxId</code>.</p>
    pub fn get_sandbox_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sandbox_id
    }
    /// <p>When the command execution process was initially submitted, expressed in Unix time format.</p>
    pub fn submit_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.submit_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the command execution process was initially submitted, expressed in Unix time format.</p>
    pub fn set_submit_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.submit_time = input;
        self
    }
    /// <p>When the command execution process was initially submitted, expressed in Unix time format.</p>
    pub fn get_submit_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.submit_time
    }
    /// <p>When the command execution process started, expressed in Unix time format.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the command execution process started, expressed in Unix time format.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>When the command execution process started, expressed in Unix time format.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>When the command execution process ended, expressed in Unix time format.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the command execution process ended, expressed in Unix time format.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>When the command execution process ended, expressed in Unix time format.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The status of the command execution.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the command execution.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the command execution.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The command that needs to be executed.</p>
    pub fn command(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.command = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The command that needs to be executed.</p>
    pub fn set_command(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.command = input;
        self
    }
    /// <p>The command that needs to be executed.</p>
    pub fn get_command(&self) -> &::std::option::Option<::std::string::String> {
        &self.command
    }
    /// <p>The command type.</p>
    pub fn r#type(mut self, input: crate::types::CommandType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The command type.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::CommandType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The command type.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::CommandType> {
        &self.r#type
    }
    /// <p>The exit code to return upon completion.</p>
    pub fn exit_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.exit_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The exit code to return upon completion.</p>
    pub fn set_exit_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.exit_code = input;
        self
    }
    /// <p>The exit code to return upon completion.</p>
    pub fn get_exit_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.exit_code
    }
    /// <p>The text written by the command to stdout.</p>
    pub fn standard_output_content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.standard_output_content = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text written by the command to stdout.</p>
    pub fn set_standard_output_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.standard_output_content = input;
        self
    }
    /// <p>The text written by the command to stdout.</p>
    pub fn get_standard_output_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.standard_output_content
    }
    /// <p>The text written by the command to stderr.</p>
    pub fn standard_err_content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.standard_err_content = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text written by the command to stderr.</p>
    pub fn set_standard_err_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.standard_err_content = input;
        self
    }
    /// <p>The text written by the command to stderr.</p>
    pub fn get_standard_err_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.standard_err_content
    }
    /// <p>Information about build logs in CloudWatch Logs.</p>
    pub fn logs(mut self, input: crate::types::LogsLocation) -> Self {
        self.logs = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about build logs in CloudWatch Logs.</p>
    pub fn set_logs(mut self, input: ::std::option::Option<crate::types::LogsLocation>) -> Self {
        self.logs = input;
        self
    }
    /// <p>Information about build logs in CloudWatch Logs.</p>
    pub fn get_logs(&self) -> &::std::option::Option<crate::types::LogsLocation> {
        &self.logs
    }
    /// <p>A <code>sandboxArn</code>.</p>
    pub fn sandbox_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sandbox_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A <code>sandboxArn</code>.</p>
    pub fn set_sandbox_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sandbox_arn = input;
        self
    }
    /// <p>A <code>sandboxArn</code>.</p>
    pub fn get_sandbox_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.sandbox_arn
    }
    /// Consumes the builder and constructs a [`CommandExecution`](crate::types::CommandExecution).
    pub fn build(self) -> crate::types::CommandExecution {
        crate::types::CommandExecution {
            id: self.id,
            sandbox_id: self.sandbox_id,
            submit_time: self.submit_time,
            start_time: self.start_time,
            end_time: self.end_time,
            status: self.status,
            command: self.command,
            r#type: self.r#type,
            exit_code: self.exit_code,
            standard_output_content: self.standard_output_content,
            standard_err_content: self.standard_err_content,
            logs: self.logs,
            sandbox_arn: self.sandbox_arn,
        }
    }
}
impl ::std::fmt::Debug for CommandExecutionBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CommandExecutionBuilder");
        formatter.field("id", &self.id);
        formatter.field("sandbox_id", &self.sandbox_id);
        formatter.field("submit_time", &self.submit_time);
        formatter.field("start_time", &self.start_time);
        formatter.field("end_time", &self.end_time);
        formatter.field("status", &self.status);
        formatter.field("command", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.field("exit_code", &self.exit_code);
        formatter.field("standard_output_content", &"*** Sensitive Data Redacted ***");
        formatter.field("standard_err_content", &"*** Sensitive Data Redacted ***");
        formatter.field("logs", &self.logs);
        formatter.field("sandbox_arn", &self.sandbox_arn);
        formatter.finish()
    }
}
