// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeMetricsExportOutput {
    /// <p>Identifier for the metrics export task.</p>
    pub metrics_export_id: ::std::string::String,
    /// <p>Indicates the status of the metrics export task.</p>
    pub status: crate::types::MetricsExportStatusType,
    /// <p>Specifies the name of the Amazon S3 bucket where the exported metrics is stored.</p>
    pub export_location: ::std::option::Option<crate::types::S3Location>,
    /// <p>Explains the error that occurred while exporting the metrics.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeMetricsExportOutput {
    /// <p>Identifier for the metrics export task.</p>
    pub fn metrics_export_id(&self) -> &str {
        use std::ops::Deref;
        self.metrics_export_id.deref()
    }
    /// <p>Indicates the status of the metrics export task.</p>
    pub fn status(&self) -> &crate::types::MetricsExportStatusType {
        &self.status
    }
    /// <p>Specifies the name of the Amazon S3 bucket where the exported metrics is stored.</p>
    pub fn export_location(&self) -> ::std::option::Option<&crate::types::S3Location> {
        self.export_location.as_ref()
    }
    /// <p>Explains the error that occurred while exporting the metrics.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeMetricsExportOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeMetricsExportOutput {
    /// Creates a new builder-style object to manufacture [`DescribeMetricsExportOutput`](crate::operation::describe_metrics_export::DescribeMetricsExportOutput).
    pub fn builder() -> crate::operation::describe_metrics_export::builders::DescribeMetricsExportOutputBuilder {
        crate::operation::describe_metrics_export::builders::DescribeMetricsExportOutputBuilder::default()
    }
}

/// A builder for [`DescribeMetricsExportOutput`](crate::operation::describe_metrics_export::DescribeMetricsExportOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeMetricsExportOutputBuilder {
    pub(crate) metrics_export_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::MetricsExportStatusType>,
    pub(crate) export_location: ::std::option::Option<crate::types::S3Location>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeMetricsExportOutputBuilder {
    /// <p>Identifier for the metrics export task.</p>
    /// This field is required.
    pub fn metrics_export_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metrics_export_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifier for the metrics export task.</p>
    pub fn set_metrics_export_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metrics_export_id = input;
        self
    }
    /// <p>Identifier for the metrics export task.</p>
    pub fn get_metrics_export_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.metrics_export_id
    }
    /// <p>Indicates the status of the metrics export task.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::MetricsExportStatusType) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the status of the metrics export task.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::MetricsExportStatusType>) -> Self {
        self.status = input;
        self
    }
    /// <p>Indicates the status of the metrics export task.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::MetricsExportStatusType> {
        &self.status
    }
    /// <p>Specifies the name of the Amazon S3 bucket where the exported metrics is stored.</p>
    pub fn export_location(mut self, input: crate::types::S3Location) -> Self {
        self.export_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the name of the Amazon S3 bucket where the exported metrics is stored.</p>
    pub fn set_export_location(mut self, input: ::std::option::Option<crate::types::S3Location>) -> Self {
        self.export_location = input;
        self
    }
    /// <p>Specifies the name of the Amazon S3 bucket where the exported metrics is stored.</p>
    pub fn get_export_location(&self) -> &::std::option::Option<crate::types::S3Location> {
        &self.export_location
    }
    /// <p>Explains the error that occurred while exporting the metrics.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Explains the error that occurred while exporting the metrics.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>Explains the error that occurred while exporting the metrics.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeMetricsExportOutput`](crate::operation::describe_metrics_export::DescribeMetricsExportOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`metrics_export_id`](crate::operation::describe_metrics_export::builders::DescribeMetricsExportOutputBuilder::metrics_export_id)
    /// - [`status`](crate::operation::describe_metrics_export::builders::DescribeMetricsExportOutputBuilder::status)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_metrics_export::DescribeMetricsExportOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::describe_metrics_export::DescribeMetricsExportOutput {
            metrics_export_id: self.metrics_export_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metrics_export_id",
                    "metrics_export_id was not specified but it is required when building DescribeMetricsExportOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building DescribeMetricsExportOutput",
                )
            })?,
            export_location: self.export_location,
            error_message: self.error_message,
            _request_id: self._request_id,
        })
    }
}
