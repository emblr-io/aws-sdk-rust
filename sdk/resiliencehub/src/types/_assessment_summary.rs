// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates the AI-generated summary for the Resilience Hub assessment, providing a concise overview that highlights the top risks and recommendations.</p><note>
/// <p>This property is available only in the US East (N. Virginia) Region.</p>
/// </note>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssessmentSummary {
    /// <p>Indicates a concise summary that provides an overview of the Resilience Hub assessment.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    pub summary: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the top risks and recommendations identified by the Resilience Hub assessment, each representing a specific risk and the corresponding recommendation to address it.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    pub risk_recommendations: ::std::option::Option<::std::vec::Vec<crate::types::AssessmentRiskRecommendation>>,
}
impl AssessmentSummary {
    /// <p>Indicates a concise summary that provides an overview of the Resilience Hub assessment.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    pub fn summary(&self) -> ::std::option::Option<&str> {
        self.summary.as_deref()
    }
    /// <p>Indicates the top risks and recommendations identified by the Resilience Hub assessment, each representing a specific risk and the corresponding recommendation to address it.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.risk_recommendations.is_none()`.
    pub fn risk_recommendations(&self) -> &[crate::types::AssessmentRiskRecommendation] {
        self.risk_recommendations.as_deref().unwrap_or_default()
    }
}
impl AssessmentSummary {
    /// Creates a new builder-style object to manufacture [`AssessmentSummary`](crate::types::AssessmentSummary).
    pub fn builder() -> crate::types::builders::AssessmentSummaryBuilder {
        crate::types::builders::AssessmentSummaryBuilder::default()
    }
}

/// A builder for [`AssessmentSummary`](crate::types::AssessmentSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssessmentSummaryBuilder {
    pub(crate) summary: ::std::option::Option<::std::string::String>,
    pub(crate) risk_recommendations: ::std::option::Option<::std::vec::Vec<crate::types::AssessmentRiskRecommendation>>,
}
impl AssessmentSummaryBuilder {
    /// <p>Indicates a concise summary that provides an overview of the Resilience Hub assessment.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    pub fn summary(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.summary = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates a concise summary that provides an overview of the Resilience Hub assessment.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    pub fn set_summary(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.summary = input;
        self
    }
    /// <p>Indicates a concise summary that provides an overview of the Resilience Hub assessment.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    pub fn get_summary(&self) -> &::std::option::Option<::std::string::String> {
        &self.summary
    }
    /// Appends an item to `risk_recommendations`.
    ///
    /// To override the contents of this collection use [`set_risk_recommendations`](Self::set_risk_recommendations).
    ///
    /// <p>Indicates the top risks and recommendations identified by the Resilience Hub assessment, each representing a specific risk and the corresponding recommendation to address it.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    pub fn risk_recommendations(mut self, input: crate::types::AssessmentRiskRecommendation) -> Self {
        let mut v = self.risk_recommendations.unwrap_or_default();
        v.push(input);
        self.risk_recommendations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates the top risks and recommendations identified by the Resilience Hub assessment, each representing a specific risk and the corresponding recommendation to address it.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    pub fn set_risk_recommendations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AssessmentRiskRecommendation>>) -> Self {
        self.risk_recommendations = input;
        self
    }
    /// <p>Indicates the top risks and recommendations identified by the Resilience Hub assessment, each representing a specific risk and the corresponding recommendation to address it.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    pub fn get_risk_recommendations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AssessmentRiskRecommendation>> {
        &self.risk_recommendations
    }
    /// Consumes the builder and constructs a [`AssessmentSummary`](crate::types::AssessmentSummary).
    pub fn build(self) -> crate::types::AssessmentSummary {
        crate::types::AssessmentSummary {
            summary: self.summary,
            risk_recommendations: self.risk_recommendations,
        }
    }
}
