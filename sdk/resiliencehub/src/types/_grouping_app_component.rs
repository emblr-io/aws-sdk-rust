// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Creates a new recommended Application Component (AppComponent).</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GroupingAppComponent {
    /// <p>Indicates the identifier of an AppComponent.</p>
    pub app_component_id: ::std::string::String,
    /// <p>Indicates the type of an AppComponent.</p>
    pub app_component_type: ::std::string::String,
    /// <p>Indicates the name of an AppComponent.</p>
    pub app_component_name: ::std::string::String,
}
impl GroupingAppComponent {
    /// <p>Indicates the identifier of an AppComponent.</p>
    pub fn app_component_id(&self) -> &str {
        use std::ops::Deref;
        self.app_component_id.deref()
    }
    /// <p>Indicates the type of an AppComponent.</p>
    pub fn app_component_type(&self) -> &str {
        use std::ops::Deref;
        self.app_component_type.deref()
    }
    /// <p>Indicates the name of an AppComponent.</p>
    pub fn app_component_name(&self) -> &str {
        use std::ops::Deref;
        self.app_component_name.deref()
    }
}
impl GroupingAppComponent {
    /// Creates a new builder-style object to manufacture [`GroupingAppComponent`](crate::types::GroupingAppComponent).
    pub fn builder() -> crate::types::builders::GroupingAppComponentBuilder {
        crate::types::builders::GroupingAppComponentBuilder::default()
    }
}

/// A builder for [`GroupingAppComponent`](crate::types::GroupingAppComponent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GroupingAppComponentBuilder {
    pub(crate) app_component_id: ::std::option::Option<::std::string::String>,
    pub(crate) app_component_type: ::std::option::Option<::std::string::String>,
    pub(crate) app_component_name: ::std::option::Option<::std::string::String>,
}
impl GroupingAppComponentBuilder {
    /// <p>Indicates the identifier of an AppComponent.</p>
    /// This field is required.
    pub fn app_component_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_component_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates the identifier of an AppComponent.</p>
    pub fn set_app_component_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_component_id = input;
        self
    }
    /// <p>Indicates the identifier of an AppComponent.</p>
    pub fn get_app_component_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_component_id
    }
    /// <p>Indicates the type of an AppComponent.</p>
    /// This field is required.
    pub fn app_component_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_component_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates the type of an AppComponent.</p>
    pub fn set_app_component_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_component_type = input;
        self
    }
    /// <p>Indicates the type of an AppComponent.</p>
    pub fn get_app_component_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_component_type
    }
    /// <p>Indicates the name of an AppComponent.</p>
    /// This field is required.
    pub fn app_component_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_component_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates the name of an AppComponent.</p>
    pub fn set_app_component_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_component_name = input;
        self
    }
    /// <p>Indicates the name of an AppComponent.</p>
    pub fn get_app_component_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_component_name
    }
    /// Consumes the builder and constructs a [`GroupingAppComponent`](crate::types::GroupingAppComponent).
    /// This method will fail if any of the following fields are not set:
    /// - [`app_component_id`](crate::types::builders::GroupingAppComponentBuilder::app_component_id)
    /// - [`app_component_type`](crate::types::builders::GroupingAppComponentBuilder::app_component_type)
    /// - [`app_component_name`](crate::types::builders::GroupingAppComponentBuilder::app_component_name)
    pub fn build(self) -> ::std::result::Result<crate::types::GroupingAppComponent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GroupingAppComponent {
            app_component_id: self.app_component_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "app_component_id",
                    "app_component_id was not specified but it is required when building GroupingAppComponent",
                )
            })?,
            app_component_type: self.app_component_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "app_component_type",
                    "app_component_type was not specified but it is required when building GroupingAppComponent",
                )
            })?,
            app_component_name: self.app_component_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "app_component_name",
                    "app_component_name was not specified but it is required when building GroupingAppComponent",
                )
            })?,
        })
    }
}
