// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a resource mapping.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceMapping {
    /// <p>Name of the resource that this resource is mapped to when the <code>mappingType</code> is <code>Resource</code>.</p>
    pub resource_name: ::std::option::Option<::std::string::String>,
    /// <p>Name of the CloudFormation stack this resource is mapped to when the <code>mappingType</code> is <code>CfnStack</code>.</p>
    pub logical_stack_name: ::std::option::Option<::std::string::String>,
    /// <p>Name of the application this resource is mapped to when the <code>mappingType</code> is <code>AppRegistryApp</code>.</p>
    pub app_registry_app_name: ::std::option::Option<::std::string::String>,
    /// <p>Name of the Resource Groups that this resource is mapped to when the <code>mappingType</code> is <code>ResourceGroup</code>.</p>
    pub resource_group_name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the type of resource mapping.</p>
    pub mapping_type: crate::types::ResourceMappingType,
    /// <p>Identifier of the physical resource.</p>
    pub physical_resource_id: ::std::option::Option<crate::types::PhysicalResourceId>,
    /// <p>Name of the Terraform source that this resource is mapped to when the <code>mappingType</code> is <code>Terraform</code>.</p>
    pub terraform_source_name: ::std::option::Option<::std::string::String>,
    /// <p>Name of the Amazon Elastic Kubernetes Service cluster and namespace that this resource is mapped to when the <code>mappingType</code> is <code>EKS</code>.</p><note>
    /// <p>This parameter accepts values in "eks-cluster/namespace" format.</p>
    /// </note>
    pub eks_source_name: ::std::option::Option<::std::string::String>,
}
impl ResourceMapping {
    /// <p>Name of the resource that this resource is mapped to when the <code>mappingType</code> is <code>Resource</code>.</p>
    pub fn resource_name(&self) -> ::std::option::Option<&str> {
        self.resource_name.as_deref()
    }
    /// <p>Name of the CloudFormation stack this resource is mapped to when the <code>mappingType</code> is <code>CfnStack</code>.</p>
    pub fn logical_stack_name(&self) -> ::std::option::Option<&str> {
        self.logical_stack_name.as_deref()
    }
    /// <p>Name of the application this resource is mapped to when the <code>mappingType</code> is <code>AppRegistryApp</code>.</p>
    pub fn app_registry_app_name(&self) -> ::std::option::Option<&str> {
        self.app_registry_app_name.as_deref()
    }
    /// <p>Name of the Resource Groups that this resource is mapped to when the <code>mappingType</code> is <code>ResourceGroup</code>.</p>
    pub fn resource_group_name(&self) -> ::std::option::Option<&str> {
        self.resource_group_name.as_deref()
    }
    /// <p>Specifies the type of resource mapping.</p>
    pub fn mapping_type(&self) -> &crate::types::ResourceMappingType {
        &self.mapping_type
    }
    /// <p>Identifier of the physical resource.</p>
    pub fn physical_resource_id(&self) -> ::std::option::Option<&crate::types::PhysicalResourceId> {
        self.physical_resource_id.as_ref()
    }
    /// <p>Name of the Terraform source that this resource is mapped to when the <code>mappingType</code> is <code>Terraform</code>.</p>
    pub fn terraform_source_name(&self) -> ::std::option::Option<&str> {
        self.terraform_source_name.as_deref()
    }
    /// <p>Name of the Amazon Elastic Kubernetes Service cluster and namespace that this resource is mapped to when the <code>mappingType</code> is <code>EKS</code>.</p><note>
    /// <p>This parameter accepts values in "eks-cluster/namespace" format.</p>
    /// </note>
    pub fn eks_source_name(&self) -> ::std::option::Option<&str> {
        self.eks_source_name.as_deref()
    }
}
impl ResourceMapping {
    /// Creates a new builder-style object to manufacture [`ResourceMapping`](crate::types::ResourceMapping).
    pub fn builder() -> crate::types::builders::ResourceMappingBuilder {
        crate::types::builders::ResourceMappingBuilder::default()
    }
}

/// A builder for [`ResourceMapping`](crate::types::ResourceMapping).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ResourceMappingBuilder {
    pub(crate) resource_name: ::std::option::Option<::std::string::String>,
    pub(crate) logical_stack_name: ::std::option::Option<::std::string::String>,
    pub(crate) app_registry_app_name: ::std::option::Option<::std::string::String>,
    pub(crate) resource_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) mapping_type: ::std::option::Option<crate::types::ResourceMappingType>,
    pub(crate) physical_resource_id: ::std::option::Option<crate::types::PhysicalResourceId>,
    pub(crate) terraform_source_name: ::std::option::Option<::std::string::String>,
    pub(crate) eks_source_name: ::std::option::Option<::std::string::String>,
}
impl ResourceMappingBuilder {
    /// <p>Name of the resource that this resource is mapped to when the <code>mappingType</code> is <code>Resource</code>.</p>
    pub fn resource_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the resource that this resource is mapped to when the <code>mappingType</code> is <code>Resource</code>.</p>
    pub fn set_resource_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_name = input;
        self
    }
    /// <p>Name of the resource that this resource is mapped to when the <code>mappingType</code> is <code>Resource</code>.</p>
    pub fn get_resource_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_name
    }
    /// <p>Name of the CloudFormation stack this resource is mapped to when the <code>mappingType</code> is <code>CfnStack</code>.</p>
    pub fn logical_stack_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.logical_stack_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the CloudFormation stack this resource is mapped to when the <code>mappingType</code> is <code>CfnStack</code>.</p>
    pub fn set_logical_stack_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.logical_stack_name = input;
        self
    }
    /// <p>Name of the CloudFormation stack this resource is mapped to when the <code>mappingType</code> is <code>CfnStack</code>.</p>
    pub fn get_logical_stack_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.logical_stack_name
    }
    /// <p>Name of the application this resource is mapped to when the <code>mappingType</code> is <code>AppRegistryApp</code>.</p>
    pub fn app_registry_app_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_registry_app_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the application this resource is mapped to when the <code>mappingType</code> is <code>AppRegistryApp</code>.</p>
    pub fn set_app_registry_app_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_registry_app_name = input;
        self
    }
    /// <p>Name of the application this resource is mapped to when the <code>mappingType</code> is <code>AppRegistryApp</code>.</p>
    pub fn get_app_registry_app_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_registry_app_name
    }
    /// <p>Name of the Resource Groups that this resource is mapped to when the <code>mappingType</code> is <code>ResourceGroup</code>.</p>
    pub fn resource_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the Resource Groups that this resource is mapped to when the <code>mappingType</code> is <code>ResourceGroup</code>.</p>
    pub fn set_resource_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_group_name = input;
        self
    }
    /// <p>Name of the Resource Groups that this resource is mapped to when the <code>mappingType</code> is <code>ResourceGroup</code>.</p>
    pub fn get_resource_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_group_name
    }
    /// <p>Specifies the type of resource mapping.</p>
    /// This field is required.
    pub fn mapping_type(mut self, input: crate::types::ResourceMappingType) -> Self {
        self.mapping_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of resource mapping.</p>
    pub fn set_mapping_type(mut self, input: ::std::option::Option<crate::types::ResourceMappingType>) -> Self {
        self.mapping_type = input;
        self
    }
    /// <p>Specifies the type of resource mapping.</p>
    pub fn get_mapping_type(&self) -> &::std::option::Option<crate::types::ResourceMappingType> {
        &self.mapping_type
    }
    /// <p>Identifier of the physical resource.</p>
    /// This field is required.
    pub fn physical_resource_id(mut self, input: crate::types::PhysicalResourceId) -> Self {
        self.physical_resource_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifier of the physical resource.</p>
    pub fn set_physical_resource_id(mut self, input: ::std::option::Option<crate::types::PhysicalResourceId>) -> Self {
        self.physical_resource_id = input;
        self
    }
    /// <p>Identifier of the physical resource.</p>
    pub fn get_physical_resource_id(&self) -> &::std::option::Option<crate::types::PhysicalResourceId> {
        &self.physical_resource_id
    }
    /// <p>Name of the Terraform source that this resource is mapped to when the <code>mappingType</code> is <code>Terraform</code>.</p>
    pub fn terraform_source_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.terraform_source_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the Terraform source that this resource is mapped to when the <code>mappingType</code> is <code>Terraform</code>.</p>
    pub fn set_terraform_source_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.terraform_source_name = input;
        self
    }
    /// <p>Name of the Terraform source that this resource is mapped to when the <code>mappingType</code> is <code>Terraform</code>.</p>
    pub fn get_terraform_source_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.terraform_source_name
    }
    /// <p>Name of the Amazon Elastic Kubernetes Service cluster and namespace that this resource is mapped to when the <code>mappingType</code> is <code>EKS</code>.</p><note>
    /// <p>This parameter accepts values in "eks-cluster/namespace" format.</p>
    /// </note>
    pub fn eks_source_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.eks_source_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the Amazon Elastic Kubernetes Service cluster and namespace that this resource is mapped to when the <code>mappingType</code> is <code>EKS</code>.</p><note>
    /// <p>This parameter accepts values in "eks-cluster/namespace" format.</p>
    /// </note>
    pub fn set_eks_source_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.eks_source_name = input;
        self
    }
    /// <p>Name of the Amazon Elastic Kubernetes Service cluster and namespace that this resource is mapped to when the <code>mappingType</code> is <code>EKS</code>.</p><note>
    /// <p>This parameter accepts values in "eks-cluster/namespace" format.</p>
    /// </note>
    pub fn get_eks_source_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.eks_source_name
    }
    /// Consumes the builder and constructs a [`ResourceMapping`](crate::types::ResourceMapping).
    /// This method will fail if any of the following fields are not set:
    /// - [`mapping_type`](crate::types::builders::ResourceMappingBuilder::mapping_type)
    pub fn build(self) -> ::std::result::Result<crate::types::ResourceMapping, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ResourceMapping {
            resource_name: self.resource_name,
            logical_stack_name: self.logical_stack_name,
            app_registry_app_name: self.app_registry_app_name,
            resource_group_name: self.resource_group_name,
            mapping_type: self.mapping_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mapping_type",
                    "mapping_type was not specified but it is required when building ResourceMapping",
                )
            })?,
            physical_resource_id: self.physical_resource_id,
            terraform_source_name: self.terraform_source_name,
            eks_source_name: self.eks_source_name,
        })
    }
}
