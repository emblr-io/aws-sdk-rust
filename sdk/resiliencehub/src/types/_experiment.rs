// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates the FIS experiment detected while running an assessment.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Experiment {
    /// <p>Amazon Resource Name (ARN) of the FIS experiment.</p>
    pub experiment_arn: ::std::option::Option<::std::string::String>,
    /// <p>Identifier of the FIS experiment template.</p>
    pub experiment_template_id: ::std::option::Option<::std::string::String>,
}
impl Experiment {
    /// <p>Amazon Resource Name (ARN) of the FIS experiment.</p>
    pub fn experiment_arn(&self) -> ::std::option::Option<&str> {
        self.experiment_arn.as_deref()
    }
    /// <p>Identifier of the FIS experiment template.</p>
    pub fn experiment_template_id(&self) -> ::std::option::Option<&str> {
        self.experiment_template_id.as_deref()
    }
}
impl Experiment {
    /// Creates a new builder-style object to manufacture [`Experiment`](crate::types::Experiment).
    pub fn builder() -> crate::types::builders::ExperimentBuilder {
        crate::types::builders::ExperimentBuilder::default()
    }
}

/// A builder for [`Experiment`](crate::types::Experiment).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ExperimentBuilder {
    pub(crate) experiment_arn: ::std::option::Option<::std::string::String>,
    pub(crate) experiment_template_id: ::std::option::Option<::std::string::String>,
}
impl ExperimentBuilder {
    /// <p>Amazon Resource Name (ARN) of the FIS experiment.</p>
    pub fn experiment_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.experiment_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the FIS experiment.</p>
    pub fn set_experiment_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.experiment_arn = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) of the FIS experiment.</p>
    pub fn get_experiment_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.experiment_arn
    }
    /// <p>Identifier of the FIS experiment template.</p>
    pub fn experiment_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.experiment_template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifier of the FIS experiment template.</p>
    pub fn set_experiment_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.experiment_template_id = input;
        self
    }
    /// <p>Identifier of the FIS experiment template.</p>
    pub fn get_experiment_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.experiment_template_id
    }
    /// Consumes the builder and constructs a [`Experiment`](crate::types::Experiment).
    pub fn build(self) -> crate::types::Experiment {
        crate::types::Experiment {
            experiment_arn: self.experiment_arn,
            experiment_template_id: self.experiment_template_id,
        }
    }
}
