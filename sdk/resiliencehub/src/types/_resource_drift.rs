// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates the resources that have drifted in the current application version.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceDrift {
    /// <p>Amazon Resource Name (ARN) of the application whose resources have drifted. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app-assessment/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub app_arn: ::std::option::Option<::std::string::String>,
    /// <p>Version of the application whose resources have drifted.</p>
    pub app_version: ::std::option::Option<::std::string::String>,
    /// <p>Reference identifier of the resource drift.</p>
    pub reference_id: ::std::option::Option<::std::string::String>,
    /// <p>Identifier of the drifted resource.</p>
    pub resource_identifier: ::std::option::Option<crate::types::ResourceIdentifier>,
    /// <p>Indicates if the resource was added or removed.</p>
    pub diff_type: ::std::option::Option<crate::types::DifferenceType>,
}
impl ResourceDrift {
    /// <p>Amazon Resource Name (ARN) of the application whose resources have drifted. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app-assessment/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub fn app_arn(&self) -> ::std::option::Option<&str> {
        self.app_arn.as_deref()
    }
    /// <p>Version of the application whose resources have drifted.</p>
    pub fn app_version(&self) -> ::std::option::Option<&str> {
        self.app_version.as_deref()
    }
    /// <p>Reference identifier of the resource drift.</p>
    pub fn reference_id(&self) -> ::std::option::Option<&str> {
        self.reference_id.as_deref()
    }
    /// <p>Identifier of the drifted resource.</p>
    pub fn resource_identifier(&self) -> ::std::option::Option<&crate::types::ResourceIdentifier> {
        self.resource_identifier.as_ref()
    }
    /// <p>Indicates if the resource was added or removed.</p>
    pub fn diff_type(&self) -> ::std::option::Option<&crate::types::DifferenceType> {
        self.diff_type.as_ref()
    }
}
impl ResourceDrift {
    /// Creates a new builder-style object to manufacture [`ResourceDrift`](crate::types::ResourceDrift).
    pub fn builder() -> crate::types::builders::ResourceDriftBuilder {
        crate::types::builders::ResourceDriftBuilder::default()
    }
}

/// A builder for [`ResourceDrift`](crate::types::ResourceDrift).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ResourceDriftBuilder {
    pub(crate) app_arn: ::std::option::Option<::std::string::String>,
    pub(crate) app_version: ::std::option::Option<::std::string::String>,
    pub(crate) reference_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_identifier: ::std::option::Option<crate::types::ResourceIdentifier>,
    pub(crate) diff_type: ::std::option::Option<crate::types::DifferenceType>,
}
impl ResourceDriftBuilder {
    /// <p>Amazon Resource Name (ARN) of the application whose resources have drifted. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app-assessment/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub fn app_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the application whose resources have drifted. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app-assessment/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub fn set_app_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_arn = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) of the application whose resources have drifted. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app-assessment/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub fn get_app_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_arn
    }
    /// <p>Version of the application whose resources have drifted.</p>
    pub fn app_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Version of the application whose resources have drifted.</p>
    pub fn set_app_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_version = input;
        self
    }
    /// <p>Version of the application whose resources have drifted.</p>
    pub fn get_app_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_version
    }
    /// <p>Reference identifier of the resource drift.</p>
    pub fn reference_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reference_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Reference identifier of the resource drift.</p>
    pub fn set_reference_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reference_id = input;
        self
    }
    /// <p>Reference identifier of the resource drift.</p>
    pub fn get_reference_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.reference_id
    }
    /// <p>Identifier of the drifted resource.</p>
    pub fn resource_identifier(mut self, input: crate::types::ResourceIdentifier) -> Self {
        self.resource_identifier = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifier of the drifted resource.</p>
    pub fn set_resource_identifier(mut self, input: ::std::option::Option<crate::types::ResourceIdentifier>) -> Self {
        self.resource_identifier = input;
        self
    }
    /// <p>Identifier of the drifted resource.</p>
    pub fn get_resource_identifier(&self) -> &::std::option::Option<crate::types::ResourceIdentifier> {
        &self.resource_identifier
    }
    /// <p>Indicates if the resource was added or removed.</p>
    pub fn diff_type(mut self, input: crate::types::DifferenceType) -> Self {
        self.diff_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates if the resource was added or removed.</p>
    pub fn set_diff_type(mut self, input: ::std::option::Option<crate::types::DifferenceType>) -> Self {
        self.diff_type = input;
        self
    }
    /// <p>Indicates if the resource was added or removed.</p>
    pub fn get_diff_type(&self) -> &::std::option::Option<crate::types::DifferenceType> {
        &self.diff_type
    }
    /// Consumes the builder and constructs a [`ResourceDrift`](crate::types::ResourceDrift).
    pub fn build(self) -> crate::types::ResourceDrift {
        crate::types::ResourceDrift {
            app_arn: self.app_arn,
            app_version: self.app_version,
            reference_id: self.reference_id,
            resource_identifier: self.resource_identifier,
            diff_type: self.diff_type,
        }
    }
}
