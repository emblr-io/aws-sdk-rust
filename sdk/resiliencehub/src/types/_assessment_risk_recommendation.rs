// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates a specific risk identified in the Resilience Hub assessment and the corresponding recommendation provided to address that risk.</p><note>
/// <p>The assessment summary generated by large language models (LLMs) on Amazon Bedrock are only suggestions. The current level of generative AI technology is not perfect and LLMs are not infallible. Bias and incorrect answers, although rare, should be expected. Review each recommendation in the assessment summary before you use the output from an LLM.</p>
/// </note> <note>
/// <p>This property is available only in the US East (N. Virginia) Region.</p>
/// </note>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssessmentRiskRecommendation {
    /// <p>Indicates the description of the potential risk identified in the application as part of the Resilience Hub assessment.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    pub risk: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the recommendation provided by the Resilience Hub to address the identified risks in the application.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    pub recommendation: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the Application Components (AppComponents) that were assessed as part of the assessment and are associated with the identified risk and recommendation.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    pub app_components: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AssessmentRiskRecommendation {
    /// <p>Indicates the description of the potential risk identified in the application as part of the Resilience Hub assessment.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    pub fn risk(&self) -> ::std::option::Option<&str> {
        self.risk.as_deref()
    }
    /// <p>Indicates the recommendation provided by the Resilience Hub to address the identified risks in the application.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    pub fn recommendation(&self) -> ::std::option::Option<&str> {
        self.recommendation.as_deref()
    }
    /// <p>Indicates the Application Components (AppComponents) that were assessed as part of the assessment and are associated with the identified risk and recommendation.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.app_components.is_none()`.
    pub fn app_components(&self) -> &[::std::string::String] {
        self.app_components.as_deref().unwrap_or_default()
    }
}
impl AssessmentRiskRecommendation {
    /// Creates a new builder-style object to manufacture [`AssessmentRiskRecommendation`](crate::types::AssessmentRiskRecommendation).
    pub fn builder() -> crate::types::builders::AssessmentRiskRecommendationBuilder {
        crate::types::builders::AssessmentRiskRecommendationBuilder::default()
    }
}

/// A builder for [`AssessmentRiskRecommendation`](crate::types::AssessmentRiskRecommendation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssessmentRiskRecommendationBuilder {
    pub(crate) risk: ::std::option::Option<::std::string::String>,
    pub(crate) recommendation: ::std::option::Option<::std::string::String>,
    pub(crate) app_components: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AssessmentRiskRecommendationBuilder {
    /// <p>Indicates the description of the potential risk identified in the application as part of the Resilience Hub assessment.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    pub fn risk(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.risk = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates the description of the potential risk identified in the application as part of the Resilience Hub assessment.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    pub fn set_risk(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.risk = input;
        self
    }
    /// <p>Indicates the description of the potential risk identified in the application as part of the Resilience Hub assessment.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    pub fn get_risk(&self) -> &::std::option::Option<::std::string::String> {
        &self.risk
    }
    /// <p>Indicates the recommendation provided by the Resilience Hub to address the identified risks in the application.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    pub fn recommendation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recommendation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates the recommendation provided by the Resilience Hub to address the identified risks in the application.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    pub fn set_recommendation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recommendation = input;
        self
    }
    /// <p>Indicates the recommendation provided by the Resilience Hub to address the identified risks in the application.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    pub fn get_recommendation(&self) -> &::std::option::Option<::std::string::String> {
        &self.recommendation
    }
    /// Appends an item to `app_components`.
    ///
    /// To override the contents of this collection use [`set_app_components`](Self::set_app_components).
    ///
    /// <p>Indicates the Application Components (AppComponents) that were assessed as part of the assessment and are associated with the identified risk and recommendation.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    pub fn app_components(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.app_components.unwrap_or_default();
        v.push(input.into());
        self.app_components = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates the Application Components (AppComponents) that were assessed as part of the assessment and are associated with the identified risk and recommendation.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    pub fn set_app_components(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.app_components = input;
        self
    }
    /// <p>Indicates the Application Components (AppComponents) that were assessed as part of the assessment and are associated with the identified risk and recommendation.</p><note>
    /// <p>This property is available only in the US East (N. Virginia) Region.</p>
    /// </note>
    pub fn get_app_components(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.app_components
    }
    /// Consumes the builder and constructs a [`AssessmentRiskRecommendation`](crate::types::AssessmentRiskRecommendation).
    pub fn build(self) -> crate::types::AssessmentRiskRecommendation {
        crate::types::AssessmentRiskRecommendation {
            risk: self.risk,
            recommendation: self.recommendation,
            app_components: self.app_components,
        }
    }
}
