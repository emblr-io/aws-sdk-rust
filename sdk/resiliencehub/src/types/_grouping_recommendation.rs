// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Creates a new grouping recommendation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GroupingRecommendation {
    /// <p>Indicates all the reasons available for rejecting a grouping recommendation.</p>
    pub grouping_recommendation_id: ::std::string::String,
    /// <p>Indicates the name of the recommended Application Component (AppComponent).</p>
    pub grouping_app_component: ::std::option::Option<crate::types::GroupingAppComponent>,
    /// <p>Indicates the resources that are grouped in a recommended AppComponent.</p>
    pub resources: ::std::vec::Vec<crate::types::GroupingResource>,
    /// <p>Indicates the confidence level of the grouping recommendation.</p>
    pub score: f64,
    /// <p>Indicates all the reasons available for rejecting a grouping recommendation.</p>
    pub recommendation_reasons: ::std::vec::Vec<::std::string::String>,
    /// <p>Indicates the status of grouping resources into AppComponents.</p>
    pub status: crate::types::GroupingRecommendationStatusType,
    /// <p>Indicates the confidence level of Resilience Hub on the grouping recommendation.</p>
    pub confidence_level: crate::types::GroupingRecommendationConfidenceLevel,
    /// <p>Indicates the creation time of the grouping recommendation.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>Indicates the reason you had selected while rejecting a grouping recommendation.</p>
    pub rejection_reason: ::std::option::Option<crate::types::GroupingRecommendationRejectionReason>,
}
impl GroupingRecommendation {
    /// <p>Indicates all the reasons available for rejecting a grouping recommendation.</p>
    pub fn grouping_recommendation_id(&self) -> &str {
        use std::ops::Deref;
        self.grouping_recommendation_id.deref()
    }
    /// <p>Indicates the name of the recommended Application Component (AppComponent).</p>
    pub fn grouping_app_component(&self) -> ::std::option::Option<&crate::types::GroupingAppComponent> {
        self.grouping_app_component.as_ref()
    }
    /// <p>Indicates the resources that are grouped in a recommended AppComponent.</p>
    pub fn resources(&self) -> &[crate::types::GroupingResource] {
        use std::ops::Deref;
        self.resources.deref()
    }
    /// <p>Indicates the confidence level of the grouping recommendation.</p>
    pub fn score(&self) -> f64 {
        self.score
    }
    /// <p>Indicates all the reasons available for rejecting a grouping recommendation.</p>
    pub fn recommendation_reasons(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.recommendation_reasons.deref()
    }
    /// <p>Indicates the status of grouping resources into AppComponents.</p>
    pub fn status(&self) -> &crate::types::GroupingRecommendationStatusType {
        &self.status
    }
    /// <p>Indicates the confidence level of Resilience Hub on the grouping recommendation.</p>
    pub fn confidence_level(&self) -> &crate::types::GroupingRecommendationConfidenceLevel {
        &self.confidence_level
    }
    /// <p>Indicates the creation time of the grouping recommendation.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>Indicates the reason you had selected while rejecting a grouping recommendation.</p>
    pub fn rejection_reason(&self) -> ::std::option::Option<&crate::types::GroupingRecommendationRejectionReason> {
        self.rejection_reason.as_ref()
    }
}
impl GroupingRecommendation {
    /// Creates a new builder-style object to manufacture [`GroupingRecommendation`](crate::types::GroupingRecommendation).
    pub fn builder() -> crate::types::builders::GroupingRecommendationBuilder {
        crate::types::builders::GroupingRecommendationBuilder::default()
    }
}

/// A builder for [`GroupingRecommendation`](crate::types::GroupingRecommendation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GroupingRecommendationBuilder {
    pub(crate) grouping_recommendation_id: ::std::option::Option<::std::string::String>,
    pub(crate) grouping_app_component: ::std::option::Option<crate::types::GroupingAppComponent>,
    pub(crate) resources: ::std::option::Option<::std::vec::Vec<crate::types::GroupingResource>>,
    pub(crate) score: ::std::option::Option<f64>,
    pub(crate) recommendation_reasons: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) status: ::std::option::Option<crate::types::GroupingRecommendationStatusType>,
    pub(crate) confidence_level: ::std::option::Option<crate::types::GroupingRecommendationConfidenceLevel>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) rejection_reason: ::std::option::Option<crate::types::GroupingRecommendationRejectionReason>,
}
impl GroupingRecommendationBuilder {
    /// <p>Indicates all the reasons available for rejecting a grouping recommendation.</p>
    /// This field is required.
    pub fn grouping_recommendation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.grouping_recommendation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates all the reasons available for rejecting a grouping recommendation.</p>
    pub fn set_grouping_recommendation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.grouping_recommendation_id = input;
        self
    }
    /// <p>Indicates all the reasons available for rejecting a grouping recommendation.</p>
    pub fn get_grouping_recommendation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.grouping_recommendation_id
    }
    /// <p>Indicates the name of the recommended Application Component (AppComponent).</p>
    /// This field is required.
    pub fn grouping_app_component(mut self, input: crate::types::GroupingAppComponent) -> Self {
        self.grouping_app_component = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the name of the recommended Application Component (AppComponent).</p>
    pub fn set_grouping_app_component(mut self, input: ::std::option::Option<crate::types::GroupingAppComponent>) -> Self {
        self.grouping_app_component = input;
        self
    }
    /// <p>Indicates the name of the recommended Application Component (AppComponent).</p>
    pub fn get_grouping_app_component(&self) -> &::std::option::Option<crate::types::GroupingAppComponent> {
        &self.grouping_app_component
    }
    /// Appends an item to `resources`.
    ///
    /// To override the contents of this collection use [`set_resources`](Self::set_resources).
    ///
    /// <p>Indicates the resources that are grouped in a recommended AppComponent.</p>
    pub fn resources(mut self, input: crate::types::GroupingResource) -> Self {
        let mut v = self.resources.unwrap_or_default();
        v.push(input);
        self.resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates the resources that are grouped in a recommended AppComponent.</p>
    pub fn set_resources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GroupingResource>>) -> Self {
        self.resources = input;
        self
    }
    /// <p>Indicates the resources that are grouped in a recommended AppComponent.</p>
    pub fn get_resources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GroupingResource>> {
        &self.resources
    }
    /// <p>Indicates the confidence level of the grouping recommendation.</p>
    /// This field is required.
    pub fn score(mut self, input: f64) -> Self {
        self.score = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the confidence level of the grouping recommendation.</p>
    pub fn set_score(mut self, input: ::std::option::Option<f64>) -> Self {
        self.score = input;
        self
    }
    /// <p>Indicates the confidence level of the grouping recommendation.</p>
    pub fn get_score(&self) -> &::std::option::Option<f64> {
        &self.score
    }
    /// Appends an item to `recommendation_reasons`.
    ///
    /// To override the contents of this collection use [`set_recommendation_reasons`](Self::set_recommendation_reasons).
    ///
    /// <p>Indicates all the reasons available for rejecting a grouping recommendation.</p>
    pub fn recommendation_reasons(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.recommendation_reasons.unwrap_or_default();
        v.push(input.into());
        self.recommendation_reasons = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates all the reasons available for rejecting a grouping recommendation.</p>
    pub fn set_recommendation_reasons(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.recommendation_reasons = input;
        self
    }
    /// <p>Indicates all the reasons available for rejecting a grouping recommendation.</p>
    pub fn get_recommendation_reasons(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.recommendation_reasons
    }
    /// <p>Indicates the status of grouping resources into AppComponents.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::GroupingRecommendationStatusType) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the status of grouping resources into AppComponents.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::GroupingRecommendationStatusType>) -> Self {
        self.status = input;
        self
    }
    /// <p>Indicates the status of grouping resources into AppComponents.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::GroupingRecommendationStatusType> {
        &self.status
    }
    /// <p>Indicates the confidence level of Resilience Hub on the grouping recommendation.</p>
    /// This field is required.
    pub fn confidence_level(mut self, input: crate::types::GroupingRecommendationConfidenceLevel) -> Self {
        self.confidence_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the confidence level of Resilience Hub on the grouping recommendation.</p>
    pub fn set_confidence_level(mut self, input: ::std::option::Option<crate::types::GroupingRecommendationConfidenceLevel>) -> Self {
        self.confidence_level = input;
        self
    }
    /// <p>Indicates the confidence level of Resilience Hub on the grouping recommendation.</p>
    pub fn get_confidence_level(&self) -> &::std::option::Option<crate::types::GroupingRecommendationConfidenceLevel> {
        &self.confidence_level
    }
    /// <p>Indicates the creation time of the grouping recommendation.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the creation time of the grouping recommendation.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>Indicates the creation time of the grouping recommendation.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>Indicates the reason you had selected while rejecting a grouping recommendation.</p>
    pub fn rejection_reason(mut self, input: crate::types::GroupingRecommendationRejectionReason) -> Self {
        self.rejection_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the reason you had selected while rejecting a grouping recommendation.</p>
    pub fn set_rejection_reason(mut self, input: ::std::option::Option<crate::types::GroupingRecommendationRejectionReason>) -> Self {
        self.rejection_reason = input;
        self
    }
    /// <p>Indicates the reason you had selected while rejecting a grouping recommendation.</p>
    pub fn get_rejection_reason(&self) -> &::std::option::Option<crate::types::GroupingRecommendationRejectionReason> {
        &self.rejection_reason
    }
    /// Consumes the builder and constructs a [`GroupingRecommendation`](crate::types::GroupingRecommendation).
    /// This method will fail if any of the following fields are not set:
    /// - [`grouping_recommendation_id`](crate::types::builders::GroupingRecommendationBuilder::grouping_recommendation_id)
    /// - [`resources`](crate::types::builders::GroupingRecommendationBuilder::resources)
    /// - [`recommendation_reasons`](crate::types::builders::GroupingRecommendationBuilder::recommendation_reasons)
    /// - [`status`](crate::types::builders::GroupingRecommendationBuilder::status)
    /// - [`confidence_level`](crate::types::builders::GroupingRecommendationBuilder::confidence_level)
    /// - [`creation_time`](crate::types::builders::GroupingRecommendationBuilder::creation_time)
    pub fn build(self) -> ::std::result::Result<crate::types::GroupingRecommendation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GroupingRecommendation {
            grouping_recommendation_id: self.grouping_recommendation_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "grouping_recommendation_id",
                    "grouping_recommendation_id was not specified but it is required when building GroupingRecommendation",
                )
            })?,
            grouping_app_component: self.grouping_app_component,
            resources: self.resources.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "resources",
                    "resources was not specified but it is required when building GroupingRecommendation",
                )
            })?,
            score: self.score.unwrap_or_default(),
            recommendation_reasons: self.recommendation_reasons.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "recommendation_reasons",
                    "recommendation_reasons was not specified but it is required when building GroupingRecommendation",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GroupingRecommendation",
                )
            })?,
            confidence_level: self.confidence_level.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "confidence_level",
                    "confidence_level was not specified but it is required when building GroupingRecommendation",
                )
            })?,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building GroupingRecommendation",
                )
            })?,
            rejection_reason: self.rejection_reason,
        })
    }
}
