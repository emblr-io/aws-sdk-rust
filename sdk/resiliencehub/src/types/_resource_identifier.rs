// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a resource identifier for the drifted resource.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceIdentifier {
    /// <p>Logical identifier of the drifted resource.</p>
    pub logical_resource_id: ::std::option::Option<crate::types::LogicalResourceId>,
    /// <p>Type of the drifted resource.</p>
    pub resource_type: ::std::option::Option<::std::string::String>,
}
impl ResourceIdentifier {
    /// <p>Logical identifier of the drifted resource.</p>
    pub fn logical_resource_id(&self) -> ::std::option::Option<&crate::types::LogicalResourceId> {
        self.logical_resource_id.as_ref()
    }
    /// <p>Type of the drifted resource.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&str> {
        self.resource_type.as_deref()
    }
}
impl ResourceIdentifier {
    /// Creates a new builder-style object to manufacture [`ResourceIdentifier`](crate::types::ResourceIdentifier).
    pub fn builder() -> crate::types::builders::ResourceIdentifierBuilder {
        crate::types::builders::ResourceIdentifierBuilder::default()
    }
}

/// A builder for [`ResourceIdentifier`](crate::types::ResourceIdentifier).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ResourceIdentifierBuilder {
    pub(crate) logical_resource_id: ::std::option::Option<crate::types::LogicalResourceId>,
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
}
impl ResourceIdentifierBuilder {
    /// <p>Logical identifier of the drifted resource.</p>
    pub fn logical_resource_id(mut self, input: crate::types::LogicalResourceId) -> Self {
        self.logical_resource_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>Logical identifier of the drifted resource.</p>
    pub fn set_logical_resource_id(mut self, input: ::std::option::Option<crate::types::LogicalResourceId>) -> Self {
        self.logical_resource_id = input;
        self
    }
    /// <p>Logical identifier of the drifted resource.</p>
    pub fn get_logical_resource_id(&self) -> &::std::option::Option<crate::types::LogicalResourceId> {
        &self.logical_resource_id
    }
    /// <p>Type of the drifted resource.</p>
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Type of the drifted resource.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>Type of the drifted resource.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// Consumes the builder and constructs a [`ResourceIdentifier`](crate::types::ResourceIdentifier).
    pub fn build(self) -> crate::types::ResourceIdentifier {
        crate::types::ResourceIdentifier {
            logical_resource_id: self.logical_resource_id,
            resource_type: self.resource_type,
        }
    }
}
