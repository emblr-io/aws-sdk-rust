// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The host property details.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HostPropertiesRequest {
    /// <p>The IP address of the host.</p>
    pub ip_addresses: ::std::option::Option<crate::types::IpAddresses>,
    /// <p>The host name.</p>
    pub host_name: ::std::option::Option<::std::string::String>,
}
impl HostPropertiesRequest {
    /// <p>The IP address of the host.</p>
    pub fn ip_addresses(&self) -> ::std::option::Option<&crate::types::IpAddresses> {
        self.ip_addresses.as_ref()
    }
    /// <p>The host name.</p>
    pub fn host_name(&self) -> ::std::option::Option<&str> {
        self.host_name.as_deref()
    }
}
impl HostPropertiesRequest {
    /// Creates a new builder-style object to manufacture [`HostPropertiesRequest`](crate::types::HostPropertiesRequest).
    pub fn builder() -> crate::types::builders::HostPropertiesRequestBuilder {
        crate::types::builders::HostPropertiesRequestBuilder::default()
    }
}

/// A builder for [`HostPropertiesRequest`](crate::types::HostPropertiesRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct HostPropertiesRequestBuilder {
    pub(crate) ip_addresses: ::std::option::Option<crate::types::IpAddresses>,
    pub(crate) host_name: ::std::option::Option<::std::string::String>,
}
impl HostPropertiesRequestBuilder {
    /// <p>The IP address of the host.</p>
    pub fn ip_addresses(mut self, input: crate::types::IpAddresses) -> Self {
        self.ip_addresses = ::std::option::Option::Some(input);
        self
    }
    /// <p>The IP address of the host.</p>
    pub fn set_ip_addresses(mut self, input: ::std::option::Option<crate::types::IpAddresses>) -> Self {
        self.ip_addresses = input;
        self
    }
    /// <p>The IP address of the host.</p>
    pub fn get_ip_addresses(&self) -> &::std::option::Option<crate::types::IpAddresses> {
        &self.ip_addresses
    }
    /// <p>The host name.</p>
    pub fn host_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.host_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The host name.</p>
    pub fn set_host_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.host_name = input;
        self
    }
    /// <p>The host name.</p>
    pub fn get_host_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.host_name
    }
    /// Consumes the builder and constructs a [`HostPropertiesRequest`](crate::types::HostPropertiesRequest).
    pub fn build(self) -> crate::types::HostPropertiesRequest {
        crate::types::HostPropertiesRequest {
            ip_addresses: self.ip_addresses,
            host_name: self.host_name,
        }
    }
}
