// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The filter expression, <code>AND</code> or <code>OR</code>, to use when searching among a group of search strings in a resource. You can use two groupings per search each within parenthesis <code>()</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchGroupedFilterExpressions {
    /// <p>The filters to use for the search.</p>
    pub filters: ::std::vec::Vec<crate::types::SearchFilterExpression>,
    /// <p>The operators to include in the search.</p>
    pub operator: crate::types::LogicalOperator,
}
impl SearchGroupedFilterExpressions {
    /// <p>The filters to use for the search.</p>
    pub fn filters(&self) -> &[crate::types::SearchFilterExpression] {
        use std::ops::Deref;
        self.filters.deref()
    }
    /// <p>The operators to include in the search.</p>
    pub fn operator(&self) -> &crate::types::LogicalOperator {
        &self.operator
    }
}
impl SearchGroupedFilterExpressions {
    /// Creates a new builder-style object to manufacture [`SearchGroupedFilterExpressions`](crate::types::SearchGroupedFilterExpressions).
    pub fn builder() -> crate::types::builders::SearchGroupedFilterExpressionsBuilder {
        crate::types::builders::SearchGroupedFilterExpressionsBuilder::default()
    }
}

/// A builder for [`SearchGroupedFilterExpressions`](crate::types::SearchGroupedFilterExpressions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SearchGroupedFilterExpressionsBuilder {
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::SearchFilterExpression>>,
    pub(crate) operator: ::std::option::Option<crate::types::LogicalOperator>,
}
impl SearchGroupedFilterExpressionsBuilder {
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filters to use for the search.</p>
    pub fn filters(mut self, input: crate::types::SearchFilterExpression) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The filters to use for the search.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SearchFilterExpression>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>The filters to use for the search.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SearchFilterExpression>> {
        &self.filters
    }
    /// <p>The operators to include in the search.</p>
    /// This field is required.
    pub fn operator(mut self, input: crate::types::LogicalOperator) -> Self {
        self.operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operators to include in the search.</p>
    pub fn set_operator(mut self, input: ::std::option::Option<crate::types::LogicalOperator>) -> Self {
        self.operator = input;
        self
    }
    /// <p>The operators to include in the search.</p>
    pub fn get_operator(&self) -> &::std::option::Option<crate::types::LogicalOperator> {
        &self.operator
    }
    /// Consumes the builder and constructs a [`SearchGroupedFilterExpressions`](crate::types::SearchGroupedFilterExpressions).
    /// This method will fail if any of the following fields are not set:
    /// - [`filters`](crate::types::builders::SearchGroupedFilterExpressionsBuilder::filters)
    /// - [`operator`](crate::types::builders::SearchGroupedFilterExpressionsBuilder::operator)
    pub fn build(self) -> ::std::result::Result<crate::types::SearchGroupedFilterExpressions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SearchGroupedFilterExpressions {
            filters: self.filters.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "filters",
                    "filters was not specified but it is required when building SearchGroupedFilterExpressions",
                )
            })?,
            operator: self.operator.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operator",
                    "operator was not specified but it is required when building SearchGroupedFilterExpressions",
                )
            })?,
        })
    }
}
