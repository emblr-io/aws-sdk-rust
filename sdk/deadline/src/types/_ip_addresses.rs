// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The IP addresses for a host.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IpAddresses {
    /// <p>The IpV4 address of the network.</p>
    pub ipv4_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The IpV6 address for the network and node component.</p>
    pub ipv6_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl IpAddresses {
    /// <p>The IpV4 address of the network.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ipv4_addresses.is_none()`.
    pub fn ipv4_addresses(&self) -> &[::std::string::String] {
        self.ipv4_addresses.as_deref().unwrap_or_default()
    }
    /// <p>The IpV6 address for the network and node component.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ipv6_addresses.is_none()`.
    pub fn ipv6_addresses(&self) -> &[::std::string::String] {
        self.ipv6_addresses.as_deref().unwrap_or_default()
    }
}
impl IpAddresses {
    /// Creates a new builder-style object to manufacture [`IpAddresses`](crate::types::IpAddresses).
    pub fn builder() -> crate::types::builders::IpAddressesBuilder {
        crate::types::builders::IpAddressesBuilder::default()
    }
}

/// A builder for [`IpAddresses`](crate::types::IpAddresses).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IpAddressesBuilder {
    pub(crate) ipv4_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) ipv6_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl IpAddressesBuilder {
    /// Appends an item to `ipv4_addresses`.
    ///
    /// To override the contents of this collection use [`set_ipv4_addresses`](Self::set_ipv4_addresses).
    ///
    /// <p>The IpV4 address of the network.</p>
    pub fn ipv4_addresses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.ipv4_addresses.unwrap_or_default();
        v.push(input.into());
        self.ipv4_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IpV4 address of the network.</p>
    pub fn set_ipv4_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.ipv4_addresses = input;
        self
    }
    /// <p>The IpV4 address of the network.</p>
    pub fn get_ipv4_addresses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.ipv4_addresses
    }
    /// Appends an item to `ipv6_addresses`.
    ///
    /// To override the contents of this collection use [`set_ipv6_addresses`](Self::set_ipv6_addresses).
    ///
    /// <p>The IpV6 address for the network and node component.</p>
    pub fn ipv6_addresses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.ipv6_addresses.unwrap_or_default();
        v.push(input.into());
        self.ipv6_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IpV6 address for the network and node component.</p>
    pub fn set_ipv6_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.ipv6_addresses = input;
        self
    }
    /// <p>The IpV6 address for the network and node component.</p>
    pub fn get_ipv6_addresses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.ipv6_addresses
    }
    /// Consumes the builder and constructs a [`IpAddresses`](crate::types::IpAddresses).
    pub fn build(self) -> crate::types::IpAddresses {
        crate::types::IpAddresses {
            ipv4_addresses: self.ipv4_addresses,
            ipv6_addresses: self.ipv6_addresses,
        }
    }
}
