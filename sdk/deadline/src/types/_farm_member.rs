// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The member of a farm.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FarmMember {
    /// <p>The farm ID of the farm member.</p>
    pub farm_id: ::std::string::String,
    /// <p>The principal ID of the farm member.</p>
    pub principal_id: ::std::string::String,
    /// <p>The principal type of the farm member.</p>
    pub principal_type: crate::types::DeadlinePrincipalType,
    /// <p>The identity store ID of the farm member.</p>
    pub identity_store_id: ::std::string::String,
    /// <p>The farm member's membership level.</p>
    pub membership_level: crate::types::MembershipLevel,
}
impl FarmMember {
    /// <p>The farm ID of the farm member.</p>
    pub fn farm_id(&self) -> &str {
        use std::ops::Deref;
        self.farm_id.deref()
    }
    /// <p>The principal ID of the farm member.</p>
    pub fn principal_id(&self) -> &str {
        use std::ops::Deref;
        self.principal_id.deref()
    }
    /// <p>The principal type of the farm member.</p>
    pub fn principal_type(&self) -> &crate::types::DeadlinePrincipalType {
        &self.principal_type
    }
    /// <p>The identity store ID of the farm member.</p>
    pub fn identity_store_id(&self) -> &str {
        use std::ops::Deref;
        self.identity_store_id.deref()
    }
    /// <p>The farm member's membership level.</p>
    pub fn membership_level(&self) -> &crate::types::MembershipLevel {
        &self.membership_level
    }
}
impl FarmMember {
    /// Creates a new builder-style object to manufacture [`FarmMember`](crate::types::FarmMember).
    pub fn builder() -> crate::types::builders::FarmMemberBuilder {
        crate::types::builders::FarmMemberBuilder::default()
    }
}

/// A builder for [`FarmMember`](crate::types::FarmMember).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FarmMemberBuilder {
    pub(crate) farm_id: ::std::option::Option<::std::string::String>,
    pub(crate) principal_id: ::std::option::Option<::std::string::String>,
    pub(crate) principal_type: ::std::option::Option<crate::types::DeadlinePrincipalType>,
    pub(crate) identity_store_id: ::std::option::Option<::std::string::String>,
    pub(crate) membership_level: ::std::option::Option<crate::types::MembershipLevel>,
}
impl FarmMemberBuilder {
    /// <p>The farm ID of the farm member.</p>
    /// This field is required.
    pub fn farm_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.farm_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The farm ID of the farm member.</p>
    pub fn set_farm_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.farm_id = input;
        self
    }
    /// <p>The farm ID of the farm member.</p>
    pub fn get_farm_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.farm_id
    }
    /// <p>The principal ID of the farm member.</p>
    /// This field is required.
    pub fn principal_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The principal ID of the farm member.</p>
    pub fn set_principal_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal_id = input;
        self
    }
    /// <p>The principal ID of the farm member.</p>
    pub fn get_principal_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal_id
    }
    /// <p>The principal type of the farm member.</p>
    /// This field is required.
    pub fn principal_type(mut self, input: crate::types::DeadlinePrincipalType) -> Self {
        self.principal_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The principal type of the farm member.</p>
    pub fn set_principal_type(mut self, input: ::std::option::Option<crate::types::DeadlinePrincipalType>) -> Self {
        self.principal_type = input;
        self
    }
    /// <p>The principal type of the farm member.</p>
    pub fn get_principal_type(&self) -> &::std::option::Option<crate::types::DeadlinePrincipalType> {
        &self.principal_type
    }
    /// <p>The identity store ID of the farm member.</p>
    /// This field is required.
    pub fn identity_store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity_store_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identity store ID of the farm member.</p>
    pub fn set_identity_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity_store_id = input;
        self
    }
    /// <p>The identity store ID of the farm member.</p>
    pub fn get_identity_store_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity_store_id
    }
    /// <p>The farm member's membership level.</p>
    /// This field is required.
    pub fn membership_level(mut self, input: crate::types::MembershipLevel) -> Self {
        self.membership_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The farm member's membership level.</p>
    pub fn set_membership_level(mut self, input: ::std::option::Option<crate::types::MembershipLevel>) -> Self {
        self.membership_level = input;
        self
    }
    /// <p>The farm member's membership level.</p>
    pub fn get_membership_level(&self) -> &::std::option::Option<crate::types::MembershipLevel> {
        &self.membership_level
    }
    /// Consumes the builder and constructs a [`FarmMember`](crate::types::FarmMember).
    /// This method will fail if any of the following fields are not set:
    /// - [`farm_id`](crate::types::builders::FarmMemberBuilder::farm_id)
    /// - [`principal_id`](crate::types::builders::FarmMemberBuilder::principal_id)
    /// - [`principal_type`](crate::types::builders::FarmMemberBuilder::principal_type)
    /// - [`identity_store_id`](crate::types::builders::FarmMemberBuilder::identity_store_id)
    /// - [`membership_level`](crate::types::builders::FarmMemberBuilder::membership_level)
    pub fn build(self) -> ::std::result::Result<crate::types::FarmMember, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FarmMember {
            farm_id: self.farm_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "farm_id",
                    "farm_id was not specified but it is required when building FarmMember",
                )
            })?,
            principal_id: self.principal_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "principal_id",
                    "principal_id was not specified but it is required when building FarmMember",
                )
            })?,
            principal_type: self.principal_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "principal_type",
                    "principal_type was not specified but it is required when building FarmMember",
                )
            })?,
            identity_store_id: self.identity_store_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "identity_store_id",
                    "identity_store_id was not specified but it is required when building FarmMember",
                )
            })?,
            membership_level: self.membership_level.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "membership_level",
                    "membership_level was not specified but it is required when building FarmMember",
                )
            })?,
        })
    }
}
