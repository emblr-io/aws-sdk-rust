// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a job search.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct JobSearchSummary {
    /// <p>The job ID.</p>
    pub job_id: ::std::option::Option<::std::string::String>,
    /// <p>The queue ID.</p>
    pub queue_id: ::std::option::Option<::std::string::String>,
    /// <p>The job name.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The life cycle status.</p>
    pub lifecycle_status: ::std::option::Option<crate::types::JobLifecycleStatus>,
    /// <p>The life cycle status message.</p>
    pub lifecycle_status_message: ::std::option::Option<::std::string::String>,
    /// <p>The task run status for the job.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code>–pending and waiting for resources.</p></li>
    /// <li>
    /// <p><code>READY</code>–ready to be processed.</p></li>
    /// <li>
    /// <p><code>ASSIGNED</code>–assigned and will run next on a worker.</p></li>
    /// <li>
    /// <p><code>SCHEDULED</code>–scheduled to be run on a worker.</p></li>
    /// <li>
    /// <p><code>INTERRUPTING</code>–being interrupted.</p></li>
    /// <li>
    /// <p><code>RUNNING</code>–running on a worker.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code>–the task is suspended.</p></li>
    /// <li>
    /// <p><code>CANCELED</code>–the task has been canceled.</p></li>
    /// <li>
    /// <p><code>FAILED</code>–the task has failed.</p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code>–the task has succeeded.</p></li>
    /// </ul>
    pub task_run_status: ::std::option::Option<crate::types::TaskRunStatus>,
    /// <p>The task status to start with on the job.</p>
    pub target_task_run_status: ::std::option::Option<crate::types::JobTargetTaskRunStatus>,
    /// <p>The number of tasks running on the job.</p>
    pub task_run_status_counts: ::std::option::Option<::std::collections::HashMap<crate::types::TaskRunStatus, i32>>,
    /// <p>The total number of times tasks from the job failed and were retried.</p>
    pub task_failure_retry_count: ::std::option::Option<i32>,
    /// <p>The job priority.</p>
    pub priority: ::std::option::Option<i32>,
    /// <p>The number of task failures before the job stops running and is marked as <code>FAILED</code>.</p>
    pub max_failed_tasks_count: ::std::option::Option<i32>,
    /// <p>The maximum number of retries for a job.</p>
    pub max_retries_per_task: ::std::option::Option<i32>,
    /// <p>The user or system that created this resource.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>The date and time the resource was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time the resource ended running.</p>
    pub ended_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time the resource started running.</p>
    pub started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The job parameters.</p>
    pub job_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::JobParameter>>,
    /// <p>The maximum number of worker hosts that can concurrently process a job. When the <code>maxWorkerCount</code> is reached, no more workers will be assigned to process the job, even if the fleets assigned to the job's queue has available workers.</p>
    /// <p>You can't set the <code>maxWorkerCount</code> to 0. If you set it to -1, there is no maximum number of workers.</p>
    /// <p>If you don't specify the <code>maxWorkerCount</code>, the default is -1.</p>
    pub max_worker_count: ::std::option::Option<i32>,
    /// <p>The job ID for the source job.</p>
    pub source_job_id: ::std::option::Option<::std::string::String>,
}
impl JobSearchSummary {
    /// <p>The job ID.</p>
    pub fn job_id(&self) -> ::std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The queue ID.</p>
    pub fn queue_id(&self) -> ::std::option::Option<&str> {
        self.queue_id.as_deref()
    }
    /// <p>The job name.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The life cycle status.</p>
    pub fn lifecycle_status(&self) -> ::std::option::Option<&crate::types::JobLifecycleStatus> {
        self.lifecycle_status.as_ref()
    }
    /// <p>The life cycle status message.</p>
    pub fn lifecycle_status_message(&self) -> ::std::option::Option<&str> {
        self.lifecycle_status_message.as_deref()
    }
    /// <p>The task run status for the job.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code>–pending and waiting for resources.</p></li>
    /// <li>
    /// <p><code>READY</code>–ready to be processed.</p></li>
    /// <li>
    /// <p><code>ASSIGNED</code>–assigned and will run next on a worker.</p></li>
    /// <li>
    /// <p><code>SCHEDULED</code>–scheduled to be run on a worker.</p></li>
    /// <li>
    /// <p><code>INTERRUPTING</code>–being interrupted.</p></li>
    /// <li>
    /// <p><code>RUNNING</code>–running on a worker.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code>–the task is suspended.</p></li>
    /// <li>
    /// <p><code>CANCELED</code>–the task has been canceled.</p></li>
    /// <li>
    /// <p><code>FAILED</code>–the task has failed.</p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code>–the task has succeeded.</p></li>
    /// </ul>
    pub fn task_run_status(&self) -> ::std::option::Option<&crate::types::TaskRunStatus> {
        self.task_run_status.as_ref()
    }
    /// <p>The task status to start with on the job.</p>
    pub fn target_task_run_status(&self) -> ::std::option::Option<&crate::types::JobTargetTaskRunStatus> {
        self.target_task_run_status.as_ref()
    }
    /// <p>The number of tasks running on the job.</p>
    pub fn task_run_status_counts(&self) -> ::std::option::Option<&::std::collections::HashMap<crate::types::TaskRunStatus, i32>> {
        self.task_run_status_counts.as_ref()
    }
    /// <p>The total number of times tasks from the job failed and were retried.</p>
    pub fn task_failure_retry_count(&self) -> ::std::option::Option<i32> {
        self.task_failure_retry_count
    }
    /// <p>The job priority.</p>
    pub fn priority(&self) -> ::std::option::Option<i32> {
        self.priority
    }
    /// <p>The number of task failures before the job stops running and is marked as <code>FAILED</code>.</p>
    pub fn max_failed_tasks_count(&self) -> ::std::option::Option<i32> {
        self.max_failed_tasks_count
    }
    /// <p>The maximum number of retries for a job.</p>
    pub fn max_retries_per_task(&self) -> ::std::option::Option<i32> {
        self.max_retries_per_task
    }
    /// <p>The user or system that created this resource.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The date and time the resource was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn ended_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.ended_at.as_ref()
    }
    /// <p>The date and time the resource started running.</p>
    pub fn started_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.started_at.as_ref()
    }
    /// <p>The job parameters.</p>
    pub fn job_parameters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::JobParameter>> {
        self.job_parameters.as_ref()
    }
    /// <p>The maximum number of worker hosts that can concurrently process a job. When the <code>maxWorkerCount</code> is reached, no more workers will be assigned to process the job, even if the fleets assigned to the job's queue has available workers.</p>
    /// <p>You can't set the <code>maxWorkerCount</code> to 0. If you set it to -1, there is no maximum number of workers.</p>
    /// <p>If you don't specify the <code>maxWorkerCount</code>, the default is -1.</p>
    pub fn max_worker_count(&self) -> ::std::option::Option<i32> {
        self.max_worker_count
    }
    /// <p>The job ID for the source job.</p>
    pub fn source_job_id(&self) -> ::std::option::Option<&str> {
        self.source_job_id.as_deref()
    }
}
impl ::std::fmt::Debug for JobSearchSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("JobSearchSummary");
        formatter.field("job_id", &self.job_id);
        formatter.field("queue_id", &self.queue_id);
        formatter.field("name", &self.name);
        formatter.field("lifecycle_status", &self.lifecycle_status);
        formatter.field("lifecycle_status_message", &self.lifecycle_status_message);
        formatter.field("task_run_status", &self.task_run_status);
        formatter.field("target_task_run_status", &self.target_task_run_status);
        formatter.field("task_run_status_counts", &self.task_run_status_counts);
        formatter.field("task_failure_retry_count", &self.task_failure_retry_count);
        formatter.field("priority", &self.priority);
        formatter.field("max_failed_tasks_count", &self.max_failed_tasks_count);
        formatter.field("max_retries_per_task", &self.max_retries_per_task);
        formatter.field("created_by", &self.created_by);
        formatter.field("created_at", &self.created_at);
        formatter.field("ended_at", &self.ended_at);
        formatter.field("started_at", &self.started_at);
        formatter.field("job_parameters", &"*** Sensitive Data Redacted ***");
        formatter.field("max_worker_count", &self.max_worker_count);
        formatter.field("source_job_id", &self.source_job_id);
        formatter.finish()
    }
}
impl JobSearchSummary {
    /// Creates a new builder-style object to manufacture [`JobSearchSummary`](crate::types::JobSearchSummary).
    pub fn builder() -> crate::types::builders::JobSearchSummaryBuilder {
        crate::types::builders::JobSearchSummaryBuilder::default()
    }
}

/// A builder for [`JobSearchSummary`](crate::types::JobSearchSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct JobSearchSummaryBuilder {
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) queue_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) lifecycle_status: ::std::option::Option<crate::types::JobLifecycleStatus>,
    pub(crate) lifecycle_status_message: ::std::option::Option<::std::string::String>,
    pub(crate) task_run_status: ::std::option::Option<crate::types::TaskRunStatus>,
    pub(crate) target_task_run_status: ::std::option::Option<crate::types::JobTargetTaskRunStatus>,
    pub(crate) task_run_status_counts: ::std::option::Option<::std::collections::HashMap<crate::types::TaskRunStatus, i32>>,
    pub(crate) task_failure_retry_count: ::std::option::Option<i32>,
    pub(crate) priority: ::std::option::Option<i32>,
    pub(crate) max_failed_tasks_count: ::std::option::Option<i32>,
    pub(crate) max_retries_per_task: ::std::option::Option<i32>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) ended_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) job_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::JobParameter>>,
    pub(crate) max_worker_count: ::std::option::Option<i32>,
    pub(crate) source_job_id: ::std::option::Option<::std::string::String>,
}
impl JobSearchSummaryBuilder {
    /// <p>The job ID.</p>
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job ID.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The job ID.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>The queue ID.</p>
    pub fn queue_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.queue_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The queue ID.</p>
    pub fn set_queue_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.queue_id = input;
        self
    }
    /// <p>The queue ID.</p>
    pub fn get_queue_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.queue_id
    }
    /// <p>The job name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The job name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The life cycle status.</p>
    pub fn lifecycle_status(mut self, input: crate::types::JobLifecycleStatus) -> Self {
        self.lifecycle_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The life cycle status.</p>
    pub fn set_lifecycle_status(mut self, input: ::std::option::Option<crate::types::JobLifecycleStatus>) -> Self {
        self.lifecycle_status = input;
        self
    }
    /// <p>The life cycle status.</p>
    pub fn get_lifecycle_status(&self) -> &::std::option::Option<crate::types::JobLifecycleStatus> {
        &self.lifecycle_status
    }
    /// <p>The life cycle status message.</p>
    pub fn lifecycle_status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lifecycle_status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The life cycle status message.</p>
    pub fn set_lifecycle_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lifecycle_status_message = input;
        self
    }
    /// <p>The life cycle status message.</p>
    pub fn get_lifecycle_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.lifecycle_status_message
    }
    /// <p>The task run status for the job.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code>–pending and waiting for resources.</p></li>
    /// <li>
    /// <p><code>READY</code>–ready to be processed.</p></li>
    /// <li>
    /// <p><code>ASSIGNED</code>–assigned and will run next on a worker.</p></li>
    /// <li>
    /// <p><code>SCHEDULED</code>–scheduled to be run on a worker.</p></li>
    /// <li>
    /// <p><code>INTERRUPTING</code>–being interrupted.</p></li>
    /// <li>
    /// <p><code>RUNNING</code>–running on a worker.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code>–the task is suspended.</p></li>
    /// <li>
    /// <p><code>CANCELED</code>–the task has been canceled.</p></li>
    /// <li>
    /// <p><code>FAILED</code>–the task has failed.</p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code>–the task has succeeded.</p></li>
    /// </ul>
    pub fn task_run_status(mut self, input: crate::types::TaskRunStatus) -> Self {
        self.task_run_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The task run status for the job.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code>–pending and waiting for resources.</p></li>
    /// <li>
    /// <p><code>READY</code>–ready to be processed.</p></li>
    /// <li>
    /// <p><code>ASSIGNED</code>–assigned and will run next on a worker.</p></li>
    /// <li>
    /// <p><code>SCHEDULED</code>–scheduled to be run on a worker.</p></li>
    /// <li>
    /// <p><code>INTERRUPTING</code>–being interrupted.</p></li>
    /// <li>
    /// <p><code>RUNNING</code>–running on a worker.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code>–the task is suspended.</p></li>
    /// <li>
    /// <p><code>CANCELED</code>–the task has been canceled.</p></li>
    /// <li>
    /// <p><code>FAILED</code>–the task has failed.</p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code>–the task has succeeded.</p></li>
    /// </ul>
    pub fn set_task_run_status(mut self, input: ::std::option::Option<crate::types::TaskRunStatus>) -> Self {
        self.task_run_status = input;
        self
    }
    /// <p>The task run status for the job.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code>–pending and waiting for resources.</p></li>
    /// <li>
    /// <p><code>READY</code>–ready to be processed.</p></li>
    /// <li>
    /// <p><code>ASSIGNED</code>–assigned and will run next on a worker.</p></li>
    /// <li>
    /// <p><code>SCHEDULED</code>–scheduled to be run on a worker.</p></li>
    /// <li>
    /// <p><code>INTERRUPTING</code>–being interrupted.</p></li>
    /// <li>
    /// <p><code>RUNNING</code>–running on a worker.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code>–the task is suspended.</p></li>
    /// <li>
    /// <p><code>CANCELED</code>–the task has been canceled.</p></li>
    /// <li>
    /// <p><code>FAILED</code>–the task has failed.</p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code>–the task has succeeded.</p></li>
    /// </ul>
    pub fn get_task_run_status(&self) -> &::std::option::Option<crate::types::TaskRunStatus> {
        &self.task_run_status
    }
    /// <p>The task status to start with on the job.</p>
    pub fn target_task_run_status(mut self, input: crate::types::JobTargetTaskRunStatus) -> Self {
        self.target_task_run_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The task status to start with on the job.</p>
    pub fn set_target_task_run_status(mut self, input: ::std::option::Option<crate::types::JobTargetTaskRunStatus>) -> Self {
        self.target_task_run_status = input;
        self
    }
    /// <p>The task status to start with on the job.</p>
    pub fn get_target_task_run_status(&self) -> &::std::option::Option<crate::types::JobTargetTaskRunStatus> {
        &self.target_task_run_status
    }
    /// Adds a key-value pair to `task_run_status_counts`.
    ///
    /// To override the contents of this collection use [`set_task_run_status_counts`](Self::set_task_run_status_counts).
    ///
    /// <p>The number of tasks running on the job.</p>
    pub fn task_run_status_counts(mut self, k: crate::types::TaskRunStatus, v: i32) -> Self {
        let mut hash_map = self.task_run_status_counts.unwrap_or_default();
        hash_map.insert(k, v);
        self.task_run_status_counts = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The number of tasks running on the job.</p>
    pub fn set_task_run_status_counts(mut self, input: ::std::option::Option<::std::collections::HashMap<crate::types::TaskRunStatus, i32>>) -> Self {
        self.task_run_status_counts = input;
        self
    }
    /// <p>The number of tasks running on the job.</p>
    pub fn get_task_run_status_counts(&self) -> &::std::option::Option<::std::collections::HashMap<crate::types::TaskRunStatus, i32>> {
        &self.task_run_status_counts
    }
    /// <p>The total number of times tasks from the job failed and were retried.</p>
    pub fn task_failure_retry_count(mut self, input: i32) -> Self {
        self.task_failure_retry_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of times tasks from the job failed and were retried.</p>
    pub fn set_task_failure_retry_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.task_failure_retry_count = input;
        self
    }
    /// <p>The total number of times tasks from the job failed and were retried.</p>
    pub fn get_task_failure_retry_count(&self) -> &::std::option::Option<i32> {
        &self.task_failure_retry_count
    }
    /// <p>The job priority.</p>
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = ::std::option::Option::Some(input);
        self
    }
    /// <p>The job priority.</p>
    pub fn set_priority(mut self, input: ::std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// <p>The job priority.</p>
    pub fn get_priority(&self) -> &::std::option::Option<i32> {
        &self.priority
    }
    /// <p>The number of task failures before the job stops running and is marked as <code>FAILED</code>.</p>
    pub fn max_failed_tasks_count(mut self, input: i32) -> Self {
        self.max_failed_tasks_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of task failures before the job stops running and is marked as <code>FAILED</code>.</p>
    pub fn set_max_failed_tasks_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_failed_tasks_count = input;
        self
    }
    /// <p>The number of task failures before the job stops running and is marked as <code>FAILED</code>.</p>
    pub fn get_max_failed_tasks_count(&self) -> &::std::option::Option<i32> {
        &self.max_failed_tasks_count
    }
    /// <p>The maximum number of retries for a job.</p>
    pub fn max_retries_per_task(mut self, input: i32) -> Self {
        self.max_retries_per_task = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of retries for a job.</p>
    pub fn set_max_retries_per_task(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_retries_per_task = input;
        self
    }
    /// <p>The maximum number of retries for a job.</p>
    pub fn get_max_retries_per_task(&self) -> &::std::option::Option<i32> {
        &self.max_retries_per_task
    }
    /// <p>The user or system that created this resource.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user or system that created this resource.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The user or system that created this resource.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The date and time the resource was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time the resource was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn ended_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.ended_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn set_ended_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.ended_at = input;
        self
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn get_ended_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.ended_at
    }
    /// <p>The date and time the resource started running.</p>
    pub fn started_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource started running.</p>
    pub fn set_started_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The date and time the resource started running.</p>
    pub fn get_started_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_at
    }
    /// Adds a key-value pair to `job_parameters`.
    ///
    /// To override the contents of this collection use [`set_job_parameters`](Self::set_job_parameters).
    ///
    /// <p>The job parameters.</p>
    pub fn job_parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::JobParameter) -> Self {
        let mut hash_map = self.job_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.job_parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The job parameters.</p>
    pub fn set_job_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::JobParameter>>,
    ) -> Self {
        self.job_parameters = input;
        self
    }
    /// <p>The job parameters.</p>
    pub fn get_job_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::JobParameter>> {
        &self.job_parameters
    }
    /// <p>The maximum number of worker hosts that can concurrently process a job. When the <code>maxWorkerCount</code> is reached, no more workers will be assigned to process the job, even if the fleets assigned to the job's queue has available workers.</p>
    /// <p>You can't set the <code>maxWorkerCount</code> to 0. If you set it to -1, there is no maximum number of workers.</p>
    /// <p>If you don't specify the <code>maxWorkerCount</code>, the default is -1.</p>
    pub fn max_worker_count(mut self, input: i32) -> Self {
        self.max_worker_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of worker hosts that can concurrently process a job. When the <code>maxWorkerCount</code> is reached, no more workers will be assigned to process the job, even if the fleets assigned to the job's queue has available workers.</p>
    /// <p>You can't set the <code>maxWorkerCount</code> to 0. If you set it to -1, there is no maximum number of workers.</p>
    /// <p>If you don't specify the <code>maxWorkerCount</code>, the default is -1.</p>
    pub fn set_max_worker_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_worker_count = input;
        self
    }
    /// <p>The maximum number of worker hosts that can concurrently process a job. When the <code>maxWorkerCount</code> is reached, no more workers will be assigned to process the job, even if the fleets assigned to the job's queue has available workers.</p>
    /// <p>You can't set the <code>maxWorkerCount</code> to 0. If you set it to -1, there is no maximum number of workers.</p>
    /// <p>If you don't specify the <code>maxWorkerCount</code>, the default is -1.</p>
    pub fn get_max_worker_count(&self) -> &::std::option::Option<i32> {
        &self.max_worker_count
    }
    /// <p>The job ID for the source job.</p>
    pub fn source_job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job ID for the source job.</p>
    pub fn set_source_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_job_id = input;
        self
    }
    /// <p>The job ID for the source job.</p>
    pub fn get_source_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_job_id
    }
    /// Consumes the builder and constructs a [`JobSearchSummary`](crate::types::JobSearchSummary).
    pub fn build(self) -> crate::types::JobSearchSummary {
        crate::types::JobSearchSummary {
            job_id: self.job_id,
            queue_id: self.queue_id,
            name: self.name,
            lifecycle_status: self.lifecycle_status,
            lifecycle_status_message: self.lifecycle_status_message,
            task_run_status: self.task_run_status,
            target_task_run_status: self.target_task_run_status,
            task_run_status_counts: self.task_run_status_counts,
            task_failure_retry_count: self.task_failure_retry_count,
            priority: self.priority,
            max_failed_tasks_count: self.max_failed_tasks_count,
            max_retries_per_task: self.max_retries_per_task,
            created_by: self.created_by,
            created_at: self.created_at,
            ended_at: self.ended_at,
            started_at: self.started_at,
            job_parameters: self.job_parameters,
            max_worker_count: self.max_worker_count,
            source_job_id: self.source_job_id,
        }
    }
}
impl ::std::fmt::Debug for JobSearchSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("JobSearchSummaryBuilder");
        formatter.field("job_id", &self.job_id);
        formatter.field("queue_id", &self.queue_id);
        formatter.field("name", &self.name);
        formatter.field("lifecycle_status", &self.lifecycle_status);
        formatter.field("lifecycle_status_message", &self.lifecycle_status_message);
        formatter.field("task_run_status", &self.task_run_status);
        formatter.field("target_task_run_status", &self.target_task_run_status);
        formatter.field("task_run_status_counts", &self.task_run_status_counts);
        formatter.field("task_failure_retry_count", &self.task_failure_retry_count);
        formatter.field("priority", &self.priority);
        formatter.field("max_failed_tasks_count", &self.max_failed_tasks_count);
        formatter.field("max_retries_per_task", &self.max_retries_per_task);
        formatter.field("created_by", &self.created_by);
        formatter.field("created_at", &self.created_at);
        formatter.field("ended_at", &self.ended_at);
        formatter.field("started_at", &self.started_at);
        formatter.field("job_parameters", &"*** Sensitive Data Redacted ***");
        formatter.field("max_worker_count", &self.max_worker_count);
        formatter.field("source_job_id", &self.source_job_id);
        formatter.finish()
    }
}
