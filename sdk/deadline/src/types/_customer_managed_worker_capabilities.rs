// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The worker capabilities for a customer managed workflow.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomerManagedWorkerCapabilities {
    /// <p>The vCPU count for the customer manged worker capabilities.</p>
    pub v_cpu_count: ::std::option::Option<crate::types::VCpuCountRange>,
    /// <p>The memory (MiB).</p>
    pub memory_mib: ::std::option::Option<crate::types::MemoryMiBRange>,
    /// <p>The accelerator types for the customer managed worker capabilities.</p>
    pub accelerator_types: ::std::option::Option<::std::vec::Vec<crate::types::AcceleratorType>>,
    /// <p>The range of the accelerator.</p>
    pub accelerator_count: ::std::option::Option<crate::types::AcceleratorCountRange>,
    /// <p>The total memory (MiB) for the customer managed worker capabilities.</p>
    pub accelerator_total_memory_mib: ::std::option::Option<crate::types::AcceleratorTotalMemoryMiBRange>,
    /// <p>The operating system (OS) family.</p>
    pub os_family: crate::types::CustomerManagedFleetOperatingSystemFamily,
    /// <p>The CPU architecture type for the customer managed worker capabilities.</p>
    pub cpu_architecture_type: crate::types::CpuArchitectureType,
    /// <p>Custom requirement ranges for customer managed worker capabilities.</p>
    pub custom_amounts: ::std::option::Option<::std::vec::Vec<crate::types::FleetAmountCapability>>,
    /// <p>Custom attributes for the customer manged worker capabilities.</p>
    pub custom_attributes: ::std::option::Option<::std::vec::Vec<crate::types::FleetAttributeCapability>>,
}
impl CustomerManagedWorkerCapabilities {
    /// <p>The vCPU count for the customer manged worker capabilities.</p>
    pub fn v_cpu_count(&self) -> ::std::option::Option<&crate::types::VCpuCountRange> {
        self.v_cpu_count.as_ref()
    }
    /// <p>The memory (MiB).</p>
    pub fn memory_mib(&self) -> ::std::option::Option<&crate::types::MemoryMiBRange> {
        self.memory_mib.as_ref()
    }
    /// <p>The accelerator types for the customer managed worker capabilities.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.accelerator_types.is_none()`.
    pub fn accelerator_types(&self) -> &[crate::types::AcceleratorType] {
        self.accelerator_types.as_deref().unwrap_or_default()
    }
    /// <p>The range of the accelerator.</p>
    pub fn accelerator_count(&self) -> ::std::option::Option<&crate::types::AcceleratorCountRange> {
        self.accelerator_count.as_ref()
    }
    /// <p>The total memory (MiB) for the customer managed worker capabilities.</p>
    pub fn accelerator_total_memory_mib(&self) -> ::std::option::Option<&crate::types::AcceleratorTotalMemoryMiBRange> {
        self.accelerator_total_memory_mib.as_ref()
    }
    /// <p>The operating system (OS) family.</p>
    pub fn os_family(&self) -> &crate::types::CustomerManagedFleetOperatingSystemFamily {
        &self.os_family
    }
    /// <p>The CPU architecture type for the customer managed worker capabilities.</p>
    pub fn cpu_architecture_type(&self) -> &crate::types::CpuArchitectureType {
        &self.cpu_architecture_type
    }
    /// <p>Custom requirement ranges for customer managed worker capabilities.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.custom_amounts.is_none()`.
    pub fn custom_amounts(&self) -> &[crate::types::FleetAmountCapability] {
        self.custom_amounts.as_deref().unwrap_or_default()
    }
    /// <p>Custom attributes for the customer manged worker capabilities.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.custom_attributes.is_none()`.
    pub fn custom_attributes(&self) -> &[crate::types::FleetAttributeCapability] {
        self.custom_attributes.as_deref().unwrap_or_default()
    }
}
impl CustomerManagedWorkerCapabilities {
    /// Creates a new builder-style object to manufacture [`CustomerManagedWorkerCapabilities`](crate::types::CustomerManagedWorkerCapabilities).
    pub fn builder() -> crate::types::builders::CustomerManagedWorkerCapabilitiesBuilder {
        crate::types::builders::CustomerManagedWorkerCapabilitiesBuilder::default()
    }
}

/// A builder for [`CustomerManagedWorkerCapabilities`](crate::types::CustomerManagedWorkerCapabilities).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CustomerManagedWorkerCapabilitiesBuilder {
    pub(crate) v_cpu_count: ::std::option::Option<crate::types::VCpuCountRange>,
    pub(crate) memory_mib: ::std::option::Option<crate::types::MemoryMiBRange>,
    pub(crate) accelerator_types: ::std::option::Option<::std::vec::Vec<crate::types::AcceleratorType>>,
    pub(crate) accelerator_count: ::std::option::Option<crate::types::AcceleratorCountRange>,
    pub(crate) accelerator_total_memory_mib: ::std::option::Option<crate::types::AcceleratorTotalMemoryMiBRange>,
    pub(crate) os_family: ::std::option::Option<crate::types::CustomerManagedFleetOperatingSystemFamily>,
    pub(crate) cpu_architecture_type: ::std::option::Option<crate::types::CpuArchitectureType>,
    pub(crate) custom_amounts: ::std::option::Option<::std::vec::Vec<crate::types::FleetAmountCapability>>,
    pub(crate) custom_attributes: ::std::option::Option<::std::vec::Vec<crate::types::FleetAttributeCapability>>,
}
impl CustomerManagedWorkerCapabilitiesBuilder {
    /// <p>The vCPU count for the customer manged worker capabilities.</p>
    /// This field is required.
    pub fn v_cpu_count(mut self, input: crate::types::VCpuCountRange) -> Self {
        self.v_cpu_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The vCPU count for the customer manged worker capabilities.</p>
    pub fn set_v_cpu_count(mut self, input: ::std::option::Option<crate::types::VCpuCountRange>) -> Self {
        self.v_cpu_count = input;
        self
    }
    /// <p>The vCPU count for the customer manged worker capabilities.</p>
    pub fn get_v_cpu_count(&self) -> &::std::option::Option<crate::types::VCpuCountRange> {
        &self.v_cpu_count
    }
    /// <p>The memory (MiB).</p>
    /// This field is required.
    pub fn memory_mib(mut self, input: crate::types::MemoryMiBRange) -> Self {
        self.memory_mib = ::std::option::Option::Some(input);
        self
    }
    /// <p>The memory (MiB).</p>
    pub fn set_memory_mib(mut self, input: ::std::option::Option<crate::types::MemoryMiBRange>) -> Self {
        self.memory_mib = input;
        self
    }
    /// <p>The memory (MiB).</p>
    pub fn get_memory_mib(&self) -> &::std::option::Option<crate::types::MemoryMiBRange> {
        &self.memory_mib
    }
    /// Appends an item to `accelerator_types`.
    ///
    /// To override the contents of this collection use [`set_accelerator_types`](Self::set_accelerator_types).
    ///
    /// <p>The accelerator types for the customer managed worker capabilities.</p>
    pub fn accelerator_types(mut self, input: crate::types::AcceleratorType) -> Self {
        let mut v = self.accelerator_types.unwrap_or_default();
        v.push(input);
        self.accelerator_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The accelerator types for the customer managed worker capabilities.</p>
    pub fn set_accelerator_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AcceleratorType>>) -> Self {
        self.accelerator_types = input;
        self
    }
    /// <p>The accelerator types for the customer managed worker capabilities.</p>
    pub fn get_accelerator_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AcceleratorType>> {
        &self.accelerator_types
    }
    /// <p>The range of the accelerator.</p>
    pub fn accelerator_count(mut self, input: crate::types::AcceleratorCountRange) -> Self {
        self.accelerator_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The range of the accelerator.</p>
    pub fn set_accelerator_count(mut self, input: ::std::option::Option<crate::types::AcceleratorCountRange>) -> Self {
        self.accelerator_count = input;
        self
    }
    /// <p>The range of the accelerator.</p>
    pub fn get_accelerator_count(&self) -> &::std::option::Option<crate::types::AcceleratorCountRange> {
        &self.accelerator_count
    }
    /// <p>The total memory (MiB) for the customer managed worker capabilities.</p>
    pub fn accelerator_total_memory_mib(mut self, input: crate::types::AcceleratorTotalMemoryMiBRange) -> Self {
        self.accelerator_total_memory_mib = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total memory (MiB) for the customer managed worker capabilities.</p>
    pub fn set_accelerator_total_memory_mib(mut self, input: ::std::option::Option<crate::types::AcceleratorTotalMemoryMiBRange>) -> Self {
        self.accelerator_total_memory_mib = input;
        self
    }
    /// <p>The total memory (MiB) for the customer managed worker capabilities.</p>
    pub fn get_accelerator_total_memory_mib(&self) -> &::std::option::Option<crate::types::AcceleratorTotalMemoryMiBRange> {
        &self.accelerator_total_memory_mib
    }
    /// <p>The operating system (OS) family.</p>
    /// This field is required.
    pub fn os_family(mut self, input: crate::types::CustomerManagedFleetOperatingSystemFamily) -> Self {
        self.os_family = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operating system (OS) family.</p>
    pub fn set_os_family(mut self, input: ::std::option::Option<crate::types::CustomerManagedFleetOperatingSystemFamily>) -> Self {
        self.os_family = input;
        self
    }
    /// <p>The operating system (OS) family.</p>
    pub fn get_os_family(&self) -> &::std::option::Option<crate::types::CustomerManagedFleetOperatingSystemFamily> {
        &self.os_family
    }
    /// <p>The CPU architecture type for the customer managed worker capabilities.</p>
    /// This field is required.
    pub fn cpu_architecture_type(mut self, input: crate::types::CpuArchitectureType) -> Self {
        self.cpu_architecture_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CPU architecture type for the customer managed worker capabilities.</p>
    pub fn set_cpu_architecture_type(mut self, input: ::std::option::Option<crate::types::CpuArchitectureType>) -> Self {
        self.cpu_architecture_type = input;
        self
    }
    /// <p>The CPU architecture type for the customer managed worker capabilities.</p>
    pub fn get_cpu_architecture_type(&self) -> &::std::option::Option<crate::types::CpuArchitectureType> {
        &self.cpu_architecture_type
    }
    /// Appends an item to `custom_amounts`.
    ///
    /// To override the contents of this collection use [`set_custom_amounts`](Self::set_custom_amounts).
    ///
    /// <p>Custom requirement ranges for customer managed worker capabilities.</p>
    pub fn custom_amounts(mut self, input: crate::types::FleetAmountCapability) -> Self {
        let mut v = self.custom_amounts.unwrap_or_default();
        v.push(input);
        self.custom_amounts = ::std::option::Option::Some(v);
        self
    }
    /// <p>Custom requirement ranges for customer managed worker capabilities.</p>
    pub fn set_custom_amounts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FleetAmountCapability>>) -> Self {
        self.custom_amounts = input;
        self
    }
    /// <p>Custom requirement ranges for customer managed worker capabilities.</p>
    pub fn get_custom_amounts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FleetAmountCapability>> {
        &self.custom_amounts
    }
    /// Appends an item to `custom_attributes`.
    ///
    /// To override the contents of this collection use [`set_custom_attributes`](Self::set_custom_attributes).
    ///
    /// <p>Custom attributes for the customer manged worker capabilities.</p>
    pub fn custom_attributes(mut self, input: crate::types::FleetAttributeCapability) -> Self {
        let mut v = self.custom_attributes.unwrap_or_default();
        v.push(input);
        self.custom_attributes = ::std::option::Option::Some(v);
        self
    }
    /// <p>Custom attributes for the customer manged worker capabilities.</p>
    pub fn set_custom_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FleetAttributeCapability>>) -> Self {
        self.custom_attributes = input;
        self
    }
    /// <p>Custom attributes for the customer manged worker capabilities.</p>
    pub fn get_custom_attributes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FleetAttributeCapability>> {
        &self.custom_attributes
    }
    /// Consumes the builder and constructs a [`CustomerManagedWorkerCapabilities`](crate::types::CustomerManagedWorkerCapabilities).
    /// This method will fail if any of the following fields are not set:
    /// - [`os_family`](crate::types::builders::CustomerManagedWorkerCapabilitiesBuilder::os_family)
    /// - [`cpu_architecture_type`](crate::types::builders::CustomerManagedWorkerCapabilitiesBuilder::cpu_architecture_type)
    pub fn build(self) -> ::std::result::Result<crate::types::CustomerManagedWorkerCapabilities, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CustomerManagedWorkerCapabilities {
            v_cpu_count: self.v_cpu_count,
            memory_mib: self.memory_mib,
            accelerator_types: self.accelerator_types,
            accelerator_count: self.accelerator_count,
            accelerator_total_memory_mib: self.accelerator_total_memory_mib,
            os_family: self.os_family.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "os_family",
                    "os_family was not specified but it is required when building CustomerManagedWorkerCapabilities",
                )
            })?,
            cpu_architecture_type: self.cpu_architecture_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cpu_architecture_type",
                    "cpu_architecture_type was not specified but it is required when building CustomerManagedWorkerCapabilities",
                )
            })?,
            custom_amounts: self.custom_amounts,
            custom_attributes: self.custom_attributes,
        })
    }
}
