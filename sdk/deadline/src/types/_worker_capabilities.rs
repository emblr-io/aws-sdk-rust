// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details for worker capabilities.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkerCapabilities {
    /// <p>The worker capabilities amounts on a list of worker capabilities.</p>
    pub amounts: ::std::vec::Vec<crate::types::WorkerAmountCapability>,
    /// <p>The worker attribute capabilities in the list of attribute capabilities.</p>
    pub attributes: ::std::vec::Vec<crate::types::WorkerAttributeCapability>,
}
impl WorkerCapabilities {
    /// <p>The worker capabilities amounts on a list of worker capabilities.</p>
    pub fn amounts(&self) -> &[crate::types::WorkerAmountCapability] {
        use std::ops::Deref;
        self.amounts.deref()
    }
    /// <p>The worker attribute capabilities in the list of attribute capabilities.</p>
    pub fn attributes(&self) -> &[crate::types::WorkerAttributeCapability] {
        use std::ops::Deref;
        self.attributes.deref()
    }
}
impl WorkerCapabilities {
    /// Creates a new builder-style object to manufacture [`WorkerCapabilities`](crate::types::WorkerCapabilities).
    pub fn builder() -> crate::types::builders::WorkerCapabilitiesBuilder {
        crate::types::builders::WorkerCapabilitiesBuilder::default()
    }
}

/// A builder for [`WorkerCapabilities`](crate::types::WorkerCapabilities).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WorkerCapabilitiesBuilder {
    pub(crate) amounts: ::std::option::Option<::std::vec::Vec<crate::types::WorkerAmountCapability>>,
    pub(crate) attributes: ::std::option::Option<::std::vec::Vec<crate::types::WorkerAttributeCapability>>,
}
impl WorkerCapabilitiesBuilder {
    /// Appends an item to `amounts`.
    ///
    /// To override the contents of this collection use [`set_amounts`](Self::set_amounts).
    ///
    /// <p>The worker capabilities amounts on a list of worker capabilities.</p>
    pub fn amounts(mut self, input: crate::types::WorkerAmountCapability) -> Self {
        let mut v = self.amounts.unwrap_or_default();
        v.push(input);
        self.amounts = ::std::option::Option::Some(v);
        self
    }
    /// <p>The worker capabilities amounts on a list of worker capabilities.</p>
    pub fn set_amounts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WorkerAmountCapability>>) -> Self {
        self.amounts = input;
        self
    }
    /// <p>The worker capabilities amounts on a list of worker capabilities.</p>
    pub fn get_amounts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WorkerAmountCapability>> {
        &self.amounts
    }
    /// Appends an item to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>The worker attribute capabilities in the list of attribute capabilities.</p>
    pub fn attributes(mut self, input: crate::types::WorkerAttributeCapability) -> Self {
        let mut v = self.attributes.unwrap_or_default();
        v.push(input);
        self.attributes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The worker attribute capabilities in the list of attribute capabilities.</p>
    pub fn set_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WorkerAttributeCapability>>) -> Self {
        self.attributes = input;
        self
    }
    /// <p>The worker attribute capabilities in the list of attribute capabilities.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WorkerAttributeCapability>> {
        &self.attributes
    }
    /// Consumes the builder and constructs a [`WorkerCapabilities`](crate::types::WorkerCapabilities).
    /// This method will fail if any of the following fields are not set:
    /// - [`amounts`](crate::types::builders::WorkerCapabilitiesBuilder::amounts)
    /// - [`attributes`](crate::types::builders::WorkerCapabilitiesBuilder::attributes)
    pub fn build(self) -> ::std::result::Result<crate::types::WorkerCapabilities, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WorkerCapabilities {
            amounts: self.amounts.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "amounts",
                    "amounts was not specified but it is required when building WorkerCapabilities",
                )
            })?,
            attributes: self.attributes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "attributes",
                    "attributes was not specified but it is required when building WorkerCapabilities",
                )
            })?,
        })
    }
}
