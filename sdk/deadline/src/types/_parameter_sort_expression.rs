// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Organizes parameters according to your specifications.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParameterSortExpression {
    /// <p>The sort order for the parameter.</p>
    pub sort_order: crate::types::SortOrder,
    /// <p>The parameter name to sort by.</p>
    pub name: ::std::string::String,
}
impl ParameterSortExpression {
    /// <p>The sort order for the parameter.</p>
    pub fn sort_order(&self) -> &crate::types::SortOrder {
        &self.sort_order
    }
    /// <p>The parameter name to sort by.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
}
impl ParameterSortExpression {
    /// Creates a new builder-style object to manufacture [`ParameterSortExpression`](crate::types::ParameterSortExpression).
    pub fn builder() -> crate::types::builders::ParameterSortExpressionBuilder {
        crate::types::builders::ParameterSortExpressionBuilder::default()
    }
}

/// A builder for [`ParameterSortExpression`](crate::types::ParameterSortExpression).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ParameterSortExpressionBuilder {
    pub(crate) sort_order: ::std::option::Option<crate::types::SortOrder>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
}
impl ParameterSortExpressionBuilder {
    /// <p>The sort order for the parameter.</p>
    /// This field is required.
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sort order for the parameter.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The sort order for the parameter.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortOrder> {
        &self.sort_order
    }
    /// <p>The parameter name to sort by.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The parameter name to sort by.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The parameter name to sort by.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Consumes the builder and constructs a [`ParameterSortExpression`](crate::types::ParameterSortExpression).
    /// This method will fail if any of the following fields are not set:
    /// - [`sort_order`](crate::types::builders::ParameterSortExpressionBuilder::sort_order)
    /// - [`name`](crate::types::builders::ParameterSortExpressionBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::ParameterSortExpression, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ParameterSortExpression {
            sort_order: self.sort_order.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sort_order",
                    "sort_order was not specified but it is required when building ParameterSortExpression",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building ParameterSortExpression",
                )
            })?,
        })
    }
}
