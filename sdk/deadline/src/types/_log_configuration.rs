// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Log configuration details.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LogConfiguration {
    /// <p>The log drivers for worker related logs.</p>
    pub log_driver: ::std::string::String,
    /// <p>The options for a log driver.</p>
    pub options: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The parameters for the log configuration.</p>
    pub parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The log configuration error details.</p>
    pub error: ::std::option::Option<::std::string::String>,
}
impl LogConfiguration {
    /// <p>The log drivers for worker related logs.</p>
    pub fn log_driver(&self) -> &str {
        use std::ops::Deref;
        self.log_driver.deref()
    }
    /// <p>The options for a log driver.</p>
    pub fn options(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.options.as_ref()
    }
    /// <p>The parameters for the log configuration.</p>
    pub fn parameters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.parameters.as_ref()
    }
    /// <p>The log configuration error details.</p>
    pub fn error(&self) -> ::std::option::Option<&str> {
        self.error.as_deref()
    }
}
impl LogConfiguration {
    /// Creates a new builder-style object to manufacture [`LogConfiguration`](crate::types::LogConfiguration).
    pub fn builder() -> crate::types::builders::LogConfigurationBuilder {
        crate::types::builders::LogConfigurationBuilder::default()
    }
}

/// A builder for [`LogConfiguration`](crate::types::LogConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LogConfigurationBuilder {
    pub(crate) log_driver: ::std::option::Option<::std::string::String>,
    pub(crate) options: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) error: ::std::option::Option<::std::string::String>,
}
impl LogConfigurationBuilder {
    /// <p>The log drivers for worker related logs.</p>
    /// This field is required.
    pub fn log_driver(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_driver = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The log drivers for worker related logs.</p>
    pub fn set_log_driver(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_driver = input;
        self
    }
    /// <p>The log drivers for worker related logs.</p>
    pub fn get_log_driver(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_driver
    }
    /// Adds a key-value pair to `options`.
    ///
    /// To override the contents of this collection use [`set_options`](Self::set_options).
    ///
    /// <p>The options for a log driver.</p>
    pub fn options(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.options.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.options = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The options for a log driver.</p>
    pub fn set_options(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.options = input;
        self
    }
    /// <p>The options for a log driver.</p>
    pub fn get_options(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.options
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>The parameters for the log configuration.</p>
    pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The parameters for the log configuration.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>The parameters for the log configuration.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.parameters
    }
    /// <p>The log configuration error details.</p>
    pub fn error(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The log configuration error details.</p>
    pub fn set_error(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error = input;
        self
    }
    /// <p>The log configuration error details.</p>
    pub fn get_error(&self) -> &::std::option::Option<::std::string::String> {
        &self.error
    }
    /// Consumes the builder and constructs a [`LogConfiguration`](crate::types::LogConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`log_driver`](crate::types::builders::LogConfigurationBuilder::log_driver)
    pub fn build(self) -> ::std::result::Result<crate::types::LogConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LogConfiguration {
            log_driver: self.log_driver.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "log_driver",
                    "log_driver was not specified but it is required when building LogConfiguration",
                )
            })?,
            options: self.options,
            parameters: self.parameters,
            error: self.error,
        })
    }
}
