// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The list of step attributes.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StepAttributeCapability {
    /// <p>The name of the step attribute.</p>
    pub name: ::std::string::String,
    /// <p>Requires any of the step attributes in a given list.</p>
    pub any_of: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Requires all of the step attribute values.</p>
    pub all_of: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl StepAttributeCapability {
    /// <p>The name of the step attribute.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Requires any of the step attributes in a given list.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.any_of.is_none()`.
    pub fn any_of(&self) -> &[::std::string::String] {
        self.any_of.as_deref().unwrap_or_default()
    }
    /// <p>Requires all of the step attribute values.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.all_of.is_none()`.
    pub fn all_of(&self) -> &[::std::string::String] {
        self.all_of.as_deref().unwrap_or_default()
    }
}
impl StepAttributeCapability {
    /// Creates a new builder-style object to manufacture [`StepAttributeCapability`](crate::types::StepAttributeCapability).
    pub fn builder() -> crate::types::builders::StepAttributeCapabilityBuilder {
        crate::types::builders::StepAttributeCapabilityBuilder::default()
    }
}

/// A builder for [`StepAttributeCapability`](crate::types::StepAttributeCapability).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StepAttributeCapabilityBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) any_of: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) all_of: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl StepAttributeCapabilityBuilder {
    /// <p>The name of the step attribute.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the step attribute.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the step attribute.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `any_of`.
    ///
    /// To override the contents of this collection use [`set_any_of`](Self::set_any_of).
    ///
    /// <p>Requires any of the step attributes in a given list.</p>
    pub fn any_of(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.any_of.unwrap_or_default();
        v.push(input.into());
        self.any_of = ::std::option::Option::Some(v);
        self
    }
    /// <p>Requires any of the step attributes in a given list.</p>
    pub fn set_any_of(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.any_of = input;
        self
    }
    /// <p>Requires any of the step attributes in a given list.</p>
    pub fn get_any_of(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.any_of
    }
    /// Appends an item to `all_of`.
    ///
    /// To override the contents of this collection use [`set_all_of`](Self::set_all_of).
    ///
    /// <p>Requires all of the step attribute values.</p>
    pub fn all_of(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.all_of.unwrap_or_default();
        v.push(input.into());
        self.all_of = ::std::option::Option::Some(v);
        self
    }
    /// <p>Requires all of the step attribute values.</p>
    pub fn set_all_of(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.all_of = input;
        self
    }
    /// <p>Requires all of the step attribute values.</p>
    pub fn get_all_of(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.all_of
    }
    /// Consumes the builder and constructs a [`StepAttributeCapability`](crate::types::StepAttributeCapability).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::StepAttributeCapabilityBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::StepAttributeCapability, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::StepAttributeCapability {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building StepAttributeCapability",
                )
            })?,
            any_of: self.any_of,
            all_of: self.all_of,
        })
    }
}
