// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a source and destination path.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PathMappingRule {
    /// <p>The source path format.</p>
    pub source_path_format: crate::types::PathFormat,
    /// <p>The source path.</p>
    pub source_path: ::std::string::String,
    /// <p>The destination path.</p>
    pub destination_path: ::std::string::String,
}
impl PathMappingRule {
    /// <p>The source path format.</p>
    pub fn source_path_format(&self) -> &crate::types::PathFormat {
        &self.source_path_format
    }
    /// <p>The source path.</p>
    pub fn source_path(&self) -> &str {
        use std::ops::Deref;
        self.source_path.deref()
    }
    /// <p>The destination path.</p>
    pub fn destination_path(&self) -> &str {
        use std::ops::Deref;
        self.destination_path.deref()
    }
}
impl ::std::fmt::Debug for PathMappingRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PathMappingRule");
        formatter.field("source_path_format", &"*** Sensitive Data Redacted ***");
        formatter.field("source_path", &"*** Sensitive Data Redacted ***");
        formatter.field("destination_path", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl PathMappingRule {
    /// Creates a new builder-style object to manufacture [`PathMappingRule`](crate::types::PathMappingRule).
    pub fn builder() -> crate::types::builders::PathMappingRuleBuilder {
        crate::types::builders::PathMappingRuleBuilder::default()
    }
}

/// A builder for [`PathMappingRule`](crate::types::PathMappingRule).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct PathMappingRuleBuilder {
    pub(crate) source_path_format: ::std::option::Option<crate::types::PathFormat>,
    pub(crate) source_path: ::std::option::Option<::std::string::String>,
    pub(crate) destination_path: ::std::option::Option<::std::string::String>,
}
impl PathMappingRuleBuilder {
    /// <p>The source path format.</p>
    /// This field is required.
    pub fn source_path_format(mut self, input: crate::types::PathFormat) -> Self {
        self.source_path_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source path format.</p>
    pub fn set_source_path_format(mut self, input: ::std::option::Option<crate::types::PathFormat>) -> Self {
        self.source_path_format = input;
        self
    }
    /// <p>The source path format.</p>
    pub fn get_source_path_format(&self) -> &::std::option::Option<crate::types::PathFormat> {
        &self.source_path_format
    }
    /// <p>The source path.</p>
    /// This field is required.
    pub fn source_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source path.</p>
    pub fn set_source_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_path = input;
        self
    }
    /// <p>The source path.</p>
    pub fn get_source_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_path
    }
    /// <p>The destination path.</p>
    /// This field is required.
    pub fn destination_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The destination path.</p>
    pub fn set_destination_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_path = input;
        self
    }
    /// <p>The destination path.</p>
    pub fn get_destination_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_path
    }
    /// Consumes the builder and constructs a [`PathMappingRule`](crate::types::PathMappingRule).
    /// This method will fail if any of the following fields are not set:
    /// - [`source_path_format`](crate::types::builders::PathMappingRuleBuilder::source_path_format)
    /// - [`source_path`](crate::types::builders::PathMappingRuleBuilder::source_path)
    /// - [`destination_path`](crate::types::builders::PathMappingRuleBuilder::destination_path)
    pub fn build(self) -> ::std::result::Result<crate::types::PathMappingRule, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PathMappingRule {
            source_path_format: self.source_path_format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_path_format",
                    "source_path_format was not specified but it is required when building PathMappingRule",
                )
            })?,
            source_path: self.source_path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_path",
                    "source_path was not specified but it is required when building PathMappingRule",
                )
            })?,
            destination_path: self.destination_path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "destination_path",
                    "destination_path was not specified but it is required when building PathMappingRule",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for PathMappingRuleBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PathMappingRuleBuilder");
        formatter.field("source_path_format", &"*** Sensitive Data Redacted ***");
        formatter.field("source_path", &"*** Sensitive Data Redacted ***");
        formatter.field("destination_path", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
