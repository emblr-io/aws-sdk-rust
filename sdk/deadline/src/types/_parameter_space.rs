// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a search for two or more step parameters.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParameterSpace {
    /// <p>The parameters to search for.</p>
    pub parameters: ::std::vec::Vec<crate::types::StepParameter>,
    /// <p>The combination expression to use in the search.</p>
    pub combination: ::std::option::Option<::std::string::String>,
}
impl ParameterSpace {
    /// <p>The parameters to search for.</p>
    pub fn parameters(&self) -> &[crate::types::StepParameter] {
        use std::ops::Deref;
        self.parameters.deref()
    }
    /// <p>The combination expression to use in the search.</p>
    pub fn combination(&self) -> ::std::option::Option<&str> {
        self.combination.as_deref()
    }
}
impl ParameterSpace {
    /// Creates a new builder-style object to manufacture [`ParameterSpace`](crate::types::ParameterSpace).
    pub fn builder() -> crate::types::builders::ParameterSpaceBuilder {
        crate::types::builders::ParameterSpaceBuilder::default()
    }
}

/// A builder for [`ParameterSpace`](crate::types::ParameterSpace).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ParameterSpaceBuilder {
    pub(crate) parameters: ::std::option::Option<::std::vec::Vec<crate::types::StepParameter>>,
    pub(crate) combination: ::std::option::Option<::std::string::String>,
}
impl ParameterSpaceBuilder {
    /// Appends an item to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>The parameters to search for.</p>
    pub fn parameters(mut self, input: crate::types::StepParameter) -> Self {
        let mut v = self.parameters.unwrap_or_default();
        v.push(input);
        self.parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The parameters to search for.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StepParameter>>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>The parameters to search for.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StepParameter>> {
        &self.parameters
    }
    /// <p>The combination expression to use in the search.</p>
    pub fn combination(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.combination = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The combination expression to use in the search.</p>
    pub fn set_combination(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.combination = input;
        self
    }
    /// <p>The combination expression to use in the search.</p>
    pub fn get_combination(&self) -> &::std::option::Option<::std::string::String> {
        &self.combination
    }
    /// Consumes the builder and constructs a [`ParameterSpace`](crate::types::ParameterSpace).
    /// This method will fail if any of the following fields are not set:
    /// - [`parameters`](crate::types::builders::ParameterSpaceBuilder::parameters)
    pub fn build(self) -> ::std::result::Result<crate::types::ParameterSpace, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ParameterSpace {
            parameters: self.parameters.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "parameters",
                    "parameters was not specified but it is required when building ParameterSpace",
                )
            })?,
            combination: self.combination,
        })
    }
}
