// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The budget summary.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct BudgetSummary {
    /// <p>The budget ID.</p>
    pub budget_id: ::std::string::String,
    /// <p>The resource used to track expenditure in the budget.</p>
    pub usage_tracking_resource: ::std::option::Option<crate::types::UsageTrackingResource>,
    /// <p>The status of the budget.</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVE</code>–The budget is being evaluated.</p></li>
    /// <li>
    /// <p><code>INACTIVE</code>–The budget is inactive. This can include Expired, Canceled, or deleted Deleted statuses.</p></li>
    /// </ul>
    pub status: crate::types::BudgetStatus,
    /// <p>The display name of the budget summary to update.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub display_name: ::std::string::String,
    /// <p>The description of the budget summary.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    #[deprecated(note = "ListBudgets no longer supports description. Use GetBudget if description is needed.")]
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The approximate dollar limit of the budget.</p>
    pub approximate_dollar_limit: f32,
    /// <p>The consumed usage for the budget.</p>
    pub usages: ::std::option::Option<crate::types::ConsumedUsages>,
    /// <p>The user or system that created this resource.</p>
    pub created_by: ::std::string::String,
    /// <p>The date and time the resource was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The user or system that updated this resource.</p>
    pub updated_by: ::std::option::Option<::std::string::String>,
    /// <p>The date and time the resource was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl BudgetSummary {
    /// <p>The budget ID.</p>
    pub fn budget_id(&self) -> &str {
        use std::ops::Deref;
        self.budget_id.deref()
    }
    /// <p>The resource used to track expenditure in the budget.</p>
    pub fn usage_tracking_resource(&self) -> ::std::option::Option<&crate::types::UsageTrackingResource> {
        self.usage_tracking_resource.as_ref()
    }
    /// <p>The status of the budget.</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVE</code>–The budget is being evaluated.</p></li>
    /// <li>
    /// <p><code>INACTIVE</code>–The budget is inactive. This can include Expired, Canceled, or deleted Deleted statuses.</p></li>
    /// </ul>
    pub fn status(&self) -> &crate::types::BudgetStatus {
        &self.status
    }
    /// <p>The display name of the budget summary to update.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn display_name(&self) -> &str {
        use std::ops::Deref;
        self.display_name.deref()
    }
    /// <p>The description of the budget summary.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    #[deprecated(note = "ListBudgets no longer supports description. Use GetBudget if description is needed.")]
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The approximate dollar limit of the budget.</p>
    pub fn approximate_dollar_limit(&self) -> f32 {
        self.approximate_dollar_limit
    }
    /// <p>The consumed usage for the budget.</p>
    pub fn usages(&self) -> ::std::option::Option<&crate::types::ConsumedUsages> {
        self.usages.as_ref()
    }
    /// <p>The user or system that created this resource.</p>
    pub fn created_by(&self) -> &str {
        use std::ops::Deref;
        self.created_by.deref()
    }
    /// <p>The date and time the resource was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn updated_by(&self) -> ::std::option::Option<&str> {
        self.updated_by.as_deref()
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl ::std::fmt::Debug for BudgetSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BudgetSummary");
        formatter.field("budget_id", &self.budget_id);
        formatter.field("usage_tracking_resource", &self.usage_tracking_resource);
        formatter.field("status", &self.status);
        formatter.field("display_name", &self.display_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("approximate_dollar_limit", &self.approximate_dollar_limit);
        formatter.field("usages", &self.usages);
        formatter.field("created_by", &self.created_by);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_by", &self.updated_by);
        formatter.field("updated_at", &self.updated_at);
        formatter.finish()
    }
}
impl BudgetSummary {
    /// Creates a new builder-style object to manufacture [`BudgetSummary`](crate::types::BudgetSummary).
    pub fn builder() -> crate::types::builders::BudgetSummaryBuilder {
        crate::types::builders::BudgetSummaryBuilder::default()
    }
}

/// A builder for [`BudgetSummary`](crate::types::BudgetSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct BudgetSummaryBuilder {
    pub(crate) budget_id: ::std::option::Option<::std::string::String>,
    pub(crate) usage_tracking_resource: ::std::option::Option<crate::types::UsageTrackingResource>,
    pub(crate) status: ::std::option::Option<crate::types::BudgetStatus>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) approximate_dollar_limit: ::std::option::Option<f32>,
    pub(crate) usages: ::std::option::Option<crate::types::ConsumedUsages>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_by: ::std::option::Option<::std::string::String>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl BudgetSummaryBuilder {
    /// <p>The budget ID.</p>
    /// This field is required.
    pub fn budget_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.budget_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The budget ID.</p>
    pub fn set_budget_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.budget_id = input;
        self
    }
    /// <p>The budget ID.</p>
    pub fn get_budget_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.budget_id
    }
    /// <p>The resource used to track expenditure in the budget.</p>
    /// This field is required.
    pub fn usage_tracking_resource(mut self, input: crate::types::UsageTrackingResource) -> Self {
        self.usage_tracking_resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>The resource used to track expenditure in the budget.</p>
    pub fn set_usage_tracking_resource(mut self, input: ::std::option::Option<crate::types::UsageTrackingResource>) -> Self {
        self.usage_tracking_resource = input;
        self
    }
    /// <p>The resource used to track expenditure in the budget.</p>
    pub fn get_usage_tracking_resource(&self) -> &::std::option::Option<crate::types::UsageTrackingResource> {
        &self.usage_tracking_resource
    }
    /// <p>The status of the budget.</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVE</code>–The budget is being evaluated.</p></li>
    /// <li>
    /// <p><code>INACTIVE</code>–The budget is inactive. This can include Expired, Canceled, or deleted Deleted statuses.</p></li>
    /// </ul>
    /// This field is required.
    pub fn status(mut self, input: crate::types::BudgetStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the budget.</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVE</code>–The budget is being evaluated.</p></li>
    /// <li>
    /// <p><code>INACTIVE</code>–The budget is inactive. This can include Expired, Canceled, or deleted Deleted statuses.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::BudgetStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the budget.</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVE</code>–The budget is being evaluated.</p></li>
    /// <li>
    /// <p><code>INACTIVE</code>–The budget is inactive. This can include Expired, Canceled, or deleted Deleted statuses.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::BudgetStatus> {
        &self.status
    }
    /// <p>The display name of the budget summary to update.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    /// This field is required.
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the budget summary to update.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name of the budget summary to update.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The description of the budget summary.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    #[deprecated(note = "ListBudgets no longer supports description. Use GetBudget if description is needed.")]
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the budget summary.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    #[deprecated(note = "ListBudgets no longer supports description. Use GetBudget if description is needed.")]
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the budget summary.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    #[deprecated(note = "ListBudgets no longer supports description. Use GetBudget if description is needed.")]
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The approximate dollar limit of the budget.</p>
    /// This field is required.
    pub fn approximate_dollar_limit(mut self, input: f32) -> Self {
        self.approximate_dollar_limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The approximate dollar limit of the budget.</p>
    pub fn set_approximate_dollar_limit(mut self, input: ::std::option::Option<f32>) -> Self {
        self.approximate_dollar_limit = input;
        self
    }
    /// <p>The approximate dollar limit of the budget.</p>
    pub fn get_approximate_dollar_limit(&self) -> &::std::option::Option<f32> {
        &self.approximate_dollar_limit
    }
    /// <p>The consumed usage for the budget.</p>
    /// This field is required.
    pub fn usages(mut self, input: crate::types::ConsumedUsages) -> Self {
        self.usages = ::std::option::Option::Some(input);
        self
    }
    /// <p>The consumed usage for the budget.</p>
    pub fn set_usages(mut self, input: ::std::option::Option<crate::types::ConsumedUsages>) -> Self {
        self.usages = input;
        self
    }
    /// <p>The consumed usage for the budget.</p>
    pub fn get_usages(&self) -> &::std::option::Option<crate::types::ConsumedUsages> {
        &self.usages
    }
    /// <p>The user or system that created this resource.</p>
    /// This field is required.
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user or system that created this resource.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The user or system that created this resource.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The date and time the resource was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time the resource was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn set_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_by = input;
        self
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn get_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_by
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Consumes the builder and constructs a [`BudgetSummary`](crate::types::BudgetSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`budget_id`](crate::types::builders::BudgetSummaryBuilder::budget_id)
    /// - [`status`](crate::types::builders::BudgetSummaryBuilder::status)
    /// - [`display_name`](crate::types::builders::BudgetSummaryBuilder::display_name)
    /// - [`approximate_dollar_limit`](crate::types::builders::BudgetSummaryBuilder::approximate_dollar_limit)
    /// - [`created_by`](crate::types::builders::BudgetSummaryBuilder::created_by)
    /// - [`created_at`](crate::types::builders::BudgetSummaryBuilder::created_at)
    pub fn build(self) -> ::std::result::Result<crate::types::BudgetSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BudgetSummary {
            budget_id: self.budget_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "budget_id",
                    "budget_id was not specified but it is required when building BudgetSummary",
                )
            })?,
            usage_tracking_resource: self.usage_tracking_resource,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building BudgetSummary",
                )
            })?,
            display_name: self.display_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "display_name",
                    "display_name was not specified but it is required when building BudgetSummary",
                )
            })?,
            description: self.description,
            approximate_dollar_limit: self.approximate_dollar_limit.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "approximate_dollar_limit",
                    "approximate_dollar_limit was not specified but it is required when building BudgetSummary",
                )
            })?,
            usages: self.usages,
            created_by: self.created_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_by",
                    "created_by was not specified but it is required when building BudgetSummary",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building BudgetSummary",
                )
            })?,
            updated_by: self.updated_by,
            updated_at: self.updated_at,
        })
    }
}
impl ::std::fmt::Debug for BudgetSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BudgetSummaryBuilder");
        formatter.field("budget_id", &self.budget_id);
        formatter.field("usage_tracking_resource", &self.usage_tracking_resource);
        formatter.field("status", &self.status);
        formatter.field("display_name", &self.display_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("approximate_dollar_limit", &self.approximate_dollar_limit);
        formatter.field("usages", &self.usages);
        formatter.field("created_by", &self.created_by);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_by", &self.updated_by);
        formatter.field("updated_at", &self.updated_at);
        formatter.finish()
    }
}
