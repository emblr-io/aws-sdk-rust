// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a session action definition.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum SessionActionDefinitionSummary {
    /// <p>The environment to enter into.</p>
    EnvEnter(crate::types::EnvironmentEnterSessionActionDefinitionSummary),
    /// <p>The environment to exit from.</p>
    EnvExit(crate::types::EnvironmentExitSessionActionDefinitionSummary),
    /// <p>The job attachments to sync with the session action definition.</p>
    SyncInputJobAttachments(crate::types::SyncInputJobAttachmentsSessionActionDefinitionSummary),
    /// <p>The task run.</p>
    TaskRun(crate::types::TaskRunSessionActionDefinitionSummary),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl SessionActionDefinitionSummary {
    /// Tries to convert the enum instance into [`EnvEnter`](crate::types::SessionActionDefinitionSummary::EnvEnter), extracting the inner [`EnvironmentEnterSessionActionDefinitionSummary`](crate::types::EnvironmentEnterSessionActionDefinitionSummary).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_env_enter(&self) -> ::std::result::Result<&crate::types::EnvironmentEnterSessionActionDefinitionSummary, &Self> {
        if let SessionActionDefinitionSummary::EnvEnter(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`EnvEnter`](crate::types::SessionActionDefinitionSummary::EnvEnter).
    pub fn is_env_enter(&self) -> bool {
        self.as_env_enter().is_ok()
    }
    /// Tries to convert the enum instance into [`EnvExit`](crate::types::SessionActionDefinitionSummary::EnvExit), extracting the inner [`EnvironmentExitSessionActionDefinitionSummary`](crate::types::EnvironmentExitSessionActionDefinitionSummary).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_env_exit(&self) -> ::std::result::Result<&crate::types::EnvironmentExitSessionActionDefinitionSummary, &Self> {
        if let SessionActionDefinitionSummary::EnvExit(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`EnvExit`](crate::types::SessionActionDefinitionSummary::EnvExit).
    pub fn is_env_exit(&self) -> bool {
        self.as_env_exit().is_ok()
    }
    /// Tries to convert the enum instance into [`SyncInputJobAttachments`](crate::types::SessionActionDefinitionSummary::SyncInputJobAttachments), extracting the inner [`SyncInputJobAttachmentsSessionActionDefinitionSummary`](crate::types::SyncInputJobAttachmentsSessionActionDefinitionSummary).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_sync_input_job_attachments(
        &self,
    ) -> ::std::result::Result<&crate::types::SyncInputJobAttachmentsSessionActionDefinitionSummary, &Self> {
        if let SessionActionDefinitionSummary::SyncInputJobAttachments(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`SyncInputJobAttachments`](crate::types::SessionActionDefinitionSummary::SyncInputJobAttachments).
    pub fn is_sync_input_job_attachments(&self) -> bool {
        self.as_sync_input_job_attachments().is_ok()
    }
    /// Tries to convert the enum instance into [`TaskRun`](crate::types::SessionActionDefinitionSummary::TaskRun), extracting the inner [`TaskRunSessionActionDefinitionSummary`](crate::types::TaskRunSessionActionDefinitionSummary).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_task_run(&self) -> ::std::result::Result<&crate::types::TaskRunSessionActionDefinitionSummary, &Self> {
        if let SessionActionDefinitionSummary::TaskRun(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`TaskRun`](crate::types::SessionActionDefinitionSummary::TaskRun).
    pub fn is_task_run(&self) -> bool {
        self.as_task_run().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
