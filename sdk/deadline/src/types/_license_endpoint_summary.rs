// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details for a license endpoint.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LicenseEndpointSummary {
    /// <p>The license endpoint ID.</p>
    pub license_endpoint_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the license endpoint.</p>
    pub status: ::std::option::Option<crate::types::LicenseEndpointStatus>,
    /// <p>The status message of the license endpoint.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>The VCP(virtual private cloud) ID associated with the license endpoint.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
}
impl LicenseEndpointSummary {
    /// <p>The license endpoint ID.</p>
    pub fn license_endpoint_id(&self) -> ::std::option::Option<&str> {
        self.license_endpoint_id.as_deref()
    }
    /// <p>The status of the license endpoint.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::LicenseEndpointStatus> {
        self.status.as_ref()
    }
    /// <p>The status message of the license endpoint.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The VCP(virtual private cloud) ID associated with the license endpoint.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
}
impl LicenseEndpointSummary {
    /// Creates a new builder-style object to manufacture [`LicenseEndpointSummary`](crate::types::LicenseEndpointSummary).
    pub fn builder() -> crate::types::builders::LicenseEndpointSummaryBuilder {
        crate::types::builders::LicenseEndpointSummaryBuilder::default()
    }
}

/// A builder for [`LicenseEndpointSummary`](crate::types::LicenseEndpointSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LicenseEndpointSummaryBuilder {
    pub(crate) license_endpoint_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::LicenseEndpointStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
}
impl LicenseEndpointSummaryBuilder {
    /// <p>The license endpoint ID.</p>
    pub fn license_endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.license_endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The license endpoint ID.</p>
    pub fn set_license_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.license_endpoint_id = input;
        self
    }
    /// <p>The license endpoint ID.</p>
    pub fn get_license_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.license_endpoint_id
    }
    /// <p>The status of the license endpoint.</p>
    pub fn status(mut self, input: crate::types::LicenseEndpointStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the license endpoint.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::LicenseEndpointStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the license endpoint.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::LicenseEndpointStatus> {
        &self.status
    }
    /// <p>The status message of the license endpoint.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status message of the license endpoint.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The status message of the license endpoint.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>The VCP(virtual private cloud) ID associated with the license endpoint.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The VCP(virtual private cloud) ID associated with the license endpoint.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The VCP(virtual private cloud) ID associated with the license endpoint.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// Consumes the builder and constructs a [`LicenseEndpointSummary`](crate::types::LicenseEndpointSummary).
    pub fn build(self) -> crate::types::LicenseEndpointSummary {
        crate::types::LicenseEndpointSummary {
            license_endpoint_id: self.license_endpoint_id,
            status: self.status,
            status_message: self.status_message,
            vpc_id: self.vpc_id,
        }
    }
}
