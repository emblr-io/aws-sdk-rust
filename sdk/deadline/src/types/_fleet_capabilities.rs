// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The amounts and attributes of fleets.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FleetCapabilities {
    /// <p>Amount capabilities of the fleet.</p>
    pub amounts: ::std::option::Option<::std::vec::Vec<crate::types::FleetAmountCapability>>,
    /// <p>Attribute capabilities of the fleet.</p>
    pub attributes: ::std::option::Option<::std::vec::Vec<crate::types::FleetAttributeCapability>>,
}
impl FleetCapabilities {
    /// <p>Amount capabilities of the fleet.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.amounts.is_none()`.
    pub fn amounts(&self) -> &[crate::types::FleetAmountCapability] {
        self.amounts.as_deref().unwrap_or_default()
    }
    /// <p>Attribute capabilities of the fleet.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attributes.is_none()`.
    pub fn attributes(&self) -> &[crate::types::FleetAttributeCapability] {
        self.attributes.as_deref().unwrap_or_default()
    }
}
impl FleetCapabilities {
    /// Creates a new builder-style object to manufacture [`FleetCapabilities`](crate::types::FleetCapabilities).
    pub fn builder() -> crate::types::builders::FleetCapabilitiesBuilder {
        crate::types::builders::FleetCapabilitiesBuilder::default()
    }
}

/// A builder for [`FleetCapabilities`](crate::types::FleetCapabilities).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FleetCapabilitiesBuilder {
    pub(crate) amounts: ::std::option::Option<::std::vec::Vec<crate::types::FleetAmountCapability>>,
    pub(crate) attributes: ::std::option::Option<::std::vec::Vec<crate::types::FleetAttributeCapability>>,
}
impl FleetCapabilitiesBuilder {
    /// Appends an item to `amounts`.
    ///
    /// To override the contents of this collection use [`set_amounts`](Self::set_amounts).
    ///
    /// <p>Amount capabilities of the fleet.</p>
    pub fn amounts(mut self, input: crate::types::FleetAmountCapability) -> Self {
        let mut v = self.amounts.unwrap_or_default();
        v.push(input);
        self.amounts = ::std::option::Option::Some(v);
        self
    }
    /// <p>Amount capabilities of the fleet.</p>
    pub fn set_amounts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FleetAmountCapability>>) -> Self {
        self.amounts = input;
        self
    }
    /// <p>Amount capabilities of the fleet.</p>
    pub fn get_amounts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FleetAmountCapability>> {
        &self.amounts
    }
    /// Appends an item to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>Attribute capabilities of the fleet.</p>
    pub fn attributes(mut self, input: crate::types::FleetAttributeCapability) -> Self {
        let mut v = self.attributes.unwrap_or_default();
        v.push(input);
        self.attributes = ::std::option::Option::Some(v);
        self
    }
    /// <p>Attribute capabilities of the fleet.</p>
    pub fn set_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FleetAttributeCapability>>) -> Self {
        self.attributes = input;
        self
    }
    /// <p>Attribute capabilities of the fleet.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FleetAttributeCapability>> {
        &self.attributes
    }
    /// Consumes the builder and constructs a [`FleetCapabilities`](crate::types::FleetCapabilities).
    pub fn build(self) -> crate::types::FleetCapabilities {
        crate::types::FleetCapabilities {
            amounts: self.amounts,
            attributes: self.attributes,
        }
    }
}
