// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The job attachment settings. These are the Amazon S3 bucket name and the Amazon S3 prefix.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JobAttachmentSettings {
    /// <p>The Amazon S3 bucket name.</p>
    pub s3_bucket_name: ::std::string::String,
    /// <p>The root prefix.</p>
    pub root_prefix: ::std::string::String,
}
impl JobAttachmentSettings {
    /// <p>The Amazon S3 bucket name.</p>
    pub fn s3_bucket_name(&self) -> &str {
        use std::ops::Deref;
        self.s3_bucket_name.deref()
    }
    /// <p>The root prefix.</p>
    pub fn root_prefix(&self) -> &str {
        use std::ops::Deref;
        self.root_prefix.deref()
    }
}
impl JobAttachmentSettings {
    /// Creates a new builder-style object to manufacture [`JobAttachmentSettings`](crate::types::JobAttachmentSettings).
    pub fn builder() -> crate::types::builders::JobAttachmentSettingsBuilder {
        crate::types::builders::JobAttachmentSettingsBuilder::default()
    }
}

/// A builder for [`JobAttachmentSettings`](crate::types::JobAttachmentSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct JobAttachmentSettingsBuilder {
    pub(crate) s3_bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) root_prefix: ::std::option::Option<::std::string::String>,
}
impl JobAttachmentSettingsBuilder {
    /// <p>The Amazon S3 bucket name.</p>
    /// This field is required.
    pub fn s3_bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 bucket name.</p>
    pub fn set_s3_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_bucket_name = input;
        self
    }
    /// <p>The Amazon S3 bucket name.</p>
    pub fn get_s3_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_bucket_name
    }
    /// <p>The root prefix.</p>
    /// This field is required.
    pub fn root_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.root_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The root prefix.</p>
    pub fn set_root_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.root_prefix = input;
        self
    }
    /// <p>The root prefix.</p>
    pub fn get_root_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.root_prefix
    }
    /// Consumes the builder and constructs a [`JobAttachmentSettings`](crate::types::JobAttachmentSettings).
    /// This method will fail if any of the following fields are not set:
    /// - [`s3_bucket_name`](crate::types::builders::JobAttachmentSettingsBuilder::s3_bucket_name)
    /// - [`root_prefix`](crate::types::builders::JobAttachmentSettingsBuilder::root_prefix)
    pub fn build(self) -> ::std::result::Result<crate::types::JobAttachmentSettings, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::JobAttachmentSettings {
            s3_bucket_name: self.s3_bucket_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "s3_bucket_name",
                    "s3_bucket_name was not specified but it is required when building JobAttachmentSettings",
                )
            })?,
            root_prefix: self.root_prefix.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "root_prefix",
                    "root_prefix was not specified but it is required when building JobAttachmentSettings",
                )
            })?,
        })
    }
}
