// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details outlining the minimum and maximum capability of a step.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StepAmountCapability {
    /// <p>The name of the step.</p>
    pub name: ::std::string::String,
    /// <p>The minimum amount.</p>
    pub min: ::std::option::Option<f64>,
    /// <p>The maximum amount.</p>
    pub max: ::std::option::Option<f64>,
    /// <p>The amount value.</p>
    pub value: ::std::option::Option<f64>,
}
impl StepAmountCapability {
    /// <p>The name of the step.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The minimum amount.</p>
    pub fn min(&self) -> ::std::option::Option<f64> {
        self.min
    }
    /// <p>The maximum amount.</p>
    pub fn max(&self) -> ::std::option::Option<f64> {
        self.max
    }
    /// <p>The amount value.</p>
    pub fn value(&self) -> ::std::option::Option<f64> {
        self.value
    }
}
impl StepAmountCapability {
    /// Creates a new builder-style object to manufacture [`StepAmountCapability`](crate::types::StepAmountCapability).
    pub fn builder() -> crate::types::builders::StepAmountCapabilityBuilder {
        crate::types::builders::StepAmountCapabilityBuilder::default()
    }
}

/// A builder for [`StepAmountCapability`](crate::types::StepAmountCapability).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StepAmountCapabilityBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) min: ::std::option::Option<f64>,
    pub(crate) max: ::std::option::Option<f64>,
    pub(crate) value: ::std::option::Option<f64>,
}
impl StepAmountCapabilityBuilder {
    /// <p>The name of the step.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the step.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the step.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The minimum amount.</p>
    pub fn min(mut self, input: f64) -> Self {
        self.min = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum amount.</p>
    pub fn set_min(mut self, input: ::std::option::Option<f64>) -> Self {
        self.min = input;
        self
    }
    /// <p>The minimum amount.</p>
    pub fn get_min(&self) -> &::std::option::Option<f64> {
        &self.min
    }
    /// <p>The maximum amount.</p>
    pub fn max(mut self, input: f64) -> Self {
        self.max = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum amount.</p>
    pub fn set_max(mut self, input: ::std::option::Option<f64>) -> Self {
        self.max = input;
        self
    }
    /// <p>The maximum amount.</p>
    pub fn get_max(&self) -> &::std::option::Option<f64> {
        &self.max
    }
    /// <p>The amount value.</p>
    pub fn value(mut self, input: f64) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount value.</p>
    pub fn set_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.value = input;
        self
    }
    /// <p>The amount value.</p>
    pub fn get_value(&self) -> &::std::option::Option<f64> {
        &self.value
    }
    /// Consumes the builder and constructs a [`StepAmountCapability`](crate::types::StepAmountCapability).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::StepAmountCapabilityBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::StepAmountCapability, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::StepAmountCapability {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building StepAmountCapability",
                )
            })?,
            min: self.min,
            max: self.max,
            value: self.value,
        })
    }
}
