// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the EBS volume.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Ec2EbsVolume {
    /// <p>The EBS volume size in GiB.</p>
    pub size_gib: i32,
    /// <p>The IOPS per volume.</p>
    pub iops: i32,
    /// <p>The throughput per volume in MiB.</p>
    pub throughput_mib: i32,
}
impl Ec2EbsVolume {
    /// <p>The EBS volume size in GiB.</p>
    pub fn size_gib(&self) -> i32 {
        self.size_gib
    }
    /// <p>The IOPS per volume.</p>
    pub fn iops(&self) -> i32 {
        self.iops
    }
    /// <p>The throughput per volume in MiB.</p>
    pub fn throughput_mib(&self) -> i32 {
        self.throughput_mib
    }
}
impl Ec2EbsVolume {
    /// Creates a new builder-style object to manufacture [`Ec2EbsVolume`](crate::types::Ec2EbsVolume).
    pub fn builder() -> crate::types::builders::Ec2EbsVolumeBuilder {
        crate::types::builders::Ec2EbsVolumeBuilder::default()
    }
}

/// A builder for [`Ec2EbsVolume`](crate::types::Ec2EbsVolume).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct Ec2EbsVolumeBuilder {
    pub(crate) size_gib: ::std::option::Option<i32>,
    pub(crate) iops: ::std::option::Option<i32>,
    pub(crate) throughput_mib: ::std::option::Option<i32>,
}
impl Ec2EbsVolumeBuilder {
    /// <p>The EBS volume size in GiB.</p>
    pub fn size_gib(mut self, input: i32) -> Self {
        self.size_gib = ::std::option::Option::Some(input);
        self
    }
    /// <p>The EBS volume size in GiB.</p>
    pub fn set_size_gib(mut self, input: ::std::option::Option<i32>) -> Self {
        self.size_gib = input;
        self
    }
    /// <p>The EBS volume size in GiB.</p>
    pub fn get_size_gib(&self) -> &::std::option::Option<i32> {
        &self.size_gib
    }
    /// <p>The IOPS per volume.</p>
    pub fn iops(mut self, input: i32) -> Self {
        self.iops = ::std::option::Option::Some(input);
        self
    }
    /// <p>The IOPS per volume.</p>
    pub fn set_iops(mut self, input: ::std::option::Option<i32>) -> Self {
        self.iops = input;
        self
    }
    /// <p>The IOPS per volume.</p>
    pub fn get_iops(&self) -> &::std::option::Option<i32> {
        &self.iops
    }
    /// <p>The throughput per volume in MiB.</p>
    pub fn throughput_mib(mut self, input: i32) -> Self {
        self.throughput_mib = ::std::option::Option::Some(input);
        self
    }
    /// <p>The throughput per volume in MiB.</p>
    pub fn set_throughput_mib(mut self, input: ::std::option::Option<i32>) -> Self {
        self.throughput_mib = input;
        self
    }
    /// <p>The throughput per volume in MiB.</p>
    pub fn get_throughput_mib(&self) -> &::std::option::Option<i32> {
        &self.throughput_mib
    }
    /// Consumes the builder and constructs a [`Ec2EbsVolume`](crate::types::Ec2EbsVolume).
    pub fn build(self) -> crate::types::Ec2EbsVolume {
        crate::types::Ec2EbsVolume {
            size_gib: self.size_gib.unwrap_or(250),
            iops: self.iops.unwrap_or(3000),
            throughput_mib: self.throughput_mib.unwrap_or(125),
        }
    }
}
