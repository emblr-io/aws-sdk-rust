// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a specified environment.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EnvironmentDetailsEntity {
    /// <p>The job ID.</p>
    pub job_id: ::std::string::String,
    /// <p>The environment ID.</p>
    pub environment_id: ::std::string::String,
    /// <p>The schema version in the environment.</p>
    pub schema_version: ::std::string::String,
    /// <p>The template used for the environment.</p>
    pub template: ::aws_smithy_types::Document,
}
impl EnvironmentDetailsEntity {
    /// <p>The job ID.</p>
    pub fn job_id(&self) -> &str {
        use std::ops::Deref;
        self.job_id.deref()
    }
    /// <p>The environment ID.</p>
    pub fn environment_id(&self) -> &str {
        use std::ops::Deref;
        self.environment_id.deref()
    }
    /// <p>The schema version in the environment.</p>
    pub fn schema_version(&self) -> &str {
        use std::ops::Deref;
        self.schema_version.deref()
    }
    /// <p>The template used for the environment.</p>
    pub fn template(&self) -> &::aws_smithy_types::Document {
        &self.template
    }
}
impl ::std::fmt::Debug for EnvironmentDetailsEntity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EnvironmentDetailsEntity");
        formatter.field("job_id", &self.job_id);
        formatter.field("environment_id", &self.environment_id);
        formatter.field("schema_version", &self.schema_version);
        formatter.field("template", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl EnvironmentDetailsEntity {
    /// Creates a new builder-style object to manufacture [`EnvironmentDetailsEntity`](crate::types::EnvironmentDetailsEntity).
    pub fn builder() -> crate::types::builders::EnvironmentDetailsEntityBuilder {
        crate::types::builders::EnvironmentDetailsEntityBuilder::default()
    }
}

/// A builder for [`EnvironmentDetailsEntity`](crate::types::EnvironmentDetailsEntity).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct EnvironmentDetailsEntityBuilder {
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) environment_id: ::std::option::Option<::std::string::String>,
    pub(crate) schema_version: ::std::option::Option<::std::string::String>,
    pub(crate) template: ::std::option::Option<::aws_smithy_types::Document>,
}
impl EnvironmentDetailsEntityBuilder {
    /// <p>The job ID.</p>
    /// This field is required.
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job ID.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The job ID.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>The environment ID.</p>
    /// This field is required.
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The environment ID.</p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>The environment ID.</p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_id
    }
    /// <p>The schema version in the environment.</p>
    /// This field is required.
    pub fn schema_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schema_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The schema version in the environment.</p>
    pub fn set_schema_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schema_version = input;
        self
    }
    /// <p>The schema version in the environment.</p>
    pub fn get_schema_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.schema_version
    }
    /// <p>The template used for the environment.</p>
    /// This field is required.
    pub fn template(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.template = ::std::option::Option::Some(input);
        self
    }
    /// <p>The template used for the environment.</p>
    pub fn set_template(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.template = input;
        self
    }
    /// <p>The template used for the environment.</p>
    pub fn get_template(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.template
    }
    /// Consumes the builder and constructs a [`EnvironmentDetailsEntity`](crate::types::EnvironmentDetailsEntity).
    /// This method will fail if any of the following fields are not set:
    /// - [`job_id`](crate::types::builders::EnvironmentDetailsEntityBuilder::job_id)
    /// - [`environment_id`](crate::types::builders::EnvironmentDetailsEntityBuilder::environment_id)
    /// - [`schema_version`](crate::types::builders::EnvironmentDetailsEntityBuilder::schema_version)
    /// - [`template`](crate::types::builders::EnvironmentDetailsEntityBuilder::template)
    pub fn build(self) -> ::std::result::Result<crate::types::EnvironmentDetailsEntity, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EnvironmentDetailsEntity {
            job_id: self.job_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_id",
                    "job_id was not specified but it is required when building EnvironmentDetailsEntity",
                )
            })?,
            environment_id: self.environment_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "environment_id",
                    "environment_id was not specified but it is required when building EnvironmentDetailsEntity",
                )
            })?,
            schema_version: self.schema_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "schema_version",
                    "schema_version was not specified but it is required when building EnvironmentDetailsEntity",
                )
            })?,
            template: self.template.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "template",
                    "template was not specified but it is required when building EnvironmentDetailsEntity",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for EnvironmentDetailsEntityBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EnvironmentDetailsEntityBuilder");
        formatter.field("job_id", &self.job_id);
        formatter.field("environment_id", &self.environment_id);
        formatter.field("schema_version", &self.schema_version);
        formatter.field("template", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
