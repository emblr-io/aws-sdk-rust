// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The assigned session for the worker.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssignedSession {
    /// <p>The queue ID of the assigned session.</p>
    pub queue_id: ::std::string::String,
    /// <p>The job ID for the assigned session.</p>
    pub job_id: ::std::string::String,
    /// <p>The session actions to apply to the assigned session.</p>
    pub session_actions: ::std::vec::Vec<crate::types::AssignedSessionAction>,
    /// <p>The log configuration for the worker's assigned session.</p>
    pub log_configuration: ::std::option::Option<crate::types::LogConfiguration>,
}
impl AssignedSession {
    /// <p>The queue ID of the assigned session.</p>
    pub fn queue_id(&self) -> &str {
        use std::ops::Deref;
        self.queue_id.deref()
    }
    /// <p>The job ID for the assigned session.</p>
    pub fn job_id(&self) -> &str {
        use std::ops::Deref;
        self.job_id.deref()
    }
    /// <p>The session actions to apply to the assigned session.</p>
    pub fn session_actions(&self) -> &[crate::types::AssignedSessionAction] {
        use std::ops::Deref;
        self.session_actions.deref()
    }
    /// <p>The log configuration for the worker's assigned session.</p>
    pub fn log_configuration(&self) -> ::std::option::Option<&crate::types::LogConfiguration> {
        self.log_configuration.as_ref()
    }
}
impl AssignedSession {
    /// Creates a new builder-style object to manufacture [`AssignedSession`](crate::types::AssignedSession).
    pub fn builder() -> crate::types::builders::AssignedSessionBuilder {
        crate::types::builders::AssignedSessionBuilder::default()
    }
}

/// A builder for [`AssignedSession`](crate::types::AssignedSession).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssignedSessionBuilder {
    pub(crate) queue_id: ::std::option::Option<::std::string::String>,
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) session_actions: ::std::option::Option<::std::vec::Vec<crate::types::AssignedSessionAction>>,
    pub(crate) log_configuration: ::std::option::Option<crate::types::LogConfiguration>,
}
impl AssignedSessionBuilder {
    /// <p>The queue ID of the assigned session.</p>
    /// This field is required.
    pub fn queue_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.queue_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The queue ID of the assigned session.</p>
    pub fn set_queue_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.queue_id = input;
        self
    }
    /// <p>The queue ID of the assigned session.</p>
    pub fn get_queue_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.queue_id
    }
    /// <p>The job ID for the assigned session.</p>
    /// This field is required.
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job ID for the assigned session.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The job ID for the assigned session.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// Appends an item to `session_actions`.
    ///
    /// To override the contents of this collection use [`set_session_actions`](Self::set_session_actions).
    ///
    /// <p>The session actions to apply to the assigned session.</p>
    pub fn session_actions(mut self, input: crate::types::AssignedSessionAction) -> Self {
        let mut v = self.session_actions.unwrap_or_default();
        v.push(input);
        self.session_actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The session actions to apply to the assigned session.</p>
    pub fn set_session_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AssignedSessionAction>>) -> Self {
        self.session_actions = input;
        self
    }
    /// <p>The session actions to apply to the assigned session.</p>
    pub fn get_session_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AssignedSessionAction>> {
        &self.session_actions
    }
    /// <p>The log configuration for the worker's assigned session.</p>
    /// This field is required.
    pub fn log_configuration(mut self, input: crate::types::LogConfiguration) -> Self {
        self.log_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The log configuration for the worker's assigned session.</p>
    pub fn set_log_configuration(mut self, input: ::std::option::Option<crate::types::LogConfiguration>) -> Self {
        self.log_configuration = input;
        self
    }
    /// <p>The log configuration for the worker's assigned session.</p>
    pub fn get_log_configuration(&self) -> &::std::option::Option<crate::types::LogConfiguration> {
        &self.log_configuration
    }
    /// Consumes the builder and constructs a [`AssignedSession`](crate::types::AssignedSession).
    /// This method will fail if any of the following fields are not set:
    /// - [`queue_id`](crate::types::builders::AssignedSessionBuilder::queue_id)
    /// - [`job_id`](crate::types::builders::AssignedSessionBuilder::job_id)
    /// - [`session_actions`](crate::types::builders::AssignedSessionBuilder::session_actions)
    pub fn build(self) -> ::std::result::Result<crate::types::AssignedSession, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AssignedSession {
            queue_id: self.queue_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "queue_id",
                    "queue_id was not specified but it is required when building AssignedSession",
                )
            })?,
            job_id: self.job_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_id",
                    "job_id was not specified but it is required when building AssignedSession",
                )
            })?,
            session_actions: self.session_actions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "session_actions",
                    "session_actions was not specified but it is required when building AssignedSession",
                )
            })?,
            log_configuration: self.log_configuration,
        })
    }
}
