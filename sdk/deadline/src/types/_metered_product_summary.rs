// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a metered product.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MeteredProductSummary {
    /// <p>The product ID.</p>
    pub product_id: ::std::string::String,
    /// <p>The family to which the metered product belongs.</p>
    pub family: ::std::string::String,
    /// <p>The vendor.</p>
    pub vendor: ::std::string::String,
    /// <p>The port on which the metered product should run.</p>
    pub port: i32,
}
impl MeteredProductSummary {
    /// <p>The product ID.</p>
    pub fn product_id(&self) -> &str {
        use std::ops::Deref;
        self.product_id.deref()
    }
    /// <p>The family to which the metered product belongs.</p>
    pub fn family(&self) -> &str {
        use std::ops::Deref;
        self.family.deref()
    }
    /// <p>The vendor.</p>
    pub fn vendor(&self) -> &str {
        use std::ops::Deref;
        self.vendor.deref()
    }
    /// <p>The port on which the metered product should run.</p>
    pub fn port(&self) -> i32 {
        self.port
    }
}
impl MeteredProductSummary {
    /// Creates a new builder-style object to manufacture [`MeteredProductSummary`](crate::types::MeteredProductSummary).
    pub fn builder() -> crate::types::builders::MeteredProductSummaryBuilder {
        crate::types::builders::MeteredProductSummaryBuilder::default()
    }
}

/// A builder for [`MeteredProductSummary`](crate::types::MeteredProductSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MeteredProductSummaryBuilder {
    pub(crate) product_id: ::std::option::Option<::std::string::String>,
    pub(crate) family: ::std::option::Option<::std::string::String>,
    pub(crate) vendor: ::std::option::Option<::std::string::String>,
    pub(crate) port: ::std::option::Option<i32>,
}
impl MeteredProductSummaryBuilder {
    /// <p>The product ID.</p>
    /// This field is required.
    pub fn product_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.product_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The product ID.</p>
    pub fn set_product_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.product_id = input;
        self
    }
    /// <p>The product ID.</p>
    pub fn get_product_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.product_id
    }
    /// <p>The family to which the metered product belongs.</p>
    /// This field is required.
    pub fn family(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.family = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The family to which the metered product belongs.</p>
    pub fn set_family(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.family = input;
        self
    }
    /// <p>The family to which the metered product belongs.</p>
    pub fn get_family(&self) -> &::std::option::Option<::std::string::String> {
        &self.family
    }
    /// <p>The vendor.</p>
    /// This field is required.
    pub fn vendor(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vendor = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The vendor.</p>
    pub fn set_vendor(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vendor = input;
        self
    }
    /// <p>The vendor.</p>
    pub fn get_vendor(&self) -> &::std::option::Option<::std::string::String> {
        &self.vendor
    }
    /// <p>The port on which the metered product should run.</p>
    /// This field is required.
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port on which the metered product should run.</p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The port on which the metered product should run.</p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// Consumes the builder and constructs a [`MeteredProductSummary`](crate::types::MeteredProductSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`product_id`](crate::types::builders::MeteredProductSummaryBuilder::product_id)
    /// - [`family`](crate::types::builders::MeteredProductSummaryBuilder::family)
    /// - [`vendor`](crate::types::builders::MeteredProductSummaryBuilder::vendor)
    /// - [`port`](crate::types::builders::MeteredProductSummaryBuilder::port)
    pub fn build(self) -> ::std::result::Result<crate::types::MeteredProductSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MeteredProductSummary {
            product_id: self.product_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "product_id",
                    "product_id was not specified but it is required when building MeteredProductSummary",
                )
            })?,
            family: self.family.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "family",
                    "family was not specified but it is required when building MeteredProductSummary",
                )
            })?,
            vendor: self.vendor.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "vendor",
                    "vendor was not specified but it is required when building MeteredProductSummary",
                )
            })?,
            port: self.port.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "port",
                    "port was not specified but it is required when building MeteredProductSummary",
                )
            })?,
        })
    }
}
