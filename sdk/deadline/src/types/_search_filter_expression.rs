// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The type of search filter to apply.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum SearchFilterExpression {
    /// <p>Filters based on date and time.</p>
    DateTimeFilter(crate::types::DateTimeFilterExpression),
    /// <p>Filters by group.</p>
    GroupFilter(crate::types::SearchGroupedFilterExpressions),
    /// <p>Filters by parameter.</p>
    ParameterFilter(crate::types::ParameterFilterExpression),
    /// <p>Filters by a specified search term.</p>
    SearchTermFilter(crate::types::SearchTermFilterExpression),
    /// <p>Filters by a string.</p>
    StringFilter(crate::types::StringFilterExpression),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl SearchFilterExpression {
    /// Tries to convert the enum instance into [`DateTimeFilter`](crate::types::SearchFilterExpression::DateTimeFilter), extracting the inner [`DateTimeFilterExpression`](crate::types::DateTimeFilterExpression).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_date_time_filter(&self) -> ::std::result::Result<&crate::types::DateTimeFilterExpression, &Self> {
        if let SearchFilterExpression::DateTimeFilter(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`DateTimeFilter`](crate::types::SearchFilterExpression::DateTimeFilter).
    pub fn is_date_time_filter(&self) -> bool {
        self.as_date_time_filter().is_ok()
    }
    /// Tries to convert the enum instance into [`GroupFilter`](crate::types::SearchFilterExpression::GroupFilter), extracting the inner [`SearchGroupedFilterExpressions`](crate::types::SearchGroupedFilterExpressions).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_group_filter(&self) -> ::std::result::Result<&crate::types::SearchGroupedFilterExpressions, &Self> {
        if let SearchFilterExpression::GroupFilter(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`GroupFilter`](crate::types::SearchFilterExpression::GroupFilter).
    pub fn is_group_filter(&self) -> bool {
        self.as_group_filter().is_ok()
    }
    /// Tries to convert the enum instance into [`ParameterFilter`](crate::types::SearchFilterExpression::ParameterFilter), extracting the inner [`ParameterFilterExpression`](crate::types::ParameterFilterExpression).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_parameter_filter(&self) -> ::std::result::Result<&crate::types::ParameterFilterExpression, &Self> {
        if let SearchFilterExpression::ParameterFilter(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ParameterFilter`](crate::types::SearchFilterExpression::ParameterFilter).
    pub fn is_parameter_filter(&self) -> bool {
        self.as_parameter_filter().is_ok()
    }
    /// Tries to convert the enum instance into [`SearchTermFilter`](crate::types::SearchFilterExpression::SearchTermFilter), extracting the inner [`SearchTermFilterExpression`](crate::types::SearchTermFilterExpression).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_search_term_filter(&self) -> ::std::result::Result<&crate::types::SearchTermFilterExpression, &Self> {
        if let SearchFilterExpression::SearchTermFilter(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`SearchTermFilter`](crate::types::SearchFilterExpression::SearchTermFilter).
    pub fn is_search_term_filter(&self) -> bool {
        self.as_search_term_filter().is_ok()
    }
    /// Tries to convert the enum instance into [`StringFilter`](crate::types::SearchFilterExpression::StringFilter), extracting the inner [`StringFilterExpression`](crate::types::StringFilterExpression).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_string_filter(&self) -> ::std::result::Result<&crate::types::StringFilterExpression, &Self> {
        if let SearchFilterExpression::StringFilter(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`StringFilter`](crate::types::SearchFilterExpression::StringFilter).
    pub fn is_string_filter(&self) -> bool {
        self.as_string_filter().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
