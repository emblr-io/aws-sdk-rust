// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the number of resources used.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AcquiredLimit {
    /// <p>The unique identifier of the limit.</p>
    pub limit_id: ::std::string::String,
    /// <p>The number of limit resources used.</p>
    pub count: i32,
}
impl AcquiredLimit {
    /// <p>The unique identifier of the limit.</p>
    pub fn limit_id(&self) -> &str {
        use std::ops::Deref;
        self.limit_id.deref()
    }
    /// <p>The number of limit resources used.</p>
    pub fn count(&self) -> i32 {
        self.count
    }
}
impl AcquiredLimit {
    /// Creates a new builder-style object to manufacture [`AcquiredLimit`](crate::types::AcquiredLimit).
    pub fn builder() -> crate::types::builders::AcquiredLimitBuilder {
        crate::types::builders::AcquiredLimitBuilder::default()
    }
}

/// A builder for [`AcquiredLimit`](crate::types::AcquiredLimit).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AcquiredLimitBuilder {
    pub(crate) limit_id: ::std::option::Option<::std::string::String>,
    pub(crate) count: ::std::option::Option<i32>,
}
impl AcquiredLimitBuilder {
    /// <p>The unique identifier of the limit.</p>
    /// This field is required.
    pub fn limit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.limit_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the limit.</p>
    pub fn set_limit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.limit_id = input;
        self
    }
    /// <p>The unique identifier of the limit.</p>
    pub fn get_limit_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.limit_id
    }
    /// <p>The number of limit resources used.</p>
    /// This field is required.
    pub fn count(mut self, input: i32) -> Self {
        self.count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of limit resources used.</p>
    pub fn set_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.count = input;
        self
    }
    /// <p>The number of limit resources used.</p>
    pub fn get_count(&self) -> &::std::option::Option<i32> {
        &self.count
    }
    /// Consumes the builder and constructs a [`AcquiredLimit`](crate::types::AcquiredLimit).
    /// This method will fail if any of the following fields are not set:
    /// - [`limit_id`](crate::types::builders::AcquiredLimitBuilder::limit_id)
    /// - [`count`](crate::types::builders::AcquiredLimitBuilder::count)
    pub fn build(self) -> ::std::result::Result<crate::types::AcquiredLimit, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AcquiredLimit {
            limit_id: self.limit_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "limit_id",
                    "limit_id was not specified but it is required when building AcquiredLimit",
                )
            })?,
            count: self.count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "count",
                    "count was not specified but it is required when building AcquiredLimit",
                )
            })?,
        })
    }
}
