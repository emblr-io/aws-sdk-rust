// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The number of dependencies for the consumer.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DependencyCounts {
    /// <p>The number of resolved dependencies.</p>
    pub dependencies_resolved: i32,
    /// <p>The number of unresolved dependencies.</p>
    pub dependencies_unresolved: i32,
    /// <p>The number of consumers resolved.</p>
    pub consumers_resolved: i32,
    /// <p>The number of unresolved consumers.</p>
    pub consumers_unresolved: i32,
}
impl DependencyCounts {
    /// <p>The number of resolved dependencies.</p>
    pub fn dependencies_resolved(&self) -> i32 {
        self.dependencies_resolved
    }
    /// <p>The number of unresolved dependencies.</p>
    pub fn dependencies_unresolved(&self) -> i32 {
        self.dependencies_unresolved
    }
    /// <p>The number of consumers resolved.</p>
    pub fn consumers_resolved(&self) -> i32 {
        self.consumers_resolved
    }
    /// <p>The number of unresolved consumers.</p>
    pub fn consumers_unresolved(&self) -> i32 {
        self.consumers_unresolved
    }
}
impl DependencyCounts {
    /// Creates a new builder-style object to manufacture [`DependencyCounts`](crate::types::DependencyCounts).
    pub fn builder() -> crate::types::builders::DependencyCountsBuilder {
        crate::types::builders::DependencyCountsBuilder::default()
    }
}

/// A builder for [`DependencyCounts`](crate::types::DependencyCounts).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DependencyCountsBuilder {
    pub(crate) dependencies_resolved: ::std::option::Option<i32>,
    pub(crate) dependencies_unresolved: ::std::option::Option<i32>,
    pub(crate) consumers_resolved: ::std::option::Option<i32>,
    pub(crate) consumers_unresolved: ::std::option::Option<i32>,
}
impl DependencyCountsBuilder {
    /// <p>The number of resolved dependencies.</p>
    /// This field is required.
    pub fn dependencies_resolved(mut self, input: i32) -> Self {
        self.dependencies_resolved = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of resolved dependencies.</p>
    pub fn set_dependencies_resolved(mut self, input: ::std::option::Option<i32>) -> Self {
        self.dependencies_resolved = input;
        self
    }
    /// <p>The number of resolved dependencies.</p>
    pub fn get_dependencies_resolved(&self) -> &::std::option::Option<i32> {
        &self.dependencies_resolved
    }
    /// <p>The number of unresolved dependencies.</p>
    /// This field is required.
    pub fn dependencies_unresolved(mut self, input: i32) -> Self {
        self.dependencies_unresolved = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of unresolved dependencies.</p>
    pub fn set_dependencies_unresolved(mut self, input: ::std::option::Option<i32>) -> Self {
        self.dependencies_unresolved = input;
        self
    }
    /// <p>The number of unresolved dependencies.</p>
    pub fn get_dependencies_unresolved(&self) -> &::std::option::Option<i32> {
        &self.dependencies_unresolved
    }
    /// <p>The number of consumers resolved.</p>
    /// This field is required.
    pub fn consumers_resolved(mut self, input: i32) -> Self {
        self.consumers_resolved = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of consumers resolved.</p>
    pub fn set_consumers_resolved(mut self, input: ::std::option::Option<i32>) -> Self {
        self.consumers_resolved = input;
        self
    }
    /// <p>The number of consumers resolved.</p>
    pub fn get_consumers_resolved(&self) -> &::std::option::Option<i32> {
        &self.consumers_resolved
    }
    /// <p>The number of unresolved consumers.</p>
    /// This field is required.
    pub fn consumers_unresolved(mut self, input: i32) -> Self {
        self.consumers_unresolved = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of unresolved consumers.</p>
    pub fn set_consumers_unresolved(mut self, input: ::std::option::Option<i32>) -> Self {
        self.consumers_unresolved = input;
        self
    }
    /// <p>The number of unresolved consumers.</p>
    pub fn get_consumers_unresolved(&self) -> &::std::option::Option<i32> {
        &self.consumers_unresolved
    }
    /// Consumes the builder and constructs a [`DependencyCounts`](crate::types::DependencyCounts).
    /// This method will fail if any of the following fields are not set:
    /// - [`dependencies_resolved`](crate::types::builders::DependencyCountsBuilder::dependencies_resolved)
    /// - [`dependencies_unresolved`](crate::types::builders::DependencyCountsBuilder::dependencies_unresolved)
    /// - [`consumers_resolved`](crate::types::builders::DependencyCountsBuilder::consumers_resolved)
    /// - [`consumers_unresolved`](crate::types::builders::DependencyCountsBuilder::consumers_unresolved)
    pub fn build(self) -> ::std::result::Result<crate::types::DependencyCounts, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DependencyCounts {
            dependencies_resolved: self.dependencies_resolved.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dependencies_resolved",
                    "dependencies_resolved was not specified but it is required when building DependencyCounts",
                )
            })?,
            dependencies_unresolved: self.dependencies_unresolved.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dependencies_unresolved",
                    "dependencies_unresolved was not specified but it is required when building DependencyCounts",
                )
            })?,
            consumers_resolved: self.consumers_resolved.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "consumers_resolved",
                    "consumers_resolved was not specified but it is required when building DependencyCounts",
                )
            })?,
            consumers_unresolved: self.consumers_unresolved.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "consumers_unresolved",
                    "consumers_unresolved was not specified but it is required when building DependencyCounts",
                )
            })?,
        })
    }
}
