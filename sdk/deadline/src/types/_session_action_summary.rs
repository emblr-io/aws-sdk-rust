// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a session action.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SessionActionSummary {
    /// <p>The session action ID.</p>
    pub session_action_id: ::std::string::String,
    /// <p>The status of the session action.</p>
    pub status: crate::types::SessionActionStatus,
    /// <p>The date and time the resource started running.</p>
    pub started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time the resource ended running.</p>
    pub ended_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Linux timestamp of the last date and time that the session action was updated.</p>
    pub worker_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The completion percentage for the session action.</p>
    pub progress_percent: ::std::option::Option<f32>,
    /// <p>The session action definition.</p>
    pub definition: ::std::option::Option<crate::types::SessionActionDefinitionSummary>,
    /// <p>The list of manifest properties that describe file attachments for the task run.</p>
    pub manifests: ::std::option::Option<::std::vec::Vec<crate::types::TaskRunManifestPropertiesResponse>>,
}
impl SessionActionSummary {
    /// <p>The session action ID.</p>
    pub fn session_action_id(&self) -> &str {
        use std::ops::Deref;
        self.session_action_id.deref()
    }
    /// <p>The status of the session action.</p>
    pub fn status(&self) -> &crate::types::SessionActionStatus {
        &self.status
    }
    /// <p>The date and time the resource started running.</p>
    pub fn started_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.started_at.as_ref()
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn ended_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.ended_at.as_ref()
    }
    /// <p>The Linux timestamp of the last date and time that the session action was updated.</p>
    pub fn worker_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.worker_updated_at.as_ref()
    }
    /// <p>The completion percentage for the session action.</p>
    pub fn progress_percent(&self) -> ::std::option::Option<f32> {
        self.progress_percent
    }
    /// <p>The session action definition.</p>
    pub fn definition(&self) -> ::std::option::Option<&crate::types::SessionActionDefinitionSummary> {
        self.definition.as_ref()
    }
    /// <p>The list of manifest properties that describe file attachments for the task run.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.manifests.is_none()`.
    pub fn manifests(&self) -> &[crate::types::TaskRunManifestPropertiesResponse] {
        self.manifests.as_deref().unwrap_or_default()
    }
}
impl SessionActionSummary {
    /// Creates a new builder-style object to manufacture [`SessionActionSummary`](crate::types::SessionActionSummary).
    pub fn builder() -> crate::types::builders::SessionActionSummaryBuilder {
        crate::types::builders::SessionActionSummaryBuilder::default()
    }
}

/// A builder for [`SessionActionSummary`](crate::types::SessionActionSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SessionActionSummaryBuilder {
    pub(crate) session_action_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::SessionActionStatus>,
    pub(crate) started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) ended_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) worker_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) progress_percent: ::std::option::Option<f32>,
    pub(crate) definition: ::std::option::Option<crate::types::SessionActionDefinitionSummary>,
    pub(crate) manifests: ::std::option::Option<::std::vec::Vec<crate::types::TaskRunManifestPropertiesResponse>>,
}
impl SessionActionSummaryBuilder {
    /// <p>The session action ID.</p>
    /// This field is required.
    pub fn session_action_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_action_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The session action ID.</p>
    pub fn set_session_action_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_action_id = input;
        self
    }
    /// <p>The session action ID.</p>
    pub fn get_session_action_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_action_id
    }
    /// <p>The status of the session action.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::SessionActionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the session action.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SessionActionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the session action.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SessionActionStatus> {
        &self.status
    }
    /// <p>The date and time the resource started running.</p>
    pub fn started_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource started running.</p>
    pub fn set_started_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The date and time the resource started running.</p>
    pub fn get_started_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_at
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn ended_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.ended_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn set_ended_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.ended_at = input;
        self
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn get_ended_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.ended_at
    }
    /// <p>The Linux timestamp of the last date and time that the session action was updated.</p>
    pub fn worker_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.worker_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Linux timestamp of the last date and time that the session action was updated.</p>
    pub fn set_worker_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.worker_updated_at = input;
        self
    }
    /// <p>The Linux timestamp of the last date and time that the session action was updated.</p>
    pub fn get_worker_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.worker_updated_at
    }
    /// <p>The completion percentage for the session action.</p>
    pub fn progress_percent(mut self, input: f32) -> Self {
        self.progress_percent = ::std::option::Option::Some(input);
        self
    }
    /// <p>The completion percentage for the session action.</p>
    pub fn set_progress_percent(mut self, input: ::std::option::Option<f32>) -> Self {
        self.progress_percent = input;
        self
    }
    /// <p>The completion percentage for the session action.</p>
    pub fn get_progress_percent(&self) -> &::std::option::Option<f32> {
        &self.progress_percent
    }
    /// <p>The session action definition.</p>
    /// This field is required.
    pub fn definition(mut self, input: crate::types::SessionActionDefinitionSummary) -> Self {
        self.definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The session action definition.</p>
    pub fn set_definition(mut self, input: ::std::option::Option<crate::types::SessionActionDefinitionSummary>) -> Self {
        self.definition = input;
        self
    }
    /// <p>The session action definition.</p>
    pub fn get_definition(&self) -> &::std::option::Option<crate::types::SessionActionDefinitionSummary> {
        &self.definition
    }
    /// Appends an item to `manifests`.
    ///
    /// To override the contents of this collection use [`set_manifests`](Self::set_manifests).
    ///
    /// <p>The list of manifest properties that describe file attachments for the task run.</p>
    pub fn manifests(mut self, input: crate::types::TaskRunManifestPropertiesResponse) -> Self {
        let mut v = self.manifests.unwrap_or_default();
        v.push(input);
        self.manifests = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of manifest properties that describe file attachments for the task run.</p>
    pub fn set_manifests(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TaskRunManifestPropertiesResponse>>) -> Self {
        self.manifests = input;
        self
    }
    /// <p>The list of manifest properties that describe file attachments for the task run.</p>
    pub fn get_manifests(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TaskRunManifestPropertiesResponse>> {
        &self.manifests
    }
    /// Consumes the builder and constructs a [`SessionActionSummary`](crate::types::SessionActionSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`session_action_id`](crate::types::builders::SessionActionSummaryBuilder::session_action_id)
    /// - [`status`](crate::types::builders::SessionActionSummaryBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::SessionActionSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SessionActionSummary {
            session_action_id: self.session_action_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "session_action_id",
                    "session_action_id was not specified but it is required when building SessionActionSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building SessionActionSummary",
                )
            })?,
            started_at: self.started_at,
            ended_at: self.ended_at,
            worker_updated_at: self.worker_updated_at,
            progress_percent: self.progress_percent,
            definition: self.definition,
            manifests: self.manifests,
        })
    }
}
