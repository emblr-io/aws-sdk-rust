// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The time stamp in date-time format.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DateTimeFilterExpression {
    /// <p>The name of the date-time field to filter on.</p>
    pub name: ::std::string::String,
    /// <p>The type of comparison to use to filter the results.</p>
    pub operator: crate::types::ComparisonOperator,
    /// <p>The date and time.</p>
    pub date_time: ::aws_smithy_types::DateTime,
}
impl DateTimeFilterExpression {
    /// <p>The name of the date-time field to filter on.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The type of comparison to use to filter the results.</p>
    pub fn operator(&self) -> &crate::types::ComparisonOperator {
        &self.operator
    }
    /// <p>The date and time.</p>
    pub fn date_time(&self) -> &::aws_smithy_types::DateTime {
        &self.date_time
    }
}
impl DateTimeFilterExpression {
    /// Creates a new builder-style object to manufacture [`DateTimeFilterExpression`](crate::types::DateTimeFilterExpression).
    pub fn builder() -> crate::types::builders::DateTimeFilterExpressionBuilder {
        crate::types::builders::DateTimeFilterExpressionBuilder::default()
    }
}

/// A builder for [`DateTimeFilterExpression`](crate::types::DateTimeFilterExpression).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DateTimeFilterExpressionBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) operator: ::std::option::Option<crate::types::ComparisonOperator>,
    pub(crate) date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DateTimeFilterExpressionBuilder {
    /// <p>The name of the date-time field to filter on.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the date-time field to filter on.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the date-time field to filter on.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of comparison to use to filter the results.</p>
    /// This field is required.
    pub fn operator(mut self, input: crate::types::ComparisonOperator) -> Self {
        self.operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of comparison to use to filter the results.</p>
    pub fn set_operator(mut self, input: ::std::option::Option<crate::types::ComparisonOperator>) -> Self {
        self.operator = input;
        self
    }
    /// <p>The type of comparison to use to filter the results.</p>
    pub fn get_operator(&self) -> &::std::option::Option<crate::types::ComparisonOperator> {
        &self.operator
    }
    /// <p>The date and time.</p>
    /// This field is required.
    pub fn date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time.</p>
    pub fn set_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.date_time = input;
        self
    }
    /// <p>The date and time.</p>
    pub fn get_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.date_time
    }
    /// Consumes the builder and constructs a [`DateTimeFilterExpression`](crate::types::DateTimeFilterExpression).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::DateTimeFilterExpressionBuilder::name)
    /// - [`operator`](crate::types::builders::DateTimeFilterExpressionBuilder::operator)
    /// - [`date_time`](crate::types::builders::DateTimeFilterExpressionBuilder::date_time)
    pub fn build(self) -> ::std::result::Result<crate::types::DateTimeFilterExpression, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DateTimeFilterExpression {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building DateTimeFilterExpression",
                )
            })?,
            operator: self.operator.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operator",
                    "operator was not specified but it is required when building DateTimeFilterExpression",
                )
            })?,
            date_time: self.date_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "date_time",
                    "date_time was not specified but it is required when building DateTimeFilterExpression",
                )
            })?,
        })
    }
}
