// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a script that runs as a worker is starting up that you can use to provide additional configuration for workers in your fleet.</p>
/// <p>To remove a script from a fleet, use the <a href="https://docs.aws.amazon.com/deadline-cloud/latest/APIReference/API_UpdateFleet.html">UpdateFleet</a> operation with the <code>hostConfiguration</code> <code>scriptBody</code> parameter set to an empty string ("").</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct HostConfiguration {
    /// <p>The text of the script that runs as a worker is starting up that you can use to provide additional configuration for workers in your fleet. The script runs after a worker enters the <code>STARTING</code> state and before the worker processes tasks.</p>
    /// <p>For more information about using the script, see <a href="https://docs.aws.amazon.com/deadline-cloud/latest/developerguide/smf-admin.html">Run scripts as an administrator to configure workers</a> in the <i>Deadline Cloud Developer Guide</i>.</p><important>
    /// <p>The script runs as an administrative user (<code>sudo root</code> on Linux, as an Administrator on Windows).</p>
    /// </important>
    pub script_body: ::std::string::String,
    /// <p>The maximum time that the host configuration can run. If the timeout expires, the worker enters the <code>NOT RESPONDING</code> state and shuts down. You are charged for the time that the worker is running the host configuration script.</p><note>
    /// <p>You should configure your fleet for a maximum of one worker while testing your host configuration script to avoid starting additional workers.</p>
    /// </note>
    /// <p>The default is 300 seconds (5 minutes).</p>
    pub script_timeout_seconds: i32,
}
impl HostConfiguration {
    /// <p>The text of the script that runs as a worker is starting up that you can use to provide additional configuration for workers in your fleet. The script runs after a worker enters the <code>STARTING</code> state and before the worker processes tasks.</p>
    /// <p>For more information about using the script, see <a href="https://docs.aws.amazon.com/deadline-cloud/latest/developerguide/smf-admin.html">Run scripts as an administrator to configure workers</a> in the <i>Deadline Cloud Developer Guide</i>.</p><important>
    /// <p>The script runs as an administrative user (<code>sudo root</code> on Linux, as an Administrator on Windows).</p>
    /// </important>
    pub fn script_body(&self) -> &str {
        use std::ops::Deref;
        self.script_body.deref()
    }
    /// <p>The maximum time that the host configuration can run. If the timeout expires, the worker enters the <code>NOT RESPONDING</code> state and shuts down. You are charged for the time that the worker is running the host configuration script.</p><note>
    /// <p>You should configure your fleet for a maximum of one worker while testing your host configuration script to avoid starting additional workers.</p>
    /// </note>
    /// <p>The default is 300 seconds (5 minutes).</p>
    pub fn script_timeout_seconds(&self) -> i32 {
        self.script_timeout_seconds
    }
}
impl ::std::fmt::Debug for HostConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("HostConfiguration");
        formatter.field("script_body", &"*** Sensitive Data Redacted ***");
        formatter.field("script_timeout_seconds", &self.script_timeout_seconds);
        formatter.finish()
    }
}
impl HostConfiguration {
    /// Creates a new builder-style object to manufacture [`HostConfiguration`](crate::types::HostConfiguration).
    pub fn builder() -> crate::types::builders::HostConfigurationBuilder {
        crate::types::builders::HostConfigurationBuilder::default()
    }
}

/// A builder for [`HostConfiguration`](crate::types::HostConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct HostConfigurationBuilder {
    pub(crate) script_body: ::std::option::Option<::std::string::String>,
    pub(crate) script_timeout_seconds: ::std::option::Option<i32>,
}
impl HostConfigurationBuilder {
    /// <p>The text of the script that runs as a worker is starting up that you can use to provide additional configuration for workers in your fleet. The script runs after a worker enters the <code>STARTING</code> state and before the worker processes tasks.</p>
    /// <p>For more information about using the script, see <a href="https://docs.aws.amazon.com/deadline-cloud/latest/developerguide/smf-admin.html">Run scripts as an administrator to configure workers</a> in the <i>Deadline Cloud Developer Guide</i>.</p><important>
    /// <p>The script runs as an administrative user (<code>sudo root</code> on Linux, as an Administrator on Windows).</p>
    /// </important>
    /// This field is required.
    pub fn script_body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.script_body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text of the script that runs as a worker is starting up that you can use to provide additional configuration for workers in your fleet. The script runs after a worker enters the <code>STARTING</code> state and before the worker processes tasks.</p>
    /// <p>For more information about using the script, see <a href="https://docs.aws.amazon.com/deadline-cloud/latest/developerguide/smf-admin.html">Run scripts as an administrator to configure workers</a> in the <i>Deadline Cloud Developer Guide</i>.</p><important>
    /// <p>The script runs as an administrative user (<code>sudo root</code> on Linux, as an Administrator on Windows).</p>
    /// </important>
    pub fn set_script_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.script_body = input;
        self
    }
    /// <p>The text of the script that runs as a worker is starting up that you can use to provide additional configuration for workers in your fleet. The script runs after a worker enters the <code>STARTING</code> state and before the worker processes tasks.</p>
    /// <p>For more information about using the script, see <a href="https://docs.aws.amazon.com/deadline-cloud/latest/developerguide/smf-admin.html">Run scripts as an administrator to configure workers</a> in the <i>Deadline Cloud Developer Guide</i>.</p><important>
    /// <p>The script runs as an administrative user (<code>sudo root</code> on Linux, as an Administrator on Windows).</p>
    /// </important>
    pub fn get_script_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.script_body
    }
    /// <p>The maximum time that the host configuration can run. If the timeout expires, the worker enters the <code>NOT RESPONDING</code> state and shuts down. You are charged for the time that the worker is running the host configuration script.</p><note>
    /// <p>You should configure your fleet for a maximum of one worker while testing your host configuration script to avoid starting additional workers.</p>
    /// </note>
    /// <p>The default is 300 seconds (5 minutes).</p>
    pub fn script_timeout_seconds(mut self, input: i32) -> Self {
        self.script_timeout_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum time that the host configuration can run. If the timeout expires, the worker enters the <code>NOT RESPONDING</code> state and shuts down. You are charged for the time that the worker is running the host configuration script.</p><note>
    /// <p>You should configure your fleet for a maximum of one worker while testing your host configuration script to avoid starting additional workers.</p>
    /// </note>
    /// <p>The default is 300 seconds (5 minutes).</p>
    pub fn set_script_timeout_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.script_timeout_seconds = input;
        self
    }
    /// <p>The maximum time that the host configuration can run. If the timeout expires, the worker enters the <code>NOT RESPONDING</code> state and shuts down. You are charged for the time that the worker is running the host configuration script.</p><note>
    /// <p>You should configure your fleet for a maximum of one worker while testing your host configuration script to avoid starting additional workers.</p>
    /// </note>
    /// <p>The default is 300 seconds (5 minutes).</p>
    pub fn get_script_timeout_seconds(&self) -> &::std::option::Option<i32> {
        &self.script_timeout_seconds
    }
    /// Consumes the builder and constructs a [`HostConfiguration`](crate::types::HostConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`script_body`](crate::types::builders::HostConfigurationBuilder::script_body)
    pub fn build(self) -> ::std::result::Result<crate::types::HostConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::HostConfiguration {
            script_body: self.script_body.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "script_body",
                    "script_body was not specified but it is required when building HostConfiguration",
                )
            })?,
            script_timeout_seconds: self.script_timeout_seconds.unwrap_or(300),
        })
    }
}
impl ::std::fmt::Debug for HostConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("HostConfigurationBuilder");
        formatter.field("script_body", &"*** Sensitive Data Redacted ***");
        formatter.field("script_timeout_seconds", &self.script_timeout_seconds);
        formatter.finish()
    }
}
