// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Identifies the user for a job.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JobRunAsUser {
    /// <p>The user and group that the jobs in the queue run as.</p>
    pub posix: ::std::option::Option<crate::types::PosixUser>,
    /// <p>Identifies a Microsoft Windows user.</p>
    pub windows: ::std::option::Option<crate::types::WindowsUser>,
    /// <p>Specifies whether the job should run using the queue's system user or if the job should run using the worker agent system user.</p>
    pub run_as: crate::types::RunAs,
}
impl JobRunAsUser {
    /// <p>The user and group that the jobs in the queue run as.</p>
    pub fn posix(&self) -> ::std::option::Option<&crate::types::PosixUser> {
        self.posix.as_ref()
    }
    /// <p>Identifies a Microsoft Windows user.</p>
    pub fn windows(&self) -> ::std::option::Option<&crate::types::WindowsUser> {
        self.windows.as_ref()
    }
    /// <p>Specifies whether the job should run using the queue's system user or if the job should run using the worker agent system user.</p>
    pub fn run_as(&self) -> &crate::types::RunAs {
        &self.run_as
    }
}
impl JobRunAsUser {
    /// Creates a new builder-style object to manufacture [`JobRunAsUser`](crate::types::JobRunAsUser).
    pub fn builder() -> crate::types::builders::JobRunAsUserBuilder {
        crate::types::builders::JobRunAsUserBuilder::default()
    }
}

/// A builder for [`JobRunAsUser`](crate::types::JobRunAsUser).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct JobRunAsUserBuilder {
    pub(crate) posix: ::std::option::Option<crate::types::PosixUser>,
    pub(crate) windows: ::std::option::Option<crate::types::WindowsUser>,
    pub(crate) run_as: ::std::option::Option<crate::types::RunAs>,
}
impl JobRunAsUserBuilder {
    /// <p>The user and group that the jobs in the queue run as.</p>
    pub fn posix(mut self, input: crate::types::PosixUser) -> Self {
        self.posix = ::std::option::Option::Some(input);
        self
    }
    /// <p>The user and group that the jobs in the queue run as.</p>
    pub fn set_posix(mut self, input: ::std::option::Option<crate::types::PosixUser>) -> Self {
        self.posix = input;
        self
    }
    /// <p>The user and group that the jobs in the queue run as.</p>
    pub fn get_posix(&self) -> &::std::option::Option<crate::types::PosixUser> {
        &self.posix
    }
    /// <p>Identifies a Microsoft Windows user.</p>
    pub fn windows(mut self, input: crate::types::WindowsUser) -> Self {
        self.windows = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies a Microsoft Windows user.</p>
    pub fn set_windows(mut self, input: ::std::option::Option<crate::types::WindowsUser>) -> Self {
        self.windows = input;
        self
    }
    /// <p>Identifies a Microsoft Windows user.</p>
    pub fn get_windows(&self) -> &::std::option::Option<crate::types::WindowsUser> {
        &self.windows
    }
    /// <p>Specifies whether the job should run using the queue's system user or if the job should run using the worker agent system user.</p>
    /// This field is required.
    pub fn run_as(mut self, input: crate::types::RunAs) -> Self {
        self.run_as = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the job should run using the queue's system user or if the job should run using the worker agent system user.</p>
    pub fn set_run_as(mut self, input: ::std::option::Option<crate::types::RunAs>) -> Self {
        self.run_as = input;
        self
    }
    /// <p>Specifies whether the job should run using the queue's system user or if the job should run using the worker agent system user.</p>
    pub fn get_run_as(&self) -> &::std::option::Option<crate::types::RunAs> {
        &self.run_as
    }
    /// Consumes the builder and constructs a [`JobRunAsUser`](crate::types::JobRunAsUser).
    /// This method will fail if any of the following fields are not set:
    /// - [`run_as`](crate::types::builders::JobRunAsUserBuilder::run_as)
    pub fn build(self) -> ::std::result::Result<crate::types::JobRunAsUser, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::JobRunAsUser {
            posix: self.posix,
            windows: self.windows,
            run_as: self.run_as.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "run_as",
                    "run_as was not specified but it is required when building JobRunAsUser",
                )
            })?,
        })
    }
}
