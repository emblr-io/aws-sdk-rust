// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The host property details.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HostPropertiesResponse {
    /// <p>The IP address of the host.</p>
    pub ip_addresses: ::std::option::Option<crate::types::IpAddresses>,
    /// <p>The host name.</p>
    pub host_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the host EC2 instance.</p>
    pub ec2_instance_arn: ::std::option::Option<::std::string::String>,
    /// <p>The instance type of the host EC2 instance.</p>
    pub ec2_instance_type: ::std::option::Option<::std::string::String>,
}
impl HostPropertiesResponse {
    /// <p>The IP address of the host.</p>
    pub fn ip_addresses(&self) -> ::std::option::Option<&crate::types::IpAddresses> {
        self.ip_addresses.as_ref()
    }
    /// <p>The host name.</p>
    pub fn host_name(&self) -> ::std::option::Option<&str> {
        self.host_name.as_deref()
    }
    /// <p>The ARN of the host EC2 instance.</p>
    pub fn ec2_instance_arn(&self) -> ::std::option::Option<&str> {
        self.ec2_instance_arn.as_deref()
    }
    /// <p>The instance type of the host EC2 instance.</p>
    pub fn ec2_instance_type(&self) -> ::std::option::Option<&str> {
        self.ec2_instance_type.as_deref()
    }
}
impl HostPropertiesResponse {
    /// Creates a new builder-style object to manufacture [`HostPropertiesResponse`](crate::types::HostPropertiesResponse).
    pub fn builder() -> crate::types::builders::HostPropertiesResponseBuilder {
        crate::types::builders::HostPropertiesResponseBuilder::default()
    }
}

/// A builder for [`HostPropertiesResponse`](crate::types::HostPropertiesResponse).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct HostPropertiesResponseBuilder {
    pub(crate) ip_addresses: ::std::option::Option<crate::types::IpAddresses>,
    pub(crate) host_name: ::std::option::Option<::std::string::String>,
    pub(crate) ec2_instance_arn: ::std::option::Option<::std::string::String>,
    pub(crate) ec2_instance_type: ::std::option::Option<::std::string::String>,
}
impl HostPropertiesResponseBuilder {
    /// <p>The IP address of the host.</p>
    pub fn ip_addresses(mut self, input: crate::types::IpAddresses) -> Self {
        self.ip_addresses = ::std::option::Option::Some(input);
        self
    }
    /// <p>The IP address of the host.</p>
    pub fn set_ip_addresses(mut self, input: ::std::option::Option<crate::types::IpAddresses>) -> Self {
        self.ip_addresses = input;
        self
    }
    /// <p>The IP address of the host.</p>
    pub fn get_ip_addresses(&self) -> &::std::option::Option<crate::types::IpAddresses> {
        &self.ip_addresses
    }
    /// <p>The host name.</p>
    pub fn host_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.host_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The host name.</p>
    pub fn set_host_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.host_name = input;
        self
    }
    /// <p>The host name.</p>
    pub fn get_host_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.host_name
    }
    /// <p>The ARN of the host EC2 instance.</p>
    pub fn ec2_instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ec2_instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the host EC2 instance.</p>
    pub fn set_ec2_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ec2_instance_arn = input;
        self
    }
    /// <p>The ARN of the host EC2 instance.</p>
    pub fn get_ec2_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.ec2_instance_arn
    }
    /// <p>The instance type of the host EC2 instance.</p>
    pub fn ec2_instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ec2_instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance type of the host EC2 instance.</p>
    pub fn set_ec2_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ec2_instance_type = input;
        self
    }
    /// <p>The instance type of the host EC2 instance.</p>
    pub fn get_ec2_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.ec2_instance_type
    }
    /// Consumes the builder and constructs a [`HostPropertiesResponse`](crate::types::HostPropertiesResponse).
    pub fn build(self) -> crate::types::HostPropertiesResponse {
        crate::types::HostPropertiesResponse {
            ip_addresses: self.ip_addresses,
            host_name: self.host_name,
            ec2_instance_arn: self.ec2_instance_arn,
            ec2_instance_type: self.ec2_instance_type,
        }
    }
}
