// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a task.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TaskSummary {
    /// <p>The task ID.</p>
    pub task_id: ::std::string::String,
    /// <p>The date and time the resource was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The user or system that created this resource.</p>
    pub created_by: ::std::string::String,
    /// <p>The run status of the task.</p>
    pub run_status: crate::types::TaskRunStatus,
    /// <p>The run status on which the started.</p>
    pub target_run_status: ::std::option::Option<crate::types::TaskTargetRunStatus>,
    /// <p>The number of times that the task failed and was retried.</p>
    pub failure_retry_count: ::std::option::Option<i32>,
    /// <p>The task parameters.</p>
    pub parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::TaskParameterValue>>,
    /// <p>The date and time the resource started running.</p>
    pub started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time the resource ended running.</p>
    pub ended_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time the resource was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The user or system that updated this resource.</p>
    pub updated_by: ::std::option::Option<::std::string::String>,
    /// <p>The latest session action for the task.</p>
    pub latest_session_action_id: ::std::option::Option<::std::string::String>,
}
impl TaskSummary {
    /// <p>The task ID.</p>
    pub fn task_id(&self) -> &str {
        use std::ops::Deref;
        self.task_id.deref()
    }
    /// <p>The date and time the resource was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The user or system that created this resource.</p>
    pub fn created_by(&self) -> &str {
        use std::ops::Deref;
        self.created_by.deref()
    }
    /// <p>The run status of the task.</p>
    pub fn run_status(&self) -> &crate::types::TaskRunStatus {
        &self.run_status
    }
    /// <p>The run status on which the started.</p>
    pub fn target_run_status(&self) -> ::std::option::Option<&crate::types::TaskTargetRunStatus> {
        self.target_run_status.as_ref()
    }
    /// <p>The number of times that the task failed and was retried.</p>
    pub fn failure_retry_count(&self) -> ::std::option::Option<i32> {
        self.failure_retry_count
    }
    /// <p>The task parameters.</p>
    pub fn parameters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::TaskParameterValue>> {
        self.parameters.as_ref()
    }
    /// <p>The date and time the resource started running.</p>
    pub fn started_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.started_at.as_ref()
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn ended_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.ended_at.as_ref()
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn updated_by(&self) -> ::std::option::Option<&str> {
        self.updated_by.as_deref()
    }
    /// <p>The latest session action for the task.</p>
    pub fn latest_session_action_id(&self) -> ::std::option::Option<&str> {
        self.latest_session_action_id.as_deref()
    }
}
impl ::std::fmt::Debug for TaskSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TaskSummary");
        formatter.field("task_id", &self.task_id);
        formatter.field("created_at", &self.created_at);
        formatter.field("created_by", &self.created_by);
        formatter.field("run_status", &self.run_status);
        formatter.field("target_run_status", &self.target_run_status);
        formatter.field("failure_retry_count", &self.failure_retry_count);
        formatter.field("parameters", &"*** Sensitive Data Redacted ***");
        formatter.field("started_at", &self.started_at);
        formatter.field("ended_at", &self.ended_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("updated_by", &self.updated_by);
        formatter.field("latest_session_action_id", &self.latest_session_action_id);
        formatter.finish()
    }
}
impl TaskSummary {
    /// Creates a new builder-style object to manufacture [`TaskSummary`](crate::types::TaskSummary).
    pub fn builder() -> crate::types::builders::TaskSummaryBuilder {
        crate::types::builders::TaskSummaryBuilder::default()
    }
}

/// A builder for [`TaskSummary`](crate::types::TaskSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct TaskSummaryBuilder {
    pub(crate) task_id: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) run_status: ::std::option::Option<crate::types::TaskRunStatus>,
    pub(crate) target_run_status: ::std::option::Option<crate::types::TaskTargetRunStatus>,
    pub(crate) failure_retry_count: ::std::option::Option<i32>,
    pub(crate) parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::TaskParameterValue>>,
    pub(crate) started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) ended_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_by: ::std::option::Option<::std::string::String>,
    pub(crate) latest_session_action_id: ::std::option::Option<::std::string::String>,
}
impl TaskSummaryBuilder {
    /// <p>The task ID.</p>
    /// This field is required.
    pub fn task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The task ID.</p>
    pub fn set_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_id = input;
        self
    }
    /// <p>The task ID.</p>
    pub fn get_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_id
    }
    /// <p>The date and time the resource was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time the resource was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The user or system that created this resource.</p>
    /// This field is required.
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user or system that created this resource.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The user or system that created this resource.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The run status of the task.</p>
    /// This field is required.
    pub fn run_status(mut self, input: crate::types::TaskRunStatus) -> Self {
        self.run_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The run status of the task.</p>
    pub fn set_run_status(mut self, input: ::std::option::Option<crate::types::TaskRunStatus>) -> Self {
        self.run_status = input;
        self
    }
    /// <p>The run status of the task.</p>
    pub fn get_run_status(&self) -> &::std::option::Option<crate::types::TaskRunStatus> {
        &self.run_status
    }
    /// <p>The run status on which the started.</p>
    pub fn target_run_status(mut self, input: crate::types::TaskTargetRunStatus) -> Self {
        self.target_run_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The run status on which the started.</p>
    pub fn set_target_run_status(mut self, input: ::std::option::Option<crate::types::TaskTargetRunStatus>) -> Self {
        self.target_run_status = input;
        self
    }
    /// <p>The run status on which the started.</p>
    pub fn get_target_run_status(&self) -> &::std::option::Option<crate::types::TaskTargetRunStatus> {
        &self.target_run_status
    }
    /// <p>The number of times that the task failed and was retried.</p>
    pub fn failure_retry_count(mut self, input: i32) -> Self {
        self.failure_retry_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of times that the task failed and was retried.</p>
    pub fn set_failure_retry_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.failure_retry_count = input;
        self
    }
    /// <p>The number of times that the task failed and was retried.</p>
    pub fn get_failure_retry_count(&self) -> &::std::option::Option<i32> {
        &self.failure_retry_count
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>The task parameters.</p>
    pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::TaskParameterValue) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The task parameters.</p>
    pub fn set_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::TaskParameterValue>>,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// <p>The task parameters.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::TaskParameterValue>> {
        &self.parameters
    }
    /// <p>The date and time the resource started running.</p>
    pub fn started_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource started running.</p>
    pub fn set_started_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The date and time the resource started running.</p>
    pub fn get_started_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_at
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn ended_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.ended_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn set_ended_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.ended_at = input;
        self
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn get_ended_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.ended_at
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn set_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_by = input;
        self
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn get_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_by
    }
    /// <p>The latest session action for the task.</p>
    pub fn latest_session_action_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.latest_session_action_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The latest session action for the task.</p>
    pub fn set_latest_session_action_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.latest_session_action_id = input;
        self
    }
    /// <p>The latest session action for the task.</p>
    pub fn get_latest_session_action_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.latest_session_action_id
    }
    /// Consumes the builder and constructs a [`TaskSummary`](crate::types::TaskSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`task_id`](crate::types::builders::TaskSummaryBuilder::task_id)
    /// - [`created_at`](crate::types::builders::TaskSummaryBuilder::created_at)
    /// - [`created_by`](crate::types::builders::TaskSummaryBuilder::created_by)
    /// - [`run_status`](crate::types::builders::TaskSummaryBuilder::run_status)
    pub fn build(self) -> ::std::result::Result<crate::types::TaskSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TaskSummary {
            task_id: self.task_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "task_id",
                    "task_id was not specified but it is required when building TaskSummary",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building TaskSummary",
                )
            })?,
            created_by: self.created_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_by",
                    "created_by was not specified but it is required when building TaskSummary",
                )
            })?,
            run_status: self.run_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "run_status",
                    "run_status was not specified but it is required when building TaskSummary",
                )
            })?,
            target_run_status: self.target_run_status,
            failure_retry_count: self.failure_retry_count,
            parameters: self.parameters,
            started_at: self.started_at,
            ended_at: self.ended_at,
            updated_at: self.updated_at,
            updated_by: self.updated_by,
            latest_session_action_id: self.latest_session_action_id,
        })
    }
}
impl ::std::fmt::Debug for TaskSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TaskSummaryBuilder");
        formatter.field("task_id", &self.task_id);
        formatter.field("created_at", &self.created_at);
        formatter.field("created_by", &self.created_by);
        formatter.field("run_status", &self.run_status);
        formatter.field("target_run_status", &self.target_run_status);
        formatter.field("failure_retry_count", &self.failure_retry_count);
        formatter.field("parameters", &"*** Sensitive Data Redacted ***");
        formatter.field("started_at", &self.started_at);
        formatter.field("ended_at", &self.ended_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("updated_by", &self.updated_by);
        formatter.field("latest_session_action_id", &self.latest_session_action_id);
        formatter.finish()
    }
}
