// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a customer managed fleet configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomerManagedFleetConfiguration {
    /// <p>The Auto Scaling mode for the customer managed fleet configuration.</p>
    pub mode: crate::types::AutoScalingMode,
    /// <p>The worker capabilities for a customer managed fleet configuration.</p>
    pub worker_capabilities: ::std::option::Option<crate::types::CustomerManagedWorkerCapabilities>,
    /// <p>The storage profile ID.</p>
    pub storage_profile_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether tags associated with a fleet are attached to workers when the worker is launched.</p>
    /// <p>When the <code>tagPropagationMode</code> is set to <code>PROPAGATE_TAGS_TO_WORKERS_AT_LAUNCH</code> any tag associated with a fleet is attached to workers when they launch. If the tags for a fleet change, the tags associated with running workers <b>do not</b> change.</p>
    /// <p>If you don't specify <code>tagPropagationMode</code>, the default is <code>NO_PROPAGATION</code>.</p>
    pub tag_propagation_mode: ::std::option::Option<crate::types::TagPropagationMode>,
}
impl CustomerManagedFleetConfiguration {
    /// <p>The Auto Scaling mode for the customer managed fleet configuration.</p>
    pub fn mode(&self) -> &crate::types::AutoScalingMode {
        &self.mode
    }
    /// <p>The worker capabilities for a customer managed fleet configuration.</p>
    pub fn worker_capabilities(&self) -> ::std::option::Option<&crate::types::CustomerManagedWorkerCapabilities> {
        self.worker_capabilities.as_ref()
    }
    /// <p>The storage profile ID.</p>
    pub fn storage_profile_id(&self) -> ::std::option::Option<&str> {
        self.storage_profile_id.as_deref()
    }
    /// <p>Specifies whether tags associated with a fleet are attached to workers when the worker is launched.</p>
    /// <p>When the <code>tagPropagationMode</code> is set to <code>PROPAGATE_TAGS_TO_WORKERS_AT_LAUNCH</code> any tag associated with a fleet is attached to workers when they launch. If the tags for a fleet change, the tags associated with running workers <b>do not</b> change.</p>
    /// <p>If you don't specify <code>tagPropagationMode</code>, the default is <code>NO_PROPAGATION</code>.</p>
    pub fn tag_propagation_mode(&self) -> ::std::option::Option<&crate::types::TagPropagationMode> {
        self.tag_propagation_mode.as_ref()
    }
}
impl CustomerManagedFleetConfiguration {
    /// Creates a new builder-style object to manufacture [`CustomerManagedFleetConfiguration`](crate::types::CustomerManagedFleetConfiguration).
    pub fn builder() -> crate::types::builders::CustomerManagedFleetConfigurationBuilder {
        crate::types::builders::CustomerManagedFleetConfigurationBuilder::default()
    }
}

/// A builder for [`CustomerManagedFleetConfiguration`](crate::types::CustomerManagedFleetConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CustomerManagedFleetConfigurationBuilder {
    pub(crate) mode: ::std::option::Option<crate::types::AutoScalingMode>,
    pub(crate) worker_capabilities: ::std::option::Option<crate::types::CustomerManagedWorkerCapabilities>,
    pub(crate) storage_profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) tag_propagation_mode: ::std::option::Option<crate::types::TagPropagationMode>,
}
impl CustomerManagedFleetConfigurationBuilder {
    /// <p>The Auto Scaling mode for the customer managed fleet configuration.</p>
    /// This field is required.
    pub fn mode(mut self, input: crate::types::AutoScalingMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Auto Scaling mode for the customer managed fleet configuration.</p>
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::AutoScalingMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>The Auto Scaling mode for the customer managed fleet configuration.</p>
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::AutoScalingMode> {
        &self.mode
    }
    /// <p>The worker capabilities for a customer managed fleet configuration.</p>
    /// This field is required.
    pub fn worker_capabilities(mut self, input: crate::types::CustomerManagedWorkerCapabilities) -> Self {
        self.worker_capabilities = ::std::option::Option::Some(input);
        self
    }
    /// <p>The worker capabilities for a customer managed fleet configuration.</p>
    pub fn set_worker_capabilities(mut self, input: ::std::option::Option<crate::types::CustomerManagedWorkerCapabilities>) -> Self {
        self.worker_capabilities = input;
        self
    }
    /// <p>The worker capabilities for a customer managed fleet configuration.</p>
    pub fn get_worker_capabilities(&self) -> &::std::option::Option<crate::types::CustomerManagedWorkerCapabilities> {
        &self.worker_capabilities
    }
    /// <p>The storage profile ID.</p>
    pub fn storage_profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.storage_profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The storage profile ID.</p>
    pub fn set_storage_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.storage_profile_id = input;
        self
    }
    /// <p>The storage profile ID.</p>
    pub fn get_storage_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.storage_profile_id
    }
    /// <p>Specifies whether tags associated with a fleet are attached to workers when the worker is launched.</p>
    /// <p>When the <code>tagPropagationMode</code> is set to <code>PROPAGATE_TAGS_TO_WORKERS_AT_LAUNCH</code> any tag associated with a fleet is attached to workers when they launch. If the tags for a fleet change, the tags associated with running workers <b>do not</b> change.</p>
    /// <p>If you don't specify <code>tagPropagationMode</code>, the default is <code>NO_PROPAGATION</code>.</p>
    pub fn tag_propagation_mode(mut self, input: crate::types::TagPropagationMode) -> Self {
        self.tag_propagation_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether tags associated with a fleet are attached to workers when the worker is launched.</p>
    /// <p>When the <code>tagPropagationMode</code> is set to <code>PROPAGATE_TAGS_TO_WORKERS_AT_LAUNCH</code> any tag associated with a fleet is attached to workers when they launch. If the tags for a fleet change, the tags associated with running workers <b>do not</b> change.</p>
    /// <p>If you don't specify <code>tagPropagationMode</code>, the default is <code>NO_PROPAGATION</code>.</p>
    pub fn set_tag_propagation_mode(mut self, input: ::std::option::Option<crate::types::TagPropagationMode>) -> Self {
        self.tag_propagation_mode = input;
        self
    }
    /// <p>Specifies whether tags associated with a fleet are attached to workers when the worker is launched.</p>
    /// <p>When the <code>tagPropagationMode</code> is set to <code>PROPAGATE_TAGS_TO_WORKERS_AT_LAUNCH</code> any tag associated with a fleet is attached to workers when they launch. If the tags for a fleet change, the tags associated with running workers <b>do not</b> change.</p>
    /// <p>If you don't specify <code>tagPropagationMode</code>, the default is <code>NO_PROPAGATION</code>.</p>
    pub fn get_tag_propagation_mode(&self) -> &::std::option::Option<crate::types::TagPropagationMode> {
        &self.tag_propagation_mode
    }
    /// Consumes the builder and constructs a [`CustomerManagedFleetConfiguration`](crate::types::CustomerManagedFleetConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`mode`](crate::types::builders::CustomerManagedFleetConfigurationBuilder::mode)
    pub fn build(self) -> ::std::result::Result<crate::types::CustomerManagedFleetConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CustomerManagedFleetConfiguration {
            mode: self.mode.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mode",
                    "mode was not specified but it is required when building CustomerManagedFleetConfiguration",
                )
            })?,
            worker_capabilities: self.worker_capabilities,
            storage_profile_id: self.storage_profile_id,
            tag_propagation_mode: self.tag_propagation_mode,
        })
    }
}
