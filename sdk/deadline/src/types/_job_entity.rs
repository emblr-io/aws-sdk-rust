// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a job entity.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum JobEntity {
    /// <p>The environment details for the job entity.</p>
    EnvironmentDetails(crate::types::EnvironmentDetailsEntity),
    /// <p>The job attachment details.</p>
    JobAttachmentDetails(crate::types::JobAttachmentDetailsEntity),
    /// <p>The job details.</p>
    JobDetails(crate::types::JobDetailsEntity),
    /// <p>The step details.</p>
    StepDetails(crate::types::StepDetailsEntity),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl JobEntity {
    /// Tries to convert the enum instance into [`EnvironmentDetails`](crate::types::JobEntity::EnvironmentDetails), extracting the inner [`EnvironmentDetailsEntity`](crate::types::EnvironmentDetailsEntity).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_environment_details(&self) -> ::std::result::Result<&crate::types::EnvironmentDetailsEntity, &Self> {
        if let JobEntity::EnvironmentDetails(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`EnvironmentDetails`](crate::types::JobEntity::EnvironmentDetails).
    pub fn is_environment_details(&self) -> bool {
        self.as_environment_details().is_ok()
    }
    /// Tries to convert the enum instance into [`JobAttachmentDetails`](crate::types::JobEntity::JobAttachmentDetails), extracting the inner [`JobAttachmentDetailsEntity`](crate::types::JobAttachmentDetailsEntity).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_job_attachment_details(&self) -> ::std::result::Result<&crate::types::JobAttachmentDetailsEntity, &Self> {
        if let JobEntity::JobAttachmentDetails(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`JobAttachmentDetails`](crate::types::JobEntity::JobAttachmentDetails).
    pub fn is_job_attachment_details(&self) -> bool {
        self.as_job_attachment_details().is_ok()
    }
    /// Tries to convert the enum instance into [`JobDetails`](crate::types::JobEntity::JobDetails), extracting the inner [`JobDetailsEntity`](crate::types::JobDetailsEntity).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_job_details(&self) -> ::std::result::Result<&crate::types::JobDetailsEntity, &Self> {
        if let JobEntity::JobDetails(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`JobDetails`](crate::types::JobEntity::JobDetails).
    pub fn is_job_details(&self) -> bool {
        self.as_job_details().is_ok()
    }
    /// Tries to convert the enum instance into [`StepDetails`](crate::types::JobEntity::StepDetails), extracting the inner [`StepDetailsEntity`](crate::types::StepDetailsEntity).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_step_details(&self) -> ::std::result::Result<&crate::types::StepDetailsEntity, &Self> {
        if let JobEntity::StepDetails(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`StepDetails`](crate::types::JobEntity::StepDetails).
    pub fn is_step_details(&self) -> bool {
        self.as_step_details().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
