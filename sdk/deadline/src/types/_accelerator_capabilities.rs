// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the GPU accelerators used for jobs processed by a fleet.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AcceleratorCapabilities {
    /// <p>A list of accelerator capabilities requested for this fleet. Only Amazon Elastic Compute Cloud instances that provide these capabilities will be used. For example, if you specify both L4 and T4 chips, Deadline Cloud will use Amazon EC2 instances that have either the L4 or the T4 chip installed.</p>
    pub selections: ::std::vec::Vec<crate::types::AcceleratorSelection>,
    /// <p>The number of GPU accelerators specified for worker hosts in this fleet.</p>
    pub count: ::std::option::Option<crate::types::AcceleratorCountRange>,
}
impl AcceleratorCapabilities {
    /// <p>A list of accelerator capabilities requested for this fleet. Only Amazon Elastic Compute Cloud instances that provide these capabilities will be used. For example, if you specify both L4 and T4 chips, Deadline Cloud will use Amazon EC2 instances that have either the L4 or the T4 chip installed.</p>
    pub fn selections(&self) -> &[crate::types::AcceleratorSelection] {
        use std::ops::Deref;
        self.selections.deref()
    }
    /// <p>The number of GPU accelerators specified for worker hosts in this fleet.</p>
    pub fn count(&self) -> ::std::option::Option<&crate::types::AcceleratorCountRange> {
        self.count.as_ref()
    }
}
impl AcceleratorCapabilities {
    /// Creates a new builder-style object to manufacture [`AcceleratorCapabilities`](crate::types::AcceleratorCapabilities).
    pub fn builder() -> crate::types::builders::AcceleratorCapabilitiesBuilder {
        crate::types::builders::AcceleratorCapabilitiesBuilder::default()
    }
}

/// A builder for [`AcceleratorCapabilities`](crate::types::AcceleratorCapabilities).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AcceleratorCapabilitiesBuilder {
    pub(crate) selections: ::std::option::Option<::std::vec::Vec<crate::types::AcceleratorSelection>>,
    pub(crate) count: ::std::option::Option<crate::types::AcceleratorCountRange>,
}
impl AcceleratorCapabilitiesBuilder {
    /// Appends an item to `selections`.
    ///
    /// To override the contents of this collection use [`set_selections`](Self::set_selections).
    ///
    /// <p>A list of accelerator capabilities requested for this fleet. Only Amazon Elastic Compute Cloud instances that provide these capabilities will be used. For example, if you specify both L4 and T4 chips, Deadline Cloud will use Amazon EC2 instances that have either the L4 or the T4 chip installed.</p>
    pub fn selections(mut self, input: crate::types::AcceleratorSelection) -> Self {
        let mut v = self.selections.unwrap_or_default();
        v.push(input);
        self.selections = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of accelerator capabilities requested for this fleet. Only Amazon Elastic Compute Cloud instances that provide these capabilities will be used. For example, if you specify both L4 and T4 chips, Deadline Cloud will use Amazon EC2 instances that have either the L4 or the T4 chip installed.</p>
    pub fn set_selections(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AcceleratorSelection>>) -> Self {
        self.selections = input;
        self
    }
    /// <p>A list of accelerator capabilities requested for this fleet. Only Amazon Elastic Compute Cloud instances that provide these capabilities will be used. For example, if you specify both L4 and T4 chips, Deadline Cloud will use Amazon EC2 instances that have either the L4 or the T4 chip installed.</p>
    pub fn get_selections(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AcceleratorSelection>> {
        &self.selections
    }
    /// <p>The number of GPU accelerators specified for worker hosts in this fleet.</p>
    pub fn count(mut self, input: crate::types::AcceleratorCountRange) -> Self {
        self.count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of GPU accelerators specified for worker hosts in this fleet.</p>
    pub fn set_count(mut self, input: ::std::option::Option<crate::types::AcceleratorCountRange>) -> Self {
        self.count = input;
        self
    }
    /// <p>The number of GPU accelerators specified for worker hosts in this fleet.</p>
    pub fn get_count(&self) -> &::std::option::Option<crate::types::AcceleratorCountRange> {
        &self.count
    }
    /// Consumes the builder and constructs a [`AcceleratorCapabilities`](crate::types::AcceleratorCapabilities).
    /// This method will fail if any of the following fields are not set:
    /// - [`selections`](crate::types::builders::AcceleratorCapabilitiesBuilder::selections)
    pub fn build(self) -> ::std::result::Result<crate::types::AcceleratorCapabilities, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AcceleratorCapabilities {
            selections: self.selections.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "selections",
                    "selections was not specified but it is required when building AcceleratorCapabilities",
                )
            })?,
            count: self.count,
        })
    }
}
