// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a step consumer.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StepConsumer {
    /// <p>The step ID.</p>
    pub step_id: ::std::string::String,
    /// <p>The step consumer status.</p>
    pub status: crate::types::DependencyConsumerResolutionStatus,
}
impl StepConsumer {
    /// <p>The step ID.</p>
    pub fn step_id(&self) -> &str {
        use std::ops::Deref;
        self.step_id.deref()
    }
    /// <p>The step consumer status.</p>
    pub fn status(&self) -> &crate::types::DependencyConsumerResolutionStatus {
        &self.status
    }
}
impl StepConsumer {
    /// Creates a new builder-style object to manufacture [`StepConsumer`](crate::types::StepConsumer).
    pub fn builder() -> crate::types::builders::StepConsumerBuilder {
        crate::types::builders::StepConsumerBuilder::default()
    }
}

/// A builder for [`StepConsumer`](crate::types::StepConsumer).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StepConsumerBuilder {
    pub(crate) step_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::DependencyConsumerResolutionStatus>,
}
impl StepConsumerBuilder {
    /// <p>The step ID.</p>
    /// This field is required.
    pub fn step_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.step_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The step ID.</p>
    pub fn set_step_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.step_id = input;
        self
    }
    /// <p>The step ID.</p>
    pub fn get_step_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.step_id
    }
    /// <p>The step consumer status.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::DependencyConsumerResolutionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The step consumer status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DependencyConsumerResolutionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The step consumer status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DependencyConsumerResolutionStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`StepConsumer`](crate::types::StepConsumer).
    /// This method will fail if any of the following fields are not set:
    /// - [`step_id`](crate::types::builders::StepConsumerBuilder::step_id)
    /// - [`status`](crate::types::builders::StepConsumerBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::StepConsumer, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::StepConsumer {
            step_id: self.step_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "step_id",
                    "step_id was not specified but it is required when building StepConsumer",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building StepConsumer",
                )
            })?,
        })
    }
}
