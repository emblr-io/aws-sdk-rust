// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon EC2 instance capabilities.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceManagedEc2InstanceCapabilities {
    /// <p>The amount of vCPU to require for instances in this fleet.</p>
    pub v_cpu_count: ::std::option::Option<crate::types::VCpuCountRange>,
    /// <p>The memory, as MiB, for the Amazon EC2 instance type.</p>
    pub memory_mib: ::std::option::Option<crate::types::MemoryMiBRange>,
    /// <p>The operating system (OS) family.</p>
    pub os_family: crate::types::ServiceManagedFleetOperatingSystemFamily,
    /// <p>The CPU architecture type.</p>
    pub cpu_architecture_type: crate::types::CpuArchitectureType,
    /// <p>The root EBS volume.</p>
    pub root_ebs_volume: ::std::option::Option<crate::types::Ec2EbsVolume>,
    /// <p>Describes the GPU accelerator capabilities required for worker host instances in this fleet.</p>
    pub accelerator_capabilities: ::std::option::Option<crate::types::AcceleratorCapabilities>,
    /// <p>The allowable Amazon EC2 instance types.</p>
    pub allowed_instance_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The instance types to exclude from the fleet.</p>
    pub excluded_instance_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The custom capability amounts to require for instances in this fleet.</p>
    pub custom_amounts: ::std::option::Option<::std::vec::Vec<crate::types::FleetAmountCapability>>,
    /// <p>The custom capability attributes to require for instances in this fleet.</p>
    pub custom_attributes: ::std::option::Option<::std::vec::Vec<crate::types::FleetAttributeCapability>>,
}
impl ServiceManagedEc2InstanceCapabilities {
    /// <p>The amount of vCPU to require for instances in this fleet.</p>
    pub fn v_cpu_count(&self) -> ::std::option::Option<&crate::types::VCpuCountRange> {
        self.v_cpu_count.as_ref()
    }
    /// <p>The memory, as MiB, for the Amazon EC2 instance type.</p>
    pub fn memory_mib(&self) -> ::std::option::Option<&crate::types::MemoryMiBRange> {
        self.memory_mib.as_ref()
    }
    /// <p>The operating system (OS) family.</p>
    pub fn os_family(&self) -> &crate::types::ServiceManagedFleetOperatingSystemFamily {
        &self.os_family
    }
    /// <p>The CPU architecture type.</p>
    pub fn cpu_architecture_type(&self) -> &crate::types::CpuArchitectureType {
        &self.cpu_architecture_type
    }
    /// <p>The root EBS volume.</p>
    pub fn root_ebs_volume(&self) -> ::std::option::Option<&crate::types::Ec2EbsVolume> {
        self.root_ebs_volume.as_ref()
    }
    /// <p>Describes the GPU accelerator capabilities required for worker host instances in this fleet.</p>
    pub fn accelerator_capabilities(&self) -> ::std::option::Option<&crate::types::AcceleratorCapabilities> {
        self.accelerator_capabilities.as_ref()
    }
    /// <p>The allowable Amazon EC2 instance types.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_instance_types.is_none()`.
    pub fn allowed_instance_types(&self) -> &[::std::string::String] {
        self.allowed_instance_types.as_deref().unwrap_or_default()
    }
    /// <p>The instance types to exclude from the fleet.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.excluded_instance_types.is_none()`.
    pub fn excluded_instance_types(&self) -> &[::std::string::String] {
        self.excluded_instance_types.as_deref().unwrap_or_default()
    }
    /// <p>The custom capability amounts to require for instances in this fleet.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.custom_amounts.is_none()`.
    pub fn custom_amounts(&self) -> &[crate::types::FleetAmountCapability] {
        self.custom_amounts.as_deref().unwrap_or_default()
    }
    /// <p>The custom capability attributes to require for instances in this fleet.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.custom_attributes.is_none()`.
    pub fn custom_attributes(&self) -> &[crate::types::FleetAttributeCapability] {
        self.custom_attributes.as_deref().unwrap_or_default()
    }
}
impl ServiceManagedEc2InstanceCapabilities {
    /// Creates a new builder-style object to manufacture [`ServiceManagedEc2InstanceCapabilities`](crate::types::ServiceManagedEc2InstanceCapabilities).
    pub fn builder() -> crate::types::builders::ServiceManagedEc2InstanceCapabilitiesBuilder {
        crate::types::builders::ServiceManagedEc2InstanceCapabilitiesBuilder::default()
    }
}

/// A builder for [`ServiceManagedEc2InstanceCapabilities`](crate::types::ServiceManagedEc2InstanceCapabilities).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceManagedEc2InstanceCapabilitiesBuilder {
    pub(crate) v_cpu_count: ::std::option::Option<crate::types::VCpuCountRange>,
    pub(crate) memory_mib: ::std::option::Option<crate::types::MemoryMiBRange>,
    pub(crate) os_family: ::std::option::Option<crate::types::ServiceManagedFleetOperatingSystemFamily>,
    pub(crate) cpu_architecture_type: ::std::option::Option<crate::types::CpuArchitectureType>,
    pub(crate) root_ebs_volume: ::std::option::Option<crate::types::Ec2EbsVolume>,
    pub(crate) accelerator_capabilities: ::std::option::Option<crate::types::AcceleratorCapabilities>,
    pub(crate) allowed_instance_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) excluded_instance_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) custom_amounts: ::std::option::Option<::std::vec::Vec<crate::types::FleetAmountCapability>>,
    pub(crate) custom_attributes: ::std::option::Option<::std::vec::Vec<crate::types::FleetAttributeCapability>>,
}
impl ServiceManagedEc2InstanceCapabilitiesBuilder {
    /// <p>The amount of vCPU to require for instances in this fleet.</p>
    /// This field is required.
    pub fn v_cpu_count(mut self, input: crate::types::VCpuCountRange) -> Self {
        self.v_cpu_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of vCPU to require for instances in this fleet.</p>
    pub fn set_v_cpu_count(mut self, input: ::std::option::Option<crate::types::VCpuCountRange>) -> Self {
        self.v_cpu_count = input;
        self
    }
    /// <p>The amount of vCPU to require for instances in this fleet.</p>
    pub fn get_v_cpu_count(&self) -> &::std::option::Option<crate::types::VCpuCountRange> {
        &self.v_cpu_count
    }
    /// <p>The memory, as MiB, for the Amazon EC2 instance type.</p>
    /// This field is required.
    pub fn memory_mib(mut self, input: crate::types::MemoryMiBRange) -> Self {
        self.memory_mib = ::std::option::Option::Some(input);
        self
    }
    /// <p>The memory, as MiB, for the Amazon EC2 instance type.</p>
    pub fn set_memory_mib(mut self, input: ::std::option::Option<crate::types::MemoryMiBRange>) -> Self {
        self.memory_mib = input;
        self
    }
    /// <p>The memory, as MiB, for the Amazon EC2 instance type.</p>
    pub fn get_memory_mib(&self) -> &::std::option::Option<crate::types::MemoryMiBRange> {
        &self.memory_mib
    }
    /// <p>The operating system (OS) family.</p>
    /// This field is required.
    pub fn os_family(mut self, input: crate::types::ServiceManagedFleetOperatingSystemFamily) -> Self {
        self.os_family = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operating system (OS) family.</p>
    pub fn set_os_family(mut self, input: ::std::option::Option<crate::types::ServiceManagedFleetOperatingSystemFamily>) -> Self {
        self.os_family = input;
        self
    }
    /// <p>The operating system (OS) family.</p>
    pub fn get_os_family(&self) -> &::std::option::Option<crate::types::ServiceManagedFleetOperatingSystemFamily> {
        &self.os_family
    }
    /// <p>The CPU architecture type.</p>
    /// This field is required.
    pub fn cpu_architecture_type(mut self, input: crate::types::CpuArchitectureType) -> Self {
        self.cpu_architecture_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CPU architecture type.</p>
    pub fn set_cpu_architecture_type(mut self, input: ::std::option::Option<crate::types::CpuArchitectureType>) -> Self {
        self.cpu_architecture_type = input;
        self
    }
    /// <p>The CPU architecture type.</p>
    pub fn get_cpu_architecture_type(&self) -> &::std::option::Option<crate::types::CpuArchitectureType> {
        &self.cpu_architecture_type
    }
    /// <p>The root EBS volume.</p>
    pub fn root_ebs_volume(mut self, input: crate::types::Ec2EbsVolume) -> Self {
        self.root_ebs_volume = ::std::option::Option::Some(input);
        self
    }
    /// <p>The root EBS volume.</p>
    pub fn set_root_ebs_volume(mut self, input: ::std::option::Option<crate::types::Ec2EbsVolume>) -> Self {
        self.root_ebs_volume = input;
        self
    }
    /// <p>The root EBS volume.</p>
    pub fn get_root_ebs_volume(&self) -> &::std::option::Option<crate::types::Ec2EbsVolume> {
        &self.root_ebs_volume
    }
    /// <p>Describes the GPU accelerator capabilities required for worker host instances in this fleet.</p>
    pub fn accelerator_capabilities(mut self, input: crate::types::AcceleratorCapabilities) -> Self {
        self.accelerator_capabilities = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the GPU accelerator capabilities required for worker host instances in this fleet.</p>
    pub fn set_accelerator_capabilities(mut self, input: ::std::option::Option<crate::types::AcceleratorCapabilities>) -> Self {
        self.accelerator_capabilities = input;
        self
    }
    /// <p>Describes the GPU accelerator capabilities required for worker host instances in this fleet.</p>
    pub fn get_accelerator_capabilities(&self) -> &::std::option::Option<crate::types::AcceleratorCapabilities> {
        &self.accelerator_capabilities
    }
    /// Appends an item to `allowed_instance_types`.
    ///
    /// To override the contents of this collection use [`set_allowed_instance_types`](Self::set_allowed_instance_types).
    ///
    /// <p>The allowable Amazon EC2 instance types.</p>
    pub fn allowed_instance_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_instance_types.unwrap_or_default();
        v.push(input.into());
        self.allowed_instance_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The allowable Amazon EC2 instance types.</p>
    pub fn set_allowed_instance_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allowed_instance_types = input;
        self
    }
    /// <p>The allowable Amazon EC2 instance types.</p>
    pub fn get_allowed_instance_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allowed_instance_types
    }
    /// Appends an item to `excluded_instance_types`.
    ///
    /// To override the contents of this collection use [`set_excluded_instance_types`](Self::set_excluded_instance_types).
    ///
    /// <p>The instance types to exclude from the fleet.</p>
    pub fn excluded_instance_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.excluded_instance_types.unwrap_or_default();
        v.push(input.into());
        self.excluded_instance_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The instance types to exclude from the fleet.</p>
    pub fn set_excluded_instance_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.excluded_instance_types = input;
        self
    }
    /// <p>The instance types to exclude from the fleet.</p>
    pub fn get_excluded_instance_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.excluded_instance_types
    }
    /// Appends an item to `custom_amounts`.
    ///
    /// To override the contents of this collection use [`set_custom_amounts`](Self::set_custom_amounts).
    ///
    /// <p>The custom capability amounts to require for instances in this fleet.</p>
    pub fn custom_amounts(mut self, input: crate::types::FleetAmountCapability) -> Self {
        let mut v = self.custom_amounts.unwrap_or_default();
        v.push(input);
        self.custom_amounts = ::std::option::Option::Some(v);
        self
    }
    /// <p>The custom capability amounts to require for instances in this fleet.</p>
    pub fn set_custom_amounts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FleetAmountCapability>>) -> Self {
        self.custom_amounts = input;
        self
    }
    /// <p>The custom capability amounts to require for instances in this fleet.</p>
    pub fn get_custom_amounts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FleetAmountCapability>> {
        &self.custom_amounts
    }
    /// Appends an item to `custom_attributes`.
    ///
    /// To override the contents of this collection use [`set_custom_attributes`](Self::set_custom_attributes).
    ///
    /// <p>The custom capability attributes to require for instances in this fleet.</p>
    pub fn custom_attributes(mut self, input: crate::types::FleetAttributeCapability) -> Self {
        let mut v = self.custom_attributes.unwrap_or_default();
        v.push(input);
        self.custom_attributes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The custom capability attributes to require for instances in this fleet.</p>
    pub fn set_custom_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FleetAttributeCapability>>) -> Self {
        self.custom_attributes = input;
        self
    }
    /// <p>The custom capability attributes to require for instances in this fleet.</p>
    pub fn get_custom_attributes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FleetAttributeCapability>> {
        &self.custom_attributes
    }
    /// Consumes the builder and constructs a [`ServiceManagedEc2InstanceCapabilities`](crate::types::ServiceManagedEc2InstanceCapabilities).
    /// This method will fail if any of the following fields are not set:
    /// - [`os_family`](crate::types::builders::ServiceManagedEc2InstanceCapabilitiesBuilder::os_family)
    /// - [`cpu_architecture_type`](crate::types::builders::ServiceManagedEc2InstanceCapabilitiesBuilder::cpu_architecture_type)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ServiceManagedEc2InstanceCapabilities, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ServiceManagedEc2InstanceCapabilities {
            v_cpu_count: self.v_cpu_count,
            memory_mib: self.memory_mib,
            os_family: self.os_family.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "os_family",
                    "os_family was not specified but it is required when building ServiceManagedEc2InstanceCapabilities",
                )
            })?,
            cpu_architecture_type: self.cpu_architecture_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cpu_architecture_type",
                    "cpu_architecture_type was not specified but it is required when building ServiceManagedEc2InstanceCapabilities",
                )
            })?,
            root_ebs_volume: self.root_ebs_volume,
            accelerator_capabilities: self.accelerator_capabilities,
            allowed_instance_types: self.allowed_instance_types,
            excluded_instance_types: self.excluded_instance_types,
            custom_amounts: self.custom_amounts,
            custom_attributes: self.custom_attributes,
        })
    }
}
