// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The resources to search.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum SearchSortExpression {
    /// <p>Options for sorting by a field.</p>
    FieldSort(crate::types::FieldSortExpression),
    /// <p>Options for sorting by a parameter.</p>
    ParameterSort(crate::types::ParameterSortExpression),
    /// <p>Options for sorting a particular user's jobs first.</p>
    UserJobsFirst(crate::types::UserJobsFirst),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl SearchSortExpression {
    /// Tries to convert the enum instance into [`FieldSort`](crate::types::SearchSortExpression::FieldSort), extracting the inner [`FieldSortExpression`](crate::types::FieldSortExpression).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_field_sort(&self) -> ::std::result::Result<&crate::types::FieldSortExpression, &Self> {
        if let SearchSortExpression::FieldSort(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`FieldSort`](crate::types::SearchSortExpression::FieldSort).
    pub fn is_field_sort(&self) -> bool {
        self.as_field_sort().is_ok()
    }
    /// Tries to convert the enum instance into [`ParameterSort`](crate::types::SearchSortExpression::ParameterSort), extracting the inner [`ParameterSortExpression`](crate::types::ParameterSortExpression).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_parameter_sort(&self) -> ::std::result::Result<&crate::types::ParameterSortExpression, &Self> {
        if let SearchSortExpression::ParameterSort(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ParameterSort`](crate::types::SearchSortExpression::ParameterSort).
    pub fn is_parameter_sort(&self) -> bool {
        self.as_parameter_sort().is_ok()
    }
    /// Tries to convert the enum instance into [`UserJobsFirst`](crate::types::SearchSortExpression::UserJobsFirst), extracting the inner [`UserJobsFirst`](crate::types::UserJobsFirst).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_user_jobs_first(&self) -> ::std::result::Result<&crate::types::UserJobsFirst, &Self> {
        if let SearchSortExpression::UserJobsFirst(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`UserJobsFirst`](crate::types::SearchSortExpression::UserJobsFirst).
    pub fn is_user_jobs_first(&self) -> bool {
        self.as_user_jobs_first().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
