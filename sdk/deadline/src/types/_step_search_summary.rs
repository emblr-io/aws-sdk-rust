// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a step search.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StepSearchSummary {
    /// <p>The step ID.</p>
    pub step_id: ::std::option::Option<::std::string::String>,
    /// <p>The job ID.</p>
    pub job_id: ::std::option::Option<::std::string::String>,
    /// <p>The queue ID.</p>
    pub queue_id: ::std::option::Option<::std::string::String>,
    /// <p>The step name.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The life cycle status.</p>
    pub lifecycle_status: ::std::option::Option<crate::types::StepLifecycleStatus>,
    /// <p>The life cycle status message.</p>
    pub lifecycle_status_message: ::std::option::Option<::std::string::String>,
    /// <p>The task run status for the job.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code>–pending and waiting for resources.</p></li>
    /// <li>
    /// <p><code>READY</code>–ready to be processed.</p></li>
    /// <li>
    /// <p><code>ASSIGNED</code>–assigned and will run next on a worker.</p></li>
    /// <li>
    /// <p><code>SCHEDULED</code>–scheduled to be run on a worker.</p></li>
    /// <li>
    /// <p><code>INTERRUPTING</code>–being interrupted.</p></li>
    /// <li>
    /// <p><code>RUNNING</code>–running on a worker.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code>–the task is suspended.</p></li>
    /// <li>
    /// <p><code>CANCELED</code>–the task has been canceled.</p></li>
    /// <li>
    /// <p><code>FAILED</code>–the task has failed.</p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code>–the task has succeeded.</p></li>
    /// </ul>
    pub task_run_status: ::std::option::Option<crate::types::TaskRunStatus>,
    /// <p>The task status to start with on the job.</p>
    pub target_task_run_status: ::std::option::Option<crate::types::StepTargetTaskRunStatus>,
    /// <p>The number of tasks running on the job.</p>
    pub task_run_status_counts: ::std::option::Option<::std::collections::HashMap<crate::types::TaskRunStatus, i32>>,
    /// <p>The total number of times tasks from the step failed and were retried.</p>
    pub task_failure_retry_count: ::std::option::Option<i32>,
    /// <p>The date and time the resource was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time the resource started running.</p>
    pub started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time the resource ended running.</p>
    pub ended_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The parameters and combination expressions for the search.</p>
    pub parameter_space: ::std::option::Option<crate::types::ParameterSpace>,
}
impl StepSearchSummary {
    /// <p>The step ID.</p>
    pub fn step_id(&self) -> ::std::option::Option<&str> {
        self.step_id.as_deref()
    }
    /// <p>The job ID.</p>
    pub fn job_id(&self) -> ::std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The queue ID.</p>
    pub fn queue_id(&self) -> ::std::option::Option<&str> {
        self.queue_id.as_deref()
    }
    /// <p>The step name.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The life cycle status.</p>
    pub fn lifecycle_status(&self) -> ::std::option::Option<&crate::types::StepLifecycleStatus> {
        self.lifecycle_status.as_ref()
    }
    /// <p>The life cycle status message.</p>
    pub fn lifecycle_status_message(&self) -> ::std::option::Option<&str> {
        self.lifecycle_status_message.as_deref()
    }
    /// <p>The task run status for the job.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code>–pending and waiting for resources.</p></li>
    /// <li>
    /// <p><code>READY</code>–ready to be processed.</p></li>
    /// <li>
    /// <p><code>ASSIGNED</code>–assigned and will run next on a worker.</p></li>
    /// <li>
    /// <p><code>SCHEDULED</code>–scheduled to be run on a worker.</p></li>
    /// <li>
    /// <p><code>INTERRUPTING</code>–being interrupted.</p></li>
    /// <li>
    /// <p><code>RUNNING</code>–running on a worker.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code>–the task is suspended.</p></li>
    /// <li>
    /// <p><code>CANCELED</code>–the task has been canceled.</p></li>
    /// <li>
    /// <p><code>FAILED</code>–the task has failed.</p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code>–the task has succeeded.</p></li>
    /// </ul>
    pub fn task_run_status(&self) -> ::std::option::Option<&crate::types::TaskRunStatus> {
        self.task_run_status.as_ref()
    }
    /// <p>The task status to start with on the job.</p>
    pub fn target_task_run_status(&self) -> ::std::option::Option<&crate::types::StepTargetTaskRunStatus> {
        self.target_task_run_status.as_ref()
    }
    /// <p>The number of tasks running on the job.</p>
    pub fn task_run_status_counts(&self) -> ::std::option::Option<&::std::collections::HashMap<crate::types::TaskRunStatus, i32>> {
        self.task_run_status_counts.as_ref()
    }
    /// <p>The total number of times tasks from the step failed and were retried.</p>
    pub fn task_failure_retry_count(&self) -> ::std::option::Option<i32> {
        self.task_failure_retry_count
    }
    /// <p>The date and time the resource was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The date and time the resource started running.</p>
    pub fn started_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.started_at.as_ref()
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn ended_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.ended_at.as_ref()
    }
    /// <p>The parameters and combination expressions for the search.</p>
    pub fn parameter_space(&self) -> ::std::option::Option<&crate::types::ParameterSpace> {
        self.parameter_space.as_ref()
    }
}
impl StepSearchSummary {
    /// Creates a new builder-style object to manufacture [`StepSearchSummary`](crate::types::StepSearchSummary).
    pub fn builder() -> crate::types::builders::StepSearchSummaryBuilder {
        crate::types::builders::StepSearchSummaryBuilder::default()
    }
}

/// A builder for [`StepSearchSummary`](crate::types::StepSearchSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StepSearchSummaryBuilder {
    pub(crate) step_id: ::std::option::Option<::std::string::String>,
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) queue_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) lifecycle_status: ::std::option::Option<crate::types::StepLifecycleStatus>,
    pub(crate) lifecycle_status_message: ::std::option::Option<::std::string::String>,
    pub(crate) task_run_status: ::std::option::Option<crate::types::TaskRunStatus>,
    pub(crate) target_task_run_status: ::std::option::Option<crate::types::StepTargetTaskRunStatus>,
    pub(crate) task_run_status_counts: ::std::option::Option<::std::collections::HashMap<crate::types::TaskRunStatus, i32>>,
    pub(crate) task_failure_retry_count: ::std::option::Option<i32>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) ended_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) parameter_space: ::std::option::Option<crate::types::ParameterSpace>,
}
impl StepSearchSummaryBuilder {
    /// <p>The step ID.</p>
    pub fn step_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.step_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The step ID.</p>
    pub fn set_step_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.step_id = input;
        self
    }
    /// <p>The step ID.</p>
    pub fn get_step_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.step_id
    }
    /// <p>The job ID.</p>
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job ID.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The job ID.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>The queue ID.</p>
    pub fn queue_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.queue_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The queue ID.</p>
    pub fn set_queue_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.queue_id = input;
        self
    }
    /// <p>The queue ID.</p>
    pub fn get_queue_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.queue_id
    }
    /// <p>The step name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The step name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The step name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The life cycle status.</p>
    pub fn lifecycle_status(mut self, input: crate::types::StepLifecycleStatus) -> Self {
        self.lifecycle_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The life cycle status.</p>
    pub fn set_lifecycle_status(mut self, input: ::std::option::Option<crate::types::StepLifecycleStatus>) -> Self {
        self.lifecycle_status = input;
        self
    }
    /// <p>The life cycle status.</p>
    pub fn get_lifecycle_status(&self) -> &::std::option::Option<crate::types::StepLifecycleStatus> {
        &self.lifecycle_status
    }
    /// <p>The life cycle status message.</p>
    pub fn lifecycle_status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lifecycle_status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The life cycle status message.</p>
    pub fn set_lifecycle_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lifecycle_status_message = input;
        self
    }
    /// <p>The life cycle status message.</p>
    pub fn get_lifecycle_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.lifecycle_status_message
    }
    /// <p>The task run status for the job.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code>–pending and waiting for resources.</p></li>
    /// <li>
    /// <p><code>READY</code>–ready to be processed.</p></li>
    /// <li>
    /// <p><code>ASSIGNED</code>–assigned and will run next on a worker.</p></li>
    /// <li>
    /// <p><code>SCHEDULED</code>–scheduled to be run on a worker.</p></li>
    /// <li>
    /// <p><code>INTERRUPTING</code>–being interrupted.</p></li>
    /// <li>
    /// <p><code>RUNNING</code>–running on a worker.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code>–the task is suspended.</p></li>
    /// <li>
    /// <p><code>CANCELED</code>–the task has been canceled.</p></li>
    /// <li>
    /// <p><code>FAILED</code>–the task has failed.</p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code>–the task has succeeded.</p></li>
    /// </ul>
    pub fn task_run_status(mut self, input: crate::types::TaskRunStatus) -> Self {
        self.task_run_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The task run status for the job.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code>–pending and waiting for resources.</p></li>
    /// <li>
    /// <p><code>READY</code>–ready to be processed.</p></li>
    /// <li>
    /// <p><code>ASSIGNED</code>–assigned and will run next on a worker.</p></li>
    /// <li>
    /// <p><code>SCHEDULED</code>–scheduled to be run on a worker.</p></li>
    /// <li>
    /// <p><code>INTERRUPTING</code>–being interrupted.</p></li>
    /// <li>
    /// <p><code>RUNNING</code>–running on a worker.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code>–the task is suspended.</p></li>
    /// <li>
    /// <p><code>CANCELED</code>–the task has been canceled.</p></li>
    /// <li>
    /// <p><code>FAILED</code>–the task has failed.</p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code>–the task has succeeded.</p></li>
    /// </ul>
    pub fn set_task_run_status(mut self, input: ::std::option::Option<crate::types::TaskRunStatus>) -> Self {
        self.task_run_status = input;
        self
    }
    /// <p>The task run status for the job.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code>–pending and waiting for resources.</p></li>
    /// <li>
    /// <p><code>READY</code>–ready to be processed.</p></li>
    /// <li>
    /// <p><code>ASSIGNED</code>–assigned and will run next on a worker.</p></li>
    /// <li>
    /// <p><code>SCHEDULED</code>–scheduled to be run on a worker.</p></li>
    /// <li>
    /// <p><code>INTERRUPTING</code>–being interrupted.</p></li>
    /// <li>
    /// <p><code>RUNNING</code>–running on a worker.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code>–the task is suspended.</p></li>
    /// <li>
    /// <p><code>CANCELED</code>–the task has been canceled.</p></li>
    /// <li>
    /// <p><code>FAILED</code>–the task has failed.</p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code>–the task has succeeded.</p></li>
    /// </ul>
    pub fn get_task_run_status(&self) -> &::std::option::Option<crate::types::TaskRunStatus> {
        &self.task_run_status
    }
    /// <p>The task status to start with on the job.</p>
    pub fn target_task_run_status(mut self, input: crate::types::StepTargetTaskRunStatus) -> Self {
        self.target_task_run_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The task status to start with on the job.</p>
    pub fn set_target_task_run_status(mut self, input: ::std::option::Option<crate::types::StepTargetTaskRunStatus>) -> Self {
        self.target_task_run_status = input;
        self
    }
    /// <p>The task status to start with on the job.</p>
    pub fn get_target_task_run_status(&self) -> &::std::option::Option<crate::types::StepTargetTaskRunStatus> {
        &self.target_task_run_status
    }
    /// Adds a key-value pair to `task_run_status_counts`.
    ///
    /// To override the contents of this collection use [`set_task_run_status_counts`](Self::set_task_run_status_counts).
    ///
    /// <p>The number of tasks running on the job.</p>
    pub fn task_run_status_counts(mut self, k: crate::types::TaskRunStatus, v: i32) -> Self {
        let mut hash_map = self.task_run_status_counts.unwrap_or_default();
        hash_map.insert(k, v);
        self.task_run_status_counts = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The number of tasks running on the job.</p>
    pub fn set_task_run_status_counts(mut self, input: ::std::option::Option<::std::collections::HashMap<crate::types::TaskRunStatus, i32>>) -> Self {
        self.task_run_status_counts = input;
        self
    }
    /// <p>The number of tasks running on the job.</p>
    pub fn get_task_run_status_counts(&self) -> &::std::option::Option<::std::collections::HashMap<crate::types::TaskRunStatus, i32>> {
        &self.task_run_status_counts
    }
    /// <p>The total number of times tasks from the step failed and were retried.</p>
    pub fn task_failure_retry_count(mut self, input: i32) -> Self {
        self.task_failure_retry_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of times tasks from the step failed and were retried.</p>
    pub fn set_task_failure_retry_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.task_failure_retry_count = input;
        self
    }
    /// <p>The total number of times tasks from the step failed and were retried.</p>
    pub fn get_task_failure_retry_count(&self) -> &::std::option::Option<i32> {
        &self.task_failure_retry_count
    }
    /// <p>The date and time the resource was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time the resource was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The date and time the resource started running.</p>
    pub fn started_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource started running.</p>
    pub fn set_started_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The date and time the resource started running.</p>
    pub fn get_started_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_at
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn ended_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.ended_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn set_ended_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.ended_at = input;
        self
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn get_ended_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.ended_at
    }
    /// <p>The parameters and combination expressions for the search.</p>
    pub fn parameter_space(mut self, input: crate::types::ParameterSpace) -> Self {
        self.parameter_space = ::std::option::Option::Some(input);
        self
    }
    /// <p>The parameters and combination expressions for the search.</p>
    pub fn set_parameter_space(mut self, input: ::std::option::Option<crate::types::ParameterSpace>) -> Self {
        self.parameter_space = input;
        self
    }
    /// <p>The parameters and combination expressions for the search.</p>
    pub fn get_parameter_space(&self) -> &::std::option::Option<crate::types::ParameterSpace> {
        &self.parameter_space
    }
    /// Consumes the builder and constructs a [`StepSearchSummary`](crate::types::StepSearchSummary).
    pub fn build(self) -> crate::types::StepSearchSummary {
        crate::types::StepSearchSummary {
            step_id: self.step_id,
            job_id: self.job_id,
            queue_id: self.queue_id,
            name: self.name,
            lifecycle_status: self.lifecycle_status,
            lifecycle_status_message: self.lifecycle_status_message,
            task_run_status: self.task_run_status,
            target_task_run_status: self.target_task_run_status,
            task_run_status_counts: self.task_run_status_counts,
            task_failure_retry_count: self.task_failure_retry_count,
            created_at: self.created_at,
            started_at: self.started_at,
            ended_at: self.ended_at,
            parameter_space: self.parameter_space,
        }
    }
}
