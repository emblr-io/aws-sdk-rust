// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a queue summary.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QueueSummary {
    /// <p>The farm ID.</p>
    pub farm_id: ::std::string::String,
    /// <p>The queue ID.</p>
    pub queue_id: ::std::string::String,
    /// <p>The display name of the queue summary to update.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub display_name: ::std::string::String,
    /// <p>That status of the queue.</p>
    pub status: crate::types::QueueStatus,
    /// <p>The default action taken on a queue summary if a budget wasn't configured.</p>
    pub default_budget_action: crate::types::DefaultQueueBudgetAction,
    /// <p>The reason the queue is blocked, if applicable.</p>
    pub blocked_reason: ::std::option::Option<crate::types::QueueBlockedReason>,
    /// <p>The date and time the resource was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The user or system that created this resource.</p>
    pub created_by: ::std::string::String,
    /// <p>The date and time the resource was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The user or system that updated this resource.</p>
    pub updated_by: ::std::option::Option<::std::string::String>,
}
impl QueueSummary {
    /// <p>The farm ID.</p>
    pub fn farm_id(&self) -> &str {
        use std::ops::Deref;
        self.farm_id.deref()
    }
    /// <p>The queue ID.</p>
    pub fn queue_id(&self) -> &str {
        use std::ops::Deref;
        self.queue_id.deref()
    }
    /// <p>The display name of the queue summary to update.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn display_name(&self) -> &str {
        use std::ops::Deref;
        self.display_name.deref()
    }
    /// <p>That status of the queue.</p>
    pub fn status(&self) -> &crate::types::QueueStatus {
        &self.status
    }
    /// <p>The default action taken on a queue summary if a budget wasn't configured.</p>
    pub fn default_budget_action(&self) -> &crate::types::DefaultQueueBudgetAction {
        &self.default_budget_action
    }
    /// <p>The reason the queue is blocked, if applicable.</p>
    pub fn blocked_reason(&self) -> ::std::option::Option<&crate::types::QueueBlockedReason> {
        self.blocked_reason.as_ref()
    }
    /// <p>The date and time the resource was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The user or system that created this resource.</p>
    pub fn created_by(&self) -> &str {
        use std::ops::Deref;
        self.created_by.deref()
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn updated_by(&self) -> ::std::option::Option<&str> {
        self.updated_by.as_deref()
    }
}
impl QueueSummary {
    /// Creates a new builder-style object to manufacture [`QueueSummary`](crate::types::QueueSummary).
    pub fn builder() -> crate::types::builders::QueueSummaryBuilder {
        crate::types::builders::QueueSummaryBuilder::default()
    }
}

/// A builder for [`QueueSummary`](crate::types::QueueSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QueueSummaryBuilder {
    pub(crate) farm_id: ::std::option::Option<::std::string::String>,
    pub(crate) queue_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::QueueStatus>,
    pub(crate) default_budget_action: ::std::option::Option<crate::types::DefaultQueueBudgetAction>,
    pub(crate) blocked_reason: ::std::option::Option<crate::types::QueueBlockedReason>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_by: ::std::option::Option<::std::string::String>,
}
impl QueueSummaryBuilder {
    /// <p>The farm ID.</p>
    /// This field is required.
    pub fn farm_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.farm_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The farm ID.</p>
    pub fn set_farm_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.farm_id = input;
        self
    }
    /// <p>The farm ID.</p>
    pub fn get_farm_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.farm_id
    }
    /// <p>The queue ID.</p>
    /// This field is required.
    pub fn queue_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.queue_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The queue ID.</p>
    pub fn set_queue_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.queue_id = input;
        self
    }
    /// <p>The queue ID.</p>
    pub fn get_queue_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.queue_id
    }
    /// <p>The display name of the queue summary to update.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    /// This field is required.
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the queue summary to update.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name of the queue summary to update.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>That status of the queue.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::QueueStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>That status of the queue.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::QueueStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>That status of the queue.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::QueueStatus> {
        &self.status
    }
    /// <p>The default action taken on a queue summary if a budget wasn't configured.</p>
    /// This field is required.
    pub fn default_budget_action(mut self, input: crate::types::DefaultQueueBudgetAction) -> Self {
        self.default_budget_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default action taken on a queue summary if a budget wasn't configured.</p>
    pub fn set_default_budget_action(mut self, input: ::std::option::Option<crate::types::DefaultQueueBudgetAction>) -> Self {
        self.default_budget_action = input;
        self
    }
    /// <p>The default action taken on a queue summary if a budget wasn't configured.</p>
    pub fn get_default_budget_action(&self) -> &::std::option::Option<crate::types::DefaultQueueBudgetAction> {
        &self.default_budget_action
    }
    /// <p>The reason the queue is blocked, if applicable.</p>
    pub fn blocked_reason(mut self, input: crate::types::QueueBlockedReason) -> Self {
        self.blocked_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>The reason the queue is blocked, if applicable.</p>
    pub fn set_blocked_reason(mut self, input: ::std::option::Option<crate::types::QueueBlockedReason>) -> Self {
        self.blocked_reason = input;
        self
    }
    /// <p>The reason the queue is blocked, if applicable.</p>
    pub fn get_blocked_reason(&self) -> &::std::option::Option<crate::types::QueueBlockedReason> {
        &self.blocked_reason
    }
    /// <p>The date and time the resource was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time the resource was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The user or system that created this resource.</p>
    /// This field is required.
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user or system that created this resource.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The user or system that created this resource.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn set_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_by = input;
        self
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn get_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_by
    }
    /// Consumes the builder and constructs a [`QueueSummary`](crate::types::QueueSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`farm_id`](crate::types::builders::QueueSummaryBuilder::farm_id)
    /// - [`queue_id`](crate::types::builders::QueueSummaryBuilder::queue_id)
    /// - [`display_name`](crate::types::builders::QueueSummaryBuilder::display_name)
    /// - [`status`](crate::types::builders::QueueSummaryBuilder::status)
    /// - [`default_budget_action`](crate::types::builders::QueueSummaryBuilder::default_budget_action)
    /// - [`created_at`](crate::types::builders::QueueSummaryBuilder::created_at)
    /// - [`created_by`](crate::types::builders::QueueSummaryBuilder::created_by)
    pub fn build(self) -> ::std::result::Result<crate::types::QueueSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::QueueSummary {
            farm_id: self.farm_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "farm_id",
                    "farm_id was not specified but it is required when building QueueSummary",
                )
            })?,
            queue_id: self.queue_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "queue_id",
                    "queue_id was not specified but it is required when building QueueSummary",
                )
            })?,
            display_name: self.display_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "display_name",
                    "display_name was not specified but it is required when building QueueSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building QueueSummary",
                )
            })?,
            default_budget_action: self.default_budget_action.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "default_budget_action",
                    "default_budget_action was not specified but it is required when building QueueSummary",
                )
            })?,
            blocked_reason: self.blocked_reason,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building QueueSummary",
                )
            })?,
            created_by: self.created_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_by",
                    "created_by was not specified but it is required when building QueueSummary",
                )
            })?,
            updated_at: self.updated_at,
            updated_by: self.updated_by,
        })
    }
}
