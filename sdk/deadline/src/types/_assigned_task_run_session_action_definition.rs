// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The specific task, step, and parameters to include.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AssignedTaskRunSessionActionDefinition {
    /// <p>The task ID.</p>
    pub task_id: ::std::option::Option<::std::string::String>,
    /// <p>The step ID.</p>
    pub step_id: ::std::string::String,
    /// <p>The parameters to include.</p>
    pub parameters: ::std::collections::HashMap<::std::string::String, crate::types::TaskParameterValue>,
}
impl AssignedTaskRunSessionActionDefinition {
    /// <p>The task ID.</p>
    pub fn task_id(&self) -> ::std::option::Option<&str> {
        self.task_id.as_deref()
    }
    /// <p>The step ID.</p>
    pub fn step_id(&self) -> &str {
        use std::ops::Deref;
        self.step_id.deref()
    }
    /// <p>The parameters to include.</p>
    pub fn parameters(&self) -> &::std::collections::HashMap<::std::string::String, crate::types::TaskParameterValue> {
        &self.parameters
    }
}
impl ::std::fmt::Debug for AssignedTaskRunSessionActionDefinition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AssignedTaskRunSessionActionDefinition");
        formatter.field("task_id", &self.task_id);
        formatter.field("step_id", &self.step_id);
        formatter.field("parameters", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AssignedTaskRunSessionActionDefinition {
    /// Creates a new builder-style object to manufacture [`AssignedTaskRunSessionActionDefinition`](crate::types::AssignedTaskRunSessionActionDefinition).
    pub fn builder() -> crate::types::builders::AssignedTaskRunSessionActionDefinitionBuilder {
        crate::types::builders::AssignedTaskRunSessionActionDefinitionBuilder::default()
    }
}

/// A builder for [`AssignedTaskRunSessionActionDefinition`](crate::types::AssignedTaskRunSessionActionDefinition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AssignedTaskRunSessionActionDefinitionBuilder {
    pub(crate) task_id: ::std::option::Option<::std::string::String>,
    pub(crate) step_id: ::std::option::Option<::std::string::String>,
    pub(crate) parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::TaskParameterValue>>,
}
impl AssignedTaskRunSessionActionDefinitionBuilder {
    /// <p>The task ID.</p>
    pub fn task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The task ID.</p>
    pub fn set_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_id = input;
        self
    }
    /// <p>The task ID.</p>
    pub fn get_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_id
    }
    /// <p>The step ID.</p>
    /// This field is required.
    pub fn step_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.step_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The step ID.</p>
    pub fn set_step_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.step_id = input;
        self
    }
    /// <p>The step ID.</p>
    pub fn get_step_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.step_id
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>The parameters to include.</p>
    pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::TaskParameterValue) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The parameters to include.</p>
    pub fn set_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::TaskParameterValue>>,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// <p>The parameters to include.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::TaskParameterValue>> {
        &self.parameters
    }
    /// Consumes the builder and constructs a [`AssignedTaskRunSessionActionDefinition`](crate::types::AssignedTaskRunSessionActionDefinition).
    /// This method will fail if any of the following fields are not set:
    /// - [`step_id`](crate::types::builders::AssignedTaskRunSessionActionDefinitionBuilder::step_id)
    /// - [`parameters`](crate::types::builders::AssignedTaskRunSessionActionDefinitionBuilder::parameters)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::AssignedTaskRunSessionActionDefinition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AssignedTaskRunSessionActionDefinition {
            task_id: self.task_id,
            step_id: self.step_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "step_id",
                    "step_id was not specified but it is required when building AssignedTaskRunSessionActionDefinition",
                )
            })?,
            parameters: self.parameters.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "parameters",
                    "parameters was not specified but it is required when building AssignedTaskRunSessionActionDefinition",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for AssignedTaskRunSessionActionDefinitionBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AssignedTaskRunSessionActionDefinitionBuilder");
        formatter.field("task_id", &self.task_id);
        formatter.field("step_id", &self.step_id);
        formatter.field("parameters", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
