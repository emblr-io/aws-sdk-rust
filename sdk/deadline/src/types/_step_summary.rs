// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details for a step.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StepSummary {
    /// <p>The step ID.</p>
    pub step_id: ::std::string::String,
    /// <p>The name of the step.</p>
    pub name: ::std::string::String,
    /// <p>The life cycle status.</p>
    pub lifecycle_status: crate::types::StepLifecycleStatus,
    /// <p>A message that describes the lifecycle of the step.</p>
    pub lifecycle_status_message: ::std::option::Option<::std::string::String>,
    /// <p>The task run status for the job.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code>–pending and waiting for resources.</p></li>
    /// <li>
    /// <p><code>READY</code>–ready to process.</p></li>
    /// <li>
    /// <p><code>ASSIGNED</code>–assigned and will run next on a worker.</p></li>
    /// <li>
    /// <p><code>SCHEDULED</code>–scheduled to run on a worker.</p></li>
    /// <li>
    /// <p><code>INTERRUPTING</code>–being interrupted.</p></li>
    /// <li>
    /// <p><code>RUNNING</code>–running on a worker.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code>–the task is suspended.</p></li>
    /// <li>
    /// <p><code>CANCELED</code>–the task has been canceled.</p></li>
    /// <li>
    /// <p><code>FAILED</code>–the task has failed.</p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code>–the task has succeeded.</p></li>
    /// </ul>
    pub task_run_status: crate::types::TaskRunStatus,
    /// <p>The number of tasks running on the job.</p>
    pub task_run_status_counts: ::std::collections::HashMap<crate::types::TaskRunStatus, i32>,
    /// <p>The total number of times tasks from the step failed and were retried.</p>
    pub task_failure_retry_count: ::std::option::Option<i32>,
    /// <p>The task status to start with on the job.</p>
    pub target_task_run_status: ::std::option::Option<crate::types::StepTargetTaskRunStatus>,
    /// <p>The date and time the resource was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The user or system that created this resource.</p>
    pub created_by: ::std::string::String,
    /// <p>The date and time the resource was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The user or system that updated this resource.</p>
    pub updated_by: ::std::option::Option<::std::string::String>,
    /// <p>The date and time the resource started running.</p>
    pub started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time the resource ended running.</p>
    pub ended_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The number of dependencies for the step.</p>
    pub dependency_counts: ::std::option::Option<crate::types::DependencyCounts>,
}
impl StepSummary {
    /// <p>The step ID.</p>
    pub fn step_id(&self) -> &str {
        use std::ops::Deref;
        self.step_id.deref()
    }
    /// <p>The name of the step.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The life cycle status.</p>
    pub fn lifecycle_status(&self) -> &crate::types::StepLifecycleStatus {
        &self.lifecycle_status
    }
    /// <p>A message that describes the lifecycle of the step.</p>
    pub fn lifecycle_status_message(&self) -> ::std::option::Option<&str> {
        self.lifecycle_status_message.as_deref()
    }
    /// <p>The task run status for the job.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code>–pending and waiting for resources.</p></li>
    /// <li>
    /// <p><code>READY</code>–ready to process.</p></li>
    /// <li>
    /// <p><code>ASSIGNED</code>–assigned and will run next on a worker.</p></li>
    /// <li>
    /// <p><code>SCHEDULED</code>–scheduled to run on a worker.</p></li>
    /// <li>
    /// <p><code>INTERRUPTING</code>–being interrupted.</p></li>
    /// <li>
    /// <p><code>RUNNING</code>–running on a worker.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code>–the task is suspended.</p></li>
    /// <li>
    /// <p><code>CANCELED</code>–the task has been canceled.</p></li>
    /// <li>
    /// <p><code>FAILED</code>–the task has failed.</p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code>–the task has succeeded.</p></li>
    /// </ul>
    pub fn task_run_status(&self) -> &crate::types::TaskRunStatus {
        &self.task_run_status
    }
    /// <p>The number of tasks running on the job.</p>
    pub fn task_run_status_counts(&self) -> &::std::collections::HashMap<crate::types::TaskRunStatus, i32> {
        &self.task_run_status_counts
    }
    /// <p>The total number of times tasks from the step failed and were retried.</p>
    pub fn task_failure_retry_count(&self) -> ::std::option::Option<i32> {
        self.task_failure_retry_count
    }
    /// <p>The task status to start with on the job.</p>
    pub fn target_task_run_status(&self) -> ::std::option::Option<&crate::types::StepTargetTaskRunStatus> {
        self.target_task_run_status.as_ref()
    }
    /// <p>The date and time the resource was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The user or system that created this resource.</p>
    pub fn created_by(&self) -> &str {
        use std::ops::Deref;
        self.created_by.deref()
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn updated_by(&self) -> ::std::option::Option<&str> {
        self.updated_by.as_deref()
    }
    /// <p>The date and time the resource started running.</p>
    pub fn started_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.started_at.as_ref()
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn ended_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.ended_at.as_ref()
    }
    /// <p>The number of dependencies for the step.</p>
    pub fn dependency_counts(&self) -> ::std::option::Option<&crate::types::DependencyCounts> {
        self.dependency_counts.as_ref()
    }
}
impl StepSummary {
    /// Creates a new builder-style object to manufacture [`StepSummary`](crate::types::StepSummary).
    pub fn builder() -> crate::types::builders::StepSummaryBuilder {
        crate::types::builders::StepSummaryBuilder::default()
    }
}

/// A builder for [`StepSummary`](crate::types::StepSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StepSummaryBuilder {
    pub(crate) step_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) lifecycle_status: ::std::option::Option<crate::types::StepLifecycleStatus>,
    pub(crate) lifecycle_status_message: ::std::option::Option<::std::string::String>,
    pub(crate) task_run_status: ::std::option::Option<crate::types::TaskRunStatus>,
    pub(crate) task_run_status_counts: ::std::option::Option<::std::collections::HashMap<crate::types::TaskRunStatus, i32>>,
    pub(crate) task_failure_retry_count: ::std::option::Option<i32>,
    pub(crate) target_task_run_status: ::std::option::Option<crate::types::StepTargetTaskRunStatus>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_by: ::std::option::Option<::std::string::String>,
    pub(crate) started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) ended_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) dependency_counts: ::std::option::Option<crate::types::DependencyCounts>,
}
impl StepSummaryBuilder {
    /// <p>The step ID.</p>
    /// This field is required.
    pub fn step_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.step_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The step ID.</p>
    pub fn set_step_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.step_id = input;
        self
    }
    /// <p>The step ID.</p>
    pub fn get_step_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.step_id
    }
    /// <p>The name of the step.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the step.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the step.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The life cycle status.</p>
    /// This field is required.
    pub fn lifecycle_status(mut self, input: crate::types::StepLifecycleStatus) -> Self {
        self.lifecycle_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The life cycle status.</p>
    pub fn set_lifecycle_status(mut self, input: ::std::option::Option<crate::types::StepLifecycleStatus>) -> Self {
        self.lifecycle_status = input;
        self
    }
    /// <p>The life cycle status.</p>
    pub fn get_lifecycle_status(&self) -> &::std::option::Option<crate::types::StepLifecycleStatus> {
        &self.lifecycle_status
    }
    /// <p>A message that describes the lifecycle of the step.</p>
    pub fn lifecycle_status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lifecycle_status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message that describes the lifecycle of the step.</p>
    pub fn set_lifecycle_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lifecycle_status_message = input;
        self
    }
    /// <p>A message that describes the lifecycle of the step.</p>
    pub fn get_lifecycle_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.lifecycle_status_message
    }
    /// <p>The task run status for the job.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code>–pending and waiting for resources.</p></li>
    /// <li>
    /// <p><code>READY</code>–ready to process.</p></li>
    /// <li>
    /// <p><code>ASSIGNED</code>–assigned and will run next on a worker.</p></li>
    /// <li>
    /// <p><code>SCHEDULED</code>–scheduled to run on a worker.</p></li>
    /// <li>
    /// <p><code>INTERRUPTING</code>–being interrupted.</p></li>
    /// <li>
    /// <p><code>RUNNING</code>–running on a worker.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code>–the task is suspended.</p></li>
    /// <li>
    /// <p><code>CANCELED</code>–the task has been canceled.</p></li>
    /// <li>
    /// <p><code>FAILED</code>–the task has failed.</p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code>–the task has succeeded.</p></li>
    /// </ul>
    /// This field is required.
    pub fn task_run_status(mut self, input: crate::types::TaskRunStatus) -> Self {
        self.task_run_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The task run status for the job.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code>–pending and waiting for resources.</p></li>
    /// <li>
    /// <p><code>READY</code>–ready to process.</p></li>
    /// <li>
    /// <p><code>ASSIGNED</code>–assigned and will run next on a worker.</p></li>
    /// <li>
    /// <p><code>SCHEDULED</code>–scheduled to run on a worker.</p></li>
    /// <li>
    /// <p><code>INTERRUPTING</code>–being interrupted.</p></li>
    /// <li>
    /// <p><code>RUNNING</code>–running on a worker.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code>–the task is suspended.</p></li>
    /// <li>
    /// <p><code>CANCELED</code>–the task has been canceled.</p></li>
    /// <li>
    /// <p><code>FAILED</code>–the task has failed.</p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code>–the task has succeeded.</p></li>
    /// </ul>
    pub fn set_task_run_status(mut self, input: ::std::option::Option<crate::types::TaskRunStatus>) -> Self {
        self.task_run_status = input;
        self
    }
    /// <p>The task run status for the job.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code>–pending and waiting for resources.</p></li>
    /// <li>
    /// <p><code>READY</code>–ready to process.</p></li>
    /// <li>
    /// <p><code>ASSIGNED</code>–assigned and will run next on a worker.</p></li>
    /// <li>
    /// <p><code>SCHEDULED</code>–scheduled to run on a worker.</p></li>
    /// <li>
    /// <p><code>INTERRUPTING</code>–being interrupted.</p></li>
    /// <li>
    /// <p><code>RUNNING</code>–running on a worker.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code>–the task is suspended.</p></li>
    /// <li>
    /// <p><code>CANCELED</code>–the task has been canceled.</p></li>
    /// <li>
    /// <p><code>FAILED</code>–the task has failed.</p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code>–the task has succeeded.</p></li>
    /// </ul>
    pub fn get_task_run_status(&self) -> &::std::option::Option<crate::types::TaskRunStatus> {
        &self.task_run_status
    }
    /// Adds a key-value pair to `task_run_status_counts`.
    ///
    /// To override the contents of this collection use [`set_task_run_status_counts`](Self::set_task_run_status_counts).
    ///
    /// <p>The number of tasks running on the job.</p>
    pub fn task_run_status_counts(mut self, k: crate::types::TaskRunStatus, v: i32) -> Self {
        let mut hash_map = self.task_run_status_counts.unwrap_or_default();
        hash_map.insert(k, v);
        self.task_run_status_counts = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The number of tasks running on the job.</p>
    pub fn set_task_run_status_counts(mut self, input: ::std::option::Option<::std::collections::HashMap<crate::types::TaskRunStatus, i32>>) -> Self {
        self.task_run_status_counts = input;
        self
    }
    /// <p>The number of tasks running on the job.</p>
    pub fn get_task_run_status_counts(&self) -> &::std::option::Option<::std::collections::HashMap<crate::types::TaskRunStatus, i32>> {
        &self.task_run_status_counts
    }
    /// <p>The total number of times tasks from the step failed and were retried.</p>
    pub fn task_failure_retry_count(mut self, input: i32) -> Self {
        self.task_failure_retry_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of times tasks from the step failed and were retried.</p>
    pub fn set_task_failure_retry_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.task_failure_retry_count = input;
        self
    }
    /// <p>The total number of times tasks from the step failed and were retried.</p>
    pub fn get_task_failure_retry_count(&self) -> &::std::option::Option<i32> {
        &self.task_failure_retry_count
    }
    /// <p>The task status to start with on the job.</p>
    pub fn target_task_run_status(mut self, input: crate::types::StepTargetTaskRunStatus) -> Self {
        self.target_task_run_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The task status to start with on the job.</p>
    pub fn set_target_task_run_status(mut self, input: ::std::option::Option<crate::types::StepTargetTaskRunStatus>) -> Self {
        self.target_task_run_status = input;
        self
    }
    /// <p>The task status to start with on the job.</p>
    pub fn get_target_task_run_status(&self) -> &::std::option::Option<crate::types::StepTargetTaskRunStatus> {
        &self.target_task_run_status
    }
    /// <p>The date and time the resource was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time the resource was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The user or system that created this resource.</p>
    /// This field is required.
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user or system that created this resource.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The user or system that created this resource.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn set_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_by = input;
        self
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn get_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_by
    }
    /// <p>The date and time the resource started running.</p>
    pub fn started_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource started running.</p>
    pub fn set_started_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The date and time the resource started running.</p>
    pub fn get_started_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_at
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn ended_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.ended_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn set_ended_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.ended_at = input;
        self
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn get_ended_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.ended_at
    }
    /// <p>The number of dependencies for the step.</p>
    pub fn dependency_counts(mut self, input: crate::types::DependencyCounts) -> Self {
        self.dependency_counts = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of dependencies for the step.</p>
    pub fn set_dependency_counts(mut self, input: ::std::option::Option<crate::types::DependencyCounts>) -> Self {
        self.dependency_counts = input;
        self
    }
    /// <p>The number of dependencies for the step.</p>
    pub fn get_dependency_counts(&self) -> &::std::option::Option<crate::types::DependencyCounts> {
        &self.dependency_counts
    }
    /// Consumes the builder and constructs a [`StepSummary`](crate::types::StepSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`step_id`](crate::types::builders::StepSummaryBuilder::step_id)
    /// - [`name`](crate::types::builders::StepSummaryBuilder::name)
    /// - [`lifecycle_status`](crate::types::builders::StepSummaryBuilder::lifecycle_status)
    /// - [`task_run_status`](crate::types::builders::StepSummaryBuilder::task_run_status)
    /// - [`task_run_status_counts`](crate::types::builders::StepSummaryBuilder::task_run_status_counts)
    /// - [`created_at`](crate::types::builders::StepSummaryBuilder::created_at)
    /// - [`created_by`](crate::types::builders::StepSummaryBuilder::created_by)
    pub fn build(self) -> ::std::result::Result<crate::types::StepSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::StepSummary {
            step_id: self.step_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "step_id",
                    "step_id was not specified but it is required when building StepSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building StepSummary",
                )
            })?,
            lifecycle_status: self.lifecycle_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "lifecycle_status",
                    "lifecycle_status was not specified but it is required when building StepSummary",
                )
            })?,
            lifecycle_status_message: self.lifecycle_status_message,
            task_run_status: self.task_run_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "task_run_status",
                    "task_run_status was not specified but it is required when building StepSummary",
                )
            })?,
            task_run_status_counts: self.task_run_status_counts.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "task_run_status_counts",
                    "task_run_status_counts was not specified but it is required when building StepSummary",
                )
            })?,
            task_failure_retry_count: self.task_failure_retry_count,
            target_task_run_status: self.target_task_run_status,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building StepSummary",
                )
            })?,
            created_by: self.created_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_by",
                    "created_by was not specified but it is required when building StepSummary",
                )
            })?,
            updated_at: self.updated_at,
            updated_by: self.updated_by,
            started_at: self.started_at,
            ended_at: self.ended_at,
            dependency_counts: self.dependency_counts,
        })
    }
}
