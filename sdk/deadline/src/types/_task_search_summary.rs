// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a task search.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TaskSearchSummary {
    /// <p>The task ID.</p>
    pub task_id: ::std::option::Option<::std::string::String>,
    /// <p>The step ID.</p>
    pub step_id: ::std::option::Option<::std::string::String>,
    /// <p>The job ID.</p>
    pub job_id: ::std::option::Option<::std::string::String>,
    /// <p>The queue ID.</p>
    pub queue_id: ::std::option::Option<::std::string::String>,
    /// <p>The run status of the task.</p>
    pub run_status: ::std::option::Option<crate::types::TaskRunStatus>,
    /// <p>The run status that the task is being updated to.</p>
    pub target_run_status: ::std::option::Option<crate::types::TaskTargetRunStatus>,
    /// <p>The parameters to search for.</p>
    pub parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::TaskParameterValue>>,
    /// <p>The number of times that the task failed and was retried.</p>
    pub failure_retry_count: ::std::option::Option<i32>,
    /// <p>The date and time the resource started running.</p>
    pub started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time the resource ended running.</p>
    pub ended_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl TaskSearchSummary {
    /// <p>The task ID.</p>
    pub fn task_id(&self) -> ::std::option::Option<&str> {
        self.task_id.as_deref()
    }
    /// <p>The step ID.</p>
    pub fn step_id(&self) -> ::std::option::Option<&str> {
        self.step_id.as_deref()
    }
    /// <p>The job ID.</p>
    pub fn job_id(&self) -> ::std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The queue ID.</p>
    pub fn queue_id(&self) -> ::std::option::Option<&str> {
        self.queue_id.as_deref()
    }
    /// <p>The run status of the task.</p>
    pub fn run_status(&self) -> ::std::option::Option<&crate::types::TaskRunStatus> {
        self.run_status.as_ref()
    }
    /// <p>The run status that the task is being updated to.</p>
    pub fn target_run_status(&self) -> ::std::option::Option<&crate::types::TaskTargetRunStatus> {
        self.target_run_status.as_ref()
    }
    /// <p>The parameters to search for.</p>
    pub fn parameters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::TaskParameterValue>> {
        self.parameters.as_ref()
    }
    /// <p>The number of times that the task failed and was retried.</p>
    pub fn failure_retry_count(&self) -> ::std::option::Option<i32> {
        self.failure_retry_count
    }
    /// <p>The date and time the resource started running.</p>
    pub fn started_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.started_at.as_ref()
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn ended_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.ended_at.as_ref()
    }
}
impl ::std::fmt::Debug for TaskSearchSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TaskSearchSummary");
        formatter.field("task_id", &self.task_id);
        formatter.field("step_id", &self.step_id);
        formatter.field("job_id", &self.job_id);
        formatter.field("queue_id", &self.queue_id);
        formatter.field("run_status", &self.run_status);
        formatter.field("target_run_status", &self.target_run_status);
        formatter.field("parameters", &"*** Sensitive Data Redacted ***");
        formatter.field("failure_retry_count", &self.failure_retry_count);
        formatter.field("started_at", &self.started_at);
        formatter.field("ended_at", &self.ended_at);
        formatter.finish()
    }
}
impl TaskSearchSummary {
    /// Creates a new builder-style object to manufacture [`TaskSearchSummary`](crate::types::TaskSearchSummary).
    pub fn builder() -> crate::types::builders::TaskSearchSummaryBuilder {
        crate::types::builders::TaskSearchSummaryBuilder::default()
    }
}

/// A builder for [`TaskSearchSummary`](crate::types::TaskSearchSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct TaskSearchSummaryBuilder {
    pub(crate) task_id: ::std::option::Option<::std::string::String>,
    pub(crate) step_id: ::std::option::Option<::std::string::String>,
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) queue_id: ::std::option::Option<::std::string::String>,
    pub(crate) run_status: ::std::option::Option<crate::types::TaskRunStatus>,
    pub(crate) target_run_status: ::std::option::Option<crate::types::TaskTargetRunStatus>,
    pub(crate) parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::TaskParameterValue>>,
    pub(crate) failure_retry_count: ::std::option::Option<i32>,
    pub(crate) started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) ended_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl TaskSearchSummaryBuilder {
    /// <p>The task ID.</p>
    pub fn task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The task ID.</p>
    pub fn set_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_id = input;
        self
    }
    /// <p>The task ID.</p>
    pub fn get_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_id
    }
    /// <p>The step ID.</p>
    pub fn step_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.step_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The step ID.</p>
    pub fn set_step_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.step_id = input;
        self
    }
    /// <p>The step ID.</p>
    pub fn get_step_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.step_id
    }
    /// <p>The job ID.</p>
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job ID.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The job ID.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>The queue ID.</p>
    pub fn queue_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.queue_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The queue ID.</p>
    pub fn set_queue_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.queue_id = input;
        self
    }
    /// <p>The queue ID.</p>
    pub fn get_queue_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.queue_id
    }
    /// <p>The run status of the task.</p>
    pub fn run_status(mut self, input: crate::types::TaskRunStatus) -> Self {
        self.run_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The run status of the task.</p>
    pub fn set_run_status(mut self, input: ::std::option::Option<crate::types::TaskRunStatus>) -> Self {
        self.run_status = input;
        self
    }
    /// <p>The run status of the task.</p>
    pub fn get_run_status(&self) -> &::std::option::Option<crate::types::TaskRunStatus> {
        &self.run_status
    }
    /// <p>The run status that the task is being updated to.</p>
    pub fn target_run_status(mut self, input: crate::types::TaskTargetRunStatus) -> Self {
        self.target_run_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The run status that the task is being updated to.</p>
    pub fn set_target_run_status(mut self, input: ::std::option::Option<crate::types::TaskTargetRunStatus>) -> Self {
        self.target_run_status = input;
        self
    }
    /// <p>The run status that the task is being updated to.</p>
    pub fn get_target_run_status(&self) -> &::std::option::Option<crate::types::TaskTargetRunStatus> {
        &self.target_run_status
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>The parameters to search for.</p>
    pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::TaskParameterValue) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The parameters to search for.</p>
    pub fn set_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::TaskParameterValue>>,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// <p>The parameters to search for.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::TaskParameterValue>> {
        &self.parameters
    }
    /// <p>The number of times that the task failed and was retried.</p>
    pub fn failure_retry_count(mut self, input: i32) -> Self {
        self.failure_retry_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of times that the task failed and was retried.</p>
    pub fn set_failure_retry_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.failure_retry_count = input;
        self
    }
    /// <p>The number of times that the task failed and was retried.</p>
    pub fn get_failure_retry_count(&self) -> &::std::option::Option<i32> {
        &self.failure_retry_count
    }
    /// <p>The date and time the resource started running.</p>
    pub fn started_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource started running.</p>
    pub fn set_started_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The date and time the resource started running.</p>
    pub fn get_started_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_at
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn ended_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.ended_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn set_ended_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.ended_at = input;
        self
    }
    /// <p>The date and time the resource ended running.</p>
    pub fn get_ended_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.ended_at
    }
    /// Consumes the builder and constructs a [`TaskSearchSummary`](crate::types::TaskSearchSummary).
    pub fn build(self) -> crate::types::TaskSearchSummary {
        crate::types::TaskSearchSummary {
            task_id: self.task_id,
            step_id: self.step_id,
            job_id: self.job_id,
            queue_id: self.queue_id,
            run_status: self.run_status,
            target_run_status: self.target_run_status,
            parameters: self.parameters,
            failure_retry_count: self.failure_retry_count,
            started_at: self.started_at,
            ended_at: self.ended_at,
        }
    }
}
impl ::std::fmt::Debug for TaskSearchSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TaskSearchSummaryBuilder");
        formatter.field("task_id", &self.task_id);
        formatter.field("step_id", &self.step_id);
        formatter.field("job_id", &self.job_id);
        formatter.field("queue_id", &self.queue_id);
        formatter.field("run_status", &self.run_status);
        formatter.field("target_run_status", &self.target_run_status);
        formatter.field("parameters", &"*** Sensitive Data Redacted ***");
        formatter.field("failure_retry_count", &self.failure_retry_count);
        formatter.field("started_at", &self.started_at);
        formatter.field("ended_at", &self.ended_at);
        formatter.finish()
    }
}
