// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the manifest that links a job's source information.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ManifestProperties {
    /// <p>The file system location name.</p>
    pub file_system_location_name: ::std::option::Option<::std::string::String>,
    /// <p>The file's root path.</p>
    pub root_path: ::std::string::String,
    /// <p>The format of the root path.</p>
    pub root_path_format: crate::types::PathFormat,
    /// <p>The file path relative to the directory.</p>
    pub output_relative_directories: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The file path.</p>
    pub input_manifest_path: ::std::option::Option<::std::string::String>,
    /// <p>The hash value of the file.</p>
    pub input_manifest_hash: ::std::option::Option<::std::string::String>,
}
impl ManifestProperties {
    /// <p>The file system location name.</p>
    pub fn file_system_location_name(&self) -> ::std::option::Option<&str> {
        self.file_system_location_name.as_deref()
    }
    /// <p>The file's root path.</p>
    pub fn root_path(&self) -> &str {
        use std::ops::Deref;
        self.root_path.deref()
    }
    /// <p>The format of the root path.</p>
    pub fn root_path_format(&self) -> &crate::types::PathFormat {
        &self.root_path_format
    }
    /// <p>The file path relative to the directory.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.output_relative_directories.is_none()`.
    pub fn output_relative_directories(&self) -> &[::std::string::String] {
        self.output_relative_directories.as_deref().unwrap_or_default()
    }
    /// <p>The file path.</p>
    pub fn input_manifest_path(&self) -> ::std::option::Option<&str> {
        self.input_manifest_path.as_deref()
    }
    /// <p>The hash value of the file.</p>
    pub fn input_manifest_hash(&self) -> ::std::option::Option<&str> {
        self.input_manifest_hash.as_deref()
    }
}
impl ::std::fmt::Debug for ManifestProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ManifestProperties");
        formatter.field("file_system_location_name", &"*** Sensitive Data Redacted ***");
        formatter.field("root_path", &"*** Sensitive Data Redacted ***");
        formatter.field("root_path_format", &"*** Sensitive Data Redacted ***");
        formatter.field("output_relative_directories", &"*** Sensitive Data Redacted ***");
        formatter.field("input_manifest_path", &"*** Sensitive Data Redacted ***");
        formatter.field("input_manifest_hash", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ManifestProperties {
    /// Creates a new builder-style object to manufacture [`ManifestProperties`](crate::types::ManifestProperties).
    pub fn builder() -> crate::types::builders::ManifestPropertiesBuilder {
        crate::types::builders::ManifestPropertiesBuilder::default()
    }
}

/// A builder for [`ManifestProperties`](crate::types::ManifestProperties).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ManifestPropertiesBuilder {
    pub(crate) file_system_location_name: ::std::option::Option<::std::string::String>,
    pub(crate) root_path: ::std::option::Option<::std::string::String>,
    pub(crate) root_path_format: ::std::option::Option<crate::types::PathFormat>,
    pub(crate) output_relative_directories: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) input_manifest_path: ::std::option::Option<::std::string::String>,
    pub(crate) input_manifest_hash: ::std::option::Option<::std::string::String>,
}
impl ManifestPropertiesBuilder {
    /// <p>The file system location name.</p>
    pub fn file_system_location_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_system_location_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The file system location name.</p>
    pub fn set_file_system_location_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_system_location_name = input;
        self
    }
    /// <p>The file system location name.</p>
    pub fn get_file_system_location_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_system_location_name
    }
    /// <p>The file's root path.</p>
    /// This field is required.
    pub fn root_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.root_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The file's root path.</p>
    pub fn set_root_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.root_path = input;
        self
    }
    /// <p>The file's root path.</p>
    pub fn get_root_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.root_path
    }
    /// <p>The format of the root path.</p>
    /// This field is required.
    pub fn root_path_format(mut self, input: crate::types::PathFormat) -> Self {
        self.root_path_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format of the root path.</p>
    pub fn set_root_path_format(mut self, input: ::std::option::Option<crate::types::PathFormat>) -> Self {
        self.root_path_format = input;
        self
    }
    /// <p>The format of the root path.</p>
    pub fn get_root_path_format(&self) -> &::std::option::Option<crate::types::PathFormat> {
        &self.root_path_format
    }
    /// Appends an item to `output_relative_directories`.
    ///
    /// To override the contents of this collection use [`set_output_relative_directories`](Self::set_output_relative_directories).
    ///
    /// <p>The file path relative to the directory.</p>
    pub fn output_relative_directories(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.output_relative_directories.unwrap_or_default();
        v.push(input.into());
        self.output_relative_directories = ::std::option::Option::Some(v);
        self
    }
    /// <p>The file path relative to the directory.</p>
    pub fn set_output_relative_directories(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.output_relative_directories = input;
        self
    }
    /// <p>The file path relative to the directory.</p>
    pub fn get_output_relative_directories(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.output_relative_directories
    }
    /// <p>The file path.</p>
    pub fn input_manifest_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_manifest_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The file path.</p>
    pub fn set_input_manifest_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_manifest_path = input;
        self
    }
    /// <p>The file path.</p>
    pub fn get_input_manifest_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_manifest_path
    }
    /// <p>The hash value of the file.</p>
    pub fn input_manifest_hash(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_manifest_hash = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hash value of the file.</p>
    pub fn set_input_manifest_hash(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_manifest_hash = input;
        self
    }
    /// <p>The hash value of the file.</p>
    pub fn get_input_manifest_hash(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_manifest_hash
    }
    /// Consumes the builder and constructs a [`ManifestProperties`](crate::types::ManifestProperties).
    /// This method will fail if any of the following fields are not set:
    /// - [`root_path`](crate::types::builders::ManifestPropertiesBuilder::root_path)
    /// - [`root_path_format`](crate::types::builders::ManifestPropertiesBuilder::root_path_format)
    pub fn build(self) -> ::std::result::Result<crate::types::ManifestProperties, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ManifestProperties {
            file_system_location_name: self.file_system_location_name,
            root_path: self.root_path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "root_path",
                    "root_path was not specified but it is required when building ManifestProperties",
                )
            })?,
            root_path_format: self.root_path_format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "root_path_format",
                    "root_path_format was not specified but it is required when building ManifestProperties",
                )
            })?,
            output_relative_directories: self.output_relative_directories,
            input_manifest_path: self.input_manifest_path,
            input_manifest_hash: self.input_manifest_hash,
        })
    }
}
impl ::std::fmt::Debug for ManifestPropertiesBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ManifestPropertiesBuilder");
        formatter.field("file_system_location_name", &"*** Sensitive Data Redacted ***");
        formatter.field("root_path", &"*** Sensitive Data Redacted ***");
        formatter.field("root_path_format", &"*** Sensitive Data Redacted ***");
        formatter.field("output_relative_directories", &"*** Sensitive Data Redacted ***");
        formatter.field("input_manifest_path", &"*** Sensitive Data Redacted ***");
        formatter.field("input_manifest_hash", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
