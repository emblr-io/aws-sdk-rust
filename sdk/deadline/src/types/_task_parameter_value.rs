// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The data types for the task parameters.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub enum TaskParameterValue {
    /// <p>A double precision IEEE-754 floating point number represented as a string.</p>
    Float(::std::string::String),
    /// <p>A signed integer represented as a string.</p>
    Int(::std::string::String),
    /// <p>A file system path represented as a string.</p>
    Path(::std::string::String),
    /// <p>A UTF-8 string.</p>
    String(::std::string::String),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl TaskParameterValue {
    /// Tries to convert the enum instance into [`Float`](crate::types::TaskParameterValue::Float), extracting the inner [`String`](::std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_float(&self) -> ::std::result::Result<&::std::string::String, &Self> {
        if let TaskParameterValue::Float(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Float`](crate::types::TaskParameterValue::Float).
    pub fn is_float(&self) -> bool {
        self.as_float().is_ok()
    }
    /// Tries to convert the enum instance into [`Int`](crate::types::TaskParameterValue::Int), extracting the inner [`String`](::std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_int(&self) -> ::std::result::Result<&::std::string::String, &Self> {
        if let TaskParameterValue::Int(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Int`](crate::types::TaskParameterValue::Int).
    pub fn is_int(&self) -> bool {
        self.as_int().is_ok()
    }
    /// Tries to convert the enum instance into [`Path`](crate::types::TaskParameterValue::Path), extracting the inner [`String`](::std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_path(&self) -> ::std::result::Result<&::std::string::String, &Self> {
        if let TaskParameterValue::Path(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Path`](crate::types::TaskParameterValue::Path).
    pub fn is_path(&self) -> bool {
        self.as_path().is_ok()
    }
    /// Tries to convert the enum instance into [`String`](crate::types::TaskParameterValue::String), extracting the inner [`String`](::std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_string(&self) -> ::std::result::Result<&::std::string::String, &Self> {
        if let TaskParameterValue::String(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`String`](crate::types::TaskParameterValue::String).
    pub fn is_string(&self) -> bool {
        self.as_string().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
impl ::std::fmt::Debug for TaskParameterValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::std::write!(f, "*** Sensitive Data Redacted ***")
    }
}
