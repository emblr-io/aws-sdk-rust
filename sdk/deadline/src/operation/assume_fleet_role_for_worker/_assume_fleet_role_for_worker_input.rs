// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssumeFleetRoleForWorkerInput {
    /// <p>The farm ID for the fleet's farm.</p>
    pub farm_id: ::std::option::Option<::std::string::String>,
    /// <p>The fleet ID that contains the worker.</p>
    pub fleet_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the worker assuming the fleet role.</p>
    pub worker_id: ::std::option::Option<::std::string::String>,
}
impl AssumeFleetRoleForWorkerInput {
    /// <p>The farm ID for the fleet's farm.</p>
    pub fn farm_id(&self) -> ::std::option::Option<&str> {
        self.farm_id.as_deref()
    }
    /// <p>The fleet ID that contains the worker.</p>
    pub fn fleet_id(&self) -> ::std::option::Option<&str> {
        self.fleet_id.as_deref()
    }
    /// <p>The ID of the worker assuming the fleet role.</p>
    pub fn worker_id(&self) -> ::std::option::Option<&str> {
        self.worker_id.as_deref()
    }
}
impl AssumeFleetRoleForWorkerInput {
    /// Creates a new builder-style object to manufacture [`AssumeFleetRoleForWorkerInput`](crate::operation::assume_fleet_role_for_worker::AssumeFleetRoleForWorkerInput).
    pub fn builder() -> crate::operation::assume_fleet_role_for_worker::builders::AssumeFleetRoleForWorkerInputBuilder {
        crate::operation::assume_fleet_role_for_worker::builders::AssumeFleetRoleForWorkerInputBuilder::default()
    }
}

/// A builder for [`AssumeFleetRoleForWorkerInput`](crate::operation::assume_fleet_role_for_worker::AssumeFleetRoleForWorkerInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssumeFleetRoleForWorkerInputBuilder {
    pub(crate) farm_id: ::std::option::Option<::std::string::String>,
    pub(crate) fleet_id: ::std::option::Option<::std::string::String>,
    pub(crate) worker_id: ::std::option::Option<::std::string::String>,
}
impl AssumeFleetRoleForWorkerInputBuilder {
    /// <p>The farm ID for the fleet's farm.</p>
    /// This field is required.
    pub fn farm_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.farm_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The farm ID for the fleet's farm.</p>
    pub fn set_farm_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.farm_id = input;
        self
    }
    /// <p>The farm ID for the fleet's farm.</p>
    pub fn get_farm_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.farm_id
    }
    /// <p>The fleet ID that contains the worker.</p>
    /// This field is required.
    pub fn fleet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fleet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The fleet ID that contains the worker.</p>
    pub fn set_fleet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fleet_id = input;
        self
    }
    /// <p>The fleet ID that contains the worker.</p>
    pub fn get_fleet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.fleet_id
    }
    /// <p>The ID of the worker assuming the fleet role.</p>
    /// This field is required.
    pub fn worker_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.worker_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the worker assuming the fleet role.</p>
    pub fn set_worker_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.worker_id = input;
        self
    }
    /// <p>The ID of the worker assuming the fleet role.</p>
    pub fn get_worker_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.worker_id
    }
    /// Consumes the builder and constructs a [`AssumeFleetRoleForWorkerInput`](crate::operation::assume_fleet_role_for_worker::AssumeFleetRoleForWorkerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::assume_fleet_role_for_worker::AssumeFleetRoleForWorkerInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::assume_fleet_role_for_worker::AssumeFleetRoleForWorkerInput {
            farm_id: self.farm_id,
            fleet_id: self.fleet_id,
            worker_id: self.worker_id,
        })
    }
}
