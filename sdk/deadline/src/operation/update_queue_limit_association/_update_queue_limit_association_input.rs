// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateQueueLimitAssociationInput {
    /// <p>The unique identifier of the farm that contains the associated queues and limits.</p>
    pub farm_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the queue associated to the limit.</p>
    pub queue_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the limit associated to the queue.</p>
    pub limit_id: ::std::option::Option<::std::string::String>,
    /// <p>Sets the status of the limit. You can mark the limit active, or you can stop usage of the limit and either complete existing tasks or cancel any existing tasks immediately.</p>
    pub status: ::std::option::Option<crate::types::UpdateQueueLimitAssociationStatus>,
}
impl UpdateQueueLimitAssociationInput {
    /// <p>The unique identifier of the farm that contains the associated queues and limits.</p>
    pub fn farm_id(&self) -> ::std::option::Option<&str> {
        self.farm_id.as_deref()
    }
    /// <p>The unique identifier of the queue associated to the limit.</p>
    pub fn queue_id(&self) -> ::std::option::Option<&str> {
        self.queue_id.as_deref()
    }
    /// <p>The unique identifier of the limit associated to the queue.</p>
    pub fn limit_id(&self) -> ::std::option::Option<&str> {
        self.limit_id.as_deref()
    }
    /// <p>Sets the status of the limit. You can mark the limit active, or you can stop usage of the limit and either complete existing tasks or cancel any existing tasks immediately.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::UpdateQueueLimitAssociationStatus> {
        self.status.as_ref()
    }
}
impl UpdateQueueLimitAssociationInput {
    /// Creates a new builder-style object to manufacture [`UpdateQueueLimitAssociationInput`](crate::operation::update_queue_limit_association::UpdateQueueLimitAssociationInput).
    pub fn builder() -> crate::operation::update_queue_limit_association::builders::UpdateQueueLimitAssociationInputBuilder {
        crate::operation::update_queue_limit_association::builders::UpdateQueueLimitAssociationInputBuilder::default()
    }
}

/// A builder for [`UpdateQueueLimitAssociationInput`](crate::operation::update_queue_limit_association::UpdateQueueLimitAssociationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateQueueLimitAssociationInputBuilder {
    pub(crate) farm_id: ::std::option::Option<::std::string::String>,
    pub(crate) queue_id: ::std::option::Option<::std::string::String>,
    pub(crate) limit_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::UpdateQueueLimitAssociationStatus>,
}
impl UpdateQueueLimitAssociationInputBuilder {
    /// <p>The unique identifier of the farm that contains the associated queues and limits.</p>
    /// This field is required.
    pub fn farm_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.farm_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the farm that contains the associated queues and limits.</p>
    pub fn set_farm_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.farm_id = input;
        self
    }
    /// <p>The unique identifier of the farm that contains the associated queues and limits.</p>
    pub fn get_farm_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.farm_id
    }
    /// <p>The unique identifier of the queue associated to the limit.</p>
    /// This field is required.
    pub fn queue_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.queue_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the queue associated to the limit.</p>
    pub fn set_queue_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.queue_id = input;
        self
    }
    /// <p>The unique identifier of the queue associated to the limit.</p>
    pub fn get_queue_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.queue_id
    }
    /// <p>The unique identifier of the limit associated to the queue.</p>
    /// This field is required.
    pub fn limit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.limit_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the limit associated to the queue.</p>
    pub fn set_limit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.limit_id = input;
        self
    }
    /// <p>The unique identifier of the limit associated to the queue.</p>
    pub fn get_limit_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.limit_id
    }
    /// <p>Sets the status of the limit. You can mark the limit active, or you can stop usage of the limit and either complete existing tasks or cancel any existing tasks immediately.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::UpdateQueueLimitAssociationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sets the status of the limit. You can mark the limit active, or you can stop usage of the limit and either complete existing tasks or cancel any existing tasks immediately.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::UpdateQueueLimitAssociationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Sets the status of the limit. You can mark the limit active, or you can stop usage of the limit and either complete existing tasks or cancel any existing tasks immediately.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::UpdateQueueLimitAssociationStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`UpdateQueueLimitAssociationInput`](crate::operation::update_queue_limit_association::UpdateQueueLimitAssociationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_queue_limit_association::UpdateQueueLimitAssociationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_queue_limit_association::UpdateQueueLimitAssociationInput {
            farm_id: self.farm_id,
            queue_id: self.queue_id,
            limit_id: self.limit_id,
            status: self.status,
        })
    }
}
