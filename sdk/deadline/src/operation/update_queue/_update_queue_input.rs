// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateQueueInput {
    /// <p>The idempotency token to update in the queue.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The farm ID to update in the queue.</p>
    pub farm_id: ::std::option::Option<::std::string::String>,
    /// <p>The queue ID to update.</p>
    pub queue_id: ::std::option::Option<::std::string::String>,
    /// <p>The display name of the queue to update.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the queue to update.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The default action to take for a queue update if a budget isn't configured.</p>
    pub default_budget_action: ::std::option::Option<crate::types::DefaultQueueBudgetAction>,
    /// <p>The job attachment settings to update for the queue.</p>
    pub job_attachment_settings: ::std::option::Option<crate::types::JobAttachmentSettings>,
    /// <p>The IAM role ARN that's used to run jobs from this queue.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Update the jobs in the queue to run as a specified POSIX user.</p>
    pub job_run_as_user: ::std::option::Option<crate::types::JobRunAsUser>,
    /// <p>The required file system location names to add to the queue.</p>
    pub required_file_system_location_names_to_add: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The required file system location names to remove from the queue.</p>
    pub required_file_system_location_names_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The storage profile IDs to add.</p>
    pub allowed_storage_profile_ids_to_add: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The storage profile ID to remove.</p>
    pub allowed_storage_profile_ids_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateQueueInput {
    /// <p>The idempotency token to update in the queue.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The farm ID to update in the queue.</p>
    pub fn farm_id(&self) -> ::std::option::Option<&str> {
        self.farm_id.as_deref()
    }
    /// <p>The queue ID to update.</p>
    pub fn queue_id(&self) -> ::std::option::Option<&str> {
        self.queue_id.as_deref()
    }
    /// <p>The display name of the queue to update.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The description of the queue to update.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The default action to take for a queue update if a budget isn't configured.</p>
    pub fn default_budget_action(&self) -> ::std::option::Option<&crate::types::DefaultQueueBudgetAction> {
        self.default_budget_action.as_ref()
    }
    /// <p>The job attachment settings to update for the queue.</p>
    pub fn job_attachment_settings(&self) -> ::std::option::Option<&crate::types::JobAttachmentSettings> {
        self.job_attachment_settings.as_ref()
    }
    /// <p>The IAM role ARN that's used to run jobs from this queue.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>Update the jobs in the queue to run as a specified POSIX user.</p>
    pub fn job_run_as_user(&self) -> ::std::option::Option<&crate::types::JobRunAsUser> {
        self.job_run_as_user.as_ref()
    }
    /// <p>The required file system location names to add to the queue.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.required_file_system_location_names_to_add.is_none()`.
    pub fn required_file_system_location_names_to_add(&self) -> &[::std::string::String] {
        self.required_file_system_location_names_to_add.as_deref().unwrap_or_default()
    }
    /// <p>The required file system location names to remove from the queue.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.required_file_system_location_names_to_remove.is_none()`.
    pub fn required_file_system_location_names_to_remove(&self) -> &[::std::string::String] {
        self.required_file_system_location_names_to_remove.as_deref().unwrap_or_default()
    }
    /// <p>The storage profile IDs to add.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_storage_profile_ids_to_add.is_none()`.
    pub fn allowed_storage_profile_ids_to_add(&self) -> &[::std::string::String] {
        self.allowed_storage_profile_ids_to_add.as_deref().unwrap_or_default()
    }
    /// <p>The storage profile ID to remove.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_storage_profile_ids_to_remove.is_none()`.
    pub fn allowed_storage_profile_ids_to_remove(&self) -> &[::std::string::String] {
        self.allowed_storage_profile_ids_to_remove.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for UpdateQueueInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateQueueInput");
        formatter.field("client_token", &self.client_token);
        formatter.field("farm_id", &self.farm_id);
        formatter.field("queue_id", &self.queue_id);
        formatter.field("display_name", &self.display_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("default_budget_action", &self.default_budget_action);
        formatter.field("job_attachment_settings", &self.job_attachment_settings);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("job_run_as_user", &self.job_run_as_user);
        formatter.field(
            "required_file_system_location_names_to_add",
            &self.required_file_system_location_names_to_add,
        );
        formatter.field(
            "required_file_system_location_names_to_remove",
            &self.required_file_system_location_names_to_remove,
        );
        formatter.field("allowed_storage_profile_ids_to_add", &self.allowed_storage_profile_ids_to_add);
        formatter.field("allowed_storage_profile_ids_to_remove", &self.allowed_storage_profile_ids_to_remove);
        formatter.finish()
    }
}
impl UpdateQueueInput {
    /// Creates a new builder-style object to manufacture [`UpdateQueueInput`](crate::operation::update_queue::UpdateQueueInput).
    pub fn builder() -> crate::operation::update_queue::builders::UpdateQueueInputBuilder {
        crate::operation::update_queue::builders::UpdateQueueInputBuilder::default()
    }
}

/// A builder for [`UpdateQueueInput`](crate::operation::update_queue::UpdateQueueInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateQueueInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) farm_id: ::std::option::Option<::std::string::String>,
    pub(crate) queue_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) default_budget_action: ::std::option::Option<crate::types::DefaultQueueBudgetAction>,
    pub(crate) job_attachment_settings: ::std::option::Option<crate::types::JobAttachmentSettings>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) job_run_as_user: ::std::option::Option<crate::types::JobRunAsUser>,
    pub(crate) required_file_system_location_names_to_add: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) required_file_system_location_names_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) allowed_storage_profile_ids_to_add: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) allowed_storage_profile_ids_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateQueueInputBuilder {
    /// <p>The idempotency token to update in the queue.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The idempotency token to update in the queue.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The idempotency token to update in the queue.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The farm ID to update in the queue.</p>
    /// This field is required.
    pub fn farm_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.farm_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The farm ID to update in the queue.</p>
    pub fn set_farm_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.farm_id = input;
        self
    }
    /// <p>The farm ID to update in the queue.</p>
    pub fn get_farm_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.farm_id
    }
    /// <p>The queue ID to update.</p>
    /// This field is required.
    pub fn queue_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.queue_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The queue ID to update.</p>
    pub fn set_queue_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.queue_id = input;
        self
    }
    /// <p>The queue ID to update.</p>
    pub fn get_queue_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.queue_id
    }
    /// <p>The display name of the queue to update.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the queue to update.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name of the queue to update.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The description of the queue to update.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the queue to update.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the queue to update.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The default action to take for a queue update if a budget isn't configured.</p>
    pub fn default_budget_action(mut self, input: crate::types::DefaultQueueBudgetAction) -> Self {
        self.default_budget_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default action to take for a queue update if a budget isn't configured.</p>
    pub fn set_default_budget_action(mut self, input: ::std::option::Option<crate::types::DefaultQueueBudgetAction>) -> Self {
        self.default_budget_action = input;
        self
    }
    /// <p>The default action to take for a queue update if a budget isn't configured.</p>
    pub fn get_default_budget_action(&self) -> &::std::option::Option<crate::types::DefaultQueueBudgetAction> {
        &self.default_budget_action
    }
    /// <p>The job attachment settings to update for the queue.</p>
    pub fn job_attachment_settings(mut self, input: crate::types::JobAttachmentSettings) -> Self {
        self.job_attachment_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The job attachment settings to update for the queue.</p>
    pub fn set_job_attachment_settings(mut self, input: ::std::option::Option<crate::types::JobAttachmentSettings>) -> Self {
        self.job_attachment_settings = input;
        self
    }
    /// <p>The job attachment settings to update for the queue.</p>
    pub fn get_job_attachment_settings(&self) -> &::std::option::Option<crate::types::JobAttachmentSettings> {
        &self.job_attachment_settings
    }
    /// <p>The IAM role ARN that's used to run jobs from this queue.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role ARN that's used to run jobs from this queue.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The IAM role ARN that's used to run jobs from this queue.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>Update the jobs in the queue to run as a specified POSIX user.</p>
    pub fn job_run_as_user(mut self, input: crate::types::JobRunAsUser) -> Self {
        self.job_run_as_user = ::std::option::Option::Some(input);
        self
    }
    /// <p>Update the jobs in the queue to run as a specified POSIX user.</p>
    pub fn set_job_run_as_user(mut self, input: ::std::option::Option<crate::types::JobRunAsUser>) -> Self {
        self.job_run_as_user = input;
        self
    }
    /// <p>Update the jobs in the queue to run as a specified POSIX user.</p>
    pub fn get_job_run_as_user(&self) -> &::std::option::Option<crate::types::JobRunAsUser> {
        &self.job_run_as_user
    }
    /// Appends an item to `required_file_system_location_names_to_add`.
    ///
    /// To override the contents of this collection use [`set_required_file_system_location_names_to_add`](Self::set_required_file_system_location_names_to_add).
    ///
    /// <p>The required file system location names to add to the queue.</p>
    pub fn required_file_system_location_names_to_add(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.required_file_system_location_names_to_add.unwrap_or_default();
        v.push(input.into());
        self.required_file_system_location_names_to_add = ::std::option::Option::Some(v);
        self
    }
    /// <p>The required file system location names to add to the queue.</p>
    pub fn set_required_file_system_location_names_to_add(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.required_file_system_location_names_to_add = input;
        self
    }
    /// <p>The required file system location names to add to the queue.</p>
    pub fn get_required_file_system_location_names_to_add(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.required_file_system_location_names_to_add
    }
    /// Appends an item to `required_file_system_location_names_to_remove`.
    ///
    /// To override the contents of this collection use [`set_required_file_system_location_names_to_remove`](Self::set_required_file_system_location_names_to_remove).
    ///
    /// <p>The required file system location names to remove from the queue.</p>
    pub fn required_file_system_location_names_to_remove(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.required_file_system_location_names_to_remove.unwrap_or_default();
        v.push(input.into());
        self.required_file_system_location_names_to_remove = ::std::option::Option::Some(v);
        self
    }
    /// <p>The required file system location names to remove from the queue.</p>
    pub fn set_required_file_system_location_names_to_remove(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.required_file_system_location_names_to_remove = input;
        self
    }
    /// <p>The required file system location names to remove from the queue.</p>
    pub fn get_required_file_system_location_names_to_remove(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.required_file_system_location_names_to_remove
    }
    /// Appends an item to `allowed_storage_profile_ids_to_add`.
    ///
    /// To override the contents of this collection use [`set_allowed_storage_profile_ids_to_add`](Self::set_allowed_storage_profile_ids_to_add).
    ///
    /// <p>The storage profile IDs to add.</p>
    pub fn allowed_storage_profile_ids_to_add(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_storage_profile_ids_to_add.unwrap_or_default();
        v.push(input.into());
        self.allowed_storage_profile_ids_to_add = ::std::option::Option::Some(v);
        self
    }
    /// <p>The storage profile IDs to add.</p>
    pub fn set_allowed_storage_profile_ids_to_add(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allowed_storage_profile_ids_to_add = input;
        self
    }
    /// <p>The storage profile IDs to add.</p>
    pub fn get_allowed_storage_profile_ids_to_add(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allowed_storage_profile_ids_to_add
    }
    /// Appends an item to `allowed_storage_profile_ids_to_remove`.
    ///
    /// To override the contents of this collection use [`set_allowed_storage_profile_ids_to_remove`](Self::set_allowed_storage_profile_ids_to_remove).
    ///
    /// <p>The storage profile ID to remove.</p>
    pub fn allowed_storage_profile_ids_to_remove(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_storage_profile_ids_to_remove.unwrap_or_default();
        v.push(input.into());
        self.allowed_storage_profile_ids_to_remove = ::std::option::Option::Some(v);
        self
    }
    /// <p>The storage profile ID to remove.</p>
    pub fn set_allowed_storage_profile_ids_to_remove(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allowed_storage_profile_ids_to_remove = input;
        self
    }
    /// <p>The storage profile ID to remove.</p>
    pub fn get_allowed_storage_profile_ids_to_remove(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allowed_storage_profile_ids_to_remove
    }
    /// Consumes the builder and constructs a [`UpdateQueueInput`](crate::operation::update_queue::UpdateQueueInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_queue::UpdateQueueInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_queue::UpdateQueueInput {
            client_token: self.client_token,
            farm_id: self.farm_id,
            queue_id: self.queue_id,
            display_name: self.display_name,
            description: self.description,
            default_budget_action: self.default_budget_action,
            job_attachment_settings: self.job_attachment_settings,
            role_arn: self.role_arn,
            job_run_as_user: self.job_run_as_user,
            required_file_system_location_names_to_add: self.required_file_system_location_names_to_add,
            required_file_system_location_names_to_remove: self.required_file_system_location_names_to_remove,
            allowed_storage_profile_ids_to_add: self.allowed_storage_profile_ids_to_add,
            allowed_storage_profile_ids_to_remove: self.allowed_storage_profile_ids_to_remove,
        })
    }
}
impl ::std::fmt::Debug for UpdateQueueInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateQueueInputBuilder");
        formatter.field("client_token", &self.client_token);
        formatter.field("farm_id", &self.farm_id);
        formatter.field("queue_id", &self.queue_id);
        formatter.field("display_name", &self.display_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("default_budget_action", &self.default_budget_action);
        formatter.field("job_attachment_settings", &self.job_attachment_settings);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("job_run_as_user", &self.job_run_as_user);
        formatter.field(
            "required_file_system_location_names_to_add",
            &self.required_file_system_location_names_to_add,
        );
        formatter.field(
            "required_file_system_location_names_to_remove",
            &self.required_file_system_location_names_to_remove,
        );
        formatter.field("allowed_storage_profile_ids_to_add", &self.allowed_storage_profile_ids_to_add);
        formatter.field("allowed_storage_profile_ids_to_remove", &self.allowed_storage_profile_ids_to_remove);
        formatter.finish()
    }
}
