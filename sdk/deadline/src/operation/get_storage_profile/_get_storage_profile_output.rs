// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetStorageProfileOutput {
    /// <p>The storage profile ID.</p>
    pub storage_profile_id: ::std::string::String,
    /// <p>The display name of the storage profile.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub display_name: ::std::string::String,
    /// <p>The operating system (OS) for the storage profile.</p>
    pub os_family: crate::types::StorageProfileOperatingSystemFamily,
    /// <p>The date and time the resource was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The user or system that created this resource.</p>
    pub created_by: ::std::string::String,
    /// <p>The date and time the resource was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The user or system that updated this resource.</p>
    pub updated_by: ::std::option::Option<::std::string::String>,
    /// <p>The location of the files for the storage profile.</p>
    pub file_system_locations: ::std::option::Option<::std::vec::Vec<crate::types::FileSystemLocation>>,
    _request_id: Option<String>,
}
impl GetStorageProfileOutput {
    /// <p>The storage profile ID.</p>
    pub fn storage_profile_id(&self) -> &str {
        use std::ops::Deref;
        self.storage_profile_id.deref()
    }
    /// <p>The display name of the storage profile.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn display_name(&self) -> &str {
        use std::ops::Deref;
        self.display_name.deref()
    }
    /// <p>The operating system (OS) for the storage profile.</p>
    pub fn os_family(&self) -> &crate::types::StorageProfileOperatingSystemFamily {
        &self.os_family
    }
    /// <p>The date and time the resource was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The user or system that created this resource.</p>
    pub fn created_by(&self) -> &str {
        use std::ops::Deref;
        self.created_by.deref()
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn updated_by(&self) -> ::std::option::Option<&str> {
        self.updated_by.as_deref()
    }
    /// <p>The location of the files for the storage profile.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.file_system_locations.is_none()`.
    pub fn file_system_locations(&self) -> &[crate::types::FileSystemLocation] {
        self.file_system_locations.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for GetStorageProfileOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetStorageProfileOutput {
    /// Creates a new builder-style object to manufacture [`GetStorageProfileOutput`](crate::operation::get_storage_profile::GetStorageProfileOutput).
    pub fn builder() -> crate::operation::get_storage_profile::builders::GetStorageProfileOutputBuilder {
        crate::operation::get_storage_profile::builders::GetStorageProfileOutputBuilder::default()
    }
}

/// A builder for [`GetStorageProfileOutput`](crate::operation::get_storage_profile::GetStorageProfileOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetStorageProfileOutputBuilder {
    pub(crate) storage_profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) os_family: ::std::option::Option<crate::types::StorageProfileOperatingSystemFamily>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_by: ::std::option::Option<::std::string::String>,
    pub(crate) file_system_locations: ::std::option::Option<::std::vec::Vec<crate::types::FileSystemLocation>>,
    _request_id: Option<String>,
}
impl GetStorageProfileOutputBuilder {
    /// <p>The storage profile ID.</p>
    /// This field is required.
    pub fn storage_profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.storage_profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The storage profile ID.</p>
    pub fn set_storage_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.storage_profile_id = input;
        self
    }
    /// <p>The storage profile ID.</p>
    pub fn get_storage_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.storage_profile_id
    }
    /// <p>The display name of the storage profile.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    /// This field is required.
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the storage profile.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name of the storage profile.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The operating system (OS) for the storage profile.</p>
    /// This field is required.
    pub fn os_family(mut self, input: crate::types::StorageProfileOperatingSystemFamily) -> Self {
        self.os_family = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operating system (OS) for the storage profile.</p>
    pub fn set_os_family(mut self, input: ::std::option::Option<crate::types::StorageProfileOperatingSystemFamily>) -> Self {
        self.os_family = input;
        self
    }
    /// <p>The operating system (OS) for the storage profile.</p>
    pub fn get_os_family(&self) -> &::std::option::Option<crate::types::StorageProfileOperatingSystemFamily> {
        &self.os_family
    }
    /// <p>The date and time the resource was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time the resource was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The user or system that created this resource.</p>
    /// This field is required.
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user or system that created this resource.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The user or system that created this resource.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn set_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_by = input;
        self
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn get_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_by
    }
    /// Appends an item to `file_system_locations`.
    ///
    /// To override the contents of this collection use [`set_file_system_locations`](Self::set_file_system_locations).
    ///
    /// <p>The location of the files for the storage profile.</p>
    pub fn file_system_locations(mut self, input: crate::types::FileSystemLocation) -> Self {
        let mut v = self.file_system_locations.unwrap_or_default();
        v.push(input);
        self.file_system_locations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The location of the files for the storage profile.</p>
    pub fn set_file_system_locations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FileSystemLocation>>) -> Self {
        self.file_system_locations = input;
        self
    }
    /// <p>The location of the files for the storage profile.</p>
    pub fn get_file_system_locations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FileSystemLocation>> {
        &self.file_system_locations
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetStorageProfileOutput`](crate::operation::get_storage_profile::GetStorageProfileOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`storage_profile_id`](crate::operation::get_storage_profile::builders::GetStorageProfileOutputBuilder::storage_profile_id)
    /// - [`display_name`](crate::operation::get_storage_profile::builders::GetStorageProfileOutputBuilder::display_name)
    /// - [`os_family`](crate::operation::get_storage_profile::builders::GetStorageProfileOutputBuilder::os_family)
    /// - [`created_at`](crate::operation::get_storage_profile::builders::GetStorageProfileOutputBuilder::created_at)
    /// - [`created_by`](crate::operation::get_storage_profile::builders::GetStorageProfileOutputBuilder::created_by)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_storage_profile::GetStorageProfileOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_storage_profile::GetStorageProfileOutput {
            storage_profile_id: self.storage_profile_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "storage_profile_id",
                    "storage_profile_id was not specified but it is required when building GetStorageProfileOutput",
                )
            })?,
            display_name: self.display_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "display_name",
                    "display_name was not specified but it is required when building GetStorageProfileOutput",
                )
            })?,
            os_family: self.os_family.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "os_family",
                    "os_family was not specified but it is required when building GetStorageProfileOutput",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building GetStorageProfileOutput",
                )
            })?,
            created_by: self.created_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_by",
                    "created_by was not specified but it is required when building GetStorageProfileOutput",
                )
            })?,
            updated_at: self.updated_at,
            updated_by: self.updated_by,
            file_system_locations: self.file_system_locations,
            _request_id: self._request_id,
        })
    }
}
