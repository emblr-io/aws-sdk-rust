// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateMonitorInput {
    /// <p>The unique identifier of the monitor to update.</p>
    pub monitor_id: ::std::option::Option<::std::string::String>,
    /// <p>The new value of the subdomain to use when forming the monitor URL.</p>
    pub subdomain: ::std::option::Option<::std::string::String>,
    /// <p>The new value to use for the monitor's display name.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the new IAM role to use with the monitor.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
}
impl UpdateMonitorInput {
    /// <p>The unique identifier of the monitor to update.</p>
    pub fn monitor_id(&self) -> ::std::option::Option<&str> {
        self.monitor_id.as_deref()
    }
    /// <p>The new value of the subdomain to use when forming the monitor URL.</p>
    pub fn subdomain(&self) -> ::std::option::Option<&str> {
        self.subdomain.as_deref()
    }
    /// <p>The new value to use for the monitor's display name.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the new IAM role to use with the monitor.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
}
impl UpdateMonitorInput {
    /// Creates a new builder-style object to manufacture [`UpdateMonitorInput`](crate::operation::update_monitor::UpdateMonitorInput).
    pub fn builder() -> crate::operation::update_monitor::builders::UpdateMonitorInputBuilder {
        crate::operation::update_monitor::builders::UpdateMonitorInputBuilder::default()
    }
}

/// A builder for [`UpdateMonitorInput`](crate::operation::update_monitor::UpdateMonitorInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateMonitorInputBuilder {
    pub(crate) monitor_id: ::std::option::Option<::std::string::String>,
    pub(crate) subdomain: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
}
impl UpdateMonitorInputBuilder {
    /// <p>The unique identifier of the monitor to update.</p>
    /// This field is required.
    pub fn monitor_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monitor_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the monitor to update.</p>
    pub fn set_monitor_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monitor_id = input;
        self
    }
    /// <p>The unique identifier of the monitor to update.</p>
    pub fn get_monitor_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.monitor_id
    }
    /// <p>The new value of the subdomain to use when forming the monitor URL.</p>
    pub fn subdomain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subdomain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new value of the subdomain to use when forming the monitor URL.</p>
    pub fn set_subdomain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subdomain = input;
        self
    }
    /// <p>The new value of the subdomain to use when forming the monitor URL.</p>
    pub fn get_subdomain(&self) -> &::std::option::Option<::std::string::String> {
        &self.subdomain
    }
    /// <p>The new value to use for the monitor's display name.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new value to use for the monitor's display name.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The new value to use for the monitor's display name.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The Amazon Resource Name (ARN) of the new IAM role to use with the monitor.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the new IAM role to use with the monitor.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the new IAM role to use with the monitor.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Consumes the builder and constructs a [`UpdateMonitorInput`](crate::operation::update_monitor::UpdateMonitorInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_monitor::UpdateMonitorInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_monitor::UpdateMonitorInput {
            monitor_id: self.monitor_id,
            subdomain: self.subdomain,
            display_name: self.display_name,
            role_arn: self.role_arn,
        })
    }
}
