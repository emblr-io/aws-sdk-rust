// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchTasksInput {
    /// <p>The farm ID of the task.</p>
    pub farm_id: ::std::option::Option<::std::string::String>,
    /// <p>The queue IDs to include in the search.</p>
    pub queue_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The job ID for the task search.</p>
    pub job_id: ::std::option::Option<::std::string::String>,
    /// <p>The filter expression, <code>AND</code> or <code>OR</code>, to use when searching among a group of search strings in a resource. You can use two groupings per search each within parenthesis <code>()</code>.</p>
    pub filter_expressions: ::std::option::Option<crate::types::SearchGroupedFilterExpressions>,
    /// <p>The search terms for a resource.</p>
    pub sort_expressions: ::std::option::Option<::std::vec::Vec<crate::types::SearchSortExpression>>,
    /// <p>Defines how far into the scrollable list to start the return of results.</p>
    pub item_offset: ::std::option::Option<i32>,
    /// <p>Specifies the number of items per page for the resource.</p>
    pub page_size: ::std::option::Option<i32>,
}
impl SearchTasksInput {
    /// <p>The farm ID of the task.</p>
    pub fn farm_id(&self) -> ::std::option::Option<&str> {
        self.farm_id.as_deref()
    }
    /// <p>The queue IDs to include in the search.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.queue_ids.is_none()`.
    pub fn queue_ids(&self) -> &[::std::string::String] {
        self.queue_ids.as_deref().unwrap_or_default()
    }
    /// <p>The job ID for the task search.</p>
    pub fn job_id(&self) -> ::std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The filter expression, <code>AND</code> or <code>OR</code>, to use when searching among a group of search strings in a resource. You can use two groupings per search each within parenthesis <code>()</code>.</p>
    pub fn filter_expressions(&self) -> ::std::option::Option<&crate::types::SearchGroupedFilterExpressions> {
        self.filter_expressions.as_ref()
    }
    /// <p>The search terms for a resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sort_expressions.is_none()`.
    pub fn sort_expressions(&self) -> &[crate::types::SearchSortExpression] {
        self.sort_expressions.as_deref().unwrap_or_default()
    }
    /// <p>Defines how far into the scrollable list to start the return of results.</p>
    pub fn item_offset(&self) -> ::std::option::Option<i32> {
        self.item_offset
    }
    /// <p>Specifies the number of items per page for the resource.</p>
    pub fn page_size(&self) -> ::std::option::Option<i32> {
        self.page_size
    }
}
impl SearchTasksInput {
    /// Creates a new builder-style object to manufacture [`SearchTasksInput`](crate::operation::search_tasks::SearchTasksInput).
    pub fn builder() -> crate::operation::search_tasks::builders::SearchTasksInputBuilder {
        crate::operation::search_tasks::builders::SearchTasksInputBuilder::default()
    }
}

/// A builder for [`SearchTasksInput`](crate::operation::search_tasks::SearchTasksInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SearchTasksInputBuilder {
    pub(crate) farm_id: ::std::option::Option<::std::string::String>,
    pub(crate) queue_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) filter_expressions: ::std::option::Option<crate::types::SearchGroupedFilterExpressions>,
    pub(crate) sort_expressions: ::std::option::Option<::std::vec::Vec<crate::types::SearchSortExpression>>,
    pub(crate) item_offset: ::std::option::Option<i32>,
    pub(crate) page_size: ::std::option::Option<i32>,
}
impl SearchTasksInputBuilder {
    /// <p>The farm ID of the task.</p>
    /// This field is required.
    pub fn farm_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.farm_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The farm ID of the task.</p>
    pub fn set_farm_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.farm_id = input;
        self
    }
    /// <p>The farm ID of the task.</p>
    pub fn get_farm_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.farm_id
    }
    /// Appends an item to `queue_ids`.
    ///
    /// To override the contents of this collection use [`set_queue_ids`](Self::set_queue_ids).
    ///
    /// <p>The queue IDs to include in the search.</p>
    pub fn queue_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.queue_ids.unwrap_or_default();
        v.push(input.into());
        self.queue_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The queue IDs to include in the search.</p>
    pub fn set_queue_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.queue_ids = input;
        self
    }
    /// <p>The queue IDs to include in the search.</p>
    pub fn get_queue_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.queue_ids
    }
    /// <p>The job ID for the task search.</p>
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job ID for the task search.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The job ID for the task search.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>The filter expression, <code>AND</code> or <code>OR</code>, to use when searching among a group of search strings in a resource. You can use two groupings per search each within parenthesis <code>()</code>.</p>
    pub fn filter_expressions(mut self, input: crate::types::SearchGroupedFilterExpressions) -> Self {
        self.filter_expressions = ::std::option::Option::Some(input);
        self
    }
    /// <p>The filter expression, <code>AND</code> or <code>OR</code>, to use when searching among a group of search strings in a resource. You can use two groupings per search each within parenthesis <code>()</code>.</p>
    pub fn set_filter_expressions(mut self, input: ::std::option::Option<crate::types::SearchGroupedFilterExpressions>) -> Self {
        self.filter_expressions = input;
        self
    }
    /// <p>The filter expression, <code>AND</code> or <code>OR</code>, to use when searching among a group of search strings in a resource. You can use two groupings per search each within parenthesis <code>()</code>.</p>
    pub fn get_filter_expressions(&self) -> &::std::option::Option<crate::types::SearchGroupedFilterExpressions> {
        &self.filter_expressions
    }
    /// Appends an item to `sort_expressions`.
    ///
    /// To override the contents of this collection use [`set_sort_expressions`](Self::set_sort_expressions).
    ///
    /// <p>The search terms for a resource.</p>
    pub fn sort_expressions(mut self, input: crate::types::SearchSortExpression) -> Self {
        let mut v = self.sort_expressions.unwrap_or_default();
        v.push(input);
        self.sort_expressions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The search terms for a resource.</p>
    pub fn set_sort_expressions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SearchSortExpression>>) -> Self {
        self.sort_expressions = input;
        self
    }
    /// <p>The search terms for a resource.</p>
    pub fn get_sort_expressions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SearchSortExpression>> {
        &self.sort_expressions
    }
    /// <p>Defines how far into the scrollable list to start the return of results.</p>
    /// This field is required.
    pub fn item_offset(mut self, input: i32) -> Self {
        self.item_offset = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines how far into the scrollable list to start the return of results.</p>
    pub fn set_item_offset(mut self, input: ::std::option::Option<i32>) -> Self {
        self.item_offset = input;
        self
    }
    /// <p>Defines how far into the scrollable list to start the return of results.</p>
    pub fn get_item_offset(&self) -> &::std::option::Option<i32> {
        &self.item_offset
    }
    /// <p>Specifies the number of items per page for the resource.</p>
    pub fn page_size(mut self, input: i32) -> Self {
        self.page_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the number of items per page for the resource.</p>
    pub fn set_page_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.page_size = input;
        self
    }
    /// <p>Specifies the number of items per page for the resource.</p>
    pub fn get_page_size(&self) -> &::std::option::Option<i32> {
        &self.page_size
    }
    /// Consumes the builder and constructs a [`SearchTasksInput`](crate::operation::search_tasks::SearchTasksInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::search_tasks::SearchTasksInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::search_tasks::SearchTasksInput {
            farm_id: self.farm_id,
            queue_ids: self.queue_ids,
            job_id: self.job_id,
            filter_expressions: self.filter_expressions,
            sort_expressions: self.sort_expressions,
            item_offset: self.item_offset,
            page_size: self.page_size,
        })
    }
}
