// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateWorkerScheduleInput {
    /// <p>The farm ID to update.</p>
    pub farm_id: ::std::option::Option<::std::string::String>,
    /// <p>The fleet ID to update.</p>
    pub fleet_id: ::std::option::Option<::std::string::String>,
    /// <p>The worker ID to update.</p>
    pub worker_id: ::std::option::Option<::std::string::String>,
    /// <p>The session actions associated with the worker schedule to update.</p>
    pub updated_session_actions: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::UpdatedSessionActionInfo>>,
}
impl UpdateWorkerScheduleInput {
    /// <p>The farm ID to update.</p>
    pub fn farm_id(&self) -> ::std::option::Option<&str> {
        self.farm_id.as_deref()
    }
    /// <p>The fleet ID to update.</p>
    pub fn fleet_id(&self) -> ::std::option::Option<&str> {
        self.fleet_id.as_deref()
    }
    /// <p>The worker ID to update.</p>
    pub fn worker_id(&self) -> ::std::option::Option<&str> {
        self.worker_id.as_deref()
    }
    /// <p>The session actions associated with the worker schedule to update.</p>
    pub fn updated_session_actions(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::UpdatedSessionActionInfo>> {
        self.updated_session_actions.as_ref()
    }
}
impl UpdateWorkerScheduleInput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkerScheduleInput`](crate::operation::update_worker_schedule::UpdateWorkerScheduleInput).
    pub fn builder() -> crate::operation::update_worker_schedule::builders::UpdateWorkerScheduleInputBuilder {
        crate::operation::update_worker_schedule::builders::UpdateWorkerScheduleInputBuilder::default()
    }
}

/// A builder for [`UpdateWorkerScheduleInput`](crate::operation::update_worker_schedule::UpdateWorkerScheduleInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateWorkerScheduleInputBuilder {
    pub(crate) farm_id: ::std::option::Option<::std::string::String>,
    pub(crate) fleet_id: ::std::option::Option<::std::string::String>,
    pub(crate) worker_id: ::std::option::Option<::std::string::String>,
    pub(crate) updated_session_actions:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::UpdatedSessionActionInfo>>,
}
impl UpdateWorkerScheduleInputBuilder {
    /// <p>The farm ID to update.</p>
    /// This field is required.
    pub fn farm_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.farm_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The farm ID to update.</p>
    pub fn set_farm_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.farm_id = input;
        self
    }
    /// <p>The farm ID to update.</p>
    pub fn get_farm_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.farm_id
    }
    /// <p>The fleet ID to update.</p>
    /// This field is required.
    pub fn fleet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fleet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The fleet ID to update.</p>
    pub fn set_fleet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fleet_id = input;
        self
    }
    /// <p>The fleet ID to update.</p>
    pub fn get_fleet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.fleet_id
    }
    /// <p>The worker ID to update.</p>
    /// This field is required.
    pub fn worker_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.worker_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The worker ID to update.</p>
    pub fn set_worker_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.worker_id = input;
        self
    }
    /// <p>The worker ID to update.</p>
    pub fn get_worker_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.worker_id
    }
    /// Adds a key-value pair to `updated_session_actions`.
    ///
    /// To override the contents of this collection use [`set_updated_session_actions`](Self::set_updated_session_actions).
    ///
    /// <p>The session actions associated with the worker schedule to update.</p>
    pub fn updated_session_actions(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::UpdatedSessionActionInfo) -> Self {
        let mut hash_map = self.updated_session_actions.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.updated_session_actions = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The session actions associated with the worker schedule to update.</p>
    pub fn set_updated_session_actions(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::UpdatedSessionActionInfo>>,
    ) -> Self {
        self.updated_session_actions = input;
        self
    }
    /// <p>The session actions associated with the worker schedule to update.</p>
    pub fn get_updated_session_actions(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::UpdatedSessionActionInfo>> {
        &self.updated_session_actions
    }
    /// Consumes the builder and constructs a [`UpdateWorkerScheduleInput`](crate::operation::update_worker_schedule::UpdateWorkerScheduleInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_worker_schedule::UpdateWorkerScheduleInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_worker_schedule::UpdateWorkerScheduleInput {
            farm_id: self.farm_id,
            fleet_id: self.fleet_id,
            worker_id: self.worker_id,
            updated_session_actions: self.updated_session_actions,
        })
    }
}
