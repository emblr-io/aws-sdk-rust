// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateWorkerScheduleOutput {
    /// <p>The assigned sessions to update.</p>
    pub assigned_sessions: ::std::collections::HashMap<::std::string::String, crate::types::AssignedSession>,
    /// <p>The session actions associated with the worker schedule to cancel.</p>
    pub cancel_session_actions: ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>,
    /// <p>The status to update the worker to.</p>
    pub desired_worker_status: ::std::option::Option<crate::types::DesiredWorkerStatus>,
    /// <p>Updates the time interval (in seconds) for the schedule.</p>
    pub update_interval_seconds: i32,
    _request_id: Option<String>,
}
impl UpdateWorkerScheduleOutput {
    /// <p>The assigned sessions to update.</p>
    pub fn assigned_sessions(&self) -> &::std::collections::HashMap<::std::string::String, crate::types::AssignedSession> {
        &self.assigned_sessions
    }
    /// <p>The session actions associated with the worker schedule to cancel.</p>
    pub fn cancel_session_actions(&self) -> &::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>> {
        &self.cancel_session_actions
    }
    /// <p>The status to update the worker to.</p>
    pub fn desired_worker_status(&self) -> ::std::option::Option<&crate::types::DesiredWorkerStatus> {
        self.desired_worker_status.as_ref()
    }
    /// <p>Updates the time interval (in seconds) for the schedule.</p>
    pub fn update_interval_seconds(&self) -> i32 {
        self.update_interval_seconds
    }
}
impl ::aws_types::request_id::RequestId for UpdateWorkerScheduleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateWorkerScheduleOutput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkerScheduleOutput`](crate::operation::update_worker_schedule::UpdateWorkerScheduleOutput).
    pub fn builder() -> crate::operation::update_worker_schedule::builders::UpdateWorkerScheduleOutputBuilder {
        crate::operation::update_worker_schedule::builders::UpdateWorkerScheduleOutputBuilder::default()
    }
}

/// A builder for [`UpdateWorkerScheduleOutput`](crate::operation::update_worker_schedule::UpdateWorkerScheduleOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateWorkerScheduleOutputBuilder {
    pub(crate) assigned_sessions: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AssignedSession>>,
    pub(crate) cancel_session_actions:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    pub(crate) desired_worker_status: ::std::option::Option<crate::types::DesiredWorkerStatus>,
    pub(crate) update_interval_seconds: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl UpdateWorkerScheduleOutputBuilder {
    /// Adds a key-value pair to `assigned_sessions`.
    ///
    /// To override the contents of this collection use [`set_assigned_sessions`](Self::set_assigned_sessions).
    ///
    /// <p>The assigned sessions to update.</p>
    pub fn assigned_sessions(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::AssignedSession) -> Self {
        let mut hash_map = self.assigned_sessions.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.assigned_sessions = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The assigned sessions to update.</p>
    pub fn set_assigned_sessions(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AssignedSession>>,
    ) -> Self {
        self.assigned_sessions = input;
        self
    }
    /// <p>The assigned sessions to update.</p>
    pub fn get_assigned_sessions(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AssignedSession>> {
        &self.assigned_sessions
    }
    /// Adds a key-value pair to `cancel_session_actions`.
    ///
    /// To override the contents of this collection use [`set_cancel_session_actions`](Self::set_cancel_session_actions).
    ///
    /// <p>The session actions associated with the worker schedule to cancel.</p>
    pub fn cancel_session_actions(mut self, k: impl ::std::convert::Into<::std::string::String>, v: ::std::vec::Vec<::std::string::String>) -> Self {
        let mut hash_map = self.cancel_session_actions.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.cancel_session_actions = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The session actions associated with the worker schedule to cancel.</p>
    pub fn set_cancel_session_actions(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    ) -> Self {
        self.cancel_session_actions = input;
        self
    }
    /// <p>The session actions associated with the worker schedule to cancel.</p>
    pub fn get_cancel_session_actions(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>> {
        &self.cancel_session_actions
    }
    /// <p>The status to update the worker to.</p>
    pub fn desired_worker_status(mut self, input: crate::types::DesiredWorkerStatus) -> Self {
        self.desired_worker_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status to update the worker to.</p>
    pub fn set_desired_worker_status(mut self, input: ::std::option::Option<crate::types::DesiredWorkerStatus>) -> Self {
        self.desired_worker_status = input;
        self
    }
    /// <p>The status to update the worker to.</p>
    pub fn get_desired_worker_status(&self) -> &::std::option::Option<crate::types::DesiredWorkerStatus> {
        &self.desired_worker_status
    }
    /// <p>Updates the time interval (in seconds) for the schedule.</p>
    /// This field is required.
    pub fn update_interval_seconds(mut self, input: i32) -> Self {
        self.update_interval_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>Updates the time interval (in seconds) for the schedule.</p>
    pub fn set_update_interval_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.update_interval_seconds = input;
        self
    }
    /// <p>Updates the time interval (in seconds) for the schedule.</p>
    pub fn get_update_interval_seconds(&self) -> &::std::option::Option<i32> {
        &self.update_interval_seconds
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateWorkerScheduleOutput`](crate::operation::update_worker_schedule::UpdateWorkerScheduleOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`assigned_sessions`](crate::operation::update_worker_schedule::builders::UpdateWorkerScheduleOutputBuilder::assigned_sessions)
    /// - [`cancel_session_actions`](crate::operation::update_worker_schedule::builders::UpdateWorkerScheduleOutputBuilder::cancel_session_actions)
    /// - [`update_interval_seconds`](crate::operation::update_worker_schedule::builders::UpdateWorkerScheduleOutputBuilder::update_interval_seconds)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_worker_schedule::UpdateWorkerScheduleOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_worker_schedule::UpdateWorkerScheduleOutput {
            assigned_sessions: self.assigned_sessions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "assigned_sessions",
                    "assigned_sessions was not specified but it is required when building UpdateWorkerScheduleOutput",
                )
            })?,
            cancel_session_actions: self.cancel_session_actions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cancel_session_actions",
                    "cancel_session_actions was not specified but it is required when building UpdateWorkerScheduleOutput",
                )
            })?,
            desired_worker_status: self.desired_worker_status,
            update_interval_seconds: self.update_interval_seconds.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_interval_seconds",
                    "update_interval_seconds was not specified but it is required when building UpdateWorkerScheduleOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
