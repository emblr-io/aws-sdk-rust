// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociateMemberToFleetInput {
    /// <p>The farm ID of the fleet to associate with the member.</p>
    pub farm_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the fleet to associate with a member.</p>
    pub fleet_id: ::std::option::Option<::std::string::String>,
    /// <p>The member's principal ID to associate with a fleet.</p>
    pub principal_id: ::std::option::Option<::std::string::String>,
    /// <p>The member's principal type to associate with the fleet.</p>
    pub principal_type: ::std::option::Option<crate::types::DeadlinePrincipalType>,
    /// <p>The member's identity store ID to associate with the fleet.</p>
    pub identity_store_id: ::std::option::Option<::std::string::String>,
    /// <p>The principal's membership level for the associated fleet.</p>
    pub membership_level: ::std::option::Option<crate::types::MembershipLevel>,
}
impl AssociateMemberToFleetInput {
    /// <p>The farm ID of the fleet to associate with the member.</p>
    pub fn farm_id(&self) -> ::std::option::Option<&str> {
        self.farm_id.as_deref()
    }
    /// <p>The ID of the fleet to associate with a member.</p>
    pub fn fleet_id(&self) -> ::std::option::Option<&str> {
        self.fleet_id.as_deref()
    }
    /// <p>The member's principal ID to associate with a fleet.</p>
    pub fn principal_id(&self) -> ::std::option::Option<&str> {
        self.principal_id.as_deref()
    }
    /// <p>The member's principal type to associate with the fleet.</p>
    pub fn principal_type(&self) -> ::std::option::Option<&crate::types::DeadlinePrincipalType> {
        self.principal_type.as_ref()
    }
    /// <p>The member's identity store ID to associate with the fleet.</p>
    pub fn identity_store_id(&self) -> ::std::option::Option<&str> {
        self.identity_store_id.as_deref()
    }
    /// <p>The principal's membership level for the associated fleet.</p>
    pub fn membership_level(&self) -> ::std::option::Option<&crate::types::MembershipLevel> {
        self.membership_level.as_ref()
    }
}
impl AssociateMemberToFleetInput {
    /// Creates a new builder-style object to manufacture [`AssociateMemberToFleetInput`](crate::operation::associate_member_to_fleet::AssociateMemberToFleetInput).
    pub fn builder() -> crate::operation::associate_member_to_fleet::builders::AssociateMemberToFleetInputBuilder {
        crate::operation::associate_member_to_fleet::builders::AssociateMemberToFleetInputBuilder::default()
    }
}

/// A builder for [`AssociateMemberToFleetInput`](crate::operation::associate_member_to_fleet::AssociateMemberToFleetInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssociateMemberToFleetInputBuilder {
    pub(crate) farm_id: ::std::option::Option<::std::string::String>,
    pub(crate) fleet_id: ::std::option::Option<::std::string::String>,
    pub(crate) principal_id: ::std::option::Option<::std::string::String>,
    pub(crate) principal_type: ::std::option::Option<crate::types::DeadlinePrincipalType>,
    pub(crate) identity_store_id: ::std::option::Option<::std::string::String>,
    pub(crate) membership_level: ::std::option::Option<crate::types::MembershipLevel>,
}
impl AssociateMemberToFleetInputBuilder {
    /// <p>The farm ID of the fleet to associate with the member.</p>
    /// This field is required.
    pub fn farm_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.farm_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The farm ID of the fleet to associate with the member.</p>
    pub fn set_farm_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.farm_id = input;
        self
    }
    /// <p>The farm ID of the fleet to associate with the member.</p>
    pub fn get_farm_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.farm_id
    }
    /// <p>The ID of the fleet to associate with a member.</p>
    /// This field is required.
    pub fn fleet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fleet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the fleet to associate with a member.</p>
    pub fn set_fleet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fleet_id = input;
        self
    }
    /// <p>The ID of the fleet to associate with a member.</p>
    pub fn get_fleet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.fleet_id
    }
    /// <p>The member's principal ID to associate with a fleet.</p>
    /// This field is required.
    pub fn principal_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The member's principal ID to associate with a fleet.</p>
    pub fn set_principal_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal_id = input;
        self
    }
    /// <p>The member's principal ID to associate with a fleet.</p>
    pub fn get_principal_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal_id
    }
    /// <p>The member's principal type to associate with the fleet.</p>
    /// This field is required.
    pub fn principal_type(mut self, input: crate::types::DeadlinePrincipalType) -> Self {
        self.principal_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The member's principal type to associate with the fleet.</p>
    pub fn set_principal_type(mut self, input: ::std::option::Option<crate::types::DeadlinePrincipalType>) -> Self {
        self.principal_type = input;
        self
    }
    /// <p>The member's principal type to associate with the fleet.</p>
    pub fn get_principal_type(&self) -> &::std::option::Option<crate::types::DeadlinePrincipalType> {
        &self.principal_type
    }
    /// <p>The member's identity store ID to associate with the fleet.</p>
    /// This field is required.
    pub fn identity_store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity_store_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The member's identity store ID to associate with the fleet.</p>
    pub fn set_identity_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity_store_id = input;
        self
    }
    /// <p>The member's identity store ID to associate with the fleet.</p>
    pub fn get_identity_store_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity_store_id
    }
    /// <p>The principal's membership level for the associated fleet.</p>
    /// This field is required.
    pub fn membership_level(mut self, input: crate::types::MembershipLevel) -> Self {
        self.membership_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The principal's membership level for the associated fleet.</p>
    pub fn set_membership_level(mut self, input: ::std::option::Option<crate::types::MembershipLevel>) -> Self {
        self.membership_level = input;
        self
    }
    /// <p>The principal's membership level for the associated fleet.</p>
    pub fn get_membership_level(&self) -> &::std::option::Option<crate::types::MembershipLevel> {
        &self.membership_level
    }
    /// Consumes the builder and constructs a [`AssociateMemberToFleetInput`](crate::operation::associate_member_to_fleet::AssociateMemberToFleetInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::associate_member_to_fleet::AssociateMemberToFleetInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::associate_member_to_fleet::AssociateMemberToFleetInput {
            farm_id: self.farm_id,
            fleet_id: self.fleet_id,
            principal_id: self.principal_id,
            principal_type: self.principal_type,
            identity_store_id: self.identity_store_id,
            membership_level: self.membership_level,
        })
    }
}
