// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetFleetOutput {
    /// <p>The fleet ID.</p>
    pub fleet_id: ::std::string::String,
    /// <p>The farm ID of the farm in the fleet.</p>
    pub farm_id: ::std::string::String,
    /// <p>The display name of the fleet.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub display_name: ::std::string::String,
    /// <p>The description of the fleet.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The status of the fleet.</p>
    pub status: crate::types::FleetStatus,
    /// <p>The Auto Scaling status of the fleet. Either <code>GROWING</code>, <code>STEADY</code>, or <code>SHRINKING</code>.</p>
    pub auto_scaling_status: ::std::option::Option<crate::types::AutoScalingStatus>,
    /// <p>The number of target workers in the fleet.</p>
    pub target_worker_count: ::std::option::Option<i32>,
    /// <p>The number of workers in the fleet.</p>
    pub worker_count: i32,
    /// <p>The minimum number of workers specified in the fleet.</p>
    pub min_worker_count: i32,
    /// <p>The maximum number of workers specified in the fleet.</p>
    pub max_worker_count: i32,
    /// <p>The configuration setting for the fleet.</p>
    pub configuration: ::std::option::Option<crate::types::FleetConfiguration>,
    /// <p>The script that runs as a worker is starting up that you can use to provide additional configuration for workers in your fleet.</p>
    pub host_configuration: ::std::option::Option<crate::types::HostConfiguration>,
    /// <p>Outlines what the fleet is capable of for minimums, maximums, and naming, in addition to attribute names and values.</p>
    pub capabilities: ::std::option::Option<crate::types::FleetCapabilities>,
    /// <p>The IAM role ARN.</p>
    pub role_arn: ::std::string::String,
    /// <p>The date and time the resource was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The user or system that created this resource.</p>
    pub created_by: ::std::string::String,
    /// <p>The date and time the resource was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The user or system that updated this resource.</p>
    pub updated_by: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetFleetOutput {
    /// <p>The fleet ID.</p>
    pub fn fleet_id(&self) -> &str {
        use std::ops::Deref;
        self.fleet_id.deref()
    }
    /// <p>The farm ID of the farm in the fleet.</p>
    pub fn farm_id(&self) -> &str {
        use std::ops::Deref;
        self.farm_id.deref()
    }
    /// <p>The display name of the fleet.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn display_name(&self) -> &str {
        use std::ops::Deref;
        self.display_name.deref()
    }
    /// <p>The description of the fleet.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The status of the fleet.</p>
    pub fn status(&self) -> &crate::types::FleetStatus {
        &self.status
    }
    /// <p>The Auto Scaling status of the fleet. Either <code>GROWING</code>, <code>STEADY</code>, or <code>SHRINKING</code>.</p>
    pub fn auto_scaling_status(&self) -> ::std::option::Option<&crate::types::AutoScalingStatus> {
        self.auto_scaling_status.as_ref()
    }
    /// <p>The number of target workers in the fleet.</p>
    pub fn target_worker_count(&self) -> ::std::option::Option<i32> {
        self.target_worker_count
    }
    /// <p>The number of workers in the fleet.</p>
    pub fn worker_count(&self) -> i32 {
        self.worker_count
    }
    /// <p>The minimum number of workers specified in the fleet.</p>
    pub fn min_worker_count(&self) -> i32 {
        self.min_worker_count
    }
    /// <p>The maximum number of workers specified in the fleet.</p>
    pub fn max_worker_count(&self) -> i32 {
        self.max_worker_count
    }
    /// <p>The configuration setting for the fleet.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::FleetConfiguration> {
        self.configuration.as_ref()
    }
    /// <p>The script that runs as a worker is starting up that you can use to provide additional configuration for workers in your fleet.</p>
    pub fn host_configuration(&self) -> ::std::option::Option<&crate::types::HostConfiguration> {
        self.host_configuration.as_ref()
    }
    /// <p>Outlines what the fleet is capable of for minimums, maximums, and naming, in addition to attribute names and values.</p>
    pub fn capabilities(&self) -> ::std::option::Option<&crate::types::FleetCapabilities> {
        self.capabilities.as_ref()
    }
    /// <p>The IAM role ARN.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>The date and time the resource was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The user or system that created this resource.</p>
    pub fn created_by(&self) -> &str {
        use std::ops::Deref;
        self.created_by.deref()
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn updated_by(&self) -> ::std::option::Option<&str> {
        self.updated_by.as_deref()
    }
}
impl ::std::fmt::Debug for GetFleetOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetFleetOutput");
        formatter.field("fleet_id", &self.fleet_id);
        formatter.field("farm_id", &self.farm_id);
        formatter.field("display_name", &self.display_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("auto_scaling_status", &self.auto_scaling_status);
        formatter.field("target_worker_count", &self.target_worker_count);
        formatter.field("worker_count", &self.worker_count);
        formatter.field("min_worker_count", &self.min_worker_count);
        formatter.field("max_worker_count", &self.max_worker_count);
        formatter.field("configuration", &self.configuration);
        formatter.field("host_configuration", &self.host_configuration);
        formatter.field("capabilities", &self.capabilities);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("created_by", &self.created_by);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("updated_by", &self.updated_by);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetFleetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetFleetOutput {
    /// Creates a new builder-style object to manufacture [`GetFleetOutput`](crate::operation::get_fleet::GetFleetOutput).
    pub fn builder() -> crate::operation::get_fleet::builders::GetFleetOutputBuilder {
        crate::operation::get_fleet::builders::GetFleetOutputBuilder::default()
    }
}

/// A builder for [`GetFleetOutput`](crate::operation::get_fleet::GetFleetOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetFleetOutputBuilder {
    pub(crate) fleet_id: ::std::option::Option<::std::string::String>,
    pub(crate) farm_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::FleetStatus>,
    pub(crate) auto_scaling_status: ::std::option::Option<crate::types::AutoScalingStatus>,
    pub(crate) target_worker_count: ::std::option::Option<i32>,
    pub(crate) worker_count: ::std::option::Option<i32>,
    pub(crate) min_worker_count: ::std::option::Option<i32>,
    pub(crate) max_worker_count: ::std::option::Option<i32>,
    pub(crate) configuration: ::std::option::Option<crate::types::FleetConfiguration>,
    pub(crate) host_configuration: ::std::option::Option<crate::types::HostConfiguration>,
    pub(crate) capabilities: ::std::option::Option<crate::types::FleetCapabilities>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_by: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetFleetOutputBuilder {
    /// <p>The fleet ID.</p>
    /// This field is required.
    pub fn fleet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fleet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The fleet ID.</p>
    pub fn set_fleet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fleet_id = input;
        self
    }
    /// <p>The fleet ID.</p>
    pub fn get_fleet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.fleet_id
    }
    /// <p>The farm ID of the farm in the fleet.</p>
    /// This field is required.
    pub fn farm_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.farm_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The farm ID of the farm in the fleet.</p>
    pub fn set_farm_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.farm_id = input;
        self
    }
    /// <p>The farm ID of the farm in the fleet.</p>
    pub fn get_farm_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.farm_id
    }
    /// <p>The display name of the fleet.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    /// This field is required.
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the fleet.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name of the fleet.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The description of the fleet.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the fleet.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the fleet.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The status of the fleet.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::FleetStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the fleet.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::FleetStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the fleet.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::FleetStatus> {
        &self.status
    }
    /// <p>The Auto Scaling status of the fleet. Either <code>GROWING</code>, <code>STEADY</code>, or <code>SHRINKING</code>.</p>
    pub fn auto_scaling_status(mut self, input: crate::types::AutoScalingStatus) -> Self {
        self.auto_scaling_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Auto Scaling status of the fleet. Either <code>GROWING</code>, <code>STEADY</code>, or <code>SHRINKING</code>.</p>
    pub fn set_auto_scaling_status(mut self, input: ::std::option::Option<crate::types::AutoScalingStatus>) -> Self {
        self.auto_scaling_status = input;
        self
    }
    /// <p>The Auto Scaling status of the fleet. Either <code>GROWING</code>, <code>STEADY</code>, or <code>SHRINKING</code>.</p>
    pub fn get_auto_scaling_status(&self) -> &::std::option::Option<crate::types::AutoScalingStatus> {
        &self.auto_scaling_status
    }
    /// <p>The number of target workers in the fleet.</p>
    pub fn target_worker_count(mut self, input: i32) -> Self {
        self.target_worker_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of target workers in the fleet.</p>
    pub fn set_target_worker_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.target_worker_count = input;
        self
    }
    /// <p>The number of target workers in the fleet.</p>
    pub fn get_target_worker_count(&self) -> &::std::option::Option<i32> {
        &self.target_worker_count
    }
    /// <p>The number of workers in the fleet.</p>
    /// This field is required.
    pub fn worker_count(mut self, input: i32) -> Self {
        self.worker_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of workers in the fleet.</p>
    pub fn set_worker_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.worker_count = input;
        self
    }
    /// <p>The number of workers in the fleet.</p>
    pub fn get_worker_count(&self) -> &::std::option::Option<i32> {
        &self.worker_count
    }
    /// <p>The minimum number of workers specified in the fleet.</p>
    /// This field is required.
    pub fn min_worker_count(mut self, input: i32) -> Self {
        self.min_worker_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum number of workers specified in the fleet.</p>
    pub fn set_min_worker_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.min_worker_count = input;
        self
    }
    /// <p>The minimum number of workers specified in the fleet.</p>
    pub fn get_min_worker_count(&self) -> &::std::option::Option<i32> {
        &self.min_worker_count
    }
    /// <p>The maximum number of workers specified in the fleet.</p>
    /// This field is required.
    pub fn max_worker_count(mut self, input: i32) -> Self {
        self.max_worker_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of workers specified in the fleet.</p>
    pub fn set_max_worker_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_worker_count = input;
        self
    }
    /// <p>The maximum number of workers specified in the fleet.</p>
    pub fn get_max_worker_count(&self) -> &::std::option::Option<i32> {
        &self.max_worker_count
    }
    /// <p>The configuration setting for the fleet.</p>
    /// This field is required.
    pub fn configuration(mut self, input: crate::types::FleetConfiguration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration setting for the fleet.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::FleetConfiguration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>The configuration setting for the fleet.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::FleetConfiguration> {
        &self.configuration
    }
    /// <p>The script that runs as a worker is starting up that you can use to provide additional configuration for workers in your fleet.</p>
    pub fn host_configuration(mut self, input: crate::types::HostConfiguration) -> Self {
        self.host_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The script that runs as a worker is starting up that you can use to provide additional configuration for workers in your fleet.</p>
    pub fn set_host_configuration(mut self, input: ::std::option::Option<crate::types::HostConfiguration>) -> Self {
        self.host_configuration = input;
        self
    }
    /// <p>The script that runs as a worker is starting up that you can use to provide additional configuration for workers in your fleet.</p>
    pub fn get_host_configuration(&self) -> &::std::option::Option<crate::types::HostConfiguration> {
        &self.host_configuration
    }
    /// <p>Outlines what the fleet is capable of for minimums, maximums, and naming, in addition to attribute names and values.</p>
    pub fn capabilities(mut self, input: crate::types::FleetCapabilities) -> Self {
        self.capabilities = ::std::option::Option::Some(input);
        self
    }
    /// <p>Outlines what the fleet is capable of for minimums, maximums, and naming, in addition to attribute names and values.</p>
    pub fn set_capabilities(mut self, input: ::std::option::Option<crate::types::FleetCapabilities>) -> Self {
        self.capabilities = input;
        self
    }
    /// <p>Outlines what the fleet is capable of for minimums, maximums, and naming, in addition to attribute names and values.</p>
    pub fn get_capabilities(&self) -> &::std::option::Option<crate::types::FleetCapabilities> {
        &self.capabilities
    }
    /// <p>The IAM role ARN.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role ARN.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The IAM role ARN.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The date and time the resource was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time the resource was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The user or system that created this resource.</p>
    /// This field is required.
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user or system that created this resource.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The user or system that created this resource.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The date and time the resource was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn set_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_by = input;
        self
    }
    /// <p>The user or system that updated this resource.</p>
    pub fn get_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_by
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetFleetOutput`](crate::operation::get_fleet::GetFleetOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`fleet_id`](crate::operation::get_fleet::builders::GetFleetOutputBuilder::fleet_id)
    /// - [`farm_id`](crate::operation::get_fleet::builders::GetFleetOutputBuilder::farm_id)
    /// - [`display_name`](crate::operation::get_fleet::builders::GetFleetOutputBuilder::display_name)
    /// - [`status`](crate::operation::get_fleet::builders::GetFleetOutputBuilder::status)
    /// - [`worker_count`](crate::operation::get_fleet::builders::GetFleetOutputBuilder::worker_count)
    /// - [`min_worker_count`](crate::operation::get_fleet::builders::GetFleetOutputBuilder::min_worker_count)
    /// - [`max_worker_count`](crate::operation::get_fleet::builders::GetFleetOutputBuilder::max_worker_count)
    /// - [`role_arn`](crate::operation::get_fleet::builders::GetFleetOutputBuilder::role_arn)
    /// - [`created_at`](crate::operation::get_fleet::builders::GetFleetOutputBuilder::created_at)
    /// - [`created_by`](crate::operation::get_fleet::builders::GetFleetOutputBuilder::created_by)
    pub fn build(self) -> ::std::result::Result<crate::operation::get_fleet::GetFleetOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_fleet::GetFleetOutput {
            fleet_id: self.fleet_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "fleet_id",
                    "fleet_id was not specified but it is required when building GetFleetOutput",
                )
            })?,
            farm_id: self.farm_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "farm_id",
                    "farm_id was not specified but it is required when building GetFleetOutput",
                )
            })?,
            display_name: self.display_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "display_name",
                    "display_name was not specified but it is required when building GetFleetOutput",
                )
            })?,
            description: self.description,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetFleetOutput",
                )
            })?,
            auto_scaling_status: self.auto_scaling_status,
            target_worker_count: self.target_worker_count,
            worker_count: self.worker_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "worker_count",
                    "worker_count was not specified but it is required when building GetFleetOutput",
                )
            })?,
            min_worker_count: self.min_worker_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "min_worker_count",
                    "min_worker_count was not specified but it is required when building GetFleetOutput",
                )
            })?,
            max_worker_count: self.max_worker_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "max_worker_count",
                    "max_worker_count was not specified but it is required when building GetFleetOutput",
                )
            })?,
            configuration: self.configuration,
            host_configuration: self.host_configuration,
            capabilities: self.capabilities,
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building GetFleetOutput",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building GetFleetOutput",
                )
            })?,
            created_by: self.created_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_by",
                    "created_by was not specified but it is required when building GetFleetOutput",
                )
            })?,
            updated_at: self.updated_at,
            updated_by: self.updated_by,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetFleetOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetFleetOutputBuilder");
        formatter.field("fleet_id", &self.fleet_id);
        formatter.field("farm_id", &self.farm_id);
        formatter.field("display_name", &self.display_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("auto_scaling_status", &self.auto_scaling_status);
        formatter.field("target_worker_count", &self.target_worker_count);
        formatter.field("worker_count", &self.worker_count);
        formatter.field("min_worker_count", &self.min_worker_count);
        formatter.field("max_worker_count", &self.max_worker_count);
        formatter.field("configuration", &self.configuration);
        formatter.field("host_configuration", &self.host_configuration);
        formatter.field("capabilities", &self.capabilities);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("created_by", &self.created_by);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("updated_by", &self.updated_by);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
