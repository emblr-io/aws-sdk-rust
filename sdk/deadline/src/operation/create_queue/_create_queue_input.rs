// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateQueueInput {
    /// <p>The unique token which the server uses to recognize retries of the same request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The farm ID of the farm to connect to the queue.</p>
    pub farm_id: ::std::option::Option<::std::string::String>,
    /// <p>The display name of the queue.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the queue.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The default action to take on a queue if a budget isn't configured.</p>
    pub default_budget_action: ::std::option::Option<crate::types::DefaultQueueBudgetAction>,
    /// <p>The job attachment settings for the queue. These are the Amazon S3 bucket name and the Amazon S3 prefix.</p>
    pub job_attachment_settings: ::std::option::Option<crate::types::JobAttachmentSettings>,
    /// <p>The IAM role ARN that workers will use while running jobs for this queue.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The jobs in the queue run as the specified POSIX user.</p>
    pub job_run_as_user: ::std::option::Option<crate::types::JobRunAsUser>,
    /// <p>The file system location name to include in the queue.</p>
    pub required_file_system_location_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The storage profile IDs to include in the queue.</p>
    pub allowed_storage_profile_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Each tag consists of a tag key and a tag value. Tag keys and values are both required, but tag values can be empty strings.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateQueueInput {
    /// <p>The unique token which the server uses to recognize retries of the same request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The farm ID of the farm to connect to the queue.</p>
    pub fn farm_id(&self) -> ::std::option::Option<&str> {
        self.farm_id.as_deref()
    }
    /// <p>The display name of the queue.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The description of the queue.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The default action to take on a queue if a budget isn't configured.</p>
    pub fn default_budget_action(&self) -> ::std::option::Option<&crate::types::DefaultQueueBudgetAction> {
        self.default_budget_action.as_ref()
    }
    /// <p>The job attachment settings for the queue. These are the Amazon S3 bucket name and the Amazon S3 prefix.</p>
    pub fn job_attachment_settings(&self) -> ::std::option::Option<&crate::types::JobAttachmentSettings> {
        self.job_attachment_settings.as_ref()
    }
    /// <p>The IAM role ARN that workers will use while running jobs for this queue.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The jobs in the queue run as the specified POSIX user.</p>
    pub fn job_run_as_user(&self) -> ::std::option::Option<&crate::types::JobRunAsUser> {
        self.job_run_as_user.as_ref()
    }
    /// <p>The file system location name to include in the queue.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.required_file_system_location_names.is_none()`.
    pub fn required_file_system_location_names(&self) -> &[::std::string::String] {
        self.required_file_system_location_names.as_deref().unwrap_or_default()
    }
    /// <p>The storage profile IDs to include in the queue.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_storage_profile_ids.is_none()`.
    pub fn allowed_storage_profile_ids(&self) -> &[::std::string::String] {
        self.allowed_storage_profile_ids.as_deref().unwrap_or_default()
    }
    /// <p>Each tag consists of a tag key and a tag value. Tag keys and values are both required, but tag values can be empty strings.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for CreateQueueInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateQueueInput");
        formatter.field("client_token", &self.client_token);
        formatter.field("farm_id", &self.farm_id);
        formatter.field("display_name", &self.display_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("default_budget_action", &self.default_budget_action);
        formatter.field("job_attachment_settings", &self.job_attachment_settings);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("job_run_as_user", &self.job_run_as_user);
        formatter.field("required_file_system_location_names", &self.required_file_system_location_names);
        formatter.field("allowed_storage_profile_ids", &self.allowed_storage_profile_ids);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl CreateQueueInput {
    /// Creates a new builder-style object to manufacture [`CreateQueueInput`](crate::operation::create_queue::CreateQueueInput).
    pub fn builder() -> crate::operation::create_queue::builders::CreateQueueInputBuilder {
        crate::operation::create_queue::builders::CreateQueueInputBuilder::default()
    }
}

/// A builder for [`CreateQueueInput`](crate::operation::create_queue::CreateQueueInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateQueueInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) farm_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) default_budget_action: ::std::option::Option<crate::types::DefaultQueueBudgetAction>,
    pub(crate) job_attachment_settings: ::std::option::Option<crate::types::JobAttachmentSettings>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) job_run_as_user: ::std::option::Option<crate::types::JobRunAsUser>,
    pub(crate) required_file_system_location_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) allowed_storage_profile_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateQueueInputBuilder {
    /// <p>The unique token which the server uses to recognize retries of the same request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique token which the server uses to recognize retries of the same request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The unique token which the server uses to recognize retries of the same request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The farm ID of the farm to connect to the queue.</p>
    /// This field is required.
    pub fn farm_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.farm_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The farm ID of the farm to connect to the queue.</p>
    pub fn set_farm_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.farm_id = input;
        self
    }
    /// <p>The farm ID of the farm to connect to the queue.</p>
    pub fn get_farm_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.farm_id
    }
    /// <p>The display name of the queue.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    /// This field is required.
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the queue.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name of the queue.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The description of the queue.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the queue.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the queue.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The default action to take on a queue if a budget isn't configured.</p>
    pub fn default_budget_action(mut self, input: crate::types::DefaultQueueBudgetAction) -> Self {
        self.default_budget_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default action to take on a queue if a budget isn't configured.</p>
    pub fn set_default_budget_action(mut self, input: ::std::option::Option<crate::types::DefaultQueueBudgetAction>) -> Self {
        self.default_budget_action = input;
        self
    }
    /// <p>The default action to take on a queue if a budget isn't configured.</p>
    pub fn get_default_budget_action(&self) -> &::std::option::Option<crate::types::DefaultQueueBudgetAction> {
        &self.default_budget_action
    }
    /// <p>The job attachment settings for the queue. These are the Amazon S3 bucket name and the Amazon S3 prefix.</p>
    pub fn job_attachment_settings(mut self, input: crate::types::JobAttachmentSettings) -> Self {
        self.job_attachment_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The job attachment settings for the queue. These are the Amazon S3 bucket name and the Amazon S3 prefix.</p>
    pub fn set_job_attachment_settings(mut self, input: ::std::option::Option<crate::types::JobAttachmentSettings>) -> Self {
        self.job_attachment_settings = input;
        self
    }
    /// <p>The job attachment settings for the queue. These are the Amazon S3 bucket name and the Amazon S3 prefix.</p>
    pub fn get_job_attachment_settings(&self) -> &::std::option::Option<crate::types::JobAttachmentSettings> {
        &self.job_attachment_settings
    }
    /// <p>The IAM role ARN that workers will use while running jobs for this queue.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role ARN that workers will use while running jobs for this queue.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The IAM role ARN that workers will use while running jobs for this queue.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The jobs in the queue run as the specified POSIX user.</p>
    pub fn job_run_as_user(mut self, input: crate::types::JobRunAsUser) -> Self {
        self.job_run_as_user = ::std::option::Option::Some(input);
        self
    }
    /// <p>The jobs in the queue run as the specified POSIX user.</p>
    pub fn set_job_run_as_user(mut self, input: ::std::option::Option<crate::types::JobRunAsUser>) -> Self {
        self.job_run_as_user = input;
        self
    }
    /// <p>The jobs in the queue run as the specified POSIX user.</p>
    pub fn get_job_run_as_user(&self) -> &::std::option::Option<crate::types::JobRunAsUser> {
        &self.job_run_as_user
    }
    /// Appends an item to `required_file_system_location_names`.
    ///
    /// To override the contents of this collection use [`set_required_file_system_location_names`](Self::set_required_file_system_location_names).
    ///
    /// <p>The file system location name to include in the queue.</p>
    pub fn required_file_system_location_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.required_file_system_location_names.unwrap_or_default();
        v.push(input.into());
        self.required_file_system_location_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>The file system location name to include in the queue.</p>
    pub fn set_required_file_system_location_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.required_file_system_location_names = input;
        self
    }
    /// <p>The file system location name to include in the queue.</p>
    pub fn get_required_file_system_location_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.required_file_system_location_names
    }
    /// Appends an item to `allowed_storage_profile_ids`.
    ///
    /// To override the contents of this collection use [`set_allowed_storage_profile_ids`](Self::set_allowed_storage_profile_ids).
    ///
    /// <p>The storage profile IDs to include in the queue.</p>
    pub fn allowed_storage_profile_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_storage_profile_ids.unwrap_or_default();
        v.push(input.into());
        self.allowed_storage_profile_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The storage profile IDs to include in the queue.</p>
    pub fn set_allowed_storage_profile_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allowed_storage_profile_ids = input;
        self
    }
    /// <p>The storage profile IDs to include in the queue.</p>
    pub fn get_allowed_storage_profile_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allowed_storage_profile_ids
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Each tag consists of a tag key and a tag value. Tag keys and values are both required, but tag values can be empty strings.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Each tag consists of a tag key and a tag value. Tag keys and values are both required, but tag values can be empty strings.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Each tag consists of a tag key and a tag value. Tag keys and values are both required, but tag values can be empty strings.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateQueueInput`](crate::operation::create_queue::CreateQueueInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::create_queue::CreateQueueInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_queue::CreateQueueInput {
            client_token: self.client_token,
            farm_id: self.farm_id,
            display_name: self.display_name,
            description: self.description,
            default_budget_action: self.default_budget_action,
            job_attachment_settings: self.job_attachment_settings,
            role_arn: self.role_arn,
            job_run_as_user: self.job_run_as_user,
            required_file_system_location_names: self.required_file_system_location_names,
            allowed_storage_profile_ids: self.allowed_storage_profile_ids,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for CreateQueueInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateQueueInputBuilder");
        formatter.field("client_token", &self.client_token);
        formatter.field("farm_id", &self.farm_id);
        formatter.field("display_name", &self.display_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("default_budget_action", &self.default_budget_action);
        formatter.field("job_attachment_settings", &self.job_attachment_settings);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("job_run_as_user", &self.job_run_as_user);
        formatter.field("required_file_system_location_names", &self.required_file_system_location_names);
        formatter.field("allowed_storage_profile_ids", &self.allowed_storage_profile_ids);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
