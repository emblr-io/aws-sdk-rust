// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DisassociateMemberFromJobInput {
    /// <p>The farm ID for the job to disassociate from the member.</p>
    pub farm_id: ::std::option::Option<::std::string::String>,
    /// <p>The queue ID connected to a job for which you're disassociating a member.</p>
    pub queue_id: ::std::option::Option<::std::string::String>,
    /// <p>The job ID to disassociate from a member in a job.</p>
    pub job_id: ::std::option::Option<::std::string::String>,
    /// <p>A member's principal ID to disassociate from a job.</p>
    pub principal_id: ::std::option::Option<::std::string::String>,
}
impl DisassociateMemberFromJobInput {
    /// <p>The farm ID for the job to disassociate from the member.</p>
    pub fn farm_id(&self) -> ::std::option::Option<&str> {
        self.farm_id.as_deref()
    }
    /// <p>The queue ID connected to a job for which you're disassociating a member.</p>
    pub fn queue_id(&self) -> ::std::option::Option<&str> {
        self.queue_id.as_deref()
    }
    /// <p>The job ID to disassociate from a member in a job.</p>
    pub fn job_id(&self) -> ::std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>A member's principal ID to disassociate from a job.</p>
    pub fn principal_id(&self) -> ::std::option::Option<&str> {
        self.principal_id.as_deref()
    }
}
impl DisassociateMemberFromJobInput {
    /// Creates a new builder-style object to manufacture [`DisassociateMemberFromJobInput`](crate::operation::disassociate_member_from_job::DisassociateMemberFromJobInput).
    pub fn builder() -> crate::operation::disassociate_member_from_job::builders::DisassociateMemberFromJobInputBuilder {
        crate::operation::disassociate_member_from_job::builders::DisassociateMemberFromJobInputBuilder::default()
    }
}

/// A builder for [`DisassociateMemberFromJobInput`](crate::operation::disassociate_member_from_job::DisassociateMemberFromJobInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DisassociateMemberFromJobInputBuilder {
    pub(crate) farm_id: ::std::option::Option<::std::string::String>,
    pub(crate) queue_id: ::std::option::Option<::std::string::String>,
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) principal_id: ::std::option::Option<::std::string::String>,
}
impl DisassociateMemberFromJobInputBuilder {
    /// <p>The farm ID for the job to disassociate from the member.</p>
    /// This field is required.
    pub fn farm_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.farm_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The farm ID for the job to disassociate from the member.</p>
    pub fn set_farm_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.farm_id = input;
        self
    }
    /// <p>The farm ID for the job to disassociate from the member.</p>
    pub fn get_farm_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.farm_id
    }
    /// <p>The queue ID connected to a job for which you're disassociating a member.</p>
    /// This field is required.
    pub fn queue_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.queue_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The queue ID connected to a job for which you're disassociating a member.</p>
    pub fn set_queue_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.queue_id = input;
        self
    }
    /// <p>The queue ID connected to a job for which you're disassociating a member.</p>
    pub fn get_queue_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.queue_id
    }
    /// <p>The job ID to disassociate from a member in a job.</p>
    /// This field is required.
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job ID to disassociate from a member in a job.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The job ID to disassociate from a member in a job.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>A member's principal ID to disassociate from a job.</p>
    /// This field is required.
    pub fn principal_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A member's principal ID to disassociate from a job.</p>
    pub fn set_principal_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal_id = input;
        self
    }
    /// <p>A member's principal ID to disassociate from a job.</p>
    pub fn get_principal_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal_id
    }
    /// Consumes the builder and constructs a [`DisassociateMemberFromJobInput`](crate::operation::disassociate_member_from_job::DisassociateMemberFromJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::disassociate_member_from_job::DisassociateMemberFromJobInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::disassociate_member_from_job::DisassociateMemberFromJobInput {
            farm_id: self.farm_id,
            queue_id: self.queue_id,
            job_id: self.job_id,
            principal_id: self.principal_id,
        })
    }
}
