// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateBudgetInput {
    /// <p>The unique token which the server uses to recognize retries of the same request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The farm ID to include in this budget.</p>
    pub farm_id: ::std::option::Option<::std::string::String>,
    /// <p>The queue ID provided to this budget to track usage.</p>
    pub usage_tracking_resource: ::std::option::Option<crate::types::UsageTrackingResource>,
    /// <p>The display name of the budget.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the budget.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The dollar limit based on consumed usage.</p>
    pub approximate_dollar_limit: ::std::option::Option<f32>,
    /// <p>The budget actions to specify what happens when the budget runs out.</p>
    pub actions: ::std::option::Option<::std::vec::Vec<crate::types::BudgetActionToAdd>>,
    /// <p>The schedule to associate with this budget.</p>
    pub schedule: ::std::option::Option<crate::types::BudgetSchedule>,
}
impl CreateBudgetInput {
    /// <p>The unique token which the server uses to recognize retries of the same request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The farm ID to include in this budget.</p>
    pub fn farm_id(&self) -> ::std::option::Option<&str> {
        self.farm_id.as_deref()
    }
    /// <p>The queue ID provided to this budget to track usage.</p>
    pub fn usage_tracking_resource(&self) -> ::std::option::Option<&crate::types::UsageTrackingResource> {
        self.usage_tracking_resource.as_ref()
    }
    /// <p>The display name of the budget.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The description of the budget.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The dollar limit based on consumed usage.</p>
    pub fn approximate_dollar_limit(&self) -> ::std::option::Option<f32> {
        self.approximate_dollar_limit
    }
    /// <p>The budget actions to specify what happens when the budget runs out.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.actions.is_none()`.
    pub fn actions(&self) -> &[crate::types::BudgetActionToAdd] {
        self.actions.as_deref().unwrap_or_default()
    }
    /// <p>The schedule to associate with this budget.</p>
    pub fn schedule(&self) -> ::std::option::Option<&crate::types::BudgetSchedule> {
        self.schedule.as_ref()
    }
}
impl ::std::fmt::Debug for CreateBudgetInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateBudgetInput");
        formatter.field("client_token", &self.client_token);
        formatter.field("farm_id", &self.farm_id);
        formatter.field("usage_tracking_resource", &self.usage_tracking_resource);
        formatter.field("display_name", &self.display_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("approximate_dollar_limit", &self.approximate_dollar_limit);
        formatter.field("actions", &self.actions);
        formatter.field("schedule", &self.schedule);
        formatter.finish()
    }
}
impl CreateBudgetInput {
    /// Creates a new builder-style object to manufacture [`CreateBudgetInput`](crate::operation::create_budget::CreateBudgetInput).
    pub fn builder() -> crate::operation::create_budget::builders::CreateBudgetInputBuilder {
        crate::operation::create_budget::builders::CreateBudgetInputBuilder::default()
    }
}

/// A builder for [`CreateBudgetInput`](crate::operation::create_budget::CreateBudgetInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateBudgetInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) farm_id: ::std::option::Option<::std::string::String>,
    pub(crate) usage_tracking_resource: ::std::option::Option<crate::types::UsageTrackingResource>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) approximate_dollar_limit: ::std::option::Option<f32>,
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<crate::types::BudgetActionToAdd>>,
    pub(crate) schedule: ::std::option::Option<crate::types::BudgetSchedule>,
}
impl CreateBudgetInputBuilder {
    /// <p>The unique token which the server uses to recognize retries of the same request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique token which the server uses to recognize retries of the same request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The unique token which the server uses to recognize retries of the same request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The farm ID to include in this budget.</p>
    /// This field is required.
    pub fn farm_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.farm_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The farm ID to include in this budget.</p>
    pub fn set_farm_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.farm_id = input;
        self
    }
    /// <p>The farm ID to include in this budget.</p>
    pub fn get_farm_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.farm_id
    }
    /// <p>The queue ID provided to this budget to track usage.</p>
    /// This field is required.
    pub fn usage_tracking_resource(mut self, input: crate::types::UsageTrackingResource) -> Self {
        self.usage_tracking_resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>The queue ID provided to this budget to track usage.</p>
    pub fn set_usage_tracking_resource(mut self, input: ::std::option::Option<crate::types::UsageTrackingResource>) -> Self {
        self.usage_tracking_resource = input;
        self
    }
    /// <p>The queue ID provided to this budget to track usage.</p>
    pub fn get_usage_tracking_resource(&self) -> &::std::option::Option<crate::types::UsageTrackingResource> {
        &self.usage_tracking_resource
    }
    /// <p>The display name of the budget.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    /// This field is required.
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the budget.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name of the budget.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The description of the budget.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the budget.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the budget.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The dollar limit based on consumed usage.</p>
    /// This field is required.
    pub fn approximate_dollar_limit(mut self, input: f32) -> Self {
        self.approximate_dollar_limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The dollar limit based on consumed usage.</p>
    pub fn set_approximate_dollar_limit(mut self, input: ::std::option::Option<f32>) -> Self {
        self.approximate_dollar_limit = input;
        self
    }
    /// <p>The dollar limit based on consumed usage.</p>
    pub fn get_approximate_dollar_limit(&self) -> &::std::option::Option<f32> {
        &self.approximate_dollar_limit
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The budget actions to specify what happens when the budget runs out.</p>
    pub fn actions(mut self, input: crate::types::BudgetActionToAdd) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The budget actions to specify what happens when the budget runs out.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BudgetActionToAdd>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>The budget actions to specify what happens when the budget runs out.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BudgetActionToAdd>> {
        &self.actions
    }
    /// <p>The schedule to associate with this budget.</p>
    /// This field is required.
    pub fn schedule(mut self, input: crate::types::BudgetSchedule) -> Self {
        self.schedule = ::std::option::Option::Some(input);
        self
    }
    /// <p>The schedule to associate with this budget.</p>
    pub fn set_schedule(mut self, input: ::std::option::Option<crate::types::BudgetSchedule>) -> Self {
        self.schedule = input;
        self
    }
    /// <p>The schedule to associate with this budget.</p>
    pub fn get_schedule(&self) -> &::std::option::Option<crate::types::BudgetSchedule> {
        &self.schedule
    }
    /// Consumes the builder and constructs a [`CreateBudgetInput`](crate::operation::create_budget::CreateBudgetInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_budget::CreateBudgetInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_budget::CreateBudgetInput {
            client_token: self.client_token,
            farm_id: self.farm_id,
            usage_tracking_resource: self.usage_tracking_resource,
            display_name: self.display_name,
            description: self.description,
            approximate_dollar_limit: self.approximate_dollar_limit,
            actions: self.actions,
            schedule: self.schedule,
        })
    }
}
impl ::std::fmt::Debug for CreateBudgetInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateBudgetInputBuilder");
        formatter.field("client_token", &self.client_token);
        formatter.field("farm_id", &self.farm_id);
        formatter.field("usage_tracking_resource", &self.usage_tracking_resource);
        formatter.field("display_name", &self.display_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("approximate_dollar_limit", &self.approximate_dollar_limit);
        formatter.field("actions", &self.actions);
        formatter.field("schedule", &self.schedule);
        formatter.finish()
    }
}
