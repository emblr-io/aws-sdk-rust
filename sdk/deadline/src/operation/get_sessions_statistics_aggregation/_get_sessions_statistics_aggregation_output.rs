// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetSessionsStatisticsAggregationOutput {
    /// <p>The statistics for the specified fleets or queues.</p>
    pub statistics: ::std::option::Option<::std::vec::Vec<crate::types::Statistics>>,
    /// <p>If Deadline Cloud returns <code>nextToken</code>, then there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, call the operation again using the returned token. Keep all other arguments unchanged. If no results remain, then <code>nextToken</code> is set to <code>null</code>. Each pagination token expires after 24 hours. If you provide a token that isn't valid, then you receive an HTTP 400 <code>ValidationException</code> error.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The status of the aggregated results. An aggregation may fail or time out if the results are too large. If this happens, you can call the <code>StartSessionsStatisticsAggregation</code> operation after you reduce the aggregation time frame, reduce the number of queues or fleets in the aggregation, or increase the period length.</p>
    /// <p>If you call the <code>StartSessionsStatisticsAggregation </code> operation when the status is <code>IN_PROGRESS</code>, you will receive a <code>ThrottlingException</code>.</p>
    pub status: crate::types::SessionsStatisticsAggregationStatus,
    /// <p>A message that describes the status.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetSessionsStatisticsAggregationOutput {
    /// <p>The statistics for the specified fleets or queues.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.statistics.is_none()`.
    pub fn statistics(&self) -> &[crate::types::Statistics] {
        self.statistics.as_deref().unwrap_or_default()
    }
    /// <p>If Deadline Cloud returns <code>nextToken</code>, then there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, call the operation again using the returned token. Keep all other arguments unchanged. If no results remain, then <code>nextToken</code> is set to <code>null</code>. Each pagination token expires after 24 hours. If you provide a token that isn't valid, then you receive an HTTP 400 <code>ValidationException</code> error.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The status of the aggregated results. An aggregation may fail or time out if the results are too large. If this happens, you can call the <code>StartSessionsStatisticsAggregation</code> operation after you reduce the aggregation time frame, reduce the number of queues or fleets in the aggregation, or increase the period length.</p>
    /// <p>If you call the <code>StartSessionsStatisticsAggregation </code> operation when the status is <code>IN_PROGRESS</code>, you will receive a <code>ThrottlingException</code>.</p>
    pub fn status(&self) -> &crate::types::SessionsStatisticsAggregationStatus {
        &self.status
    }
    /// <p>A message that describes the status.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetSessionsStatisticsAggregationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSessionsStatisticsAggregationOutput {
    /// Creates a new builder-style object to manufacture [`GetSessionsStatisticsAggregationOutput`](crate::operation::get_sessions_statistics_aggregation::GetSessionsStatisticsAggregationOutput).
    pub fn builder() -> crate::operation::get_sessions_statistics_aggregation::builders::GetSessionsStatisticsAggregationOutputBuilder {
        crate::operation::get_sessions_statistics_aggregation::builders::GetSessionsStatisticsAggregationOutputBuilder::default()
    }
}

/// A builder for [`GetSessionsStatisticsAggregationOutput`](crate::operation::get_sessions_statistics_aggregation::GetSessionsStatisticsAggregationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetSessionsStatisticsAggregationOutputBuilder {
    pub(crate) statistics: ::std::option::Option<::std::vec::Vec<crate::types::Statistics>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::SessionsStatisticsAggregationStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetSessionsStatisticsAggregationOutputBuilder {
    /// Appends an item to `statistics`.
    ///
    /// To override the contents of this collection use [`set_statistics`](Self::set_statistics).
    ///
    /// <p>The statistics for the specified fleets or queues.</p>
    pub fn statistics(mut self, input: crate::types::Statistics) -> Self {
        let mut v = self.statistics.unwrap_or_default();
        v.push(input);
        self.statistics = ::std::option::Option::Some(v);
        self
    }
    /// <p>The statistics for the specified fleets or queues.</p>
    pub fn set_statistics(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Statistics>>) -> Self {
        self.statistics = input;
        self
    }
    /// <p>The statistics for the specified fleets or queues.</p>
    pub fn get_statistics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Statistics>> {
        &self.statistics
    }
    /// <p>If Deadline Cloud returns <code>nextToken</code>, then there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, call the operation again using the returned token. Keep all other arguments unchanged. If no results remain, then <code>nextToken</code> is set to <code>null</code>. Each pagination token expires after 24 hours. If you provide a token that isn't valid, then you receive an HTTP 400 <code>ValidationException</code> error.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If Deadline Cloud returns <code>nextToken</code>, then there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, call the operation again using the returned token. Keep all other arguments unchanged. If no results remain, then <code>nextToken</code> is set to <code>null</code>. Each pagination token expires after 24 hours. If you provide a token that isn't valid, then you receive an HTTP 400 <code>ValidationException</code> error.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If Deadline Cloud returns <code>nextToken</code>, then there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, call the operation again using the returned token. Keep all other arguments unchanged. If no results remain, then <code>nextToken</code> is set to <code>null</code>. Each pagination token expires after 24 hours. If you provide a token that isn't valid, then you receive an HTTP 400 <code>ValidationException</code> error.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The status of the aggregated results. An aggregation may fail or time out if the results are too large. If this happens, you can call the <code>StartSessionsStatisticsAggregation</code> operation after you reduce the aggregation time frame, reduce the number of queues or fleets in the aggregation, or increase the period length.</p>
    /// <p>If you call the <code>StartSessionsStatisticsAggregation </code> operation when the status is <code>IN_PROGRESS</code>, you will receive a <code>ThrottlingException</code>.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::SessionsStatisticsAggregationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the aggregated results. An aggregation may fail or time out if the results are too large. If this happens, you can call the <code>StartSessionsStatisticsAggregation</code> operation after you reduce the aggregation time frame, reduce the number of queues or fleets in the aggregation, or increase the period length.</p>
    /// <p>If you call the <code>StartSessionsStatisticsAggregation </code> operation when the status is <code>IN_PROGRESS</code>, you will receive a <code>ThrottlingException</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SessionsStatisticsAggregationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the aggregated results. An aggregation may fail or time out if the results are too large. If this happens, you can call the <code>StartSessionsStatisticsAggregation</code> operation after you reduce the aggregation time frame, reduce the number of queues or fleets in the aggregation, or increase the period length.</p>
    /// <p>If you call the <code>StartSessionsStatisticsAggregation </code> operation when the status is <code>IN_PROGRESS</code>, you will receive a <code>ThrottlingException</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SessionsStatisticsAggregationStatus> {
        &self.status
    }
    /// <p>A message that describes the status.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message that describes the status.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>A message that describes the status.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSessionsStatisticsAggregationOutput`](crate::operation::get_sessions_statistics_aggregation::GetSessionsStatisticsAggregationOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::operation::get_sessions_statistics_aggregation::builders::GetSessionsStatisticsAggregationOutputBuilder::status)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_sessions_statistics_aggregation::GetSessionsStatisticsAggregationOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::get_sessions_statistics_aggregation::GetSessionsStatisticsAggregationOutput {
                statistics: self.statistics,
                next_token: self.next_token,
                status: self.status.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "status",
                        "status was not specified but it is required when building GetSessionsStatisticsAggregationOutput",
                    )
                })?,
                status_message: self.status_message,
                _request_id: self._request_id,
            },
        )
    }
}
