// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetMonitorInput {
    /// <p>The unique identifier for the monitor. This ID is returned by the <code>CreateMonitor</code> operation.</p>
    pub monitor_id: ::std::option::Option<::std::string::String>,
}
impl GetMonitorInput {
    /// <p>The unique identifier for the monitor. This ID is returned by the <code>CreateMonitor</code> operation.</p>
    pub fn monitor_id(&self) -> ::std::option::Option<&str> {
        self.monitor_id.as_deref()
    }
}
impl GetMonitorInput {
    /// Creates a new builder-style object to manufacture [`GetMonitorInput`](crate::operation::get_monitor::GetMonitorInput).
    pub fn builder() -> crate::operation::get_monitor::builders::GetMonitorInputBuilder {
        crate::operation::get_monitor::builders::GetMonitorInputBuilder::default()
    }
}

/// A builder for [`GetMonitorInput`](crate::operation::get_monitor::GetMonitorInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetMonitorInputBuilder {
    pub(crate) monitor_id: ::std::option::Option<::std::string::String>,
}
impl GetMonitorInputBuilder {
    /// <p>The unique identifier for the monitor. This ID is returned by the <code>CreateMonitor</code> operation.</p>
    /// This field is required.
    pub fn monitor_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monitor_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the monitor. This ID is returned by the <code>CreateMonitor</code> operation.</p>
    pub fn set_monitor_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monitor_id = input;
        self
    }
    /// <p>The unique identifier for the monitor. This ID is returned by the <code>CreateMonitor</code> operation.</p>
    pub fn get_monitor_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.monitor_id
    }
    /// Consumes the builder and constructs a [`GetMonitorInput`](crate::operation::get_monitor::GetMonitorInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::get_monitor::GetMonitorInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_monitor::GetMonitorInput { monitor_id: self.monitor_id })
    }
}
