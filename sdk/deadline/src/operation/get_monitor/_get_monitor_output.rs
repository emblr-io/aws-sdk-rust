// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetMonitorOutput {
    /// <p>The unique identifier for the monitor.</p>
    pub monitor_id: ::std::string::String,
    /// <p>The name used to identify the monitor on the Deadline Cloud console.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub display_name: ::std::string::String,
    /// <p>The subdomain used for the monitor URL. The full URL of the monitor is subdomain.Region.deadlinecloud.amazonaws.com.</p>
    pub subdomain: ::std::string::String,
    /// <p>The complete URL of the monitor. The full URL of the monitor is subdomain.Region.deadlinecloud.amazonaws.com.</p>
    pub url: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the IAM role for the monitor. Users of the monitor use this role to access Deadline Cloud resources.</p>
    pub role_arn: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the IAM Identity Center instance responsible for authenticating monitor users.</p>
    pub identity_center_instance_arn: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) that the IAM Identity Center assigned to the monitor when it was created.</p>
    pub identity_center_application_arn: ::std::string::String,
    /// <p>The UNIX timestamp of the date and time that the monitor was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The user name of the person that created the monitor.</p>
    pub created_by: ::std::string::String,
    /// <p>The UNIX timestamp of the last date and time that the monitor was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The user name of the person that last updated the monitor.</p>
    pub updated_by: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetMonitorOutput {
    /// <p>The unique identifier for the monitor.</p>
    pub fn monitor_id(&self) -> &str {
        use std::ops::Deref;
        self.monitor_id.deref()
    }
    /// <p>The name used to identify the monitor on the Deadline Cloud console.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn display_name(&self) -> &str {
        use std::ops::Deref;
        self.display_name.deref()
    }
    /// <p>The subdomain used for the monitor URL. The full URL of the monitor is subdomain.Region.deadlinecloud.amazonaws.com.</p>
    pub fn subdomain(&self) -> &str {
        use std::ops::Deref;
        self.subdomain.deref()
    }
    /// <p>The complete URL of the monitor. The full URL of the monitor is subdomain.Region.deadlinecloud.amazonaws.com.</p>
    pub fn url(&self) -> &str {
        use std::ops::Deref;
        self.url.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role for the monitor. Users of the monitor use this role to access Deadline Cloud resources.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM Identity Center instance responsible for authenticating monitor users.</p>
    pub fn identity_center_instance_arn(&self) -> &str {
        use std::ops::Deref;
        self.identity_center_instance_arn.deref()
    }
    /// <p>The Amazon Resource Name (ARN) that the IAM Identity Center assigned to the monitor when it was created.</p>
    pub fn identity_center_application_arn(&self) -> &str {
        use std::ops::Deref;
        self.identity_center_application_arn.deref()
    }
    /// <p>The UNIX timestamp of the date and time that the monitor was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The user name of the person that created the monitor.</p>
    pub fn created_by(&self) -> &str {
        use std::ops::Deref;
        self.created_by.deref()
    }
    /// <p>The UNIX timestamp of the last date and time that the monitor was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The user name of the person that last updated the monitor.</p>
    pub fn updated_by(&self) -> ::std::option::Option<&str> {
        self.updated_by.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetMonitorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetMonitorOutput {
    /// Creates a new builder-style object to manufacture [`GetMonitorOutput`](crate::operation::get_monitor::GetMonitorOutput).
    pub fn builder() -> crate::operation::get_monitor::builders::GetMonitorOutputBuilder {
        crate::operation::get_monitor::builders::GetMonitorOutputBuilder::default()
    }
}

/// A builder for [`GetMonitorOutput`](crate::operation::get_monitor::GetMonitorOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetMonitorOutputBuilder {
    pub(crate) monitor_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) subdomain: ::std::option::Option<::std::string::String>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) identity_center_instance_arn: ::std::option::Option<::std::string::String>,
    pub(crate) identity_center_application_arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_by: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetMonitorOutputBuilder {
    /// <p>The unique identifier for the monitor.</p>
    /// This field is required.
    pub fn monitor_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monitor_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the monitor.</p>
    pub fn set_monitor_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monitor_id = input;
        self
    }
    /// <p>The unique identifier for the monitor.</p>
    pub fn get_monitor_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.monitor_id
    }
    /// <p>The name used to identify the monitor on the Deadline Cloud console.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    /// This field is required.
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name used to identify the monitor on the Deadline Cloud console.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The name used to identify the monitor on the Deadline Cloud console.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The subdomain used for the monitor URL. The full URL of the monitor is subdomain.Region.deadlinecloud.amazonaws.com.</p>
    /// This field is required.
    pub fn subdomain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subdomain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subdomain used for the monitor URL. The full URL of the monitor is subdomain.Region.deadlinecloud.amazonaws.com.</p>
    pub fn set_subdomain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subdomain = input;
        self
    }
    /// <p>The subdomain used for the monitor URL. The full URL of the monitor is subdomain.Region.deadlinecloud.amazonaws.com.</p>
    pub fn get_subdomain(&self) -> &::std::option::Option<::std::string::String> {
        &self.subdomain
    }
    /// <p>The complete URL of the monitor. The full URL of the monitor is subdomain.Region.deadlinecloud.amazonaws.com.</p>
    /// This field is required.
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The complete URL of the monitor. The full URL of the monitor is subdomain.Region.deadlinecloud.amazonaws.com.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The complete URL of the monitor. The full URL of the monitor is subdomain.Region.deadlinecloud.amazonaws.com.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role for the monitor. Users of the monitor use this role to access Deadline Cloud resources.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role for the monitor. Users of the monitor use this role to access Deadline Cloud resources.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role for the monitor. Users of the monitor use this role to access Deadline Cloud resources.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM Identity Center instance responsible for authenticating monitor users.</p>
    /// This field is required.
    pub fn identity_center_instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity_center_instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM Identity Center instance responsible for authenticating monitor users.</p>
    pub fn set_identity_center_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity_center_instance_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM Identity Center instance responsible for authenticating monitor users.</p>
    pub fn get_identity_center_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity_center_instance_arn
    }
    /// <p>The Amazon Resource Name (ARN) that the IAM Identity Center assigned to the monitor when it was created.</p>
    /// This field is required.
    pub fn identity_center_application_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity_center_application_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that the IAM Identity Center assigned to the monitor when it was created.</p>
    pub fn set_identity_center_application_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity_center_application_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that the IAM Identity Center assigned to the monitor when it was created.</p>
    pub fn get_identity_center_application_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity_center_application_arn
    }
    /// <p>The UNIX timestamp of the date and time that the monitor was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The UNIX timestamp of the date and time that the monitor was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The UNIX timestamp of the date and time that the monitor was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The user name of the person that created the monitor.</p>
    /// This field is required.
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user name of the person that created the monitor.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The user name of the person that created the monitor.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The UNIX timestamp of the last date and time that the monitor was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The UNIX timestamp of the last date and time that the monitor was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The UNIX timestamp of the last date and time that the monitor was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The user name of the person that last updated the monitor.</p>
    pub fn updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user name of the person that last updated the monitor.</p>
    pub fn set_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_by = input;
        self
    }
    /// <p>The user name of the person that last updated the monitor.</p>
    pub fn get_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_by
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetMonitorOutput`](crate::operation::get_monitor::GetMonitorOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`monitor_id`](crate::operation::get_monitor::builders::GetMonitorOutputBuilder::monitor_id)
    /// - [`display_name`](crate::operation::get_monitor::builders::GetMonitorOutputBuilder::display_name)
    /// - [`subdomain`](crate::operation::get_monitor::builders::GetMonitorOutputBuilder::subdomain)
    /// - [`url`](crate::operation::get_monitor::builders::GetMonitorOutputBuilder::url)
    /// - [`role_arn`](crate::operation::get_monitor::builders::GetMonitorOutputBuilder::role_arn)
    /// - [`identity_center_instance_arn`](crate::operation::get_monitor::builders::GetMonitorOutputBuilder::identity_center_instance_arn)
    /// - [`identity_center_application_arn`](crate::operation::get_monitor::builders::GetMonitorOutputBuilder::identity_center_application_arn)
    /// - [`created_at`](crate::operation::get_monitor::builders::GetMonitorOutputBuilder::created_at)
    /// - [`created_by`](crate::operation::get_monitor::builders::GetMonitorOutputBuilder::created_by)
    pub fn build(self) -> ::std::result::Result<crate::operation::get_monitor::GetMonitorOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_monitor::GetMonitorOutput {
            monitor_id: self.monitor_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "monitor_id",
                    "monitor_id was not specified but it is required when building GetMonitorOutput",
                )
            })?,
            display_name: self.display_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "display_name",
                    "display_name was not specified but it is required when building GetMonitorOutput",
                )
            })?,
            subdomain: self.subdomain.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "subdomain",
                    "subdomain was not specified but it is required when building GetMonitorOutput",
                )
            })?,
            url: self.url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "url",
                    "url was not specified but it is required when building GetMonitorOutput",
                )
            })?,
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building GetMonitorOutput",
                )
            })?,
            identity_center_instance_arn: self.identity_center_instance_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "identity_center_instance_arn",
                    "identity_center_instance_arn was not specified but it is required when building GetMonitorOutput",
                )
            })?,
            identity_center_application_arn: self.identity_center_application_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "identity_center_application_arn",
                    "identity_center_application_arn was not specified but it is required when building GetMonitorOutput",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building GetMonitorOutput",
                )
            })?,
            created_by: self.created_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_by",
                    "created_by was not specified but it is required when building GetMonitorOutput",
                )
            })?,
            updated_at: self.updated_at,
            updated_by: self.updated_by,
            _request_id: self._request_id,
        })
    }
}
