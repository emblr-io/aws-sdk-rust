// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateStorageProfileInput {
    /// <p>The unique token which the server uses to recognize retries of the same request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The farm ID of the farm to connect to the storage profile.</p>
    pub farm_id: ::std::option::Option<::std::string::String>,
    /// <p>The display name of the storage profile.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of operating system (OS) for the storage profile.</p>
    pub os_family: ::std::option::Option<crate::types::StorageProfileOperatingSystemFamily>,
    /// <p>File system paths to include in the storage profile.</p>
    pub file_system_locations: ::std::option::Option<::std::vec::Vec<crate::types::FileSystemLocation>>,
}
impl CreateStorageProfileInput {
    /// <p>The unique token which the server uses to recognize retries of the same request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The farm ID of the farm to connect to the storage profile.</p>
    pub fn farm_id(&self) -> ::std::option::Option<&str> {
        self.farm_id.as_deref()
    }
    /// <p>The display name of the storage profile.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The type of operating system (OS) for the storage profile.</p>
    pub fn os_family(&self) -> ::std::option::Option<&crate::types::StorageProfileOperatingSystemFamily> {
        self.os_family.as_ref()
    }
    /// <p>File system paths to include in the storage profile.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.file_system_locations.is_none()`.
    pub fn file_system_locations(&self) -> &[crate::types::FileSystemLocation] {
        self.file_system_locations.as_deref().unwrap_or_default()
    }
}
impl CreateStorageProfileInput {
    /// Creates a new builder-style object to manufacture [`CreateStorageProfileInput`](crate::operation::create_storage_profile::CreateStorageProfileInput).
    pub fn builder() -> crate::operation::create_storage_profile::builders::CreateStorageProfileInputBuilder {
        crate::operation::create_storage_profile::builders::CreateStorageProfileInputBuilder::default()
    }
}

/// A builder for [`CreateStorageProfileInput`](crate::operation::create_storage_profile::CreateStorageProfileInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateStorageProfileInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) farm_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) os_family: ::std::option::Option<crate::types::StorageProfileOperatingSystemFamily>,
    pub(crate) file_system_locations: ::std::option::Option<::std::vec::Vec<crate::types::FileSystemLocation>>,
}
impl CreateStorageProfileInputBuilder {
    /// <p>The unique token which the server uses to recognize retries of the same request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique token which the server uses to recognize retries of the same request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The unique token which the server uses to recognize retries of the same request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The farm ID of the farm to connect to the storage profile.</p>
    /// This field is required.
    pub fn farm_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.farm_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The farm ID of the farm to connect to the storage profile.</p>
    pub fn set_farm_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.farm_id = input;
        self
    }
    /// <p>The farm ID of the farm to connect to the storage profile.</p>
    pub fn get_farm_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.farm_id
    }
    /// <p>The display name of the storage profile.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    /// This field is required.
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the storage profile.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name of the storage profile.</p><important>
    /// <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p>
    /// </important>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The type of operating system (OS) for the storage profile.</p>
    /// This field is required.
    pub fn os_family(mut self, input: crate::types::StorageProfileOperatingSystemFamily) -> Self {
        self.os_family = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of operating system (OS) for the storage profile.</p>
    pub fn set_os_family(mut self, input: ::std::option::Option<crate::types::StorageProfileOperatingSystemFamily>) -> Self {
        self.os_family = input;
        self
    }
    /// <p>The type of operating system (OS) for the storage profile.</p>
    pub fn get_os_family(&self) -> &::std::option::Option<crate::types::StorageProfileOperatingSystemFamily> {
        &self.os_family
    }
    /// Appends an item to `file_system_locations`.
    ///
    /// To override the contents of this collection use [`set_file_system_locations`](Self::set_file_system_locations).
    ///
    /// <p>File system paths to include in the storage profile.</p>
    pub fn file_system_locations(mut self, input: crate::types::FileSystemLocation) -> Self {
        let mut v = self.file_system_locations.unwrap_or_default();
        v.push(input);
        self.file_system_locations = ::std::option::Option::Some(v);
        self
    }
    /// <p>File system paths to include in the storage profile.</p>
    pub fn set_file_system_locations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FileSystemLocation>>) -> Self {
        self.file_system_locations = input;
        self
    }
    /// <p>File system paths to include in the storage profile.</p>
    pub fn get_file_system_locations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FileSystemLocation>> {
        &self.file_system_locations
    }
    /// Consumes the builder and constructs a [`CreateStorageProfileInput`](crate::operation::create_storage_profile::CreateStorageProfileInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_storage_profile::CreateStorageProfileInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_storage_profile::CreateStorageProfileInput {
            client_token: self.client_token,
            farm_id: self.farm_id,
            display_name: self.display_name,
            os_family: self.os_family,
            file_system_locations: self.file_system_locations,
        })
    }
}
