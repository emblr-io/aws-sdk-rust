// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a stream of events between your application and Amazon Lex V2.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum StartConversationRequestEventStream {
    /// <p>Speech audio sent from your client application to Amazon Lex V2. Audio starts accumulating when Amazon Lex V2 identifies a voice and continues until a natural pause in the speech is found before processing.</p>
    AudioInputEvent(crate::types::AudioInputEvent),
    /// <p>Configuration information sent from your client application to Amazon Lex V2</p>
    ConfigurationEvent(crate::types::ConfigurationEvent),
    /// <p>Event sent from the client application to indicate to Amazon Lex V2 that the conversation is over.</p>
    DisconnectionEvent(crate::types::DisconnectionEvent),
    /// <p>DTMF information sent to Amazon Lex V2 by your application. Amazon Lex V2 accumulates the DMTF information from when the user sends the first character and ends</p>
    /// <ul>
    /// <li>
    /// <p>when there's a pause longer that the value configured for the end timeout.</p></li>
    /// <li>
    /// <p>when there's a digit that is the configured end character.</p></li>
    /// <li>
    /// <p>when Amazon Lex V2 accumulates characters equal to the maximum DTMF character configuration.</p></li>
    /// </ul>
    DtmfInputEvent(crate::types::DtmfInputEvent),
    /// <p>Event sent from the client application to Amazon Lex V2 to indicate that it has finished playing audio and that Amazon Lex V2 should start listening for user input.</p>
    PlaybackCompletionEvent(crate::types::PlaybackCompletionEvent),
    /// <p>Text sent from your client application to Amazon Lex V2. Each <code>TextInputEvent</code> is processed individually.</p>
    TextInputEvent(crate::types::TextInputEvent),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl StartConversationRequestEventStream {
    /// Tries to convert the enum instance into [`AudioInputEvent`](crate::types::StartConversationRequestEventStream::AudioInputEvent), extracting the inner [`AudioInputEvent`](crate::types::AudioInputEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_audio_input_event(&self) -> ::std::result::Result<&crate::types::AudioInputEvent, &Self> {
        if let StartConversationRequestEventStream::AudioInputEvent(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AudioInputEvent`](crate::types::StartConversationRequestEventStream::AudioInputEvent).
    pub fn is_audio_input_event(&self) -> bool {
        self.as_audio_input_event().is_ok()
    }
    /// Tries to convert the enum instance into [`ConfigurationEvent`](crate::types::StartConversationRequestEventStream::ConfigurationEvent), extracting the inner [`ConfigurationEvent`](crate::types::ConfigurationEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_configuration_event(&self) -> ::std::result::Result<&crate::types::ConfigurationEvent, &Self> {
        if let StartConversationRequestEventStream::ConfigurationEvent(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ConfigurationEvent`](crate::types::StartConversationRequestEventStream::ConfigurationEvent).
    pub fn is_configuration_event(&self) -> bool {
        self.as_configuration_event().is_ok()
    }
    /// Tries to convert the enum instance into [`DisconnectionEvent`](crate::types::StartConversationRequestEventStream::DisconnectionEvent), extracting the inner [`DisconnectionEvent`](crate::types::DisconnectionEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_disconnection_event(&self) -> ::std::result::Result<&crate::types::DisconnectionEvent, &Self> {
        if let StartConversationRequestEventStream::DisconnectionEvent(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`DisconnectionEvent`](crate::types::StartConversationRequestEventStream::DisconnectionEvent).
    pub fn is_disconnection_event(&self) -> bool {
        self.as_disconnection_event().is_ok()
    }
    /// Tries to convert the enum instance into [`DtmfInputEvent`](crate::types::StartConversationRequestEventStream::DtmfInputEvent), extracting the inner [`DtmfInputEvent`](crate::types::DtmfInputEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_dtmf_input_event(&self) -> ::std::result::Result<&crate::types::DtmfInputEvent, &Self> {
        if let StartConversationRequestEventStream::DtmfInputEvent(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`DtmfInputEvent`](crate::types::StartConversationRequestEventStream::DtmfInputEvent).
    pub fn is_dtmf_input_event(&self) -> bool {
        self.as_dtmf_input_event().is_ok()
    }
    /// Tries to convert the enum instance into [`PlaybackCompletionEvent`](crate::types::StartConversationRequestEventStream::PlaybackCompletionEvent), extracting the inner [`PlaybackCompletionEvent`](crate::types::PlaybackCompletionEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_playback_completion_event(&self) -> ::std::result::Result<&crate::types::PlaybackCompletionEvent, &Self> {
        if let StartConversationRequestEventStream::PlaybackCompletionEvent(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`PlaybackCompletionEvent`](crate::types::StartConversationRequestEventStream::PlaybackCompletionEvent).
    pub fn is_playback_completion_event(&self) -> bool {
        self.as_playback_completion_event().is_ok()
    }
    /// Tries to convert the enum instance into [`TextInputEvent`](crate::types::StartConversationRequestEventStream::TextInputEvent), extracting the inner [`TextInputEvent`](crate::types::TextInputEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_text_input_event(&self) -> ::std::result::Result<&crate::types::TextInputEvent, &Self> {
        if let StartConversationRequestEventStream::TextInputEvent(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`TextInputEvent`](crate::types::StartConversationRequestEventStream::TextInputEvent).
    pub fn is_text_input_event(&self) -> bool {
        self.as_text_input_event().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
