// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a chunk of audio sent from the client application to Amazon Lex V2. The audio is all or part of an utterance from the user.</p>
/// <p>Amazon Lex V2 accumulates audio chunks until it recognizes a natural pause in speech before processing the input.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AudioInputEvent {
    /// <p>An encoded stream of audio.</p>
    pub audio_chunk: ::std::option::Option<::aws_smithy_types::Blob>,
    /// <p>The encoding used for the audio chunk. You must use 8 KHz PCM 16-bit mono-channel little-endian format. The value of the field should be:</p>
    /// <p><code>audio/lpcm; sample-rate=8000; sample-size-bits=16; channel-count=1; is-big-endian=false</code></p>
    pub content_type: ::std::string::String,
    /// <p>A unique identifier that your application assigns to the event. You can use this to identify events in logs.</p>
    pub event_id: ::std::option::Option<::std::string::String>,
    /// <p>A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.</p>
    pub client_timestamp_millis: i64,
}
impl AudioInputEvent {
    /// <p>An encoded stream of audio.</p>
    pub fn audio_chunk(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.audio_chunk.as_ref()
    }
    /// <p>The encoding used for the audio chunk. You must use 8 KHz PCM 16-bit mono-channel little-endian format. The value of the field should be:</p>
    /// <p><code>audio/lpcm; sample-rate=8000; sample-size-bits=16; channel-count=1; is-big-endian=false</code></p>
    pub fn content_type(&self) -> &str {
        use std::ops::Deref;
        self.content_type.deref()
    }
    /// <p>A unique identifier that your application assigns to the event. You can use this to identify events in logs.</p>
    pub fn event_id(&self) -> ::std::option::Option<&str> {
        self.event_id.as_deref()
    }
    /// <p>A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.</p>
    pub fn client_timestamp_millis(&self) -> i64 {
        self.client_timestamp_millis
    }
}
impl AudioInputEvent {
    /// Creates a new builder-style object to manufacture [`AudioInputEvent`](crate::types::AudioInputEvent).
    pub fn builder() -> crate::types::builders::AudioInputEventBuilder {
        crate::types::builders::AudioInputEventBuilder::default()
    }
}

/// A builder for [`AudioInputEvent`](crate::types::AudioInputEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AudioInputEventBuilder {
    pub(crate) audio_chunk: ::std::option::Option<::aws_smithy_types::Blob>,
    pub(crate) content_type: ::std::option::Option<::std::string::String>,
    pub(crate) event_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_timestamp_millis: ::std::option::Option<i64>,
}
impl AudioInputEventBuilder {
    /// <p>An encoded stream of audio.</p>
    pub fn audio_chunk(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.audio_chunk = ::std::option::Option::Some(input);
        self
    }
    /// <p>An encoded stream of audio.</p>
    pub fn set_audio_chunk(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.audio_chunk = input;
        self
    }
    /// <p>An encoded stream of audio.</p>
    pub fn get_audio_chunk(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.audio_chunk
    }
    /// <p>The encoding used for the audio chunk. You must use 8 KHz PCM 16-bit mono-channel little-endian format. The value of the field should be:</p>
    /// <p><code>audio/lpcm; sample-rate=8000; sample-size-bits=16; channel-count=1; is-big-endian=false</code></p>
    /// This field is required.
    pub fn content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The encoding used for the audio chunk. You must use 8 KHz PCM 16-bit mono-channel little-endian format. The value of the field should be:</p>
    /// <p><code>audio/lpcm; sample-rate=8000; sample-size-bits=16; channel-count=1; is-big-endian=false</code></p>
    pub fn set_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>The encoding used for the audio chunk. You must use 8 KHz PCM 16-bit mono-channel little-endian format. The value of the field should be:</p>
    /// <p><code>audio/lpcm; sample-rate=8000; sample-size-bits=16; channel-count=1; is-big-endian=false</code></p>
    pub fn get_content_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_type
    }
    /// <p>A unique identifier that your application assigns to the event. You can use this to identify events in logs.</p>
    pub fn event_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier that your application assigns to the event. You can use this to identify events in logs.</p>
    pub fn set_event_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>A unique identifier that your application assigns to the event. You can use this to identify events in logs.</p>
    pub fn get_event_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_id
    }
    /// <p>A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.</p>
    pub fn client_timestamp_millis(mut self, input: i64) -> Self {
        self.client_timestamp_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.</p>
    pub fn set_client_timestamp_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.client_timestamp_millis = input;
        self
    }
    /// <p>A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.</p>
    pub fn get_client_timestamp_millis(&self) -> &::std::option::Option<i64> {
        &self.client_timestamp_millis
    }
    /// Consumes the builder and constructs a [`AudioInputEvent`](crate::types::AudioInputEvent).
    /// This method will fail if any of the following fields are not set:
    /// - [`content_type`](crate::types::builders::AudioInputEventBuilder::content_type)
    pub fn build(self) -> ::std::result::Result<crate::types::AudioInputEvent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AudioInputEvent {
            audio_chunk: self.audio_chunk,
            content_type: self.content_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content_type",
                    "content_type was not specified but it is required when building AudioInputEvent",
                )
            })?,
            event_id: self.event_id,
            client_timestamp_millis: self.client_timestamp_millis.unwrap_or_default(),
        })
    }
}
