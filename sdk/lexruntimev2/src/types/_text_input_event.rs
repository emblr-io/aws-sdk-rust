// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The event sent from your client application to Amazon Lex V2 with text input from the user.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TextInputEvent {
    /// <p>The text from the user. Amazon Lex V2 processes this as a complete statement.</p>
    pub text: ::std::string::String,
    /// <p>A unique identifier that your application assigns to the event. You can use this to identify events in logs.</p>
    pub event_id: ::std::option::Option<::std::string::String>,
    /// <p>A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.</p>
    pub client_timestamp_millis: i64,
}
impl TextInputEvent {
    /// <p>The text from the user. Amazon Lex V2 processes this as a complete statement.</p>
    pub fn text(&self) -> &str {
        use std::ops::Deref;
        self.text.deref()
    }
    /// <p>A unique identifier that your application assigns to the event. You can use this to identify events in logs.</p>
    pub fn event_id(&self) -> ::std::option::Option<&str> {
        self.event_id.as_deref()
    }
    /// <p>A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.</p>
    pub fn client_timestamp_millis(&self) -> i64 {
        self.client_timestamp_millis
    }
}
impl ::std::fmt::Debug for TextInputEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TextInputEvent");
        formatter.field("text", &"*** Sensitive Data Redacted ***");
        formatter.field("event_id", &self.event_id);
        formatter.field("client_timestamp_millis", &self.client_timestamp_millis);
        formatter.finish()
    }
}
impl TextInputEvent {
    /// Creates a new builder-style object to manufacture [`TextInputEvent`](crate::types::TextInputEvent).
    pub fn builder() -> crate::types::builders::TextInputEventBuilder {
        crate::types::builders::TextInputEventBuilder::default()
    }
}

/// A builder for [`TextInputEvent`](crate::types::TextInputEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct TextInputEventBuilder {
    pub(crate) text: ::std::option::Option<::std::string::String>,
    pub(crate) event_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_timestamp_millis: ::std::option::Option<i64>,
}
impl TextInputEventBuilder {
    /// <p>The text from the user. Amazon Lex V2 processes this as a complete statement.</p>
    /// This field is required.
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text from the user. Amazon Lex V2 processes this as a complete statement.</p>
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>The text from the user. Amazon Lex V2 processes this as a complete statement.</p>
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }
    /// <p>A unique identifier that your application assigns to the event. You can use this to identify events in logs.</p>
    pub fn event_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier that your application assigns to the event. You can use this to identify events in logs.</p>
    pub fn set_event_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>A unique identifier that your application assigns to the event. You can use this to identify events in logs.</p>
    pub fn get_event_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_id
    }
    /// <p>A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.</p>
    pub fn client_timestamp_millis(mut self, input: i64) -> Self {
        self.client_timestamp_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.</p>
    pub fn set_client_timestamp_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.client_timestamp_millis = input;
        self
    }
    /// <p>A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.</p>
    pub fn get_client_timestamp_millis(&self) -> &::std::option::Option<i64> {
        &self.client_timestamp_millis
    }
    /// Consumes the builder and constructs a [`TextInputEvent`](crate::types::TextInputEvent).
    /// This method will fail if any of the following fields are not set:
    /// - [`text`](crate::types::builders::TextInputEventBuilder::text)
    pub fn build(self) -> ::std::result::Result<crate::types::TextInputEvent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TextInputEvent {
            text: self.text.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "text",
                    "text was not specified but it is required when building TextInputEvent",
                )
            })?,
            event_id: self.event_id,
            client_timestamp_millis: self.client_timestamp_millis.unwrap_or_default(),
        })
    }
}
impl ::std::fmt::Debug for TextInputEventBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TextInputEventBuilder");
        formatter.field("text", &"*** Sensitive Data Redacted ***");
        formatter.field("event_id", &self.event_id);
        formatter.field("client_timestamp_millis", &self.client_timestamp_millis);
        formatter.finish()
    }
}
