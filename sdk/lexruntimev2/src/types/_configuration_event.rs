// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The initial event sent from the application to Amazon Lex V2 to configure the conversation, including session and request attributes and the response content type.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfigurationEvent {
    /// <p>Request-specific information passed between the client application and Amazon Lex V2.</p>
    /// <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create any request attributes for prefix <code>x-amz-lex:</code>.</p>
    pub request_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The message that Amazon Lex V2 returns in the response can be either text or speech based on the <code>responseContentType</code> value.</p>
    /// <ul>
    /// <li>
    /// <p>If the value is <code>text/plain;charset=utf-8</code>, Amazon Lex V2 returns text in the response.</p></li>
    /// <li>
    /// <p>If the value begins with <code>audio/</code>, Amazon Lex V2 returns speech in the response. Amazon Lex V2 uses Amazon Polly to generate the speech using the configuration that you specified in the <code>requestContentType</code> parameter. For example, if you specify <code>audio/mpeg</code> as the value, Amazon Lex V2 returns speech in the MPEG format.</p></li>
    /// <li>
    /// <p>If the value is <code>audio/pcm</code>, the speech returned is audio/pcm in 16-bit, little-endian format.</p></li>
    /// <li>
    /// <p>The following are the accepted values:</p>
    /// <ul>
    /// <li>
    /// <p>audio/mpeg</p></li>
    /// <li>
    /// <p>audio/ogg</p></li>
    /// <li>
    /// <p>audio/pcm</p></li>
    /// <li>
    /// <p>audio/* (defaults to mpeg)</p></li>
    /// <li>
    /// <p>text/plain; charset=utf-8</p></li>
    /// </ul></li>
    /// </ul>
    pub response_content_type: ::std::string::String,
    /// <p>The state of the user's session with Amazon Lex V2.</p>
    pub session_state: ::std::option::Option<crate::types::SessionState>,
    /// <p>A list of messages to send to the user.</p>
    /// <p>If you set the <code>welcomeMessage</code> field, you must also set the <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_runtime_DialogAction.html"> <code>DialogAction</code> </a> structure's <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_runtime_DialogAction.html#lexv2-Type-runtime_DialogAction-type"> <code>type</code> </a> field.</p>
    pub welcome_messages: ::std::option::Option<::std::vec::Vec<crate::types::Message>>,
    /// <p>Determines whether Amazon Lex V2 should send audio responses to the client application.</p>
    /// <p>Set this field to false when the client is operating in a playback mode where audio responses are played to the user. If the client isn't operating in playback mode, such as a text chat application, set this to true so that Amazon Lex V2 doesn't wait for the prompt to finish playing on the client.</p>
    pub disable_playback: bool,
    /// <p>A unique identifier that your application assigns to the event. You can use this to identify events in logs.</p>
    pub event_id: ::std::option::Option<::std::string::String>,
    /// <p>A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.</p>
    pub client_timestamp_millis: i64,
}
impl ConfigurationEvent {
    /// <p>Request-specific information passed between the client application and Amazon Lex V2.</p>
    /// <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create any request attributes for prefix <code>x-amz-lex:</code>.</p>
    pub fn request_attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.request_attributes.as_ref()
    }
    /// <p>The message that Amazon Lex V2 returns in the response can be either text or speech based on the <code>responseContentType</code> value.</p>
    /// <ul>
    /// <li>
    /// <p>If the value is <code>text/plain;charset=utf-8</code>, Amazon Lex V2 returns text in the response.</p></li>
    /// <li>
    /// <p>If the value begins with <code>audio/</code>, Amazon Lex V2 returns speech in the response. Amazon Lex V2 uses Amazon Polly to generate the speech using the configuration that you specified in the <code>requestContentType</code> parameter. For example, if you specify <code>audio/mpeg</code> as the value, Amazon Lex V2 returns speech in the MPEG format.</p></li>
    /// <li>
    /// <p>If the value is <code>audio/pcm</code>, the speech returned is audio/pcm in 16-bit, little-endian format.</p></li>
    /// <li>
    /// <p>The following are the accepted values:</p>
    /// <ul>
    /// <li>
    /// <p>audio/mpeg</p></li>
    /// <li>
    /// <p>audio/ogg</p></li>
    /// <li>
    /// <p>audio/pcm</p></li>
    /// <li>
    /// <p>audio/* (defaults to mpeg)</p></li>
    /// <li>
    /// <p>text/plain; charset=utf-8</p></li>
    /// </ul></li>
    /// </ul>
    pub fn response_content_type(&self) -> &str {
        use std::ops::Deref;
        self.response_content_type.deref()
    }
    /// <p>The state of the user's session with Amazon Lex V2.</p>
    pub fn session_state(&self) -> ::std::option::Option<&crate::types::SessionState> {
        self.session_state.as_ref()
    }
    /// <p>A list of messages to send to the user.</p>
    /// <p>If you set the <code>welcomeMessage</code> field, you must also set the <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_runtime_DialogAction.html"> <code>DialogAction</code> </a> structure's <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_runtime_DialogAction.html#lexv2-Type-runtime_DialogAction-type"> <code>type</code> </a> field.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.welcome_messages.is_none()`.
    pub fn welcome_messages(&self) -> &[crate::types::Message] {
        self.welcome_messages.as_deref().unwrap_or_default()
    }
    /// <p>Determines whether Amazon Lex V2 should send audio responses to the client application.</p>
    /// <p>Set this field to false when the client is operating in a playback mode where audio responses are played to the user. If the client isn't operating in playback mode, such as a text chat application, set this to true so that Amazon Lex V2 doesn't wait for the prompt to finish playing on the client.</p>
    pub fn disable_playback(&self) -> bool {
        self.disable_playback
    }
    /// <p>A unique identifier that your application assigns to the event. You can use this to identify events in logs.</p>
    pub fn event_id(&self) -> ::std::option::Option<&str> {
        self.event_id.as_deref()
    }
    /// <p>A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.</p>
    pub fn client_timestamp_millis(&self) -> i64 {
        self.client_timestamp_millis
    }
}
impl ConfigurationEvent {
    /// Creates a new builder-style object to manufacture [`ConfigurationEvent`](crate::types::ConfigurationEvent).
    pub fn builder() -> crate::types::builders::ConfigurationEventBuilder {
        crate::types::builders::ConfigurationEventBuilder::default()
    }
}

/// A builder for [`ConfigurationEvent`](crate::types::ConfigurationEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConfigurationEventBuilder {
    pub(crate) request_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) response_content_type: ::std::option::Option<::std::string::String>,
    pub(crate) session_state: ::std::option::Option<crate::types::SessionState>,
    pub(crate) welcome_messages: ::std::option::Option<::std::vec::Vec<crate::types::Message>>,
    pub(crate) disable_playback: ::std::option::Option<bool>,
    pub(crate) event_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_timestamp_millis: ::std::option::Option<i64>,
}
impl ConfigurationEventBuilder {
    /// Adds a key-value pair to `request_attributes`.
    ///
    /// To override the contents of this collection use [`set_request_attributes`](Self::set_request_attributes).
    ///
    /// <p>Request-specific information passed between the client application and Amazon Lex V2.</p>
    /// <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create any request attributes for prefix <code>x-amz-lex:</code>.</p>
    pub fn request_attributes(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.request_attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.request_attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Request-specific information passed between the client application and Amazon Lex V2.</p>
    /// <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create any request attributes for prefix <code>x-amz-lex:</code>.</p>
    pub fn set_request_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.request_attributes = input;
        self
    }
    /// <p>Request-specific information passed between the client application and Amazon Lex V2.</p>
    /// <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create any request attributes for prefix <code>x-amz-lex:</code>.</p>
    pub fn get_request_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.request_attributes
    }
    /// <p>The message that Amazon Lex V2 returns in the response can be either text or speech based on the <code>responseContentType</code> value.</p>
    /// <ul>
    /// <li>
    /// <p>If the value is <code>text/plain;charset=utf-8</code>, Amazon Lex V2 returns text in the response.</p></li>
    /// <li>
    /// <p>If the value begins with <code>audio/</code>, Amazon Lex V2 returns speech in the response. Amazon Lex V2 uses Amazon Polly to generate the speech using the configuration that you specified in the <code>requestContentType</code> parameter. For example, if you specify <code>audio/mpeg</code> as the value, Amazon Lex V2 returns speech in the MPEG format.</p></li>
    /// <li>
    /// <p>If the value is <code>audio/pcm</code>, the speech returned is audio/pcm in 16-bit, little-endian format.</p></li>
    /// <li>
    /// <p>The following are the accepted values:</p>
    /// <ul>
    /// <li>
    /// <p>audio/mpeg</p></li>
    /// <li>
    /// <p>audio/ogg</p></li>
    /// <li>
    /// <p>audio/pcm</p></li>
    /// <li>
    /// <p>audio/* (defaults to mpeg)</p></li>
    /// <li>
    /// <p>text/plain; charset=utf-8</p></li>
    /// </ul></li>
    /// </ul>
    /// This field is required.
    pub fn response_content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.response_content_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message that Amazon Lex V2 returns in the response can be either text or speech based on the <code>responseContentType</code> value.</p>
    /// <ul>
    /// <li>
    /// <p>If the value is <code>text/plain;charset=utf-8</code>, Amazon Lex V2 returns text in the response.</p></li>
    /// <li>
    /// <p>If the value begins with <code>audio/</code>, Amazon Lex V2 returns speech in the response. Amazon Lex V2 uses Amazon Polly to generate the speech using the configuration that you specified in the <code>requestContentType</code> parameter. For example, if you specify <code>audio/mpeg</code> as the value, Amazon Lex V2 returns speech in the MPEG format.</p></li>
    /// <li>
    /// <p>If the value is <code>audio/pcm</code>, the speech returned is audio/pcm in 16-bit, little-endian format.</p></li>
    /// <li>
    /// <p>The following are the accepted values:</p>
    /// <ul>
    /// <li>
    /// <p>audio/mpeg</p></li>
    /// <li>
    /// <p>audio/ogg</p></li>
    /// <li>
    /// <p>audio/pcm</p></li>
    /// <li>
    /// <p>audio/* (defaults to mpeg)</p></li>
    /// <li>
    /// <p>text/plain; charset=utf-8</p></li>
    /// </ul></li>
    /// </ul>
    pub fn set_response_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.response_content_type = input;
        self
    }
    /// <p>The message that Amazon Lex V2 returns in the response can be either text or speech based on the <code>responseContentType</code> value.</p>
    /// <ul>
    /// <li>
    /// <p>If the value is <code>text/plain;charset=utf-8</code>, Amazon Lex V2 returns text in the response.</p></li>
    /// <li>
    /// <p>If the value begins with <code>audio/</code>, Amazon Lex V2 returns speech in the response. Amazon Lex V2 uses Amazon Polly to generate the speech using the configuration that you specified in the <code>requestContentType</code> parameter. For example, if you specify <code>audio/mpeg</code> as the value, Amazon Lex V2 returns speech in the MPEG format.</p></li>
    /// <li>
    /// <p>If the value is <code>audio/pcm</code>, the speech returned is audio/pcm in 16-bit, little-endian format.</p></li>
    /// <li>
    /// <p>The following are the accepted values:</p>
    /// <ul>
    /// <li>
    /// <p>audio/mpeg</p></li>
    /// <li>
    /// <p>audio/ogg</p></li>
    /// <li>
    /// <p>audio/pcm</p></li>
    /// <li>
    /// <p>audio/* (defaults to mpeg)</p></li>
    /// <li>
    /// <p>text/plain; charset=utf-8</p></li>
    /// </ul></li>
    /// </ul>
    pub fn get_response_content_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.response_content_type
    }
    /// <p>The state of the user's session with Amazon Lex V2.</p>
    pub fn session_state(mut self, input: crate::types::SessionState) -> Self {
        self.session_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the user's session with Amazon Lex V2.</p>
    pub fn set_session_state(mut self, input: ::std::option::Option<crate::types::SessionState>) -> Self {
        self.session_state = input;
        self
    }
    /// <p>The state of the user's session with Amazon Lex V2.</p>
    pub fn get_session_state(&self) -> &::std::option::Option<crate::types::SessionState> {
        &self.session_state
    }
    /// Appends an item to `welcome_messages`.
    ///
    /// To override the contents of this collection use [`set_welcome_messages`](Self::set_welcome_messages).
    ///
    /// <p>A list of messages to send to the user.</p>
    /// <p>If you set the <code>welcomeMessage</code> field, you must also set the <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_runtime_DialogAction.html"> <code>DialogAction</code> </a> structure's <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_runtime_DialogAction.html#lexv2-Type-runtime_DialogAction-type"> <code>type</code> </a> field.</p>
    pub fn welcome_messages(mut self, input: crate::types::Message) -> Self {
        let mut v = self.welcome_messages.unwrap_or_default();
        v.push(input);
        self.welcome_messages = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of messages to send to the user.</p>
    /// <p>If you set the <code>welcomeMessage</code> field, you must also set the <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_runtime_DialogAction.html"> <code>DialogAction</code> </a> structure's <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_runtime_DialogAction.html#lexv2-Type-runtime_DialogAction-type"> <code>type</code> </a> field.</p>
    pub fn set_welcome_messages(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Message>>) -> Self {
        self.welcome_messages = input;
        self
    }
    /// <p>A list of messages to send to the user.</p>
    /// <p>If you set the <code>welcomeMessage</code> field, you must also set the <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_runtime_DialogAction.html"> <code>DialogAction</code> </a> structure's <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_runtime_DialogAction.html#lexv2-Type-runtime_DialogAction-type"> <code>type</code> </a> field.</p>
    pub fn get_welcome_messages(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Message>> {
        &self.welcome_messages
    }
    /// <p>Determines whether Amazon Lex V2 should send audio responses to the client application.</p>
    /// <p>Set this field to false when the client is operating in a playback mode where audio responses are played to the user. If the client isn't operating in playback mode, such as a text chat application, set this to true so that Amazon Lex V2 doesn't wait for the prompt to finish playing on the client.</p>
    pub fn disable_playback(mut self, input: bool) -> Self {
        self.disable_playback = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether Amazon Lex V2 should send audio responses to the client application.</p>
    /// <p>Set this field to false when the client is operating in a playback mode where audio responses are played to the user. If the client isn't operating in playback mode, such as a text chat application, set this to true so that Amazon Lex V2 doesn't wait for the prompt to finish playing on the client.</p>
    pub fn set_disable_playback(mut self, input: ::std::option::Option<bool>) -> Self {
        self.disable_playback = input;
        self
    }
    /// <p>Determines whether Amazon Lex V2 should send audio responses to the client application.</p>
    /// <p>Set this field to false when the client is operating in a playback mode where audio responses are played to the user. If the client isn't operating in playback mode, such as a text chat application, set this to true so that Amazon Lex V2 doesn't wait for the prompt to finish playing on the client.</p>
    pub fn get_disable_playback(&self) -> &::std::option::Option<bool> {
        &self.disable_playback
    }
    /// <p>A unique identifier that your application assigns to the event. You can use this to identify events in logs.</p>
    pub fn event_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier that your application assigns to the event. You can use this to identify events in logs.</p>
    pub fn set_event_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>A unique identifier that your application assigns to the event. You can use this to identify events in logs.</p>
    pub fn get_event_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_id
    }
    /// <p>A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.</p>
    pub fn client_timestamp_millis(mut self, input: i64) -> Self {
        self.client_timestamp_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.</p>
    pub fn set_client_timestamp_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.client_timestamp_millis = input;
        self
    }
    /// <p>A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.</p>
    pub fn get_client_timestamp_millis(&self) -> &::std::option::Option<i64> {
        &self.client_timestamp_millis
    }
    /// Consumes the builder and constructs a [`ConfigurationEvent`](crate::types::ConfigurationEvent).
    /// This method will fail if any of the following fields are not set:
    /// - [`response_content_type`](crate::types::builders::ConfigurationEventBuilder::response_content_type)
    pub fn build(self) -> ::std::result::Result<crate::types::ConfigurationEvent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConfigurationEvent {
            request_attributes: self.request_attributes,
            response_content_type: self.response_content_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "response_content_type",
                    "response_content_type was not specified but it is required when building ConfigurationEvent",
                )
            })?,
            session_state: self.session_state,
            welcome_messages: self.welcome_messages,
            disable_playback: self.disable_playback.unwrap_or_default(),
            event_id: self.event_id,
            client_timestamp_millis: self.client_timestamp_millis.unwrap_or_default(),
        })
    }
}
