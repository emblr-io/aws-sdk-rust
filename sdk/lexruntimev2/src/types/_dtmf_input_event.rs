// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A DTMF character sent from the client application. DTMF characters are typically sent from a phone keypad to represent numbers. For example, you can have Amazon Lex V2 process a credit card number input from a phone.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DtmfInputEvent {
    /// <p>The DTMF character that the user pressed. The allowed characters are A - D, 0 - 9, # and *.</p>
    pub input_character: ::std::string::String,
    /// <p>A unique identifier that your application assigns to the event. You can use this to identify events in logs.</p>
    pub event_id: ::std::option::Option<::std::string::String>,
    /// <p>A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.</p>
    pub client_timestamp_millis: i64,
}
impl DtmfInputEvent {
    /// <p>The DTMF character that the user pressed. The allowed characters are A - D, 0 - 9, # and *.</p>
    pub fn input_character(&self) -> &str {
        use std::ops::Deref;
        self.input_character.deref()
    }
    /// <p>A unique identifier that your application assigns to the event. You can use this to identify events in logs.</p>
    pub fn event_id(&self) -> ::std::option::Option<&str> {
        self.event_id.as_deref()
    }
    /// <p>A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.</p>
    pub fn client_timestamp_millis(&self) -> i64 {
        self.client_timestamp_millis
    }
}
impl ::std::fmt::Debug for DtmfInputEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DtmfInputEvent");
        formatter.field("input_character", &"*** Sensitive Data Redacted ***");
        formatter.field("event_id", &self.event_id);
        formatter.field("client_timestamp_millis", &self.client_timestamp_millis);
        formatter.finish()
    }
}
impl DtmfInputEvent {
    /// Creates a new builder-style object to manufacture [`DtmfInputEvent`](crate::types::DtmfInputEvent).
    pub fn builder() -> crate::types::builders::DtmfInputEventBuilder {
        crate::types::builders::DtmfInputEventBuilder::default()
    }
}

/// A builder for [`DtmfInputEvent`](crate::types::DtmfInputEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct DtmfInputEventBuilder {
    pub(crate) input_character: ::std::option::Option<::std::string::String>,
    pub(crate) event_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_timestamp_millis: ::std::option::Option<i64>,
}
impl DtmfInputEventBuilder {
    /// <p>The DTMF character that the user pressed. The allowed characters are A - D, 0 - 9, # and *.</p>
    /// This field is required.
    pub fn input_character(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_character = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DTMF character that the user pressed. The allowed characters are A - D, 0 - 9, # and *.</p>
    pub fn set_input_character(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_character = input;
        self
    }
    /// <p>The DTMF character that the user pressed. The allowed characters are A - D, 0 - 9, # and *.</p>
    pub fn get_input_character(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_character
    }
    /// <p>A unique identifier that your application assigns to the event. You can use this to identify events in logs.</p>
    pub fn event_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier that your application assigns to the event. You can use this to identify events in logs.</p>
    pub fn set_event_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>A unique identifier that your application assigns to the event. You can use this to identify events in logs.</p>
    pub fn get_event_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_id
    }
    /// <p>A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.</p>
    pub fn client_timestamp_millis(mut self, input: i64) -> Self {
        self.client_timestamp_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.</p>
    pub fn set_client_timestamp_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.client_timestamp_millis = input;
        self
    }
    /// <p>A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.</p>
    pub fn get_client_timestamp_millis(&self) -> &::std::option::Option<i64> {
        &self.client_timestamp_millis
    }
    /// Consumes the builder and constructs a [`DtmfInputEvent`](crate::types::DtmfInputEvent).
    /// This method will fail if any of the following fields are not set:
    /// - [`input_character`](crate::types::builders::DtmfInputEventBuilder::input_character)
    pub fn build(self) -> ::std::result::Result<crate::types::DtmfInputEvent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DtmfInputEvent {
            input_character: self.input_character.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "input_character",
                    "input_character was not specified but it is required when building DtmfInputEvent",
                )
            })?,
            event_id: self.event_id,
            client_timestamp_millis: self.client_timestamp_millis.unwrap_or_default(),
        })
    }
}
impl ::std::fmt::Debug for DtmfInputEventBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DtmfInputEventBuilder");
        formatter.field("input_character", &"*** Sensitive Data Redacted ***");
        formatter.field("event_id", &self.event_id);
        formatter.field("client_timestamp_millis", &self.client_timestamp_millis);
        formatter.finish()
    }
}
