// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition properties for a geospatial layer.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeospatialLayerDefinition {
    /// <p>The definition for a point layer.</p>
    pub point_layer: ::std::option::Option<crate::types::GeospatialPointLayer>,
    /// <p>The definition for a line layer.</p>
    pub line_layer: ::std::option::Option<crate::types::GeospatialLineLayer>,
    /// <p>The definition for a polygon layer.</p>
    pub polygon_layer: ::std::option::Option<crate::types::GeospatialPolygonLayer>,
}
impl GeospatialLayerDefinition {
    /// <p>The definition for a point layer.</p>
    pub fn point_layer(&self) -> ::std::option::Option<&crate::types::GeospatialPointLayer> {
        self.point_layer.as_ref()
    }
    /// <p>The definition for a line layer.</p>
    pub fn line_layer(&self) -> ::std::option::Option<&crate::types::GeospatialLineLayer> {
        self.line_layer.as_ref()
    }
    /// <p>The definition for a polygon layer.</p>
    pub fn polygon_layer(&self) -> ::std::option::Option<&crate::types::GeospatialPolygonLayer> {
        self.polygon_layer.as_ref()
    }
}
impl GeospatialLayerDefinition {
    /// Creates a new builder-style object to manufacture [`GeospatialLayerDefinition`](crate::types::GeospatialLayerDefinition).
    pub fn builder() -> crate::types::builders::GeospatialLayerDefinitionBuilder {
        crate::types::builders::GeospatialLayerDefinitionBuilder::default()
    }
}

/// A builder for [`GeospatialLayerDefinition`](crate::types::GeospatialLayerDefinition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GeospatialLayerDefinitionBuilder {
    pub(crate) point_layer: ::std::option::Option<crate::types::GeospatialPointLayer>,
    pub(crate) line_layer: ::std::option::Option<crate::types::GeospatialLineLayer>,
    pub(crate) polygon_layer: ::std::option::Option<crate::types::GeospatialPolygonLayer>,
}
impl GeospatialLayerDefinitionBuilder {
    /// <p>The definition for a point layer.</p>
    pub fn point_layer(mut self, input: crate::types::GeospatialPointLayer) -> Self {
        self.point_layer = ::std::option::Option::Some(input);
        self
    }
    /// <p>The definition for a point layer.</p>
    pub fn set_point_layer(mut self, input: ::std::option::Option<crate::types::GeospatialPointLayer>) -> Self {
        self.point_layer = input;
        self
    }
    /// <p>The definition for a point layer.</p>
    pub fn get_point_layer(&self) -> &::std::option::Option<crate::types::GeospatialPointLayer> {
        &self.point_layer
    }
    /// <p>The definition for a line layer.</p>
    pub fn line_layer(mut self, input: crate::types::GeospatialLineLayer) -> Self {
        self.line_layer = ::std::option::Option::Some(input);
        self
    }
    /// <p>The definition for a line layer.</p>
    pub fn set_line_layer(mut self, input: ::std::option::Option<crate::types::GeospatialLineLayer>) -> Self {
        self.line_layer = input;
        self
    }
    /// <p>The definition for a line layer.</p>
    pub fn get_line_layer(&self) -> &::std::option::Option<crate::types::GeospatialLineLayer> {
        &self.line_layer
    }
    /// <p>The definition for a polygon layer.</p>
    pub fn polygon_layer(mut self, input: crate::types::GeospatialPolygonLayer) -> Self {
        self.polygon_layer = ::std::option::Option::Some(input);
        self
    }
    /// <p>The definition for a polygon layer.</p>
    pub fn set_polygon_layer(mut self, input: ::std::option::Option<crate::types::GeospatialPolygonLayer>) -> Self {
        self.polygon_layer = input;
        self
    }
    /// <p>The definition for a polygon layer.</p>
    pub fn get_polygon_layer(&self) -> &::std::option::Option<crate::types::GeospatialPolygonLayer> {
        &self.polygon_layer
    }
    /// Consumes the builder and constructs a [`GeospatialLayerDefinition`](crate::types::GeospatialLayerDefinition).
    pub fn build(self) -> crate::types::GeospatialLayerDefinition {
        crate::types::GeospatialLayerDefinition {
            point_layer: self.point_layer,
            line_layer: self.line_layer,
            polygon_layer: self.polygon_layer,
        }
    }
}
