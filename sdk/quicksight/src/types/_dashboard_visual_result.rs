// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The QA result that is made from dashboard visual.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DashboardVisualResult {
    /// <p>The ID of the dashboard.</p>
    pub dashboard_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the dashboard.</p>
    pub dashboard_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the sheet.</p>
    pub sheet_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the sheet.</p>
    pub sheet_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the visual.</p>
    pub visual_id: ::std::option::Option<::std::string::String>,
    /// <p>The title of the visual.</p>
    pub visual_title: ::std::option::Option<::std::string::String>,
    /// <p>The subtitle of the visual.</p>
    pub visual_subtitle: ::std::option::Option<::std::string::String>,
    /// <p>The URL of the dashboard.</p>
    pub dashboard_url: ::std::option::Option<::std::string::String>,
}
impl DashboardVisualResult {
    /// <p>The ID of the dashboard.</p>
    pub fn dashboard_id(&self) -> ::std::option::Option<&str> {
        self.dashboard_id.as_deref()
    }
    /// <p>The name of the dashboard.</p>
    pub fn dashboard_name(&self) -> ::std::option::Option<&str> {
        self.dashboard_name.as_deref()
    }
    /// <p>The ID of the sheet.</p>
    pub fn sheet_id(&self) -> ::std::option::Option<&str> {
        self.sheet_id.as_deref()
    }
    /// <p>The name of the sheet.</p>
    pub fn sheet_name(&self) -> ::std::option::Option<&str> {
        self.sheet_name.as_deref()
    }
    /// <p>The ID of the visual.</p>
    pub fn visual_id(&self) -> ::std::option::Option<&str> {
        self.visual_id.as_deref()
    }
    /// <p>The title of the visual.</p>
    pub fn visual_title(&self) -> ::std::option::Option<&str> {
        self.visual_title.as_deref()
    }
    /// <p>The subtitle of the visual.</p>
    pub fn visual_subtitle(&self) -> ::std::option::Option<&str> {
        self.visual_subtitle.as_deref()
    }
    /// <p>The URL of the dashboard.</p>
    pub fn dashboard_url(&self) -> ::std::option::Option<&str> {
        self.dashboard_url.as_deref()
    }
}
impl DashboardVisualResult {
    /// Creates a new builder-style object to manufacture [`DashboardVisualResult`](crate::types::DashboardVisualResult).
    pub fn builder() -> crate::types::builders::DashboardVisualResultBuilder {
        crate::types::builders::DashboardVisualResultBuilder::default()
    }
}

/// A builder for [`DashboardVisualResult`](crate::types::DashboardVisualResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DashboardVisualResultBuilder {
    pub(crate) dashboard_id: ::std::option::Option<::std::string::String>,
    pub(crate) dashboard_name: ::std::option::Option<::std::string::String>,
    pub(crate) sheet_id: ::std::option::Option<::std::string::String>,
    pub(crate) sheet_name: ::std::option::Option<::std::string::String>,
    pub(crate) visual_id: ::std::option::Option<::std::string::String>,
    pub(crate) visual_title: ::std::option::Option<::std::string::String>,
    pub(crate) visual_subtitle: ::std::option::Option<::std::string::String>,
    pub(crate) dashboard_url: ::std::option::Option<::std::string::String>,
}
impl DashboardVisualResultBuilder {
    /// <p>The ID of the dashboard.</p>
    pub fn dashboard_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dashboard_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the dashboard.</p>
    pub fn set_dashboard_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dashboard_id = input;
        self
    }
    /// <p>The ID of the dashboard.</p>
    pub fn get_dashboard_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.dashboard_id
    }
    /// <p>The name of the dashboard.</p>
    pub fn dashboard_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dashboard_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the dashboard.</p>
    pub fn set_dashboard_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dashboard_name = input;
        self
    }
    /// <p>The name of the dashboard.</p>
    pub fn get_dashboard_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.dashboard_name
    }
    /// <p>The ID of the sheet.</p>
    pub fn sheet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sheet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the sheet.</p>
    pub fn set_sheet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sheet_id = input;
        self
    }
    /// <p>The ID of the sheet.</p>
    pub fn get_sheet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sheet_id
    }
    /// <p>The name of the sheet.</p>
    pub fn sheet_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sheet_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the sheet.</p>
    pub fn set_sheet_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sheet_name = input;
        self
    }
    /// <p>The name of the sheet.</p>
    pub fn get_sheet_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.sheet_name
    }
    /// <p>The ID of the visual.</p>
    pub fn visual_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.visual_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the visual.</p>
    pub fn set_visual_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.visual_id = input;
        self
    }
    /// <p>The ID of the visual.</p>
    pub fn get_visual_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.visual_id
    }
    /// <p>The title of the visual.</p>
    pub fn visual_title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.visual_title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of the visual.</p>
    pub fn set_visual_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.visual_title = input;
        self
    }
    /// <p>The title of the visual.</p>
    pub fn get_visual_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.visual_title
    }
    /// <p>The subtitle of the visual.</p>
    pub fn visual_subtitle(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.visual_subtitle = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subtitle of the visual.</p>
    pub fn set_visual_subtitle(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.visual_subtitle = input;
        self
    }
    /// <p>The subtitle of the visual.</p>
    pub fn get_visual_subtitle(&self) -> &::std::option::Option<::std::string::String> {
        &self.visual_subtitle
    }
    /// <p>The URL of the dashboard.</p>
    pub fn dashboard_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dashboard_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of the dashboard.</p>
    pub fn set_dashboard_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dashboard_url = input;
        self
    }
    /// <p>The URL of the dashboard.</p>
    pub fn get_dashboard_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.dashboard_url
    }
    /// Consumes the builder and constructs a [`DashboardVisualResult`](crate::types::DashboardVisualResult).
    pub fn build(self) -> crate::types::DashboardVisualResult {
        crate::types::DashboardVisualResult {
            dashboard_id: self.dashboard_id,
            dashboard_name: self.dashboard_name,
            sheet_id: self.sheet_id,
            sheet_name: self.sheet_name,
            visual_id: self.visual_id,
            visual_title: self.visual_title,
            visual_subtitle: self.visual_subtitle,
            dashboard_url: self.dashboard_url,
        }
    }
}
