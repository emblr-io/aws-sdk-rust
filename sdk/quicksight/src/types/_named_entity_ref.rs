// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition for a <code>NamedEntityRef</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NamedEntityRef {
    /// <p>The <code>NamedEntityName</code> for the <code>NamedEntityRef</code>.</p>
    pub named_entity_name: ::std::option::Option<::std::string::String>,
}
impl NamedEntityRef {
    /// <p>The <code>NamedEntityName</code> for the <code>NamedEntityRef</code>.</p>
    pub fn named_entity_name(&self) -> ::std::option::Option<&str> {
        self.named_entity_name.as_deref()
    }
}
impl NamedEntityRef {
    /// Creates a new builder-style object to manufacture [`NamedEntityRef`](crate::types::NamedEntityRef).
    pub fn builder() -> crate::types::builders::NamedEntityRefBuilder {
        crate::types::builders::NamedEntityRefBuilder::default()
    }
}

/// A builder for [`NamedEntityRef`](crate::types::NamedEntityRef).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NamedEntityRefBuilder {
    pub(crate) named_entity_name: ::std::option::Option<::std::string::String>,
}
impl NamedEntityRefBuilder {
    /// <p>The <code>NamedEntityName</code> for the <code>NamedEntityRef</code>.</p>
    pub fn named_entity_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.named_entity_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>NamedEntityName</code> for the <code>NamedEntityRef</code>.</p>
    pub fn set_named_entity_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.named_entity_name = input;
        self
    }
    /// <p>The <code>NamedEntityName</code> for the <code>NamedEntityRef</code>.</p>
    pub fn get_named_entity_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.named_entity_name
    }
    /// Consumes the builder and constructs a [`NamedEntityRef`](crate::types::NamedEntityRef).
    pub fn build(self) -> crate::types::NamedEntityRef {
        crate::types::NamedEntityRef {
            named_entity_name: self.named_entity_name,
        }
    }
}
