// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for the performance optimization of the dataset that contains a <code>UniqueKey</code> configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PerformanceConfiguration {
    /// <p>A <code>UniqueKey</code> configuration.</p>
    pub unique_keys: ::std::option::Option<::std::vec::Vec<crate::types::UniqueKey>>,
}
impl PerformanceConfiguration {
    /// <p>A <code>UniqueKey</code> configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.unique_keys.is_none()`.
    pub fn unique_keys(&self) -> &[crate::types::UniqueKey] {
        self.unique_keys.as_deref().unwrap_or_default()
    }
}
impl PerformanceConfiguration {
    /// Creates a new builder-style object to manufacture [`PerformanceConfiguration`](crate::types::PerformanceConfiguration).
    pub fn builder() -> crate::types::builders::PerformanceConfigurationBuilder {
        crate::types::builders::PerformanceConfigurationBuilder::default()
    }
}

/// A builder for [`PerformanceConfiguration`](crate::types::PerformanceConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PerformanceConfigurationBuilder {
    pub(crate) unique_keys: ::std::option::Option<::std::vec::Vec<crate::types::UniqueKey>>,
}
impl PerformanceConfigurationBuilder {
    /// Appends an item to `unique_keys`.
    ///
    /// To override the contents of this collection use [`set_unique_keys`](Self::set_unique_keys).
    ///
    /// <p>A <code>UniqueKey</code> configuration.</p>
    pub fn unique_keys(mut self, input: crate::types::UniqueKey) -> Self {
        let mut v = self.unique_keys.unwrap_or_default();
        v.push(input);
        self.unique_keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>A <code>UniqueKey</code> configuration.</p>
    pub fn set_unique_keys(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UniqueKey>>) -> Self {
        self.unique_keys = input;
        self
    }
    /// <p>A <code>UniqueKey</code> configuration.</p>
    pub fn get_unique_keys(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UniqueKey>> {
        &self.unique_keys
    }
    /// Consumes the builder and constructs a [`PerformanceConfiguration`](crate::types::PerformanceConfiguration).
    pub fn build(self) -> crate::types::PerformanceConfiguration {
        crate::types::PerformanceConfiguration {
            unique_keys: self.unique_keys,
        }
    }
}
