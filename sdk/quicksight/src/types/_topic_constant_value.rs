// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition for a <code>TopicConstantValue</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TopicConstantValue {
    /// <p>The constant type of a <code>TopicConstantValue</code>.</p>
    pub constant_type: ::std::option::Option<crate::types::ConstantType>,
    /// <p>The value of the <code>TopicConstantValue</code>.</p>
    pub value: ::std::option::Option<::std::string::String>,
    /// <p>The minimum for the <code>TopicConstantValue</code>.</p>
    pub minimum: ::std::option::Option<::std::string::String>,
    /// <p>The maximum for the <code>TopicConstantValue</code>.</p>
    pub maximum: ::std::option::Option<::std::string::String>,
    /// <p>The value list of the <code>TopicConstantValue</code>.</p>
    pub value_list: ::std::option::Option<::std::vec::Vec<crate::types::CollectiveConstantEntry>>,
}
impl TopicConstantValue {
    /// <p>The constant type of a <code>TopicConstantValue</code>.</p>
    pub fn constant_type(&self) -> ::std::option::Option<&crate::types::ConstantType> {
        self.constant_type.as_ref()
    }
    /// <p>The value of the <code>TopicConstantValue</code>.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The minimum for the <code>TopicConstantValue</code>.</p>
    pub fn minimum(&self) -> ::std::option::Option<&str> {
        self.minimum.as_deref()
    }
    /// <p>The maximum for the <code>TopicConstantValue</code>.</p>
    pub fn maximum(&self) -> ::std::option::Option<&str> {
        self.maximum.as_deref()
    }
    /// <p>The value list of the <code>TopicConstantValue</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.value_list.is_none()`.
    pub fn value_list(&self) -> &[crate::types::CollectiveConstantEntry] {
        self.value_list.as_deref().unwrap_or_default()
    }
}
impl TopicConstantValue {
    /// Creates a new builder-style object to manufacture [`TopicConstantValue`](crate::types::TopicConstantValue).
    pub fn builder() -> crate::types::builders::TopicConstantValueBuilder {
        crate::types::builders::TopicConstantValueBuilder::default()
    }
}

/// A builder for [`TopicConstantValue`](crate::types::TopicConstantValue).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TopicConstantValueBuilder {
    pub(crate) constant_type: ::std::option::Option<crate::types::ConstantType>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) minimum: ::std::option::Option<::std::string::String>,
    pub(crate) maximum: ::std::option::Option<::std::string::String>,
    pub(crate) value_list: ::std::option::Option<::std::vec::Vec<crate::types::CollectiveConstantEntry>>,
}
impl TopicConstantValueBuilder {
    /// <p>The constant type of a <code>TopicConstantValue</code>.</p>
    pub fn constant_type(mut self, input: crate::types::ConstantType) -> Self {
        self.constant_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The constant type of a <code>TopicConstantValue</code>.</p>
    pub fn set_constant_type(mut self, input: ::std::option::Option<crate::types::ConstantType>) -> Self {
        self.constant_type = input;
        self
    }
    /// <p>The constant type of a <code>TopicConstantValue</code>.</p>
    pub fn get_constant_type(&self) -> &::std::option::Option<crate::types::ConstantType> {
        &self.constant_type
    }
    /// <p>The value of the <code>TopicConstantValue</code>.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the <code>TopicConstantValue</code>.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of the <code>TopicConstantValue</code>.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// <p>The minimum for the <code>TopicConstantValue</code>.</p>
    pub fn minimum(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.minimum = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The minimum for the <code>TopicConstantValue</code>.</p>
    pub fn set_minimum(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.minimum = input;
        self
    }
    /// <p>The minimum for the <code>TopicConstantValue</code>.</p>
    pub fn get_minimum(&self) -> &::std::option::Option<::std::string::String> {
        &self.minimum
    }
    /// <p>The maximum for the <code>TopicConstantValue</code>.</p>
    pub fn maximum(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.maximum = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The maximum for the <code>TopicConstantValue</code>.</p>
    pub fn set_maximum(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.maximum = input;
        self
    }
    /// <p>The maximum for the <code>TopicConstantValue</code>.</p>
    pub fn get_maximum(&self) -> &::std::option::Option<::std::string::String> {
        &self.maximum
    }
    /// Appends an item to `value_list`.
    ///
    /// To override the contents of this collection use [`set_value_list`](Self::set_value_list).
    ///
    /// <p>The value list of the <code>TopicConstantValue</code>.</p>
    pub fn value_list(mut self, input: crate::types::CollectiveConstantEntry) -> Self {
        let mut v = self.value_list.unwrap_or_default();
        v.push(input);
        self.value_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The value list of the <code>TopicConstantValue</code>.</p>
    pub fn set_value_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CollectiveConstantEntry>>) -> Self {
        self.value_list = input;
        self
    }
    /// <p>The value list of the <code>TopicConstantValue</code>.</p>
    pub fn get_value_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CollectiveConstantEntry>> {
        &self.value_list
    }
    /// Consumes the builder and constructs a [`TopicConstantValue`](crate::types::TopicConstantValue).
    pub fn build(self) -> crate::types::TopicConstantValue {
        crate::types::TopicConstantValue {
            constant_type: self.constant_type,
            value: self.value,
            minimum: self.minimum,
            maximum: self.maximum,
            value_list: self.value_list,
        }
    }
}
