// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the brand.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BrandDetail {
    /// <p>The ID of the Amazon QuickSight brand.</p>
    pub brand_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the brand.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the brand.</p>
    pub brand_status: ::std::option::Option<crate::types::BrandStatus>,
    /// <p>The time that the brand was created.</p>
    pub created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The last time the brand was updated.</p>
    pub last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The ID of the version.</p>
    pub version_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the version.</p>
    pub version_status: ::std::option::Option<crate::types::BrandVersionStatus>,
    /// <p>A list of errors that occurred during the most recent brand operation.</p>
    pub errors: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The logo details.</p>
    pub logo: ::std::option::Option<crate::types::Logo>,
}
impl BrandDetail {
    /// <p>The ID of the Amazon QuickSight brand.</p>
    pub fn brand_id(&self) -> &str {
        use std::ops::Deref;
        self.brand_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the brand.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The status of the brand.</p>
    pub fn brand_status(&self) -> ::std::option::Option<&crate::types::BrandStatus> {
        self.brand_status.as_ref()
    }
    /// <p>The time that the brand was created.</p>
    pub fn created_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The last time the brand was updated.</p>
    pub fn last_updated_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>The ID of the version.</p>
    pub fn version_id(&self) -> ::std::option::Option<&str> {
        self.version_id.as_deref()
    }
    /// <p>The status of the version.</p>
    pub fn version_status(&self) -> ::std::option::Option<&crate::types::BrandVersionStatus> {
        self.version_status.as_ref()
    }
    /// <p>A list of errors that occurred during the most recent brand operation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.errors.is_none()`.
    pub fn errors(&self) -> &[::std::string::String] {
        self.errors.as_deref().unwrap_or_default()
    }
    /// <p>The logo details.</p>
    pub fn logo(&self) -> ::std::option::Option<&crate::types::Logo> {
        self.logo.as_ref()
    }
}
impl BrandDetail {
    /// Creates a new builder-style object to manufacture [`BrandDetail`](crate::types::BrandDetail).
    pub fn builder() -> crate::types::builders::BrandDetailBuilder {
        crate::types::builders::BrandDetailBuilder::default()
    }
}

/// A builder for [`BrandDetail`](crate::types::BrandDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BrandDetailBuilder {
    pub(crate) brand_id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) brand_status: ::std::option::Option<crate::types::BrandStatus>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) version_id: ::std::option::Option<::std::string::String>,
    pub(crate) version_status: ::std::option::Option<crate::types::BrandVersionStatus>,
    pub(crate) errors: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) logo: ::std::option::Option<crate::types::Logo>,
}
impl BrandDetailBuilder {
    /// <p>The ID of the Amazon QuickSight brand.</p>
    /// This field is required.
    pub fn brand_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.brand_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon QuickSight brand.</p>
    pub fn set_brand_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.brand_id = input;
        self
    }
    /// <p>The ID of the Amazon QuickSight brand.</p>
    pub fn get_brand_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.brand_id
    }
    /// <p>The Amazon Resource Name (ARN) of the brand.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the brand.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the brand.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The status of the brand.</p>
    pub fn brand_status(mut self, input: crate::types::BrandStatus) -> Self {
        self.brand_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the brand.</p>
    pub fn set_brand_status(mut self, input: ::std::option::Option<crate::types::BrandStatus>) -> Self {
        self.brand_status = input;
        self
    }
    /// <p>The status of the brand.</p>
    pub fn get_brand_status(&self) -> &::std::option::Option<crate::types::BrandStatus> {
        &self.brand_status
    }
    /// <p>The time that the brand was created.</p>
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the brand was created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The time that the brand was created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The last time the brand was updated.</p>
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time the brand was updated.</p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The last time the brand was updated.</p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// <p>The ID of the version.</p>
    pub fn version_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the version.</p>
    pub fn set_version_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_id = input;
        self
    }
    /// <p>The ID of the version.</p>
    pub fn get_version_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_id
    }
    /// <p>The status of the version.</p>
    pub fn version_status(mut self, input: crate::types::BrandVersionStatus) -> Self {
        self.version_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the version.</p>
    pub fn set_version_status(mut self, input: ::std::option::Option<crate::types::BrandVersionStatus>) -> Self {
        self.version_status = input;
        self
    }
    /// <p>The status of the version.</p>
    pub fn get_version_status(&self) -> &::std::option::Option<crate::types::BrandVersionStatus> {
        &self.version_status
    }
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>A list of errors that occurred during the most recent brand operation.</p>
    pub fn errors(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input.into());
        self.errors = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of errors that occurred during the most recent brand operation.</p>
    pub fn set_errors(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.errors = input;
        self
    }
    /// <p>A list of errors that occurred during the most recent brand operation.</p>
    pub fn get_errors(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.errors
    }
    /// <p>The logo details.</p>
    pub fn logo(mut self, input: crate::types::Logo) -> Self {
        self.logo = ::std::option::Option::Some(input);
        self
    }
    /// <p>The logo details.</p>
    pub fn set_logo(mut self, input: ::std::option::Option<crate::types::Logo>) -> Self {
        self.logo = input;
        self
    }
    /// <p>The logo details.</p>
    pub fn get_logo(&self) -> &::std::option::Option<crate::types::Logo> {
        &self.logo
    }
    /// Consumes the builder and constructs a [`BrandDetail`](crate::types::BrandDetail).
    /// This method will fail if any of the following fields are not set:
    /// - [`brand_id`](crate::types::builders::BrandDetailBuilder::brand_id)
    pub fn build(self) -> ::std::result::Result<crate::types::BrandDetail, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BrandDetail {
            brand_id: self.brand_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "brand_id",
                    "brand_id was not specified but it is required when building BrandDetail",
                )
            })?,
            arn: self.arn,
            brand_status: self.brand_status,
            created_time: self.created_time,
            last_updated_time: self.last_updated_time,
            version_id: self.version_id,
            version_status: self.version_status,
            errors: self.errors,
            logo: self.logo,
        })
    }
}
