// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The map style properties for a map.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeospatialMapStyle {
    /// <p>The selected base map style.</p>
    pub base_map_style: ::std::option::Option<crate::types::BaseMapStyleType>,
    /// <p>The background color and opacity values for a map.</p>
    pub background_color: ::std::option::Option<::std::string::String>,
    /// <p>The state of visibility for the base map.</p>
    pub base_map_visibility: ::std::option::Option<crate::types::Visibility>,
}
impl GeospatialMapStyle {
    /// <p>The selected base map style.</p>
    pub fn base_map_style(&self) -> ::std::option::Option<&crate::types::BaseMapStyleType> {
        self.base_map_style.as_ref()
    }
    /// <p>The background color and opacity values for a map.</p>
    pub fn background_color(&self) -> ::std::option::Option<&str> {
        self.background_color.as_deref()
    }
    /// <p>The state of visibility for the base map.</p>
    pub fn base_map_visibility(&self) -> ::std::option::Option<&crate::types::Visibility> {
        self.base_map_visibility.as_ref()
    }
}
impl GeospatialMapStyle {
    /// Creates a new builder-style object to manufacture [`GeospatialMapStyle`](crate::types::GeospatialMapStyle).
    pub fn builder() -> crate::types::builders::GeospatialMapStyleBuilder {
        crate::types::builders::GeospatialMapStyleBuilder::default()
    }
}

/// A builder for [`GeospatialMapStyle`](crate::types::GeospatialMapStyle).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GeospatialMapStyleBuilder {
    pub(crate) base_map_style: ::std::option::Option<crate::types::BaseMapStyleType>,
    pub(crate) background_color: ::std::option::Option<::std::string::String>,
    pub(crate) base_map_visibility: ::std::option::Option<crate::types::Visibility>,
}
impl GeospatialMapStyleBuilder {
    /// <p>The selected base map style.</p>
    pub fn base_map_style(mut self, input: crate::types::BaseMapStyleType) -> Self {
        self.base_map_style = ::std::option::Option::Some(input);
        self
    }
    /// <p>The selected base map style.</p>
    pub fn set_base_map_style(mut self, input: ::std::option::Option<crate::types::BaseMapStyleType>) -> Self {
        self.base_map_style = input;
        self
    }
    /// <p>The selected base map style.</p>
    pub fn get_base_map_style(&self) -> &::std::option::Option<crate::types::BaseMapStyleType> {
        &self.base_map_style
    }
    /// <p>The background color and opacity values for a map.</p>
    pub fn background_color(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.background_color = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The background color and opacity values for a map.</p>
    pub fn set_background_color(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.background_color = input;
        self
    }
    /// <p>The background color and opacity values for a map.</p>
    pub fn get_background_color(&self) -> &::std::option::Option<::std::string::String> {
        &self.background_color
    }
    /// <p>The state of visibility for the base map.</p>
    pub fn base_map_visibility(mut self, input: crate::types::Visibility) -> Self {
        self.base_map_visibility = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of visibility for the base map.</p>
    pub fn set_base_map_visibility(mut self, input: ::std::option::Option<crate::types::Visibility>) -> Self {
        self.base_map_visibility = input;
        self
    }
    /// <p>The state of visibility for the base map.</p>
    pub fn get_base_map_visibility(&self) -> &::std::option::Option<crate::types::Visibility> {
        &self.base_map_visibility
    }
    /// Consumes the builder and constructs a [`GeospatialMapStyle`](crate::types::GeospatialMapStyle).
    pub fn build(self) -> crate::types::GeospatialMapStyle {
        crate::types::GeospatialMapStyle {
            base_map_style: self.base_map_style,
            background_color: self.background_color,
            base_map_visibility: self.base_map_visibility,
        }
    }
}
