// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The deinition for a <code>TopicReviewedAnswer</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TopicReviewedAnswer {
    /// <p>The Amazon Resource Name (ARN) of the reviewed answer.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The answer ID of the reviewed answer.</p>
    pub answer_id: ::std::string::String,
    /// <p>The Dataset ARN for the <code>TopicReviewedAnswer</code>.</p>
    pub dataset_arn: ::std::string::String,
    /// <p>The question for the <code>TopicReviewedAnswer</code>.</p>
    pub question: ::std::string::String,
    /// <p>The mir for the <code>TopicReviewedAnswer</code>.</p>
    pub mir: ::std::option::Option<crate::types::TopicIr>,
    /// <p>The primary visual for the <code>TopicReviewedAnswer</code>.</p>
    pub primary_visual: ::std::option::Option<crate::types::TopicVisual>,
    /// <p>The template for the <code>TopicReviewedAnswer</code>.</p>
    pub template: ::std::option::Option<crate::types::TopicTemplate>,
}
impl TopicReviewedAnswer {
    /// <p>The Amazon Resource Name (ARN) of the reviewed answer.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The answer ID of the reviewed answer.</p>
    pub fn answer_id(&self) -> &str {
        use std::ops::Deref;
        self.answer_id.deref()
    }
    /// <p>The Dataset ARN for the <code>TopicReviewedAnswer</code>.</p>
    pub fn dataset_arn(&self) -> &str {
        use std::ops::Deref;
        self.dataset_arn.deref()
    }
    /// <p>The question for the <code>TopicReviewedAnswer</code>.</p>
    pub fn question(&self) -> &str {
        use std::ops::Deref;
        self.question.deref()
    }
    /// <p>The mir for the <code>TopicReviewedAnswer</code>.</p>
    pub fn mir(&self) -> ::std::option::Option<&crate::types::TopicIr> {
        self.mir.as_ref()
    }
    /// <p>The primary visual for the <code>TopicReviewedAnswer</code>.</p>
    pub fn primary_visual(&self) -> ::std::option::Option<&crate::types::TopicVisual> {
        self.primary_visual.as_ref()
    }
    /// <p>The template for the <code>TopicReviewedAnswer</code>.</p>
    pub fn template(&self) -> ::std::option::Option<&crate::types::TopicTemplate> {
        self.template.as_ref()
    }
}
impl TopicReviewedAnswer {
    /// Creates a new builder-style object to manufacture [`TopicReviewedAnswer`](crate::types::TopicReviewedAnswer).
    pub fn builder() -> crate::types::builders::TopicReviewedAnswerBuilder {
        crate::types::builders::TopicReviewedAnswerBuilder::default()
    }
}

/// A builder for [`TopicReviewedAnswer`](crate::types::TopicReviewedAnswer).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TopicReviewedAnswerBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) answer_id: ::std::option::Option<::std::string::String>,
    pub(crate) dataset_arn: ::std::option::Option<::std::string::String>,
    pub(crate) question: ::std::option::Option<::std::string::String>,
    pub(crate) mir: ::std::option::Option<crate::types::TopicIr>,
    pub(crate) primary_visual: ::std::option::Option<crate::types::TopicVisual>,
    pub(crate) template: ::std::option::Option<crate::types::TopicTemplate>,
}
impl TopicReviewedAnswerBuilder {
    /// <p>The Amazon Resource Name (ARN) of the reviewed answer.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the reviewed answer.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the reviewed answer.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The answer ID of the reviewed answer.</p>
    /// This field is required.
    pub fn answer_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.answer_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The answer ID of the reviewed answer.</p>
    pub fn set_answer_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.answer_id = input;
        self
    }
    /// <p>The answer ID of the reviewed answer.</p>
    pub fn get_answer_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.answer_id
    }
    /// <p>The Dataset ARN for the <code>TopicReviewedAnswer</code>.</p>
    /// This field is required.
    pub fn dataset_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Dataset ARN for the <code>TopicReviewedAnswer</code>.</p>
    pub fn set_dataset_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_arn = input;
        self
    }
    /// <p>The Dataset ARN for the <code>TopicReviewedAnswer</code>.</p>
    pub fn get_dataset_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_arn
    }
    /// <p>The question for the <code>TopicReviewedAnswer</code>.</p>
    /// This field is required.
    pub fn question(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.question = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The question for the <code>TopicReviewedAnswer</code>.</p>
    pub fn set_question(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.question = input;
        self
    }
    /// <p>The question for the <code>TopicReviewedAnswer</code>.</p>
    pub fn get_question(&self) -> &::std::option::Option<::std::string::String> {
        &self.question
    }
    /// <p>The mir for the <code>TopicReviewedAnswer</code>.</p>
    pub fn mir(mut self, input: crate::types::TopicIr) -> Self {
        self.mir = ::std::option::Option::Some(input);
        self
    }
    /// <p>The mir for the <code>TopicReviewedAnswer</code>.</p>
    pub fn set_mir(mut self, input: ::std::option::Option<crate::types::TopicIr>) -> Self {
        self.mir = input;
        self
    }
    /// <p>The mir for the <code>TopicReviewedAnswer</code>.</p>
    pub fn get_mir(&self) -> &::std::option::Option<crate::types::TopicIr> {
        &self.mir
    }
    /// <p>The primary visual for the <code>TopicReviewedAnswer</code>.</p>
    pub fn primary_visual(mut self, input: crate::types::TopicVisual) -> Self {
        self.primary_visual = ::std::option::Option::Some(input);
        self
    }
    /// <p>The primary visual for the <code>TopicReviewedAnswer</code>.</p>
    pub fn set_primary_visual(mut self, input: ::std::option::Option<crate::types::TopicVisual>) -> Self {
        self.primary_visual = input;
        self
    }
    /// <p>The primary visual for the <code>TopicReviewedAnswer</code>.</p>
    pub fn get_primary_visual(&self) -> &::std::option::Option<crate::types::TopicVisual> {
        &self.primary_visual
    }
    /// <p>The template for the <code>TopicReviewedAnswer</code>.</p>
    pub fn template(mut self, input: crate::types::TopicTemplate) -> Self {
        self.template = ::std::option::Option::Some(input);
        self
    }
    /// <p>The template for the <code>TopicReviewedAnswer</code>.</p>
    pub fn set_template(mut self, input: ::std::option::Option<crate::types::TopicTemplate>) -> Self {
        self.template = input;
        self
    }
    /// <p>The template for the <code>TopicReviewedAnswer</code>.</p>
    pub fn get_template(&self) -> &::std::option::Option<crate::types::TopicTemplate> {
        &self.template
    }
    /// Consumes the builder and constructs a [`TopicReviewedAnswer`](crate::types::TopicReviewedAnswer).
    /// This method will fail if any of the following fields are not set:
    /// - [`answer_id`](crate::types::builders::TopicReviewedAnswerBuilder::answer_id)
    /// - [`dataset_arn`](crate::types::builders::TopicReviewedAnswerBuilder::dataset_arn)
    /// - [`question`](crate::types::builders::TopicReviewedAnswerBuilder::question)
    pub fn build(self) -> ::std::result::Result<crate::types::TopicReviewedAnswer, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TopicReviewedAnswer {
            arn: self.arn,
            answer_id: self.answer_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "answer_id",
                    "answer_id was not specified but it is required when building TopicReviewedAnswer",
                )
            })?,
            dataset_arn: self.dataset_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dataset_arn",
                    "dataset_arn was not specified but it is required when building TopicReviewedAnswer",
                )
            })?,
            question: self.question.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "question",
                    "question was not specified but it is required when building TopicReviewedAnswer",
                )
            })?,
            mir: self.mir,
            primary_visual: self.primary_visual,
            template: self.template,
        })
    }
}
