// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition for a <code>TopicVisual</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TopicVisual {
    /// <p>The visual ID for the <code>TopicVisual</code>.</p>
    pub visual_id: ::std::option::Option<::std::string::String>,
    /// <p>The role for the <code>TopicVisual</code>.</p>
    pub role: ::std::option::Option<crate::types::VisualRole>,
    /// <p>The ir for the <code>TopicVisual</code>.</p>
    pub ir: ::std::option::Option<crate::types::TopicIr>,
    /// <p>The supporting visuals for the <code>TopicVisual</code>.</p>
    pub supporting_visuals: ::std::option::Option<::std::vec::Vec<crate::types::TopicVisual>>,
}
impl TopicVisual {
    /// <p>The visual ID for the <code>TopicVisual</code>.</p>
    pub fn visual_id(&self) -> ::std::option::Option<&str> {
        self.visual_id.as_deref()
    }
    /// <p>The role for the <code>TopicVisual</code>.</p>
    pub fn role(&self) -> ::std::option::Option<&crate::types::VisualRole> {
        self.role.as_ref()
    }
    /// <p>The ir for the <code>TopicVisual</code>.</p>
    pub fn ir(&self) -> ::std::option::Option<&crate::types::TopicIr> {
        self.ir.as_ref()
    }
    /// <p>The supporting visuals for the <code>TopicVisual</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.supporting_visuals.is_none()`.
    pub fn supporting_visuals(&self) -> &[crate::types::TopicVisual] {
        self.supporting_visuals.as_deref().unwrap_or_default()
    }
}
impl TopicVisual {
    /// Creates a new builder-style object to manufacture [`TopicVisual`](crate::types::TopicVisual).
    pub fn builder() -> crate::types::builders::TopicVisualBuilder {
        crate::types::builders::TopicVisualBuilder::default()
    }
}

/// A builder for [`TopicVisual`](crate::types::TopicVisual).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TopicVisualBuilder {
    pub(crate) visual_id: ::std::option::Option<::std::string::String>,
    pub(crate) role: ::std::option::Option<crate::types::VisualRole>,
    pub(crate) ir: ::std::option::Option<crate::types::TopicIr>,
    pub(crate) supporting_visuals: ::std::option::Option<::std::vec::Vec<crate::types::TopicVisual>>,
}
impl TopicVisualBuilder {
    /// <p>The visual ID for the <code>TopicVisual</code>.</p>
    pub fn visual_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.visual_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The visual ID for the <code>TopicVisual</code>.</p>
    pub fn set_visual_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.visual_id = input;
        self
    }
    /// <p>The visual ID for the <code>TopicVisual</code>.</p>
    pub fn get_visual_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.visual_id
    }
    /// <p>The role for the <code>TopicVisual</code>.</p>
    pub fn role(mut self, input: crate::types::VisualRole) -> Self {
        self.role = ::std::option::Option::Some(input);
        self
    }
    /// <p>The role for the <code>TopicVisual</code>.</p>
    pub fn set_role(mut self, input: ::std::option::Option<crate::types::VisualRole>) -> Self {
        self.role = input;
        self
    }
    /// <p>The role for the <code>TopicVisual</code>.</p>
    pub fn get_role(&self) -> &::std::option::Option<crate::types::VisualRole> {
        &self.role
    }
    /// <p>The ir for the <code>TopicVisual</code>.</p>
    pub fn ir(mut self, input: crate::types::TopicIr) -> Self {
        self.ir = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ir for the <code>TopicVisual</code>.</p>
    pub fn set_ir(mut self, input: ::std::option::Option<crate::types::TopicIr>) -> Self {
        self.ir = input;
        self
    }
    /// <p>The ir for the <code>TopicVisual</code>.</p>
    pub fn get_ir(&self) -> &::std::option::Option<crate::types::TopicIr> {
        &self.ir
    }
    /// Appends an item to `supporting_visuals`.
    ///
    /// To override the contents of this collection use [`set_supporting_visuals`](Self::set_supporting_visuals).
    ///
    /// <p>The supporting visuals for the <code>TopicVisual</code>.</p>
    pub fn supporting_visuals(mut self, input: crate::types::TopicVisual) -> Self {
        let mut v = self.supporting_visuals.unwrap_or_default();
        v.push(input);
        self.supporting_visuals = ::std::option::Option::Some(v);
        self
    }
    /// <p>The supporting visuals for the <code>TopicVisual</code>.</p>
    pub fn set_supporting_visuals(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TopicVisual>>) -> Self {
        self.supporting_visuals = input;
        self
    }
    /// <p>The supporting visuals for the <code>TopicVisual</code>.</p>
    pub fn get_supporting_visuals(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TopicVisual>> {
        &self.supporting_visuals
    }
    /// Consumes the builder and constructs a [`TopicVisual`](crate::types::TopicVisual).
    pub fn build(self) -> crate::types::TopicVisual {
        crate::types::TopicVisual {
            visual_id: self.visual_id,
            role: self.role,
            ir: self.ir,
            supporting_visuals: self.supporting_visuals,
        }
    }
}
