// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of the brand.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BrandSummary {
    /// <p>The Amazon Resource Name (ARN) of the brand.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon QuickSight brand.</p>
    pub brand_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the brand.</p>
    pub brand_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the brand.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The status of the brand.</p>
    pub brand_status: ::std::option::Option<crate::types::BrandStatus>,
    /// <p>The time that the brand was created.</p>
    pub created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time when the brand was last updated.</p>
    pub last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl BrandSummary {
    /// <p>The Amazon Resource Name (ARN) of the brand.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The ID of the Amazon QuickSight brand.</p>
    pub fn brand_id(&self) -> ::std::option::Option<&str> {
        self.brand_id.as_deref()
    }
    /// <p>The name of the brand.</p>
    pub fn brand_name(&self) -> ::std::option::Option<&str> {
        self.brand_name.as_deref()
    }
    /// <p>The description of the brand.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The status of the brand.</p>
    pub fn brand_status(&self) -> ::std::option::Option<&crate::types::BrandStatus> {
        self.brand_status.as_ref()
    }
    /// <p>The time that the brand was created.</p>
    pub fn created_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The time when the brand was last updated.</p>
    pub fn last_updated_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
}
impl BrandSummary {
    /// Creates a new builder-style object to manufacture [`BrandSummary`](crate::types::BrandSummary).
    pub fn builder() -> crate::types::builders::BrandSummaryBuilder {
        crate::types::builders::BrandSummaryBuilder::default()
    }
}

/// A builder for [`BrandSummary`](crate::types::BrandSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BrandSummaryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) brand_id: ::std::option::Option<::std::string::String>,
    pub(crate) brand_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) brand_status: ::std::option::Option<crate::types::BrandStatus>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl BrandSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the brand.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the brand.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the brand.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The ID of the Amazon QuickSight brand.</p>
    pub fn brand_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.brand_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon QuickSight brand.</p>
    pub fn set_brand_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.brand_id = input;
        self
    }
    /// <p>The ID of the Amazon QuickSight brand.</p>
    pub fn get_brand_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.brand_id
    }
    /// <p>The name of the brand.</p>
    pub fn brand_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.brand_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the brand.</p>
    pub fn set_brand_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.brand_name = input;
        self
    }
    /// <p>The name of the brand.</p>
    pub fn get_brand_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.brand_name
    }
    /// <p>The description of the brand.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the brand.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the brand.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The status of the brand.</p>
    pub fn brand_status(mut self, input: crate::types::BrandStatus) -> Self {
        self.brand_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the brand.</p>
    pub fn set_brand_status(mut self, input: ::std::option::Option<crate::types::BrandStatus>) -> Self {
        self.brand_status = input;
        self
    }
    /// <p>The status of the brand.</p>
    pub fn get_brand_status(&self) -> &::std::option::Option<crate::types::BrandStatus> {
        &self.brand_status
    }
    /// <p>The time that the brand was created.</p>
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the brand was created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The time that the brand was created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The time when the brand was last updated.</p>
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the brand was last updated.</p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The time when the brand was last updated.</p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// Consumes the builder and constructs a [`BrandSummary`](crate::types::BrandSummary).
    pub fn build(self) -> crate::types::BrandSummary {
        crate::types::BrandSummary {
            arn: self.arn,
            brand_id: self.brand_id,
            brand_name: self.brand_name,
            description: self.description,
            brand_status: self.brand_status,
            created_time: self.created_time,
            last_updated_time: self.last_updated_time,
        }
    }
}
