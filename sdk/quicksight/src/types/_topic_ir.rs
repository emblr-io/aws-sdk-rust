// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition for a <code>TopicIR</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TopicIr {
    /// <p>The metrics for the <code>TopicIR</code>.</p>
    pub metrics: ::std::option::Option<::std::vec::Vec<crate::types::TopicIrMetric>>,
    /// <p>The GroupBy list for the <code>TopicIR</code>.</p>
    pub group_by_list: ::std::option::Option<::std::vec::Vec<crate::types::TopicIrGroupBy>>,
    /// <p>The filters for the <code>TopicIR</code>.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<crate::types::TopicIrFilterOption>>>,
    /// <p>The sort for the <code>TopicIR</code>.</p>
    pub sort: ::std::option::Option<crate::types::TopicSortClause>,
    /// <p>The contribution analysis for the <code>TopicIR</code>.</p>
    pub contribution_analysis: ::std::option::Option<crate::types::TopicIrContributionAnalysis>,
    /// <p>The visual for the <code>TopicIR</code>.</p>
    pub visual: ::std::option::Option<crate::types::VisualOptions>,
}
impl TopicIr {
    /// <p>The metrics for the <code>TopicIR</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metrics.is_none()`.
    pub fn metrics(&self) -> &[crate::types::TopicIrMetric] {
        self.metrics.as_deref().unwrap_or_default()
    }
    /// <p>The GroupBy list for the <code>TopicIR</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.group_by_list.is_none()`.
    pub fn group_by_list(&self) -> &[crate::types::TopicIrGroupBy] {
        self.group_by_list.as_deref().unwrap_or_default()
    }
    /// <p>The filters for the <code>TopicIR</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[::std::vec::Vec<crate::types::TopicIrFilterOption>] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>The sort for the <code>TopicIR</code>.</p>
    pub fn sort(&self) -> ::std::option::Option<&crate::types::TopicSortClause> {
        self.sort.as_ref()
    }
    /// <p>The contribution analysis for the <code>TopicIR</code>.</p>
    pub fn contribution_analysis(&self) -> ::std::option::Option<&crate::types::TopicIrContributionAnalysis> {
        self.contribution_analysis.as_ref()
    }
    /// <p>The visual for the <code>TopicIR</code>.</p>
    pub fn visual(&self) -> ::std::option::Option<&crate::types::VisualOptions> {
        self.visual.as_ref()
    }
}
impl TopicIr {
    /// Creates a new builder-style object to manufacture [`TopicIr`](crate::types::TopicIr).
    pub fn builder() -> crate::types::builders::TopicIrBuilder {
        crate::types::builders::TopicIrBuilder::default()
    }
}

/// A builder for [`TopicIr`](crate::types::TopicIr).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TopicIrBuilder {
    pub(crate) metrics: ::std::option::Option<::std::vec::Vec<crate::types::TopicIrMetric>>,
    pub(crate) group_by_list: ::std::option::Option<::std::vec::Vec<crate::types::TopicIrGroupBy>>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<crate::types::TopicIrFilterOption>>>,
    pub(crate) sort: ::std::option::Option<crate::types::TopicSortClause>,
    pub(crate) contribution_analysis: ::std::option::Option<crate::types::TopicIrContributionAnalysis>,
    pub(crate) visual: ::std::option::Option<crate::types::VisualOptions>,
}
impl TopicIrBuilder {
    /// Appends an item to `metrics`.
    ///
    /// To override the contents of this collection use [`set_metrics`](Self::set_metrics).
    ///
    /// <p>The metrics for the <code>TopicIR</code>.</p>
    pub fn metrics(mut self, input: crate::types::TopicIrMetric) -> Self {
        let mut v = self.metrics.unwrap_or_default();
        v.push(input);
        self.metrics = ::std::option::Option::Some(v);
        self
    }
    /// <p>The metrics for the <code>TopicIR</code>.</p>
    pub fn set_metrics(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TopicIrMetric>>) -> Self {
        self.metrics = input;
        self
    }
    /// <p>The metrics for the <code>TopicIR</code>.</p>
    pub fn get_metrics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TopicIrMetric>> {
        &self.metrics
    }
    /// Appends an item to `group_by_list`.
    ///
    /// To override the contents of this collection use [`set_group_by_list`](Self::set_group_by_list).
    ///
    /// <p>The GroupBy list for the <code>TopicIR</code>.</p>
    pub fn group_by_list(mut self, input: crate::types::TopicIrGroupBy) -> Self {
        let mut v = self.group_by_list.unwrap_or_default();
        v.push(input);
        self.group_by_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The GroupBy list for the <code>TopicIR</code>.</p>
    pub fn set_group_by_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TopicIrGroupBy>>) -> Self {
        self.group_by_list = input;
        self
    }
    /// <p>The GroupBy list for the <code>TopicIR</code>.</p>
    pub fn get_group_by_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TopicIrGroupBy>> {
        &self.group_by_list
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filters for the <code>TopicIR</code>.</p>
    pub fn filters(mut self, input: ::std::vec::Vec<crate::types::TopicIrFilterOption>) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The filters for the <code>TopicIR</code>.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<crate::types::TopicIrFilterOption>>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>The filters for the <code>TopicIR</code>.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<::std::vec::Vec<crate::types::TopicIrFilterOption>>> {
        &self.filters
    }
    /// <p>The sort for the <code>TopicIR</code>.</p>
    pub fn sort(mut self, input: crate::types::TopicSortClause) -> Self {
        self.sort = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sort for the <code>TopicIR</code>.</p>
    pub fn set_sort(mut self, input: ::std::option::Option<crate::types::TopicSortClause>) -> Self {
        self.sort = input;
        self
    }
    /// <p>The sort for the <code>TopicIR</code>.</p>
    pub fn get_sort(&self) -> &::std::option::Option<crate::types::TopicSortClause> {
        &self.sort
    }
    /// <p>The contribution analysis for the <code>TopicIR</code>.</p>
    pub fn contribution_analysis(mut self, input: crate::types::TopicIrContributionAnalysis) -> Self {
        self.contribution_analysis = ::std::option::Option::Some(input);
        self
    }
    /// <p>The contribution analysis for the <code>TopicIR</code>.</p>
    pub fn set_contribution_analysis(mut self, input: ::std::option::Option<crate::types::TopicIrContributionAnalysis>) -> Self {
        self.contribution_analysis = input;
        self
    }
    /// <p>The contribution analysis for the <code>TopicIR</code>.</p>
    pub fn get_contribution_analysis(&self) -> &::std::option::Option<crate::types::TopicIrContributionAnalysis> {
        &self.contribution_analysis
    }
    /// <p>The visual for the <code>TopicIR</code>.</p>
    pub fn visual(mut self, input: crate::types::VisualOptions) -> Self {
        self.visual = ::std::option::Option::Some(input);
        self
    }
    /// <p>The visual for the <code>TopicIR</code>.</p>
    pub fn set_visual(mut self, input: ::std::option::Option<crate::types::VisualOptions>) -> Self {
        self.visual = input;
        self
    }
    /// <p>The visual for the <code>TopicIR</code>.</p>
    pub fn get_visual(&self) -> &::std::option::Option<crate::types::VisualOptions> {
        &self.visual
    }
    /// Consumes the builder and constructs a [`TopicIr`](crate::types::TopicIr).
    pub fn build(self) -> crate::types::TopicIr {
        crate::types::TopicIr {
            metrics: self.metrics,
            group_by_list: self.group_by_list,
            filters: self.filters,
            sort: self.sort,
            contribution_analysis: self.contribution_analysis,
            visual: self.visual,
        }
    }
}
