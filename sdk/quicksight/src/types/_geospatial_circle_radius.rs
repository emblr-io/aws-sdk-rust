// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The geospatial radius for a circle.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeospatialCircleRadius {
    /// <p>The positive value for the radius of a circle.</p>
    pub radius: ::std::option::Option<f64>,
}
impl GeospatialCircleRadius {
    /// <p>The positive value for the radius of a circle.</p>
    pub fn radius(&self) -> ::std::option::Option<f64> {
        self.radius
    }
}
impl GeospatialCircleRadius {
    /// Creates a new builder-style object to manufacture [`GeospatialCircleRadius`](crate::types::GeospatialCircleRadius).
    pub fn builder() -> crate::types::builders::GeospatialCircleRadiusBuilder {
        crate::types::builders::GeospatialCircleRadiusBuilder::default()
    }
}

/// A builder for [`GeospatialCircleRadius`](crate::types::GeospatialCircleRadius).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GeospatialCircleRadiusBuilder {
    pub(crate) radius: ::std::option::Option<f64>,
}
impl GeospatialCircleRadiusBuilder {
    /// <p>The positive value for the radius of a circle.</p>
    pub fn radius(mut self, input: f64) -> Self {
        self.radius = ::std::option::Option::Some(input);
        self
    }
    /// <p>The positive value for the radius of a circle.</p>
    pub fn set_radius(mut self, input: ::std::option::Option<f64>) -> Self {
        self.radius = input;
        self
    }
    /// <p>The positive value for the radius of a circle.</p>
    pub fn get_radius(&self) -> &::std::option::Option<f64> {
        &self.radius
    }
    /// Consumes the builder and constructs a [`GeospatialCircleRadius`](crate::types::GeospatialCircleRadius).
    pub fn build(self) -> crate::types::GeospatialCircleRadius {
        crate::types::GeospatialCircleRadius { radius: self.radius }
    }
}
