// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition for a <code>SucceededTopicReviewedAnswer</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SucceededTopicReviewedAnswer {
    /// <p>The answer ID for the <code>SucceededTopicReviewedAnswer</code>.</p>
    pub answer_id: ::std::option::Option<::std::string::String>,
}
impl SucceededTopicReviewedAnswer {
    /// <p>The answer ID for the <code>SucceededTopicReviewedAnswer</code>.</p>
    pub fn answer_id(&self) -> ::std::option::Option<&str> {
        self.answer_id.as_deref()
    }
}
impl SucceededTopicReviewedAnswer {
    /// Creates a new builder-style object to manufacture [`SucceededTopicReviewedAnswer`](crate::types::SucceededTopicReviewedAnswer).
    pub fn builder() -> crate::types::builders::SucceededTopicReviewedAnswerBuilder {
        crate::types::builders::SucceededTopicReviewedAnswerBuilder::default()
    }
}

/// A builder for [`SucceededTopicReviewedAnswer`](crate::types::SucceededTopicReviewedAnswer).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SucceededTopicReviewedAnswerBuilder {
    pub(crate) answer_id: ::std::option::Option<::std::string::String>,
}
impl SucceededTopicReviewedAnswerBuilder {
    /// <p>The answer ID for the <code>SucceededTopicReviewedAnswer</code>.</p>
    pub fn answer_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.answer_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The answer ID for the <code>SucceededTopicReviewedAnswer</code>.</p>
    pub fn set_answer_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.answer_id = input;
        self
    }
    /// <p>The answer ID for the <code>SucceededTopicReviewedAnswer</code>.</p>
    pub fn get_answer_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.answer_id
    }
    /// Consumes the builder and constructs a [`SucceededTopicReviewedAnswer`](crate::types::SucceededTopicReviewedAnswer).
    pub fn build(self) -> crate::types::SucceededTopicReviewedAnswer {
        crate::types::SucceededTopicReviewedAnswer { answer_id: self.answer_id }
    }
}
