// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A collection of field wells for a plugin visual.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PluginVisualFieldWell {
    /// <p>The semantic axis name for the field well.</p>
    pub axis_name: ::std::option::Option<crate::types::PluginVisualAxisName>,
    /// <p>A list of dimensions for the field well.</p>
    pub dimensions: ::std::option::Option<::std::vec::Vec<crate::types::DimensionField>>,
    /// <p>A list of measures that exist in the field well.</p>
    pub measures: ::std::option::Option<::std::vec::Vec<crate::types::MeasureField>>,
    /// <p>A list of unaggregated fields that exist in the field well.</p>
    pub unaggregated: ::std::option::Option<::std::vec::Vec<crate::types::UnaggregatedField>>,
}
impl PluginVisualFieldWell {
    /// <p>The semantic axis name for the field well.</p>
    pub fn axis_name(&self) -> ::std::option::Option<&crate::types::PluginVisualAxisName> {
        self.axis_name.as_ref()
    }
    /// <p>A list of dimensions for the field well.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dimensions.is_none()`.
    pub fn dimensions(&self) -> &[crate::types::DimensionField] {
        self.dimensions.as_deref().unwrap_or_default()
    }
    /// <p>A list of measures that exist in the field well.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.measures.is_none()`.
    pub fn measures(&self) -> &[crate::types::MeasureField] {
        self.measures.as_deref().unwrap_or_default()
    }
    /// <p>A list of unaggregated fields that exist in the field well.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.unaggregated.is_none()`.
    pub fn unaggregated(&self) -> &[crate::types::UnaggregatedField] {
        self.unaggregated.as_deref().unwrap_or_default()
    }
}
impl PluginVisualFieldWell {
    /// Creates a new builder-style object to manufacture [`PluginVisualFieldWell`](crate::types::PluginVisualFieldWell).
    pub fn builder() -> crate::types::builders::PluginVisualFieldWellBuilder {
        crate::types::builders::PluginVisualFieldWellBuilder::default()
    }
}

/// A builder for [`PluginVisualFieldWell`](crate::types::PluginVisualFieldWell).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PluginVisualFieldWellBuilder {
    pub(crate) axis_name: ::std::option::Option<crate::types::PluginVisualAxisName>,
    pub(crate) dimensions: ::std::option::Option<::std::vec::Vec<crate::types::DimensionField>>,
    pub(crate) measures: ::std::option::Option<::std::vec::Vec<crate::types::MeasureField>>,
    pub(crate) unaggregated: ::std::option::Option<::std::vec::Vec<crate::types::UnaggregatedField>>,
}
impl PluginVisualFieldWellBuilder {
    /// <p>The semantic axis name for the field well.</p>
    pub fn axis_name(mut self, input: crate::types::PluginVisualAxisName) -> Self {
        self.axis_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The semantic axis name for the field well.</p>
    pub fn set_axis_name(mut self, input: ::std::option::Option<crate::types::PluginVisualAxisName>) -> Self {
        self.axis_name = input;
        self
    }
    /// <p>The semantic axis name for the field well.</p>
    pub fn get_axis_name(&self) -> &::std::option::Option<crate::types::PluginVisualAxisName> {
        &self.axis_name
    }
    /// Appends an item to `dimensions`.
    ///
    /// To override the contents of this collection use [`set_dimensions`](Self::set_dimensions).
    ///
    /// <p>A list of dimensions for the field well.</p>
    pub fn dimensions(mut self, input: crate::types::DimensionField) -> Self {
        let mut v = self.dimensions.unwrap_or_default();
        v.push(input);
        self.dimensions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of dimensions for the field well.</p>
    pub fn set_dimensions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DimensionField>>) -> Self {
        self.dimensions = input;
        self
    }
    /// <p>A list of dimensions for the field well.</p>
    pub fn get_dimensions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DimensionField>> {
        &self.dimensions
    }
    /// Appends an item to `measures`.
    ///
    /// To override the contents of this collection use [`set_measures`](Self::set_measures).
    ///
    /// <p>A list of measures that exist in the field well.</p>
    pub fn measures(mut self, input: crate::types::MeasureField) -> Self {
        let mut v = self.measures.unwrap_or_default();
        v.push(input);
        self.measures = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of measures that exist in the field well.</p>
    pub fn set_measures(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MeasureField>>) -> Self {
        self.measures = input;
        self
    }
    /// <p>A list of measures that exist in the field well.</p>
    pub fn get_measures(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MeasureField>> {
        &self.measures
    }
    /// Appends an item to `unaggregated`.
    ///
    /// To override the contents of this collection use [`set_unaggregated`](Self::set_unaggregated).
    ///
    /// <p>A list of unaggregated fields that exist in the field well.</p>
    pub fn unaggregated(mut self, input: crate::types::UnaggregatedField) -> Self {
        let mut v = self.unaggregated.unwrap_or_default();
        v.push(input);
        self.unaggregated = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of unaggregated fields that exist in the field well.</p>
    pub fn set_unaggregated(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UnaggregatedField>>) -> Self {
        self.unaggregated = input;
        self
    }
    /// <p>A list of unaggregated fields that exist in the field well.</p>
    pub fn get_unaggregated(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UnaggregatedField>> {
        &self.unaggregated
    }
    /// Consumes the builder and constructs a [`PluginVisualFieldWell`](crate::types::PluginVisualFieldWell).
    pub fn build(self) -> crate::types::PluginVisualFieldWell {
        crate::types::PluginVisualFieldWell {
            axis_name: self.axis_name,
            dimensions: self.dimensions,
            measures: self.measures,
            unaggregated: self.unaggregated,
        }
    }
}
