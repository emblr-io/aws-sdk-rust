// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options that determine the thousands separator configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ThousandSeparatorOptions {
    /// <p>Determines the thousands separator symbol.</p>
    pub symbol: ::std::option::Option<crate::types::NumericSeparatorSymbol>,
    /// <p>Determines the visibility of the thousands separator.</p>
    pub visibility: ::std::option::Option<crate::types::Visibility>,
    /// <p>Determines the way numbers are styled to accommodate different readability standards. The <code>DEFAULT</code> value uses the standard international grouping system and groups numbers by the thousands. The <code>LAKHS</code> value uses the Indian numbering system and groups numbers by lakhs and crores.</p>
    pub grouping_style: ::std::option::Option<crate::types::DigitGroupingStyle>,
}
impl ThousandSeparatorOptions {
    /// <p>Determines the thousands separator symbol.</p>
    pub fn symbol(&self) -> ::std::option::Option<&crate::types::NumericSeparatorSymbol> {
        self.symbol.as_ref()
    }
    /// <p>Determines the visibility of the thousands separator.</p>
    pub fn visibility(&self) -> ::std::option::Option<&crate::types::Visibility> {
        self.visibility.as_ref()
    }
    /// <p>Determines the way numbers are styled to accommodate different readability standards. The <code>DEFAULT</code> value uses the standard international grouping system and groups numbers by the thousands. The <code>LAKHS</code> value uses the Indian numbering system and groups numbers by lakhs and crores.</p>
    pub fn grouping_style(&self) -> ::std::option::Option<&crate::types::DigitGroupingStyle> {
        self.grouping_style.as_ref()
    }
}
impl ThousandSeparatorOptions {
    /// Creates a new builder-style object to manufacture [`ThousandSeparatorOptions`](crate::types::ThousandSeparatorOptions).
    pub fn builder() -> crate::types::builders::ThousandSeparatorOptionsBuilder {
        crate::types::builders::ThousandSeparatorOptionsBuilder::default()
    }
}

/// A builder for [`ThousandSeparatorOptions`](crate::types::ThousandSeparatorOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ThousandSeparatorOptionsBuilder {
    pub(crate) symbol: ::std::option::Option<crate::types::NumericSeparatorSymbol>,
    pub(crate) visibility: ::std::option::Option<crate::types::Visibility>,
    pub(crate) grouping_style: ::std::option::Option<crate::types::DigitGroupingStyle>,
}
impl ThousandSeparatorOptionsBuilder {
    /// <p>Determines the thousands separator symbol.</p>
    pub fn symbol(mut self, input: crate::types::NumericSeparatorSymbol) -> Self {
        self.symbol = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines the thousands separator symbol.</p>
    pub fn set_symbol(mut self, input: ::std::option::Option<crate::types::NumericSeparatorSymbol>) -> Self {
        self.symbol = input;
        self
    }
    /// <p>Determines the thousands separator symbol.</p>
    pub fn get_symbol(&self) -> &::std::option::Option<crate::types::NumericSeparatorSymbol> {
        &self.symbol
    }
    /// <p>Determines the visibility of the thousands separator.</p>
    pub fn visibility(mut self, input: crate::types::Visibility) -> Self {
        self.visibility = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines the visibility of the thousands separator.</p>
    pub fn set_visibility(mut self, input: ::std::option::Option<crate::types::Visibility>) -> Self {
        self.visibility = input;
        self
    }
    /// <p>Determines the visibility of the thousands separator.</p>
    pub fn get_visibility(&self) -> &::std::option::Option<crate::types::Visibility> {
        &self.visibility
    }
    /// <p>Determines the way numbers are styled to accommodate different readability standards. The <code>DEFAULT</code> value uses the standard international grouping system and groups numbers by the thousands. The <code>LAKHS</code> value uses the Indian numbering system and groups numbers by lakhs and crores.</p>
    pub fn grouping_style(mut self, input: crate::types::DigitGroupingStyle) -> Self {
        self.grouping_style = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines the way numbers are styled to accommodate different readability standards. The <code>DEFAULT</code> value uses the standard international grouping system and groups numbers by the thousands. The <code>LAKHS</code> value uses the Indian numbering system and groups numbers by lakhs and crores.</p>
    pub fn set_grouping_style(mut self, input: ::std::option::Option<crate::types::DigitGroupingStyle>) -> Self {
        self.grouping_style = input;
        self
    }
    /// <p>Determines the way numbers are styled to accommodate different readability standards. The <code>DEFAULT</code> value uses the standard international grouping system and groups numbers by the thousands. The <code>LAKHS</code> value uses the Indian numbering system and groups numbers by lakhs and crores.</p>
    pub fn get_grouping_style(&self) -> &::std::option::Option<crate::types::DigitGroupingStyle> {
        &self.grouping_style
    }
    /// Consumes the builder and constructs a [`ThousandSeparatorOptions`](crate::types::ThousandSeparatorOptions).
    pub fn build(self) -> crate::types::ThousandSeparatorOptions {
        crate::types::ThousandSeparatorOptions {
            symbol: self.symbol,
            visibility: self.visibility,
            grouping_style: self.grouping_style,
        }
    }
}
