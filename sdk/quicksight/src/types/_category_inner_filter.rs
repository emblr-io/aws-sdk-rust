// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A <code>CategoryInnerFilter</code> filters text values for the <code>NestedFilter</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CategoryInnerFilter {
    /// <p>A column of a data set.</p>
    pub column: ::std::option::Option<crate::types::ColumnIdentifier>,
    /// <p>The configuration for a <code>CategoryFilter</code>.</p>
    /// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
    pub configuration: ::std::option::Option<crate::types::CategoryFilterConfiguration>,
    /// <p>The default configuration for all dependent controls of the filter.</p>
    pub default_filter_control_configuration: ::std::option::Option<crate::types::DefaultFilterControlConfiguration>,
}
impl CategoryInnerFilter {
    /// <p>A column of a data set.</p>
    pub fn column(&self) -> ::std::option::Option<&crate::types::ColumnIdentifier> {
        self.column.as_ref()
    }
    /// <p>The configuration for a <code>CategoryFilter</code>.</p>
    /// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::CategoryFilterConfiguration> {
        self.configuration.as_ref()
    }
    /// <p>The default configuration for all dependent controls of the filter.</p>
    pub fn default_filter_control_configuration(&self) -> ::std::option::Option<&crate::types::DefaultFilterControlConfiguration> {
        self.default_filter_control_configuration.as_ref()
    }
}
impl CategoryInnerFilter {
    /// Creates a new builder-style object to manufacture [`CategoryInnerFilter`](crate::types::CategoryInnerFilter).
    pub fn builder() -> crate::types::builders::CategoryInnerFilterBuilder {
        crate::types::builders::CategoryInnerFilterBuilder::default()
    }
}

/// A builder for [`CategoryInnerFilter`](crate::types::CategoryInnerFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CategoryInnerFilterBuilder {
    pub(crate) column: ::std::option::Option<crate::types::ColumnIdentifier>,
    pub(crate) configuration: ::std::option::Option<crate::types::CategoryFilterConfiguration>,
    pub(crate) default_filter_control_configuration: ::std::option::Option<crate::types::DefaultFilterControlConfiguration>,
}
impl CategoryInnerFilterBuilder {
    /// <p>A column of a data set.</p>
    /// This field is required.
    pub fn column(mut self, input: crate::types::ColumnIdentifier) -> Self {
        self.column = ::std::option::Option::Some(input);
        self
    }
    /// <p>A column of a data set.</p>
    pub fn set_column(mut self, input: ::std::option::Option<crate::types::ColumnIdentifier>) -> Self {
        self.column = input;
        self
    }
    /// <p>A column of a data set.</p>
    pub fn get_column(&self) -> &::std::option::Option<crate::types::ColumnIdentifier> {
        &self.column
    }
    /// <p>The configuration for a <code>CategoryFilter</code>.</p>
    /// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
    /// This field is required.
    pub fn configuration(mut self, input: crate::types::CategoryFilterConfiguration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for a <code>CategoryFilter</code>.</p>
    /// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::CategoryFilterConfiguration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>The configuration for a <code>CategoryFilter</code>.</p>
    /// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::CategoryFilterConfiguration> {
        &self.configuration
    }
    /// <p>The default configuration for all dependent controls of the filter.</p>
    pub fn default_filter_control_configuration(mut self, input: crate::types::DefaultFilterControlConfiguration) -> Self {
        self.default_filter_control_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default configuration for all dependent controls of the filter.</p>
    pub fn set_default_filter_control_configuration(mut self, input: ::std::option::Option<crate::types::DefaultFilterControlConfiguration>) -> Self {
        self.default_filter_control_configuration = input;
        self
    }
    /// <p>The default configuration for all dependent controls of the filter.</p>
    pub fn get_default_filter_control_configuration(&self) -> &::std::option::Option<crate::types::DefaultFilterControlConfiguration> {
        &self.default_filter_control_configuration
    }
    /// Consumes the builder and constructs a [`CategoryInnerFilter`](crate::types::CategoryInnerFilter).
    pub fn build(self) -> crate::types::CategoryInnerFilter {
        crate::types::CategoryInnerFilter {
            column: self.column,
            configuration: self.configuration,
            default_filter_control_configuration: self.default_filter_control_configuration,
        }
    }
}
