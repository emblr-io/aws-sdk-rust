// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The option that determines the text display size.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FontSize {
    /// <p>The lexical name for the text size, proportional to its surrounding context.</p>
    pub relative: ::std::option::Option<crate::types::RelativeFontSize>,
    /// <p>The font size that you want to use in px.</p>
    pub absolute: ::std::option::Option<::std::string::String>,
}
impl FontSize {
    /// <p>The lexical name for the text size, proportional to its surrounding context.</p>
    pub fn relative(&self) -> ::std::option::Option<&crate::types::RelativeFontSize> {
        self.relative.as_ref()
    }
    /// <p>The font size that you want to use in px.</p>
    pub fn absolute(&self) -> ::std::option::Option<&str> {
        self.absolute.as_deref()
    }
}
impl FontSize {
    /// Creates a new builder-style object to manufacture [`FontSize`](crate::types::FontSize).
    pub fn builder() -> crate::types::builders::FontSizeBuilder {
        crate::types::builders::FontSizeBuilder::default()
    }
}

/// A builder for [`FontSize`](crate::types::FontSize).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FontSizeBuilder {
    pub(crate) relative: ::std::option::Option<crate::types::RelativeFontSize>,
    pub(crate) absolute: ::std::option::Option<::std::string::String>,
}
impl FontSizeBuilder {
    /// <p>The lexical name for the text size, proportional to its surrounding context.</p>
    pub fn relative(mut self, input: crate::types::RelativeFontSize) -> Self {
        self.relative = ::std::option::Option::Some(input);
        self
    }
    /// <p>The lexical name for the text size, proportional to its surrounding context.</p>
    pub fn set_relative(mut self, input: ::std::option::Option<crate::types::RelativeFontSize>) -> Self {
        self.relative = input;
        self
    }
    /// <p>The lexical name for the text size, proportional to its surrounding context.</p>
    pub fn get_relative(&self) -> &::std::option::Option<crate::types::RelativeFontSize> {
        &self.relative
    }
    /// <p>The font size that you want to use in px.</p>
    pub fn absolute(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.absolute = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The font size that you want to use in px.</p>
    pub fn set_absolute(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.absolute = input;
        self
    }
    /// <p>The font size that you want to use in px.</p>
    pub fn get_absolute(&self) -> &::std::option::Option<::std::string::String> {
        &self.absolute
    }
    /// Consumes the builder and constructs a [`FontSize`](crate::types::FontSize).
    pub fn build(self) -> crate::types::FontSize {
        crate::types::FontSize {
            relative: self.relative,
            absolute: self.absolute,
        }
    }
}
