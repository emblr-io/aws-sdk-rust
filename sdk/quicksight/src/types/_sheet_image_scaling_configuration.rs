// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Determines how the image is scaled</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SheetImageScalingConfiguration {
    /// <p>The scaling option to use when fitting the image inside the container.</p>
    /// <p>Valid values are defined as follows:</p>
    /// <ul>
    /// <li>
    /// <p><code>SCALE_TO_WIDTH</code>: The image takes up the entire width of the container. The image aspect ratio is preserved.</p></li>
    /// <li>
    /// <p><code>SCALE_TO_HEIGHT</code>: The image takes up the entire height of the container. The image aspect ratio is preserved.</p></li>
    /// <li>
    /// <p><code>SCALE_TO_CONTAINER</code>: The image takes up the entire width and height of the container. The image aspect ratio is not preserved.</p></li>
    /// <li>
    /// <p><code>SCALE_NONE</code>: The image is displayed in its original size and is not scaled to the container.</p></li>
    /// </ul>
    pub scaling_type: ::std::option::Option<crate::types::SheetImageScalingType>,
}
impl SheetImageScalingConfiguration {
    /// <p>The scaling option to use when fitting the image inside the container.</p>
    /// <p>Valid values are defined as follows:</p>
    /// <ul>
    /// <li>
    /// <p><code>SCALE_TO_WIDTH</code>: The image takes up the entire width of the container. The image aspect ratio is preserved.</p></li>
    /// <li>
    /// <p><code>SCALE_TO_HEIGHT</code>: The image takes up the entire height of the container. The image aspect ratio is preserved.</p></li>
    /// <li>
    /// <p><code>SCALE_TO_CONTAINER</code>: The image takes up the entire width and height of the container. The image aspect ratio is not preserved.</p></li>
    /// <li>
    /// <p><code>SCALE_NONE</code>: The image is displayed in its original size and is not scaled to the container.</p></li>
    /// </ul>
    pub fn scaling_type(&self) -> ::std::option::Option<&crate::types::SheetImageScalingType> {
        self.scaling_type.as_ref()
    }
}
impl SheetImageScalingConfiguration {
    /// Creates a new builder-style object to manufacture [`SheetImageScalingConfiguration`](crate::types::SheetImageScalingConfiguration).
    pub fn builder() -> crate::types::builders::SheetImageScalingConfigurationBuilder {
        crate::types::builders::SheetImageScalingConfigurationBuilder::default()
    }
}

/// A builder for [`SheetImageScalingConfiguration`](crate::types::SheetImageScalingConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SheetImageScalingConfigurationBuilder {
    pub(crate) scaling_type: ::std::option::Option<crate::types::SheetImageScalingType>,
}
impl SheetImageScalingConfigurationBuilder {
    /// <p>The scaling option to use when fitting the image inside the container.</p>
    /// <p>Valid values are defined as follows:</p>
    /// <ul>
    /// <li>
    /// <p><code>SCALE_TO_WIDTH</code>: The image takes up the entire width of the container. The image aspect ratio is preserved.</p></li>
    /// <li>
    /// <p><code>SCALE_TO_HEIGHT</code>: The image takes up the entire height of the container. The image aspect ratio is preserved.</p></li>
    /// <li>
    /// <p><code>SCALE_TO_CONTAINER</code>: The image takes up the entire width and height of the container. The image aspect ratio is not preserved.</p></li>
    /// <li>
    /// <p><code>SCALE_NONE</code>: The image is displayed in its original size and is not scaled to the container.</p></li>
    /// </ul>
    pub fn scaling_type(mut self, input: crate::types::SheetImageScalingType) -> Self {
        self.scaling_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scaling option to use when fitting the image inside the container.</p>
    /// <p>Valid values are defined as follows:</p>
    /// <ul>
    /// <li>
    /// <p><code>SCALE_TO_WIDTH</code>: The image takes up the entire width of the container. The image aspect ratio is preserved.</p></li>
    /// <li>
    /// <p><code>SCALE_TO_HEIGHT</code>: The image takes up the entire height of the container. The image aspect ratio is preserved.</p></li>
    /// <li>
    /// <p><code>SCALE_TO_CONTAINER</code>: The image takes up the entire width and height of the container. The image aspect ratio is not preserved.</p></li>
    /// <li>
    /// <p><code>SCALE_NONE</code>: The image is displayed in its original size and is not scaled to the container.</p></li>
    /// </ul>
    pub fn set_scaling_type(mut self, input: ::std::option::Option<crate::types::SheetImageScalingType>) -> Self {
        self.scaling_type = input;
        self
    }
    /// <p>The scaling option to use when fitting the image inside the container.</p>
    /// <p>Valid values are defined as follows:</p>
    /// <ul>
    /// <li>
    /// <p><code>SCALE_TO_WIDTH</code>: The image takes up the entire width of the container. The image aspect ratio is preserved.</p></li>
    /// <li>
    /// <p><code>SCALE_TO_HEIGHT</code>: The image takes up the entire height of the container. The image aspect ratio is preserved.</p></li>
    /// <li>
    /// <p><code>SCALE_TO_CONTAINER</code>: The image takes up the entire width and height of the container. The image aspect ratio is not preserved.</p></li>
    /// <li>
    /// <p><code>SCALE_NONE</code>: The image is displayed in its original size and is not scaled to the container.</p></li>
    /// </ul>
    pub fn get_scaling_type(&self) -> &::std::option::Option<crate::types::SheetImageScalingType> {
        &self.scaling_type
    }
    /// Consumes the builder and constructs a [`SheetImageScalingConfiguration`](crate::types::SheetImageScalingConfiguration).
    pub fn build(self) -> crate::types::SheetImageScalingConfiguration {
        crate::types::SheetImageScalingConfiguration {
            scaling_type: self.scaling_type,
        }
    }
}
