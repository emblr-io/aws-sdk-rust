// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A text box.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SheetTextBox {
    /// <p>The unique identifier for a text box. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have text boxes that share identifiers.</p>
    pub sheet_text_box_id: ::std::string::String,
    /// <p>The content that is displayed in the text box.</p>
    pub content: ::std::option::Option<::std::string::String>,
    /// <p>The general textbox interactions setup for a textbox.</p>
    pub interactions: ::std::option::Option<crate::types::TextBoxInteractionOptions>,
}
impl SheetTextBox {
    /// <p>The unique identifier for a text box. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have text boxes that share identifiers.</p>
    pub fn sheet_text_box_id(&self) -> &str {
        use std::ops::Deref;
        self.sheet_text_box_id.deref()
    }
    /// <p>The content that is displayed in the text box.</p>
    pub fn content(&self) -> ::std::option::Option<&str> {
        self.content.as_deref()
    }
    /// <p>The general textbox interactions setup for a textbox.</p>
    pub fn interactions(&self) -> ::std::option::Option<&crate::types::TextBoxInteractionOptions> {
        self.interactions.as_ref()
    }
}
impl SheetTextBox {
    /// Creates a new builder-style object to manufacture [`SheetTextBox`](crate::types::SheetTextBox).
    pub fn builder() -> crate::types::builders::SheetTextBoxBuilder {
        crate::types::builders::SheetTextBoxBuilder::default()
    }
}

/// A builder for [`SheetTextBox`](crate::types::SheetTextBox).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SheetTextBoxBuilder {
    pub(crate) sheet_text_box_id: ::std::option::Option<::std::string::String>,
    pub(crate) content: ::std::option::Option<::std::string::String>,
    pub(crate) interactions: ::std::option::Option<crate::types::TextBoxInteractionOptions>,
}
impl SheetTextBoxBuilder {
    /// <p>The unique identifier for a text box. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have text boxes that share identifiers.</p>
    /// This field is required.
    pub fn sheet_text_box_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sheet_text_box_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for a text box. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have text boxes that share identifiers.</p>
    pub fn set_sheet_text_box_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sheet_text_box_id = input;
        self
    }
    /// <p>The unique identifier for a text box. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have text boxes that share identifiers.</p>
    pub fn get_sheet_text_box_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sheet_text_box_id
    }
    /// <p>The content that is displayed in the text box.</p>
    pub fn content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The content that is displayed in the text box.</p>
    pub fn set_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// <p>The content that is displayed in the text box.</p>
    pub fn get_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.content
    }
    /// <p>The general textbox interactions setup for a textbox.</p>
    pub fn interactions(mut self, input: crate::types::TextBoxInteractionOptions) -> Self {
        self.interactions = ::std::option::Option::Some(input);
        self
    }
    /// <p>The general textbox interactions setup for a textbox.</p>
    pub fn set_interactions(mut self, input: ::std::option::Option<crate::types::TextBoxInteractionOptions>) -> Self {
        self.interactions = input;
        self
    }
    /// <p>The general textbox interactions setup for a textbox.</p>
    pub fn get_interactions(&self) -> &::std::option::Option<crate::types::TextBoxInteractionOptions> {
        &self.interactions
    }
    /// Consumes the builder and constructs a [`SheetTextBox`](crate::types::SheetTextBox).
    /// This method will fail if any of the following fields are not set:
    /// - [`sheet_text_box_id`](crate::types::builders::SheetTextBoxBuilder::sheet_text_box_id)
    pub fn build(self) -> ::std::result::Result<crate::types::SheetTextBox, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SheetTextBox {
            sheet_text_box_id: self.sheet_text_box_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sheet_text_box_id",
                    "sheet_text_box_id was not specified but it is required when building SheetTextBox",
                )
            })?,
            content: self.content,
            interactions: self.interactions,
        })
    }
}
