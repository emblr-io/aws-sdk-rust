// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An array of analysis level configurations.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssetOptions {
    /// <p>Determines the timezone for the analysis.</p>
    pub timezone: ::std::option::Option<::std::string::String>,
    /// <p>Determines the week start day for an analysis.</p>
    pub week_start: ::std::option::Option<crate::types::DayOfTheWeek>,
    /// <p>Determines whether insight summaries from Amazon Q Business are allowed in Dashboard Q&amp;A.</p>
    pub q_business_insights_status: ::std::option::Option<crate::types::QBusinessInsightsStatus>,
    /// <p>A list of dataset ARNS to exclude from Dashboard Q&amp;A.</p>
    pub excluded_data_set_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of visual custom actions for the analysis.</p>
    pub custom_action_defaults: ::std::option::Option<crate::types::VisualCustomActionDefaults>,
}
impl AssetOptions {
    /// <p>Determines the timezone for the analysis.</p>
    pub fn timezone(&self) -> ::std::option::Option<&str> {
        self.timezone.as_deref()
    }
    /// <p>Determines the week start day for an analysis.</p>
    pub fn week_start(&self) -> ::std::option::Option<&crate::types::DayOfTheWeek> {
        self.week_start.as_ref()
    }
    /// <p>Determines whether insight summaries from Amazon Q Business are allowed in Dashboard Q&amp;A.</p>
    pub fn q_business_insights_status(&self) -> ::std::option::Option<&crate::types::QBusinessInsightsStatus> {
        self.q_business_insights_status.as_ref()
    }
    /// <p>A list of dataset ARNS to exclude from Dashboard Q&amp;A.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.excluded_data_set_arns.is_none()`.
    pub fn excluded_data_set_arns(&self) -> &[::std::string::String] {
        self.excluded_data_set_arns.as_deref().unwrap_or_default()
    }
    /// <p>A list of visual custom actions for the analysis.</p>
    pub fn custom_action_defaults(&self) -> ::std::option::Option<&crate::types::VisualCustomActionDefaults> {
        self.custom_action_defaults.as_ref()
    }
}
impl AssetOptions {
    /// Creates a new builder-style object to manufacture [`AssetOptions`](crate::types::AssetOptions).
    pub fn builder() -> crate::types::builders::AssetOptionsBuilder {
        crate::types::builders::AssetOptionsBuilder::default()
    }
}

/// A builder for [`AssetOptions`](crate::types::AssetOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssetOptionsBuilder {
    pub(crate) timezone: ::std::option::Option<::std::string::String>,
    pub(crate) week_start: ::std::option::Option<crate::types::DayOfTheWeek>,
    pub(crate) q_business_insights_status: ::std::option::Option<crate::types::QBusinessInsightsStatus>,
    pub(crate) excluded_data_set_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) custom_action_defaults: ::std::option::Option<crate::types::VisualCustomActionDefaults>,
}
impl AssetOptionsBuilder {
    /// <p>Determines the timezone for the analysis.</p>
    pub fn timezone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.timezone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Determines the timezone for the analysis.</p>
    pub fn set_timezone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.timezone = input;
        self
    }
    /// <p>Determines the timezone for the analysis.</p>
    pub fn get_timezone(&self) -> &::std::option::Option<::std::string::String> {
        &self.timezone
    }
    /// <p>Determines the week start day for an analysis.</p>
    pub fn week_start(mut self, input: crate::types::DayOfTheWeek) -> Self {
        self.week_start = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines the week start day for an analysis.</p>
    pub fn set_week_start(mut self, input: ::std::option::Option<crate::types::DayOfTheWeek>) -> Self {
        self.week_start = input;
        self
    }
    /// <p>Determines the week start day for an analysis.</p>
    pub fn get_week_start(&self) -> &::std::option::Option<crate::types::DayOfTheWeek> {
        &self.week_start
    }
    /// <p>Determines whether insight summaries from Amazon Q Business are allowed in Dashboard Q&amp;A.</p>
    pub fn q_business_insights_status(mut self, input: crate::types::QBusinessInsightsStatus) -> Self {
        self.q_business_insights_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether insight summaries from Amazon Q Business are allowed in Dashboard Q&amp;A.</p>
    pub fn set_q_business_insights_status(mut self, input: ::std::option::Option<crate::types::QBusinessInsightsStatus>) -> Self {
        self.q_business_insights_status = input;
        self
    }
    /// <p>Determines whether insight summaries from Amazon Q Business are allowed in Dashboard Q&amp;A.</p>
    pub fn get_q_business_insights_status(&self) -> &::std::option::Option<crate::types::QBusinessInsightsStatus> {
        &self.q_business_insights_status
    }
    /// Appends an item to `excluded_data_set_arns`.
    ///
    /// To override the contents of this collection use [`set_excluded_data_set_arns`](Self::set_excluded_data_set_arns).
    ///
    /// <p>A list of dataset ARNS to exclude from Dashboard Q&amp;A.</p>
    pub fn excluded_data_set_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.excluded_data_set_arns.unwrap_or_default();
        v.push(input.into());
        self.excluded_data_set_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of dataset ARNS to exclude from Dashboard Q&amp;A.</p>
    pub fn set_excluded_data_set_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.excluded_data_set_arns = input;
        self
    }
    /// <p>A list of dataset ARNS to exclude from Dashboard Q&amp;A.</p>
    pub fn get_excluded_data_set_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.excluded_data_set_arns
    }
    /// <p>A list of visual custom actions for the analysis.</p>
    pub fn custom_action_defaults(mut self, input: crate::types::VisualCustomActionDefaults) -> Self {
        self.custom_action_defaults = ::std::option::Option::Some(input);
        self
    }
    /// <p>A list of visual custom actions for the analysis.</p>
    pub fn set_custom_action_defaults(mut self, input: ::std::option::Option<crate::types::VisualCustomActionDefaults>) -> Self {
        self.custom_action_defaults = input;
        self
    }
    /// <p>A list of visual custom actions for the analysis.</p>
    pub fn get_custom_action_defaults(&self) -> &::std::option::Option<crate::types::VisualCustomActionDefaults> {
        &self.custom_action_defaults
    }
    /// Consumes the builder and constructs a [`AssetOptions`](crate::types::AssetOptions).
    pub fn build(self) -> crate::types::AssetOptions {
        crate::types::AssetOptions {
            timezone: self.timezone,
            week_start: self.week_start,
            q_business_insights_status: self.q_business_insights_status,
            excluded_data_set_arns: self.excluded_data_set_arns,
            custom_action_defaults: self.custom_action_defaults,
        }
    }
}
