// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The map state properties for a map.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeospatialMapState {
    /// <p>The bound options (north, south, west, east) of the geospatial window options.</p>
    pub bounds: ::std::option::Option<crate::types::GeospatialCoordinateBounds>,
    /// <p>Enables or disables map navigation for a map.</p>
    pub map_navigation: ::std::option::Option<crate::types::GeospatialMapNavigation>,
}
impl GeospatialMapState {
    /// <p>The bound options (north, south, west, east) of the geospatial window options.</p>
    pub fn bounds(&self) -> ::std::option::Option<&crate::types::GeospatialCoordinateBounds> {
        self.bounds.as_ref()
    }
    /// <p>Enables or disables map navigation for a map.</p>
    pub fn map_navigation(&self) -> ::std::option::Option<&crate::types::GeospatialMapNavigation> {
        self.map_navigation.as_ref()
    }
}
impl GeospatialMapState {
    /// Creates a new builder-style object to manufacture [`GeospatialMapState`](crate::types::GeospatialMapState).
    pub fn builder() -> crate::types::builders::GeospatialMapStateBuilder {
        crate::types::builders::GeospatialMapStateBuilder::default()
    }
}

/// A builder for [`GeospatialMapState`](crate::types::GeospatialMapState).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GeospatialMapStateBuilder {
    pub(crate) bounds: ::std::option::Option<crate::types::GeospatialCoordinateBounds>,
    pub(crate) map_navigation: ::std::option::Option<crate::types::GeospatialMapNavigation>,
}
impl GeospatialMapStateBuilder {
    /// <p>The bound options (north, south, west, east) of the geospatial window options.</p>
    pub fn bounds(mut self, input: crate::types::GeospatialCoordinateBounds) -> Self {
        self.bounds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The bound options (north, south, west, east) of the geospatial window options.</p>
    pub fn set_bounds(mut self, input: ::std::option::Option<crate::types::GeospatialCoordinateBounds>) -> Self {
        self.bounds = input;
        self
    }
    /// <p>The bound options (north, south, west, east) of the geospatial window options.</p>
    pub fn get_bounds(&self) -> &::std::option::Option<crate::types::GeospatialCoordinateBounds> {
        &self.bounds
    }
    /// <p>Enables or disables map navigation for a map.</p>
    pub fn map_navigation(mut self, input: crate::types::GeospatialMapNavigation) -> Self {
        self.map_navigation = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables or disables map navigation for a map.</p>
    pub fn set_map_navigation(mut self, input: ::std::option::Option<crate::types::GeospatialMapNavigation>) -> Self {
        self.map_navigation = input;
        self
    }
    /// <p>Enables or disables map navigation for a map.</p>
    pub fn get_map_navigation(&self) -> &::std::option::Option<crate::types::GeospatialMapNavigation> {
        &self.map_navigation
    }
    /// Consumes the builder and constructs a [`GeospatialMapState`](crate::types::GeospatialMapState).
    pub fn build(self) -> crate::types::GeospatialMapState {
        crate::types::GeospatialMapState {
            bounds: self.bounds,
            map_navigation: self.map_navigation,
        }
    }
}
