// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The properties for a circle symbol style.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeospatialCircleSymbolStyle {
    /// <p>The color and opacity values for the fill color.</p>
    pub fill_color: ::std::option::Option<crate::types::GeospatialColor>,
    /// <p>The color and opacity values for the stroke color.</p>
    pub stroke_color: ::std::option::Option<crate::types::GeospatialColor>,
    /// <p>The width of the stroke (border).</p>
    pub stroke_width: ::std::option::Option<crate::types::GeospatialLineWidth>,
    /// <p>The radius of the circle.</p>
    pub circle_radius: ::std::option::Option<crate::types::GeospatialCircleRadius>,
}
impl GeospatialCircleSymbolStyle {
    /// <p>The color and opacity values for the fill color.</p>
    pub fn fill_color(&self) -> ::std::option::Option<&crate::types::GeospatialColor> {
        self.fill_color.as_ref()
    }
    /// <p>The color and opacity values for the stroke color.</p>
    pub fn stroke_color(&self) -> ::std::option::Option<&crate::types::GeospatialColor> {
        self.stroke_color.as_ref()
    }
    /// <p>The width of the stroke (border).</p>
    pub fn stroke_width(&self) -> ::std::option::Option<&crate::types::GeospatialLineWidth> {
        self.stroke_width.as_ref()
    }
    /// <p>The radius of the circle.</p>
    pub fn circle_radius(&self) -> ::std::option::Option<&crate::types::GeospatialCircleRadius> {
        self.circle_radius.as_ref()
    }
}
impl GeospatialCircleSymbolStyle {
    /// Creates a new builder-style object to manufacture [`GeospatialCircleSymbolStyle`](crate::types::GeospatialCircleSymbolStyle).
    pub fn builder() -> crate::types::builders::GeospatialCircleSymbolStyleBuilder {
        crate::types::builders::GeospatialCircleSymbolStyleBuilder::default()
    }
}

/// A builder for [`GeospatialCircleSymbolStyle`](crate::types::GeospatialCircleSymbolStyle).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GeospatialCircleSymbolStyleBuilder {
    pub(crate) fill_color: ::std::option::Option<crate::types::GeospatialColor>,
    pub(crate) stroke_color: ::std::option::Option<crate::types::GeospatialColor>,
    pub(crate) stroke_width: ::std::option::Option<crate::types::GeospatialLineWidth>,
    pub(crate) circle_radius: ::std::option::Option<crate::types::GeospatialCircleRadius>,
}
impl GeospatialCircleSymbolStyleBuilder {
    /// <p>The color and opacity values for the fill color.</p>
    pub fn fill_color(mut self, input: crate::types::GeospatialColor) -> Self {
        self.fill_color = ::std::option::Option::Some(input);
        self
    }
    /// <p>The color and opacity values for the fill color.</p>
    pub fn set_fill_color(mut self, input: ::std::option::Option<crate::types::GeospatialColor>) -> Self {
        self.fill_color = input;
        self
    }
    /// <p>The color and opacity values for the fill color.</p>
    pub fn get_fill_color(&self) -> &::std::option::Option<crate::types::GeospatialColor> {
        &self.fill_color
    }
    /// <p>The color and opacity values for the stroke color.</p>
    pub fn stroke_color(mut self, input: crate::types::GeospatialColor) -> Self {
        self.stroke_color = ::std::option::Option::Some(input);
        self
    }
    /// <p>The color and opacity values for the stroke color.</p>
    pub fn set_stroke_color(mut self, input: ::std::option::Option<crate::types::GeospatialColor>) -> Self {
        self.stroke_color = input;
        self
    }
    /// <p>The color and opacity values for the stroke color.</p>
    pub fn get_stroke_color(&self) -> &::std::option::Option<crate::types::GeospatialColor> {
        &self.stroke_color
    }
    /// <p>The width of the stroke (border).</p>
    pub fn stroke_width(mut self, input: crate::types::GeospatialLineWidth) -> Self {
        self.stroke_width = ::std::option::Option::Some(input);
        self
    }
    /// <p>The width of the stroke (border).</p>
    pub fn set_stroke_width(mut self, input: ::std::option::Option<crate::types::GeospatialLineWidth>) -> Self {
        self.stroke_width = input;
        self
    }
    /// <p>The width of the stroke (border).</p>
    pub fn get_stroke_width(&self) -> &::std::option::Option<crate::types::GeospatialLineWidth> {
        &self.stroke_width
    }
    /// <p>The radius of the circle.</p>
    pub fn circle_radius(mut self, input: crate::types::GeospatialCircleRadius) -> Self {
        self.circle_radius = ::std::option::Option::Some(input);
        self
    }
    /// <p>The radius of the circle.</p>
    pub fn set_circle_radius(mut self, input: ::std::option::Option<crate::types::GeospatialCircleRadius>) -> Self {
        self.circle_radius = input;
        self
    }
    /// <p>The radius of the circle.</p>
    pub fn get_circle_radius(&self) -> &::std::option::Option<crate::types::GeospatialCircleRadius> {
        &self.circle_radius
    }
    /// Consumes the builder and constructs a [`GeospatialCircleSymbolStyle`](crate::types::GeospatialCircleSymbolStyle).
    pub fn build(self) -> crate::types::GeospatialCircleSymbolStyle {
        crate::types::GeospatialCircleSymbolStyle {
            fill_color: self.fill_color,
            stroke_color: self.stroke_color,
            stroke_width: self.stroke_width,
            circle_radius: self.circle_radius,
        }
    }
}
