// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A static file that contains an image.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImageStaticFile {
    /// <p>The ID of the static file that contains an image.</p>
    pub static_file_id: ::std::string::String,
    /// <p>The source of the image static file.</p>
    pub source: ::std::option::Option<crate::types::StaticFileSource>,
}
impl ImageStaticFile {
    /// <p>The ID of the static file that contains an image.</p>
    pub fn static_file_id(&self) -> &str {
        use std::ops::Deref;
        self.static_file_id.deref()
    }
    /// <p>The source of the image static file.</p>
    pub fn source(&self) -> ::std::option::Option<&crate::types::StaticFileSource> {
        self.source.as_ref()
    }
}
impl ImageStaticFile {
    /// Creates a new builder-style object to manufacture [`ImageStaticFile`](crate::types::ImageStaticFile).
    pub fn builder() -> crate::types::builders::ImageStaticFileBuilder {
        crate::types::builders::ImageStaticFileBuilder::default()
    }
}

/// A builder for [`ImageStaticFile`](crate::types::ImageStaticFile).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ImageStaticFileBuilder {
    pub(crate) static_file_id: ::std::option::Option<::std::string::String>,
    pub(crate) source: ::std::option::Option<crate::types::StaticFileSource>,
}
impl ImageStaticFileBuilder {
    /// <p>The ID of the static file that contains an image.</p>
    /// This field is required.
    pub fn static_file_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.static_file_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the static file that contains an image.</p>
    pub fn set_static_file_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.static_file_id = input;
        self
    }
    /// <p>The ID of the static file that contains an image.</p>
    pub fn get_static_file_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.static_file_id
    }
    /// <p>The source of the image static file.</p>
    pub fn source(mut self, input: crate::types::StaticFileSource) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source of the image static file.</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::StaticFileSource>) -> Self {
        self.source = input;
        self
    }
    /// <p>The source of the image static file.</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::StaticFileSource> {
        &self.source
    }
    /// Consumes the builder and constructs a [`ImageStaticFile`](crate::types::ImageStaticFile).
    /// This method will fail if any of the following fields are not set:
    /// - [`static_file_id`](crate::types::builders::ImageStaticFileBuilder::static_file_id)
    pub fn build(self) -> ::std::result::Result<crate::types::ImageStaticFile, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ImageStaticFile {
            static_file_id: self.static_file_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "static_file_id",
                    "static_file_id was not specified but it is required when building ImageStaticFile",
                )
            })?,
            source: self.source,
        })
    }
}
