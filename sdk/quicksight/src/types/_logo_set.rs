// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A set of logos.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LogoSet {
    /// <p>The primary logo.</p>
    pub primary: ::std::option::Option<crate::types::ImageSet>,
    /// <p>The favicon logo.</p>
    pub favicon: ::std::option::Option<crate::types::ImageSet>,
}
impl LogoSet {
    /// <p>The primary logo.</p>
    pub fn primary(&self) -> ::std::option::Option<&crate::types::ImageSet> {
        self.primary.as_ref()
    }
    /// <p>The favicon logo.</p>
    pub fn favicon(&self) -> ::std::option::Option<&crate::types::ImageSet> {
        self.favicon.as_ref()
    }
}
impl LogoSet {
    /// Creates a new builder-style object to manufacture [`LogoSet`](crate::types::LogoSet).
    pub fn builder() -> crate::types::builders::LogoSetBuilder {
        crate::types::builders::LogoSetBuilder::default()
    }
}

/// A builder for [`LogoSet`](crate::types::LogoSet).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LogoSetBuilder {
    pub(crate) primary: ::std::option::Option<crate::types::ImageSet>,
    pub(crate) favicon: ::std::option::Option<crate::types::ImageSet>,
}
impl LogoSetBuilder {
    /// <p>The primary logo.</p>
    /// This field is required.
    pub fn primary(mut self, input: crate::types::ImageSet) -> Self {
        self.primary = ::std::option::Option::Some(input);
        self
    }
    /// <p>The primary logo.</p>
    pub fn set_primary(mut self, input: ::std::option::Option<crate::types::ImageSet>) -> Self {
        self.primary = input;
        self
    }
    /// <p>The primary logo.</p>
    pub fn get_primary(&self) -> &::std::option::Option<crate::types::ImageSet> {
        &self.primary
    }
    /// <p>The favicon logo.</p>
    pub fn favicon(mut self, input: crate::types::ImageSet) -> Self {
        self.favicon = ::std::option::Option::Some(input);
        self
    }
    /// <p>The favicon logo.</p>
    pub fn set_favicon(mut self, input: ::std::option::Option<crate::types::ImageSet>) -> Self {
        self.favicon = input;
        self
    }
    /// <p>The favicon logo.</p>
    pub fn get_favicon(&self) -> &::std::option::Option<crate::types::ImageSet> {
        &self.favicon
    }
    /// Consumes the builder and constructs a [`LogoSet`](crate::types::LogoSet).
    pub fn build(self) -> crate::types::LogoSet {
        crate::types::LogoSet {
            primary: self.primary,
            favicon: self.favicon,
        }
    }
}
