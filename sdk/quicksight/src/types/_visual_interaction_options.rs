// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The general visual interactions setup for visual publish options</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VisualInteractionOptions {
    /// <p>The on-visual menu options for a visual.</p>
    pub visual_menu_option: ::std::option::Option<crate::types::VisualMenuOption>,
    /// <p>The context menu options for a visual.</p>
    pub context_menu_option: ::std::option::Option<crate::types::ContextMenuOption>,
}
impl VisualInteractionOptions {
    /// <p>The on-visual menu options for a visual.</p>
    pub fn visual_menu_option(&self) -> ::std::option::Option<&crate::types::VisualMenuOption> {
        self.visual_menu_option.as_ref()
    }
    /// <p>The context menu options for a visual.</p>
    pub fn context_menu_option(&self) -> ::std::option::Option<&crate::types::ContextMenuOption> {
        self.context_menu_option.as_ref()
    }
}
impl VisualInteractionOptions {
    /// Creates a new builder-style object to manufacture [`VisualInteractionOptions`](crate::types::VisualInteractionOptions).
    pub fn builder() -> crate::types::builders::VisualInteractionOptionsBuilder {
        crate::types::builders::VisualInteractionOptionsBuilder::default()
    }
}

/// A builder for [`VisualInteractionOptions`](crate::types::VisualInteractionOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VisualInteractionOptionsBuilder {
    pub(crate) visual_menu_option: ::std::option::Option<crate::types::VisualMenuOption>,
    pub(crate) context_menu_option: ::std::option::Option<crate::types::ContextMenuOption>,
}
impl VisualInteractionOptionsBuilder {
    /// <p>The on-visual menu options for a visual.</p>
    pub fn visual_menu_option(mut self, input: crate::types::VisualMenuOption) -> Self {
        self.visual_menu_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>The on-visual menu options for a visual.</p>
    pub fn set_visual_menu_option(mut self, input: ::std::option::Option<crate::types::VisualMenuOption>) -> Self {
        self.visual_menu_option = input;
        self
    }
    /// <p>The on-visual menu options for a visual.</p>
    pub fn get_visual_menu_option(&self) -> &::std::option::Option<crate::types::VisualMenuOption> {
        &self.visual_menu_option
    }
    /// <p>The context menu options for a visual.</p>
    pub fn context_menu_option(mut self, input: crate::types::ContextMenuOption) -> Self {
        self.context_menu_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>The context menu options for a visual.</p>
    pub fn set_context_menu_option(mut self, input: ::std::option::Option<crate::types::ContextMenuOption>) -> Self {
        self.context_menu_option = input;
        self
    }
    /// <p>The context menu options for a visual.</p>
    pub fn get_context_menu_option(&self) -> &::std::option::Option<crate::types::ContextMenuOption> {
        &self.context_menu_option
    }
    /// Consumes the builder and constructs a [`VisualInteractionOptions`](crate::types::VisualInteractionOptions).
    pub fn build(self) -> crate::types::VisualInteractionOptions {
        crate::types::VisualInteractionOptions {
            visual_menu_option: self.visual_menu_option,
            context_menu_option: self.context_menu_option,
        }
    }
}
