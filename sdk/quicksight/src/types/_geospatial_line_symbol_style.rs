// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The symbol style for a line layer.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeospatialLineSymbolStyle {
    /// <p>The color and opacity values for the fill color.</p>
    pub fill_color: ::std::option::Option<crate::types::GeospatialColor>,
    /// <p>The width value for a line.</p>
    pub line_width: ::std::option::Option<crate::types::GeospatialLineWidth>,
}
impl GeospatialLineSymbolStyle {
    /// <p>The color and opacity values for the fill color.</p>
    pub fn fill_color(&self) -> ::std::option::Option<&crate::types::GeospatialColor> {
        self.fill_color.as_ref()
    }
    /// <p>The width value for a line.</p>
    pub fn line_width(&self) -> ::std::option::Option<&crate::types::GeospatialLineWidth> {
        self.line_width.as_ref()
    }
}
impl GeospatialLineSymbolStyle {
    /// Creates a new builder-style object to manufacture [`GeospatialLineSymbolStyle`](crate::types::GeospatialLineSymbolStyle).
    pub fn builder() -> crate::types::builders::GeospatialLineSymbolStyleBuilder {
        crate::types::builders::GeospatialLineSymbolStyleBuilder::default()
    }
}

/// A builder for [`GeospatialLineSymbolStyle`](crate::types::GeospatialLineSymbolStyle).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GeospatialLineSymbolStyleBuilder {
    pub(crate) fill_color: ::std::option::Option<crate::types::GeospatialColor>,
    pub(crate) line_width: ::std::option::Option<crate::types::GeospatialLineWidth>,
}
impl GeospatialLineSymbolStyleBuilder {
    /// <p>The color and opacity values for the fill color.</p>
    pub fn fill_color(mut self, input: crate::types::GeospatialColor) -> Self {
        self.fill_color = ::std::option::Option::Some(input);
        self
    }
    /// <p>The color and opacity values for the fill color.</p>
    pub fn set_fill_color(mut self, input: ::std::option::Option<crate::types::GeospatialColor>) -> Self {
        self.fill_color = input;
        self
    }
    /// <p>The color and opacity values for the fill color.</p>
    pub fn get_fill_color(&self) -> &::std::option::Option<crate::types::GeospatialColor> {
        &self.fill_color
    }
    /// <p>The width value for a line.</p>
    pub fn line_width(mut self, input: crate::types::GeospatialLineWidth) -> Self {
        self.line_width = ::std::option::Option::Some(input);
        self
    }
    /// <p>The width value for a line.</p>
    pub fn set_line_width(mut self, input: ::std::option::Option<crate::types::GeospatialLineWidth>) -> Self {
        self.line_width = input;
        self
    }
    /// <p>The width value for a line.</p>
    pub fn get_line_width(&self) -> &::std::option::Option<crate::types::GeospatialLineWidth> {
        &self.line_width
    }
    /// Consumes the builder and constructs a [`GeospatialLineSymbolStyle`](crate::types::GeospatialLineSymbolStyle).
    pub fn build(self) -> crate::types::GeospatialLineSymbolStyle {
        crate::types::GeospatialLineSymbolStyle {
            fill_color: self.fill_color,
            line_width: self.line_width,
        }
    }
}
