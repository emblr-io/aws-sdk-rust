// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The plugin visual configuration. This includes the field wells, sorting options, and persisted options of the plugin visual.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PluginVisualConfiguration {
    /// <p>The field wells configuration of the plugin visual.</p>
    pub field_wells: ::std::option::Option<::std::vec::Vec<crate::types::PluginVisualFieldWell>>,
    /// <p>The persisted properties of the plugin visual.</p>
    pub visual_options: ::std::option::Option<crate::types::PluginVisualOptions>,
    /// <p>The sort configuration of the plugin visual.</p>
    pub sort_configuration: ::std::option::Option<crate::types::PluginVisualSortConfiguration>,
}
impl PluginVisualConfiguration {
    /// <p>The field wells configuration of the plugin visual.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.field_wells.is_none()`.
    pub fn field_wells(&self) -> &[crate::types::PluginVisualFieldWell] {
        self.field_wells.as_deref().unwrap_or_default()
    }
    /// <p>The persisted properties of the plugin visual.</p>
    pub fn visual_options(&self) -> ::std::option::Option<&crate::types::PluginVisualOptions> {
        self.visual_options.as_ref()
    }
    /// <p>The sort configuration of the plugin visual.</p>
    pub fn sort_configuration(&self) -> ::std::option::Option<&crate::types::PluginVisualSortConfiguration> {
        self.sort_configuration.as_ref()
    }
}
impl PluginVisualConfiguration {
    /// Creates a new builder-style object to manufacture [`PluginVisualConfiguration`](crate::types::PluginVisualConfiguration).
    pub fn builder() -> crate::types::builders::PluginVisualConfigurationBuilder {
        crate::types::builders::PluginVisualConfigurationBuilder::default()
    }
}

/// A builder for [`PluginVisualConfiguration`](crate::types::PluginVisualConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PluginVisualConfigurationBuilder {
    pub(crate) field_wells: ::std::option::Option<::std::vec::Vec<crate::types::PluginVisualFieldWell>>,
    pub(crate) visual_options: ::std::option::Option<crate::types::PluginVisualOptions>,
    pub(crate) sort_configuration: ::std::option::Option<crate::types::PluginVisualSortConfiguration>,
}
impl PluginVisualConfigurationBuilder {
    /// Appends an item to `field_wells`.
    ///
    /// To override the contents of this collection use [`set_field_wells`](Self::set_field_wells).
    ///
    /// <p>The field wells configuration of the plugin visual.</p>
    pub fn field_wells(mut self, input: crate::types::PluginVisualFieldWell) -> Self {
        let mut v = self.field_wells.unwrap_or_default();
        v.push(input);
        self.field_wells = ::std::option::Option::Some(v);
        self
    }
    /// <p>The field wells configuration of the plugin visual.</p>
    pub fn set_field_wells(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PluginVisualFieldWell>>) -> Self {
        self.field_wells = input;
        self
    }
    /// <p>The field wells configuration of the plugin visual.</p>
    pub fn get_field_wells(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PluginVisualFieldWell>> {
        &self.field_wells
    }
    /// <p>The persisted properties of the plugin visual.</p>
    pub fn visual_options(mut self, input: crate::types::PluginVisualOptions) -> Self {
        self.visual_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The persisted properties of the plugin visual.</p>
    pub fn set_visual_options(mut self, input: ::std::option::Option<crate::types::PluginVisualOptions>) -> Self {
        self.visual_options = input;
        self
    }
    /// <p>The persisted properties of the plugin visual.</p>
    pub fn get_visual_options(&self) -> &::std::option::Option<crate::types::PluginVisualOptions> {
        &self.visual_options
    }
    /// <p>The sort configuration of the plugin visual.</p>
    pub fn sort_configuration(mut self, input: crate::types::PluginVisualSortConfiguration) -> Self {
        self.sort_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sort configuration of the plugin visual.</p>
    pub fn set_sort_configuration(mut self, input: ::std::option::Option<crate::types::PluginVisualSortConfiguration>) -> Self {
        self.sort_configuration = input;
        self
    }
    /// <p>The sort configuration of the plugin visual.</p>
    pub fn get_sort_configuration(&self) -> &::std::option::Option<crate::types::PluginVisualSortConfiguration> {
        &self.sort_configuration
    }
    /// Consumes the builder and constructs a [`PluginVisualConfiguration`](crate::types::PluginVisualConfiguration).
    pub fn build(self) -> crate::types::PluginVisualConfiguration {
        crate::types::PluginVisualConfiguration {
            field_wells: self.field_wells,
            visual_options: self.visual_options,
            sort_configuration: self.sort_configuration,
        }
    }
}
