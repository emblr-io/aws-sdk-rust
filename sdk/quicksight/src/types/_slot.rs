// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition for the slot.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Slot {
    /// <p>The slot ID of the slot.</p>
    pub slot_id: ::std::option::Option<::std::string::String>,
    /// <p>The visual ID for the slot.</p>
    pub visual_id: ::std::option::Option<::std::string::String>,
}
impl Slot {
    /// <p>The slot ID of the slot.</p>
    pub fn slot_id(&self) -> ::std::option::Option<&str> {
        self.slot_id.as_deref()
    }
    /// <p>The visual ID for the slot.</p>
    pub fn visual_id(&self) -> ::std::option::Option<&str> {
        self.visual_id.as_deref()
    }
}
impl Slot {
    /// Creates a new builder-style object to manufacture [`Slot`](crate::types::Slot).
    pub fn builder() -> crate::types::builders::SlotBuilder {
        crate::types::builders::SlotBuilder::default()
    }
}

/// A builder for [`Slot`](crate::types::Slot).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SlotBuilder {
    pub(crate) slot_id: ::std::option::Option<::std::string::String>,
    pub(crate) visual_id: ::std::option::Option<::std::string::String>,
}
impl SlotBuilder {
    /// <p>The slot ID of the slot.</p>
    pub fn slot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The slot ID of the slot.</p>
    pub fn set_slot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slot_id = input;
        self
    }
    /// <p>The slot ID of the slot.</p>
    pub fn get_slot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.slot_id
    }
    /// <p>The visual ID for the slot.</p>
    pub fn visual_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.visual_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The visual ID for the slot.</p>
    pub fn set_visual_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.visual_id = input;
        self
    }
    /// <p>The visual ID for the slot.</p>
    pub fn get_visual_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.visual_id
    }
    /// Consumes the builder and constructs a [`Slot`](crate::types::Slot).
    pub fn build(self) -> crate::types::Slot {
        crate::types::Slot {
            slot_id: self.slot_id,
            visual_id: self.visual_id,
        }
    }
}
