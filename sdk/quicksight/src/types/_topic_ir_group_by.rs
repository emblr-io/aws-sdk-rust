// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition for a <code>TopicIRGroupBy</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TopicIrGroupBy {
    /// <p>The field name for the <code>TopicIRGroupBy</code>.</p>
    pub field_name: ::std::option::Option<crate::types::Identifier>,
    /// <p>The time granularity for the <code>TopicIRGroupBy</code>.</p>
    pub time_granularity: ::std::option::Option<crate::types::TopicTimeGranularity>,
    /// <p>The sort for the <code>TopicIRGroupBy</code>.</p>
    pub sort: ::std::option::Option<crate::types::TopicSortClause>,
    /// <p>The display format for the <code>TopicIRGroupBy</code>.</p>
    pub display_format: ::std::option::Option<crate::types::DisplayFormat>,
    /// <p>A structure that represents additional options for display formatting.</p>
    pub display_format_options: ::std::option::Option<crate::types::DisplayFormatOptions>,
    /// <p>The named entity for the <code>TopicIRGroupBy</code>.</p>
    pub named_entity: ::std::option::Option<crate::types::NamedEntityRef>,
}
impl TopicIrGroupBy {
    /// <p>The field name for the <code>TopicIRGroupBy</code>.</p>
    pub fn field_name(&self) -> ::std::option::Option<&crate::types::Identifier> {
        self.field_name.as_ref()
    }
    /// <p>The time granularity for the <code>TopicIRGroupBy</code>.</p>
    pub fn time_granularity(&self) -> ::std::option::Option<&crate::types::TopicTimeGranularity> {
        self.time_granularity.as_ref()
    }
    /// <p>The sort for the <code>TopicIRGroupBy</code>.</p>
    pub fn sort(&self) -> ::std::option::Option<&crate::types::TopicSortClause> {
        self.sort.as_ref()
    }
    /// <p>The display format for the <code>TopicIRGroupBy</code>.</p>
    pub fn display_format(&self) -> ::std::option::Option<&crate::types::DisplayFormat> {
        self.display_format.as_ref()
    }
    /// <p>A structure that represents additional options for display formatting.</p>
    pub fn display_format_options(&self) -> ::std::option::Option<&crate::types::DisplayFormatOptions> {
        self.display_format_options.as_ref()
    }
    /// <p>The named entity for the <code>TopicIRGroupBy</code>.</p>
    pub fn named_entity(&self) -> ::std::option::Option<&crate::types::NamedEntityRef> {
        self.named_entity.as_ref()
    }
}
impl TopicIrGroupBy {
    /// Creates a new builder-style object to manufacture [`TopicIrGroupBy`](crate::types::TopicIrGroupBy).
    pub fn builder() -> crate::types::builders::TopicIrGroupByBuilder {
        crate::types::builders::TopicIrGroupByBuilder::default()
    }
}

/// A builder for [`TopicIrGroupBy`](crate::types::TopicIrGroupBy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TopicIrGroupByBuilder {
    pub(crate) field_name: ::std::option::Option<crate::types::Identifier>,
    pub(crate) time_granularity: ::std::option::Option<crate::types::TopicTimeGranularity>,
    pub(crate) sort: ::std::option::Option<crate::types::TopicSortClause>,
    pub(crate) display_format: ::std::option::Option<crate::types::DisplayFormat>,
    pub(crate) display_format_options: ::std::option::Option<crate::types::DisplayFormatOptions>,
    pub(crate) named_entity: ::std::option::Option<crate::types::NamedEntityRef>,
}
impl TopicIrGroupByBuilder {
    /// <p>The field name for the <code>TopicIRGroupBy</code>.</p>
    pub fn field_name(mut self, input: crate::types::Identifier) -> Self {
        self.field_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The field name for the <code>TopicIRGroupBy</code>.</p>
    pub fn set_field_name(mut self, input: ::std::option::Option<crate::types::Identifier>) -> Self {
        self.field_name = input;
        self
    }
    /// <p>The field name for the <code>TopicIRGroupBy</code>.</p>
    pub fn get_field_name(&self) -> &::std::option::Option<crate::types::Identifier> {
        &self.field_name
    }
    /// <p>The time granularity for the <code>TopicIRGroupBy</code>.</p>
    pub fn time_granularity(mut self, input: crate::types::TopicTimeGranularity) -> Self {
        self.time_granularity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time granularity for the <code>TopicIRGroupBy</code>.</p>
    pub fn set_time_granularity(mut self, input: ::std::option::Option<crate::types::TopicTimeGranularity>) -> Self {
        self.time_granularity = input;
        self
    }
    /// <p>The time granularity for the <code>TopicIRGroupBy</code>.</p>
    pub fn get_time_granularity(&self) -> &::std::option::Option<crate::types::TopicTimeGranularity> {
        &self.time_granularity
    }
    /// <p>The sort for the <code>TopicIRGroupBy</code>.</p>
    pub fn sort(mut self, input: crate::types::TopicSortClause) -> Self {
        self.sort = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sort for the <code>TopicIRGroupBy</code>.</p>
    pub fn set_sort(mut self, input: ::std::option::Option<crate::types::TopicSortClause>) -> Self {
        self.sort = input;
        self
    }
    /// <p>The sort for the <code>TopicIRGroupBy</code>.</p>
    pub fn get_sort(&self) -> &::std::option::Option<crate::types::TopicSortClause> {
        &self.sort
    }
    /// <p>The display format for the <code>TopicIRGroupBy</code>.</p>
    pub fn display_format(mut self, input: crate::types::DisplayFormat) -> Self {
        self.display_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The display format for the <code>TopicIRGroupBy</code>.</p>
    pub fn set_display_format(mut self, input: ::std::option::Option<crate::types::DisplayFormat>) -> Self {
        self.display_format = input;
        self
    }
    /// <p>The display format for the <code>TopicIRGroupBy</code>.</p>
    pub fn get_display_format(&self) -> &::std::option::Option<crate::types::DisplayFormat> {
        &self.display_format
    }
    /// <p>A structure that represents additional options for display formatting.</p>
    pub fn display_format_options(mut self, input: crate::types::DisplayFormatOptions) -> Self {
        self.display_format_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that represents additional options for display formatting.</p>
    pub fn set_display_format_options(mut self, input: ::std::option::Option<crate::types::DisplayFormatOptions>) -> Self {
        self.display_format_options = input;
        self
    }
    /// <p>A structure that represents additional options for display formatting.</p>
    pub fn get_display_format_options(&self) -> &::std::option::Option<crate::types::DisplayFormatOptions> {
        &self.display_format_options
    }
    /// <p>The named entity for the <code>TopicIRGroupBy</code>.</p>
    pub fn named_entity(mut self, input: crate::types::NamedEntityRef) -> Self {
        self.named_entity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The named entity for the <code>TopicIRGroupBy</code>.</p>
    pub fn set_named_entity(mut self, input: ::std::option::Option<crate::types::NamedEntityRef>) -> Self {
        self.named_entity = input;
        self
    }
    /// <p>The named entity for the <code>TopicIRGroupBy</code>.</p>
    pub fn get_named_entity(&self) -> &::std::option::Option<crate::types::NamedEntityRef> {
        &self.named_entity
    }
    /// Consumes the builder and constructs a [`TopicIrGroupBy`](crate::types::TopicIrGroupBy).
    pub fn build(self) -> crate::types::TopicIrGroupBy {
        crate::types::TopicIrGroupBy {
            field_name: self.field_name,
            time_granularity: self.time_granularity,
            sort: self.sort,
            display_format: self.display_format,
            display_format_options: self.display_format_options,
            named_entity: self.named_entity,
        }
    }
}
