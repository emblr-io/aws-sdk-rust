// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition of an <code>AggregationPartitionBy</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AggregationPartitionBy {
    /// <p>The field Name for an <code>AggregationPartitionBy</code>.</p>
    pub field_name: ::std::option::Option<::std::string::String>,
    /// <p>The <code>TimeGranularity</code> for an <code>AggregationPartitionBy</code>.</p>
    pub time_granularity: ::std::option::Option<crate::types::TimeGranularity>,
}
impl AggregationPartitionBy {
    /// <p>The field Name for an <code>AggregationPartitionBy</code>.</p>
    pub fn field_name(&self) -> ::std::option::Option<&str> {
        self.field_name.as_deref()
    }
    /// <p>The <code>TimeGranularity</code> for an <code>AggregationPartitionBy</code>.</p>
    pub fn time_granularity(&self) -> ::std::option::Option<&crate::types::TimeGranularity> {
        self.time_granularity.as_ref()
    }
}
impl AggregationPartitionBy {
    /// Creates a new builder-style object to manufacture [`AggregationPartitionBy`](crate::types::AggregationPartitionBy).
    pub fn builder() -> crate::types::builders::AggregationPartitionByBuilder {
        crate::types::builders::AggregationPartitionByBuilder::default()
    }
}

/// A builder for [`AggregationPartitionBy`](crate::types::AggregationPartitionBy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AggregationPartitionByBuilder {
    pub(crate) field_name: ::std::option::Option<::std::string::String>,
    pub(crate) time_granularity: ::std::option::Option<crate::types::TimeGranularity>,
}
impl AggregationPartitionByBuilder {
    /// <p>The field Name for an <code>AggregationPartitionBy</code>.</p>
    pub fn field_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The field Name for an <code>AggregationPartitionBy</code>.</p>
    pub fn set_field_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_name = input;
        self
    }
    /// <p>The field Name for an <code>AggregationPartitionBy</code>.</p>
    pub fn get_field_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_name
    }
    /// <p>The <code>TimeGranularity</code> for an <code>AggregationPartitionBy</code>.</p>
    pub fn time_granularity(mut self, input: crate::types::TimeGranularity) -> Self {
        self.time_granularity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>TimeGranularity</code> for an <code>AggregationPartitionBy</code>.</p>
    pub fn set_time_granularity(mut self, input: ::std::option::Option<crate::types::TimeGranularity>) -> Self {
        self.time_granularity = input;
        self
    }
    /// <p>The <code>TimeGranularity</code> for an <code>AggregationPartitionBy</code>.</p>
    pub fn get_time_granularity(&self) -> &::std::option::Option<crate::types::TimeGranularity> {
        &self.time_granularity
    }
    /// Consumes the builder and constructs a [`AggregationPartitionBy`](crate::types::AggregationPartitionBy).
    pub fn build(self) -> crate::types::AggregationPartitionBy {
        crate::types::AggregationPartitionBy {
            field_name: self.field_name,
            time_granularity: self.time_granularity,
        }
    }
}
