// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition for a <code>TopicIRMetric</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TopicIrMetric {
    /// <p>The metric ID for the <code>TopicIRMetric</code>.</p>
    pub metric_id: ::std::option::Option<crate::types::Identifier>,
    /// <p>The function for the <code>TopicIRMetric</code>.</p>
    pub function: ::std::option::Option<crate::types::AggFunction>,
    /// <p>The operands for the <code>TopicIRMetric</code>.</p>
    pub operands: ::std::option::Option<::std::vec::Vec<crate::types::Identifier>>,
    /// <p>The comparison method for the <code>TopicIRMetric</code>.</p>
    pub comparison_method: ::std::option::Option<crate::types::TopicIrComparisonMethod>,
    /// <p>The expression for the <code>TopicIRMetric</code>.</p>
    pub expression: ::std::option::Option<::std::string::String>,
    /// <p>The calculated field references for the <code>TopicIRMetric</code>.</p>
    pub calculated_field_references: ::std::option::Option<::std::vec::Vec<crate::types::Identifier>>,
    /// <p>The display format for the <code>TopicIRMetric</code>.</p>
    pub display_format: ::std::option::Option<crate::types::DisplayFormat>,
    /// <p>A structure that represents additional options for display formatting.</p>
    pub display_format_options: ::std::option::Option<crate::types::DisplayFormatOptions>,
    /// <p>The named entity for the <code>TopicIRMetric</code>.</p>
    pub named_entity: ::std::option::Option<crate::types::NamedEntityRef>,
}
impl TopicIrMetric {
    /// <p>The metric ID for the <code>TopicIRMetric</code>.</p>
    pub fn metric_id(&self) -> ::std::option::Option<&crate::types::Identifier> {
        self.metric_id.as_ref()
    }
    /// <p>The function for the <code>TopicIRMetric</code>.</p>
    pub fn function(&self) -> ::std::option::Option<&crate::types::AggFunction> {
        self.function.as_ref()
    }
    /// <p>The operands for the <code>TopicIRMetric</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.operands.is_none()`.
    pub fn operands(&self) -> &[crate::types::Identifier] {
        self.operands.as_deref().unwrap_or_default()
    }
    /// <p>The comparison method for the <code>TopicIRMetric</code>.</p>
    pub fn comparison_method(&self) -> ::std::option::Option<&crate::types::TopicIrComparisonMethod> {
        self.comparison_method.as_ref()
    }
    /// <p>The expression for the <code>TopicIRMetric</code>.</p>
    pub fn expression(&self) -> ::std::option::Option<&str> {
        self.expression.as_deref()
    }
    /// <p>The calculated field references for the <code>TopicIRMetric</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.calculated_field_references.is_none()`.
    pub fn calculated_field_references(&self) -> &[crate::types::Identifier] {
        self.calculated_field_references.as_deref().unwrap_or_default()
    }
    /// <p>The display format for the <code>TopicIRMetric</code>.</p>
    pub fn display_format(&self) -> ::std::option::Option<&crate::types::DisplayFormat> {
        self.display_format.as_ref()
    }
    /// <p>A structure that represents additional options for display formatting.</p>
    pub fn display_format_options(&self) -> ::std::option::Option<&crate::types::DisplayFormatOptions> {
        self.display_format_options.as_ref()
    }
    /// <p>The named entity for the <code>TopicIRMetric</code>.</p>
    pub fn named_entity(&self) -> ::std::option::Option<&crate::types::NamedEntityRef> {
        self.named_entity.as_ref()
    }
}
impl ::std::fmt::Debug for TopicIrMetric {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TopicIrMetric");
        formatter.field("metric_id", &self.metric_id);
        formatter.field("function", &self.function);
        formatter.field("operands", &self.operands);
        formatter.field("comparison_method", &self.comparison_method);
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.field("calculated_field_references", &self.calculated_field_references);
        formatter.field("display_format", &self.display_format);
        formatter.field("display_format_options", &self.display_format_options);
        formatter.field("named_entity", &self.named_entity);
        formatter.finish()
    }
}
impl TopicIrMetric {
    /// Creates a new builder-style object to manufacture [`TopicIrMetric`](crate::types::TopicIrMetric).
    pub fn builder() -> crate::types::builders::TopicIrMetricBuilder {
        crate::types::builders::TopicIrMetricBuilder::default()
    }
}

/// A builder for [`TopicIrMetric`](crate::types::TopicIrMetric).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct TopicIrMetricBuilder {
    pub(crate) metric_id: ::std::option::Option<crate::types::Identifier>,
    pub(crate) function: ::std::option::Option<crate::types::AggFunction>,
    pub(crate) operands: ::std::option::Option<::std::vec::Vec<crate::types::Identifier>>,
    pub(crate) comparison_method: ::std::option::Option<crate::types::TopicIrComparisonMethod>,
    pub(crate) expression: ::std::option::Option<::std::string::String>,
    pub(crate) calculated_field_references: ::std::option::Option<::std::vec::Vec<crate::types::Identifier>>,
    pub(crate) display_format: ::std::option::Option<crate::types::DisplayFormat>,
    pub(crate) display_format_options: ::std::option::Option<crate::types::DisplayFormatOptions>,
    pub(crate) named_entity: ::std::option::Option<crate::types::NamedEntityRef>,
}
impl TopicIrMetricBuilder {
    /// <p>The metric ID for the <code>TopicIRMetric</code>.</p>
    pub fn metric_id(mut self, input: crate::types::Identifier) -> Self {
        self.metric_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metric ID for the <code>TopicIRMetric</code>.</p>
    pub fn set_metric_id(mut self, input: ::std::option::Option<crate::types::Identifier>) -> Self {
        self.metric_id = input;
        self
    }
    /// <p>The metric ID for the <code>TopicIRMetric</code>.</p>
    pub fn get_metric_id(&self) -> &::std::option::Option<crate::types::Identifier> {
        &self.metric_id
    }
    /// <p>The function for the <code>TopicIRMetric</code>.</p>
    pub fn function(mut self, input: crate::types::AggFunction) -> Self {
        self.function = ::std::option::Option::Some(input);
        self
    }
    /// <p>The function for the <code>TopicIRMetric</code>.</p>
    pub fn set_function(mut self, input: ::std::option::Option<crate::types::AggFunction>) -> Self {
        self.function = input;
        self
    }
    /// <p>The function for the <code>TopicIRMetric</code>.</p>
    pub fn get_function(&self) -> &::std::option::Option<crate::types::AggFunction> {
        &self.function
    }
    /// Appends an item to `operands`.
    ///
    /// To override the contents of this collection use [`set_operands`](Self::set_operands).
    ///
    /// <p>The operands for the <code>TopicIRMetric</code>.</p>
    pub fn operands(mut self, input: crate::types::Identifier) -> Self {
        let mut v = self.operands.unwrap_or_default();
        v.push(input);
        self.operands = ::std::option::Option::Some(v);
        self
    }
    /// <p>The operands for the <code>TopicIRMetric</code>.</p>
    pub fn set_operands(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Identifier>>) -> Self {
        self.operands = input;
        self
    }
    /// <p>The operands for the <code>TopicIRMetric</code>.</p>
    pub fn get_operands(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Identifier>> {
        &self.operands
    }
    /// <p>The comparison method for the <code>TopicIRMetric</code>.</p>
    pub fn comparison_method(mut self, input: crate::types::TopicIrComparisonMethod) -> Self {
        self.comparison_method = ::std::option::Option::Some(input);
        self
    }
    /// <p>The comparison method for the <code>TopicIRMetric</code>.</p>
    pub fn set_comparison_method(mut self, input: ::std::option::Option<crate::types::TopicIrComparisonMethod>) -> Self {
        self.comparison_method = input;
        self
    }
    /// <p>The comparison method for the <code>TopicIRMetric</code>.</p>
    pub fn get_comparison_method(&self) -> &::std::option::Option<crate::types::TopicIrComparisonMethod> {
        &self.comparison_method
    }
    /// <p>The expression for the <code>TopicIRMetric</code>.</p>
    pub fn expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The expression for the <code>TopicIRMetric</code>.</p>
    pub fn set_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expression = input;
        self
    }
    /// <p>The expression for the <code>TopicIRMetric</code>.</p>
    pub fn get_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.expression
    }
    /// Appends an item to `calculated_field_references`.
    ///
    /// To override the contents of this collection use [`set_calculated_field_references`](Self::set_calculated_field_references).
    ///
    /// <p>The calculated field references for the <code>TopicIRMetric</code>.</p>
    pub fn calculated_field_references(mut self, input: crate::types::Identifier) -> Self {
        let mut v = self.calculated_field_references.unwrap_or_default();
        v.push(input);
        self.calculated_field_references = ::std::option::Option::Some(v);
        self
    }
    /// <p>The calculated field references for the <code>TopicIRMetric</code>.</p>
    pub fn set_calculated_field_references(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Identifier>>) -> Self {
        self.calculated_field_references = input;
        self
    }
    /// <p>The calculated field references for the <code>TopicIRMetric</code>.</p>
    pub fn get_calculated_field_references(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Identifier>> {
        &self.calculated_field_references
    }
    /// <p>The display format for the <code>TopicIRMetric</code>.</p>
    pub fn display_format(mut self, input: crate::types::DisplayFormat) -> Self {
        self.display_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The display format for the <code>TopicIRMetric</code>.</p>
    pub fn set_display_format(mut self, input: ::std::option::Option<crate::types::DisplayFormat>) -> Self {
        self.display_format = input;
        self
    }
    /// <p>The display format for the <code>TopicIRMetric</code>.</p>
    pub fn get_display_format(&self) -> &::std::option::Option<crate::types::DisplayFormat> {
        &self.display_format
    }
    /// <p>A structure that represents additional options for display formatting.</p>
    pub fn display_format_options(mut self, input: crate::types::DisplayFormatOptions) -> Self {
        self.display_format_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that represents additional options for display formatting.</p>
    pub fn set_display_format_options(mut self, input: ::std::option::Option<crate::types::DisplayFormatOptions>) -> Self {
        self.display_format_options = input;
        self
    }
    /// <p>A structure that represents additional options for display formatting.</p>
    pub fn get_display_format_options(&self) -> &::std::option::Option<crate::types::DisplayFormatOptions> {
        &self.display_format_options
    }
    /// <p>The named entity for the <code>TopicIRMetric</code>.</p>
    pub fn named_entity(mut self, input: crate::types::NamedEntityRef) -> Self {
        self.named_entity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The named entity for the <code>TopicIRMetric</code>.</p>
    pub fn set_named_entity(mut self, input: ::std::option::Option<crate::types::NamedEntityRef>) -> Self {
        self.named_entity = input;
        self
    }
    /// <p>The named entity for the <code>TopicIRMetric</code>.</p>
    pub fn get_named_entity(&self) -> &::std::option::Option<crate::types::NamedEntityRef> {
        &self.named_entity
    }
    /// Consumes the builder and constructs a [`TopicIrMetric`](crate::types::TopicIrMetric).
    pub fn build(self) -> crate::types::TopicIrMetric {
        crate::types::TopicIrMetric {
            metric_id: self.metric_id,
            function: self.function,
            operands: self.operands,
            comparison_method: self.comparison_method,
            expression: self.expression,
            calculated_field_references: self.calculated_field_references,
            display_format: self.display_format,
            display_format_options: self.display_format_options,
            named_entity: self.named_entity,
        }
    }
}
impl ::std::fmt::Debug for TopicIrMetricBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TopicIrMetricBuilder");
        formatter.field("metric_id", &self.metric_id);
        formatter.field("function", &self.function);
        formatter.field("operands", &self.operands);
        formatter.field("comparison_method", &self.comparison_method);
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.field("calculated_field_references", &self.calculated_field_references);
        formatter.field("display_format", &self.display_format);
        formatter.field("display_format_options", &self.display_format_options);
        formatter.field("named_entity", &self.named_entity);
        formatter.finish()
    }
}
