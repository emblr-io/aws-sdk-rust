// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The color configuration for individual groups within a waterfall visual.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WaterfallChartGroupColorConfiguration {
    /// <p>Defines the color for the positive bars of a waterfall chart.</p>
    pub positive_bar_color: ::std::option::Option<::std::string::String>,
    /// <p>Defines the color for the negative bars of a waterfall chart.</p>
    pub negative_bar_color: ::std::option::Option<::std::string::String>,
    /// <p>Defines the color for the total bars of a waterfall chart.</p>
    pub total_bar_color: ::std::option::Option<::std::string::String>,
}
impl WaterfallChartGroupColorConfiguration {
    /// <p>Defines the color for the positive bars of a waterfall chart.</p>
    pub fn positive_bar_color(&self) -> ::std::option::Option<&str> {
        self.positive_bar_color.as_deref()
    }
    /// <p>Defines the color for the negative bars of a waterfall chart.</p>
    pub fn negative_bar_color(&self) -> ::std::option::Option<&str> {
        self.negative_bar_color.as_deref()
    }
    /// <p>Defines the color for the total bars of a waterfall chart.</p>
    pub fn total_bar_color(&self) -> ::std::option::Option<&str> {
        self.total_bar_color.as_deref()
    }
}
impl WaterfallChartGroupColorConfiguration {
    /// Creates a new builder-style object to manufacture [`WaterfallChartGroupColorConfiguration`](crate::types::WaterfallChartGroupColorConfiguration).
    pub fn builder() -> crate::types::builders::WaterfallChartGroupColorConfigurationBuilder {
        crate::types::builders::WaterfallChartGroupColorConfigurationBuilder::default()
    }
}

/// A builder for [`WaterfallChartGroupColorConfiguration`](crate::types::WaterfallChartGroupColorConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WaterfallChartGroupColorConfigurationBuilder {
    pub(crate) positive_bar_color: ::std::option::Option<::std::string::String>,
    pub(crate) negative_bar_color: ::std::option::Option<::std::string::String>,
    pub(crate) total_bar_color: ::std::option::Option<::std::string::String>,
}
impl WaterfallChartGroupColorConfigurationBuilder {
    /// <p>Defines the color for the positive bars of a waterfall chart.</p>
    pub fn positive_bar_color(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.positive_bar_color = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Defines the color for the positive bars of a waterfall chart.</p>
    pub fn set_positive_bar_color(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.positive_bar_color = input;
        self
    }
    /// <p>Defines the color for the positive bars of a waterfall chart.</p>
    pub fn get_positive_bar_color(&self) -> &::std::option::Option<::std::string::String> {
        &self.positive_bar_color
    }
    /// <p>Defines the color for the negative bars of a waterfall chart.</p>
    pub fn negative_bar_color(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.negative_bar_color = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Defines the color for the negative bars of a waterfall chart.</p>
    pub fn set_negative_bar_color(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.negative_bar_color = input;
        self
    }
    /// <p>Defines the color for the negative bars of a waterfall chart.</p>
    pub fn get_negative_bar_color(&self) -> &::std::option::Option<::std::string::String> {
        &self.negative_bar_color
    }
    /// <p>Defines the color for the total bars of a waterfall chart.</p>
    pub fn total_bar_color(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.total_bar_color = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Defines the color for the total bars of a waterfall chart.</p>
    pub fn set_total_bar_color(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.total_bar_color = input;
        self
    }
    /// <p>Defines the color for the total bars of a waterfall chart.</p>
    pub fn get_total_bar_color(&self) -> &::std::option::Option<::std::string::String> {
        &self.total_bar_color
    }
    /// Consumes the builder and constructs a [`WaterfallChartGroupColorConfiguration`](crate::types::WaterfallChartGroupColorConfiguration).
    pub fn build(self) -> crate::types::WaterfallChartGroupColorConfiguration {
        crate::types::WaterfallChartGroupColorConfiguration {
            positive_bar_color: self.positive_bar_color,
            negative_bar_color: self.negative_bar_color,
            total_bar_color: self.total_bar_color,
        }
    }
}
