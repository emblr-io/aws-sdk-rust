// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The operation that is defined by the custom action.</p>
/// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImageCustomActionOperation {
    /// <p>The navigation operation that navigates between different sheets in the same analysis.</p>
    /// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
    pub navigation_operation: ::std::option::Option<crate::types::CustomActionNavigationOperation>,
    /// <p>The URL operation that opens a link to another webpage.</p>
    pub url_operation: ::std::option::Option<crate::types::CustomActionUrlOperation>,
    /// <p>The set parameter operation that sets parameters in custom action.</p>
    pub set_parameters_operation: ::std::option::Option<crate::types::CustomActionSetParametersOperation>,
}
impl ImageCustomActionOperation {
    /// <p>The navigation operation that navigates between different sheets in the same analysis.</p>
    /// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
    pub fn navigation_operation(&self) -> ::std::option::Option<&crate::types::CustomActionNavigationOperation> {
        self.navigation_operation.as_ref()
    }
    /// <p>The URL operation that opens a link to another webpage.</p>
    pub fn url_operation(&self) -> ::std::option::Option<&crate::types::CustomActionUrlOperation> {
        self.url_operation.as_ref()
    }
    /// <p>The set parameter operation that sets parameters in custom action.</p>
    pub fn set_parameters_operation(&self) -> ::std::option::Option<&crate::types::CustomActionSetParametersOperation> {
        self.set_parameters_operation.as_ref()
    }
}
impl ImageCustomActionOperation {
    /// Creates a new builder-style object to manufacture [`ImageCustomActionOperation`](crate::types::ImageCustomActionOperation).
    pub fn builder() -> crate::types::builders::ImageCustomActionOperationBuilder {
        crate::types::builders::ImageCustomActionOperationBuilder::default()
    }
}

/// A builder for [`ImageCustomActionOperation`](crate::types::ImageCustomActionOperation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ImageCustomActionOperationBuilder {
    pub(crate) navigation_operation: ::std::option::Option<crate::types::CustomActionNavigationOperation>,
    pub(crate) url_operation: ::std::option::Option<crate::types::CustomActionUrlOperation>,
    pub(crate) set_parameters_operation: ::std::option::Option<crate::types::CustomActionSetParametersOperation>,
}
impl ImageCustomActionOperationBuilder {
    /// <p>The navigation operation that navigates between different sheets in the same analysis.</p>
    /// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
    pub fn navigation_operation(mut self, input: crate::types::CustomActionNavigationOperation) -> Self {
        self.navigation_operation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The navigation operation that navigates between different sheets in the same analysis.</p>
    /// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
    pub fn set_navigation_operation(mut self, input: ::std::option::Option<crate::types::CustomActionNavigationOperation>) -> Self {
        self.navigation_operation = input;
        self
    }
    /// <p>The navigation operation that navigates between different sheets in the same analysis.</p>
    /// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
    pub fn get_navigation_operation(&self) -> &::std::option::Option<crate::types::CustomActionNavigationOperation> {
        &self.navigation_operation
    }
    /// <p>The URL operation that opens a link to another webpage.</p>
    pub fn url_operation(mut self, input: crate::types::CustomActionUrlOperation) -> Self {
        self.url_operation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The URL operation that opens a link to another webpage.</p>
    pub fn set_url_operation(mut self, input: ::std::option::Option<crate::types::CustomActionUrlOperation>) -> Self {
        self.url_operation = input;
        self
    }
    /// <p>The URL operation that opens a link to another webpage.</p>
    pub fn get_url_operation(&self) -> &::std::option::Option<crate::types::CustomActionUrlOperation> {
        &self.url_operation
    }
    /// <p>The set parameter operation that sets parameters in custom action.</p>
    pub fn set_parameters_operation(mut self, input: crate::types::CustomActionSetParametersOperation) -> Self {
        self.set_parameters_operation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The set parameter operation that sets parameters in custom action.</p>
    pub fn set_set_parameters_operation(mut self, input: ::std::option::Option<crate::types::CustomActionSetParametersOperation>) -> Self {
        self.set_parameters_operation = input;
        self
    }
    /// <p>The set parameter operation that sets parameters in custom action.</p>
    pub fn get_set_parameters_operation(&self) -> &::std::option::Option<crate::types::CustomActionSetParametersOperation> {
        &self.set_parameters_operation
    }
    /// Consumes the builder and constructs a [`ImageCustomActionOperation`](crate::types::ImageCustomActionOperation).
    pub fn build(self) -> crate::types::ImageCustomActionOperation {
        crate::types::ImageCustomActionOperation {
            navigation_operation: self.navigation_operation,
            url_operation: self.url_operation,
            set_parameters_operation: self.set_parameters_operation,
        }
    }
}
