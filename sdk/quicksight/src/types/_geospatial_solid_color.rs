// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition for a solid color.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeospatialSolidColor {
    /// <p>The color and opacity values for the color.</p>
    pub color: ::std::string::String,
    /// <p>Enables and disables the view state of the color.</p>
    pub state: ::std::option::Option<crate::types::GeospatialColorState>,
}
impl GeospatialSolidColor {
    /// <p>The color and opacity values for the color.</p>
    pub fn color(&self) -> &str {
        use std::ops::Deref;
        self.color.deref()
    }
    /// <p>Enables and disables the view state of the color.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::GeospatialColorState> {
        self.state.as_ref()
    }
}
impl GeospatialSolidColor {
    /// Creates a new builder-style object to manufacture [`GeospatialSolidColor`](crate::types::GeospatialSolidColor).
    pub fn builder() -> crate::types::builders::GeospatialSolidColorBuilder {
        crate::types::builders::GeospatialSolidColorBuilder::default()
    }
}

/// A builder for [`GeospatialSolidColor`](crate::types::GeospatialSolidColor).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GeospatialSolidColorBuilder {
    pub(crate) color: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::GeospatialColorState>,
}
impl GeospatialSolidColorBuilder {
    /// <p>The color and opacity values for the color.</p>
    /// This field is required.
    pub fn color(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.color = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The color and opacity values for the color.</p>
    pub fn set_color(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.color = input;
        self
    }
    /// <p>The color and opacity values for the color.</p>
    pub fn get_color(&self) -> &::std::option::Option<::std::string::String> {
        &self.color
    }
    /// <p>Enables and disables the view state of the color.</p>
    pub fn state(mut self, input: crate::types::GeospatialColorState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables and disables the view state of the color.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::GeospatialColorState>) -> Self {
        self.state = input;
        self
    }
    /// <p>Enables and disables the view state of the color.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::GeospatialColorState> {
        &self.state
    }
    /// Consumes the builder and constructs a [`GeospatialSolidColor`](crate::types::GeospatialSolidColor).
    /// This method will fail if any of the following fields are not set:
    /// - [`color`](crate::types::builders::GeospatialSolidColorBuilder::color)
    pub fn build(self) -> ::std::result::Result<crate::types::GeospatialSolidColor, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GeospatialSolidColor {
            color: self.color.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "color",
                    "color was not specified but it is required when building GeospatialSolidColor",
                )
            })?,
            state: self.state,
        })
    }
}
