// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The logo image configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImageConfiguration {
    /// <p>The source of the image.</p>
    pub source: ::std::option::Option<crate::types::ImageSource>,
}
impl ImageConfiguration {
    /// <p>The source of the image.</p>
    pub fn source(&self) -> ::std::option::Option<&crate::types::ImageSource> {
        self.source.as_ref()
    }
}
impl ImageConfiguration {
    /// Creates a new builder-style object to manufacture [`ImageConfiguration`](crate::types::ImageConfiguration).
    pub fn builder() -> crate::types::builders::ImageConfigurationBuilder {
        crate::types::builders::ImageConfigurationBuilder::default()
    }
}

/// A builder for [`ImageConfiguration`](crate::types::ImageConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ImageConfigurationBuilder {
    pub(crate) source: ::std::option::Option<crate::types::ImageSource>,
}
impl ImageConfigurationBuilder {
    /// <p>The source of the image.</p>
    pub fn source(mut self, input: crate::types::ImageSource) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source of the image.</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::ImageSource>) -> Self {
        self.source = input;
        self
    }
    /// <p>The source of the image.</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::ImageSource> {
        &self.source
    }
    /// Consumes the builder and constructs a [`ImageConfiguration`](crate::types::ImageConfiguration).
    pub fn build(self) -> crate::types::ImageConfiguration {
        crate::types::ImageConfiguration { source: self.source }
    }
}
