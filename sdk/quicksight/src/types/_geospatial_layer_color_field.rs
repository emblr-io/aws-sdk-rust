// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The color field that defines a gradient or categorical style.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeospatialLayerColorField {
    /// <p>A list of color dimension fields.</p>
    pub color_dimensions_fields: ::std::option::Option<::std::vec::Vec<crate::types::DimensionField>>,
    /// <p>A list of color measure fields.</p>
    pub color_values_fields: ::std::option::Option<::std::vec::Vec<crate::types::MeasureField>>,
}
impl GeospatialLayerColorField {
    /// <p>A list of color dimension fields.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.color_dimensions_fields.is_none()`.
    pub fn color_dimensions_fields(&self) -> &[crate::types::DimensionField] {
        self.color_dimensions_fields.as_deref().unwrap_or_default()
    }
    /// <p>A list of color measure fields.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.color_values_fields.is_none()`.
    pub fn color_values_fields(&self) -> &[crate::types::MeasureField] {
        self.color_values_fields.as_deref().unwrap_or_default()
    }
}
impl GeospatialLayerColorField {
    /// Creates a new builder-style object to manufacture [`GeospatialLayerColorField`](crate::types::GeospatialLayerColorField).
    pub fn builder() -> crate::types::builders::GeospatialLayerColorFieldBuilder {
        crate::types::builders::GeospatialLayerColorFieldBuilder::default()
    }
}

/// A builder for [`GeospatialLayerColorField`](crate::types::GeospatialLayerColorField).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GeospatialLayerColorFieldBuilder {
    pub(crate) color_dimensions_fields: ::std::option::Option<::std::vec::Vec<crate::types::DimensionField>>,
    pub(crate) color_values_fields: ::std::option::Option<::std::vec::Vec<crate::types::MeasureField>>,
}
impl GeospatialLayerColorFieldBuilder {
    /// Appends an item to `color_dimensions_fields`.
    ///
    /// To override the contents of this collection use [`set_color_dimensions_fields`](Self::set_color_dimensions_fields).
    ///
    /// <p>A list of color dimension fields.</p>
    pub fn color_dimensions_fields(mut self, input: crate::types::DimensionField) -> Self {
        let mut v = self.color_dimensions_fields.unwrap_or_default();
        v.push(input);
        self.color_dimensions_fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of color dimension fields.</p>
    pub fn set_color_dimensions_fields(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DimensionField>>) -> Self {
        self.color_dimensions_fields = input;
        self
    }
    /// <p>A list of color dimension fields.</p>
    pub fn get_color_dimensions_fields(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DimensionField>> {
        &self.color_dimensions_fields
    }
    /// Appends an item to `color_values_fields`.
    ///
    /// To override the contents of this collection use [`set_color_values_fields`](Self::set_color_values_fields).
    ///
    /// <p>A list of color measure fields.</p>
    pub fn color_values_fields(mut self, input: crate::types::MeasureField) -> Self {
        let mut v = self.color_values_fields.unwrap_or_default();
        v.push(input);
        self.color_values_fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of color measure fields.</p>
    pub fn set_color_values_fields(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MeasureField>>) -> Self {
        self.color_values_fields = input;
        self
    }
    /// <p>A list of color measure fields.</p>
    pub fn get_color_values_fields(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MeasureField>> {
        &self.color_values_fields
    }
    /// Consumes the builder and constructs a [`GeospatialLayerColorField`](crate::types::GeospatialLayerColorField).
    pub fn build(self) -> crate::types::GeospatialLayerColorField {
        crate::types::GeospatialLayerColorField {
            color_dimensions_fields: self.color_dimensions_fields,
            color_values_fields: self.color_values_fields,
        }
    }
}
