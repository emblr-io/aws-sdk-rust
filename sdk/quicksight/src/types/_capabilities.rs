// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A set of actions that correspond to Amazon QuickSight permissions.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Capabilities {
    /// <p>The ability to export to CSV files from the UI.</p>
    pub export_to_csv: ::std::option::Option<crate::types::CapabilityState>,
    /// <p>The ability to export to Excel files from the UI.</p>
    pub export_to_excel: ::std::option::Option<crate::types::CapabilityState>,
    /// <p>The ability to export to PDF files from the UI.</p>
    pub export_to_pdf: ::std::option::Option<crate::types::CapabilityState>,
    /// <p>The ability to print reports.</p>
    pub print_reports: ::std::option::Option<crate::types::CapabilityState>,
    /// <p>The ability to export to Create and Update themes.</p>
    pub create_and_update_themes: ::std::option::Option<crate::types::CapabilityState>,
    /// <p>The ability to add or run anomaly detection.</p>
    pub add_or_run_anomaly_detection_for_analyses: ::std::option::Option<crate::types::CapabilityState>,
    /// <p>The ability to share analyses.</p>
    pub share_analyses: ::std::option::Option<crate::types::CapabilityState>,
    /// <p>The ability to create and update datasets.</p>
    pub create_and_update_datasets: ::std::option::Option<crate::types::CapabilityState>,
    /// <p>The ability to share datasets.</p>
    pub share_datasets: ::std::option::Option<crate::types::CapabilityState>,
    /// <p>The ability to subscribe to email reports.</p>
    pub subscribe_dashboard_email_reports: ::std::option::Option<crate::types::CapabilityState>,
    /// <p>The ability to create and update email reports.</p>
    pub create_and_update_dashboard_email_reports: ::std::option::Option<crate::types::CapabilityState>,
    /// <p>The ability to share dashboards.</p>
    pub share_dashboards: ::std::option::Option<crate::types::CapabilityState>,
    /// <p>The ability to create and update threshold alerts.</p>
    pub create_and_update_threshold_alerts: ::std::option::Option<crate::types::CapabilityState>,
    /// <p>The ability to rename shared folders.</p>
    pub rename_shared_folders: ::std::option::Option<crate::types::CapabilityState>,
    /// <p>The ability to create shared folders.</p>
    pub create_shared_folders: ::std::option::Option<crate::types::CapabilityState>,
    /// <p>The ability to create and update data sources.</p>
    pub create_and_update_data_sources: ::std::option::Option<crate::types::CapabilityState>,
    /// <p>The ability to share data sources.</p>
    pub share_data_sources: ::std::option::Option<crate::types::CapabilityState>,
    /// <p>The ability to view account SPICE capacity.</p>
    pub view_account_spice_capacity: ::std::option::Option<crate::types::CapabilityState>,
    /// <p>The ability to create a SPICE dataset.</p>
    pub create_spice_dataset: ::std::option::Option<crate::types::CapabilityState>,
    /// <p>The ability to export to PDF files in scheduled email reports.</p>
    pub export_to_pdf_in_scheduled_reports: ::std::option::Option<crate::types::CapabilityState>,
    /// <p>The ability to export to CSV files in scheduled email reports.</p>
    pub export_to_csv_in_scheduled_reports: ::std::option::Option<crate::types::CapabilityState>,
    /// <p>The ability to export to Excel files in scheduled email reports.</p>
    pub export_to_excel_in_scheduled_reports: ::std::option::Option<crate::types::CapabilityState>,
    /// <p>The ability to include content in scheduled email reports.</p>
    pub include_content_in_scheduled_reports_email: ::std::option::Option<crate::types::CapabilityState>,
}
impl Capabilities {
    /// <p>The ability to export to CSV files from the UI.</p>
    pub fn export_to_csv(&self) -> ::std::option::Option<&crate::types::CapabilityState> {
        self.export_to_csv.as_ref()
    }
    /// <p>The ability to export to Excel files from the UI.</p>
    pub fn export_to_excel(&self) -> ::std::option::Option<&crate::types::CapabilityState> {
        self.export_to_excel.as_ref()
    }
    /// <p>The ability to export to PDF files from the UI.</p>
    pub fn export_to_pdf(&self) -> ::std::option::Option<&crate::types::CapabilityState> {
        self.export_to_pdf.as_ref()
    }
    /// <p>The ability to print reports.</p>
    pub fn print_reports(&self) -> ::std::option::Option<&crate::types::CapabilityState> {
        self.print_reports.as_ref()
    }
    /// <p>The ability to export to Create and Update themes.</p>
    pub fn create_and_update_themes(&self) -> ::std::option::Option<&crate::types::CapabilityState> {
        self.create_and_update_themes.as_ref()
    }
    /// <p>The ability to add or run anomaly detection.</p>
    pub fn add_or_run_anomaly_detection_for_analyses(&self) -> ::std::option::Option<&crate::types::CapabilityState> {
        self.add_or_run_anomaly_detection_for_analyses.as_ref()
    }
    /// <p>The ability to share analyses.</p>
    pub fn share_analyses(&self) -> ::std::option::Option<&crate::types::CapabilityState> {
        self.share_analyses.as_ref()
    }
    /// <p>The ability to create and update datasets.</p>
    pub fn create_and_update_datasets(&self) -> ::std::option::Option<&crate::types::CapabilityState> {
        self.create_and_update_datasets.as_ref()
    }
    /// <p>The ability to share datasets.</p>
    pub fn share_datasets(&self) -> ::std::option::Option<&crate::types::CapabilityState> {
        self.share_datasets.as_ref()
    }
    /// <p>The ability to subscribe to email reports.</p>
    pub fn subscribe_dashboard_email_reports(&self) -> ::std::option::Option<&crate::types::CapabilityState> {
        self.subscribe_dashboard_email_reports.as_ref()
    }
    /// <p>The ability to create and update email reports.</p>
    pub fn create_and_update_dashboard_email_reports(&self) -> ::std::option::Option<&crate::types::CapabilityState> {
        self.create_and_update_dashboard_email_reports.as_ref()
    }
    /// <p>The ability to share dashboards.</p>
    pub fn share_dashboards(&self) -> ::std::option::Option<&crate::types::CapabilityState> {
        self.share_dashboards.as_ref()
    }
    /// <p>The ability to create and update threshold alerts.</p>
    pub fn create_and_update_threshold_alerts(&self) -> ::std::option::Option<&crate::types::CapabilityState> {
        self.create_and_update_threshold_alerts.as_ref()
    }
    /// <p>The ability to rename shared folders.</p>
    pub fn rename_shared_folders(&self) -> ::std::option::Option<&crate::types::CapabilityState> {
        self.rename_shared_folders.as_ref()
    }
    /// <p>The ability to create shared folders.</p>
    pub fn create_shared_folders(&self) -> ::std::option::Option<&crate::types::CapabilityState> {
        self.create_shared_folders.as_ref()
    }
    /// <p>The ability to create and update data sources.</p>
    pub fn create_and_update_data_sources(&self) -> ::std::option::Option<&crate::types::CapabilityState> {
        self.create_and_update_data_sources.as_ref()
    }
    /// <p>The ability to share data sources.</p>
    pub fn share_data_sources(&self) -> ::std::option::Option<&crate::types::CapabilityState> {
        self.share_data_sources.as_ref()
    }
    /// <p>The ability to view account SPICE capacity.</p>
    pub fn view_account_spice_capacity(&self) -> ::std::option::Option<&crate::types::CapabilityState> {
        self.view_account_spice_capacity.as_ref()
    }
    /// <p>The ability to create a SPICE dataset.</p>
    pub fn create_spice_dataset(&self) -> ::std::option::Option<&crate::types::CapabilityState> {
        self.create_spice_dataset.as_ref()
    }
    /// <p>The ability to export to PDF files in scheduled email reports.</p>
    pub fn export_to_pdf_in_scheduled_reports(&self) -> ::std::option::Option<&crate::types::CapabilityState> {
        self.export_to_pdf_in_scheduled_reports.as_ref()
    }
    /// <p>The ability to export to CSV files in scheduled email reports.</p>
    pub fn export_to_csv_in_scheduled_reports(&self) -> ::std::option::Option<&crate::types::CapabilityState> {
        self.export_to_csv_in_scheduled_reports.as_ref()
    }
    /// <p>The ability to export to Excel files in scheduled email reports.</p>
    pub fn export_to_excel_in_scheduled_reports(&self) -> ::std::option::Option<&crate::types::CapabilityState> {
        self.export_to_excel_in_scheduled_reports.as_ref()
    }
    /// <p>The ability to include content in scheduled email reports.</p>
    pub fn include_content_in_scheduled_reports_email(&self) -> ::std::option::Option<&crate::types::CapabilityState> {
        self.include_content_in_scheduled_reports_email.as_ref()
    }
}
impl Capabilities {
    /// Creates a new builder-style object to manufacture [`Capabilities`](crate::types::Capabilities).
    pub fn builder() -> crate::types::builders::CapabilitiesBuilder {
        crate::types::builders::CapabilitiesBuilder::default()
    }
}

/// A builder for [`Capabilities`](crate::types::Capabilities).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CapabilitiesBuilder {
    pub(crate) export_to_csv: ::std::option::Option<crate::types::CapabilityState>,
    pub(crate) export_to_excel: ::std::option::Option<crate::types::CapabilityState>,
    pub(crate) export_to_pdf: ::std::option::Option<crate::types::CapabilityState>,
    pub(crate) print_reports: ::std::option::Option<crate::types::CapabilityState>,
    pub(crate) create_and_update_themes: ::std::option::Option<crate::types::CapabilityState>,
    pub(crate) add_or_run_anomaly_detection_for_analyses: ::std::option::Option<crate::types::CapabilityState>,
    pub(crate) share_analyses: ::std::option::Option<crate::types::CapabilityState>,
    pub(crate) create_and_update_datasets: ::std::option::Option<crate::types::CapabilityState>,
    pub(crate) share_datasets: ::std::option::Option<crate::types::CapabilityState>,
    pub(crate) subscribe_dashboard_email_reports: ::std::option::Option<crate::types::CapabilityState>,
    pub(crate) create_and_update_dashboard_email_reports: ::std::option::Option<crate::types::CapabilityState>,
    pub(crate) share_dashboards: ::std::option::Option<crate::types::CapabilityState>,
    pub(crate) create_and_update_threshold_alerts: ::std::option::Option<crate::types::CapabilityState>,
    pub(crate) rename_shared_folders: ::std::option::Option<crate::types::CapabilityState>,
    pub(crate) create_shared_folders: ::std::option::Option<crate::types::CapabilityState>,
    pub(crate) create_and_update_data_sources: ::std::option::Option<crate::types::CapabilityState>,
    pub(crate) share_data_sources: ::std::option::Option<crate::types::CapabilityState>,
    pub(crate) view_account_spice_capacity: ::std::option::Option<crate::types::CapabilityState>,
    pub(crate) create_spice_dataset: ::std::option::Option<crate::types::CapabilityState>,
    pub(crate) export_to_pdf_in_scheduled_reports: ::std::option::Option<crate::types::CapabilityState>,
    pub(crate) export_to_csv_in_scheduled_reports: ::std::option::Option<crate::types::CapabilityState>,
    pub(crate) export_to_excel_in_scheduled_reports: ::std::option::Option<crate::types::CapabilityState>,
    pub(crate) include_content_in_scheduled_reports_email: ::std::option::Option<crate::types::CapabilityState>,
}
impl CapabilitiesBuilder {
    /// <p>The ability to export to CSV files from the UI.</p>
    pub fn export_to_csv(mut self, input: crate::types::CapabilityState) -> Self {
        self.export_to_csv = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ability to export to CSV files from the UI.</p>
    pub fn set_export_to_csv(mut self, input: ::std::option::Option<crate::types::CapabilityState>) -> Self {
        self.export_to_csv = input;
        self
    }
    /// <p>The ability to export to CSV files from the UI.</p>
    pub fn get_export_to_csv(&self) -> &::std::option::Option<crate::types::CapabilityState> {
        &self.export_to_csv
    }
    /// <p>The ability to export to Excel files from the UI.</p>
    pub fn export_to_excel(mut self, input: crate::types::CapabilityState) -> Self {
        self.export_to_excel = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ability to export to Excel files from the UI.</p>
    pub fn set_export_to_excel(mut self, input: ::std::option::Option<crate::types::CapabilityState>) -> Self {
        self.export_to_excel = input;
        self
    }
    /// <p>The ability to export to Excel files from the UI.</p>
    pub fn get_export_to_excel(&self) -> &::std::option::Option<crate::types::CapabilityState> {
        &self.export_to_excel
    }
    /// <p>The ability to export to PDF files from the UI.</p>
    pub fn export_to_pdf(mut self, input: crate::types::CapabilityState) -> Self {
        self.export_to_pdf = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ability to export to PDF files from the UI.</p>
    pub fn set_export_to_pdf(mut self, input: ::std::option::Option<crate::types::CapabilityState>) -> Self {
        self.export_to_pdf = input;
        self
    }
    /// <p>The ability to export to PDF files from the UI.</p>
    pub fn get_export_to_pdf(&self) -> &::std::option::Option<crate::types::CapabilityState> {
        &self.export_to_pdf
    }
    /// <p>The ability to print reports.</p>
    pub fn print_reports(mut self, input: crate::types::CapabilityState) -> Self {
        self.print_reports = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ability to print reports.</p>
    pub fn set_print_reports(mut self, input: ::std::option::Option<crate::types::CapabilityState>) -> Self {
        self.print_reports = input;
        self
    }
    /// <p>The ability to print reports.</p>
    pub fn get_print_reports(&self) -> &::std::option::Option<crate::types::CapabilityState> {
        &self.print_reports
    }
    /// <p>The ability to export to Create and Update themes.</p>
    pub fn create_and_update_themes(mut self, input: crate::types::CapabilityState) -> Self {
        self.create_and_update_themes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ability to export to Create and Update themes.</p>
    pub fn set_create_and_update_themes(mut self, input: ::std::option::Option<crate::types::CapabilityState>) -> Self {
        self.create_and_update_themes = input;
        self
    }
    /// <p>The ability to export to Create and Update themes.</p>
    pub fn get_create_and_update_themes(&self) -> &::std::option::Option<crate::types::CapabilityState> {
        &self.create_and_update_themes
    }
    /// <p>The ability to add or run anomaly detection.</p>
    pub fn add_or_run_anomaly_detection_for_analyses(mut self, input: crate::types::CapabilityState) -> Self {
        self.add_or_run_anomaly_detection_for_analyses = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ability to add or run anomaly detection.</p>
    pub fn set_add_or_run_anomaly_detection_for_analyses(mut self, input: ::std::option::Option<crate::types::CapabilityState>) -> Self {
        self.add_or_run_anomaly_detection_for_analyses = input;
        self
    }
    /// <p>The ability to add or run anomaly detection.</p>
    pub fn get_add_or_run_anomaly_detection_for_analyses(&self) -> &::std::option::Option<crate::types::CapabilityState> {
        &self.add_or_run_anomaly_detection_for_analyses
    }
    /// <p>The ability to share analyses.</p>
    pub fn share_analyses(mut self, input: crate::types::CapabilityState) -> Self {
        self.share_analyses = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ability to share analyses.</p>
    pub fn set_share_analyses(mut self, input: ::std::option::Option<crate::types::CapabilityState>) -> Self {
        self.share_analyses = input;
        self
    }
    /// <p>The ability to share analyses.</p>
    pub fn get_share_analyses(&self) -> &::std::option::Option<crate::types::CapabilityState> {
        &self.share_analyses
    }
    /// <p>The ability to create and update datasets.</p>
    pub fn create_and_update_datasets(mut self, input: crate::types::CapabilityState) -> Self {
        self.create_and_update_datasets = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ability to create and update datasets.</p>
    pub fn set_create_and_update_datasets(mut self, input: ::std::option::Option<crate::types::CapabilityState>) -> Self {
        self.create_and_update_datasets = input;
        self
    }
    /// <p>The ability to create and update datasets.</p>
    pub fn get_create_and_update_datasets(&self) -> &::std::option::Option<crate::types::CapabilityState> {
        &self.create_and_update_datasets
    }
    /// <p>The ability to share datasets.</p>
    pub fn share_datasets(mut self, input: crate::types::CapabilityState) -> Self {
        self.share_datasets = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ability to share datasets.</p>
    pub fn set_share_datasets(mut self, input: ::std::option::Option<crate::types::CapabilityState>) -> Self {
        self.share_datasets = input;
        self
    }
    /// <p>The ability to share datasets.</p>
    pub fn get_share_datasets(&self) -> &::std::option::Option<crate::types::CapabilityState> {
        &self.share_datasets
    }
    /// <p>The ability to subscribe to email reports.</p>
    pub fn subscribe_dashboard_email_reports(mut self, input: crate::types::CapabilityState) -> Self {
        self.subscribe_dashboard_email_reports = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ability to subscribe to email reports.</p>
    pub fn set_subscribe_dashboard_email_reports(mut self, input: ::std::option::Option<crate::types::CapabilityState>) -> Self {
        self.subscribe_dashboard_email_reports = input;
        self
    }
    /// <p>The ability to subscribe to email reports.</p>
    pub fn get_subscribe_dashboard_email_reports(&self) -> &::std::option::Option<crate::types::CapabilityState> {
        &self.subscribe_dashboard_email_reports
    }
    /// <p>The ability to create and update email reports.</p>
    pub fn create_and_update_dashboard_email_reports(mut self, input: crate::types::CapabilityState) -> Self {
        self.create_and_update_dashboard_email_reports = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ability to create and update email reports.</p>
    pub fn set_create_and_update_dashboard_email_reports(mut self, input: ::std::option::Option<crate::types::CapabilityState>) -> Self {
        self.create_and_update_dashboard_email_reports = input;
        self
    }
    /// <p>The ability to create and update email reports.</p>
    pub fn get_create_and_update_dashboard_email_reports(&self) -> &::std::option::Option<crate::types::CapabilityState> {
        &self.create_and_update_dashboard_email_reports
    }
    /// <p>The ability to share dashboards.</p>
    pub fn share_dashboards(mut self, input: crate::types::CapabilityState) -> Self {
        self.share_dashboards = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ability to share dashboards.</p>
    pub fn set_share_dashboards(mut self, input: ::std::option::Option<crate::types::CapabilityState>) -> Self {
        self.share_dashboards = input;
        self
    }
    /// <p>The ability to share dashboards.</p>
    pub fn get_share_dashboards(&self) -> &::std::option::Option<crate::types::CapabilityState> {
        &self.share_dashboards
    }
    /// <p>The ability to create and update threshold alerts.</p>
    pub fn create_and_update_threshold_alerts(mut self, input: crate::types::CapabilityState) -> Self {
        self.create_and_update_threshold_alerts = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ability to create and update threshold alerts.</p>
    pub fn set_create_and_update_threshold_alerts(mut self, input: ::std::option::Option<crate::types::CapabilityState>) -> Self {
        self.create_and_update_threshold_alerts = input;
        self
    }
    /// <p>The ability to create and update threshold alerts.</p>
    pub fn get_create_and_update_threshold_alerts(&self) -> &::std::option::Option<crate::types::CapabilityState> {
        &self.create_and_update_threshold_alerts
    }
    /// <p>The ability to rename shared folders.</p>
    pub fn rename_shared_folders(mut self, input: crate::types::CapabilityState) -> Self {
        self.rename_shared_folders = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ability to rename shared folders.</p>
    pub fn set_rename_shared_folders(mut self, input: ::std::option::Option<crate::types::CapabilityState>) -> Self {
        self.rename_shared_folders = input;
        self
    }
    /// <p>The ability to rename shared folders.</p>
    pub fn get_rename_shared_folders(&self) -> &::std::option::Option<crate::types::CapabilityState> {
        &self.rename_shared_folders
    }
    /// <p>The ability to create shared folders.</p>
    pub fn create_shared_folders(mut self, input: crate::types::CapabilityState) -> Self {
        self.create_shared_folders = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ability to create shared folders.</p>
    pub fn set_create_shared_folders(mut self, input: ::std::option::Option<crate::types::CapabilityState>) -> Self {
        self.create_shared_folders = input;
        self
    }
    /// <p>The ability to create shared folders.</p>
    pub fn get_create_shared_folders(&self) -> &::std::option::Option<crate::types::CapabilityState> {
        &self.create_shared_folders
    }
    /// <p>The ability to create and update data sources.</p>
    pub fn create_and_update_data_sources(mut self, input: crate::types::CapabilityState) -> Self {
        self.create_and_update_data_sources = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ability to create and update data sources.</p>
    pub fn set_create_and_update_data_sources(mut self, input: ::std::option::Option<crate::types::CapabilityState>) -> Self {
        self.create_and_update_data_sources = input;
        self
    }
    /// <p>The ability to create and update data sources.</p>
    pub fn get_create_and_update_data_sources(&self) -> &::std::option::Option<crate::types::CapabilityState> {
        &self.create_and_update_data_sources
    }
    /// <p>The ability to share data sources.</p>
    pub fn share_data_sources(mut self, input: crate::types::CapabilityState) -> Self {
        self.share_data_sources = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ability to share data sources.</p>
    pub fn set_share_data_sources(mut self, input: ::std::option::Option<crate::types::CapabilityState>) -> Self {
        self.share_data_sources = input;
        self
    }
    /// <p>The ability to share data sources.</p>
    pub fn get_share_data_sources(&self) -> &::std::option::Option<crate::types::CapabilityState> {
        &self.share_data_sources
    }
    /// <p>The ability to view account SPICE capacity.</p>
    pub fn view_account_spice_capacity(mut self, input: crate::types::CapabilityState) -> Self {
        self.view_account_spice_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ability to view account SPICE capacity.</p>
    pub fn set_view_account_spice_capacity(mut self, input: ::std::option::Option<crate::types::CapabilityState>) -> Self {
        self.view_account_spice_capacity = input;
        self
    }
    /// <p>The ability to view account SPICE capacity.</p>
    pub fn get_view_account_spice_capacity(&self) -> &::std::option::Option<crate::types::CapabilityState> {
        &self.view_account_spice_capacity
    }
    /// <p>The ability to create a SPICE dataset.</p>
    pub fn create_spice_dataset(mut self, input: crate::types::CapabilityState) -> Self {
        self.create_spice_dataset = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ability to create a SPICE dataset.</p>
    pub fn set_create_spice_dataset(mut self, input: ::std::option::Option<crate::types::CapabilityState>) -> Self {
        self.create_spice_dataset = input;
        self
    }
    /// <p>The ability to create a SPICE dataset.</p>
    pub fn get_create_spice_dataset(&self) -> &::std::option::Option<crate::types::CapabilityState> {
        &self.create_spice_dataset
    }
    /// <p>The ability to export to PDF files in scheduled email reports.</p>
    pub fn export_to_pdf_in_scheduled_reports(mut self, input: crate::types::CapabilityState) -> Self {
        self.export_to_pdf_in_scheduled_reports = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ability to export to PDF files in scheduled email reports.</p>
    pub fn set_export_to_pdf_in_scheduled_reports(mut self, input: ::std::option::Option<crate::types::CapabilityState>) -> Self {
        self.export_to_pdf_in_scheduled_reports = input;
        self
    }
    /// <p>The ability to export to PDF files in scheduled email reports.</p>
    pub fn get_export_to_pdf_in_scheduled_reports(&self) -> &::std::option::Option<crate::types::CapabilityState> {
        &self.export_to_pdf_in_scheduled_reports
    }
    /// <p>The ability to export to CSV files in scheduled email reports.</p>
    pub fn export_to_csv_in_scheduled_reports(mut self, input: crate::types::CapabilityState) -> Self {
        self.export_to_csv_in_scheduled_reports = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ability to export to CSV files in scheduled email reports.</p>
    pub fn set_export_to_csv_in_scheduled_reports(mut self, input: ::std::option::Option<crate::types::CapabilityState>) -> Self {
        self.export_to_csv_in_scheduled_reports = input;
        self
    }
    /// <p>The ability to export to CSV files in scheduled email reports.</p>
    pub fn get_export_to_csv_in_scheduled_reports(&self) -> &::std::option::Option<crate::types::CapabilityState> {
        &self.export_to_csv_in_scheduled_reports
    }
    /// <p>The ability to export to Excel files in scheduled email reports.</p>
    pub fn export_to_excel_in_scheduled_reports(mut self, input: crate::types::CapabilityState) -> Self {
        self.export_to_excel_in_scheduled_reports = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ability to export to Excel files in scheduled email reports.</p>
    pub fn set_export_to_excel_in_scheduled_reports(mut self, input: ::std::option::Option<crate::types::CapabilityState>) -> Self {
        self.export_to_excel_in_scheduled_reports = input;
        self
    }
    /// <p>The ability to export to Excel files in scheduled email reports.</p>
    pub fn get_export_to_excel_in_scheduled_reports(&self) -> &::std::option::Option<crate::types::CapabilityState> {
        &self.export_to_excel_in_scheduled_reports
    }
    /// <p>The ability to include content in scheduled email reports.</p>
    pub fn include_content_in_scheduled_reports_email(mut self, input: crate::types::CapabilityState) -> Self {
        self.include_content_in_scheduled_reports_email = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ability to include content in scheduled email reports.</p>
    pub fn set_include_content_in_scheduled_reports_email(mut self, input: ::std::option::Option<crate::types::CapabilityState>) -> Self {
        self.include_content_in_scheduled_reports_email = input;
        self
    }
    /// <p>The ability to include content in scheduled email reports.</p>
    pub fn get_include_content_in_scheduled_reports_email(&self) -> &::std::option::Option<crate::types::CapabilityState> {
        &self.include_content_in_scheduled_reports_email
    }
    /// Consumes the builder and constructs a [`Capabilities`](crate::types::Capabilities).
    pub fn build(self) -> crate::types::Capabilities {
        crate::types::Capabilities {
            export_to_csv: self.export_to_csv,
            export_to_excel: self.export_to_excel,
            export_to_pdf: self.export_to_pdf,
            print_reports: self.print_reports,
            create_and_update_themes: self.create_and_update_themes,
            add_or_run_anomaly_detection_for_analyses: self.add_or_run_anomaly_detection_for_analyses,
            share_analyses: self.share_analyses,
            create_and_update_datasets: self.create_and_update_datasets,
            share_datasets: self.share_datasets,
            subscribe_dashboard_email_reports: self.subscribe_dashboard_email_reports,
            create_and_update_dashboard_email_reports: self.create_and_update_dashboard_email_reports,
            share_dashboards: self.share_dashboards,
            create_and_update_threshold_alerts: self.create_and_update_threshold_alerts,
            rename_shared_folders: self.rename_shared_folders,
            create_shared_folders: self.create_shared_folders,
            create_and_update_data_sources: self.create_and_update_data_sources,
            share_data_sources: self.share_data_sources,
            view_account_spice_capacity: self.view_account_spice_capacity,
            create_spice_dataset: self.create_spice_dataset,
            export_to_pdf_in_scheduled_reports: self.export_to_pdf_in_scheduled_reports,
            export_to_csv_in_scheduled_reports: self.export_to_csv_in_scheduled_reports,
            export_to_excel_in_scheduled_reports: self.export_to_excel_in_scheduled_reports,
            include_content_in_scheduled_reports_email: self.include_content_in_scheduled_reports_email,
        }
    }
}
