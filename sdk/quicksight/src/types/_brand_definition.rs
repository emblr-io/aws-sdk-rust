// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition of the brand.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BrandDefinition {
    /// <p>The name of the brand.</p>
    pub brand_name: ::std::string::String,
    /// <p>The description of the brand.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The application theme of the brand.</p>
    pub application_theme: ::std::option::Option<crate::types::ApplicationTheme>,
    /// <p>The logo configuration of the brand.</p>
    pub logo_configuration: ::std::option::Option<crate::types::LogoConfiguration>,
}
impl BrandDefinition {
    /// <p>The name of the brand.</p>
    pub fn brand_name(&self) -> &str {
        use std::ops::Deref;
        self.brand_name.deref()
    }
    /// <p>The description of the brand.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The application theme of the brand.</p>
    pub fn application_theme(&self) -> ::std::option::Option<&crate::types::ApplicationTheme> {
        self.application_theme.as_ref()
    }
    /// <p>The logo configuration of the brand.</p>
    pub fn logo_configuration(&self) -> ::std::option::Option<&crate::types::LogoConfiguration> {
        self.logo_configuration.as_ref()
    }
}
impl BrandDefinition {
    /// Creates a new builder-style object to manufacture [`BrandDefinition`](crate::types::BrandDefinition).
    pub fn builder() -> crate::types::builders::BrandDefinitionBuilder {
        crate::types::builders::BrandDefinitionBuilder::default()
    }
}

/// A builder for [`BrandDefinition`](crate::types::BrandDefinition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BrandDefinitionBuilder {
    pub(crate) brand_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) application_theme: ::std::option::Option<crate::types::ApplicationTheme>,
    pub(crate) logo_configuration: ::std::option::Option<crate::types::LogoConfiguration>,
}
impl BrandDefinitionBuilder {
    /// <p>The name of the brand.</p>
    /// This field is required.
    pub fn brand_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.brand_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the brand.</p>
    pub fn set_brand_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.brand_name = input;
        self
    }
    /// <p>The name of the brand.</p>
    pub fn get_brand_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.brand_name
    }
    /// <p>The description of the brand.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the brand.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the brand.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The application theme of the brand.</p>
    pub fn application_theme(mut self, input: crate::types::ApplicationTheme) -> Self {
        self.application_theme = ::std::option::Option::Some(input);
        self
    }
    /// <p>The application theme of the brand.</p>
    pub fn set_application_theme(mut self, input: ::std::option::Option<crate::types::ApplicationTheme>) -> Self {
        self.application_theme = input;
        self
    }
    /// <p>The application theme of the brand.</p>
    pub fn get_application_theme(&self) -> &::std::option::Option<crate::types::ApplicationTheme> {
        &self.application_theme
    }
    /// <p>The logo configuration of the brand.</p>
    pub fn logo_configuration(mut self, input: crate::types::LogoConfiguration) -> Self {
        self.logo_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The logo configuration of the brand.</p>
    pub fn set_logo_configuration(mut self, input: ::std::option::Option<crate::types::LogoConfiguration>) -> Self {
        self.logo_configuration = input;
        self
    }
    /// <p>The logo configuration of the brand.</p>
    pub fn get_logo_configuration(&self) -> &::std::option::Option<crate::types::LogoConfiguration> {
        &self.logo_configuration
    }
    /// Consumes the builder and constructs a [`BrandDefinition`](crate::types::BrandDefinition).
    /// This method will fail if any of the following fields are not set:
    /// - [`brand_name`](crate::types::builders::BrandDefinitionBuilder::brand_name)
    pub fn build(self) -> ::std::result::Result<crate::types::BrandDefinition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BrandDefinition {
            brand_name: self.brand_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "brand_name",
                    "brand_name was not specified but it is required when building BrandDefinition",
                )
            })?,
            description: self.description,
            application_theme: self.application_theme,
            logo_configuration: self.logo_configuration,
        })
    }
}
