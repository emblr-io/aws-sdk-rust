// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The logo image.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Image {
    /// <p>The source of the logo image.</p>
    pub source: ::std::option::Option<crate::types::ImageSource>,
    /// <p>The URL that points to the generated logo image.</p>
    pub generated_image_url: ::std::option::Option<::std::string::String>,
}
impl Image {
    /// <p>The source of the logo image.</p>
    pub fn source(&self) -> ::std::option::Option<&crate::types::ImageSource> {
        self.source.as_ref()
    }
    /// <p>The URL that points to the generated logo image.</p>
    pub fn generated_image_url(&self) -> ::std::option::Option<&str> {
        self.generated_image_url.as_deref()
    }
}
impl Image {
    /// Creates a new builder-style object to manufacture [`Image`](crate::types::Image).
    pub fn builder() -> crate::types::builders::ImageBuilder {
        crate::types::builders::ImageBuilder::default()
    }
}

/// A builder for [`Image`](crate::types::Image).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ImageBuilder {
    pub(crate) source: ::std::option::Option<crate::types::ImageSource>,
    pub(crate) generated_image_url: ::std::option::Option<::std::string::String>,
}
impl ImageBuilder {
    /// <p>The source of the logo image.</p>
    pub fn source(mut self, input: crate::types::ImageSource) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source of the logo image.</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::ImageSource>) -> Self {
        self.source = input;
        self
    }
    /// <p>The source of the logo image.</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::ImageSource> {
        &self.source
    }
    /// <p>The URL that points to the generated logo image.</p>
    pub fn generated_image_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.generated_image_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL that points to the generated logo image.</p>
    pub fn set_generated_image_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.generated_image_url = input;
        self
    }
    /// <p>The URL that points to the generated logo image.</p>
    pub fn get_generated_image_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.generated_image_url
    }
    /// Consumes the builder and constructs a [`Image`](crate::types::Image).
    pub fn build(self) -> crate::types::Image {
        crate::types::Image {
            source: self.source,
            generated_image_url: self.generated_image_url,
        }
    }
}
