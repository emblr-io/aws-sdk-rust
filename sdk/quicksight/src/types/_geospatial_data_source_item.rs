// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The data source properties for the geospatial data.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeospatialDataSourceItem {
    /// <p>The static file data source properties for the geospatial data.</p>
    pub static_file_data_source: ::std::option::Option<crate::types::GeospatialStaticFileSource>,
}
impl GeospatialDataSourceItem {
    /// <p>The static file data source properties for the geospatial data.</p>
    pub fn static_file_data_source(&self) -> ::std::option::Option<&crate::types::GeospatialStaticFileSource> {
        self.static_file_data_source.as_ref()
    }
}
impl GeospatialDataSourceItem {
    /// Creates a new builder-style object to manufacture [`GeospatialDataSourceItem`](crate::types::GeospatialDataSourceItem).
    pub fn builder() -> crate::types::builders::GeospatialDataSourceItemBuilder {
        crate::types::builders::GeospatialDataSourceItemBuilder::default()
    }
}

/// A builder for [`GeospatialDataSourceItem`](crate::types::GeospatialDataSourceItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GeospatialDataSourceItemBuilder {
    pub(crate) static_file_data_source: ::std::option::Option<crate::types::GeospatialStaticFileSource>,
}
impl GeospatialDataSourceItemBuilder {
    /// <p>The static file data source properties for the geospatial data.</p>
    pub fn static_file_data_source(mut self, input: crate::types::GeospatialStaticFileSource) -> Self {
        self.static_file_data_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The static file data source properties for the geospatial data.</p>
    pub fn set_static_file_data_source(mut self, input: ::std::option::Option<crate::types::GeospatialStaticFileSource>) -> Self {
        self.static_file_data_source = input;
        self
    }
    /// <p>The static file data source properties for the geospatial data.</p>
    pub fn get_static_file_data_source(&self) -> &::std::option::Option<crate::types::GeospatialStaticFileSource> {
        &self.static_file_data_source
    }
    /// Consumes the builder and constructs a [`GeospatialDataSourceItem`](crate::types::GeospatialDataSourceItem).
    pub fn build(self) -> crate::types::GeospatialDataSourceItem {
        crate::types::GeospatialDataSourceItem {
            static_file_data_source: self.static_file_data_source,
        }
    }
}
