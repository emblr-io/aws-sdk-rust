// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the <b>Numeric</b> dataset column and constraints for the dynamic values used to repeat the contents of a section.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BodySectionDynamicNumericDimensionConfiguration {
    /// <p>A column of a data set.</p>
    pub column: ::std::option::Option<crate::types::ColumnIdentifier>,
    /// <p>Number of values to use from the column for repetition.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>Sort criteria on the column values that you use for repetition.</p>
    pub sort_by_metrics: ::std::option::Option<::std::vec::Vec<crate::types::ColumnSort>>,
}
impl BodySectionDynamicNumericDimensionConfiguration {
    /// <p>A column of a data set.</p>
    pub fn column(&self) -> ::std::option::Option<&crate::types::ColumnIdentifier> {
        self.column.as_ref()
    }
    /// <p>Number of values to use from the column for repetition.</p>
    pub fn limit(&self) -> ::std::option::Option<i32> {
        self.limit
    }
    /// <p>Sort criteria on the column values that you use for repetition.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sort_by_metrics.is_none()`.
    pub fn sort_by_metrics(&self) -> &[crate::types::ColumnSort] {
        self.sort_by_metrics.as_deref().unwrap_or_default()
    }
}
impl BodySectionDynamicNumericDimensionConfiguration {
    /// Creates a new builder-style object to manufacture [`BodySectionDynamicNumericDimensionConfiguration`](crate::types::BodySectionDynamicNumericDimensionConfiguration).
    pub fn builder() -> crate::types::builders::BodySectionDynamicNumericDimensionConfigurationBuilder {
        crate::types::builders::BodySectionDynamicNumericDimensionConfigurationBuilder::default()
    }
}

/// A builder for [`BodySectionDynamicNumericDimensionConfiguration`](crate::types::BodySectionDynamicNumericDimensionConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BodySectionDynamicNumericDimensionConfigurationBuilder {
    pub(crate) column: ::std::option::Option<crate::types::ColumnIdentifier>,
    pub(crate) limit: ::std::option::Option<i32>,
    pub(crate) sort_by_metrics: ::std::option::Option<::std::vec::Vec<crate::types::ColumnSort>>,
}
impl BodySectionDynamicNumericDimensionConfigurationBuilder {
    /// <p>A column of a data set.</p>
    /// This field is required.
    pub fn column(mut self, input: crate::types::ColumnIdentifier) -> Self {
        self.column = ::std::option::Option::Some(input);
        self
    }
    /// <p>A column of a data set.</p>
    pub fn set_column(mut self, input: ::std::option::Option<crate::types::ColumnIdentifier>) -> Self {
        self.column = input;
        self
    }
    /// <p>A column of a data set.</p>
    pub fn get_column(&self) -> &::std::option::Option<crate::types::ColumnIdentifier> {
        &self.column
    }
    /// <p>Number of values to use from the column for repetition.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of values to use from the column for repetition.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>Number of values to use from the column for repetition.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        &self.limit
    }
    /// Appends an item to `sort_by_metrics`.
    ///
    /// To override the contents of this collection use [`set_sort_by_metrics`](Self::set_sort_by_metrics).
    ///
    /// <p>Sort criteria on the column values that you use for repetition.</p>
    pub fn sort_by_metrics(mut self, input: crate::types::ColumnSort) -> Self {
        let mut v = self.sort_by_metrics.unwrap_or_default();
        v.push(input);
        self.sort_by_metrics = ::std::option::Option::Some(v);
        self
    }
    /// <p>Sort criteria on the column values that you use for repetition.</p>
    pub fn set_sort_by_metrics(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ColumnSort>>) -> Self {
        self.sort_by_metrics = input;
        self
    }
    /// <p>Sort criteria on the column values that you use for repetition.</p>
    pub fn get_sort_by_metrics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ColumnSort>> {
        &self.sort_by_metrics
    }
    /// Consumes the builder and constructs a [`BodySectionDynamicNumericDimensionConfiguration`](crate::types::BodySectionDynamicNumericDimensionConfiguration).
    pub fn build(self) -> crate::types::BodySectionDynamicNumericDimensionConfiguration {
        crate::types::BodySectionDynamicNumericDimensionConfiguration {
            column: self.column,
            limit: self.limit,
            sort_by_metrics: self.sort_by_metrics,
        }
    }
}
