// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The image set.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImageSet {
    /// <p>The original image.</p>
    pub original: ::std::option::Option<crate::types::Image>,
    /// <p>The image with the height set to 64 pixels.</p>
    pub height64: ::std::option::Option<crate::types::Image>,
    /// <p>The image with the height set to 32 pixels.</p>
    pub height32: ::std::option::Option<crate::types::Image>,
}
impl ImageSet {
    /// <p>The original image.</p>
    pub fn original(&self) -> ::std::option::Option<&crate::types::Image> {
        self.original.as_ref()
    }
    /// <p>The image with the height set to 64 pixels.</p>
    pub fn height64(&self) -> ::std::option::Option<&crate::types::Image> {
        self.height64.as_ref()
    }
    /// <p>The image with the height set to 32 pixels.</p>
    pub fn height32(&self) -> ::std::option::Option<&crate::types::Image> {
        self.height32.as_ref()
    }
}
impl ImageSet {
    /// Creates a new builder-style object to manufacture [`ImageSet`](crate::types::ImageSet).
    pub fn builder() -> crate::types::builders::ImageSetBuilder {
        crate::types::builders::ImageSetBuilder::default()
    }
}

/// A builder for [`ImageSet`](crate::types::ImageSet).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ImageSetBuilder {
    pub(crate) original: ::std::option::Option<crate::types::Image>,
    pub(crate) height64: ::std::option::Option<crate::types::Image>,
    pub(crate) height32: ::std::option::Option<crate::types::Image>,
}
impl ImageSetBuilder {
    /// <p>The original image.</p>
    /// This field is required.
    pub fn original(mut self, input: crate::types::Image) -> Self {
        self.original = ::std::option::Option::Some(input);
        self
    }
    /// <p>The original image.</p>
    pub fn set_original(mut self, input: ::std::option::Option<crate::types::Image>) -> Self {
        self.original = input;
        self
    }
    /// <p>The original image.</p>
    pub fn get_original(&self) -> &::std::option::Option<crate::types::Image> {
        &self.original
    }
    /// <p>The image with the height set to 64 pixels.</p>
    pub fn height64(mut self, input: crate::types::Image) -> Self {
        self.height64 = ::std::option::Option::Some(input);
        self
    }
    /// <p>The image with the height set to 64 pixels.</p>
    pub fn set_height64(mut self, input: ::std::option::Option<crate::types::Image>) -> Self {
        self.height64 = input;
        self
    }
    /// <p>The image with the height set to 64 pixels.</p>
    pub fn get_height64(&self) -> &::std::option::Option<crate::types::Image> {
        &self.height64
    }
    /// <p>The image with the height set to 32 pixels.</p>
    pub fn height32(mut self, input: crate::types::Image) -> Self {
        self.height32 = ::std::option::Option::Some(input);
        self
    }
    /// <p>The image with the height set to 32 pixels.</p>
    pub fn set_height32(mut self, input: ::std::option::Option<crate::types::Image>) -> Self {
        self.height32 = input;
        self
    }
    /// <p>The image with the height set to 32 pixels.</p>
    pub fn get_height32(&self) -> &::std::option::Option<crate::types::Image> {
        &self.height32
    }
    /// Consumes the builder and constructs a [`ImageSet`](crate::types::ImageSet).
    pub fn build(self) -> crate::types::ImageSet {
        crate::types::ImageSet {
            original: self.original,
            height64: self.height64,
            height32: self.height32,
        }
    }
}
