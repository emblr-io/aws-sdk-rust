// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A <code>NestedFilter</code> filters data with a subset of data that is defined by the nested inner filter.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NestedFilter {
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub filter_id: ::std::string::String,
    /// <p>The column that the filter is applied to.</p>
    pub column: ::std::option::Option<crate::types::ColumnIdentifier>,
    /// <p>A boolean condition to include or exclude the subset that is defined by the values of the nested inner filter.</p>
    pub include_inner_set: bool,
    /// <p>The <code>InnerFilter</code> defines the subset of data to be used with the <code>NestedFilter</code>.</p>
    pub inner_filter: ::std::option::Option<crate::types::InnerFilter>,
}
impl NestedFilter {
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub fn filter_id(&self) -> &str {
        use std::ops::Deref;
        self.filter_id.deref()
    }
    /// <p>The column that the filter is applied to.</p>
    pub fn column(&self) -> ::std::option::Option<&crate::types::ColumnIdentifier> {
        self.column.as_ref()
    }
    /// <p>A boolean condition to include or exclude the subset that is defined by the values of the nested inner filter.</p>
    pub fn include_inner_set(&self) -> bool {
        self.include_inner_set
    }
    /// <p>The <code>InnerFilter</code> defines the subset of data to be used with the <code>NestedFilter</code>.</p>
    pub fn inner_filter(&self) -> ::std::option::Option<&crate::types::InnerFilter> {
        self.inner_filter.as_ref()
    }
}
impl NestedFilter {
    /// Creates a new builder-style object to manufacture [`NestedFilter`](crate::types::NestedFilter).
    pub fn builder() -> crate::types::builders::NestedFilterBuilder {
        crate::types::builders::NestedFilterBuilder::default()
    }
}

/// A builder for [`NestedFilter`](crate::types::NestedFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NestedFilterBuilder {
    pub(crate) filter_id: ::std::option::Option<::std::string::String>,
    pub(crate) column: ::std::option::Option<crate::types::ColumnIdentifier>,
    pub(crate) include_inner_set: ::std::option::Option<bool>,
    pub(crate) inner_filter: ::std::option::Option<crate::types::InnerFilter>,
}
impl NestedFilterBuilder {
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    /// This field is required.
    pub fn filter_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub fn set_filter_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter_id = input;
        self
    }
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub fn get_filter_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter_id
    }
    /// <p>The column that the filter is applied to.</p>
    /// This field is required.
    pub fn column(mut self, input: crate::types::ColumnIdentifier) -> Self {
        self.column = ::std::option::Option::Some(input);
        self
    }
    /// <p>The column that the filter is applied to.</p>
    pub fn set_column(mut self, input: ::std::option::Option<crate::types::ColumnIdentifier>) -> Self {
        self.column = input;
        self
    }
    /// <p>The column that the filter is applied to.</p>
    pub fn get_column(&self) -> &::std::option::Option<crate::types::ColumnIdentifier> {
        &self.column
    }
    /// <p>A boolean condition to include or exclude the subset that is defined by the values of the nested inner filter.</p>
    /// This field is required.
    pub fn include_inner_set(mut self, input: bool) -> Self {
        self.include_inner_set = ::std::option::Option::Some(input);
        self
    }
    /// <p>A boolean condition to include or exclude the subset that is defined by the values of the nested inner filter.</p>
    pub fn set_include_inner_set(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_inner_set = input;
        self
    }
    /// <p>A boolean condition to include or exclude the subset that is defined by the values of the nested inner filter.</p>
    pub fn get_include_inner_set(&self) -> &::std::option::Option<bool> {
        &self.include_inner_set
    }
    /// <p>The <code>InnerFilter</code> defines the subset of data to be used with the <code>NestedFilter</code>.</p>
    /// This field is required.
    pub fn inner_filter(mut self, input: crate::types::InnerFilter) -> Self {
        self.inner_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>InnerFilter</code> defines the subset of data to be used with the <code>NestedFilter</code>.</p>
    pub fn set_inner_filter(mut self, input: ::std::option::Option<crate::types::InnerFilter>) -> Self {
        self.inner_filter = input;
        self
    }
    /// <p>The <code>InnerFilter</code> defines the subset of data to be used with the <code>NestedFilter</code>.</p>
    pub fn get_inner_filter(&self) -> &::std::option::Option<crate::types::InnerFilter> {
        &self.inner_filter
    }
    /// Consumes the builder and constructs a [`NestedFilter`](crate::types::NestedFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`filter_id`](crate::types::builders::NestedFilterBuilder::filter_id)
    pub fn build(self) -> ::std::result::Result<crate::types::NestedFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NestedFilter {
            filter_id: self.filter_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "filter_id",
                    "filter_id was not specified but it is required when building NestedFilter",
                )
            })?,
            column: self.column,
            include_inner_set: self.include_inner_set.unwrap_or_default(),
            inner_filter: self.inner_filter,
        })
    }
}
