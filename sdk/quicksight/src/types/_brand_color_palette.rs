// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The color palette.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BrandColorPalette {
    /// <p>The primary color.</p>
    pub primary: ::std::option::Option<crate::types::Palette>,
    /// <p>The secondary color.</p>
    pub secondary: ::std::option::Option<crate::types::Palette>,
    /// <p>The color that is used for accent elements.</p>
    pub accent: ::std::option::Option<crate::types::Palette>,
    /// <p>The color that is used for measure elements.</p>
    pub measure: ::std::option::Option<crate::types::Palette>,
    /// <p>The color that is used for dimension elements.</p>
    pub dimension: ::std::option::Option<crate::types::Palette>,
    /// <p>The color that is used for success elements.</p>
    pub success: ::std::option::Option<crate::types::Palette>,
    /// <p>The color that is used for info elements.</p>
    pub info: ::std::option::Option<crate::types::Palette>,
    /// <p>The color that is used for warning elements.</p>
    pub warning: ::std::option::Option<crate::types::Palette>,
    /// <p>The color that is used for danger elements.</p>
    pub danger: ::std::option::Option<crate::types::Palette>,
}
impl BrandColorPalette {
    /// <p>The primary color.</p>
    pub fn primary(&self) -> ::std::option::Option<&crate::types::Palette> {
        self.primary.as_ref()
    }
    /// <p>The secondary color.</p>
    pub fn secondary(&self) -> ::std::option::Option<&crate::types::Palette> {
        self.secondary.as_ref()
    }
    /// <p>The color that is used for accent elements.</p>
    pub fn accent(&self) -> ::std::option::Option<&crate::types::Palette> {
        self.accent.as_ref()
    }
    /// <p>The color that is used for measure elements.</p>
    pub fn measure(&self) -> ::std::option::Option<&crate::types::Palette> {
        self.measure.as_ref()
    }
    /// <p>The color that is used for dimension elements.</p>
    pub fn dimension(&self) -> ::std::option::Option<&crate::types::Palette> {
        self.dimension.as_ref()
    }
    /// <p>The color that is used for success elements.</p>
    pub fn success(&self) -> ::std::option::Option<&crate::types::Palette> {
        self.success.as_ref()
    }
    /// <p>The color that is used for info elements.</p>
    pub fn info(&self) -> ::std::option::Option<&crate::types::Palette> {
        self.info.as_ref()
    }
    /// <p>The color that is used for warning elements.</p>
    pub fn warning(&self) -> ::std::option::Option<&crate::types::Palette> {
        self.warning.as_ref()
    }
    /// <p>The color that is used for danger elements.</p>
    pub fn danger(&self) -> ::std::option::Option<&crate::types::Palette> {
        self.danger.as_ref()
    }
}
impl BrandColorPalette {
    /// Creates a new builder-style object to manufacture [`BrandColorPalette`](crate::types::BrandColorPalette).
    pub fn builder() -> crate::types::builders::BrandColorPaletteBuilder {
        crate::types::builders::BrandColorPaletteBuilder::default()
    }
}

/// A builder for [`BrandColorPalette`](crate::types::BrandColorPalette).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BrandColorPaletteBuilder {
    pub(crate) primary: ::std::option::Option<crate::types::Palette>,
    pub(crate) secondary: ::std::option::Option<crate::types::Palette>,
    pub(crate) accent: ::std::option::Option<crate::types::Palette>,
    pub(crate) measure: ::std::option::Option<crate::types::Palette>,
    pub(crate) dimension: ::std::option::Option<crate::types::Palette>,
    pub(crate) success: ::std::option::Option<crate::types::Palette>,
    pub(crate) info: ::std::option::Option<crate::types::Palette>,
    pub(crate) warning: ::std::option::Option<crate::types::Palette>,
    pub(crate) danger: ::std::option::Option<crate::types::Palette>,
}
impl BrandColorPaletteBuilder {
    /// <p>The primary color.</p>
    pub fn primary(mut self, input: crate::types::Palette) -> Self {
        self.primary = ::std::option::Option::Some(input);
        self
    }
    /// <p>The primary color.</p>
    pub fn set_primary(mut self, input: ::std::option::Option<crate::types::Palette>) -> Self {
        self.primary = input;
        self
    }
    /// <p>The primary color.</p>
    pub fn get_primary(&self) -> &::std::option::Option<crate::types::Palette> {
        &self.primary
    }
    /// <p>The secondary color.</p>
    pub fn secondary(mut self, input: crate::types::Palette) -> Self {
        self.secondary = ::std::option::Option::Some(input);
        self
    }
    /// <p>The secondary color.</p>
    pub fn set_secondary(mut self, input: ::std::option::Option<crate::types::Palette>) -> Self {
        self.secondary = input;
        self
    }
    /// <p>The secondary color.</p>
    pub fn get_secondary(&self) -> &::std::option::Option<crate::types::Palette> {
        &self.secondary
    }
    /// <p>The color that is used for accent elements.</p>
    pub fn accent(mut self, input: crate::types::Palette) -> Self {
        self.accent = ::std::option::Option::Some(input);
        self
    }
    /// <p>The color that is used for accent elements.</p>
    pub fn set_accent(mut self, input: ::std::option::Option<crate::types::Palette>) -> Self {
        self.accent = input;
        self
    }
    /// <p>The color that is used for accent elements.</p>
    pub fn get_accent(&self) -> &::std::option::Option<crate::types::Palette> {
        &self.accent
    }
    /// <p>The color that is used for measure elements.</p>
    pub fn measure(mut self, input: crate::types::Palette) -> Self {
        self.measure = ::std::option::Option::Some(input);
        self
    }
    /// <p>The color that is used for measure elements.</p>
    pub fn set_measure(mut self, input: ::std::option::Option<crate::types::Palette>) -> Self {
        self.measure = input;
        self
    }
    /// <p>The color that is used for measure elements.</p>
    pub fn get_measure(&self) -> &::std::option::Option<crate::types::Palette> {
        &self.measure
    }
    /// <p>The color that is used for dimension elements.</p>
    pub fn dimension(mut self, input: crate::types::Palette) -> Self {
        self.dimension = ::std::option::Option::Some(input);
        self
    }
    /// <p>The color that is used for dimension elements.</p>
    pub fn set_dimension(mut self, input: ::std::option::Option<crate::types::Palette>) -> Self {
        self.dimension = input;
        self
    }
    /// <p>The color that is used for dimension elements.</p>
    pub fn get_dimension(&self) -> &::std::option::Option<crate::types::Palette> {
        &self.dimension
    }
    /// <p>The color that is used for success elements.</p>
    pub fn success(mut self, input: crate::types::Palette) -> Self {
        self.success = ::std::option::Option::Some(input);
        self
    }
    /// <p>The color that is used for success elements.</p>
    pub fn set_success(mut self, input: ::std::option::Option<crate::types::Palette>) -> Self {
        self.success = input;
        self
    }
    /// <p>The color that is used for success elements.</p>
    pub fn get_success(&self) -> &::std::option::Option<crate::types::Palette> {
        &self.success
    }
    /// <p>The color that is used for info elements.</p>
    pub fn info(mut self, input: crate::types::Palette) -> Self {
        self.info = ::std::option::Option::Some(input);
        self
    }
    /// <p>The color that is used for info elements.</p>
    pub fn set_info(mut self, input: ::std::option::Option<crate::types::Palette>) -> Self {
        self.info = input;
        self
    }
    /// <p>The color that is used for info elements.</p>
    pub fn get_info(&self) -> &::std::option::Option<crate::types::Palette> {
        &self.info
    }
    /// <p>The color that is used for warning elements.</p>
    pub fn warning(mut self, input: crate::types::Palette) -> Self {
        self.warning = ::std::option::Option::Some(input);
        self
    }
    /// <p>The color that is used for warning elements.</p>
    pub fn set_warning(mut self, input: ::std::option::Option<crate::types::Palette>) -> Self {
        self.warning = input;
        self
    }
    /// <p>The color that is used for warning elements.</p>
    pub fn get_warning(&self) -> &::std::option::Option<crate::types::Palette> {
        &self.warning
    }
    /// <p>The color that is used for danger elements.</p>
    pub fn danger(mut self, input: crate::types::Palette) -> Self {
        self.danger = ::std::option::Option::Some(input);
        self
    }
    /// <p>The color that is used for danger elements.</p>
    pub fn set_danger(mut self, input: ::std::option::Option<crate::types::Palette>) -> Self {
        self.danger = input;
        self
    }
    /// <p>The color that is used for danger elements.</p>
    pub fn get_danger(&self) -> &::std::option::Option<crate::types::Palette> {
        &self.danger
    }
    /// Consumes the builder and constructs a [`BrandColorPalette`](crate::types::BrandColorPalette).
    pub fn build(self) -> crate::types::BrandColorPalette {
        crate::types::BrandColorPalette {
            primary: self.primary,
            secondary: self.secondary,
            accent: self.accent,
            measure: self.measure,
            dimension: self.dimension,
            success: self.success,
            info: self.info,
            warning: self.warning,
            danger: self.danger,
        }
    }
}
