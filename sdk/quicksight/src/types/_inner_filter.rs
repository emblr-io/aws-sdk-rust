// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The <code>InnerFilter</code> defines the subset of data to be used with the <code>NestedFilter</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InnerFilter {
    /// <p>A <code>CategoryInnerFilter</code> filters text values for the <code>NestedFilter</code>.</p>
    pub category_inner_filter: ::std::option::Option<crate::types::CategoryInnerFilter>,
}
impl InnerFilter {
    /// <p>A <code>CategoryInnerFilter</code> filters text values for the <code>NestedFilter</code>.</p>
    pub fn category_inner_filter(&self) -> ::std::option::Option<&crate::types::CategoryInnerFilter> {
        self.category_inner_filter.as_ref()
    }
}
impl InnerFilter {
    /// Creates a new builder-style object to manufacture [`InnerFilter`](crate::types::InnerFilter).
    pub fn builder() -> crate::types::builders::InnerFilterBuilder {
        crate::types::builders::InnerFilterBuilder::default()
    }
}

/// A builder for [`InnerFilter`](crate::types::InnerFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InnerFilterBuilder {
    pub(crate) category_inner_filter: ::std::option::Option<crate::types::CategoryInnerFilter>,
}
impl InnerFilterBuilder {
    /// <p>A <code>CategoryInnerFilter</code> filters text values for the <code>NestedFilter</code>.</p>
    pub fn category_inner_filter(mut self, input: crate::types::CategoryInnerFilter) -> Self {
        self.category_inner_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>CategoryInnerFilter</code> filters text values for the <code>NestedFilter</code>.</p>
    pub fn set_category_inner_filter(mut self, input: ::std::option::Option<crate::types::CategoryInnerFilter>) -> Self {
        self.category_inner_filter = input;
        self
    }
    /// <p>A <code>CategoryInnerFilter</code> filters text values for the <code>NestedFilter</code>.</p>
    pub fn get_category_inner_filter(&self) -> &::std::option::Option<crate::types::CategoryInnerFilter> {
        &self.category_inner_filter
    }
    /// Consumes the builder and constructs a [`InnerFilter`](crate::types::InnerFilter).
    pub fn build(self) -> crate::types::InnerFilter {
        crate::types::InnerFilter {
            category_inner_filter: self.category_inner_filter,
        }
    }
}
