// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The table query sorting options for the plugin visual.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PluginVisualTableQuerySort {
    /// <p>Determines how data is sorted in the response.</p>
    pub row_sort: ::std::option::Option<::std::vec::Vec<crate::types::FieldSortOptions>>,
    /// <p>The maximum amount of data to be returned by a query.</p>
    pub items_limit_configuration: ::std::option::Option<crate::types::PluginVisualItemsLimitConfiguration>,
}
impl PluginVisualTableQuerySort {
    /// <p>Determines how data is sorted in the response.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.row_sort.is_none()`.
    pub fn row_sort(&self) -> &[crate::types::FieldSortOptions] {
        self.row_sort.as_deref().unwrap_or_default()
    }
    /// <p>The maximum amount of data to be returned by a query.</p>
    pub fn items_limit_configuration(&self) -> ::std::option::Option<&crate::types::PluginVisualItemsLimitConfiguration> {
        self.items_limit_configuration.as_ref()
    }
}
impl PluginVisualTableQuerySort {
    /// Creates a new builder-style object to manufacture [`PluginVisualTableQuerySort`](crate::types::PluginVisualTableQuerySort).
    pub fn builder() -> crate::types::builders::PluginVisualTableQuerySortBuilder {
        crate::types::builders::PluginVisualTableQuerySortBuilder::default()
    }
}

/// A builder for [`PluginVisualTableQuerySort`](crate::types::PluginVisualTableQuerySort).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PluginVisualTableQuerySortBuilder {
    pub(crate) row_sort: ::std::option::Option<::std::vec::Vec<crate::types::FieldSortOptions>>,
    pub(crate) items_limit_configuration: ::std::option::Option<crate::types::PluginVisualItemsLimitConfiguration>,
}
impl PluginVisualTableQuerySortBuilder {
    /// Appends an item to `row_sort`.
    ///
    /// To override the contents of this collection use [`set_row_sort`](Self::set_row_sort).
    ///
    /// <p>Determines how data is sorted in the response.</p>
    pub fn row_sort(mut self, input: crate::types::FieldSortOptions) -> Self {
        let mut v = self.row_sort.unwrap_or_default();
        v.push(input);
        self.row_sort = ::std::option::Option::Some(v);
        self
    }
    /// <p>Determines how data is sorted in the response.</p>
    pub fn set_row_sort(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FieldSortOptions>>) -> Self {
        self.row_sort = input;
        self
    }
    /// <p>Determines how data is sorted in the response.</p>
    pub fn get_row_sort(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FieldSortOptions>> {
        &self.row_sort
    }
    /// <p>The maximum amount of data to be returned by a query.</p>
    pub fn items_limit_configuration(mut self, input: crate::types::PluginVisualItemsLimitConfiguration) -> Self {
        self.items_limit_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum amount of data to be returned by a query.</p>
    pub fn set_items_limit_configuration(mut self, input: ::std::option::Option<crate::types::PluginVisualItemsLimitConfiguration>) -> Self {
        self.items_limit_configuration = input;
        self
    }
    /// <p>The maximum amount of data to be returned by a query.</p>
    pub fn get_items_limit_configuration(&self) -> &::std::option::Option<crate::types::PluginVisualItemsLimitConfiguration> {
        &self.items_limit_configuration
    }
    /// Consumes the builder and constructs a [`PluginVisualTableQuerySort`](crate::types::PluginVisualTableQuerySort).
    pub fn build(self) -> crate::types::PluginVisualTableQuerySort {
        crate::types::PluginVisualTableQuerySort {
            row_sort: self.row_sort,
            items_limit_configuration: self.items_limit_configuration,
        }
    }
}
