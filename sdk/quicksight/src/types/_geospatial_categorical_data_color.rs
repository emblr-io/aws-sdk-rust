// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The categorical data color for a single category.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeospatialCategoricalDataColor {
    /// <p>The color and opacity values for the category data color.</p>
    pub color: ::std::string::String,
    /// <p>The data value for the category data color.</p>
    pub data_value: ::std::string::String,
}
impl GeospatialCategoricalDataColor {
    /// <p>The color and opacity values for the category data color.</p>
    pub fn color(&self) -> &str {
        use std::ops::Deref;
        self.color.deref()
    }
    /// <p>The data value for the category data color.</p>
    pub fn data_value(&self) -> &str {
        use std::ops::Deref;
        self.data_value.deref()
    }
}
impl GeospatialCategoricalDataColor {
    /// Creates a new builder-style object to manufacture [`GeospatialCategoricalDataColor`](crate::types::GeospatialCategoricalDataColor).
    pub fn builder() -> crate::types::builders::GeospatialCategoricalDataColorBuilder {
        crate::types::builders::GeospatialCategoricalDataColorBuilder::default()
    }
}

/// A builder for [`GeospatialCategoricalDataColor`](crate::types::GeospatialCategoricalDataColor).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GeospatialCategoricalDataColorBuilder {
    pub(crate) color: ::std::option::Option<::std::string::String>,
    pub(crate) data_value: ::std::option::Option<::std::string::String>,
}
impl GeospatialCategoricalDataColorBuilder {
    /// <p>The color and opacity values for the category data color.</p>
    /// This field is required.
    pub fn color(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.color = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The color and opacity values for the category data color.</p>
    pub fn set_color(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.color = input;
        self
    }
    /// <p>The color and opacity values for the category data color.</p>
    pub fn get_color(&self) -> &::std::option::Option<::std::string::String> {
        &self.color
    }
    /// <p>The data value for the category data color.</p>
    /// This field is required.
    pub fn data_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data value for the category data color.</p>
    pub fn set_data_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_value = input;
        self
    }
    /// <p>The data value for the category data color.</p>
    pub fn get_data_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_value
    }
    /// Consumes the builder and constructs a [`GeospatialCategoricalDataColor`](crate::types::GeospatialCategoricalDataColor).
    /// This method will fail if any of the following fields are not set:
    /// - [`color`](crate::types::builders::GeospatialCategoricalDataColorBuilder::color)
    /// - [`data_value`](crate::types::builders::GeospatialCategoricalDataColorBuilder::data_value)
    pub fn build(self) -> ::std::result::Result<crate::types::GeospatialCategoricalDataColor, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GeospatialCategoricalDataColor {
            color: self.color.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "color",
                    "color was not specified but it is required when building GeospatialCategoricalDataColor",
                )
            })?,
            data_value: self.data_value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "data_value",
                    "data_value was not specified but it is required when building GeospatialCategoricalDataColor",
                )
            })?,
        })
    }
}
