// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The source of the static file.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StaticFileSource {
    /// <p>The structure that contains the URL to download the static file from.</p>
    pub url_options: ::std::option::Option<crate::types::StaticFileUrlSourceOptions>,
    /// <p>The structure that contains the Amazon S3 location to download the static file from.</p>
    pub s3_options: ::std::option::Option<crate::types::StaticFileS3SourceOptions>,
}
impl StaticFileSource {
    /// <p>The structure that contains the URL to download the static file from.</p>
    pub fn url_options(&self) -> ::std::option::Option<&crate::types::StaticFileUrlSourceOptions> {
        self.url_options.as_ref()
    }
    /// <p>The structure that contains the Amazon S3 location to download the static file from.</p>
    pub fn s3_options(&self) -> ::std::option::Option<&crate::types::StaticFileS3SourceOptions> {
        self.s3_options.as_ref()
    }
}
impl StaticFileSource {
    /// Creates a new builder-style object to manufacture [`StaticFileSource`](crate::types::StaticFileSource).
    pub fn builder() -> crate::types::builders::StaticFileSourceBuilder {
        crate::types::builders::StaticFileSourceBuilder::default()
    }
}

/// A builder for [`StaticFileSource`](crate::types::StaticFileSource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StaticFileSourceBuilder {
    pub(crate) url_options: ::std::option::Option<crate::types::StaticFileUrlSourceOptions>,
    pub(crate) s3_options: ::std::option::Option<crate::types::StaticFileS3SourceOptions>,
}
impl StaticFileSourceBuilder {
    /// <p>The structure that contains the URL to download the static file from.</p>
    pub fn url_options(mut self, input: crate::types::StaticFileUrlSourceOptions) -> Self {
        self.url_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The structure that contains the URL to download the static file from.</p>
    pub fn set_url_options(mut self, input: ::std::option::Option<crate::types::StaticFileUrlSourceOptions>) -> Self {
        self.url_options = input;
        self
    }
    /// <p>The structure that contains the URL to download the static file from.</p>
    pub fn get_url_options(&self) -> &::std::option::Option<crate::types::StaticFileUrlSourceOptions> {
        &self.url_options
    }
    /// <p>The structure that contains the Amazon S3 location to download the static file from.</p>
    pub fn s3_options(mut self, input: crate::types::StaticFileS3SourceOptions) -> Self {
        self.s3_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The structure that contains the Amazon S3 location to download the static file from.</p>
    pub fn set_s3_options(mut self, input: ::std::option::Option<crate::types::StaticFileS3SourceOptions>) -> Self {
        self.s3_options = input;
        self
    }
    /// <p>The structure that contains the Amazon S3 location to download the static file from.</p>
    pub fn get_s3_options(&self) -> &::std::option::Option<crate::types::StaticFileS3SourceOptions> {
        &self.s3_options
    }
    /// Consumes the builder and constructs a [`StaticFileSource`](crate::types::StaticFileSource).
    pub fn build(self) -> crate::types::StaticFileSource {
        crate::types::StaticFileSource {
            url_options: self.url_options,
            s3_options: self.s3_options,
        }
    }
}
