// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains a list of permissions to be applied to a list of folder IDs.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssetBundleImportJobFolderOverridePermissions {
    /// <p>A list of folder IDs that you want to apply overrides to. You can use <code>*</code> to override all folders in this asset bundle.</p>
    pub folder_ids: ::std::vec::Vec<::std::string::String>,
    /// <p>A structure that contains the permissions for the resource that you want to override in an asset bundle import job.</p>
    pub permissions: ::std::option::Option<crate::types::AssetBundleResourcePermissions>,
}
impl AssetBundleImportJobFolderOverridePermissions {
    /// <p>A list of folder IDs that you want to apply overrides to. You can use <code>*</code> to override all folders in this asset bundle.</p>
    pub fn folder_ids(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.folder_ids.deref()
    }
    /// <p>A structure that contains the permissions for the resource that you want to override in an asset bundle import job.</p>
    pub fn permissions(&self) -> ::std::option::Option<&crate::types::AssetBundleResourcePermissions> {
        self.permissions.as_ref()
    }
}
impl AssetBundleImportJobFolderOverridePermissions {
    /// Creates a new builder-style object to manufacture [`AssetBundleImportJobFolderOverridePermissions`](crate::types::AssetBundleImportJobFolderOverridePermissions).
    pub fn builder() -> crate::types::builders::AssetBundleImportJobFolderOverridePermissionsBuilder {
        crate::types::builders::AssetBundleImportJobFolderOverridePermissionsBuilder::default()
    }
}

/// A builder for [`AssetBundleImportJobFolderOverridePermissions`](crate::types::AssetBundleImportJobFolderOverridePermissions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssetBundleImportJobFolderOverridePermissionsBuilder {
    pub(crate) folder_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) permissions: ::std::option::Option<crate::types::AssetBundleResourcePermissions>,
}
impl AssetBundleImportJobFolderOverridePermissionsBuilder {
    /// Appends an item to `folder_ids`.
    ///
    /// To override the contents of this collection use [`set_folder_ids`](Self::set_folder_ids).
    ///
    /// <p>A list of folder IDs that you want to apply overrides to. You can use <code>*</code> to override all folders in this asset bundle.</p>
    pub fn folder_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.folder_ids.unwrap_or_default();
        v.push(input.into());
        self.folder_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of folder IDs that you want to apply overrides to. You can use <code>*</code> to override all folders in this asset bundle.</p>
    pub fn set_folder_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.folder_ids = input;
        self
    }
    /// <p>A list of folder IDs that you want to apply overrides to. You can use <code>*</code> to override all folders in this asset bundle.</p>
    pub fn get_folder_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.folder_ids
    }
    /// <p>A structure that contains the permissions for the resource that you want to override in an asset bundle import job.</p>
    pub fn permissions(mut self, input: crate::types::AssetBundleResourcePermissions) -> Self {
        self.permissions = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that contains the permissions for the resource that you want to override in an asset bundle import job.</p>
    pub fn set_permissions(mut self, input: ::std::option::Option<crate::types::AssetBundleResourcePermissions>) -> Self {
        self.permissions = input;
        self
    }
    /// <p>A structure that contains the permissions for the resource that you want to override in an asset bundle import job.</p>
    pub fn get_permissions(&self) -> &::std::option::Option<crate::types::AssetBundleResourcePermissions> {
        &self.permissions
    }
    /// Consumes the builder and constructs a [`AssetBundleImportJobFolderOverridePermissions`](crate::types::AssetBundleImportJobFolderOverridePermissions).
    /// This method will fail if any of the following fields are not set:
    /// - [`folder_ids`](crate::types::builders::AssetBundleImportJobFolderOverridePermissionsBuilder::folder_ids)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::AssetBundleImportJobFolderOverridePermissions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AssetBundleImportJobFolderOverridePermissions {
            folder_ids: self.folder_ids.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "folder_ids",
                    "folder_ids was not specified but it is required when building AssetBundleImportJobFolderOverridePermissions",
                )
            })?,
            permissions: self.permissions,
        })
    }
}
