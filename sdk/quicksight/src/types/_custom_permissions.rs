// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The custom permissions profile.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomPermissions {
    /// <p>The Amazon Resource Name (ARN) of the custom permissions profile.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the custom permissions profile.</p>
    pub custom_permissions_name: ::std::option::Option<::std::string::String>,
    /// <p>A set of actions in the custom permissions profile.</p>
    pub capabilities: ::std::option::Option<crate::types::Capabilities>,
}
impl CustomPermissions {
    /// <p>The Amazon Resource Name (ARN) of the custom permissions profile.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the custom permissions profile.</p>
    pub fn custom_permissions_name(&self) -> ::std::option::Option<&str> {
        self.custom_permissions_name.as_deref()
    }
    /// <p>A set of actions in the custom permissions profile.</p>
    pub fn capabilities(&self) -> ::std::option::Option<&crate::types::Capabilities> {
        self.capabilities.as_ref()
    }
}
impl CustomPermissions {
    /// Creates a new builder-style object to manufacture [`CustomPermissions`](crate::types::CustomPermissions).
    pub fn builder() -> crate::types::builders::CustomPermissionsBuilder {
        crate::types::builders::CustomPermissionsBuilder::default()
    }
}

/// A builder for [`CustomPermissions`](crate::types::CustomPermissions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CustomPermissionsBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) custom_permissions_name: ::std::option::Option<::std::string::String>,
    pub(crate) capabilities: ::std::option::Option<crate::types::Capabilities>,
}
impl CustomPermissionsBuilder {
    /// <p>The Amazon Resource Name (ARN) of the custom permissions profile.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the custom permissions profile.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the custom permissions profile.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the custom permissions profile.</p>
    pub fn custom_permissions_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.custom_permissions_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the custom permissions profile.</p>
    pub fn set_custom_permissions_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.custom_permissions_name = input;
        self
    }
    /// <p>The name of the custom permissions profile.</p>
    pub fn get_custom_permissions_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.custom_permissions_name
    }
    /// <p>A set of actions in the custom permissions profile.</p>
    pub fn capabilities(mut self, input: crate::types::Capabilities) -> Self {
        self.capabilities = ::std::option::Option::Some(input);
        self
    }
    /// <p>A set of actions in the custom permissions profile.</p>
    pub fn set_capabilities(mut self, input: ::std::option::Option<crate::types::Capabilities>) -> Self {
        self.capabilities = input;
        self
    }
    /// <p>A set of actions in the custom permissions profile.</p>
    pub fn get_capabilities(&self) -> &::std::option::Option<crate::types::Capabilities> {
        &self.capabilities
    }
    /// Consumes the builder and constructs a [`CustomPermissions`](crate::types::CustomPermissions).
    pub fn build(self) -> crate::types::CustomPermissions {
        crate::types::CustomPermissions {
            arn: self.arn,
            custom_permissions_name: self.custom_permissions_name,
            capabilities: self.capabilities,
        }
    }
}
