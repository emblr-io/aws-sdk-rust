// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains information needed to create a data source connection that uses OAuth client credentials. This option is available for data source connections that are made with Snowflake and Starburst.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OAuthParameters {
    /// <p>The token endpoint URL of the identity provider.</p>
    pub token_provider_url: ::std::string::String,
    /// <p>The OAuth scope.</p>
    pub o_auth_scope: ::std::option::Option<::std::string::String>,
    /// <p>VPC connection properties.</p>
    pub identity_provider_vpc_connection_properties: ::std::option::Option<crate::types::VpcConnectionProperties>,
    /// <p>The resource uri of the identity provider.</p>
    pub identity_provider_resource_uri: ::std::option::Option<::std::string::String>,
}
impl OAuthParameters {
    /// <p>The token endpoint URL of the identity provider.</p>
    pub fn token_provider_url(&self) -> &str {
        use std::ops::Deref;
        self.token_provider_url.deref()
    }
    /// <p>The OAuth scope.</p>
    pub fn o_auth_scope(&self) -> ::std::option::Option<&str> {
        self.o_auth_scope.as_deref()
    }
    /// <p>VPC connection properties.</p>
    pub fn identity_provider_vpc_connection_properties(&self) -> ::std::option::Option<&crate::types::VpcConnectionProperties> {
        self.identity_provider_vpc_connection_properties.as_ref()
    }
    /// <p>The resource uri of the identity provider.</p>
    pub fn identity_provider_resource_uri(&self) -> ::std::option::Option<&str> {
        self.identity_provider_resource_uri.as_deref()
    }
}
impl OAuthParameters {
    /// Creates a new builder-style object to manufacture [`OAuthParameters`](crate::types::OAuthParameters).
    pub fn builder() -> crate::types::builders::OAuthParametersBuilder {
        crate::types::builders::OAuthParametersBuilder::default()
    }
}

/// A builder for [`OAuthParameters`](crate::types::OAuthParameters).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OAuthParametersBuilder {
    pub(crate) token_provider_url: ::std::option::Option<::std::string::String>,
    pub(crate) o_auth_scope: ::std::option::Option<::std::string::String>,
    pub(crate) identity_provider_vpc_connection_properties: ::std::option::Option<crate::types::VpcConnectionProperties>,
    pub(crate) identity_provider_resource_uri: ::std::option::Option<::std::string::String>,
}
impl OAuthParametersBuilder {
    /// <p>The token endpoint URL of the identity provider.</p>
    /// This field is required.
    pub fn token_provider_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.token_provider_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token endpoint URL of the identity provider.</p>
    pub fn set_token_provider_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.token_provider_url = input;
        self
    }
    /// <p>The token endpoint URL of the identity provider.</p>
    pub fn get_token_provider_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.token_provider_url
    }
    /// <p>The OAuth scope.</p>
    pub fn o_auth_scope(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.o_auth_scope = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The OAuth scope.</p>
    pub fn set_o_auth_scope(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.o_auth_scope = input;
        self
    }
    /// <p>The OAuth scope.</p>
    pub fn get_o_auth_scope(&self) -> &::std::option::Option<::std::string::String> {
        &self.o_auth_scope
    }
    /// <p>VPC connection properties.</p>
    pub fn identity_provider_vpc_connection_properties(mut self, input: crate::types::VpcConnectionProperties) -> Self {
        self.identity_provider_vpc_connection_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>VPC connection properties.</p>
    pub fn set_identity_provider_vpc_connection_properties(mut self, input: ::std::option::Option<crate::types::VpcConnectionProperties>) -> Self {
        self.identity_provider_vpc_connection_properties = input;
        self
    }
    /// <p>VPC connection properties.</p>
    pub fn get_identity_provider_vpc_connection_properties(&self) -> &::std::option::Option<crate::types::VpcConnectionProperties> {
        &self.identity_provider_vpc_connection_properties
    }
    /// <p>The resource uri of the identity provider.</p>
    pub fn identity_provider_resource_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity_provider_resource_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource uri of the identity provider.</p>
    pub fn set_identity_provider_resource_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity_provider_resource_uri = input;
        self
    }
    /// <p>The resource uri of the identity provider.</p>
    pub fn get_identity_provider_resource_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity_provider_resource_uri
    }
    /// Consumes the builder and constructs a [`OAuthParameters`](crate::types::OAuthParameters).
    /// This method will fail if any of the following fields are not set:
    /// - [`token_provider_url`](crate::types::builders::OAuthParametersBuilder::token_provider_url)
    pub fn build(self) -> ::std::result::Result<crate::types::OAuthParameters, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OAuthParameters {
            token_provider_url: self.token_provider_url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "token_provider_url",
                    "token_provider_url was not specified but it is required when building OAuthParameters",
                )
            })?,
            o_auth_scope: self.o_auth_scope,
            identity_provider_vpc_connection_properties: self.identity_provider_vpc_connection_properties,
            identity_provider_resource_uri: self.identity_provider_resource_uri,
        })
    }
}
