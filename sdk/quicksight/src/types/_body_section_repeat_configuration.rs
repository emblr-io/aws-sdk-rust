// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configurations that are required to declare a section as repeating.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BodySectionRepeatConfiguration {
    /// <p>List of <code>BodySectionRepeatDimensionConfiguration</code> values that describe the dataset column and constraints for the column used to repeat the contents of a section.</p>
    pub dimension_configurations: ::std::option::Option<::std::vec::Vec<crate::types::BodySectionRepeatDimensionConfiguration>>,
    /// <p>Page break configuration to apply for each repeating instance.</p>
    pub page_break_configuration: ::std::option::Option<crate::types::BodySectionRepeatPageBreakConfiguration>,
    /// <p>List of visuals to exclude from repetition in repeating sections. The visuals will render identically, and ignore the repeating configurations in all repeating instances.</p>
    pub non_repeating_visuals: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl BodySectionRepeatConfiguration {
    /// <p>List of <code>BodySectionRepeatDimensionConfiguration</code> values that describe the dataset column and constraints for the column used to repeat the contents of a section.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dimension_configurations.is_none()`.
    pub fn dimension_configurations(&self) -> &[crate::types::BodySectionRepeatDimensionConfiguration] {
        self.dimension_configurations.as_deref().unwrap_or_default()
    }
    /// <p>Page break configuration to apply for each repeating instance.</p>
    pub fn page_break_configuration(&self) -> ::std::option::Option<&crate::types::BodySectionRepeatPageBreakConfiguration> {
        self.page_break_configuration.as_ref()
    }
    /// <p>List of visuals to exclude from repetition in repeating sections. The visuals will render identically, and ignore the repeating configurations in all repeating instances.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.non_repeating_visuals.is_none()`.
    pub fn non_repeating_visuals(&self) -> &[::std::string::String] {
        self.non_repeating_visuals.as_deref().unwrap_or_default()
    }
}
impl BodySectionRepeatConfiguration {
    /// Creates a new builder-style object to manufacture [`BodySectionRepeatConfiguration`](crate::types::BodySectionRepeatConfiguration).
    pub fn builder() -> crate::types::builders::BodySectionRepeatConfigurationBuilder {
        crate::types::builders::BodySectionRepeatConfigurationBuilder::default()
    }
}

/// A builder for [`BodySectionRepeatConfiguration`](crate::types::BodySectionRepeatConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BodySectionRepeatConfigurationBuilder {
    pub(crate) dimension_configurations: ::std::option::Option<::std::vec::Vec<crate::types::BodySectionRepeatDimensionConfiguration>>,
    pub(crate) page_break_configuration: ::std::option::Option<crate::types::BodySectionRepeatPageBreakConfiguration>,
    pub(crate) non_repeating_visuals: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl BodySectionRepeatConfigurationBuilder {
    /// Appends an item to `dimension_configurations`.
    ///
    /// To override the contents of this collection use [`set_dimension_configurations`](Self::set_dimension_configurations).
    ///
    /// <p>List of <code>BodySectionRepeatDimensionConfiguration</code> values that describe the dataset column and constraints for the column used to repeat the contents of a section.</p>
    pub fn dimension_configurations(mut self, input: crate::types::BodySectionRepeatDimensionConfiguration) -> Self {
        let mut v = self.dimension_configurations.unwrap_or_default();
        v.push(input);
        self.dimension_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of <code>BodySectionRepeatDimensionConfiguration</code> values that describe the dataset column and constraints for the column used to repeat the contents of a section.</p>
    pub fn set_dimension_configurations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::BodySectionRepeatDimensionConfiguration>>,
    ) -> Self {
        self.dimension_configurations = input;
        self
    }
    /// <p>List of <code>BodySectionRepeatDimensionConfiguration</code> values that describe the dataset column and constraints for the column used to repeat the contents of a section.</p>
    pub fn get_dimension_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BodySectionRepeatDimensionConfiguration>> {
        &self.dimension_configurations
    }
    /// <p>Page break configuration to apply for each repeating instance.</p>
    pub fn page_break_configuration(mut self, input: crate::types::BodySectionRepeatPageBreakConfiguration) -> Self {
        self.page_break_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Page break configuration to apply for each repeating instance.</p>
    pub fn set_page_break_configuration(mut self, input: ::std::option::Option<crate::types::BodySectionRepeatPageBreakConfiguration>) -> Self {
        self.page_break_configuration = input;
        self
    }
    /// <p>Page break configuration to apply for each repeating instance.</p>
    pub fn get_page_break_configuration(&self) -> &::std::option::Option<crate::types::BodySectionRepeatPageBreakConfiguration> {
        &self.page_break_configuration
    }
    /// Appends an item to `non_repeating_visuals`.
    ///
    /// To override the contents of this collection use [`set_non_repeating_visuals`](Self::set_non_repeating_visuals).
    ///
    /// <p>List of visuals to exclude from repetition in repeating sections. The visuals will render identically, and ignore the repeating configurations in all repeating instances.</p>
    pub fn non_repeating_visuals(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.non_repeating_visuals.unwrap_or_default();
        v.push(input.into());
        self.non_repeating_visuals = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of visuals to exclude from repetition in repeating sections. The visuals will render identically, and ignore the repeating configurations in all repeating instances.</p>
    pub fn set_non_repeating_visuals(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.non_repeating_visuals = input;
        self
    }
    /// <p>List of visuals to exclude from repetition in repeating sections. The visuals will render identically, and ignore the repeating configurations in all repeating instances.</p>
    pub fn get_non_repeating_visuals(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.non_repeating_visuals
    }
    /// Consumes the builder and constructs a [`BodySectionRepeatConfiguration`](crate::types::BodySectionRepeatConfiguration).
    pub fn build(self) -> crate::types::BodySectionRepeatConfiguration {
        crate::types::BodySectionRepeatConfiguration {
            dimension_configurations: self.dimension_configurations,
            page_break_configuration: self.page_break_configuration,
            non_repeating_visuals: self.non_repeating_visuals,
        }
    }
}
