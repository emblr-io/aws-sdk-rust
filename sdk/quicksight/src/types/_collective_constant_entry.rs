// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition for a <code>CollectiveConstantEntry</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CollectiveConstantEntry {
    /// <p>The <code>ConstantType</code> of a <code>CollectiveConstantEntry</code>.</p>
    pub constant_type: ::std::option::Option<crate::types::ConstantType>,
    /// <p>The value of a <code>CollectiveConstantEntry</code>.</p>
    pub value: ::std::option::Option<::std::string::String>,
}
impl CollectiveConstantEntry {
    /// <p>The <code>ConstantType</code> of a <code>CollectiveConstantEntry</code>.</p>
    pub fn constant_type(&self) -> ::std::option::Option<&crate::types::ConstantType> {
        self.constant_type.as_ref()
    }
    /// <p>The value of a <code>CollectiveConstantEntry</code>.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl CollectiveConstantEntry {
    /// Creates a new builder-style object to manufacture [`CollectiveConstantEntry`](crate::types::CollectiveConstantEntry).
    pub fn builder() -> crate::types::builders::CollectiveConstantEntryBuilder {
        crate::types::builders::CollectiveConstantEntryBuilder::default()
    }
}

/// A builder for [`CollectiveConstantEntry`](crate::types::CollectiveConstantEntry).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CollectiveConstantEntryBuilder {
    pub(crate) constant_type: ::std::option::Option<crate::types::ConstantType>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl CollectiveConstantEntryBuilder {
    /// <p>The <code>ConstantType</code> of a <code>CollectiveConstantEntry</code>.</p>
    pub fn constant_type(mut self, input: crate::types::ConstantType) -> Self {
        self.constant_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>ConstantType</code> of a <code>CollectiveConstantEntry</code>.</p>
    pub fn set_constant_type(mut self, input: ::std::option::Option<crate::types::ConstantType>) -> Self {
        self.constant_type = input;
        self
    }
    /// <p>The <code>ConstantType</code> of a <code>CollectiveConstantEntry</code>.</p>
    pub fn get_constant_type(&self) -> &::std::option::Option<crate::types::ConstantType> {
        &self.constant_type
    }
    /// <p>The value of a <code>CollectiveConstantEntry</code>.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of a <code>CollectiveConstantEntry</code>.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of a <code>CollectiveConstantEntry</code>.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`CollectiveConstantEntry`](crate::types::CollectiveConstantEntry).
    pub fn build(self) -> crate::types::CollectiveConstantEntry {
        crate::types::CollectiveConstantEntry {
            constant_type: self.constant_type,
            value: self.value,
        }
    }
}
