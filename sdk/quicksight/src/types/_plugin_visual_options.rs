// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options and persisted properties for the plugin visual.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PluginVisualOptions {
    /// <p>The persisted properties and their values.</p>
    pub visual_properties: ::std::option::Option<::std::vec::Vec<crate::types::PluginVisualProperty>>,
}
impl PluginVisualOptions {
    /// <p>The persisted properties and their values.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.visual_properties.is_none()`.
    pub fn visual_properties(&self) -> &[crate::types::PluginVisualProperty] {
        self.visual_properties.as_deref().unwrap_or_default()
    }
}
impl PluginVisualOptions {
    /// Creates a new builder-style object to manufacture [`PluginVisualOptions`](crate::types::PluginVisualOptions).
    pub fn builder() -> crate::types::builders::PluginVisualOptionsBuilder {
        crate::types::builders::PluginVisualOptionsBuilder::default()
    }
}

/// A builder for [`PluginVisualOptions`](crate::types::PluginVisualOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PluginVisualOptionsBuilder {
    pub(crate) visual_properties: ::std::option::Option<::std::vec::Vec<crate::types::PluginVisualProperty>>,
}
impl PluginVisualOptionsBuilder {
    /// Appends an item to `visual_properties`.
    ///
    /// To override the contents of this collection use [`set_visual_properties`](Self::set_visual_properties).
    ///
    /// <p>The persisted properties and their values.</p>
    pub fn visual_properties(mut self, input: crate::types::PluginVisualProperty) -> Self {
        let mut v = self.visual_properties.unwrap_or_default();
        v.push(input);
        self.visual_properties = ::std::option::Option::Some(v);
        self
    }
    /// <p>The persisted properties and their values.</p>
    pub fn set_visual_properties(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PluginVisualProperty>>) -> Self {
        self.visual_properties = input;
        self
    }
    /// <p>The persisted properties and their values.</p>
    pub fn get_visual_properties(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PluginVisualProperty>> {
        &self.visual_properties
    }
    /// Consumes the builder and constructs a [`PluginVisualOptions`](crate::types::PluginVisualOptions).
    pub fn build(self) -> crate::types::PluginVisualOptions {
        crate::types::PluginVisualOptions {
            visual_properties: self.visual_properties,
        }
    }
}
