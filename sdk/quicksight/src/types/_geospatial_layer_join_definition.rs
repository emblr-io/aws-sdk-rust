// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The custom actions for a layer.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeospatialLayerJoinDefinition {
    /// <p>The name of the field or property in the geospatial data source.</p>
    pub shape_key_field: ::std::option::Option<::std::string::String>,
    /// <p>The unaggregated field for a table.</p>
    pub dataset_key_field: ::std::option::Option<crate::types::UnaggregatedField>,
    /// <p>The geospatial color field for the join definition.</p>
    pub color_field: ::std::option::Option<crate::types::GeospatialLayerColorField>,
}
impl GeospatialLayerJoinDefinition {
    /// <p>The name of the field or property in the geospatial data source.</p>
    pub fn shape_key_field(&self) -> ::std::option::Option<&str> {
        self.shape_key_field.as_deref()
    }
    /// <p>The unaggregated field for a table.</p>
    pub fn dataset_key_field(&self) -> ::std::option::Option<&crate::types::UnaggregatedField> {
        self.dataset_key_field.as_ref()
    }
    /// <p>The geospatial color field for the join definition.</p>
    pub fn color_field(&self) -> ::std::option::Option<&crate::types::GeospatialLayerColorField> {
        self.color_field.as_ref()
    }
}
impl GeospatialLayerJoinDefinition {
    /// Creates a new builder-style object to manufacture [`GeospatialLayerJoinDefinition`](crate::types::GeospatialLayerJoinDefinition).
    pub fn builder() -> crate::types::builders::GeospatialLayerJoinDefinitionBuilder {
        crate::types::builders::GeospatialLayerJoinDefinitionBuilder::default()
    }
}

/// A builder for [`GeospatialLayerJoinDefinition`](crate::types::GeospatialLayerJoinDefinition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GeospatialLayerJoinDefinitionBuilder {
    pub(crate) shape_key_field: ::std::option::Option<::std::string::String>,
    pub(crate) dataset_key_field: ::std::option::Option<crate::types::UnaggregatedField>,
    pub(crate) color_field: ::std::option::Option<crate::types::GeospatialLayerColorField>,
}
impl GeospatialLayerJoinDefinitionBuilder {
    /// <p>The name of the field or property in the geospatial data source.</p>
    pub fn shape_key_field(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.shape_key_field = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the field or property in the geospatial data source.</p>
    pub fn set_shape_key_field(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.shape_key_field = input;
        self
    }
    /// <p>The name of the field or property in the geospatial data source.</p>
    pub fn get_shape_key_field(&self) -> &::std::option::Option<::std::string::String> {
        &self.shape_key_field
    }
    /// <p>The unaggregated field for a table.</p>
    pub fn dataset_key_field(mut self, input: crate::types::UnaggregatedField) -> Self {
        self.dataset_key_field = ::std::option::Option::Some(input);
        self
    }
    /// <p>The unaggregated field for a table.</p>
    pub fn set_dataset_key_field(mut self, input: ::std::option::Option<crate::types::UnaggregatedField>) -> Self {
        self.dataset_key_field = input;
        self
    }
    /// <p>The unaggregated field for a table.</p>
    pub fn get_dataset_key_field(&self) -> &::std::option::Option<crate::types::UnaggregatedField> {
        &self.dataset_key_field
    }
    /// <p>The geospatial color field for the join definition.</p>
    pub fn color_field(mut self, input: crate::types::GeospatialLayerColorField) -> Self {
        self.color_field = ::std::option::Option::Some(input);
        self
    }
    /// <p>The geospatial color field for the join definition.</p>
    pub fn set_color_field(mut self, input: ::std::option::Option<crate::types::GeospatialLayerColorField>) -> Self {
        self.color_field = input;
        self
    }
    /// <p>The geospatial color field for the join definition.</p>
    pub fn get_color_field(&self) -> &::std::option::Option<crate::types::GeospatialLayerColorField> {
        &self.color_field
    }
    /// Consumes the builder and constructs a [`GeospatialLayerJoinDefinition`](crate::types::GeospatialLayerJoinDefinition).
    pub fn build(self) -> crate::types::GeospatialLayerJoinDefinition {
        crate::types::GeospatialLayerJoinDefinition {
            shape_key_field: self.shape_key_field,
            dataset_key_field: self.dataset_key_field,
            color_field: self.color_field,
        }
    }
}
