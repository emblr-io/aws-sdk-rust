// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The visualization properties for solid, gradient, and categorical colors.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeospatialColor {
    /// <p>The visualization properties for the solid color.</p>
    pub solid: ::std::option::Option<crate::types::GeospatialSolidColor>,
    /// <p>The visualization properties for the gradient color.</p>
    pub gradient: ::std::option::Option<crate::types::GeospatialGradientColor>,
    /// <p>The visualization properties for the categorical color.</p>
    pub categorical: ::std::option::Option<crate::types::GeospatialCategoricalColor>,
}
impl GeospatialColor {
    /// <p>The visualization properties for the solid color.</p>
    pub fn solid(&self) -> ::std::option::Option<&crate::types::GeospatialSolidColor> {
        self.solid.as_ref()
    }
    /// <p>The visualization properties for the gradient color.</p>
    pub fn gradient(&self) -> ::std::option::Option<&crate::types::GeospatialGradientColor> {
        self.gradient.as_ref()
    }
    /// <p>The visualization properties for the categorical color.</p>
    pub fn categorical(&self) -> ::std::option::Option<&crate::types::GeospatialCategoricalColor> {
        self.categorical.as_ref()
    }
}
impl GeospatialColor {
    /// Creates a new builder-style object to manufacture [`GeospatialColor`](crate::types::GeospatialColor).
    pub fn builder() -> crate::types::builders::GeospatialColorBuilder {
        crate::types::builders::GeospatialColorBuilder::default()
    }
}

/// A builder for [`GeospatialColor`](crate::types::GeospatialColor).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GeospatialColorBuilder {
    pub(crate) solid: ::std::option::Option<crate::types::GeospatialSolidColor>,
    pub(crate) gradient: ::std::option::Option<crate::types::GeospatialGradientColor>,
    pub(crate) categorical: ::std::option::Option<crate::types::GeospatialCategoricalColor>,
}
impl GeospatialColorBuilder {
    /// <p>The visualization properties for the solid color.</p>
    pub fn solid(mut self, input: crate::types::GeospatialSolidColor) -> Self {
        self.solid = ::std::option::Option::Some(input);
        self
    }
    /// <p>The visualization properties for the solid color.</p>
    pub fn set_solid(mut self, input: ::std::option::Option<crate::types::GeospatialSolidColor>) -> Self {
        self.solid = input;
        self
    }
    /// <p>The visualization properties for the solid color.</p>
    pub fn get_solid(&self) -> &::std::option::Option<crate::types::GeospatialSolidColor> {
        &self.solid
    }
    /// <p>The visualization properties for the gradient color.</p>
    pub fn gradient(mut self, input: crate::types::GeospatialGradientColor) -> Self {
        self.gradient = ::std::option::Option::Some(input);
        self
    }
    /// <p>The visualization properties for the gradient color.</p>
    pub fn set_gradient(mut self, input: ::std::option::Option<crate::types::GeospatialGradientColor>) -> Self {
        self.gradient = input;
        self
    }
    /// <p>The visualization properties for the gradient color.</p>
    pub fn get_gradient(&self) -> &::std::option::Option<crate::types::GeospatialGradientColor> {
        &self.gradient
    }
    /// <p>The visualization properties for the categorical color.</p>
    pub fn categorical(mut self, input: crate::types::GeospatialCategoricalColor) -> Self {
        self.categorical = ::std::option::Option::Some(input);
        self
    }
    /// <p>The visualization properties for the categorical color.</p>
    pub fn set_categorical(mut self, input: ::std::option::Option<crate::types::GeospatialCategoricalColor>) -> Self {
        self.categorical = input;
        self
    }
    /// <p>The visualization properties for the categorical color.</p>
    pub fn get_categorical(&self) -> &::std::option::Option<crate::types::GeospatialCategoricalColor> {
        &self.categorical
    }
    /// Consumes the builder and constructs a [`GeospatialColor`](crate::types::GeospatialColor).
    pub fn build(self) -> crate::types::GeospatialColor {
        crate::types::GeospatialColor {
            solid: self.solid,
            gradient: self.gradient,
            categorical: self.categorical,
        }
    }
}
