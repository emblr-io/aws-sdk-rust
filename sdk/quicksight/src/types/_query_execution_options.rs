// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that describes the query execution options.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QueryExecutionOptions {
    /// <p>A structure that describes the query execution mode.</p>
    pub query_execution_mode: ::std::option::Option<crate::types::QueryExecutionMode>,
}
impl QueryExecutionOptions {
    /// <p>A structure that describes the query execution mode.</p>
    pub fn query_execution_mode(&self) -> ::std::option::Option<&crate::types::QueryExecutionMode> {
        self.query_execution_mode.as_ref()
    }
}
impl QueryExecutionOptions {
    /// Creates a new builder-style object to manufacture [`QueryExecutionOptions`](crate::types::QueryExecutionOptions).
    pub fn builder() -> crate::types::builders::QueryExecutionOptionsBuilder {
        crate::types::builders::QueryExecutionOptionsBuilder::default()
    }
}

/// A builder for [`QueryExecutionOptions`](crate::types::QueryExecutionOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QueryExecutionOptionsBuilder {
    pub(crate) query_execution_mode: ::std::option::Option<crate::types::QueryExecutionMode>,
}
impl QueryExecutionOptionsBuilder {
    /// <p>A structure that describes the query execution mode.</p>
    pub fn query_execution_mode(mut self, input: crate::types::QueryExecutionMode) -> Self {
        self.query_execution_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that describes the query execution mode.</p>
    pub fn set_query_execution_mode(mut self, input: ::std::option::Option<crate::types::QueryExecutionMode>) -> Self {
        self.query_execution_mode = input;
        self
    }
    /// <p>A structure that describes the query execution mode.</p>
    pub fn get_query_execution_mode(&self) -> &::std::option::Option<crate::types::QueryExecutionMode> {
        &self.query_execution_mode
    }
    /// Consumes the builder and constructs a [`QueryExecutionOptions`](crate::types::QueryExecutionOptions).
    pub fn build(self) -> crate::types::QueryExecutionOptions {
        crate::types::QueryExecutionOptions {
            query_execution_mode: self.query_execution_mode,
        }
    }
}
