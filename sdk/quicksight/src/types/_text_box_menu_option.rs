// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The menu options for the interactions of a textbox.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TextBoxMenuOption {
    /// <p>The availability status of the textbox menu. If the value of this property is set to <code>ENABLED</code>, dashboard readers can interact with the textbox menu.</p>
    pub availability_status: ::std::option::Option<crate::types::DashboardBehavior>,
}
impl TextBoxMenuOption {
    /// <p>The availability status of the textbox menu. If the value of this property is set to <code>ENABLED</code>, dashboard readers can interact with the textbox menu.</p>
    pub fn availability_status(&self) -> ::std::option::Option<&crate::types::DashboardBehavior> {
        self.availability_status.as_ref()
    }
}
impl TextBoxMenuOption {
    /// Creates a new builder-style object to manufacture [`TextBoxMenuOption`](crate::types::TextBoxMenuOption).
    pub fn builder() -> crate::types::builders::TextBoxMenuOptionBuilder {
        crate::types::builders::TextBoxMenuOptionBuilder::default()
    }
}

/// A builder for [`TextBoxMenuOption`](crate::types::TextBoxMenuOption).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TextBoxMenuOptionBuilder {
    pub(crate) availability_status: ::std::option::Option<crate::types::DashboardBehavior>,
}
impl TextBoxMenuOptionBuilder {
    /// <p>The availability status of the textbox menu. If the value of this property is set to <code>ENABLED</code>, dashboard readers can interact with the textbox menu.</p>
    pub fn availability_status(mut self, input: crate::types::DashboardBehavior) -> Self {
        self.availability_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The availability status of the textbox menu. If the value of this property is set to <code>ENABLED</code>, dashboard readers can interact with the textbox menu.</p>
    pub fn set_availability_status(mut self, input: ::std::option::Option<crate::types::DashboardBehavior>) -> Self {
        self.availability_status = input;
        self
    }
    /// <p>The availability status of the textbox menu. If the value of this property is set to <code>ENABLED</code>, dashboard readers can interact with the textbox menu.</p>
    pub fn get_availability_status(&self) -> &::std::option::Option<crate::types::DashboardBehavior> {
        &self.availability_status
    }
    /// Consumes the builder and constructs a [`TextBoxMenuOption`](crate::types::TextBoxMenuOption).
    pub fn build(self) -> crate::types::TextBoxMenuOption {
        crate::types::TextBoxMenuOption {
            availability_status: self.availability_status,
        }
    }
}
