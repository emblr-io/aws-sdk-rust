// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition of an Agg function.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AggFunction {
    /// <p>The aggregation of an Agg function.</p>
    pub aggregation: ::std::option::Option<crate::types::AggType>,
    /// <p>The aggregation parameters for an Agg function.</p>
    pub aggregation_function_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The period of an Agg function.</p>
    pub period: ::std::option::Option<crate::types::TopicTimeGranularity>,
    /// <p>The period field for an Agg function.</p>
    pub period_field: ::std::option::Option<::std::string::String>,
}
impl AggFunction {
    /// <p>The aggregation of an Agg function.</p>
    pub fn aggregation(&self) -> ::std::option::Option<&crate::types::AggType> {
        self.aggregation.as_ref()
    }
    /// <p>The aggregation parameters for an Agg function.</p>
    pub fn aggregation_function_parameters(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.aggregation_function_parameters.as_ref()
    }
    /// <p>The period of an Agg function.</p>
    pub fn period(&self) -> ::std::option::Option<&crate::types::TopicTimeGranularity> {
        self.period.as_ref()
    }
    /// <p>The period field for an Agg function.</p>
    pub fn period_field(&self) -> ::std::option::Option<&str> {
        self.period_field.as_deref()
    }
}
impl AggFunction {
    /// Creates a new builder-style object to manufacture [`AggFunction`](crate::types::AggFunction).
    pub fn builder() -> crate::types::builders::AggFunctionBuilder {
        crate::types::builders::AggFunctionBuilder::default()
    }
}

/// A builder for [`AggFunction`](crate::types::AggFunction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AggFunctionBuilder {
    pub(crate) aggregation: ::std::option::Option<crate::types::AggType>,
    pub(crate) aggregation_function_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) period: ::std::option::Option<crate::types::TopicTimeGranularity>,
    pub(crate) period_field: ::std::option::Option<::std::string::String>,
}
impl AggFunctionBuilder {
    /// <p>The aggregation of an Agg function.</p>
    pub fn aggregation(mut self, input: crate::types::AggType) -> Self {
        self.aggregation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The aggregation of an Agg function.</p>
    pub fn set_aggregation(mut self, input: ::std::option::Option<crate::types::AggType>) -> Self {
        self.aggregation = input;
        self
    }
    /// <p>The aggregation of an Agg function.</p>
    pub fn get_aggregation(&self) -> &::std::option::Option<crate::types::AggType> {
        &self.aggregation
    }
    /// Adds a key-value pair to `aggregation_function_parameters`.
    ///
    /// To override the contents of this collection use [`set_aggregation_function_parameters`](Self::set_aggregation_function_parameters).
    ///
    /// <p>The aggregation parameters for an Agg function.</p>
    pub fn aggregation_function_parameters(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.aggregation_function_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.aggregation_function_parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The aggregation parameters for an Agg function.</p>
    pub fn set_aggregation_function_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.aggregation_function_parameters = input;
        self
    }
    /// <p>The aggregation parameters for an Agg function.</p>
    pub fn get_aggregation_function_parameters(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.aggregation_function_parameters
    }
    /// <p>The period of an Agg function.</p>
    pub fn period(mut self, input: crate::types::TopicTimeGranularity) -> Self {
        self.period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The period of an Agg function.</p>
    pub fn set_period(mut self, input: ::std::option::Option<crate::types::TopicTimeGranularity>) -> Self {
        self.period = input;
        self
    }
    /// <p>The period of an Agg function.</p>
    pub fn get_period(&self) -> &::std::option::Option<crate::types::TopicTimeGranularity> {
        &self.period
    }
    /// <p>The period field for an Agg function.</p>
    pub fn period_field(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.period_field = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The period field for an Agg function.</p>
    pub fn set_period_field(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.period_field = input;
        self
    }
    /// <p>The period field for an Agg function.</p>
    pub fn get_period_field(&self) -> &::std::option::Option<::std::string::String> {
        &self.period_field
    }
    /// Consumes the builder and constructs a [`AggFunction`](crate::types::AggFunction).
    pub fn build(self) -> crate::types::AggFunction {
        crate::types::AggFunction {
            aggregation: self.aggregation,
            aggregation_function_parameters: self.aggregation_function_parameters,
            period: self.period,
            period_field: self.period_field,
        }
    }
}
