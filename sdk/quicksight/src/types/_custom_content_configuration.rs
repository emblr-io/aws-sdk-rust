// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of a <code>CustomContentVisual</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomContentConfiguration {
    /// <p>The input URL that links to the custom content that you want in the custom visual.</p>
    pub content_url: ::std::option::Option<::std::string::String>,
    /// <p>The content type of the custom content visual. You can use this to have the visual render as an image.</p>
    pub content_type: ::std::option::Option<crate::types::CustomContentType>,
    /// <p>The sizing options for the size of the custom content visual. This structure is required when the <code>ContentType</code> of the visual is <code>'IMAGE'</code>.</p>
    pub image_scaling: ::std::option::Option<crate::types::CustomContentImageScalingConfiguration>,
    /// <p>The general visual interactions setup for a visual.</p>
    pub interactions: ::std::option::Option<crate::types::VisualInteractionOptions>,
}
impl CustomContentConfiguration {
    /// <p>The input URL that links to the custom content that you want in the custom visual.</p>
    pub fn content_url(&self) -> ::std::option::Option<&str> {
        self.content_url.as_deref()
    }
    /// <p>The content type of the custom content visual. You can use this to have the visual render as an image.</p>
    pub fn content_type(&self) -> ::std::option::Option<&crate::types::CustomContentType> {
        self.content_type.as_ref()
    }
    /// <p>The sizing options for the size of the custom content visual. This structure is required when the <code>ContentType</code> of the visual is <code>'IMAGE'</code>.</p>
    pub fn image_scaling(&self) -> ::std::option::Option<&crate::types::CustomContentImageScalingConfiguration> {
        self.image_scaling.as_ref()
    }
    /// <p>The general visual interactions setup for a visual.</p>
    pub fn interactions(&self) -> ::std::option::Option<&crate::types::VisualInteractionOptions> {
        self.interactions.as_ref()
    }
}
impl CustomContentConfiguration {
    /// Creates a new builder-style object to manufacture [`CustomContentConfiguration`](crate::types::CustomContentConfiguration).
    pub fn builder() -> crate::types::builders::CustomContentConfigurationBuilder {
        crate::types::builders::CustomContentConfigurationBuilder::default()
    }
}

/// A builder for [`CustomContentConfiguration`](crate::types::CustomContentConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CustomContentConfigurationBuilder {
    pub(crate) content_url: ::std::option::Option<::std::string::String>,
    pub(crate) content_type: ::std::option::Option<crate::types::CustomContentType>,
    pub(crate) image_scaling: ::std::option::Option<crate::types::CustomContentImageScalingConfiguration>,
    pub(crate) interactions: ::std::option::Option<crate::types::VisualInteractionOptions>,
}
impl CustomContentConfigurationBuilder {
    /// <p>The input URL that links to the custom content that you want in the custom visual.</p>
    pub fn content_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The input URL that links to the custom content that you want in the custom visual.</p>
    pub fn set_content_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_url = input;
        self
    }
    /// <p>The input URL that links to the custom content that you want in the custom visual.</p>
    pub fn get_content_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_url
    }
    /// <p>The content type of the custom content visual. You can use this to have the visual render as an image.</p>
    pub fn content_type(mut self, input: crate::types::CustomContentType) -> Self {
        self.content_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The content type of the custom content visual. You can use this to have the visual render as an image.</p>
    pub fn set_content_type(mut self, input: ::std::option::Option<crate::types::CustomContentType>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>The content type of the custom content visual. You can use this to have the visual render as an image.</p>
    pub fn get_content_type(&self) -> &::std::option::Option<crate::types::CustomContentType> {
        &self.content_type
    }
    /// <p>The sizing options for the size of the custom content visual. This structure is required when the <code>ContentType</code> of the visual is <code>'IMAGE'</code>.</p>
    pub fn image_scaling(mut self, input: crate::types::CustomContentImageScalingConfiguration) -> Self {
        self.image_scaling = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sizing options for the size of the custom content visual. This structure is required when the <code>ContentType</code> of the visual is <code>'IMAGE'</code>.</p>
    pub fn set_image_scaling(mut self, input: ::std::option::Option<crate::types::CustomContentImageScalingConfiguration>) -> Self {
        self.image_scaling = input;
        self
    }
    /// <p>The sizing options for the size of the custom content visual. This structure is required when the <code>ContentType</code> of the visual is <code>'IMAGE'</code>.</p>
    pub fn get_image_scaling(&self) -> &::std::option::Option<crate::types::CustomContentImageScalingConfiguration> {
        &self.image_scaling
    }
    /// <p>The general visual interactions setup for a visual.</p>
    pub fn interactions(mut self, input: crate::types::VisualInteractionOptions) -> Self {
        self.interactions = ::std::option::Option::Some(input);
        self
    }
    /// <p>The general visual interactions setup for a visual.</p>
    pub fn set_interactions(mut self, input: ::std::option::Option<crate::types::VisualInteractionOptions>) -> Self {
        self.interactions = input;
        self
    }
    /// <p>The general visual interactions setup for a visual.</p>
    pub fn get_interactions(&self) -> &::std::option::Option<crate::types::VisualInteractionOptions> {
        &self.interactions
    }
    /// Consumes the builder and constructs a [`CustomContentConfiguration`](crate::types::CustomContentConfiguration).
    pub fn build(self) -> crate::types::CustomContentConfiguration {
        crate::types::CustomContentConfiguration {
            content_url: self.content_url,
            content_type: self.content_type,
            image_scaling: self.image_scaling,
            interactions: self.interactions,
        }
    }
}
