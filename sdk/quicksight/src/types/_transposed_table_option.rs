// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The column option of the transposed table.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TransposedTableOption {
    /// <p>The index of a columns in a transposed table. The index range is 0-9999.</p>
    pub column_index: ::std::option::Option<i32>,
    /// <p>The width of a column in a transposed table.</p>
    pub column_width: ::std::option::Option<::std::string::String>,
    /// <p>The column type of the column in a transposed table. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>ROW_HEADER_COLUMN</code>: Refers to the leftmost column of the row header in the transposed table.</p></li>
    /// <li>
    /// <p><code>VALUE_COLUMN</code>: Refers to all value columns in the transposed table.</p></li>
    /// </ul>
    pub column_type: crate::types::TransposedColumnType,
}
impl TransposedTableOption {
    /// <p>The index of a columns in a transposed table. The index range is 0-9999.</p>
    pub fn column_index(&self) -> ::std::option::Option<i32> {
        self.column_index
    }
    /// <p>The width of a column in a transposed table.</p>
    pub fn column_width(&self) -> ::std::option::Option<&str> {
        self.column_width.as_deref()
    }
    /// <p>The column type of the column in a transposed table. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>ROW_HEADER_COLUMN</code>: Refers to the leftmost column of the row header in the transposed table.</p></li>
    /// <li>
    /// <p><code>VALUE_COLUMN</code>: Refers to all value columns in the transposed table.</p></li>
    /// </ul>
    pub fn column_type(&self) -> &crate::types::TransposedColumnType {
        &self.column_type
    }
}
impl TransposedTableOption {
    /// Creates a new builder-style object to manufacture [`TransposedTableOption`](crate::types::TransposedTableOption).
    pub fn builder() -> crate::types::builders::TransposedTableOptionBuilder {
        crate::types::builders::TransposedTableOptionBuilder::default()
    }
}

/// A builder for [`TransposedTableOption`](crate::types::TransposedTableOption).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TransposedTableOptionBuilder {
    pub(crate) column_index: ::std::option::Option<i32>,
    pub(crate) column_width: ::std::option::Option<::std::string::String>,
    pub(crate) column_type: ::std::option::Option<crate::types::TransposedColumnType>,
}
impl TransposedTableOptionBuilder {
    /// <p>The index of a columns in a transposed table. The index range is 0-9999.</p>
    pub fn column_index(mut self, input: i32) -> Self {
        self.column_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>The index of a columns in a transposed table. The index range is 0-9999.</p>
    pub fn set_column_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.column_index = input;
        self
    }
    /// <p>The index of a columns in a transposed table. The index range is 0-9999.</p>
    pub fn get_column_index(&self) -> &::std::option::Option<i32> {
        &self.column_index
    }
    /// <p>The width of a column in a transposed table.</p>
    pub fn column_width(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.column_width = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The width of a column in a transposed table.</p>
    pub fn set_column_width(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.column_width = input;
        self
    }
    /// <p>The width of a column in a transposed table.</p>
    pub fn get_column_width(&self) -> &::std::option::Option<::std::string::String> {
        &self.column_width
    }
    /// <p>The column type of the column in a transposed table. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>ROW_HEADER_COLUMN</code>: Refers to the leftmost column of the row header in the transposed table.</p></li>
    /// <li>
    /// <p><code>VALUE_COLUMN</code>: Refers to all value columns in the transposed table.</p></li>
    /// </ul>
    /// This field is required.
    pub fn column_type(mut self, input: crate::types::TransposedColumnType) -> Self {
        self.column_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The column type of the column in a transposed table. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>ROW_HEADER_COLUMN</code>: Refers to the leftmost column of the row header in the transposed table.</p></li>
    /// <li>
    /// <p><code>VALUE_COLUMN</code>: Refers to all value columns in the transposed table.</p></li>
    /// </ul>
    pub fn set_column_type(mut self, input: ::std::option::Option<crate::types::TransposedColumnType>) -> Self {
        self.column_type = input;
        self
    }
    /// <p>The column type of the column in a transposed table. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>ROW_HEADER_COLUMN</code>: Refers to the leftmost column of the row header in the transposed table.</p></li>
    /// <li>
    /// <p><code>VALUE_COLUMN</code>: Refers to all value columns in the transposed table.</p></li>
    /// </ul>
    pub fn get_column_type(&self) -> &::std::option::Option<crate::types::TransposedColumnType> {
        &self.column_type
    }
    /// Consumes the builder and constructs a [`TransposedTableOption`](crate::types::TransposedTableOption).
    /// This method will fail if any of the following fields are not set:
    /// - [`column_type`](crate::types::builders::TransposedTableOptionBuilder::column_type)
    pub fn build(self) -> ::std::result::Result<crate::types::TransposedTableOption, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TransposedTableOption {
            column_index: self.column_index,
            column_width: self.column_width,
            column_type: self.column_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "column_type",
                    "column_type was not specified but it is required when building TransposedTableOption",
                )
            })?,
        })
    }
}
