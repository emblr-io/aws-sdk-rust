// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The tooltip configuration for a sheet image.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SheetImageTooltipConfiguration {
    /// <p>The text that appears in the tooltip.</p>
    pub tooltip_text: ::std::option::Option<crate::types::SheetImageTooltipText>,
    /// <p>The visibility of the tooltip.</p>
    pub visibility: ::std::option::Option<crate::types::Visibility>,
}
impl SheetImageTooltipConfiguration {
    /// <p>The text that appears in the tooltip.</p>
    pub fn tooltip_text(&self) -> ::std::option::Option<&crate::types::SheetImageTooltipText> {
        self.tooltip_text.as_ref()
    }
    /// <p>The visibility of the tooltip.</p>
    pub fn visibility(&self) -> ::std::option::Option<&crate::types::Visibility> {
        self.visibility.as_ref()
    }
}
impl SheetImageTooltipConfiguration {
    /// Creates a new builder-style object to manufacture [`SheetImageTooltipConfiguration`](crate::types::SheetImageTooltipConfiguration).
    pub fn builder() -> crate::types::builders::SheetImageTooltipConfigurationBuilder {
        crate::types::builders::SheetImageTooltipConfigurationBuilder::default()
    }
}

/// A builder for [`SheetImageTooltipConfiguration`](crate::types::SheetImageTooltipConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SheetImageTooltipConfigurationBuilder {
    pub(crate) tooltip_text: ::std::option::Option<crate::types::SheetImageTooltipText>,
    pub(crate) visibility: ::std::option::Option<crate::types::Visibility>,
}
impl SheetImageTooltipConfigurationBuilder {
    /// <p>The text that appears in the tooltip.</p>
    pub fn tooltip_text(mut self, input: crate::types::SheetImageTooltipText) -> Self {
        self.tooltip_text = ::std::option::Option::Some(input);
        self
    }
    /// <p>The text that appears in the tooltip.</p>
    pub fn set_tooltip_text(mut self, input: ::std::option::Option<crate::types::SheetImageTooltipText>) -> Self {
        self.tooltip_text = input;
        self
    }
    /// <p>The text that appears in the tooltip.</p>
    pub fn get_tooltip_text(&self) -> &::std::option::Option<crate::types::SheetImageTooltipText> {
        &self.tooltip_text
    }
    /// <p>The visibility of the tooltip.</p>
    pub fn visibility(mut self, input: crate::types::Visibility) -> Self {
        self.visibility = ::std::option::Option::Some(input);
        self
    }
    /// <p>The visibility of the tooltip.</p>
    pub fn set_visibility(mut self, input: ::std::option::Option<crate::types::Visibility>) -> Self {
        self.visibility = input;
        self
    }
    /// <p>The visibility of the tooltip.</p>
    pub fn get_visibility(&self) -> &::std::option::Option<crate::types::Visibility> {
        &self.visibility
    }
    /// Consumes the builder and constructs a [`SheetImageTooltipConfiguration`](crate::types::SheetImageTooltipConfiguration).
    pub fn build(self) -> crate::types::SheetImageTooltipConfiguration {
        crate::types::SheetImageTooltipConfiguration {
            tooltip_text: self.tooltip_text,
            visibility: self.visibility,
        }
    }
}
