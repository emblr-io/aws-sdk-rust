// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition for a <code>TopicIRContributionAnalysis</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TopicIrContributionAnalysis {
    /// <p>The factors for a <code>TopicIRContributionAnalysis</code>.</p>
    pub factors: ::std::option::Option<::std::vec::Vec<crate::types::ContributionAnalysisFactor>>,
    /// <p>The time ranges for the <code>TopicIRContributionAnalysis</code>.</p>
    pub time_ranges: ::std::option::Option<crate::types::ContributionAnalysisTimeRanges>,
    /// <p>The direction for the <code>TopicIRContributionAnalysis</code>.</p>
    pub direction: ::std::option::Option<crate::types::ContributionAnalysisDirection>,
    /// <p>The sort type for the <code>TopicIRContributionAnalysis</code>.</p>
    pub sort_type: ::std::option::Option<crate::types::ContributionAnalysisSortType>,
}
impl TopicIrContributionAnalysis {
    /// <p>The factors for a <code>TopicIRContributionAnalysis</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.factors.is_none()`.
    pub fn factors(&self) -> &[crate::types::ContributionAnalysisFactor] {
        self.factors.as_deref().unwrap_or_default()
    }
    /// <p>The time ranges for the <code>TopicIRContributionAnalysis</code>.</p>
    pub fn time_ranges(&self) -> ::std::option::Option<&crate::types::ContributionAnalysisTimeRanges> {
        self.time_ranges.as_ref()
    }
    /// <p>The direction for the <code>TopicIRContributionAnalysis</code>.</p>
    pub fn direction(&self) -> ::std::option::Option<&crate::types::ContributionAnalysisDirection> {
        self.direction.as_ref()
    }
    /// <p>The sort type for the <code>TopicIRContributionAnalysis</code>.</p>
    pub fn sort_type(&self) -> ::std::option::Option<&crate::types::ContributionAnalysisSortType> {
        self.sort_type.as_ref()
    }
}
impl TopicIrContributionAnalysis {
    /// Creates a new builder-style object to manufacture [`TopicIrContributionAnalysis`](crate::types::TopicIrContributionAnalysis).
    pub fn builder() -> crate::types::builders::TopicIrContributionAnalysisBuilder {
        crate::types::builders::TopicIrContributionAnalysisBuilder::default()
    }
}

/// A builder for [`TopicIrContributionAnalysis`](crate::types::TopicIrContributionAnalysis).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TopicIrContributionAnalysisBuilder {
    pub(crate) factors: ::std::option::Option<::std::vec::Vec<crate::types::ContributionAnalysisFactor>>,
    pub(crate) time_ranges: ::std::option::Option<crate::types::ContributionAnalysisTimeRanges>,
    pub(crate) direction: ::std::option::Option<crate::types::ContributionAnalysisDirection>,
    pub(crate) sort_type: ::std::option::Option<crate::types::ContributionAnalysisSortType>,
}
impl TopicIrContributionAnalysisBuilder {
    /// Appends an item to `factors`.
    ///
    /// To override the contents of this collection use [`set_factors`](Self::set_factors).
    ///
    /// <p>The factors for a <code>TopicIRContributionAnalysis</code>.</p>
    pub fn factors(mut self, input: crate::types::ContributionAnalysisFactor) -> Self {
        let mut v = self.factors.unwrap_or_default();
        v.push(input);
        self.factors = ::std::option::Option::Some(v);
        self
    }
    /// <p>The factors for a <code>TopicIRContributionAnalysis</code>.</p>
    pub fn set_factors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContributionAnalysisFactor>>) -> Self {
        self.factors = input;
        self
    }
    /// <p>The factors for a <code>TopicIRContributionAnalysis</code>.</p>
    pub fn get_factors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContributionAnalysisFactor>> {
        &self.factors
    }
    /// <p>The time ranges for the <code>TopicIRContributionAnalysis</code>.</p>
    pub fn time_ranges(mut self, input: crate::types::ContributionAnalysisTimeRanges) -> Self {
        self.time_ranges = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time ranges for the <code>TopicIRContributionAnalysis</code>.</p>
    pub fn set_time_ranges(mut self, input: ::std::option::Option<crate::types::ContributionAnalysisTimeRanges>) -> Self {
        self.time_ranges = input;
        self
    }
    /// <p>The time ranges for the <code>TopicIRContributionAnalysis</code>.</p>
    pub fn get_time_ranges(&self) -> &::std::option::Option<crate::types::ContributionAnalysisTimeRanges> {
        &self.time_ranges
    }
    /// <p>The direction for the <code>TopicIRContributionAnalysis</code>.</p>
    pub fn direction(mut self, input: crate::types::ContributionAnalysisDirection) -> Self {
        self.direction = ::std::option::Option::Some(input);
        self
    }
    /// <p>The direction for the <code>TopicIRContributionAnalysis</code>.</p>
    pub fn set_direction(mut self, input: ::std::option::Option<crate::types::ContributionAnalysisDirection>) -> Self {
        self.direction = input;
        self
    }
    /// <p>The direction for the <code>TopicIRContributionAnalysis</code>.</p>
    pub fn get_direction(&self) -> &::std::option::Option<crate::types::ContributionAnalysisDirection> {
        &self.direction
    }
    /// <p>The sort type for the <code>TopicIRContributionAnalysis</code>.</p>
    pub fn sort_type(mut self, input: crate::types::ContributionAnalysisSortType) -> Self {
        self.sort_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sort type for the <code>TopicIRContributionAnalysis</code>.</p>
    pub fn set_sort_type(mut self, input: ::std::option::Option<crate::types::ContributionAnalysisSortType>) -> Self {
        self.sort_type = input;
        self
    }
    /// <p>The sort type for the <code>TopicIRContributionAnalysis</code>.</p>
    pub fn get_sort_type(&self) -> &::std::option::Option<crate::types::ContributionAnalysisSortType> {
        &self.sort_type
    }
    /// Consumes the builder and constructs a [`TopicIrContributionAnalysis`](crate::types::TopicIrContributionAnalysis).
    pub fn build(self) -> crate::types::TopicIrContributionAnalysis {
        crate::types::TopicIrContributionAnalysis {
            factors: self.factors,
            time_ranges: self.time_ranges,
            direction: self.direction,
            sort_type: self.sort_type,
        }
    }
}
