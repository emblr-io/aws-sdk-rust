// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines what initiates a highlight operation on a visual, such as a click or hover.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VisualHighlightOperation {
    /// <p>Specifies whether a highlight operation is initiated by a click or hover, or whether it's disabled.</p>
    pub trigger: crate::types::VisualHighlightTrigger,
}
impl VisualHighlightOperation {
    /// <p>Specifies whether a highlight operation is initiated by a click or hover, or whether it's disabled.</p>
    pub fn trigger(&self) -> &crate::types::VisualHighlightTrigger {
        &self.trigger
    }
}
impl VisualHighlightOperation {
    /// Creates a new builder-style object to manufacture [`VisualHighlightOperation`](crate::types::VisualHighlightOperation).
    pub fn builder() -> crate::types::builders::VisualHighlightOperationBuilder {
        crate::types::builders::VisualHighlightOperationBuilder::default()
    }
}

/// A builder for [`VisualHighlightOperation`](crate::types::VisualHighlightOperation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VisualHighlightOperationBuilder {
    pub(crate) trigger: ::std::option::Option<crate::types::VisualHighlightTrigger>,
}
impl VisualHighlightOperationBuilder {
    /// <p>Specifies whether a highlight operation is initiated by a click or hover, or whether it's disabled.</p>
    /// This field is required.
    pub fn trigger(mut self, input: crate::types::VisualHighlightTrigger) -> Self {
        self.trigger = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether a highlight operation is initiated by a click or hover, or whether it's disabled.</p>
    pub fn set_trigger(mut self, input: ::std::option::Option<crate::types::VisualHighlightTrigger>) -> Self {
        self.trigger = input;
        self
    }
    /// <p>Specifies whether a highlight operation is initiated by a click or hover, or whether it's disabled.</p>
    pub fn get_trigger(&self) -> &::std::option::Option<crate::types::VisualHighlightTrigger> {
        &self.trigger
    }
    /// Consumes the builder and constructs a [`VisualHighlightOperation`](crate::types::VisualHighlightOperation).
    /// This method will fail if any of the following fields are not set:
    /// - [`trigger`](crate::types::builders::VisualHighlightOperationBuilder::trigger)
    pub fn build(self) -> ::std::result::Result<crate::types::VisualHighlightOperation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::VisualHighlightOperation {
            trigger: self.trigger.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "trigger",
                    "trigger was not specified but it is required when building VisualHighlightOperation",
                )
            })?,
        })
    }
}
