// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The page break configuration to apply for each repeating instance.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BodySectionRepeatPageBreakConfiguration {
    /// <p>The configuration of a page break after a section.</p>
    pub after: ::std::option::Option<crate::types::SectionAfterPageBreak>,
}
impl BodySectionRepeatPageBreakConfiguration {
    /// <p>The configuration of a page break after a section.</p>
    pub fn after(&self) -> ::std::option::Option<&crate::types::SectionAfterPageBreak> {
        self.after.as_ref()
    }
}
impl BodySectionRepeatPageBreakConfiguration {
    /// Creates a new builder-style object to manufacture [`BodySectionRepeatPageBreakConfiguration`](crate::types::BodySectionRepeatPageBreakConfiguration).
    pub fn builder() -> crate::types::builders::BodySectionRepeatPageBreakConfigurationBuilder {
        crate::types::builders::BodySectionRepeatPageBreakConfigurationBuilder::default()
    }
}

/// A builder for [`BodySectionRepeatPageBreakConfiguration`](crate::types::BodySectionRepeatPageBreakConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BodySectionRepeatPageBreakConfigurationBuilder {
    pub(crate) after: ::std::option::Option<crate::types::SectionAfterPageBreak>,
}
impl BodySectionRepeatPageBreakConfigurationBuilder {
    /// <p>The configuration of a page break after a section.</p>
    pub fn after(mut self, input: crate::types::SectionAfterPageBreak) -> Self {
        self.after = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of a page break after a section.</p>
    pub fn set_after(mut self, input: ::std::option::Option<crate::types::SectionAfterPageBreak>) -> Self {
        self.after = input;
        self
    }
    /// <p>The configuration of a page break after a section.</p>
    pub fn get_after(&self) -> &::std::option::Option<crate::types::SectionAfterPageBreak> {
        &self.after
    }
    /// Consumes the builder and constructs a [`BodySectionRepeatPageBreakConfiguration`](crate::types::BodySectionRepeatPageBreakConfiguration).
    pub fn build(self) -> crate::types::BodySectionRepeatPageBreakConfiguration {
        crate::types::BodySectionRepeatPageBreakConfiguration { after: self.after }
    }
}
