// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The properties for a single geospatial layer.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeospatialLayerItem {
    /// <p>The ID of the layer.</p>
    pub layer_id: ::std::string::String,
    /// <p>The layer type.</p>
    pub layer_type: ::std::option::Option<crate::types::GeospatialLayerType>,
    /// <p>The data source for the layer.</p>
    pub data_source: ::std::option::Option<crate::types::GeospatialDataSourceItem>,
    /// <p>The label that is displayed for the layer.</p>
    pub label: ::std::option::Option<::std::string::String>,
    /// <p>The state of visibility for the layer.</p>
    pub visibility: ::std::option::Option<crate::types::Visibility>,
    /// <p>The definition properties for a layer.</p>
    pub layer_definition: ::std::option::Option<crate::types::GeospatialLayerDefinition>,
    /// <p>The display options for the visual tooltip.</p>
    pub tooltip: ::std::option::Option<crate::types::TooltipOptions>,
    /// <p>The join definition properties for a layer.</p>
    pub join_definition: ::std::option::Option<crate::types::GeospatialLayerJoinDefinition>,
    /// <p>A list of custom actions for a layer.</p>
    pub actions: ::std::option::Option<::std::vec::Vec<crate::types::LayerCustomAction>>,
}
impl GeospatialLayerItem {
    /// <p>The ID of the layer.</p>
    pub fn layer_id(&self) -> &str {
        use std::ops::Deref;
        self.layer_id.deref()
    }
    /// <p>The layer type.</p>
    pub fn layer_type(&self) -> ::std::option::Option<&crate::types::GeospatialLayerType> {
        self.layer_type.as_ref()
    }
    /// <p>The data source for the layer.</p>
    pub fn data_source(&self) -> ::std::option::Option<&crate::types::GeospatialDataSourceItem> {
        self.data_source.as_ref()
    }
    /// <p>The label that is displayed for the layer.</p>
    pub fn label(&self) -> ::std::option::Option<&str> {
        self.label.as_deref()
    }
    /// <p>The state of visibility for the layer.</p>
    pub fn visibility(&self) -> ::std::option::Option<&crate::types::Visibility> {
        self.visibility.as_ref()
    }
    /// <p>The definition properties for a layer.</p>
    pub fn layer_definition(&self) -> ::std::option::Option<&crate::types::GeospatialLayerDefinition> {
        self.layer_definition.as_ref()
    }
    /// <p>The display options for the visual tooltip.</p>
    pub fn tooltip(&self) -> ::std::option::Option<&crate::types::TooltipOptions> {
        self.tooltip.as_ref()
    }
    /// <p>The join definition properties for a layer.</p>
    pub fn join_definition(&self) -> ::std::option::Option<&crate::types::GeospatialLayerJoinDefinition> {
        self.join_definition.as_ref()
    }
    /// <p>A list of custom actions for a layer.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.actions.is_none()`.
    pub fn actions(&self) -> &[crate::types::LayerCustomAction] {
        self.actions.as_deref().unwrap_or_default()
    }
}
impl GeospatialLayerItem {
    /// Creates a new builder-style object to manufacture [`GeospatialLayerItem`](crate::types::GeospatialLayerItem).
    pub fn builder() -> crate::types::builders::GeospatialLayerItemBuilder {
        crate::types::builders::GeospatialLayerItemBuilder::default()
    }
}

/// A builder for [`GeospatialLayerItem`](crate::types::GeospatialLayerItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GeospatialLayerItemBuilder {
    pub(crate) layer_id: ::std::option::Option<::std::string::String>,
    pub(crate) layer_type: ::std::option::Option<crate::types::GeospatialLayerType>,
    pub(crate) data_source: ::std::option::Option<crate::types::GeospatialDataSourceItem>,
    pub(crate) label: ::std::option::Option<::std::string::String>,
    pub(crate) visibility: ::std::option::Option<crate::types::Visibility>,
    pub(crate) layer_definition: ::std::option::Option<crate::types::GeospatialLayerDefinition>,
    pub(crate) tooltip: ::std::option::Option<crate::types::TooltipOptions>,
    pub(crate) join_definition: ::std::option::Option<crate::types::GeospatialLayerJoinDefinition>,
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<crate::types::LayerCustomAction>>,
}
impl GeospatialLayerItemBuilder {
    /// <p>The ID of the layer.</p>
    /// This field is required.
    pub fn layer_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.layer_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the layer.</p>
    pub fn set_layer_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.layer_id = input;
        self
    }
    /// <p>The ID of the layer.</p>
    pub fn get_layer_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.layer_id
    }
    /// <p>The layer type.</p>
    pub fn layer_type(mut self, input: crate::types::GeospatialLayerType) -> Self {
        self.layer_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The layer type.</p>
    pub fn set_layer_type(mut self, input: ::std::option::Option<crate::types::GeospatialLayerType>) -> Self {
        self.layer_type = input;
        self
    }
    /// <p>The layer type.</p>
    pub fn get_layer_type(&self) -> &::std::option::Option<crate::types::GeospatialLayerType> {
        &self.layer_type
    }
    /// <p>The data source for the layer.</p>
    pub fn data_source(mut self, input: crate::types::GeospatialDataSourceItem) -> Self {
        self.data_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data source for the layer.</p>
    pub fn set_data_source(mut self, input: ::std::option::Option<crate::types::GeospatialDataSourceItem>) -> Self {
        self.data_source = input;
        self
    }
    /// <p>The data source for the layer.</p>
    pub fn get_data_source(&self) -> &::std::option::Option<crate::types::GeospatialDataSourceItem> {
        &self.data_source
    }
    /// <p>The label that is displayed for the layer.</p>
    pub fn label(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.label = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The label that is displayed for the layer.</p>
    pub fn set_label(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.label = input;
        self
    }
    /// <p>The label that is displayed for the layer.</p>
    pub fn get_label(&self) -> &::std::option::Option<::std::string::String> {
        &self.label
    }
    /// <p>The state of visibility for the layer.</p>
    pub fn visibility(mut self, input: crate::types::Visibility) -> Self {
        self.visibility = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of visibility for the layer.</p>
    pub fn set_visibility(mut self, input: ::std::option::Option<crate::types::Visibility>) -> Self {
        self.visibility = input;
        self
    }
    /// <p>The state of visibility for the layer.</p>
    pub fn get_visibility(&self) -> &::std::option::Option<crate::types::Visibility> {
        &self.visibility
    }
    /// <p>The definition properties for a layer.</p>
    pub fn layer_definition(mut self, input: crate::types::GeospatialLayerDefinition) -> Self {
        self.layer_definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The definition properties for a layer.</p>
    pub fn set_layer_definition(mut self, input: ::std::option::Option<crate::types::GeospatialLayerDefinition>) -> Self {
        self.layer_definition = input;
        self
    }
    /// <p>The definition properties for a layer.</p>
    pub fn get_layer_definition(&self) -> &::std::option::Option<crate::types::GeospatialLayerDefinition> {
        &self.layer_definition
    }
    /// <p>The display options for the visual tooltip.</p>
    pub fn tooltip(mut self, input: crate::types::TooltipOptions) -> Self {
        self.tooltip = ::std::option::Option::Some(input);
        self
    }
    /// <p>The display options for the visual tooltip.</p>
    pub fn set_tooltip(mut self, input: ::std::option::Option<crate::types::TooltipOptions>) -> Self {
        self.tooltip = input;
        self
    }
    /// <p>The display options for the visual tooltip.</p>
    pub fn get_tooltip(&self) -> &::std::option::Option<crate::types::TooltipOptions> {
        &self.tooltip
    }
    /// <p>The join definition properties for a layer.</p>
    pub fn join_definition(mut self, input: crate::types::GeospatialLayerJoinDefinition) -> Self {
        self.join_definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The join definition properties for a layer.</p>
    pub fn set_join_definition(mut self, input: ::std::option::Option<crate::types::GeospatialLayerJoinDefinition>) -> Self {
        self.join_definition = input;
        self
    }
    /// <p>The join definition properties for a layer.</p>
    pub fn get_join_definition(&self) -> &::std::option::Option<crate::types::GeospatialLayerJoinDefinition> {
        &self.join_definition
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>A list of custom actions for a layer.</p>
    pub fn actions(mut self, input: crate::types::LayerCustomAction) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of custom actions for a layer.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LayerCustomAction>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>A list of custom actions for a layer.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LayerCustomAction>> {
        &self.actions
    }
    /// Consumes the builder and constructs a [`GeospatialLayerItem`](crate::types::GeospatialLayerItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`layer_id`](crate::types::builders::GeospatialLayerItemBuilder::layer_id)
    pub fn build(self) -> ::std::result::Result<crate::types::GeospatialLayerItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GeospatialLayerItem {
            layer_id: self.layer_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "layer_id",
                    "layer_id was not specified but it is required when building GeospatialLayerItem",
                )
            })?,
            layer_type: self.layer_type,
            data_source: self.data_source,
            label: self.label,
            visibility: self.visibility,
            layer_definition: self.layer_definition,
            tooltip: self.tooltip,
            join_definition: self.join_definition,
            actions: self.actions,
        })
    }
}
