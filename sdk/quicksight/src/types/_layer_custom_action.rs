// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A layer custom action.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LayerCustomAction {
    /// <p>The ID of the custom action.</p>
    pub custom_action_id: ::std::string::String,
    /// <p>The name of the custom action.</p>
    pub name: ::std::string::String,
    /// <p>The status of the <code>LayerCustomAction</code>.</p>
    pub status: ::std::option::Option<crate::types::WidgetStatus>,
    /// <p>The trigger of the <code>LayerCustomAction</code>.</p>
    /// <p>Valid values are defined as follows:</p>
    /// <ul>
    /// <li>
    /// <p><code>DATA_POINT_CLICK</code>: Initiates a custom action by a left pointer click on a data point.</p></li>
    /// <li>
    /// <p><code>DATA_POINT_MENU</code>: Initiates a custom action by right pointer click from the menu.</p></li>
    /// </ul>
    pub trigger: crate::types::LayerCustomActionTrigger,
    /// <p>A list of <code>LayerCustomActionOperations</code>.</p>
    /// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
    pub action_operations: ::std::vec::Vec<crate::types::LayerCustomActionOperation>,
}
impl LayerCustomAction {
    /// <p>The ID of the custom action.</p>
    pub fn custom_action_id(&self) -> &str {
        use std::ops::Deref;
        self.custom_action_id.deref()
    }
    /// <p>The name of the custom action.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The status of the <code>LayerCustomAction</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::WidgetStatus> {
        self.status.as_ref()
    }
    /// <p>The trigger of the <code>LayerCustomAction</code>.</p>
    /// <p>Valid values are defined as follows:</p>
    /// <ul>
    /// <li>
    /// <p><code>DATA_POINT_CLICK</code>: Initiates a custom action by a left pointer click on a data point.</p></li>
    /// <li>
    /// <p><code>DATA_POINT_MENU</code>: Initiates a custom action by right pointer click from the menu.</p></li>
    /// </ul>
    pub fn trigger(&self) -> &crate::types::LayerCustomActionTrigger {
        &self.trigger
    }
    /// <p>A list of <code>LayerCustomActionOperations</code>.</p>
    /// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
    pub fn action_operations(&self) -> &[crate::types::LayerCustomActionOperation] {
        use std::ops::Deref;
        self.action_operations.deref()
    }
}
impl LayerCustomAction {
    /// Creates a new builder-style object to manufacture [`LayerCustomAction`](crate::types::LayerCustomAction).
    pub fn builder() -> crate::types::builders::LayerCustomActionBuilder {
        crate::types::builders::LayerCustomActionBuilder::default()
    }
}

/// A builder for [`LayerCustomAction`](crate::types::LayerCustomAction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LayerCustomActionBuilder {
    pub(crate) custom_action_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::WidgetStatus>,
    pub(crate) trigger: ::std::option::Option<crate::types::LayerCustomActionTrigger>,
    pub(crate) action_operations: ::std::option::Option<::std::vec::Vec<crate::types::LayerCustomActionOperation>>,
}
impl LayerCustomActionBuilder {
    /// <p>The ID of the custom action.</p>
    /// This field is required.
    pub fn custom_action_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.custom_action_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the custom action.</p>
    pub fn set_custom_action_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.custom_action_id = input;
        self
    }
    /// <p>The ID of the custom action.</p>
    pub fn get_custom_action_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.custom_action_id
    }
    /// <p>The name of the custom action.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the custom action.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the custom action.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The status of the <code>LayerCustomAction</code>.</p>
    pub fn status(mut self, input: crate::types::WidgetStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the <code>LayerCustomAction</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::WidgetStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the <code>LayerCustomAction</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::WidgetStatus> {
        &self.status
    }
    /// <p>The trigger of the <code>LayerCustomAction</code>.</p>
    /// <p>Valid values are defined as follows:</p>
    /// <ul>
    /// <li>
    /// <p><code>DATA_POINT_CLICK</code>: Initiates a custom action by a left pointer click on a data point.</p></li>
    /// <li>
    /// <p><code>DATA_POINT_MENU</code>: Initiates a custom action by right pointer click from the menu.</p></li>
    /// </ul>
    /// This field is required.
    pub fn trigger(mut self, input: crate::types::LayerCustomActionTrigger) -> Self {
        self.trigger = ::std::option::Option::Some(input);
        self
    }
    /// <p>The trigger of the <code>LayerCustomAction</code>.</p>
    /// <p>Valid values are defined as follows:</p>
    /// <ul>
    /// <li>
    /// <p><code>DATA_POINT_CLICK</code>: Initiates a custom action by a left pointer click on a data point.</p></li>
    /// <li>
    /// <p><code>DATA_POINT_MENU</code>: Initiates a custom action by right pointer click from the menu.</p></li>
    /// </ul>
    pub fn set_trigger(mut self, input: ::std::option::Option<crate::types::LayerCustomActionTrigger>) -> Self {
        self.trigger = input;
        self
    }
    /// <p>The trigger of the <code>LayerCustomAction</code>.</p>
    /// <p>Valid values are defined as follows:</p>
    /// <ul>
    /// <li>
    /// <p><code>DATA_POINT_CLICK</code>: Initiates a custom action by a left pointer click on a data point.</p></li>
    /// <li>
    /// <p><code>DATA_POINT_MENU</code>: Initiates a custom action by right pointer click from the menu.</p></li>
    /// </ul>
    pub fn get_trigger(&self) -> &::std::option::Option<crate::types::LayerCustomActionTrigger> {
        &self.trigger
    }
    /// Appends an item to `action_operations`.
    ///
    /// To override the contents of this collection use [`set_action_operations`](Self::set_action_operations).
    ///
    /// <p>A list of <code>LayerCustomActionOperations</code>.</p>
    /// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
    pub fn action_operations(mut self, input: crate::types::LayerCustomActionOperation) -> Self {
        let mut v = self.action_operations.unwrap_or_default();
        v.push(input);
        self.action_operations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>LayerCustomActionOperations</code>.</p>
    /// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
    pub fn set_action_operations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LayerCustomActionOperation>>) -> Self {
        self.action_operations = input;
        self
    }
    /// <p>A list of <code>LayerCustomActionOperations</code>.</p>
    /// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
    pub fn get_action_operations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LayerCustomActionOperation>> {
        &self.action_operations
    }
    /// Consumes the builder and constructs a [`LayerCustomAction`](crate::types::LayerCustomAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`custom_action_id`](crate::types::builders::LayerCustomActionBuilder::custom_action_id)
    /// - [`name`](crate::types::builders::LayerCustomActionBuilder::name)
    /// - [`trigger`](crate::types::builders::LayerCustomActionBuilder::trigger)
    /// - [`action_operations`](crate::types::builders::LayerCustomActionBuilder::action_operations)
    pub fn build(self) -> ::std::result::Result<crate::types::LayerCustomAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LayerCustomAction {
            custom_action_id: self.custom_action_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "custom_action_id",
                    "custom_action_id was not specified but it is required when building LayerCustomAction",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building LayerCustomAction",
                )
            })?,
            status: self.status,
            trigger: self.trigger.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "trigger",
                    "trigger was not specified but it is required when building LayerCustomAction",
                )
            })?,
            action_operations: self.action_operations.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action_operations",
                    "action_operations was not specified but it is required when building LayerCustomAction",
                )
            })?,
        })
    }
}
