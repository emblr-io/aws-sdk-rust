// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition of the Anchor.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Anchor {
    /// <p>The <code>AnchorType</code> for the Anchor.</p>
    pub anchor_type: ::std::option::Option<crate::types::AnchorType>,
    /// <p>The <code>TimeGranularity</code> of the Anchor.</p>
    pub time_granularity: ::std::option::Option<crate::types::TimeGranularity>,
    /// <p>The offset of the Anchor.</p>
    pub offset: i32,
}
impl Anchor {
    /// <p>The <code>AnchorType</code> for the Anchor.</p>
    pub fn anchor_type(&self) -> ::std::option::Option<&crate::types::AnchorType> {
        self.anchor_type.as_ref()
    }
    /// <p>The <code>TimeGranularity</code> of the Anchor.</p>
    pub fn time_granularity(&self) -> ::std::option::Option<&crate::types::TimeGranularity> {
        self.time_granularity.as_ref()
    }
    /// <p>The offset of the Anchor.</p>
    pub fn offset(&self) -> i32 {
        self.offset
    }
}
impl Anchor {
    /// Creates a new builder-style object to manufacture [`Anchor`](crate::types::Anchor).
    pub fn builder() -> crate::types::builders::AnchorBuilder {
        crate::types::builders::AnchorBuilder::default()
    }
}

/// A builder for [`Anchor`](crate::types::Anchor).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AnchorBuilder {
    pub(crate) anchor_type: ::std::option::Option<crate::types::AnchorType>,
    pub(crate) time_granularity: ::std::option::Option<crate::types::TimeGranularity>,
    pub(crate) offset: ::std::option::Option<i32>,
}
impl AnchorBuilder {
    /// <p>The <code>AnchorType</code> for the Anchor.</p>
    pub fn anchor_type(mut self, input: crate::types::AnchorType) -> Self {
        self.anchor_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>AnchorType</code> for the Anchor.</p>
    pub fn set_anchor_type(mut self, input: ::std::option::Option<crate::types::AnchorType>) -> Self {
        self.anchor_type = input;
        self
    }
    /// <p>The <code>AnchorType</code> for the Anchor.</p>
    pub fn get_anchor_type(&self) -> &::std::option::Option<crate::types::AnchorType> {
        &self.anchor_type
    }
    /// <p>The <code>TimeGranularity</code> of the Anchor.</p>
    pub fn time_granularity(mut self, input: crate::types::TimeGranularity) -> Self {
        self.time_granularity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>TimeGranularity</code> of the Anchor.</p>
    pub fn set_time_granularity(mut self, input: ::std::option::Option<crate::types::TimeGranularity>) -> Self {
        self.time_granularity = input;
        self
    }
    /// <p>The <code>TimeGranularity</code> of the Anchor.</p>
    pub fn get_time_granularity(&self) -> &::std::option::Option<crate::types::TimeGranularity> {
        &self.time_granularity
    }
    /// <p>The offset of the Anchor.</p>
    pub fn offset(mut self, input: i32) -> Self {
        self.offset = ::std::option::Option::Some(input);
        self
    }
    /// <p>The offset of the Anchor.</p>
    pub fn set_offset(mut self, input: ::std::option::Option<i32>) -> Self {
        self.offset = input;
        self
    }
    /// <p>The offset of the Anchor.</p>
    pub fn get_offset(&self) -> &::std::option::Option<i32> {
        &self.offset
    }
    /// Consumes the builder and constructs a [`Anchor`](crate::types::Anchor).
    pub fn build(self) -> crate::types::Anchor {
        crate::types::Anchor {
            anchor_type: self.anchor_type,
            time_granularity: self.time_granularity,
            offset: self.offset.unwrap_or_default(),
        }
    }
}
