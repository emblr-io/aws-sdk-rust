// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of custom actions applied to visuals in an analysis or sheet.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VisualCustomActionDefaults {
    /// <p>A list of highlight operations available for visuals in an analysis or sheet.</p>
    pub highlight_operation: ::std::option::Option<crate::types::VisualHighlightOperation>,
}
impl VisualCustomActionDefaults {
    /// <p>A list of highlight operations available for visuals in an analysis or sheet.</p>
    pub fn highlight_operation(&self) -> ::std::option::Option<&crate::types::VisualHighlightOperation> {
        self.highlight_operation.as_ref()
    }
}
impl VisualCustomActionDefaults {
    /// Creates a new builder-style object to manufacture [`VisualCustomActionDefaults`](crate::types::VisualCustomActionDefaults).
    pub fn builder() -> crate::types::builders::VisualCustomActionDefaultsBuilder {
        crate::types::builders::VisualCustomActionDefaultsBuilder::default()
    }
}

/// A builder for [`VisualCustomActionDefaults`](crate::types::VisualCustomActionDefaults).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VisualCustomActionDefaultsBuilder {
    pub(crate) highlight_operation: ::std::option::Option<crate::types::VisualHighlightOperation>,
}
impl VisualCustomActionDefaultsBuilder {
    /// <p>A list of highlight operations available for visuals in an analysis or sheet.</p>
    pub fn highlight_operation(mut self, input: crate::types::VisualHighlightOperation) -> Self {
        self.highlight_operation = ::std::option::Option::Some(input);
        self
    }
    /// <p>A list of highlight operations available for visuals in an analysis or sheet.</p>
    pub fn set_highlight_operation(mut self, input: ::std::option::Option<crate::types::VisualHighlightOperation>) -> Self {
        self.highlight_operation = input;
        self
    }
    /// <p>A list of highlight operations available for visuals in an analysis or sheet.</p>
    pub fn get_highlight_operation(&self) -> &::std::option::Option<crate::types::VisualHighlightOperation> {
        &self.highlight_operation
    }
    /// Consumes the builder and constructs a [`VisualCustomActionDefaults`](crate::types::VisualCustomActionDefaults).
    pub fn build(self) -> crate::types::VisualCustomActionDefaults {
        crate::types::VisualCustomActionDefaults {
            highlight_operation: self.highlight_operation,
        }
    }
}
