// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The text that appears in the sheet image tooltip.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SheetImageTooltipText {
    /// <p>The plain text format.</p>
    pub plain_text: ::std::option::Option<::std::string::String>,
}
impl SheetImageTooltipText {
    /// <p>The plain text format.</p>
    pub fn plain_text(&self) -> ::std::option::Option<&str> {
        self.plain_text.as_deref()
    }
}
impl SheetImageTooltipText {
    /// Creates a new builder-style object to manufacture [`SheetImageTooltipText`](crate::types::SheetImageTooltipText).
    pub fn builder() -> crate::types::builders::SheetImageTooltipTextBuilder {
        crate::types::builders::SheetImageTooltipTextBuilder::default()
    }
}

/// A builder for [`SheetImageTooltipText`](crate::types::SheetImageTooltipText).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SheetImageTooltipTextBuilder {
    pub(crate) plain_text: ::std::option::Option<::std::string::String>,
}
impl SheetImageTooltipTextBuilder {
    /// <p>The plain text format.</p>
    pub fn plain_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.plain_text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The plain text format.</p>
    pub fn set_plain_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.plain_text = input;
        self
    }
    /// <p>The plain text format.</p>
    pub fn get_plain_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.plain_text
    }
    /// Consumes the builder and constructs a [`SheetImageTooltipText`](crate::types::SheetImageTooltipText).
    pub fn build(self) -> crate::types::SheetImageTooltipText {
        crate::types::SheetImageTooltipText { plain_text: self.plain_text }
    }
}
