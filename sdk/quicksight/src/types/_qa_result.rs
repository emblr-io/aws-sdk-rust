// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The QA result that is made from the <code>DashboardVisual</code> or <code>GeneratedAnswer</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QaResult {
    /// <p>The type of QA result.</p>
    pub result_type: ::std::option::Option<crate::types::QaResultType>,
    /// <p>The representation of a dashboard visual result.</p>
    pub dashboard_visual: ::std::option::Option<crate::types::DashboardVisualResult>,
    /// <p>The representation of a generated answer result.</p>
    pub generated_answer: ::std::option::Option<crate::types::GeneratedAnswerResult>,
}
impl QaResult {
    /// <p>The type of QA result.</p>
    pub fn result_type(&self) -> ::std::option::Option<&crate::types::QaResultType> {
        self.result_type.as_ref()
    }
    /// <p>The representation of a dashboard visual result.</p>
    pub fn dashboard_visual(&self) -> ::std::option::Option<&crate::types::DashboardVisualResult> {
        self.dashboard_visual.as_ref()
    }
    /// <p>The representation of a generated answer result.</p>
    pub fn generated_answer(&self) -> ::std::option::Option<&crate::types::GeneratedAnswerResult> {
        self.generated_answer.as_ref()
    }
}
impl QaResult {
    /// Creates a new builder-style object to manufacture [`QaResult`](crate::types::QaResult).
    pub fn builder() -> crate::types::builders::QaResultBuilder {
        crate::types::builders::QaResultBuilder::default()
    }
}

/// A builder for [`QaResult`](crate::types::QaResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QaResultBuilder {
    pub(crate) result_type: ::std::option::Option<crate::types::QaResultType>,
    pub(crate) dashboard_visual: ::std::option::Option<crate::types::DashboardVisualResult>,
    pub(crate) generated_answer: ::std::option::Option<crate::types::GeneratedAnswerResult>,
}
impl QaResultBuilder {
    /// <p>The type of QA result.</p>
    pub fn result_type(mut self, input: crate::types::QaResultType) -> Self {
        self.result_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of QA result.</p>
    pub fn set_result_type(mut self, input: ::std::option::Option<crate::types::QaResultType>) -> Self {
        self.result_type = input;
        self
    }
    /// <p>The type of QA result.</p>
    pub fn get_result_type(&self) -> &::std::option::Option<crate::types::QaResultType> {
        &self.result_type
    }
    /// <p>The representation of a dashboard visual result.</p>
    pub fn dashboard_visual(mut self, input: crate::types::DashboardVisualResult) -> Self {
        self.dashboard_visual = ::std::option::Option::Some(input);
        self
    }
    /// <p>The representation of a dashboard visual result.</p>
    pub fn set_dashboard_visual(mut self, input: ::std::option::Option<crate::types::DashboardVisualResult>) -> Self {
        self.dashboard_visual = input;
        self
    }
    /// <p>The representation of a dashboard visual result.</p>
    pub fn get_dashboard_visual(&self) -> &::std::option::Option<crate::types::DashboardVisualResult> {
        &self.dashboard_visual
    }
    /// <p>The representation of a generated answer result.</p>
    pub fn generated_answer(mut self, input: crate::types::GeneratedAnswerResult) -> Self {
        self.generated_answer = ::std::option::Option::Some(input);
        self
    }
    /// <p>The representation of a generated answer result.</p>
    pub fn set_generated_answer(mut self, input: ::std::option::Option<crate::types::GeneratedAnswerResult>) -> Self {
        self.generated_answer = input;
        self
    }
    /// <p>The representation of a generated answer result.</p>
    pub fn get_generated_answer(&self) -> &::std::option::Option<crate::types::GeneratedAnswerResult> {
        &self.generated_answer
    }
    /// Consumes the builder and constructs a [`QaResult`](crate::types::QaResult).
    pub fn build(self) -> crate::types::QaResult {
        crate::types::QaResult {
            result_type: self.result_type,
            dashboard_visual: self.dashboard_visual,
            generated_answer: self.generated_answer,
        }
    }
}
