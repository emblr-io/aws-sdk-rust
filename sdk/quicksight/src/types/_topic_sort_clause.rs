// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition for a <code>TopicSortClause</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TopicSortClause {
    /// <p>The operand for a <code>TopicSortClause</code>.</p>
    pub operand: ::std::option::Option<crate::types::Identifier>,
    /// <p>The sort direction for the <code>TopicSortClause</code>.</p>
    pub sort_direction: ::std::option::Option<crate::types::TopicSortDirection>,
}
impl TopicSortClause {
    /// <p>The operand for a <code>TopicSortClause</code>.</p>
    pub fn operand(&self) -> ::std::option::Option<&crate::types::Identifier> {
        self.operand.as_ref()
    }
    /// <p>The sort direction for the <code>TopicSortClause</code>.</p>
    pub fn sort_direction(&self) -> ::std::option::Option<&crate::types::TopicSortDirection> {
        self.sort_direction.as_ref()
    }
}
impl TopicSortClause {
    /// Creates a new builder-style object to manufacture [`TopicSortClause`](crate::types::TopicSortClause).
    pub fn builder() -> crate::types::builders::TopicSortClauseBuilder {
        crate::types::builders::TopicSortClauseBuilder::default()
    }
}

/// A builder for [`TopicSortClause`](crate::types::TopicSortClause).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TopicSortClauseBuilder {
    pub(crate) operand: ::std::option::Option<crate::types::Identifier>,
    pub(crate) sort_direction: ::std::option::Option<crate::types::TopicSortDirection>,
}
impl TopicSortClauseBuilder {
    /// <p>The operand for a <code>TopicSortClause</code>.</p>
    pub fn operand(mut self, input: crate::types::Identifier) -> Self {
        self.operand = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operand for a <code>TopicSortClause</code>.</p>
    pub fn set_operand(mut self, input: ::std::option::Option<crate::types::Identifier>) -> Self {
        self.operand = input;
        self
    }
    /// <p>The operand for a <code>TopicSortClause</code>.</p>
    pub fn get_operand(&self) -> &::std::option::Option<crate::types::Identifier> {
        &self.operand
    }
    /// <p>The sort direction for the <code>TopicSortClause</code>.</p>
    pub fn sort_direction(mut self, input: crate::types::TopicSortDirection) -> Self {
        self.sort_direction = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sort direction for the <code>TopicSortClause</code>.</p>
    pub fn set_sort_direction(mut self, input: ::std::option::Option<crate::types::TopicSortDirection>) -> Self {
        self.sort_direction = input;
        self
    }
    /// <p>The sort direction for the <code>TopicSortClause</code>.</p>
    pub fn get_sort_direction(&self) -> &::std::option::Option<crate::types::TopicSortDirection> {
        &self.sort_direction
    }
    /// Consumes the builder and constructs a [`TopicSortClause`](crate::types::TopicSortClause).
    pub fn build(self) -> crate::types::TopicSortClause {
        crate::types::TopicSortClause {
            operand: self.operand,
            sort_direction: self.sort_direction,
        }
    }
}
