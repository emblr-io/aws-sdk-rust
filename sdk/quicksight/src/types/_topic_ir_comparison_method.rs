// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition of a <code>TopicIRComparisonMethod</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TopicIrComparisonMethod {
    /// <p>The type for the <code>TopicIRComparisonMethod</code>.</p>
    pub r#type: ::std::option::Option<crate::types::ComparisonMethodType>,
    /// <p>The period for the <code>TopicIRComparisonMethod</code>.</p>
    pub period: ::std::option::Option<crate::types::TopicTimeGranularity>,
    /// <p>The window size for the <code>TopicIRComparisonMethod</code>.</p>
    pub window_size: i32,
}
impl TopicIrComparisonMethod {
    /// <p>The type for the <code>TopicIRComparisonMethod</code>.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::ComparisonMethodType> {
        self.r#type.as_ref()
    }
    /// <p>The period for the <code>TopicIRComparisonMethod</code>.</p>
    pub fn period(&self) -> ::std::option::Option<&crate::types::TopicTimeGranularity> {
        self.period.as_ref()
    }
    /// <p>The window size for the <code>TopicIRComparisonMethod</code>.</p>
    pub fn window_size(&self) -> i32 {
        self.window_size
    }
}
impl TopicIrComparisonMethod {
    /// Creates a new builder-style object to manufacture [`TopicIrComparisonMethod`](crate::types::TopicIrComparisonMethod).
    pub fn builder() -> crate::types::builders::TopicIrComparisonMethodBuilder {
        crate::types::builders::TopicIrComparisonMethodBuilder::default()
    }
}

/// A builder for [`TopicIrComparisonMethod`](crate::types::TopicIrComparisonMethod).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TopicIrComparisonMethodBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::ComparisonMethodType>,
    pub(crate) period: ::std::option::Option<crate::types::TopicTimeGranularity>,
    pub(crate) window_size: ::std::option::Option<i32>,
}
impl TopicIrComparisonMethodBuilder {
    /// <p>The type for the <code>TopicIRComparisonMethod</code>.</p>
    pub fn r#type(mut self, input: crate::types::ComparisonMethodType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type for the <code>TopicIRComparisonMethod</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ComparisonMethodType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type for the <code>TopicIRComparisonMethod</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ComparisonMethodType> {
        &self.r#type
    }
    /// <p>The period for the <code>TopicIRComparisonMethod</code>.</p>
    pub fn period(mut self, input: crate::types::TopicTimeGranularity) -> Self {
        self.period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The period for the <code>TopicIRComparisonMethod</code>.</p>
    pub fn set_period(mut self, input: ::std::option::Option<crate::types::TopicTimeGranularity>) -> Self {
        self.period = input;
        self
    }
    /// <p>The period for the <code>TopicIRComparisonMethod</code>.</p>
    pub fn get_period(&self) -> &::std::option::Option<crate::types::TopicTimeGranularity> {
        &self.period
    }
    /// <p>The window size for the <code>TopicIRComparisonMethod</code>.</p>
    pub fn window_size(mut self, input: i32) -> Self {
        self.window_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The window size for the <code>TopicIRComparisonMethod</code>.</p>
    pub fn set_window_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.window_size = input;
        self
    }
    /// <p>The window size for the <code>TopicIRComparisonMethod</code>.</p>
    pub fn get_window_size(&self) -> &::std::option::Option<i32> {
        &self.window_size
    }
    /// Consumes the builder and constructs a [`TopicIrComparisonMethod`](crate::types::TopicIrComparisonMethod).
    pub fn build(self) -> crate::types::TopicIrComparisonMethod {
        crate::types::TopicIrComparisonMethod {
            r#type: self.r#type,
            period: self.period,
            window_size: self.window_size.unwrap_or_default(),
        }
    }
}
