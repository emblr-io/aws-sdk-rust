// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RestoreAnalysisOutput {
    /// <p>The HTTP status of the request.</p>
    pub status: i32,
    /// <p>The Amazon Resource Name (ARN) of the analysis that you're restoring.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the analysis that you're restoring.</p>
    pub analysis_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub request_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of folder arns thatthe analysis failed to be restored to.</p>
    pub restoration_failed_folder_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl RestoreAnalysisOutput {
    /// <p>The HTTP status of the request.</p>
    pub fn status(&self) -> i32 {
        self.status
    }
    /// <p>The Amazon Resource Name (ARN) of the analysis that you're restoring.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The ID of the analysis that you're restoring.</p>
    pub fn analysis_id(&self) -> ::std::option::Option<&str> {
        self.analysis_id.as_deref()
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(&self) -> ::std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>A list of folder arns thatthe analysis failed to be restored to.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.restoration_failed_folder_arns.is_none()`.
    pub fn restoration_failed_folder_arns(&self) -> &[::std::string::String] {
        self.restoration_failed_folder_arns.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for RestoreAnalysisOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RestoreAnalysisOutput {
    /// Creates a new builder-style object to manufacture [`RestoreAnalysisOutput`](crate::operation::restore_analysis::RestoreAnalysisOutput).
    pub fn builder() -> crate::operation::restore_analysis::builders::RestoreAnalysisOutputBuilder {
        crate::operation::restore_analysis::builders::RestoreAnalysisOutputBuilder::default()
    }
}

/// A builder for [`RestoreAnalysisOutput`](crate::operation::restore_analysis::RestoreAnalysisOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RestoreAnalysisOutputBuilder {
    pub(crate) status: ::std::option::Option<i32>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) analysis_id: ::std::option::Option<::std::string::String>,
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
    pub(crate) restoration_failed_folder_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl RestoreAnalysisOutputBuilder {
    /// <p>The HTTP status of the request.</p>
    pub fn status(mut self, input: i32) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn set_status(mut self, input: ::std::option::Option<i32>) -> Self {
        self.status = input;
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn get_status(&self) -> &::std::option::Option<i32> {
        &self.status
    }
    /// <p>The Amazon Resource Name (ARN) of the analysis that you're restoring.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the analysis that you're restoring.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the analysis that you're restoring.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The ID of the analysis that you're restoring.</p>
    pub fn analysis_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.analysis_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the analysis that you're restoring.</p>
    pub fn set_analysis_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.analysis_id = input;
        self
    }
    /// <p>The ID of the analysis that you're restoring.</p>
    pub fn get_analysis_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.analysis_id
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    /// Appends an item to `restoration_failed_folder_arns`.
    ///
    /// To override the contents of this collection use [`set_restoration_failed_folder_arns`](Self::set_restoration_failed_folder_arns).
    ///
    /// <p>A list of folder arns thatthe analysis failed to be restored to.</p>
    pub fn restoration_failed_folder_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.restoration_failed_folder_arns.unwrap_or_default();
        v.push(input.into());
        self.restoration_failed_folder_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of folder arns thatthe analysis failed to be restored to.</p>
    pub fn set_restoration_failed_folder_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.restoration_failed_folder_arns = input;
        self
    }
    /// <p>A list of folder arns thatthe analysis failed to be restored to.</p>
    pub fn get_restoration_failed_folder_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.restoration_failed_folder_arns
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`RestoreAnalysisOutput`](crate::operation::restore_analysis::RestoreAnalysisOutput).
    pub fn build(self) -> crate::operation::restore_analysis::RestoreAnalysisOutput {
        crate::operation::restore_analysis::RestoreAnalysisOutput {
            status: self.status.unwrap_or_default(),
            arn: self.arn,
            analysis_id: self.analysis_id,
            request_id: self.request_id,
            restoration_failed_folder_arns: self.restoration_failed_folder_arns,
            _request_id: self._request_id,
        }
    }
}
