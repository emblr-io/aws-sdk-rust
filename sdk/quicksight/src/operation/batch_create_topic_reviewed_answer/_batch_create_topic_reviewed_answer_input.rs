// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchCreateTopicReviewedAnswerInput {
    /// <p>The ID of the Amazon Web Services account that you want to create a reviewed answer in.</p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID for the topic reviewed answer that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    pub topic_id: ::std::option::Option<::std::string::String>,
    /// <p>The definition of the Answers to be created.</p>
    pub answers: ::std::option::Option<::std::vec::Vec<crate::types::CreateTopicReviewedAnswer>>,
}
impl BatchCreateTopicReviewedAnswerInput {
    /// <p>The ID of the Amazon Web Services account that you want to create a reviewed answer in.</p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>The ID for the topic reviewed answer that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    pub fn topic_id(&self) -> ::std::option::Option<&str> {
        self.topic_id.as_deref()
    }
    /// <p>The definition of the Answers to be created.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.answers.is_none()`.
    pub fn answers(&self) -> &[crate::types::CreateTopicReviewedAnswer] {
        self.answers.as_deref().unwrap_or_default()
    }
}
impl BatchCreateTopicReviewedAnswerInput {
    /// Creates a new builder-style object to manufacture [`BatchCreateTopicReviewedAnswerInput`](crate::operation::batch_create_topic_reviewed_answer::BatchCreateTopicReviewedAnswerInput).
    pub fn builder() -> crate::operation::batch_create_topic_reviewed_answer::builders::BatchCreateTopicReviewedAnswerInputBuilder {
        crate::operation::batch_create_topic_reviewed_answer::builders::BatchCreateTopicReviewedAnswerInputBuilder::default()
    }
}

/// A builder for [`BatchCreateTopicReviewedAnswerInput`](crate::operation::batch_create_topic_reviewed_answer::BatchCreateTopicReviewedAnswerInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchCreateTopicReviewedAnswerInputBuilder {
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) topic_id: ::std::option::Option<::std::string::String>,
    pub(crate) answers: ::std::option::Option<::std::vec::Vec<crate::types::CreateTopicReviewedAnswer>>,
}
impl BatchCreateTopicReviewedAnswerInputBuilder {
    /// <p>The ID of the Amazon Web Services account that you want to create a reviewed answer in.</p>
    /// This field is required.
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that you want to create a reviewed answer in.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that you want to create a reviewed answer in.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// <p>The ID for the topic reviewed answer that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    /// This field is required.
    pub fn topic_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.topic_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID for the topic reviewed answer that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    pub fn set_topic_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.topic_id = input;
        self
    }
    /// <p>The ID for the topic reviewed answer that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    pub fn get_topic_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.topic_id
    }
    /// Appends an item to `answers`.
    ///
    /// To override the contents of this collection use [`set_answers`](Self::set_answers).
    ///
    /// <p>The definition of the Answers to be created.</p>
    pub fn answers(mut self, input: crate::types::CreateTopicReviewedAnswer) -> Self {
        let mut v = self.answers.unwrap_or_default();
        v.push(input);
        self.answers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The definition of the Answers to be created.</p>
    pub fn set_answers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CreateTopicReviewedAnswer>>) -> Self {
        self.answers = input;
        self
    }
    /// <p>The definition of the Answers to be created.</p>
    pub fn get_answers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CreateTopicReviewedAnswer>> {
        &self.answers
    }
    /// Consumes the builder and constructs a [`BatchCreateTopicReviewedAnswerInput`](crate::operation::batch_create_topic_reviewed_answer::BatchCreateTopicReviewedAnswerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_create_topic_reviewed_answer::BatchCreateTopicReviewedAnswerInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::batch_create_topic_reviewed_answer::BatchCreateTopicReviewedAnswerInput {
                aws_account_id: self.aws_account_id,
                topic_id: self.topic_id,
                answers: self.answers,
            },
        )
    }
}
