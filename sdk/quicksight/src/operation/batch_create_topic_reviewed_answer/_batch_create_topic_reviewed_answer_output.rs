// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchCreateTopicReviewedAnswerOutput {
    /// <p>The ID for the topic reviewed answer that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    pub topic_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the topic.</p>
    pub topic_arn: ::std::option::Option<::std::string::String>,
    /// <p>The definition of Answers that are successfully created.</p>
    pub succeeded_answers: ::std::option::Option<::std::vec::Vec<crate::types::SucceededTopicReviewedAnswer>>,
    /// <p>The definition of Answers that are invalid and not created.</p>
    pub invalid_answers: ::std::option::Option<::std::vec::Vec<crate::types::InvalidTopicReviewedAnswer>>,
    /// <p>The HTTP status of the request.</p>
    pub status: i32,
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub request_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl BatchCreateTopicReviewedAnswerOutput {
    /// <p>The ID for the topic reviewed answer that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    pub fn topic_id(&self) -> ::std::option::Option<&str> {
        self.topic_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the topic.</p>
    pub fn topic_arn(&self) -> ::std::option::Option<&str> {
        self.topic_arn.as_deref()
    }
    /// <p>The definition of Answers that are successfully created.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.succeeded_answers.is_none()`.
    pub fn succeeded_answers(&self) -> &[crate::types::SucceededTopicReviewedAnswer] {
        self.succeeded_answers.as_deref().unwrap_or_default()
    }
    /// <p>The definition of Answers that are invalid and not created.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.invalid_answers.is_none()`.
    pub fn invalid_answers(&self) -> &[crate::types::InvalidTopicReviewedAnswer] {
        self.invalid_answers.as_deref().unwrap_or_default()
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(&self) -> i32 {
        self.status
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(&self) -> ::std::option::Option<&str> {
        self.request_id.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for BatchCreateTopicReviewedAnswerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchCreateTopicReviewedAnswerOutput {
    /// Creates a new builder-style object to manufacture [`BatchCreateTopicReviewedAnswerOutput`](crate::operation::batch_create_topic_reviewed_answer::BatchCreateTopicReviewedAnswerOutput).
    pub fn builder() -> crate::operation::batch_create_topic_reviewed_answer::builders::BatchCreateTopicReviewedAnswerOutputBuilder {
        crate::operation::batch_create_topic_reviewed_answer::builders::BatchCreateTopicReviewedAnswerOutputBuilder::default()
    }
}

/// A builder for [`BatchCreateTopicReviewedAnswerOutput`](crate::operation::batch_create_topic_reviewed_answer::BatchCreateTopicReviewedAnswerOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchCreateTopicReviewedAnswerOutputBuilder {
    pub(crate) topic_id: ::std::option::Option<::std::string::String>,
    pub(crate) topic_arn: ::std::option::Option<::std::string::String>,
    pub(crate) succeeded_answers: ::std::option::Option<::std::vec::Vec<crate::types::SucceededTopicReviewedAnswer>>,
    pub(crate) invalid_answers: ::std::option::Option<::std::vec::Vec<crate::types::InvalidTopicReviewedAnswer>>,
    pub(crate) status: ::std::option::Option<i32>,
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl BatchCreateTopicReviewedAnswerOutputBuilder {
    /// <p>The ID for the topic reviewed answer that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    pub fn topic_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.topic_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID for the topic reviewed answer that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    pub fn set_topic_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.topic_id = input;
        self
    }
    /// <p>The ID for the topic reviewed answer that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    pub fn get_topic_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.topic_id
    }
    /// <p>The Amazon Resource Name (ARN) of the topic.</p>
    pub fn topic_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.topic_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the topic.</p>
    pub fn set_topic_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.topic_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the topic.</p>
    pub fn get_topic_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.topic_arn
    }
    /// Appends an item to `succeeded_answers`.
    ///
    /// To override the contents of this collection use [`set_succeeded_answers`](Self::set_succeeded_answers).
    ///
    /// <p>The definition of Answers that are successfully created.</p>
    pub fn succeeded_answers(mut self, input: crate::types::SucceededTopicReviewedAnswer) -> Self {
        let mut v = self.succeeded_answers.unwrap_or_default();
        v.push(input);
        self.succeeded_answers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The definition of Answers that are successfully created.</p>
    pub fn set_succeeded_answers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SucceededTopicReviewedAnswer>>) -> Self {
        self.succeeded_answers = input;
        self
    }
    /// <p>The definition of Answers that are successfully created.</p>
    pub fn get_succeeded_answers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SucceededTopicReviewedAnswer>> {
        &self.succeeded_answers
    }
    /// Appends an item to `invalid_answers`.
    ///
    /// To override the contents of this collection use [`set_invalid_answers`](Self::set_invalid_answers).
    ///
    /// <p>The definition of Answers that are invalid and not created.</p>
    pub fn invalid_answers(mut self, input: crate::types::InvalidTopicReviewedAnswer) -> Self {
        let mut v = self.invalid_answers.unwrap_or_default();
        v.push(input);
        self.invalid_answers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The definition of Answers that are invalid and not created.</p>
    pub fn set_invalid_answers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InvalidTopicReviewedAnswer>>) -> Self {
        self.invalid_answers = input;
        self
    }
    /// <p>The definition of Answers that are invalid and not created.</p>
    pub fn get_invalid_answers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InvalidTopicReviewedAnswer>> {
        &self.invalid_answers
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(mut self, input: i32) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn set_status(mut self, input: ::std::option::Option<i32>) -> Self {
        self.status = input;
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn get_status(&self) -> &::std::option::Option<i32> {
        &self.status
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchCreateTopicReviewedAnswerOutput`](crate::operation::batch_create_topic_reviewed_answer::BatchCreateTopicReviewedAnswerOutput).
    pub fn build(self) -> crate::operation::batch_create_topic_reviewed_answer::BatchCreateTopicReviewedAnswerOutput {
        crate::operation::batch_create_topic_reviewed_answer::BatchCreateTopicReviewedAnswerOutput {
            topic_id: self.topic_id,
            topic_arn: self.topic_arn,
            succeeded_answers: self.succeeded_answers,
            invalid_answers: self.invalid_answers,
            status: self.status.unwrap_or_default(),
            request_id: self.request_id,
            _request_id: self._request_id,
        }
    }
}
