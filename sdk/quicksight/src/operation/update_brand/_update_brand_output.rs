// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateBrandOutput {
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub request_id: ::std::option::Option<::std::string::String>,
    /// <p>The details of the brand.</p>
    pub brand_detail: ::std::option::Option<crate::types::BrandDetail>,
    /// <p>The definition of the brand.</p>
    pub brand_definition: ::std::option::Option<crate::types::BrandDefinition>,
    _request_id: Option<String>,
}
impl UpdateBrandOutput {
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(&self) -> ::std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>The details of the brand.</p>
    pub fn brand_detail(&self) -> ::std::option::Option<&crate::types::BrandDetail> {
        self.brand_detail.as_ref()
    }
    /// <p>The definition of the brand.</p>
    pub fn brand_definition(&self) -> ::std::option::Option<&crate::types::BrandDefinition> {
        self.brand_definition.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for UpdateBrandOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateBrandOutput {
    /// Creates a new builder-style object to manufacture [`UpdateBrandOutput`](crate::operation::update_brand::UpdateBrandOutput).
    pub fn builder() -> crate::operation::update_brand::builders::UpdateBrandOutputBuilder {
        crate::operation::update_brand::builders::UpdateBrandOutputBuilder::default()
    }
}

/// A builder for [`UpdateBrandOutput`](crate::operation::update_brand::UpdateBrandOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateBrandOutputBuilder {
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
    pub(crate) brand_detail: ::std::option::Option<crate::types::BrandDetail>,
    pub(crate) brand_definition: ::std::option::Option<crate::types::BrandDefinition>,
    _request_id: Option<String>,
}
impl UpdateBrandOutputBuilder {
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    /// <p>The details of the brand.</p>
    pub fn brand_detail(mut self, input: crate::types::BrandDetail) -> Self {
        self.brand_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the brand.</p>
    pub fn set_brand_detail(mut self, input: ::std::option::Option<crate::types::BrandDetail>) -> Self {
        self.brand_detail = input;
        self
    }
    /// <p>The details of the brand.</p>
    pub fn get_brand_detail(&self) -> &::std::option::Option<crate::types::BrandDetail> {
        &self.brand_detail
    }
    /// <p>The definition of the brand.</p>
    pub fn brand_definition(mut self, input: crate::types::BrandDefinition) -> Self {
        self.brand_definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The definition of the brand.</p>
    pub fn set_brand_definition(mut self, input: ::std::option::Option<crate::types::BrandDefinition>) -> Self {
        self.brand_definition = input;
        self
    }
    /// <p>The definition of the brand.</p>
    pub fn get_brand_definition(&self) -> &::std::option::Option<crate::types::BrandDefinition> {
        &self.brand_definition
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateBrandOutput`](crate::operation::update_brand::UpdateBrandOutput).
    pub fn build(self) -> crate::operation::update_brand::UpdateBrandOutput {
        crate::operation::update_brand::UpdateBrandOutput {
            request_id: self.request_id,
            brand_detail: self.brand_detail,
            brand_definition: self.brand_definition,
            _request_id: self._request_id,
        }
    }
}
