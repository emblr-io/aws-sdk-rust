// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateBrandInput {
    /// <p>The ID of the Amazon Web Services account that owns the brand.</p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon QuickSight brand.</p>
    pub brand_id: ::std::option::Option<::std::string::String>,
    /// <p>The definition of the brand.</p>
    pub brand_definition: ::std::option::Option<crate::types::BrandDefinition>,
}
impl UpdateBrandInput {
    /// <p>The ID of the Amazon Web Services account that owns the brand.</p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>The ID of the Amazon QuickSight brand.</p>
    pub fn brand_id(&self) -> ::std::option::Option<&str> {
        self.brand_id.as_deref()
    }
    /// <p>The definition of the brand.</p>
    pub fn brand_definition(&self) -> ::std::option::Option<&crate::types::BrandDefinition> {
        self.brand_definition.as_ref()
    }
}
impl UpdateBrandInput {
    /// Creates a new builder-style object to manufacture [`UpdateBrandInput`](crate::operation::update_brand::UpdateBrandInput).
    pub fn builder() -> crate::operation::update_brand::builders::UpdateBrandInputBuilder {
        crate::operation::update_brand::builders::UpdateBrandInputBuilder::default()
    }
}

/// A builder for [`UpdateBrandInput`](crate::operation::update_brand::UpdateBrandInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateBrandInputBuilder {
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) brand_id: ::std::option::Option<::std::string::String>,
    pub(crate) brand_definition: ::std::option::Option<crate::types::BrandDefinition>,
}
impl UpdateBrandInputBuilder {
    /// <p>The ID of the Amazon Web Services account that owns the brand.</p>
    /// This field is required.
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the brand.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the brand.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// <p>The ID of the Amazon QuickSight brand.</p>
    /// This field is required.
    pub fn brand_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.brand_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon QuickSight brand.</p>
    pub fn set_brand_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.brand_id = input;
        self
    }
    /// <p>The ID of the Amazon QuickSight brand.</p>
    pub fn get_brand_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.brand_id
    }
    /// <p>The definition of the brand.</p>
    pub fn brand_definition(mut self, input: crate::types::BrandDefinition) -> Self {
        self.brand_definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The definition of the brand.</p>
    pub fn set_brand_definition(mut self, input: ::std::option::Option<crate::types::BrandDefinition>) -> Self {
        self.brand_definition = input;
        self
    }
    /// <p>The definition of the brand.</p>
    pub fn get_brand_definition(&self) -> &::std::option::Option<crate::types::BrandDefinition> {
        &self.brand_definition
    }
    /// Consumes the builder and constructs a [`UpdateBrandInput`](crate::operation::update_brand::UpdateBrandInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_brand::UpdateBrandInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_brand::UpdateBrandInput {
            aws_account_id: self.aws_account_id,
            brand_id: self.brand_id,
            brand_definition: self.brand_definition,
        })
    }
}
