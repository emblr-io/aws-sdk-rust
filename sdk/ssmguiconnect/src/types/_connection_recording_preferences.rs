// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The set of preferences used for recording RDP connections in the requesting Amazon Web Services account and Amazon Web Services Region. This includes details such as which S3 bucket recordings are stored in.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConnectionRecordingPreferences {
    /// <p>Determines where recordings of RDP connections are stored.</p>
    pub recording_destinations: ::std::option::Option<crate::types::RecordingDestinations>,
    /// <p>The ARN of a KMS key that is used to encrypt data while it is being processed by the service. This key must exist in the same Amazon Web Services Region as the node you start an RDP connection to.</p>
    pub kms_key_arn: ::std::string::String,
}
impl ConnectionRecordingPreferences {
    /// <p>Determines where recordings of RDP connections are stored.</p>
    pub fn recording_destinations(&self) -> ::std::option::Option<&crate::types::RecordingDestinations> {
        self.recording_destinations.as_ref()
    }
    /// <p>The ARN of a KMS key that is used to encrypt data while it is being processed by the service. This key must exist in the same Amazon Web Services Region as the node you start an RDP connection to.</p>
    pub fn kms_key_arn(&self) -> &str {
        use std::ops::Deref;
        self.kms_key_arn.deref()
    }
}
impl ConnectionRecordingPreferences {
    /// Creates a new builder-style object to manufacture [`ConnectionRecordingPreferences`](crate::types::ConnectionRecordingPreferences).
    pub fn builder() -> crate::types::builders::ConnectionRecordingPreferencesBuilder {
        crate::types::builders::ConnectionRecordingPreferencesBuilder::default()
    }
}

/// A builder for [`ConnectionRecordingPreferences`](crate::types::ConnectionRecordingPreferences).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConnectionRecordingPreferencesBuilder {
    pub(crate) recording_destinations: ::std::option::Option<crate::types::RecordingDestinations>,
    pub(crate) kms_key_arn: ::std::option::Option<::std::string::String>,
}
impl ConnectionRecordingPreferencesBuilder {
    /// <p>Determines where recordings of RDP connections are stored.</p>
    /// This field is required.
    pub fn recording_destinations(mut self, input: crate::types::RecordingDestinations) -> Self {
        self.recording_destinations = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines where recordings of RDP connections are stored.</p>
    pub fn set_recording_destinations(mut self, input: ::std::option::Option<crate::types::RecordingDestinations>) -> Self {
        self.recording_destinations = input;
        self
    }
    /// <p>Determines where recordings of RDP connections are stored.</p>
    pub fn get_recording_destinations(&self) -> &::std::option::Option<crate::types::RecordingDestinations> {
        &self.recording_destinations
    }
    /// <p>The ARN of a KMS key that is used to encrypt data while it is being processed by the service. This key must exist in the same Amazon Web Services Region as the node you start an RDP connection to.</p>
    /// This field is required.
    pub fn kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of a KMS key that is used to encrypt data while it is being processed by the service. This key must exist in the same Amazon Web Services Region as the node you start an RDP connection to.</p>
    pub fn set_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>The ARN of a KMS key that is used to encrypt data while it is being processed by the service. This key must exist in the same Amazon Web Services Region as the node you start an RDP connection to.</p>
    pub fn get_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_arn
    }
    /// Consumes the builder and constructs a [`ConnectionRecordingPreferences`](crate::types::ConnectionRecordingPreferences).
    /// This method will fail if any of the following fields are not set:
    /// - [`kms_key_arn`](crate::types::builders::ConnectionRecordingPreferencesBuilder::kms_key_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::ConnectionRecordingPreferences, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConnectionRecordingPreferences {
            recording_destinations: self.recording_destinations,
            kms_key_arn: self.kms_key_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "kms_key_arn",
                    "kms_key_arn was not specified but it is required when building ConnectionRecordingPreferences",
                )
            })?,
        })
    }
}
