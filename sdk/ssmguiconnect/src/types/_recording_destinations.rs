// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Determines where recordings of RDP connections are stored.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecordingDestinations {
    /// <p>The S3 bucket where RDP connection recordings are stored.</p>
    pub s3_buckets: ::std::vec::Vec<crate::types::S3Bucket>,
}
impl RecordingDestinations {
    /// <p>The S3 bucket where RDP connection recordings are stored.</p>
    pub fn s3_buckets(&self) -> &[crate::types::S3Bucket] {
        use std::ops::Deref;
        self.s3_buckets.deref()
    }
}
impl RecordingDestinations {
    /// Creates a new builder-style object to manufacture [`RecordingDestinations`](crate::types::RecordingDestinations).
    pub fn builder() -> crate::types::builders::RecordingDestinationsBuilder {
        crate::types::builders::RecordingDestinationsBuilder::default()
    }
}

/// A builder for [`RecordingDestinations`](crate::types::RecordingDestinations).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RecordingDestinationsBuilder {
    pub(crate) s3_buckets: ::std::option::Option<::std::vec::Vec<crate::types::S3Bucket>>,
}
impl RecordingDestinationsBuilder {
    /// Appends an item to `s3_buckets`.
    ///
    /// To override the contents of this collection use [`set_s3_buckets`](Self::set_s3_buckets).
    ///
    /// <p>The S3 bucket where RDP connection recordings are stored.</p>
    pub fn s3_buckets(mut self, input: crate::types::S3Bucket) -> Self {
        let mut v = self.s3_buckets.unwrap_or_default();
        v.push(input);
        self.s3_buckets = ::std::option::Option::Some(v);
        self
    }
    /// <p>The S3 bucket where RDP connection recordings are stored.</p>
    pub fn set_s3_buckets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::S3Bucket>>) -> Self {
        self.s3_buckets = input;
        self
    }
    /// <p>The S3 bucket where RDP connection recordings are stored.</p>
    pub fn get_s3_buckets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::S3Bucket>> {
        &self.s3_buckets
    }
    /// Consumes the builder and constructs a [`RecordingDestinations`](crate::types::RecordingDestinations).
    /// This method will fail if any of the following fields are not set:
    /// - [`s3_buckets`](crate::types::builders::RecordingDestinationsBuilder::s3_buckets)
    pub fn build(self) -> ::std::result::Result<crate::types::RecordingDestinations, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RecordingDestinations {
            s3_buckets: self.s3_buckets.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "s3_buckets",
                    "s3_buckets was not specified but it is required when building RecordingDestinations",
                )
            })?,
        })
    }
}
