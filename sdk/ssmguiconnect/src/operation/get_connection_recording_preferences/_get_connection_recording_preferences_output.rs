// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetConnectionRecordingPreferencesOutput {
    /// <p>Service-provided idempotency token.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The set of preferences used for recording RDP connections in the requesting Amazon Web Services account and Amazon Web Services Region. This includes details such as which S3 bucket recordings are stored in.</p>
    pub connection_recording_preferences: ::std::option::Option<crate::types::ConnectionRecordingPreferences>,
    _request_id: Option<String>,
}
impl GetConnectionRecordingPreferencesOutput {
    /// <p>Service-provided idempotency token.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The set of preferences used for recording RDP connections in the requesting Amazon Web Services account and Amazon Web Services Region. This includes details such as which S3 bucket recordings are stored in.</p>
    pub fn connection_recording_preferences(&self) -> ::std::option::Option<&crate::types::ConnectionRecordingPreferences> {
        self.connection_recording_preferences.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetConnectionRecordingPreferencesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetConnectionRecordingPreferencesOutput {
    /// Creates a new builder-style object to manufacture [`GetConnectionRecordingPreferencesOutput`](crate::operation::get_connection_recording_preferences::GetConnectionRecordingPreferencesOutput).
    pub fn builder() -> crate::operation::get_connection_recording_preferences::builders::GetConnectionRecordingPreferencesOutputBuilder {
        crate::operation::get_connection_recording_preferences::builders::GetConnectionRecordingPreferencesOutputBuilder::default()
    }
}

/// A builder for [`GetConnectionRecordingPreferencesOutput`](crate::operation::get_connection_recording_preferences::GetConnectionRecordingPreferencesOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetConnectionRecordingPreferencesOutputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) connection_recording_preferences: ::std::option::Option<crate::types::ConnectionRecordingPreferences>,
    _request_id: Option<String>,
}
impl GetConnectionRecordingPreferencesOutputBuilder {
    /// <p>Service-provided idempotency token.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Service-provided idempotency token.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Service-provided idempotency token.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The set of preferences used for recording RDP connections in the requesting Amazon Web Services account and Amazon Web Services Region. This includes details such as which S3 bucket recordings are stored in.</p>
    pub fn connection_recording_preferences(mut self, input: crate::types::ConnectionRecordingPreferences) -> Self {
        self.connection_recording_preferences = ::std::option::Option::Some(input);
        self
    }
    /// <p>The set of preferences used for recording RDP connections in the requesting Amazon Web Services account and Amazon Web Services Region. This includes details such as which S3 bucket recordings are stored in.</p>
    pub fn set_connection_recording_preferences(mut self, input: ::std::option::Option<crate::types::ConnectionRecordingPreferences>) -> Self {
        self.connection_recording_preferences = input;
        self
    }
    /// <p>The set of preferences used for recording RDP connections in the requesting Amazon Web Services account and Amazon Web Services Region. This includes details such as which S3 bucket recordings are stored in.</p>
    pub fn get_connection_recording_preferences(&self) -> &::std::option::Option<crate::types::ConnectionRecordingPreferences> {
        &self.connection_recording_preferences
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetConnectionRecordingPreferencesOutput`](crate::operation::get_connection_recording_preferences::GetConnectionRecordingPreferencesOutput).
    pub fn build(self) -> crate::operation::get_connection_recording_preferences::GetConnectionRecordingPreferencesOutput {
        crate::operation::get_connection_recording_preferences::GetConnectionRecordingPreferencesOutput {
            client_token: self.client_token,
            connection_recording_preferences: self.connection_recording_preferences,
            _request_id: self._request_id,
        }
    }
}
