// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for in-session inline redaction.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InlineRedactionConfiguration {
    /// <p>The inline redaction patterns to be enabled for the inline redaction configuration.</p>
    pub inline_redaction_patterns: ::std::vec::Vec<crate::types::InlineRedactionPattern>,
    /// <p>The global enforced URL configuration for the inline redaction configuration. This is applied to patterns that do not have a pattern-level enforced URL list.</p>
    pub global_enforced_urls: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The global exempt URL configuration for the inline redaction configuration. This is applied to patterns that do not have a pattern-level exempt URL list.</p>
    pub global_exempt_urls: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The global confidence level for the inline redaction configuration. This indicates the certainty of data type matches in the redaction process. Confidence level 3 means high confidence, and requires a formatted text pattern match in order for content to be redacted. Confidence level 2 means medium confidence, and redaction considers both formatted and unformatted text, and adds keyword associate to the logic. Confidence level 1 means low confidence, and redaction is enforced for both formatted pattern + unformatted pattern without keyword. This is applied to patterns that do not have a pattern-level confidence level. Defaults to confidence level 2.</p>
    pub global_confidence_level: ::std::option::Option<i32>,
}
impl InlineRedactionConfiguration {
    /// <p>The inline redaction patterns to be enabled for the inline redaction configuration.</p>
    pub fn inline_redaction_patterns(&self) -> &[crate::types::InlineRedactionPattern] {
        use std::ops::Deref;
        self.inline_redaction_patterns.deref()
    }
    /// <p>The global enforced URL configuration for the inline redaction configuration. This is applied to patterns that do not have a pattern-level enforced URL list.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.global_enforced_urls.is_none()`.
    pub fn global_enforced_urls(&self) -> &[::std::string::String] {
        self.global_enforced_urls.as_deref().unwrap_or_default()
    }
    /// <p>The global exempt URL configuration for the inline redaction configuration. This is applied to patterns that do not have a pattern-level exempt URL list.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.global_exempt_urls.is_none()`.
    pub fn global_exempt_urls(&self) -> &[::std::string::String] {
        self.global_exempt_urls.as_deref().unwrap_or_default()
    }
    /// <p>The global confidence level for the inline redaction configuration. This indicates the certainty of data type matches in the redaction process. Confidence level 3 means high confidence, and requires a formatted text pattern match in order for content to be redacted. Confidence level 2 means medium confidence, and redaction considers both formatted and unformatted text, and adds keyword associate to the logic. Confidence level 1 means low confidence, and redaction is enforced for both formatted pattern + unformatted pattern without keyword. This is applied to patterns that do not have a pattern-level confidence level. Defaults to confidence level 2.</p>
    pub fn global_confidence_level(&self) -> ::std::option::Option<i32> {
        self.global_confidence_level
    }
}
impl InlineRedactionConfiguration {
    /// Creates a new builder-style object to manufacture [`InlineRedactionConfiguration`](crate::types::InlineRedactionConfiguration).
    pub fn builder() -> crate::types::builders::InlineRedactionConfigurationBuilder {
        crate::types::builders::InlineRedactionConfigurationBuilder::default()
    }
}

/// A builder for [`InlineRedactionConfiguration`](crate::types::InlineRedactionConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InlineRedactionConfigurationBuilder {
    pub(crate) inline_redaction_patterns: ::std::option::Option<::std::vec::Vec<crate::types::InlineRedactionPattern>>,
    pub(crate) global_enforced_urls: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) global_exempt_urls: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) global_confidence_level: ::std::option::Option<i32>,
}
impl InlineRedactionConfigurationBuilder {
    /// Appends an item to `inline_redaction_patterns`.
    ///
    /// To override the contents of this collection use [`set_inline_redaction_patterns`](Self::set_inline_redaction_patterns).
    ///
    /// <p>The inline redaction patterns to be enabled for the inline redaction configuration.</p>
    pub fn inline_redaction_patterns(mut self, input: crate::types::InlineRedactionPattern) -> Self {
        let mut v = self.inline_redaction_patterns.unwrap_or_default();
        v.push(input);
        self.inline_redaction_patterns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The inline redaction patterns to be enabled for the inline redaction configuration.</p>
    pub fn set_inline_redaction_patterns(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InlineRedactionPattern>>) -> Self {
        self.inline_redaction_patterns = input;
        self
    }
    /// <p>The inline redaction patterns to be enabled for the inline redaction configuration.</p>
    pub fn get_inline_redaction_patterns(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InlineRedactionPattern>> {
        &self.inline_redaction_patterns
    }
    /// Appends an item to `global_enforced_urls`.
    ///
    /// To override the contents of this collection use [`set_global_enforced_urls`](Self::set_global_enforced_urls).
    ///
    /// <p>The global enforced URL configuration for the inline redaction configuration. This is applied to patterns that do not have a pattern-level enforced URL list.</p>
    pub fn global_enforced_urls(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.global_enforced_urls.unwrap_or_default();
        v.push(input.into());
        self.global_enforced_urls = ::std::option::Option::Some(v);
        self
    }
    /// <p>The global enforced URL configuration for the inline redaction configuration. This is applied to patterns that do not have a pattern-level enforced URL list.</p>
    pub fn set_global_enforced_urls(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.global_enforced_urls = input;
        self
    }
    /// <p>The global enforced URL configuration for the inline redaction configuration. This is applied to patterns that do not have a pattern-level enforced URL list.</p>
    pub fn get_global_enforced_urls(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.global_enforced_urls
    }
    /// Appends an item to `global_exempt_urls`.
    ///
    /// To override the contents of this collection use [`set_global_exempt_urls`](Self::set_global_exempt_urls).
    ///
    /// <p>The global exempt URL configuration for the inline redaction configuration. This is applied to patterns that do not have a pattern-level exempt URL list.</p>
    pub fn global_exempt_urls(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.global_exempt_urls.unwrap_or_default();
        v.push(input.into());
        self.global_exempt_urls = ::std::option::Option::Some(v);
        self
    }
    /// <p>The global exempt URL configuration for the inline redaction configuration. This is applied to patterns that do not have a pattern-level exempt URL list.</p>
    pub fn set_global_exempt_urls(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.global_exempt_urls = input;
        self
    }
    /// <p>The global exempt URL configuration for the inline redaction configuration. This is applied to patterns that do not have a pattern-level exempt URL list.</p>
    pub fn get_global_exempt_urls(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.global_exempt_urls
    }
    /// <p>The global confidence level for the inline redaction configuration. This indicates the certainty of data type matches in the redaction process. Confidence level 3 means high confidence, and requires a formatted text pattern match in order for content to be redacted. Confidence level 2 means medium confidence, and redaction considers both formatted and unformatted text, and adds keyword associate to the logic. Confidence level 1 means low confidence, and redaction is enforced for both formatted pattern + unformatted pattern without keyword. This is applied to patterns that do not have a pattern-level confidence level. Defaults to confidence level 2.</p>
    pub fn global_confidence_level(mut self, input: i32) -> Self {
        self.global_confidence_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The global confidence level for the inline redaction configuration. This indicates the certainty of data type matches in the redaction process. Confidence level 3 means high confidence, and requires a formatted text pattern match in order for content to be redacted. Confidence level 2 means medium confidence, and redaction considers both formatted and unformatted text, and adds keyword associate to the logic. Confidence level 1 means low confidence, and redaction is enforced for both formatted pattern + unformatted pattern without keyword. This is applied to patterns that do not have a pattern-level confidence level. Defaults to confidence level 2.</p>
    pub fn set_global_confidence_level(mut self, input: ::std::option::Option<i32>) -> Self {
        self.global_confidence_level = input;
        self
    }
    /// <p>The global confidence level for the inline redaction configuration. This indicates the certainty of data type matches in the redaction process. Confidence level 3 means high confidence, and requires a formatted text pattern match in order for content to be redacted. Confidence level 2 means medium confidence, and redaction considers both formatted and unformatted text, and adds keyword associate to the logic. Confidence level 1 means low confidence, and redaction is enforced for both formatted pattern + unformatted pattern without keyword. This is applied to patterns that do not have a pattern-level confidence level. Defaults to confidence level 2.</p>
    pub fn get_global_confidence_level(&self) -> &::std::option::Option<i32> {
        &self.global_confidence_level
    }
    /// Consumes the builder and constructs a [`InlineRedactionConfiguration`](crate::types::InlineRedactionConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`inline_redaction_patterns`](crate::types::builders::InlineRedactionConfigurationBuilder::inline_redaction_patterns)
    pub fn build(self) -> ::std::result::Result<crate::types::InlineRedactionConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::InlineRedactionConfiguration {
            inline_redaction_patterns: self.inline_redaction_patterns.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "inline_redaction_patterns",
                    "inline_redaction_patterns was not specified but it is required when building InlineRedactionConfiguration",
                )
            })?,
            global_enforced_urls: self.global_enforced_urls,
            global_exempt_urls: self.global_exempt_urls,
            global_confidence_level: self.global_confidence_level,
        })
    }
}
