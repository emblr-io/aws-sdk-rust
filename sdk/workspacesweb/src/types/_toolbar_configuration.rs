// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of the toolbar. This allows administrators to select the toolbar type and visual mode, set maximum display resolution for sessions, and choose which items are visible to end users during their sessions. If administrators do not modify these settings, end users retain control over their toolbar preferences.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ToolbarConfiguration {
    /// <p>The type of toolbar displayed during the session.</p>
    pub toolbar_type: ::std::option::Option<crate::types::ToolbarType>,
    /// <p>The visual mode of the toolbar.</p>
    pub visual_mode: ::std::option::Option<crate::types::VisualMode>,
    /// <p>The list of toolbar items to be hidden.</p>
    pub hidden_toolbar_items: ::std::option::Option<::std::vec::Vec<crate::types::ToolbarItem>>,
    /// <p>The maximum display resolution that is allowed for the session.</p>
    pub max_display_resolution: ::std::option::Option<crate::types::MaxDisplayResolution>,
}
impl ToolbarConfiguration {
    /// <p>The type of toolbar displayed during the session.</p>
    pub fn toolbar_type(&self) -> ::std::option::Option<&crate::types::ToolbarType> {
        self.toolbar_type.as_ref()
    }
    /// <p>The visual mode of the toolbar.</p>
    pub fn visual_mode(&self) -> ::std::option::Option<&crate::types::VisualMode> {
        self.visual_mode.as_ref()
    }
    /// <p>The list of toolbar items to be hidden.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.hidden_toolbar_items.is_none()`.
    pub fn hidden_toolbar_items(&self) -> &[crate::types::ToolbarItem] {
        self.hidden_toolbar_items.as_deref().unwrap_or_default()
    }
    /// <p>The maximum display resolution that is allowed for the session.</p>
    pub fn max_display_resolution(&self) -> ::std::option::Option<&crate::types::MaxDisplayResolution> {
        self.max_display_resolution.as_ref()
    }
}
impl ToolbarConfiguration {
    /// Creates a new builder-style object to manufacture [`ToolbarConfiguration`](crate::types::ToolbarConfiguration).
    pub fn builder() -> crate::types::builders::ToolbarConfigurationBuilder {
        crate::types::builders::ToolbarConfigurationBuilder::default()
    }
}

/// A builder for [`ToolbarConfiguration`](crate::types::ToolbarConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ToolbarConfigurationBuilder {
    pub(crate) toolbar_type: ::std::option::Option<crate::types::ToolbarType>,
    pub(crate) visual_mode: ::std::option::Option<crate::types::VisualMode>,
    pub(crate) hidden_toolbar_items: ::std::option::Option<::std::vec::Vec<crate::types::ToolbarItem>>,
    pub(crate) max_display_resolution: ::std::option::Option<crate::types::MaxDisplayResolution>,
}
impl ToolbarConfigurationBuilder {
    /// <p>The type of toolbar displayed during the session.</p>
    pub fn toolbar_type(mut self, input: crate::types::ToolbarType) -> Self {
        self.toolbar_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of toolbar displayed during the session.</p>
    pub fn set_toolbar_type(mut self, input: ::std::option::Option<crate::types::ToolbarType>) -> Self {
        self.toolbar_type = input;
        self
    }
    /// <p>The type of toolbar displayed during the session.</p>
    pub fn get_toolbar_type(&self) -> &::std::option::Option<crate::types::ToolbarType> {
        &self.toolbar_type
    }
    /// <p>The visual mode of the toolbar.</p>
    pub fn visual_mode(mut self, input: crate::types::VisualMode) -> Self {
        self.visual_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The visual mode of the toolbar.</p>
    pub fn set_visual_mode(mut self, input: ::std::option::Option<crate::types::VisualMode>) -> Self {
        self.visual_mode = input;
        self
    }
    /// <p>The visual mode of the toolbar.</p>
    pub fn get_visual_mode(&self) -> &::std::option::Option<crate::types::VisualMode> {
        &self.visual_mode
    }
    /// Appends an item to `hidden_toolbar_items`.
    ///
    /// To override the contents of this collection use [`set_hidden_toolbar_items`](Self::set_hidden_toolbar_items).
    ///
    /// <p>The list of toolbar items to be hidden.</p>
    pub fn hidden_toolbar_items(mut self, input: crate::types::ToolbarItem) -> Self {
        let mut v = self.hidden_toolbar_items.unwrap_or_default();
        v.push(input);
        self.hidden_toolbar_items = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of toolbar items to be hidden.</p>
    pub fn set_hidden_toolbar_items(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ToolbarItem>>) -> Self {
        self.hidden_toolbar_items = input;
        self
    }
    /// <p>The list of toolbar items to be hidden.</p>
    pub fn get_hidden_toolbar_items(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ToolbarItem>> {
        &self.hidden_toolbar_items
    }
    /// <p>The maximum display resolution that is allowed for the session.</p>
    pub fn max_display_resolution(mut self, input: crate::types::MaxDisplayResolution) -> Self {
        self.max_display_resolution = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum display resolution that is allowed for the session.</p>
    pub fn set_max_display_resolution(mut self, input: ::std::option::Option<crate::types::MaxDisplayResolution>) -> Self {
        self.max_display_resolution = input;
        self
    }
    /// <p>The maximum display resolution that is allowed for the session.</p>
    pub fn get_max_display_resolution(&self) -> &::std::option::Option<crate::types::MaxDisplayResolution> {
        &self.max_display_resolution
    }
    /// Consumes the builder and constructs a [`ToolbarConfiguration`](crate::types::ToolbarConfiguration).
    pub fn build(self) -> crate::types::ToolbarConfiguration {
        crate::types::ToolbarConfiguration {
            toolbar_type: self.toolbar_type,
            visual_mode: self.visual_mode,
            hidden_toolbar_items: self.hidden_toolbar_items,
            max_display_resolution: self.max_display_resolution,
        }
    }
}
