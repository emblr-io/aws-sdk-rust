// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The set of patterns that determine the data types redacted in session.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct InlineRedactionPattern {
    /// <p>The built-in pattern from the list of preconfigured patterns. Either a customPattern or builtInPatternId is required.</p>
    pub built_in_pattern_id: ::std::option::Option<::std::string::String>,
    /// <p>&gt;The configuration for a custom pattern. Either a customPattern or builtInPatternId is required.</p>
    pub custom_pattern: ::std::option::Option<crate::types::CustomPattern>,
    /// <p>The redaction placeholder that will replace the redacted text in session for the inline redaction pattern.</p>
    pub redaction_place_holder: ::std::option::Option<crate::types::RedactionPlaceHolder>,
    /// <p>The enforced URL configuration for the inline redaction pattern. This will override the global enforced URL configuration.</p>
    pub enforced_urls: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The exempt URL configuration for the inline redaction pattern. This will override the global exempt URL configuration for the inline redaction pattern.</p>
    pub exempt_urls: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The confidence level for inline redaction pattern. This indicates the certainty of data type matches in the redaction process. Confidence level 3 means high confidence, and requires a formatted text pattern match in order for content to be redacted. Confidence level 2 means medium confidence, and redaction considers both formatted and unformatted text, and adds keyword associate to the logic. Confidence level 1 means low confidence, and redaction is enforced for both formatted pattern + unformatted pattern without keyword. This overrides the global confidence level.</p>
    pub confidence_level: ::std::option::Option<i32>,
}
impl InlineRedactionPattern {
    /// <p>The built-in pattern from the list of preconfigured patterns. Either a customPattern or builtInPatternId is required.</p>
    pub fn built_in_pattern_id(&self) -> ::std::option::Option<&str> {
        self.built_in_pattern_id.as_deref()
    }
    /// <p>&gt;The configuration for a custom pattern. Either a customPattern or builtInPatternId is required.</p>
    pub fn custom_pattern(&self) -> ::std::option::Option<&crate::types::CustomPattern> {
        self.custom_pattern.as_ref()
    }
    /// <p>The redaction placeholder that will replace the redacted text in session for the inline redaction pattern.</p>
    pub fn redaction_place_holder(&self) -> ::std::option::Option<&crate::types::RedactionPlaceHolder> {
        self.redaction_place_holder.as_ref()
    }
    /// <p>The enforced URL configuration for the inline redaction pattern. This will override the global enforced URL configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.enforced_urls.is_none()`.
    pub fn enforced_urls(&self) -> &[::std::string::String] {
        self.enforced_urls.as_deref().unwrap_or_default()
    }
    /// <p>The exempt URL configuration for the inline redaction pattern. This will override the global exempt URL configuration for the inline redaction pattern.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.exempt_urls.is_none()`.
    pub fn exempt_urls(&self) -> &[::std::string::String] {
        self.exempt_urls.as_deref().unwrap_or_default()
    }
    /// <p>The confidence level for inline redaction pattern. This indicates the certainty of data type matches in the redaction process. Confidence level 3 means high confidence, and requires a formatted text pattern match in order for content to be redacted. Confidence level 2 means medium confidence, and redaction considers both formatted and unformatted text, and adds keyword associate to the logic. Confidence level 1 means low confidence, and redaction is enforced for both formatted pattern + unformatted pattern without keyword. This overrides the global confidence level.</p>
    pub fn confidence_level(&self) -> ::std::option::Option<i32> {
        self.confidence_level
    }
}
impl ::std::fmt::Debug for InlineRedactionPattern {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InlineRedactionPattern");
        formatter.field("built_in_pattern_id", &"*** Sensitive Data Redacted ***");
        formatter.field("custom_pattern", &self.custom_pattern);
        formatter.field("redaction_place_holder", &self.redaction_place_holder);
        formatter.field("enforced_urls", &"*** Sensitive Data Redacted ***");
        formatter.field("exempt_urls", &"*** Sensitive Data Redacted ***");
        formatter.field("confidence_level", &self.confidence_level);
        formatter.finish()
    }
}
impl InlineRedactionPattern {
    /// Creates a new builder-style object to manufacture [`InlineRedactionPattern`](crate::types::InlineRedactionPattern).
    pub fn builder() -> crate::types::builders::InlineRedactionPatternBuilder {
        crate::types::builders::InlineRedactionPatternBuilder::default()
    }
}

/// A builder for [`InlineRedactionPattern`](crate::types::InlineRedactionPattern).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct InlineRedactionPatternBuilder {
    pub(crate) built_in_pattern_id: ::std::option::Option<::std::string::String>,
    pub(crate) custom_pattern: ::std::option::Option<crate::types::CustomPattern>,
    pub(crate) redaction_place_holder: ::std::option::Option<crate::types::RedactionPlaceHolder>,
    pub(crate) enforced_urls: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) exempt_urls: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) confidence_level: ::std::option::Option<i32>,
}
impl InlineRedactionPatternBuilder {
    /// <p>The built-in pattern from the list of preconfigured patterns. Either a customPattern or builtInPatternId is required.</p>
    pub fn built_in_pattern_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.built_in_pattern_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The built-in pattern from the list of preconfigured patterns. Either a customPattern or builtInPatternId is required.</p>
    pub fn set_built_in_pattern_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.built_in_pattern_id = input;
        self
    }
    /// <p>The built-in pattern from the list of preconfigured patterns. Either a customPattern or builtInPatternId is required.</p>
    pub fn get_built_in_pattern_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.built_in_pattern_id
    }
    /// <p>&gt;The configuration for a custom pattern. Either a customPattern or builtInPatternId is required.</p>
    pub fn custom_pattern(mut self, input: crate::types::CustomPattern) -> Self {
        self.custom_pattern = ::std::option::Option::Some(input);
        self
    }
    /// <p>&gt;The configuration for a custom pattern. Either a customPattern or builtInPatternId is required.</p>
    pub fn set_custom_pattern(mut self, input: ::std::option::Option<crate::types::CustomPattern>) -> Self {
        self.custom_pattern = input;
        self
    }
    /// <p>&gt;The configuration for a custom pattern. Either a customPattern or builtInPatternId is required.</p>
    pub fn get_custom_pattern(&self) -> &::std::option::Option<crate::types::CustomPattern> {
        &self.custom_pattern
    }
    /// <p>The redaction placeholder that will replace the redacted text in session for the inline redaction pattern.</p>
    /// This field is required.
    pub fn redaction_place_holder(mut self, input: crate::types::RedactionPlaceHolder) -> Self {
        self.redaction_place_holder = ::std::option::Option::Some(input);
        self
    }
    /// <p>The redaction placeholder that will replace the redacted text in session for the inline redaction pattern.</p>
    pub fn set_redaction_place_holder(mut self, input: ::std::option::Option<crate::types::RedactionPlaceHolder>) -> Self {
        self.redaction_place_holder = input;
        self
    }
    /// <p>The redaction placeholder that will replace the redacted text in session for the inline redaction pattern.</p>
    pub fn get_redaction_place_holder(&self) -> &::std::option::Option<crate::types::RedactionPlaceHolder> {
        &self.redaction_place_holder
    }
    /// Appends an item to `enforced_urls`.
    ///
    /// To override the contents of this collection use [`set_enforced_urls`](Self::set_enforced_urls).
    ///
    /// <p>The enforced URL configuration for the inline redaction pattern. This will override the global enforced URL configuration.</p>
    pub fn enforced_urls(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.enforced_urls.unwrap_or_default();
        v.push(input.into());
        self.enforced_urls = ::std::option::Option::Some(v);
        self
    }
    /// <p>The enforced URL configuration for the inline redaction pattern. This will override the global enforced URL configuration.</p>
    pub fn set_enforced_urls(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.enforced_urls = input;
        self
    }
    /// <p>The enforced URL configuration for the inline redaction pattern. This will override the global enforced URL configuration.</p>
    pub fn get_enforced_urls(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.enforced_urls
    }
    /// Appends an item to `exempt_urls`.
    ///
    /// To override the contents of this collection use [`set_exempt_urls`](Self::set_exempt_urls).
    ///
    /// <p>The exempt URL configuration for the inline redaction pattern. This will override the global exempt URL configuration for the inline redaction pattern.</p>
    pub fn exempt_urls(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.exempt_urls.unwrap_or_default();
        v.push(input.into());
        self.exempt_urls = ::std::option::Option::Some(v);
        self
    }
    /// <p>The exempt URL configuration for the inline redaction pattern. This will override the global exempt URL configuration for the inline redaction pattern.</p>
    pub fn set_exempt_urls(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.exempt_urls = input;
        self
    }
    /// <p>The exempt URL configuration for the inline redaction pattern. This will override the global exempt URL configuration for the inline redaction pattern.</p>
    pub fn get_exempt_urls(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.exempt_urls
    }
    /// <p>The confidence level for inline redaction pattern. This indicates the certainty of data type matches in the redaction process. Confidence level 3 means high confidence, and requires a formatted text pattern match in order for content to be redacted. Confidence level 2 means medium confidence, and redaction considers both formatted and unformatted text, and adds keyword associate to the logic. Confidence level 1 means low confidence, and redaction is enforced for both formatted pattern + unformatted pattern without keyword. This overrides the global confidence level.</p>
    pub fn confidence_level(mut self, input: i32) -> Self {
        self.confidence_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The confidence level for inline redaction pattern. This indicates the certainty of data type matches in the redaction process. Confidence level 3 means high confidence, and requires a formatted text pattern match in order for content to be redacted. Confidence level 2 means medium confidence, and redaction considers both formatted and unformatted text, and adds keyword associate to the logic. Confidence level 1 means low confidence, and redaction is enforced for both formatted pattern + unformatted pattern without keyword. This overrides the global confidence level.</p>
    pub fn set_confidence_level(mut self, input: ::std::option::Option<i32>) -> Self {
        self.confidence_level = input;
        self
    }
    /// <p>The confidence level for inline redaction pattern. This indicates the certainty of data type matches in the redaction process. Confidence level 3 means high confidence, and requires a formatted text pattern match in order for content to be redacted. Confidence level 2 means medium confidence, and redaction considers both formatted and unformatted text, and adds keyword associate to the logic. Confidence level 1 means low confidence, and redaction is enforced for both formatted pattern + unformatted pattern without keyword. This overrides the global confidence level.</p>
    pub fn get_confidence_level(&self) -> &::std::option::Option<i32> {
        &self.confidence_level
    }
    /// Consumes the builder and constructs a [`InlineRedactionPattern`](crate::types::InlineRedactionPattern).
    pub fn build(self) -> crate::types::InlineRedactionPattern {
        crate::types::InlineRedactionPattern {
            built_in_pattern_id: self.built_in_pattern_id,
            custom_pattern: self.custom_pattern,
            redaction_place_holder: self.redaction_place_holder,
            enforced_urls: self.enforced_urls,
            exempt_urls: self.exempt_urls,
            confidence_level: self.confidence_level,
        }
    }
}
impl ::std::fmt::Debug for InlineRedactionPatternBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InlineRedactionPatternBuilder");
        formatter.field("built_in_pattern_id", &"*** Sensitive Data Redacted ***");
        formatter.field("custom_pattern", &self.custom_pattern);
        formatter.field("redaction_place_holder", &self.redaction_place_holder);
        formatter.field("enforced_urls", &"*** Sensitive Data Redacted ***");
        formatter.field("exempt_urls", &"*** Sensitive Data Redacted ***");
        formatter.field("confidence_level", &self.confidence_level);
        formatter.finish()
    }
}
