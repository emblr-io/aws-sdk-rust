// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The redaction placeholder that will replace the redacted text in session.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RedactionPlaceHolder {
    /// <p>The redaction placeholder type that will replace the redacted text in session.</p>
    pub redaction_place_holder_type: crate::types::RedactionPlaceHolderType,
    /// <p>The redaction placeholder text that will replace the redacted text in session for the custom text redaction placeholder type.</p>
    pub redaction_place_holder_text: ::std::option::Option<::std::string::String>,
}
impl RedactionPlaceHolder {
    /// <p>The redaction placeholder type that will replace the redacted text in session.</p>
    pub fn redaction_place_holder_type(&self) -> &crate::types::RedactionPlaceHolderType {
        &self.redaction_place_holder_type
    }
    /// <p>The redaction placeholder text that will replace the redacted text in session for the custom text redaction placeholder type.</p>
    pub fn redaction_place_holder_text(&self) -> ::std::option::Option<&str> {
        self.redaction_place_holder_text.as_deref()
    }
}
impl ::std::fmt::Debug for RedactionPlaceHolder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RedactionPlaceHolder");
        formatter.field("redaction_place_holder_type", &self.redaction_place_holder_type);
        formatter.field("redaction_place_holder_text", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RedactionPlaceHolder {
    /// Creates a new builder-style object to manufacture [`RedactionPlaceHolder`](crate::types::RedactionPlaceHolder).
    pub fn builder() -> crate::types::builders::RedactionPlaceHolderBuilder {
        crate::types::builders::RedactionPlaceHolderBuilder::default()
    }
}

/// A builder for [`RedactionPlaceHolder`](crate::types::RedactionPlaceHolder).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RedactionPlaceHolderBuilder {
    pub(crate) redaction_place_holder_type: ::std::option::Option<crate::types::RedactionPlaceHolderType>,
    pub(crate) redaction_place_holder_text: ::std::option::Option<::std::string::String>,
}
impl RedactionPlaceHolderBuilder {
    /// <p>The redaction placeholder type that will replace the redacted text in session.</p>
    /// This field is required.
    pub fn redaction_place_holder_type(mut self, input: crate::types::RedactionPlaceHolderType) -> Self {
        self.redaction_place_holder_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The redaction placeholder type that will replace the redacted text in session.</p>
    pub fn set_redaction_place_holder_type(mut self, input: ::std::option::Option<crate::types::RedactionPlaceHolderType>) -> Self {
        self.redaction_place_holder_type = input;
        self
    }
    /// <p>The redaction placeholder type that will replace the redacted text in session.</p>
    pub fn get_redaction_place_holder_type(&self) -> &::std::option::Option<crate::types::RedactionPlaceHolderType> {
        &self.redaction_place_holder_type
    }
    /// <p>The redaction placeholder text that will replace the redacted text in session for the custom text redaction placeholder type.</p>
    pub fn redaction_place_holder_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.redaction_place_holder_text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The redaction placeholder text that will replace the redacted text in session for the custom text redaction placeholder type.</p>
    pub fn set_redaction_place_holder_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.redaction_place_holder_text = input;
        self
    }
    /// <p>The redaction placeholder text that will replace the redacted text in session for the custom text redaction placeholder type.</p>
    pub fn get_redaction_place_holder_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.redaction_place_holder_text
    }
    /// Consumes the builder and constructs a [`RedactionPlaceHolder`](crate::types::RedactionPlaceHolder).
    /// This method will fail if any of the following fields are not set:
    /// - [`redaction_place_holder_type`](crate::types::builders::RedactionPlaceHolderBuilder::redaction_place_holder_type)
    pub fn build(self) -> ::std::result::Result<crate::types::RedactionPlaceHolder, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RedactionPlaceHolder {
            redaction_place_holder_type: self.redaction_place_holder_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "redaction_place_holder_type",
                    "redaction_place_holder_type was not specified but it is required when building RedactionPlaceHolder",
                )
            })?,
            redaction_place_holder_text: self.redaction_place_holder_text,
        })
    }
}
impl ::std::fmt::Debug for RedactionPlaceHolderBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RedactionPlaceHolderBuilder");
        formatter.field("redaction_place_holder_type", &self.redaction_place_holder_type);
        formatter.field("redaction_place_holder_text", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
