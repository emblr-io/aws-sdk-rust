// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Identifes a user level permission for a channel configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SlackUserIdentity {
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub iam_role_arn: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the SlackChannelConfiguration associated with the user identity to delete.</p>
    pub chat_configuration_arn: ::std::string::String,
    /// <p>The ID of the Slack workspace authorized with AWS Chatbot.</p>
    pub slack_team_id: ::std::string::String,
    /// <p>The ID of the user in Slack</p>
    pub slack_user_id: ::std::string::String,
    /// <p>The AWS user identity ARN used to associate a Slack user ID with an IAM Role.</p>
    pub aws_user_identity: ::std::option::Option<::std::string::String>,
}
impl SlackUserIdentity {
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn iam_role_arn(&self) -> &str {
        use std::ops::Deref;
        self.iam_role_arn.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the SlackChannelConfiguration associated with the user identity to delete.</p>
    pub fn chat_configuration_arn(&self) -> &str {
        use std::ops::Deref;
        self.chat_configuration_arn.deref()
    }
    /// <p>The ID of the Slack workspace authorized with AWS Chatbot.</p>
    pub fn slack_team_id(&self) -> &str {
        use std::ops::Deref;
        self.slack_team_id.deref()
    }
    /// <p>The ID of the user in Slack</p>
    pub fn slack_user_id(&self) -> &str {
        use std::ops::Deref;
        self.slack_user_id.deref()
    }
    /// <p>The AWS user identity ARN used to associate a Slack user ID with an IAM Role.</p>
    pub fn aws_user_identity(&self) -> ::std::option::Option<&str> {
        self.aws_user_identity.as_deref()
    }
}
impl SlackUserIdentity {
    /// Creates a new builder-style object to manufacture [`SlackUserIdentity`](crate::types::SlackUserIdentity).
    pub fn builder() -> crate::types::builders::SlackUserIdentityBuilder {
        crate::types::builders::SlackUserIdentityBuilder::default()
    }
}

/// A builder for [`SlackUserIdentity`](crate::types::SlackUserIdentity).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SlackUserIdentityBuilder {
    pub(crate) iam_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) chat_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) slack_team_id: ::std::option::Option<::std::string::String>,
    pub(crate) slack_user_id: ::std::option::Option<::std::string::String>,
    pub(crate) aws_user_identity: ::std::option::Option<::std::string::String>,
}
impl SlackUserIdentityBuilder {
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    /// This field is required.
    pub fn iam_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn set_iam_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_role_arn = input;
        self
    }
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn get_iam_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_role_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the SlackChannelConfiguration associated with the user identity to delete.</p>
    /// This field is required.
    pub fn chat_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.chat_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the SlackChannelConfiguration associated with the user identity to delete.</p>
    pub fn set_chat_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.chat_configuration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the SlackChannelConfiguration associated with the user identity to delete.</p>
    pub fn get_chat_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.chat_configuration_arn
    }
    /// <p>The ID of the Slack workspace authorized with AWS Chatbot.</p>
    /// This field is required.
    pub fn slack_team_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slack_team_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Slack workspace authorized with AWS Chatbot.</p>
    pub fn set_slack_team_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slack_team_id = input;
        self
    }
    /// <p>The ID of the Slack workspace authorized with AWS Chatbot.</p>
    pub fn get_slack_team_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.slack_team_id
    }
    /// <p>The ID of the user in Slack</p>
    /// This field is required.
    pub fn slack_user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slack_user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the user in Slack</p>
    pub fn set_slack_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slack_user_id = input;
        self
    }
    /// <p>The ID of the user in Slack</p>
    pub fn get_slack_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.slack_user_id
    }
    /// <p>The AWS user identity ARN used to associate a Slack user ID with an IAM Role.</p>
    pub fn aws_user_identity(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_user_identity = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS user identity ARN used to associate a Slack user ID with an IAM Role.</p>
    pub fn set_aws_user_identity(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_user_identity = input;
        self
    }
    /// <p>The AWS user identity ARN used to associate a Slack user ID with an IAM Role.</p>
    pub fn get_aws_user_identity(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_user_identity
    }
    /// Consumes the builder and constructs a [`SlackUserIdentity`](crate::types::SlackUserIdentity).
    /// This method will fail if any of the following fields are not set:
    /// - [`iam_role_arn`](crate::types::builders::SlackUserIdentityBuilder::iam_role_arn)
    /// - [`chat_configuration_arn`](crate::types::builders::SlackUserIdentityBuilder::chat_configuration_arn)
    /// - [`slack_team_id`](crate::types::builders::SlackUserIdentityBuilder::slack_team_id)
    /// - [`slack_user_id`](crate::types::builders::SlackUserIdentityBuilder::slack_user_id)
    pub fn build(self) -> ::std::result::Result<crate::types::SlackUserIdentity, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SlackUserIdentity {
            iam_role_arn: self.iam_role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "iam_role_arn",
                    "iam_role_arn was not specified but it is required when building SlackUserIdentity",
                )
            })?,
            chat_configuration_arn: self.chat_configuration_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "chat_configuration_arn",
                    "chat_configuration_arn was not specified but it is required when building SlackUserIdentity",
                )
            })?,
            slack_team_id: self.slack_team_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "slack_team_id",
                    "slack_team_id was not specified but it is required when building SlackUserIdentity",
                )
            })?,
            slack_user_id: self.slack_user_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "slack_user_id",
                    "slack_user_id was not specified but it is required when building SlackUserIdentity",
                )
            })?,
            aws_user_identity: self.aws_user_identity,
        })
    }
}
