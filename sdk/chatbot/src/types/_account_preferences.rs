// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Preferences related to AWS Chatbot usage in the calling AWS account.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccountPreferences {
    /// <p>Enables use of a user role requirement in your chat configuration.</p>
    pub user_authorization_required: ::std::option::Option<bool>,
    /// <p>Turns on training data collection.</p>
    /// <p>This helps improve the AWS Chatbot experience by allowing AWS Chatbot to store and use your customer information, such as AWS Chatbot configurations, notifications, user inputs, AWS Chatbot generated responses, and interaction data. This data helps us to continuously improve and develop Artificial Intelligence (AI) technologies. Your data is not shared with any third parties and is protected using sophisticated controls to prevent unauthorized access and misuse. AWS Chatbot does not store or use interactions in chat channels with Amazon Q for training AI technologies for AWS Chatbot.</p>
    pub training_data_collection_enabled: ::std::option::Option<bool>,
}
impl AccountPreferences {
    /// <p>Enables use of a user role requirement in your chat configuration.</p>
    pub fn user_authorization_required(&self) -> ::std::option::Option<bool> {
        self.user_authorization_required
    }
    /// <p>Turns on training data collection.</p>
    /// <p>This helps improve the AWS Chatbot experience by allowing AWS Chatbot to store and use your customer information, such as AWS Chatbot configurations, notifications, user inputs, AWS Chatbot generated responses, and interaction data. This data helps us to continuously improve and develop Artificial Intelligence (AI) technologies. Your data is not shared with any third parties and is protected using sophisticated controls to prevent unauthorized access and misuse. AWS Chatbot does not store or use interactions in chat channels with Amazon Q for training AI technologies for AWS Chatbot.</p>
    pub fn training_data_collection_enabled(&self) -> ::std::option::Option<bool> {
        self.training_data_collection_enabled
    }
}
impl AccountPreferences {
    /// Creates a new builder-style object to manufacture [`AccountPreferences`](crate::types::AccountPreferences).
    pub fn builder() -> crate::types::builders::AccountPreferencesBuilder {
        crate::types::builders::AccountPreferencesBuilder::default()
    }
}

/// A builder for [`AccountPreferences`](crate::types::AccountPreferences).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AccountPreferencesBuilder {
    pub(crate) user_authorization_required: ::std::option::Option<bool>,
    pub(crate) training_data_collection_enabled: ::std::option::Option<bool>,
}
impl AccountPreferencesBuilder {
    /// <p>Enables use of a user role requirement in your chat configuration.</p>
    pub fn user_authorization_required(mut self, input: bool) -> Self {
        self.user_authorization_required = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables use of a user role requirement in your chat configuration.</p>
    pub fn set_user_authorization_required(mut self, input: ::std::option::Option<bool>) -> Self {
        self.user_authorization_required = input;
        self
    }
    /// <p>Enables use of a user role requirement in your chat configuration.</p>
    pub fn get_user_authorization_required(&self) -> &::std::option::Option<bool> {
        &self.user_authorization_required
    }
    /// <p>Turns on training data collection.</p>
    /// <p>This helps improve the AWS Chatbot experience by allowing AWS Chatbot to store and use your customer information, such as AWS Chatbot configurations, notifications, user inputs, AWS Chatbot generated responses, and interaction data. This data helps us to continuously improve and develop Artificial Intelligence (AI) technologies. Your data is not shared with any third parties and is protected using sophisticated controls to prevent unauthorized access and misuse. AWS Chatbot does not store or use interactions in chat channels with Amazon Q for training AI technologies for AWS Chatbot.</p>
    pub fn training_data_collection_enabled(mut self, input: bool) -> Self {
        self.training_data_collection_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Turns on training data collection.</p>
    /// <p>This helps improve the AWS Chatbot experience by allowing AWS Chatbot to store and use your customer information, such as AWS Chatbot configurations, notifications, user inputs, AWS Chatbot generated responses, and interaction data. This data helps us to continuously improve and develop Artificial Intelligence (AI) technologies. Your data is not shared with any third parties and is protected using sophisticated controls to prevent unauthorized access and misuse. AWS Chatbot does not store or use interactions in chat channels with Amazon Q for training AI technologies for AWS Chatbot.</p>
    pub fn set_training_data_collection_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.training_data_collection_enabled = input;
        self
    }
    /// <p>Turns on training data collection.</p>
    /// <p>This helps improve the AWS Chatbot experience by allowing AWS Chatbot to store and use your customer information, such as AWS Chatbot configurations, notifications, user inputs, AWS Chatbot generated responses, and interaction data. This data helps us to continuously improve and develop Artificial Intelligence (AI) technologies. Your data is not shared with any third parties and is protected using sophisticated controls to prevent unauthorized access and misuse. AWS Chatbot does not store or use interactions in chat channels with Amazon Q for training AI technologies for AWS Chatbot.</p>
    pub fn get_training_data_collection_enabled(&self) -> &::std::option::Option<bool> {
        &self.training_data_collection_enabled
    }
    /// Consumes the builder and constructs a [`AccountPreferences`](crate::types::AccountPreferences).
    pub fn build(self) -> crate::types::AccountPreferences {
        crate::types::AccountPreferences {
            user_authorization_required: self.user_authorization_required,
            training_data_collection_enabled: self.training_data_collection_enabled,
        }
    }
}
