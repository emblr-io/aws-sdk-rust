// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An AWS Chatbot configuration for Slack.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SlackChannelConfiguration {
    /// <p>Name of the Slack workspace.</p>
    pub slack_team_name: ::std::string::String,
    /// <p>The ID of the Slack workspace authorized with Amazon Chime.</p>
    pub slack_team_id: ::std::string::String,
    /// <p>The ID of the Slack channel.</p>
    /// <p>To get this ID, open Slack, right click on the channel name in the left pane, then choose Copy Link. The channel ID is the 9-character string at the end of the URL. For example, ABCBBLZZZ.</p>
    pub slack_channel_id: ::std::string::String,
    /// <p>The name of the Slack channel.</p>
    pub slack_channel_name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the SlackChannelConfiguration.</p>
    pub chat_configuration_arn: ::std::string::String,
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub iam_role_arn: ::std::string::String,
    /// <p>The ARNs of the SNS topics that deliver notifications to AWS Chatbot.</p>
    pub sns_topic_arns: ::std::vec::Vec<::std::string::String>,
    /// <p>The name of the configuration.</p>
    pub configuration_name: ::std::option::Option<::std::string::String>,
    /// <p>Logging levels include <code>ERROR</code>, <code>INFO</code>, or <code>NONE</code>.</p>
    pub logging_level: ::std::option::Option<::std::string::String>,
    /// <p>The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed <code>AdministratorAccess</code> policy is applied by default if this is not set.</p>
    pub guardrail_policy_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Enables use of a user role requirement in your chat configuration.</p>
    pub user_authorization_required: ::std::option::Option<bool>,
    /// <p>A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>Either <code>ENABLED</code> or <code>DISABLED</code>. The resource returns <code>DISABLED</code> if the organization's AWS Chatbot policy has explicitly denied that configuration. For example, if Amazon Chime is disabled.</p>
    pub state: ::std::option::Option<::std::string::String>,
    /// <p>Provided if State is <code>DISABLED</code>. Provides context as to why the resource is disabled.</p>
    pub state_reason: ::std::option::Option<::std::string::String>,
}
impl SlackChannelConfiguration {
    /// <p>Name of the Slack workspace.</p>
    pub fn slack_team_name(&self) -> &str {
        use std::ops::Deref;
        self.slack_team_name.deref()
    }
    /// <p>The ID of the Slack workspace authorized with Amazon Chime.</p>
    pub fn slack_team_id(&self) -> &str {
        use std::ops::Deref;
        self.slack_team_id.deref()
    }
    /// <p>The ID of the Slack channel.</p>
    /// <p>To get this ID, open Slack, right click on the channel name in the left pane, then choose Copy Link. The channel ID is the 9-character string at the end of the URL. For example, ABCBBLZZZ.</p>
    pub fn slack_channel_id(&self) -> &str {
        use std::ops::Deref;
        self.slack_channel_id.deref()
    }
    /// <p>The name of the Slack channel.</p>
    pub fn slack_channel_name(&self) -> &str {
        use std::ops::Deref;
        self.slack_channel_name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the SlackChannelConfiguration.</p>
    pub fn chat_configuration_arn(&self) -> &str {
        use std::ops::Deref;
        self.chat_configuration_arn.deref()
    }
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn iam_role_arn(&self) -> &str {
        use std::ops::Deref;
        self.iam_role_arn.deref()
    }
    /// <p>The ARNs of the SNS topics that deliver notifications to AWS Chatbot.</p>
    pub fn sns_topic_arns(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.sns_topic_arns.deref()
    }
    /// <p>The name of the configuration.</p>
    pub fn configuration_name(&self) -> ::std::option::Option<&str> {
        self.configuration_name.as_deref()
    }
    /// <p>Logging levels include <code>ERROR</code>, <code>INFO</code>, or <code>NONE</code>.</p>
    pub fn logging_level(&self) -> ::std::option::Option<&str> {
        self.logging_level.as_deref()
    }
    /// <p>The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed <code>AdministratorAccess</code> policy is applied by default if this is not set.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.guardrail_policy_arns.is_none()`.
    pub fn guardrail_policy_arns(&self) -> &[::std::string::String] {
        self.guardrail_policy_arns.as_deref().unwrap_or_default()
    }
    /// <p>Enables use of a user role requirement in your chat configuration.</p>
    pub fn user_authorization_required(&self) -> ::std::option::Option<bool> {
        self.user_authorization_required
    }
    /// <p>A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>Either <code>ENABLED</code> or <code>DISABLED</code>. The resource returns <code>DISABLED</code> if the organization's AWS Chatbot policy has explicitly denied that configuration. For example, if Amazon Chime is disabled.</p>
    pub fn state(&self) -> ::std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>Provided if State is <code>DISABLED</code>. Provides context as to why the resource is disabled.</p>
    pub fn state_reason(&self) -> ::std::option::Option<&str> {
        self.state_reason.as_deref()
    }
}
impl ::std::fmt::Debug for SlackChannelConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SlackChannelConfiguration");
        formatter.field("slack_team_name", &self.slack_team_name);
        formatter.field("slack_team_id", &self.slack_team_id);
        formatter.field("slack_channel_id", &self.slack_channel_id);
        formatter.field("slack_channel_name", &"*** Sensitive Data Redacted ***");
        formatter.field("chat_configuration_arn", &self.chat_configuration_arn);
        formatter.field("iam_role_arn", &self.iam_role_arn);
        formatter.field("sns_topic_arns", &self.sns_topic_arns);
        formatter.field("configuration_name", &self.configuration_name);
        formatter.field("logging_level", &self.logging_level);
        formatter.field("guardrail_policy_arns", &self.guardrail_policy_arns);
        formatter.field("user_authorization_required", &self.user_authorization_required);
        formatter.field("tags", &self.tags);
        formatter.field("state", &self.state);
        formatter.field("state_reason", &self.state_reason);
        formatter.finish()
    }
}
impl SlackChannelConfiguration {
    /// Creates a new builder-style object to manufacture [`SlackChannelConfiguration`](crate::types::SlackChannelConfiguration).
    pub fn builder() -> crate::types::builders::SlackChannelConfigurationBuilder {
        crate::types::builders::SlackChannelConfigurationBuilder::default()
    }
}

/// A builder for [`SlackChannelConfiguration`](crate::types::SlackChannelConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct SlackChannelConfigurationBuilder {
    pub(crate) slack_team_name: ::std::option::Option<::std::string::String>,
    pub(crate) slack_team_id: ::std::option::Option<::std::string::String>,
    pub(crate) slack_channel_id: ::std::option::Option<::std::string::String>,
    pub(crate) slack_channel_name: ::std::option::Option<::std::string::String>,
    pub(crate) chat_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) iam_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) sns_topic_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) configuration_name: ::std::option::Option<::std::string::String>,
    pub(crate) logging_level: ::std::option::Option<::std::string::String>,
    pub(crate) guardrail_policy_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) user_authorization_required: ::std::option::Option<bool>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) state: ::std::option::Option<::std::string::String>,
    pub(crate) state_reason: ::std::option::Option<::std::string::String>,
}
impl SlackChannelConfigurationBuilder {
    /// <p>Name of the Slack workspace.</p>
    /// This field is required.
    pub fn slack_team_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slack_team_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the Slack workspace.</p>
    pub fn set_slack_team_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slack_team_name = input;
        self
    }
    /// <p>Name of the Slack workspace.</p>
    pub fn get_slack_team_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.slack_team_name
    }
    /// <p>The ID of the Slack workspace authorized with Amazon Chime.</p>
    /// This field is required.
    pub fn slack_team_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slack_team_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Slack workspace authorized with Amazon Chime.</p>
    pub fn set_slack_team_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slack_team_id = input;
        self
    }
    /// <p>The ID of the Slack workspace authorized with Amazon Chime.</p>
    pub fn get_slack_team_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.slack_team_id
    }
    /// <p>The ID of the Slack channel.</p>
    /// <p>To get this ID, open Slack, right click on the channel name in the left pane, then choose Copy Link. The channel ID is the 9-character string at the end of the URL. For example, ABCBBLZZZ.</p>
    /// This field is required.
    pub fn slack_channel_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slack_channel_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Slack channel.</p>
    /// <p>To get this ID, open Slack, right click on the channel name in the left pane, then choose Copy Link. The channel ID is the 9-character string at the end of the URL. For example, ABCBBLZZZ.</p>
    pub fn set_slack_channel_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slack_channel_id = input;
        self
    }
    /// <p>The ID of the Slack channel.</p>
    /// <p>To get this ID, open Slack, right click on the channel name in the left pane, then choose Copy Link. The channel ID is the 9-character string at the end of the URL. For example, ABCBBLZZZ.</p>
    pub fn get_slack_channel_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.slack_channel_id
    }
    /// <p>The name of the Slack channel.</p>
    /// This field is required.
    pub fn slack_channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slack_channel_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Slack channel.</p>
    pub fn set_slack_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slack_channel_name = input;
        self
    }
    /// <p>The name of the Slack channel.</p>
    pub fn get_slack_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.slack_channel_name
    }
    /// <p>The Amazon Resource Name (ARN) of the SlackChannelConfiguration.</p>
    /// This field is required.
    pub fn chat_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.chat_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the SlackChannelConfiguration.</p>
    pub fn set_chat_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.chat_configuration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the SlackChannelConfiguration.</p>
    pub fn get_chat_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.chat_configuration_arn
    }
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    /// This field is required.
    pub fn iam_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn set_iam_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_role_arn = input;
        self
    }
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn get_iam_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_role_arn
    }
    /// Appends an item to `sns_topic_arns`.
    ///
    /// To override the contents of this collection use [`set_sns_topic_arns`](Self::set_sns_topic_arns).
    ///
    /// <p>The ARNs of the SNS topics that deliver notifications to AWS Chatbot.</p>
    pub fn sns_topic_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.sns_topic_arns.unwrap_or_default();
        v.push(input.into());
        self.sns_topic_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The ARNs of the SNS topics that deliver notifications to AWS Chatbot.</p>
    pub fn set_sns_topic_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.sns_topic_arns = input;
        self
    }
    /// <p>The ARNs of the SNS topics that deliver notifications to AWS Chatbot.</p>
    pub fn get_sns_topic_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.sns_topic_arns
    }
    /// <p>The name of the configuration.</p>
    pub fn configuration_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configuration_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the configuration.</p>
    pub fn set_configuration_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configuration_name = input;
        self
    }
    /// <p>The name of the configuration.</p>
    pub fn get_configuration_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.configuration_name
    }
    /// <p>Logging levels include <code>ERROR</code>, <code>INFO</code>, or <code>NONE</code>.</p>
    pub fn logging_level(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.logging_level = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Logging levels include <code>ERROR</code>, <code>INFO</code>, or <code>NONE</code>.</p>
    pub fn set_logging_level(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.logging_level = input;
        self
    }
    /// <p>Logging levels include <code>ERROR</code>, <code>INFO</code>, or <code>NONE</code>.</p>
    pub fn get_logging_level(&self) -> &::std::option::Option<::std::string::String> {
        &self.logging_level
    }
    /// Appends an item to `guardrail_policy_arns`.
    ///
    /// To override the contents of this collection use [`set_guardrail_policy_arns`](Self::set_guardrail_policy_arns).
    ///
    /// <p>The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed <code>AdministratorAccess</code> policy is applied by default if this is not set.</p>
    pub fn guardrail_policy_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.guardrail_policy_arns.unwrap_or_default();
        v.push(input.into());
        self.guardrail_policy_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed <code>AdministratorAccess</code> policy is applied by default if this is not set.</p>
    pub fn set_guardrail_policy_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.guardrail_policy_arns = input;
        self
    }
    /// <p>The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed <code>AdministratorAccess</code> policy is applied by default if this is not set.</p>
    pub fn get_guardrail_policy_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.guardrail_policy_arns
    }
    /// <p>Enables use of a user role requirement in your chat configuration.</p>
    pub fn user_authorization_required(mut self, input: bool) -> Self {
        self.user_authorization_required = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables use of a user role requirement in your chat configuration.</p>
    pub fn set_user_authorization_required(mut self, input: ::std::option::Option<bool>) -> Self {
        self.user_authorization_required = input;
        self
    }
    /// <p>Enables use of a user role requirement in your chat configuration.</p>
    pub fn get_user_authorization_required(&self) -> &::std::option::Option<bool> {
        &self.user_authorization_required
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>Either <code>ENABLED</code> or <code>DISABLED</code>. The resource returns <code>DISABLED</code> if the organization's AWS Chatbot policy has explicitly denied that configuration. For example, if Amazon Chime is disabled.</p>
    pub fn state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Either <code>ENABLED</code> or <code>DISABLED</code>. The resource returns <code>DISABLED</code> if the organization's AWS Chatbot policy has explicitly denied that configuration. For example, if Amazon Chime is disabled.</p>
    pub fn set_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>Either <code>ENABLED</code> or <code>DISABLED</code>. The resource returns <code>DISABLED</code> if the organization's AWS Chatbot policy has explicitly denied that configuration. For example, if Amazon Chime is disabled.</p>
    pub fn get_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.state
    }
    /// <p>Provided if State is <code>DISABLED</code>. Provides context as to why the resource is disabled.</p>
    pub fn state_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provided if State is <code>DISABLED</code>. Provides context as to why the resource is disabled.</p>
    pub fn set_state_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_reason = input;
        self
    }
    /// <p>Provided if State is <code>DISABLED</code>. Provides context as to why the resource is disabled.</p>
    pub fn get_state_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_reason
    }
    /// Consumes the builder and constructs a [`SlackChannelConfiguration`](crate::types::SlackChannelConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`slack_team_name`](crate::types::builders::SlackChannelConfigurationBuilder::slack_team_name)
    /// - [`slack_team_id`](crate::types::builders::SlackChannelConfigurationBuilder::slack_team_id)
    /// - [`slack_channel_id`](crate::types::builders::SlackChannelConfigurationBuilder::slack_channel_id)
    /// - [`slack_channel_name`](crate::types::builders::SlackChannelConfigurationBuilder::slack_channel_name)
    /// - [`chat_configuration_arn`](crate::types::builders::SlackChannelConfigurationBuilder::chat_configuration_arn)
    /// - [`iam_role_arn`](crate::types::builders::SlackChannelConfigurationBuilder::iam_role_arn)
    /// - [`sns_topic_arns`](crate::types::builders::SlackChannelConfigurationBuilder::sns_topic_arns)
    pub fn build(self) -> ::std::result::Result<crate::types::SlackChannelConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SlackChannelConfiguration {
            slack_team_name: self.slack_team_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "slack_team_name",
                    "slack_team_name was not specified but it is required when building SlackChannelConfiguration",
                )
            })?,
            slack_team_id: self.slack_team_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "slack_team_id",
                    "slack_team_id was not specified but it is required when building SlackChannelConfiguration",
                )
            })?,
            slack_channel_id: self.slack_channel_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "slack_channel_id",
                    "slack_channel_id was not specified but it is required when building SlackChannelConfiguration",
                )
            })?,
            slack_channel_name: self.slack_channel_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "slack_channel_name",
                    "slack_channel_name was not specified but it is required when building SlackChannelConfiguration",
                )
            })?,
            chat_configuration_arn: self.chat_configuration_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "chat_configuration_arn",
                    "chat_configuration_arn was not specified but it is required when building SlackChannelConfiguration",
                )
            })?,
            iam_role_arn: self.iam_role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "iam_role_arn",
                    "iam_role_arn was not specified but it is required when building SlackChannelConfiguration",
                )
            })?,
            sns_topic_arns: self.sns_topic_arns.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sns_topic_arns",
                    "sns_topic_arns was not specified but it is required when building SlackChannelConfiguration",
                )
            })?,
            configuration_name: self.configuration_name,
            logging_level: self.logging_level,
            guardrail_policy_arns: self.guardrail_policy_arns,
            user_authorization_required: self.user_authorization_required,
            tags: self.tags,
            state: self.state,
            state_reason: self.state_reason,
        })
    }
}
impl ::std::fmt::Debug for SlackChannelConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SlackChannelConfigurationBuilder");
        formatter.field("slack_team_name", &self.slack_team_name);
        formatter.field("slack_team_id", &self.slack_team_id);
        formatter.field("slack_channel_id", &self.slack_channel_id);
        formatter.field("slack_channel_name", &"*** Sensitive Data Redacted ***");
        formatter.field("chat_configuration_arn", &self.chat_configuration_arn);
        formatter.field("iam_role_arn", &self.iam_role_arn);
        formatter.field("sns_topic_arns", &self.sns_topic_arns);
        formatter.field("configuration_name", &self.configuration_name);
        formatter.field("logging_level", &self.logging_level);
        formatter.field("guardrail_policy_arns", &self.guardrail_policy_arns);
        formatter.field("user_authorization_required", &self.user_authorization_required);
        formatter.field("tags", &self.tags);
        formatter.field("state", &self.state);
        formatter.field("state_reason", &self.state_reason);
        formatter.finish()
    }
}
