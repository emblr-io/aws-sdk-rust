// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines when a custom action button should be attached to a notification.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomActionAttachment {
    /// <p>The type of notification that the custom action should be attached to.</p>
    pub notification_type: ::std::option::Option<::std::string::String>,
    /// <p>The text of the button that appears on the notification.</p>
    pub button_text: ::std::option::Option<::std::string::String>,
    /// <p>The criteria for when a button should be shown based on values in the notification.</p>
    pub criteria: ::std::option::Option<::std::vec::Vec<crate::types::CustomActionAttachmentCriteria>>,
    /// <p>The variables to extract from the notification.</p>
    pub variables: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CustomActionAttachment {
    /// <p>The type of notification that the custom action should be attached to.</p>
    pub fn notification_type(&self) -> ::std::option::Option<&str> {
        self.notification_type.as_deref()
    }
    /// <p>The text of the button that appears on the notification.</p>
    pub fn button_text(&self) -> ::std::option::Option<&str> {
        self.button_text.as_deref()
    }
    /// <p>The criteria for when a button should be shown based on values in the notification.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.criteria.is_none()`.
    pub fn criteria(&self) -> &[crate::types::CustomActionAttachmentCriteria] {
        self.criteria.as_deref().unwrap_or_default()
    }
    /// <p>The variables to extract from the notification.</p>
    pub fn variables(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.variables.as_ref()
    }
}
impl CustomActionAttachment {
    /// Creates a new builder-style object to manufacture [`CustomActionAttachment`](crate::types::CustomActionAttachment).
    pub fn builder() -> crate::types::builders::CustomActionAttachmentBuilder {
        crate::types::builders::CustomActionAttachmentBuilder::default()
    }
}

/// A builder for [`CustomActionAttachment`](crate::types::CustomActionAttachment).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CustomActionAttachmentBuilder {
    pub(crate) notification_type: ::std::option::Option<::std::string::String>,
    pub(crate) button_text: ::std::option::Option<::std::string::String>,
    pub(crate) criteria: ::std::option::Option<::std::vec::Vec<crate::types::CustomActionAttachmentCriteria>>,
    pub(crate) variables: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CustomActionAttachmentBuilder {
    /// <p>The type of notification that the custom action should be attached to.</p>
    pub fn notification_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.notification_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of notification that the custom action should be attached to.</p>
    pub fn set_notification_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.notification_type = input;
        self
    }
    /// <p>The type of notification that the custom action should be attached to.</p>
    pub fn get_notification_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.notification_type
    }
    /// <p>The text of the button that appears on the notification.</p>
    pub fn button_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.button_text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text of the button that appears on the notification.</p>
    pub fn set_button_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.button_text = input;
        self
    }
    /// <p>The text of the button that appears on the notification.</p>
    pub fn get_button_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.button_text
    }
    /// Appends an item to `criteria`.
    ///
    /// To override the contents of this collection use [`set_criteria`](Self::set_criteria).
    ///
    /// <p>The criteria for when a button should be shown based on values in the notification.</p>
    pub fn criteria(mut self, input: crate::types::CustomActionAttachmentCriteria) -> Self {
        let mut v = self.criteria.unwrap_or_default();
        v.push(input);
        self.criteria = ::std::option::Option::Some(v);
        self
    }
    /// <p>The criteria for when a button should be shown based on values in the notification.</p>
    pub fn set_criteria(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CustomActionAttachmentCriteria>>) -> Self {
        self.criteria = input;
        self
    }
    /// <p>The criteria for when a button should be shown based on values in the notification.</p>
    pub fn get_criteria(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CustomActionAttachmentCriteria>> {
        &self.criteria
    }
    /// Adds a key-value pair to `variables`.
    ///
    /// To override the contents of this collection use [`set_variables`](Self::set_variables).
    ///
    /// <p>The variables to extract from the notification.</p>
    pub fn variables(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.variables.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.variables = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The variables to extract from the notification.</p>
    pub fn set_variables(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.variables = input;
        self
    }
    /// <p>The variables to extract from the notification.</p>
    pub fn get_variables(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.variables
    }
    /// Consumes the builder and constructs a [`CustomActionAttachment`](crate::types::CustomActionAttachment).
    pub fn build(self) -> crate::types::CustomActionAttachment {
        crate::types::CustomActionAttachment {
            notification_type: self.notification_type,
            button_text: self.button_text,
            criteria: self.criteria,
            variables: self.variables,
        }
    }
}
