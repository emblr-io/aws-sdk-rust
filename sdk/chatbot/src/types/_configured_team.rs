// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A Microsoft Teams team that is authorized with AWS Chatbot.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfiguredTeam {
    /// <p>The ID of the Microsoft Teams tenant.</p>
    pub tenant_id: ::std::string::String,
    /// <p>The ID of the Microsoft Teams authorized with AWS Chatbot.</p>
    /// <p>To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console. For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/teams-setup.html#teams-client-setup">Step 1: Configure a Microsoft Teams client</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub team_id: ::std::string::String,
    /// <p>The name of the Microsoft Teams Team.</p>
    pub team_name: ::std::option::Option<::std::string::String>,
    /// <p>Either <code>ENABLED</code> or <code>DISABLED</code>. The resource returns <code>DISABLED</code> if the organization's AWS Chatbot policy has explicitly denied that configuration. For example, if Amazon Chime is disabled.</p>
    pub state: ::std::option::Option<::std::string::String>,
    /// <p>Provided if State is <code>DISABLED</code>. Provides context as to why the resource is disabled.</p>
    pub state_reason: ::std::option::Option<::std::string::String>,
}
impl ConfiguredTeam {
    /// <p>The ID of the Microsoft Teams tenant.</p>
    pub fn tenant_id(&self) -> &str {
        use std::ops::Deref;
        self.tenant_id.deref()
    }
    /// <p>The ID of the Microsoft Teams authorized with AWS Chatbot.</p>
    /// <p>To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console. For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/teams-setup.html#teams-client-setup">Step 1: Configure a Microsoft Teams client</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn team_id(&self) -> &str {
        use std::ops::Deref;
        self.team_id.deref()
    }
    /// <p>The name of the Microsoft Teams Team.</p>
    pub fn team_name(&self) -> ::std::option::Option<&str> {
        self.team_name.as_deref()
    }
    /// <p>Either <code>ENABLED</code> or <code>DISABLED</code>. The resource returns <code>DISABLED</code> if the organization's AWS Chatbot policy has explicitly denied that configuration. For example, if Amazon Chime is disabled.</p>
    pub fn state(&self) -> ::std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>Provided if State is <code>DISABLED</code>. Provides context as to why the resource is disabled.</p>
    pub fn state_reason(&self) -> ::std::option::Option<&str> {
        self.state_reason.as_deref()
    }
}
impl ConfiguredTeam {
    /// Creates a new builder-style object to manufacture [`ConfiguredTeam`](crate::types::ConfiguredTeam).
    pub fn builder() -> crate::types::builders::ConfiguredTeamBuilder {
        crate::types::builders::ConfiguredTeamBuilder::default()
    }
}

/// A builder for [`ConfiguredTeam`](crate::types::ConfiguredTeam).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConfiguredTeamBuilder {
    pub(crate) tenant_id: ::std::option::Option<::std::string::String>,
    pub(crate) team_id: ::std::option::Option<::std::string::String>,
    pub(crate) team_name: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<::std::string::String>,
    pub(crate) state_reason: ::std::option::Option<::std::string::String>,
}
impl ConfiguredTeamBuilder {
    /// <p>The ID of the Microsoft Teams tenant.</p>
    /// This field is required.
    pub fn tenant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tenant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Microsoft Teams tenant.</p>
    pub fn set_tenant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tenant_id = input;
        self
    }
    /// <p>The ID of the Microsoft Teams tenant.</p>
    pub fn get_tenant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.tenant_id
    }
    /// <p>The ID of the Microsoft Teams authorized with AWS Chatbot.</p>
    /// <p>To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console. For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/teams-setup.html#teams-client-setup">Step 1: Configure a Microsoft Teams client</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    /// This field is required.
    pub fn team_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.team_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Microsoft Teams authorized with AWS Chatbot.</p>
    /// <p>To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console. For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/teams-setup.html#teams-client-setup">Step 1: Configure a Microsoft Teams client</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn set_team_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.team_id = input;
        self
    }
    /// <p>The ID of the Microsoft Teams authorized with AWS Chatbot.</p>
    /// <p>To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console. For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/teams-setup.html#teams-client-setup">Step 1: Configure a Microsoft Teams client</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn get_team_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.team_id
    }
    /// <p>The name of the Microsoft Teams Team.</p>
    pub fn team_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.team_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Microsoft Teams Team.</p>
    pub fn set_team_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.team_name = input;
        self
    }
    /// <p>The name of the Microsoft Teams Team.</p>
    pub fn get_team_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.team_name
    }
    /// <p>Either <code>ENABLED</code> or <code>DISABLED</code>. The resource returns <code>DISABLED</code> if the organization's AWS Chatbot policy has explicitly denied that configuration. For example, if Amazon Chime is disabled.</p>
    pub fn state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Either <code>ENABLED</code> or <code>DISABLED</code>. The resource returns <code>DISABLED</code> if the organization's AWS Chatbot policy has explicitly denied that configuration. For example, if Amazon Chime is disabled.</p>
    pub fn set_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>Either <code>ENABLED</code> or <code>DISABLED</code>. The resource returns <code>DISABLED</code> if the organization's AWS Chatbot policy has explicitly denied that configuration. For example, if Amazon Chime is disabled.</p>
    pub fn get_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.state
    }
    /// <p>Provided if State is <code>DISABLED</code>. Provides context as to why the resource is disabled.</p>
    pub fn state_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provided if State is <code>DISABLED</code>. Provides context as to why the resource is disabled.</p>
    pub fn set_state_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_reason = input;
        self
    }
    /// <p>Provided if State is <code>DISABLED</code>. Provides context as to why the resource is disabled.</p>
    pub fn get_state_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_reason
    }
    /// Consumes the builder and constructs a [`ConfiguredTeam`](crate::types::ConfiguredTeam).
    /// This method will fail if any of the following fields are not set:
    /// - [`tenant_id`](crate::types::builders::ConfiguredTeamBuilder::tenant_id)
    /// - [`team_id`](crate::types::builders::ConfiguredTeamBuilder::team_id)
    pub fn build(self) -> ::std::result::Result<crate::types::ConfiguredTeam, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConfiguredTeam {
            tenant_id: self.tenant_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "tenant_id",
                    "tenant_id was not specified but it is required when building ConfiguredTeam",
                )
            })?,
            team_id: self.team_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "team_id",
                    "team_id was not specified but it is required when building ConfiguredTeam",
                )
            })?,
            team_name: self.team_name,
            state: self.state,
            state_reason: self.state_reason,
        })
    }
}
