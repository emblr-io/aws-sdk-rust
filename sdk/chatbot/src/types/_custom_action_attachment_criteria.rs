// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A criteria for when a button should be shown based on values in the notification</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomActionAttachmentCriteria {
    /// <p>The operation to perform on the named variable.</p>
    pub operator: crate::types::CustomActionAttachmentCriteriaOperator,
    /// <p>The name of the variable to operate on.</p>
    pub variable_name: ::std::string::String,
    /// <p>A value that is compared with the actual value of the variable based on the behavior of the operator.</p>
    pub value: ::std::option::Option<::std::string::String>,
}
impl CustomActionAttachmentCriteria {
    /// <p>The operation to perform on the named variable.</p>
    pub fn operator(&self) -> &crate::types::CustomActionAttachmentCriteriaOperator {
        &self.operator
    }
    /// <p>The name of the variable to operate on.</p>
    pub fn variable_name(&self) -> &str {
        use std::ops::Deref;
        self.variable_name.deref()
    }
    /// <p>A value that is compared with the actual value of the variable based on the behavior of the operator.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl CustomActionAttachmentCriteria {
    /// Creates a new builder-style object to manufacture [`CustomActionAttachmentCriteria`](crate::types::CustomActionAttachmentCriteria).
    pub fn builder() -> crate::types::builders::CustomActionAttachmentCriteriaBuilder {
        crate::types::builders::CustomActionAttachmentCriteriaBuilder::default()
    }
}

/// A builder for [`CustomActionAttachmentCriteria`](crate::types::CustomActionAttachmentCriteria).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CustomActionAttachmentCriteriaBuilder {
    pub(crate) operator: ::std::option::Option<crate::types::CustomActionAttachmentCriteriaOperator>,
    pub(crate) variable_name: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl CustomActionAttachmentCriteriaBuilder {
    /// <p>The operation to perform on the named variable.</p>
    /// This field is required.
    pub fn operator(mut self, input: crate::types::CustomActionAttachmentCriteriaOperator) -> Self {
        self.operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operation to perform on the named variable.</p>
    pub fn set_operator(mut self, input: ::std::option::Option<crate::types::CustomActionAttachmentCriteriaOperator>) -> Self {
        self.operator = input;
        self
    }
    /// <p>The operation to perform on the named variable.</p>
    pub fn get_operator(&self) -> &::std::option::Option<crate::types::CustomActionAttachmentCriteriaOperator> {
        &self.operator
    }
    /// <p>The name of the variable to operate on.</p>
    /// This field is required.
    pub fn variable_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.variable_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the variable to operate on.</p>
    pub fn set_variable_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.variable_name = input;
        self
    }
    /// <p>The name of the variable to operate on.</p>
    pub fn get_variable_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.variable_name
    }
    /// <p>A value that is compared with the actual value of the variable based on the behavior of the operator.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A value that is compared with the actual value of the variable based on the behavior of the operator.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>A value that is compared with the actual value of the variable based on the behavior of the operator.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`CustomActionAttachmentCriteria`](crate::types::CustomActionAttachmentCriteria).
    /// This method will fail if any of the following fields are not set:
    /// - [`operator`](crate::types::builders::CustomActionAttachmentCriteriaBuilder::operator)
    /// - [`variable_name`](crate::types::builders::CustomActionAttachmentCriteriaBuilder::variable_name)
    pub fn build(self) -> ::std::result::Result<crate::types::CustomActionAttachmentCriteria, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CustomActionAttachmentCriteria {
            operator: self.operator.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operator",
                    "operator was not specified but it is required when building CustomActionAttachmentCriteria",
                )
            })?,
            variable_name: self.variable_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "variable_name",
                    "variable_name was not specified but it is required when building CustomActionAttachmentCriteria",
                )
            })?,
            value: self.value,
        })
    }
}
