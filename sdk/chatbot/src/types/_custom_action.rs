// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a parameterized command that can be invoked as an alias or as a notification button in the chat client.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomAction {
    /// <p>The fully defined Amazon Resource Name (ARN) of the custom action.</p>
    pub custom_action_arn: ::std::string::String,
    /// <p>The definition of the command to run when invoked an alias or as an action button.</p>
    pub definition: ::std::option::Option<crate::types::CustomActionDefinition>,
    /// <p>The name used to invoke this action in the chat channel. For example, <code>@aws run my-alias</code>.</p>
    pub alias_name: ::std::option::Option<::std::string::String>,
    /// <p>Defines when this custom action button should be attached to a notification.</p>
    pub attachments: ::std::option::Option<::std::vec::Vec<crate::types::CustomActionAttachment>>,
    /// <p>The name of the custom action that is included in the ARN.</p>
    pub action_name: ::std::option::Option<::std::string::String>,
}
impl CustomAction {
    /// <p>The fully defined Amazon Resource Name (ARN) of the custom action.</p>
    pub fn custom_action_arn(&self) -> &str {
        use std::ops::Deref;
        self.custom_action_arn.deref()
    }
    /// <p>The definition of the command to run when invoked an alias or as an action button.</p>
    pub fn definition(&self) -> ::std::option::Option<&crate::types::CustomActionDefinition> {
        self.definition.as_ref()
    }
    /// <p>The name used to invoke this action in the chat channel. For example, <code>@aws run my-alias</code>.</p>
    pub fn alias_name(&self) -> ::std::option::Option<&str> {
        self.alias_name.as_deref()
    }
    /// <p>Defines when this custom action button should be attached to a notification.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attachments.is_none()`.
    pub fn attachments(&self) -> &[crate::types::CustomActionAttachment] {
        self.attachments.as_deref().unwrap_or_default()
    }
    /// <p>The name of the custom action that is included in the ARN.</p>
    pub fn action_name(&self) -> ::std::option::Option<&str> {
        self.action_name.as_deref()
    }
}
impl CustomAction {
    /// Creates a new builder-style object to manufacture [`CustomAction`](crate::types::CustomAction).
    pub fn builder() -> crate::types::builders::CustomActionBuilder {
        crate::types::builders::CustomActionBuilder::default()
    }
}

/// A builder for [`CustomAction`](crate::types::CustomAction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CustomActionBuilder {
    pub(crate) custom_action_arn: ::std::option::Option<::std::string::String>,
    pub(crate) definition: ::std::option::Option<crate::types::CustomActionDefinition>,
    pub(crate) alias_name: ::std::option::Option<::std::string::String>,
    pub(crate) attachments: ::std::option::Option<::std::vec::Vec<crate::types::CustomActionAttachment>>,
    pub(crate) action_name: ::std::option::Option<::std::string::String>,
}
impl CustomActionBuilder {
    /// <p>The fully defined Amazon Resource Name (ARN) of the custom action.</p>
    /// This field is required.
    pub fn custom_action_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.custom_action_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The fully defined Amazon Resource Name (ARN) of the custom action.</p>
    pub fn set_custom_action_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.custom_action_arn = input;
        self
    }
    /// <p>The fully defined Amazon Resource Name (ARN) of the custom action.</p>
    pub fn get_custom_action_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.custom_action_arn
    }
    /// <p>The definition of the command to run when invoked an alias or as an action button.</p>
    /// This field is required.
    pub fn definition(mut self, input: crate::types::CustomActionDefinition) -> Self {
        self.definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The definition of the command to run when invoked an alias or as an action button.</p>
    pub fn set_definition(mut self, input: ::std::option::Option<crate::types::CustomActionDefinition>) -> Self {
        self.definition = input;
        self
    }
    /// <p>The definition of the command to run when invoked an alias or as an action button.</p>
    pub fn get_definition(&self) -> &::std::option::Option<crate::types::CustomActionDefinition> {
        &self.definition
    }
    /// <p>The name used to invoke this action in the chat channel. For example, <code>@aws run my-alias</code>.</p>
    pub fn alias_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.alias_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name used to invoke this action in the chat channel. For example, <code>@aws run my-alias</code>.</p>
    pub fn set_alias_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.alias_name = input;
        self
    }
    /// <p>The name used to invoke this action in the chat channel. For example, <code>@aws run my-alias</code>.</p>
    pub fn get_alias_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.alias_name
    }
    /// Appends an item to `attachments`.
    ///
    /// To override the contents of this collection use [`set_attachments`](Self::set_attachments).
    ///
    /// <p>Defines when this custom action button should be attached to a notification.</p>
    pub fn attachments(mut self, input: crate::types::CustomActionAttachment) -> Self {
        let mut v = self.attachments.unwrap_or_default();
        v.push(input);
        self.attachments = ::std::option::Option::Some(v);
        self
    }
    /// <p>Defines when this custom action button should be attached to a notification.</p>
    pub fn set_attachments(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CustomActionAttachment>>) -> Self {
        self.attachments = input;
        self
    }
    /// <p>Defines when this custom action button should be attached to a notification.</p>
    pub fn get_attachments(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CustomActionAttachment>> {
        &self.attachments
    }
    /// <p>The name of the custom action that is included in the ARN.</p>
    pub fn action_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the custom action that is included in the ARN.</p>
    pub fn set_action_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_name = input;
        self
    }
    /// <p>The name of the custom action that is included in the ARN.</p>
    pub fn get_action_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_name
    }
    /// Consumes the builder and constructs a [`CustomAction`](crate::types::CustomAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`custom_action_arn`](crate::types::builders::CustomActionBuilder::custom_action_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::CustomAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CustomAction {
            custom_action_arn: self.custom_action_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "custom_action_arn",
                    "custom_action_arn was not specified but it is required when building CustomAction",
                )
            })?,
            definition: self.definition,
            alias_name: self.alias_name,
            attachments: self.attachments,
            action_name: self.action_name,
        })
    }
}
