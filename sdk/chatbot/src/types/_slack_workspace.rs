// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A Slack workspace.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SlackWorkspace {
    /// <p>The ID of the Slack workspace authorized with AWS Chatbot.</p>
    pub slack_team_id: ::std::string::String,
    /// <p>The name of the Slack workspace.</p>
    pub slack_team_name: ::std::string::String,
    /// <p>Either <code>ENABLED</code> or <code>DISABLED</code>. The resource returns <code>DISABLED</code> if the organization's AWS Chatbot policy has explicitly denied that configuration. For example, if Amazon Chime is disabled.</p>
    pub state: ::std::option::Option<::std::string::String>,
    /// <p>Provided if State is <code>DISABLED</code>. Provides context as to why the resource is disabled.</p>
    pub state_reason: ::std::option::Option<::std::string::String>,
}
impl SlackWorkspace {
    /// <p>The ID of the Slack workspace authorized with AWS Chatbot.</p>
    pub fn slack_team_id(&self) -> &str {
        use std::ops::Deref;
        self.slack_team_id.deref()
    }
    /// <p>The name of the Slack workspace.</p>
    pub fn slack_team_name(&self) -> &str {
        use std::ops::Deref;
        self.slack_team_name.deref()
    }
    /// <p>Either <code>ENABLED</code> or <code>DISABLED</code>. The resource returns <code>DISABLED</code> if the organization's AWS Chatbot policy has explicitly denied that configuration. For example, if Amazon Chime is disabled.</p>
    pub fn state(&self) -> ::std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>Provided if State is <code>DISABLED</code>. Provides context as to why the resource is disabled.</p>
    pub fn state_reason(&self) -> ::std::option::Option<&str> {
        self.state_reason.as_deref()
    }
}
impl SlackWorkspace {
    /// Creates a new builder-style object to manufacture [`SlackWorkspace`](crate::types::SlackWorkspace).
    pub fn builder() -> crate::types::builders::SlackWorkspaceBuilder {
        crate::types::builders::SlackWorkspaceBuilder::default()
    }
}

/// A builder for [`SlackWorkspace`](crate::types::SlackWorkspace).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SlackWorkspaceBuilder {
    pub(crate) slack_team_id: ::std::option::Option<::std::string::String>,
    pub(crate) slack_team_name: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<::std::string::String>,
    pub(crate) state_reason: ::std::option::Option<::std::string::String>,
}
impl SlackWorkspaceBuilder {
    /// <p>The ID of the Slack workspace authorized with AWS Chatbot.</p>
    /// This field is required.
    pub fn slack_team_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slack_team_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Slack workspace authorized with AWS Chatbot.</p>
    pub fn set_slack_team_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slack_team_id = input;
        self
    }
    /// <p>The ID of the Slack workspace authorized with AWS Chatbot.</p>
    pub fn get_slack_team_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.slack_team_id
    }
    /// <p>The name of the Slack workspace.</p>
    /// This field is required.
    pub fn slack_team_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slack_team_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Slack workspace.</p>
    pub fn set_slack_team_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slack_team_name = input;
        self
    }
    /// <p>The name of the Slack workspace.</p>
    pub fn get_slack_team_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.slack_team_name
    }
    /// <p>Either <code>ENABLED</code> or <code>DISABLED</code>. The resource returns <code>DISABLED</code> if the organization's AWS Chatbot policy has explicitly denied that configuration. For example, if Amazon Chime is disabled.</p>
    pub fn state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Either <code>ENABLED</code> or <code>DISABLED</code>. The resource returns <code>DISABLED</code> if the organization's AWS Chatbot policy has explicitly denied that configuration. For example, if Amazon Chime is disabled.</p>
    pub fn set_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>Either <code>ENABLED</code> or <code>DISABLED</code>. The resource returns <code>DISABLED</code> if the organization's AWS Chatbot policy has explicitly denied that configuration. For example, if Amazon Chime is disabled.</p>
    pub fn get_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.state
    }
    /// <p>Provided if State is <code>DISABLED</code>. Provides context as to why the resource is disabled.</p>
    pub fn state_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provided if State is <code>DISABLED</code>. Provides context as to why the resource is disabled.</p>
    pub fn set_state_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_reason = input;
        self
    }
    /// <p>Provided if State is <code>DISABLED</code>. Provides context as to why the resource is disabled.</p>
    pub fn get_state_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_reason
    }
    /// Consumes the builder and constructs a [`SlackWorkspace`](crate::types::SlackWorkspace).
    /// This method will fail if any of the following fields are not set:
    /// - [`slack_team_id`](crate::types::builders::SlackWorkspaceBuilder::slack_team_id)
    /// - [`slack_team_name`](crate::types::builders::SlackWorkspaceBuilder::slack_team_name)
    pub fn build(self) -> ::std::result::Result<crate::types::SlackWorkspace, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SlackWorkspace {
            slack_team_id: self.slack_team_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "slack_team_id",
                    "slack_team_id was not specified but it is required when building SlackWorkspace",
                )
            })?,
            slack_team_name: self.slack_team_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "slack_team_name",
                    "slack_team_name was not specified but it is required when building SlackWorkspace",
                )
            })?,
            state: self.state,
            state_reason: self.state_reason,
        })
    }
}
