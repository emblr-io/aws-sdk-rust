// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateChimeWebhookConfigurationInput {
    /// <p>A description of the webhook. We recommend using the convention <code>RoomName/WebhookName</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chime-setup.html">Tutorial: Get started with Amazon Chime</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub webhook_description: ::std::option::Option<::std::string::String>,
    /// <p>The URL for the Amazon Chime webhook.</p>
    pub webhook_url: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.</p>
    pub sns_topic_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub iam_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the configuration.</p>
    pub configuration_name: ::std::option::Option<::std::string::String>,
    /// <p>Logging levels include <code>ERROR</code>, <code>INFO</code>, or <code>NONE</code>.</p>
    pub logging_level: ::std::option::Option<::std::string::String>,
    /// <p>A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateChimeWebhookConfigurationInput {
    /// <p>A description of the webhook. We recommend using the convention <code>RoomName/WebhookName</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chime-setup.html">Tutorial: Get started with Amazon Chime</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn webhook_description(&self) -> ::std::option::Option<&str> {
        self.webhook_description.as_deref()
    }
    /// <p>The URL for the Amazon Chime webhook.</p>
    pub fn webhook_url(&self) -> ::std::option::Option<&str> {
        self.webhook_url.as_deref()
    }
    /// <p>The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sns_topic_arns.is_none()`.
    pub fn sns_topic_arns(&self) -> &[::std::string::String] {
        self.sns_topic_arns.as_deref().unwrap_or_default()
    }
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn iam_role_arn(&self) -> ::std::option::Option<&str> {
        self.iam_role_arn.as_deref()
    }
    /// <p>The name of the configuration.</p>
    pub fn configuration_name(&self) -> ::std::option::Option<&str> {
        self.configuration_name.as_deref()
    }
    /// <p>Logging levels include <code>ERROR</code>, <code>INFO</code>, or <code>NONE</code>.</p>
    pub fn logging_level(&self) -> ::std::option::Option<&str> {
        self.logging_level.as_deref()
    }
    /// <p>A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for CreateChimeWebhookConfigurationInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateChimeWebhookConfigurationInput");
        formatter.field("webhook_description", &"*** Sensitive Data Redacted ***");
        formatter.field("webhook_url", &"*** Sensitive Data Redacted ***");
        formatter.field("sns_topic_arns", &self.sns_topic_arns);
        formatter.field("iam_role_arn", &self.iam_role_arn);
        formatter.field("configuration_name", &self.configuration_name);
        formatter.field("logging_level", &self.logging_level);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl CreateChimeWebhookConfigurationInput {
    /// Creates a new builder-style object to manufacture [`CreateChimeWebhookConfigurationInput`](crate::operation::create_chime_webhook_configuration::CreateChimeWebhookConfigurationInput).
    pub fn builder() -> crate::operation::create_chime_webhook_configuration::builders::CreateChimeWebhookConfigurationInputBuilder {
        crate::operation::create_chime_webhook_configuration::builders::CreateChimeWebhookConfigurationInputBuilder::default()
    }
}

/// A builder for [`CreateChimeWebhookConfigurationInput`](crate::operation::create_chime_webhook_configuration::CreateChimeWebhookConfigurationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateChimeWebhookConfigurationInputBuilder {
    pub(crate) webhook_description: ::std::option::Option<::std::string::String>,
    pub(crate) webhook_url: ::std::option::Option<::std::string::String>,
    pub(crate) sns_topic_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) iam_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) configuration_name: ::std::option::Option<::std::string::String>,
    pub(crate) logging_level: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateChimeWebhookConfigurationInputBuilder {
    /// <p>A description of the webhook. We recommend using the convention <code>RoomName/WebhookName</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chime-setup.html">Tutorial: Get started with Amazon Chime</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    /// This field is required.
    pub fn webhook_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.webhook_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the webhook. We recommend using the convention <code>RoomName/WebhookName</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chime-setup.html">Tutorial: Get started with Amazon Chime</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn set_webhook_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.webhook_description = input;
        self
    }
    /// <p>A description of the webhook. We recommend using the convention <code>RoomName/WebhookName</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chime-setup.html">Tutorial: Get started with Amazon Chime</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn get_webhook_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.webhook_description
    }
    /// <p>The URL for the Amazon Chime webhook.</p>
    /// This field is required.
    pub fn webhook_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.webhook_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL for the Amazon Chime webhook.</p>
    pub fn set_webhook_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.webhook_url = input;
        self
    }
    /// <p>The URL for the Amazon Chime webhook.</p>
    pub fn get_webhook_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.webhook_url
    }
    /// Appends an item to `sns_topic_arns`.
    ///
    /// To override the contents of this collection use [`set_sns_topic_arns`](Self::set_sns_topic_arns).
    ///
    /// <p>The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.</p>
    pub fn sns_topic_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.sns_topic_arns.unwrap_or_default();
        v.push(input.into());
        self.sns_topic_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.</p>
    pub fn set_sns_topic_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.sns_topic_arns = input;
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.</p>
    pub fn get_sns_topic_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.sns_topic_arns
    }
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    /// This field is required.
    pub fn iam_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn set_iam_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_role_arn = input;
        self
    }
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn get_iam_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_role_arn
    }
    /// <p>The name of the configuration.</p>
    /// This field is required.
    pub fn configuration_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configuration_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the configuration.</p>
    pub fn set_configuration_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configuration_name = input;
        self
    }
    /// <p>The name of the configuration.</p>
    pub fn get_configuration_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.configuration_name
    }
    /// <p>Logging levels include <code>ERROR</code>, <code>INFO</code>, or <code>NONE</code>.</p>
    pub fn logging_level(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.logging_level = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Logging levels include <code>ERROR</code>, <code>INFO</code>, or <code>NONE</code>.</p>
    pub fn set_logging_level(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.logging_level = input;
        self
    }
    /// <p>Logging levels include <code>ERROR</code>, <code>INFO</code>, or <code>NONE</code>.</p>
    pub fn get_logging_level(&self) -> &::std::option::Option<::std::string::String> {
        &self.logging_level
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateChimeWebhookConfigurationInput`](crate::operation::create_chime_webhook_configuration::CreateChimeWebhookConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_chime_webhook_configuration::CreateChimeWebhookConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_chime_webhook_configuration::CreateChimeWebhookConfigurationInput {
                webhook_description: self.webhook_description,
                webhook_url: self.webhook_url,
                sns_topic_arns: self.sns_topic_arns,
                iam_role_arn: self.iam_role_arn,
                configuration_name: self.configuration_name,
                logging_level: self.logging_level,
                tags: self.tags,
            },
        )
    }
}
impl ::std::fmt::Debug for CreateChimeWebhookConfigurationInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateChimeWebhookConfigurationInputBuilder");
        formatter.field("webhook_description", &"*** Sensitive Data Redacted ***");
        formatter.field("webhook_url", &"*** Sensitive Data Redacted ***");
        formatter.field("sns_topic_arns", &self.sns_topic_arns);
        formatter.field("iam_role_arn", &self.iam_role_arn);
        formatter.field("configuration_name", &self.configuration_name);
        formatter.field("logging_level", &self.logging_level);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
