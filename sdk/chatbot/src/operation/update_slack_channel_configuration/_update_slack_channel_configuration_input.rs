// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateSlackChannelConfigurationInput {
    /// <p>The Amazon Resource Name (ARN) of the SlackChannelConfiguration to update.</p>
    pub chat_configuration_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Slack channel.</p>
    /// <p>To get this ID, open Slack, right click on the channel name in the left pane, then choose Copy Link. The channel ID is the 9-character string at the end of the URL. For example, ABCBBLZZZ.</p>
    pub slack_channel_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Slack channel.</p>
    pub slack_channel_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.</p>
    pub sns_topic_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub iam_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Logging levels include <code>ERROR</code>, <code>INFO</code>, or <code>NONE</code>.</p>
    pub logging_level: ::std::option::Option<::std::string::String>,
    /// <p>The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed <code>AdministratorAccess</code> policy is applied by default if this is not set.</p>
    pub guardrail_policy_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Enables use of a user role requirement in your chat configuration.</p>
    pub user_authorization_required: ::std::option::Option<bool>,
}
impl UpdateSlackChannelConfigurationInput {
    /// <p>The Amazon Resource Name (ARN) of the SlackChannelConfiguration to update.</p>
    pub fn chat_configuration_arn(&self) -> ::std::option::Option<&str> {
        self.chat_configuration_arn.as_deref()
    }
    /// <p>The ID of the Slack channel.</p>
    /// <p>To get this ID, open Slack, right click on the channel name in the left pane, then choose Copy Link. The channel ID is the 9-character string at the end of the URL. For example, ABCBBLZZZ.</p>
    pub fn slack_channel_id(&self) -> ::std::option::Option<&str> {
        self.slack_channel_id.as_deref()
    }
    /// <p>The name of the Slack channel.</p>
    pub fn slack_channel_name(&self) -> ::std::option::Option<&str> {
        self.slack_channel_name.as_deref()
    }
    /// <p>The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sns_topic_arns.is_none()`.
    pub fn sns_topic_arns(&self) -> &[::std::string::String] {
        self.sns_topic_arns.as_deref().unwrap_or_default()
    }
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn iam_role_arn(&self) -> ::std::option::Option<&str> {
        self.iam_role_arn.as_deref()
    }
    /// <p>Logging levels include <code>ERROR</code>, <code>INFO</code>, or <code>NONE</code>.</p>
    pub fn logging_level(&self) -> ::std::option::Option<&str> {
        self.logging_level.as_deref()
    }
    /// <p>The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed <code>AdministratorAccess</code> policy is applied by default if this is not set.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.guardrail_policy_arns.is_none()`.
    pub fn guardrail_policy_arns(&self) -> &[::std::string::String] {
        self.guardrail_policy_arns.as_deref().unwrap_or_default()
    }
    /// <p>Enables use of a user role requirement in your chat configuration.</p>
    pub fn user_authorization_required(&self) -> ::std::option::Option<bool> {
        self.user_authorization_required
    }
}
impl ::std::fmt::Debug for UpdateSlackChannelConfigurationInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateSlackChannelConfigurationInput");
        formatter.field("chat_configuration_arn", &self.chat_configuration_arn);
        formatter.field("slack_channel_id", &self.slack_channel_id);
        formatter.field("slack_channel_name", &"*** Sensitive Data Redacted ***");
        formatter.field("sns_topic_arns", &self.sns_topic_arns);
        formatter.field("iam_role_arn", &self.iam_role_arn);
        formatter.field("logging_level", &self.logging_level);
        formatter.field("guardrail_policy_arns", &self.guardrail_policy_arns);
        formatter.field("user_authorization_required", &self.user_authorization_required);
        formatter.finish()
    }
}
impl UpdateSlackChannelConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateSlackChannelConfigurationInput`](crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationInput).
    pub fn builder() -> crate::operation::update_slack_channel_configuration::builders::UpdateSlackChannelConfigurationInputBuilder {
        crate::operation::update_slack_channel_configuration::builders::UpdateSlackChannelConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateSlackChannelConfigurationInput`](crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateSlackChannelConfigurationInputBuilder {
    pub(crate) chat_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) slack_channel_id: ::std::option::Option<::std::string::String>,
    pub(crate) slack_channel_name: ::std::option::Option<::std::string::String>,
    pub(crate) sns_topic_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) iam_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) logging_level: ::std::option::Option<::std::string::String>,
    pub(crate) guardrail_policy_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) user_authorization_required: ::std::option::Option<bool>,
}
impl UpdateSlackChannelConfigurationInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the SlackChannelConfiguration to update.</p>
    /// This field is required.
    pub fn chat_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.chat_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the SlackChannelConfiguration to update.</p>
    pub fn set_chat_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.chat_configuration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the SlackChannelConfiguration to update.</p>
    pub fn get_chat_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.chat_configuration_arn
    }
    /// <p>The ID of the Slack channel.</p>
    /// <p>To get this ID, open Slack, right click on the channel name in the left pane, then choose Copy Link. The channel ID is the 9-character string at the end of the URL. For example, ABCBBLZZZ.</p>
    /// This field is required.
    pub fn slack_channel_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slack_channel_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Slack channel.</p>
    /// <p>To get this ID, open Slack, right click on the channel name in the left pane, then choose Copy Link. The channel ID is the 9-character string at the end of the URL. For example, ABCBBLZZZ.</p>
    pub fn set_slack_channel_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slack_channel_id = input;
        self
    }
    /// <p>The ID of the Slack channel.</p>
    /// <p>To get this ID, open Slack, right click on the channel name in the left pane, then choose Copy Link. The channel ID is the 9-character string at the end of the URL. For example, ABCBBLZZZ.</p>
    pub fn get_slack_channel_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.slack_channel_id
    }
    /// <p>The name of the Slack channel.</p>
    pub fn slack_channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slack_channel_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Slack channel.</p>
    pub fn set_slack_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slack_channel_name = input;
        self
    }
    /// <p>The name of the Slack channel.</p>
    pub fn get_slack_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.slack_channel_name
    }
    /// Appends an item to `sns_topic_arns`.
    ///
    /// To override the contents of this collection use [`set_sns_topic_arns`](Self::set_sns_topic_arns).
    ///
    /// <p>The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.</p>
    pub fn sns_topic_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.sns_topic_arns.unwrap_or_default();
        v.push(input.into());
        self.sns_topic_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.</p>
    pub fn set_sns_topic_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.sns_topic_arns = input;
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.</p>
    pub fn get_sns_topic_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.sns_topic_arns
    }
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn iam_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn set_iam_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_role_arn = input;
        self
    }
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn get_iam_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_role_arn
    }
    /// <p>Logging levels include <code>ERROR</code>, <code>INFO</code>, or <code>NONE</code>.</p>
    pub fn logging_level(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.logging_level = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Logging levels include <code>ERROR</code>, <code>INFO</code>, or <code>NONE</code>.</p>
    pub fn set_logging_level(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.logging_level = input;
        self
    }
    /// <p>Logging levels include <code>ERROR</code>, <code>INFO</code>, or <code>NONE</code>.</p>
    pub fn get_logging_level(&self) -> &::std::option::Option<::std::string::String> {
        &self.logging_level
    }
    /// Appends an item to `guardrail_policy_arns`.
    ///
    /// To override the contents of this collection use [`set_guardrail_policy_arns`](Self::set_guardrail_policy_arns).
    ///
    /// <p>The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed <code>AdministratorAccess</code> policy is applied by default if this is not set.</p>
    pub fn guardrail_policy_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.guardrail_policy_arns.unwrap_or_default();
        v.push(input.into());
        self.guardrail_policy_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed <code>AdministratorAccess</code> policy is applied by default if this is not set.</p>
    pub fn set_guardrail_policy_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.guardrail_policy_arns = input;
        self
    }
    /// <p>The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed <code>AdministratorAccess</code> policy is applied by default if this is not set.</p>
    pub fn get_guardrail_policy_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.guardrail_policy_arns
    }
    /// <p>Enables use of a user role requirement in your chat configuration.</p>
    pub fn user_authorization_required(mut self, input: bool) -> Self {
        self.user_authorization_required = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables use of a user role requirement in your chat configuration.</p>
    pub fn set_user_authorization_required(mut self, input: ::std::option::Option<bool>) -> Self {
        self.user_authorization_required = input;
        self
    }
    /// <p>Enables use of a user role requirement in your chat configuration.</p>
    pub fn get_user_authorization_required(&self) -> &::std::option::Option<bool> {
        &self.user_authorization_required
    }
    /// Consumes the builder and constructs a [`UpdateSlackChannelConfigurationInput`](crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationInput {
                chat_configuration_arn: self.chat_configuration_arn,
                slack_channel_id: self.slack_channel_id,
                slack_channel_name: self.slack_channel_name,
                sns_topic_arns: self.sns_topic_arns,
                iam_role_arn: self.iam_role_arn,
                logging_level: self.logging_level,
                guardrail_policy_arns: self.guardrail_policy_arns,
                user_authorization_required: self.user_authorization_required,
            },
        )
    }
}
impl ::std::fmt::Debug for UpdateSlackChannelConfigurationInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateSlackChannelConfigurationInputBuilder");
        formatter.field("chat_configuration_arn", &self.chat_configuration_arn);
        formatter.field("slack_channel_id", &self.slack_channel_id);
        formatter.field("slack_channel_name", &"*** Sensitive Data Redacted ***");
        formatter.field("sns_topic_arns", &self.sns_topic_arns);
        formatter.field("iam_role_arn", &self.iam_role_arn);
        formatter.field("logging_level", &self.logging_level);
        formatter.field("guardrail_policy_arns", &self.guardrail_policy_arns);
        formatter.field("user_authorization_required", &self.user_authorization_required);
        formatter.finish()
    }
}
