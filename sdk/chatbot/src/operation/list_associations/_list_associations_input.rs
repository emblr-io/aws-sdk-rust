// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListAssociationsInput {
    /// <p>The channel configuration to list associations for.</p>
    pub chat_configuration: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListAssociationsInput {
    /// <p>The channel configuration to list associations for.</p>
    pub fn chat_configuration(&self) -> ::std::option::Option<&str> {
        self.chat_configuration.as_deref()
    }
    /// <p>The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListAssociationsInput {
    /// Creates a new builder-style object to manufacture [`ListAssociationsInput`](crate::operation::list_associations::ListAssociationsInput).
    pub fn builder() -> crate::operation::list_associations::builders::ListAssociationsInputBuilder {
        crate::operation::list_associations::builders::ListAssociationsInputBuilder::default()
    }
}

/// A builder for [`ListAssociationsInput`](crate::operation::list_associations::ListAssociationsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListAssociationsInputBuilder {
    pub(crate) chat_configuration: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListAssociationsInputBuilder {
    /// <p>The channel configuration to list associations for.</p>
    /// This field is required.
    pub fn chat_configuration(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.chat_configuration = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The channel configuration to list associations for.</p>
    pub fn set_chat_configuration(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.chat_configuration = input;
        self
    }
    /// <p>The channel configuration to list associations for.</p>
    pub fn get_chat_configuration(&self) -> &::std::option::Option<::std::string::String> {
        &self.chat_configuration
    }
    /// <p>The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListAssociationsInput`](crate::operation::list_associations::ListAssociationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_associations::ListAssociationsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_associations::ListAssociationsInput {
            chat_configuration: self.chat_configuration,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
