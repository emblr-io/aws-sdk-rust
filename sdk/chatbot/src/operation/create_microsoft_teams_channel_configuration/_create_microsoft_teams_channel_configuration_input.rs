// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateMicrosoftTeamsChannelConfigurationInput {
    /// <p>The ID of the Microsoft Teams channel.</p>
    pub channel_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Microsoft Teams channel.</p>
    pub channel_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Microsoft Teams authorized with AWS Chatbot.</p>
    /// <p>To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console. For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/teams-setup.html#teams-client-setup">Step 1: Configure a Microsoft Teams client</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub team_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Microsoft Teams Team.</p>
    pub team_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Microsoft Teams tenant.</p>
    pub tenant_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.</p>
    pub sns_topic_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub iam_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the configuration.</p>
    pub configuration_name: ::std::option::Option<::std::string::String>,
    /// <p>Logging levels include <code>ERROR</code>, <code>INFO</code>, or <code>NONE</code>.</p>
    pub logging_level: ::std::option::Option<::std::string::String>,
    /// <p>The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed <code>AdministratorAccess</code> policy is applied by default if this is not set.</p>
    pub guardrail_policy_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Enables use of a user role requirement in your chat configuration.</p>
    pub user_authorization_required: ::std::option::Option<bool>,
    /// <p>A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateMicrosoftTeamsChannelConfigurationInput {
    /// <p>The ID of the Microsoft Teams channel.</p>
    pub fn channel_id(&self) -> ::std::option::Option<&str> {
        self.channel_id.as_deref()
    }
    /// <p>The name of the Microsoft Teams channel.</p>
    pub fn channel_name(&self) -> ::std::option::Option<&str> {
        self.channel_name.as_deref()
    }
    /// <p>The ID of the Microsoft Teams authorized with AWS Chatbot.</p>
    /// <p>To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console. For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/teams-setup.html#teams-client-setup">Step 1: Configure a Microsoft Teams client</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn team_id(&self) -> ::std::option::Option<&str> {
        self.team_id.as_deref()
    }
    /// <p>The name of the Microsoft Teams Team.</p>
    pub fn team_name(&self) -> ::std::option::Option<&str> {
        self.team_name.as_deref()
    }
    /// <p>The ID of the Microsoft Teams tenant.</p>
    pub fn tenant_id(&self) -> ::std::option::Option<&str> {
        self.tenant_id.as_deref()
    }
    /// <p>The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sns_topic_arns.is_none()`.
    pub fn sns_topic_arns(&self) -> &[::std::string::String] {
        self.sns_topic_arns.as_deref().unwrap_or_default()
    }
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn iam_role_arn(&self) -> ::std::option::Option<&str> {
        self.iam_role_arn.as_deref()
    }
    /// <p>The name of the configuration.</p>
    pub fn configuration_name(&self) -> ::std::option::Option<&str> {
        self.configuration_name.as_deref()
    }
    /// <p>Logging levels include <code>ERROR</code>, <code>INFO</code>, or <code>NONE</code>.</p>
    pub fn logging_level(&self) -> ::std::option::Option<&str> {
        self.logging_level.as_deref()
    }
    /// <p>The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed <code>AdministratorAccess</code> policy is applied by default if this is not set.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.guardrail_policy_arns.is_none()`.
    pub fn guardrail_policy_arns(&self) -> &[::std::string::String] {
        self.guardrail_policy_arns.as_deref().unwrap_or_default()
    }
    /// <p>Enables use of a user role requirement in your chat configuration.</p>
    pub fn user_authorization_required(&self) -> ::std::option::Option<bool> {
        self.user_authorization_required
    }
    /// <p>A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for CreateMicrosoftTeamsChannelConfigurationInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateMicrosoftTeamsChannelConfigurationInput");
        formatter.field("channel_id", &self.channel_id);
        formatter.field("channel_name", &"*** Sensitive Data Redacted ***");
        formatter.field("team_id", &self.team_id);
        formatter.field("team_name", &"*** Sensitive Data Redacted ***");
        formatter.field("tenant_id", &self.tenant_id);
        formatter.field("sns_topic_arns", &self.sns_topic_arns);
        formatter.field("iam_role_arn", &self.iam_role_arn);
        formatter.field("configuration_name", &self.configuration_name);
        formatter.field("logging_level", &self.logging_level);
        formatter.field("guardrail_policy_arns", &self.guardrail_policy_arns);
        formatter.field("user_authorization_required", &self.user_authorization_required);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl CreateMicrosoftTeamsChannelConfigurationInput {
    /// Creates a new builder-style object to manufacture [`CreateMicrosoftTeamsChannelConfigurationInput`](crate::operation::create_microsoft_teams_channel_configuration::CreateMicrosoftTeamsChannelConfigurationInput).
    pub fn builder() -> crate::operation::create_microsoft_teams_channel_configuration::builders::CreateMicrosoftTeamsChannelConfigurationInputBuilder
    {
        crate::operation::create_microsoft_teams_channel_configuration::builders::CreateMicrosoftTeamsChannelConfigurationInputBuilder::default()
    }
}

/// A builder for [`CreateMicrosoftTeamsChannelConfigurationInput`](crate::operation::create_microsoft_teams_channel_configuration::CreateMicrosoftTeamsChannelConfigurationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateMicrosoftTeamsChannelConfigurationInputBuilder {
    pub(crate) channel_id: ::std::option::Option<::std::string::String>,
    pub(crate) channel_name: ::std::option::Option<::std::string::String>,
    pub(crate) team_id: ::std::option::Option<::std::string::String>,
    pub(crate) team_name: ::std::option::Option<::std::string::String>,
    pub(crate) tenant_id: ::std::option::Option<::std::string::String>,
    pub(crate) sns_topic_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) iam_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) configuration_name: ::std::option::Option<::std::string::String>,
    pub(crate) logging_level: ::std::option::Option<::std::string::String>,
    pub(crate) guardrail_policy_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) user_authorization_required: ::std::option::Option<bool>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateMicrosoftTeamsChannelConfigurationInputBuilder {
    /// <p>The ID of the Microsoft Teams channel.</p>
    /// This field is required.
    pub fn channel_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Microsoft Teams channel.</p>
    pub fn set_channel_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_id = input;
        self
    }
    /// <p>The ID of the Microsoft Teams channel.</p>
    pub fn get_channel_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_id
    }
    /// <p>The name of the Microsoft Teams channel.</p>
    pub fn channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Microsoft Teams channel.</p>
    pub fn set_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>The name of the Microsoft Teams channel.</p>
    pub fn get_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_name
    }
    /// <p>The ID of the Microsoft Teams authorized with AWS Chatbot.</p>
    /// <p>To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console. For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/teams-setup.html#teams-client-setup">Step 1: Configure a Microsoft Teams client</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    /// This field is required.
    pub fn team_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.team_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Microsoft Teams authorized with AWS Chatbot.</p>
    /// <p>To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console. For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/teams-setup.html#teams-client-setup">Step 1: Configure a Microsoft Teams client</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn set_team_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.team_id = input;
        self
    }
    /// <p>The ID of the Microsoft Teams authorized with AWS Chatbot.</p>
    /// <p>To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console. For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/teams-setup.html#teams-client-setup">Step 1: Configure a Microsoft Teams client</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn get_team_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.team_id
    }
    /// <p>The name of the Microsoft Teams Team.</p>
    pub fn team_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.team_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Microsoft Teams Team.</p>
    pub fn set_team_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.team_name = input;
        self
    }
    /// <p>The name of the Microsoft Teams Team.</p>
    pub fn get_team_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.team_name
    }
    /// <p>The ID of the Microsoft Teams tenant.</p>
    /// This field is required.
    pub fn tenant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tenant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Microsoft Teams tenant.</p>
    pub fn set_tenant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tenant_id = input;
        self
    }
    /// <p>The ID of the Microsoft Teams tenant.</p>
    pub fn get_tenant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.tenant_id
    }
    /// Appends an item to `sns_topic_arns`.
    ///
    /// To override the contents of this collection use [`set_sns_topic_arns`](Self::set_sns_topic_arns).
    ///
    /// <p>The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.</p>
    pub fn sns_topic_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.sns_topic_arns.unwrap_or_default();
        v.push(input.into());
        self.sns_topic_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.</p>
    pub fn set_sns_topic_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.sns_topic_arns = input;
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.</p>
    pub fn get_sns_topic_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.sns_topic_arns
    }
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    /// This field is required.
    pub fn iam_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn set_iam_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_role_arn = input;
        self
    }
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn get_iam_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_role_arn
    }
    /// <p>The name of the configuration.</p>
    /// This field is required.
    pub fn configuration_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configuration_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the configuration.</p>
    pub fn set_configuration_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configuration_name = input;
        self
    }
    /// <p>The name of the configuration.</p>
    pub fn get_configuration_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.configuration_name
    }
    /// <p>Logging levels include <code>ERROR</code>, <code>INFO</code>, or <code>NONE</code>.</p>
    pub fn logging_level(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.logging_level = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Logging levels include <code>ERROR</code>, <code>INFO</code>, or <code>NONE</code>.</p>
    pub fn set_logging_level(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.logging_level = input;
        self
    }
    /// <p>Logging levels include <code>ERROR</code>, <code>INFO</code>, or <code>NONE</code>.</p>
    pub fn get_logging_level(&self) -> &::std::option::Option<::std::string::String> {
        &self.logging_level
    }
    /// Appends an item to `guardrail_policy_arns`.
    ///
    /// To override the contents of this collection use [`set_guardrail_policy_arns`](Self::set_guardrail_policy_arns).
    ///
    /// <p>The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed <code>AdministratorAccess</code> policy is applied by default if this is not set.</p>
    pub fn guardrail_policy_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.guardrail_policy_arns.unwrap_or_default();
        v.push(input.into());
        self.guardrail_policy_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed <code>AdministratorAccess</code> policy is applied by default if this is not set.</p>
    pub fn set_guardrail_policy_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.guardrail_policy_arns = input;
        self
    }
    /// <p>The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed <code>AdministratorAccess</code> policy is applied by default if this is not set.</p>
    pub fn get_guardrail_policy_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.guardrail_policy_arns
    }
    /// <p>Enables use of a user role requirement in your chat configuration.</p>
    pub fn user_authorization_required(mut self, input: bool) -> Self {
        self.user_authorization_required = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables use of a user role requirement in your chat configuration.</p>
    pub fn set_user_authorization_required(mut self, input: ::std::option::Option<bool>) -> Self {
        self.user_authorization_required = input;
        self
    }
    /// <p>Enables use of a user role requirement in your chat configuration.</p>
    pub fn get_user_authorization_required(&self) -> &::std::option::Option<bool> {
        &self.user_authorization_required
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateMicrosoftTeamsChannelConfigurationInput`](crate::operation::create_microsoft_teams_channel_configuration::CreateMicrosoftTeamsChannelConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_microsoft_teams_channel_configuration::CreateMicrosoftTeamsChannelConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_microsoft_teams_channel_configuration::CreateMicrosoftTeamsChannelConfigurationInput {
                channel_id: self.channel_id,
                channel_name: self.channel_name,
                team_id: self.team_id,
                team_name: self.team_name,
                tenant_id: self.tenant_id,
                sns_topic_arns: self.sns_topic_arns,
                iam_role_arn: self.iam_role_arn,
                configuration_name: self.configuration_name,
                logging_level: self.logging_level,
                guardrail_policy_arns: self.guardrail_policy_arns,
                user_authorization_required: self.user_authorization_required,
                tags: self.tags,
            },
        )
    }
}
impl ::std::fmt::Debug for CreateMicrosoftTeamsChannelConfigurationInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateMicrosoftTeamsChannelConfigurationInputBuilder");
        formatter.field("channel_id", &self.channel_id);
        formatter.field("channel_name", &"*** Sensitive Data Redacted ***");
        formatter.field("team_id", &self.team_id);
        formatter.field("team_name", &"*** Sensitive Data Redacted ***");
        formatter.field("tenant_id", &self.tenant_id);
        formatter.field("sns_topic_arns", &self.sns_topic_arns);
        formatter.field("iam_role_arn", &self.iam_role_arn);
        formatter.field("configuration_name", &self.configuration_name);
        formatter.field("logging_level", &self.logging_level);
        formatter.field("guardrail_policy_arns", &self.guardrail_policy_arns);
        formatter.field("user_authorization_required", &self.user_authorization_required);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
