// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// NextToken length limit is half of ddb accepted limit. Increase this limit if parameters in request increases.
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListLinuxSubscriptionInstancesInput {
    /// <p>An array of structures that you can use to filter the results by your specified criteria. For example, you can specify <code>Region</code> in the <code>Name</code>, with the <code>contains</code> operator to list all subscriptions that match a partial string in the <code>Value</code>, such as <code>us-west</code>.</p>
    /// <p>For each filter, you can specify one of the following values for the <code>Name</code> key to streamline results:</p>
    /// <ul>
    /// <li>
    /// <p><code>AccountID</code></p></li>
    /// <li>
    /// <p><code>AmiID</code></p></li>
    /// <li>
    /// <p><code>DualSubscription</code></p></li>
    /// <li>
    /// <p><code>InstanceID</code></p></li>
    /// <li>
    /// <p><code>InstanceType</code></p></li>
    /// <li>
    /// <p><code>ProductCode</code></p></li>
    /// <li>
    /// <p><code>Region</code></p></li>
    /// <li>
    /// <p><code>Status</code></p></li>
    /// <li>
    /// <p><code>UsageOperation</code></p></li>
    /// </ul>
    /// <p>For each filter, you can use one of the following <code>Operator</code> values to define the behavior of the filter:</p>
    /// <ul>
    /// <li>
    /// <p><code>contains</code></p></li>
    /// <li>
    /// <p><code>equals</code></p></li>
    /// <li>
    /// <p><code>Notequal</code></p></li>
    /// </ul>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    /// <p>The maximum items to return in a request.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>A token to specify where to start paginating. This is the nextToken from a previously truncated response.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListLinuxSubscriptionInstancesInput {
    /// <p>An array of structures that you can use to filter the results by your specified criteria. For example, you can specify <code>Region</code> in the <code>Name</code>, with the <code>contains</code> operator to list all subscriptions that match a partial string in the <code>Value</code>, such as <code>us-west</code>.</p>
    /// <p>For each filter, you can specify one of the following values for the <code>Name</code> key to streamline results:</p>
    /// <ul>
    /// <li>
    /// <p><code>AccountID</code></p></li>
    /// <li>
    /// <p><code>AmiID</code></p></li>
    /// <li>
    /// <p><code>DualSubscription</code></p></li>
    /// <li>
    /// <p><code>InstanceID</code></p></li>
    /// <li>
    /// <p><code>InstanceType</code></p></li>
    /// <li>
    /// <p><code>ProductCode</code></p></li>
    /// <li>
    /// <p><code>Region</code></p></li>
    /// <li>
    /// <p><code>Status</code></p></li>
    /// <li>
    /// <p><code>UsageOperation</code></p></li>
    /// </ul>
    /// <p>For each filter, you can use one of the following <code>Operator</code> values to define the behavior of the filter:</p>
    /// <ul>
    /// <li>
    /// <p><code>contains</code></p></li>
    /// <li>
    /// <p><code>equals</code></p></li>
    /// <li>
    /// <p><code>Notequal</code></p></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::Filter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>The maximum items to return in a request.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>A token to specify where to start paginating. This is the nextToken from a previously truncated response.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListLinuxSubscriptionInstancesInput {
    /// Creates a new builder-style object to manufacture [`ListLinuxSubscriptionInstancesInput`](crate::operation::list_linux_subscription_instances::ListLinuxSubscriptionInstancesInput).
    pub fn builder() -> crate::operation::list_linux_subscription_instances::builders::ListLinuxSubscriptionInstancesInputBuilder {
        crate::operation::list_linux_subscription_instances::builders::ListLinuxSubscriptionInstancesInputBuilder::default()
    }
}

/// A builder for [`ListLinuxSubscriptionInstancesInput`](crate::operation::list_linux_subscription_instances::ListLinuxSubscriptionInstancesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListLinuxSubscriptionInstancesInputBuilder {
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListLinuxSubscriptionInstancesInputBuilder {
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>An array of structures that you can use to filter the results by your specified criteria. For example, you can specify <code>Region</code> in the <code>Name</code>, with the <code>contains</code> operator to list all subscriptions that match a partial string in the <code>Value</code>, such as <code>us-west</code>.</p>
    /// <p>For each filter, you can specify one of the following values for the <code>Name</code> key to streamline results:</p>
    /// <ul>
    /// <li>
    /// <p><code>AccountID</code></p></li>
    /// <li>
    /// <p><code>AmiID</code></p></li>
    /// <li>
    /// <p><code>DualSubscription</code></p></li>
    /// <li>
    /// <p><code>InstanceID</code></p></li>
    /// <li>
    /// <p><code>InstanceType</code></p></li>
    /// <li>
    /// <p><code>ProductCode</code></p></li>
    /// <li>
    /// <p><code>Region</code></p></li>
    /// <li>
    /// <p><code>Status</code></p></li>
    /// <li>
    /// <p><code>UsageOperation</code></p></li>
    /// </ul>
    /// <p>For each filter, you can use one of the following <code>Operator</code> values to define the behavior of the filter:</p>
    /// <ul>
    /// <li>
    /// <p><code>contains</code></p></li>
    /// <li>
    /// <p><code>equals</code></p></li>
    /// <li>
    /// <p><code>Notequal</code></p></li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of structures that you can use to filter the results by your specified criteria. For example, you can specify <code>Region</code> in the <code>Name</code>, with the <code>contains</code> operator to list all subscriptions that match a partial string in the <code>Value</code>, such as <code>us-west</code>.</p>
    /// <p>For each filter, you can specify one of the following values for the <code>Name</code> key to streamline results:</p>
    /// <ul>
    /// <li>
    /// <p><code>AccountID</code></p></li>
    /// <li>
    /// <p><code>AmiID</code></p></li>
    /// <li>
    /// <p><code>DualSubscription</code></p></li>
    /// <li>
    /// <p><code>InstanceID</code></p></li>
    /// <li>
    /// <p><code>InstanceType</code></p></li>
    /// <li>
    /// <p><code>ProductCode</code></p></li>
    /// <li>
    /// <p><code>Region</code></p></li>
    /// <li>
    /// <p><code>Status</code></p></li>
    /// <li>
    /// <p><code>UsageOperation</code></p></li>
    /// </ul>
    /// <p>For each filter, you can use one of the following <code>Operator</code> values to define the behavior of the filter:</p>
    /// <ul>
    /// <li>
    /// <p><code>contains</code></p></li>
    /// <li>
    /// <p><code>equals</code></p></li>
    /// <li>
    /// <p><code>Notequal</code></p></li>
    /// </ul>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>An array of structures that you can use to filter the results by your specified criteria. For example, you can specify <code>Region</code> in the <code>Name</code>, with the <code>contains</code> operator to list all subscriptions that match a partial string in the <code>Value</code>, such as <code>us-west</code>.</p>
    /// <p>For each filter, you can specify one of the following values for the <code>Name</code> key to streamline results:</p>
    /// <ul>
    /// <li>
    /// <p><code>AccountID</code></p></li>
    /// <li>
    /// <p><code>AmiID</code></p></li>
    /// <li>
    /// <p><code>DualSubscription</code></p></li>
    /// <li>
    /// <p><code>InstanceID</code></p></li>
    /// <li>
    /// <p><code>InstanceType</code></p></li>
    /// <li>
    /// <p><code>ProductCode</code></p></li>
    /// <li>
    /// <p><code>Region</code></p></li>
    /// <li>
    /// <p><code>Status</code></p></li>
    /// <li>
    /// <p><code>UsageOperation</code></p></li>
    /// </ul>
    /// <p>For each filter, you can use one of the following <code>Operator</code> values to define the behavior of the filter:</p>
    /// <ul>
    /// <li>
    /// <p><code>contains</code></p></li>
    /// <li>
    /// <p><code>equals</code></p></li>
    /// <li>
    /// <p><code>Notequal</code></p></li>
    /// </ul>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        &self.filters
    }
    /// <p>The maximum items to return in a request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum items to return in a request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum items to return in a request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>A token to specify where to start paginating. This is the nextToken from a previously truncated response.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token to specify where to start paginating. This is the nextToken from a previously truncated response.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token to specify where to start paginating. This is the nextToken from a previously truncated response.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListLinuxSubscriptionInstancesInput`](crate::operation::list_linux_subscription_instances::ListLinuxSubscriptionInstancesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_linux_subscription_instances::ListLinuxSubscriptionInstancesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_linux_subscription_instances::ListLinuxSubscriptionInstancesInput {
            filters: self.filters,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
