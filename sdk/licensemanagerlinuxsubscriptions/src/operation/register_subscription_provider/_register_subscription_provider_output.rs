// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RegisterSubscriptionProviderOutput {
    /// <p>The Linux subscription provider that you registered.</p>
    pub subscription_provider_source: ::std::option::Option<crate::types::SubscriptionProviderSource>,
    /// <p>The Amazon Resource Name (ARN) of the Linux subscription provider resource that you registered.</p>
    pub subscription_provider_arn: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the status of the registration action for the Linux subscription provider that you requested.</p>
    pub subscription_provider_status: ::std::option::Option<crate::types::SubscriptionProviderStatus>,
    _request_id: Option<String>,
}
impl RegisterSubscriptionProviderOutput {
    /// <p>The Linux subscription provider that you registered.</p>
    pub fn subscription_provider_source(&self) -> ::std::option::Option<&crate::types::SubscriptionProviderSource> {
        self.subscription_provider_source.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Linux subscription provider resource that you registered.</p>
    pub fn subscription_provider_arn(&self) -> ::std::option::Option<&str> {
        self.subscription_provider_arn.as_deref()
    }
    /// <p>Indicates the status of the registration action for the Linux subscription provider that you requested.</p>
    pub fn subscription_provider_status(&self) -> ::std::option::Option<&crate::types::SubscriptionProviderStatus> {
        self.subscription_provider_status.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for RegisterSubscriptionProviderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RegisterSubscriptionProviderOutput {
    /// Creates a new builder-style object to manufacture [`RegisterSubscriptionProviderOutput`](crate::operation::register_subscription_provider::RegisterSubscriptionProviderOutput).
    pub fn builder() -> crate::operation::register_subscription_provider::builders::RegisterSubscriptionProviderOutputBuilder {
        crate::operation::register_subscription_provider::builders::RegisterSubscriptionProviderOutputBuilder::default()
    }
}

/// A builder for [`RegisterSubscriptionProviderOutput`](crate::operation::register_subscription_provider::RegisterSubscriptionProviderOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RegisterSubscriptionProviderOutputBuilder {
    pub(crate) subscription_provider_source: ::std::option::Option<crate::types::SubscriptionProviderSource>,
    pub(crate) subscription_provider_arn: ::std::option::Option<::std::string::String>,
    pub(crate) subscription_provider_status: ::std::option::Option<crate::types::SubscriptionProviderStatus>,
    _request_id: Option<String>,
}
impl RegisterSubscriptionProviderOutputBuilder {
    /// <p>The Linux subscription provider that you registered.</p>
    pub fn subscription_provider_source(mut self, input: crate::types::SubscriptionProviderSource) -> Self {
        self.subscription_provider_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Linux subscription provider that you registered.</p>
    pub fn set_subscription_provider_source(mut self, input: ::std::option::Option<crate::types::SubscriptionProviderSource>) -> Self {
        self.subscription_provider_source = input;
        self
    }
    /// <p>The Linux subscription provider that you registered.</p>
    pub fn get_subscription_provider_source(&self) -> &::std::option::Option<crate::types::SubscriptionProviderSource> {
        &self.subscription_provider_source
    }
    /// <p>The Amazon Resource Name (ARN) of the Linux subscription provider resource that you registered.</p>
    pub fn subscription_provider_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subscription_provider_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Linux subscription provider resource that you registered.</p>
    pub fn set_subscription_provider_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subscription_provider_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Linux subscription provider resource that you registered.</p>
    pub fn get_subscription_provider_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.subscription_provider_arn
    }
    /// <p>Indicates the status of the registration action for the Linux subscription provider that you requested.</p>
    pub fn subscription_provider_status(mut self, input: crate::types::SubscriptionProviderStatus) -> Self {
        self.subscription_provider_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the status of the registration action for the Linux subscription provider that you requested.</p>
    pub fn set_subscription_provider_status(mut self, input: ::std::option::Option<crate::types::SubscriptionProviderStatus>) -> Self {
        self.subscription_provider_status = input;
        self
    }
    /// <p>Indicates the status of the registration action for the Linux subscription provider that you requested.</p>
    pub fn get_subscription_provider_status(&self) -> &::std::option::Option<crate::types::SubscriptionProviderStatus> {
        &self.subscription_provider_status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`RegisterSubscriptionProviderOutput`](crate::operation::register_subscription_provider::RegisterSubscriptionProviderOutput).
    pub fn build(self) -> crate::operation::register_subscription_provider::RegisterSubscriptionProviderOutput {
        crate::operation::register_subscription_provider::RegisterSubscriptionProviderOutput {
            subscription_provider_source: self.subscription_provider_source,
            subscription_provider_arn: self.subscription_provider_arn,
            subscription_provider_status: self.subscription_provider_status,
            _request_id: self._request_id,
        }
    }
}
