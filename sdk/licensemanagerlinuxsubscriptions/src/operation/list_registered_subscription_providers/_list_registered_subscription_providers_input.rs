// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListRegisteredSubscriptionProvidersInput {
    /// <p>To filter your results, specify which subscription providers to return in the list.</p>
    pub subscription_provider_sources: ::std::option::Option<::std::vec::Vec<crate::types::SubscriptionProviderSource>>,
    /// <p>The maximum items to return in a request.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>A token to specify where to start paginating. This is the nextToken from a previously truncated response.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListRegisteredSubscriptionProvidersInput {
    /// <p>To filter your results, specify which subscription providers to return in the list.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.subscription_provider_sources.is_none()`.
    pub fn subscription_provider_sources(&self) -> &[crate::types::SubscriptionProviderSource] {
        self.subscription_provider_sources.as_deref().unwrap_or_default()
    }
    /// <p>The maximum items to return in a request.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>A token to specify where to start paginating. This is the nextToken from a previously truncated response.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListRegisteredSubscriptionProvidersInput {
    /// Creates a new builder-style object to manufacture [`ListRegisteredSubscriptionProvidersInput`](crate::operation::list_registered_subscription_providers::ListRegisteredSubscriptionProvidersInput).
    pub fn builder() -> crate::operation::list_registered_subscription_providers::builders::ListRegisteredSubscriptionProvidersInputBuilder {
        crate::operation::list_registered_subscription_providers::builders::ListRegisteredSubscriptionProvidersInputBuilder::default()
    }
}

/// A builder for [`ListRegisteredSubscriptionProvidersInput`](crate::operation::list_registered_subscription_providers::ListRegisteredSubscriptionProvidersInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListRegisteredSubscriptionProvidersInputBuilder {
    pub(crate) subscription_provider_sources: ::std::option::Option<::std::vec::Vec<crate::types::SubscriptionProviderSource>>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListRegisteredSubscriptionProvidersInputBuilder {
    /// Appends an item to `subscription_provider_sources`.
    ///
    /// To override the contents of this collection use [`set_subscription_provider_sources`](Self::set_subscription_provider_sources).
    ///
    /// <p>To filter your results, specify which subscription providers to return in the list.</p>
    pub fn subscription_provider_sources(mut self, input: crate::types::SubscriptionProviderSource) -> Self {
        let mut v = self.subscription_provider_sources.unwrap_or_default();
        v.push(input);
        self.subscription_provider_sources = ::std::option::Option::Some(v);
        self
    }
    /// <p>To filter your results, specify which subscription providers to return in the list.</p>
    pub fn set_subscription_provider_sources(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::SubscriptionProviderSource>>,
    ) -> Self {
        self.subscription_provider_sources = input;
        self
    }
    /// <p>To filter your results, specify which subscription providers to return in the list.</p>
    pub fn get_subscription_provider_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SubscriptionProviderSource>> {
        &self.subscription_provider_sources
    }
    /// <p>The maximum items to return in a request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum items to return in a request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum items to return in a request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>A token to specify where to start paginating. This is the nextToken from a previously truncated response.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token to specify where to start paginating. This is the nextToken from a previously truncated response.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token to specify where to start paginating. This is the nextToken from a previously truncated response.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListRegisteredSubscriptionProvidersInput`](crate::operation::list_registered_subscription_providers::ListRegisteredSubscriptionProvidersInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_registered_subscription_providers::ListRegisteredSubscriptionProvidersInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::list_registered_subscription_providers::ListRegisteredSubscriptionProvidersInput {
                subscription_provider_sources: self.subscription_provider_sources,
                max_results: self.max_results,
                next_token: self.next_token,
            },
        )
    }
}
