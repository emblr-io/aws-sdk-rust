// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListRegisteredSubscriptionProvidersOutput {
    /// <p>The list of BYOL registration resources that fit the criteria you specified in the request.</p>
    pub registered_subscription_providers: ::std::option::Option<::std::vec::Vec<crate::types::RegisteredSubscriptionProvider>>,
    /// <p>The next token used for paginated responses. When this field isn't empty, there are additional elements that the service hasn't included in this request. Use this token with the next request to retrieve additional objects.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListRegisteredSubscriptionProvidersOutput {
    /// <p>The list of BYOL registration resources that fit the criteria you specified in the request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.registered_subscription_providers.is_none()`.
    pub fn registered_subscription_providers(&self) -> &[crate::types::RegisteredSubscriptionProvider] {
        self.registered_subscription_providers.as_deref().unwrap_or_default()
    }
    /// <p>The next token used for paginated responses. When this field isn't empty, there are additional elements that the service hasn't included in this request. Use this token with the next request to retrieve additional objects.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListRegisteredSubscriptionProvidersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListRegisteredSubscriptionProvidersOutput {
    /// Creates a new builder-style object to manufacture [`ListRegisteredSubscriptionProvidersOutput`](crate::operation::list_registered_subscription_providers::ListRegisteredSubscriptionProvidersOutput).
    pub fn builder() -> crate::operation::list_registered_subscription_providers::builders::ListRegisteredSubscriptionProvidersOutputBuilder {
        crate::operation::list_registered_subscription_providers::builders::ListRegisteredSubscriptionProvidersOutputBuilder::default()
    }
}

/// A builder for [`ListRegisteredSubscriptionProvidersOutput`](crate::operation::list_registered_subscription_providers::ListRegisteredSubscriptionProvidersOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListRegisteredSubscriptionProvidersOutputBuilder {
    pub(crate) registered_subscription_providers: ::std::option::Option<::std::vec::Vec<crate::types::RegisteredSubscriptionProvider>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListRegisteredSubscriptionProvidersOutputBuilder {
    /// Appends an item to `registered_subscription_providers`.
    ///
    /// To override the contents of this collection use [`set_registered_subscription_providers`](Self::set_registered_subscription_providers).
    ///
    /// <p>The list of BYOL registration resources that fit the criteria you specified in the request.</p>
    pub fn registered_subscription_providers(mut self, input: crate::types::RegisteredSubscriptionProvider) -> Self {
        let mut v = self.registered_subscription_providers.unwrap_or_default();
        v.push(input);
        self.registered_subscription_providers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of BYOL registration resources that fit the criteria you specified in the request.</p>
    pub fn set_registered_subscription_providers(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::RegisteredSubscriptionProvider>>,
    ) -> Self {
        self.registered_subscription_providers = input;
        self
    }
    /// <p>The list of BYOL registration resources that fit the criteria you specified in the request.</p>
    pub fn get_registered_subscription_providers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RegisteredSubscriptionProvider>> {
        &self.registered_subscription_providers
    }
    /// <p>The next token used for paginated responses. When this field isn't empty, there are additional elements that the service hasn't included in this request. Use this token with the next request to retrieve additional objects.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The next token used for paginated responses. When this field isn't empty, there are additional elements that the service hasn't included in this request. Use this token with the next request to retrieve additional objects.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The next token used for paginated responses. When this field isn't empty, there are additional elements that the service hasn't included in this request. Use this token with the next request to retrieve additional objects.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListRegisteredSubscriptionProvidersOutput`](crate::operation::list_registered_subscription_providers::ListRegisteredSubscriptionProvidersOutput).
    pub fn build(self) -> crate::operation::list_registered_subscription_providers::ListRegisteredSubscriptionProvidersOutput {
        crate::operation::list_registered_subscription_providers::ListRegisteredSubscriptionProvidersOutput {
            registered_subscription_providers: self.registered_subscription_providers,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
