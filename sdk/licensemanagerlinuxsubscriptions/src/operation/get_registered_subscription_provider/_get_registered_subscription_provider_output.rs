// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetRegisteredSubscriptionProviderOutput {
    /// <p>The Amazon Resource Name (ARN) for the BYOL registration resource specified in the request.</p>
    pub subscription_provider_arn: ::std::option::Option<::std::string::String>,
    /// <p>The subscription provider for the BYOL registration resource specified in the request.</p>
    pub subscription_provider_source: ::std::option::Option<crate::types::SubscriptionProviderSource>,
    /// <p>The Amazon Resource Name (ARN) of the third-party access secret stored in Secrets Manager for the BYOL registration resource specified in the request.</p>
    pub secret_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the Linux subscription provider access token from the last successful subscription data request.</p>
    pub subscription_provider_status: ::std::option::Option<crate::types::SubscriptionProviderStatus>,
    /// <p>The detailed message from your subscription provider token status.</p>
    pub subscription_provider_status_message: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp from the last time License Manager retrieved subscription details from your registered third-party Linux subscription provider.</p>
    pub last_successful_data_retrieval_time: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetRegisteredSubscriptionProviderOutput {
    /// <p>The Amazon Resource Name (ARN) for the BYOL registration resource specified in the request.</p>
    pub fn subscription_provider_arn(&self) -> ::std::option::Option<&str> {
        self.subscription_provider_arn.as_deref()
    }
    /// <p>The subscription provider for the BYOL registration resource specified in the request.</p>
    pub fn subscription_provider_source(&self) -> ::std::option::Option<&crate::types::SubscriptionProviderSource> {
        self.subscription_provider_source.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the third-party access secret stored in Secrets Manager for the BYOL registration resource specified in the request.</p>
    pub fn secret_arn(&self) -> ::std::option::Option<&str> {
        self.secret_arn.as_deref()
    }
    /// <p>The status of the Linux subscription provider access token from the last successful subscription data request.</p>
    pub fn subscription_provider_status(&self) -> ::std::option::Option<&crate::types::SubscriptionProviderStatus> {
        self.subscription_provider_status.as_ref()
    }
    /// <p>The detailed message from your subscription provider token status.</p>
    pub fn subscription_provider_status_message(&self) -> ::std::option::Option<&str> {
        self.subscription_provider_status_message.as_deref()
    }
    /// <p>The timestamp from the last time License Manager retrieved subscription details from your registered third-party Linux subscription provider.</p>
    pub fn last_successful_data_retrieval_time(&self) -> ::std::option::Option<&str> {
        self.last_successful_data_retrieval_time.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetRegisteredSubscriptionProviderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetRegisteredSubscriptionProviderOutput {
    /// Creates a new builder-style object to manufacture [`GetRegisteredSubscriptionProviderOutput`](crate::operation::get_registered_subscription_provider::GetRegisteredSubscriptionProviderOutput).
    pub fn builder() -> crate::operation::get_registered_subscription_provider::builders::GetRegisteredSubscriptionProviderOutputBuilder {
        crate::operation::get_registered_subscription_provider::builders::GetRegisteredSubscriptionProviderOutputBuilder::default()
    }
}

/// A builder for [`GetRegisteredSubscriptionProviderOutput`](crate::operation::get_registered_subscription_provider::GetRegisteredSubscriptionProviderOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetRegisteredSubscriptionProviderOutputBuilder {
    pub(crate) subscription_provider_arn: ::std::option::Option<::std::string::String>,
    pub(crate) subscription_provider_source: ::std::option::Option<crate::types::SubscriptionProviderSource>,
    pub(crate) secret_arn: ::std::option::Option<::std::string::String>,
    pub(crate) subscription_provider_status: ::std::option::Option<crate::types::SubscriptionProviderStatus>,
    pub(crate) subscription_provider_status_message: ::std::option::Option<::std::string::String>,
    pub(crate) last_successful_data_retrieval_time: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetRegisteredSubscriptionProviderOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) for the BYOL registration resource specified in the request.</p>
    pub fn subscription_provider_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subscription_provider_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the BYOL registration resource specified in the request.</p>
    pub fn set_subscription_provider_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subscription_provider_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the BYOL registration resource specified in the request.</p>
    pub fn get_subscription_provider_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.subscription_provider_arn
    }
    /// <p>The subscription provider for the BYOL registration resource specified in the request.</p>
    pub fn subscription_provider_source(mut self, input: crate::types::SubscriptionProviderSource) -> Self {
        self.subscription_provider_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The subscription provider for the BYOL registration resource specified in the request.</p>
    pub fn set_subscription_provider_source(mut self, input: ::std::option::Option<crate::types::SubscriptionProviderSource>) -> Self {
        self.subscription_provider_source = input;
        self
    }
    /// <p>The subscription provider for the BYOL registration resource specified in the request.</p>
    pub fn get_subscription_provider_source(&self) -> &::std::option::Option<crate::types::SubscriptionProviderSource> {
        &self.subscription_provider_source
    }
    /// <p>The Amazon Resource Name (ARN) of the third-party access secret stored in Secrets Manager for the BYOL registration resource specified in the request.</p>
    pub fn secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the third-party access secret stored in Secrets Manager for the BYOL registration resource specified in the request.</p>
    pub fn set_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the third-party access secret stored in Secrets Manager for the BYOL registration resource specified in the request.</p>
    pub fn get_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_arn
    }
    /// <p>The status of the Linux subscription provider access token from the last successful subscription data request.</p>
    pub fn subscription_provider_status(mut self, input: crate::types::SubscriptionProviderStatus) -> Self {
        self.subscription_provider_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the Linux subscription provider access token from the last successful subscription data request.</p>
    pub fn set_subscription_provider_status(mut self, input: ::std::option::Option<crate::types::SubscriptionProviderStatus>) -> Self {
        self.subscription_provider_status = input;
        self
    }
    /// <p>The status of the Linux subscription provider access token from the last successful subscription data request.</p>
    pub fn get_subscription_provider_status(&self) -> &::std::option::Option<crate::types::SubscriptionProviderStatus> {
        &self.subscription_provider_status
    }
    /// <p>The detailed message from your subscription provider token status.</p>
    pub fn subscription_provider_status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subscription_provider_status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The detailed message from your subscription provider token status.</p>
    pub fn set_subscription_provider_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subscription_provider_status_message = input;
        self
    }
    /// <p>The detailed message from your subscription provider token status.</p>
    pub fn get_subscription_provider_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.subscription_provider_status_message
    }
    /// <p>The timestamp from the last time License Manager retrieved subscription details from your registered third-party Linux subscription provider.</p>
    pub fn last_successful_data_retrieval_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_successful_data_retrieval_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The timestamp from the last time License Manager retrieved subscription details from your registered third-party Linux subscription provider.</p>
    pub fn set_last_successful_data_retrieval_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_successful_data_retrieval_time = input;
        self
    }
    /// <p>The timestamp from the last time License Manager retrieved subscription details from your registered third-party Linux subscription provider.</p>
    pub fn get_last_successful_data_retrieval_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_successful_data_retrieval_time
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetRegisteredSubscriptionProviderOutput`](crate::operation::get_registered_subscription_provider::GetRegisteredSubscriptionProviderOutput).
    pub fn build(self) -> crate::operation::get_registered_subscription_provider::GetRegisteredSubscriptionProviderOutput {
        crate::operation::get_registered_subscription_provider::GetRegisteredSubscriptionProviderOutput {
            subscription_provider_arn: self.subscription_provider_arn,
            subscription_provider_source: self.subscription_provider_source,
            secret_arn: self.secret_arn,
            subscription_provider_status: self.subscription_provider_status,
            subscription_provider_status_message: self.subscription_provider_status_message,
            last_successful_data_retrieval_time: self.last_successful_data_retrieval_time,
            _request_id: self._request_id,
        }
    }
}
