// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A third-party provider for operating system (OS) platform software and license subscriptions, such as Red Hat. When you register a third-party Linux subscription provider, License Manager can get subscription data from the registered provider.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RegisteredSubscriptionProvider {
    /// <p>The Amazon Resource Name (ARN) of the Linux subscription provider resource that you registered.</p>
    pub subscription_provider_arn: ::std::option::Option<::std::string::String>,
    /// <p>A supported third-party Linux subscription provider. License Manager currently supports Red Hat subscriptions.</p>
    pub subscription_provider_source: ::std::option::Option<crate::types::SubscriptionProviderSource>,
    /// <p>The Amazon Resource Name (ARN) of the Secrets Manager secret that stores your registered Linux subscription provider access token. For RHEL account subscriptions, this is the offline token.</p>
    pub secret_arn: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the status of your registered Linux subscription provider access token from the last time License Manager retrieved subscription data. For RHEL account subscriptions, this is the status of the offline token.</p>
    pub subscription_provider_status: ::std::option::Option<crate::types::SubscriptionProviderStatus>,
    /// <p>A detailed message that's associated with your BYOL subscription provider token status.</p>
    pub subscription_provider_status_message: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp from the last time that License Manager accessed third-party subscription data for your account from your registered Linux subscription provider.</p>
    pub last_successful_data_retrieval_time: ::std::option::Option<::std::string::String>,
}
impl RegisteredSubscriptionProvider {
    /// <p>The Amazon Resource Name (ARN) of the Linux subscription provider resource that you registered.</p>
    pub fn subscription_provider_arn(&self) -> ::std::option::Option<&str> {
        self.subscription_provider_arn.as_deref()
    }
    /// <p>A supported third-party Linux subscription provider. License Manager currently supports Red Hat subscriptions.</p>
    pub fn subscription_provider_source(&self) -> ::std::option::Option<&crate::types::SubscriptionProviderSource> {
        self.subscription_provider_source.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Secrets Manager secret that stores your registered Linux subscription provider access token. For RHEL account subscriptions, this is the offline token.</p>
    pub fn secret_arn(&self) -> ::std::option::Option<&str> {
        self.secret_arn.as_deref()
    }
    /// <p>Indicates the status of your registered Linux subscription provider access token from the last time License Manager retrieved subscription data. For RHEL account subscriptions, this is the status of the offline token.</p>
    pub fn subscription_provider_status(&self) -> ::std::option::Option<&crate::types::SubscriptionProviderStatus> {
        self.subscription_provider_status.as_ref()
    }
    /// <p>A detailed message that's associated with your BYOL subscription provider token status.</p>
    pub fn subscription_provider_status_message(&self) -> ::std::option::Option<&str> {
        self.subscription_provider_status_message.as_deref()
    }
    /// <p>The timestamp from the last time that License Manager accessed third-party subscription data for your account from your registered Linux subscription provider.</p>
    pub fn last_successful_data_retrieval_time(&self) -> ::std::option::Option<&str> {
        self.last_successful_data_retrieval_time.as_deref()
    }
}
impl RegisteredSubscriptionProvider {
    /// Creates a new builder-style object to manufacture [`RegisteredSubscriptionProvider`](crate::types::RegisteredSubscriptionProvider).
    pub fn builder() -> crate::types::builders::RegisteredSubscriptionProviderBuilder {
        crate::types::builders::RegisteredSubscriptionProviderBuilder::default()
    }
}

/// A builder for [`RegisteredSubscriptionProvider`](crate::types::RegisteredSubscriptionProvider).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RegisteredSubscriptionProviderBuilder {
    pub(crate) subscription_provider_arn: ::std::option::Option<::std::string::String>,
    pub(crate) subscription_provider_source: ::std::option::Option<crate::types::SubscriptionProviderSource>,
    pub(crate) secret_arn: ::std::option::Option<::std::string::String>,
    pub(crate) subscription_provider_status: ::std::option::Option<crate::types::SubscriptionProviderStatus>,
    pub(crate) subscription_provider_status_message: ::std::option::Option<::std::string::String>,
    pub(crate) last_successful_data_retrieval_time: ::std::option::Option<::std::string::String>,
}
impl RegisteredSubscriptionProviderBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Linux subscription provider resource that you registered.</p>
    pub fn subscription_provider_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subscription_provider_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Linux subscription provider resource that you registered.</p>
    pub fn set_subscription_provider_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subscription_provider_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Linux subscription provider resource that you registered.</p>
    pub fn get_subscription_provider_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.subscription_provider_arn
    }
    /// <p>A supported third-party Linux subscription provider. License Manager currently supports Red Hat subscriptions.</p>
    pub fn subscription_provider_source(mut self, input: crate::types::SubscriptionProviderSource) -> Self {
        self.subscription_provider_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>A supported third-party Linux subscription provider. License Manager currently supports Red Hat subscriptions.</p>
    pub fn set_subscription_provider_source(mut self, input: ::std::option::Option<crate::types::SubscriptionProviderSource>) -> Self {
        self.subscription_provider_source = input;
        self
    }
    /// <p>A supported third-party Linux subscription provider. License Manager currently supports Red Hat subscriptions.</p>
    pub fn get_subscription_provider_source(&self) -> &::std::option::Option<crate::types::SubscriptionProviderSource> {
        &self.subscription_provider_source
    }
    /// <p>The Amazon Resource Name (ARN) of the Secrets Manager secret that stores your registered Linux subscription provider access token. For RHEL account subscriptions, this is the offline token.</p>
    pub fn secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Secrets Manager secret that stores your registered Linux subscription provider access token. For RHEL account subscriptions, this is the offline token.</p>
    pub fn set_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Secrets Manager secret that stores your registered Linux subscription provider access token. For RHEL account subscriptions, this is the offline token.</p>
    pub fn get_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_arn
    }
    /// <p>Indicates the status of your registered Linux subscription provider access token from the last time License Manager retrieved subscription data. For RHEL account subscriptions, this is the status of the offline token.</p>
    pub fn subscription_provider_status(mut self, input: crate::types::SubscriptionProviderStatus) -> Self {
        self.subscription_provider_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the status of your registered Linux subscription provider access token from the last time License Manager retrieved subscription data. For RHEL account subscriptions, this is the status of the offline token.</p>
    pub fn set_subscription_provider_status(mut self, input: ::std::option::Option<crate::types::SubscriptionProviderStatus>) -> Self {
        self.subscription_provider_status = input;
        self
    }
    /// <p>Indicates the status of your registered Linux subscription provider access token from the last time License Manager retrieved subscription data. For RHEL account subscriptions, this is the status of the offline token.</p>
    pub fn get_subscription_provider_status(&self) -> &::std::option::Option<crate::types::SubscriptionProviderStatus> {
        &self.subscription_provider_status
    }
    /// <p>A detailed message that's associated with your BYOL subscription provider token status.</p>
    pub fn subscription_provider_status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subscription_provider_status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A detailed message that's associated with your BYOL subscription provider token status.</p>
    pub fn set_subscription_provider_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subscription_provider_status_message = input;
        self
    }
    /// <p>A detailed message that's associated with your BYOL subscription provider token status.</p>
    pub fn get_subscription_provider_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.subscription_provider_status_message
    }
    /// <p>The timestamp from the last time that License Manager accessed third-party subscription data for your account from your registered Linux subscription provider.</p>
    pub fn last_successful_data_retrieval_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_successful_data_retrieval_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The timestamp from the last time that License Manager accessed third-party subscription data for your account from your registered Linux subscription provider.</p>
    pub fn set_last_successful_data_retrieval_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_successful_data_retrieval_time = input;
        self
    }
    /// <p>The timestamp from the last time that License Manager accessed third-party subscription data for your account from your registered Linux subscription provider.</p>
    pub fn get_last_successful_data_retrieval_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_successful_data_retrieval_time
    }
    /// Consumes the builder and constructs a [`RegisteredSubscriptionProvider`](crate::types::RegisteredSubscriptionProvider).
    pub fn build(self) -> crate::types::RegisteredSubscriptionProvider {
        crate::types::RegisteredSubscriptionProvider {
            subscription_provider_arn: self.subscription_provider_arn,
            subscription_provider_source: self.subscription_provider_source,
            secret_arn: self.secret_arn,
            subscription_provider_status: self.subscription_provider_status,
            subscription_provider_status_message: self.subscription_provider_status_message,
            last_successful_data_retrieval_time: self.last_successful_data_retrieval_time,
        }
    }
}
