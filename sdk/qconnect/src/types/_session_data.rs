// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the session.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SessionData {
    /// <p>The Amazon Resource Name (ARN) of the session.</p>
    pub session_arn: ::std::string::String,
    /// <p>The identifier of the session.</p>
    pub session_id: ::std::string::String,
    /// <p>The name of the session.</p>
    pub name: ::std::string::String,
    /// <p>The description of the session.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The configuration information for the session integration.</p>
    pub integration_configuration: ::std::option::Option<crate::types::SessionIntegrationConfiguration>,
    /// <p>An object that can be used to specify Tag conditions.</p>
    pub tag_filter: ::std::option::Option<crate::types::TagFilter>,
    /// <p>The configuration of the AI Agents (mapped by AI Agent Type to AI Agent version) that should be used by Amazon Q in Connect for this Session.</p>
    pub ai_agent_configuration: ::std::option::Option<::std::collections::HashMap<crate::types::AiAgentType, crate::types::AiAgentConfigurationData>>,
    /// <p>The origin of the Session to be listed. <code>SYSTEM</code> for a default Session created by Amazon Q in Connect or <code>CUSTOMER</code> for a Session created by calling <a href="https://docs.aws.amazon.com/connect/latest/APIReference/API_amazon-q-connect_CreateSession.html">CreateSession</a> API.</p>
    pub origin: ::std::option::Option<crate::types::Origin>,
}
impl SessionData {
    /// <p>The Amazon Resource Name (ARN) of the session.</p>
    pub fn session_arn(&self) -> &str {
        use std::ops::Deref;
        self.session_arn.deref()
    }
    /// <p>The identifier of the session.</p>
    pub fn session_id(&self) -> &str {
        use std::ops::Deref;
        self.session_id.deref()
    }
    /// <p>The name of the session.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of the session.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The configuration information for the session integration.</p>
    pub fn integration_configuration(&self) -> ::std::option::Option<&crate::types::SessionIntegrationConfiguration> {
        self.integration_configuration.as_ref()
    }
    /// <p>An object that can be used to specify Tag conditions.</p>
    pub fn tag_filter(&self) -> ::std::option::Option<&crate::types::TagFilter> {
        self.tag_filter.as_ref()
    }
    /// <p>The configuration of the AI Agents (mapped by AI Agent Type to AI Agent version) that should be used by Amazon Q in Connect for this Session.</p>
    pub fn ai_agent_configuration(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<crate::types::AiAgentType, crate::types::AiAgentConfigurationData>> {
        self.ai_agent_configuration.as_ref()
    }
    /// <p>The origin of the Session to be listed. <code>SYSTEM</code> for a default Session created by Amazon Q in Connect or <code>CUSTOMER</code> for a Session created by calling <a href="https://docs.aws.amazon.com/connect/latest/APIReference/API_amazon-q-connect_CreateSession.html">CreateSession</a> API.</p>
    pub fn origin(&self) -> ::std::option::Option<&crate::types::Origin> {
        self.origin.as_ref()
    }
}
impl SessionData {
    /// Creates a new builder-style object to manufacture [`SessionData`](crate::types::SessionData).
    pub fn builder() -> crate::types::builders::SessionDataBuilder {
        crate::types::builders::SessionDataBuilder::default()
    }
}

/// A builder for [`SessionData`](crate::types::SessionData).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SessionDataBuilder {
    pub(crate) session_arn: ::std::option::Option<::std::string::String>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) integration_configuration: ::std::option::Option<crate::types::SessionIntegrationConfiguration>,
    pub(crate) tag_filter: ::std::option::Option<crate::types::TagFilter>,
    pub(crate) ai_agent_configuration:
        ::std::option::Option<::std::collections::HashMap<crate::types::AiAgentType, crate::types::AiAgentConfigurationData>>,
    pub(crate) origin: ::std::option::Option<crate::types::Origin>,
}
impl SessionDataBuilder {
    /// <p>The Amazon Resource Name (ARN) of the session.</p>
    /// This field is required.
    pub fn session_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the session.</p>
    pub fn set_session_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the session.</p>
    pub fn get_session_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_arn
    }
    /// <p>The identifier of the session.</p>
    /// This field is required.
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the session.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The identifier of the session.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>The name of the session.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the session.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the session.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the session.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the session.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the session.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The configuration information for the session integration.</p>
    pub fn integration_configuration(mut self, input: crate::types::SessionIntegrationConfiguration) -> Self {
        self.integration_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration information for the session integration.</p>
    pub fn set_integration_configuration(mut self, input: ::std::option::Option<crate::types::SessionIntegrationConfiguration>) -> Self {
        self.integration_configuration = input;
        self
    }
    /// <p>The configuration information for the session integration.</p>
    pub fn get_integration_configuration(&self) -> &::std::option::Option<crate::types::SessionIntegrationConfiguration> {
        &self.integration_configuration
    }
    /// <p>An object that can be used to specify Tag conditions.</p>
    pub fn tag_filter(mut self, input: crate::types::TagFilter) -> Self {
        self.tag_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that can be used to specify Tag conditions.</p>
    pub fn set_tag_filter(mut self, input: ::std::option::Option<crate::types::TagFilter>) -> Self {
        self.tag_filter = input;
        self
    }
    /// <p>An object that can be used to specify Tag conditions.</p>
    pub fn get_tag_filter(&self) -> &::std::option::Option<crate::types::TagFilter> {
        &self.tag_filter
    }
    /// Adds a key-value pair to `ai_agent_configuration`.
    ///
    /// To override the contents of this collection use [`set_ai_agent_configuration`](Self::set_ai_agent_configuration).
    ///
    /// <p>The configuration of the AI Agents (mapped by AI Agent Type to AI Agent version) that should be used by Amazon Q in Connect for this Session.</p>
    pub fn ai_agent_configuration(mut self, k: crate::types::AiAgentType, v: crate::types::AiAgentConfigurationData) -> Self {
        let mut hash_map = self.ai_agent_configuration.unwrap_or_default();
        hash_map.insert(k, v);
        self.ai_agent_configuration = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The configuration of the AI Agents (mapped by AI Agent Type to AI Agent version) that should be used by Amazon Q in Connect for this Session.</p>
    pub fn set_ai_agent_configuration(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::AiAgentType, crate::types::AiAgentConfigurationData>>,
    ) -> Self {
        self.ai_agent_configuration = input;
        self
    }
    /// <p>The configuration of the AI Agents (mapped by AI Agent Type to AI Agent version) that should be used by Amazon Q in Connect for this Session.</p>
    pub fn get_ai_agent_configuration(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<crate::types::AiAgentType, crate::types::AiAgentConfigurationData>> {
        &self.ai_agent_configuration
    }
    /// <p>The origin of the Session to be listed. <code>SYSTEM</code> for a default Session created by Amazon Q in Connect or <code>CUSTOMER</code> for a Session created by calling <a href="https://docs.aws.amazon.com/connect/latest/APIReference/API_amazon-q-connect_CreateSession.html">CreateSession</a> API.</p>
    pub fn origin(mut self, input: crate::types::Origin) -> Self {
        self.origin = ::std::option::Option::Some(input);
        self
    }
    /// <p>The origin of the Session to be listed. <code>SYSTEM</code> for a default Session created by Amazon Q in Connect or <code>CUSTOMER</code> for a Session created by calling <a href="https://docs.aws.amazon.com/connect/latest/APIReference/API_amazon-q-connect_CreateSession.html">CreateSession</a> API.</p>
    pub fn set_origin(mut self, input: ::std::option::Option<crate::types::Origin>) -> Self {
        self.origin = input;
        self
    }
    /// <p>The origin of the Session to be listed. <code>SYSTEM</code> for a default Session created by Amazon Q in Connect or <code>CUSTOMER</code> for a Session created by calling <a href="https://docs.aws.amazon.com/connect/latest/APIReference/API_amazon-q-connect_CreateSession.html">CreateSession</a> API.</p>
    pub fn get_origin(&self) -> &::std::option::Option<crate::types::Origin> {
        &self.origin
    }
    /// Consumes the builder and constructs a [`SessionData`](crate::types::SessionData).
    /// This method will fail if any of the following fields are not set:
    /// - [`session_arn`](crate::types::builders::SessionDataBuilder::session_arn)
    /// - [`session_id`](crate::types::builders::SessionDataBuilder::session_id)
    /// - [`name`](crate::types::builders::SessionDataBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::SessionData, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SessionData {
            session_arn: self.session_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "session_arn",
                    "session_arn was not specified but it is required when building SessionData",
                )
            })?,
            session_id: self.session_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "session_id",
                    "session_id was not specified but it is required when building SessionData",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building SessionData",
                )
            })?,
            description: self.description,
            tags: self.tags,
            integration_configuration: self.integration_configuration,
            tag_filter: self.tag_filter,
            ai_agent_configuration: self.ai_agent_configuration,
            origin: self.origin,
        })
    }
}
