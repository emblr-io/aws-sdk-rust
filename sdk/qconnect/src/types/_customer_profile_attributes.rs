// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The customer profile attributes that are used with the message template.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CustomerProfileAttributes {
    /// <p>The unique identifier of a customer profile.</p>
    pub profile_id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of a customer profile.</p>
    pub profile_arn: ::std::option::Option<::std::string::String>,
    /// <p>The customer's first name.</p>
    pub first_name: ::std::option::Option<::std::string::String>,
    /// <p>The customer's middle name.</p>
    pub middle_name: ::std::option::Option<::std::string::String>,
    /// <p>The customer's last name.</p>
    pub last_name: ::std::option::Option<::std::string::String>,
    /// <p>A unique account number that you have given to the customer.</p>
    pub account_number: ::std::option::Option<::std::string::String>,
    /// <p>The customer's email address, which has not been specified as a personal or business address.</p>
    pub email_address: ::std::option::Option<::std::string::String>,
    /// <p>The customer's phone number, which has not been specified as a mobile, home, or business number.</p>
    pub phone_number: ::std::option::Option<::std::string::String>,
    /// <p>Any additional information relevant to the customer's profile.</p>
    pub additional_information: ::std::option::Option<::std::string::String>,
    /// <p>The customer's party type.</p>
    pub party_type: ::std::option::Option<::std::string::String>,
    /// <p>The name of the customer's business.</p>
    pub business_name: ::std::option::Option<::std::string::String>,
    /// <p>The customer's birth date.</p>
    pub birth_date: ::std::option::Option<::std::string::String>,
    /// <p>The customer's gender.</p>
    pub gender: ::std::option::Option<::std::string::String>,
    /// <p>The customer's mobile phone number.</p>
    pub mobile_phone_number: ::std::option::Option<::std::string::String>,
    /// <p>The customer's mobile phone number.</p>
    pub home_phone_number: ::std::option::Option<::std::string::String>,
    /// <p>The customer's business phone number.</p>
    pub business_phone_number: ::std::option::Option<::std::string::String>,
    /// <p>The customer's business email address.</p>
    pub business_email_address: ::std::option::Option<::std::string::String>,
    /// <p>The first line of a customer address.</p>
    pub address1: ::std::option::Option<::std::string::String>,
    /// <p>The second line of a customer address.</p>
    pub address2: ::std::option::Option<::std::string::String>,
    /// <p>The third line of a customer address.</p>
    pub address3: ::std::option::Option<::std::string::String>,
    /// <p>The fourth line of a customer address.</p>
    pub address4: ::std::option::Option<::std::string::String>,
    /// <p>The city in which a customer lives.</p>
    pub city: ::std::option::Option<::std::string::String>,
    /// <p>The county in which a customer lives.</p>
    pub county: ::std::option::Option<::std::string::String>,
    /// <p>The country in which a customer lives.</p>
    pub country: ::std::option::Option<::std::string::String>,
    /// <p>The postal code of a customer address.</p>
    pub postal_code: ::std::option::Option<::std::string::String>,
    /// <p>The province in which a customer lives.</p>
    pub province: ::std::option::Option<::std::string::String>,
    /// <p>The state in which a customer lives.</p>
    pub state: ::std::option::Option<::std::string::String>,
    /// <p>The first line of a customer’s shipping address.</p>
    pub shipping_address1: ::std::option::Option<::std::string::String>,
    /// <p>The second line of a customer’s shipping address.</p>
    pub shipping_address2: ::std::option::Option<::std::string::String>,
    /// <p>The third line of a customer’s shipping address.</p>
    pub shipping_address3: ::std::option::Option<::std::string::String>,
    /// <p>The fourth line of a customer’s shipping address.</p>
    pub shipping_address4: ::std::option::Option<::std::string::String>,
    /// <p>The city of a customer’s shipping address.</p>
    pub shipping_city: ::std::option::Option<::std::string::String>,
    /// <p>The county of a customer’s shipping address.</p>
    pub shipping_county: ::std::option::Option<::std::string::String>,
    /// <p>The country of a customer’s shipping address.</p>
    pub shipping_country: ::std::option::Option<::std::string::String>,
    /// <p>The postal code of a customer’s shipping address.</p>
    pub shipping_postal_code: ::std::option::Option<::std::string::String>,
    /// <p>The province of a customer’s shipping address.</p>
    pub shipping_province: ::std::option::Option<::std::string::String>,
    /// <p>The state of a customer’s shipping address.</p>
    pub shipping_state: ::std::option::Option<::std::string::String>,
    /// <p>The first line of a customer’s mailing address.</p>
    pub mailing_address1: ::std::option::Option<::std::string::String>,
    /// <p>The second line of a customer’s mailing address.</p>
    pub mailing_address2: ::std::option::Option<::std::string::String>,
    /// <p>The third line of a customer’s mailing address.</p>
    pub mailing_address3: ::std::option::Option<::std::string::String>,
    /// <p>The fourth line of a customer’s mailing address.</p>
    pub mailing_address4: ::std::option::Option<::std::string::String>,
    /// <p>The city of a customer’s mailing address.</p>
    pub mailing_city: ::std::option::Option<::std::string::String>,
    /// <p>The county of a customer’s mailing address.</p>
    pub mailing_county: ::std::option::Option<::std::string::String>,
    /// <p>The country of a customer’s mailing address.</p>
    pub mailing_country: ::std::option::Option<::std::string::String>,
    /// <p>The postal code of a customer’s mailing address.</p>
    pub mailing_postal_code: ::std::option::Option<::std::string::String>,
    /// <p>The province of a customer’s mailing address.</p>
    pub mailing_province: ::std::option::Option<::std::string::String>,
    /// <p>The state of a customer’s mailing address.</p>
    pub mailing_state: ::std::option::Option<::std::string::String>,
    /// <p>The first line of a customer’s billing address.</p>
    pub billing_address1: ::std::option::Option<::std::string::String>,
    /// <p>The second line of a customer’s billing address.</p>
    pub billing_address2: ::std::option::Option<::std::string::String>,
    /// <p>The third line of a customer’s billing address.</p>
    pub billing_address3: ::std::option::Option<::std::string::String>,
    /// <p>The fourth line of a customer’s billing address.</p>
    pub billing_address4: ::std::option::Option<::std::string::String>,
    /// <p>The city of a customer’s billing address.</p>
    pub billing_city: ::std::option::Option<::std::string::String>,
    /// <p>The county of a customer’s billing address.</p>
    pub billing_county: ::std::option::Option<::std::string::String>,
    /// <p>The country of a customer’s billing address.</p>
    pub billing_country: ::std::option::Option<::std::string::String>,
    /// <p>The postal code of a customer’s billing address.</p>
    pub billing_postal_code: ::std::option::Option<::std::string::String>,
    /// <p>The province of a customer’s billing address.</p>
    pub billing_province: ::std::option::Option<::std::string::String>,
    /// <p>The state of a customer’s billing address.</p>
    pub billing_state: ::std::option::Option<::std::string::String>,
    /// <p>The custom attributes in customer profile attributes.</p>
    pub custom: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CustomerProfileAttributes {
    /// <p>The unique identifier of a customer profile.</p>
    pub fn profile_id(&self) -> ::std::option::Option<&str> {
        self.profile_id.as_deref()
    }
    /// <p>The ARN of a customer profile.</p>
    pub fn profile_arn(&self) -> ::std::option::Option<&str> {
        self.profile_arn.as_deref()
    }
    /// <p>The customer's first name.</p>
    pub fn first_name(&self) -> ::std::option::Option<&str> {
        self.first_name.as_deref()
    }
    /// <p>The customer's middle name.</p>
    pub fn middle_name(&self) -> ::std::option::Option<&str> {
        self.middle_name.as_deref()
    }
    /// <p>The customer's last name.</p>
    pub fn last_name(&self) -> ::std::option::Option<&str> {
        self.last_name.as_deref()
    }
    /// <p>A unique account number that you have given to the customer.</p>
    pub fn account_number(&self) -> ::std::option::Option<&str> {
        self.account_number.as_deref()
    }
    /// <p>The customer's email address, which has not been specified as a personal or business address.</p>
    pub fn email_address(&self) -> ::std::option::Option<&str> {
        self.email_address.as_deref()
    }
    /// <p>The customer's phone number, which has not been specified as a mobile, home, or business number.</p>
    pub fn phone_number(&self) -> ::std::option::Option<&str> {
        self.phone_number.as_deref()
    }
    /// <p>Any additional information relevant to the customer's profile.</p>
    pub fn additional_information(&self) -> ::std::option::Option<&str> {
        self.additional_information.as_deref()
    }
    /// <p>The customer's party type.</p>
    pub fn party_type(&self) -> ::std::option::Option<&str> {
        self.party_type.as_deref()
    }
    /// <p>The name of the customer's business.</p>
    pub fn business_name(&self) -> ::std::option::Option<&str> {
        self.business_name.as_deref()
    }
    /// <p>The customer's birth date.</p>
    pub fn birth_date(&self) -> ::std::option::Option<&str> {
        self.birth_date.as_deref()
    }
    /// <p>The customer's gender.</p>
    pub fn gender(&self) -> ::std::option::Option<&str> {
        self.gender.as_deref()
    }
    /// <p>The customer's mobile phone number.</p>
    pub fn mobile_phone_number(&self) -> ::std::option::Option<&str> {
        self.mobile_phone_number.as_deref()
    }
    /// <p>The customer's mobile phone number.</p>
    pub fn home_phone_number(&self) -> ::std::option::Option<&str> {
        self.home_phone_number.as_deref()
    }
    /// <p>The customer's business phone number.</p>
    pub fn business_phone_number(&self) -> ::std::option::Option<&str> {
        self.business_phone_number.as_deref()
    }
    /// <p>The customer's business email address.</p>
    pub fn business_email_address(&self) -> ::std::option::Option<&str> {
        self.business_email_address.as_deref()
    }
    /// <p>The first line of a customer address.</p>
    pub fn address1(&self) -> ::std::option::Option<&str> {
        self.address1.as_deref()
    }
    /// <p>The second line of a customer address.</p>
    pub fn address2(&self) -> ::std::option::Option<&str> {
        self.address2.as_deref()
    }
    /// <p>The third line of a customer address.</p>
    pub fn address3(&self) -> ::std::option::Option<&str> {
        self.address3.as_deref()
    }
    /// <p>The fourth line of a customer address.</p>
    pub fn address4(&self) -> ::std::option::Option<&str> {
        self.address4.as_deref()
    }
    /// <p>The city in which a customer lives.</p>
    pub fn city(&self) -> ::std::option::Option<&str> {
        self.city.as_deref()
    }
    /// <p>The county in which a customer lives.</p>
    pub fn county(&self) -> ::std::option::Option<&str> {
        self.county.as_deref()
    }
    /// <p>The country in which a customer lives.</p>
    pub fn country(&self) -> ::std::option::Option<&str> {
        self.country.as_deref()
    }
    /// <p>The postal code of a customer address.</p>
    pub fn postal_code(&self) -> ::std::option::Option<&str> {
        self.postal_code.as_deref()
    }
    /// <p>The province in which a customer lives.</p>
    pub fn province(&self) -> ::std::option::Option<&str> {
        self.province.as_deref()
    }
    /// <p>The state in which a customer lives.</p>
    pub fn state(&self) -> ::std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>The first line of a customer’s shipping address.</p>
    pub fn shipping_address1(&self) -> ::std::option::Option<&str> {
        self.shipping_address1.as_deref()
    }
    /// <p>The second line of a customer’s shipping address.</p>
    pub fn shipping_address2(&self) -> ::std::option::Option<&str> {
        self.shipping_address2.as_deref()
    }
    /// <p>The third line of a customer’s shipping address.</p>
    pub fn shipping_address3(&self) -> ::std::option::Option<&str> {
        self.shipping_address3.as_deref()
    }
    /// <p>The fourth line of a customer’s shipping address.</p>
    pub fn shipping_address4(&self) -> ::std::option::Option<&str> {
        self.shipping_address4.as_deref()
    }
    /// <p>The city of a customer’s shipping address.</p>
    pub fn shipping_city(&self) -> ::std::option::Option<&str> {
        self.shipping_city.as_deref()
    }
    /// <p>The county of a customer’s shipping address.</p>
    pub fn shipping_county(&self) -> ::std::option::Option<&str> {
        self.shipping_county.as_deref()
    }
    /// <p>The country of a customer’s shipping address.</p>
    pub fn shipping_country(&self) -> ::std::option::Option<&str> {
        self.shipping_country.as_deref()
    }
    /// <p>The postal code of a customer’s shipping address.</p>
    pub fn shipping_postal_code(&self) -> ::std::option::Option<&str> {
        self.shipping_postal_code.as_deref()
    }
    /// <p>The province of a customer’s shipping address.</p>
    pub fn shipping_province(&self) -> ::std::option::Option<&str> {
        self.shipping_province.as_deref()
    }
    /// <p>The state of a customer’s shipping address.</p>
    pub fn shipping_state(&self) -> ::std::option::Option<&str> {
        self.shipping_state.as_deref()
    }
    /// <p>The first line of a customer’s mailing address.</p>
    pub fn mailing_address1(&self) -> ::std::option::Option<&str> {
        self.mailing_address1.as_deref()
    }
    /// <p>The second line of a customer’s mailing address.</p>
    pub fn mailing_address2(&self) -> ::std::option::Option<&str> {
        self.mailing_address2.as_deref()
    }
    /// <p>The third line of a customer’s mailing address.</p>
    pub fn mailing_address3(&self) -> ::std::option::Option<&str> {
        self.mailing_address3.as_deref()
    }
    /// <p>The fourth line of a customer’s mailing address.</p>
    pub fn mailing_address4(&self) -> ::std::option::Option<&str> {
        self.mailing_address4.as_deref()
    }
    /// <p>The city of a customer’s mailing address.</p>
    pub fn mailing_city(&self) -> ::std::option::Option<&str> {
        self.mailing_city.as_deref()
    }
    /// <p>The county of a customer’s mailing address.</p>
    pub fn mailing_county(&self) -> ::std::option::Option<&str> {
        self.mailing_county.as_deref()
    }
    /// <p>The country of a customer’s mailing address.</p>
    pub fn mailing_country(&self) -> ::std::option::Option<&str> {
        self.mailing_country.as_deref()
    }
    /// <p>The postal code of a customer’s mailing address.</p>
    pub fn mailing_postal_code(&self) -> ::std::option::Option<&str> {
        self.mailing_postal_code.as_deref()
    }
    /// <p>The province of a customer’s mailing address.</p>
    pub fn mailing_province(&self) -> ::std::option::Option<&str> {
        self.mailing_province.as_deref()
    }
    /// <p>The state of a customer’s mailing address.</p>
    pub fn mailing_state(&self) -> ::std::option::Option<&str> {
        self.mailing_state.as_deref()
    }
    /// <p>The first line of a customer’s billing address.</p>
    pub fn billing_address1(&self) -> ::std::option::Option<&str> {
        self.billing_address1.as_deref()
    }
    /// <p>The second line of a customer’s billing address.</p>
    pub fn billing_address2(&self) -> ::std::option::Option<&str> {
        self.billing_address2.as_deref()
    }
    /// <p>The third line of a customer’s billing address.</p>
    pub fn billing_address3(&self) -> ::std::option::Option<&str> {
        self.billing_address3.as_deref()
    }
    /// <p>The fourth line of a customer’s billing address.</p>
    pub fn billing_address4(&self) -> ::std::option::Option<&str> {
        self.billing_address4.as_deref()
    }
    /// <p>The city of a customer’s billing address.</p>
    pub fn billing_city(&self) -> ::std::option::Option<&str> {
        self.billing_city.as_deref()
    }
    /// <p>The county of a customer’s billing address.</p>
    pub fn billing_county(&self) -> ::std::option::Option<&str> {
        self.billing_county.as_deref()
    }
    /// <p>The country of a customer’s billing address.</p>
    pub fn billing_country(&self) -> ::std::option::Option<&str> {
        self.billing_country.as_deref()
    }
    /// <p>The postal code of a customer’s billing address.</p>
    pub fn billing_postal_code(&self) -> ::std::option::Option<&str> {
        self.billing_postal_code.as_deref()
    }
    /// <p>The province of a customer’s billing address.</p>
    pub fn billing_province(&self) -> ::std::option::Option<&str> {
        self.billing_province.as_deref()
    }
    /// <p>The state of a customer’s billing address.</p>
    pub fn billing_state(&self) -> ::std::option::Option<&str> {
        self.billing_state.as_deref()
    }
    /// <p>The custom attributes in customer profile attributes.</p>
    pub fn custom(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.custom.as_ref()
    }
}
impl ::std::fmt::Debug for CustomerProfileAttributes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CustomerProfileAttributes");
        formatter.field("profile_id", &"*** Sensitive Data Redacted ***");
        formatter.field("profile_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("first_name", &"*** Sensitive Data Redacted ***");
        formatter.field("middle_name", &"*** Sensitive Data Redacted ***");
        formatter.field("last_name", &"*** Sensitive Data Redacted ***");
        formatter.field("account_number", &"*** Sensitive Data Redacted ***");
        formatter.field("email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("additional_information", &"*** Sensitive Data Redacted ***");
        formatter.field("party_type", &"*** Sensitive Data Redacted ***");
        formatter.field("business_name", &"*** Sensitive Data Redacted ***");
        formatter.field("birth_date", &"*** Sensitive Data Redacted ***");
        formatter.field("gender", &"*** Sensitive Data Redacted ***");
        formatter.field("mobile_phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("home_phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("business_phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("business_email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("address1", &"*** Sensitive Data Redacted ***");
        formatter.field("address2", &"*** Sensitive Data Redacted ***");
        formatter.field("address3", &"*** Sensitive Data Redacted ***");
        formatter.field("address4", &"*** Sensitive Data Redacted ***");
        formatter.field("city", &"*** Sensitive Data Redacted ***");
        formatter.field("county", &"*** Sensitive Data Redacted ***");
        formatter.field("country", &"*** Sensitive Data Redacted ***");
        formatter.field("postal_code", &"*** Sensitive Data Redacted ***");
        formatter.field("province", &"*** Sensitive Data Redacted ***");
        formatter.field("state", &"*** Sensitive Data Redacted ***");
        formatter.field("shipping_address1", &"*** Sensitive Data Redacted ***");
        formatter.field("shipping_address2", &"*** Sensitive Data Redacted ***");
        formatter.field("shipping_address3", &"*** Sensitive Data Redacted ***");
        formatter.field("shipping_address4", &"*** Sensitive Data Redacted ***");
        formatter.field("shipping_city", &"*** Sensitive Data Redacted ***");
        formatter.field("shipping_county", &"*** Sensitive Data Redacted ***");
        formatter.field("shipping_country", &"*** Sensitive Data Redacted ***");
        formatter.field("shipping_postal_code", &"*** Sensitive Data Redacted ***");
        formatter.field("shipping_province", &"*** Sensitive Data Redacted ***");
        formatter.field("shipping_state", &"*** Sensitive Data Redacted ***");
        formatter.field("mailing_address1", &"*** Sensitive Data Redacted ***");
        formatter.field("mailing_address2", &"*** Sensitive Data Redacted ***");
        formatter.field("mailing_address3", &"*** Sensitive Data Redacted ***");
        formatter.field("mailing_address4", &"*** Sensitive Data Redacted ***");
        formatter.field("mailing_city", &"*** Sensitive Data Redacted ***");
        formatter.field("mailing_county", &"*** Sensitive Data Redacted ***");
        formatter.field("mailing_country", &"*** Sensitive Data Redacted ***");
        formatter.field("mailing_postal_code", &"*** Sensitive Data Redacted ***");
        formatter.field("mailing_province", &"*** Sensitive Data Redacted ***");
        formatter.field("mailing_state", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_address1", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_address2", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_address3", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_address4", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_city", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_county", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_country", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_postal_code", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_province", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_state", &"*** Sensitive Data Redacted ***");
        formatter.field("custom", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CustomerProfileAttributes {
    /// Creates a new builder-style object to manufacture [`CustomerProfileAttributes`](crate::types::CustomerProfileAttributes).
    pub fn builder() -> crate::types::builders::CustomerProfileAttributesBuilder {
        crate::types::builders::CustomerProfileAttributesBuilder::default()
    }
}

/// A builder for [`CustomerProfileAttributes`](crate::types::CustomerProfileAttributes).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CustomerProfileAttributesBuilder {
    pub(crate) profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) profile_arn: ::std::option::Option<::std::string::String>,
    pub(crate) first_name: ::std::option::Option<::std::string::String>,
    pub(crate) middle_name: ::std::option::Option<::std::string::String>,
    pub(crate) last_name: ::std::option::Option<::std::string::String>,
    pub(crate) account_number: ::std::option::Option<::std::string::String>,
    pub(crate) email_address: ::std::option::Option<::std::string::String>,
    pub(crate) phone_number: ::std::option::Option<::std::string::String>,
    pub(crate) additional_information: ::std::option::Option<::std::string::String>,
    pub(crate) party_type: ::std::option::Option<::std::string::String>,
    pub(crate) business_name: ::std::option::Option<::std::string::String>,
    pub(crate) birth_date: ::std::option::Option<::std::string::String>,
    pub(crate) gender: ::std::option::Option<::std::string::String>,
    pub(crate) mobile_phone_number: ::std::option::Option<::std::string::String>,
    pub(crate) home_phone_number: ::std::option::Option<::std::string::String>,
    pub(crate) business_phone_number: ::std::option::Option<::std::string::String>,
    pub(crate) business_email_address: ::std::option::Option<::std::string::String>,
    pub(crate) address1: ::std::option::Option<::std::string::String>,
    pub(crate) address2: ::std::option::Option<::std::string::String>,
    pub(crate) address3: ::std::option::Option<::std::string::String>,
    pub(crate) address4: ::std::option::Option<::std::string::String>,
    pub(crate) city: ::std::option::Option<::std::string::String>,
    pub(crate) county: ::std::option::Option<::std::string::String>,
    pub(crate) country: ::std::option::Option<::std::string::String>,
    pub(crate) postal_code: ::std::option::Option<::std::string::String>,
    pub(crate) province: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<::std::string::String>,
    pub(crate) shipping_address1: ::std::option::Option<::std::string::String>,
    pub(crate) shipping_address2: ::std::option::Option<::std::string::String>,
    pub(crate) shipping_address3: ::std::option::Option<::std::string::String>,
    pub(crate) shipping_address4: ::std::option::Option<::std::string::String>,
    pub(crate) shipping_city: ::std::option::Option<::std::string::String>,
    pub(crate) shipping_county: ::std::option::Option<::std::string::String>,
    pub(crate) shipping_country: ::std::option::Option<::std::string::String>,
    pub(crate) shipping_postal_code: ::std::option::Option<::std::string::String>,
    pub(crate) shipping_province: ::std::option::Option<::std::string::String>,
    pub(crate) shipping_state: ::std::option::Option<::std::string::String>,
    pub(crate) mailing_address1: ::std::option::Option<::std::string::String>,
    pub(crate) mailing_address2: ::std::option::Option<::std::string::String>,
    pub(crate) mailing_address3: ::std::option::Option<::std::string::String>,
    pub(crate) mailing_address4: ::std::option::Option<::std::string::String>,
    pub(crate) mailing_city: ::std::option::Option<::std::string::String>,
    pub(crate) mailing_county: ::std::option::Option<::std::string::String>,
    pub(crate) mailing_country: ::std::option::Option<::std::string::String>,
    pub(crate) mailing_postal_code: ::std::option::Option<::std::string::String>,
    pub(crate) mailing_province: ::std::option::Option<::std::string::String>,
    pub(crate) mailing_state: ::std::option::Option<::std::string::String>,
    pub(crate) billing_address1: ::std::option::Option<::std::string::String>,
    pub(crate) billing_address2: ::std::option::Option<::std::string::String>,
    pub(crate) billing_address3: ::std::option::Option<::std::string::String>,
    pub(crate) billing_address4: ::std::option::Option<::std::string::String>,
    pub(crate) billing_city: ::std::option::Option<::std::string::String>,
    pub(crate) billing_county: ::std::option::Option<::std::string::String>,
    pub(crate) billing_country: ::std::option::Option<::std::string::String>,
    pub(crate) billing_postal_code: ::std::option::Option<::std::string::String>,
    pub(crate) billing_province: ::std::option::Option<::std::string::String>,
    pub(crate) billing_state: ::std::option::Option<::std::string::String>,
    pub(crate) custom: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CustomerProfileAttributesBuilder {
    /// <p>The unique identifier of a customer profile.</p>
    pub fn profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of a customer profile.</p>
    pub fn set_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_id = input;
        self
    }
    /// <p>The unique identifier of a customer profile.</p>
    pub fn get_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_id
    }
    /// <p>The ARN of a customer profile.</p>
    pub fn profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of a customer profile.</p>
    pub fn set_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_arn = input;
        self
    }
    /// <p>The ARN of a customer profile.</p>
    pub fn get_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_arn
    }
    /// <p>The customer's first name.</p>
    pub fn first_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.first_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The customer's first name.</p>
    pub fn set_first_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.first_name = input;
        self
    }
    /// <p>The customer's first name.</p>
    pub fn get_first_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.first_name
    }
    /// <p>The customer's middle name.</p>
    pub fn middle_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.middle_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The customer's middle name.</p>
    pub fn set_middle_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.middle_name = input;
        self
    }
    /// <p>The customer's middle name.</p>
    pub fn get_middle_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.middle_name
    }
    /// <p>The customer's last name.</p>
    pub fn last_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The customer's last name.</p>
    pub fn set_last_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_name = input;
        self
    }
    /// <p>The customer's last name.</p>
    pub fn get_last_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_name
    }
    /// <p>A unique account number that you have given to the customer.</p>
    pub fn account_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique account number that you have given to the customer.</p>
    pub fn set_account_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_number = input;
        self
    }
    /// <p>A unique account number that you have given to the customer.</p>
    pub fn get_account_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_number
    }
    /// <p>The customer's email address, which has not been specified as a personal or business address.</p>
    pub fn email_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The customer's email address, which has not been specified as a personal or business address.</p>
    pub fn set_email_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email_address = input;
        self
    }
    /// <p>The customer's email address, which has not been specified as a personal or business address.</p>
    pub fn get_email_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.email_address
    }
    /// <p>The customer's phone number, which has not been specified as a mobile, home, or business number.</p>
    pub fn phone_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.phone_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The customer's phone number, which has not been specified as a mobile, home, or business number.</p>
    pub fn set_phone_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.phone_number = input;
        self
    }
    /// <p>The customer's phone number, which has not been specified as a mobile, home, or business number.</p>
    pub fn get_phone_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.phone_number
    }
    /// <p>Any additional information relevant to the customer's profile.</p>
    pub fn additional_information(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.additional_information = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Any additional information relevant to the customer's profile.</p>
    pub fn set_additional_information(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.additional_information = input;
        self
    }
    /// <p>Any additional information relevant to the customer's profile.</p>
    pub fn get_additional_information(&self) -> &::std::option::Option<::std::string::String> {
        &self.additional_information
    }
    /// <p>The customer's party type.</p>
    pub fn party_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.party_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The customer's party type.</p>
    pub fn set_party_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.party_type = input;
        self
    }
    /// <p>The customer's party type.</p>
    pub fn get_party_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.party_type
    }
    /// <p>The name of the customer's business.</p>
    pub fn business_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.business_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the customer's business.</p>
    pub fn set_business_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.business_name = input;
        self
    }
    /// <p>The name of the customer's business.</p>
    pub fn get_business_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.business_name
    }
    /// <p>The customer's birth date.</p>
    pub fn birth_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.birth_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The customer's birth date.</p>
    pub fn set_birth_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.birth_date = input;
        self
    }
    /// <p>The customer's birth date.</p>
    pub fn get_birth_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.birth_date
    }
    /// <p>The customer's gender.</p>
    pub fn gender(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.gender = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The customer's gender.</p>
    pub fn set_gender(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.gender = input;
        self
    }
    /// <p>The customer's gender.</p>
    pub fn get_gender(&self) -> &::std::option::Option<::std::string::String> {
        &self.gender
    }
    /// <p>The customer's mobile phone number.</p>
    pub fn mobile_phone_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mobile_phone_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The customer's mobile phone number.</p>
    pub fn set_mobile_phone_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mobile_phone_number = input;
        self
    }
    /// <p>The customer's mobile phone number.</p>
    pub fn get_mobile_phone_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.mobile_phone_number
    }
    /// <p>The customer's mobile phone number.</p>
    pub fn home_phone_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.home_phone_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The customer's mobile phone number.</p>
    pub fn set_home_phone_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.home_phone_number = input;
        self
    }
    /// <p>The customer's mobile phone number.</p>
    pub fn get_home_phone_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.home_phone_number
    }
    /// <p>The customer's business phone number.</p>
    pub fn business_phone_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.business_phone_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The customer's business phone number.</p>
    pub fn set_business_phone_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.business_phone_number = input;
        self
    }
    /// <p>The customer's business phone number.</p>
    pub fn get_business_phone_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.business_phone_number
    }
    /// <p>The customer's business email address.</p>
    pub fn business_email_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.business_email_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The customer's business email address.</p>
    pub fn set_business_email_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.business_email_address = input;
        self
    }
    /// <p>The customer's business email address.</p>
    pub fn get_business_email_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.business_email_address
    }
    /// <p>The first line of a customer address.</p>
    pub fn address1(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address1 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The first line of a customer address.</p>
    pub fn set_address1(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address1 = input;
        self
    }
    /// <p>The first line of a customer address.</p>
    pub fn get_address1(&self) -> &::std::option::Option<::std::string::String> {
        &self.address1
    }
    /// <p>The second line of a customer address.</p>
    pub fn address2(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address2 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The second line of a customer address.</p>
    pub fn set_address2(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address2 = input;
        self
    }
    /// <p>The second line of a customer address.</p>
    pub fn get_address2(&self) -> &::std::option::Option<::std::string::String> {
        &self.address2
    }
    /// <p>The third line of a customer address.</p>
    pub fn address3(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address3 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The third line of a customer address.</p>
    pub fn set_address3(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address3 = input;
        self
    }
    /// <p>The third line of a customer address.</p>
    pub fn get_address3(&self) -> &::std::option::Option<::std::string::String> {
        &self.address3
    }
    /// <p>The fourth line of a customer address.</p>
    pub fn address4(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address4 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The fourth line of a customer address.</p>
    pub fn set_address4(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address4 = input;
        self
    }
    /// <p>The fourth line of a customer address.</p>
    pub fn get_address4(&self) -> &::std::option::Option<::std::string::String> {
        &self.address4
    }
    /// <p>The city in which a customer lives.</p>
    pub fn city(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.city = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The city in which a customer lives.</p>
    pub fn set_city(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.city = input;
        self
    }
    /// <p>The city in which a customer lives.</p>
    pub fn get_city(&self) -> &::std::option::Option<::std::string::String> {
        &self.city
    }
    /// <p>The county in which a customer lives.</p>
    pub fn county(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.county = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The county in which a customer lives.</p>
    pub fn set_county(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.county = input;
        self
    }
    /// <p>The county in which a customer lives.</p>
    pub fn get_county(&self) -> &::std::option::Option<::std::string::String> {
        &self.county
    }
    /// <p>The country in which a customer lives.</p>
    pub fn country(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.country = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The country in which a customer lives.</p>
    pub fn set_country(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.country = input;
        self
    }
    /// <p>The country in which a customer lives.</p>
    pub fn get_country(&self) -> &::std::option::Option<::std::string::String> {
        &self.country
    }
    /// <p>The postal code of a customer address.</p>
    pub fn postal_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.postal_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The postal code of a customer address.</p>
    pub fn set_postal_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.postal_code = input;
        self
    }
    /// <p>The postal code of a customer address.</p>
    pub fn get_postal_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.postal_code
    }
    /// <p>The province in which a customer lives.</p>
    pub fn province(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.province = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The province in which a customer lives.</p>
    pub fn set_province(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.province = input;
        self
    }
    /// <p>The province in which a customer lives.</p>
    pub fn get_province(&self) -> &::std::option::Option<::std::string::String> {
        &self.province
    }
    /// <p>The state in which a customer lives.</p>
    pub fn state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The state in which a customer lives.</p>
    pub fn set_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state in which a customer lives.</p>
    pub fn get_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.state
    }
    /// <p>The first line of a customer’s shipping address.</p>
    pub fn shipping_address1(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.shipping_address1 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The first line of a customer’s shipping address.</p>
    pub fn set_shipping_address1(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.shipping_address1 = input;
        self
    }
    /// <p>The first line of a customer’s shipping address.</p>
    pub fn get_shipping_address1(&self) -> &::std::option::Option<::std::string::String> {
        &self.shipping_address1
    }
    /// <p>The second line of a customer’s shipping address.</p>
    pub fn shipping_address2(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.shipping_address2 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The second line of a customer’s shipping address.</p>
    pub fn set_shipping_address2(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.shipping_address2 = input;
        self
    }
    /// <p>The second line of a customer’s shipping address.</p>
    pub fn get_shipping_address2(&self) -> &::std::option::Option<::std::string::String> {
        &self.shipping_address2
    }
    /// <p>The third line of a customer’s shipping address.</p>
    pub fn shipping_address3(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.shipping_address3 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The third line of a customer’s shipping address.</p>
    pub fn set_shipping_address3(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.shipping_address3 = input;
        self
    }
    /// <p>The third line of a customer’s shipping address.</p>
    pub fn get_shipping_address3(&self) -> &::std::option::Option<::std::string::String> {
        &self.shipping_address3
    }
    /// <p>The fourth line of a customer’s shipping address.</p>
    pub fn shipping_address4(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.shipping_address4 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The fourth line of a customer’s shipping address.</p>
    pub fn set_shipping_address4(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.shipping_address4 = input;
        self
    }
    /// <p>The fourth line of a customer’s shipping address.</p>
    pub fn get_shipping_address4(&self) -> &::std::option::Option<::std::string::String> {
        &self.shipping_address4
    }
    /// <p>The city of a customer’s shipping address.</p>
    pub fn shipping_city(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.shipping_city = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The city of a customer’s shipping address.</p>
    pub fn set_shipping_city(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.shipping_city = input;
        self
    }
    /// <p>The city of a customer’s shipping address.</p>
    pub fn get_shipping_city(&self) -> &::std::option::Option<::std::string::String> {
        &self.shipping_city
    }
    /// <p>The county of a customer’s shipping address.</p>
    pub fn shipping_county(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.shipping_county = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The county of a customer’s shipping address.</p>
    pub fn set_shipping_county(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.shipping_county = input;
        self
    }
    /// <p>The county of a customer’s shipping address.</p>
    pub fn get_shipping_county(&self) -> &::std::option::Option<::std::string::String> {
        &self.shipping_county
    }
    /// <p>The country of a customer’s shipping address.</p>
    pub fn shipping_country(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.shipping_country = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The country of a customer’s shipping address.</p>
    pub fn set_shipping_country(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.shipping_country = input;
        self
    }
    /// <p>The country of a customer’s shipping address.</p>
    pub fn get_shipping_country(&self) -> &::std::option::Option<::std::string::String> {
        &self.shipping_country
    }
    /// <p>The postal code of a customer’s shipping address.</p>
    pub fn shipping_postal_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.shipping_postal_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The postal code of a customer’s shipping address.</p>
    pub fn set_shipping_postal_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.shipping_postal_code = input;
        self
    }
    /// <p>The postal code of a customer’s shipping address.</p>
    pub fn get_shipping_postal_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.shipping_postal_code
    }
    /// <p>The province of a customer’s shipping address.</p>
    pub fn shipping_province(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.shipping_province = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The province of a customer’s shipping address.</p>
    pub fn set_shipping_province(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.shipping_province = input;
        self
    }
    /// <p>The province of a customer’s shipping address.</p>
    pub fn get_shipping_province(&self) -> &::std::option::Option<::std::string::String> {
        &self.shipping_province
    }
    /// <p>The state of a customer’s shipping address.</p>
    pub fn shipping_state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.shipping_state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The state of a customer’s shipping address.</p>
    pub fn set_shipping_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.shipping_state = input;
        self
    }
    /// <p>The state of a customer’s shipping address.</p>
    pub fn get_shipping_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.shipping_state
    }
    /// <p>The first line of a customer’s mailing address.</p>
    pub fn mailing_address1(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mailing_address1 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The first line of a customer’s mailing address.</p>
    pub fn set_mailing_address1(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mailing_address1 = input;
        self
    }
    /// <p>The first line of a customer’s mailing address.</p>
    pub fn get_mailing_address1(&self) -> &::std::option::Option<::std::string::String> {
        &self.mailing_address1
    }
    /// <p>The second line of a customer’s mailing address.</p>
    pub fn mailing_address2(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mailing_address2 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The second line of a customer’s mailing address.</p>
    pub fn set_mailing_address2(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mailing_address2 = input;
        self
    }
    /// <p>The second line of a customer’s mailing address.</p>
    pub fn get_mailing_address2(&self) -> &::std::option::Option<::std::string::String> {
        &self.mailing_address2
    }
    /// <p>The third line of a customer’s mailing address.</p>
    pub fn mailing_address3(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mailing_address3 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The third line of a customer’s mailing address.</p>
    pub fn set_mailing_address3(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mailing_address3 = input;
        self
    }
    /// <p>The third line of a customer’s mailing address.</p>
    pub fn get_mailing_address3(&self) -> &::std::option::Option<::std::string::String> {
        &self.mailing_address3
    }
    /// <p>The fourth line of a customer’s mailing address.</p>
    pub fn mailing_address4(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mailing_address4 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The fourth line of a customer’s mailing address.</p>
    pub fn set_mailing_address4(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mailing_address4 = input;
        self
    }
    /// <p>The fourth line of a customer’s mailing address.</p>
    pub fn get_mailing_address4(&self) -> &::std::option::Option<::std::string::String> {
        &self.mailing_address4
    }
    /// <p>The city of a customer’s mailing address.</p>
    pub fn mailing_city(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mailing_city = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The city of a customer’s mailing address.</p>
    pub fn set_mailing_city(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mailing_city = input;
        self
    }
    /// <p>The city of a customer’s mailing address.</p>
    pub fn get_mailing_city(&self) -> &::std::option::Option<::std::string::String> {
        &self.mailing_city
    }
    /// <p>The county of a customer’s mailing address.</p>
    pub fn mailing_county(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mailing_county = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The county of a customer’s mailing address.</p>
    pub fn set_mailing_county(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mailing_county = input;
        self
    }
    /// <p>The county of a customer’s mailing address.</p>
    pub fn get_mailing_county(&self) -> &::std::option::Option<::std::string::String> {
        &self.mailing_county
    }
    /// <p>The country of a customer’s mailing address.</p>
    pub fn mailing_country(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mailing_country = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The country of a customer’s mailing address.</p>
    pub fn set_mailing_country(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mailing_country = input;
        self
    }
    /// <p>The country of a customer’s mailing address.</p>
    pub fn get_mailing_country(&self) -> &::std::option::Option<::std::string::String> {
        &self.mailing_country
    }
    /// <p>The postal code of a customer’s mailing address.</p>
    pub fn mailing_postal_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mailing_postal_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The postal code of a customer’s mailing address.</p>
    pub fn set_mailing_postal_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mailing_postal_code = input;
        self
    }
    /// <p>The postal code of a customer’s mailing address.</p>
    pub fn get_mailing_postal_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.mailing_postal_code
    }
    /// <p>The province of a customer’s mailing address.</p>
    pub fn mailing_province(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mailing_province = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The province of a customer’s mailing address.</p>
    pub fn set_mailing_province(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mailing_province = input;
        self
    }
    /// <p>The province of a customer’s mailing address.</p>
    pub fn get_mailing_province(&self) -> &::std::option::Option<::std::string::String> {
        &self.mailing_province
    }
    /// <p>The state of a customer’s mailing address.</p>
    pub fn mailing_state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mailing_state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The state of a customer’s mailing address.</p>
    pub fn set_mailing_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mailing_state = input;
        self
    }
    /// <p>The state of a customer’s mailing address.</p>
    pub fn get_mailing_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.mailing_state
    }
    /// <p>The first line of a customer’s billing address.</p>
    pub fn billing_address1(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.billing_address1 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The first line of a customer’s billing address.</p>
    pub fn set_billing_address1(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.billing_address1 = input;
        self
    }
    /// <p>The first line of a customer’s billing address.</p>
    pub fn get_billing_address1(&self) -> &::std::option::Option<::std::string::String> {
        &self.billing_address1
    }
    /// <p>The second line of a customer’s billing address.</p>
    pub fn billing_address2(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.billing_address2 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The second line of a customer’s billing address.</p>
    pub fn set_billing_address2(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.billing_address2 = input;
        self
    }
    /// <p>The second line of a customer’s billing address.</p>
    pub fn get_billing_address2(&self) -> &::std::option::Option<::std::string::String> {
        &self.billing_address2
    }
    /// <p>The third line of a customer’s billing address.</p>
    pub fn billing_address3(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.billing_address3 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The third line of a customer’s billing address.</p>
    pub fn set_billing_address3(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.billing_address3 = input;
        self
    }
    /// <p>The third line of a customer’s billing address.</p>
    pub fn get_billing_address3(&self) -> &::std::option::Option<::std::string::String> {
        &self.billing_address3
    }
    /// <p>The fourth line of a customer’s billing address.</p>
    pub fn billing_address4(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.billing_address4 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The fourth line of a customer’s billing address.</p>
    pub fn set_billing_address4(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.billing_address4 = input;
        self
    }
    /// <p>The fourth line of a customer’s billing address.</p>
    pub fn get_billing_address4(&self) -> &::std::option::Option<::std::string::String> {
        &self.billing_address4
    }
    /// <p>The city of a customer’s billing address.</p>
    pub fn billing_city(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.billing_city = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The city of a customer’s billing address.</p>
    pub fn set_billing_city(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.billing_city = input;
        self
    }
    /// <p>The city of a customer’s billing address.</p>
    pub fn get_billing_city(&self) -> &::std::option::Option<::std::string::String> {
        &self.billing_city
    }
    /// <p>The county of a customer’s billing address.</p>
    pub fn billing_county(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.billing_county = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The county of a customer’s billing address.</p>
    pub fn set_billing_county(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.billing_county = input;
        self
    }
    /// <p>The county of a customer’s billing address.</p>
    pub fn get_billing_county(&self) -> &::std::option::Option<::std::string::String> {
        &self.billing_county
    }
    /// <p>The country of a customer’s billing address.</p>
    pub fn billing_country(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.billing_country = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The country of a customer’s billing address.</p>
    pub fn set_billing_country(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.billing_country = input;
        self
    }
    /// <p>The country of a customer’s billing address.</p>
    pub fn get_billing_country(&self) -> &::std::option::Option<::std::string::String> {
        &self.billing_country
    }
    /// <p>The postal code of a customer’s billing address.</p>
    pub fn billing_postal_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.billing_postal_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The postal code of a customer’s billing address.</p>
    pub fn set_billing_postal_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.billing_postal_code = input;
        self
    }
    /// <p>The postal code of a customer’s billing address.</p>
    pub fn get_billing_postal_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.billing_postal_code
    }
    /// <p>The province of a customer’s billing address.</p>
    pub fn billing_province(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.billing_province = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The province of a customer’s billing address.</p>
    pub fn set_billing_province(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.billing_province = input;
        self
    }
    /// <p>The province of a customer’s billing address.</p>
    pub fn get_billing_province(&self) -> &::std::option::Option<::std::string::String> {
        &self.billing_province
    }
    /// <p>The state of a customer’s billing address.</p>
    pub fn billing_state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.billing_state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The state of a customer’s billing address.</p>
    pub fn set_billing_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.billing_state = input;
        self
    }
    /// <p>The state of a customer’s billing address.</p>
    pub fn get_billing_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.billing_state
    }
    /// Adds a key-value pair to `custom`.
    ///
    /// To override the contents of this collection use [`set_custom`](Self::set_custom).
    ///
    /// <p>The custom attributes in customer profile attributes.</p>
    pub fn custom(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.custom.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.custom = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The custom attributes in customer profile attributes.</p>
    pub fn set_custom(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.custom = input;
        self
    }
    /// <p>The custom attributes in customer profile attributes.</p>
    pub fn get_custom(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.custom
    }
    /// Consumes the builder and constructs a [`CustomerProfileAttributes`](crate::types::CustomerProfileAttributes).
    pub fn build(self) -> crate::types::CustomerProfileAttributes {
        crate::types::CustomerProfileAttributes {
            profile_id: self.profile_id,
            profile_arn: self.profile_arn,
            first_name: self.first_name,
            middle_name: self.middle_name,
            last_name: self.last_name,
            account_number: self.account_number,
            email_address: self.email_address,
            phone_number: self.phone_number,
            additional_information: self.additional_information,
            party_type: self.party_type,
            business_name: self.business_name,
            birth_date: self.birth_date,
            gender: self.gender,
            mobile_phone_number: self.mobile_phone_number,
            home_phone_number: self.home_phone_number,
            business_phone_number: self.business_phone_number,
            business_email_address: self.business_email_address,
            address1: self.address1,
            address2: self.address2,
            address3: self.address3,
            address4: self.address4,
            city: self.city,
            county: self.county,
            country: self.country,
            postal_code: self.postal_code,
            province: self.province,
            state: self.state,
            shipping_address1: self.shipping_address1,
            shipping_address2: self.shipping_address2,
            shipping_address3: self.shipping_address3,
            shipping_address4: self.shipping_address4,
            shipping_city: self.shipping_city,
            shipping_county: self.shipping_county,
            shipping_country: self.shipping_country,
            shipping_postal_code: self.shipping_postal_code,
            shipping_province: self.shipping_province,
            shipping_state: self.shipping_state,
            mailing_address1: self.mailing_address1,
            mailing_address2: self.mailing_address2,
            mailing_address3: self.mailing_address3,
            mailing_address4: self.mailing_address4,
            mailing_city: self.mailing_city,
            mailing_county: self.mailing_county,
            mailing_country: self.mailing_country,
            mailing_postal_code: self.mailing_postal_code,
            mailing_province: self.mailing_province,
            mailing_state: self.mailing_state,
            billing_address1: self.billing_address1,
            billing_address2: self.billing_address2,
            billing_address3: self.billing_address3,
            billing_address4: self.billing_address4,
            billing_city: self.billing_city,
            billing_county: self.billing_county,
            billing_country: self.billing_country,
            billing_postal_code: self.billing_postal_code,
            billing_province: self.billing_province,
            billing_state: self.billing_state,
            custom: self.custom,
        }
    }
}
impl ::std::fmt::Debug for CustomerProfileAttributesBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CustomerProfileAttributesBuilder");
        formatter.field("profile_id", &"*** Sensitive Data Redacted ***");
        formatter.field("profile_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("first_name", &"*** Sensitive Data Redacted ***");
        formatter.field("middle_name", &"*** Sensitive Data Redacted ***");
        formatter.field("last_name", &"*** Sensitive Data Redacted ***");
        formatter.field("account_number", &"*** Sensitive Data Redacted ***");
        formatter.field("email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("additional_information", &"*** Sensitive Data Redacted ***");
        formatter.field("party_type", &"*** Sensitive Data Redacted ***");
        formatter.field("business_name", &"*** Sensitive Data Redacted ***");
        formatter.field("birth_date", &"*** Sensitive Data Redacted ***");
        formatter.field("gender", &"*** Sensitive Data Redacted ***");
        formatter.field("mobile_phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("home_phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("business_phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("business_email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("address1", &"*** Sensitive Data Redacted ***");
        formatter.field("address2", &"*** Sensitive Data Redacted ***");
        formatter.field("address3", &"*** Sensitive Data Redacted ***");
        formatter.field("address4", &"*** Sensitive Data Redacted ***");
        formatter.field("city", &"*** Sensitive Data Redacted ***");
        formatter.field("county", &"*** Sensitive Data Redacted ***");
        formatter.field("country", &"*** Sensitive Data Redacted ***");
        formatter.field("postal_code", &"*** Sensitive Data Redacted ***");
        formatter.field("province", &"*** Sensitive Data Redacted ***");
        formatter.field("state", &"*** Sensitive Data Redacted ***");
        formatter.field("shipping_address1", &"*** Sensitive Data Redacted ***");
        formatter.field("shipping_address2", &"*** Sensitive Data Redacted ***");
        formatter.field("shipping_address3", &"*** Sensitive Data Redacted ***");
        formatter.field("shipping_address4", &"*** Sensitive Data Redacted ***");
        formatter.field("shipping_city", &"*** Sensitive Data Redacted ***");
        formatter.field("shipping_county", &"*** Sensitive Data Redacted ***");
        formatter.field("shipping_country", &"*** Sensitive Data Redacted ***");
        formatter.field("shipping_postal_code", &"*** Sensitive Data Redacted ***");
        formatter.field("shipping_province", &"*** Sensitive Data Redacted ***");
        formatter.field("shipping_state", &"*** Sensitive Data Redacted ***");
        formatter.field("mailing_address1", &"*** Sensitive Data Redacted ***");
        formatter.field("mailing_address2", &"*** Sensitive Data Redacted ***");
        formatter.field("mailing_address3", &"*** Sensitive Data Redacted ***");
        formatter.field("mailing_address4", &"*** Sensitive Data Redacted ***");
        formatter.field("mailing_city", &"*** Sensitive Data Redacted ***");
        formatter.field("mailing_county", &"*** Sensitive Data Redacted ***");
        formatter.field("mailing_country", &"*** Sensitive Data Redacted ***");
        formatter.field("mailing_postal_code", &"*** Sensitive Data Redacted ***");
        formatter.field("mailing_province", &"*** Sensitive Data Redacted ***");
        formatter.field("mailing_state", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_address1", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_address2", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_address3", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_address4", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_city", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_county", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_country", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_postal_code", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_province", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_state", &"*** Sensitive Data Redacted ***");
        formatter.field("custom", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
