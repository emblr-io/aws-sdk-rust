// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The data of the configuration for a <code>KNOWLEDGE_BASE</code> type Amazon Q in Connect Assistant Association.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KnowledgeBaseAssociationConfigurationData {
    /// <p>An object that can be used to specify Tag conditions.</p>
    pub content_tag_filter: ::std::option::Option<crate::types::TagFilter>,
    /// <p>The maximum number of results to return per page.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The search type to be used against the Knowledge Base for this request. The values can be <code>SEMANTIC</code> which uses vector embeddings or <code>HYBRID</code> which use vector embeddings and raw text</p>
    pub override_knowledge_base_search_type: ::std::option::Option<crate::types::KnowledgeBaseSearchType>,
}
impl KnowledgeBaseAssociationConfigurationData {
    /// <p>An object that can be used to specify Tag conditions.</p>
    pub fn content_tag_filter(&self) -> ::std::option::Option<&crate::types::TagFilter> {
        self.content_tag_filter.as_ref()
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The search type to be used against the Knowledge Base for this request. The values can be <code>SEMANTIC</code> which uses vector embeddings or <code>HYBRID</code> which use vector embeddings and raw text</p>
    pub fn override_knowledge_base_search_type(&self) -> ::std::option::Option<&crate::types::KnowledgeBaseSearchType> {
        self.override_knowledge_base_search_type.as_ref()
    }
}
impl KnowledgeBaseAssociationConfigurationData {
    /// Creates a new builder-style object to manufacture [`KnowledgeBaseAssociationConfigurationData`](crate::types::KnowledgeBaseAssociationConfigurationData).
    pub fn builder() -> crate::types::builders::KnowledgeBaseAssociationConfigurationDataBuilder {
        crate::types::builders::KnowledgeBaseAssociationConfigurationDataBuilder::default()
    }
}

/// A builder for [`KnowledgeBaseAssociationConfigurationData`](crate::types::KnowledgeBaseAssociationConfigurationData).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct KnowledgeBaseAssociationConfigurationDataBuilder {
    pub(crate) content_tag_filter: ::std::option::Option<crate::types::TagFilter>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) override_knowledge_base_search_type: ::std::option::Option<crate::types::KnowledgeBaseSearchType>,
}
impl KnowledgeBaseAssociationConfigurationDataBuilder {
    /// <p>An object that can be used to specify Tag conditions.</p>
    pub fn content_tag_filter(mut self, input: crate::types::TagFilter) -> Self {
        self.content_tag_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that can be used to specify Tag conditions.</p>
    pub fn set_content_tag_filter(mut self, input: ::std::option::Option<crate::types::TagFilter>) -> Self {
        self.content_tag_filter = input;
        self
    }
    /// <p>An object that can be used to specify Tag conditions.</p>
    pub fn get_content_tag_filter(&self) -> &::std::option::Option<crate::types::TagFilter> {
        &self.content_tag_filter
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The search type to be used against the Knowledge Base for this request. The values can be <code>SEMANTIC</code> which uses vector embeddings or <code>HYBRID</code> which use vector embeddings and raw text</p>
    pub fn override_knowledge_base_search_type(mut self, input: crate::types::KnowledgeBaseSearchType) -> Self {
        self.override_knowledge_base_search_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The search type to be used against the Knowledge Base for this request. The values can be <code>SEMANTIC</code> which uses vector embeddings or <code>HYBRID</code> which use vector embeddings and raw text</p>
    pub fn set_override_knowledge_base_search_type(mut self, input: ::std::option::Option<crate::types::KnowledgeBaseSearchType>) -> Self {
        self.override_knowledge_base_search_type = input;
        self
    }
    /// <p>The search type to be used against the Knowledge Base for this request. The values can be <code>SEMANTIC</code> which uses vector embeddings or <code>HYBRID</code> which use vector embeddings and raw text</p>
    pub fn get_override_knowledge_base_search_type(&self) -> &::std::option::Option<crate::types::KnowledgeBaseSearchType> {
        &self.override_knowledge_base_search_type
    }
    /// Consumes the builder and constructs a [`KnowledgeBaseAssociationConfigurationData`](crate::types::KnowledgeBaseAssociationConfigurationData).
    pub fn build(self) -> crate::types::KnowledgeBaseAssociationConfigurationData {
        crate::types::KnowledgeBaseAssociationConfigurationData {
            content_tag_filter: self.content_tag_filter,
            max_results: self.max_results,
            override_knowledge_base_search_type: self.override_knowledge_base_search_type,
        }
    }
}
