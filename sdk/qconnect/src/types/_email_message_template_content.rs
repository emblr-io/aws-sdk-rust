// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The content of the message template that applies to the email channel subtype.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EmailMessageTemplateContent {
    /// <p>The subject line, or title, to use in email messages.</p>
    pub subject: ::std::option::Option<::std::string::String>,
    /// <p>The body to use in email messages.</p>
    pub body: ::std::option::Option<crate::types::EmailMessageTemplateContentBody>,
    /// <p>The email headers to include in email messages.</p>
    pub headers: ::std::option::Option<::std::vec::Vec<crate::types::EmailHeader>>,
}
impl EmailMessageTemplateContent {
    /// <p>The subject line, or title, to use in email messages.</p>
    pub fn subject(&self) -> ::std::option::Option<&str> {
        self.subject.as_deref()
    }
    /// <p>The body to use in email messages.</p>
    pub fn body(&self) -> ::std::option::Option<&crate::types::EmailMessageTemplateContentBody> {
        self.body.as_ref()
    }
    /// <p>The email headers to include in email messages.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.headers.is_none()`.
    pub fn headers(&self) -> &[crate::types::EmailHeader] {
        self.headers.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for EmailMessageTemplateContent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EmailMessageTemplateContent");
        formatter.field("subject", &"*** Sensitive Data Redacted ***");
        formatter.field("body", &self.body);
        formatter.field("headers", &self.headers);
        formatter.finish()
    }
}
impl EmailMessageTemplateContent {
    /// Creates a new builder-style object to manufacture [`EmailMessageTemplateContent`](crate::types::EmailMessageTemplateContent).
    pub fn builder() -> crate::types::builders::EmailMessageTemplateContentBuilder {
        crate::types::builders::EmailMessageTemplateContentBuilder::default()
    }
}

/// A builder for [`EmailMessageTemplateContent`](crate::types::EmailMessageTemplateContent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct EmailMessageTemplateContentBuilder {
    pub(crate) subject: ::std::option::Option<::std::string::String>,
    pub(crate) body: ::std::option::Option<crate::types::EmailMessageTemplateContentBody>,
    pub(crate) headers: ::std::option::Option<::std::vec::Vec<crate::types::EmailHeader>>,
}
impl EmailMessageTemplateContentBuilder {
    /// <p>The subject line, or title, to use in email messages.</p>
    pub fn subject(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subject = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subject line, or title, to use in email messages.</p>
    pub fn set_subject(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subject = input;
        self
    }
    /// <p>The subject line, or title, to use in email messages.</p>
    pub fn get_subject(&self) -> &::std::option::Option<::std::string::String> {
        &self.subject
    }
    /// <p>The body to use in email messages.</p>
    pub fn body(mut self, input: crate::types::EmailMessageTemplateContentBody) -> Self {
        self.body = ::std::option::Option::Some(input);
        self
    }
    /// <p>The body to use in email messages.</p>
    pub fn set_body(mut self, input: ::std::option::Option<crate::types::EmailMessageTemplateContentBody>) -> Self {
        self.body = input;
        self
    }
    /// <p>The body to use in email messages.</p>
    pub fn get_body(&self) -> &::std::option::Option<crate::types::EmailMessageTemplateContentBody> {
        &self.body
    }
    /// Appends an item to `headers`.
    ///
    /// To override the contents of this collection use [`set_headers`](Self::set_headers).
    ///
    /// <p>The email headers to include in email messages.</p>
    pub fn headers(mut self, input: crate::types::EmailHeader) -> Self {
        let mut v = self.headers.unwrap_or_default();
        v.push(input);
        self.headers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The email headers to include in email messages.</p>
    pub fn set_headers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EmailHeader>>) -> Self {
        self.headers = input;
        self
    }
    /// <p>The email headers to include in email messages.</p>
    pub fn get_headers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EmailHeader>> {
        &self.headers
    }
    /// Consumes the builder and constructs a [`EmailMessageTemplateContent`](crate::types::EmailMessageTemplateContent).
    pub fn build(self) -> crate::types::EmailMessageTemplateContent {
        crate::types::EmailMessageTemplateContent {
            subject: self.subject,
            body: self.body,
            headers: self.headers,
        }
    }
}
impl ::std::fmt::Debug for EmailMessageTemplateContentBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EmailMessageTemplateContentBuilder");
        formatter.field("subject", &"*** Sensitive Data Redacted ***");
        formatter.field("body", &self.body);
        formatter.field("headers", &self.headers);
        formatter.finish()
    }
}
