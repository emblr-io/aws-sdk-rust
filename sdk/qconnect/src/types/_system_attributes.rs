// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The system attributes that are used with the message template.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SystemAttributes {
    /// <p>The name of the task.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The CustomerEndpoint attribute.</p>
    pub customer_endpoint: ::std::option::Option<crate::types::SystemEndpointAttributes>,
    /// <p>The SystemEndpoint attribute.</p>
    pub system_endpoint: ::std::option::Option<crate::types::SystemEndpointAttributes>,
}
impl SystemAttributes {
    /// <p>The name of the task.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The CustomerEndpoint attribute.</p>
    pub fn customer_endpoint(&self) -> ::std::option::Option<&crate::types::SystemEndpointAttributes> {
        self.customer_endpoint.as_ref()
    }
    /// <p>The SystemEndpoint attribute.</p>
    pub fn system_endpoint(&self) -> ::std::option::Option<&crate::types::SystemEndpointAttributes> {
        self.system_endpoint.as_ref()
    }
}
impl ::std::fmt::Debug for SystemAttributes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SystemAttributes");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("customer_endpoint", &self.customer_endpoint);
        formatter.field("system_endpoint", &self.system_endpoint);
        formatter.finish()
    }
}
impl SystemAttributes {
    /// Creates a new builder-style object to manufacture [`SystemAttributes`](crate::types::SystemAttributes).
    pub fn builder() -> crate::types::builders::SystemAttributesBuilder {
        crate::types::builders::SystemAttributesBuilder::default()
    }
}

/// A builder for [`SystemAttributes`](crate::types::SystemAttributes).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct SystemAttributesBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) customer_endpoint: ::std::option::Option<crate::types::SystemEndpointAttributes>,
    pub(crate) system_endpoint: ::std::option::Option<crate::types::SystemEndpointAttributes>,
}
impl SystemAttributesBuilder {
    /// <p>The name of the task.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the task.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the task.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The CustomerEndpoint attribute.</p>
    pub fn customer_endpoint(mut self, input: crate::types::SystemEndpointAttributes) -> Self {
        self.customer_endpoint = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CustomerEndpoint attribute.</p>
    pub fn set_customer_endpoint(mut self, input: ::std::option::Option<crate::types::SystemEndpointAttributes>) -> Self {
        self.customer_endpoint = input;
        self
    }
    /// <p>The CustomerEndpoint attribute.</p>
    pub fn get_customer_endpoint(&self) -> &::std::option::Option<crate::types::SystemEndpointAttributes> {
        &self.customer_endpoint
    }
    /// <p>The SystemEndpoint attribute.</p>
    pub fn system_endpoint(mut self, input: crate::types::SystemEndpointAttributes) -> Self {
        self.system_endpoint = ::std::option::Option::Some(input);
        self
    }
    /// <p>The SystemEndpoint attribute.</p>
    pub fn set_system_endpoint(mut self, input: ::std::option::Option<crate::types::SystemEndpointAttributes>) -> Self {
        self.system_endpoint = input;
        self
    }
    /// <p>The SystemEndpoint attribute.</p>
    pub fn get_system_endpoint(&self) -> &::std::option::Option<crate::types::SystemEndpointAttributes> {
        &self.system_endpoint
    }
    /// Consumes the builder and constructs a [`SystemAttributes`](crate::types::SystemAttributes).
    pub fn build(self) -> crate::types::SystemAttributes {
        crate::types::SystemAttributes {
            name: self.name,
            customer_endpoint: self.customer_endpoint,
            system_endpoint: self.system_endpoint,
        }
    }
}
impl ::std::fmt::Debug for SystemAttributesBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SystemAttributesBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("customer_endpoint", &self.customer_endpoint);
        formatter.field("system_endpoint", &self.system_endpoint);
        formatter.finish()
    }
}
