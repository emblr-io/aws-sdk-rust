// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an agent.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AgentAttributes {
    /// <p>The agent’s first name as entered in their Amazon Connect user account.</p>
    pub first_name: ::std::option::Option<::std::string::String>,
    /// <p>The agent’s last name as entered in their Amazon Connect user account.</p>
    pub last_name: ::std::option::Option<::std::string::String>,
}
impl AgentAttributes {
    /// <p>The agent’s first name as entered in their Amazon Connect user account.</p>
    pub fn first_name(&self) -> ::std::option::Option<&str> {
        self.first_name.as_deref()
    }
    /// <p>The agent’s last name as entered in their Amazon Connect user account.</p>
    pub fn last_name(&self) -> ::std::option::Option<&str> {
        self.last_name.as_deref()
    }
}
impl ::std::fmt::Debug for AgentAttributes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AgentAttributes");
        formatter.field("first_name", &"*** Sensitive Data Redacted ***");
        formatter.field("last_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AgentAttributes {
    /// Creates a new builder-style object to manufacture [`AgentAttributes`](crate::types::AgentAttributes).
    pub fn builder() -> crate::types::builders::AgentAttributesBuilder {
        crate::types::builders::AgentAttributesBuilder::default()
    }
}

/// A builder for [`AgentAttributes`](crate::types::AgentAttributes).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AgentAttributesBuilder {
    pub(crate) first_name: ::std::option::Option<::std::string::String>,
    pub(crate) last_name: ::std::option::Option<::std::string::String>,
}
impl AgentAttributesBuilder {
    /// <p>The agent’s first name as entered in their Amazon Connect user account.</p>
    pub fn first_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.first_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The agent’s first name as entered in their Amazon Connect user account.</p>
    pub fn set_first_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.first_name = input;
        self
    }
    /// <p>The agent’s first name as entered in their Amazon Connect user account.</p>
    pub fn get_first_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.first_name
    }
    /// <p>The agent’s last name as entered in their Amazon Connect user account.</p>
    pub fn last_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The agent’s last name as entered in their Amazon Connect user account.</p>
    pub fn set_last_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_name = input;
        self
    }
    /// <p>The agent’s last name as entered in their Amazon Connect user account.</p>
    pub fn get_last_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_name
    }
    /// Consumes the builder and constructs a [`AgentAttributes`](crate::types::AgentAttributes).
    pub fn build(self) -> crate::types::AgentAttributes {
        crate::types::AgentAttributes {
            first_name: self.first_name,
            last_name: self.last_name,
        }
    }
}
impl ::std::fmt::Debug for AgentAttributesBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AgentAttributesBuilder");
        formatter.field("first_name", &"*** Sensitive Data Redacted ***");
        formatter.field("last_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
