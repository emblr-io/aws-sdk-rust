// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The content of the message template that applies to the SMS channel subtype.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SmsMessageTemplateContent {
    /// <p>The body to use in SMS messages.</p>
    pub body: ::std::option::Option<crate::types::SmsMessageTemplateContentBody>,
}
impl SmsMessageTemplateContent {
    /// <p>The body to use in SMS messages.</p>
    pub fn body(&self) -> ::std::option::Option<&crate::types::SmsMessageTemplateContentBody> {
        self.body.as_ref()
    }
}
impl SmsMessageTemplateContent {
    /// Creates a new builder-style object to manufacture [`SmsMessageTemplateContent`](crate::types::SmsMessageTemplateContent).
    pub fn builder() -> crate::types::builders::SmsMessageTemplateContentBuilder {
        crate::types::builders::SmsMessageTemplateContentBuilder::default()
    }
}

/// A builder for [`SmsMessageTemplateContent`](crate::types::SmsMessageTemplateContent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SmsMessageTemplateContentBuilder {
    pub(crate) body: ::std::option::Option<crate::types::SmsMessageTemplateContentBody>,
}
impl SmsMessageTemplateContentBuilder {
    /// <p>The body to use in SMS messages.</p>
    pub fn body(mut self, input: crate::types::SmsMessageTemplateContentBody) -> Self {
        self.body = ::std::option::Option::Some(input);
        self
    }
    /// <p>The body to use in SMS messages.</p>
    pub fn set_body(mut self, input: ::std::option::Option<crate::types::SmsMessageTemplateContentBody>) -> Self {
        self.body = input;
        self
    }
    /// <p>The body to use in SMS messages.</p>
    pub fn get_body(&self) -> &::std::option::Option<crate::types::SmsMessageTemplateContentBody> {
        &self.body
    }
    /// Consumes the builder and constructs a [`SmsMessageTemplateContent`](crate::types::SmsMessageTemplateContent).
    pub fn build(self) -> crate::types::SmsMessageTemplateContent {
        crate::types::SmsMessageTemplateContent { body: self.body }
    }
}
