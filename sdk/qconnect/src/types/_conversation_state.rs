// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The conversation state associated to a message.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConversationState {
    /// <p>The status of the conversation state.</p>
    pub status: crate::types::ConversationStatus,
    /// <p>The reason of the conversation state.</p>
    pub reason: ::std::option::Option<crate::types::ConversationStatusReason>,
}
impl ConversationState {
    /// <p>The status of the conversation state.</p>
    pub fn status(&self) -> &crate::types::ConversationStatus {
        &self.status
    }
    /// <p>The reason of the conversation state.</p>
    pub fn reason(&self) -> ::std::option::Option<&crate::types::ConversationStatusReason> {
        self.reason.as_ref()
    }
}
impl ConversationState {
    /// Creates a new builder-style object to manufacture [`ConversationState`](crate::types::ConversationState).
    pub fn builder() -> crate::types::builders::ConversationStateBuilder {
        crate::types::builders::ConversationStateBuilder::default()
    }
}

/// A builder for [`ConversationState`](crate::types::ConversationState).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConversationStateBuilder {
    pub(crate) status: ::std::option::Option<crate::types::ConversationStatus>,
    pub(crate) reason: ::std::option::Option<crate::types::ConversationStatusReason>,
}
impl ConversationStateBuilder {
    /// <p>The status of the conversation state.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ConversationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the conversation state.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ConversationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the conversation state.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ConversationStatus> {
        &self.status
    }
    /// <p>The reason of the conversation state.</p>
    pub fn reason(mut self, input: crate::types::ConversationStatusReason) -> Self {
        self.reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>The reason of the conversation state.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<crate::types::ConversationStatusReason>) -> Self {
        self.reason = input;
        self
    }
    /// <p>The reason of the conversation state.</p>
    pub fn get_reason(&self) -> &::std::option::Option<crate::types::ConversationStatusReason> {
        &self.reason
    }
    /// Consumes the builder and constructs a [`ConversationState`](crate::types::ConversationState).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::types::builders::ConversationStateBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::ConversationState, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConversationState {
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ConversationState",
                )
            })?,
            reason: self.reason,
        })
    }
}
