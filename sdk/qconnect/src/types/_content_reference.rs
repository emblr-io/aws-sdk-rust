// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Reference information about the content.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContentReference {
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub knowledge_base_arn: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base.</p>
    pub knowledge_base_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the content.</p>
    pub content_arn: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the content.</p>
    pub content_id: ::std::option::Option<::std::string::String>,
    /// <p>The web URL of the source content.</p>
    pub source_url: ::std::option::Option<::std::string::String>,
    /// <p>The type of reference content.</p>
    pub reference_type: ::std::option::Option<crate::types::ReferenceType>,
}
impl ContentReference {
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn knowledge_base_arn(&self) -> ::std::option::Option<&str> {
        self.knowledge_base_arn.as_deref()
    }
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base.</p>
    pub fn knowledge_base_id(&self) -> ::std::option::Option<&str> {
        self.knowledge_base_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the content.</p>
    pub fn content_arn(&self) -> ::std::option::Option<&str> {
        self.content_arn.as_deref()
    }
    /// <p>The identifier of the content.</p>
    pub fn content_id(&self) -> ::std::option::Option<&str> {
        self.content_id.as_deref()
    }
    /// <p>The web URL of the source content.</p>
    pub fn source_url(&self) -> ::std::option::Option<&str> {
        self.source_url.as_deref()
    }
    /// <p>The type of reference content.</p>
    pub fn reference_type(&self) -> ::std::option::Option<&crate::types::ReferenceType> {
        self.reference_type.as_ref()
    }
}
impl ContentReference {
    /// Creates a new builder-style object to manufacture [`ContentReference`](crate::types::ContentReference).
    pub fn builder() -> crate::types::builders::ContentReferenceBuilder {
        crate::types::builders::ContentReferenceBuilder::default()
    }
}

/// A builder for [`ContentReference`](crate::types::ContentReference).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContentReferenceBuilder {
    pub(crate) knowledge_base_arn: ::std::option::Option<::std::string::String>,
    pub(crate) knowledge_base_id: ::std::option::Option<::std::string::String>,
    pub(crate) content_arn: ::std::option::Option<::std::string::String>,
    pub(crate) content_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_url: ::std::option::Option<::std::string::String>,
    pub(crate) reference_type: ::std::option::Option<crate::types::ReferenceType>,
}
impl ContentReferenceBuilder {
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn knowledge_base_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn set_knowledge_base_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn get_knowledge_base_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_arn
    }
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base.</p>
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base.</p>
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base.</p>
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_id
    }
    /// <p>The Amazon Resource Name (ARN) of the content.</p>
    pub fn content_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the content.</p>
    pub fn set_content_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the content.</p>
    pub fn get_content_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_arn
    }
    /// <p>The identifier of the content.</p>
    pub fn content_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the content.</p>
    pub fn set_content_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_id = input;
        self
    }
    /// <p>The identifier of the content.</p>
    pub fn get_content_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_id
    }
    /// <p>The web URL of the source content.</p>
    pub fn source_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The web URL of the source content.</p>
    pub fn set_source_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_url = input;
        self
    }
    /// <p>The web URL of the source content.</p>
    pub fn get_source_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_url
    }
    /// <p>The type of reference content.</p>
    pub fn reference_type(mut self, input: crate::types::ReferenceType) -> Self {
        self.reference_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of reference content.</p>
    pub fn set_reference_type(mut self, input: ::std::option::Option<crate::types::ReferenceType>) -> Self {
        self.reference_type = input;
        self
    }
    /// <p>The type of reference content.</p>
    pub fn get_reference_type(&self) -> &::std::option::Option<crate::types::ReferenceType> {
        &self.reference_type
    }
    /// Consumes the builder and constructs a [`ContentReference`](crate::types::ContentReference).
    pub fn build(self) -> crate::types::ContentReference {
        crate::types::ContentReference {
            knowledge_base_arn: self.knowledge_base_arn,
            knowledge_base_id: self.knowledge_base_id,
            content_arn: self.content_arn,
            content_id: self.content_id,
            source_url: self.source_url,
            reference_type: self.reference_type,
        }
    }
}
