// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that can be used to specify Tag conditions.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum TagFilter {
    /// <p>A list of conditions which would be applied together with an <code>AND</code> condition.</p>
    AndConditions(::std::vec::Vec<crate::types::TagCondition>),
    /// <p>A list of conditions which would be applied together with an <code>OR</code> condition.</p>
    OrConditions(::std::vec::Vec<crate::types::OrCondition>),
    /// <p>A leaf node condition which can be used to specify a tag condition.</p>
    TagCondition(crate::types::TagCondition),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl TagFilter {
    /// Tries to convert the enum instance into [`AndConditions`](crate::types::TagFilter::AndConditions), extracting the inner [`Vec`](::std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_and_conditions(&self) -> ::std::result::Result<&::std::vec::Vec<crate::types::TagCondition>, &Self> {
        if let TagFilter::AndConditions(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AndConditions`](crate::types::TagFilter::AndConditions).
    pub fn is_and_conditions(&self) -> bool {
        self.as_and_conditions().is_ok()
    }
    /// Tries to convert the enum instance into [`OrConditions`](crate::types::TagFilter::OrConditions), extracting the inner [`Vec`](::std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_or_conditions(&self) -> ::std::result::Result<&::std::vec::Vec<crate::types::OrCondition>, &Self> {
        if let TagFilter::OrConditions(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`OrConditions`](crate::types::TagFilter::OrConditions).
    pub fn is_or_conditions(&self) -> bool {
        self.as_or_conditions().is_ok()
    }
    /// Tries to convert the enum instance into [`TagCondition`](crate::types::TagFilter::TagCondition), extracting the inner [`TagCondition`](crate::types::TagCondition).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_tag_condition(&self) -> ::std::result::Result<&crate::types::TagCondition, &Self> {
        if let TagFilter::TagCondition(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`TagCondition`](crate::types::TagFilter::TagCondition).
    pub fn is_tag_condition(&self) -> bool {
        self.as_tag_condition().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
