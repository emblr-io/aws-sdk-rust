// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of the message template version.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MessageTemplateVersionSummary {
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    pub message_template_arn: ::std::string::String,
    /// <p>The identifier of the message template.</p>
    pub message_template_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub knowledge_base_arn: ::std::string::String,
    /// <p>The identifier of the knowledge base.</p>
    pub knowledge_base_id: ::std::string::String,
    /// <p>The name of the message template.</p>
    pub name: ::std::string::String,
    /// <p>The channel subtype this message template applies to.</p>
    pub channel_subtype: crate::types::ChannelSubtype,
    /// <p>Whether the version of the message template is activated.</p>
    pub is_active: bool,
    /// <p>The version number of the message template version.</p>
    pub version_number: i64,
}
impl MessageTemplateVersionSummary {
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    pub fn message_template_arn(&self) -> &str {
        use std::ops::Deref;
        self.message_template_arn.deref()
    }
    /// <p>The identifier of the message template.</p>
    pub fn message_template_id(&self) -> &str {
        use std::ops::Deref;
        self.message_template_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn knowledge_base_arn(&self) -> &str {
        use std::ops::Deref;
        self.knowledge_base_arn.deref()
    }
    /// <p>The identifier of the knowledge base.</p>
    pub fn knowledge_base_id(&self) -> &str {
        use std::ops::Deref;
        self.knowledge_base_id.deref()
    }
    /// <p>The name of the message template.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The channel subtype this message template applies to.</p>
    pub fn channel_subtype(&self) -> &crate::types::ChannelSubtype {
        &self.channel_subtype
    }
    /// <p>Whether the version of the message template is activated.</p>
    pub fn is_active(&self) -> bool {
        self.is_active
    }
    /// <p>The version number of the message template version.</p>
    pub fn version_number(&self) -> i64 {
        self.version_number
    }
}
impl MessageTemplateVersionSummary {
    /// Creates a new builder-style object to manufacture [`MessageTemplateVersionSummary`](crate::types::MessageTemplateVersionSummary).
    pub fn builder() -> crate::types::builders::MessageTemplateVersionSummaryBuilder {
        crate::types::builders::MessageTemplateVersionSummaryBuilder::default()
    }
}

/// A builder for [`MessageTemplateVersionSummary`](crate::types::MessageTemplateVersionSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MessageTemplateVersionSummaryBuilder {
    pub(crate) message_template_arn: ::std::option::Option<::std::string::String>,
    pub(crate) message_template_id: ::std::option::Option<::std::string::String>,
    pub(crate) knowledge_base_arn: ::std::option::Option<::std::string::String>,
    pub(crate) knowledge_base_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) channel_subtype: ::std::option::Option<crate::types::ChannelSubtype>,
    pub(crate) is_active: ::std::option::Option<bool>,
    pub(crate) version_number: ::std::option::Option<i64>,
}
impl MessageTemplateVersionSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    /// This field is required.
    pub fn message_template_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_template_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    pub fn set_message_template_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_template_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    pub fn get_message_template_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_template_arn
    }
    /// <p>The identifier of the message template.</p>
    /// This field is required.
    pub fn message_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the message template.</p>
    pub fn set_message_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_template_id = input;
        self
    }
    /// <p>The identifier of the message template.</p>
    pub fn get_message_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_template_id
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    /// This field is required.
    pub fn knowledge_base_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn set_knowledge_base_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn get_knowledge_base_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_arn
    }
    /// <p>The identifier of the knowledge base.</p>
    /// This field is required.
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the knowledge base.</p>
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// <p>The identifier of the knowledge base.</p>
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_id
    }
    /// <p>The name of the message template.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the message template.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the message template.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The channel subtype this message template applies to.</p>
    /// This field is required.
    pub fn channel_subtype(mut self, input: crate::types::ChannelSubtype) -> Self {
        self.channel_subtype = ::std::option::Option::Some(input);
        self
    }
    /// <p>The channel subtype this message template applies to.</p>
    pub fn set_channel_subtype(mut self, input: ::std::option::Option<crate::types::ChannelSubtype>) -> Self {
        self.channel_subtype = input;
        self
    }
    /// <p>The channel subtype this message template applies to.</p>
    pub fn get_channel_subtype(&self) -> &::std::option::Option<crate::types::ChannelSubtype> {
        &self.channel_subtype
    }
    /// <p>Whether the version of the message template is activated.</p>
    /// This field is required.
    pub fn is_active(mut self, input: bool) -> Self {
        self.is_active = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the version of the message template is activated.</p>
    pub fn set_is_active(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_active = input;
        self
    }
    /// <p>Whether the version of the message template is activated.</p>
    pub fn get_is_active(&self) -> &::std::option::Option<bool> {
        &self.is_active
    }
    /// <p>The version number of the message template version.</p>
    /// This field is required.
    pub fn version_number(mut self, input: i64) -> Self {
        self.version_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version number of the message template version.</p>
    pub fn set_version_number(mut self, input: ::std::option::Option<i64>) -> Self {
        self.version_number = input;
        self
    }
    /// <p>The version number of the message template version.</p>
    pub fn get_version_number(&self) -> &::std::option::Option<i64> {
        &self.version_number
    }
    /// Consumes the builder and constructs a [`MessageTemplateVersionSummary`](crate::types::MessageTemplateVersionSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`message_template_arn`](crate::types::builders::MessageTemplateVersionSummaryBuilder::message_template_arn)
    /// - [`message_template_id`](crate::types::builders::MessageTemplateVersionSummaryBuilder::message_template_id)
    /// - [`knowledge_base_arn`](crate::types::builders::MessageTemplateVersionSummaryBuilder::knowledge_base_arn)
    /// - [`knowledge_base_id`](crate::types::builders::MessageTemplateVersionSummaryBuilder::knowledge_base_id)
    /// - [`name`](crate::types::builders::MessageTemplateVersionSummaryBuilder::name)
    /// - [`channel_subtype`](crate::types::builders::MessageTemplateVersionSummaryBuilder::channel_subtype)
    /// - [`is_active`](crate::types::builders::MessageTemplateVersionSummaryBuilder::is_active)
    /// - [`version_number`](crate::types::builders::MessageTemplateVersionSummaryBuilder::version_number)
    pub fn build(self) -> ::std::result::Result<crate::types::MessageTemplateVersionSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MessageTemplateVersionSummary {
            message_template_arn: self.message_template_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message_template_arn",
                    "message_template_arn was not specified but it is required when building MessageTemplateVersionSummary",
                )
            })?,
            message_template_id: self.message_template_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message_template_id",
                    "message_template_id was not specified but it is required when building MessageTemplateVersionSummary",
                )
            })?,
            knowledge_base_arn: self.knowledge_base_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "knowledge_base_arn",
                    "knowledge_base_arn was not specified but it is required when building MessageTemplateVersionSummary",
                )
            })?,
            knowledge_base_id: self.knowledge_base_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "knowledge_base_id",
                    "knowledge_base_id was not specified but it is required when building MessageTemplateVersionSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building MessageTemplateVersionSummary",
                )
            })?,
            channel_subtype: self.channel_subtype.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "channel_subtype",
                    "channel_subtype was not specified but it is required when building MessageTemplateVersionSummary",
                )
            })?,
            is_active: self.is_active.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "is_active",
                    "is_active was not specified but it is required when building MessageTemplateVersionSummary",
                )
            })?,
            version_number: self.version_number.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "version_number",
                    "version_number was not specified but it is required when building MessageTemplateVersionSummary",
                )
            })?,
        })
    }
}
