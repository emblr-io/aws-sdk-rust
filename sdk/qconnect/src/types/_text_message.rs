// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The message data in text type.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TextMessage {
    /// <p>The value of the message data in text type.</p>
    pub value: ::std::option::Option<::std::string::String>,
}
impl TextMessage {
    /// <p>The value of the message data in text type.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl ::std::fmt::Debug for TextMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TextMessage");
        formatter.field("value", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl TextMessage {
    /// Creates a new builder-style object to manufacture [`TextMessage`](crate::types::TextMessage).
    pub fn builder() -> crate::types::builders::TextMessageBuilder {
        crate::types::builders::TextMessageBuilder::default()
    }
}

/// A builder for [`TextMessage`](crate::types::TextMessage).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct TextMessageBuilder {
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl TextMessageBuilder {
    /// <p>The value of the message data in text type.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the message data in text type.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of the message data in text type.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`TextMessage`](crate::types::TextMessage).
    pub fn build(self) -> crate::types::TextMessage {
        crate::types::TextMessage { value: self.value }
    }
}
impl ::std::fmt::Debug for TextMessageBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TextMessageBuilder");
        formatter.field("value", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
