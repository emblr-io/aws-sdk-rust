// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The conversation context to include in SendMessage.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConversationContext {
    /// <p>The self service conversation history before the Amazon Q in Connect session.</p>
    pub self_service_conversation_history: ::std::vec::Vec<crate::types::SelfServiceConversationHistory>,
}
impl ConversationContext {
    /// <p>The self service conversation history before the Amazon Q in Connect session.</p>
    pub fn self_service_conversation_history(&self) -> &[crate::types::SelfServiceConversationHistory] {
        use std::ops::Deref;
        self.self_service_conversation_history.deref()
    }
}
impl ConversationContext {
    /// Creates a new builder-style object to manufacture [`ConversationContext`](crate::types::ConversationContext).
    pub fn builder() -> crate::types::builders::ConversationContextBuilder {
        crate::types::builders::ConversationContextBuilder::default()
    }
}

/// A builder for [`ConversationContext`](crate::types::ConversationContext).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConversationContextBuilder {
    pub(crate) self_service_conversation_history: ::std::option::Option<::std::vec::Vec<crate::types::SelfServiceConversationHistory>>,
}
impl ConversationContextBuilder {
    /// Appends an item to `self_service_conversation_history`.
    ///
    /// To override the contents of this collection use [`set_self_service_conversation_history`](Self::set_self_service_conversation_history).
    ///
    /// <p>The self service conversation history before the Amazon Q in Connect session.</p>
    pub fn self_service_conversation_history(mut self, input: crate::types::SelfServiceConversationHistory) -> Self {
        let mut v = self.self_service_conversation_history.unwrap_or_default();
        v.push(input);
        self.self_service_conversation_history = ::std::option::Option::Some(v);
        self
    }
    /// <p>The self service conversation history before the Amazon Q in Connect session.</p>
    pub fn set_self_service_conversation_history(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::SelfServiceConversationHistory>>,
    ) -> Self {
        self.self_service_conversation_history = input;
        self
    }
    /// <p>The self service conversation history before the Amazon Q in Connect session.</p>
    pub fn get_self_service_conversation_history(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SelfServiceConversationHistory>> {
        &self.self_service_conversation_history
    }
    /// Consumes the builder and constructs a [`ConversationContext`](crate::types::ConversationContext).
    /// This method will fail if any of the following fields are not set:
    /// - [`self_service_conversation_history`](crate::types::builders::ConversationContextBuilder::self_service_conversation_history)
    pub fn build(self) -> ::std::result::Result<crate::types::ConversationContext, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConversationContext {
            self_service_conversation_history: self.self_service_conversation_history.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "self_service_conversation_history",
                    "self_service_conversation_history was not specified but it is required when building ConversationContext",
                )
            })?,
        })
    }
}
