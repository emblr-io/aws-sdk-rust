// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The data of a message template.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MessageTemplateData {
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    pub message_template_arn: ::std::string::String,
    /// <p>The identifier of the message template.</p>
    pub message_template_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub knowledge_base_arn: ::std::string::String,
    /// <p>The identifier of the knowledge base.</p>
    pub knowledge_base_id: ::std::string::String,
    /// <p>The name of the message template.</p>
    pub name: ::std::string::String,
    /// <p>The channel subtype this message template applies to.</p>
    pub channel_subtype: crate::types::ChannelSubtype,
    /// <p>The timestamp when the message template was created.</p>
    pub created_time: ::aws_smithy_types::DateTime,
    /// <p>The timestamp when the message template data was last modified.</p>
    pub last_modified_time: ::aws_smithy_types::DateTime,
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the message template data.</p>
    pub last_modified_by: ::std::string::String,
    /// <p>The content of the message template.</p>
    pub content: ::std::option::Option<crate::types::MessageTemplateContentProvider>,
    /// <p>The description of the message template.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The language code value for the language in which the quick response is written. The supported language codes include <code>de_DE</code>, <code>en_US</code>, <code>es_ES</code>, <code>fr_FR</code>, <code>id_ID</code>, <code>it_IT</code>, <code>ja_JP</code>, <code>ko_KR</code>, <code>pt_BR</code>, <code>zh_CN</code>, <code>zh_TW</code></p>
    pub language: ::std::option::Option<::std::string::String>,
    /// <p>The configuration information of the grouping of Amazon Q in Connect users.</p>
    pub grouping_configuration: ::std::option::Option<crate::types::GroupingConfiguration>,
    /// <p>An object that specifies the default values to use for variables in the message template. This object contains different categories of key-value pairs. Each key defines a variable or placeholder in the message template. The corresponding value defines the default value for that variable.</p>
    pub default_attributes: ::std::option::Option<crate::types::MessageTemplateAttributes>,
    /// <p>The types of attributes that the message template contains.</p>
    pub attribute_types: ::std::option::Option<::std::vec::Vec<crate::types::MessageTemplateAttributeType>>,
    /// <p>The checksum value of the message template content that is referenced by the <code>$LATEST</code> qualifier. It can be returned in <code>MessageTemplateData</code> or <code>ExtendedMessageTemplateData</code>. It’s calculated by content, language, <code>defaultAttributes</code> and <code>Attachments</code> of the message template.</p>
    pub message_template_content_sha256: ::std::string::String,
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl MessageTemplateData {
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    pub fn message_template_arn(&self) -> &str {
        use std::ops::Deref;
        self.message_template_arn.deref()
    }
    /// <p>The identifier of the message template.</p>
    pub fn message_template_id(&self) -> &str {
        use std::ops::Deref;
        self.message_template_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn knowledge_base_arn(&self) -> &str {
        use std::ops::Deref;
        self.knowledge_base_arn.deref()
    }
    /// <p>The identifier of the knowledge base.</p>
    pub fn knowledge_base_id(&self) -> &str {
        use std::ops::Deref;
        self.knowledge_base_id.deref()
    }
    /// <p>The name of the message template.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The channel subtype this message template applies to.</p>
    pub fn channel_subtype(&self) -> &crate::types::ChannelSubtype {
        &self.channel_subtype
    }
    /// <p>The timestamp when the message template was created.</p>
    pub fn created_time(&self) -> &::aws_smithy_types::DateTime {
        &self.created_time
    }
    /// <p>The timestamp when the message template data was last modified.</p>
    pub fn last_modified_time(&self) -> &::aws_smithy_types::DateTime {
        &self.last_modified_time
    }
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the message template data.</p>
    pub fn last_modified_by(&self) -> &str {
        use std::ops::Deref;
        self.last_modified_by.deref()
    }
    /// <p>The content of the message template.</p>
    pub fn content(&self) -> ::std::option::Option<&crate::types::MessageTemplateContentProvider> {
        self.content.as_ref()
    }
    /// <p>The description of the message template.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The language code value for the language in which the quick response is written. The supported language codes include <code>de_DE</code>, <code>en_US</code>, <code>es_ES</code>, <code>fr_FR</code>, <code>id_ID</code>, <code>it_IT</code>, <code>ja_JP</code>, <code>ko_KR</code>, <code>pt_BR</code>, <code>zh_CN</code>, <code>zh_TW</code></p>
    pub fn language(&self) -> ::std::option::Option<&str> {
        self.language.as_deref()
    }
    /// <p>The configuration information of the grouping of Amazon Q in Connect users.</p>
    pub fn grouping_configuration(&self) -> ::std::option::Option<&crate::types::GroupingConfiguration> {
        self.grouping_configuration.as_ref()
    }
    /// <p>An object that specifies the default values to use for variables in the message template. This object contains different categories of key-value pairs. Each key defines a variable or placeholder in the message template. The corresponding value defines the default value for that variable.</p>
    pub fn default_attributes(&self) -> ::std::option::Option<&crate::types::MessageTemplateAttributes> {
        self.default_attributes.as_ref()
    }
    /// <p>The types of attributes that the message template contains.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attribute_types.is_none()`.
    pub fn attribute_types(&self) -> &[crate::types::MessageTemplateAttributeType] {
        self.attribute_types.as_deref().unwrap_or_default()
    }
    /// <p>The checksum value of the message template content that is referenced by the <code>$LATEST</code> qualifier. It can be returned in <code>MessageTemplateData</code> or <code>ExtendedMessageTemplateData</code>. It’s calculated by content, language, <code>defaultAttributes</code> and <code>Attachments</code> of the message template.</p>
    pub fn message_template_content_sha256(&self) -> &str {
        use std::ops::Deref;
        self.message_template_content_sha256.deref()
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl MessageTemplateData {
    /// Creates a new builder-style object to manufacture [`MessageTemplateData`](crate::types::MessageTemplateData).
    pub fn builder() -> crate::types::builders::MessageTemplateDataBuilder {
        crate::types::builders::MessageTemplateDataBuilder::default()
    }
}

/// A builder for [`MessageTemplateData`](crate::types::MessageTemplateData).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MessageTemplateDataBuilder {
    pub(crate) message_template_arn: ::std::option::Option<::std::string::String>,
    pub(crate) message_template_id: ::std::option::Option<::std::string::String>,
    pub(crate) knowledge_base_arn: ::std::option::Option<::std::string::String>,
    pub(crate) knowledge_base_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) channel_subtype: ::std::option::Option<crate::types::ChannelSubtype>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_by: ::std::option::Option<::std::string::String>,
    pub(crate) content: ::std::option::Option<crate::types::MessageTemplateContentProvider>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) language: ::std::option::Option<::std::string::String>,
    pub(crate) grouping_configuration: ::std::option::Option<crate::types::GroupingConfiguration>,
    pub(crate) default_attributes: ::std::option::Option<crate::types::MessageTemplateAttributes>,
    pub(crate) attribute_types: ::std::option::Option<::std::vec::Vec<crate::types::MessageTemplateAttributeType>>,
    pub(crate) message_template_content_sha256: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl MessageTemplateDataBuilder {
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    /// This field is required.
    pub fn message_template_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_template_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    pub fn set_message_template_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_template_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    pub fn get_message_template_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_template_arn
    }
    /// <p>The identifier of the message template.</p>
    /// This field is required.
    pub fn message_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the message template.</p>
    pub fn set_message_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_template_id = input;
        self
    }
    /// <p>The identifier of the message template.</p>
    pub fn get_message_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_template_id
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    /// This field is required.
    pub fn knowledge_base_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn set_knowledge_base_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn get_knowledge_base_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_arn
    }
    /// <p>The identifier of the knowledge base.</p>
    /// This field is required.
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the knowledge base.</p>
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// <p>The identifier of the knowledge base.</p>
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_id
    }
    /// <p>The name of the message template.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the message template.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the message template.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The channel subtype this message template applies to.</p>
    /// This field is required.
    pub fn channel_subtype(mut self, input: crate::types::ChannelSubtype) -> Self {
        self.channel_subtype = ::std::option::Option::Some(input);
        self
    }
    /// <p>The channel subtype this message template applies to.</p>
    pub fn set_channel_subtype(mut self, input: ::std::option::Option<crate::types::ChannelSubtype>) -> Self {
        self.channel_subtype = input;
        self
    }
    /// <p>The channel subtype this message template applies to.</p>
    pub fn get_channel_subtype(&self) -> &::std::option::Option<crate::types::ChannelSubtype> {
        &self.channel_subtype
    }
    /// <p>The timestamp when the message template was created.</p>
    /// This field is required.
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the message template was created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The timestamp when the message template was created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The timestamp when the message template data was last modified.</p>
    /// This field is required.
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the message template data was last modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The timestamp when the message template data was last modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the message template data.</p>
    /// This field is required.
    pub fn last_modified_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_modified_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the message template data.</p>
    pub fn set_last_modified_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_modified_by = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the message template data.</p>
    pub fn get_last_modified_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_modified_by
    }
    /// <p>The content of the message template.</p>
    /// This field is required.
    pub fn content(mut self, input: crate::types::MessageTemplateContentProvider) -> Self {
        self.content = ::std::option::Option::Some(input);
        self
    }
    /// <p>The content of the message template.</p>
    pub fn set_content(mut self, input: ::std::option::Option<crate::types::MessageTemplateContentProvider>) -> Self {
        self.content = input;
        self
    }
    /// <p>The content of the message template.</p>
    pub fn get_content(&self) -> &::std::option::Option<crate::types::MessageTemplateContentProvider> {
        &self.content
    }
    /// <p>The description of the message template.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the message template.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the message template.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The language code value for the language in which the quick response is written. The supported language codes include <code>de_DE</code>, <code>en_US</code>, <code>es_ES</code>, <code>fr_FR</code>, <code>id_ID</code>, <code>it_IT</code>, <code>ja_JP</code>, <code>ko_KR</code>, <code>pt_BR</code>, <code>zh_CN</code>, <code>zh_TW</code></p>
    pub fn language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.language = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The language code value for the language in which the quick response is written. The supported language codes include <code>de_DE</code>, <code>en_US</code>, <code>es_ES</code>, <code>fr_FR</code>, <code>id_ID</code>, <code>it_IT</code>, <code>ja_JP</code>, <code>ko_KR</code>, <code>pt_BR</code>, <code>zh_CN</code>, <code>zh_TW</code></p>
    pub fn set_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.language = input;
        self
    }
    /// <p>The language code value for the language in which the quick response is written. The supported language codes include <code>de_DE</code>, <code>en_US</code>, <code>es_ES</code>, <code>fr_FR</code>, <code>id_ID</code>, <code>it_IT</code>, <code>ja_JP</code>, <code>ko_KR</code>, <code>pt_BR</code>, <code>zh_CN</code>, <code>zh_TW</code></p>
    pub fn get_language(&self) -> &::std::option::Option<::std::string::String> {
        &self.language
    }
    /// <p>The configuration information of the grouping of Amazon Q in Connect users.</p>
    pub fn grouping_configuration(mut self, input: crate::types::GroupingConfiguration) -> Self {
        self.grouping_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration information of the grouping of Amazon Q in Connect users.</p>
    pub fn set_grouping_configuration(mut self, input: ::std::option::Option<crate::types::GroupingConfiguration>) -> Self {
        self.grouping_configuration = input;
        self
    }
    /// <p>The configuration information of the grouping of Amazon Q in Connect users.</p>
    pub fn get_grouping_configuration(&self) -> &::std::option::Option<crate::types::GroupingConfiguration> {
        &self.grouping_configuration
    }
    /// <p>An object that specifies the default values to use for variables in the message template. This object contains different categories of key-value pairs. Each key defines a variable or placeholder in the message template. The corresponding value defines the default value for that variable.</p>
    pub fn default_attributes(mut self, input: crate::types::MessageTemplateAttributes) -> Self {
        self.default_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that specifies the default values to use for variables in the message template. This object contains different categories of key-value pairs. Each key defines a variable or placeholder in the message template. The corresponding value defines the default value for that variable.</p>
    pub fn set_default_attributes(mut self, input: ::std::option::Option<crate::types::MessageTemplateAttributes>) -> Self {
        self.default_attributes = input;
        self
    }
    /// <p>An object that specifies the default values to use for variables in the message template. This object contains different categories of key-value pairs. Each key defines a variable or placeholder in the message template. The corresponding value defines the default value for that variable.</p>
    pub fn get_default_attributes(&self) -> &::std::option::Option<crate::types::MessageTemplateAttributes> {
        &self.default_attributes
    }
    /// Appends an item to `attribute_types`.
    ///
    /// To override the contents of this collection use [`set_attribute_types`](Self::set_attribute_types).
    ///
    /// <p>The types of attributes that the message template contains.</p>
    pub fn attribute_types(mut self, input: crate::types::MessageTemplateAttributeType) -> Self {
        let mut v = self.attribute_types.unwrap_or_default();
        v.push(input);
        self.attribute_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The types of attributes that the message template contains.</p>
    pub fn set_attribute_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MessageTemplateAttributeType>>) -> Self {
        self.attribute_types = input;
        self
    }
    /// <p>The types of attributes that the message template contains.</p>
    pub fn get_attribute_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MessageTemplateAttributeType>> {
        &self.attribute_types
    }
    /// <p>The checksum value of the message template content that is referenced by the <code>$LATEST</code> qualifier. It can be returned in <code>MessageTemplateData</code> or <code>ExtendedMessageTemplateData</code>. It’s calculated by content, language, <code>defaultAttributes</code> and <code>Attachments</code> of the message template.</p>
    /// This field is required.
    pub fn message_template_content_sha256(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_template_content_sha256 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The checksum value of the message template content that is referenced by the <code>$LATEST</code> qualifier. It can be returned in <code>MessageTemplateData</code> or <code>ExtendedMessageTemplateData</code>. It’s calculated by content, language, <code>defaultAttributes</code> and <code>Attachments</code> of the message template.</p>
    pub fn set_message_template_content_sha256(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_template_content_sha256 = input;
        self
    }
    /// <p>The checksum value of the message template content that is referenced by the <code>$LATEST</code> qualifier. It can be returned in <code>MessageTemplateData</code> or <code>ExtendedMessageTemplateData</code>. It’s calculated by content, language, <code>defaultAttributes</code> and <code>Attachments</code> of the message template.</p>
    pub fn get_message_template_content_sha256(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_template_content_sha256
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`MessageTemplateData`](crate::types::MessageTemplateData).
    /// This method will fail if any of the following fields are not set:
    /// - [`message_template_arn`](crate::types::builders::MessageTemplateDataBuilder::message_template_arn)
    /// - [`message_template_id`](crate::types::builders::MessageTemplateDataBuilder::message_template_id)
    /// - [`knowledge_base_arn`](crate::types::builders::MessageTemplateDataBuilder::knowledge_base_arn)
    /// - [`knowledge_base_id`](crate::types::builders::MessageTemplateDataBuilder::knowledge_base_id)
    /// - [`name`](crate::types::builders::MessageTemplateDataBuilder::name)
    /// - [`channel_subtype`](crate::types::builders::MessageTemplateDataBuilder::channel_subtype)
    /// - [`created_time`](crate::types::builders::MessageTemplateDataBuilder::created_time)
    /// - [`last_modified_time`](crate::types::builders::MessageTemplateDataBuilder::last_modified_time)
    /// - [`last_modified_by`](crate::types::builders::MessageTemplateDataBuilder::last_modified_by)
    /// - [`message_template_content_sha256`](crate::types::builders::MessageTemplateDataBuilder::message_template_content_sha256)
    pub fn build(self) -> ::std::result::Result<crate::types::MessageTemplateData, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MessageTemplateData {
            message_template_arn: self.message_template_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message_template_arn",
                    "message_template_arn was not specified but it is required when building MessageTemplateData",
                )
            })?,
            message_template_id: self.message_template_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message_template_id",
                    "message_template_id was not specified but it is required when building MessageTemplateData",
                )
            })?,
            knowledge_base_arn: self.knowledge_base_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "knowledge_base_arn",
                    "knowledge_base_arn was not specified but it is required when building MessageTemplateData",
                )
            })?,
            knowledge_base_id: self.knowledge_base_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "knowledge_base_id",
                    "knowledge_base_id was not specified but it is required when building MessageTemplateData",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building MessageTemplateData",
                )
            })?,
            channel_subtype: self.channel_subtype.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "channel_subtype",
                    "channel_subtype was not specified but it is required when building MessageTemplateData",
                )
            })?,
            created_time: self.created_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_time",
                    "created_time was not specified but it is required when building MessageTemplateData",
                )
            })?,
            last_modified_time: self.last_modified_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_modified_time",
                    "last_modified_time was not specified but it is required when building MessageTemplateData",
                )
            })?,
            last_modified_by: self.last_modified_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_modified_by",
                    "last_modified_by was not specified but it is required when building MessageTemplateData",
                )
            })?,
            content: self.content,
            description: self.description,
            language: self.language,
            grouping_configuration: self.grouping_configuration,
            default_attributes: self.default_attributes,
            attribute_types: self.attribute_types,
            message_template_content_sha256: self.message_template_content_sha256.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message_template_content_sha256",
                    "message_template_content_sha256 was not specified but it is required when building MessageTemplateData",
                )
            })?,
            tags: self.tags,
        })
    }
}
