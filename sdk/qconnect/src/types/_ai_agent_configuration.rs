// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A typed union that specifies the configuration based on the type of AI Agent.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum AiAgentConfiguration {
    /// <p>The configuration for AI Agents of type <code>ANSWER_RECOMMENDATION</code>.</p>
    AnswerRecommendationAiAgentConfiguration(crate::types::AnswerRecommendationAiAgentConfiguration),
    /// <p>The configuration for AI Agents of type <code>MANUAL_SEARCH</code>.</p>
    ManualSearchAiAgentConfiguration(crate::types::ManualSearchAiAgentConfiguration),
    /// <p>The configuration for AI Agents of type SELF_SERVICE.</p>
    SelfServiceAiAgentConfiguration(crate::types::SelfServiceAiAgentConfiguration),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl AiAgentConfiguration {
    /// Tries to convert the enum instance into [`AnswerRecommendationAiAgentConfiguration`](crate::types::AiAgentConfiguration::AnswerRecommendationAiAgentConfiguration), extracting the inner [`AnswerRecommendationAiAgentConfiguration`](crate::types::AnswerRecommendationAiAgentConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_answer_recommendation_ai_agent_configuration(
        &self,
    ) -> ::std::result::Result<&crate::types::AnswerRecommendationAiAgentConfiguration, &Self> {
        if let AiAgentConfiguration::AnswerRecommendationAiAgentConfiguration(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AnswerRecommendationAiAgentConfiguration`](crate::types::AiAgentConfiguration::AnswerRecommendationAiAgentConfiguration).
    pub fn is_answer_recommendation_ai_agent_configuration(&self) -> bool {
        self.as_answer_recommendation_ai_agent_configuration().is_ok()
    }
    /// Tries to convert the enum instance into [`ManualSearchAiAgentConfiguration`](crate::types::AiAgentConfiguration::ManualSearchAiAgentConfiguration), extracting the inner [`ManualSearchAiAgentConfiguration`](crate::types::ManualSearchAiAgentConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_manual_search_ai_agent_configuration(&self) -> ::std::result::Result<&crate::types::ManualSearchAiAgentConfiguration, &Self> {
        if let AiAgentConfiguration::ManualSearchAiAgentConfiguration(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ManualSearchAiAgentConfiguration`](crate::types::AiAgentConfiguration::ManualSearchAiAgentConfiguration).
    pub fn is_manual_search_ai_agent_configuration(&self) -> bool {
        self.as_manual_search_ai_agent_configuration().is_ok()
    }
    /// Tries to convert the enum instance into [`SelfServiceAiAgentConfiguration`](crate::types::AiAgentConfiguration::SelfServiceAiAgentConfiguration), extracting the inner [`SelfServiceAiAgentConfiguration`](crate::types::SelfServiceAiAgentConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_self_service_ai_agent_configuration(&self) -> ::std::result::Result<&crate::types::SelfServiceAiAgentConfiguration, &Self> {
        if let AiAgentConfiguration::SelfServiceAiAgentConfiguration(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`SelfServiceAiAgentConfiguration`](crate::types::AiAgentConfiguration::SelfServiceAiAgentConfiguration).
    pub fn is_self_service_ai_agent_configuration(&self) -> bool {
        self.as_self_service_ai_agent_configuration().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
