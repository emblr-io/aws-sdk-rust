// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The message output.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MessageOutput {
    /// <p>The value of a message data.</p>
    pub value: ::std::option::Option<crate::types::MessageData>,
    /// <p>The identifier of a message.</p>
    pub message_id: ::std::string::String,
    /// <p>The participant of a message.</p>
    pub participant: crate::types::Participant,
    /// <p>The timestamp of a message.</p>
    pub timestamp: ::aws_smithy_types::DateTime,
}
impl MessageOutput {
    /// <p>The value of a message data.</p>
    pub fn value(&self) -> ::std::option::Option<&crate::types::MessageData> {
        self.value.as_ref()
    }
    /// <p>The identifier of a message.</p>
    pub fn message_id(&self) -> &str {
        use std::ops::Deref;
        self.message_id.deref()
    }
    /// <p>The participant of a message.</p>
    pub fn participant(&self) -> &crate::types::Participant {
        &self.participant
    }
    /// <p>The timestamp of a message.</p>
    pub fn timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.timestamp
    }
}
impl MessageOutput {
    /// Creates a new builder-style object to manufacture [`MessageOutput`](crate::types::MessageOutput).
    pub fn builder() -> crate::types::builders::MessageOutputBuilder {
        crate::types::builders::MessageOutputBuilder::default()
    }
}

/// A builder for [`MessageOutput`](crate::types::MessageOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MessageOutputBuilder {
    pub(crate) value: ::std::option::Option<crate::types::MessageData>,
    pub(crate) message_id: ::std::option::Option<::std::string::String>,
    pub(crate) participant: ::std::option::Option<crate::types::Participant>,
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl MessageOutputBuilder {
    /// <p>The value of a message data.</p>
    /// This field is required.
    pub fn value(mut self, input: crate::types::MessageData) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of a message data.</p>
    pub fn set_value(mut self, input: ::std::option::Option<crate::types::MessageData>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of a message data.</p>
    pub fn get_value(&self) -> &::std::option::Option<crate::types::MessageData> {
        &self.value
    }
    /// <p>The identifier of a message.</p>
    /// This field is required.
    pub fn message_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of a message.</p>
    pub fn set_message_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_id = input;
        self
    }
    /// <p>The identifier of a message.</p>
    pub fn get_message_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_id
    }
    /// <p>The participant of a message.</p>
    /// This field is required.
    pub fn participant(mut self, input: crate::types::Participant) -> Self {
        self.participant = ::std::option::Option::Some(input);
        self
    }
    /// <p>The participant of a message.</p>
    pub fn set_participant(mut self, input: ::std::option::Option<crate::types::Participant>) -> Self {
        self.participant = input;
        self
    }
    /// <p>The participant of a message.</p>
    pub fn get_participant(&self) -> &::std::option::Option<crate::types::Participant> {
        &self.participant
    }
    /// <p>The timestamp of a message.</p>
    /// This field is required.
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of a message.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The timestamp of a message.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// Consumes the builder and constructs a [`MessageOutput`](crate::types::MessageOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`message_id`](crate::types::builders::MessageOutputBuilder::message_id)
    /// - [`participant`](crate::types::builders::MessageOutputBuilder::participant)
    /// - [`timestamp`](crate::types::builders::MessageOutputBuilder::timestamp)
    pub fn build(self) -> ::std::result::Result<crate::types::MessageOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MessageOutput {
            value: self.value,
            message_id: self.message_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message_id",
                    "message_id was not specified but it is required when building MessageOutput",
                )
            })?,
            participant: self.participant.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "participant",
                    "participant was not specified but it is required when building MessageOutput",
                )
            })?,
            timestamp: self.timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "timestamp",
                    "timestamp was not specified but it is required when building MessageOutput",
                )
            })?,
        })
    }
}
