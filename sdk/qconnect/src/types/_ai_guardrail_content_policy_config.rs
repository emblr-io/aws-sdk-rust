// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about how to handle harmful content.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AiGuardrailContentPolicyConfig {
    /// <p>Contains the type of the content filter and how strongly it should apply to prompts and model responses.</p>
    pub filters_config: ::std::vec::Vec<crate::types::GuardrailContentFilterConfig>,
}
impl AiGuardrailContentPolicyConfig {
    /// <p>Contains the type of the content filter and how strongly it should apply to prompts and model responses.</p>
    pub fn filters_config(&self) -> &[crate::types::GuardrailContentFilterConfig] {
        use std::ops::Deref;
        self.filters_config.deref()
    }
}
impl AiGuardrailContentPolicyConfig {
    /// Creates a new builder-style object to manufacture [`AiGuardrailContentPolicyConfig`](crate::types::AiGuardrailContentPolicyConfig).
    pub fn builder() -> crate::types::builders::AiGuardrailContentPolicyConfigBuilder {
        crate::types::builders::AiGuardrailContentPolicyConfigBuilder::default()
    }
}

/// A builder for [`AiGuardrailContentPolicyConfig`](crate::types::AiGuardrailContentPolicyConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AiGuardrailContentPolicyConfigBuilder {
    pub(crate) filters_config: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailContentFilterConfig>>,
}
impl AiGuardrailContentPolicyConfigBuilder {
    /// Appends an item to `filters_config`.
    ///
    /// To override the contents of this collection use [`set_filters_config`](Self::set_filters_config).
    ///
    /// <p>Contains the type of the content filter and how strongly it should apply to prompts and model responses.</p>
    pub fn filters_config(mut self, input: crate::types::GuardrailContentFilterConfig) -> Self {
        let mut v = self.filters_config.unwrap_or_default();
        v.push(input);
        self.filters_config = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains the type of the content filter and how strongly it should apply to prompts and model responses.</p>
    pub fn set_filters_config(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailContentFilterConfig>>) -> Self {
        self.filters_config = input;
        self
    }
    /// <p>Contains the type of the content filter and how strongly it should apply to prompts and model responses.</p>
    pub fn get_filters_config(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GuardrailContentFilterConfig>> {
        &self.filters_config
    }
    /// Consumes the builder and constructs a [`AiGuardrailContentPolicyConfig`](crate::types::AiGuardrailContentPolicyConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`filters_config`](crate::types::builders::AiGuardrailContentPolicyConfigBuilder::filters_config)
    pub fn build(self) -> ::std::result::Result<crate::types::AiGuardrailContentPolicyConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AiGuardrailContentPolicyConfig {
            filters_config: self.filters_config.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "filters_config",
                    "filters_config was not specified but it is required when building AiGuardrailContentPolicyConfig",
                )
            })?,
        })
    }
}
