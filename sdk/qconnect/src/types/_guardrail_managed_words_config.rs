// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The managed word list to configure for the AI Guardrail.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GuardrailManagedWordsConfig {
    /// <p>The managed word type to configure for the AI Guardrail.</p>
    pub r#type: crate::types::GuardrailManagedWordsType,
}
impl GuardrailManagedWordsConfig {
    /// <p>The managed word type to configure for the AI Guardrail.</p>
    pub fn r#type(&self) -> &crate::types::GuardrailManagedWordsType {
        &self.r#type
    }
}
impl ::std::fmt::Debug for GuardrailManagedWordsConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailManagedWordsConfig");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GuardrailManagedWordsConfig {
    /// Creates a new builder-style object to manufacture [`GuardrailManagedWordsConfig`](crate::types::GuardrailManagedWordsConfig).
    pub fn builder() -> crate::types::builders::GuardrailManagedWordsConfigBuilder {
        crate::types::builders::GuardrailManagedWordsConfigBuilder::default()
    }
}

/// A builder for [`GuardrailManagedWordsConfig`](crate::types::GuardrailManagedWordsConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GuardrailManagedWordsConfigBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::GuardrailManagedWordsType>,
}
impl GuardrailManagedWordsConfigBuilder {
    /// <p>The managed word type to configure for the AI Guardrail.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::GuardrailManagedWordsType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The managed word type to configure for the AI Guardrail.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::GuardrailManagedWordsType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The managed word type to configure for the AI Guardrail.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::GuardrailManagedWordsType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`GuardrailManagedWordsConfig`](crate::types::GuardrailManagedWordsConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::GuardrailManagedWordsConfigBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::GuardrailManagedWordsConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GuardrailManagedWordsConfig {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building GuardrailManagedWordsConfig",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for GuardrailManagedWordsConfigBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailManagedWordsConfigBuilder");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
