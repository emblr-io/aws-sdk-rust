// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the message template attachment.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct MessageTemplateAttachment {
    /// <p>The presentation information for the attachment file.</p>
    pub content_disposition: crate::types::ContentDisposition,
    /// <p>The name of the attachment file being uploaded. The name should include the file extension.</p>
    pub name: ::std::string::String,
    /// <p>The timestamp when the attachment file was uploaded.</p>
    pub uploaded_time: ::aws_smithy_types::DateTime,
    /// <p>A pre-signed Amazon S3 URL that can be used to download the attachment file.</p>
    pub url: ::std::string::String,
    /// <p>The expiration time of the pre-signed Amazon S3 URL.</p>
    pub url_expiry: ::aws_smithy_types::DateTime,
    /// <p>The identifier of the attachment file.</p>
    pub attachment_id: ::std::string::String,
}
impl MessageTemplateAttachment {
    /// <p>The presentation information for the attachment file.</p>
    pub fn content_disposition(&self) -> &crate::types::ContentDisposition {
        &self.content_disposition
    }
    /// <p>The name of the attachment file being uploaded. The name should include the file extension.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The timestamp when the attachment file was uploaded.</p>
    pub fn uploaded_time(&self) -> &::aws_smithy_types::DateTime {
        &self.uploaded_time
    }
    /// <p>A pre-signed Amazon S3 URL that can be used to download the attachment file.</p>
    pub fn url(&self) -> &str {
        use std::ops::Deref;
        self.url.deref()
    }
    /// <p>The expiration time of the pre-signed Amazon S3 URL.</p>
    pub fn url_expiry(&self) -> &::aws_smithy_types::DateTime {
        &self.url_expiry
    }
    /// <p>The identifier of the attachment file.</p>
    pub fn attachment_id(&self) -> &str {
        use std::ops::Deref;
        self.attachment_id.deref()
    }
}
impl ::std::fmt::Debug for MessageTemplateAttachment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MessageTemplateAttachment");
        formatter.field("content_disposition", &self.content_disposition);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("uploaded_time", &self.uploaded_time);
        formatter.field("url", &"*** Sensitive Data Redacted ***");
        formatter.field("url_expiry", &self.url_expiry);
        formatter.field("attachment_id", &self.attachment_id);
        formatter.finish()
    }
}
impl MessageTemplateAttachment {
    /// Creates a new builder-style object to manufacture [`MessageTemplateAttachment`](crate::types::MessageTemplateAttachment).
    pub fn builder() -> crate::types::builders::MessageTemplateAttachmentBuilder {
        crate::types::builders::MessageTemplateAttachmentBuilder::default()
    }
}

/// A builder for [`MessageTemplateAttachment`](crate::types::MessageTemplateAttachment).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct MessageTemplateAttachmentBuilder {
    pub(crate) content_disposition: ::std::option::Option<crate::types::ContentDisposition>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) uploaded_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) url_expiry: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) attachment_id: ::std::option::Option<::std::string::String>,
}
impl MessageTemplateAttachmentBuilder {
    /// <p>The presentation information for the attachment file.</p>
    /// This field is required.
    pub fn content_disposition(mut self, input: crate::types::ContentDisposition) -> Self {
        self.content_disposition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The presentation information for the attachment file.</p>
    pub fn set_content_disposition(mut self, input: ::std::option::Option<crate::types::ContentDisposition>) -> Self {
        self.content_disposition = input;
        self
    }
    /// <p>The presentation information for the attachment file.</p>
    pub fn get_content_disposition(&self) -> &::std::option::Option<crate::types::ContentDisposition> {
        &self.content_disposition
    }
    /// <p>The name of the attachment file being uploaded. The name should include the file extension.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the attachment file being uploaded. The name should include the file extension.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the attachment file being uploaded. The name should include the file extension.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The timestamp when the attachment file was uploaded.</p>
    /// This field is required.
    pub fn uploaded_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.uploaded_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the attachment file was uploaded.</p>
    pub fn set_uploaded_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.uploaded_time = input;
        self
    }
    /// <p>The timestamp when the attachment file was uploaded.</p>
    pub fn get_uploaded_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.uploaded_time
    }
    /// <p>A pre-signed Amazon S3 URL that can be used to download the attachment file.</p>
    /// This field is required.
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A pre-signed Amazon S3 URL that can be used to download the attachment file.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>A pre-signed Amazon S3 URL that can be used to download the attachment file.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// <p>The expiration time of the pre-signed Amazon S3 URL.</p>
    /// This field is required.
    pub fn url_expiry(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.url_expiry = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expiration time of the pre-signed Amazon S3 URL.</p>
    pub fn set_url_expiry(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.url_expiry = input;
        self
    }
    /// <p>The expiration time of the pre-signed Amazon S3 URL.</p>
    pub fn get_url_expiry(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.url_expiry
    }
    /// <p>The identifier of the attachment file.</p>
    /// This field is required.
    pub fn attachment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attachment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the attachment file.</p>
    pub fn set_attachment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attachment_id = input;
        self
    }
    /// <p>The identifier of the attachment file.</p>
    pub fn get_attachment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.attachment_id
    }
    /// Consumes the builder and constructs a [`MessageTemplateAttachment`](crate::types::MessageTemplateAttachment).
    /// This method will fail if any of the following fields are not set:
    /// - [`content_disposition`](crate::types::builders::MessageTemplateAttachmentBuilder::content_disposition)
    /// - [`name`](crate::types::builders::MessageTemplateAttachmentBuilder::name)
    /// - [`uploaded_time`](crate::types::builders::MessageTemplateAttachmentBuilder::uploaded_time)
    /// - [`url`](crate::types::builders::MessageTemplateAttachmentBuilder::url)
    /// - [`url_expiry`](crate::types::builders::MessageTemplateAttachmentBuilder::url_expiry)
    /// - [`attachment_id`](crate::types::builders::MessageTemplateAttachmentBuilder::attachment_id)
    pub fn build(self) -> ::std::result::Result<crate::types::MessageTemplateAttachment, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MessageTemplateAttachment {
            content_disposition: self.content_disposition.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content_disposition",
                    "content_disposition was not specified but it is required when building MessageTemplateAttachment",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building MessageTemplateAttachment",
                )
            })?,
            uploaded_time: self.uploaded_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "uploaded_time",
                    "uploaded_time was not specified but it is required when building MessageTemplateAttachment",
                )
            })?,
            url: self.url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "url",
                    "url was not specified but it is required when building MessageTemplateAttachment",
                )
            })?,
            url_expiry: self.url_expiry.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "url_expiry",
                    "url_expiry was not specified but it is required when building MessageTemplateAttachment",
                )
            })?,
            attachment_id: self.attachment_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "attachment_id",
                    "attachment_id was not specified but it is required when building MessageTemplateAttachment",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for MessageTemplateAttachmentBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MessageTemplateAttachmentBuilder");
        formatter.field("content_disposition", &self.content_disposition);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("uploaded_time", &self.uploaded_time);
        formatter.field("url", &"*** Sensitive Data Redacted ***");
        formatter.field("url_expiry", &self.url_expiry);
        formatter.field("attachment_id", &self.attachment_id);
        formatter.finish()
    }
}
