// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The search expression of the message template.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MessageTemplateSearchExpression {
    /// <p>The message template query expressions.</p>
    pub queries: ::std::option::Option<::std::vec::Vec<crate::types::MessageTemplateQueryField>>,
    /// <p>The configuration of filtering rules applied to message template query results.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::MessageTemplateFilterField>>,
    /// <p>The message template attribute fields on which the query results are ordered.</p>
    pub order_on_field: ::std::option::Option<crate::types::MessageTemplateOrderField>,
}
impl MessageTemplateSearchExpression {
    /// <p>The message template query expressions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.queries.is_none()`.
    pub fn queries(&self) -> &[crate::types::MessageTemplateQueryField] {
        self.queries.as_deref().unwrap_or_default()
    }
    /// <p>The configuration of filtering rules applied to message template query results.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::MessageTemplateFilterField] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>The message template attribute fields on which the query results are ordered.</p>
    pub fn order_on_field(&self) -> ::std::option::Option<&crate::types::MessageTemplateOrderField> {
        self.order_on_field.as_ref()
    }
}
impl MessageTemplateSearchExpression {
    /// Creates a new builder-style object to manufacture [`MessageTemplateSearchExpression`](crate::types::MessageTemplateSearchExpression).
    pub fn builder() -> crate::types::builders::MessageTemplateSearchExpressionBuilder {
        crate::types::builders::MessageTemplateSearchExpressionBuilder::default()
    }
}

/// A builder for [`MessageTemplateSearchExpression`](crate::types::MessageTemplateSearchExpression).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MessageTemplateSearchExpressionBuilder {
    pub(crate) queries: ::std::option::Option<::std::vec::Vec<crate::types::MessageTemplateQueryField>>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::MessageTemplateFilterField>>,
    pub(crate) order_on_field: ::std::option::Option<crate::types::MessageTemplateOrderField>,
}
impl MessageTemplateSearchExpressionBuilder {
    /// Appends an item to `queries`.
    ///
    /// To override the contents of this collection use [`set_queries`](Self::set_queries).
    ///
    /// <p>The message template query expressions.</p>
    pub fn queries(mut self, input: crate::types::MessageTemplateQueryField) -> Self {
        let mut v = self.queries.unwrap_or_default();
        v.push(input);
        self.queries = ::std::option::Option::Some(v);
        self
    }
    /// <p>The message template query expressions.</p>
    pub fn set_queries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MessageTemplateQueryField>>) -> Self {
        self.queries = input;
        self
    }
    /// <p>The message template query expressions.</p>
    pub fn get_queries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MessageTemplateQueryField>> {
        &self.queries
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The configuration of filtering rules applied to message template query results.</p>
    pub fn filters(mut self, input: crate::types::MessageTemplateFilterField) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The configuration of filtering rules applied to message template query results.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MessageTemplateFilterField>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>The configuration of filtering rules applied to message template query results.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MessageTemplateFilterField>> {
        &self.filters
    }
    /// <p>The message template attribute fields on which the query results are ordered.</p>
    pub fn order_on_field(mut self, input: crate::types::MessageTemplateOrderField) -> Self {
        self.order_on_field = ::std::option::Option::Some(input);
        self
    }
    /// <p>The message template attribute fields on which the query results are ordered.</p>
    pub fn set_order_on_field(mut self, input: ::std::option::Option<crate::types::MessageTemplateOrderField>) -> Self {
        self.order_on_field = input;
        self
    }
    /// <p>The message template attribute fields on which the query results are ordered.</p>
    pub fn get_order_on_field(&self) -> &::std::option::Option<crate::types::MessageTemplateOrderField> {
        &self.order_on_field
    }
    /// Consumes the builder and constructs a [`MessageTemplateSearchExpression`](crate::types::MessageTemplateSearchExpression).
    pub fn build(self) -> crate::types::MessageTemplateSearchExpression {
        crate::types::MessageTemplateSearchExpression {
            queries: self.queries,
            filters: self.filters,
            order_on_field: self.order_on_field,
        }
    }
}
