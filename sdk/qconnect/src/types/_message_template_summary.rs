// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of the message template.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MessageTemplateSummary {
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    pub message_template_arn: ::std::string::String,
    /// <p>The identifier of the message template.</p>
    pub message_template_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub knowledge_base_arn: ::std::string::String,
    /// <p>The identifier of the knowledge base.</p>
    pub knowledge_base_id: ::std::string::String,
    /// <p>The name of the message template.</p>
    pub name: ::std::string::String,
    /// <p>The channel subtype this message template applies to.</p>
    pub channel_subtype: crate::types::ChannelSubtype,
    /// <p>The timestamp when the message template was created.</p>
    pub created_time: ::aws_smithy_types::DateTime,
    /// <p>The timestamp when the message template data was last modified.</p>
    pub last_modified_time: ::aws_smithy_types::DateTime,
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the message template data.</p>
    pub last_modified_by: ::std::string::String,
    /// <p>The version number of the message template version that is activated.</p>
    pub active_version_number: ::std::option::Option<i64>,
    /// <p>The description of the message template.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl MessageTemplateSummary {
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    pub fn message_template_arn(&self) -> &str {
        use std::ops::Deref;
        self.message_template_arn.deref()
    }
    /// <p>The identifier of the message template.</p>
    pub fn message_template_id(&self) -> &str {
        use std::ops::Deref;
        self.message_template_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn knowledge_base_arn(&self) -> &str {
        use std::ops::Deref;
        self.knowledge_base_arn.deref()
    }
    /// <p>The identifier of the knowledge base.</p>
    pub fn knowledge_base_id(&self) -> &str {
        use std::ops::Deref;
        self.knowledge_base_id.deref()
    }
    /// <p>The name of the message template.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The channel subtype this message template applies to.</p>
    pub fn channel_subtype(&self) -> &crate::types::ChannelSubtype {
        &self.channel_subtype
    }
    /// <p>The timestamp when the message template was created.</p>
    pub fn created_time(&self) -> &::aws_smithy_types::DateTime {
        &self.created_time
    }
    /// <p>The timestamp when the message template data was last modified.</p>
    pub fn last_modified_time(&self) -> &::aws_smithy_types::DateTime {
        &self.last_modified_time
    }
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the message template data.</p>
    pub fn last_modified_by(&self) -> &str {
        use std::ops::Deref;
        self.last_modified_by.deref()
    }
    /// <p>The version number of the message template version that is activated.</p>
    pub fn active_version_number(&self) -> ::std::option::Option<i64> {
        self.active_version_number
    }
    /// <p>The description of the message template.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl MessageTemplateSummary {
    /// Creates a new builder-style object to manufacture [`MessageTemplateSummary`](crate::types::MessageTemplateSummary).
    pub fn builder() -> crate::types::builders::MessageTemplateSummaryBuilder {
        crate::types::builders::MessageTemplateSummaryBuilder::default()
    }
}

/// A builder for [`MessageTemplateSummary`](crate::types::MessageTemplateSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MessageTemplateSummaryBuilder {
    pub(crate) message_template_arn: ::std::option::Option<::std::string::String>,
    pub(crate) message_template_id: ::std::option::Option<::std::string::String>,
    pub(crate) knowledge_base_arn: ::std::option::Option<::std::string::String>,
    pub(crate) knowledge_base_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) channel_subtype: ::std::option::Option<crate::types::ChannelSubtype>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_by: ::std::option::Option<::std::string::String>,
    pub(crate) active_version_number: ::std::option::Option<i64>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl MessageTemplateSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    /// This field is required.
    pub fn message_template_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_template_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    pub fn set_message_template_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_template_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    pub fn get_message_template_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_template_arn
    }
    /// <p>The identifier of the message template.</p>
    /// This field is required.
    pub fn message_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the message template.</p>
    pub fn set_message_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_template_id = input;
        self
    }
    /// <p>The identifier of the message template.</p>
    pub fn get_message_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_template_id
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    /// This field is required.
    pub fn knowledge_base_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn set_knowledge_base_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn get_knowledge_base_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_arn
    }
    /// <p>The identifier of the knowledge base.</p>
    /// This field is required.
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the knowledge base.</p>
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// <p>The identifier of the knowledge base.</p>
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_id
    }
    /// <p>The name of the message template.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the message template.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the message template.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The channel subtype this message template applies to.</p>
    /// This field is required.
    pub fn channel_subtype(mut self, input: crate::types::ChannelSubtype) -> Self {
        self.channel_subtype = ::std::option::Option::Some(input);
        self
    }
    /// <p>The channel subtype this message template applies to.</p>
    pub fn set_channel_subtype(mut self, input: ::std::option::Option<crate::types::ChannelSubtype>) -> Self {
        self.channel_subtype = input;
        self
    }
    /// <p>The channel subtype this message template applies to.</p>
    pub fn get_channel_subtype(&self) -> &::std::option::Option<crate::types::ChannelSubtype> {
        &self.channel_subtype
    }
    /// <p>The timestamp when the message template was created.</p>
    /// This field is required.
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the message template was created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The timestamp when the message template was created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The timestamp when the message template data was last modified.</p>
    /// This field is required.
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the message template data was last modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The timestamp when the message template data was last modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the message template data.</p>
    /// This field is required.
    pub fn last_modified_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_modified_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the message template data.</p>
    pub fn set_last_modified_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_modified_by = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the message template data.</p>
    pub fn get_last_modified_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_modified_by
    }
    /// <p>The version number of the message template version that is activated.</p>
    pub fn active_version_number(mut self, input: i64) -> Self {
        self.active_version_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version number of the message template version that is activated.</p>
    pub fn set_active_version_number(mut self, input: ::std::option::Option<i64>) -> Self {
        self.active_version_number = input;
        self
    }
    /// <p>The version number of the message template version that is activated.</p>
    pub fn get_active_version_number(&self) -> &::std::option::Option<i64> {
        &self.active_version_number
    }
    /// <p>The description of the message template.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the message template.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the message template.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`MessageTemplateSummary`](crate::types::MessageTemplateSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`message_template_arn`](crate::types::builders::MessageTemplateSummaryBuilder::message_template_arn)
    /// - [`message_template_id`](crate::types::builders::MessageTemplateSummaryBuilder::message_template_id)
    /// - [`knowledge_base_arn`](crate::types::builders::MessageTemplateSummaryBuilder::knowledge_base_arn)
    /// - [`knowledge_base_id`](crate::types::builders::MessageTemplateSummaryBuilder::knowledge_base_id)
    /// - [`name`](crate::types::builders::MessageTemplateSummaryBuilder::name)
    /// - [`channel_subtype`](crate::types::builders::MessageTemplateSummaryBuilder::channel_subtype)
    /// - [`created_time`](crate::types::builders::MessageTemplateSummaryBuilder::created_time)
    /// - [`last_modified_time`](crate::types::builders::MessageTemplateSummaryBuilder::last_modified_time)
    /// - [`last_modified_by`](crate::types::builders::MessageTemplateSummaryBuilder::last_modified_by)
    pub fn build(self) -> ::std::result::Result<crate::types::MessageTemplateSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MessageTemplateSummary {
            message_template_arn: self.message_template_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message_template_arn",
                    "message_template_arn was not specified but it is required when building MessageTemplateSummary",
                )
            })?,
            message_template_id: self.message_template_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message_template_id",
                    "message_template_id was not specified but it is required when building MessageTemplateSummary",
                )
            })?,
            knowledge_base_arn: self.knowledge_base_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "knowledge_base_arn",
                    "knowledge_base_arn was not specified but it is required when building MessageTemplateSummary",
                )
            })?,
            knowledge_base_id: self.knowledge_base_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "knowledge_base_id",
                    "knowledge_base_id was not specified but it is required when building MessageTemplateSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building MessageTemplateSummary",
                )
            })?,
            channel_subtype: self.channel_subtype.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "channel_subtype",
                    "channel_subtype was not specified but it is required when building MessageTemplateSummary",
                )
            })?,
            created_time: self.created_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_time",
                    "created_time was not specified but it is required when building MessageTemplateSummary",
                )
            })?,
            last_modified_time: self.last_modified_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_modified_time",
                    "last_modified_time was not specified but it is required when building MessageTemplateSummary",
                )
            })?,
            last_modified_by: self.last_modified_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_modified_by",
                    "last_modified_by was not specified but it is required when building MessageTemplateSummary",
                )
            })?,
            active_version_number: self.active_version_number,
            description: self.description,
            tags: self.tags,
        })
    }
}
