// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The body to use in email messages.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EmailMessageTemplateContentBody {
    /// <p>The message body, in plain text format, to use in email messages that are based on the message template. We recommend using plain text format for email clients that don't render HTML content and clients that are connected to high-latency networks, such as mobile devices.</p>
    pub plain_text: ::std::option::Option<crate::types::MessageTemplateBodyContentProvider>,
    /// <p>The message body, in HTML format, to use in email messages that are based on the message template. We recommend using HTML format for email clients that render HTML content. You can include links, formatted text, and more in an HTML message.</p>
    pub html: ::std::option::Option<crate::types::MessageTemplateBodyContentProvider>,
}
impl EmailMessageTemplateContentBody {
    /// <p>The message body, in plain text format, to use in email messages that are based on the message template. We recommend using plain text format for email clients that don't render HTML content and clients that are connected to high-latency networks, such as mobile devices.</p>
    pub fn plain_text(&self) -> ::std::option::Option<&crate::types::MessageTemplateBodyContentProvider> {
        self.plain_text.as_ref()
    }
    /// <p>The message body, in HTML format, to use in email messages that are based on the message template. We recommend using HTML format for email clients that render HTML content. You can include links, formatted text, and more in an HTML message.</p>
    pub fn html(&self) -> ::std::option::Option<&crate::types::MessageTemplateBodyContentProvider> {
        self.html.as_ref()
    }
}
impl EmailMessageTemplateContentBody {
    /// Creates a new builder-style object to manufacture [`EmailMessageTemplateContentBody`](crate::types::EmailMessageTemplateContentBody).
    pub fn builder() -> crate::types::builders::EmailMessageTemplateContentBodyBuilder {
        crate::types::builders::EmailMessageTemplateContentBodyBuilder::default()
    }
}

/// A builder for [`EmailMessageTemplateContentBody`](crate::types::EmailMessageTemplateContentBody).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EmailMessageTemplateContentBodyBuilder {
    pub(crate) plain_text: ::std::option::Option<crate::types::MessageTemplateBodyContentProvider>,
    pub(crate) html: ::std::option::Option<crate::types::MessageTemplateBodyContentProvider>,
}
impl EmailMessageTemplateContentBodyBuilder {
    /// <p>The message body, in plain text format, to use in email messages that are based on the message template. We recommend using plain text format for email clients that don't render HTML content and clients that are connected to high-latency networks, such as mobile devices.</p>
    pub fn plain_text(mut self, input: crate::types::MessageTemplateBodyContentProvider) -> Self {
        self.plain_text = ::std::option::Option::Some(input);
        self
    }
    /// <p>The message body, in plain text format, to use in email messages that are based on the message template. We recommend using plain text format for email clients that don't render HTML content and clients that are connected to high-latency networks, such as mobile devices.</p>
    pub fn set_plain_text(mut self, input: ::std::option::Option<crate::types::MessageTemplateBodyContentProvider>) -> Self {
        self.plain_text = input;
        self
    }
    /// <p>The message body, in plain text format, to use in email messages that are based on the message template. We recommend using plain text format for email clients that don't render HTML content and clients that are connected to high-latency networks, such as mobile devices.</p>
    pub fn get_plain_text(&self) -> &::std::option::Option<crate::types::MessageTemplateBodyContentProvider> {
        &self.plain_text
    }
    /// <p>The message body, in HTML format, to use in email messages that are based on the message template. We recommend using HTML format for email clients that render HTML content. You can include links, formatted text, and more in an HTML message.</p>
    pub fn html(mut self, input: crate::types::MessageTemplateBodyContentProvider) -> Self {
        self.html = ::std::option::Option::Some(input);
        self
    }
    /// <p>The message body, in HTML format, to use in email messages that are based on the message template. We recommend using HTML format for email clients that render HTML content. You can include links, formatted text, and more in an HTML message.</p>
    pub fn set_html(mut self, input: ::std::option::Option<crate::types::MessageTemplateBodyContentProvider>) -> Self {
        self.html = input;
        self
    }
    /// <p>The message body, in HTML format, to use in email messages that are based on the message template. We recommend using HTML format for email clients that render HTML content. You can include links, formatted text, and more in an HTML message.</p>
    pub fn get_html(&self) -> &::std::option::Option<crate::types::MessageTemplateBodyContentProvider> {
        &self.html
    }
    /// Consumes the builder and constructs a [`EmailMessageTemplateContentBody`](crate::types::EmailMessageTemplateContentBody).
    pub fn build(self) -> crate::types::EmailMessageTemplateContentBody {
        crate::types::EmailMessageTemplateContentBody {
            plain_text: self.plain_text,
            html: self.html,
        }
    }
}
