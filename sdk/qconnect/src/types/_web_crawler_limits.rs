// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of crawl limits for the web URLs.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WebCrawlerLimits {
    /// <p>Rate of web URLs retrieved per minute.</p>
    pub rate_limit: ::std::option::Option<i32>,
}
impl WebCrawlerLimits {
    /// <p>Rate of web URLs retrieved per minute.</p>
    pub fn rate_limit(&self) -> ::std::option::Option<i32> {
        self.rate_limit
    }
}
impl WebCrawlerLimits {
    /// Creates a new builder-style object to manufacture [`WebCrawlerLimits`](crate::types::WebCrawlerLimits).
    pub fn builder() -> crate::types::builders::WebCrawlerLimitsBuilder {
        crate::types::builders::WebCrawlerLimitsBuilder::default()
    }
}

/// A builder for [`WebCrawlerLimits`](crate::types::WebCrawlerLimits).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WebCrawlerLimitsBuilder {
    pub(crate) rate_limit: ::std::option::Option<i32>,
}
impl WebCrawlerLimitsBuilder {
    /// <p>Rate of web URLs retrieved per minute.</p>
    pub fn rate_limit(mut self, input: i32) -> Self {
        self.rate_limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>Rate of web URLs retrieved per minute.</p>
    pub fn set_rate_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.rate_limit = input;
        self
    }
    /// <p>Rate of web URLs retrieved per minute.</p>
    pub fn get_rate_limit(&self) -> &::std::option::Option<i32> {
        &self.rate_limit
    }
    /// Consumes the builder and constructs a [`WebCrawlerLimits`](crate::types::WebCrawlerLimits).
    pub fn build(self) -> crate::types::WebCrawlerLimits {
        crate::types::WebCrawlerLimits { rate_limit: self.rate_limit }
    }
}
