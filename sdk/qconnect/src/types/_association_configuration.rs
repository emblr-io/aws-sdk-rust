// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for an Amazon Q in Connect Assistant Association.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociationConfiguration {
    /// <p>The identifier of the association for this Association Configuration.</p>
    pub association_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of the association for this Association Configuration.</p>
    pub association_type: ::std::option::Option<crate::types::AiAgentAssociationConfigurationType>,
    /// <p>The data of the configuration for an Amazon Q in Connect Assistant Association.</p>
    pub association_configuration_data: ::std::option::Option<crate::types::AssociationConfigurationData>,
}
impl AssociationConfiguration {
    /// <p>The identifier of the association for this Association Configuration.</p>
    pub fn association_id(&self) -> ::std::option::Option<&str> {
        self.association_id.as_deref()
    }
    /// <p>The type of the association for this Association Configuration.</p>
    pub fn association_type(&self) -> ::std::option::Option<&crate::types::AiAgentAssociationConfigurationType> {
        self.association_type.as_ref()
    }
    /// <p>The data of the configuration for an Amazon Q in Connect Assistant Association.</p>
    pub fn association_configuration_data(&self) -> ::std::option::Option<&crate::types::AssociationConfigurationData> {
        self.association_configuration_data.as_ref()
    }
}
impl AssociationConfiguration {
    /// Creates a new builder-style object to manufacture [`AssociationConfiguration`](crate::types::AssociationConfiguration).
    pub fn builder() -> crate::types::builders::AssociationConfigurationBuilder {
        crate::types::builders::AssociationConfigurationBuilder::default()
    }
}

/// A builder for [`AssociationConfiguration`](crate::types::AssociationConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssociationConfigurationBuilder {
    pub(crate) association_id: ::std::option::Option<::std::string::String>,
    pub(crate) association_type: ::std::option::Option<crate::types::AiAgentAssociationConfigurationType>,
    pub(crate) association_configuration_data: ::std::option::Option<crate::types::AssociationConfigurationData>,
}
impl AssociationConfigurationBuilder {
    /// <p>The identifier of the association for this Association Configuration.</p>
    pub fn association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the association for this Association Configuration.</p>
    pub fn set_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.association_id = input;
        self
    }
    /// <p>The identifier of the association for this Association Configuration.</p>
    pub fn get_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.association_id
    }
    /// <p>The type of the association for this Association Configuration.</p>
    pub fn association_type(mut self, input: crate::types::AiAgentAssociationConfigurationType) -> Self {
        self.association_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the association for this Association Configuration.</p>
    pub fn set_association_type(mut self, input: ::std::option::Option<crate::types::AiAgentAssociationConfigurationType>) -> Self {
        self.association_type = input;
        self
    }
    /// <p>The type of the association for this Association Configuration.</p>
    pub fn get_association_type(&self) -> &::std::option::Option<crate::types::AiAgentAssociationConfigurationType> {
        &self.association_type
    }
    /// <p>The data of the configuration for an Amazon Q in Connect Assistant Association.</p>
    pub fn association_configuration_data(mut self, input: crate::types::AssociationConfigurationData) -> Self {
        self.association_configuration_data = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data of the configuration for an Amazon Q in Connect Assistant Association.</p>
    pub fn set_association_configuration_data(mut self, input: ::std::option::Option<crate::types::AssociationConfigurationData>) -> Self {
        self.association_configuration_data = input;
        self
    }
    /// <p>The data of the configuration for an Amazon Q in Connect Assistant Association.</p>
    pub fn get_association_configuration_data(&self) -> &::std::option::Option<crate::types::AssociationConfigurationData> {
        &self.association_configuration_data
    }
    /// Consumes the builder and constructs a [`AssociationConfiguration`](crate::types::AssociationConfiguration).
    pub fn build(self) -> crate::types::AssociationConfiguration {
        crate::types::AssociationConfiguration {
            association_id: self.association_id,
            association_type: self.association_type,
            association_configuration_data: self.association_configuration_data,
        }
    }
}
