// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The body to use in SMS messages.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SmsMessageTemplateContentBody {
    /// <p>The message body to use in SMS messages.</p>
    pub plain_text: ::std::option::Option<crate::types::MessageTemplateBodyContentProvider>,
}
impl SmsMessageTemplateContentBody {
    /// <p>The message body to use in SMS messages.</p>
    pub fn plain_text(&self) -> ::std::option::Option<&crate::types::MessageTemplateBodyContentProvider> {
        self.plain_text.as_ref()
    }
}
impl SmsMessageTemplateContentBody {
    /// Creates a new builder-style object to manufacture [`SmsMessageTemplateContentBody`](crate::types::SmsMessageTemplateContentBody).
    pub fn builder() -> crate::types::builders::SmsMessageTemplateContentBodyBuilder {
        crate::types::builders::SmsMessageTemplateContentBodyBuilder::default()
    }
}

/// A builder for [`SmsMessageTemplateContentBody`](crate::types::SmsMessageTemplateContentBody).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SmsMessageTemplateContentBodyBuilder {
    pub(crate) plain_text: ::std::option::Option<crate::types::MessageTemplateBodyContentProvider>,
}
impl SmsMessageTemplateContentBodyBuilder {
    /// <p>The message body to use in SMS messages.</p>
    pub fn plain_text(mut self, input: crate::types::MessageTemplateBodyContentProvider) -> Self {
        self.plain_text = ::std::option::Option::Some(input);
        self
    }
    /// <p>The message body to use in SMS messages.</p>
    pub fn set_plain_text(mut self, input: ::std::option::Option<crate::types::MessageTemplateBodyContentProvider>) -> Self {
        self.plain_text = input;
        self
    }
    /// <p>The message body to use in SMS messages.</p>
    pub fn get_plain_text(&self) -> &::std::option::Option<crate::types::MessageTemplateBodyContentProvider> {
        &self.plain_text
    }
    /// Consumes the builder and constructs a [`SmsMessageTemplateContentBody`](crate::types::SmsMessageTemplateContentBody).
    pub fn build(self) -> crate::types::SmsMessageTemplateContentBody {
        crate::types::SmsMessageTemplateContentBody { plain_text: self.plain_text }
    }
}
