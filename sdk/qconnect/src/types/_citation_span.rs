// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about where the text with a citation begins and ends in the generated output.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CitationSpan {
    /// <p>Where the text with a citation starts in the generated output.</p>
    pub begin_offset_inclusive: i32,
    /// <p>Where the text with a citation ends in the generated output.</p>
    pub end_offset_exclusive: i32,
}
impl CitationSpan {
    /// <p>Where the text with a citation starts in the generated output.</p>
    pub fn begin_offset_inclusive(&self) -> i32 {
        self.begin_offset_inclusive
    }
    /// <p>Where the text with a citation ends in the generated output.</p>
    pub fn end_offset_exclusive(&self) -> i32 {
        self.end_offset_exclusive
    }
}
impl CitationSpan {
    /// Creates a new builder-style object to manufacture [`CitationSpan`](crate::types::CitationSpan).
    pub fn builder() -> crate::types::builders::CitationSpanBuilder {
        crate::types::builders::CitationSpanBuilder::default()
    }
}

/// A builder for [`CitationSpan`](crate::types::CitationSpan).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CitationSpanBuilder {
    pub(crate) begin_offset_inclusive: ::std::option::Option<i32>,
    pub(crate) end_offset_exclusive: ::std::option::Option<i32>,
}
impl CitationSpanBuilder {
    /// <p>Where the text with a citation starts in the generated output.</p>
    pub fn begin_offset_inclusive(mut self, input: i32) -> Self {
        self.begin_offset_inclusive = ::std::option::Option::Some(input);
        self
    }
    /// <p>Where the text with a citation starts in the generated output.</p>
    pub fn set_begin_offset_inclusive(mut self, input: ::std::option::Option<i32>) -> Self {
        self.begin_offset_inclusive = input;
        self
    }
    /// <p>Where the text with a citation starts in the generated output.</p>
    pub fn get_begin_offset_inclusive(&self) -> &::std::option::Option<i32> {
        &self.begin_offset_inclusive
    }
    /// <p>Where the text with a citation ends in the generated output.</p>
    pub fn end_offset_exclusive(mut self, input: i32) -> Self {
        self.end_offset_exclusive = ::std::option::Option::Some(input);
        self
    }
    /// <p>Where the text with a citation ends in the generated output.</p>
    pub fn set_end_offset_exclusive(mut self, input: ::std::option::Option<i32>) -> Self {
        self.end_offset_exclusive = input;
        self
    }
    /// <p>Where the text with a citation ends in the generated output.</p>
    pub fn get_end_offset_exclusive(&self) -> &::std::option::Option<i32> {
        &self.end_offset_exclusive
    }
    /// Consumes the builder and constructs a [`CitationSpan`](crate::types::CitationSpan).
    pub fn build(self) -> crate::types::CitationSpan {
        crate::types::CitationSpan {
            begin_offset_inclusive: self.begin_offset_inclusive.unwrap_or_default(),
            end_offset_exclusive: self.end_offset_exclusive.unwrap_or_default(),
        }
    }
}
