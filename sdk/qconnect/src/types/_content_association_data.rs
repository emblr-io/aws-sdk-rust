// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the content association.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContentAssociationData {
    /// <p>The identifier of the knowledge base.</p>
    pub knowledge_base_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub knowledge_base_arn: ::std::string::String,
    /// <p>The identifier of the content.</p>
    pub content_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the content.</p>
    pub content_arn: ::std::string::String,
    /// <p>The identifier of the content association. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub content_association_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the content association.</p>
    pub content_association_arn: ::std::string::String,
    /// <p>The type of association.</p>
    pub association_type: crate::types::ContentAssociationType,
    /// <p>The content association.</p>
    pub association_data: ::std::option::Option<crate::types::ContentAssociationContents>,
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ContentAssociationData {
    /// <p>The identifier of the knowledge base.</p>
    pub fn knowledge_base_id(&self) -> &str {
        use std::ops::Deref;
        self.knowledge_base_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn knowledge_base_arn(&self) -> &str {
        use std::ops::Deref;
        self.knowledge_base_arn.deref()
    }
    /// <p>The identifier of the content.</p>
    pub fn content_id(&self) -> &str {
        use std::ops::Deref;
        self.content_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the content.</p>
    pub fn content_arn(&self) -> &str {
        use std::ops::Deref;
        self.content_arn.deref()
    }
    /// <p>The identifier of the content association. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn content_association_id(&self) -> &str {
        use std::ops::Deref;
        self.content_association_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the content association.</p>
    pub fn content_association_arn(&self) -> &str {
        use std::ops::Deref;
        self.content_association_arn.deref()
    }
    /// <p>The type of association.</p>
    pub fn association_type(&self) -> &crate::types::ContentAssociationType {
        &self.association_type
    }
    /// <p>The content association.</p>
    pub fn association_data(&self) -> ::std::option::Option<&crate::types::ContentAssociationContents> {
        self.association_data.as_ref()
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ContentAssociationData {
    /// Creates a new builder-style object to manufacture [`ContentAssociationData`](crate::types::ContentAssociationData).
    pub fn builder() -> crate::types::builders::ContentAssociationDataBuilder {
        crate::types::builders::ContentAssociationDataBuilder::default()
    }
}

/// A builder for [`ContentAssociationData`](crate::types::ContentAssociationData).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContentAssociationDataBuilder {
    pub(crate) knowledge_base_id: ::std::option::Option<::std::string::String>,
    pub(crate) knowledge_base_arn: ::std::option::Option<::std::string::String>,
    pub(crate) content_id: ::std::option::Option<::std::string::String>,
    pub(crate) content_arn: ::std::option::Option<::std::string::String>,
    pub(crate) content_association_id: ::std::option::Option<::std::string::String>,
    pub(crate) content_association_arn: ::std::option::Option<::std::string::String>,
    pub(crate) association_type: ::std::option::Option<crate::types::ContentAssociationType>,
    pub(crate) association_data: ::std::option::Option<crate::types::ContentAssociationContents>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ContentAssociationDataBuilder {
    /// <p>The identifier of the knowledge base.</p>
    /// This field is required.
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the knowledge base.</p>
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// <p>The identifier of the knowledge base.</p>
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_id
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    /// This field is required.
    pub fn knowledge_base_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn set_knowledge_base_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn get_knowledge_base_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_arn
    }
    /// <p>The identifier of the content.</p>
    /// This field is required.
    pub fn content_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the content.</p>
    pub fn set_content_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_id = input;
        self
    }
    /// <p>The identifier of the content.</p>
    pub fn get_content_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_id
    }
    /// <p>The Amazon Resource Name (ARN) of the content.</p>
    /// This field is required.
    pub fn content_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the content.</p>
    pub fn set_content_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the content.</p>
    pub fn get_content_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_arn
    }
    /// <p>The identifier of the content association. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    /// This field is required.
    pub fn content_association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the content association. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn set_content_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_association_id = input;
        self
    }
    /// <p>The identifier of the content association. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn get_content_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_association_id
    }
    /// <p>The Amazon Resource Name (ARN) of the content association.</p>
    /// This field is required.
    pub fn content_association_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_association_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the content association.</p>
    pub fn set_content_association_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_association_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the content association.</p>
    pub fn get_content_association_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_association_arn
    }
    /// <p>The type of association.</p>
    /// This field is required.
    pub fn association_type(mut self, input: crate::types::ContentAssociationType) -> Self {
        self.association_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of association.</p>
    pub fn set_association_type(mut self, input: ::std::option::Option<crate::types::ContentAssociationType>) -> Self {
        self.association_type = input;
        self
    }
    /// <p>The type of association.</p>
    pub fn get_association_type(&self) -> &::std::option::Option<crate::types::ContentAssociationType> {
        &self.association_type
    }
    /// <p>The content association.</p>
    /// This field is required.
    pub fn association_data(mut self, input: crate::types::ContentAssociationContents) -> Self {
        self.association_data = ::std::option::Option::Some(input);
        self
    }
    /// <p>The content association.</p>
    pub fn set_association_data(mut self, input: ::std::option::Option<crate::types::ContentAssociationContents>) -> Self {
        self.association_data = input;
        self
    }
    /// <p>The content association.</p>
    pub fn get_association_data(&self) -> &::std::option::Option<crate::types::ContentAssociationContents> {
        &self.association_data
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`ContentAssociationData`](crate::types::ContentAssociationData).
    /// This method will fail if any of the following fields are not set:
    /// - [`knowledge_base_id`](crate::types::builders::ContentAssociationDataBuilder::knowledge_base_id)
    /// - [`knowledge_base_arn`](crate::types::builders::ContentAssociationDataBuilder::knowledge_base_arn)
    /// - [`content_id`](crate::types::builders::ContentAssociationDataBuilder::content_id)
    /// - [`content_arn`](crate::types::builders::ContentAssociationDataBuilder::content_arn)
    /// - [`content_association_id`](crate::types::builders::ContentAssociationDataBuilder::content_association_id)
    /// - [`content_association_arn`](crate::types::builders::ContentAssociationDataBuilder::content_association_arn)
    /// - [`association_type`](crate::types::builders::ContentAssociationDataBuilder::association_type)
    pub fn build(self) -> ::std::result::Result<crate::types::ContentAssociationData, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ContentAssociationData {
            knowledge_base_id: self.knowledge_base_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "knowledge_base_id",
                    "knowledge_base_id was not specified but it is required when building ContentAssociationData",
                )
            })?,
            knowledge_base_arn: self.knowledge_base_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "knowledge_base_arn",
                    "knowledge_base_arn was not specified but it is required when building ContentAssociationData",
                )
            })?,
            content_id: self.content_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content_id",
                    "content_id was not specified but it is required when building ContentAssociationData",
                )
            })?,
            content_arn: self.content_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content_arn",
                    "content_arn was not specified but it is required when building ContentAssociationData",
                )
            })?,
            content_association_id: self.content_association_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content_association_id",
                    "content_association_id was not specified but it is required when building ContentAssociationData",
                )
            })?,
            content_association_arn: self.content_association_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content_association_arn",
                    "content_association_arn was not specified but it is required when building ContentAssociationData",
                )
            })?,
            association_type: self.association_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "association_type",
                    "association_type was not specified but it is required when building ContentAssociationData",
                )
            })?,
            association_data: self.association_data,
            tags: self.tags,
        })
    }
}
