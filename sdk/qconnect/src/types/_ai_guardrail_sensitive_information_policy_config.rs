// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about PII entities and regular expressions to configure for the AI Guardrail.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AiGuardrailSensitiveInformationPolicyConfig {
    /// <p>A list of PII entities to configure to the AI Guardrail.</p>
    pub pii_entities_config: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailPiiEntityConfig>>,
    /// <p>A list of regular expressions to configure to the AI Guardrail.</p>
    pub regexes_config: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailRegexConfig>>,
}
impl AiGuardrailSensitiveInformationPolicyConfig {
    /// <p>A list of PII entities to configure to the AI Guardrail.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.pii_entities_config.is_none()`.
    pub fn pii_entities_config(&self) -> &[crate::types::GuardrailPiiEntityConfig] {
        self.pii_entities_config.as_deref().unwrap_or_default()
    }
    /// <p>A list of regular expressions to configure to the AI Guardrail.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.regexes_config.is_none()`.
    pub fn regexes_config(&self) -> &[crate::types::GuardrailRegexConfig] {
        self.regexes_config.as_deref().unwrap_or_default()
    }
}
impl AiGuardrailSensitiveInformationPolicyConfig {
    /// Creates a new builder-style object to manufacture [`AiGuardrailSensitiveInformationPolicyConfig`](crate::types::AiGuardrailSensitiveInformationPolicyConfig).
    pub fn builder() -> crate::types::builders::AiGuardrailSensitiveInformationPolicyConfigBuilder {
        crate::types::builders::AiGuardrailSensitiveInformationPolicyConfigBuilder::default()
    }
}

/// A builder for [`AiGuardrailSensitiveInformationPolicyConfig`](crate::types::AiGuardrailSensitiveInformationPolicyConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AiGuardrailSensitiveInformationPolicyConfigBuilder {
    pub(crate) pii_entities_config: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailPiiEntityConfig>>,
    pub(crate) regexes_config: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailRegexConfig>>,
}
impl AiGuardrailSensitiveInformationPolicyConfigBuilder {
    /// Appends an item to `pii_entities_config`.
    ///
    /// To override the contents of this collection use [`set_pii_entities_config`](Self::set_pii_entities_config).
    ///
    /// <p>A list of PII entities to configure to the AI Guardrail.</p>
    pub fn pii_entities_config(mut self, input: crate::types::GuardrailPiiEntityConfig) -> Self {
        let mut v = self.pii_entities_config.unwrap_or_default();
        v.push(input);
        self.pii_entities_config = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of PII entities to configure to the AI Guardrail.</p>
    pub fn set_pii_entities_config(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailPiiEntityConfig>>) -> Self {
        self.pii_entities_config = input;
        self
    }
    /// <p>A list of PII entities to configure to the AI Guardrail.</p>
    pub fn get_pii_entities_config(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GuardrailPiiEntityConfig>> {
        &self.pii_entities_config
    }
    /// Appends an item to `regexes_config`.
    ///
    /// To override the contents of this collection use [`set_regexes_config`](Self::set_regexes_config).
    ///
    /// <p>A list of regular expressions to configure to the AI Guardrail.</p>
    pub fn regexes_config(mut self, input: crate::types::GuardrailRegexConfig) -> Self {
        let mut v = self.regexes_config.unwrap_or_default();
        v.push(input);
        self.regexes_config = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of regular expressions to configure to the AI Guardrail.</p>
    pub fn set_regexes_config(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailRegexConfig>>) -> Self {
        self.regexes_config = input;
        self
    }
    /// <p>A list of regular expressions to configure to the AI Guardrail.</p>
    pub fn get_regexes_config(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GuardrailRegexConfig>> {
        &self.regexes_config
    }
    /// Consumes the builder and constructs a [`AiGuardrailSensitiveInformationPolicyConfig`](crate::types::AiGuardrailSensitiveInformationPolicyConfig).
    pub fn build(self) -> crate::types::AiGuardrailSensitiveInformationPolicyConfig {
        crate::types::AiGuardrailSensitiveInformationPolicyConfig {
            pii_entities_config: self.pii_entities_config,
            regexes_config: self.regexes_config,
        }
    }
}
