// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of the AI Guardrail.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AiGuardrailSummary {
    /// <p>The name of the AI Guardrail.</p>
    pub name: ::std::string::String,
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub assistant_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q in Connect assistant.</p>
    pub assistant_arn: ::std::string::String,
    /// <p>The identifier of the Amazon Q in Connect AI Guardrail.</p>
    pub ai_guardrail_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the AI Guardrail.</p>
    pub ai_guardrail_arn: ::std::string::String,
    /// <p>The time the AI Guardrail was last modified.</p>
    pub modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The visibility status of the AI Guardrail.</p>
    pub visibility_status: crate::types::VisibilityStatus,
    /// <p>A description of the AI Guardrail.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The status of the AI Guardrail.</p>
    pub status: ::std::option::Option<crate::types::Status>,
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl AiGuardrailSummary {
    /// <p>The name of the AI Guardrail.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn assistant_id(&self) -> &str {
        use std::ops::Deref;
        self.assistant_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q in Connect assistant.</p>
    pub fn assistant_arn(&self) -> &str {
        use std::ops::Deref;
        self.assistant_arn.deref()
    }
    /// <p>The identifier of the Amazon Q in Connect AI Guardrail.</p>
    pub fn ai_guardrail_id(&self) -> &str {
        use std::ops::Deref;
        self.ai_guardrail_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the AI Guardrail.</p>
    pub fn ai_guardrail_arn(&self) -> &str {
        use std::ops::Deref;
        self.ai_guardrail_arn.deref()
    }
    /// <p>The time the AI Guardrail was last modified.</p>
    pub fn modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.modified_time.as_ref()
    }
    /// <p>The visibility status of the AI Guardrail.</p>
    pub fn visibility_status(&self) -> &crate::types::VisibilityStatus {
        &self.visibility_status
    }
    /// <p>A description of the AI Guardrail.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The status of the AI Guardrail.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for AiGuardrailSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AiGuardrailSummary");
        formatter.field("name", &self.name);
        formatter.field("assistant_id", &self.assistant_id);
        formatter.field("assistant_arn", &self.assistant_arn);
        formatter.field("ai_guardrail_id", &self.ai_guardrail_id);
        formatter.field("ai_guardrail_arn", &self.ai_guardrail_arn);
        formatter.field("modified_time", &self.modified_time);
        formatter.field("visibility_status", &self.visibility_status);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl AiGuardrailSummary {
    /// Creates a new builder-style object to manufacture [`AiGuardrailSummary`](crate::types::AiGuardrailSummary).
    pub fn builder() -> crate::types::builders::AiGuardrailSummaryBuilder {
        crate::types::builders::AiGuardrailSummaryBuilder::default()
    }
}

/// A builder for [`AiGuardrailSummary`](crate::types::AiGuardrailSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AiGuardrailSummaryBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) assistant_id: ::std::option::Option<::std::string::String>,
    pub(crate) assistant_arn: ::std::option::Option<::std::string::String>,
    pub(crate) ai_guardrail_id: ::std::option::Option<::std::string::String>,
    pub(crate) ai_guardrail_arn: ::std::option::Option<::std::string::String>,
    pub(crate) modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) visibility_status: ::std::option::Option<crate::types::VisibilityStatus>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::Status>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl AiGuardrailSummaryBuilder {
    /// <p>The name of the AI Guardrail.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the AI Guardrail.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the AI Guardrail.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    /// This field is required.
    pub fn assistant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.assistant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn set_assistant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.assistant_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn get_assistant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.assistant_id
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q in Connect assistant.</p>
    /// This field is required.
    pub fn assistant_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.assistant_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q in Connect assistant.</p>
    pub fn set_assistant_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.assistant_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q in Connect assistant.</p>
    pub fn get_assistant_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.assistant_arn
    }
    /// <p>The identifier of the Amazon Q in Connect AI Guardrail.</p>
    /// This field is required.
    pub fn ai_guardrail_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ai_guardrail_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q in Connect AI Guardrail.</p>
    pub fn set_ai_guardrail_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ai_guardrail_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q in Connect AI Guardrail.</p>
    pub fn get_ai_guardrail_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ai_guardrail_id
    }
    /// <p>The Amazon Resource Name (ARN) of the AI Guardrail.</p>
    /// This field is required.
    pub fn ai_guardrail_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ai_guardrail_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AI Guardrail.</p>
    pub fn set_ai_guardrail_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ai_guardrail_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AI Guardrail.</p>
    pub fn get_ai_guardrail_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.ai_guardrail_arn
    }
    /// <p>The time the AI Guardrail was last modified.</p>
    pub fn modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the AI Guardrail was last modified.</p>
    pub fn set_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modified_time = input;
        self
    }
    /// <p>The time the AI Guardrail was last modified.</p>
    pub fn get_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modified_time
    }
    /// <p>The visibility status of the AI Guardrail.</p>
    /// This field is required.
    pub fn visibility_status(mut self, input: crate::types::VisibilityStatus) -> Self {
        self.visibility_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The visibility status of the AI Guardrail.</p>
    pub fn set_visibility_status(mut self, input: ::std::option::Option<crate::types::VisibilityStatus>) -> Self {
        self.visibility_status = input;
        self
    }
    /// <p>The visibility status of the AI Guardrail.</p>
    pub fn get_visibility_status(&self) -> &::std::option::Option<crate::types::VisibilityStatus> {
        &self.visibility_status
    }
    /// <p>A description of the AI Guardrail.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the AI Guardrail.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the AI Guardrail.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The status of the AI Guardrail.</p>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the AI Guardrail.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the AI Guardrail.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::Status> {
        &self.status
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`AiGuardrailSummary`](crate::types::AiGuardrailSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::AiGuardrailSummaryBuilder::name)
    /// - [`assistant_id`](crate::types::builders::AiGuardrailSummaryBuilder::assistant_id)
    /// - [`assistant_arn`](crate::types::builders::AiGuardrailSummaryBuilder::assistant_arn)
    /// - [`ai_guardrail_id`](crate::types::builders::AiGuardrailSummaryBuilder::ai_guardrail_id)
    /// - [`ai_guardrail_arn`](crate::types::builders::AiGuardrailSummaryBuilder::ai_guardrail_arn)
    /// - [`visibility_status`](crate::types::builders::AiGuardrailSummaryBuilder::visibility_status)
    pub fn build(self) -> ::std::result::Result<crate::types::AiGuardrailSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AiGuardrailSummary {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AiGuardrailSummary",
                )
            })?,
            assistant_id: self.assistant_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "assistant_id",
                    "assistant_id was not specified but it is required when building AiGuardrailSummary",
                )
            })?,
            assistant_arn: self.assistant_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "assistant_arn",
                    "assistant_arn was not specified but it is required when building AiGuardrailSummary",
                )
            })?,
            ai_guardrail_id: self.ai_guardrail_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ai_guardrail_id",
                    "ai_guardrail_id was not specified but it is required when building AiGuardrailSummary",
                )
            })?,
            ai_guardrail_arn: self.ai_guardrail_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ai_guardrail_arn",
                    "ai_guardrail_arn was not specified but it is required when building AiGuardrailSummary",
                )
            })?,
            modified_time: self.modified_time,
            visibility_status: self.visibility_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "visibility_status",
                    "visibility_status was not specified but it is required when building AiGuardrailSummary",
                )
            })?,
            description: self.description,
            status: self.status,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for AiGuardrailSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AiGuardrailSummaryBuilder");
        formatter.field("name", &self.name);
        formatter.field("assistant_id", &self.assistant_id);
        formatter.field("assistant_arn", &self.assistant_arn);
        formatter.field("ai_guardrail_id", &self.ai_guardrail_id);
        formatter.field("ai_guardrail_arn", &self.ai_guardrail_arn);
        formatter.field("modified_time", &self.modified_time);
        formatter.field("visibility_status", &self.visibility_status);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
