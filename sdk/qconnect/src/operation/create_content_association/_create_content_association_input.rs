// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateContentAssociationInput {
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the knowledge base.</p>
    pub knowledge_base_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the content.</p>
    pub content_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of association.</p>
    pub association_type: ::std::option::Option<crate::types::ContentAssociationType>,
    /// <p>The identifier of the associated resource.</p>
    pub association: ::std::option::Option<crate::types::ContentAssociationContents>,
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateContentAssociationInput {
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The identifier of the knowledge base.</p>
    pub fn knowledge_base_id(&self) -> ::std::option::Option<&str> {
        self.knowledge_base_id.as_deref()
    }
    /// <p>The identifier of the content.</p>
    pub fn content_id(&self) -> ::std::option::Option<&str> {
        self.content_id.as_deref()
    }
    /// <p>The type of association.</p>
    pub fn association_type(&self) -> ::std::option::Option<&crate::types::ContentAssociationType> {
        self.association_type.as_ref()
    }
    /// <p>The identifier of the associated resource.</p>
    pub fn association(&self) -> ::std::option::Option<&crate::types::ContentAssociationContents> {
        self.association.as_ref()
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateContentAssociationInput {
    /// Creates a new builder-style object to manufacture [`CreateContentAssociationInput`](crate::operation::create_content_association::CreateContentAssociationInput).
    pub fn builder() -> crate::operation::create_content_association::builders::CreateContentAssociationInputBuilder {
        crate::operation::create_content_association::builders::CreateContentAssociationInputBuilder::default()
    }
}

/// A builder for [`CreateContentAssociationInput`](crate::operation::create_content_association::CreateContentAssociationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateContentAssociationInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) knowledge_base_id: ::std::option::Option<::std::string::String>,
    pub(crate) content_id: ::std::option::Option<::std::string::String>,
    pub(crate) association_type: ::std::option::Option<crate::types::ContentAssociationType>,
    pub(crate) association: ::std::option::Option<crate::types::ContentAssociationContents>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateContentAssociationInputBuilder {
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The identifier of the knowledge base.</p>
    /// This field is required.
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the knowledge base.</p>
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// <p>The identifier of the knowledge base.</p>
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_id
    }
    /// <p>The identifier of the content.</p>
    /// This field is required.
    pub fn content_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the content.</p>
    pub fn set_content_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_id = input;
        self
    }
    /// <p>The identifier of the content.</p>
    pub fn get_content_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_id
    }
    /// <p>The type of association.</p>
    /// This field is required.
    pub fn association_type(mut self, input: crate::types::ContentAssociationType) -> Self {
        self.association_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of association.</p>
    pub fn set_association_type(mut self, input: ::std::option::Option<crate::types::ContentAssociationType>) -> Self {
        self.association_type = input;
        self
    }
    /// <p>The type of association.</p>
    pub fn get_association_type(&self) -> &::std::option::Option<crate::types::ContentAssociationType> {
        &self.association_type
    }
    /// <p>The identifier of the associated resource.</p>
    /// This field is required.
    pub fn association(mut self, input: crate::types::ContentAssociationContents) -> Self {
        self.association = ::std::option::Option::Some(input);
        self
    }
    /// <p>The identifier of the associated resource.</p>
    pub fn set_association(mut self, input: ::std::option::Option<crate::types::ContentAssociationContents>) -> Self {
        self.association = input;
        self
    }
    /// <p>The identifier of the associated resource.</p>
    pub fn get_association(&self) -> &::std::option::Option<crate::types::ContentAssociationContents> {
        &self.association
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateContentAssociationInput`](crate::operation::create_content_association::CreateContentAssociationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_content_association::CreateContentAssociationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_content_association::CreateContentAssociationInput {
            client_token: self.client_token,
            knowledge_base_id: self.knowledge_base_id,
            content_id: self.content_id,
            association_type: self.association_type,
            association: self.association,
            tags: self.tags,
        })
    }
}
