// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateAiAgentInput {
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>..</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub assistant_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the Amazon Q in Connect AI Agent.</p>
    pub ai_agent_id: ::std::option::Option<::std::string::String>,
    /// <p>The visbility status of the Amazon Q in Connect AI Agent.</p>
    pub visibility_status: ::std::option::Option<crate::types::VisibilityStatus>,
    /// <p>The configuration of the Amazon Q in Connect AI Agent.</p>
    pub configuration: ::std::option::Option<crate::types::AiAgentConfiguration>,
    /// <p>The description of the Amazon Q in Connect AI Agent.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl UpdateAiAgentInput {
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>..</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn assistant_id(&self) -> ::std::option::Option<&str> {
        self.assistant_id.as_deref()
    }
    /// <p>The identifier of the Amazon Q in Connect AI Agent.</p>
    pub fn ai_agent_id(&self) -> ::std::option::Option<&str> {
        self.ai_agent_id.as_deref()
    }
    /// <p>The visbility status of the Amazon Q in Connect AI Agent.</p>
    pub fn visibility_status(&self) -> ::std::option::Option<&crate::types::VisibilityStatus> {
        self.visibility_status.as_ref()
    }
    /// <p>The configuration of the Amazon Q in Connect AI Agent.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::AiAgentConfiguration> {
        self.configuration.as_ref()
    }
    /// <p>The description of the Amazon Q in Connect AI Agent.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl UpdateAiAgentInput {
    /// Creates a new builder-style object to manufacture [`UpdateAiAgentInput`](crate::operation::update_ai_agent::UpdateAiAgentInput).
    pub fn builder() -> crate::operation::update_ai_agent::builders::UpdateAiAgentInputBuilder {
        crate::operation::update_ai_agent::builders::UpdateAiAgentInputBuilder::default()
    }
}

/// A builder for [`UpdateAiAgentInput`](crate::operation::update_ai_agent::UpdateAiAgentInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateAiAgentInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) assistant_id: ::std::option::Option<::std::string::String>,
    pub(crate) ai_agent_id: ::std::option::Option<::std::string::String>,
    pub(crate) visibility_status: ::std::option::Option<crate::types::VisibilityStatus>,
    pub(crate) configuration: ::std::option::Option<crate::types::AiAgentConfiguration>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl UpdateAiAgentInputBuilder {
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>..</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>..</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>..</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    /// This field is required.
    pub fn assistant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.assistant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn set_assistant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.assistant_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn get_assistant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.assistant_id
    }
    /// <p>The identifier of the Amazon Q in Connect AI Agent.</p>
    /// This field is required.
    pub fn ai_agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ai_agent_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q in Connect AI Agent.</p>
    pub fn set_ai_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ai_agent_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q in Connect AI Agent.</p>
    pub fn get_ai_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ai_agent_id
    }
    /// <p>The visbility status of the Amazon Q in Connect AI Agent.</p>
    /// This field is required.
    pub fn visibility_status(mut self, input: crate::types::VisibilityStatus) -> Self {
        self.visibility_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The visbility status of the Amazon Q in Connect AI Agent.</p>
    pub fn set_visibility_status(mut self, input: ::std::option::Option<crate::types::VisibilityStatus>) -> Self {
        self.visibility_status = input;
        self
    }
    /// <p>The visbility status of the Amazon Q in Connect AI Agent.</p>
    pub fn get_visibility_status(&self) -> &::std::option::Option<crate::types::VisibilityStatus> {
        &self.visibility_status
    }
    /// <p>The configuration of the Amazon Q in Connect AI Agent.</p>
    pub fn configuration(mut self, input: crate::types::AiAgentConfiguration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the Amazon Q in Connect AI Agent.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::AiAgentConfiguration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>The configuration of the Amazon Q in Connect AI Agent.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::AiAgentConfiguration> {
        &self.configuration
    }
    /// <p>The description of the Amazon Q in Connect AI Agent.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the Amazon Q in Connect AI Agent.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the Amazon Q in Connect AI Agent.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`UpdateAiAgentInput`](crate::operation::update_ai_agent::UpdateAiAgentInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_ai_agent::UpdateAiAgentInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_ai_agent::UpdateAiAgentInput {
            client_token: self.client_token,
            assistant_id: self.assistant_id,
            ai_agent_id: self.ai_agent_id,
            visibility_status: self.visibility_status,
            configuration: self.configuration,
            description: self.description,
        })
    }
}
