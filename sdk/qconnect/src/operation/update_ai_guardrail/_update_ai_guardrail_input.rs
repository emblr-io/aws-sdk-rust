// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateAiGuardrailInput {
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>..</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub assistant_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the Amazon Q in Connect AI Guardrail.</p>
    pub ai_guardrail_id: ::std::option::Option<::std::string::String>,
    /// <p>The visibility status of the Amazon Q in Connect AI Guardrail.</p>
    pub visibility_status: ::std::option::Option<crate::types::VisibilityStatus>,
    /// <p>The message to return when the AI Guardrail blocks a prompt.</p>
    pub blocked_input_messaging: ::std::option::Option<::std::string::String>,
    /// <p>The message to return when the AI Guardrail blocks a model response.</p>
    pub blocked_outputs_messaging: ::std::option::Option<::std::string::String>,
    /// <p>A description of the AI Guardrail.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The topic policies to configure for the AI Guardrail.</p>
    pub topic_policy_config: ::std::option::Option<crate::types::AiGuardrailTopicPolicyConfig>,
    /// <p>The content filter policies to configure for the AI Guardrail.</p>
    pub content_policy_config: ::std::option::Option<crate::types::AiGuardrailContentPolicyConfig>,
    /// <p>The word policy you configure for the AI Guardrail.</p>
    pub word_policy_config: ::std::option::Option<crate::types::AiGuardrailWordPolicyConfig>,
    /// <p>The sensitive information policy to configure for the AI Guardrail.</p>
    pub sensitive_information_policy_config: ::std::option::Option<crate::types::AiGuardrailSensitiveInformationPolicyConfig>,
    /// <p>The contextual grounding policy configuration used to create an AI Guardrail.</p>
    pub contextual_grounding_policy_config: ::std::option::Option<crate::types::AiGuardrailContextualGroundingPolicyConfig>,
}
impl UpdateAiGuardrailInput {
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>..</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn assistant_id(&self) -> ::std::option::Option<&str> {
        self.assistant_id.as_deref()
    }
    /// <p>The identifier of the Amazon Q in Connect AI Guardrail.</p>
    pub fn ai_guardrail_id(&self) -> ::std::option::Option<&str> {
        self.ai_guardrail_id.as_deref()
    }
    /// <p>The visibility status of the Amazon Q in Connect AI Guardrail.</p>
    pub fn visibility_status(&self) -> ::std::option::Option<&crate::types::VisibilityStatus> {
        self.visibility_status.as_ref()
    }
    /// <p>The message to return when the AI Guardrail blocks a prompt.</p>
    pub fn blocked_input_messaging(&self) -> ::std::option::Option<&str> {
        self.blocked_input_messaging.as_deref()
    }
    /// <p>The message to return when the AI Guardrail blocks a model response.</p>
    pub fn blocked_outputs_messaging(&self) -> ::std::option::Option<&str> {
        self.blocked_outputs_messaging.as_deref()
    }
    /// <p>A description of the AI Guardrail.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The topic policies to configure for the AI Guardrail.</p>
    pub fn topic_policy_config(&self) -> ::std::option::Option<&crate::types::AiGuardrailTopicPolicyConfig> {
        self.topic_policy_config.as_ref()
    }
    /// <p>The content filter policies to configure for the AI Guardrail.</p>
    pub fn content_policy_config(&self) -> ::std::option::Option<&crate::types::AiGuardrailContentPolicyConfig> {
        self.content_policy_config.as_ref()
    }
    /// <p>The word policy you configure for the AI Guardrail.</p>
    pub fn word_policy_config(&self) -> ::std::option::Option<&crate::types::AiGuardrailWordPolicyConfig> {
        self.word_policy_config.as_ref()
    }
    /// <p>The sensitive information policy to configure for the AI Guardrail.</p>
    pub fn sensitive_information_policy_config(&self) -> ::std::option::Option<&crate::types::AiGuardrailSensitiveInformationPolicyConfig> {
        self.sensitive_information_policy_config.as_ref()
    }
    /// <p>The contextual grounding policy configuration used to create an AI Guardrail.</p>
    pub fn contextual_grounding_policy_config(&self) -> ::std::option::Option<&crate::types::AiGuardrailContextualGroundingPolicyConfig> {
        self.contextual_grounding_policy_config.as_ref()
    }
}
impl ::std::fmt::Debug for UpdateAiGuardrailInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAiGuardrailInput");
        formatter.field("client_token", &self.client_token);
        formatter.field("assistant_id", &self.assistant_id);
        formatter.field("ai_guardrail_id", &self.ai_guardrail_id);
        formatter.field("visibility_status", &self.visibility_status);
        formatter.field("blocked_input_messaging", &"*** Sensitive Data Redacted ***");
        formatter.field("blocked_outputs_messaging", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("topic_policy_config", &self.topic_policy_config);
        formatter.field("content_policy_config", &self.content_policy_config);
        formatter.field("word_policy_config", &self.word_policy_config);
        formatter.field("sensitive_information_policy_config", &self.sensitive_information_policy_config);
        formatter.field("contextual_grounding_policy_config", &self.contextual_grounding_policy_config);
        formatter.finish()
    }
}
impl UpdateAiGuardrailInput {
    /// Creates a new builder-style object to manufacture [`UpdateAiGuardrailInput`](crate::operation::update_ai_guardrail::UpdateAiGuardrailInput).
    pub fn builder() -> crate::operation::update_ai_guardrail::builders::UpdateAiGuardrailInputBuilder {
        crate::operation::update_ai_guardrail::builders::UpdateAiGuardrailInputBuilder::default()
    }
}

/// A builder for [`UpdateAiGuardrailInput`](crate::operation::update_ai_guardrail::UpdateAiGuardrailInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateAiGuardrailInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) assistant_id: ::std::option::Option<::std::string::String>,
    pub(crate) ai_guardrail_id: ::std::option::Option<::std::string::String>,
    pub(crate) visibility_status: ::std::option::Option<crate::types::VisibilityStatus>,
    pub(crate) blocked_input_messaging: ::std::option::Option<::std::string::String>,
    pub(crate) blocked_outputs_messaging: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) topic_policy_config: ::std::option::Option<crate::types::AiGuardrailTopicPolicyConfig>,
    pub(crate) content_policy_config: ::std::option::Option<crate::types::AiGuardrailContentPolicyConfig>,
    pub(crate) word_policy_config: ::std::option::Option<crate::types::AiGuardrailWordPolicyConfig>,
    pub(crate) sensitive_information_policy_config: ::std::option::Option<crate::types::AiGuardrailSensitiveInformationPolicyConfig>,
    pub(crate) contextual_grounding_policy_config: ::std::option::Option<crate::types::AiGuardrailContextualGroundingPolicyConfig>,
}
impl UpdateAiGuardrailInputBuilder {
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>..</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>..</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>..</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    /// This field is required.
    pub fn assistant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.assistant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn set_assistant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.assistant_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn get_assistant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.assistant_id
    }
    /// <p>The identifier of the Amazon Q in Connect AI Guardrail.</p>
    /// This field is required.
    pub fn ai_guardrail_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ai_guardrail_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q in Connect AI Guardrail.</p>
    pub fn set_ai_guardrail_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ai_guardrail_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q in Connect AI Guardrail.</p>
    pub fn get_ai_guardrail_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ai_guardrail_id
    }
    /// <p>The visibility status of the Amazon Q in Connect AI Guardrail.</p>
    /// This field is required.
    pub fn visibility_status(mut self, input: crate::types::VisibilityStatus) -> Self {
        self.visibility_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The visibility status of the Amazon Q in Connect AI Guardrail.</p>
    pub fn set_visibility_status(mut self, input: ::std::option::Option<crate::types::VisibilityStatus>) -> Self {
        self.visibility_status = input;
        self
    }
    /// <p>The visibility status of the Amazon Q in Connect AI Guardrail.</p>
    pub fn get_visibility_status(&self) -> &::std::option::Option<crate::types::VisibilityStatus> {
        &self.visibility_status
    }
    /// <p>The message to return when the AI Guardrail blocks a prompt.</p>
    /// This field is required.
    pub fn blocked_input_messaging(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.blocked_input_messaging = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message to return when the AI Guardrail blocks a prompt.</p>
    pub fn set_blocked_input_messaging(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.blocked_input_messaging = input;
        self
    }
    /// <p>The message to return when the AI Guardrail blocks a prompt.</p>
    pub fn get_blocked_input_messaging(&self) -> &::std::option::Option<::std::string::String> {
        &self.blocked_input_messaging
    }
    /// <p>The message to return when the AI Guardrail blocks a model response.</p>
    /// This field is required.
    pub fn blocked_outputs_messaging(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.blocked_outputs_messaging = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message to return when the AI Guardrail blocks a model response.</p>
    pub fn set_blocked_outputs_messaging(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.blocked_outputs_messaging = input;
        self
    }
    /// <p>The message to return when the AI Guardrail blocks a model response.</p>
    pub fn get_blocked_outputs_messaging(&self) -> &::std::option::Option<::std::string::String> {
        &self.blocked_outputs_messaging
    }
    /// <p>A description of the AI Guardrail.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the AI Guardrail.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the AI Guardrail.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The topic policies to configure for the AI Guardrail.</p>
    pub fn topic_policy_config(mut self, input: crate::types::AiGuardrailTopicPolicyConfig) -> Self {
        self.topic_policy_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The topic policies to configure for the AI Guardrail.</p>
    pub fn set_topic_policy_config(mut self, input: ::std::option::Option<crate::types::AiGuardrailTopicPolicyConfig>) -> Self {
        self.topic_policy_config = input;
        self
    }
    /// <p>The topic policies to configure for the AI Guardrail.</p>
    pub fn get_topic_policy_config(&self) -> &::std::option::Option<crate::types::AiGuardrailTopicPolicyConfig> {
        &self.topic_policy_config
    }
    /// <p>The content filter policies to configure for the AI Guardrail.</p>
    pub fn content_policy_config(mut self, input: crate::types::AiGuardrailContentPolicyConfig) -> Self {
        self.content_policy_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The content filter policies to configure for the AI Guardrail.</p>
    pub fn set_content_policy_config(mut self, input: ::std::option::Option<crate::types::AiGuardrailContentPolicyConfig>) -> Self {
        self.content_policy_config = input;
        self
    }
    /// <p>The content filter policies to configure for the AI Guardrail.</p>
    pub fn get_content_policy_config(&self) -> &::std::option::Option<crate::types::AiGuardrailContentPolicyConfig> {
        &self.content_policy_config
    }
    /// <p>The word policy you configure for the AI Guardrail.</p>
    pub fn word_policy_config(mut self, input: crate::types::AiGuardrailWordPolicyConfig) -> Self {
        self.word_policy_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The word policy you configure for the AI Guardrail.</p>
    pub fn set_word_policy_config(mut self, input: ::std::option::Option<crate::types::AiGuardrailWordPolicyConfig>) -> Self {
        self.word_policy_config = input;
        self
    }
    /// <p>The word policy you configure for the AI Guardrail.</p>
    pub fn get_word_policy_config(&self) -> &::std::option::Option<crate::types::AiGuardrailWordPolicyConfig> {
        &self.word_policy_config
    }
    /// <p>The sensitive information policy to configure for the AI Guardrail.</p>
    pub fn sensitive_information_policy_config(mut self, input: crate::types::AiGuardrailSensitiveInformationPolicyConfig) -> Self {
        self.sensitive_information_policy_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sensitive information policy to configure for the AI Guardrail.</p>
    pub fn set_sensitive_information_policy_config(
        mut self,
        input: ::std::option::Option<crate::types::AiGuardrailSensitiveInformationPolicyConfig>,
    ) -> Self {
        self.sensitive_information_policy_config = input;
        self
    }
    /// <p>The sensitive information policy to configure for the AI Guardrail.</p>
    pub fn get_sensitive_information_policy_config(&self) -> &::std::option::Option<crate::types::AiGuardrailSensitiveInformationPolicyConfig> {
        &self.sensitive_information_policy_config
    }
    /// <p>The contextual grounding policy configuration used to create an AI Guardrail.</p>
    pub fn contextual_grounding_policy_config(mut self, input: crate::types::AiGuardrailContextualGroundingPolicyConfig) -> Self {
        self.contextual_grounding_policy_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The contextual grounding policy configuration used to create an AI Guardrail.</p>
    pub fn set_contextual_grounding_policy_config(
        mut self,
        input: ::std::option::Option<crate::types::AiGuardrailContextualGroundingPolicyConfig>,
    ) -> Self {
        self.contextual_grounding_policy_config = input;
        self
    }
    /// <p>The contextual grounding policy configuration used to create an AI Guardrail.</p>
    pub fn get_contextual_grounding_policy_config(&self) -> &::std::option::Option<crate::types::AiGuardrailContextualGroundingPolicyConfig> {
        &self.contextual_grounding_policy_config
    }
    /// Consumes the builder and constructs a [`UpdateAiGuardrailInput`](crate::operation::update_ai_guardrail::UpdateAiGuardrailInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_ai_guardrail::UpdateAiGuardrailInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_ai_guardrail::UpdateAiGuardrailInput {
            client_token: self.client_token,
            assistant_id: self.assistant_id,
            ai_guardrail_id: self.ai_guardrail_id,
            visibility_status: self.visibility_status,
            blocked_input_messaging: self.blocked_input_messaging,
            blocked_outputs_messaging: self.blocked_outputs_messaging,
            description: self.description,
            topic_policy_config: self.topic_policy_config,
            content_policy_config: self.content_policy_config,
            word_policy_config: self.word_policy_config,
            sensitive_information_policy_config: self.sensitive_information_policy_config,
            contextual_grounding_policy_config: self.contextual_grounding_policy_config,
        })
    }
}
impl ::std::fmt::Debug for UpdateAiGuardrailInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAiGuardrailInputBuilder");
        formatter.field("client_token", &self.client_token);
        formatter.field("assistant_id", &self.assistant_id);
        formatter.field("ai_guardrail_id", &self.ai_guardrail_id);
        formatter.field("visibility_status", &self.visibility_status);
        formatter.field("blocked_input_messaging", &"*** Sensitive Data Redacted ***");
        formatter.field("blocked_outputs_messaging", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("topic_policy_config", &self.topic_policy_config);
        formatter.field("content_policy_config", &self.content_policy_config);
        formatter.field("word_policy_config", &self.word_policy_config);
        formatter.field("sensitive_information_policy_config", &self.sensitive_information_policy_config);
        formatter.field("contextual_grounding_policy_config", &self.contextual_grounding_policy_config);
        formatter.finish()
    }
}
