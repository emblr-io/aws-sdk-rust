// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateMessageTemplateInput {
    /// <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub knowledge_base_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the message template.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The content of the message template.</p>
    pub content: ::std::option::Option<crate::types::MessageTemplateContentProvider>,
    /// <p>The description of the message template.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The channel subtype this message template applies to.</p>
    pub channel_subtype: ::std::option::Option<crate::types::ChannelSubtype>,
    /// <p>The language code value for the language in which the quick response is written. The supported language codes include <code>de_DE</code>, <code>en_US</code>, <code>es_ES</code>, <code>fr_FR</code>, <code>id_ID</code>, <code>it_IT</code>, <code>ja_JP</code>, <code>ko_KR</code>, <code>pt_BR</code>, <code>zh_CN</code>, <code>zh_TW</code></p>
    pub language: ::std::option::Option<::std::string::String>,
    /// <p>An object that specifies the default values to use for variables in the message template. This object contains different categories of key-value pairs. Each key defines a variable or placeholder in the message template. The corresponding value defines the default value for that variable.</p>
    pub default_attributes: ::std::option::Option<crate::types::MessageTemplateAttributes>,
    /// <p>The configuration information of the grouping of Amazon Q in Connect users.</p>
    pub grouping_configuration: ::std::option::Option<crate::types::GroupingConfiguration>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateMessageTemplateInput {
    /// <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn knowledge_base_id(&self) -> ::std::option::Option<&str> {
        self.knowledge_base_id.as_deref()
    }
    /// <p>The name of the message template.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The content of the message template.</p>
    pub fn content(&self) -> ::std::option::Option<&crate::types::MessageTemplateContentProvider> {
        self.content.as_ref()
    }
    /// <p>The description of the message template.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The channel subtype this message template applies to.</p>
    pub fn channel_subtype(&self) -> ::std::option::Option<&crate::types::ChannelSubtype> {
        self.channel_subtype.as_ref()
    }
    /// <p>The language code value for the language in which the quick response is written. The supported language codes include <code>de_DE</code>, <code>en_US</code>, <code>es_ES</code>, <code>fr_FR</code>, <code>id_ID</code>, <code>it_IT</code>, <code>ja_JP</code>, <code>ko_KR</code>, <code>pt_BR</code>, <code>zh_CN</code>, <code>zh_TW</code></p>
    pub fn language(&self) -> ::std::option::Option<&str> {
        self.language.as_deref()
    }
    /// <p>An object that specifies the default values to use for variables in the message template. This object contains different categories of key-value pairs. Each key defines a variable or placeholder in the message template. The corresponding value defines the default value for that variable.</p>
    pub fn default_attributes(&self) -> ::std::option::Option<&crate::types::MessageTemplateAttributes> {
        self.default_attributes.as_ref()
    }
    /// <p>The configuration information of the grouping of Amazon Q in Connect users.</p>
    pub fn grouping_configuration(&self) -> ::std::option::Option<&crate::types::GroupingConfiguration> {
        self.grouping_configuration.as_ref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateMessageTemplateInput {
    /// Creates a new builder-style object to manufacture [`CreateMessageTemplateInput`](crate::operation::create_message_template::CreateMessageTemplateInput).
    pub fn builder() -> crate::operation::create_message_template::builders::CreateMessageTemplateInputBuilder {
        crate::operation::create_message_template::builders::CreateMessageTemplateInputBuilder::default()
    }
}

/// A builder for [`CreateMessageTemplateInput`](crate::operation::create_message_template::CreateMessageTemplateInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateMessageTemplateInputBuilder {
    pub(crate) knowledge_base_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) content: ::std::option::Option<crate::types::MessageTemplateContentProvider>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) channel_subtype: ::std::option::Option<crate::types::ChannelSubtype>,
    pub(crate) language: ::std::option::Option<::std::string::String>,
    pub(crate) default_attributes: ::std::option::Option<crate::types::MessageTemplateAttributes>,
    pub(crate) grouping_configuration: ::std::option::Option<crate::types::GroupingConfiguration>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateMessageTemplateInputBuilder {
    /// <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    /// This field is required.
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_id
    }
    /// <p>The name of the message template.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the message template.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the message template.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The content of the message template.</p>
    /// This field is required.
    pub fn content(mut self, input: crate::types::MessageTemplateContentProvider) -> Self {
        self.content = ::std::option::Option::Some(input);
        self
    }
    /// <p>The content of the message template.</p>
    pub fn set_content(mut self, input: ::std::option::Option<crate::types::MessageTemplateContentProvider>) -> Self {
        self.content = input;
        self
    }
    /// <p>The content of the message template.</p>
    pub fn get_content(&self) -> &::std::option::Option<crate::types::MessageTemplateContentProvider> {
        &self.content
    }
    /// <p>The description of the message template.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the message template.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the message template.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The channel subtype this message template applies to.</p>
    /// This field is required.
    pub fn channel_subtype(mut self, input: crate::types::ChannelSubtype) -> Self {
        self.channel_subtype = ::std::option::Option::Some(input);
        self
    }
    /// <p>The channel subtype this message template applies to.</p>
    pub fn set_channel_subtype(mut self, input: ::std::option::Option<crate::types::ChannelSubtype>) -> Self {
        self.channel_subtype = input;
        self
    }
    /// <p>The channel subtype this message template applies to.</p>
    pub fn get_channel_subtype(&self) -> &::std::option::Option<crate::types::ChannelSubtype> {
        &self.channel_subtype
    }
    /// <p>The language code value for the language in which the quick response is written. The supported language codes include <code>de_DE</code>, <code>en_US</code>, <code>es_ES</code>, <code>fr_FR</code>, <code>id_ID</code>, <code>it_IT</code>, <code>ja_JP</code>, <code>ko_KR</code>, <code>pt_BR</code>, <code>zh_CN</code>, <code>zh_TW</code></p>
    pub fn language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.language = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The language code value for the language in which the quick response is written. The supported language codes include <code>de_DE</code>, <code>en_US</code>, <code>es_ES</code>, <code>fr_FR</code>, <code>id_ID</code>, <code>it_IT</code>, <code>ja_JP</code>, <code>ko_KR</code>, <code>pt_BR</code>, <code>zh_CN</code>, <code>zh_TW</code></p>
    pub fn set_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.language = input;
        self
    }
    /// <p>The language code value for the language in which the quick response is written. The supported language codes include <code>de_DE</code>, <code>en_US</code>, <code>es_ES</code>, <code>fr_FR</code>, <code>id_ID</code>, <code>it_IT</code>, <code>ja_JP</code>, <code>ko_KR</code>, <code>pt_BR</code>, <code>zh_CN</code>, <code>zh_TW</code></p>
    pub fn get_language(&self) -> &::std::option::Option<::std::string::String> {
        &self.language
    }
    /// <p>An object that specifies the default values to use for variables in the message template. This object contains different categories of key-value pairs. Each key defines a variable or placeholder in the message template. The corresponding value defines the default value for that variable.</p>
    pub fn default_attributes(mut self, input: crate::types::MessageTemplateAttributes) -> Self {
        self.default_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that specifies the default values to use for variables in the message template. This object contains different categories of key-value pairs. Each key defines a variable or placeholder in the message template. The corresponding value defines the default value for that variable.</p>
    pub fn set_default_attributes(mut self, input: ::std::option::Option<crate::types::MessageTemplateAttributes>) -> Self {
        self.default_attributes = input;
        self
    }
    /// <p>An object that specifies the default values to use for variables in the message template. This object contains different categories of key-value pairs. Each key defines a variable or placeholder in the message template. The corresponding value defines the default value for that variable.</p>
    pub fn get_default_attributes(&self) -> &::std::option::Option<crate::types::MessageTemplateAttributes> {
        &self.default_attributes
    }
    /// <p>The configuration information of the grouping of Amazon Q in Connect users.</p>
    pub fn grouping_configuration(mut self, input: crate::types::GroupingConfiguration) -> Self {
        self.grouping_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration information of the grouping of Amazon Q in Connect users.</p>
    pub fn set_grouping_configuration(mut self, input: ::std::option::Option<crate::types::GroupingConfiguration>) -> Self {
        self.grouping_configuration = input;
        self
    }
    /// <p>The configuration information of the grouping of Amazon Q in Connect users.</p>
    pub fn get_grouping_configuration(&self) -> &::std::option::Option<crate::types::GroupingConfiguration> {
        &self.grouping_configuration
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateMessageTemplateInput`](crate::operation::create_message_template::CreateMessageTemplateInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_message_template::CreateMessageTemplateInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_message_template::CreateMessageTemplateInput {
            knowledge_base_id: self.knowledge_base_id,
            name: self.name,
            content: self.content,
            description: self.description,
            channel_subtype: self.channel_subtype,
            language: self.language,
            default_attributes: self.default_attributes,
            grouping_configuration: self.grouping_configuration,
            client_token: self.client_token,
            tags: self.tags,
        })
    }
}
