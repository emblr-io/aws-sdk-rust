// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeactivateMessageTemplateInput {
    /// <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub knowledge_base_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the message template. Can be either the ID or the ARN. It cannot contain any qualifier.</p>
    pub message_template_id: ::std::option::Option<::std::string::String>,
    /// <p>The version number of the message template version to deactivate.</p>
    pub version_number: ::std::option::Option<i64>,
}
impl DeactivateMessageTemplateInput {
    /// <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn knowledge_base_id(&self) -> ::std::option::Option<&str> {
        self.knowledge_base_id.as_deref()
    }
    /// <p>The identifier of the message template. Can be either the ID or the ARN. It cannot contain any qualifier.</p>
    pub fn message_template_id(&self) -> ::std::option::Option<&str> {
        self.message_template_id.as_deref()
    }
    /// <p>The version number of the message template version to deactivate.</p>
    pub fn version_number(&self) -> ::std::option::Option<i64> {
        self.version_number
    }
}
impl DeactivateMessageTemplateInput {
    /// Creates a new builder-style object to manufacture [`DeactivateMessageTemplateInput`](crate::operation::deactivate_message_template::DeactivateMessageTemplateInput).
    pub fn builder() -> crate::operation::deactivate_message_template::builders::DeactivateMessageTemplateInputBuilder {
        crate::operation::deactivate_message_template::builders::DeactivateMessageTemplateInputBuilder::default()
    }
}

/// A builder for [`DeactivateMessageTemplateInput`](crate::operation::deactivate_message_template::DeactivateMessageTemplateInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeactivateMessageTemplateInputBuilder {
    pub(crate) knowledge_base_id: ::std::option::Option<::std::string::String>,
    pub(crate) message_template_id: ::std::option::Option<::std::string::String>,
    pub(crate) version_number: ::std::option::Option<i64>,
}
impl DeactivateMessageTemplateInputBuilder {
    /// <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    /// This field is required.
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_id
    }
    /// <p>The identifier of the message template. Can be either the ID or the ARN. It cannot contain any qualifier.</p>
    /// This field is required.
    pub fn message_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the message template. Can be either the ID or the ARN. It cannot contain any qualifier.</p>
    pub fn set_message_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_template_id = input;
        self
    }
    /// <p>The identifier of the message template. Can be either the ID or the ARN. It cannot contain any qualifier.</p>
    pub fn get_message_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_template_id
    }
    /// <p>The version number of the message template version to deactivate.</p>
    /// This field is required.
    pub fn version_number(mut self, input: i64) -> Self {
        self.version_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version number of the message template version to deactivate.</p>
    pub fn set_version_number(mut self, input: ::std::option::Option<i64>) -> Self {
        self.version_number = input;
        self
    }
    /// <p>The version number of the message template version to deactivate.</p>
    pub fn get_version_number(&self) -> &::std::option::Option<i64> {
        &self.version_number
    }
    /// Consumes the builder and constructs a [`DeactivateMessageTemplateInput`](crate::operation::deactivate_message_template::DeactivateMessageTemplateInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::deactivate_message_template::DeactivateMessageTemplateInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::deactivate_message_template::DeactivateMessageTemplateInput {
            knowledge_base_id: self.knowledge_base_id,
            message_template_id: self.message_template_id,
            version_number: self.version_number,
        })
    }
}
