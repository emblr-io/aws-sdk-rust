// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateMessageTemplateAttachmentInput {
    /// <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub knowledge_base_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the message template. Can be either the ID or the ARN. It cannot contain any qualifier.</p>
    pub message_template_id: ::std::option::Option<::std::string::String>,
    /// <p>The presentation information for the attachment file.</p>
    pub content_disposition: ::std::option::Option<crate::types::ContentDisposition>,
    /// <p>The name of the attachment file being uploaded. The name should include the file extension.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The body of the attachment file being uploaded. It should be encoded using base64 encoding.</p>
    pub body: ::std::option::Option<::std::string::String>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateMessageTemplateAttachmentInput {
    /// <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn knowledge_base_id(&self) -> ::std::option::Option<&str> {
        self.knowledge_base_id.as_deref()
    }
    /// <p>The identifier of the message template. Can be either the ID or the ARN. It cannot contain any qualifier.</p>
    pub fn message_template_id(&self) -> ::std::option::Option<&str> {
        self.message_template_id.as_deref()
    }
    /// <p>The presentation information for the attachment file.</p>
    pub fn content_disposition(&self) -> ::std::option::Option<&crate::types::ContentDisposition> {
        self.content_disposition.as_ref()
    }
    /// <p>The name of the attachment file being uploaded. The name should include the file extension.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The body of the attachment file being uploaded. It should be encoded using base64 encoding.</p>
    pub fn body(&self) -> ::std::option::Option<&str> {
        self.body.as_deref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl ::std::fmt::Debug for CreateMessageTemplateAttachmentInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateMessageTemplateAttachmentInput");
        formatter.field("knowledge_base_id", &self.knowledge_base_id);
        formatter.field("message_template_id", &self.message_template_id);
        formatter.field("content_disposition", &self.content_disposition);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("body", &"*** Sensitive Data Redacted ***");
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
impl CreateMessageTemplateAttachmentInput {
    /// Creates a new builder-style object to manufacture [`CreateMessageTemplateAttachmentInput`](crate::operation::create_message_template_attachment::CreateMessageTemplateAttachmentInput).
    pub fn builder() -> crate::operation::create_message_template_attachment::builders::CreateMessageTemplateAttachmentInputBuilder {
        crate::operation::create_message_template_attachment::builders::CreateMessageTemplateAttachmentInputBuilder::default()
    }
}

/// A builder for [`CreateMessageTemplateAttachmentInput`](crate::operation::create_message_template_attachment::CreateMessageTemplateAttachmentInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateMessageTemplateAttachmentInputBuilder {
    pub(crate) knowledge_base_id: ::std::option::Option<::std::string::String>,
    pub(crate) message_template_id: ::std::option::Option<::std::string::String>,
    pub(crate) content_disposition: ::std::option::Option<crate::types::ContentDisposition>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) body: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateMessageTemplateAttachmentInputBuilder {
    /// <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    /// This field is required.
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_id
    }
    /// <p>The identifier of the message template. Can be either the ID or the ARN. It cannot contain any qualifier.</p>
    /// This field is required.
    pub fn message_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the message template. Can be either the ID or the ARN. It cannot contain any qualifier.</p>
    pub fn set_message_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_template_id = input;
        self
    }
    /// <p>The identifier of the message template. Can be either the ID or the ARN. It cannot contain any qualifier.</p>
    pub fn get_message_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_template_id
    }
    /// <p>The presentation information for the attachment file.</p>
    /// This field is required.
    pub fn content_disposition(mut self, input: crate::types::ContentDisposition) -> Self {
        self.content_disposition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The presentation information for the attachment file.</p>
    pub fn set_content_disposition(mut self, input: ::std::option::Option<crate::types::ContentDisposition>) -> Self {
        self.content_disposition = input;
        self
    }
    /// <p>The presentation information for the attachment file.</p>
    pub fn get_content_disposition(&self) -> &::std::option::Option<crate::types::ContentDisposition> {
        &self.content_disposition
    }
    /// <p>The name of the attachment file being uploaded. The name should include the file extension.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the attachment file being uploaded. The name should include the file extension.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the attachment file being uploaded. The name should include the file extension.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The body of the attachment file being uploaded. It should be encoded using base64 encoding.</p>
    /// This field is required.
    pub fn body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The body of the attachment file being uploaded. It should be encoded using base64 encoding.</p>
    pub fn set_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// <p>The body of the attachment file being uploaded. It should be encoded using base64 encoding.</p>
    pub fn get_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.body
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateMessageTemplateAttachmentInput`](crate::operation::create_message_template_attachment::CreateMessageTemplateAttachmentInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_message_template_attachment::CreateMessageTemplateAttachmentInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_message_template_attachment::CreateMessageTemplateAttachmentInput {
                knowledge_base_id: self.knowledge_base_id,
                message_template_id: self.message_template_id,
                content_disposition: self.content_disposition,
                name: self.name,
                body: self.body,
                client_token: self.client_token,
            },
        )
    }
}
impl ::std::fmt::Debug for CreateMessageTemplateAttachmentInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateMessageTemplateAttachmentInputBuilder");
        formatter.field("knowledge_base_id", &self.knowledge_base_id);
        formatter.field("message_template_id", &self.message_template_id);
        formatter.field("content_disposition", &self.content_disposition);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("body", &"*** Sensitive Data Redacted ***");
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
