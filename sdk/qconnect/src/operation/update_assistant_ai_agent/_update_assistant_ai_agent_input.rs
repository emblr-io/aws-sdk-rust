// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateAssistantAiAgentInput {
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub assistant_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of the AI Agent being updated for use by default on the Amazon Q in Connect Assistant.</p>
    pub ai_agent_type: ::std::option::Option<crate::types::AiAgentType>,
    /// <p>The configuration of the AI Agent being updated for use by default on the Amazon Q in Connect Assistant.</p>
    pub configuration: ::std::option::Option<crate::types::AiAgentConfigurationData>,
}
impl UpdateAssistantAiAgentInput {
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn assistant_id(&self) -> ::std::option::Option<&str> {
        self.assistant_id.as_deref()
    }
    /// <p>The type of the AI Agent being updated for use by default on the Amazon Q in Connect Assistant.</p>
    pub fn ai_agent_type(&self) -> ::std::option::Option<&crate::types::AiAgentType> {
        self.ai_agent_type.as_ref()
    }
    /// <p>The configuration of the AI Agent being updated for use by default on the Amazon Q in Connect Assistant.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::AiAgentConfigurationData> {
        self.configuration.as_ref()
    }
}
impl UpdateAssistantAiAgentInput {
    /// Creates a new builder-style object to manufacture [`UpdateAssistantAiAgentInput`](crate::operation::update_assistant_ai_agent::UpdateAssistantAiAgentInput).
    pub fn builder() -> crate::operation::update_assistant_ai_agent::builders::UpdateAssistantAiAgentInputBuilder {
        crate::operation::update_assistant_ai_agent::builders::UpdateAssistantAiAgentInputBuilder::default()
    }
}

/// A builder for [`UpdateAssistantAiAgentInput`](crate::operation::update_assistant_ai_agent::UpdateAssistantAiAgentInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateAssistantAiAgentInputBuilder {
    pub(crate) assistant_id: ::std::option::Option<::std::string::String>,
    pub(crate) ai_agent_type: ::std::option::Option<crate::types::AiAgentType>,
    pub(crate) configuration: ::std::option::Option<crate::types::AiAgentConfigurationData>,
}
impl UpdateAssistantAiAgentInputBuilder {
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    /// This field is required.
    pub fn assistant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.assistant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn set_assistant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.assistant_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn get_assistant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.assistant_id
    }
    /// <p>The type of the AI Agent being updated for use by default on the Amazon Q in Connect Assistant.</p>
    /// This field is required.
    pub fn ai_agent_type(mut self, input: crate::types::AiAgentType) -> Self {
        self.ai_agent_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the AI Agent being updated for use by default on the Amazon Q in Connect Assistant.</p>
    pub fn set_ai_agent_type(mut self, input: ::std::option::Option<crate::types::AiAgentType>) -> Self {
        self.ai_agent_type = input;
        self
    }
    /// <p>The type of the AI Agent being updated for use by default on the Amazon Q in Connect Assistant.</p>
    pub fn get_ai_agent_type(&self) -> &::std::option::Option<crate::types::AiAgentType> {
        &self.ai_agent_type
    }
    /// <p>The configuration of the AI Agent being updated for use by default on the Amazon Q in Connect Assistant.</p>
    /// This field is required.
    pub fn configuration(mut self, input: crate::types::AiAgentConfigurationData) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the AI Agent being updated for use by default on the Amazon Q in Connect Assistant.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::AiAgentConfigurationData>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>The configuration of the AI Agent being updated for use by default on the Amazon Q in Connect Assistant.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::AiAgentConfigurationData> {
        &self.configuration
    }
    /// Consumes the builder and constructs a [`UpdateAssistantAiAgentInput`](crate::operation::update_assistant_ai_agent::UpdateAssistantAiAgentInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_assistant_ai_agent::UpdateAssistantAiAgentInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_assistant_ai_agent::UpdateAssistantAiAgentInput {
            assistant_id: self.assistant_id,
            ai_agent_type: self.ai_agent_type,
            configuration: self.configuration,
        })
    }
}
