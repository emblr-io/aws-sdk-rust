// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateSessionDataInput {
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub assistant_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the session. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>The namespace into which the session data is stored. Supported namespaces are: Custom</p>
    pub namespace: ::std::option::Option<crate::types::SessionDataNamespace>,
    /// <p>The data stored on the Amazon Q in Connect Session.</p>
    pub data: ::std::option::Option<::std::vec::Vec<crate::types::RuntimeSessionData>>,
}
impl UpdateSessionDataInput {
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn assistant_id(&self) -> ::std::option::Option<&str> {
        self.assistant_id.as_deref()
    }
    /// <p>The identifier of the session. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>The namespace into which the session data is stored. Supported namespaces are: Custom</p>
    pub fn namespace(&self) -> ::std::option::Option<&crate::types::SessionDataNamespace> {
        self.namespace.as_ref()
    }
    /// <p>The data stored on the Amazon Q in Connect Session.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.data.is_none()`.
    pub fn data(&self) -> &[crate::types::RuntimeSessionData] {
        self.data.as_deref().unwrap_or_default()
    }
}
impl UpdateSessionDataInput {
    /// Creates a new builder-style object to manufacture [`UpdateSessionDataInput`](crate::operation::update_session_data::UpdateSessionDataInput).
    pub fn builder() -> crate::operation::update_session_data::builders::UpdateSessionDataInputBuilder {
        crate::operation::update_session_data::builders::UpdateSessionDataInputBuilder::default()
    }
}

/// A builder for [`UpdateSessionDataInput`](crate::operation::update_session_data::UpdateSessionDataInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateSessionDataInputBuilder {
    pub(crate) assistant_id: ::std::option::Option<::std::string::String>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) namespace: ::std::option::Option<crate::types::SessionDataNamespace>,
    pub(crate) data: ::std::option::Option<::std::vec::Vec<crate::types::RuntimeSessionData>>,
}
impl UpdateSessionDataInputBuilder {
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    /// This field is required.
    pub fn assistant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.assistant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn set_assistant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.assistant_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn get_assistant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.assistant_id
    }
    /// <p>The identifier of the session. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    /// This field is required.
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the session. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The identifier of the session. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>The namespace into which the session data is stored. Supported namespaces are: Custom</p>
    pub fn namespace(mut self, input: crate::types::SessionDataNamespace) -> Self {
        self.namespace = ::std::option::Option::Some(input);
        self
    }
    /// <p>The namespace into which the session data is stored. Supported namespaces are: Custom</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<crate::types::SessionDataNamespace>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The namespace into which the session data is stored. Supported namespaces are: Custom</p>
    pub fn get_namespace(&self) -> &::std::option::Option<crate::types::SessionDataNamespace> {
        &self.namespace
    }
    /// Appends an item to `data`.
    ///
    /// To override the contents of this collection use [`set_data`](Self::set_data).
    ///
    /// <p>The data stored on the Amazon Q in Connect Session.</p>
    pub fn data(mut self, input: crate::types::RuntimeSessionData) -> Self {
        let mut v = self.data.unwrap_or_default();
        v.push(input);
        self.data = ::std::option::Option::Some(v);
        self
    }
    /// <p>The data stored on the Amazon Q in Connect Session.</p>
    pub fn set_data(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RuntimeSessionData>>) -> Self {
        self.data = input;
        self
    }
    /// <p>The data stored on the Amazon Q in Connect Session.</p>
    pub fn get_data(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RuntimeSessionData>> {
        &self.data
    }
    /// Consumes the builder and constructs a [`UpdateSessionDataInput`](crate::operation::update_session_data::UpdateSessionDataInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_session_data::UpdateSessionDataInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_session_data::UpdateSessionDataInput {
            assistant_id: self.assistant_id,
            session_id: self.session_id,
            namespace: self.namespace,
            data: self.data,
        })
    }
}
