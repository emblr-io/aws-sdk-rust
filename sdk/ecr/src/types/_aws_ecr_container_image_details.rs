// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The image details of the Amazon ECR container image.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsEcrContainerImageDetails {
    /// <p>The architecture of the Amazon ECR container image.</p>
    pub architecture: ::std::option::Option<::std::string::String>,
    /// <p>The image author of the Amazon ECR container image.</p>
    pub author: ::std::option::Option<::std::string::String>,
    /// <p>The image hash of the Amazon ECR container image.</p>
    pub image_hash: ::std::option::Option<::std::string::String>,
    /// <p>The image tags attached to the Amazon ECR container image.</p>
    pub image_tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The platform of the Amazon ECR container image.</p>
    pub platform: ::std::option::Option<::std::string::String>,
    /// <p>The date and time the Amazon ECR container image was pushed.</p>
    pub pushed_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The most recent date and time a cluster was running the image.</p>
    pub last_in_use_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The number of Amazon ECS or Amazon EKS clusters currently running the image.</p>
    pub in_use_count: ::std::option::Option<i64>,
    /// <p>The registry the Amazon ECR container image belongs to.</p>
    pub registry: ::std::option::Option<::std::string::String>,
    /// <p>The name of the repository the Amazon ECR container image resides in.</p>
    pub repository_name: ::std::option::Option<::std::string::String>,
}
impl AwsEcrContainerImageDetails {
    /// <p>The architecture of the Amazon ECR container image.</p>
    pub fn architecture(&self) -> ::std::option::Option<&str> {
        self.architecture.as_deref()
    }
    /// <p>The image author of the Amazon ECR container image.</p>
    pub fn author(&self) -> ::std::option::Option<&str> {
        self.author.as_deref()
    }
    /// <p>The image hash of the Amazon ECR container image.</p>
    pub fn image_hash(&self) -> ::std::option::Option<&str> {
        self.image_hash.as_deref()
    }
    /// <p>The image tags attached to the Amazon ECR container image.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.image_tags.is_none()`.
    pub fn image_tags(&self) -> &[::std::string::String] {
        self.image_tags.as_deref().unwrap_or_default()
    }
    /// <p>The platform of the Amazon ECR container image.</p>
    pub fn platform(&self) -> ::std::option::Option<&str> {
        self.platform.as_deref()
    }
    /// <p>The date and time the Amazon ECR container image was pushed.</p>
    pub fn pushed_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.pushed_at.as_ref()
    }
    /// <p>The most recent date and time a cluster was running the image.</p>
    pub fn last_in_use_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_in_use_at.as_ref()
    }
    /// <p>The number of Amazon ECS or Amazon EKS clusters currently running the image.</p>
    pub fn in_use_count(&self) -> ::std::option::Option<i64> {
        self.in_use_count
    }
    /// <p>The registry the Amazon ECR container image belongs to.</p>
    pub fn registry(&self) -> ::std::option::Option<&str> {
        self.registry.as_deref()
    }
    /// <p>The name of the repository the Amazon ECR container image resides in.</p>
    pub fn repository_name(&self) -> ::std::option::Option<&str> {
        self.repository_name.as_deref()
    }
}
impl AwsEcrContainerImageDetails {
    /// Creates a new builder-style object to manufacture [`AwsEcrContainerImageDetails`](crate::types::AwsEcrContainerImageDetails).
    pub fn builder() -> crate::types::builders::AwsEcrContainerImageDetailsBuilder {
        crate::types::builders::AwsEcrContainerImageDetailsBuilder::default()
    }
}

/// A builder for [`AwsEcrContainerImageDetails`](crate::types::AwsEcrContainerImageDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AwsEcrContainerImageDetailsBuilder {
    pub(crate) architecture: ::std::option::Option<::std::string::String>,
    pub(crate) author: ::std::option::Option<::std::string::String>,
    pub(crate) image_hash: ::std::option::Option<::std::string::String>,
    pub(crate) image_tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) platform: ::std::option::Option<::std::string::String>,
    pub(crate) pushed_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_in_use_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) in_use_count: ::std::option::Option<i64>,
    pub(crate) registry: ::std::option::Option<::std::string::String>,
    pub(crate) repository_name: ::std::option::Option<::std::string::String>,
}
impl AwsEcrContainerImageDetailsBuilder {
    /// <p>The architecture of the Amazon ECR container image.</p>
    pub fn architecture(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.architecture = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The architecture of the Amazon ECR container image.</p>
    pub fn set_architecture(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.architecture = input;
        self
    }
    /// <p>The architecture of the Amazon ECR container image.</p>
    pub fn get_architecture(&self) -> &::std::option::Option<::std::string::String> {
        &self.architecture
    }
    /// <p>The image author of the Amazon ECR container image.</p>
    pub fn author(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.author = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The image author of the Amazon ECR container image.</p>
    pub fn set_author(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.author = input;
        self
    }
    /// <p>The image author of the Amazon ECR container image.</p>
    pub fn get_author(&self) -> &::std::option::Option<::std::string::String> {
        &self.author
    }
    /// <p>The image hash of the Amazon ECR container image.</p>
    pub fn image_hash(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_hash = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The image hash of the Amazon ECR container image.</p>
    pub fn set_image_hash(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_hash = input;
        self
    }
    /// <p>The image hash of the Amazon ECR container image.</p>
    pub fn get_image_hash(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_hash
    }
    /// Appends an item to `image_tags`.
    ///
    /// To override the contents of this collection use [`set_image_tags`](Self::set_image_tags).
    ///
    /// <p>The image tags attached to the Amazon ECR container image.</p>
    pub fn image_tags(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.image_tags.unwrap_or_default();
        v.push(input.into());
        self.image_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The image tags attached to the Amazon ECR container image.</p>
    pub fn set_image_tags(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.image_tags = input;
        self
    }
    /// <p>The image tags attached to the Amazon ECR container image.</p>
    pub fn get_image_tags(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.image_tags
    }
    /// <p>The platform of the Amazon ECR container image.</p>
    pub fn platform(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.platform = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The platform of the Amazon ECR container image.</p>
    pub fn set_platform(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.platform = input;
        self
    }
    /// <p>The platform of the Amazon ECR container image.</p>
    pub fn get_platform(&self) -> &::std::option::Option<::std::string::String> {
        &self.platform
    }
    /// <p>The date and time the Amazon ECR container image was pushed.</p>
    pub fn pushed_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.pushed_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the Amazon ECR container image was pushed.</p>
    pub fn set_pushed_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.pushed_at = input;
        self
    }
    /// <p>The date and time the Amazon ECR container image was pushed.</p>
    pub fn get_pushed_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.pushed_at
    }
    /// <p>The most recent date and time a cluster was running the image.</p>
    pub fn last_in_use_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_in_use_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The most recent date and time a cluster was running the image.</p>
    pub fn set_last_in_use_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_in_use_at = input;
        self
    }
    /// <p>The most recent date and time a cluster was running the image.</p>
    pub fn get_last_in_use_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_in_use_at
    }
    /// <p>The number of Amazon ECS or Amazon EKS clusters currently running the image.</p>
    pub fn in_use_count(mut self, input: i64) -> Self {
        self.in_use_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of Amazon ECS or Amazon EKS clusters currently running the image.</p>
    pub fn set_in_use_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.in_use_count = input;
        self
    }
    /// <p>The number of Amazon ECS or Amazon EKS clusters currently running the image.</p>
    pub fn get_in_use_count(&self) -> &::std::option::Option<i64> {
        &self.in_use_count
    }
    /// <p>The registry the Amazon ECR container image belongs to.</p>
    pub fn registry(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registry = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The registry the Amazon ECR container image belongs to.</p>
    pub fn set_registry(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registry = input;
        self
    }
    /// <p>The registry the Amazon ECR container image belongs to.</p>
    pub fn get_registry(&self) -> &::std::option::Option<::std::string::String> {
        &self.registry
    }
    /// <p>The name of the repository the Amazon ECR container image resides in.</p>
    pub fn repository_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repository_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the repository the Amazon ECR container image resides in.</p>
    pub fn set_repository_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>The name of the repository the Amazon ECR container image resides in.</p>
    pub fn get_repository_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.repository_name
    }
    /// Consumes the builder and constructs a [`AwsEcrContainerImageDetails`](crate::types::AwsEcrContainerImageDetails).
    pub fn build(self) -> crate::types::AwsEcrContainerImageDetails {
        crate::types::AwsEcrContainerImageDetails {
            architecture: self.architecture,
            author: self.author,
            image_hash: self.image_hash,
            image_tags: self.image_tags,
            platform: self.platform,
            pushed_at: self.pushed_at,
            last_in_use_at: self.last_in_use_at,
            in_use_count: self.in_use_count,
            registry: self.registry,
            repository_name: self.repository_name,
        }
    }
}
