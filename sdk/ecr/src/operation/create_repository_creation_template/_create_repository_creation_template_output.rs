// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateRepositoryCreationTemplateOutput {
    /// <p>The registry ID associated with the request.</p>
    pub registry_id: ::std::option::Option<::std::string::String>,
    /// <p>The details of the repository creation template associated with the request.</p>
    pub repository_creation_template: ::std::option::Option<crate::types::RepositoryCreationTemplate>,
    _request_id: Option<String>,
}
impl CreateRepositoryCreationTemplateOutput {
    /// <p>The registry ID associated with the request.</p>
    pub fn registry_id(&self) -> ::std::option::Option<&str> {
        self.registry_id.as_deref()
    }
    /// <p>The details of the repository creation template associated with the request.</p>
    pub fn repository_creation_template(&self) -> ::std::option::Option<&crate::types::RepositoryCreationTemplate> {
        self.repository_creation_template.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for CreateRepositoryCreationTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateRepositoryCreationTemplateOutput {
    /// Creates a new builder-style object to manufacture [`CreateRepositoryCreationTemplateOutput`](crate::operation::create_repository_creation_template::CreateRepositoryCreationTemplateOutput).
    pub fn builder() -> crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateOutputBuilder {
        crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateOutputBuilder::default()
    }
}

/// A builder for [`CreateRepositoryCreationTemplateOutput`](crate::operation::create_repository_creation_template::CreateRepositoryCreationTemplateOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateRepositoryCreationTemplateOutputBuilder {
    pub(crate) registry_id: ::std::option::Option<::std::string::String>,
    pub(crate) repository_creation_template: ::std::option::Option<crate::types::RepositoryCreationTemplate>,
    _request_id: Option<String>,
}
impl CreateRepositoryCreationTemplateOutputBuilder {
    /// <p>The registry ID associated with the request.</p>
    pub fn registry_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registry_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The registry ID associated with the request.</p>
    pub fn set_registry_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registry_id = input;
        self
    }
    /// <p>The registry ID associated with the request.</p>
    pub fn get_registry_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.registry_id
    }
    /// <p>The details of the repository creation template associated with the request.</p>
    pub fn repository_creation_template(mut self, input: crate::types::RepositoryCreationTemplate) -> Self {
        self.repository_creation_template = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the repository creation template associated with the request.</p>
    pub fn set_repository_creation_template(mut self, input: ::std::option::Option<crate::types::RepositoryCreationTemplate>) -> Self {
        self.repository_creation_template = input;
        self
    }
    /// <p>The details of the repository creation template associated with the request.</p>
    pub fn get_repository_creation_template(&self) -> &::std::option::Option<crate::types::RepositoryCreationTemplate> {
        &self.repository_creation_template
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateRepositoryCreationTemplateOutput`](crate::operation::create_repository_creation_template::CreateRepositoryCreationTemplateOutput).
    pub fn build(self) -> crate::operation::create_repository_creation_template::CreateRepositoryCreationTemplateOutput {
        crate::operation::create_repository_creation_template::CreateRepositoryCreationTemplateOutput {
            registry_id: self.registry_id,
            repository_creation_template: self.repository_creation_template,
            _request_id: self._request_id,
        }
    }
}
