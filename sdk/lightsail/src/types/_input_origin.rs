// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the origin resource of an Amazon Lightsail content delivery network (CDN) distribution.</p>
/// <p>An origin can be a Lightsail instance, bucket, container service, or load balancer. A distribution pulls content from an origin, caches it, and serves it to viewers via a worldwide network of edge servers.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InputOrigin {
    /// <p>The name of the origin resource.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The AWS Region name of the origin resource.</p>
    pub region_name: ::std::option::Option<crate::types::RegionName>,
    /// <p>The protocol that your Amazon Lightsail distribution uses when establishing a connection with your origin to pull content.</p>
    pub protocol_policy: ::std::option::Option<crate::types::OriginProtocolPolicyEnum>,
    /// <p>The amount of time, in seconds, that the distribution waits for a response after forwarding a request to the origin. The minimum timeout is 1 second, the maximum is 60 seconds, and the default (if you don't specify otherwise) is 30 seconds.</p>
    pub response_timeout: ::std::option::Option<i32>,
}
impl InputOrigin {
    /// <p>The name of the origin resource.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The AWS Region name of the origin resource.</p>
    pub fn region_name(&self) -> ::std::option::Option<&crate::types::RegionName> {
        self.region_name.as_ref()
    }
    /// <p>The protocol that your Amazon Lightsail distribution uses when establishing a connection with your origin to pull content.</p>
    pub fn protocol_policy(&self) -> ::std::option::Option<&crate::types::OriginProtocolPolicyEnum> {
        self.protocol_policy.as_ref()
    }
    /// <p>The amount of time, in seconds, that the distribution waits for a response after forwarding a request to the origin. The minimum timeout is 1 second, the maximum is 60 seconds, and the default (if you don't specify otherwise) is 30 seconds.</p>
    pub fn response_timeout(&self) -> ::std::option::Option<i32> {
        self.response_timeout
    }
}
impl InputOrigin {
    /// Creates a new builder-style object to manufacture [`InputOrigin`](crate::types::InputOrigin).
    pub fn builder() -> crate::types::builders::InputOriginBuilder {
        crate::types::builders::InputOriginBuilder::default()
    }
}

/// A builder for [`InputOrigin`](crate::types::InputOrigin).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InputOriginBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) region_name: ::std::option::Option<crate::types::RegionName>,
    pub(crate) protocol_policy: ::std::option::Option<crate::types::OriginProtocolPolicyEnum>,
    pub(crate) response_timeout: ::std::option::Option<i32>,
}
impl InputOriginBuilder {
    /// <p>The name of the origin resource.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the origin resource.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the origin resource.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The AWS Region name of the origin resource.</p>
    pub fn region_name(mut self, input: crate::types::RegionName) -> Self {
        self.region_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The AWS Region name of the origin resource.</p>
    pub fn set_region_name(mut self, input: ::std::option::Option<crate::types::RegionName>) -> Self {
        self.region_name = input;
        self
    }
    /// <p>The AWS Region name of the origin resource.</p>
    pub fn get_region_name(&self) -> &::std::option::Option<crate::types::RegionName> {
        &self.region_name
    }
    /// <p>The protocol that your Amazon Lightsail distribution uses when establishing a connection with your origin to pull content.</p>
    pub fn protocol_policy(mut self, input: crate::types::OriginProtocolPolicyEnum) -> Self {
        self.protocol_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The protocol that your Amazon Lightsail distribution uses when establishing a connection with your origin to pull content.</p>
    pub fn set_protocol_policy(mut self, input: ::std::option::Option<crate::types::OriginProtocolPolicyEnum>) -> Self {
        self.protocol_policy = input;
        self
    }
    /// <p>The protocol that your Amazon Lightsail distribution uses when establishing a connection with your origin to pull content.</p>
    pub fn get_protocol_policy(&self) -> &::std::option::Option<crate::types::OriginProtocolPolicyEnum> {
        &self.protocol_policy
    }
    /// <p>The amount of time, in seconds, that the distribution waits for a response after forwarding a request to the origin. The minimum timeout is 1 second, the maximum is 60 seconds, and the default (if you don't specify otherwise) is 30 seconds.</p>
    pub fn response_timeout(mut self, input: i32) -> Self {
        self.response_timeout = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of time, in seconds, that the distribution waits for a response after forwarding a request to the origin. The minimum timeout is 1 second, the maximum is 60 seconds, and the default (if you don't specify otherwise) is 30 seconds.</p>
    pub fn set_response_timeout(mut self, input: ::std::option::Option<i32>) -> Self {
        self.response_timeout = input;
        self
    }
    /// <p>The amount of time, in seconds, that the distribution waits for a response after forwarding a request to the origin. The minimum timeout is 1 second, the maximum is 60 seconds, and the default (if you don't specify otherwise) is 30 seconds.</p>
    pub fn get_response_timeout(&self) -> &::std::option::Option<i32> {
        &self.response_timeout
    }
    /// Consumes the builder and constructs a [`InputOrigin`](crate::types::InputOrigin).
    pub fn build(self) -> crate::types::InputOrigin {
        crate::types::InputOrigin {
            name: self.name,
            region_name: self.region_name,
            protocol_policy: self.protocol_policy,
            response_timeout: self.response_timeout,
        }
    }
}
