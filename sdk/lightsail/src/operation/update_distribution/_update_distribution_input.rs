// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateDistributionInput {
    /// <p>The name of the distribution to update.</p>
    /// <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you can specify.</p>
    pub distribution_name: ::std::option::Option<::std::string::String>,
    /// <p>An object that describes the origin resource for the distribution, such as a Lightsail instance, bucket, or load balancer.</p>
    /// <p>The distribution pulls, caches, and serves content from the origin.</p>
    pub origin: ::std::option::Option<crate::types::InputOrigin>,
    /// <p>An object that describes the default cache behavior for the distribution.</p>
    pub default_cache_behavior: ::std::option::Option<crate::types::CacheBehavior>,
    /// <p>An object that describes the cache behavior settings for the distribution.</p><note>
    /// <p>The <code>cacheBehaviorSettings</code> specified in your <code>UpdateDistributionRequest</code> will replace your distribution's existing settings.</p>
    /// </note>
    pub cache_behavior_settings: ::std::option::Option<crate::types::CacheSettings>,
    /// <p>An array of objects that describe the per-path cache behavior for the distribution.</p>
    pub cache_behaviors: ::std::option::Option<::std::vec::Vec<crate::types::CacheBehaviorPerPath>>,
    /// <p>Indicates whether to enable the distribution.</p>
    pub is_enabled: ::std::option::Option<bool>,
    /// <p>Use this parameter to update the minimum TLS protocol version for the SSL/TLS certificate that's attached to the distribution.</p>
    pub viewer_minimum_tls_protocol_version: ::std::option::Option<crate::types::ViewerMinimumTlsProtocolVersionEnum>,
    /// <p>The name of the SSL/TLS certificate that you want to attach to the distribution.</p>
    /// <p>Only certificates with a status of <code>ISSUED</code> can be attached to a distribution.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetCertificates.html">GetCertificates</a> action to get a list of certificate names that you can specify.</p>
    pub certificate_name: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the default SSL/TLS certificate is attached to the distribution. The default value is <code>true</code>. When <code>true</code>, the distribution uses the default domain name such as <code>d111111abcdef8.cloudfront.net</code>.</p>
    /// <p>Set this value to <code>false</code> to attach a new certificate to the distribution.</p>
    pub use_default_certificate: ::std::option::Option<bool>,
}
impl UpdateDistributionInput {
    /// <p>The name of the distribution to update.</p>
    /// <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you can specify.</p>
    pub fn distribution_name(&self) -> ::std::option::Option<&str> {
        self.distribution_name.as_deref()
    }
    /// <p>An object that describes the origin resource for the distribution, such as a Lightsail instance, bucket, or load balancer.</p>
    /// <p>The distribution pulls, caches, and serves content from the origin.</p>
    pub fn origin(&self) -> ::std::option::Option<&crate::types::InputOrigin> {
        self.origin.as_ref()
    }
    /// <p>An object that describes the default cache behavior for the distribution.</p>
    pub fn default_cache_behavior(&self) -> ::std::option::Option<&crate::types::CacheBehavior> {
        self.default_cache_behavior.as_ref()
    }
    /// <p>An object that describes the cache behavior settings for the distribution.</p><note>
    /// <p>The <code>cacheBehaviorSettings</code> specified in your <code>UpdateDistributionRequest</code> will replace your distribution's existing settings.</p>
    /// </note>
    pub fn cache_behavior_settings(&self) -> ::std::option::Option<&crate::types::CacheSettings> {
        self.cache_behavior_settings.as_ref()
    }
    /// <p>An array of objects that describe the per-path cache behavior for the distribution.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cache_behaviors.is_none()`.
    pub fn cache_behaviors(&self) -> &[crate::types::CacheBehaviorPerPath] {
        self.cache_behaviors.as_deref().unwrap_or_default()
    }
    /// <p>Indicates whether to enable the distribution.</p>
    pub fn is_enabled(&self) -> ::std::option::Option<bool> {
        self.is_enabled
    }
    /// <p>Use this parameter to update the minimum TLS protocol version for the SSL/TLS certificate that's attached to the distribution.</p>
    pub fn viewer_minimum_tls_protocol_version(&self) -> ::std::option::Option<&crate::types::ViewerMinimumTlsProtocolVersionEnum> {
        self.viewer_minimum_tls_protocol_version.as_ref()
    }
    /// <p>The name of the SSL/TLS certificate that you want to attach to the distribution.</p>
    /// <p>Only certificates with a status of <code>ISSUED</code> can be attached to a distribution.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetCertificates.html">GetCertificates</a> action to get a list of certificate names that you can specify.</p>
    pub fn certificate_name(&self) -> ::std::option::Option<&str> {
        self.certificate_name.as_deref()
    }
    /// <p>Indicates whether the default SSL/TLS certificate is attached to the distribution. The default value is <code>true</code>. When <code>true</code>, the distribution uses the default domain name such as <code>d111111abcdef8.cloudfront.net</code>.</p>
    /// <p>Set this value to <code>false</code> to attach a new certificate to the distribution.</p>
    pub fn use_default_certificate(&self) -> ::std::option::Option<bool> {
        self.use_default_certificate
    }
}
impl UpdateDistributionInput {
    /// Creates a new builder-style object to manufacture [`UpdateDistributionInput`](crate::operation::update_distribution::UpdateDistributionInput).
    pub fn builder() -> crate::operation::update_distribution::builders::UpdateDistributionInputBuilder {
        crate::operation::update_distribution::builders::UpdateDistributionInputBuilder::default()
    }
}

/// A builder for [`UpdateDistributionInput`](crate::operation::update_distribution::UpdateDistributionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateDistributionInputBuilder {
    pub(crate) distribution_name: ::std::option::Option<::std::string::String>,
    pub(crate) origin: ::std::option::Option<crate::types::InputOrigin>,
    pub(crate) default_cache_behavior: ::std::option::Option<crate::types::CacheBehavior>,
    pub(crate) cache_behavior_settings: ::std::option::Option<crate::types::CacheSettings>,
    pub(crate) cache_behaviors: ::std::option::Option<::std::vec::Vec<crate::types::CacheBehaviorPerPath>>,
    pub(crate) is_enabled: ::std::option::Option<bool>,
    pub(crate) viewer_minimum_tls_protocol_version: ::std::option::Option<crate::types::ViewerMinimumTlsProtocolVersionEnum>,
    pub(crate) certificate_name: ::std::option::Option<::std::string::String>,
    pub(crate) use_default_certificate: ::std::option::Option<bool>,
}
impl UpdateDistributionInputBuilder {
    /// <p>The name of the distribution to update.</p>
    /// <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you can specify.</p>
    /// This field is required.
    pub fn distribution_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.distribution_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the distribution to update.</p>
    /// <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you can specify.</p>
    pub fn set_distribution_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.distribution_name = input;
        self
    }
    /// <p>The name of the distribution to update.</p>
    /// <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you can specify.</p>
    pub fn get_distribution_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.distribution_name
    }
    /// <p>An object that describes the origin resource for the distribution, such as a Lightsail instance, bucket, or load balancer.</p>
    /// <p>The distribution pulls, caches, and serves content from the origin.</p>
    pub fn origin(mut self, input: crate::types::InputOrigin) -> Self {
        self.origin = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that describes the origin resource for the distribution, such as a Lightsail instance, bucket, or load balancer.</p>
    /// <p>The distribution pulls, caches, and serves content from the origin.</p>
    pub fn set_origin(mut self, input: ::std::option::Option<crate::types::InputOrigin>) -> Self {
        self.origin = input;
        self
    }
    /// <p>An object that describes the origin resource for the distribution, such as a Lightsail instance, bucket, or load balancer.</p>
    /// <p>The distribution pulls, caches, and serves content from the origin.</p>
    pub fn get_origin(&self) -> &::std::option::Option<crate::types::InputOrigin> {
        &self.origin
    }
    /// <p>An object that describes the default cache behavior for the distribution.</p>
    pub fn default_cache_behavior(mut self, input: crate::types::CacheBehavior) -> Self {
        self.default_cache_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that describes the default cache behavior for the distribution.</p>
    pub fn set_default_cache_behavior(mut self, input: ::std::option::Option<crate::types::CacheBehavior>) -> Self {
        self.default_cache_behavior = input;
        self
    }
    /// <p>An object that describes the default cache behavior for the distribution.</p>
    pub fn get_default_cache_behavior(&self) -> &::std::option::Option<crate::types::CacheBehavior> {
        &self.default_cache_behavior
    }
    /// <p>An object that describes the cache behavior settings for the distribution.</p><note>
    /// <p>The <code>cacheBehaviorSettings</code> specified in your <code>UpdateDistributionRequest</code> will replace your distribution's existing settings.</p>
    /// </note>
    pub fn cache_behavior_settings(mut self, input: crate::types::CacheSettings) -> Self {
        self.cache_behavior_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that describes the cache behavior settings for the distribution.</p><note>
    /// <p>The <code>cacheBehaviorSettings</code> specified in your <code>UpdateDistributionRequest</code> will replace your distribution's existing settings.</p>
    /// </note>
    pub fn set_cache_behavior_settings(mut self, input: ::std::option::Option<crate::types::CacheSettings>) -> Self {
        self.cache_behavior_settings = input;
        self
    }
    /// <p>An object that describes the cache behavior settings for the distribution.</p><note>
    /// <p>The <code>cacheBehaviorSettings</code> specified in your <code>UpdateDistributionRequest</code> will replace your distribution's existing settings.</p>
    /// </note>
    pub fn get_cache_behavior_settings(&self) -> &::std::option::Option<crate::types::CacheSettings> {
        &self.cache_behavior_settings
    }
    /// Appends an item to `cache_behaviors`.
    ///
    /// To override the contents of this collection use [`set_cache_behaviors`](Self::set_cache_behaviors).
    ///
    /// <p>An array of objects that describe the per-path cache behavior for the distribution.</p>
    pub fn cache_behaviors(mut self, input: crate::types::CacheBehaviorPerPath) -> Self {
        let mut v = self.cache_behaviors.unwrap_or_default();
        v.push(input);
        self.cache_behaviors = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects that describe the per-path cache behavior for the distribution.</p>
    pub fn set_cache_behaviors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CacheBehaviorPerPath>>) -> Self {
        self.cache_behaviors = input;
        self
    }
    /// <p>An array of objects that describe the per-path cache behavior for the distribution.</p>
    pub fn get_cache_behaviors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CacheBehaviorPerPath>> {
        &self.cache_behaviors
    }
    /// <p>Indicates whether to enable the distribution.</p>
    pub fn is_enabled(mut self, input: bool) -> Self {
        self.is_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether to enable the distribution.</p>
    pub fn set_is_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_enabled = input;
        self
    }
    /// <p>Indicates whether to enable the distribution.</p>
    pub fn get_is_enabled(&self) -> &::std::option::Option<bool> {
        &self.is_enabled
    }
    /// <p>Use this parameter to update the minimum TLS protocol version for the SSL/TLS certificate that's attached to the distribution.</p>
    pub fn viewer_minimum_tls_protocol_version(mut self, input: crate::types::ViewerMinimumTlsProtocolVersionEnum) -> Self {
        self.viewer_minimum_tls_protocol_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to update the minimum TLS protocol version for the SSL/TLS certificate that's attached to the distribution.</p>
    pub fn set_viewer_minimum_tls_protocol_version(
        mut self,
        input: ::std::option::Option<crate::types::ViewerMinimumTlsProtocolVersionEnum>,
    ) -> Self {
        self.viewer_minimum_tls_protocol_version = input;
        self
    }
    /// <p>Use this parameter to update the minimum TLS protocol version for the SSL/TLS certificate that's attached to the distribution.</p>
    pub fn get_viewer_minimum_tls_protocol_version(&self) -> &::std::option::Option<crate::types::ViewerMinimumTlsProtocolVersionEnum> {
        &self.viewer_minimum_tls_protocol_version
    }
    /// <p>The name of the SSL/TLS certificate that you want to attach to the distribution.</p>
    /// <p>Only certificates with a status of <code>ISSUED</code> can be attached to a distribution.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetCertificates.html">GetCertificates</a> action to get a list of certificate names that you can specify.</p>
    pub fn certificate_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certificate_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the SSL/TLS certificate that you want to attach to the distribution.</p>
    /// <p>Only certificates with a status of <code>ISSUED</code> can be attached to a distribution.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetCertificates.html">GetCertificates</a> action to get a list of certificate names that you can specify.</p>
    pub fn set_certificate_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certificate_name = input;
        self
    }
    /// <p>The name of the SSL/TLS certificate that you want to attach to the distribution.</p>
    /// <p>Only certificates with a status of <code>ISSUED</code> can be attached to a distribution.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetCertificates.html">GetCertificates</a> action to get a list of certificate names that you can specify.</p>
    pub fn get_certificate_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.certificate_name
    }
    /// <p>Indicates whether the default SSL/TLS certificate is attached to the distribution. The default value is <code>true</code>. When <code>true</code>, the distribution uses the default domain name such as <code>d111111abcdef8.cloudfront.net</code>.</p>
    /// <p>Set this value to <code>false</code> to attach a new certificate to the distribution.</p>
    pub fn use_default_certificate(mut self, input: bool) -> Self {
        self.use_default_certificate = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the default SSL/TLS certificate is attached to the distribution. The default value is <code>true</code>. When <code>true</code>, the distribution uses the default domain name such as <code>d111111abcdef8.cloudfront.net</code>.</p>
    /// <p>Set this value to <code>false</code> to attach a new certificate to the distribution.</p>
    pub fn set_use_default_certificate(mut self, input: ::std::option::Option<bool>) -> Self {
        self.use_default_certificate = input;
        self
    }
    /// <p>Indicates whether the default SSL/TLS certificate is attached to the distribution. The default value is <code>true</code>. When <code>true</code>, the distribution uses the default domain name such as <code>d111111abcdef8.cloudfront.net</code>.</p>
    /// <p>Set this value to <code>false</code> to attach a new certificate to the distribution.</p>
    pub fn get_use_default_certificate(&self) -> &::std::option::Option<bool> {
        &self.use_default_certificate
    }
    /// Consumes the builder and constructs a [`UpdateDistributionInput`](crate::operation::update_distribution::UpdateDistributionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_distribution::UpdateDistributionInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_distribution::UpdateDistributionInput {
            distribution_name: self.distribution_name,
            origin: self.origin,
            default_cache_behavior: self.default_cache_behavior,
            cache_behavior_settings: self.cache_behavior_settings,
            cache_behaviors: self.cache_behaviors,
            is_enabled: self.is_enabled,
            viewer_minimum_tls_protocol_version: self.viewer_minimum_tls_protocol_version,
            certificate_name: self.certificate_name,
            use_default_certificate: self.use_default_certificate,
        })
    }
}
