// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Use this structure to enable cross-account access, so that you can use a target account to access Prometheus metrics from source accounts.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RoleConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the role used in the source account to enable cross-account scraping. For information about the contents of this policy, see <a href="https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#cross-account-remote-write">Cross-account setup</a>.</p>
    pub source_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the role used in the target account to enable cross-account scraping. For information about the contents of this policy, see <a href="https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#cross-account-remote-write">Cross-account setup</a>.</p>
    pub target_role_arn: ::std::option::Option<::std::string::String>,
}
impl RoleConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the role used in the source account to enable cross-account scraping. For information about the contents of this policy, see <a href="https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#cross-account-remote-write">Cross-account setup</a>.</p>
    pub fn source_role_arn(&self) -> ::std::option::Option<&str> {
        self.source_role_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the role used in the target account to enable cross-account scraping. For information about the contents of this policy, see <a href="https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#cross-account-remote-write">Cross-account setup</a>.</p>
    pub fn target_role_arn(&self) -> ::std::option::Option<&str> {
        self.target_role_arn.as_deref()
    }
}
impl RoleConfiguration {
    /// Creates a new builder-style object to manufacture [`RoleConfiguration`](crate::types::RoleConfiguration).
    pub fn builder() -> crate::types::builders::RoleConfigurationBuilder {
        crate::types::builders::RoleConfigurationBuilder::default()
    }
}

/// A builder for [`RoleConfiguration`](crate::types::RoleConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RoleConfigurationBuilder {
    pub(crate) source_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) target_role_arn: ::std::option::Option<::std::string::String>,
}
impl RoleConfigurationBuilder {
    /// <p>The Amazon Resource Name (ARN) of the role used in the source account to enable cross-account scraping. For information about the contents of this policy, see <a href="https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#cross-account-remote-write">Cross-account setup</a>.</p>
    pub fn source_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role used in the source account to enable cross-account scraping. For information about the contents of this policy, see <a href="https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#cross-account-remote-write">Cross-account setup</a>.</p>
    pub fn set_source_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role used in the source account to enable cross-account scraping. For information about the contents of this policy, see <a href="https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#cross-account-remote-write">Cross-account setup</a>.</p>
    pub fn get_source_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_role_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the role used in the target account to enable cross-account scraping. For information about the contents of this policy, see <a href="https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#cross-account-remote-write">Cross-account setup</a>.</p>
    pub fn target_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role used in the target account to enable cross-account scraping. For information about the contents of this policy, see <a href="https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#cross-account-remote-write">Cross-account setup</a>.</p>
    pub fn set_target_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role used in the target account to enable cross-account scraping. For information about the contents of this policy, see <a href="https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#cross-account-remote-write">Cross-account setup</a>.</p>
    pub fn get_target_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_role_arn
    }
    /// Consumes the builder and constructs a [`RoleConfiguration`](crate::types::RoleConfiguration).
    pub fn build(self) -> crate::types::RoleConfiguration {
        crate::types::RoleConfiguration {
            source_role_arn: self.source_role_arn,
            target_role_arn: self.target_role_arn,
        }
    }
}
