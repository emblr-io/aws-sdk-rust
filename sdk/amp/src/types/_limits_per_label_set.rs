// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure defines one label set used to enforce active time series limits for the workspace, and defines the limit for that label set.</p>
/// <p>A label set is a unique combination of label-value pairs. Use them to control time series limits and to monitor usage by specific label groups. Example label sets might be <code>team:finance</code> or <code>env:prod</code></p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LimitsPerLabelSet {
    /// <p>This structure contains the information about the limits that apply to time series that match this label set.</p>
    pub limits: ::std::option::Option<crate::types::LimitsPerLabelSetEntry>,
    /// <p>This defines one label set that will have an enforced active time series limit.</p>
    /// <p>Label values accept ASCII characters and must contain at least one character that isn't whitespace. ASCII control characters are not accepted. If the label name is metric name label <code>__<i>name</i>__</code>, then the <i>metric</i> part of the name must conform to the following pattern: <code>\[a-zA-Z_:\]\[a-zA-Z0-9_:\]*</code></p>
    pub label_set: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl LimitsPerLabelSet {
    /// <p>This structure contains the information about the limits that apply to time series that match this label set.</p>
    pub fn limits(&self) -> ::std::option::Option<&crate::types::LimitsPerLabelSetEntry> {
        self.limits.as_ref()
    }
    /// <p>This defines one label set that will have an enforced active time series limit.</p>
    /// <p>Label values accept ASCII characters and must contain at least one character that isn't whitespace. ASCII control characters are not accepted. If the label name is metric name label <code>__<i>name</i>__</code>, then the <i>metric</i> part of the name must conform to the following pattern: <code>\[a-zA-Z_:\]\[a-zA-Z0-9_:\]*</code></p>
    pub fn label_set(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.label_set
    }
}
impl LimitsPerLabelSet {
    /// Creates a new builder-style object to manufacture [`LimitsPerLabelSet`](crate::types::LimitsPerLabelSet).
    pub fn builder() -> crate::types::builders::LimitsPerLabelSetBuilder {
        crate::types::builders::LimitsPerLabelSetBuilder::default()
    }
}

/// A builder for [`LimitsPerLabelSet`](crate::types::LimitsPerLabelSet).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LimitsPerLabelSetBuilder {
    pub(crate) limits: ::std::option::Option<crate::types::LimitsPerLabelSetEntry>,
    pub(crate) label_set: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl LimitsPerLabelSetBuilder {
    /// <p>This structure contains the information about the limits that apply to time series that match this label set.</p>
    /// This field is required.
    pub fn limits(mut self, input: crate::types::LimitsPerLabelSetEntry) -> Self {
        self.limits = ::std::option::Option::Some(input);
        self
    }
    /// <p>This structure contains the information about the limits that apply to time series that match this label set.</p>
    pub fn set_limits(mut self, input: ::std::option::Option<crate::types::LimitsPerLabelSetEntry>) -> Self {
        self.limits = input;
        self
    }
    /// <p>This structure contains the information about the limits that apply to time series that match this label set.</p>
    pub fn get_limits(&self) -> &::std::option::Option<crate::types::LimitsPerLabelSetEntry> {
        &self.limits
    }
    /// Adds a key-value pair to `label_set`.
    ///
    /// To override the contents of this collection use [`set_label_set`](Self::set_label_set).
    ///
    /// <p>This defines one label set that will have an enforced active time series limit.</p>
    /// <p>Label values accept ASCII characters and must contain at least one character that isn't whitespace. ASCII control characters are not accepted. If the label name is metric name label <code>__<i>name</i>__</code>, then the <i>metric</i> part of the name must conform to the following pattern: <code>\[a-zA-Z_:\]\[a-zA-Z0-9_:\]*</code></p>
    pub fn label_set(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.label_set.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.label_set = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>This defines one label set that will have an enforced active time series limit.</p>
    /// <p>Label values accept ASCII characters and must contain at least one character that isn't whitespace. ASCII control characters are not accepted. If the label name is metric name label <code>__<i>name</i>__</code>, then the <i>metric</i> part of the name must conform to the following pattern: <code>\[a-zA-Z_:\]\[a-zA-Z0-9_:\]*</code></p>
    pub fn set_label_set(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.label_set = input;
        self
    }
    /// <p>This defines one label set that will have an enforced active time series limit.</p>
    /// <p>Label values accept ASCII characters and must contain at least one character that isn't whitespace. ASCII control characters are not accepted. If the label name is metric name label <code>__<i>name</i>__</code>, then the <i>metric</i> part of the name must conform to the following pattern: <code>\[a-zA-Z_:\]\[a-zA-Z0-9_:\]*</code></p>
    pub fn get_label_set(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.label_set
    }
    /// Consumes the builder and constructs a [`LimitsPerLabelSet`](crate::types::LimitsPerLabelSet).
    /// This method will fail if any of the following fields are not set:
    /// - [`label_set`](crate::types::builders::LimitsPerLabelSetBuilder::label_set)
    pub fn build(self) -> ::std::result::Result<crate::types::LimitsPerLabelSet, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LimitsPerLabelSet {
            limits: self.limits,
            label_set: self.label_set.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "label_set",
                    "label_set was not specified but it is required when building LimitsPerLabelSet",
                )
            })?,
        })
    }
}
