// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains the information about the limits that apply to time series that match one label set.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LimitsPerLabelSetEntry {
    /// <p>The maximum number of active series that can be ingested that match this label set.</p>
    /// <p>Setting this to 0 causes no label set limit to be enforced, but it does cause Amazon Managed Service for Prometheus to vend label set metrics to CloudWatch</p>
    pub max_series: ::std::option::Option<i64>,
}
impl LimitsPerLabelSetEntry {
    /// <p>The maximum number of active series that can be ingested that match this label set.</p>
    /// <p>Setting this to 0 causes no label set limit to be enforced, but it does cause Amazon Managed Service for Prometheus to vend label set metrics to CloudWatch</p>
    pub fn max_series(&self) -> ::std::option::Option<i64> {
        self.max_series
    }
}
impl LimitsPerLabelSetEntry {
    /// Creates a new builder-style object to manufacture [`LimitsPerLabelSetEntry`](crate::types::LimitsPerLabelSetEntry).
    pub fn builder() -> crate::types::builders::LimitsPerLabelSetEntryBuilder {
        crate::types::builders::LimitsPerLabelSetEntryBuilder::default()
    }
}

/// A builder for [`LimitsPerLabelSetEntry`](crate::types::LimitsPerLabelSetEntry).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LimitsPerLabelSetEntryBuilder {
    pub(crate) max_series: ::std::option::Option<i64>,
}
impl LimitsPerLabelSetEntryBuilder {
    /// <p>The maximum number of active series that can be ingested that match this label set.</p>
    /// <p>Setting this to 0 causes no label set limit to be enforced, but it does cause Amazon Managed Service for Prometheus to vend label set metrics to CloudWatch</p>
    pub fn max_series(mut self, input: i64) -> Self {
        self.max_series = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of active series that can be ingested that match this label set.</p>
    /// <p>Setting this to 0 causes no label set limit to be enforced, but it does cause Amazon Managed Service for Prometheus to vend label set metrics to CloudWatch</p>
    pub fn set_max_series(mut self, input: ::std::option::Option<i64>) -> Self {
        self.max_series = input;
        self
    }
    /// <p>The maximum number of active series that can be ingested that match this label set.</p>
    /// <p>Setting this to 0 causes no label set limit to be enforced, but it does cause Amazon Managed Service for Prometheus to vend label set metrics to CloudWatch</p>
    pub fn get_max_series(&self) -> &::std::option::Option<i64> {
        &self.max_series
    }
    /// Consumes the builder and constructs a [`LimitsPerLabelSetEntry`](crate::types::LimitsPerLabelSetEntry).
    pub fn build(self) -> crate::types::LimitsPerLabelSetEntry {
        crate::types::LimitsPerLabelSetEntry { max_series: self.max_series }
    }
}
