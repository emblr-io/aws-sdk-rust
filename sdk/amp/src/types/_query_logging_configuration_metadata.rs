// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metadata for a query logging configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QueryLoggingConfigurationMetadata {
    /// <p>The current status of the query logging configuration.</p>
    pub status: ::std::option::Option<crate::types::QueryLoggingConfigurationStatus>,
    /// <p>The ID of the workspace associated with this query logging configuration.</p>
    pub workspace: ::std::string::String,
    /// <p>The configured destinations for the query logging configuration.</p>
    pub destinations: ::std::vec::Vec<crate::types::LoggingDestination>,
    /// <p>The date and time when the query logging configuration was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The date and time when the query logging configuration was last modified.</p>
    pub modified_at: ::aws_smithy_types::DateTime,
}
impl QueryLoggingConfigurationMetadata {
    /// <p>The current status of the query logging configuration.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::QueryLoggingConfigurationStatus> {
        self.status.as_ref()
    }
    /// <p>The ID of the workspace associated with this query logging configuration.</p>
    pub fn workspace(&self) -> &str {
        use std::ops::Deref;
        self.workspace.deref()
    }
    /// <p>The configured destinations for the query logging configuration.</p>
    pub fn destinations(&self) -> &[crate::types::LoggingDestination] {
        use std::ops::Deref;
        self.destinations.deref()
    }
    /// <p>The date and time when the query logging configuration was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The date and time when the query logging configuration was last modified.</p>
    pub fn modified_at(&self) -> &::aws_smithy_types::DateTime {
        &self.modified_at
    }
}
impl QueryLoggingConfigurationMetadata {
    /// Creates a new builder-style object to manufacture [`QueryLoggingConfigurationMetadata`](crate::types::QueryLoggingConfigurationMetadata).
    pub fn builder() -> crate::types::builders::QueryLoggingConfigurationMetadataBuilder {
        crate::types::builders::QueryLoggingConfigurationMetadataBuilder::default()
    }
}

/// A builder for [`QueryLoggingConfigurationMetadata`](crate::types::QueryLoggingConfigurationMetadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QueryLoggingConfigurationMetadataBuilder {
    pub(crate) status: ::std::option::Option<crate::types::QueryLoggingConfigurationStatus>,
    pub(crate) workspace: ::std::option::Option<::std::string::String>,
    pub(crate) destinations: ::std::option::Option<::std::vec::Vec<crate::types::LoggingDestination>>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl QueryLoggingConfigurationMetadataBuilder {
    /// <p>The current status of the query logging configuration.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::QueryLoggingConfigurationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the query logging configuration.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::QueryLoggingConfigurationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the query logging configuration.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::QueryLoggingConfigurationStatus> {
        &self.status
    }
    /// <p>The ID of the workspace associated with this query logging configuration.</p>
    /// This field is required.
    pub fn workspace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the workspace associated with this query logging configuration.</p>
    pub fn set_workspace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace = input;
        self
    }
    /// <p>The ID of the workspace associated with this query logging configuration.</p>
    pub fn get_workspace(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace
    }
    /// Appends an item to `destinations`.
    ///
    /// To override the contents of this collection use [`set_destinations`](Self::set_destinations).
    ///
    /// <p>The configured destinations for the query logging configuration.</p>
    pub fn destinations(mut self, input: crate::types::LoggingDestination) -> Self {
        let mut v = self.destinations.unwrap_or_default();
        v.push(input);
        self.destinations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The configured destinations for the query logging configuration.</p>
    pub fn set_destinations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LoggingDestination>>) -> Self {
        self.destinations = input;
        self
    }
    /// <p>The configured destinations for the query logging configuration.</p>
    pub fn get_destinations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LoggingDestination>> {
        &self.destinations
    }
    /// <p>The date and time when the query logging configuration was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the query logging configuration was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time when the query logging configuration was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The date and time when the query logging configuration was last modified.</p>
    /// This field is required.
    pub fn modified_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modified_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the query logging configuration was last modified.</p>
    pub fn set_modified_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modified_at = input;
        self
    }
    /// <p>The date and time when the query logging configuration was last modified.</p>
    pub fn get_modified_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modified_at
    }
    /// Consumes the builder and constructs a [`QueryLoggingConfigurationMetadata`](crate::types::QueryLoggingConfigurationMetadata).
    /// This method will fail if any of the following fields are not set:
    /// - [`workspace`](crate::types::builders::QueryLoggingConfigurationMetadataBuilder::workspace)
    /// - [`destinations`](crate::types::builders::QueryLoggingConfigurationMetadataBuilder::destinations)
    /// - [`created_at`](crate::types::builders::QueryLoggingConfigurationMetadataBuilder::created_at)
    /// - [`modified_at`](crate::types::builders::QueryLoggingConfigurationMetadataBuilder::modified_at)
    pub fn build(self) -> ::std::result::Result<crate::types::QueryLoggingConfigurationMetadata, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::QueryLoggingConfigurationMetadata {
            status: self.status,
            workspace: self.workspace.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "workspace",
                    "workspace was not specified but it is required when building QueryLoggingConfigurationMetadata",
                )
            })?,
            destinations: self.destinations.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "destinations",
                    "destinations was not specified but it is required when building QueryLoggingConfigurationMetadata",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building QueryLoggingConfigurationMetadata",
                )
            })?,
            modified_at: self.modified_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "modified_at",
                    "modified_at was not specified but it is required when building QueryLoggingConfigurationMetadata",
                )
            })?,
        })
    }
}
