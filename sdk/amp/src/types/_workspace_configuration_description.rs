// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains the description of the workspace configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkspaceConfigurationDescription {
    /// <p>This structure displays the current status of the workspace configuration, and might also contain a reason for that status.</p>
    pub status: ::std::option::Option<crate::types::WorkspaceConfigurationStatus>,
    /// <p>This is an array of structures, where each structure displays one label sets for the workspace and the limits for that label set.</p>
    pub limits_per_label_set: ::std::option::Option<::std::vec::Vec<crate::types::LimitsPerLabelSet>>,
    /// <p>This field displays how many days that metrics are retained in the workspace.</p>
    pub retention_period_in_days: ::std::option::Option<i32>,
}
impl WorkspaceConfigurationDescription {
    /// <p>This structure displays the current status of the workspace configuration, and might also contain a reason for that status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::WorkspaceConfigurationStatus> {
        self.status.as_ref()
    }
    /// <p>This is an array of structures, where each structure displays one label sets for the workspace and the limits for that label set.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.limits_per_label_set.is_none()`.
    pub fn limits_per_label_set(&self) -> &[crate::types::LimitsPerLabelSet] {
        self.limits_per_label_set.as_deref().unwrap_or_default()
    }
    /// <p>This field displays how many days that metrics are retained in the workspace.</p>
    pub fn retention_period_in_days(&self) -> ::std::option::Option<i32> {
        self.retention_period_in_days
    }
}
impl WorkspaceConfigurationDescription {
    /// Creates a new builder-style object to manufacture [`WorkspaceConfigurationDescription`](crate::types::WorkspaceConfigurationDescription).
    pub fn builder() -> crate::types::builders::WorkspaceConfigurationDescriptionBuilder {
        crate::types::builders::WorkspaceConfigurationDescriptionBuilder::default()
    }
}

/// A builder for [`WorkspaceConfigurationDescription`](crate::types::WorkspaceConfigurationDescription).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WorkspaceConfigurationDescriptionBuilder {
    pub(crate) status: ::std::option::Option<crate::types::WorkspaceConfigurationStatus>,
    pub(crate) limits_per_label_set: ::std::option::Option<::std::vec::Vec<crate::types::LimitsPerLabelSet>>,
    pub(crate) retention_period_in_days: ::std::option::Option<i32>,
}
impl WorkspaceConfigurationDescriptionBuilder {
    /// <p>This structure displays the current status of the workspace configuration, and might also contain a reason for that status.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::WorkspaceConfigurationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>This structure displays the current status of the workspace configuration, and might also contain a reason for that status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::WorkspaceConfigurationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>This structure displays the current status of the workspace configuration, and might also contain a reason for that status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::WorkspaceConfigurationStatus> {
        &self.status
    }
    /// Appends an item to `limits_per_label_set`.
    ///
    /// To override the contents of this collection use [`set_limits_per_label_set`](Self::set_limits_per_label_set).
    ///
    /// <p>This is an array of structures, where each structure displays one label sets for the workspace and the limits for that label set.</p>
    pub fn limits_per_label_set(mut self, input: crate::types::LimitsPerLabelSet) -> Self {
        let mut v = self.limits_per_label_set.unwrap_or_default();
        v.push(input);
        self.limits_per_label_set = ::std::option::Option::Some(v);
        self
    }
    /// <p>This is an array of structures, where each structure displays one label sets for the workspace and the limits for that label set.</p>
    pub fn set_limits_per_label_set(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LimitsPerLabelSet>>) -> Self {
        self.limits_per_label_set = input;
        self
    }
    /// <p>This is an array of structures, where each structure displays one label sets for the workspace and the limits for that label set.</p>
    pub fn get_limits_per_label_set(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LimitsPerLabelSet>> {
        &self.limits_per_label_set
    }
    /// <p>This field displays how many days that metrics are retained in the workspace.</p>
    pub fn retention_period_in_days(mut self, input: i32) -> Self {
        self.retention_period_in_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>This field displays how many days that metrics are retained in the workspace.</p>
    pub fn set_retention_period_in_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.retention_period_in_days = input;
        self
    }
    /// <p>This field displays how many days that metrics are retained in the workspace.</p>
    pub fn get_retention_period_in_days(&self) -> &::std::option::Option<i32> {
        &self.retention_period_in_days
    }
    /// Consumes the builder and constructs a [`WorkspaceConfigurationDescription`](crate::types::WorkspaceConfigurationDescription).
    pub fn build(self) -> crate::types::WorkspaceConfigurationDescription {
        crate::types::WorkspaceConfigurationDescription {
            status: self.status,
            limits_per_label_set: self.limits_per_label_set,
            retention_period_in_days: self.retention_period_in_days,
        }
    }
}
