// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a destination and its associated filtering criteria for query logging.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LoggingDestination {
    /// <p>Configuration details for logging to CloudWatch Logs.</p>
    pub cloud_watch_logs: ::std::option::Option<crate::types::CloudWatchLogDestination>,
    /// <p>Filtering criteria that determine which queries are logged.</p>
    pub filters: ::std::option::Option<crate::types::LoggingFilter>,
}
impl LoggingDestination {
    /// <p>Configuration details for logging to CloudWatch Logs.</p>
    pub fn cloud_watch_logs(&self) -> ::std::option::Option<&crate::types::CloudWatchLogDestination> {
        self.cloud_watch_logs.as_ref()
    }
    /// <p>Filtering criteria that determine which queries are logged.</p>
    pub fn filters(&self) -> ::std::option::Option<&crate::types::LoggingFilter> {
        self.filters.as_ref()
    }
}
impl LoggingDestination {
    /// Creates a new builder-style object to manufacture [`LoggingDestination`](crate::types::LoggingDestination).
    pub fn builder() -> crate::types::builders::LoggingDestinationBuilder {
        crate::types::builders::LoggingDestinationBuilder::default()
    }
}

/// A builder for [`LoggingDestination`](crate::types::LoggingDestination).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LoggingDestinationBuilder {
    pub(crate) cloud_watch_logs: ::std::option::Option<crate::types::CloudWatchLogDestination>,
    pub(crate) filters: ::std::option::Option<crate::types::LoggingFilter>,
}
impl LoggingDestinationBuilder {
    /// <p>Configuration details for logging to CloudWatch Logs.</p>
    /// This field is required.
    pub fn cloud_watch_logs(mut self, input: crate::types::CloudWatchLogDestination) -> Self {
        self.cloud_watch_logs = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration details for logging to CloudWatch Logs.</p>
    pub fn set_cloud_watch_logs(mut self, input: ::std::option::Option<crate::types::CloudWatchLogDestination>) -> Self {
        self.cloud_watch_logs = input;
        self
    }
    /// <p>Configuration details for logging to CloudWatch Logs.</p>
    pub fn get_cloud_watch_logs(&self) -> &::std::option::Option<crate::types::CloudWatchLogDestination> {
        &self.cloud_watch_logs
    }
    /// <p>Filtering criteria that determine which queries are logged.</p>
    /// This field is required.
    pub fn filters(mut self, input: crate::types::LoggingFilter) -> Self {
        self.filters = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filtering criteria that determine which queries are logged.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<crate::types::LoggingFilter>) -> Self {
        self.filters = input;
        self
    }
    /// <p>Filtering criteria that determine which queries are logged.</p>
    pub fn get_filters(&self) -> &::std::option::Option<crate::types::LoggingFilter> {
        &self.filters
    }
    /// Consumes the builder and constructs a [`LoggingDestination`](crate::types::LoggingDestination).
    pub fn build(self) -> crate::types::LoggingDestination {
        crate::types::LoggingDestination {
            cloud_watch_logs: self.cloud_watch_logs,
            filters: self.filters,
        }
    }
}
