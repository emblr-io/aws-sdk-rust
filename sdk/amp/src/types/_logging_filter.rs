// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filtering criteria that determine which queries are logged.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LoggingFilter {
    /// <p>The Query Samples Processed (QSP) threshold above which queries will be logged. Queries processing more samples than this threshold will be captured in logs.</p>
    pub qsp_threshold: i64,
}
impl LoggingFilter {
    /// <p>The Query Samples Processed (QSP) threshold above which queries will be logged. Queries processing more samples than this threshold will be captured in logs.</p>
    pub fn qsp_threshold(&self) -> i64 {
        self.qsp_threshold
    }
}
impl LoggingFilter {
    /// Creates a new builder-style object to manufacture [`LoggingFilter`](crate::types::LoggingFilter).
    pub fn builder() -> crate::types::builders::LoggingFilterBuilder {
        crate::types::builders::LoggingFilterBuilder::default()
    }
}

/// A builder for [`LoggingFilter`](crate::types::LoggingFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LoggingFilterBuilder {
    pub(crate) qsp_threshold: ::std::option::Option<i64>,
}
impl LoggingFilterBuilder {
    /// <p>The Query Samples Processed (QSP) threshold above which queries will be logged. Queries processing more samples than this threshold will be captured in logs.</p>
    /// This field is required.
    pub fn qsp_threshold(mut self, input: i64) -> Self {
        self.qsp_threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Query Samples Processed (QSP) threshold above which queries will be logged. Queries processing more samples than this threshold will be captured in logs.</p>
    pub fn set_qsp_threshold(mut self, input: ::std::option::Option<i64>) -> Self {
        self.qsp_threshold = input;
        self
    }
    /// <p>The Query Samples Processed (QSP) threshold above which queries will be logged. Queries processing more samples than this threshold will be captured in logs.</p>
    pub fn get_qsp_threshold(&self) -> &::std::option::Option<i64> {
        &self.qsp_threshold
    }
    /// Consumes the builder and constructs a [`LoggingFilter`](crate::types::LoggingFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`qsp_threshold`](crate::types::builders::LoggingFilterBuilder::qsp_threshold)
    pub fn build(self) -> ::std::result::Result<crate::types::LoggingFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LoggingFilter {
            qsp_threshold: self.qsp_threshold.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "qsp_threshold",
                    "qsp_threshold was not specified but it is required when building LoggingFilter",
                )
            })?,
        })
    }
}
