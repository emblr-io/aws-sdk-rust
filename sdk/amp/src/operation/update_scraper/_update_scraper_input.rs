// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateScraperInput {
    /// <p>The ID of the scraper to update.</p>
    pub scraper_id: ::std::option::Option<::std::string::String>,
    /// <p>The new alias of the scraper.</p>
    pub alias: ::std::option::Option<::std::string::String>,
    /// <p>Contains the base-64 encoded YAML configuration for the scraper.</p><note>
    /// <p>For more information about configuring a scraper, see <a href="https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html">Using an Amazon Web Services managed collector</a> in the <i>Amazon Managed Service for Prometheus User Guide</i>.</p>
    /// </note>
    pub scrape_configuration: ::std::option::Option<crate::types::ScrapeConfiguration>,
    /// <p>The new Amazon Managed Service for Prometheus workspace to send metrics to.</p>
    pub destination: ::std::option::Option<crate::types::Destination>,
    /// <p>Use this structure to enable cross-account access, so that you can use a target account to access Prometheus metrics from source accounts.</p>
    pub role_configuration: ::std::option::Option<crate::types::RoleConfiguration>,
    /// <p>A unique identifier that you can provide to ensure the idempotency of the request. Case-sensitive.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateScraperInput {
    /// <p>The ID of the scraper to update.</p>
    pub fn scraper_id(&self) -> ::std::option::Option<&str> {
        self.scraper_id.as_deref()
    }
    /// <p>The new alias of the scraper.</p>
    pub fn alias(&self) -> ::std::option::Option<&str> {
        self.alias.as_deref()
    }
    /// <p>Contains the base-64 encoded YAML configuration for the scraper.</p><note>
    /// <p>For more information about configuring a scraper, see <a href="https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html">Using an Amazon Web Services managed collector</a> in the <i>Amazon Managed Service for Prometheus User Guide</i>.</p>
    /// </note>
    pub fn scrape_configuration(&self) -> ::std::option::Option<&crate::types::ScrapeConfiguration> {
        self.scrape_configuration.as_ref()
    }
    /// <p>The new Amazon Managed Service for Prometheus workspace to send metrics to.</p>
    pub fn destination(&self) -> ::std::option::Option<&crate::types::Destination> {
        self.destination.as_ref()
    }
    /// <p>Use this structure to enable cross-account access, so that you can use a target account to access Prometheus metrics from source accounts.</p>
    pub fn role_configuration(&self) -> ::std::option::Option<&crate::types::RoleConfiguration> {
        self.role_configuration.as_ref()
    }
    /// <p>A unique identifier that you can provide to ensure the idempotency of the request. Case-sensitive.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl UpdateScraperInput {
    /// Creates a new builder-style object to manufacture [`UpdateScraperInput`](crate::operation::update_scraper::UpdateScraperInput).
    pub fn builder() -> crate::operation::update_scraper::builders::UpdateScraperInputBuilder {
        crate::operation::update_scraper::builders::UpdateScraperInputBuilder::default()
    }
}

/// A builder for [`UpdateScraperInput`](crate::operation::update_scraper::UpdateScraperInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateScraperInputBuilder {
    pub(crate) scraper_id: ::std::option::Option<::std::string::String>,
    pub(crate) alias: ::std::option::Option<::std::string::String>,
    pub(crate) scrape_configuration: ::std::option::Option<crate::types::ScrapeConfiguration>,
    pub(crate) destination: ::std::option::Option<crate::types::Destination>,
    pub(crate) role_configuration: ::std::option::Option<crate::types::RoleConfiguration>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateScraperInputBuilder {
    /// <p>The ID of the scraper to update.</p>
    /// This field is required.
    pub fn scraper_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scraper_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the scraper to update.</p>
    pub fn set_scraper_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scraper_id = input;
        self
    }
    /// <p>The ID of the scraper to update.</p>
    pub fn get_scraper_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.scraper_id
    }
    /// <p>The new alias of the scraper.</p>
    pub fn alias(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.alias = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new alias of the scraper.</p>
    pub fn set_alias(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.alias = input;
        self
    }
    /// <p>The new alias of the scraper.</p>
    pub fn get_alias(&self) -> &::std::option::Option<::std::string::String> {
        &self.alias
    }
    /// <p>Contains the base-64 encoded YAML configuration for the scraper.</p><note>
    /// <p>For more information about configuring a scraper, see <a href="https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html">Using an Amazon Web Services managed collector</a> in the <i>Amazon Managed Service for Prometheus User Guide</i>.</p>
    /// </note>
    pub fn scrape_configuration(mut self, input: crate::types::ScrapeConfiguration) -> Self {
        self.scrape_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the base-64 encoded YAML configuration for the scraper.</p><note>
    /// <p>For more information about configuring a scraper, see <a href="https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html">Using an Amazon Web Services managed collector</a> in the <i>Amazon Managed Service for Prometheus User Guide</i>.</p>
    /// </note>
    pub fn set_scrape_configuration(mut self, input: ::std::option::Option<crate::types::ScrapeConfiguration>) -> Self {
        self.scrape_configuration = input;
        self
    }
    /// <p>Contains the base-64 encoded YAML configuration for the scraper.</p><note>
    /// <p>For more information about configuring a scraper, see <a href="https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html">Using an Amazon Web Services managed collector</a> in the <i>Amazon Managed Service for Prometheus User Guide</i>.</p>
    /// </note>
    pub fn get_scrape_configuration(&self) -> &::std::option::Option<crate::types::ScrapeConfiguration> {
        &self.scrape_configuration
    }
    /// <p>The new Amazon Managed Service for Prometheus workspace to send metrics to.</p>
    pub fn destination(mut self, input: crate::types::Destination) -> Self {
        self.destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>The new Amazon Managed Service for Prometheus workspace to send metrics to.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<crate::types::Destination>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The new Amazon Managed Service for Prometheus workspace to send metrics to.</p>
    pub fn get_destination(&self) -> &::std::option::Option<crate::types::Destination> {
        &self.destination
    }
    /// <p>Use this structure to enable cross-account access, so that you can use a target account to access Prometheus metrics from source accounts.</p>
    pub fn role_configuration(mut self, input: crate::types::RoleConfiguration) -> Self {
        self.role_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this structure to enable cross-account access, so that you can use a target account to access Prometheus metrics from source accounts.</p>
    pub fn set_role_configuration(mut self, input: ::std::option::Option<crate::types::RoleConfiguration>) -> Self {
        self.role_configuration = input;
        self
    }
    /// <p>Use this structure to enable cross-account access, so that you can use a target account to access Prometheus metrics from source accounts.</p>
    pub fn get_role_configuration(&self) -> &::std::option::Option<crate::types::RoleConfiguration> {
        &self.role_configuration
    }
    /// <p>A unique identifier that you can provide to ensure the idempotency of the request. Case-sensitive.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier that you can provide to ensure the idempotency of the request. Case-sensitive.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique identifier that you can provide to ensure the idempotency of the request. Case-sensitive.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`UpdateScraperInput`](crate::operation::update_scraper::UpdateScraperInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_scraper::UpdateScraperInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_scraper::UpdateScraperInput {
            scraper_id: self.scraper_id,
            alias: self.alias,
            scrape_configuration: self.scrape_configuration,
            destination: self.destination,
            role_configuration: self.role_configuration,
            client_token: self.client_token,
        })
    }
}
