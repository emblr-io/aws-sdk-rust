// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateQueryLoggingConfigurationInput {
    /// <p>The ID of the workspace for which to create the query logging configuration.</p>
    pub workspace_id: ::std::option::Option<::std::string::String>,
    /// <p>The destinations where query logs will be sent. Only CloudWatch Logs destination is supported. The list must contain exactly one element.</p>
    pub destinations: ::std::option::Option<::std::vec::Vec<crate::types::LoggingDestination>>,
    /// <p>(Optional) A unique, case-sensitive identifier that you can provide to ensure the idempotency of the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateQueryLoggingConfigurationInput {
    /// <p>The ID of the workspace for which to create the query logging configuration.</p>
    pub fn workspace_id(&self) -> ::std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    /// <p>The destinations where query logs will be sent. Only CloudWatch Logs destination is supported. The list must contain exactly one element.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destinations.is_none()`.
    pub fn destinations(&self) -> &[crate::types::LoggingDestination] {
        self.destinations.as_deref().unwrap_or_default()
    }
    /// <p>(Optional) A unique, case-sensitive identifier that you can provide to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateQueryLoggingConfigurationInput {
    /// Creates a new builder-style object to manufacture [`CreateQueryLoggingConfigurationInput`](crate::operation::create_query_logging_configuration::CreateQueryLoggingConfigurationInput).
    pub fn builder() -> crate::operation::create_query_logging_configuration::builders::CreateQueryLoggingConfigurationInputBuilder {
        crate::operation::create_query_logging_configuration::builders::CreateQueryLoggingConfigurationInputBuilder::default()
    }
}

/// A builder for [`CreateQueryLoggingConfigurationInput`](crate::operation::create_query_logging_configuration::CreateQueryLoggingConfigurationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateQueryLoggingConfigurationInputBuilder {
    pub(crate) workspace_id: ::std::option::Option<::std::string::String>,
    pub(crate) destinations: ::std::option::Option<::std::vec::Vec<crate::types::LoggingDestination>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateQueryLoggingConfigurationInputBuilder {
    /// <p>The ID of the workspace for which to create the query logging configuration.</p>
    /// This field is required.
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the workspace for which to create the query logging configuration.</p>
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_id = input;
        self
    }
    /// <p>The ID of the workspace for which to create the query logging configuration.</p>
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_id
    }
    /// Appends an item to `destinations`.
    ///
    /// To override the contents of this collection use [`set_destinations`](Self::set_destinations).
    ///
    /// <p>The destinations where query logs will be sent. Only CloudWatch Logs destination is supported. The list must contain exactly one element.</p>
    pub fn destinations(mut self, input: crate::types::LoggingDestination) -> Self {
        let mut v = self.destinations.unwrap_or_default();
        v.push(input);
        self.destinations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The destinations where query logs will be sent. Only CloudWatch Logs destination is supported. The list must contain exactly one element.</p>
    pub fn set_destinations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LoggingDestination>>) -> Self {
        self.destinations = input;
        self
    }
    /// <p>The destinations where query logs will be sent. Only CloudWatch Logs destination is supported. The list must contain exactly one element.</p>
    pub fn get_destinations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LoggingDestination>> {
        &self.destinations
    }
    /// <p>(Optional) A unique, case-sensitive identifier that you can provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>(Optional) A unique, case-sensitive identifier that you can provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>(Optional) A unique, case-sensitive identifier that you can provide to ensure the idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateQueryLoggingConfigurationInput`](crate::operation::create_query_logging_configuration::CreateQueryLoggingConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_query_logging_configuration::CreateQueryLoggingConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_query_logging_configuration::CreateQueryLoggingConfigurationInput {
                workspace_id: self.workspace_id,
                destinations: self.destinations,
                client_token: self.client_token,
            },
        )
    }
}
