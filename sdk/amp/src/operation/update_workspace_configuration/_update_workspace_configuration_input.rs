// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateWorkspaceConfigurationInput {
    /// <p>The ID of the workspace that you want to update. To find the IDs of your workspaces, use the <a href="https://docs.aws.amazon.com/prometheus/latest/APIReference/API_ListWorkspaces.htm">ListWorkspaces</a> operation.</p>
    pub workspace_id: ::std::option::Option<::std::string::String>,
    /// <p>You can include a token in your operation to make it an idempotent opeartion.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>This is an array of structures, where each structure defines a label set for the workspace, and defines the active time series limit for each of those label sets. Each label name in a label set must be unique.</p>
    pub limits_per_label_set: ::std::option::Option<::std::vec::Vec<crate::types::LimitsPerLabelSet>>,
    /// <p>Specifies how many days that metrics will be retained in the workspace.</p>
    pub retention_period_in_days: ::std::option::Option<i32>,
}
impl UpdateWorkspaceConfigurationInput {
    /// <p>The ID of the workspace that you want to update. To find the IDs of your workspaces, use the <a href="https://docs.aws.amazon.com/prometheus/latest/APIReference/API_ListWorkspaces.htm">ListWorkspaces</a> operation.</p>
    pub fn workspace_id(&self) -> ::std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    /// <p>You can include a token in your operation to make it an idempotent opeartion.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>This is an array of structures, where each structure defines a label set for the workspace, and defines the active time series limit for each of those label sets. Each label name in a label set must be unique.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.limits_per_label_set.is_none()`.
    pub fn limits_per_label_set(&self) -> &[crate::types::LimitsPerLabelSet] {
        self.limits_per_label_set.as_deref().unwrap_or_default()
    }
    /// <p>Specifies how many days that metrics will be retained in the workspace.</p>
    pub fn retention_period_in_days(&self) -> ::std::option::Option<i32> {
        self.retention_period_in_days
    }
}
impl UpdateWorkspaceConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkspaceConfigurationInput`](crate::operation::update_workspace_configuration::UpdateWorkspaceConfigurationInput).
    pub fn builder() -> crate::operation::update_workspace_configuration::builders::UpdateWorkspaceConfigurationInputBuilder {
        crate::operation::update_workspace_configuration::builders::UpdateWorkspaceConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateWorkspaceConfigurationInput`](crate::operation::update_workspace_configuration::UpdateWorkspaceConfigurationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateWorkspaceConfigurationInputBuilder {
    pub(crate) workspace_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) limits_per_label_set: ::std::option::Option<::std::vec::Vec<crate::types::LimitsPerLabelSet>>,
    pub(crate) retention_period_in_days: ::std::option::Option<i32>,
}
impl UpdateWorkspaceConfigurationInputBuilder {
    /// <p>The ID of the workspace that you want to update. To find the IDs of your workspaces, use the <a href="https://docs.aws.amazon.com/prometheus/latest/APIReference/API_ListWorkspaces.htm">ListWorkspaces</a> operation.</p>
    /// This field is required.
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the workspace that you want to update. To find the IDs of your workspaces, use the <a href="https://docs.aws.amazon.com/prometheus/latest/APIReference/API_ListWorkspaces.htm">ListWorkspaces</a> operation.</p>
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_id = input;
        self
    }
    /// <p>The ID of the workspace that you want to update. To find the IDs of your workspaces, use the <a href="https://docs.aws.amazon.com/prometheus/latest/APIReference/API_ListWorkspaces.htm">ListWorkspaces</a> operation.</p>
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_id
    }
    /// <p>You can include a token in your operation to make it an idempotent opeartion.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>You can include a token in your operation to make it an idempotent opeartion.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>You can include a token in your operation to make it an idempotent opeartion.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Appends an item to `limits_per_label_set`.
    ///
    /// To override the contents of this collection use [`set_limits_per_label_set`](Self::set_limits_per_label_set).
    ///
    /// <p>This is an array of structures, where each structure defines a label set for the workspace, and defines the active time series limit for each of those label sets. Each label name in a label set must be unique.</p>
    pub fn limits_per_label_set(mut self, input: crate::types::LimitsPerLabelSet) -> Self {
        let mut v = self.limits_per_label_set.unwrap_or_default();
        v.push(input);
        self.limits_per_label_set = ::std::option::Option::Some(v);
        self
    }
    /// <p>This is an array of structures, where each structure defines a label set for the workspace, and defines the active time series limit for each of those label sets. Each label name in a label set must be unique.</p>
    pub fn set_limits_per_label_set(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LimitsPerLabelSet>>) -> Self {
        self.limits_per_label_set = input;
        self
    }
    /// <p>This is an array of structures, where each structure defines a label set for the workspace, and defines the active time series limit for each of those label sets. Each label name in a label set must be unique.</p>
    pub fn get_limits_per_label_set(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LimitsPerLabelSet>> {
        &self.limits_per_label_set
    }
    /// <p>Specifies how many days that metrics will be retained in the workspace.</p>
    pub fn retention_period_in_days(mut self, input: i32) -> Self {
        self.retention_period_in_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies how many days that metrics will be retained in the workspace.</p>
    pub fn set_retention_period_in_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.retention_period_in_days = input;
        self
    }
    /// <p>Specifies how many days that metrics will be retained in the workspace.</p>
    pub fn get_retention_period_in_days(&self) -> &::std::option::Option<i32> {
        &self.retention_period_in_days
    }
    /// Consumes the builder and constructs a [`UpdateWorkspaceConfigurationInput`](crate::operation::update_workspace_configuration::UpdateWorkspaceConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_workspace_configuration::UpdateWorkspaceConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_workspace_configuration::UpdateWorkspaceConfigurationInput {
            workspace_id: self.workspace_id,
            client_token: self.client_token,
            limits_per_label_set: self.limits_per_label_set,
            retention_period_in_days: self.retention_period_in_days,
        })
    }
}
