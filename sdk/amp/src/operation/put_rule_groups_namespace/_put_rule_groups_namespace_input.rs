// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the input of a <code>PutRuleGroupsNamespace</code> operation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutRuleGroupsNamespaceInput {
    /// <p>The ID of the workspace where you are updating the rule groups namespace.</p>
    pub workspace_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the rule groups namespace that you are updating.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The new rules file to use in the namespace. A base64-encoded version of the YAML rule groups file.</p>
    /// <p>For details about the rule groups namespace structure, see <a href="https://docs.aws.amazon.com/prometheus/latest/APIReference/yaml-RuleGroupsNamespaceData.html">RuleGroupsNamespaceData</a>.</p>
    pub data: ::std::option::Option<::aws_smithy_types::Blob>,
    /// <p>A unique identifier that you can provide to ensure the idempotency of the request. Case-sensitive.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl PutRuleGroupsNamespaceInput {
    /// <p>The ID of the workspace where you are updating the rule groups namespace.</p>
    pub fn workspace_id(&self) -> ::std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    /// <p>The name of the rule groups namespace that you are updating.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The new rules file to use in the namespace. A base64-encoded version of the YAML rule groups file.</p>
    /// <p>For details about the rule groups namespace structure, see <a href="https://docs.aws.amazon.com/prometheus/latest/APIReference/yaml-RuleGroupsNamespaceData.html">RuleGroupsNamespaceData</a>.</p>
    pub fn data(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.data.as_ref()
    }
    /// <p>A unique identifier that you can provide to ensure the idempotency of the request. Case-sensitive.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl PutRuleGroupsNamespaceInput {
    /// Creates a new builder-style object to manufacture [`PutRuleGroupsNamespaceInput`](crate::operation::put_rule_groups_namespace::PutRuleGroupsNamespaceInput).
    pub fn builder() -> crate::operation::put_rule_groups_namespace::builders::PutRuleGroupsNamespaceInputBuilder {
        crate::operation::put_rule_groups_namespace::builders::PutRuleGroupsNamespaceInputBuilder::default()
    }
}

/// A builder for [`PutRuleGroupsNamespaceInput`](crate::operation::put_rule_groups_namespace::PutRuleGroupsNamespaceInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PutRuleGroupsNamespaceInputBuilder {
    pub(crate) workspace_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) data: ::std::option::Option<::aws_smithy_types::Blob>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl PutRuleGroupsNamespaceInputBuilder {
    /// <p>The ID of the workspace where you are updating the rule groups namespace.</p>
    /// This field is required.
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the workspace where you are updating the rule groups namespace.</p>
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_id = input;
        self
    }
    /// <p>The ID of the workspace where you are updating the rule groups namespace.</p>
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_id
    }
    /// <p>The name of the rule groups namespace that you are updating.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the rule groups namespace that you are updating.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the rule groups namespace that you are updating.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The new rules file to use in the namespace. A base64-encoded version of the YAML rule groups file.</p>
    /// <p>For details about the rule groups namespace structure, see <a href="https://docs.aws.amazon.com/prometheus/latest/APIReference/yaml-RuleGroupsNamespaceData.html">RuleGroupsNamespaceData</a>.</p>
    /// This field is required.
    pub fn data(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.data = ::std::option::Option::Some(input);
        self
    }
    /// <p>The new rules file to use in the namespace. A base64-encoded version of the YAML rule groups file.</p>
    /// <p>For details about the rule groups namespace structure, see <a href="https://docs.aws.amazon.com/prometheus/latest/APIReference/yaml-RuleGroupsNamespaceData.html">RuleGroupsNamespaceData</a>.</p>
    pub fn set_data(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.data = input;
        self
    }
    /// <p>The new rules file to use in the namespace. A base64-encoded version of the YAML rule groups file.</p>
    /// <p>For details about the rule groups namespace structure, see <a href="https://docs.aws.amazon.com/prometheus/latest/APIReference/yaml-RuleGroupsNamespaceData.html">RuleGroupsNamespaceData</a>.</p>
    pub fn get_data(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.data
    }
    /// <p>A unique identifier that you can provide to ensure the idempotency of the request. Case-sensitive.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier that you can provide to ensure the idempotency of the request. Case-sensitive.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique identifier that you can provide to ensure the idempotency of the request. Case-sensitive.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`PutRuleGroupsNamespaceInput`](crate::operation::put_rule_groups_namespace::PutRuleGroupsNamespaceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_rule_groups_namespace::PutRuleGroupsNamespaceInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::put_rule_groups_namespace::PutRuleGroupsNamespaceInput {
            workspace_id: self.workspace_id,
            name: self.name,
            data: self.data,
            client_token: self.client_token,
        })
    }
}
