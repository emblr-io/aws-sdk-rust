// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the input of a <code>CreateScraper</code> operation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateScraperInput {
    /// <p>(optional) An alias to associate with the scraper. This is for your use, and does not need to be unique.</p>
    pub alias: ::std::option::Option<::std::string::String>,
    /// <p>The configuration file to use in the new scraper. For more information, see <a href="https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#AMP-collector-configuration">Scraper configuration</a> in the <i>Amazon Managed Service for Prometheus User Guide</i>.</p>
    pub scrape_configuration: ::std::option::Option<crate::types::ScrapeConfiguration>,
    /// <p>The Amazon EKS cluster from which the scraper will collect metrics.</p>
    pub source: ::std::option::Option<crate::types::Source>,
    /// <p>The Amazon Managed Service for Prometheus workspace to send metrics to.</p>
    pub destination: ::std::option::Option<crate::types::Destination>,
    /// <p>Use this structure to enable cross-account access, so that you can use a target account to access Prometheus metrics from source accounts.</p>
    pub role_configuration: ::std::option::Option<crate::types::RoleConfiguration>,
    /// <p>(Optional) A unique, case-sensitive identifier that you can provide to ensure the idempotency of the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>(Optional) The list of tag keys and values to associate with the scraper.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateScraperInput {
    /// <p>(optional) An alias to associate with the scraper. This is for your use, and does not need to be unique.</p>
    pub fn alias(&self) -> ::std::option::Option<&str> {
        self.alias.as_deref()
    }
    /// <p>The configuration file to use in the new scraper. For more information, see <a href="https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#AMP-collector-configuration">Scraper configuration</a> in the <i>Amazon Managed Service for Prometheus User Guide</i>.</p>
    pub fn scrape_configuration(&self) -> ::std::option::Option<&crate::types::ScrapeConfiguration> {
        self.scrape_configuration.as_ref()
    }
    /// <p>The Amazon EKS cluster from which the scraper will collect metrics.</p>
    pub fn source(&self) -> ::std::option::Option<&crate::types::Source> {
        self.source.as_ref()
    }
    /// <p>The Amazon Managed Service for Prometheus workspace to send metrics to.</p>
    pub fn destination(&self) -> ::std::option::Option<&crate::types::Destination> {
        self.destination.as_ref()
    }
    /// <p>Use this structure to enable cross-account access, so that you can use a target account to access Prometheus metrics from source accounts.</p>
    pub fn role_configuration(&self) -> ::std::option::Option<&crate::types::RoleConfiguration> {
        self.role_configuration.as_ref()
    }
    /// <p>(Optional) A unique, case-sensitive identifier that you can provide to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>(Optional) The list of tag keys and values to associate with the scraper.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateScraperInput {
    /// Creates a new builder-style object to manufacture [`CreateScraperInput`](crate::operation::create_scraper::CreateScraperInput).
    pub fn builder() -> crate::operation::create_scraper::builders::CreateScraperInputBuilder {
        crate::operation::create_scraper::builders::CreateScraperInputBuilder::default()
    }
}

/// A builder for [`CreateScraperInput`](crate::operation::create_scraper::CreateScraperInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateScraperInputBuilder {
    pub(crate) alias: ::std::option::Option<::std::string::String>,
    pub(crate) scrape_configuration: ::std::option::Option<crate::types::ScrapeConfiguration>,
    pub(crate) source: ::std::option::Option<crate::types::Source>,
    pub(crate) destination: ::std::option::Option<crate::types::Destination>,
    pub(crate) role_configuration: ::std::option::Option<crate::types::RoleConfiguration>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateScraperInputBuilder {
    /// <p>(optional) An alias to associate with the scraper. This is for your use, and does not need to be unique.</p>
    pub fn alias(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.alias = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>(optional) An alias to associate with the scraper. This is for your use, and does not need to be unique.</p>
    pub fn set_alias(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.alias = input;
        self
    }
    /// <p>(optional) An alias to associate with the scraper. This is for your use, and does not need to be unique.</p>
    pub fn get_alias(&self) -> &::std::option::Option<::std::string::String> {
        &self.alias
    }
    /// <p>The configuration file to use in the new scraper. For more information, see <a href="https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#AMP-collector-configuration">Scraper configuration</a> in the <i>Amazon Managed Service for Prometheus User Guide</i>.</p>
    /// This field is required.
    pub fn scrape_configuration(mut self, input: crate::types::ScrapeConfiguration) -> Self {
        self.scrape_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration file to use in the new scraper. For more information, see <a href="https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#AMP-collector-configuration">Scraper configuration</a> in the <i>Amazon Managed Service for Prometheus User Guide</i>.</p>
    pub fn set_scrape_configuration(mut self, input: ::std::option::Option<crate::types::ScrapeConfiguration>) -> Self {
        self.scrape_configuration = input;
        self
    }
    /// <p>The configuration file to use in the new scraper. For more information, see <a href="https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#AMP-collector-configuration">Scraper configuration</a> in the <i>Amazon Managed Service for Prometheus User Guide</i>.</p>
    pub fn get_scrape_configuration(&self) -> &::std::option::Option<crate::types::ScrapeConfiguration> {
        &self.scrape_configuration
    }
    /// <p>The Amazon EKS cluster from which the scraper will collect metrics.</p>
    /// This field is required.
    pub fn source(mut self, input: crate::types::Source) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon EKS cluster from which the scraper will collect metrics.</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::Source>) -> Self {
        self.source = input;
        self
    }
    /// <p>The Amazon EKS cluster from which the scraper will collect metrics.</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::Source> {
        &self.source
    }
    /// <p>The Amazon Managed Service for Prometheus workspace to send metrics to.</p>
    /// This field is required.
    pub fn destination(mut self, input: crate::types::Destination) -> Self {
        self.destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon Managed Service for Prometheus workspace to send metrics to.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<crate::types::Destination>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The Amazon Managed Service for Prometheus workspace to send metrics to.</p>
    pub fn get_destination(&self) -> &::std::option::Option<crate::types::Destination> {
        &self.destination
    }
    /// <p>Use this structure to enable cross-account access, so that you can use a target account to access Prometheus metrics from source accounts.</p>
    pub fn role_configuration(mut self, input: crate::types::RoleConfiguration) -> Self {
        self.role_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this structure to enable cross-account access, so that you can use a target account to access Prometheus metrics from source accounts.</p>
    pub fn set_role_configuration(mut self, input: ::std::option::Option<crate::types::RoleConfiguration>) -> Self {
        self.role_configuration = input;
        self
    }
    /// <p>Use this structure to enable cross-account access, so that you can use a target account to access Prometheus metrics from source accounts.</p>
    pub fn get_role_configuration(&self) -> &::std::option::Option<crate::types::RoleConfiguration> {
        &self.role_configuration
    }
    /// <p>(Optional) A unique, case-sensitive identifier that you can provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>(Optional) A unique, case-sensitive identifier that you can provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>(Optional) A unique, case-sensitive identifier that you can provide to ensure the idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>(Optional) The list of tag keys and values to associate with the scraper.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>(Optional) The list of tag keys and values to associate with the scraper.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>(Optional) The list of tag keys and values to associate with the scraper.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateScraperInput`](crate::operation::create_scraper::CreateScraperInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_scraper::CreateScraperInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_scraper::CreateScraperInput {
            alias: self.alias,
            scrape_configuration: self.scrape_configuration,
            source: self.source,
            destination: self.destination,
            role_configuration: self.role_configuration,
            client_token: self.client_token,
            tags: self.tags,
        })
    }
}
