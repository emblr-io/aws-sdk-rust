// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DisassociateSourceResourceInput {
    /// <p>The name of the progress-update stream, which is used for access control as well as a namespace for migration-task names that is implicitly linked to your AWS account. The progress-update stream must uniquely identify the migration tool as it is used for all updates made by the tool; however, it does not need to be unique for each AWS account because it is scoped to the AWS account.</p>
    pub progress_update_stream: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier that references the migration task. <i>Do not include sensitive data in this field.</i></p>
    pub migration_task_name: ::std::option::Option<::std::string::String>,
    /// <p>The name that was specified for the source resource.</p>
    pub source_resource_name: ::std::option::Option<::std::string::String>,
    /// <p>This is an optional parameter that you can use to test whether the call will succeed. Set this parameter to <code>true</code> to verify that you have the permissions that are required to make the call, and that you have specified the other parameters in the call correctly.</p>
    pub dry_run: ::std::option::Option<bool>,
}
impl DisassociateSourceResourceInput {
    /// <p>The name of the progress-update stream, which is used for access control as well as a namespace for migration-task names that is implicitly linked to your AWS account. The progress-update stream must uniquely identify the migration tool as it is used for all updates made by the tool; however, it does not need to be unique for each AWS account because it is scoped to the AWS account.</p>
    pub fn progress_update_stream(&self) -> ::std::option::Option<&str> {
        self.progress_update_stream.as_deref()
    }
    /// <p>A unique identifier that references the migration task. <i>Do not include sensitive data in this field.</i></p>
    pub fn migration_task_name(&self) -> ::std::option::Option<&str> {
        self.migration_task_name.as_deref()
    }
    /// <p>The name that was specified for the source resource.</p>
    pub fn source_resource_name(&self) -> ::std::option::Option<&str> {
        self.source_resource_name.as_deref()
    }
    /// <p>This is an optional parameter that you can use to test whether the call will succeed. Set this parameter to <code>true</code> to verify that you have the permissions that are required to make the call, and that you have specified the other parameters in the call correctly.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
}
impl DisassociateSourceResourceInput {
    /// Creates a new builder-style object to manufacture [`DisassociateSourceResourceInput`](crate::operation::disassociate_source_resource::DisassociateSourceResourceInput).
    pub fn builder() -> crate::operation::disassociate_source_resource::builders::DisassociateSourceResourceInputBuilder {
        crate::operation::disassociate_source_resource::builders::DisassociateSourceResourceInputBuilder::default()
    }
}

/// A builder for [`DisassociateSourceResourceInput`](crate::operation::disassociate_source_resource::DisassociateSourceResourceInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DisassociateSourceResourceInputBuilder {
    pub(crate) progress_update_stream: ::std::option::Option<::std::string::String>,
    pub(crate) migration_task_name: ::std::option::Option<::std::string::String>,
    pub(crate) source_resource_name: ::std::option::Option<::std::string::String>,
    pub(crate) dry_run: ::std::option::Option<bool>,
}
impl DisassociateSourceResourceInputBuilder {
    /// <p>The name of the progress-update stream, which is used for access control as well as a namespace for migration-task names that is implicitly linked to your AWS account. The progress-update stream must uniquely identify the migration tool as it is used for all updates made by the tool; however, it does not need to be unique for each AWS account because it is scoped to the AWS account.</p>
    /// This field is required.
    pub fn progress_update_stream(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.progress_update_stream = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the progress-update stream, which is used for access control as well as a namespace for migration-task names that is implicitly linked to your AWS account. The progress-update stream must uniquely identify the migration tool as it is used for all updates made by the tool; however, it does not need to be unique for each AWS account because it is scoped to the AWS account.</p>
    pub fn set_progress_update_stream(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.progress_update_stream = input;
        self
    }
    /// <p>The name of the progress-update stream, which is used for access control as well as a namespace for migration-task names that is implicitly linked to your AWS account. The progress-update stream must uniquely identify the migration tool as it is used for all updates made by the tool; however, it does not need to be unique for each AWS account because it is scoped to the AWS account.</p>
    pub fn get_progress_update_stream(&self) -> &::std::option::Option<::std::string::String> {
        &self.progress_update_stream
    }
    /// <p>A unique identifier that references the migration task. <i>Do not include sensitive data in this field.</i></p>
    /// This field is required.
    pub fn migration_task_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.migration_task_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier that references the migration task. <i>Do not include sensitive data in this field.</i></p>
    pub fn set_migration_task_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.migration_task_name = input;
        self
    }
    /// <p>A unique identifier that references the migration task. <i>Do not include sensitive data in this field.</i></p>
    pub fn get_migration_task_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.migration_task_name
    }
    /// <p>The name that was specified for the source resource.</p>
    /// This field is required.
    pub fn source_resource_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_resource_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name that was specified for the source resource.</p>
    pub fn set_source_resource_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_resource_name = input;
        self
    }
    /// <p>The name that was specified for the source resource.</p>
    pub fn get_source_resource_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_resource_name
    }
    /// <p>This is an optional parameter that you can use to test whether the call will succeed. Set this parameter to <code>true</code> to verify that you have the permissions that are required to make the call, and that you have specified the other parameters in the call correctly.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>This is an optional parameter that you can use to test whether the call will succeed. Set this parameter to <code>true</code> to verify that you have the permissions that are required to make the call, and that you have specified the other parameters in the call correctly.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>This is an optional parameter that you can use to test whether the call will succeed. Set this parameter to <code>true</code> to verify that you have the permissions that are required to make the call, and that you have specified the other parameters in the call correctly.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Consumes the builder and constructs a [`DisassociateSourceResourceInput`](crate::operation::disassociate_source_resource::DisassociateSourceResourceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::disassociate_source_resource::DisassociateSourceResourceInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::disassociate_source_resource::DisassociateSourceResourceInput {
            progress_update_stream: self.progress_update_stream,
            migration_task_name: self.migration_task_name,
            source_resource_name: self.source_resource_name,
            dry_run: self.dry_run,
        })
    }
}
