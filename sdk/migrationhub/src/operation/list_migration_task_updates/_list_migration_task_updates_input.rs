// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListMigrationTaskUpdatesInput {
    /// <p>The name of the progress-update stream, which is used for access control as well as a namespace for migration-task names that is implicitly linked to your AWS account. The progress-update stream must uniquely identify the migration tool as it is used for all updates made by the tool; however, it does not need to be unique for each AWS account because it is scoped to the AWS account.</p>
    pub progress_update_stream: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier that references the migration task. <i>Do not include sensitive data in this field.</i></p>
    pub migration_task_name: ::std::option::Option<::std::string::String>,
    /// <p>If <code>NextToken</code> was returned by a previous call, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. To retrieve the next page of results, specify the <code>NextToken</code> value that the previous call returned. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to include in the response. If more results exist than the value that you specify here for <code>MaxResults</code>, the response will include a token that you can use to retrieve the next set of results.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListMigrationTaskUpdatesInput {
    /// <p>The name of the progress-update stream, which is used for access control as well as a namespace for migration-task names that is implicitly linked to your AWS account. The progress-update stream must uniquely identify the migration tool as it is used for all updates made by the tool; however, it does not need to be unique for each AWS account because it is scoped to the AWS account.</p>
    pub fn progress_update_stream(&self) -> ::std::option::Option<&str> {
        self.progress_update_stream.as_deref()
    }
    /// <p>A unique identifier that references the migration task. <i>Do not include sensitive data in this field.</i></p>
    pub fn migration_task_name(&self) -> ::std::option::Option<&str> {
        self.migration_task_name.as_deref()
    }
    /// <p>If <code>NextToken</code> was returned by a previous call, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. To retrieve the next page of results, specify the <code>NextToken</code> value that the previous call returned. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to include in the response. If more results exist than the value that you specify here for <code>MaxResults</code>, the response will include a token that you can use to retrieve the next set of results.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListMigrationTaskUpdatesInput {
    /// Creates a new builder-style object to manufacture [`ListMigrationTaskUpdatesInput`](crate::operation::list_migration_task_updates::ListMigrationTaskUpdatesInput).
    pub fn builder() -> crate::operation::list_migration_task_updates::builders::ListMigrationTaskUpdatesInputBuilder {
        crate::operation::list_migration_task_updates::builders::ListMigrationTaskUpdatesInputBuilder::default()
    }
}

/// A builder for [`ListMigrationTaskUpdatesInput`](crate::operation::list_migration_task_updates::ListMigrationTaskUpdatesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListMigrationTaskUpdatesInputBuilder {
    pub(crate) progress_update_stream: ::std::option::Option<::std::string::String>,
    pub(crate) migration_task_name: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListMigrationTaskUpdatesInputBuilder {
    /// <p>The name of the progress-update stream, which is used for access control as well as a namespace for migration-task names that is implicitly linked to your AWS account. The progress-update stream must uniquely identify the migration tool as it is used for all updates made by the tool; however, it does not need to be unique for each AWS account because it is scoped to the AWS account.</p>
    /// This field is required.
    pub fn progress_update_stream(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.progress_update_stream = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the progress-update stream, which is used for access control as well as a namespace for migration-task names that is implicitly linked to your AWS account. The progress-update stream must uniquely identify the migration tool as it is used for all updates made by the tool; however, it does not need to be unique for each AWS account because it is scoped to the AWS account.</p>
    pub fn set_progress_update_stream(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.progress_update_stream = input;
        self
    }
    /// <p>The name of the progress-update stream, which is used for access control as well as a namespace for migration-task names that is implicitly linked to your AWS account. The progress-update stream must uniquely identify the migration tool as it is used for all updates made by the tool; however, it does not need to be unique for each AWS account because it is scoped to the AWS account.</p>
    pub fn get_progress_update_stream(&self) -> &::std::option::Option<::std::string::String> {
        &self.progress_update_stream
    }
    /// <p>A unique identifier that references the migration task. <i>Do not include sensitive data in this field.</i></p>
    /// This field is required.
    pub fn migration_task_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.migration_task_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier that references the migration task. <i>Do not include sensitive data in this field.</i></p>
    pub fn set_migration_task_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.migration_task_name = input;
        self
    }
    /// <p>A unique identifier that references the migration task. <i>Do not include sensitive data in this field.</i></p>
    pub fn get_migration_task_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.migration_task_name
    }
    /// <p>If <code>NextToken</code> was returned by a previous call, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. To retrieve the next page of results, specify the <code>NextToken</code> value that the previous call returned. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If <code>NextToken</code> was returned by a previous call, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. To retrieve the next page of results, specify the <code>NextToken</code> value that the previous call returned. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If <code>NextToken</code> was returned by a previous call, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. To retrieve the next page of results, specify the <code>NextToken</code> value that the previous call returned. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to include in the response. If more results exist than the value that you specify here for <code>MaxResults</code>, the response will include a token that you can use to retrieve the next set of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to include in the response. If more results exist than the value that you specify here for <code>MaxResults</code>, the response will include a token that you can use to retrieve the next set of results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to include in the response. If more results exist than the value that you specify here for <code>MaxResults</code>, the response will include a token that you can use to retrieve the next set of results.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListMigrationTaskUpdatesInput`](crate::operation::list_migration_task_updates::ListMigrationTaskUpdatesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_migration_task_updates::ListMigrationTaskUpdatesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_migration_task_updates::ListMigrationTaskUpdatesInput {
            progress_update_stream: self.progress_update_stream,
            migration_task_name: self.migration_task_name,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
