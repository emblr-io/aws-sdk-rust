// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A migration-task progress update.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MigrationTaskUpdate {
    /// <p>The timestamp for the update.</p>
    pub update_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The type of the update.</p>
    pub update_type: ::std::option::Option<crate::types::UpdateType>,
    /// <p>Task object encapsulating task information.</p>
    pub migration_task_state: ::std::option::Option<crate::types::Task>,
}
impl MigrationTaskUpdate {
    /// <p>The timestamp for the update.</p>
    pub fn update_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.update_date_time.as_ref()
    }
    /// <p>The type of the update.</p>
    pub fn update_type(&self) -> ::std::option::Option<&crate::types::UpdateType> {
        self.update_type.as_ref()
    }
    /// <p>Task object encapsulating task information.</p>
    pub fn migration_task_state(&self) -> ::std::option::Option<&crate::types::Task> {
        self.migration_task_state.as_ref()
    }
}
impl MigrationTaskUpdate {
    /// Creates a new builder-style object to manufacture [`MigrationTaskUpdate`](crate::types::MigrationTaskUpdate).
    pub fn builder() -> crate::types::builders::MigrationTaskUpdateBuilder {
        crate::types::builders::MigrationTaskUpdateBuilder::default()
    }
}

/// A builder for [`MigrationTaskUpdate`](crate::types::MigrationTaskUpdate).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MigrationTaskUpdateBuilder {
    pub(crate) update_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_type: ::std::option::Option<crate::types::UpdateType>,
    pub(crate) migration_task_state: ::std::option::Option<crate::types::Task>,
}
impl MigrationTaskUpdateBuilder {
    /// <p>The timestamp for the update.</p>
    pub fn update_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp for the update.</p>
    pub fn set_update_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_date_time = input;
        self
    }
    /// <p>The timestamp for the update.</p>
    pub fn get_update_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_date_time
    }
    /// <p>The type of the update.</p>
    pub fn update_type(mut self, input: crate::types::UpdateType) -> Self {
        self.update_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the update.</p>
    pub fn set_update_type(mut self, input: ::std::option::Option<crate::types::UpdateType>) -> Self {
        self.update_type = input;
        self
    }
    /// <p>The type of the update.</p>
    pub fn get_update_type(&self) -> &::std::option::Option<crate::types::UpdateType> {
        &self.update_type
    }
    /// <p>Task object encapsulating task information.</p>
    pub fn migration_task_state(mut self, input: crate::types::Task) -> Self {
        self.migration_task_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Task object encapsulating task information.</p>
    pub fn set_migration_task_state(mut self, input: ::std::option::Option<crate::types::Task>) -> Self {
        self.migration_task_state = input;
        self
    }
    /// <p>Task object encapsulating task information.</p>
    pub fn get_migration_task_state(&self) -> &::std::option::Option<crate::types::Task> {
        &self.migration_task_state
    }
    /// Consumes the builder and constructs a [`MigrationTaskUpdate`](crate::types::MigrationTaskUpdate).
    pub fn build(self) -> crate::types::MigrationTaskUpdate {
        crate::types::MigrationTaskUpdate {
            update_date_time: self.update_date_time,
            update_type: self.update_type,
            migration_task_state: self.migration_task_state,
        }
    }
}
