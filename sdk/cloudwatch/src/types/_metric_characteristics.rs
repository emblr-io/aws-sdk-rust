// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This object includes parameters that you can use to provide information to CloudWatch to help it build more accurate anomaly detection models.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetricCharacteristics {
    /// <p>Set this parameter to <code>true</code> if values for this metric consistently include spikes that should not be considered to be anomalies. With this set to <code>true</code>, CloudWatch will expect to see spikes that occurred consistently during the model training period, and won't flag future similar spikes as anomalies.</p>
    pub periodic_spikes: ::std::option::Option<bool>,
}
impl MetricCharacteristics {
    /// <p>Set this parameter to <code>true</code> if values for this metric consistently include spikes that should not be considered to be anomalies. With this set to <code>true</code>, CloudWatch will expect to see spikes that occurred consistently during the model training period, and won't flag future similar spikes as anomalies.</p>
    pub fn periodic_spikes(&self) -> ::std::option::Option<bool> {
        self.periodic_spikes
    }
}
impl MetricCharacteristics {
    /// Creates a new builder-style object to manufacture [`MetricCharacteristics`](crate::types::MetricCharacteristics).
    pub fn builder() -> crate::types::builders::MetricCharacteristicsBuilder {
        crate::types::builders::MetricCharacteristicsBuilder::default()
    }
}

/// A builder for [`MetricCharacteristics`](crate::types::MetricCharacteristics).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MetricCharacteristicsBuilder {
    pub(crate) periodic_spikes: ::std::option::Option<bool>,
}
impl MetricCharacteristicsBuilder {
    /// <p>Set this parameter to <code>true</code> if values for this metric consistently include spikes that should not be considered to be anomalies. With this set to <code>true</code>, CloudWatch will expect to see spikes that occurred consistently during the model training period, and won't flag future similar spikes as anomalies.</p>
    pub fn periodic_spikes(mut self, input: bool) -> Self {
        self.periodic_spikes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Set this parameter to <code>true</code> if values for this metric consistently include spikes that should not be considered to be anomalies. With this set to <code>true</code>, CloudWatch will expect to see spikes that occurred consistently during the model training period, and won't flag future similar spikes as anomalies.</p>
    pub fn set_periodic_spikes(mut self, input: ::std::option::Option<bool>) -> Self {
        self.periodic_spikes = input;
        self
    }
    /// <p>Set this parameter to <code>true</code> if values for this metric consistently include spikes that should not be considered to be anomalies. With this set to <code>true</code>, CloudWatch will expect to see spikes that occurred consistently during the model training period, and won't flag future similar spikes as anomalies.</p>
    pub fn get_periodic_spikes(&self) -> &::std::option::Option<bool> {
        &self.periodic_spikes
    }
    /// Consumes the builder and constructs a [`MetricCharacteristics`](crate::types::MetricCharacteristics).
    pub fn build(self) -> crate::types::MetricCharacteristics {
        crate::types::MetricCharacteristics {
            periodic_spikes: self.periodic_spikes,
        }
    }
}
