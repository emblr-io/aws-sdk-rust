// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A set of metrics that are associated with an entity, such as a specific service or resource. Contains the entity and the list of metric data associated with it.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EntityMetricData {
    /// <p>The entity associated with the metrics.</p>
    pub entity: ::std::option::Option<crate::types::Entity>,
    /// <p>The metric data.</p>
    pub metric_data: ::std::option::Option<::std::vec::Vec<crate::types::MetricDatum>>,
}
impl EntityMetricData {
    /// <p>The entity associated with the metrics.</p>
    pub fn entity(&self) -> ::std::option::Option<&crate::types::Entity> {
        self.entity.as_ref()
    }
    /// <p>The metric data.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metric_data.is_none()`.
    pub fn metric_data(&self) -> &[crate::types::MetricDatum] {
        self.metric_data.as_deref().unwrap_or_default()
    }
}
impl EntityMetricData {
    /// Creates a new builder-style object to manufacture [`EntityMetricData`](crate::types::EntityMetricData).
    pub fn builder() -> crate::types::builders::EntityMetricDataBuilder {
        crate::types::builders::EntityMetricDataBuilder::default()
    }
}

/// A builder for [`EntityMetricData`](crate::types::EntityMetricData).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EntityMetricDataBuilder {
    pub(crate) entity: ::std::option::Option<crate::types::Entity>,
    pub(crate) metric_data: ::std::option::Option<::std::vec::Vec<crate::types::MetricDatum>>,
}
impl EntityMetricDataBuilder {
    /// <p>The entity associated with the metrics.</p>
    pub fn entity(mut self, input: crate::types::Entity) -> Self {
        self.entity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The entity associated with the metrics.</p>
    pub fn set_entity(mut self, input: ::std::option::Option<crate::types::Entity>) -> Self {
        self.entity = input;
        self
    }
    /// <p>The entity associated with the metrics.</p>
    pub fn get_entity(&self) -> &::std::option::Option<crate::types::Entity> {
        &self.entity
    }
    /// Appends an item to `metric_data`.
    ///
    /// To override the contents of this collection use [`set_metric_data`](Self::set_metric_data).
    ///
    /// <p>The metric data.</p>
    pub fn metric_data(mut self, input: crate::types::MetricDatum) -> Self {
        let mut v = self.metric_data.unwrap_or_default();
        v.push(input);
        self.metric_data = ::std::option::Option::Some(v);
        self
    }
    /// <p>The metric data.</p>
    pub fn set_metric_data(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetricDatum>>) -> Self {
        self.metric_data = input;
        self
    }
    /// <p>The metric data.</p>
    pub fn get_metric_data(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetricDatum>> {
        &self.metric_data
    }
    /// Consumes the builder and constructs a [`EntityMetricData`](crate::types::EntityMetricData).
    pub fn build(self) -> crate::types::EntityMetricData {
        crate::types::EntityMetricData {
            entity: self.entity,
            metric_data: self.metric_data,
        }
    }
}
