// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetQAppSessionOutput {
    /// <p>The unique identifier of the Q App session.</p>
    pub session_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the Q App session.</p>
    pub session_arn: ::std::string::String,
    /// <p>The name of the Q App session.</p>
    pub session_name: ::std::option::Option<::std::string::String>,
    /// <p>The version of the Q App used for the session.</p>
    pub app_version: ::std::option::Option<i32>,
    /// <p>The latest published version of the Q App used for the session.</p>
    pub latest_published_app_version: ::std::option::Option<i32>,
    /// <p>The current status of the Q App session.</p>
    pub status: crate::types::ExecutionStatus,
    /// <p>The current status for each card in the Q App session.</p>
    pub card_status: ::std::collections::HashMap<::std::string::String, crate::types::CardStatus>,
    /// <p>Indicates whether the current user is the owner of the Q App data collection session.</p>
    pub user_is_host: ::std::option::Option<bool>,
    _request_id: Option<String>,
}
impl GetQAppSessionOutput {
    /// <p>The unique identifier of the Q App session.</p>
    pub fn session_id(&self) -> &str {
        use std::ops::Deref;
        self.session_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Q App session.</p>
    pub fn session_arn(&self) -> &str {
        use std::ops::Deref;
        self.session_arn.deref()
    }
    /// <p>The name of the Q App session.</p>
    pub fn session_name(&self) -> ::std::option::Option<&str> {
        self.session_name.as_deref()
    }
    /// <p>The version of the Q App used for the session.</p>
    pub fn app_version(&self) -> ::std::option::Option<i32> {
        self.app_version
    }
    /// <p>The latest published version of the Q App used for the session.</p>
    pub fn latest_published_app_version(&self) -> ::std::option::Option<i32> {
        self.latest_published_app_version
    }
    /// <p>The current status of the Q App session.</p>
    pub fn status(&self) -> &crate::types::ExecutionStatus {
        &self.status
    }
    /// <p>The current status for each card in the Q App session.</p>
    pub fn card_status(&self) -> &::std::collections::HashMap<::std::string::String, crate::types::CardStatus> {
        &self.card_status
    }
    /// <p>Indicates whether the current user is the owner of the Q App data collection session.</p>
    pub fn user_is_host(&self) -> ::std::option::Option<bool> {
        self.user_is_host
    }
}
impl ::aws_types::request_id::RequestId for GetQAppSessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetQAppSessionOutput {
    /// Creates a new builder-style object to manufacture [`GetQAppSessionOutput`](crate::operation::get_q_app_session::GetQAppSessionOutput).
    pub fn builder() -> crate::operation::get_q_app_session::builders::GetQAppSessionOutputBuilder {
        crate::operation::get_q_app_session::builders::GetQAppSessionOutputBuilder::default()
    }
}

/// A builder for [`GetQAppSessionOutput`](crate::operation::get_q_app_session::GetQAppSessionOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetQAppSessionOutputBuilder {
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) session_arn: ::std::option::Option<::std::string::String>,
    pub(crate) session_name: ::std::option::Option<::std::string::String>,
    pub(crate) app_version: ::std::option::Option<i32>,
    pub(crate) latest_published_app_version: ::std::option::Option<i32>,
    pub(crate) status: ::std::option::Option<crate::types::ExecutionStatus>,
    pub(crate) card_status: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CardStatus>>,
    pub(crate) user_is_host: ::std::option::Option<bool>,
    _request_id: Option<String>,
}
impl GetQAppSessionOutputBuilder {
    /// <p>The unique identifier of the Q App session.</p>
    /// This field is required.
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Q App session.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The unique identifier of the Q App session.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>The Amazon Resource Name (ARN) of the Q App session.</p>
    /// This field is required.
    pub fn session_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Q App session.</p>
    pub fn set_session_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Q App session.</p>
    pub fn get_session_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_arn
    }
    /// <p>The name of the Q App session.</p>
    pub fn session_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Q App session.</p>
    pub fn set_session_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_name = input;
        self
    }
    /// <p>The name of the Q App session.</p>
    pub fn get_session_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_name
    }
    /// <p>The version of the Q App used for the session.</p>
    pub fn app_version(mut self, input: i32) -> Self {
        self.app_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version of the Q App used for the session.</p>
    pub fn set_app_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.app_version = input;
        self
    }
    /// <p>The version of the Q App used for the session.</p>
    pub fn get_app_version(&self) -> &::std::option::Option<i32> {
        &self.app_version
    }
    /// <p>The latest published version of the Q App used for the session.</p>
    pub fn latest_published_app_version(mut self, input: i32) -> Self {
        self.latest_published_app_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The latest published version of the Q App used for the session.</p>
    pub fn set_latest_published_app_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.latest_published_app_version = input;
        self
    }
    /// <p>The latest published version of the Q App used for the session.</p>
    pub fn get_latest_published_app_version(&self) -> &::std::option::Option<i32> {
        &self.latest_published_app_version
    }
    /// <p>The current status of the Q App session.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ExecutionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the Q App session.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ExecutionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the Q App session.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ExecutionStatus> {
        &self.status
    }
    /// Adds a key-value pair to `card_status`.
    ///
    /// To override the contents of this collection use [`set_card_status`](Self::set_card_status).
    ///
    /// <p>The current status for each card in the Q App session.</p>
    pub fn card_status(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::CardStatus) -> Self {
        let mut hash_map = self.card_status.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.card_status = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The current status for each card in the Q App session.</p>
    pub fn set_card_status(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CardStatus>>,
    ) -> Self {
        self.card_status = input;
        self
    }
    /// <p>The current status for each card in the Q App session.</p>
    pub fn get_card_status(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CardStatus>> {
        &self.card_status
    }
    /// <p>Indicates whether the current user is the owner of the Q App data collection session.</p>
    pub fn user_is_host(mut self, input: bool) -> Self {
        self.user_is_host = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the current user is the owner of the Q App data collection session.</p>
    pub fn set_user_is_host(mut self, input: ::std::option::Option<bool>) -> Self {
        self.user_is_host = input;
        self
    }
    /// <p>Indicates whether the current user is the owner of the Q App data collection session.</p>
    pub fn get_user_is_host(&self) -> &::std::option::Option<bool> {
        &self.user_is_host
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetQAppSessionOutput`](crate::operation::get_q_app_session::GetQAppSessionOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`session_id`](crate::operation::get_q_app_session::builders::GetQAppSessionOutputBuilder::session_id)
    /// - [`session_arn`](crate::operation::get_q_app_session::builders::GetQAppSessionOutputBuilder::session_arn)
    /// - [`status`](crate::operation::get_q_app_session::builders::GetQAppSessionOutputBuilder::status)
    /// - [`card_status`](crate::operation::get_q_app_session::builders::GetQAppSessionOutputBuilder::card_status)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_q_app_session::GetQAppSessionOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_q_app_session::GetQAppSessionOutput {
            session_id: self.session_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "session_id",
                    "session_id was not specified but it is required when building GetQAppSessionOutput",
                )
            })?,
            session_arn: self.session_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "session_arn",
                    "session_arn was not specified but it is required when building GetQAppSessionOutput",
                )
            })?,
            session_name: self.session_name,
            app_version: self.app_version,
            latest_published_app_version: self.latest_published_app_version,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetQAppSessionOutput",
                )
            })?,
            card_status: self.card_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "card_status",
                    "card_status was not specified but it is required when building GetQAppSessionOutput",
                )
            })?,
            user_is_host: self.user_is_host,
            _request_id: self._request_id,
        })
    }
}
