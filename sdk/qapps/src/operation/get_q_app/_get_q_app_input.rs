// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetQAppInput {
    /// <p>The unique identifier of the Amazon Q Business application environment instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the Q App to retrieve.</p>
    pub app_id: ::std::option::Option<::std::string::String>,
    /// <p>The version of the Q App.</p>
    pub app_version: ::std::option::Option<i32>,
}
impl GetQAppInput {
    /// <p>The unique identifier of the Amazon Q Business application environment instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The unique identifier of the Q App to retrieve.</p>
    pub fn app_id(&self) -> ::std::option::Option<&str> {
        self.app_id.as_deref()
    }
    /// <p>The version of the Q App.</p>
    pub fn app_version(&self) -> ::std::option::Option<i32> {
        self.app_version
    }
}
impl GetQAppInput {
    /// Creates a new builder-style object to manufacture [`GetQAppInput`](crate::operation::get_q_app::GetQAppInput).
    pub fn builder() -> crate::operation::get_q_app::builders::GetQAppInputBuilder {
        crate::operation::get_q_app::builders::GetQAppInputBuilder::default()
    }
}

/// A builder for [`GetQAppInput`](crate::operation::get_q_app::GetQAppInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetQAppInputBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) app_id: ::std::option::Option<::std::string::String>,
    pub(crate) app_version: ::std::option::Option<i32>,
}
impl GetQAppInputBuilder {
    /// <p>The unique identifier of the Amazon Q Business application environment instance.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Amazon Q Business application environment instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The unique identifier of the Amazon Q Business application environment instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The unique identifier of the Q App to retrieve.</p>
    /// This field is required.
    pub fn app_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Q App to retrieve.</p>
    pub fn set_app_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p>The unique identifier of the Q App to retrieve.</p>
    pub fn get_app_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_id
    }
    /// <p>The version of the Q App.</p>
    pub fn app_version(mut self, input: i32) -> Self {
        self.app_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version of the Q App.</p>
    pub fn set_app_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.app_version = input;
        self
    }
    /// <p>The version of the Q App.</p>
    pub fn get_app_version(&self) -> &::std::option::Option<i32> {
        &self.app_version
    }
    /// Consumes the builder and constructs a [`GetQAppInput`](crate::operation::get_q_app::GetQAppInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::get_q_app::GetQAppInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_q_app::GetQAppInput {
            instance_id: self.instance_id,
            app_id: self.app_id,
            app_version: self.app_version,
        })
    }
}
