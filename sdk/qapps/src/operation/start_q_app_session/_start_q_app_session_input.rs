// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartQAppSessionInput {
    /// <p>The unique identifier of the Amazon Q Business application environment instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the Q App to start a session for.</p>
    pub app_id: ::std::option::Option<::std::string::String>,
    /// <p>The version of the Q App to use for the session.</p>
    pub app_version: ::std::option::Option<i32>,
    /// <p>Optional initial input values to provide for the Q App session.</p>
    pub initial_values: ::std::option::Option<::std::vec::Vec<crate::types::CardValue>>,
    /// <p>The unique identifier of the a Q App session.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>Optional tags to associate with the new Q App session.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl StartQAppSessionInput {
    /// <p>The unique identifier of the Amazon Q Business application environment instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The unique identifier of the Q App to start a session for.</p>
    pub fn app_id(&self) -> ::std::option::Option<&str> {
        self.app_id.as_deref()
    }
    /// <p>The version of the Q App to use for the session.</p>
    pub fn app_version(&self) -> ::std::option::Option<i32> {
        self.app_version
    }
    /// <p>Optional initial input values to provide for the Q App session.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.initial_values.is_none()`.
    pub fn initial_values(&self) -> &[crate::types::CardValue] {
        self.initial_values.as_deref().unwrap_or_default()
    }
    /// <p>The unique identifier of the a Q App session.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>Optional tags to associate with the new Q App session.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl StartQAppSessionInput {
    /// Creates a new builder-style object to manufacture [`StartQAppSessionInput`](crate::operation::start_q_app_session::StartQAppSessionInput).
    pub fn builder() -> crate::operation::start_q_app_session::builders::StartQAppSessionInputBuilder {
        crate::operation::start_q_app_session::builders::StartQAppSessionInputBuilder::default()
    }
}

/// A builder for [`StartQAppSessionInput`](crate::operation::start_q_app_session::StartQAppSessionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartQAppSessionInputBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) app_id: ::std::option::Option<::std::string::String>,
    pub(crate) app_version: ::std::option::Option<i32>,
    pub(crate) initial_values: ::std::option::Option<::std::vec::Vec<crate::types::CardValue>>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl StartQAppSessionInputBuilder {
    /// <p>The unique identifier of the Amazon Q Business application environment instance.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Amazon Q Business application environment instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The unique identifier of the Amazon Q Business application environment instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The unique identifier of the Q App to start a session for.</p>
    /// This field is required.
    pub fn app_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Q App to start a session for.</p>
    pub fn set_app_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p>The unique identifier of the Q App to start a session for.</p>
    pub fn get_app_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_id
    }
    /// <p>The version of the Q App to use for the session.</p>
    /// This field is required.
    pub fn app_version(mut self, input: i32) -> Self {
        self.app_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version of the Q App to use for the session.</p>
    pub fn set_app_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.app_version = input;
        self
    }
    /// <p>The version of the Q App to use for the session.</p>
    pub fn get_app_version(&self) -> &::std::option::Option<i32> {
        &self.app_version
    }
    /// Appends an item to `initial_values`.
    ///
    /// To override the contents of this collection use [`set_initial_values`](Self::set_initial_values).
    ///
    /// <p>Optional initial input values to provide for the Q App session.</p>
    pub fn initial_values(mut self, input: crate::types::CardValue) -> Self {
        let mut v = self.initial_values.unwrap_or_default();
        v.push(input);
        self.initial_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>Optional initial input values to provide for the Q App session.</p>
    pub fn set_initial_values(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CardValue>>) -> Self {
        self.initial_values = input;
        self
    }
    /// <p>Optional initial input values to provide for the Q App session.</p>
    pub fn get_initial_values(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CardValue>> {
        &self.initial_values
    }
    /// <p>The unique identifier of the a Q App session.</p>
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the a Q App session.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The unique identifier of the a Q App session.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Optional tags to associate with the new Q App session.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Optional tags to associate with the new Q App session.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Optional tags to associate with the new Q App session.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`StartQAppSessionInput`](crate::operation::start_q_app_session::StartQAppSessionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_q_app_session::StartQAppSessionInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_q_app_session::StartQAppSessionInput {
            instance_id: self.instance_id,
            app_id: self.app_id,
            app_version: self.app_version,
            initial_values: self.initial_values,
            session_id: self.session_id,
            tags: self.tags,
        })
    }
}
