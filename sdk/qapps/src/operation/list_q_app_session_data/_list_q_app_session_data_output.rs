// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListQAppSessionDataOutput {
    /// <p>The unique identifier of the Q App data collection session.</p>
    pub session_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the Q App data collection session.</p>
    pub session_arn: ::std::string::String,
    /// <p>The collected responses of a Q App session.</p>
    pub session_data: ::std::option::Option<::std::vec::Vec<crate::types::QAppSessionData>>,
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListQAppSessionDataOutput {
    /// <p>The unique identifier of the Q App data collection session.</p>
    pub fn session_id(&self) -> &str {
        use std::ops::Deref;
        self.session_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Q App data collection session.</p>
    pub fn session_arn(&self) -> &str {
        use std::ops::Deref;
        self.session_arn.deref()
    }
    /// <p>The collected responses of a Q App session.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.session_data.is_none()`.
    pub fn session_data(&self) -> &[crate::types::QAppSessionData] {
        self.session_data.as_deref().unwrap_or_default()
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListQAppSessionDataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListQAppSessionDataOutput {
    /// Creates a new builder-style object to manufacture [`ListQAppSessionDataOutput`](crate::operation::list_q_app_session_data::ListQAppSessionDataOutput).
    pub fn builder() -> crate::operation::list_q_app_session_data::builders::ListQAppSessionDataOutputBuilder {
        crate::operation::list_q_app_session_data::builders::ListQAppSessionDataOutputBuilder::default()
    }
}

/// A builder for [`ListQAppSessionDataOutput`](crate::operation::list_q_app_session_data::ListQAppSessionDataOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListQAppSessionDataOutputBuilder {
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) session_arn: ::std::option::Option<::std::string::String>,
    pub(crate) session_data: ::std::option::Option<::std::vec::Vec<crate::types::QAppSessionData>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListQAppSessionDataOutputBuilder {
    /// <p>The unique identifier of the Q App data collection session.</p>
    /// This field is required.
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Q App data collection session.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The unique identifier of the Q App data collection session.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>The Amazon Resource Name (ARN) of the Q App data collection session.</p>
    /// This field is required.
    pub fn session_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Q App data collection session.</p>
    pub fn set_session_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Q App data collection session.</p>
    pub fn get_session_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_arn
    }
    /// Appends an item to `session_data`.
    ///
    /// To override the contents of this collection use [`set_session_data`](Self::set_session_data).
    ///
    /// <p>The collected responses of a Q App session.</p>
    pub fn session_data(mut self, input: crate::types::QAppSessionData) -> Self {
        let mut v = self.session_data.unwrap_or_default();
        v.push(input);
        self.session_data = ::std::option::Option::Some(v);
        self
    }
    /// <p>The collected responses of a Q App session.</p>
    pub fn set_session_data(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::QAppSessionData>>) -> Self {
        self.session_data = input;
        self
    }
    /// <p>The collected responses of a Q App session.</p>
    pub fn get_session_data(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::QAppSessionData>> {
        &self.session_data
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListQAppSessionDataOutput`](crate::operation::list_q_app_session_data::ListQAppSessionDataOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`session_id`](crate::operation::list_q_app_session_data::builders::ListQAppSessionDataOutputBuilder::session_id)
    /// - [`session_arn`](crate::operation::list_q_app_session_data::builders::ListQAppSessionDataOutputBuilder::session_arn)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_q_app_session_data::ListQAppSessionDataOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_q_app_session_data::ListQAppSessionDataOutput {
            session_id: self.session_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "session_id",
                    "session_id was not specified but it is required when building ListQAppSessionDataOutput",
                )
            })?,
            session_arn: self.session_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "session_arn",
                    "session_arn was not specified but it is required when building ListQAppSessionDataOutput",
                )
            })?,
            session_data: self.session_data,
            next_token: self.next_token,
            _request_id: self._request_id,
        })
    }
}
