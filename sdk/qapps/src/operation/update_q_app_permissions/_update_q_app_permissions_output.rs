// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateQAppPermissionsOutput {
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q App for which permissions were updated.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the Amazon Q App for which permissions were updated.</p>
    pub app_id: ::std::option::Option<::std::string::String>,
    /// <p>The updated list of permissions for the Amazon Q App.</p>
    pub permissions: ::std::option::Option<::std::vec::Vec<crate::types::PermissionOutput>>,
    _request_id: Option<String>,
}
impl UpdateQAppPermissionsOutput {
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q App for which permissions were updated.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The unique identifier of the Amazon Q App for which permissions were updated.</p>
    pub fn app_id(&self) -> ::std::option::Option<&str> {
        self.app_id.as_deref()
    }
    /// <p>The updated list of permissions for the Amazon Q App.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.permissions.is_none()`.
    pub fn permissions(&self) -> &[crate::types::PermissionOutput] {
        self.permissions.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for UpdateQAppPermissionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateQAppPermissionsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateQAppPermissionsOutput`](crate::operation::update_q_app_permissions::UpdateQAppPermissionsOutput).
    pub fn builder() -> crate::operation::update_q_app_permissions::builders::UpdateQAppPermissionsOutputBuilder {
        crate::operation::update_q_app_permissions::builders::UpdateQAppPermissionsOutputBuilder::default()
    }
}

/// A builder for [`UpdateQAppPermissionsOutput`](crate::operation::update_q_app_permissions::UpdateQAppPermissionsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateQAppPermissionsOutputBuilder {
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) app_id: ::std::option::Option<::std::string::String>,
    pub(crate) permissions: ::std::option::Option<::std::vec::Vec<crate::types::PermissionOutput>>,
    _request_id: Option<String>,
}
impl UpdateQAppPermissionsOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q App for which permissions were updated.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q App for which permissions were updated.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q App for which permissions were updated.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p>The unique identifier of the Amazon Q App for which permissions were updated.</p>
    pub fn app_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Amazon Q App for which permissions were updated.</p>
    pub fn set_app_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p>The unique identifier of the Amazon Q App for which permissions were updated.</p>
    pub fn get_app_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_id
    }
    /// Appends an item to `permissions`.
    ///
    /// To override the contents of this collection use [`set_permissions`](Self::set_permissions).
    ///
    /// <p>The updated list of permissions for the Amazon Q App.</p>
    pub fn permissions(mut self, input: crate::types::PermissionOutput) -> Self {
        let mut v = self.permissions.unwrap_or_default();
        v.push(input);
        self.permissions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The updated list of permissions for the Amazon Q App.</p>
    pub fn set_permissions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PermissionOutput>>) -> Self {
        self.permissions = input;
        self
    }
    /// <p>The updated list of permissions for the Amazon Q App.</p>
    pub fn get_permissions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PermissionOutput>> {
        &self.permissions
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateQAppPermissionsOutput`](crate::operation::update_q_app_permissions::UpdateQAppPermissionsOutput).
    pub fn build(self) -> crate::operation::update_q_app_permissions::UpdateQAppPermissionsOutput {
        crate::operation::update_q_app_permissions::UpdateQAppPermissionsOutput {
            resource_arn: self.resource_arn,
            app_id: self.app_id,
            permissions: self.permissions,
            _request_id: self._request_id,
        }
    }
}
