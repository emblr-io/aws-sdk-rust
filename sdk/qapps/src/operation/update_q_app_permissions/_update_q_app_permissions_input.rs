// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateQAppPermissionsInput {
    /// <p>The unique identifier of the Amazon Q Business application environment instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the Amazon Q App for which permissions are being updated.</p>
    pub app_id: ::std::option::Option<::std::string::String>,
    /// <p>The list of permissions to grant for the Amazon Q App.</p>
    pub grant_permissions: ::std::option::Option<::std::vec::Vec<crate::types::PermissionInput>>,
    /// <p>The list of permissions to revoke for the Amazon Q App.</p>
    pub revoke_permissions: ::std::option::Option<::std::vec::Vec<crate::types::PermissionInput>>,
}
impl UpdateQAppPermissionsInput {
    /// <p>The unique identifier of the Amazon Q Business application environment instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The unique identifier of the Amazon Q App for which permissions are being updated.</p>
    pub fn app_id(&self) -> ::std::option::Option<&str> {
        self.app_id.as_deref()
    }
    /// <p>The list of permissions to grant for the Amazon Q App.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.grant_permissions.is_none()`.
    pub fn grant_permissions(&self) -> &[crate::types::PermissionInput] {
        self.grant_permissions.as_deref().unwrap_or_default()
    }
    /// <p>The list of permissions to revoke for the Amazon Q App.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.revoke_permissions.is_none()`.
    pub fn revoke_permissions(&self) -> &[crate::types::PermissionInput] {
        self.revoke_permissions.as_deref().unwrap_or_default()
    }
}
impl UpdateQAppPermissionsInput {
    /// Creates a new builder-style object to manufacture [`UpdateQAppPermissionsInput`](crate::operation::update_q_app_permissions::UpdateQAppPermissionsInput).
    pub fn builder() -> crate::operation::update_q_app_permissions::builders::UpdateQAppPermissionsInputBuilder {
        crate::operation::update_q_app_permissions::builders::UpdateQAppPermissionsInputBuilder::default()
    }
}

/// A builder for [`UpdateQAppPermissionsInput`](crate::operation::update_q_app_permissions::UpdateQAppPermissionsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateQAppPermissionsInputBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) app_id: ::std::option::Option<::std::string::String>,
    pub(crate) grant_permissions: ::std::option::Option<::std::vec::Vec<crate::types::PermissionInput>>,
    pub(crate) revoke_permissions: ::std::option::Option<::std::vec::Vec<crate::types::PermissionInput>>,
}
impl UpdateQAppPermissionsInputBuilder {
    /// <p>The unique identifier of the Amazon Q Business application environment instance.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Amazon Q Business application environment instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The unique identifier of the Amazon Q Business application environment instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The unique identifier of the Amazon Q App for which permissions are being updated.</p>
    /// This field is required.
    pub fn app_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Amazon Q App for which permissions are being updated.</p>
    pub fn set_app_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p>The unique identifier of the Amazon Q App for which permissions are being updated.</p>
    pub fn get_app_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_id
    }
    /// Appends an item to `grant_permissions`.
    ///
    /// To override the contents of this collection use [`set_grant_permissions`](Self::set_grant_permissions).
    ///
    /// <p>The list of permissions to grant for the Amazon Q App.</p>
    pub fn grant_permissions(mut self, input: crate::types::PermissionInput) -> Self {
        let mut v = self.grant_permissions.unwrap_or_default();
        v.push(input);
        self.grant_permissions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of permissions to grant for the Amazon Q App.</p>
    pub fn set_grant_permissions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PermissionInput>>) -> Self {
        self.grant_permissions = input;
        self
    }
    /// <p>The list of permissions to grant for the Amazon Q App.</p>
    pub fn get_grant_permissions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PermissionInput>> {
        &self.grant_permissions
    }
    /// Appends an item to `revoke_permissions`.
    ///
    /// To override the contents of this collection use [`set_revoke_permissions`](Self::set_revoke_permissions).
    ///
    /// <p>The list of permissions to revoke for the Amazon Q App.</p>
    pub fn revoke_permissions(mut self, input: crate::types::PermissionInput) -> Self {
        let mut v = self.revoke_permissions.unwrap_or_default();
        v.push(input);
        self.revoke_permissions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of permissions to revoke for the Amazon Q App.</p>
    pub fn set_revoke_permissions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PermissionInput>>) -> Self {
        self.revoke_permissions = input;
        self
    }
    /// <p>The list of permissions to revoke for the Amazon Q App.</p>
    pub fn get_revoke_permissions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PermissionInput>> {
        &self.revoke_permissions
    }
    /// Consumes the builder and constructs a [`UpdateQAppPermissionsInput`](crate::operation::update_q_app_permissions::UpdateQAppPermissionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_q_app_permissions::UpdateQAppPermissionsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_q_app_permissions::UpdateQAppPermissionsInput {
            instance_id: self.instance_id,
            app_id: self.app_id,
            grant_permissions: self.grant_permissions,
            revoke_permissions: self.revoke_permissions,
        })
    }
}
