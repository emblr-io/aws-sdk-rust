// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchCreateCategoryInput {
    /// <p>The unique identifier of the Amazon Q Business application environment instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The list of category objects to be created</p>
    pub categories: ::std::option::Option<::std::vec::Vec<crate::types::BatchCreateCategoryInputCategory>>,
}
impl BatchCreateCategoryInput {
    /// <p>The unique identifier of the Amazon Q Business application environment instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The list of category objects to be created</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.categories.is_none()`.
    pub fn categories(&self) -> &[crate::types::BatchCreateCategoryInputCategory] {
        self.categories.as_deref().unwrap_or_default()
    }
}
impl BatchCreateCategoryInput {
    /// Creates a new builder-style object to manufacture [`BatchCreateCategoryInput`](crate::operation::batch_create_category::BatchCreateCategoryInput).
    pub fn builder() -> crate::operation::batch_create_category::builders::BatchCreateCategoryInputBuilder {
        crate::operation::batch_create_category::builders::BatchCreateCategoryInputBuilder::default()
    }
}

/// A builder for [`BatchCreateCategoryInput`](crate::operation::batch_create_category::BatchCreateCategoryInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchCreateCategoryInputBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) categories: ::std::option::Option<::std::vec::Vec<crate::types::BatchCreateCategoryInputCategory>>,
}
impl BatchCreateCategoryInputBuilder {
    /// <p>The unique identifier of the Amazon Q Business application environment instance.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Amazon Q Business application environment instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The unique identifier of the Amazon Q Business application environment instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// Appends an item to `categories`.
    ///
    /// To override the contents of this collection use [`set_categories`](Self::set_categories).
    ///
    /// <p>The list of category objects to be created</p>
    pub fn categories(mut self, input: crate::types::BatchCreateCategoryInputCategory) -> Self {
        let mut v = self.categories.unwrap_or_default();
        v.push(input);
        self.categories = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of category objects to be created</p>
    pub fn set_categories(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BatchCreateCategoryInputCategory>>) -> Self {
        self.categories = input;
        self
    }
    /// <p>The list of category objects to be created</p>
    pub fn get_categories(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BatchCreateCategoryInputCategory>> {
        &self.categories
    }
    /// Consumes the builder and constructs a [`BatchCreateCategoryInput`](crate::operation::batch_create_category::BatchCreateCategoryInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::batch_create_category::BatchCreateCategoryInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::batch_create_category::BatchCreateCategoryInput {
            instance_id: self.instance_id,
            categories: self.categories,
        })
    }
}
