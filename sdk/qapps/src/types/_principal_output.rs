// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The principal for which the permission applies.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PrincipalOutput {
    /// <p>The unique identifier of the user.</p>
    pub user_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of the user.</p>
    pub user_type: ::std::option::Option<crate::types::UserType>,
    /// <p>The email address associated with the user.</p>
    pub email: ::std::option::Option<::std::string::String>,
}
impl PrincipalOutput {
    /// <p>The unique identifier of the user.</p>
    pub fn user_id(&self) -> ::std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>The type of the user.</p>
    pub fn user_type(&self) -> ::std::option::Option<&crate::types::UserType> {
        self.user_type.as_ref()
    }
    /// <p>The email address associated with the user.</p>
    pub fn email(&self) -> ::std::option::Option<&str> {
        self.email.as_deref()
    }
}
impl PrincipalOutput {
    /// Creates a new builder-style object to manufacture [`PrincipalOutput`](crate::types::PrincipalOutput).
    pub fn builder() -> crate::types::builders::PrincipalOutputBuilder {
        crate::types::builders::PrincipalOutputBuilder::default()
    }
}

/// A builder for [`PrincipalOutput`](crate::types::PrincipalOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PrincipalOutputBuilder {
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_type: ::std::option::Option<crate::types::UserType>,
    pub(crate) email: ::std::option::Option<::std::string::String>,
}
impl PrincipalOutputBuilder {
    /// <p>The unique identifier of the user.</p>
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the user.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The unique identifier of the user.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// <p>The type of the user.</p>
    pub fn user_type(mut self, input: crate::types::UserType) -> Self {
        self.user_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the user.</p>
    pub fn set_user_type(mut self, input: ::std::option::Option<crate::types::UserType>) -> Self {
        self.user_type = input;
        self
    }
    /// <p>The type of the user.</p>
    pub fn get_user_type(&self) -> &::std::option::Option<crate::types::UserType> {
        &self.user_type
    }
    /// <p>The email address associated with the user.</p>
    pub fn email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address associated with the user.</p>
    pub fn set_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email = input;
        self
    }
    /// <p>The email address associated with the user.</p>
    pub fn get_email(&self) -> &::std::option::Option<::std::string::String> {
        &self.email
    }
    /// Consumes the builder and constructs a [`PrincipalOutput`](crate::types::PrincipalOutput).
    pub fn build(self) -> crate::types::PrincipalOutput {
        crate::types::PrincipalOutput {
            user_id: self.user_id,
            user_type: self.user_type,
            email: self.email,
        }
    }
}
