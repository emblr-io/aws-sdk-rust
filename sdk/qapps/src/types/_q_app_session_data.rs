// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The response collected for a Amazon Q App session. This container represents a single response to a Q App session.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QAppSessionData {
    /// <p>The card Id associated with the response submitted for a Q App session.</p>
    pub card_id: ::std::string::String,
    /// <p>The response submitted for a Q App session.</p>
    pub value: ::std::option::Option<::aws_smithy_types::Document>,
    /// <p>The user who submitted the response for a Q App session.</p>
    pub user: ::std::option::Option<crate::types::User>,
    /// <p>The unique identifier of the submission.</p>
    pub submission_id: ::std::option::Option<::std::string::String>,
    /// <p>The date and time when the session data is submitted.</p>
    pub timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl QAppSessionData {
    /// <p>The card Id associated with the response submitted for a Q App session.</p>
    pub fn card_id(&self) -> &str {
        use std::ops::Deref;
        self.card_id.deref()
    }
    /// <p>The response submitted for a Q App session.</p>
    pub fn value(&self) -> ::std::option::Option<&::aws_smithy_types::Document> {
        self.value.as_ref()
    }
    /// <p>The user who submitted the response for a Q App session.</p>
    pub fn user(&self) -> ::std::option::Option<&crate::types::User> {
        self.user.as_ref()
    }
    /// <p>The unique identifier of the submission.</p>
    pub fn submission_id(&self) -> ::std::option::Option<&str> {
        self.submission_id.as_deref()
    }
    /// <p>The date and time when the session data is submitted.</p>
    pub fn timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
}
impl QAppSessionData {
    /// Creates a new builder-style object to manufacture [`QAppSessionData`](crate::types::QAppSessionData).
    pub fn builder() -> crate::types::builders::QAppSessionDataBuilder {
        crate::types::builders::QAppSessionDataBuilder::default()
    }
}

/// A builder for [`QAppSessionData`](crate::types::QAppSessionData).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QAppSessionDataBuilder {
    pub(crate) card_id: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::aws_smithy_types::Document>,
    pub(crate) user: ::std::option::Option<crate::types::User>,
    pub(crate) submission_id: ::std::option::Option<::std::string::String>,
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl QAppSessionDataBuilder {
    /// <p>The card Id associated with the response submitted for a Q App session.</p>
    /// This field is required.
    pub fn card_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.card_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The card Id associated with the response submitted for a Q App session.</p>
    pub fn set_card_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.card_id = input;
        self
    }
    /// <p>The card Id associated with the response submitted for a Q App session.</p>
    pub fn get_card_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.card_id
    }
    /// <p>The response submitted for a Q App session.</p>
    pub fn value(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The response submitted for a Q App session.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.value = input;
        self
    }
    /// <p>The response submitted for a Q App session.</p>
    pub fn get_value(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.value
    }
    /// <p>The user who submitted the response for a Q App session.</p>
    /// This field is required.
    pub fn user(mut self, input: crate::types::User) -> Self {
        self.user = ::std::option::Option::Some(input);
        self
    }
    /// <p>The user who submitted the response for a Q App session.</p>
    pub fn set_user(mut self, input: ::std::option::Option<crate::types::User>) -> Self {
        self.user = input;
        self
    }
    /// <p>The user who submitted the response for a Q App session.</p>
    pub fn get_user(&self) -> &::std::option::Option<crate::types::User> {
        &self.user
    }
    /// <p>The unique identifier of the submission.</p>
    pub fn submission_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.submission_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the submission.</p>
    pub fn set_submission_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.submission_id = input;
        self
    }
    /// <p>The unique identifier of the submission.</p>
    pub fn get_submission_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.submission_id
    }
    /// <p>The date and time when the session data is submitted.</p>
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the session data is submitted.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The date and time when the session data is submitted.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// Consumes the builder and constructs a [`QAppSessionData`](crate::types::QAppSessionData).
    /// This method will fail if any of the following fields are not set:
    /// - [`card_id`](crate::types::builders::QAppSessionDataBuilder::card_id)
    pub fn build(self) -> ::std::result::Result<crate::types::QAppSessionData, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::QAppSessionData {
            card_id: self.card_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "card_id",
                    "card_id was not specified but it is required when building QAppSessionData",
                )
            })?,
            value: self.value,
            user: self.user,
            submission_id: self.submission_id,
            timestamp: self.timestamp,
        })
    }
}
