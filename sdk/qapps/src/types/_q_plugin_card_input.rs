// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The input shape for defining a plugin card in an Amazon Q App.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QPluginCardInput {
    /// <p>The title or label of the plugin card.</p>
    pub title: ::std::string::String,
    /// <p>The unique identifier of the plugin card.</p>
    pub id: ::std::string::String,
    /// <p>The type of the card.</p>
    pub r#type: crate::types::CardType,
    /// <p>The prompt or instructions displayed for the plugin card.</p>
    pub prompt: ::std::string::String,
    /// <p>The unique identifier of the plugin used by the card.</p>
    pub plugin_id: ::std::string::String,
    /// <p>The action identifier of the action to be performed by the plugin card.</p>
    pub action_identifier: ::std::option::Option<::std::string::String>,
}
impl QPluginCardInput {
    /// <p>The title or label of the plugin card.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>The unique identifier of the plugin card.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The type of the card.</p>
    pub fn r#type(&self) -> &crate::types::CardType {
        &self.r#type
    }
    /// <p>The prompt or instructions displayed for the plugin card.</p>
    pub fn prompt(&self) -> &str {
        use std::ops::Deref;
        self.prompt.deref()
    }
    /// <p>The unique identifier of the plugin used by the card.</p>
    pub fn plugin_id(&self) -> &str {
        use std::ops::Deref;
        self.plugin_id.deref()
    }
    /// <p>The action identifier of the action to be performed by the plugin card.</p>
    pub fn action_identifier(&self) -> ::std::option::Option<&str> {
        self.action_identifier.as_deref()
    }
}
impl QPluginCardInput {
    /// Creates a new builder-style object to manufacture [`QPluginCardInput`](crate::types::QPluginCardInput).
    pub fn builder() -> crate::types::builders::QPluginCardInputBuilder {
        crate::types::builders::QPluginCardInputBuilder::default()
    }
}

/// A builder for [`QPluginCardInput`](crate::types::QPluginCardInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QPluginCardInputBuilder {
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::CardType>,
    pub(crate) prompt: ::std::option::Option<::std::string::String>,
    pub(crate) plugin_id: ::std::option::Option<::std::string::String>,
    pub(crate) action_identifier: ::std::option::Option<::std::string::String>,
}
impl QPluginCardInputBuilder {
    /// <p>The title or label of the plugin card.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title or label of the plugin card.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title or label of the plugin card.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The unique identifier of the plugin card.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the plugin card.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the plugin card.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The type of the card.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::CardType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the card.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::CardType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the card.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::CardType> {
        &self.r#type
    }
    /// <p>The prompt or instructions displayed for the plugin card.</p>
    /// This field is required.
    pub fn prompt(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prompt = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The prompt or instructions displayed for the plugin card.</p>
    pub fn set_prompt(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prompt = input;
        self
    }
    /// <p>The prompt or instructions displayed for the plugin card.</p>
    pub fn get_prompt(&self) -> &::std::option::Option<::std::string::String> {
        &self.prompt
    }
    /// <p>The unique identifier of the plugin used by the card.</p>
    /// This field is required.
    pub fn plugin_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.plugin_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the plugin used by the card.</p>
    pub fn set_plugin_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.plugin_id = input;
        self
    }
    /// <p>The unique identifier of the plugin used by the card.</p>
    pub fn get_plugin_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.plugin_id
    }
    /// <p>The action identifier of the action to be performed by the plugin card.</p>
    pub fn action_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The action identifier of the action to be performed by the plugin card.</p>
    pub fn set_action_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_identifier = input;
        self
    }
    /// <p>The action identifier of the action to be performed by the plugin card.</p>
    pub fn get_action_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_identifier
    }
    /// Consumes the builder and constructs a [`QPluginCardInput`](crate::types::QPluginCardInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`title`](crate::types::builders::QPluginCardInputBuilder::title)
    /// - [`id`](crate::types::builders::QPluginCardInputBuilder::id)
    /// - [`prompt`](crate::types::builders::QPluginCardInputBuilder::prompt)
    /// - [`plugin_id`](crate::types::builders::QPluginCardInputBuilder::plugin_id)
    pub fn build(self) -> ::std::result::Result<crate::types::QPluginCardInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::QPluginCardInput {
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building QPluginCardInput",
                )
            })?,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building QPluginCardInput",
                )
            })?,
            r#type: self
                .r#type
                .unwrap_or("q-plugin".parse::<crate::types::CardType>().expect("static value validated to member")),
            prompt: self.prompt.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "prompt",
                    "prompt was not specified but it is required when building QPluginCardInput",
                )
            })?,
            plugin_id: self.plugin_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "plugin_id",
                    "plugin_id was not specified but it is required when building QPluginCardInput",
                )
            })?,
            action_identifier: self.action_identifier,
        })
    }
}
