// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The sharing configuration of an Amazon Q App data collection session.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SessionSharingConfiguration {
    /// <p>Indicates whether an Q App session is shareable with other users.</p>
    pub enabled: bool,
    /// <p>Indicates whether an Q App session can accept responses from users.</p>
    pub accept_responses: ::std::option::Option<bool>,
    /// <p>Indicates whether collected responses for an Q App session are revealed for all users.</p>
    pub reveal_cards: ::std::option::Option<bool>,
}
impl SessionSharingConfiguration {
    /// <p>Indicates whether an Q App session is shareable with other users.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>Indicates whether an Q App session can accept responses from users.</p>
    pub fn accept_responses(&self) -> ::std::option::Option<bool> {
        self.accept_responses
    }
    /// <p>Indicates whether collected responses for an Q App session are revealed for all users.</p>
    pub fn reveal_cards(&self) -> ::std::option::Option<bool> {
        self.reveal_cards
    }
}
impl SessionSharingConfiguration {
    /// Creates a new builder-style object to manufacture [`SessionSharingConfiguration`](crate::types::SessionSharingConfiguration).
    pub fn builder() -> crate::types::builders::SessionSharingConfigurationBuilder {
        crate::types::builders::SessionSharingConfigurationBuilder::default()
    }
}

/// A builder for [`SessionSharingConfiguration`](crate::types::SessionSharingConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SessionSharingConfigurationBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) accept_responses: ::std::option::Option<bool>,
    pub(crate) reveal_cards: ::std::option::Option<bool>,
}
impl SessionSharingConfigurationBuilder {
    /// <p>Indicates whether an Q App session is shareable with other users.</p>
    /// This field is required.
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether an Q App session is shareable with other users.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Indicates whether an Q App session is shareable with other users.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>Indicates whether an Q App session can accept responses from users.</p>
    pub fn accept_responses(mut self, input: bool) -> Self {
        self.accept_responses = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether an Q App session can accept responses from users.</p>
    pub fn set_accept_responses(mut self, input: ::std::option::Option<bool>) -> Self {
        self.accept_responses = input;
        self
    }
    /// <p>Indicates whether an Q App session can accept responses from users.</p>
    pub fn get_accept_responses(&self) -> &::std::option::Option<bool> {
        &self.accept_responses
    }
    /// <p>Indicates whether collected responses for an Q App session are revealed for all users.</p>
    pub fn reveal_cards(mut self, input: bool) -> Self {
        self.reveal_cards = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether collected responses for an Q App session are revealed for all users.</p>
    pub fn set_reveal_cards(mut self, input: ::std::option::Option<bool>) -> Self {
        self.reveal_cards = input;
        self
    }
    /// <p>Indicates whether collected responses for an Q App session are revealed for all users.</p>
    pub fn get_reveal_cards(&self) -> &::std::option::Option<bool> {
        &self.reveal_cards
    }
    /// Consumes the builder and constructs a [`SessionSharingConfiguration`](crate::types::SessionSharingConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`enabled`](crate::types::builders::SessionSharingConfigurationBuilder::enabled)
    pub fn build(self) -> ::std::result::Result<crate::types::SessionSharingConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SessionSharingConfiguration {
            enabled: self.enabled.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "enabled",
                    "enabled was not specified but it is required when building SessionSharingConfiguration",
                )
            })?,
            accept_responses: self.accept_responses,
            reveal_cards: self.reveal_cards,
        })
    }
}
