// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The category object to be created.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchCreateCategoryInputCategory {
    /// <p>The unique identifier to be associated with a category. If you don't include a value, the category is automatically assigned a unique identifier.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the category.</p>
    pub title: ::std::string::String,
    /// <p>The color to be associated with a category. The color must be a hexadecimal value of either 3 or 6 digits.</p>
    pub color: ::std::option::Option<::std::string::String>,
}
impl BatchCreateCategoryInputCategory {
    /// <p>The unique identifier to be associated with a category. If you don't include a value, the category is automatically assigned a unique identifier.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the category.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>The color to be associated with a category. The color must be a hexadecimal value of either 3 or 6 digits.</p>
    pub fn color(&self) -> ::std::option::Option<&str> {
        self.color.as_deref()
    }
}
impl BatchCreateCategoryInputCategory {
    /// Creates a new builder-style object to manufacture [`BatchCreateCategoryInputCategory`](crate::types::BatchCreateCategoryInputCategory).
    pub fn builder() -> crate::types::builders::BatchCreateCategoryInputCategoryBuilder {
        crate::types::builders::BatchCreateCategoryInputCategoryBuilder::default()
    }
}

/// A builder for [`BatchCreateCategoryInputCategory`](crate::types::BatchCreateCategoryInputCategory).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchCreateCategoryInputCategoryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) color: ::std::option::Option<::std::string::String>,
}
impl BatchCreateCategoryInputCategoryBuilder {
    /// <p>The unique identifier to be associated with a category. If you don't include a value, the category is automatically assigned a unique identifier.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier to be associated with a category. If you don't include a value, the category is automatically assigned a unique identifier.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier to be associated with a category. If you don't include a value, the category is automatically assigned a unique identifier.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the category.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the category.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The name of the category.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The color to be associated with a category. The color must be a hexadecimal value of either 3 or 6 digits.</p>
    pub fn color(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.color = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The color to be associated with a category. The color must be a hexadecimal value of either 3 or 6 digits.</p>
    pub fn set_color(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.color = input;
        self
    }
    /// <p>The color to be associated with a category. The color must be a hexadecimal value of either 3 or 6 digits.</p>
    pub fn get_color(&self) -> &::std::option::Option<::std::string::String> {
        &self.color
    }
    /// Consumes the builder and constructs a [`BatchCreateCategoryInputCategory`](crate::types::BatchCreateCategoryInputCategory).
    /// This method will fail if any of the following fields are not set:
    /// - [`title`](crate::types::builders::BatchCreateCategoryInputCategoryBuilder::title)
    pub fn build(self) -> ::std::result::Result<crate::types::BatchCreateCategoryInputCategory, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BatchCreateCategoryInputCategory {
            id: self.id,
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building BatchCreateCategoryInputCategory",
                )
            })?,
            color: self.color,
        })
    }
}
