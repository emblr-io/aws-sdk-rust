// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition of the Q App, specifying the cards and flow.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AppDefinition {
    /// <p>The version of the app definition schema or specification.</p>
    pub app_definition_version: ::std::string::String,
    /// <p>The cards that make up the Q App, such as text input, file upload, or query cards.</p>
    pub cards: ::std::vec::Vec<crate::types::Card>,
    /// <p>A flag indicating whether the Q App's definition can be edited by the user.</p>
    pub can_edit: ::std::option::Option<bool>,
}
impl AppDefinition {
    /// <p>The version of the app definition schema or specification.</p>
    pub fn app_definition_version(&self) -> &str {
        use std::ops::Deref;
        self.app_definition_version.deref()
    }
    /// <p>The cards that make up the Q App, such as text input, file upload, or query cards.</p>
    pub fn cards(&self) -> &[crate::types::Card] {
        use std::ops::Deref;
        self.cards.deref()
    }
    /// <p>A flag indicating whether the Q App's definition can be edited by the user.</p>
    pub fn can_edit(&self) -> ::std::option::Option<bool> {
        self.can_edit
    }
}
impl AppDefinition {
    /// Creates a new builder-style object to manufacture [`AppDefinition`](crate::types::AppDefinition).
    pub fn builder() -> crate::types::builders::AppDefinitionBuilder {
        crate::types::builders::AppDefinitionBuilder::default()
    }
}

/// A builder for [`AppDefinition`](crate::types::AppDefinition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AppDefinitionBuilder {
    pub(crate) app_definition_version: ::std::option::Option<::std::string::String>,
    pub(crate) cards: ::std::option::Option<::std::vec::Vec<crate::types::Card>>,
    pub(crate) can_edit: ::std::option::Option<bool>,
}
impl AppDefinitionBuilder {
    /// <p>The version of the app definition schema or specification.</p>
    /// This field is required.
    pub fn app_definition_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_definition_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the app definition schema or specification.</p>
    pub fn set_app_definition_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_definition_version = input;
        self
    }
    /// <p>The version of the app definition schema or specification.</p>
    pub fn get_app_definition_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_definition_version
    }
    /// Appends an item to `cards`.
    ///
    /// To override the contents of this collection use [`set_cards`](Self::set_cards).
    ///
    /// <p>The cards that make up the Q App, such as text input, file upload, or query cards.</p>
    pub fn cards(mut self, input: crate::types::Card) -> Self {
        let mut v = self.cards.unwrap_or_default();
        v.push(input);
        self.cards = ::std::option::Option::Some(v);
        self
    }
    /// <p>The cards that make up the Q App, such as text input, file upload, or query cards.</p>
    pub fn set_cards(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Card>>) -> Self {
        self.cards = input;
        self
    }
    /// <p>The cards that make up the Q App, such as text input, file upload, or query cards.</p>
    pub fn get_cards(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Card>> {
        &self.cards
    }
    /// <p>A flag indicating whether the Q App's definition can be edited by the user.</p>
    pub fn can_edit(mut self, input: bool) -> Self {
        self.can_edit = ::std::option::Option::Some(input);
        self
    }
    /// <p>A flag indicating whether the Q App's definition can be edited by the user.</p>
    pub fn set_can_edit(mut self, input: ::std::option::Option<bool>) -> Self {
        self.can_edit = input;
        self
    }
    /// <p>A flag indicating whether the Q App's definition can be edited by the user.</p>
    pub fn get_can_edit(&self) -> &::std::option::Option<bool> {
        &self.can_edit
    }
    /// Consumes the builder and constructs a [`AppDefinition`](crate::types::AppDefinition).
    /// This method will fail if any of the following fields are not set:
    /// - [`app_definition_version`](crate::types::builders::AppDefinitionBuilder::app_definition_version)
    /// - [`cards`](crate::types::builders::AppDefinitionBuilder::cards)
    pub fn build(self) -> ::std::result::Result<crate::types::AppDefinition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AppDefinition {
            app_definition_version: self.app_definition_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "app_definition_version",
                    "app_definition_version was not specified but it is required when building AppDefinition",
                )
            })?,
            cards: self.cards.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cards",
                    "cards was not specified but it is required when building AppDefinition",
                )
            })?,
            can_edit: self.can_edit,
        })
    }
}
