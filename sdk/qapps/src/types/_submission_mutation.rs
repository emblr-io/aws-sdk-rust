// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents an action performed on a submission.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SubmissionMutation {
    /// <p>The unique identifier of the submission.</p>
    pub submission_id: ::std::string::String,
    /// <p>The operation that is performed on a submission.</p>
    pub mutation_type: crate::types::SubmissionMutationKind,
}
impl SubmissionMutation {
    /// <p>The unique identifier of the submission.</p>
    pub fn submission_id(&self) -> &str {
        use std::ops::Deref;
        self.submission_id.deref()
    }
    /// <p>The operation that is performed on a submission.</p>
    pub fn mutation_type(&self) -> &crate::types::SubmissionMutationKind {
        &self.mutation_type
    }
}
impl SubmissionMutation {
    /// Creates a new builder-style object to manufacture [`SubmissionMutation`](crate::types::SubmissionMutation).
    pub fn builder() -> crate::types::builders::SubmissionMutationBuilder {
        crate::types::builders::SubmissionMutationBuilder::default()
    }
}

/// A builder for [`SubmissionMutation`](crate::types::SubmissionMutation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SubmissionMutationBuilder {
    pub(crate) submission_id: ::std::option::Option<::std::string::String>,
    pub(crate) mutation_type: ::std::option::Option<crate::types::SubmissionMutationKind>,
}
impl SubmissionMutationBuilder {
    /// <p>The unique identifier of the submission.</p>
    /// This field is required.
    pub fn submission_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.submission_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the submission.</p>
    pub fn set_submission_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.submission_id = input;
        self
    }
    /// <p>The unique identifier of the submission.</p>
    pub fn get_submission_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.submission_id
    }
    /// <p>The operation that is performed on a submission.</p>
    /// This field is required.
    pub fn mutation_type(mut self, input: crate::types::SubmissionMutationKind) -> Self {
        self.mutation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operation that is performed on a submission.</p>
    pub fn set_mutation_type(mut self, input: ::std::option::Option<crate::types::SubmissionMutationKind>) -> Self {
        self.mutation_type = input;
        self
    }
    /// <p>The operation that is performed on a submission.</p>
    pub fn get_mutation_type(&self) -> &::std::option::Option<crate::types::SubmissionMutationKind> {
        &self.mutation_type
    }
    /// Consumes the builder and constructs a [`SubmissionMutation`](crate::types::SubmissionMutation).
    /// This method will fail if any of the following fields are not set:
    /// - [`submission_id`](crate::types::builders::SubmissionMutationBuilder::submission_id)
    /// - [`mutation_type`](crate::types::builders::SubmissionMutationBuilder::mutation_type)
    pub fn build(self) -> ::std::result::Result<crate::types::SubmissionMutation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SubmissionMutation {
            submission_id: self.submission_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "submission_id",
                    "submission_id was not specified but it is required when building SubmissionMutation",
                )
            })?,
            mutation_type: self.mutation_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mutation_type",
                    "mutation_type was not specified but it is required when building SubmissionMutation",
                )
            })?,
        })
    }
}
