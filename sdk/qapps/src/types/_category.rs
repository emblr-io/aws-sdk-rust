// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A category used to classify and filter library items for Amazon Q Apps.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Category {
    /// <p>The unique identifier of the category.</p>
    pub id: ::std::string::String,
    /// <p>The title or name of the category.</p>
    pub title: ::std::string::String,
    /// <p>The color of the category</p>
    pub color: ::std::option::Option<::std::string::String>,
    /// <p>The number of published Amazon Q Apps associated with a category</p>
    pub app_count: ::std::option::Option<i32>,
}
impl Category {
    /// <p>The unique identifier of the category.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The title or name of the category.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>The color of the category</p>
    pub fn color(&self) -> ::std::option::Option<&str> {
        self.color.as_deref()
    }
    /// <p>The number of published Amazon Q Apps associated with a category</p>
    pub fn app_count(&self) -> ::std::option::Option<i32> {
        self.app_count
    }
}
impl Category {
    /// Creates a new builder-style object to manufacture [`Category`](crate::types::Category).
    pub fn builder() -> crate::types::builders::CategoryBuilder {
        crate::types::builders::CategoryBuilder::default()
    }
}

/// A builder for [`Category`](crate::types::Category).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CategoryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) color: ::std::option::Option<::std::string::String>,
    pub(crate) app_count: ::std::option::Option<i32>,
}
impl CategoryBuilder {
    /// <p>The unique identifier of the category.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the category.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the category.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The title or name of the category.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title or name of the category.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title or name of the category.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The color of the category</p>
    pub fn color(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.color = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The color of the category</p>
    pub fn set_color(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.color = input;
        self
    }
    /// <p>The color of the category</p>
    pub fn get_color(&self) -> &::std::option::Option<::std::string::String> {
        &self.color
    }
    /// <p>The number of published Amazon Q Apps associated with a category</p>
    pub fn app_count(mut self, input: i32) -> Self {
        self.app_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of published Amazon Q Apps associated with a category</p>
    pub fn set_app_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.app_count = input;
        self
    }
    /// <p>The number of published Amazon Q Apps associated with a category</p>
    pub fn get_app_count(&self) -> &::std::option::Option<i32> {
        &self.app_count
    }
    /// Consumes the builder and constructs a [`Category`](crate::types::Category).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::CategoryBuilder::id)
    /// - [`title`](crate::types::builders::CategoryBuilder::title)
    pub fn build(self) -> ::std::result::Result<crate::types::Category, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Category {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building Category",
                )
            })?,
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building Category",
                )
            })?,
            color: self.color,
            app_count: self.app_count,
        })
    }
}
