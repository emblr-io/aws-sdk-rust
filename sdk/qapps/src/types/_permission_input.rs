// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The permission to grant or revoke for a Amazon Q App.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PermissionInput {
    /// <p>The action associated with the permission.</p>
    pub action: crate::types::Action,
    /// <p>The principal user to which the permission applies.</p>
    pub principal: ::std::string::String,
}
impl PermissionInput {
    /// <p>The action associated with the permission.</p>
    pub fn action(&self) -> &crate::types::Action {
        &self.action
    }
    /// <p>The principal user to which the permission applies.</p>
    pub fn principal(&self) -> &str {
        use std::ops::Deref;
        self.principal.deref()
    }
}
impl PermissionInput {
    /// Creates a new builder-style object to manufacture [`PermissionInput`](crate::types::PermissionInput).
    pub fn builder() -> crate::types::builders::PermissionInputBuilder {
        crate::types::builders::PermissionInputBuilder::default()
    }
}

/// A builder for [`PermissionInput`](crate::types::PermissionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PermissionInputBuilder {
    pub(crate) action: ::std::option::Option<crate::types::Action>,
    pub(crate) principal: ::std::option::Option<::std::string::String>,
}
impl PermissionInputBuilder {
    /// <p>The action associated with the permission.</p>
    /// This field is required.
    pub fn action(mut self, input: crate::types::Action) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action associated with the permission.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::Action>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action associated with the permission.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::Action> {
        &self.action
    }
    /// <p>The principal user to which the permission applies.</p>
    /// This field is required.
    pub fn principal(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The principal user to which the permission applies.</p>
    pub fn set_principal(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal = input;
        self
    }
    /// <p>The principal user to which the permission applies.</p>
    pub fn get_principal(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal
    }
    /// Consumes the builder and constructs a [`PermissionInput`](crate::types::PermissionInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`action`](crate::types::builders::PermissionInputBuilder::action)
    /// - [`principal`](crate::types::builders::PermissionInputBuilder::principal)
    pub fn build(self) -> ::std::result::Result<crate::types::PermissionInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PermissionInput {
            action: self.action.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action",
                    "action was not specified but it is required when building PermissionInput",
                )
            })?,
            principal: self.principal.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "principal",
                    "principal was not specified but it is required when building PermissionInput",
                )
            })?,
        })
    }
}
