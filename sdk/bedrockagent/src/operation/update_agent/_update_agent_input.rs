// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateAgentInput {
    /// <p>The unique identifier of the agent.</p>
    pub agent_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies a new name for the agent.</p>
    pub agent_name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies new instructions that tell the agent what it should do and how it should interact with users.</p>
    pub instruction: ::std::option::Option<::std::string::String>,
    /// <p>The identifier for the model that you want to be used for orchestration by the agent you create.</p>
    /// <p>The <code>modelId</code> to provide depends on the type of model or throughput that you use:</p>
    /// <ul>
    /// <li>
    /// <p>If you use a base model, specify the model ID or its ARN. For a list of model IDs for base models, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html#model-ids-arns">Amazon Bedrock base model IDs (on-demand throughput)</a> in the Amazon Bedrock User Guide.</p></li>
    /// <li>
    /// <p>If you use an inference profile, specify the inference profile ID or its ARN. For a list of inference profile IDs, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference-support.html">Supported Regions and models for cross-region inference</a> in the Amazon Bedrock User Guide.</p></li>
    /// <li>
    /// <p>If you use a provisioned model, specify the ARN of the Provisioned Throughput. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/prov-thru-use.html">Run inference using a Provisioned Throughput</a> in the Amazon Bedrock User Guide.</p></li>
    /// <li>
    /// <p>If you use a custom model, first purchase Provisioned Throughput for it. Then specify the ARN of the resulting provisioned model. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-customization-use.html">Use a custom model in Amazon Bedrock</a> in the Amazon Bedrock User Guide.</p></li>
    /// <li>
    /// <p>If you use an <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-customization-import-model.html">imported model</a>, specify the ARN of the imported model. You can get the model ARN from a successful call to <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_CreateModelImportJob.html">CreateModelImportJob</a> or from the Imported models page in the Amazon Bedrock console.</p></li>
    /// </ul>
    pub foundation_model: ::std::option::Option<::std::string::String>,
    /// <p>Specifies a new description of the agent.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the type of orchestration strategy for the agent. This is set to <code>DEFAULT</code> orchestration type, by default.</p>
    pub orchestration_type: ::std::option::Option<crate::types::OrchestrationType>,
    /// <p>Contains details of the custom orchestration configured for the agent.</p>
    pub custom_orchestration: ::std::option::Option<crate::types::CustomOrchestration>,
    /// <p>The number of seconds for which Amazon Bedrock keeps information about a user's conversation with the agent.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Bedrock deletes any data provided before the timeout.</p>
    pub idle_session_ttl_in_seconds: ::std::option::Option<i32>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role with permissions to invoke API operations on the agent.</p>
    pub agent_resource_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the KMS key with which to encrypt the agent.</p>
    pub customer_encryption_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>Contains configurations to override prompts in different parts of an agent sequence. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html">Advanced prompts</a>.</p>
    pub prompt_override_configuration: ::std::option::Option<crate::types::PromptOverrideConfiguration>,
    /// <p>The unique Guardrail configuration assigned to the agent when it is updated.</p>
    pub guardrail_configuration: ::std::option::Option<crate::types::GuardrailConfiguration>,
    /// <p>Specifies the new memory configuration for the agent.</p>
    pub memory_configuration: ::std::option::Option<crate::types::MemoryConfiguration>,
    /// <p>The agent's collaboration role.</p>
    pub agent_collaboration: ::std::option::Option<crate::types::AgentCollaboration>,
}
impl UpdateAgentInput {
    /// <p>The unique identifier of the agent.</p>
    pub fn agent_id(&self) -> ::std::option::Option<&str> {
        self.agent_id.as_deref()
    }
    /// <p>Specifies a new name for the agent.</p>
    pub fn agent_name(&self) -> ::std::option::Option<&str> {
        self.agent_name.as_deref()
    }
    /// <p>Specifies new instructions that tell the agent what it should do and how it should interact with users.</p>
    pub fn instruction(&self) -> ::std::option::Option<&str> {
        self.instruction.as_deref()
    }
    /// <p>The identifier for the model that you want to be used for orchestration by the agent you create.</p>
    /// <p>The <code>modelId</code> to provide depends on the type of model or throughput that you use:</p>
    /// <ul>
    /// <li>
    /// <p>If you use a base model, specify the model ID or its ARN. For a list of model IDs for base models, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html#model-ids-arns">Amazon Bedrock base model IDs (on-demand throughput)</a> in the Amazon Bedrock User Guide.</p></li>
    /// <li>
    /// <p>If you use an inference profile, specify the inference profile ID or its ARN. For a list of inference profile IDs, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference-support.html">Supported Regions and models for cross-region inference</a> in the Amazon Bedrock User Guide.</p></li>
    /// <li>
    /// <p>If you use a provisioned model, specify the ARN of the Provisioned Throughput. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/prov-thru-use.html">Run inference using a Provisioned Throughput</a> in the Amazon Bedrock User Guide.</p></li>
    /// <li>
    /// <p>If you use a custom model, first purchase Provisioned Throughput for it. Then specify the ARN of the resulting provisioned model. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-customization-use.html">Use a custom model in Amazon Bedrock</a> in the Amazon Bedrock User Guide.</p></li>
    /// <li>
    /// <p>If you use an <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-customization-import-model.html">imported model</a>, specify the ARN of the imported model. You can get the model ARN from a successful call to <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_CreateModelImportJob.html">CreateModelImportJob</a> or from the Imported models page in the Amazon Bedrock console.</p></li>
    /// </ul>
    pub fn foundation_model(&self) -> ::std::option::Option<&str> {
        self.foundation_model.as_deref()
    }
    /// <p>Specifies a new description of the agent.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Specifies the type of orchestration strategy for the agent. This is set to <code>DEFAULT</code> orchestration type, by default.</p>
    pub fn orchestration_type(&self) -> ::std::option::Option<&crate::types::OrchestrationType> {
        self.orchestration_type.as_ref()
    }
    /// <p>Contains details of the custom orchestration configured for the agent.</p>
    pub fn custom_orchestration(&self) -> ::std::option::Option<&crate::types::CustomOrchestration> {
        self.custom_orchestration.as_ref()
    }
    /// <p>The number of seconds for which Amazon Bedrock keeps information about a user's conversation with the agent.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Bedrock deletes any data provided before the timeout.</p>
    pub fn idle_session_ttl_in_seconds(&self) -> ::std::option::Option<i32> {
        self.idle_session_ttl_in_seconds
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role with permissions to invoke API operations on the agent.</p>
    pub fn agent_resource_role_arn(&self) -> ::std::option::Option<&str> {
        self.agent_resource_role_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key with which to encrypt the agent.</p>
    pub fn customer_encryption_key_arn(&self) -> ::std::option::Option<&str> {
        self.customer_encryption_key_arn.as_deref()
    }
    /// <p>Contains configurations to override prompts in different parts of an agent sequence. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html">Advanced prompts</a>.</p>
    pub fn prompt_override_configuration(&self) -> ::std::option::Option<&crate::types::PromptOverrideConfiguration> {
        self.prompt_override_configuration.as_ref()
    }
    /// <p>The unique Guardrail configuration assigned to the agent when it is updated.</p>
    pub fn guardrail_configuration(&self) -> ::std::option::Option<&crate::types::GuardrailConfiguration> {
        self.guardrail_configuration.as_ref()
    }
    /// <p>Specifies the new memory configuration for the agent.</p>
    pub fn memory_configuration(&self) -> ::std::option::Option<&crate::types::MemoryConfiguration> {
        self.memory_configuration.as_ref()
    }
    /// <p>The agent's collaboration role.</p>
    pub fn agent_collaboration(&self) -> ::std::option::Option<&crate::types::AgentCollaboration> {
        self.agent_collaboration.as_ref()
    }
}
impl ::std::fmt::Debug for UpdateAgentInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAgentInput");
        formatter.field("agent_id", &self.agent_id);
        formatter.field("agent_name", &self.agent_name);
        formatter.field("instruction", &"*** Sensitive Data Redacted ***");
        formatter.field("foundation_model", &self.foundation_model);
        formatter.field("description", &self.description);
        formatter.field("orchestration_type", &self.orchestration_type);
        formatter.field("custom_orchestration", &self.custom_orchestration);
        formatter.field("idle_session_ttl_in_seconds", &self.idle_session_ttl_in_seconds);
        formatter.field("agent_resource_role_arn", &self.agent_resource_role_arn);
        formatter.field("customer_encryption_key_arn", &self.customer_encryption_key_arn);
        formatter.field("prompt_override_configuration", &"*** Sensitive Data Redacted ***");
        formatter.field("guardrail_configuration", &self.guardrail_configuration);
        formatter.field("memory_configuration", &self.memory_configuration);
        formatter.field("agent_collaboration", &self.agent_collaboration);
        formatter.finish()
    }
}
impl UpdateAgentInput {
    /// Creates a new builder-style object to manufacture [`UpdateAgentInput`](crate::operation::update_agent::UpdateAgentInput).
    pub fn builder() -> crate::operation::update_agent::builders::UpdateAgentInputBuilder {
        crate::operation::update_agent::builders::UpdateAgentInputBuilder::default()
    }
}

/// A builder for [`UpdateAgentInput`](crate::operation::update_agent::UpdateAgentInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateAgentInputBuilder {
    pub(crate) agent_id: ::std::option::Option<::std::string::String>,
    pub(crate) agent_name: ::std::option::Option<::std::string::String>,
    pub(crate) instruction: ::std::option::Option<::std::string::String>,
    pub(crate) foundation_model: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) orchestration_type: ::std::option::Option<crate::types::OrchestrationType>,
    pub(crate) custom_orchestration: ::std::option::Option<crate::types::CustomOrchestration>,
    pub(crate) idle_session_ttl_in_seconds: ::std::option::Option<i32>,
    pub(crate) agent_resource_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) customer_encryption_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) prompt_override_configuration: ::std::option::Option<crate::types::PromptOverrideConfiguration>,
    pub(crate) guardrail_configuration: ::std::option::Option<crate::types::GuardrailConfiguration>,
    pub(crate) memory_configuration: ::std::option::Option<crate::types::MemoryConfiguration>,
    pub(crate) agent_collaboration: ::std::option::Option<crate::types::AgentCollaboration>,
}
impl UpdateAgentInputBuilder {
    /// <p>The unique identifier of the agent.</p>
    /// This field is required.
    pub fn agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the agent.</p>
    pub fn set_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_id = input;
        self
    }
    /// <p>The unique identifier of the agent.</p>
    pub fn get_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_id
    }
    /// <p>Specifies a new name for the agent.</p>
    /// This field is required.
    pub fn agent_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a new name for the agent.</p>
    pub fn set_agent_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_name = input;
        self
    }
    /// <p>Specifies a new name for the agent.</p>
    pub fn get_agent_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_name
    }
    /// <p>Specifies new instructions that tell the agent what it should do and how it should interact with users.</p>
    pub fn instruction(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instruction = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies new instructions that tell the agent what it should do and how it should interact with users.</p>
    pub fn set_instruction(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instruction = input;
        self
    }
    /// <p>Specifies new instructions that tell the agent what it should do and how it should interact with users.</p>
    pub fn get_instruction(&self) -> &::std::option::Option<::std::string::String> {
        &self.instruction
    }
    /// <p>The identifier for the model that you want to be used for orchestration by the agent you create.</p>
    /// <p>The <code>modelId</code> to provide depends on the type of model or throughput that you use:</p>
    /// <ul>
    /// <li>
    /// <p>If you use a base model, specify the model ID or its ARN. For a list of model IDs for base models, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html#model-ids-arns">Amazon Bedrock base model IDs (on-demand throughput)</a> in the Amazon Bedrock User Guide.</p></li>
    /// <li>
    /// <p>If you use an inference profile, specify the inference profile ID or its ARN. For a list of inference profile IDs, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference-support.html">Supported Regions and models for cross-region inference</a> in the Amazon Bedrock User Guide.</p></li>
    /// <li>
    /// <p>If you use a provisioned model, specify the ARN of the Provisioned Throughput. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/prov-thru-use.html">Run inference using a Provisioned Throughput</a> in the Amazon Bedrock User Guide.</p></li>
    /// <li>
    /// <p>If you use a custom model, first purchase Provisioned Throughput for it. Then specify the ARN of the resulting provisioned model. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-customization-use.html">Use a custom model in Amazon Bedrock</a> in the Amazon Bedrock User Guide.</p></li>
    /// <li>
    /// <p>If you use an <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-customization-import-model.html">imported model</a>, specify the ARN of the imported model. You can get the model ARN from a successful call to <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_CreateModelImportJob.html">CreateModelImportJob</a> or from the Imported models page in the Amazon Bedrock console.</p></li>
    /// </ul>
    /// This field is required.
    pub fn foundation_model(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.foundation_model = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the model that you want to be used for orchestration by the agent you create.</p>
    /// <p>The <code>modelId</code> to provide depends on the type of model or throughput that you use:</p>
    /// <ul>
    /// <li>
    /// <p>If you use a base model, specify the model ID or its ARN. For a list of model IDs for base models, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html#model-ids-arns">Amazon Bedrock base model IDs (on-demand throughput)</a> in the Amazon Bedrock User Guide.</p></li>
    /// <li>
    /// <p>If you use an inference profile, specify the inference profile ID or its ARN. For a list of inference profile IDs, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference-support.html">Supported Regions and models for cross-region inference</a> in the Amazon Bedrock User Guide.</p></li>
    /// <li>
    /// <p>If you use a provisioned model, specify the ARN of the Provisioned Throughput. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/prov-thru-use.html">Run inference using a Provisioned Throughput</a> in the Amazon Bedrock User Guide.</p></li>
    /// <li>
    /// <p>If you use a custom model, first purchase Provisioned Throughput for it. Then specify the ARN of the resulting provisioned model. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-customization-use.html">Use a custom model in Amazon Bedrock</a> in the Amazon Bedrock User Guide.</p></li>
    /// <li>
    /// <p>If you use an <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-customization-import-model.html">imported model</a>, specify the ARN of the imported model. You can get the model ARN from a successful call to <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_CreateModelImportJob.html">CreateModelImportJob</a> or from the Imported models page in the Amazon Bedrock console.</p></li>
    /// </ul>
    pub fn set_foundation_model(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.foundation_model = input;
        self
    }
    /// <p>The identifier for the model that you want to be used for orchestration by the agent you create.</p>
    /// <p>The <code>modelId</code> to provide depends on the type of model or throughput that you use:</p>
    /// <ul>
    /// <li>
    /// <p>If you use a base model, specify the model ID or its ARN. For a list of model IDs for base models, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html#model-ids-arns">Amazon Bedrock base model IDs (on-demand throughput)</a> in the Amazon Bedrock User Guide.</p></li>
    /// <li>
    /// <p>If you use an inference profile, specify the inference profile ID or its ARN. For a list of inference profile IDs, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference-support.html">Supported Regions and models for cross-region inference</a> in the Amazon Bedrock User Guide.</p></li>
    /// <li>
    /// <p>If you use a provisioned model, specify the ARN of the Provisioned Throughput. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/prov-thru-use.html">Run inference using a Provisioned Throughput</a> in the Amazon Bedrock User Guide.</p></li>
    /// <li>
    /// <p>If you use a custom model, first purchase Provisioned Throughput for it. Then specify the ARN of the resulting provisioned model. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-customization-use.html">Use a custom model in Amazon Bedrock</a> in the Amazon Bedrock User Guide.</p></li>
    /// <li>
    /// <p>If you use an <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-customization-import-model.html">imported model</a>, specify the ARN of the imported model. You can get the model ARN from a successful call to <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_CreateModelImportJob.html">CreateModelImportJob</a> or from the Imported models page in the Amazon Bedrock console.</p></li>
    /// </ul>
    pub fn get_foundation_model(&self) -> &::std::option::Option<::std::string::String> {
        &self.foundation_model
    }
    /// <p>Specifies a new description of the agent.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a new description of the agent.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Specifies a new description of the agent.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Specifies the type of orchestration strategy for the agent. This is set to <code>DEFAULT</code> orchestration type, by default.</p>
    pub fn orchestration_type(mut self, input: crate::types::OrchestrationType) -> Self {
        self.orchestration_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of orchestration strategy for the agent. This is set to <code>DEFAULT</code> orchestration type, by default.</p>
    pub fn set_orchestration_type(mut self, input: ::std::option::Option<crate::types::OrchestrationType>) -> Self {
        self.orchestration_type = input;
        self
    }
    /// <p>Specifies the type of orchestration strategy for the agent. This is set to <code>DEFAULT</code> orchestration type, by default.</p>
    pub fn get_orchestration_type(&self) -> &::std::option::Option<crate::types::OrchestrationType> {
        &self.orchestration_type
    }
    /// <p>Contains details of the custom orchestration configured for the agent.</p>
    pub fn custom_orchestration(mut self, input: crate::types::CustomOrchestration) -> Self {
        self.custom_orchestration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details of the custom orchestration configured for the agent.</p>
    pub fn set_custom_orchestration(mut self, input: ::std::option::Option<crate::types::CustomOrchestration>) -> Self {
        self.custom_orchestration = input;
        self
    }
    /// <p>Contains details of the custom orchestration configured for the agent.</p>
    pub fn get_custom_orchestration(&self) -> &::std::option::Option<crate::types::CustomOrchestration> {
        &self.custom_orchestration
    }
    /// <p>The number of seconds for which Amazon Bedrock keeps information about a user's conversation with the agent.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Bedrock deletes any data provided before the timeout.</p>
    pub fn idle_session_ttl_in_seconds(mut self, input: i32) -> Self {
        self.idle_session_ttl_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of seconds for which Amazon Bedrock keeps information about a user's conversation with the agent.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Bedrock deletes any data provided before the timeout.</p>
    pub fn set_idle_session_ttl_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.idle_session_ttl_in_seconds = input;
        self
    }
    /// <p>The number of seconds for which Amazon Bedrock keeps information about a user's conversation with the agent.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Bedrock deletes any data provided before the timeout.</p>
    pub fn get_idle_session_ttl_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.idle_session_ttl_in_seconds
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role with permissions to invoke API operations on the agent.</p>
    /// This field is required.
    pub fn agent_resource_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_resource_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role with permissions to invoke API operations on the agent.</p>
    pub fn set_agent_resource_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_resource_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role with permissions to invoke API operations on the agent.</p>
    pub fn get_agent_resource_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_resource_role_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key with which to encrypt the agent.</p>
    pub fn customer_encryption_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_encryption_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key with which to encrypt the agent.</p>
    pub fn set_customer_encryption_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_encryption_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key with which to encrypt the agent.</p>
    pub fn get_customer_encryption_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_encryption_key_arn
    }
    /// <p>Contains configurations to override prompts in different parts of an agent sequence. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html">Advanced prompts</a>.</p>
    pub fn prompt_override_configuration(mut self, input: crate::types::PromptOverrideConfiguration) -> Self {
        self.prompt_override_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains configurations to override prompts in different parts of an agent sequence. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html">Advanced prompts</a>.</p>
    pub fn set_prompt_override_configuration(mut self, input: ::std::option::Option<crate::types::PromptOverrideConfiguration>) -> Self {
        self.prompt_override_configuration = input;
        self
    }
    /// <p>Contains configurations to override prompts in different parts of an agent sequence. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html">Advanced prompts</a>.</p>
    pub fn get_prompt_override_configuration(&self) -> &::std::option::Option<crate::types::PromptOverrideConfiguration> {
        &self.prompt_override_configuration
    }
    /// <p>The unique Guardrail configuration assigned to the agent when it is updated.</p>
    pub fn guardrail_configuration(mut self, input: crate::types::GuardrailConfiguration) -> Self {
        self.guardrail_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The unique Guardrail configuration assigned to the agent when it is updated.</p>
    pub fn set_guardrail_configuration(mut self, input: ::std::option::Option<crate::types::GuardrailConfiguration>) -> Self {
        self.guardrail_configuration = input;
        self
    }
    /// <p>The unique Guardrail configuration assigned to the agent when it is updated.</p>
    pub fn get_guardrail_configuration(&self) -> &::std::option::Option<crate::types::GuardrailConfiguration> {
        &self.guardrail_configuration
    }
    /// <p>Specifies the new memory configuration for the agent.</p>
    pub fn memory_configuration(mut self, input: crate::types::MemoryConfiguration) -> Self {
        self.memory_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the new memory configuration for the agent.</p>
    pub fn set_memory_configuration(mut self, input: ::std::option::Option<crate::types::MemoryConfiguration>) -> Self {
        self.memory_configuration = input;
        self
    }
    /// <p>Specifies the new memory configuration for the agent.</p>
    pub fn get_memory_configuration(&self) -> &::std::option::Option<crate::types::MemoryConfiguration> {
        &self.memory_configuration
    }
    /// <p>The agent's collaboration role.</p>
    pub fn agent_collaboration(mut self, input: crate::types::AgentCollaboration) -> Self {
        self.agent_collaboration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The agent's collaboration role.</p>
    pub fn set_agent_collaboration(mut self, input: ::std::option::Option<crate::types::AgentCollaboration>) -> Self {
        self.agent_collaboration = input;
        self
    }
    /// <p>The agent's collaboration role.</p>
    pub fn get_agent_collaboration(&self) -> &::std::option::Option<crate::types::AgentCollaboration> {
        &self.agent_collaboration
    }
    /// Consumes the builder and constructs a [`UpdateAgentInput`](crate::operation::update_agent::UpdateAgentInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_agent::UpdateAgentInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_agent::UpdateAgentInput {
            agent_id: self.agent_id,
            agent_name: self.agent_name,
            instruction: self.instruction,
            foundation_model: self.foundation_model,
            description: self.description,
            orchestration_type: self.orchestration_type,
            custom_orchestration: self.custom_orchestration,
            idle_session_ttl_in_seconds: self.idle_session_ttl_in_seconds,
            agent_resource_role_arn: self.agent_resource_role_arn,
            customer_encryption_key_arn: self.customer_encryption_key_arn,
            prompt_override_configuration: self.prompt_override_configuration,
            guardrail_configuration: self.guardrail_configuration,
            memory_configuration: self.memory_configuration,
            agent_collaboration: self.agent_collaboration,
        })
    }
}
impl ::std::fmt::Debug for UpdateAgentInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAgentInputBuilder");
        formatter.field("agent_id", &self.agent_id);
        formatter.field("agent_name", &self.agent_name);
        formatter.field("instruction", &"*** Sensitive Data Redacted ***");
        formatter.field("foundation_model", &self.foundation_model);
        formatter.field("description", &self.description);
        formatter.field("orchestration_type", &self.orchestration_type);
        formatter.field("custom_orchestration", &self.custom_orchestration);
        formatter.field("idle_session_ttl_in_seconds", &self.idle_session_ttl_in_seconds);
        formatter.field("agent_resource_role_arn", &self.agent_resource_role_arn);
        formatter.field("customer_encryption_key_arn", &self.customer_encryption_key_arn);
        formatter.field("prompt_override_configuration", &"*** Sensitive Data Redacted ***");
        formatter.field("guardrail_configuration", &self.guardrail_configuration);
        formatter.field("memory_configuration", &self.memory_configuration);
        formatter.field("agent_collaboration", &self.agent_collaboration);
        formatter.finish()
    }
}
