// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetPromptOutput {
    /// <p>The name of the prompt.</p>
    pub name: ::std::string::String,
    /// <p>The descriptino of the prompt.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the KMS key that the prompt is encrypted with.</p>
    pub customer_encryption_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the default variant for the prompt. This value must match the <code>name</code> field in the relevant <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_PromptVariant.html">PromptVariant</a> object.</p>
    pub default_variant: ::std::option::Option<::std::string::String>,
    /// <p>A list of objects, each containing details about a variant of the prompt.</p>
    pub variants: ::std::option::Option<::std::vec::Vec<crate::types::PromptVariant>>,
    /// <p>The unique identifier of the prompt.</p>
    pub id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the prompt or the prompt version (if you specified a version in the request).</p>
    pub arn: ::std::string::String,
    /// <p>The version of the prompt.</p>
    pub version: ::std::string::String,
    /// <p>The time at which the prompt was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The time at which the prompt was last updated.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
    _request_id: Option<String>,
}
impl GetPromptOutput {
    /// <p>The name of the prompt.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The descriptino of the prompt.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key that the prompt is encrypted with.</p>
    pub fn customer_encryption_key_arn(&self) -> ::std::option::Option<&str> {
        self.customer_encryption_key_arn.as_deref()
    }
    /// <p>The name of the default variant for the prompt. This value must match the <code>name</code> field in the relevant <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_PromptVariant.html">PromptVariant</a> object.</p>
    pub fn default_variant(&self) -> ::std::option::Option<&str> {
        self.default_variant.as_deref()
    }
    /// <p>A list of objects, each containing details about a variant of the prompt.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.variants.is_none()`.
    pub fn variants(&self) -> &[crate::types::PromptVariant] {
        self.variants.as_deref().unwrap_or_default()
    }
    /// <p>The unique identifier of the prompt.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the prompt or the prompt version (if you specified a version in the request).</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The version of the prompt.</p>
    pub fn version(&self) -> &str {
        use std::ops::Deref;
        self.version.deref()
    }
    /// <p>The time at which the prompt was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The time at which the prompt was last updated.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
}
impl ::std::fmt::Debug for GetPromptOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetPromptOutput");
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("customer_encryption_key_arn", &self.customer_encryption_key_arn);
        formatter.field("default_variant", &self.default_variant);
        formatter.field("variants", &"*** Sensitive Data Redacted ***");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("version", &self.version);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetPromptOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPromptOutput {
    /// Creates a new builder-style object to manufacture [`GetPromptOutput`](crate::operation::get_prompt::GetPromptOutput).
    pub fn builder() -> crate::operation::get_prompt::builders::GetPromptOutputBuilder {
        crate::operation::get_prompt::builders::GetPromptOutputBuilder::default()
    }
}

/// A builder for [`GetPromptOutput`](crate::operation::get_prompt::GetPromptOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetPromptOutputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) customer_encryption_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) default_variant: ::std::option::Option<::std::string::String>,
    pub(crate) variants: ::std::option::Option<::std::vec::Vec<crate::types::PromptVariant>>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetPromptOutputBuilder {
    /// <p>The name of the prompt.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the prompt.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the prompt.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The descriptino of the prompt.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The descriptino of the prompt.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The descriptino of the prompt.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key that the prompt is encrypted with.</p>
    pub fn customer_encryption_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_encryption_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key that the prompt is encrypted with.</p>
    pub fn set_customer_encryption_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_encryption_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key that the prompt is encrypted with.</p>
    pub fn get_customer_encryption_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_encryption_key_arn
    }
    /// <p>The name of the default variant for the prompt. This value must match the <code>name</code> field in the relevant <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_PromptVariant.html">PromptVariant</a> object.</p>
    pub fn default_variant(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_variant = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the default variant for the prompt. This value must match the <code>name</code> field in the relevant <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_PromptVariant.html">PromptVariant</a> object.</p>
    pub fn set_default_variant(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_variant = input;
        self
    }
    /// <p>The name of the default variant for the prompt. This value must match the <code>name</code> field in the relevant <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_PromptVariant.html">PromptVariant</a> object.</p>
    pub fn get_default_variant(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_variant
    }
    /// Appends an item to `variants`.
    ///
    /// To override the contents of this collection use [`set_variants`](Self::set_variants).
    ///
    /// <p>A list of objects, each containing details about a variant of the prompt.</p>
    pub fn variants(mut self, input: crate::types::PromptVariant) -> Self {
        let mut v = self.variants.unwrap_or_default();
        v.push(input);
        self.variants = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of objects, each containing details about a variant of the prompt.</p>
    pub fn set_variants(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PromptVariant>>) -> Self {
        self.variants = input;
        self
    }
    /// <p>A list of objects, each containing details about a variant of the prompt.</p>
    pub fn get_variants(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PromptVariant>> {
        &self.variants
    }
    /// <p>The unique identifier of the prompt.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the prompt.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the prompt.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The Amazon Resource Name (ARN) of the prompt or the prompt version (if you specified a version in the request).</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the prompt or the prompt version (if you specified a version in the request).</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the prompt or the prompt version (if you specified a version in the request).</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The version of the prompt.</p>
    /// This field is required.
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the prompt.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version of the prompt.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>The time at which the prompt was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the prompt was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time at which the prompt was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The time at which the prompt was last updated.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the prompt was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The time at which the prompt was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetPromptOutput`](crate::operation::get_prompt::GetPromptOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::operation::get_prompt::builders::GetPromptOutputBuilder::name)
    /// - [`id`](crate::operation::get_prompt::builders::GetPromptOutputBuilder::id)
    /// - [`arn`](crate::operation::get_prompt::builders::GetPromptOutputBuilder::arn)
    /// - [`version`](crate::operation::get_prompt::builders::GetPromptOutputBuilder::version)
    /// - [`created_at`](crate::operation::get_prompt::builders::GetPromptOutputBuilder::created_at)
    /// - [`updated_at`](crate::operation::get_prompt::builders::GetPromptOutputBuilder::updated_at)
    pub fn build(self) -> ::std::result::Result<crate::operation::get_prompt::GetPromptOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_prompt::GetPromptOutput {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GetPromptOutput",
                )
            })?,
            description: self.description,
            customer_encryption_key_arn: self.customer_encryption_key_arn,
            default_variant: self.default_variant,
            variants: self.variants,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building GetPromptOutput",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building GetPromptOutput",
                )
            })?,
            version: self.version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "version",
                    "version was not specified but it is required when building GetPromptOutput",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building GetPromptOutput",
                )
            })?,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building GetPromptOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetPromptOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetPromptOutputBuilder");
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("customer_encryption_key_arn", &self.customer_encryption_key_arn);
        formatter.field("default_variant", &self.default_variant);
        formatter.field("variants", &"*** Sensitive Data Redacted ***");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("version", &self.version);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
