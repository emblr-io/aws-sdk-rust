// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateAgentKnowledgeBaseInput {
    /// <p>The unique identifier of the agent associated with the knowledge base that you want to update.</p>
    pub agent_id: ::std::option::Option<::std::string::String>,
    /// <p>The version of the agent associated with the knowledge base that you want to update.</p>
    pub agent_version: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the knowledge base that has been associated with an agent.</p>
    pub knowledge_base_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies a new description for the knowledge base associated with an agent.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the agent uses the knowledge base or not when sending an <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html">InvokeAgent</a> request.</p>
    pub knowledge_base_state: ::std::option::Option<crate::types::KnowledgeBaseState>,
}
impl UpdateAgentKnowledgeBaseInput {
    /// <p>The unique identifier of the agent associated with the knowledge base that you want to update.</p>
    pub fn agent_id(&self) -> ::std::option::Option<&str> {
        self.agent_id.as_deref()
    }
    /// <p>The version of the agent associated with the knowledge base that you want to update.</p>
    pub fn agent_version(&self) -> ::std::option::Option<&str> {
        self.agent_version.as_deref()
    }
    /// <p>The unique identifier of the knowledge base that has been associated with an agent.</p>
    pub fn knowledge_base_id(&self) -> ::std::option::Option<&str> {
        self.knowledge_base_id.as_deref()
    }
    /// <p>Specifies a new description for the knowledge base associated with an agent.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Specifies whether the agent uses the knowledge base or not when sending an <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html">InvokeAgent</a> request.</p>
    pub fn knowledge_base_state(&self) -> ::std::option::Option<&crate::types::KnowledgeBaseState> {
        self.knowledge_base_state.as_ref()
    }
}
impl UpdateAgentKnowledgeBaseInput {
    /// Creates a new builder-style object to manufacture [`UpdateAgentKnowledgeBaseInput`](crate::operation::update_agent_knowledge_base::UpdateAgentKnowledgeBaseInput).
    pub fn builder() -> crate::operation::update_agent_knowledge_base::builders::UpdateAgentKnowledgeBaseInputBuilder {
        crate::operation::update_agent_knowledge_base::builders::UpdateAgentKnowledgeBaseInputBuilder::default()
    }
}

/// A builder for [`UpdateAgentKnowledgeBaseInput`](crate::operation::update_agent_knowledge_base::UpdateAgentKnowledgeBaseInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateAgentKnowledgeBaseInputBuilder {
    pub(crate) agent_id: ::std::option::Option<::std::string::String>,
    pub(crate) agent_version: ::std::option::Option<::std::string::String>,
    pub(crate) knowledge_base_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) knowledge_base_state: ::std::option::Option<crate::types::KnowledgeBaseState>,
}
impl UpdateAgentKnowledgeBaseInputBuilder {
    /// <p>The unique identifier of the agent associated with the knowledge base that you want to update.</p>
    /// This field is required.
    pub fn agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the agent associated with the knowledge base that you want to update.</p>
    pub fn set_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_id = input;
        self
    }
    /// <p>The unique identifier of the agent associated with the knowledge base that you want to update.</p>
    pub fn get_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_id
    }
    /// <p>The version of the agent associated with the knowledge base that you want to update.</p>
    /// This field is required.
    pub fn agent_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the agent associated with the knowledge base that you want to update.</p>
    pub fn set_agent_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_version = input;
        self
    }
    /// <p>The version of the agent associated with the knowledge base that you want to update.</p>
    pub fn get_agent_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_version
    }
    /// <p>The unique identifier of the knowledge base that has been associated with an agent.</p>
    /// This field is required.
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the knowledge base that has been associated with an agent.</p>
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// <p>The unique identifier of the knowledge base that has been associated with an agent.</p>
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_id
    }
    /// <p>Specifies a new description for the knowledge base associated with an agent.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a new description for the knowledge base associated with an agent.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Specifies a new description for the knowledge base associated with an agent.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Specifies whether the agent uses the knowledge base or not when sending an <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html">InvokeAgent</a> request.</p>
    pub fn knowledge_base_state(mut self, input: crate::types::KnowledgeBaseState) -> Self {
        self.knowledge_base_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the agent uses the knowledge base or not when sending an <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html">InvokeAgent</a> request.</p>
    pub fn set_knowledge_base_state(mut self, input: ::std::option::Option<crate::types::KnowledgeBaseState>) -> Self {
        self.knowledge_base_state = input;
        self
    }
    /// <p>Specifies whether the agent uses the knowledge base or not when sending an <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html">InvokeAgent</a> request.</p>
    pub fn get_knowledge_base_state(&self) -> &::std::option::Option<crate::types::KnowledgeBaseState> {
        &self.knowledge_base_state
    }
    /// Consumes the builder and constructs a [`UpdateAgentKnowledgeBaseInput`](crate::operation::update_agent_knowledge_base::UpdateAgentKnowledgeBaseInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_agent_knowledge_base::UpdateAgentKnowledgeBaseInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_agent_knowledge_base::UpdateAgentKnowledgeBaseInput {
            agent_id: self.agent_id,
            agent_version: self.agent_version,
            knowledge_base_id: self.knowledge_base_id,
            description: self.description,
            knowledge_base_state: self.knowledge_base_state,
        })
    }
}
