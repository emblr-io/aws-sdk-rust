// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteFlowVersionInput {
    /// <p>The unique identifier of the flow whose version that you want to delete</p>
    pub flow_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The version of the flow that you want to delete.</p>
    pub flow_version: ::std::option::Option<::std::string::String>,
    /// <p>By default, this value is <code>false</code> and deletion is stopped if the resource is in use. If you set it to <code>true</code>, the resource will be deleted even if the resource is in use.</p>
    pub skip_resource_in_use_check: ::std::option::Option<bool>,
}
impl DeleteFlowVersionInput {
    /// <p>The unique identifier of the flow whose version that you want to delete</p>
    pub fn flow_identifier(&self) -> ::std::option::Option<&str> {
        self.flow_identifier.as_deref()
    }
    /// <p>The version of the flow that you want to delete.</p>
    pub fn flow_version(&self) -> ::std::option::Option<&str> {
        self.flow_version.as_deref()
    }
    /// <p>By default, this value is <code>false</code> and deletion is stopped if the resource is in use. If you set it to <code>true</code>, the resource will be deleted even if the resource is in use.</p>
    pub fn skip_resource_in_use_check(&self) -> ::std::option::Option<bool> {
        self.skip_resource_in_use_check
    }
}
impl DeleteFlowVersionInput {
    /// Creates a new builder-style object to manufacture [`DeleteFlowVersionInput`](crate::operation::delete_flow_version::DeleteFlowVersionInput).
    pub fn builder() -> crate::operation::delete_flow_version::builders::DeleteFlowVersionInputBuilder {
        crate::operation::delete_flow_version::builders::DeleteFlowVersionInputBuilder::default()
    }
}

/// A builder for [`DeleteFlowVersionInput`](crate::operation::delete_flow_version::DeleteFlowVersionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeleteFlowVersionInputBuilder {
    pub(crate) flow_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) flow_version: ::std::option::Option<::std::string::String>,
    pub(crate) skip_resource_in_use_check: ::std::option::Option<bool>,
}
impl DeleteFlowVersionInputBuilder {
    /// <p>The unique identifier of the flow whose version that you want to delete</p>
    /// This field is required.
    pub fn flow_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.flow_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the flow whose version that you want to delete</p>
    pub fn set_flow_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.flow_identifier = input;
        self
    }
    /// <p>The unique identifier of the flow whose version that you want to delete</p>
    pub fn get_flow_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.flow_identifier
    }
    /// <p>The version of the flow that you want to delete.</p>
    /// This field is required.
    pub fn flow_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.flow_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the flow that you want to delete.</p>
    pub fn set_flow_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.flow_version = input;
        self
    }
    /// <p>The version of the flow that you want to delete.</p>
    pub fn get_flow_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.flow_version
    }
    /// <p>By default, this value is <code>false</code> and deletion is stopped if the resource is in use. If you set it to <code>true</code>, the resource will be deleted even if the resource is in use.</p>
    pub fn skip_resource_in_use_check(mut self, input: bool) -> Self {
        self.skip_resource_in_use_check = ::std::option::Option::Some(input);
        self
    }
    /// <p>By default, this value is <code>false</code> and deletion is stopped if the resource is in use. If you set it to <code>true</code>, the resource will be deleted even if the resource is in use.</p>
    pub fn set_skip_resource_in_use_check(mut self, input: ::std::option::Option<bool>) -> Self {
        self.skip_resource_in_use_check = input;
        self
    }
    /// <p>By default, this value is <code>false</code> and deletion is stopped if the resource is in use. If you set it to <code>true</code>, the resource will be deleted even if the resource is in use.</p>
    pub fn get_skip_resource_in_use_check(&self) -> &::std::option::Option<bool> {
        &self.skip_resource_in_use_check
    }
    /// Consumes the builder and constructs a [`DeleteFlowVersionInput`](crate::operation::delete_flow_version::DeleteFlowVersionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::delete_flow_version::DeleteFlowVersionInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::delete_flow_version::DeleteFlowVersionInput {
            flow_identifier: self.flow_identifier,
            flow_version: self.flow_version,
            skip_resource_in_use_check: self.skip_resource_in_use_check,
        })
    }
}
