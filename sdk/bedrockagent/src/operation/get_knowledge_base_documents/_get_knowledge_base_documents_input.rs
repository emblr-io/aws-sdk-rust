// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetKnowledgeBaseDocumentsInput {
    /// <p>The unique identifier of the knowledge base that is connected to the data source.</p>
    pub knowledge_base_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the data source that contains the documents.</p>
    pub data_source_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of objects, each of which contains information to identify a document for which to retrieve information.</p>
    pub document_identifiers: ::std::option::Option<::std::vec::Vec<crate::types::DocumentIdentifier>>,
}
impl GetKnowledgeBaseDocumentsInput {
    /// <p>The unique identifier of the knowledge base that is connected to the data source.</p>
    pub fn knowledge_base_id(&self) -> ::std::option::Option<&str> {
        self.knowledge_base_id.as_deref()
    }
    /// <p>The unique identifier of the data source that contains the documents.</p>
    pub fn data_source_id(&self) -> ::std::option::Option<&str> {
        self.data_source_id.as_deref()
    }
    /// <p>A list of objects, each of which contains information to identify a document for which to retrieve information.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.document_identifiers.is_none()`.
    pub fn document_identifiers(&self) -> &[crate::types::DocumentIdentifier] {
        self.document_identifiers.as_deref().unwrap_or_default()
    }
}
impl GetKnowledgeBaseDocumentsInput {
    /// Creates a new builder-style object to manufacture [`GetKnowledgeBaseDocumentsInput`](crate::operation::get_knowledge_base_documents::GetKnowledgeBaseDocumentsInput).
    pub fn builder() -> crate::operation::get_knowledge_base_documents::builders::GetKnowledgeBaseDocumentsInputBuilder {
        crate::operation::get_knowledge_base_documents::builders::GetKnowledgeBaseDocumentsInputBuilder::default()
    }
}

/// A builder for [`GetKnowledgeBaseDocumentsInput`](crate::operation::get_knowledge_base_documents::GetKnowledgeBaseDocumentsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetKnowledgeBaseDocumentsInputBuilder {
    pub(crate) knowledge_base_id: ::std::option::Option<::std::string::String>,
    pub(crate) data_source_id: ::std::option::Option<::std::string::String>,
    pub(crate) document_identifiers: ::std::option::Option<::std::vec::Vec<crate::types::DocumentIdentifier>>,
}
impl GetKnowledgeBaseDocumentsInputBuilder {
    /// <p>The unique identifier of the knowledge base that is connected to the data source.</p>
    /// This field is required.
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the knowledge base that is connected to the data source.</p>
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// <p>The unique identifier of the knowledge base that is connected to the data source.</p>
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_id
    }
    /// <p>The unique identifier of the data source that contains the documents.</p>
    /// This field is required.
    pub fn data_source_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_source_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the data source that contains the documents.</p>
    pub fn set_data_source_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_source_id = input;
        self
    }
    /// <p>The unique identifier of the data source that contains the documents.</p>
    pub fn get_data_source_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_source_id
    }
    /// Appends an item to `document_identifiers`.
    ///
    /// To override the contents of this collection use [`set_document_identifiers`](Self::set_document_identifiers).
    ///
    /// <p>A list of objects, each of which contains information to identify a document for which to retrieve information.</p>
    pub fn document_identifiers(mut self, input: crate::types::DocumentIdentifier) -> Self {
        let mut v = self.document_identifiers.unwrap_or_default();
        v.push(input);
        self.document_identifiers = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of objects, each of which contains information to identify a document for which to retrieve information.</p>
    pub fn set_document_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DocumentIdentifier>>) -> Self {
        self.document_identifiers = input;
        self
    }
    /// <p>A list of objects, each of which contains information to identify a document for which to retrieve information.</p>
    pub fn get_document_identifiers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DocumentIdentifier>> {
        &self.document_identifiers
    }
    /// Consumes the builder and constructs a [`GetKnowledgeBaseDocumentsInput`](crate::operation::get_knowledge_base_documents::GetKnowledgeBaseDocumentsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_knowledge_base_documents::GetKnowledgeBaseDocumentsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_knowledge_base_documents::GetKnowledgeBaseDocumentsInput {
            knowledge_base_id: self.knowledge_base_id,
            data_source_id: self.data_source_id,
            document_identifiers: self.document_identifiers,
        })
    }
}
