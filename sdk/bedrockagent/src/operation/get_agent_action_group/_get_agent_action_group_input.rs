// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetAgentActionGroupInput {
    /// <p>The unique identifier of the agent that the action group belongs to.</p>
    pub agent_id: ::std::option::Option<::std::string::String>,
    /// <p>The version of the agent that the action group belongs to.</p>
    pub agent_version: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the action group for which to get information.</p>
    pub action_group_id: ::std::option::Option<::std::string::String>,
}
impl GetAgentActionGroupInput {
    /// <p>The unique identifier of the agent that the action group belongs to.</p>
    pub fn agent_id(&self) -> ::std::option::Option<&str> {
        self.agent_id.as_deref()
    }
    /// <p>The version of the agent that the action group belongs to.</p>
    pub fn agent_version(&self) -> ::std::option::Option<&str> {
        self.agent_version.as_deref()
    }
    /// <p>The unique identifier of the action group for which to get information.</p>
    pub fn action_group_id(&self) -> ::std::option::Option<&str> {
        self.action_group_id.as_deref()
    }
}
impl GetAgentActionGroupInput {
    /// Creates a new builder-style object to manufacture [`GetAgentActionGroupInput`](crate::operation::get_agent_action_group::GetAgentActionGroupInput).
    pub fn builder() -> crate::operation::get_agent_action_group::builders::GetAgentActionGroupInputBuilder {
        crate::operation::get_agent_action_group::builders::GetAgentActionGroupInputBuilder::default()
    }
}

/// A builder for [`GetAgentActionGroupInput`](crate::operation::get_agent_action_group::GetAgentActionGroupInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetAgentActionGroupInputBuilder {
    pub(crate) agent_id: ::std::option::Option<::std::string::String>,
    pub(crate) agent_version: ::std::option::Option<::std::string::String>,
    pub(crate) action_group_id: ::std::option::Option<::std::string::String>,
}
impl GetAgentActionGroupInputBuilder {
    /// <p>The unique identifier of the agent that the action group belongs to.</p>
    /// This field is required.
    pub fn agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the agent that the action group belongs to.</p>
    pub fn set_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_id = input;
        self
    }
    /// <p>The unique identifier of the agent that the action group belongs to.</p>
    pub fn get_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_id
    }
    /// <p>The version of the agent that the action group belongs to.</p>
    /// This field is required.
    pub fn agent_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the agent that the action group belongs to.</p>
    pub fn set_agent_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_version = input;
        self
    }
    /// <p>The version of the agent that the action group belongs to.</p>
    pub fn get_agent_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_version
    }
    /// <p>The unique identifier of the action group for which to get information.</p>
    /// This field is required.
    pub fn action_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the action group for which to get information.</p>
    pub fn set_action_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_group_id = input;
        self
    }
    /// <p>The unique identifier of the action group for which to get information.</p>
    pub fn get_action_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_group_id
    }
    /// Consumes the builder and constructs a [`GetAgentActionGroupInput`](crate::operation::get_agent_action_group::GetAgentActionGroupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_agent_action_group::GetAgentActionGroupInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_agent_action_group::GetAgentActionGroupInput {
            agent_id: self.agent_id,
            agent_version: self.agent_version,
            action_group_id: self.action_group_id,
        })
    }
}
