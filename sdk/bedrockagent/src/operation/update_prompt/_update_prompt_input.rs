// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdatePromptInput {
    /// <p>A name for the prompt.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description for the prompt.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the KMS key to encrypt the prompt.</p>
    pub customer_encryption_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the default variant for the prompt. This value must match the <code>name</code> field in the relevant <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_PromptVariant.html">PromptVariant</a> object.</p>
    pub default_variant: ::std::option::Option<::std::string::String>,
    /// <p>A list of objects, each containing details about a variant of the prompt.</p>
    pub variants: ::std::option::Option<::std::vec::Vec<crate::types::PromptVariant>>,
    /// <p>The unique identifier of the prompt.</p>
    pub prompt_identifier: ::std::option::Option<::std::string::String>,
}
impl UpdatePromptInput {
    /// <p>A name for the prompt.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description for the prompt.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key to encrypt the prompt.</p>
    pub fn customer_encryption_key_arn(&self) -> ::std::option::Option<&str> {
        self.customer_encryption_key_arn.as_deref()
    }
    /// <p>The name of the default variant for the prompt. This value must match the <code>name</code> field in the relevant <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_PromptVariant.html">PromptVariant</a> object.</p>
    pub fn default_variant(&self) -> ::std::option::Option<&str> {
        self.default_variant.as_deref()
    }
    /// <p>A list of objects, each containing details about a variant of the prompt.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.variants.is_none()`.
    pub fn variants(&self) -> &[crate::types::PromptVariant] {
        self.variants.as_deref().unwrap_or_default()
    }
    /// <p>The unique identifier of the prompt.</p>
    pub fn prompt_identifier(&self) -> ::std::option::Option<&str> {
        self.prompt_identifier.as_deref()
    }
}
impl ::std::fmt::Debug for UpdatePromptInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdatePromptInput");
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("customer_encryption_key_arn", &self.customer_encryption_key_arn);
        formatter.field("default_variant", &self.default_variant);
        formatter.field("variants", &"*** Sensitive Data Redacted ***");
        formatter.field("prompt_identifier", &self.prompt_identifier);
        formatter.finish()
    }
}
impl UpdatePromptInput {
    /// Creates a new builder-style object to manufacture [`UpdatePromptInput`](crate::operation::update_prompt::UpdatePromptInput).
    pub fn builder() -> crate::operation::update_prompt::builders::UpdatePromptInputBuilder {
        crate::operation::update_prompt::builders::UpdatePromptInputBuilder::default()
    }
}

/// A builder for [`UpdatePromptInput`](crate::operation::update_prompt::UpdatePromptInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdatePromptInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) customer_encryption_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) default_variant: ::std::option::Option<::std::string::String>,
    pub(crate) variants: ::std::option::Option<::std::vec::Vec<crate::types::PromptVariant>>,
    pub(crate) prompt_identifier: ::std::option::Option<::std::string::String>,
}
impl UpdatePromptInputBuilder {
    /// <p>A name for the prompt.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the prompt.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name for the prompt.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description for the prompt.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description for the prompt.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description for the prompt.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key to encrypt the prompt.</p>
    pub fn customer_encryption_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_encryption_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key to encrypt the prompt.</p>
    pub fn set_customer_encryption_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_encryption_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key to encrypt the prompt.</p>
    pub fn get_customer_encryption_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_encryption_key_arn
    }
    /// <p>The name of the default variant for the prompt. This value must match the <code>name</code> field in the relevant <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_PromptVariant.html">PromptVariant</a> object.</p>
    pub fn default_variant(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_variant = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the default variant for the prompt. This value must match the <code>name</code> field in the relevant <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_PromptVariant.html">PromptVariant</a> object.</p>
    pub fn set_default_variant(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_variant = input;
        self
    }
    /// <p>The name of the default variant for the prompt. This value must match the <code>name</code> field in the relevant <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_PromptVariant.html">PromptVariant</a> object.</p>
    pub fn get_default_variant(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_variant
    }
    /// Appends an item to `variants`.
    ///
    /// To override the contents of this collection use [`set_variants`](Self::set_variants).
    ///
    /// <p>A list of objects, each containing details about a variant of the prompt.</p>
    pub fn variants(mut self, input: crate::types::PromptVariant) -> Self {
        let mut v = self.variants.unwrap_or_default();
        v.push(input);
        self.variants = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of objects, each containing details about a variant of the prompt.</p>
    pub fn set_variants(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PromptVariant>>) -> Self {
        self.variants = input;
        self
    }
    /// <p>A list of objects, each containing details about a variant of the prompt.</p>
    pub fn get_variants(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PromptVariant>> {
        &self.variants
    }
    /// <p>The unique identifier of the prompt.</p>
    /// This field is required.
    pub fn prompt_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prompt_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the prompt.</p>
    pub fn set_prompt_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prompt_identifier = input;
        self
    }
    /// <p>The unique identifier of the prompt.</p>
    pub fn get_prompt_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.prompt_identifier
    }
    /// Consumes the builder and constructs a [`UpdatePromptInput`](crate::operation::update_prompt::UpdatePromptInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_prompt::UpdatePromptInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_prompt::UpdatePromptInput {
            name: self.name,
            description: self.description,
            customer_encryption_key_arn: self.customer_encryption_key_arn,
            default_variant: self.default_variant,
            variants: self.variants,
            prompt_identifier: self.prompt_identifier,
        })
    }
}
impl ::std::fmt::Debug for UpdatePromptInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdatePromptInputBuilder");
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("customer_encryption_key_arn", &self.customer_encryption_key_arn);
        formatter.field("default_variant", &self.default_variant);
        formatter.field("variants", &"*** Sensitive Data Redacted ***");
        formatter.field("prompt_identifier", &self.prompt_identifier);
        formatter.finish()
    }
}
