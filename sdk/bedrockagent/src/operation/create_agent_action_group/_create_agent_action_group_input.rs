// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateAgentActionGroupInput {
    /// <p>The unique identifier of the agent for which to create the action group.</p>
    pub agent_id: ::std::option::Option<::std::string::String>,
    /// <p>The version of the agent for which to create the action group.</p>
    pub agent_version: ::std::option::Option<::std::string::String>,
    /// <p>The name to give the action group.</p>
    pub action_group_name: ::std::option::Option<::std::string::String>,
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>A description of the action group.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Specify a built-in or computer use action for this action group. If you specify a value, you must leave the <code>description</code>, <code>apiSchema</code>, and <code>actionGroupExecutor</code> fields empty for this action group.</p>
    /// <ul>
    /// <li>
    /// <p>To allow your agent to request the user for additional information when trying to complete a task, set this field to <code>AMAZON.UserInput</code>.</p></li>
    /// <li>
    /// <p>To allow your agent to generate, run, and troubleshoot code when trying to complete a task, set this field to <code>AMAZON.CodeInterpreter</code>.</p></li>
    /// <li>
    /// <p>To allow your agent to use an Anthropic computer use tool, specify one of the following values.</p><important>
    /// <p>Computer use is a new Anthropic Claude model capability (in beta) available with Anthropic Claude 3.7 Sonnet and Claude 3.5 Sonnet v2 only. When operating computer use functionality, we recommend taking additional security precautions, such as executing computer actions in virtual environments with restricted data access and limited internet connectivity. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-computer-use.html">Configure an Amazon Bedrock Agent to complete tasks with computer use tools</a>.</p>
    /// </important>
    /// <ul>
    /// <li>
    /// <p><code>ANTHROPIC.Computer</code> - Gives the agent permission to use the mouse and keyboard and take screenshots.</p></li>
    /// <li>
    /// <p><code>ANTHROPIC.TextEditor</code> - Gives the agent permission to view, create and edit files.</p></li>
    /// <li>
    /// <p><code>ANTHROPIC.Bash</code> - Gives the agent permission to run commands in a bash shell.</p></li>
    /// </ul></li>
    /// </ul>
    pub parent_action_group_signature: ::std::option::Option<crate::types::ActionGroupSignature>,
    /// <p>The configuration settings for a computer use action.</p><important>
    /// <p>Computer use is a new Anthropic Claude model capability (in beta) available with Anthropic Claude 3.7 Sonnet and Claude 3.5 Sonnet v2 only. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-computer-use.html">Configure an Amazon Bedrock Agent to complete tasks with computer use tools</a>.</p>
    /// </important>
    pub parent_action_group_signature_params: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The Amazon Resource Name (ARN) of the Lambda function containing the business logic that is carried out upon invoking the action or the custom control method for handling the information elicited from the user.</p>
    pub action_group_executor: ::std::option::Option<crate::types::ActionGroupExecutor>,
    /// <p>Contains either details about the S3 object containing the OpenAPI schema for the action group or the JSON or YAML-formatted payload defining the schema. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-api-schema.html">Action group OpenAPI schemas</a>.</p>
    pub api_schema: ::std::option::Option<crate::types::ApiSchema>,
    /// <p>Specifies whether the action group is available for the agent to invoke or not when sending an <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html">InvokeAgent</a> request.</p>
    pub action_group_state: ::std::option::Option<crate::types::ActionGroupState>,
    /// <p>Contains details about the function schema for the action group or the JSON or YAML-formatted payload defining the schema.</p>
    pub function_schema: ::std::option::Option<crate::types::FunctionSchema>,
}
impl CreateAgentActionGroupInput {
    /// <p>The unique identifier of the agent for which to create the action group.</p>
    pub fn agent_id(&self) -> ::std::option::Option<&str> {
        self.agent_id.as_deref()
    }
    /// <p>The version of the agent for which to create the action group.</p>
    pub fn agent_version(&self) -> ::std::option::Option<&str> {
        self.agent_version.as_deref()
    }
    /// <p>The name to give the action group.</p>
    pub fn action_group_name(&self) -> ::std::option::Option<&str> {
        self.action_group_name.as_deref()
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>A description of the action group.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Specify a built-in or computer use action for this action group. If you specify a value, you must leave the <code>description</code>, <code>apiSchema</code>, and <code>actionGroupExecutor</code> fields empty for this action group.</p>
    /// <ul>
    /// <li>
    /// <p>To allow your agent to request the user for additional information when trying to complete a task, set this field to <code>AMAZON.UserInput</code>.</p></li>
    /// <li>
    /// <p>To allow your agent to generate, run, and troubleshoot code when trying to complete a task, set this field to <code>AMAZON.CodeInterpreter</code>.</p></li>
    /// <li>
    /// <p>To allow your agent to use an Anthropic computer use tool, specify one of the following values.</p><important>
    /// <p>Computer use is a new Anthropic Claude model capability (in beta) available with Anthropic Claude 3.7 Sonnet and Claude 3.5 Sonnet v2 only. When operating computer use functionality, we recommend taking additional security precautions, such as executing computer actions in virtual environments with restricted data access and limited internet connectivity. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-computer-use.html">Configure an Amazon Bedrock Agent to complete tasks with computer use tools</a>.</p>
    /// </important>
    /// <ul>
    /// <li>
    /// <p><code>ANTHROPIC.Computer</code> - Gives the agent permission to use the mouse and keyboard and take screenshots.</p></li>
    /// <li>
    /// <p><code>ANTHROPIC.TextEditor</code> - Gives the agent permission to view, create and edit files.</p></li>
    /// <li>
    /// <p><code>ANTHROPIC.Bash</code> - Gives the agent permission to run commands in a bash shell.</p></li>
    /// </ul></li>
    /// </ul>
    pub fn parent_action_group_signature(&self) -> ::std::option::Option<&crate::types::ActionGroupSignature> {
        self.parent_action_group_signature.as_ref()
    }
    /// <p>The configuration settings for a computer use action.</p><important>
    /// <p>Computer use is a new Anthropic Claude model capability (in beta) available with Anthropic Claude 3.7 Sonnet and Claude 3.5 Sonnet v2 only. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-computer-use.html">Configure an Amazon Bedrock Agent to complete tasks with computer use tools</a>.</p>
    /// </important>
    pub fn parent_action_group_signature_params(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.parent_action_group_signature_params.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Lambda function containing the business logic that is carried out upon invoking the action or the custom control method for handling the information elicited from the user.</p>
    pub fn action_group_executor(&self) -> ::std::option::Option<&crate::types::ActionGroupExecutor> {
        self.action_group_executor.as_ref()
    }
    /// <p>Contains either details about the S3 object containing the OpenAPI schema for the action group or the JSON or YAML-formatted payload defining the schema. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-api-schema.html">Action group OpenAPI schemas</a>.</p>
    pub fn api_schema(&self) -> ::std::option::Option<&crate::types::ApiSchema> {
        self.api_schema.as_ref()
    }
    /// <p>Specifies whether the action group is available for the agent to invoke or not when sending an <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html">InvokeAgent</a> request.</p>
    pub fn action_group_state(&self) -> ::std::option::Option<&crate::types::ActionGroupState> {
        self.action_group_state.as_ref()
    }
    /// <p>Contains details about the function schema for the action group or the JSON or YAML-formatted payload defining the schema.</p>
    pub fn function_schema(&self) -> ::std::option::Option<&crate::types::FunctionSchema> {
        self.function_schema.as_ref()
    }
}
impl CreateAgentActionGroupInput {
    /// Creates a new builder-style object to manufacture [`CreateAgentActionGroupInput`](crate::operation::create_agent_action_group::CreateAgentActionGroupInput).
    pub fn builder() -> crate::operation::create_agent_action_group::builders::CreateAgentActionGroupInputBuilder {
        crate::operation::create_agent_action_group::builders::CreateAgentActionGroupInputBuilder::default()
    }
}

/// A builder for [`CreateAgentActionGroupInput`](crate::operation::create_agent_action_group::CreateAgentActionGroupInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateAgentActionGroupInputBuilder {
    pub(crate) agent_id: ::std::option::Option<::std::string::String>,
    pub(crate) agent_version: ::std::option::Option<::std::string::String>,
    pub(crate) action_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) parent_action_group_signature: ::std::option::Option<crate::types::ActionGroupSignature>,
    pub(crate) parent_action_group_signature_params: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) action_group_executor: ::std::option::Option<crate::types::ActionGroupExecutor>,
    pub(crate) api_schema: ::std::option::Option<crate::types::ApiSchema>,
    pub(crate) action_group_state: ::std::option::Option<crate::types::ActionGroupState>,
    pub(crate) function_schema: ::std::option::Option<crate::types::FunctionSchema>,
}
impl CreateAgentActionGroupInputBuilder {
    /// <p>The unique identifier of the agent for which to create the action group.</p>
    /// This field is required.
    pub fn agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the agent for which to create the action group.</p>
    pub fn set_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_id = input;
        self
    }
    /// <p>The unique identifier of the agent for which to create the action group.</p>
    pub fn get_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_id
    }
    /// <p>The version of the agent for which to create the action group.</p>
    /// This field is required.
    pub fn agent_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the agent for which to create the action group.</p>
    pub fn set_agent_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_version = input;
        self
    }
    /// <p>The version of the agent for which to create the action group.</p>
    pub fn get_agent_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_version
    }
    /// <p>The name to give the action group.</p>
    /// This field is required.
    pub fn action_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name to give the action group.</p>
    pub fn set_action_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_group_name = input;
        self
    }
    /// <p>The name to give the action group.</p>
    pub fn get_action_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_group_name
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>A description of the action group.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the action group.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the action group.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Specify a built-in or computer use action for this action group. If you specify a value, you must leave the <code>description</code>, <code>apiSchema</code>, and <code>actionGroupExecutor</code> fields empty for this action group.</p>
    /// <ul>
    /// <li>
    /// <p>To allow your agent to request the user for additional information when trying to complete a task, set this field to <code>AMAZON.UserInput</code>.</p></li>
    /// <li>
    /// <p>To allow your agent to generate, run, and troubleshoot code when trying to complete a task, set this field to <code>AMAZON.CodeInterpreter</code>.</p></li>
    /// <li>
    /// <p>To allow your agent to use an Anthropic computer use tool, specify one of the following values.</p><important>
    /// <p>Computer use is a new Anthropic Claude model capability (in beta) available with Anthropic Claude 3.7 Sonnet and Claude 3.5 Sonnet v2 only. When operating computer use functionality, we recommend taking additional security precautions, such as executing computer actions in virtual environments with restricted data access and limited internet connectivity. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-computer-use.html">Configure an Amazon Bedrock Agent to complete tasks with computer use tools</a>.</p>
    /// </important>
    /// <ul>
    /// <li>
    /// <p><code>ANTHROPIC.Computer</code> - Gives the agent permission to use the mouse and keyboard and take screenshots.</p></li>
    /// <li>
    /// <p><code>ANTHROPIC.TextEditor</code> - Gives the agent permission to view, create and edit files.</p></li>
    /// <li>
    /// <p><code>ANTHROPIC.Bash</code> - Gives the agent permission to run commands in a bash shell.</p></li>
    /// </ul></li>
    /// </ul>
    pub fn parent_action_group_signature(mut self, input: crate::types::ActionGroupSignature) -> Self {
        self.parent_action_group_signature = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify a built-in or computer use action for this action group. If you specify a value, you must leave the <code>description</code>, <code>apiSchema</code>, and <code>actionGroupExecutor</code> fields empty for this action group.</p>
    /// <ul>
    /// <li>
    /// <p>To allow your agent to request the user for additional information when trying to complete a task, set this field to <code>AMAZON.UserInput</code>.</p></li>
    /// <li>
    /// <p>To allow your agent to generate, run, and troubleshoot code when trying to complete a task, set this field to <code>AMAZON.CodeInterpreter</code>.</p></li>
    /// <li>
    /// <p>To allow your agent to use an Anthropic computer use tool, specify one of the following values.</p><important>
    /// <p>Computer use is a new Anthropic Claude model capability (in beta) available with Anthropic Claude 3.7 Sonnet and Claude 3.5 Sonnet v2 only. When operating computer use functionality, we recommend taking additional security precautions, such as executing computer actions in virtual environments with restricted data access and limited internet connectivity. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-computer-use.html">Configure an Amazon Bedrock Agent to complete tasks with computer use tools</a>.</p>
    /// </important>
    /// <ul>
    /// <li>
    /// <p><code>ANTHROPIC.Computer</code> - Gives the agent permission to use the mouse and keyboard and take screenshots.</p></li>
    /// <li>
    /// <p><code>ANTHROPIC.TextEditor</code> - Gives the agent permission to view, create and edit files.</p></li>
    /// <li>
    /// <p><code>ANTHROPIC.Bash</code> - Gives the agent permission to run commands in a bash shell.</p></li>
    /// </ul></li>
    /// </ul>
    pub fn set_parent_action_group_signature(mut self, input: ::std::option::Option<crate::types::ActionGroupSignature>) -> Self {
        self.parent_action_group_signature = input;
        self
    }
    /// <p>Specify a built-in or computer use action for this action group. If you specify a value, you must leave the <code>description</code>, <code>apiSchema</code>, and <code>actionGroupExecutor</code> fields empty for this action group.</p>
    /// <ul>
    /// <li>
    /// <p>To allow your agent to request the user for additional information when trying to complete a task, set this field to <code>AMAZON.UserInput</code>.</p></li>
    /// <li>
    /// <p>To allow your agent to generate, run, and troubleshoot code when trying to complete a task, set this field to <code>AMAZON.CodeInterpreter</code>.</p></li>
    /// <li>
    /// <p>To allow your agent to use an Anthropic computer use tool, specify one of the following values.</p><important>
    /// <p>Computer use is a new Anthropic Claude model capability (in beta) available with Anthropic Claude 3.7 Sonnet and Claude 3.5 Sonnet v2 only. When operating computer use functionality, we recommend taking additional security precautions, such as executing computer actions in virtual environments with restricted data access and limited internet connectivity. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-computer-use.html">Configure an Amazon Bedrock Agent to complete tasks with computer use tools</a>.</p>
    /// </important>
    /// <ul>
    /// <li>
    /// <p><code>ANTHROPIC.Computer</code> - Gives the agent permission to use the mouse and keyboard and take screenshots.</p></li>
    /// <li>
    /// <p><code>ANTHROPIC.TextEditor</code> - Gives the agent permission to view, create and edit files.</p></li>
    /// <li>
    /// <p><code>ANTHROPIC.Bash</code> - Gives the agent permission to run commands in a bash shell.</p></li>
    /// </ul></li>
    /// </ul>
    pub fn get_parent_action_group_signature(&self) -> &::std::option::Option<crate::types::ActionGroupSignature> {
        &self.parent_action_group_signature
    }
    /// Adds a key-value pair to `parent_action_group_signature_params`.
    ///
    /// To override the contents of this collection use [`set_parent_action_group_signature_params`](Self::set_parent_action_group_signature_params).
    ///
    /// <p>The configuration settings for a computer use action.</p><important>
    /// <p>Computer use is a new Anthropic Claude model capability (in beta) available with Anthropic Claude 3.7 Sonnet and Claude 3.5 Sonnet v2 only. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-computer-use.html">Configure an Amazon Bedrock Agent to complete tasks with computer use tools</a>.</p>
    /// </important>
    pub fn parent_action_group_signature_params(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.parent_action_group_signature_params.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.parent_action_group_signature_params = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The configuration settings for a computer use action.</p><important>
    /// <p>Computer use is a new Anthropic Claude model capability (in beta) available with Anthropic Claude 3.7 Sonnet and Claude 3.5 Sonnet v2 only. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-computer-use.html">Configure an Amazon Bedrock Agent to complete tasks with computer use tools</a>.</p>
    /// </important>
    pub fn set_parent_action_group_signature_params(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.parent_action_group_signature_params = input;
        self
    }
    /// <p>The configuration settings for a computer use action.</p><important>
    /// <p>Computer use is a new Anthropic Claude model capability (in beta) available with Anthropic Claude 3.7 Sonnet and Claude 3.5 Sonnet v2 only. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-computer-use.html">Configure an Amazon Bedrock Agent to complete tasks with computer use tools</a>.</p>
    /// </important>
    pub fn get_parent_action_group_signature_params(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.parent_action_group_signature_params
    }
    /// <p>The Amazon Resource Name (ARN) of the Lambda function containing the business logic that is carried out upon invoking the action or the custom control method for handling the information elicited from the user.</p>
    pub fn action_group_executor(mut self, input: crate::types::ActionGroupExecutor) -> Self {
        self.action_group_executor = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Lambda function containing the business logic that is carried out upon invoking the action or the custom control method for handling the information elicited from the user.</p>
    pub fn set_action_group_executor(mut self, input: ::std::option::Option<crate::types::ActionGroupExecutor>) -> Self {
        self.action_group_executor = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Lambda function containing the business logic that is carried out upon invoking the action or the custom control method for handling the information elicited from the user.</p>
    pub fn get_action_group_executor(&self) -> &::std::option::Option<crate::types::ActionGroupExecutor> {
        &self.action_group_executor
    }
    /// <p>Contains either details about the S3 object containing the OpenAPI schema for the action group or the JSON or YAML-formatted payload defining the schema. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-api-schema.html">Action group OpenAPI schemas</a>.</p>
    pub fn api_schema(mut self, input: crate::types::ApiSchema) -> Self {
        self.api_schema = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains either details about the S3 object containing the OpenAPI schema for the action group or the JSON or YAML-formatted payload defining the schema. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-api-schema.html">Action group OpenAPI schemas</a>.</p>
    pub fn set_api_schema(mut self, input: ::std::option::Option<crate::types::ApiSchema>) -> Self {
        self.api_schema = input;
        self
    }
    /// <p>Contains either details about the S3 object containing the OpenAPI schema for the action group or the JSON or YAML-formatted payload defining the schema. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-api-schema.html">Action group OpenAPI schemas</a>.</p>
    pub fn get_api_schema(&self) -> &::std::option::Option<crate::types::ApiSchema> {
        &self.api_schema
    }
    /// <p>Specifies whether the action group is available for the agent to invoke or not when sending an <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html">InvokeAgent</a> request.</p>
    pub fn action_group_state(mut self, input: crate::types::ActionGroupState) -> Self {
        self.action_group_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the action group is available for the agent to invoke or not when sending an <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html">InvokeAgent</a> request.</p>
    pub fn set_action_group_state(mut self, input: ::std::option::Option<crate::types::ActionGroupState>) -> Self {
        self.action_group_state = input;
        self
    }
    /// <p>Specifies whether the action group is available for the agent to invoke or not when sending an <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html">InvokeAgent</a> request.</p>
    pub fn get_action_group_state(&self) -> &::std::option::Option<crate::types::ActionGroupState> {
        &self.action_group_state
    }
    /// <p>Contains details about the function schema for the action group or the JSON or YAML-formatted payload defining the schema.</p>
    pub fn function_schema(mut self, input: crate::types::FunctionSchema) -> Self {
        self.function_schema = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the function schema for the action group or the JSON or YAML-formatted payload defining the schema.</p>
    pub fn set_function_schema(mut self, input: ::std::option::Option<crate::types::FunctionSchema>) -> Self {
        self.function_schema = input;
        self
    }
    /// <p>Contains details about the function schema for the action group or the JSON or YAML-formatted payload defining the schema.</p>
    pub fn get_function_schema(&self) -> &::std::option::Option<crate::types::FunctionSchema> {
        &self.function_schema
    }
    /// Consumes the builder and constructs a [`CreateAgentActionGroupInput`](crate::operation::create_agent_action_group::CreateAgentActionGroupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_agent_action_group::CreateAgentActionGroupInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_agent_action_group::CreateAgentActionGroupInput {
            agent_id: self.agent_id,
            agent_version: self.agent_version,
            action_group_name: self.action_group_name,
            client_token: self.client_token,
            description: self.description,
            parent_action_group_signature: self.parent_action_group_signature,
            parent_action_group_signature_params: self.parent_action_group_signature_params,
            action_group_executor: self.action_group_executor,
            api_schema: self.api_schema,
            action_group_state: self.action_group_state,
            function_schema: self.function_schema,
        })
    }
}
