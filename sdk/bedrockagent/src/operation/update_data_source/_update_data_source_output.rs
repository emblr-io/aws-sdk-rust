// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateDataSourceOutput {
    /// <p>Contains details about the data source.</p>
    pub data_source: ::std::option::Option<crate::types::DataSource>,
    _request_id: Option<String>,
}
impl UpdateDataSourceOutput {
    /// <p>Contains details about the data source.</p>
    pub fn data_source(&self) -> ::std::option::Option<&crate::types::DataSource> {
        self.data_source.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for UpdateDataSourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateDataSourceOutput {
    /// Creates a new builder-style object to manufacture [`UpdateDataSourceOutput`](crate::operation::update_data_source::UpdateDataSourceOutput).
    pub fn builder() -> crate::operation::update_data_source::builders::UpdateDataSourceOutputBuilder {
        crate::operation::update_data_source::builders::UpdateDataSourceOutputBuilder::default()
    }
}

/// A builder for [`UpdateDataSourceOutput`](crate::operation::update_data_source::UpdateDataSourceOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateDataSourceOutputBuilder {
    pub(crate) data_source: ::std::option::Option<crate::types::DataSource>,
    _request_id: Option<String>,
}
impl UpdateDataSourceOutputBuilder {
    /// <p>Contains details about the data source.</p>
    /// This field is required.
    pub fn data_source(mut self, input: crate::types::DataSource) -> Self {
        self.data_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the data source.</p>
    pub fn set_data_source(mut self, input: ::std::option::Option<crate::types::DataSource>) -> Self {
        self.data_source = input;
        self
    }
    /// <p>Contains details about the data source.</p>
    pub fn get_data_source(&self) -> &::std::option::Option<crate::types::DataSource> {
        &self.data_source
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateDataSourceOutput`](crate::operation::update_data_source::UpdateDataSourceOutput).
    pub fn build(self) -> crate::operation::update_data_source::UpdateDataSourceOutput {
        crate::operation::update_data_source::UpdateDataSourceOutput {
            data_source: self.data_source,
            _request_id: self._request_id,
        }
    }
}
