// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateAgentCollaboratorInput {
    /// <p>The agent's ID.</p>
    pub agent_id: ::std::option::Option<::std::string::String>,
    /// <p>The agent's version.</p>
    pub agent_version: ::std::option::Option<::std::string::String>,
    /// <p>The collaborator's ID.</p>
    pub collaborator_id: ::std::option::Option<::std::string::String>,
    /// <p>An agent descriptor for the agent collaborator.</p>
    pub agent_descriptor: ::std::option::Option<crate::types::AgentDescriptor>,
    /// <p>The collaborator's name.</p>
    pub collaborator_name: ::std::option::Option<::std::string::String>,
    /// <p>Instruction for the collaborator.</p>
    pub collaboration_instruction: ::std::option::Option<::std::string::String>,
    /// <p>A relay conversation history for the collaborator.</p>
    pub relay_conversation_history: ::std::option::Option<crate::types::RelayConversationHistory>,
}
impl UpdateAgentCollaboratorInput {
    /// <p>The agent's ID.</p>
    pub fn agent_id(&self) -> ::std::option::Option<&str> {
        self.agent_id.as_deref()
    }
    /// <p>The agent's version.</p>
    pub fn agent_version(&self) -> ::std::option::Option<&str> {
        self.agent_version.as_deref()
    }
    /// <p>The collaborator's ID.</p>
    pub fn collaborator_id(&self) -> ::std::option::Option<&str> {
        self.collaborator_id.as_deref()
    }
    /// <p>An agent descriptor for the agent collaborator.</p>
    pub fn agent_descriptor(&self) -> ::std::option::Option<&crate::types::AgentDescriptor> {
        self.agent_descriptor.as_ref()
    }
    /// <p>The collaborator's name.</p>
    pub fn collaborator_name(&self) -> ::std::option::Option<&str> {
        self.collaborator_name.as_deref()
    }
    /// <p>Instruction for the collaborator.</p>
    pub fn collaboration_instruction(&self) -> ::std::option::Option<&str> {
        self.collaboration_instruction.as_deref()
    }
    /// <p>A relay conversation history for the collaborator.</p>
    pub fn relay_conversation_history(&self) -> ::std::option::Option<&crate::types::RelayConversationHistory> {
        self.relay_conversation_history.as_ref()
    }
}
impl ::std::fmt::Debug for UpdateAgentCollaboratorInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAgentCollaboratorInput");
        formatter.field("agent_id", &self.agent_id);
        formatter.field("agent_version", &self.agent_version);
        formatter.field("collaborator_id", &self.collaborator_id);
        formatter.field("agent_descriptor", &self.agent_descriptor);
        formatter.field("collaborator_name", &self.collaborator_name);
        formatter.field("collaboration_instruction", &"*** Sensitive Data Redacted ***");
        formatter.field("relay_conversation_history", &self.relay_conversation_history);
        formatter.finish()
    }
}
impl UpdateAgentCollaboratorInput {
    /// Creates a new builder-style object to manufacture [`UpdateAgentCollaboratorInput`](crate::operation::update_agent_collaborator::UpdateAgentCollaboratorInput).
    pub fn builder() -> crate::operation::update_agent_collaborator::builders::UpdateAgentCollaboratorInputBuilder {
        crate::operation::update_agent_collaborator::builders::UpdateAgentCollaboratorInputBuilder::default()
    }
}

/// A builder for [`UpdateAgentCollaboratorInput`](crate::operation::update_agent_collaborator::UpdateAgentCollaboratorInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateAgentCollaboratorInputBuilder {
    pub(crate) agent_id: ::std::option::Option<::std::string::String>,
    pub(crate) agent_version: ::std::option::Option<::std::string::String>,
    pub(crate) collaborator_id: ::std::option::Option<::std::string::String>,
    pub(crate) agent_descriptor: ::std::option::Option<crate::types::AgentDescriptor>,
    pub(crate) collaborator_name: ::std::option::Option<::std::string::String>,
    pub(crate) collaboration_instruction: ::std::option::Option<::std::string::String>,
    pub(crate) relay_conversation_history: ::std::option::Option<crate::types::RelayConversationHistory>,
}
impl UpdateAgentCollaboratorInputBuilder {
    /// <p>The agent's ID.</p>
    /// This field is required.
    pub fn agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The agent's ID.</p>
    pub fn set_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_id = input;
        self
    }
    /// <p>The agent's ID.</p>
    pub fn get_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_id
    }
    /// <p>The agent's version.</p>
    /// This field is required.
    pub fn agent_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The agent's version.</p>
    pub fn set_agent_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_version = input;
        self
    }
    /// <p>The agent's version.</p>
    pub fn get_agent_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_version
    }
    /// <p>The collaborator's ID.</p>
    /// This field is required.
    pub fn collaborator_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaborator_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The collaborator's ID.</p>
    pub fn set_collaborator_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaborator_id = input;
        self
    }
    /// <p>The collaborator's ID.</p>
    pub fn get_collaborator_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaborator_id
    }
    /// <p>An agent descriptor for the agent collaborator.</p>
    /// This field is required.
    pub fn agent_descriptor(mut self, input: crate::types::AgentDescriptor) -> Self {
        self.agent_descriptor = ::std::option::Option::Some(input);
        self
    }
    /// <p>An agent descriptor for the agent collaborator.</p>
    pub fn set_agent_descriptor(mut self, input: ::std::option::Option<crate::types::AgentDescriptor>) -> Self {
        self.agent_descriptor = input;
        self
    }
    /// <p>An agent descriptor for the agent collaborator.</p>
    pub fn get_agent_descriptor(&self) -> &::std::option::Option<crate::types::AgentDescriptor> {
        &self.agent_descriptor
    }
    /// <p>The collaborator's name.</p>
    /// This field is required.
    pub fn collaborator_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaborator_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The collaborator's name.</p>
    pub fn set_collaborator_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaborator_name = input;
        self
    }
    /// <p>The collaborator's name.</p>
    pub fn get_collaborator_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaborator_name
    }
    /// <p>Instruction for the collaborator.</p>
    /// This field is required.
    pub fn collaboration_instruction(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaboration_instruction = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Instruction for the collaborator.</p>
    pub fn set_collaboration_instruction(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaboration_instruction = input;
        self
    }
    /// <p>Instruction for the collaborator.</p>
    pub fn get_collaboration_instruction(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaboration_instruction
    }
    /// <p>A relay conversation history for the collaborator.</p>
    pub fn relay_conversation_history(mut self, input: crate::types::RelayConversationHistory) -> Self {
        self.relay_conversation_history = ::std::option::Option::Some(input);
        self
    }
    /// <p>A relay conversation history for the collaborator.</p>
    pub fn set_relay_conversation_history(mut self, input: ::std::option::Option<crate::types::RelayConversationHistory>) -> Self {
        self.relay_conversation_history = input;
        self
    }
    /// <p>A relay conversation history for the collaborator.</p>
    pub fn get_relay_conversation_history(&self) -> &::std::option::Option<crate::types::RelayConversationHistory> {
        &self.relay_conversation_history
    }
    /// Consumes the builder and constructs a [`UpdateAgentCollaboratorInput`](crate::operation::update_agent_collaborator::UpdateAgentCollaboratorInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_agent_collaborator::UpdateAgentCollaboratorInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_agent_collaborator::UpdateAgentCollaboratorInput {
            agent_id: self.agent_id,
            agent_version: self.agent_version,
            collaborator_id: self.collaborator_id,
            agent_descriptor: self.agent_descriptor,
            collaborator_name: self.collaborator_name,
            collaboration_instruction: self.collaboration_instruction,
            relay_conversation_history: self.relay_conversation_history,
        })
    }
}
impl ::std::fmt::Debug for UpdateAgentCollaboratorInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAgentCollaboratorInputBuilder");
        formatter.field("agent_id", &self.agent_id);
        formatter.field("agent_version", &self.agent_version);
        formatter.field("collaborator_id", &self.collaborator_id);
        formatter.field("agent_descriptor", &self.agent_descriptor);
        formatter.field("collaborator_name", &self.collaborator_name);
        formatter.field("collaboration_instruction", &"*** Sensitive Data Redacted ***");
        formatter.field("relay_conversation_history", &self.relay_conversation_history);
        formatter.finish()
    }
}
