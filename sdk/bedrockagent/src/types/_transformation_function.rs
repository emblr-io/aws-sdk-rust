// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A Lambda function that processes documents.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TransformationFunction {
    /// <p>The Lambda function.</p>
    pub transformation_lambda_configuration: ::std::option::Option<crate::types::TransformationLambdaConfiguration>,
}
impl TransformationFunction {
    /// <p>The Lambda function.</p>
    pub fn transformation_lambda_configuration(&self) -> ::std::option::Option<&crate::types::TransformationLambdaConfiguration> {
        self.transformation_lambda_configuration.as_ref()
    }
}
impl TransformationFunction {
    /// Creates a new builder-style object to manufacture [`TransformationFunction`](crate::types::TransformationFunction).
    pub fn builder() -> crate::types::builders::TransformationFunctionBuilder {
        crate::types::builders::TransformationFunctionBuilder::default()
    }
}

/// A builder for [`TransformationFunction`](crate::types::TransformationFunction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TransformationFunctionBuilder {
    pub(crate) transformation_lambda_configuration: ::std::option::Option<crate::types::TransformationLambdaConfiguration>,
}
impl TransformationFunctionBuilder {
    /// <p>The Lambda function.</p>
    /// This field is required.
    pub fn transformation_lambda_configuration(mut self, input: crate::types::TransformationLambdaConfiguration) -> Self {
        self.transformation_lambda_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Lambda function.</p>
    pub fn set_transformation_lambda_configuration(mut self, input: ::std::option::Option<crate::types::TransformationLambdaConfiguration>) -> Self {
        self.transformation_lambda_configuration = input;
        self
    }
    /// <p>The Lambda function.</p>
    pub fn get_transformation_lambda_configuration(&self) -> &::std::option::Option<crate::types::TransformationLambdaConfiguration> {
        &self.transformation_lambda_configuration
    }
    /// Consumes the builder and constructs a [`TransformationFunction`](crate::types::TransformationFunction).
    pub fn build(self) -> crate::types::TransformationFunction {
        crate::types::TransformationFunction {
            transformation_lambda_configuration: self.transformation_lambda_configuration,
        }
    }
}
