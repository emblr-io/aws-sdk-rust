// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition of the nodes and connections between nodes in the flow.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct FlowDefinition {
    /// <p>An array of node definitions in the flow.</p>
    pub nodes: ::std::option::Option<::std::vec::Vec<crate::types::FlowNode>>,
    /// <p>An array of connection definitions in the flow.</p>
    pub connections: ::std::option::Option<::std::vec::Vec<crate::types::FlowConnection>>,
}
impl FlowDefinition {
    /// <p>An array of node definitions in the flow.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.nodes.is_none()`.
    pub fn nodes(&self) -> &[crate::types::FlowNode] {
        self.nodes.as_deref().unwrap_or_default()
    }
    /// <p>An array of connection definitions in the flow.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.connections.is_none()`.
    pub fn connections(&self) -> &[crate::types::FlowConnection] {
        self.connections.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for FlowDefinition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FlowDefinition");
        formatter.field("nodes", &"*** Sensitive Data Redacted ***");
        formatter.field("connections", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl FlowDefinition {
    /// Creates a new builder-style object to manufacture [`FlowDefinition`](crate::types::FlowDefinition).
    pub fn builder() -> crate::types::builders::FlowDefinitionBuilder {
        crate::types::builders::FlowDefinitionBuilder::default()
    }
}

/// A builder for [`FlowDefinition`](crate::types::FlowDefinition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct FlowDefinitionBuilder {
    pub(crate) nodes: ::std::option::Option<::std::vec::Vec<crate::types::FlowNode>>,
    pub(crate) connections: ::std::option::Option<::std::vec::Vec<crate::types::FlowConnection>>,
}
impl FlowDefinitionBuilder {
    /// Appends an item to `nodes`.
    ///
    /// To override the contents of this collection use [`set_nodes`](Self::set_nodes).
    ///
    /// <p>An array of node definitions in the flow.</p>
    pub fn nodes(mut self, input: crate::types::FlowNode) -> Self {
        let mut v = self.nodes.unwrap_or_default();
        v.push(input);
        self.nodes = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of node definitions in the flow.</p>
    pub fn set_nodes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FlowNode>>) -> Self {
        self.nodes = input;
        self
    }
    /// <p>An array of node definitions in the flow.</p>
    pub fn get_nodes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FlowNode>> {
        &self.nodes
    }
    /// Appends an item to `connections`.
    ///
    /// To override the contents of this collection use [`set_connections`](Self::set_connections).
    ///
    /// <p>An array of connection definitions in the flow.</p>
    pub fn connections(mut self, input: crate::types::FlowConnection) -> Self {
        let mut v = self.connections.unwrap_or_default();
        v.push(input);
        self.connections = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of connection definitions in the flow.</p>
    pub fn set_connections(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FlowConnection>>) -> Self {
        self.connections = input;
        self
    }
    /// <p>An array of connection definitions in the flow.</p>
    pub fn get_connections(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FlowConnection>> {
        &self.connections
    }
    /// Consumes the builder and constructs a [`FlowDefinition`](crate::types::FlowDefinition).
    pub fn build(self) -> crate::types::FlowDefinition {
        crate::types::FlowDefinition {
            nodes: self.nodes,
            connections: self.connections,
        }
    }
}
impl ::std::fmt::Debug for FlowDefinitionBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FlowDefinitionBuilder");
        formatter.field("nodes", &"*** Sensitive Data Redacted ***");
        formatter.field("connections", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
