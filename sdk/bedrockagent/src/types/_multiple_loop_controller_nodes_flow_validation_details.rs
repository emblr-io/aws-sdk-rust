// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a flow that contains multiple <code>LoopController</code> nodes in a DoWhile loop.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MultipleLoopControllerNodesFlowValidationDetails {
    /// <p>The DoWhile loop in a flow that contains multiple <code>LoopController</code> nodes.</p>
    pub loop_node: ::std::string::String,
}
impl MultipleLoopControllerNodesFlowValidationDetails {
    /// <p>The DoWhile loop in a flow that contains multiple <code>LoopController</code> nodes.</p>
    pub fn loop_node(&self) -> &str {
        use std::ops::Deref;
        self.loop_node.deref()
    }
}
impl MultipleLoopControllerNodesFlowValidationDetails {
    /// Creates a new builder-style object to manufacture [`MultipleLoopControllerNodesFlowValidationDetails`](crate::types::MultipleLoopControllerNodesFlowValidationDetails).
    pub fn builder() -> crate::types::builders::MultipleLoopControllerNodesFlowValidationDetailsBuilder {
        crate::types::builders::MultipleLoopControllerNodesFlowValidationDetailsBuilder::default()
    }
}

/// A builder for [`MultipleLoopControllerNodesFlowValidationDetails`](crate::types::MultipleLoopControllerNodesFlowValidationDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MultipleLoopControllerNodesFlowValidationDetailsBuilder {
    pub(crate) loop_node: ::std::option::Option<::std::string::String>,
}
impl MultipleLoopControllerNodesFlowValidationDetailsBuilder {
    /// <p>The DoWhile loop in a flow that contains multiple <code>LoopController</code> nodes.</p>
    /// This field is required.
    pub fn loop_node(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.loop_node = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DoWhile loop in a flow that contains multiple <code>LoopController</code> nodes.</p>
    pub fn set_loop_node(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.loop_node = input;
        self
    }
    /// <p>The DoWhile loop in a flow that contains multiple <code>LoopController</code> nodes.</p>
    pub fn get_loop_node(&self) -> &::std::option::Option<::std::string::String> {
        &self.loop_node
    }
    /// Consumes the builder and constructs a [`MultipleLoopControllerNodesFlowValidationDetails`](crate::types::MultipleLoopControllerNodesFlowValidationDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`loop_node`](crate::types::builders::MultipleLoopControllerNodesFlowValidationDetailsBuilder::loop_node)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::MultipleLoopControllerNodesFlowValidationDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MultipleLoopControllerNodesFlowValidationDetails {
            loop_node: self.loop_node.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "loop_node",
                    "loop_node was not specified but it is required when building MultipleLoopControllerNodesFlowValidationDetails",
                )
            })?,
        })
    }
}
