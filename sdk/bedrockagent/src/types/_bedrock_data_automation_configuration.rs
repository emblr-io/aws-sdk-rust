// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configurations for using Amazon Bedrock Data Automation as the parser for ingesting your data sources.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BedrockDataAutomationConfiguration {
    /// <p>Specifies whether to enable parsing of multimodal data, including both text and/or images.</p>
    pub parsing_modality: ::std::option::Option<crate::types::ParsingModality>,
}
impl BedrockDataAutomationConfiguration {
    /// <p>Specifies whether to enable parsing of multimodal data, including both text and/or images.</p>
    pub fn parsing_modality(&self) -> ::std::option::Option<&crate::types::ParsingModality> {
        self.parsing_modality.as_ref()
    }
}
impl BedrockDataAutomationConfiguration {
    /// Creates a new builder-style object to manufacture [`BedrockDataAutomationConfiguration`](crate::types::BedrockDataAutomationConfiguration).
    pub fn builder() -> crate::types::builders::BedrockDataAutomationConfigurationBuilder {
        crate::types::builders::BedrockDataAutomationConfigurationBuilder::default()
    }
}

/// A builder for [`BedrockDataAutomationConfiguration`](crate::types::BedrockDataAutomationConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BedrockDataAutomationConfigurationBuilder {
    pub(crate) parsing_modality: ::std::option::Option<crate::types::ParsingModality>,
}
impl BedrockDataAutomationConfigurationBuilder {
    /// <p>Specifies whether to enable parsing of multimodal data, including both text and/or images.</p>
    pub fn parsing_modality(mut self, input: crate::types::ParsingModality) -> Self {
        self.parsing_modality = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to enable parsing of multimodal data, including both text and/or images.</p>
    pub fn set_parsing_modality(mut self, input: ::std::option::Option<crate::types::ParsingModality>) -> Self {
        self.parsing_modality = input;
        self
    }
    /// <p>Specifies whether to enable parsing of multimodal data, including both text and/or images.</p>
    pub fn get_parsing_modality(&self) -> &::std::option::Option<crate::types::ParsingModality> {
        &self.parsing_modality
    }
    /// Consumes the builder and constructs a [`BedrockDataAutomationConfiguration`](crate::types::BedrockDataAutomationConfiguration).
    pub fn build(self) -> crate::types::BedrockDataAutomationConfiguration {
        crate::types::BedrockDataAutomationConfiguration {
            parsing_modality: self.parsing_modality,
        }
    }
}
