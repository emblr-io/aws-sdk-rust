// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The specific filters applied to your data source content. You can filter out or include certain content.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PatternObjectFilter {
    /// <p>The supported object type or content type of the data source.</p>
    pub object_type: ::std::string::String,
    /// <p>A list of one or more inclusion regular expression patterns to include certain object types that adhere to the pattern. If you specify an inclusion and exclusion filter/pattern and both match a document, the exclusion filter takes precedence and the document isn’t crawled.</p>
    pub inclusion_filters: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of one or more exclusion regular expression patterns to exclude certain object types that adhere to the pattern. If you specify an inclusion and exclusion filter/pattern and both match a document, the exclusion filter takes precedence and the document isn’t crawled.</p>
    pub exclusion_filters: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PatternObjectFilter {
    /// <p>The supported object type or content type of the data source.</p>
    pub fn object_type(&self) -> &str {
        use std::ops::Deref;
        self.object_type.deref()
    }
    /// <p>A list of one or more inclusion regular expression patterns to include certain object types that adhere to the pattern. If you specify an inclusion and exclusion filter/pattern and both match a document, the exclusion filter takes precedence and the document isn’t crawled.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.inclusion_filters.is_none()`.
    pub fn inclusion_filters(&self) -> &[::std::string::String] {
        self.inclusion_filters.as_deref().unwrap_or_default()
    }
    /// <p>A list of one or more exclusion regular expression patterns to exclude certain object types that adhere to the pattern. If you specify an inclusion and exclusion filter/pattern and both match a document, the exclusion filter takes precedence and the document isn’t crawled.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.exclusion_filters.is_none()`.
    pub fn exclusion_filters(&self) -> &[::std::string::String] {
        self.exclusion_filters.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for PatternObjectFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PatternObjectFilter");
        formatter.field("object_type", &"*** Sensitive Data Redacted ***");
        formatter.field("inclusion_filters", &"*** Sensitive Data Redacted ***");
        formatter.field("exclusion_filters", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl PatternObjectFilter {
    /// Creates a new builder-style object to manufacture [`PatternObjectFilter`](crate::types::PatternObjectFilter).
    pub fn builder() -> crate::types::builders::PatternObjectFilterBuilder {
        crate::types::builders::PatternObjectFilterBuilder::default()
    }
}

/// A builder for [`PatternObjectFilter`](crate::types::PatternObjectFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct PatternObjectFilterBuilder {
    pub(crate) object_type: ::std::option::Option<::std::string::String>,
    pub(crate) inclusion_filters: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) exclusion_filters: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PatternObjectFilterBuilder {
    /// <p>The supported object type or content type of the data source.</p>
    /// This field is required.
    pub fn object_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.object_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The supported object type or content type of the data source.</p>
    pub fn set_object_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.object_type = input;
        self
    }
    /// <p>The supported object type or content type of the data source.</p>
    pub fn get_object_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.object_type
    }
    /// Appends an item to `inclusion_filters`.
    ///
    /// To override the contents of this collection use [`set_inclusion_filters`](Self::set_inclusion_filters).
    ///
    /// <p>A list of one or more inclusion regular expression patterns to include certain object types that adhere to the pattern. If you specify an inclusion and exclusion filter/pattern and both match a document, the exclusion filter takes precedence and the document isn’t crawled.</p>
    pub fn inclusion_filters(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.inclusion_filters.unwrap_or_default();
        v.push(input.into());
        self.inclusion_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of one or more inclusion regular expression patterns to include certain object types that adhere to the pattern. If you specify an inclusion and exclusion filter/pattern and both match a document, the exclusion filter takes precedence and the document isn’t crawled.</p>
    pub fn set_inclusion_filters(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inclusion_filters = input;
        self
    }
    /// <p>A list of one or more inclusion regular expression patterns to include certain object types that adhere to the pattern. If you specify an inclusion and exclusion filter/pattern and both match a document, the exclusion filter takes precedence and the document isn’t crawled.</p>
    pub fn get_inclusion_filters(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.inclusion_filters
    }
    /// Appends an item to `exclusion_filters`.
    ///
    /// To override the contents of this collection use [`set_exclusion_filters`](Self::set_exclusion_filters).
    ///
    /// <p>A list of one or more exclusion regular expression patterns to exclude certain object types that adhere to the pattern. If you specify an inclusion and exclusion filter/pattern and both match a document, the exclusion filter takes precedence and the document isn’t crawled.</p>
    pub fn exclusion_filters(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.exclusion_filters.unwrap_or_default();
        v.push(input.into());
        self.exclusion_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of one or more exclusion regular expression patterns to exclude certain object types that adhere to the pattern. If you specify an inclusion and exclusion filter/pattern and both match a document, the exclusion filter takes precedence and the document isn’t crawled.</p>
    pub fn set_exclusion_filters(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.exclusion_filters = input;
        self
    }
    /// <p>A list of one or more exclusion regular expression patterns to exclude certain object types that adhere to the pattern. If you specify an inclusion and exclusion filter/pattern and both match a document, the exclusion filter takes precedence and the document isn’t crawled.</p>
    pub fn get_exclusion_filters(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.exclusion_filters
    }
    /// Consumes the builder and constructs a [`PatternObjectFilter`](crate::types::PatternObjectFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`object_type`](crate::types::builders::PatternObjectFilterBuilder::object_type)
    pub fn build(self) -> ::std::result::Result<crate::types::PatternObjectFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PatternObjectFilter {
            object_type: self.object_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "object_type",
                    "object_type was not specified but it is required when building PatternObjectFilter",
                )
            })?,
            inclusion_filters: self.inclusion_filters,
            exclusion_filters: self.exclusion_filters,
        })
    }
}
impl ::std::fmt::Debug for PatternObjectFilterBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PatternObjectFilterBuilder");
        formatter.field("object_type", &"*** Sensitive Data Redacted ***");
        formatter.field("inclusion_filters", &"*** Sensitive Data Redacted ***");
        formatter.field("exclusion_filters", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
