// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the value of the metadata attribute. Choose a <code>type</code> and include the field that corresponds to it.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct MetadataAttributeValue {
    /// <p>The type of the metadata attribute.</p>
    pub r#type: crate::types::MetadataValueType,
    /// <p>The value of the numeric metadata attribute.</p>
    pub number_value: ::std::option::Option<f64>,
    /// <p>The value of the Boolean metadata attribute.</p>
    pub boolean_value: ::std::option::Option<bool>,
    /// <p>The value of the string metadata attribute.</p>
    pub string_value: ::std::option::Option<::std::string::String>,
    /// <p>An array of strings that define the value of the metadata attribute.</p>
    pub string_list_value: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl MetadataAttributeValue {
    /// <p>The type of the metadata attribute.</p>
    pub fn r#type(&self) -> &crate::types::MetadataValueType {
        &self.r#type
    }
    /// <p>The value of the numeric metadata attribute.</p>
    pub fn number_value(&self) -> ::std::option::Option<f64> {
        self.number_value
    }
    /// <p>The value of the Boolean metadata attribute.</p>
    pub fn boolean_value(&self) -> ::std::option::Option<bool> {
        self.boolean_value
    }
    /// <p>The value of the string metadata attribute.</p>
    pub fn string_value(&self) -> ::std::option::Option<&str> {
        self.string_value.as_deref()
    }
    /// <p>An array of strings that define the value of the metadata attribute.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.string_list_value.is_none()`.
    pub fn string_list_value(&self) -> &[::std::string::String] {
        self.string_list_value.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for MetadataAttributeValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MetadataAttributeValue");
        formatter.field("r#type", &self.r#type);
        formatter.field("number_value", &"*** Sensitive Data Redacted ***");
        formatter.field("boolean_value", &self.boolean_value);
        formatter.field("string_value", &"*** Sensitive Data Redacted ***");
        formatter.field("string_list_value", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl MetadataAttributeValue {
    /// Creates a new builder-style object to manufacture [`MetadataAttributeValue`](crate::types::MetadataAttributeValue).
    pub fn builder() -> crate::types::builders::MetadataAttributeValueBuilder {
        crate::types::builders::MetadataAttributeValueBuilder::default()
    }
}

/// A builder for [`MetadataAttributeValue`](crate::types::MetadataAttributeValue).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct MetadataAttributeValueBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::MetadataValueType>,
    pub(crate) number_value: ::std::option::Option<f64>,
    pub(crate) boolean_value: ::std::option::Option<bool>,
    pub(crate) string_value: ::std::option::Option<::std::string::String>,
    pub(crate) string_list_value: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl MetadataAttributeValueBuilder {
    /// <p>The type of the metadata attribute.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::MetadataValueType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the metadata attribute.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::MetadataValueType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the metadata attribute.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::MetadataValueType> {
        &self.r#type
    }
    /// <p>The value of the numeric metadata attribute.</p>
    pub fn number_value(mut self, input: f64) -> Self {
        self.number_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of the numeric metadata attribute.</p>
    pub fn set_number_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.number_value = input;
        self
    }
    /// <p>The value of the numeric metadata attribute.</p>
    pub fn get_number_value(&self) -> &::std::option::Option<f64> {
        &self.number_value
    }
    /// <p>The value of the Boolean metadata attribute.</p>
    pub fn boolean_value(mut self, input: bool) -> Self {
        self.boolean_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of the Boolean metadata attribute.</p>
    pub fn set_boolean_value(mut self, input: ::std::option::Option<bool>) -> Self {
        self.boolean_value = input;
        self
    }
    /// <p>The value of the Boolean metadata attribute.</p>
    pub fn get_boolean_value(&self) -> &::std::option::Option<bool> {
        &self.boolean_value
    }
    /// <p>The value of the string metadata attribute.</p>
    pub fn string_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.string_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the string metadata attribute.</p>
    pub fn set_string_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.string_value = input;
        self
    }
    /// <p>The value of the string metadata attribute.</p>
    pub fn get_string_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.string_value
    }
    /// Appends an item to `string_list_value`.
    ///
    /// To override the contents of this collection use [`set_string_list_value`](Self::set_string_list_value).
    ///
    /// <p>An array of strings that define the value of the metadata attribute.</p>
    pub fn string_list_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.string_list_value.unwrap_or_default();
        v.push(input.into());
        self.string_list_value = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of strings that define the value of the metadata attribute.</p>
    pub fn set_string_list_value(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.string_list_value = input;
        self
    }
    /// <p>An array of strings that define the value of the metadata attribute.</p>
    pub fn get_string_list_value(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.string_list_value
    }
    /// Consumes the builder and constructs a [`MetadataAttributeValue`](crate::types::MetadataAttributeValue).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::MetadataAttributeValueBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::MetadataAttributeValue, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MetadataAttributeValue {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building MetadataAttributeValue",
                )
            })?,
            number_value: self.number_value,
            boolean_value: self.boolean_value,
            string_value: self.string_value,
            string_list_value: self.string_list_value,
        })
    }
}
impl ::std::fmt::Debug for MetadataAttributeValueBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MetadataAttributeValueBuilder");
        formatter.field("r#type", &self.r#type);
        formatter.field("number_value", &"*** Sensitive Data Redacted ***");
        formatter.field("boolean_value", &self.boolean_value);
        formatter.field("string_value", &"*** Sensitive Data Redacted ***");
        formatter.field("string_list_value", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
