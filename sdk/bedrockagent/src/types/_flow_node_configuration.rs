// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configurations for a node in your flow. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/flows-nodes.html">Node types in a flow</a> in the Amazon Bedrock User Guide.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum FlowNodeConfiguration {
    /// <p>Contains configurations for an agent node in your flow. Invokes an alias of an agent and returns the response.</p>
    Agent(crate::types::AgentFlowNodeConfiguration),
    /// <p>Contains configurations for a collector node in your flow. Collects an iteration of inputs and consolidates them into an array of outputs.</p>
    Collector(crate::types::CollectorFlowNodeConfiguration),
    /// <p>Contains configurations for a condition node in your flow. Defines conditions that lead to different branches of the flow.</p>
    Condition(crate::types::ConditionFlowNodeConfiguration),
    /// <p>Contains configurations for an inline code node in your flow. Inline code nodes let you write and execute code directly within your flow, enabling data transformations, custom logic, and integrations without needing an external Lambda function.</p>
    InlineCode(crate::types::InlineCodeFlowNodeConfiguration),
    /// <p>Contains configurations for an input flow node in your flow. The first node in the flow. <code>inputs</code> can't be specified for this node.</p>
    Input(crate::types::InputFlowNodeConfiguration),
    /// <p>Contains configurations for an iterator node in your flow. Takes an input that is an array and iteratively sends each item of the array as an output to the following node. The size of the array is also returned in the output.</p>
    /// <p>The output flow node at the end of the flow iteration will return a response for each member of the array. To return only one response, you can include a collector node downstream from the iterator node.</p>
    Iterator(crate::types::IteratorFlowNodeConfiguration),
    /// <p>Contains configurations for a knowledge base node in your flow. Queries a knowledge base and returns the retrieved results or generated response.</p>
    KnowledgeBase(crate::types::KnowledgeBaseFlowNodeConfiguration),
    /// <p>Contains configurations for a Lambda function node in your flow. Invokes an Lambda function.</p>
    LambdaFunction(crate::types::LambdaFunctionFlowNodeConfiguration),
    /// <p>Contains configurations for a Lex node in your flow. Invokes an Amazon Lex bot to identify the intent of the input and return the intent as the output.</p>
    Lex(crate::types::LexFlowNodeConfiguration),
    /// <p>Contains configurations for a DoWhile loop in your flow.</p>
    Loop(crate::types::LoopFlowNodeConfiguration),
    /// <p>Contains controller node configurations for a DoWhile loop in your flow.</p>
    LoopController(crate::types::LoopControllerFlowNodeConfiguration),
    /// <p>Contains input node configurations for a DoWhile loop in your flow.</p>
    LoopInput(crate::types::LoopInputFlowNodeConfiguration),
    /// <p>Contains configurations for an output flow node in your flow. The last node in the flow. <code>outputs</code> can't be specified for this node.</p>
    Output(crate::types::OutputFlowNodeConfiguration),
    /// <p>Contains configurations for a prompt node in your flow. Runs a prompt and generates the model response as the output. You can use a prompt from Prompt management or you can configure one in this node.</p>
    Prompt(crate::types::PromptFlowNodeConfiguration),
    /// <p>Contains configurations for a retrieval node in your flow. Retrieves data from an Amazon S3 location and returns it as the output.</p>
    Retrieval(crate::types::RetrievalFlowNodeConfiguration),
    /// <p>Contains configurations for a storage node in your flow. Stores an input in an Amazon S3 location.</p>
    Storage(crate::types::StorageFlowNodeConfiguration),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl FlowNodeConfiguration {
    /// Tries to convert the enum instance into [`Agent`](crate::types::FlowNodeConfiguration::Agent), extracting the inner [`AgentFlowNodeConfiguration`](crate::types::AgentFlowNodeConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_agent(&self) -> ::std::result::Result<&crate::types::AgentFlowNodeConfiguration, &Self> {
        if let FlowNodeConfiguration::Agent(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Agent`](crate::types::FlowNodeConfiguration::Agent).
    pub fn is_agent(&self) -> bool {
        self.as_agent().is_ok()
    }
    /// Tries to convert the enum instance into [`Collector`](crate::types::FlowNodeConfiguration::Collector), extracting the inner [`CollectorFlowNodeConfiguration`](crate::types::CollectorFlowNodeConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_collector(&self) -> ::std::result::Result<&crate::types::CollectorFlowNodeConfiguration, &Self> {
        if let FlowNodeConfiguration::Collector(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Collector`](crate::types::FlowNodeConfiguration::Collector).
    pub fn is_collector(&self) -> bool {
        self.as_collector().is_ok()
    }
    /// Tries to convert the enum instance into [`Condition`](crate::types::FlowNodeConfiguration::Condition), extracting the inner [`ConditionFlowNodeConfiguration`](crate::types::ConditionFlowNodeConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_condition(&self) -> ::std::result::Result<&crate::types::ConditionFlowNodeConfiguration, &Self> {
        if let FlowNodeConfiguration::Condition(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Condition`](crate::types::FlowNodeConfiguration::Condition).
    pub fn is_condition(&self) -> bool {
        self.as_condition().is_ok()
    }
    /// Tries to convert the enum instance into [`InlineCode`](crate::types::FlowNodeConfiguration::InlineCode), extracting the inner [`InlineCodeFlowNodeConfiguration`](crate::types::InlineCodeFlowNodeConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_inline_code(&self) -> ::std::result::Result<&crate::types::InlineCodeFlowNodeConfiguration, &Self> {
        if let FlowNodeConfiguration::InlineCode(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`InlineCode`](crate::types::FlowNodeConfiguration::InlineCode).
    pub fn is_inline_code(&self) -> bool {
        self.as_inline_code().is_ok()
    }
    /// Tries to convert the enum instance into [`Input`](crate::types::FlowNodeConfiguration::Input), extracting the inner [`InputFlowNodeConfiguration`](crate::types::InputFlowNodeConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_input(&self) -> ::std::result::Result<&crate::types::InputFlowNodeConfiguration, &Self> {
        if let FlowNodeConfiguration::Input(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Input`](crate::types::FlowNodeConfiguration::Input).
    pub fn is_input(&self) -> bool {
        self.as_input().is_ok()
    }
    /// Tries to convert the enum instance into [`Iterator`](crate::types::FlowNodeConfiguration::Iterator), extracting the inner [`IteratorFlowNodeConfiguration`](crate::types::IteratorFlowNodeConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_iterator(&self) -> ::std::result::Result<&crate::types::IteratorFlowNodeConfiguration, &Self> {
        if let FlowNodeConfiguration::Iterator(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Iterator`](crate::types::FlowNodeConfiguration::Iterator).
    pub fn is_iterator(&self) -> bool {
        self.as_iterator().is_ok()
    }
    /// Tries to convert the enum instance into [`KnowledgeBase`](crate::types::FlowNodeConfiguration::KnowledgeBase), extracting the inner [`KnowledgeBaseFlowNodeConfiguration`](crate::types::KnowledgeBaseFlowNodeConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_knowledge_base(&self) -> ::std::result::Result<&crate::types::KnowledgeBaseFlowNodeConfiguration, &Self> {
        if let FlowNodeConfiguration::KnowledgeBase(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`KnowledgeBase`](crate::types::FlowNodeConfiguration::KnowledgeBase).
    pub fn is_knowledge_base(&self) -> bool {
        self.as_knowledge_base().is_ok()
    }
    /// Tries to convert the enum instance into [`LambdaFunction`](crate::types::FlowNodeConfiguration::LambdaFunction), extracting the inner [`LambdaFunctionFlowNodeConfiguration`](crate::types::LambdaFunctionFlowNodeConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_lambda_function(&self) -> ::std::result::Result<&crate::types::LambdaFunctionFlowNodeConfiguration, &Self> {
        if let FlowNodeConfiguration::LambdaFunction(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`LambdaFunction`](crate::types::FlowNodeConfiguration::LambdaFunction).
    pub fn is_lambda_function(&self) -> bool {
        self.as_lambda_function().is_ok()
    }
    /// Tries to convert the enum instance into [`Lex`](crate::types::FlowNodeConfiguration::Lex), extracting the inner [`LexFlowNodeConfiguration`](crate::types::LexFlowNodeConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_lex(&self) -> ::std::result::Result<&crate::types::LexFlowNodeConfiguration, &Self> {
        if let FlowNodeConfiguration::Lex(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Lex`](crate::types::FlowNodeConfiguration::Lex).
    pub fn is_lex(&self) -> bool {
        self.as_lex().is_ok()
    }
    /// Tries to convert the enum instance into [`Loop`](crate::types::FlowNodeConfiguration::Loop), extracting the inner [`LoopFlowNodeConfiguration`](crate::types::LoopFlowNodeConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_loop(&self) -> ::std::result::Result<&crate::types::LoopFlowNodeConfiguration, &Self> {
        if let FlowNodeConfiguration::Loop(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Loop`](crate::types::FlowNodeConfiguration::Loop).
    pub fn is_loop(&self) -> bool {
        self.as_loop().is_ok()
    }
    /// Tries to convert the enum instance into [`LoopController`](crate::types::FlowNodeConfiguration::LoopController), extracting the inner [`LoopControllerFlowNodeConfiguration`](crate::types::LoopControllerFlowNodeConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_loop_controller(&self) -> ::std::result::Result<&crate::types::LoopControllerFlowNodeConfiguration, &Self> {
        if let FlowNodeConfiguration::LoopController(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`LoopController`](crate::types::FlowNodeConfiguration::LoopController).
    pub fn is_loop_controller(&self) -> bool {
        self.as_loop_controller().is_ok()
    }
    /// Tries to convert the enum instance into [`LoopInput`](crate::types::FlowNodeConfiguration::LoopInput), extracting the inner [`LoopInputFlowNodeConfiguration`](crate::types::LoopInputFlowNodeConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_loop_input(&self) -> ::std::result::Result<&crate::types::LoopInputFlowNodeConfiguration, &Self> {
        if let FlowNodeConfiguration::LoopInput(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`LoopInput`](crate::types::FlowNodeConfiguration::LoopInput).
    pub fn is_loop_input(&self) -> bool {
        self.as_loop_input().is_ok()
    }
    /// Tries to convert the enum instance into [`Output`](crate::types::FlowNodeConfiguration::Output), extracting the inner [`OutputFlowNodeConfiguration`](crate::types::OutputFlowNodeConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_output(&self) -> ::std::result::Result<&crate::types::OutputFlowNodeConfiguration, &Self> {
        if let FlowNodeConfiguration::Output(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Output`](crate::types::FlowNodeConfiguration::Output).
    pub fn is_output(&self) -> bool {
        self.as_output().is_ok()
    }
    /// Tries to convert the enum instance into [`Prompt`](crate::types::FlowNodeConfiguration::Prompt), extracting the inner [`PromptFlowNodeConfiguration`](crate::types::PromptFlowNodeConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_prompt(&self) -> ::std::result::Result<&crate::types::PromptFlowNodeConfiguration, &Self> {
        if let FlowNodeConfiguration::Prompt(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Prompt`](crate::types::FlowNodeConfiguration::Prompt).
    pub fn is_prompt(&self) -> bool {
        self.as_prompt().is_ok()
    }
    /// Tries to convert the enum instance into [`Retrieval`](crate::types::FlowNodeConfiguration::Retrieval), extracting the inner [`RetrievalFlowNodeConfiguration`](crate::types::RetrievalFlowNodeConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_retrieval(&self) -> ::std::result::Result<&crate::types::RetrievalFlowNodeConfiguration, &Self> {
        if let FlowNodeConfiguration::Retrieval(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Retrieval`](crate::types::FlowNodeConfiguration::Retrieval).
    pub fn is_retrieval(&self) -> bool {
        self.as_retrieval().is_ok()
    }
    /// Tries to convert the enum instance into [`Storage`](crate::types::FlowNodeConfiguration::Storage), extracting the inner [`StorageFlowNodeConfiguration`](crate::types::StorageFlowNodeConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_storage(&self) -> ::std::result::Result<&crate::types::StorageFlowNodeConfiguration, &Self> {
        if let FlowNodeConfiguration::Storage(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Storage`](crate::types::FlowNodeConfiguration::Storage).
    pub fn is_storage(&self) -> bool {
        self.as_storage().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
