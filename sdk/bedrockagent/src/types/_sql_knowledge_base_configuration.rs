// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configurations for a knowledge base connected to an SQL database. Specify the SQL database type in the <code>type</code> field and include the corresponding field. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-build-structured.html">Build a knowledge base by connecting to a structured data source</a> in the Amazon Bedrock User Guide.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SqlKnowledgeBaseConfiguration {
    /// <p>The type of SQL database to connect to the knowledge base.</p>
    pub r#type: crate::types::QueryEngineType,
    /// <p>Specifies configurations for a knowledge base connected to an Amazon Redshift database.</p>
    pub redshift_configuration: ::std::option::Option<crate::types::RedshiftConfiguration>,
}
impl SqlKnowledgeBaseConfiguration {
    /// <p>The type of SQL database to connect to the knowledge base.</p>
    pub fn r#type(&self) -> &crate::types::QueryEngineType {
        &self.r#type
    }
    /// <p>Specifies configurations for a knowledge base connected to an Amazon Redshift database.</p>
    pub fn redshift_configuration(&self) -> ::std::option::Option<&crate::types::RedshiftConfiguration> {
        self.redshift_configuration.as_ref()
    }
}
impl SqlKnowledgeBaseConfiguration {
    /// Creates a new builder-style object to manufacture [`SqlKnowledgeBaseConfiguration`](crate::types::SqlKnowledgeBaseConfiguration).
    pub fn builder() -> crate::types::builders::SqlKnowledgeBaseConfigurationBuilder {
        crate::types::builders::SqlKnowledgeBaseConfigurationBuilder::default()
    }
}

/// A builder for [`SqlKnowledgeBaseConfiguration`](crate::types::SqlKnowledgeBaseConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SqlKnowledgeBaseConfigurationBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::QueryEngineType>,
    pub(crate) redshift_configuration: ::std::option::Option<crate::types::RedshiftConfiguration>,
}
impl SqlKnowledgeBaseConfigurationBuilder {
    /// <p>The type of SQL database to connect to the knowledge base.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::QueryEngineType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of SQL database to connect to the knowledge base.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::QueryEngineType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of SQL database to connect to the knowledge base.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::QueryEngineType> {
        &self.r#type
    }
    /// <p>Specifies configurations for a knowledge base connected to an Amazon Redshift database.</p>
    pub fn redshift_configuration(mut self, input: crate::types::RedshiftConfiguration) -> Self {
        self.redshift_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies configurations for a knowledge base connected to an Amazon Redshift database.</p>
    pub fn set_redshift_configuration(mut self, input: ::std::option::Option<crate::types::RedshiftConfiguration>) -> Self {
        self.redshift_configuration = input;
        self
    }
    /// <p>Specifies configurations for a knowledge base connected to an Amazon Redshift database.</p>
    pub fn get_redshift_configuration(&self) -> &::std::option::Option<crate::types::RedshiftConfiguration> {
        &self.redshift_configuration
    }
    /// Consumes the builder and constructs a [`SqlKnowledgeBaseConfiguration`](crate::types::SqlKnowledgeBaseConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::SqlKnowledgeBaseConfigurationBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::SqlKnowledgeBaseConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SqlKnowledgeBaseConfiguration {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building SqlKnowledgeBaseConfiguration",
                )
            })?,
            redshift_configuration: self.redshift_configuration,
        })
    }
}
