// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the statistics for the data ingestion job.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IngestionJobStatistics {
    /// <p>The total number of source documents that were scanned. Includes new, updated, and unchanged documents.</p>
    pub number_of_documents_scanned: i64,
    /// <p>The total number of metadata files that were scanned. Includes new, updated, and unchanged files.</p>
    pub number_of_metadata_documents_scanned: i64,
    /// <p>The number of new source documents in the data source that were successfully indexed.</p>
    pub number_of_new_documents_indexed: i64,
    /// <p>The number of modified source documents in the data source that were successfully indexed.</p>
    pub number_of_modified_documents_indexed: i64,
    /// <p>The number of metadata files that were updated or deleted.</p>
    pub number_of_metadata_documents_modified: i64,
    /// <p>The number of source documents that were deleted.</p>
    pub number_of_documents_deleted: i64,
    /// <p>The number of source documents that failed to be ingested.</p>
    pub number_of_documents_failed: i64,
}
impl IngestionJobStatistics {
    /// <p>The total number of source documents that were scanned. Includes new, updated, and unchanged documents.</p>
    pub fn number_of_documents_scanned(&self) -> i64 {
        self.number_of_documents_scanned
    }
    /// <p>The total number of metadata files that were scanned. Includes new, updated, and unchanged files.</p>
    pub fn number_of_metadata_documents_scanned(&self) -> i64 {
        self.number_of_metadata_documents_scanned
    }
    /// <p>The number of new source documents in the data source that were successfully indexed.</p>
    pub fn number_of_new_documents_indexed(&self) -> i64 {
        self.number_of_new_documents_indexed
    }
    /// <p>The number of modified source documents in the data source that were successfully indexed.</p>
    pub fn number_of_modified_documents_indexed(&self) -> i64 {
        self.number_of_modified_documents_indexed
    }
    /// <p>The number of metadata files that were updated or deleted.</p>
    pub fn number_of_metadata_documents_modified(&self) -> i64 {
        self.number_of_metadata_documents_modified
    }
    /// <p>The number of source documents that were deleted.</p>
    pub fn number_of_documents_deleted(&self) -> i64 {
        self.number_of_documents_deleted
    }
    /// <p>The number of source documents that failed to be ingested.</p>
    pub fn number_of_documents_failed(&self) -> i64 {
        self.number_of_documents_failed
    }
}
impl IngestionJobStatistics {
    /// Creates a new builder-style object to manufacture [`IngestionJobStatistics`](crate::types::IngestionJobStatistics).
    pub fn builder() -> crate::types::builders::IngestionJobStatisticsBuilder {
        crate::types::builders::IngestionJobStatisticsBuilder::default()
    }
}

/// A builder for [`IngestionJobStatistics`](crate::types::IngestionJobStatistics).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IngestionJobStatisticsBuilder {
    pub(crate) number_of_documents_scanned: ::std::option::Option<i64>,
    pub(crate) number_of_metadata_documents_scanned: ::std::option::Option<i64>,
    pub(crate) number_of_new_documents_indexed: ::std::option::Option<i64>,
    pub(crate) number_of_modified_documents_indexed: ::std::option::Option<i64>,
    pub(crate) number_of_metadata_documents_modified: ::std::option::Option<i64>,
    pub(crate) number_of_documents_deleted: ::std::option::Option<i64>,
    pub(crate) number_of_documents_failed: ::std::option::Option<i64>,
}
impl IngestionJobStatisticsBuilder {
    /// <p>The total number of source documents that were scanned. Includes new, updated, and unchanged documents.</p>
    pub fn number_of_documents_scanned(mut self, input: i64) -> Self {
        self.number_of_documents_scanned = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of source documents that were scanned. Includes new, updated, and unchanged documents.</p>
    pub fn set_number_of_documents_scanned(mut self, input: ::std::option::Option<i64>) -> Self {
        self.number_of_documents_scanned = input;
        self
    }
    /// <p>The total number of source documents that were scanned. Includes new, updated, and unchanged documents.</p>
    pub fn get_number_of_documents_scanned(&self) -> &::std::option::Option<i64> {
        &self.number_of_documents_scanned
    }
    /// <p>The total number of metadata files that were scanned. Includes new, updated, and unchanged files.</p>
    pub fn number_of_metadata_documents_scanned(mut self, input: i64) -> Self {
        self.number_of_metadata_documents_scanned = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of metadata files that were scanned. Includes new, updated, and unchanged files.</p>
    pub fn set_number_of_metadata_documents_scanned(mut self, input: ::std::option::Option<i64>) -> Self {
        self.number_of_metadata_documents_scanned = input;
        self
    }
    /// <p>The total number of metadata files that were scanned. Includes new, updated, and unchanged files.</p>
    pub fn get_number_of_metadata_documents_scanned(&self) -> &::std::option::Option<i64> {
        &self.number_of_metadata_documents_scanned
    }
    /// <p>The number of new source documents in the data source that were successfully indexed.</p>
    pub fn number_of_new_documents_indexed(mut self, input: i64) -> Self {
        self.number_of_new_documents_indexed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of new source documents in the data source that were successfully indexed.</p>
    pub fn set_number_of_new_documents_indexed(mut self, input: ::std::option::Option<i64>) -> Self {
        self.number_of_new_documents_indexed = input;
        self
    }
    /// <p>The number of new source documents in the data source that were successfully indexed.</p>
    pub fn get_number_of_new_documents_indexed(&self) -> &::std::option::Option<i64> {
        &self.number_of_new_documents_indexed
    }
    /// <p>The number of modified source documents in the data source that were successfully indexed.</p>
    pub fn number_of_modified_documents_indexed(mut self, input: i64) -> Self {
        self.number_of_modified_documents_indexed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of modified source documents in the data source that were successfully indexed.</p>
    pub fn set_number_of_modified_documents_indexed(mut self, input: ::std::option::Option<i64>) -> Self {
        self.number_of_modified_documents_indexed = input;
        self
    }
    /// <p>The number of modified source documents in the data source that were successfully indexed.</p>
    pub fn get_number_of_modified_documents_indexed(&self) -> &::std::option::Option<i64> {
        &self.number_of_modified_documents_indexed
    }
    /// <p>The number of metadata files that were updated or deleted.</p>
    pub fn number_of_metadata_documents_modified(mut self, input: i64) -> Self {
        self.number_of_metadata_documents_modified = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of metadata files that were updated or deleted.</p>
    pub fn set_number_of_metadata_documents_modified(mut self, input: ::std::option::Option<i64>) -> Self {
        self.number_of_metadata_documents_modified = input;
        self
    }
    /// <p>The number of metadata files that were updated or deleted.</p>
    pub fn get_number_of_metadata_documents_modified(&self) -> &::std::option::Option<i64> {
        &self.number_of_metadata_documents_modified
    }
    /// <p>The number of source documents that were deleted.</p>
    pub fn number_of_documents_deleted(mut self, input: i64) -> Self {
        self.number_of_documents_deleted = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of source documents that were deleted.</p>
    pub fn set_number_of_documents_deleted(mut self, input: ::std::option::Option<i64>) -> Self {
        self.number_of_documents_deleted = input;
        self
    }
    /// <p>The number of source documents that were deleted.</p>
    pub fn get_number_of_documents_deleted(&self) -> &::std::option::Option<i64> {
        &self.number_of_documents_deleted
    }
    /// <p>The number of source documents that failed to be ingested.</p>
    pub fn number_of_documents_failed(mut self, input: i64) -> Self {
        self.number_of_documents_failed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of source documents that failed to be ingested.</p>
    pub fn set_number_of_documents_failed(mut self, input: ::std::option::Option<i64>) -> Self {
        self.number_of_documents_failed = input;
        self
    }
    /// <p>The number of source documents that failed to be ingested.</p>
    pub fn get_number_of_documents_failed(&self) -> &::std::option::Option<i64> {
        &self.number_of_documents_failed
    }
    /// Consumes the builder and constructs a [`IngestionJobStatistics`](crate::types::IngestionJobStatistics).
    pub fn build(self) -> crate::types::IngestionJobStatistics {
        crate::types::IngestionJobStatistics {
            number_of_documents_scanned: self.number_of_documents_scanned.unwrap_or_default(),
            number_of_metadata_documents_scanned: self.number_of_metadata_documents_scanned.unwrap_or_default(),
            number_of_new_documents_indexed: self.number_of_new_documents_indexed.unwrap_or_default(),
            number_of_modified_documents_indexed: self.number_of_modified_documents_indexed.unwrap_or_default(),
            number_of_metadata_documents_modified: self.number_of_metadata_documents_modified.unwrap_or_default(),
            number_of_documents_deleted: self.number_of_documents_deleted.unwrap_or_default(),
            number_of_documents_failed: self.number_of_documents_failed.unwrap_or_default(),
        }
    }
}
