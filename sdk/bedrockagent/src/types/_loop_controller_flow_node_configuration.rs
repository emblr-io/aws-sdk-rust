// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configurations for the controller node of a DoWhile loop in the flow.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LoopControllerFlowNodeConfiguration {
    /// <p>Specifies the condition that determines when the flow exits the DoWhile loop. The loop executes until this condition evaluates to true.</p>
    pub continue_condition: ::std::option::Option<crate::types::FlowCondition>,
    /// <p>Specifies the maximum number of times the DoWhile loop can iterate before the flow exits the loop.</p>
    pub max_iterations: i32,
}
impl LoopControllerFlowNodeConfiguration {
    /// <p>Specifies the condition that determines when the flow exits the DoWhile loop. The loop executes until this condition evaluates to true.</p>
    pub fn continue_condition(&self) -> ::std::option::Option<&crate::types::FlowCondition> {
        self.continue_condition.as_ref()
    }
    /// <p>Specifies the maximum number of times the DoWhile loop can iterate before the flow exits the loop.</p>
    pub fn max_iterations(&self) -> i32 {
        self.max_iterations
    }
}
impl LoopControllerFlowNodeConfiguration {
    /// Creates a new builder-style object to manufacture [`LoopControllerFlowNodeConfiguration`](crate::types::LoopControllerFlowNodeConfiguration).
    pub fn builder() -> crate::types::builders::LoopControllerFlowNodeConfigurationBuilder {
        crate::types::builders::LoopControllerFlowNodeConfigurationBuilder::default()
    }
}

/// A builder for [`LoopControllerFlowNodeConfiguration`](crate::types::LoopControllerFlowNodeConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LoopControllerFlowNodeConfigurationBuilder {
    pub(crate) continue_condition: ::std::option::Option<crate::types::FlowCondition>,
    pub(crate) max_iterations: ::std::option::Option<i32>,
}
impl LoopControllerFlowNodeConfigurationBuilder {
    /// <p>Specifies the condition that determines when the flow exits the DoWhile loop. The loop executes until this condition evaluates to true.</p>
    /// This field is required.
    pub fn continue_condition(mut self, input: crate::types::FlowCondition) -> Self {
        self.continue_condition = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the condition that determines when the flow exits the DoWhile loop. The loop executes until this condition evaluates to true.</p>
    pub fn set_continue_condition(mut self, input: ::std::option::Option<crate::types::FlowCondition>) -> Self {
        self.continue_condition = input;
        self
    }
    /// <p>Specifies the condition that determines when the flow exits the DoWhile loop. The loop executes until this condition evaluates to true.</p>
    pub fn get_continue_condition(&self) -> &::std::option::Option<crate::types::FlowCondition> {
        &self.continue_condition
    }
    /// <p>Specifies the maximum number of times the DoWhile loop can iterate before the flow exits the loop.</p>
    pub fn max_iterations(mut self, input: i32) -> Self {
        self.max_iterations = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the maximum number of times the DoWhile loop can iterate before the flow exits the loop.</p>
    pub fn set_max_iterations(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_iterations = input;
        self
    }
    /// <p>Specifies the maximum number of times the DoWhile loop can iterate before the flow exits the loop.</p>
    pub fn get_max_iterations(&self) -> &::std::option::Option<i32> {
        &self.max_iterations
    }
    /// Consumes the builder and constructs a [`LoopControllerFlowNodeConfiguration`](crate::types::LoopControllerFlowNodeConfiguration).
    pub fn build(self) -> crate::types::LoopControllerFlowNodeConfiguration {
        crate::types::LoopControllerFlowNodeConfiguration {
            continue_condition: self.continue_condition,
            max_iterations: self.max_iterations.unwrap_or(10),
        }
    }
}
