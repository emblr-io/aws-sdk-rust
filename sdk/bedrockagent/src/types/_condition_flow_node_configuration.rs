// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a condition node in your flow. You can specify conditions that determine which node comes next in the flow. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/flows-nodes.html">Node types in a flow</a> in the Amazon Bedrock User Guide.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConditionFlowNodeConfiguration {
    /// <p>An array of conditions. Each member contains the name of a condition and an expression that defines the condition.</p>
    pub conditions: ::std::vec::Vec<crate::types::FlowCondition>,
}
impl ConditionFlowNodeConfiguration {
    /// <p>An array of conditions. Each member contains the name of a condition and an expression that defines the condition.</p>
    pub fn conditions(&self) -> &[crate::types::FlowCondition] {
        use std::ops::Deref;
        self.conditions.deref()
    }
}
impl ConditionFlowNodeConfiguration {
    /// Creates a new builder-style object to manufacture [`ConditionFlowNodeConfiguration`](crate::types::ConditionFlowNodeConfiguration).
    pub fn builder() -> crate::types::builders::ConditionFlowNodeConfigurationBuilder {
        crate::types::builders::ConditionFlowNodeConfigurationBuilder::default()
    }
}

/// A builder for [`ConditionFlowNodeConfiguration`](crate::types::ConditionFlowNodeConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConditionFlowNodeConfigurationBuilder {
    pub(crate) conditions: ::std::option::Option<::std::vec::Vec<crate::types::FlowCondition>>,
}
impl ConditionFlowNodeConfigurationBuilder {
    /// Appends an item to `conditions`.
    ///
    /// To override the contents of this collection use [`set_conditions`](Self::set_conditions).
    ///
    /// <p>An array of conditions. Each member contains the name of a condition and an expression that defines the condition.</p>
    pub fn conditions(mut self, input: crate::types::FlowCondition) -> Self {
        let mut v = self.conditions.unwrap_or_default();
        v.push(input);
        self.conditions = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of conditions. Each member contains the name of a condition and an expression that defines the condition.</p>
    pub fn set_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FlowCondition>>) -> Self {
        self.conditions = input;
        self
    }
    /// <p>An array of conditions. Each member contains the name of a condition and an expression that defines the condition.</p>
    pub fn get_conditions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FlowCondition>> {
        &self.conditions
    }
    /// Consumes the builder and constructs a [`ConditionFlowNodeConfiguration`](crate::types::ConditionFlowNodeConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`conditions`](crate::types::builders::ConditionFlowNodeConfigurationBuilder::conditions)
    pub fn build(self) -> ::std::result::Result<crate::types::ConditionFlowNodeConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConditionFlowNodeConfiguration {
            conditions: self.conditions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "conditions",
                    "conditions was not specified but it is required when building ConditionFlowNodeConfiguration",
                )
            })?,
        })
    }
}
