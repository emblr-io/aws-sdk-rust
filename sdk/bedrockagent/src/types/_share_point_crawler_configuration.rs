// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of the SharePoint content. For example, configuring specific types of SharePoint content.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SharePointCrawlerConfiguration {
    /// <p>The configuration of filtering the SharePoint content. For example, configuring regular expression patterns to include or exclude certain content.</p>
    pub filter_configuration: ::std::option::Option<crate::types::CrawlFilterConfiguration>,
}
impl SharePointCrawlerConfiguration {
    /// <p>The configuration of filtering the SharePoint content. For example, configuring regular expression patterns to include or exclude certain content.</p>
    pub fn filter_configuration(&self) -> ::std::option::Option<&crate::types::CrawlFilterConfiguration> {
        self.filter_configuration.as_ref()
    }
}
impl SharePointCrawlerConfiguration {
    /// Creates a new builder-style object to manufacture [`SharePointCrawlerConfiguration`](crate::types::SharePointCrawlerConfiguration).
    pub fn builder() -> crate::types::builders::SharePointCrawlerConfigurationBuilder {
        crate::types::builders::SharePointCrawlerConfigurationBuilder::default()
    }
}

/// A builder for [`SharePointCrawlerConfiguration`](crate::types::SharePointCrawlerConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SharePointCrawlerConfigurationBuilder {
    pub(crate) filter_configuration: ::std::option::Option<crate::types::CrawlFilterConfiguration>,
}
impl SharePointCrawlerConfigurationBuilder {
    /// <p>The configuration of filtering the SharePoint content. For example, configuring regular expression patterns to include or exclude certain content.</p>
    pub fn filter_configuration(mut self, input: crate::types::CrawlFilterConfiguration) -> Self {
        self.filter_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of filtering the SharePoint content. For example, configuring regular expression patterns to include or exclude certain content.</p>
    pub fn set_filter_configuration(mut self, input: ::std::option::Option<crate::types::CrawlFilterConfiguration>) -> Self {
        self.filter_configuration = input;
        self
    }
    /// <p>The configuration of filtering the SharePoint content. For example, configuring regular expression patterns to include or exclude certain content.</p>
    pub fn get_filter_configuration(&self) -> &::std::option::Option<crate::types::CrawlFilterConfiguration> {
        &self.filter_configuration
    }
    /// Consumes the builder and constructs a [`SharePointCrawlerConfiguration`](crate::types::SharePointCrawlerConfiguration).
    pub fn build(self) -> crate::types::SharePointCrawlerConfiguration {
        crate::types::SharePointCrawlerConfiguration {
            filter_configuration: self.filter_configuration,
        }
    }
}
