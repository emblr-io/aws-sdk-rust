// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configurations to use a prompt in a conversational format. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management-create.html">Create a prompt using Prompt management</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ChatPromptTemplateConfiguration {
    /// <p>Contains messages in the chat for the prompt.</p>
    pub messages: ::std::vec::Vec<crate::types::Message>,
    /// <p>Contains system prompts to provide context to the model or to describe how it should behave.</p>
    pub system: ::std::option::Option<::std::vec::Vec<crate::types::SystemContentBlock>>,
    /// <p>An array of the variables in the prompt template.</p>
    pub input_variables: ::std::option::Option<::std::vec::Vec<crate::types::PromptInputVariable>>,
    /// <p>Configuration information for the tools that the model can use when generating a response.</p>
    pub tool_configuration: ::std::option::Option<crate::types::ToolConfiguration>,
}
impl ChatPromptTemplateConfiguration {
    /// <p>Contains messages in the chat for the prompt.</p>
    pub fn messages(&self) -> &[crate::types::Message] {
        use std::ops::Deref;
        self.messages.deref()
    }
    /// <p>Contains system prompts to provide context to the model or to describe how it should behave.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.system.is_none()`.
    pub fn system(&self) -> &[crate::types::SystemContentBlock] {
        self.system.as_deref().unwrap_or_default()
    }
    /// <p>An array of the variables in the prompt template.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.input_variables.is_none()`.
    pub fn input_variables(&self) -> &[crate::types::PromptInputVariable] {
        self.input_variables.as_deref().unwrap_or_default()
    }
    /// <p>Configuration information for the tools that the model can use when generating a response.</p>
    pub fn tool_configuration(&self) -> ::std::option::Option<&crate::types::ToolConfiguration> {
        self.tool_configuration.as_ref()
    }
}
impl ::std::fmt::Debug for ChatPromptTemplateConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ChatPromptTemplateConfiguration");
        formatter.field("messages", &"*** Sensitive Data Redacted ***");
        formatter.field("system", &"*** Sensitive Data Redacted ***");
        formatter.field("input_variables", &"*** Sensitive Data Redacted ***");
        formatter.field("tool_configuration", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ChatPromptTemplateConfiguration {
    /// Creates a new builder-style object to manufacture [`ChatPromptTemplateConfiguration`](crate::types::ChatPromptTemplateConfiguration).
    pub fn builder() -> crate::types::builders::ChatPromptTemplateConfigurationBuilder {
        crate::types::builders::ChatPromptTemplateConfigurationBuilder::default()
    }
}

/// A builder for [`ChatPromptTemplateConfiguration`](crate::types::ChatPromptTemplateConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ChatPromptTemplateConfigurationBuilder {
    pub(crate) messages: ::std::option::Option<::std::vec::Vec<crate::types::Message>>,
    pub(crate) system: ::std::option::Option<::std::vec::Vec<crate::types::SystemContentBlock>>,
    pub(crate) input_variables: ::std::option::Option<::std::vec::Vec<crate::types::PromptInputVariable>>,
    pub(crate) tool_configuration: ::std::option::Option<crate::types::ToolConfiguration>,
}
impl ChatPromptTemplateConfigurationBuilder {
    /// Appends an item to `messages`.
    ///
    /// To override the contents of this collection use [`set_messages`](Self::set_messages).
    ///
    /// <p>Contains messages in the chat for the prompt.</p>
    pub fn messages(mut self, input: crate::types::Message) -> Self {
        let mut v = self.messages.unwrap_or_default();
        v.push(input);
        self.messages = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains messages in the chat for the prompt.</p>
    pub fn set_messages(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Message>>) -> Self {
        self.messages = input;
        self
    }
    /// <p>Contains messages in the chat for the prompt.</p>
    pub fn get_messages(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Message>> {
        &self.messages
    }
    /// Appends an item to `system`.
    ///
    /// To override the contents of this collection use [`set_system`](Self::set_system).
    ///
    /// <p>Contains system prompts to provide context to the model or to describe how it should behave.</p>
    pub fn system(mut self, input: crate::types::SystemContentBlock) -> Self {
        let mut v = self.system.unwrap_or_default();
        v.push(input);
        self.system = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains system prompts to provide context to the model or to describe how it should behave.</p>
    pub fn set_system(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SystemContentBlock>>) -> Self {
        self.system = input;
        self
    }
    /// <p>Contains system prompts to provide context to the model or to describe how it should behave.</p>
    pub fn get_system(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SystemContentBlock>> {
        &self.system
    }
    /// Appends an item to `input_variables`.
    ///
    /// To override the contents of this collection use [`set_input_variables`](Self::set_input_variables).
    ///
    /// <p>An array of the variables in the prompt template.</p>
    pub fn input_variables(mut self, input: crate::types::PromptInputVariable) -> Self {
        let mut v = self.input_variables.unwrap_or_default();
        v.push(input);
        self.input_variables = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of the variables in the prompt template.</p>
    pub fn set_input_variables(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PromptInputVariable>>) -> Self {
        self.input_variables = input;
        self
    }
    /// <p>An array of the variables in the prompt template.</p>
    pub fn get_input_variables(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PromptInputVariable>> {
        &self.input_variables
    }
    /// <p>Configuration information for the tools that the model can use when generating a response.</p>
    pub fn tool_configuration(mut self, input: crate::types::ToolConfiguration) -> Self {
        self.tool_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration information for the tools that the model can use when generating a response.</p>
    pub fn set_tool_configuration(mut self, input: ::std::option::Option<crate::types::ToolConfiguration>) -> Self {
        self.tool_configuration = input;
        self
    }
    /// <p>Configuration information for the tools that the model can use when generating a response.</p>
    pub fn get_tool_configuration(&self) -> &::std::option::Option<crate::types::ToolConfiguration> {
        &self.tool_configuration
    }
    /// Consumes the builder and constructs a [`ChatPromptTemplateConfiguration`](crate::types::ChatPromptTemplateConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`messages`](crate::types::builders::ChatPromptTemplateConfigurationBuilder::messages)
    pub fn build(self) -> ::std::result::Result<crate::types::ChatPromptTemplateConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ChatPromptTemplateConfiguration {
            messages: self.messages.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "messages",
                    "messages was not specified but it is required when building ChatPromptTemplateConfiguration",
                )
            })?,
            system: self.system,
            input_variables: self.input_variables,
            tool_configuration: self.tool_configuration,
        })
    }
}
impl ::std::fmt::Debug for ChatPromptTemplateConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ChatPromptTemplateConfigurationBuilder");
        formatter.field("messages", &"*** Sensitive Data Redacted ***");
        formatter.field("system", &"*** Sensitive Data Redacted ***");
        formatter.field("input_variables", &"*** Sensitive Data Redacted ***");
        formatter.field("tool_configuration", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
