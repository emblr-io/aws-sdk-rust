// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a malformed input expression in a node.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MalformedNodeInputExpressionFlowValidationDetails {
    /// <p>The name of the node containing the malformed input expression.</p>
    pub node: ::std::string::String,
    /// <p>The name of the input with the malformed expression.</p>
    pub input: ::std::string::String,
    /// <p>The error message describing why the input expression is malformed.</p>
    pub cause: ::std::string::String,
}
impl MalformedNodeInputExpressionFlowValidationDetails {
    /// <p>The name of the node containing the malformed input expression.</p>
    pub fn node(&self) -> &str {
        use std::ops::Deref;
        self.node.deref()
    }
    /// <p>The name of the input with the malformed expression.</p>
    pub fn input(&self) -> &str {
        use std::ops::Deref;
        self.input.deref()
    }
    /// <p>The error message describing why the input expression is malformed.</p>
    pub fn cause(&self) -> &str {
        use std::ops::Deref;
        self.cause.deref()
    }
}
impl MalformedNodeInputExpressionFlowValidationDetails {
    /// Creates a new builder-style object to manufacture [`MalformedNodeInputExpressionFlowValidationDetails`](crate::types::MalformedNodeInputExpressionFlowValidationDetails).
    pub fn builder() -> crate::types::builders::MalformedNodeInputExpressionFlowValidationDetailsBuilder {
        crate::types::builders::MalformedNodeInputExpressionFlowValidationDetailsBuilder::default()
    }
}

/// A builder for [`MalformedNodeInputExpressionFlowValidationDetails`](crate::types::MalformedNodeInputExpressionFlowValidationDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MalformedNodeInputExpressionFlowValidationDetailsBuilder {
    pub(crate) node: ::std::option::Option<::std::string::String>,
    pub(crate) input: ::std::option::Option<::std::string::String>,
    pub(crate) cause: ::std::option::Option<::std::string::String>,
}
impl MalformedNodeInputExpressionFlowValidationDetailsBuilder {
    /// <p>The name of the node containing the malformed input expression.</p>
    /// This field is required.
    pub fn node(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the node containing the malformed input expression.</p>
    pub fn set_node(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node = input;
        self
    }
    /// <p>The name of the node containing the malformed input expression.</p>
    pub fn get_node(&self) -> &::std::option::Option<::std::string::String> {
        &self.node
    }
    /// <p>The name of the input with the malformed expression.</p>
    /// This field is required.
    pub fn input(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the input with the malformed expression.</p>
    pub fn set_input(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input = input;
        self
    }
    /// <p>The name of the input with the malformed expression.</p>
    pub fn get_input(&self) -> &::std::option::Option<::std::string::String> {
        &self.input
    }
    /// <p>The error message describing why the input expression is malformed.</p>
    /// This field is required.
    pub fn cause(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cause = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error message describing why the input expression is malformed.</p>
    pub fn set_cause(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cause = input;
        self
    }
    /// <p>The error message describing why the input expression is malformed.</p>
    pub fn get_cause(&self) -> &::std::option::Option<::std::string::String> {
        &self.cause
    }
    /// Consumes the builder and constructs a [`MalformedNodeInputExpressionFlowValidationDetails`](crate::types::MalformedNodeInputExpressionFlowValidationDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`node`](crate::types::builders::MalformedNodeInputExpressionFlowValidationDetailsBuilder::node)
    /// - [`input`](crate::types::builders::MalformedNodeInputExpressionFlowValidationDetailsBuilder::input)
    /// - [`cause`](crate::types::builders::MalformedNodeInputExpressionFlowValidationDetailsBuilder::cause)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::MalformedNodeInputExpressionFlowValidationDetails, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::types::MalformedNodeInputExpressionFlowValidationDetails {
            node: self.node.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "node",
                    "node was not specified but it is required when building MalformedNodeInputExpressionFlowValidationDetails",
                )
            })?,
            input: self.input.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "input",
                    "input was not specified but it is required when building MalformedNodeInputExpressionFlowValidationDetails",
                )
            })?,
            cause: self.cause.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cause",
                    "cause was not specified but it is required when building MalformedNodeInputExpressionFlowValidationDetails",
                )
            })?,
        })
    }
}
