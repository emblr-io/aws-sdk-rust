// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains inference configurations related to model inference for a prompt. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/inference-parameters.html">Inference parameters</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PromptModelInferenceConfiguration {
    /// <p>Controls the randomness of the response. Choose a lower value for more predictable outputs and a higher value for more surprising outputs.</p>
    pub temperature: ::std::option::Option<f32>,
    /// <p>The percentage of most-likely candidates that the model considers for the next token.</p>
    pub top_p: ::std::option::Option<f32>,
    /// <p>The maximum number of tokens to return in the response.</p>
    pub max_tokens: ::std::option::Option<i32>,
    /// <p>A list of strings that define sequences after which the model will stop generating.</p>
    pub stop_sequences: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PromptModelInferenceConfiguration {
    /// <p>Controls the randomness of the response. Choose a lower value for more predictable outputs and a higher value for more surprising outputs.</p>
    pub fn temperature(&self) -> ::std::option::Option<f32> {
        self.temperature
    }
    /// <p>The percentage of most-likely candidates that the model considers for the next token.</p>
    pub fn top_p(&self) -> ::std::option::Option<f32> {
        self.top_p
    }
    /// <p>The maximum number of tokens to return in the response.</p>
    pub fn max_tokens(&self) -> ::std::option::Option<i32> {
        self.max_tokens
    }
    /// <p>A list of strings that define sequences after which the model will stop generating.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.stop_sequences.is_none()`.
    pub fn stop_sequences(&self) -> &[::std::string::String] {
        self.stop_sequences.as_deref().unwrap_or_default()
    }
}
impl PromptModelInferenceConfiguration {
    /// Creates a new builder-style object to manufacture [`PromptModelInferenceConfiguration`](crate::types::PromptModelInferenceConfiguration).
    pub fn builder() -> crate::types::builders::PromptModelInferenceConfigurationBuilder {
        crate::types::builders::PromptModelInferenceConfigurationBuilder::default()
    }
}

/// A builder for [`PromptModelInferenceConfiguration`](crate::types::PromptModelInferenceConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PromptModelInferenceConfigurationBuilder {
    pub(crate) temperature: ::std::option::Option<f32>,
    pub(crate) top_p: ::std::option::Option<f32>,
    pub(crate) max_tokens: ::std::option::Option<i32>,
    pub(crate) stop_sequences: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PromptModelInferenceConfigurationBuilder {
    /// <p>Controls the randomness of the response. Choose a lower value for more predictable outputs and a higher value for more surprising outputs.</p>
    pub fn temperature(mut self, input: f32) -> Self {
        self.temperature = ::std::option::Option::Some(input);
        self
    }
    /// <p>Controls the randomness of the response. Choose a lower value for more predictable outputs and a higher value for more surprising outputs.</p>
    pub fn set_temperature(mut self, input: ::std::option::Option<f32>) -> Self {
        self.temperature = input;
        self
    }
    /// <p>Controls the randomness of the response. Choose a lower value for more predictable outputs and a higher value for more surprising outputs.</p>
    pub fn get_temperature(&self) -> &::std::option::Option<f32> {
        &self.temperature
    }
    /// <p>The percentage of most-likely candidates that the model considers for the next token.</p>
    pub fn top_p(mut self, input: f32) -> Self {
        self.top_p = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage of most-likely candidates that the model considers for the next token.</p>
    pub fn set_top_p(mut self, input: ::std::option::Option<f32>) -> Self {
        self.top_p = input;
        self
    }
    /// <p>The percentage of most-likely candidates that the model considers for the next token.</p>
    pub fn get_top_p(&self) -> &::std::option::Option<f32> {
        &self.top_p
    }
    /// <p>The maximum number of tokens to return in the response.</p>
    pub fn max_tokens(mut self, input: i32) -> Self {
        self.max_tokens = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of tokens to return in the response.</p>
    pub fn set_max_tokens(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_tokens = input;
        self
    }
    /// <p>The maximum number of tokens to return in the response.</p>
    pub fn get_max_tokens(&self) -> &::std::option::Option<i32> {
        &self.max_tokens
    }
    /// Appends an item to `stop_sequences`.
    ///
    /// To override the contents of this collection use [`set_stop_sequences`](Self::set_stop_sequences).
    ///
    /// <p>A list of strings that define sequences after which the model will stop generating.</p>
    pub fn stop_sequences(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.stop_sequences.unwrap_or_default();
        v.push(input.into());
        self.stop_sequences = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of strings that define sequences after which the model will stop generating.</p>
    pub fn set_stop_sequences(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.stop_sequences = input;
        self
    }
    /// <p>A list of strings that define sequences after which the model will stop generating.</p>
    pub fn get_stop_sequences(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.stop_sequences
    }
    /// Consumes the builder and constructs a [`PromptModelInferenceConfiguration`](crate::types::PromptModelInferenceConfiguration).
    pub fn build(self) -> crate::types::PromptModelInferenceConfiguration {
        crate::types::PromptModelInferenceConfiguration {
            temperature: self.temperature,
            top_p: self.top_p,
            max_tokens: self.max_tokens,
            stop_sequences: self.stop_sequences,
        }
    }
}
