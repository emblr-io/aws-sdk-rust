// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configurations for authentication to Amazon Redshift Serverless.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RedshiftServerlessConfiguration {
    /// <p>The ARN of the Amazon Redshift workgroup.</p>
    pub workgroup_arn: ::std::string::String,
    /// <p>Specifies configurations for authentication to an Amazon Redshift provisioned data warehouse.</p>
    pub auth_configuration: ::std::option::Option<crate::types::RedshiftServerlessAuthConfiguration>,
}
impl RedshiftServerlessConfiguration {
    /// <p>The ARN of the Amazon Redshift workgroup.</p>
    pub fn workgroup_arn(&self) -> &str {
        use std::ops::Deref;
        self.workgroup_arn.deref()
    }
    /// <p>Specifies configurations for authentication to an Amazon Redshift provisioned data warehouse.</p>
    pub fn auth_configuration(&self) -> ::std::option::Option<&crate::types::RedshiftServerlessAuthConfiguration> {
        self.auth_configuration.as_ref()
    }
}
impl RedshiftServerlessConfiguration {
    /// Creates a new builder-style object to manufacture [`RedshiftServerlessConfiguration`](crate::types::RedshiftServerlessConfiguration).
    pub fn builder() -> crate::types::builders::RedshiftServerlessConfigurationBuilder {
        crate::types::builders::RedshiftServerlessConfigurationBuilder::default()
    }
}

/// A builder for [`RedshiftServerlessConfiguration`](crate::types::RedshiftServerlessConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RedshiftServerlessConfigurationBuilder {
    pub(crate) workgroup_arn: ::std::option::Option<::std::string::String>,
    pub(crate) auth_configuration: ::std::option::Option<crate::types::RedshiftServerlessAuthConfiguration>,
}
impl RedshiftServerlessConfigurationBuilder {
    /// <p>The ARN of the Amazon Redshift workgroup.</p>
    /// This field is required.
    pub fn workgroup_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workgroup_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Amazon Redshift workgroup.</p>
    pub fn set_workgroup_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workgroup_arn = input;
        self
    }
    /// <p>The ARN of the Amazon Redshift workgroup.</p>
    pub fn get_workgroup_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.workgroup_arn
    }
    /// <p>Specifies configurations for authentication to an Amazon Redshift provisioned data warehouse.</p>
    /// This field is required.
    pub fn auth_configuration(mut self, input: crate::types::RedshiftServerlessAuthConfiguration) -> Self {
        self.auth_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies configurations for authentication to an Amazon Redshift provisioned data warehouse.</p>
    pub fn set_auth_configuration(mut self, input: ::std::option::Option<crate::types::RedshiftServerlessAuthConfiguration>) -> Self {
        self.auth_configuration = input;
        self
    }
    /// <p>Specifies configurations for authentication to an Amazon Redshift provisioned data warehouse.</p>
    pub fn get_auth_configuration(&self) -> &::std::option::Option<crate::types::RedshiftServerlessAuthConfiguration> {
        &self.auth_configuration
    }
    /// Consumes the builder and constructs a [`RedshiftServerlessConfiguration`](crate::types::RedshiftServerlessConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`workgroup_arn`](crate::types::builders::RedshiftServerlessConfigurationBuilder::workgroup_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::RedshiftServerlessConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RedshiftServerlessConfiguration {
            workgroup_arn: self.workgroup_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "workgroup_arn",
                    "workgroup_arn was not specified but it is required when building RedshiftServerlessConfiguration",
                )
            })?,
            auth_configuration: self.auth_configuration,
        })
    }
}
