// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the content to ingest into a knowledge base connected to a custom data source. Choose a <code>sourceType</code> and include the field that corresponds to it.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomContent {
    /// <p>A unique identifier for the document.</p>
    pub custom_document_identifier: ::std::option::Option<crate::types::CustomDocumentIdentifier>,
    /// <p>The source of the data to ingest.</p>
    pub source_type: crate::types::CustomSourceType,
    /// <p>Contains information about the Amazon S3 location of the file from which to ingest data.</p>
    pub s3_location: ::std::option::Option<crate::types::CustomS3Location>,
    /// <p>Contains information about content defined inline to ingest into a knowledge base.</p>
    pub inline_content: ::std::option::Option<crate::types::InlineContent>,
}
impl CustomContent {
    /// <p>A unique identifier for the document.</p>
    pub fn custom_document_identifier(&self) -> ::std::option::Option<&crate::types::CustomDocumentIdentifier> {
        self.custom_document_identifier.as_ref()
    }
    /// <p>The source of the data to ingest.</p>
    pub fn source_type(&self) -> &crate::types::CustomSourceType {
        &self.source_type
    }
    /// <p>Contains information about the Amazon S3 location of the file from which to ingest data.</p>
    pub fn s3_location(&self) -> ::std::option::Option<&crate::types::CustomS3Location> {
        self.s3_location.as_ref()
    }
    /// <p>Contains information about content defined inline to ingest into a knowledge base.</p>
    pub fn inline_content(&self) -> ::std::option::Option<&crate::types::InlineContent> {
        self.inline_content.as_ref()
    }
}
impl CustomContent {
    /// Creates a new builder-style object to manufacture [`CustomContent`](crate::types::CustomContent).
    pub fn builder() -> crate::types::builders::CustomContentBuilder {
        crate::types::builders::CustomContentBuilder::default()
    }
}

/// A builder for [`CustomContent`](crate::types::CustomContent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CustomContentBuilder {
    pub(crate) custom_document_identifier: ::std::option::Option<crate::types::CustomDocumentIdentifier>,
    pub(crate) source_type: ::std::option::Option<crate::types::CustomSourceType>,
    pub(crate) s3_location: ::std::option::Option<crate::types::CustomS3Location>,
    pub(crate) inline_content: ::std::option::Option<crate::types::InlineContent>,
}
impl CustomContentBuilder {
    /// <p>A unique identifier for the document.</p>
    /// This field is required.
    pub fn custom_document_identifier(mut self, input: crate::types::CustomDocumentIdentifier) -> Self {
        self.custom_document_identifier = ::std::option::Option::Some(input);
        self
    }
    /// <p>A unique identifier for the document.</p>
    pub fn set_custom_document_identifier(mut self, input: ::std::option::Option<crate::types::CustomDocumentIdentifier>) -> Self {
        self.custom_document_identifier = input;
        self
    }
    /// <p>A unique identifier for the document.</p>
    pub fn get_custom_document_identifier(&self) -> &::std::option::Option<crate::types::CustomDocumentIdentifier> {
        &self.custom_document_identifier
    }
    /// <p>The source of the data to ingest.</p>
    /// This field is required.
    pub fn source_type(mut self, input: crate::types::CustomSourceType) -> Self {
        self.source_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source of the data to ingest.</p>
    pub fn set_source_type(mut self, input: ::std::option::Option<crate::types::CustomSourceType>) -> Self {
        self.source_type = input;
        self
    }
    /// <p>The source of the data to ingest.</p>
    pub fn get_source_type(&self) -> &::std::option::Option<crate::types::CustomSourceType> {
        &self.source_type
    }
    /// <p>Contains information about the Amazon S3 location of the file from which to ingest data.</p>
    pub fn s3_location(mut self, input: crate::types::CustomS3Location) -> Self {
        self.s3_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the Amazon S3 location of the file from which to ingest data.</p>
    pub fn set_s3_location(mut self, input: ::std::option::Option<crate::types::CustomS3Location>) -> Self {
        self.s3_location = input;
        self
    }
    /// <p>Contains information about the Amazon S3 location of the file from which to ingest data.</p>
    pub fn get_s3_location(&self) -> &::std::option::Option<crate::types::CustomS3Location> {
        &self.s3_location
    }
    /// <p>Contains information about content defined inline to ingest into a knowledge base.</p>
    pub fn inline_content(mut self, input: crate::types::InlineContent) -> Self {
        self.inline_content = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about content defined inline to ingest into a knowledge base.</p>
    pub fn set_inline_content(mut self, input: ::std::option::Option<crate::types::InlineContent>) -> Self {
        self.inline_content = input;
        self
    }
    /// <p>Contains information about content defined inline to ingest into a knowledge base.</p>
    pub fn get_inline_content(&self) -> &::std::option::Option<crate::types::InlineContent> {
        &self.inline_content
    }
    /// Consumes the builder and constructs a [`CustomContent`](crate::types::CustomContent).
    /// This method will fail if any of the following fields are not set:
    /// - [`source_type`](crate::types::builders::CustomContentBuilder::source_type)
    pub fn build(self) -> ::std::result::Result<crate::types::CustomContent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CustomContent {
            custom_document_identifier: self.custom_document_identifier,
            source_type: self.source_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_type",
                    "source_type was not specified but it is required when building CustomContent",
                )
            })?,
            s3_location: self.s3_location,
            inline_content: self.inline_content,
        })
    }
}
