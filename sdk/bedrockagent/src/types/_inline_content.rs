// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about content defined inline to ingest into a data source. Choose a <code>type</code> and include the field that corresponds to it.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InlineContent {
    /// <p>The type of inline content to define.</p>
    pub r#type: crate::types::InlineContentType,
    /// <p>Contains information about content defined inline in bytes.</p>
    pub byte_content: ::std::option::Option<crate::types::ByteContentDoc>,
    /// <p>Contains information about content defined inline in text.</p>
    pub text_content: ::std::option::Option<crate::types::TextContentDoc>,
}
impl InlineContent {
    /// <p>The type of inline content to define.</p>
    pub fn r#type(&self) -> &crate::types::InlineContentType {
        &self.r#type
    }
    /// <p>Contains information about content defined inline in bytes.</p>
    pub fn byte_content(&self) -> ::std::option::Option<&crate::types::ByteContentDoc> {
        self.byte_content.as_ref()
    }
    /// <p>Contains information about content defined inline in text.</p>
    pub fn text_content(&self) -> ::std::option::Option<&crate::types::TextContentDoc> {
        self.text_content.as_ref()
    }
}
impl InlineContent {
    /// Creates a new builder-style object to manufacture [`InlineContent`](crate::types::InlineContent).
    pub fn builder() -> crate::types::builders::InlineContentBuilder {
        crate::types::builders::InlineContentBuilder::default()
    }
}

/// A builder for [`InlineContent`](crate::types::InlineContent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InlineContentBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::InlineContentType>,
    pub(crate) byte_content: ::std::option::Option<crate::types::ByteContentDoc>,
    pub(crate) text_content: ::std::option::Option<crate::types::TextContentDoc>,
}
impl InlineContentBuilder {
    /// <p>The type of inline content to define.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::InlineContentType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of inline content to define.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::InlineContentType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of inline content to define.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::InlineContentType> {
        &self.r#type
    }
    /// <p>Contains information about content defined inline in bytes.</p>
    pub fn byte_content(mut self, input: crate::types::ByteContentDoc) -> Self {
        self.byte_content = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about content defined inline in bytes.</p>
    pub fn set_byte_content(mut self, input: ::std::option::Option<crate::types::ByteContentDoc>) -> Self {
        self.byte_content = input;
        self
    }
    /// <p>Contains information about content defined inline in bytes.</p>
    pub fn get_byte_content(&self) -> &::std::option::Option<crate::types::ByteContentDoc> {
        &self.byte_content
    }
    /// <p>Contains information about content defined inline in text.</p>
    pub fn text_content(mut self, input: crate::types::TextContentDoc) -> Self {
        self.text_content = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about content defined inline in text.</p>
    pub fn set_text_content(mut self, input: ::std::option::Option<crate::types::TextContentDoc>) -> Self {
        self.text_content = input;
        self
    }
    /// <p>Contains information about content defined inline in text.</p>
    pub fn get_text_content(&self) -> &::std::option::Option<crate::types::TextContentDoc> {
        &self.text_content
    }
    /// Consumes the builder and constructs a [`InlineContent`](crate::types::InlineContent).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::InlineContentBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::InlineContent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::InlineContent {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building InlineContent",
                )
            })?,
            byte_content: self.byte_content,
            text_content: self.text_content,
        })
    }
}
