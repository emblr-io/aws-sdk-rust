// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about content defined inline in bytes.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ByteContentDoc {
    /// <p>The MIME type of the content. For a list of MIME types, see <a href="https://www.iana.org/assignments/media-types/media-types.xhtml">Media Types</a>. The following MIME types are supported:</p>
    /// <ul>
    /// <li>
    /// <p>text/plain</p></li>
    /// <li>
    /// <p>text/html</p></li>
    /// <li>
    /// <p>text/csv</p></li>
    /// <li>
    /// <p>text/vtt</p></li>
    /// <li>
    /// <p>message/rfc822</p></li>
    /// <li>
    /// <p>application/xhtml+xml</p></li>
    /// <li>
    /// <p>application/pdf</p></li>
    /// <li>
    /// <p>application/msword</p></li>
    /// <li>
    /// <p>application/vnd.ms-word.document.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-word.template.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel.addin.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel.sheet.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel.template.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel.sheet.binary.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-spreadsheetml</p></li>
    /// <li>
    /// <p>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</p></li>
    /// <li>
    /// <p>application/vnd.openxmlformats-officedocument.spreadsheetml.template</p></li>
    /// <li>
    /// <p>application/vnd.openxmlformats-officedocument.wordprocessingml.document</p></li>
    /// <li>
    /// <p>application/vnd.openxmlformats-officedocument.wordprocessingml.template</p></li>
    /// </ul>
    pub mime_type: ::std::string::String,
    /// <p>The base64-encoded string of the content.</p>
    pub data: ::aws_smithy_types::Blob,
}
impl ByteContentDoc {
    /// <p>The MIME type of the content. For a list of MIME types, see <a href="https://www.iana.org/assignments/media-types/media-types.xhtml">Media Types</a>. The following MIME types are supported:</p>
    /// <ul>
    /// <li>
    /// <p>text/plain</p></li>
    /// <li>
    /// <p>text/html</p></li>
    /// <li>
    /// <p>text/csv</p></li>
    /// <li>
    /// <p>text/vtt</p></li>
    /// <li>
    /// <p>message/rfc822</p></li>
    /// <li>
    /// <p>application/xhtml+xml</p></li>
    /// <li>
    /// <p>application/pdf</p></li>
    /// <li>
    /// <p>application/msword</p></li>
    /// <li>
    /// <p>application/vnd.ms-word.document.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-word.template.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel.addin.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel.sheet.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel.template.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel.sheet.binary.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-spreadsheetml</p></li>
    /// <li>
    /// <p>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</p></li>
    /// <li>
    /// <p>application/vnd.openxmlformats-officedocument.spreadsheetml.template</p></li>
    /// <li>
    /// <p>application/vnd.openxmlformats-officedocument.wordprocessingml.document</p></li>
    /// <li>
    /// <p>application/vnd.openxmlformats-officedocument.wordprocessingml.template</p></li>
    /// </ul>
    pub fn mime_type(&self) -> &str {
        use std::ops::Deref;
        self.mime_type.deref()
    }
    /// <p>The base64-encoded string of the content.</p>
    pub fn data(&self) -> &::aws_smithy_types::Blob {
        &self.data
    }
}
impl ::std::fmt::Debug for ByteContentDoc {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ByteContentDoc");
        formatter.field("mime_type", &self.mime_type);
        formatter.field("data", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ByteContentDoc {
    /// Creates a new builder-style object to manufacture [`ByteContentDoc`](crate::types::ByteContentDoc).
    pub fn builder() -> crate::types::builders::ByteContentDocBuilder {
        crate::types::builders::ByteContentDocBuilder::default()
    }
}

/// A builder for [`ByteContentDoc`](crate::types::ByteContentDoc).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ByteContentDocBuilder {
    pub(crate) mime_type: ::std::option::Option<::std::string::String>,
    pub(crate) data: ::std::option::Option<::aws_smithy_types::Blob>,
}
impl ByteContentDocBuilder {
    /// <p>The MIME type of the content. For a list of MIME types, see <a href="https://www.iana.org/assignments/media-types/media-types.xhtml">Media Types</a>. The following MIME types are supported:</p>
    /// <ul>
    /// <li>
    /// <p>text/plain</p></li>
    /// <li>
    /// <p>text/html</p></li>
    /// <li>
    /// <p>text/csv</p></li>
    /// <li>
    /// <p>text/vtt</p></li>
    /// <li>
    /// <p>message/rfc822</p></li>
    /// <li>
    /// <p>application/xhtml+xml</p></li>
    /// <li>
    /// <p>application/pdf</p></li>
    /// <li>
    /// <p>application/msword</p></li>
    /// <li>
    /// <p>application/vnd.ms-word.document.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-word.template.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel.addin.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel.sheet.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel.template.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel.sheet.binary.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-spreadsheetml</p></li>
    /// <li>
    /// <p>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</p></li>
    /// <li>
    /// <p>application/vnd.openxmlformats-officedocument.spreadsheetml.template</p></li>
    /// <li>
    /// <p>application/vnd.openxmlformats-officedocument.wordprocessingml.document</p></li>
    /// <li>
    /// <p>application/vnd.openxmlformats-officedocument.wordprocessingml.template</p></li>
    /// </ul>
    /// This field is required.
    pub fn mime_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mime_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The MIME type of the content. For a list of MIME types, see <a href="https://www.iana.org/assignments/media-types/media-types.xhtml">Media Types</a>. The following MIME types are supported:</p>
    /// <ul>
    /// <li>
    /// <p>text/plain</p></li>
    /// <li>
    /// <p>text/html</p></li>
    /// <li>
    /// <p>text/csv</p></li>
    /// <li>
    /// <p>text/vtt</p></li>
    /// <li>
    /// <p>message/rfc822</p></li>
    /// <li>
    /// <p>application/xhtml+xml</p></li>
    /// <li>
    /// <p>application/pdf</p></li>
    /// <li>
    /// <p>application/msword</p></li>
    /// <li>
    /// <p>application/vnd.ms-word.document.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-word.template.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel.addin.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel.sheet.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel.template.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel.sheet.binary.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-spreadsheetml</p></li>
    /// <li>
    /// <p>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</p></li>
    /// <li>
    /// <p>application/vnd.openxmlformats-officedocument.spreadsheetml.template</p></li>
    /// <li>
    /// <p>application/vnd.openxmlformats-officedocument.wordprocessingml.document</p></li>
    /// <li>
    /// <p>application/vnd.openxmlformats-officedocument.wordprocessingml.template</p></li>
    /// </ul>
    pub fn set_mime_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mime_type = input;
        self
    }
    /// <p>The MIME type of the content. For a list of MIME types, see <a href="https://www.iana.org/assignments/media-types/media-types.xhtml">Media Types</a>. The following MIME types are supported:</p>
    /// <ul>
    /// <li>
    /// <p>text/plain</p></li>
    /// <li>
    /// <p>text/html</p></li>
    /// <li>
    /// <p>text/csv</p></li>
    /// <li>
    /// <p>text/vtt</p></li>
    /// <li>
    /// <p>message/rfc822</p></li>
    /// <li>
    /// <p>application/xhtml+xml</p></li>
    /// <li>
    /// <p>application/pdf</p></li>
    /// <li>
    /// <p>application/msword</p></li>
    /// <li>
    /// <p>application/vnd.ms-word.document.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-word.template.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel.addin.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel.sheet.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel.template.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-excel.sheet.binary.macroenabled.12</p></li>
    /// <li>
    /// <p>application/vnd.ms-spreadsheetml</p></li>
    /// <li>
    /// <p>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</p></li>
    /// <li>
    /// <p>application/vnd.openxmlformats-officedocument.spreadsheetml.template</p></li>
    /// <li>
    /// <p>application/vnd.openxmlformats-officedocument.wordprocessingml.document</p></li>
    /// <li>
    /// <p>application/vnd.openxmlformats-officedocument.wordprocessingml.template</p></li>
    /// </ul>
    pub fn get_mime_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.mime_type
    }
    /// <p>The base64-encoded string of the content.</p>
    /// This field is required.
    pub fn data(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.data = ::std::option::Option::Some(input);
        self
    }
    /// <p>The base64-encoded string of the content.</p>
    pub fn set_data(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.data = input;
        self
    }
    /// <p>The base64-encoded string of the content.</p>
    pub fn get_data(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.data
    }
    /// Consumes the builder and constructs a [`ByteContentDoc`](crate::types::ByteContentDoc).
    /// This method will fail if any of the following fields are not set:
    /// - [`mime_type`](crate::types::builders::ByteContentDocBuilder::mime_type)
    /// - [`data`](crate::types::builders::ByteContentDocBuilder::data)
    pub fn build(self) -> ::std::result::Result<crate::types::ByteContentDoc, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ByteContentDoc {
            mime_type: self.mime_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mime_type",
                    "mime_type was not specified but it is required when building ByteContentDoc",
                )
            })?,
            data: self.data.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "data",
                    "data was not specified but it is required when building ByteContentDoc",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for ByteContentDocBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ByteContentDocBuilder");
        formatter.field("mime_type", &self.mime_type);
        formatter.field("data", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
