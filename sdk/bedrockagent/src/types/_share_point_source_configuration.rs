// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The endpoint information to connect to your SharePoint data source.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SharePointSourceConfiguration {
    /// <p>The identifier of your Microsoft 365 tenant.</p>
    pub tenant_id: ::std::option::Option<::std::string::String>,
    /// <p>The domain of your SharePoint instance or site URL/URLs.</p>
    pub domain: ::std::string::String,
    /// <p>A list of one or more SharePoint site URLs.</p>
    pub site_urls: ::std::vec::Vec<::std::string::String>,
    /// <p>The supported host type, whether online/cloud or server/on-premises.</p>
    pub host_type: crate::types::SharePointHostType,
    /// <p>The supported authentication type to authenticate and connect to your SharePoint site/sites.</p>
    pub auth_type: crate::types::SharePointAuthType,
    /// <p>The Amazon Resource Name of an Secrets Manager secret that stores your authentication credentials for your SharePoint site/sites. For more information on the key-value pairs that must be included in your secret, depending on your authentication type, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/sharepoint-data-source-connector.html#configuration-sharepoint-connector">SharePoint connection configuration</a>.</p>
    pub credentials_secret_arn: ::std::string::String,
}
impl SharePointSourceConfiguration {
    /// <p>The identifier of your Microsoft 365 tenant.</p>
    pub fn tenant_id(&self) -> ::std::option::Option<&str> {
        self.tenant_id.as_deref()
    }
    /// <p>The domain of your SharePoint instance or site URL/URLs.</p>
    pub fn domain(&self) -> &str {
        use std::ops::Deref;
        self.domain.deref()
    }
    /// <p>A list of one or more SharePoint site URLs.</p>
    pub fn site_urls(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.site_urls.deref()
    }
    /// <p>The supported host type, whether online/cloud or server/on-premises.</p>
    pub fn host_type(&self) -> &crate::types::SharePointHostType {
        &self.host_type
    }
    /// <p>The supported authentication type to authenticate and connect to your SharePoint site/sites.</p>
    pub fn auth_type(&self) -> &crate::types::SharePointAuthType {
        &self.auth_type
    }
    /// <p>The Amazon Resource Name of an Secrets Manager secret that stores your authentication credentials for your SharePoint site/sites. For more information on the key-value pairs that must be included in your secret, depending on your authentication type, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/sharepoint-data-source-connector.html#configuration-sharepoint-connector">SharePoint connection configuration</a>.</p>
    pub fn credentials_secret_arn(&self) -> &str {
        use std::ops::Deref;
        self.credentials_secret_arn.deref()
    }
}
impl SharePointSourceConfiguration {
    /// Creates a new builder-style object to manufacture [`SharePointSourceConfiguration`](crate::types::SharePointSourceConfiguration).
    pub fn builder() -> crate::types::builders::SharePointSourceConfigurationBuilder {
        crate::types::builders::SharePointSourceConfigurationBuilder::default()
    }
}

/// A builder for [`SharePointSourceConfiguration`](crate::types::SharePointSourceConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SharePointSourceConfigurationBuilder {
    pub(crate) tenant_id: ::std::option::Option<::std::string::String>,
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) site_urls: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) host_type: ::std::option::Option<crate::types::SharePointHostType>,
    pub(crate) auth_type: ::std::option::Option<crate::types::SharePointAuthType>,
    pub(crate) credentials_secret_arn: ::std::option::Option<::std::string::String>,
}
impl SharePointSourceConfigurationBuilder {
    /// <p>The identifier of your Microsoft 365 tenant.</p>
    pub fn tenant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tenant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of your Microsoft 365 tenant.</p>
    pub fn set_tenant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tenant_id = input;
        self
    }
    /// <p>The identifier of your Microsoft 365 tenant.</p>
    pub fn get_tenant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.tenant_id
    }
    /// <p>The domain of your SharePoint instance or site URL/URLs.</p>
    /// This field is required.
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain of your SharePoint instance or site URL/URLs.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The domain of your SharePoint instance or site URL/URLs.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// Appends an item to `site_urls`.
    ///
    /// To override the contents of this collection use [`set_site_urls`](Self::set_site_urls).
    ///
    /// <p>A list of one or more SharePoint site URLs.</p>
    pub fn site_urls(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.site_urls.unwrap_or_default();
        v.push(input.into());
        self.site_urls = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of one or more SharePoint site URLs.</p>
    pub fn set_site_urls(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.site_urls = input;
        self
    }
    /// <p>A list of one or more SharePoint site URLs.</p>
    pub fn get_site_urls(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.site_urls
    }
    /// <p>The supported host type, whether online/cloud or server/on-premises.</p>
    /// This field is required.
    pub fn host_type(mut self, input: crate::types::SharePointHostType) -> Self {
        self.host_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The supported host type, whether online/cloud or server/on-premises.</p>
    pub fn set_host_type(mut self, input: ::std::option::Option<crate::types::SharePointHostType>) -> Self {
        self.host_type = input;
        self
    }
    /// <p>The supported host type, whether online/cloud or server/on-premises.</p>
    pub fn get_host_type(&self) -> &::std::option::Option<crate::types::SharePointHostType> {
        &self.host_type
    }
    /// <p>The supported authentication type to authenticate and connect to your SharePoint site/sites.</p>
    /// This field is required.
    pub fn auth_type(mut self, input: crate::types::SharePointAuthType) -> Self {
        self.auth_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The supported authentication type to authenticate and connect to your SharePoint site/sites.</p>
    pub fn set_auth_type(mut self, input: ::std::option::Option<crate::types::SharePointAuthType>) -> Self {
        self.auth_type = input;
        self
    }
    /// <p>The supported authentication type to authenticate and connect to your SharePoint site/sites.</p>
    pub fn get_auth_type(&self) -> &::std::option::Option<crate::types::SharePointAuthType> {
        &self.auth_type
    }
    /// <p>The Amazon Resource Name of an Secrets Manager secret that stores your authentication credentials for your SharePoint site/sites. For more information on the key-value pairs that must be included in your secret, depending on your authentication type, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/sharepoint-data-source-connector.html#configuration-sharepoint-connector">SharePoint connection configuration</a>.</p>
    /// This field is required.
    pub fn credentials_secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.credentials_secret_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name of an Secrets Manager secret that stores your authentication credentials for your SharePoint site/sites. For more information on the key-value pairs that must be included in your secret, depending on your authentication type, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/sharepoint-data-source-connector.html#configuration-sharepoint-connector">SharePoint connection configuration</a>.</p>
    pub fn set_credentials_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.credentials_secret_arn = input;
        self
    }
    /// <p>The Amazon Resource Name of an Secrets Manager secret that stores your authentication credentials for your SharePoint site/sites. For more information on the key-value pairs that must be included in your secret, depending on your authentication type, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/sharepoint-data-source-connector.html#configuration-sharepoint-connector">SharePoint connection configuration</a>.</p>
    pub fn get_credentials_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.credentials_secret_arn
    }
    /// Consumes the builder and constructs a [`SharePointSourceConfiguration`](crate::types::SharePointSourceConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`domain`](crate::types::builders::SharePointSourceConfigurationBuilder::domain)
    /// - [`site_urls`](crate::types::builders::SharePointSourceConfigurationBuilder::site_urls)
    /// - [`host_type`](crate::types::builders::SharePointSourceConfigurationBuilder::host_type)
    /// - [`auth_type`](crate::types::builders::SharePointSourceConfigurationBuilder::auth_type)
    /// - [`credentials_secret_arn`](crate::types::builders::SharePointSourceConfigurationBuilder::credentials_secret_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::SharePointSourceConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SharePointSourceConfiguration {
            tenant_id: self.tenant_id,
            domain: self.domain.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain",
                    "domain was not specified but it is required when building SharePointSourceConfiguration",
                )
            })?,
            site_urls: self.site_urls.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "site_urls",
                    "site_urls was not specified but it is required when building SharePointSourceConfiguration",
                )
            })?,
            host_type: self.host_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "host_type",
                    "host_type was not specified but it is required when building SharePointSourceConfiguration",
                )
            })?,
            auth_type: self.auth_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "auth_type",
                    "auth_type was not specified but it is required when building SharePointSourceConfiguration",
                )
            })?,
            credentials_secret_arn: self.credentials_secret_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "credentials_secret_arn",
                    "credentials_secret_arn was not specified but it is required when building SharePointSourceConfiguration",
                )
            })?,
        })
    }
}
