// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configurations for an inline code node in your flow. Inline code nodes let you write and execute code directly within your flow, enabling data transformations, custom logic, and integrations without needing an external Lambda function.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct InlineCodeFlowNodeConfiguration {
    /// <p>The code that's executed in your inline code node. The code can access input data from previous nodes in the flow, perform operations on that data, and produce output that can be used by other nodes in your flow.</p>
    /// <p>The code must be valid in the programming <code>language</code> that you specify.</p>
    pub code: ::std::string::String,
    /// <p>The programming language used by your inline code node.</p>
    /// <p>The code must be valid in the programming <code>language</code> that you specify. Currently, only Python 3 (<code>Python_3</code>) is supported.</p>
    pub language: crate::types::SupportedLanguages,
}
impl InlineCodeFlowNodeConfiguration {
    /// <p>The code that's executed in your inline code node. The code can access input data from previous nodes in the flow, perform operations on that data, and produce output that can be used by other nodes in your flow.</p>
    /// <p>The code must be valid in the programming <code>language</code> that you specify.</p>
    pub fn code(&self) -> &str {
        use std::ops::Deref;
        self.code.deref()
    }
    /// <p>The programming language used by your inline code node.</p>
    /// <p>The code must be valid in the programming <code>language</code> that you specify. Currently, only Python 3 (<code>Python_3</code>) is supported.</p>
    pub fn language(&self) -> &crate::types::SupportedLanguages {
        &self.language
    }
}
impl ::std::fmt::Debug for InlineCodeFlowNodeConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InlineCodeFlowNodeConfiguration");
        formatter.field("code", &"*** Sensitive Data Redacted ***");
        formatter.field("language", &self.language);
        formatter.finish()
    }
}
impl InlineCodeFlowNodeConfiguration {
    /// Creates a new builder-style object to manufacture [`InlineCodeFlowNodeConfiguration`](crate::types::InlineCodeFlowNodeConfiguration).
    pub fn builder() -> crate::types::builders::InlineCodeFlowNodeConfigurationBuilder {
        crate::types::builders::InlineCodeFlowNodeConfigurationBuilder::default()
    }
}

/// A builder for [`InlineCodeFlowNodeConfiguration`](crate::types::InlineCodeFlowNodeConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct InlineCodeFlowNodeConfigurationBuilder {
    pub(crate) code: ::std::option::Option<::std::string::String>,
    pub(crate) language: ::std::option::Option<crate::types::SupportedLanguages>,
}
impl InlineCodeFlowNodeConfigurationBuilder {
    /// <p>The code that's executed in your inline code node. The code can access input data from previous nodes in the flow, perform operations on that data, and produce output that can be used by other nodes in your flow.</p>
    /// <p>The code must be valid in the programming <code>language</code> that you specify.</p>
    /// This field is required.
    pub fn code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The code that's executed in your inline code node. The code can access input data from previous nodes in the flow, perform operations on that data, and produce output that can be used by other nodes in your flow.</p>
    /// <p>The code must be valid in the programming <code>language</code> that you specify.</p>
    pub fn set_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>The code that's executed in your inline code node. The code can access input data from previous nodes in the flow, perform operations on that data, and produce output that can be used by other nodes in your flow.</p>
    /// <p>The code must be valid in the programming <code>language</code> that you specify.</p>
    pub fn get_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.code
    }
    /// <p>The programming language used by your inline code node.</p>
    /// <p>The code must be valid in the programming <code>language</code> that you specify. Currently, only Python 3 (<code>Python_3</code>) is supported.</p>
    /// This field is required.
    pub fn language(mut self, input: crate::types::SupportedLanguages) -> Self {
        self.language = ::std::option::Option::Some(input);
        self
    }
    /// <p>The programming language used by your inline code node.</p>
    /// <p>The code must be valid in the programming <code>language</code> that you specify. Currently, only Python 3 (<code>Python_3</code>) is supported.</p>
    pub fn set_language(mut self, input: ::std::option::Option<crate::types::SupportedLanguages>) -> Self {
        self.language = input;
        self
    }
    /// <p>The programming language used by your inline code node.</p>
    /// <p>The code must be valid in the programming <code>language</code> that you specify. Currently, only Python 3 (<code>Python_3</code>) is supported.</p>
    pub fn get_language(&self) -> &::std::option::Option<crate::types::SupportedLanguages> {
        &self.language
    }
    /// Consumes the builder and constructs a [`InlineCodeFlowNodeConfiguration`](crate::types::InlineCodeFlowNodeConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`code`](crate::types::builders::InlineCodeFlowNodeConfigurationBuilder::code)
    /// - [`language`](crate::types::builders::InlineCodeFlowNodeConfigurationBuilder::language)
    pub fn build(self) -> ::std::result::Result<crate::types::InlineCodeFlowNodeConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::InlineCodeFlowNodeConfiguration {
            code: self.code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "code",
                    "code was not specified but it is required when building InlineCodeFlowNodeConfiguration",
                )
            })?,
            language: self.language.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "language",
                    "language was not specified but it is required when building InlineCodeFlowNodeConfiguration",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for InlineCodeFlowNodeConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InlineCodeFlowNodeConfigurationBuilder");
        formatter.field("code", &"*** Sensitive Data Redacted ***");
        formatter.field("language", &self.language);
        formatter.finish()
    }
}
