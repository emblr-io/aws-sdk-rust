// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a condition in the condition node.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct FlowCondition {
    /// <p>A name for the condition that you can reference.</p>
    pub name: ::std::string::String,
    /// <p>Defines the condition. You must refer to at least one of the inputs in the condition. For more information, expand the Condition node section in <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/flows-how-it-works.html#flows-nodes">Node types in prompt flows</a>.</p>
    pub expression: ::std::option::Option<::std::string::String>,
}
impl FlowCondition {
    /// <p>A name for the condition that you can reference.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Defines the condition. You must refer to at least one of the inputs in the condition. For more information, expand the Condition node section in <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/flows-how-it-works.html#flows-nodes">Node types in prompt flows</a>.</p>
    pub fn expression(&self) -> ::std::option::Option<&str> {
        self.expression.as_deref()
    }
}
impl ::std::fmt::Debug for FlowCondition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FlowCondition");
        formatter.field("name", &self.name);
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl FlowCondition {
    /// Creates a new builder-style object to manufacture [`FlowCondition`](crate::types::FlowCondition).
    pub fn builder() -> crate::types::builders::FlowConditionBuilder {
        crate::types::builders::FlowConditionBuilder::default()
    }
}

/// A builder for [`FlowCondition`](crate::types::FlowCondition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct FlowConditionBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) expression: ::std::option::Option<::std::string::String>,
}
impl FlowConditionBuilder {
    /// <p>A name for the condition that you can reference.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the condition that you can reference.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name for the condition that you can reference.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Defines the condition. You must refer to at least one of the inputs in the condition. For more information, expand the Condition node section in <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/flows-how-it-works.html#flows-nodes">Node types in prompt flows</a>.</p>
    pub fn expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Defines the condition. You must refer to at least one of the inputs in the condition. For more information, expand the Condition node section in <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/flows-how-it-works.html#flows-nodes">Node types in prompt flows</a>.</p>
    pub fn set_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expression = input;
        self
    }
    /// <p>Defines the condition. You must refer to at least one of the inputs in the condition. For more information, expand the Condition node section in <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/flows-how-it-works.html#flows-nodes">Node types in prompt flows</a>.</p>
    pub fn get_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.expression
    }
    /// Consumes the builder and constructs a [`FlowCondition`](crate::types::FlowCondition).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::FlowConditionBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::FlowCondition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FlowCondition {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building FlowCondition",
                )
            })?,
            expression: self.expression,
        })
    }
}
impl ::std::fmt::Debug for FlowConditionBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FlowConditionBuilder");
        formatter.field("name", &self.name);
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
