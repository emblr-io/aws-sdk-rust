// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of web URLs that you want to crawl. You should be authorized to crawl the URLs.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UrlConfiguration {
    /// <p>One or more seed or starting point URLs.</p>
    pub seed_urls: ::std::option::Option<::std::vec::Vec<crate::types::SeedUrl>>,
}
impl UrlConfiguration {
    /// <p>One or more seed or starting point URLs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.seed_urls.is_none()`.
    pub fn seed_urls(&self) -> &[crate::types::SeedUrl] {
        self.seed_urls.as_deref().unwrap_or_default()
    }
}
impl UrlConfiguration {
    /// Creates a new builder-style object to manufacture [`UrlConfiguration`](crate::types::UrlConfiguration).
    pub fn builder() -> crate::types::builders::UrlConfigurationBuilder {
        crate::types::builders::UrlConfigurationBuilder::default()
    }
}

/// A builder for [`UrlConfiguration`](crate::types::UrlConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UrlConfigurationBuilder {
    pub(crate) seed_urls: ::std::option::Option<::std::vec::Vec<crate::types::SeedUrl>>,
}
impl UrlConfigurationBuilder {
    /// Appends an item to `seed_urls`.
    ///
    /// To override the contents of this collection use [`set_seed_urls`](Self::set_seed_urls).
    ///
    /// <p>One or more seed or starting point URLs.</p>
    pub fn seed_urls(mut self, input: crate::types::SeedUrl) -> Self {
        let mut v = self.seed_urls.unwrap_or_default();
        v.push(input);
        self.seed_urls = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more seed or starting point URLs.</p>
    pub fn set_seed_urls(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SeedUrl>>) -> Self {
        self.seed_urls = input;
        self
    }
    /// <p>One or more seed or starting point URLs.</p>
    pub fn get_seed_urls(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SeedUrl>> {
        &self.seed_urls
    }
    /// Consumes the builder and constructs a [`UrlConfiguration`](crate::types::UrlConfiguration).
    pub fn build(self) -> crate::types::UrlConfiguration {
        crate::types::UrlConfiguration { seed_urls: self.seed_urls }
    }
}
