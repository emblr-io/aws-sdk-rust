// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a column in the current table for the query engine to consider.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QueryGenerationColumn {
    /// <p>The name of the column for which the other fields in this object apply.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the column that helps the query engine understand the contents of the column.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether to include or exclude the column during query generation. If you specify <code>EXCLUDE</code>, the column will be ignored. If you specify <code>INCLUDE</code>, all other columns in the table will be ignored.</p>
    pub inclusion: ::std::option::Option<crate::types::IncludeExclude>,
}
impl QueryGenerationColumn {
    /// <p>The name of the column for which the other fields in this object apply.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the column that helps the query engine understand the contents of the column.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Specifies whether to include or exclude the column during query generation. If you specify <code>EXCLUDE</code>, the column will be ignored. If you specify <code>INCLUDE</code>, all other columns in the table will be ignored.</p>
    pub fn inclusion(&self) -> ::std::option::Option<&crate::types::IncludeExclude> {
        self.inclusion.as_ref()
    }
}
impl QueryGenerationColumn {
    /// Creates a new builder-style object to manufacture [`QueryGenerationColumn`](crate::types::QueryGenerationColumn).
    pub fn builder() -> crate::types::builders::QueryGenerationColumnBuilder {
        crate::types::builders::QueryGenerationColumnBuilder::default()
    }
}

/// A builder for [`QueryGenerationColumn`](crate::types::QueryGenerationColumn).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QueryGenerationColumnBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) inclusion: ::std::option::Option<crate::types::IncludeExclude>,
}
impl QueryGenerationColumnBuilder {
    /// <p>The name of the column for which the other fields in this object apply.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the column for which the other fields in this object apply.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the column for which the other fields in this object apply.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of the column that helps the query engine understand the contents of the column.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the column that helps the query engine understand the contents of the column.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the column that helps the query engine understand the contents of the column.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Specifies whether to include or exclude the column during query generation. If you specify <code>EXCLUDE</code>, the column will be ignored. If you specify <code>INCLUDE</code>, all other columns in the table will be ignored.</p>
    pub fn inclusion(mut self, input: crate::types::IncludeExclude) -> Self {
        self.inclusion = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to include or exclude the column during query generation. If you specify <code>EXCLUDE</code>, the column will be ignored. If you specify <code>INCLUDE</code>, all other columns in the table will be ignored.</p>
    pub fn set_inclusion(mut self, input: ::std::option::Option<crate::types::IncludeExclude>) -> Self {
        self.inclusion = input;
        self
    }
    /// <p>Specifies whether to include or exclude the column during query generation. If you specify <code>EXCLUDE</code>, the column will be ignored. If you specify <code>INCLUDE</code>, all other columns in the table will be ignored.</p>
    pub fn get_inclusion(&self) -> &::std::option::Option<crate::types::IncludeExclude> {
        &self.inclusion
    }
    /// Consumes the builder and constructs a [`QueryGenerationColumn`](crate::types::QueryGenerationColumn).
    pub fn build(self) -> crate::types::QueryGenerationColumn {
        crate::types::QueryGenerationColumn {
            name: self.name,
            description: self.description,
            inclusion: self.inclusion,
        }
    }
}
