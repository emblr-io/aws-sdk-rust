// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the content of a document. Choose a <code>dataSourceType</code> and include the field that corresponds to it.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DocumentContent {
    /// <p>The type of data source that is connected to the knowledge base to which to ingest this document.</p>
    pub data_source_type: crate::types::ContentDataSourceType,
    /// <p>Contains information about the content to ingest into a knowledge base connected to a custom data source.</p>
    pub custom: ::std::option::Option<crate::types::CustomContent>,
    /// <p>Contains information about the content to ingest into a knowledge base connected to an Amazon S3 data source</p>
    pub s3: ::std::option::Option<crate::types::S3Content>,
}
impl DocumentContent {
    /// <p>The type of data source that is connected to the knowledge base to which to ingest this document.</p>
    pub fn data_source_type(&self) -> &crate::types::ContentDataSourceType {
        &self.data_source_type
    }
    /// <p>Contains information about the content to ingest into a knowledge base connected to a custom data source.</p>
    pub fn custom(&self) -> ::std::option::Option<&crate::types::CustomContent> {
        self.custom.as_ref()
    }
    /// <p>Contains information about the content to ingest into a knowledge base connected to an Amazon S3 data source</p>
    pub fn s3(&self) -> ::std::option::Option<&crate::types::S3Content> {
        self.s3.as_ref()
    }
}
impl DocumentContent {
    /// Creates a new builder-style object to manufacture [`DocumentContent`](crate::types::DocumentContent).
    pub fn builder() -> crate::types::builders::DocumentContentBuilder {
        crate::types::builders::DocumentContentBuilder::default()
    }
}

/// A builder for [`DocumentContent`](crate::types::DocumentContent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DocumentContentBuilder {
    pub(crate) data_source_type: ::std::option::Option<crate::types::ContentDataSourceType>,
    pub(crate) custom: ::std::option::Option<crate::types::CustomContent>,
    pub(crate) s3: ::std::option::Option<crate::types::S3Content>,
}
impl DocumentContentBuilder {
    /// <p>The type of data source that is connected to the knowledge base to which to ingest this document.</p>
    /// This field is required.
    pub fn data_source_type(mut self, input: crate::types::ContentDataSourceType) -> Self {
        self.data_source_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of data source that is connected to the knowledge base to which to ingest this document.</p>
    pub fn set_data_source_type(mut self, input: ::std::option::Option<crate::types::ContentDataSourceType>) -> Self {
        self.data_source_type = input;
        self
    }
    /// <p>The type of data source that is connected to the knowledge base to which to ingest this document.</p>
    pub fn get_data_source_type(&self) -> &::std::option::Option<crate::types::ContentDataSourceType> {
        &self.data_source_type
    }
    /// <p>Contains information about the content to ingest into a knowledge base connected to a custom data source.</p>
    pub fn custom(mut self, input: crate::types::CustomContent) -> Self {
        self.custom = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the content to ingest into a knowledge base connected to a custom data source.</p>
    pub fn set_custom(mut self, input: ::std::option::Option<crate::types::CustomContent>) -> Self {
        self.custom = input;
        self
    }
    /// <p>Contains information about the content to ingest into a knowledge base connected to a custom data source.</p>
    pub fn get_custom(&self) -> &::std::option::Option<crate::types::CustomContent> {
        &self.custom
    }
    /// <p>Contains information about the content to ingest into a knowledge base connected to an Amazon S3 data source</p>
    pub fn s3(mut self, input: crate::types::S3Content) -> Self {
        self.s3 = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the content to ingest into a knowledge base connected to an Amazon S3 data source</p>
    pub fn set_s3(mut self, input: ::std::option::Option<crate::types::S3Content>) -> Self {
        self.s3 = input;
        self
    }
    /// <p>Contains information about the content to ingest into a knowledge base connected to an Amazon S3 data source</p>
    pub fn get_s3(&self) -> &::std::option::Option<crate::types::S3Content> {
        &self.s3
    }
    /// Consumes the builder and constructs a [`DocumentContent`](crate::types::DocumentContent).
    /// This method will fail if any of the following fields are not set:
    /// - [`data_source_type`](crate::types::builders::DocumentContentBuilder::data_source_type)
    pub fn build(self) -> ::std::result::Result<crate::types::DocumentContent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DocumentContent {
            data_source_type: self.data_source_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "data_source_type",
                    "data_source_type was not specified but it is required when building DocumentContent",
                )
            })?,
            custom: self.custom,
            s3: self.s3,
        })
    }
}
