// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of filtering certain objects or content types of the data source.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PatternObjectFilterConfiguration {
    /// <p>The configuration of specific filters applied to your data source content. You can filter out or include certain content.</p>
    pub filters: ::std::vec::Vec<crate::types::PatternObjectFilter>,
}
impl PatternObjectFilterConfiguration {
    /// <p>The configuration of specific filters applied to your data source content. You can filter out or include certain content.</p>
    pub fn filters(&self) -> &[crate::types::PatternObjectFilter] {
        use std::ops::Deref;
        self.filters.deref()
    }
}
impl ::std::fmt::Debug for PatternObjectFilterConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PatternObjectFilterConfiguration");
        formatter.field("filters", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl PatternObjectFilterConfiguration {
    /// Creates a new builder-style object to manufacture [`PatternObjectFilterConfiguration`](crate::types::PatternObjectFilterConfiguration).
    pub fn builder() -> crate::types::builders::PatternObjectFilterConfigurationBuilder {
        crate::types::builders::PatternObjectFilterConfigurationBuilder::default()
    }
}

/// A builder for [`PatternObjectFilterConfiguration`](crate::types::PatternObjectFilterConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct PatternObjectFilterConfigurationBuilder {
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::PatternObjectFilter>>,
}
impl PatternObjectFilterConfigurationBuilder {
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The configuration of specific filters applied to your data source content. You can filter out or include certain content.</p>
    pub fn filters(mut self, input: crate::types::PatternObjectFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The configuration of specific filters applied to your data source content. You can filter out or include certain content.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PatternObjectFilter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>The configuration of specific filters applied to your data source content. You can filter out or include certain content.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PatternObjectFilter>> {
        &self.filters
    }
    /// Consumes the builder and constructs a [`PatternObjectFilterConfiguration`](crate::types::PatternObjectFilterConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`filters`](crate::types::builders::PatternObjectFilterConfigurationBuilder::filters)
    pub fn build(self) -> ::std::result::Result<crate::types::PatternObjectFilterConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PatternObjectFilterConfiguration {
            filters: self.filters.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "filters",
                    "filters was not specified but it is required when building PatternObjectFilterConfiguration",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for PatternObjectFilterConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PatternObjectFilterConfigurationBuilder");
        formatter.field("filters", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
