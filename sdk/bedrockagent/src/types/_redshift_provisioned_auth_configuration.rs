// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configurations for authentication to an Amazon Redshift provisioned data warehouse. Specify the type of authentication to use in the <code>type</code> field and include the corresponding field. If you specify IAM authentication, you don't need to include another field.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RedshiftProvisionedAuthConfiguration {
    /// <p>The type of authentication to use.</p>
    pub r#type: crate::types::RedshiftProvisionedAuthType,
    /// <p>The database username for authentication to an Amazon Redshift provisioned data warehouse.</p>
    pub database_user: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of an Secrets Manager secret for authentication.</p>
    pub username_password_secret_arn: ::std::option::Option<::std::string::String>,
}
impl RedshiftProvisionedAuthConfiguration {
    /// <p>The type of authentication to use.</p>
    pub fn r#type(&self) -> &crate::types::RedshiftProvisionedAuthType {
        &self.r#type
    }
    /// <p>The database username for authentication to an Amazon Redshift provisioned data warehouse.</p>
    pub fn database_user(&self) -> ::std::option::Option<&str> {
        self.database_user.as_deref()
    }
    /// <p>The ARN of an Secrets Manager secret for authentication.</p>
    pub fn username_password_secret_arn(&self) -> ::std::option::Option<&str> {
        self.username_password_secret_arn.as_deref()
    }
}
impl RedshiftProvisionedAuthConfiguration {
    /// Creates a new builder-style object to manufacture [`RedshiftProvisionedAuthConfiguration`](crate::types::RedshiftProvisionedAuthConfiguration).
    pub fn builder() -> crate::types::builders::RedshiftProvisionedAuthConfigurationBuilder {
        crate::types::builders::RedshiftProvisionedAuthConfigurationBuilder::default()
    }
}

/// A builder for [`RedshiftProvisionedAuthConfiguration`](crate::types::RedshiftProvisionedAuthConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RedshiftProvisionedAuthConfigurationBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::RedshiftProvisionedAuthType>,
    pub(crate) database_user: ::std::option::Option<::std::string::String>,
    pub(crate) username_password_secret_arn: ::std::option::Option<::std::string::String>,
}
impl RedshiftProvisionedAuthConfigurationBuilder {
    /// <p>The type of authentication to use.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::RedshiftProvisionedAuthType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of authentication to use.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RedshiftProvisionedAuthType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of authentication to use.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RedshiftProvisionedAuthType> {
        &self.r#type
    }
    /// <p>The database username for authentication to an Amazon Redshift provisioned data warehouse.</p>
    pub fn database_user(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_user = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database username for authentication to an Amazon Redshift provisioned data warehouse.</p>
    pub fn set_database_user(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_user = input;
        self
    }
    /// <p>The database username for authentication to an Amazon Redshift provisioned data warehouse.</p>
    pub fn get_database_user(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_user
    }
    /// <p>The ARN of an Secrets Manager secret for authentication.</p>
    pub fn username_password_secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.username_password_secret_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of an Secrets Manager secret for authentication.</p>
    pub fn set_username_password_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.username_password_secret_arn = input;
        self
    }
    /// <p>The ARN of an Secrets Manager secret for authentication.</p>
    pub fn get_username_password_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.username_password_secret_arn
    }
    /// Consumes the builder and constructs a [`RedshiftProvisionedAuthConfiguration`](crate::types::RedshiftProvisionedAuthConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::RedshiftProvisionedAuthConfigurationBuilder::type)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::RedshiftProvisionedAuthConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RedshiftProvisionedAuthConfiguration {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building RedshiftProvisionedAuthConfiguration",
                )
            })?,
            database_user: self.database_user,
            username_password_secret_arn: self.username_password_secret_arn,
        })
    }
}
