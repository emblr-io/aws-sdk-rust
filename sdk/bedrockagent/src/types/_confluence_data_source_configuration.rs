// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration information to connect to Confluence as your data source.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfluenceDataSourceConfiguration {
    /// <p>The endpoint information to connect to your Confluence data source.</p>
    pub source_configuration: ::std::option::Option<crate::types::ConfluenceSourceConfiguration>,
    /// <p>The configuration of the Confluence content. For example, configuring specific types of Confluence content.</p>
    pub crawler_configuration: ::std::option::Option<crate::types::ConfluenceCrawlerConfiguration>,
}
impl ConfluenceDataSourceConfiguration {
    /// <p>The endpoint information to connect to your Confluence data source.</p>
    pub fn source_configuration(&self) -> ::std::option::Option<&crate::types::ConfluenceSourceConfiguration> {
        self.source_configuration.as_ref()
    }
    /// <p>The configuration of the Confluence content. For example, configuring specific types of Confluence content.</p>
    pub fn crawler_configuration(&self) -> ::std::option::Option<&crate::types::ConfluenceCrawlerConfiguration> {
        self.crawler_configuration.as_ref()
    }
}
impl ConfluenceDataSourceConfiguration {
    /// Creates a new builder-style object to manufacture [`ConfluenceDataSourceConfiguration`](crate::types::ConfluenceDataSourceConfiguration).
    pub fn builder() -> crate::types::builders::ConfluenceDataSourceConfigurationBuilder {
        crate::types::builders::ConfluenceDataSourceConfigurationBuilder::default()
    }
}

/// A builder for [`ConfluenceDataSourceConfiguration`](crate::types::ConfluenceDataSourceConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConfluenceDataSourceConfigurationBuilder {
    pub(crate) source_configuration: ::std::option::Option<crate::types::ConfluenceSourceConfiguration>,
    pub(crate) crawler_configuration: ::std::option::Option<crate::types::ConfluenceCrawlerConfiguration>,
}
impl ConfluenceDataSourceConfigurationBuilder {
    /// <p>The endpoint information to connect to your Confluence data source.</p>
    /// This field is required.
    pub fn source_configuration(mut self, input: crate::types::ConfluenceSourceConfiguration) -> Self {
        self.source_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The endpoint information to connect to your Confluence data source.</p>
    pub fn set_source_configuration(mut self, input: ::std::option::Option<crate::types::ConfluenceSourceConfiguration>) -> Self {
        self.source_configuration = input;
        self
    }
    /// <p>The endpoint information to connect to your Confluence data source.</p>
    pub fn get_source_configuration(&self) -> &::std::option::Option<crate::types::ConfluenceSourceConfiguration> {
        &self.source_configuration
    }
    /// <p>The configuration of the Confluence content. For example, configuring specific types of Confluence content.</p>
    pub fn crawler_configuration(mut self, input: crate::types::ConfluenceCrawlerConfiguration) -> Self {
        self.crawler_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the Confluence content. For example, configuring specific types of Confluence content.</p>
    pub fn set_crawler_configuration(mut self, input: ::std::option::Option<crate::types::ConfluenceCrawlerConfiguration>) -> Self {
        self.crawler_configuration = input;
        self
    }
    /// <p>The configuration of the Confluence content. For example, configuring specific types of Confluence content.</p>
    pub fn get_crawler_configuration(&self) -> &::std::option::Option<crate::types::ConfluenceCrawlerConfiguration> {
        &self.crawler_configuration
    }
    /// Consumes the builder and constructs a [`ConfluenceDataSourceConfiguration`](crate::types::ConfluenceDataSourceConfiguration).
    pub fn build(self) -> crate::types::ConfluenceDataSourceConfiguration {
        crate::types::ConfluenceDataSourceConfiguration {
            source_configuration: self.source_configuration,
            crawler_configuration: self.crawler_configuration,
        }
    }
}
