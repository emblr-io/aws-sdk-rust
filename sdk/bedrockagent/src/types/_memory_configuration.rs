// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of the memory configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MemoryConfiguration {
    /// <p>The type of memory that is stored.</p>
    pub enabled_memory_types: ::std::vec::Vec<crate::types::MemoryType>,
    /// <p>The number of days the agent is configured to retain the conversational context.</p>
    pub storage_days: i32,
    /// <p>Contains the configuration for SESSION_SUMMARY memory type enabled for the agent.</p>
    pub session_summary_configuration: ::std::option::Option<crate::types::SessionSummaryConfiguration>,
}
impl MemoryConfiguration {
    /// <p>The type of memory that is stored.</p>
    pub fn enabled_memory_types(&self) -> &[crate::types::MemoryType] {
        use std::ops::Deref;
        self.enabled_memory_types.deref()
    }
    /// <p>The number of days the agent is configured to retain the conversational context.</p>
    pub fn storage_days(&self) -> i32 {
        self.storage_days
    }
    /// <p>Contains the configuration for SESSION_SUMMARY memory type enabled for the agent.</p>
    pub fn session_summary_configuration(&self) -> ::std::option::Option<&crate::types::SessionSummaryConfiguration> {
        self.session_summary_configuration.as_ref()
    }
}
impl MemoryConfiguration {
    /// Creates a new builder-style object to manufacture [`MemoryConfiguration`](crate::types::MemoryConfiguration).
    pub fn builder() -> crate::types::builders::MemoryConfigurationBuilder {
        crate::types::builders::MemoryConfigurationBuilder::default()
    }
}

/// A builder for [`MemoryConfiguration`](crate::types::MemoryConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MemoryConfigurationBuilder {
    pub(crate) enabled_memory_types: ::std::option::Option<::std::vec::Vec<crate::types::MemoryType>>,
    pub(crate) storage_days: ::std::option::Option<i32>,
    pub(crate) session_summary_configuration: ::std::option::Option<crate::types::SessionSummaryConfiguration>,
}
impl MemoryConfigurationBuilder {
    /// Appends an item to `enabled_memory_types`.
    ///
    /// To override the contents of this collection use [`set_enabled_memory_types`](Self::set_enabled_memory_types).
    ///
    /// <p>The type of memory that is stored.</p>
    pub fn enabled_memory_types(mut self, input: crate::types::MemoryType) -> Self {
        let mut v = self.enabled_memory_types.unwrap_or_default();
        v.push(input);
        self.enabled_memory_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The type of memory that is stored.</p>
    pub fn set_enabled_memory_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MemoryType>>) -> Self {
        self.enabled_memory_types = input;
        self
    }
    /// <p>The type of memory that is stored.</p>
    pub fn get_enabled_memory_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MemoryType>> {
        &self.enabled_memory_types
    }
    /// <p>The number of days the agent is configured to retain the conversational context.</p>
    pub fn storage_days(mut self, input: i32) -> Self {
        self.storage_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of days the agent is configured to retain the conversational context.</p>
    pub fn set_storage_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.storage_days = input;
        self
    }
    /// <p>The number of days the agent is configured to retain the conversational context.</p>
    pub fn get_storage_days(&self) -> &::std::option::Option<i32> {
        &self.storage_days
    }
    /// <p>Contains the configuration for SESSION_SUMMARY memory type enabled for the agent.</p>
    pub fn session_summary_configuration(mut self, input: crate::types::SessionSummaryConfiguration) -> Self {
        self.session_summary_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the configuration for SESSION_SUMMARY memory type enabled for the agent.</p>
    pub fn set_session_summary_configuration(mut self, input: ::std::option::Option<crate::types::SessionSummaryConfiguration>) -> Self {
        self.session_summary_configuration = input;
        self
    }
    /// <p>Contains the configuration for SESSION_SUMMARY memory type enabled for the agent.</p>
    pub fn get_session_summary_configuration(&self) -> &::std::option::Option<crate::types::SessionSummaryConfiguration> {
        &self.session_summary_configuration
    }
    /// Consumes the builder and constructs a [`MemoryConfiguration`](crate::types::MemoryConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`enabled_memory_types`](crate::types::builders::MemoryConfigurationBuilder::enabled_memory_types)
    pub fn build(self) -> ::std::result::Result<crate::types::MemoryConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MemoryConfiguration {
            enabled_memory_types: self.enabled_memory_types.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "enabled_memory_types",
                    "enabled_memory_types was not specified but it is required when building MemoryConfiguration",
                )
            })?,
            storage_days: self.storage_days.unwrap_or(30),
            session_summary_configuration: self.session_summary_configuration,
        })
    }
}
