// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A custom processing step for documents moving through a data source ingestion pipeline. To process documents after they have been converted into chunks, set the step to apply to <code>POST_CHUNKING</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Transformation {
    /// <p>A Lambda function that processes documents.</p>
    pub transformation_function: ::std::option::Option<crate::types::TransformationFunction>,
    /// <p>When the service applies the transformation.</p>
    pub step_to_apply: crate::types::StepType,
}
impl Transformation {
    /// <p>A Lambda function that processes documents.</p>
    pub fn transformation_function(&self) -> ::std::option::Option<&crate::types::TransformationFunction> {
        self.transformation_function.as_ref()
    }
    /// <p>When the service applies the transformation.</p>
    pub fn step_to_apply(&self) -> &crate::types::StepType {
        &self.step_to_apply
    }
}
impl Transformation {
    /// Creates a new builder-style object to manufacture [`Transformation`](crate::types::Transformation).
    pub fn builder() -> crate::types::builders::TransformationBuilder {
        crate::types::builders::TransformationBuilder::default()
    }
}

/// A builder for [`Transformation`](crate::types::Transformation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TransformationBuilder {
    pub(crate) transformation_function: ::std::option::Option<crate::types::TransformationFunction>,
    pub(crate) step_to_apply: ::std::option::Option<crate::types::StepType>,
}
impl TransformationBuilder {
    /// <p>A Lambda function that processes documents.</p>
    /// This field is required.
    pub fn transformation_function(mut self, input: crate::types::TransformationFunction) -> Self {
        self.transformation_function = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Lambda function that processes documents.</p>
    pub fn set_transformation_function(mut self, input: ::std::option::Option<crate::types::TransformationFunction>) -> Self {
        self.transformation_function = input;
        self
    }
    /// <p>A Lambda function that processes documents.</p>
    pub fn get_transformation_function(&self) -> &::std::option::Option<crate::types::TransformationFunction> {
        &self.transformation_function
    }
    /// <p>When the service applies the transformation.</p>
    /// This field is required.
    pub fn step_to_apply(mut self, input: crate::types::StepType) -> Self {
        self.step_to_apply = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the service applies the transformation.</p>
    pub fn set_step_to_apply(mut self, input: ::std::option::Option<crate::types::StepType>) -> Self {
        self.step_to_apply = input;
        self
    }
    /// <p>When the service applies the transformation.</p>
    pub fn get_step_to_apply(&self) -> &::std::option::Option<crate::types::StepType> {
        &self.step_to_apply
    }
    /// Consumes the builder and constructs a [`Transformation`](crate::types::Transformation).
    /// This method will fail if any of the following fields are not set:
    /// - [`step_to_apply`](crate::types::builders::TransformationBuilder::step_to_apply)
    pub fn build(self) -> ::std::result::Result<crate::types::Transformation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Transformation {
            transformation_function: self.transformation_function,
            step_to_apply: self.step_to_apply.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "step_to_apply",
                    "step_to_apply was not specified but it is required when building Transformation",
                )
            })?,
        })
    }
}
