// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the metadata associate with the content to ingest into a knowledge base. Choose a <code>type</code> and include the field that corresponds to it.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DocumentMetadata {
    /// <p>The type of the source source from which to add metadata.</p>
    pub r#type: crate::types::MetadataSourceType,
    /// <p>An array of objects, each of which defines a metadata attribute to associate with the content to ingest. You define the attributes inline.</p>
    pub inline_attributes: ::std::option::Option<::std::vec::Vec<crate::types::MetadataAttribute>>,
    /// <p>The Amazon S3 location of the file containing metadata to associate with the content to ingest.</p>
    pub s3_location: ::std::option::Option<crate::types::CustomS3Location>,
}
impl DocumentMetadata {
    /// <p>The type of the source source from which to add metadata.</p>
    pub fn r#type(&self) -> &crate::types::MetadataSourceType {
        &self.r#type
    }
    /// <p>An array of objects, each of which defines a metadata attribute to associate with the content to ingest. You define the attributes inline.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.inline_attributes.is_none()`.
    pub fn inline_attributes(&self) -> &[crate::types::MetadataAttribute] {
        self.inline_attributes.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon S3 location of the file containing metadata to associate with the content to ingest.</p>
    pub fn s3_location(&self) -> ::std::option::Option<&crate::types::CustomS3Location> {
        self.s3_location.as_ref()
    }
}
impl DocumentMetadata {
    /// Creates a new builder-style object to manufacture [`DocumentMetadata`](crate::types::DocumentMetadata).
    pub fn builder() -> crate::types::builders::DocumentMetadataBuilder {
        crate::types::builders::DocumentMetadataBuilder::default()
    }
}

/// A builder for [`DocumentMetadata`](crate::types::DocumentMetadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DocumentMetadataBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::MetadataSourceType>,
    pub(crate) inline_attributes: ::std::option::Option<::std::vec::Vec<crate::types::MetadataAttribute>>,
    pub(crate) s3_location: ::std::option::Option<crate::types::CustomS3Location>,
}
impl DocumentMetadataBuilder {
    /// <p>The type of the source source from which to add metadata.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::MetadataSourceType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the source source from which to add metadata.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::MetadataSourceType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the source source from which to add metadata.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::MetadataSourceType> {
        &self.r#type
    }
    /// Appends an item to `inline_attributes`.
    ///
    /// To override the contents of this collection use [`set_inline_attributes`](Self::set_inline_attributes).
    ///
    /// <p>An array of objects, each of which defines a metadata attribute to associate with the content to ingest. You define the attributes inline.</p>
    pub fn inline_attributes(mut self, input: crate::types::MetadataAttribute) -> Self {
        let mut v = self.inline_attributes.unwrap_or_default();
        v.push(input);
        self.inline_attributes = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects, each of which defines a metadata attribute to associate with the content to ingest. You define the attributes inline.</p>
    pub fn set_inline_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetadataAttribute>>) -> Self {
        self.inline_attributes = input;
        self
    }
    /// <p>An array of objects, each of which defines a metadata attribute to associate with the content to ingest. You define the attributes inline.</p>
    pub fn get_inline_attributes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetadataAttribute>> {
        &self.inline_attributes
    }
    /// <p>The Amazon S3 location of the file containing metadata to associate with the content to ingest.</p>
    pub fn s3_location(mut self, input: crate::types::CustomS3Location) -> Self {
        self.s3_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon S3 location of the file containing metadata to associate with the content to ingest.</p>
    pub fn set_s3_location(mut self, input: ::std::option::Option<crate::types::CustomS3Location>) -> Self {
        self.s3_location = input;
        self
    }
    /// <p>The Amazon S3 location of the file containing metadata to associate with the content to ingest.</p>
    pub fn get_s3_location(&self) -> &::std::option::Option<crate::types::CustomS3Location> {
        &self.s3_location
    }
    /// Consumes the builder and constructs a [`DocumentMetadata`](crate::types::DocumentMetadata).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::DocumentMetadataBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::DocumentMetadata, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DocumentMetadata {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building DocumentMetadata",
                )
            })?,
            inline_attributes: self.inline_attributes,
            s3_location: self.s3_location,
        })
    }
}
