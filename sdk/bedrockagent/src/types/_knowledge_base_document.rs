// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a document to ingest into a knowledge base and metadata to associate with it.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KnowledgeBaseDocument {
    /// <p>Contains the metadata to associate with the document.</p>
    pub metadata: ::std::option::Option<crate::types::DocumentMetadata>,
    /// <p>Contains the content of the document.</p>
    pub content: ::std::option::Option<crate::types::DocumentContent>,
}
impl KnowledgeBaseDocument {
    /// <p>Contains the metadata to associate with the document.</p>
    pub fn metadata(&self) -> ::std::option::Option<&crate::types::DocumentMetadata> {
        self.metadata.as_ref()
    }
    /// <p>Contains the content of the document.</p>
    pub fn content(&self) -> ::std::option::Option<&crate::types::DocumentContent> {
        self.content.as_ref()
    }
}
impl KnowledgeBaseDocument {
    /// Creates a new builder-style object to manufacture [`KnowledgeBaseDocument`](crate::types::KnowledgeBaseDocument).
    pub fn builder() -> crate::types::builders::KnowledgeBaseDocumentBuilder {
        crate::types::builders::KnowledgeBaseDocumentBuilder::default()
    }
}

/// A builder for [`KnowledgeBaseDocument`](crate::types::KnowledgeBaseDocument).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct KnowledgeBaseDocumentBuilder {
    pub(crate) metadata: ::std::option::Option<crate::types::DocumentMetadata>,
    pub(crate) content: ::std::option::Option<crate::types::DocumentContent>,
}
impl KnowledgeBaseDocumentBuilder {
    /// <p>Contains the metadata to associate with the document.</p>
    pub fn metadata(mut self, input: crate::types::DocumentMetadata) -> Self {
        self.metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the metadata to associate with the document.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<crate::types::DocumentMetadata>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>Contains the metadata to associate with the document.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<crate::types::DocumentMetadata> {
        &self.metadata
    }
    /// <p>Contains the content of the document.</p>
    /// This field is required.
    pub fn content(mut self, input: crate::types::DocumentContent) -> Self {
        self.content = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the content of the document.</p>
    pub fn set_content(mut self, input: ::std::option::Option<crate::types::DocumentContent>) -> Self {
        self.content = input;
        self
    }
    /// <p>Contains the content of the document.</p>
    pub fn get_content(&self) -> &::std::option::Option<crate::types::DocumentContent> {
        &self.content
    }
    /// Consumes the builder and constructs a [`KnowledgeBaseDocument`](crate::types::KnowledgeBaseDocument).
    pub fn build(self) -> crate::types::KnowledgeBaseDocument {
        crate::types::KnowledgeBaseDocument {
            metadata: self.metadata,
            content: self.content,
        }
    }
}
