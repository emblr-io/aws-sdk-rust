// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>&gt;Contains configurations for context to use during query generation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct QueryGenerationContext {
    /// <p>An array of objects, each of which defines information about a table in the database.</p>
    pub tables: ::std::option::Option<::std::vec::Vec<crate::types::QueryGenerationTable>>,
    /// <p>An array of objects, each of which defines information about example queries to help the query engine generate appropriate SQL queries.</p>
    pub curated_queries: ::std::option::Option<::std::vec::Vec<crate::types::CuratedQuery>>,
}
impl QueryGenerationContext {
    /// <p>An array of objects, each of which defines information about a table in the database.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tables.is_none()`.
    pub fn tables(&self) -> &[crate::types::QueryGenerationTable] {
        self.tables.as_deref().unwrap_or_default()
    }
    /// <p>An array of objects, each of which defines information about example queries to help the query engine generate appropriate SQL queries.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.curated_queries.is_none()`.
    pub fn curated_queries(&self) -> &[crate::types::CuratedQuery] {
        self.curated_queries.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for QueryGenerationContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("QueryGenerationContext");
        formatter.field("tables", &"*** Sensitive Data Redacted ***");
        formatter.field("curated_queries", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl QueryGenerationContext {
    /// Creates a new builder-style object to manufacture [`QueryGenerationContext`](crate::types::QueryGenerationContext).
    pub fn builder() -> crate::types::builders::QueryGenerationContextBuilder {
        crate::types::builders::QueryGenerationContextBuilder::default()
    }
}

/// A builder for [`QueryGenerationContext`](crate::types::QueryGenerationContext).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct QueryGenerationContextBuilder {
    pub(crate) tables: ::std::option::Option<::std::vec::Vec<crate::types::QueryGenerationTable>>,
    pub(crate) curated_queries: ::std::option::Option<::std::vec::Vec<crate::types::CuratedQuery>>,
}
impl QueryGenerationContextBuilder {
    /// Appends an item to `tables`.
    ///
    /// To override the contents of this collection use [`set_tables`](Self::set_tables).
    ///
    /// <p>An array of objects, each of which defines information about a table in the database.</p>
    pub fn tables(mut self, input: crate::types::QueryGenerationTable) -> Self {
        let mut v = self.tables.unwrap_or_default();
        v.push(input);
        self.tables = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects, each of which defines information about a table in the database.</p>
    pub fn set_tables(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::QueryGenerationTable>>) -> Self {
        self.tables = input;
        self
    }
    /// <p>An array of objects, each of which defines information about a table in the database.</p>
    pub fn get_tables(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::QueryGenerationTable>> {
        &self.tables
    }
    /// Appends an item to `curated_queries`.
    ///
    /// To override the contents of this collection use [`set_curated_queries`](Self::set_curated_queries).
    ///
    /// <p>An array of objects, each of which defines information about example queries to help the query engine generate appropriate SQL queries.</p>
    pub fn curated_queries(mut self, input: crate::types::CuratedQuery) -> Self {
        let mut v = self.curated_queries.unwrap_or_default();
        v.push(input);
        self.curated_queries = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects, each of which defines information about example queries to help the query engine generate appropriate SQL queries.</p>
    pub fn set_curated_queries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CuratedQuery>>) -> Self {
        self.curated_queries = input;
        self
    }
    /// <p>An array of objects, each of which defines information about example queries to help the query engine generate appropriate SQL queries.</p>
    pub fn get_curated_queries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CuratedQuery>> {
        &self.curated_queries
    }
    /// Consumes the builder and constructs a [`QueryGenerationContext`](crate::types::QueryGenerationContext).
    pub fn build(self) -> crate::types::QueryGenerationContext {
        crate::types::QueryGenerationContext {
            tables: self.tables,
            curated_queries: self.curated_queries,
        }
    }
}
impl ::std::fmt::Debug for QueryGenerationContextBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("QueryGenerationContextBuilder");
        formatter.field("tables", &"*** Sensitive Data Redacted ***");
        formatter.field("curated_queries", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
