// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configurations for an Amazon Redshift database. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-build-structured.html">Build a knowledge base by connecting to a structured data source</a> in the Amazon Bedrock User Guide.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RedshiftConfiguration {
    /// <p>Specifies configurations for Amazon Redshift database storage.</p>
    pub storage_configurations: ::std::vec::Vec<crate::types::RedshiftQueryEngineStorageConfiguration>,
    /// <p>Specifies configurations for an Amazon Redshift query engine.</p>
    pub query_engine_configuration: ::std::option::Option<crate::types::RedshiftQueryEngineConfiguration>,
    /// <p>Specifies configurations for generating queries.</p>
    pub query_generation_configuration: ::std::option::Option<crate::types::QueryGenerationConfiguration>,
}
impl RedshiftConfiguration {
    /// <p>Specifies configurations for Amazon Redshift database storage.</p>
    pub fn storage_configurations(&self) -> &[crate::types::RedshiftQueryEngineStorageConfiguration] {
        use std::ops::Deref;
        self.storage_configurations.deref()
    }
    /// <p>Specifies configurations for an Amazon Redshift query engine.</p>
    pub fn query_engine_configuration(&self) -> ::std::option::Option<&crate::types::RedshiftQueryEngineConfiguration> {
        self.query_engine_configuration.as_ref()
    }
    /// <p>Specifies configurations for generating queries.</p>
    pub fn query_generation_configuration(&self) -> ::std::option::Option<&crate::types::QueryGenerationConfiguration> {
        self.query_generation_configuration.as_ref()
    }
}
impl RedshiftConfiguration {
    /// Creates a new builder-style object to manufacture [`RedshiftConfiguration`](crate::types::RedshiftConfiguration).
    pub fn builder() -> crate::types::builders::RedshiftConfigurationBuilder {
        crate::types::builders::RedshiftConfigurationBuilder::default()
    }
}

/// A builder for [`RedshiftConfiguration`](crate::types::RedshiftConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RedshiftConfigurationBuilder {
    pub(crate) storage_configurations: ::std::option::Option<::std::vec::Vec<crate::types::RedshiftQueryEngineStorageConfiguration>>,
    pub(crate) query_engine_configuration: ::std::option::Option<crate::types::RedshiftQueryEngineConfiguration>,
    pub(crate) query_generation_configuration: ::std::option::Option<crate::types::QueryGenerationConfiguration>,
}
impl RedshiftConfigurationBuilder {
    /// Appends an item to `storage_configurations`.
    ///
    /// To override the contents of this collection use [`set_storage_configurations`](Self::set_storage_configurations).
    ///
    /// <p>Specifies configurations for Amazon Redshift database storage.</p>
    pub fn storage_configurations(mut self, input: crate::types::RedshiftQueryEngineStorageConfiguration) -> Self {
        let mut v = self.storage_configurations.unwrap_or_default();
        v.push(input);
        self.storage_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies configurations for Amazon Redshift database storage.</p>
    pub fn set_storage_configurations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::RedshiftQueryEngineStorageConfiguration>>,
    ) -> Self {
        self.storage_configurations = input;
        self
    }
    /// <p>Specifies configurations for Amazon Redshift database storage.</p>
    pub fn get_storage_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RedshiftQueryEngineStorageConfiguration>> {
        &self.storage_configurations
    }
    /// <p>Specifies configurations for an Amazon Redshift query engine.</p>
    /// This field is required.
    pub fn query_engine_configuration(mut self, input: crate::types::RedshiftQueryEngineConfiguration) -> Self {
        self.query_engine_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies configurations for an Amazon Redshift query engine.</p>
    pub fn set_query_engine_configuration(mut self, input: ::std::option::Option<crate::types::RedshiftQueryEngineConfiguration>) -> Self {
        self.query_engine_configuration = input;
        self
    }
    /// <p>Specifies configurations for an Amazon Redshift query engine.</p>
    pub fn get_query_engine_configuration(&self) -> &::std::option::Option<crate::types::RedshiftQueryEngineConfiguration> {
        &self.query_engine_configuration
    }
    /// <p>Specifies configurations for generating queries.</p>
    pub fn query_generation_configuration(mut self, input: crate::types::QueryGenerationConfiguration) -> Self {
        self.query_generation_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies configurations for generating queries.</p>
    pub fn set_query_generation_configuration(mut self, input: ::std::option::Option<crate::types::QueryGenerationConfiguration>) -> Self {
        self.query_generation_configuration = input;
        self
    }
    /// <p>Specifies configurations for generating queries.</p>
    pub fn get_query_generation_configuration(&self) -> &::std::option::Option<crate::types::QueryGenerationConfiguration> {
        &self.query_generation_configuration
    }
    /// Consumes the builder and constructs a [`RedshiftConfiguration`](crate::types::RedshiftConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`storage_configurations`](crate::types::builders::RedshiftConfigurationBuilder::storage_configurations)
    pub fn build(self) -> ::std::result::Result<crate::types::RedshiftConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RedshiftConfiguration {
            storage_configurations: self.storage_configurations.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "storage_configurations",
                    "storage_configurations was not specified but it is required when building RedshiftConfiguration",
                )
            })?,
            query_engine_configuration: self.query_engine_configuration,
            query_generation_configuration: self.query_generation_configuration,
        })
    }
}
