// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configurations for an Amazon Redshift query engine. Specify the type of query engine in <code>type</code> and include the corresponding field. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-build-structured.html">Build a knowledge base by connecting to a structured data source</a> in the Amazon Bedrock User Guide.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RedshiftQueryEngineConfiguration {
    /// <p>The type of query engine.</p>
    pub r#type: crate::types::RedshiftQueryEngineType,
    /// <p>Specifies configurations for a serverless Amazon Redshift query engine.</p>
    pub serverless_configuration: ::std::option::Option<crate::types::RedshiftServerlessConfiguration>,
    /// <p>Specifies configurations for a provisioned Amazon Redshift query engine.</p>
    pub provisioned_configuration: ::std::option::Option<crate::types::RedshiftProvisionedConfiguration>,
}
impl RedshiftQueryEngineConfiguration {
    /// <p>The type of query engine.</p>
    pub fn r#type(&self) -> &crate::types::RedshiftQueryEngineType {
        &self.r#type
    }
    /// <p>Specifies configurations for a serverless Amazon Redshift query engine.</p>
    pub fn serverless_configuration(&self) -> ::std::option::Option<&crate::types::RedshiftServerlessConfiguration> {
        self.serverless_configuration.as_ref()
    }
    /// <p>Specifies configurations for a provisioned Amazon Redshift query engine.</p>
    pub fn provisioned_configuration(&self) -> ::std::option::Option<&crate::types::RedshiftProvisionedConfiguration> {
        self.provisioned_configuration.as_ref()
    }
}
impl RedshiftQueryEngineConfiguration {
    /// Creates a new builder-style object to manufacture [`RedshiftQueryEngineConfiguration`](crate::types::RedshiftQueryEngineConfiguration).
    pub fn builder() -> crate::types::builders::RedshiftQueryEngineConfigurationBuilder {
        crate::types::builders::RedshiftQueryEngineConfigurationBuilder::default()
    }
}

/// A builder for [`RedshiftQueryEngineConfiguration`](crate::types::RedshiftQueryEngineConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RedshiftQueryEngineConfigurationBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::RedshiftQueryEngineType>,
    pub(crate) serverless_configuration: ::std::option::Option<crate::types::RedshiftServerlessConfiguration>,
    pub(crate) provisioned_configuration: ::std::option::Option<crate::types::RedshiftProvisionedConfiguration>,
}
impl RedshiftQueryEngineConfigurationBuilder {
    /// <p>The type of query engine.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::RedshiftQueryEngineType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of query engine.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RedshiftQueryEngineType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of query engine.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RedshiftQueryEngineType> {
        &self.r#type
    }
    /// <p>Specifies configurations for a serverless Amazon Redshift query engine.</p>
    pub fn serverless_configuration(mut self, input: crate::types::RedshiftServerlessConfiguration) -> Self {
        self.serverless_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies configurations for a serverless Amazon Redshift query engine.</p>
    pub fn set_serverless_configuration(mut self, input: ::std::option::Option<crate::types::RedshiftServerlessConfiguration>) -> Self {
        self.serverless_configuration = input;
        self
    }
    /// <p>Specifies configurations for a serverless Amazon Redshift query engine.</p>
    pub fn get_serverless_configuration(&self) -> &::std::option::Option<crate::types::RedshiftServerlessConfiguration> {
        &self.serverless_configuration
    }
    /// <p>Specifies configurations for a provisioned Amazon Redshift query engine.</p>
    pub fn provisioned_configuration(mut self, input: crate::types::RedshiftProvisionedConfiguration) -> Self {
        self.provisioned_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies configurations for a provisioned Amazon Redshift query engine.</p>
    pub fn set_provisioned_configuration(mut self, input: ::std::option::Option<crate::types::RedshiftProvisionedConfiguration>) -> Self {
        self.provisioned_configuration = input;
        self
    }
    /// <p>Specifies configurations for a provisioned Amazon Redshift query engine.</p>
    pub fn get_provisioned_configuration(&self) -> &::std::option::Option<crate::types::RedshiftProvisionedConfiguration> {
        &self.provisioned_configuration
    }
    /// Consumes the builder and constructs a [`RedshiftQueryEngineConfiguration`](crate::types::RedshiftQueryEngineConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::RedshiftQueryEngineConfigurationBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::RedshiftQueryEngineConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RedshiftQueryEngineConfiguration {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building RedshiftQueryEngineConfiguration",
                )
            })?,
            serverless_configuration: self.serverless_configuration,
            provisioned_configuration: self.provisioned_configuration,
        })
    }
}
