// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the message for a prompt. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management.html">Construct and store reusable prompts with Prompt management in Amazon Bedrock</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub enum PromptTemplateConfiguration {
    /// <p>Contains configurations to use the prompt in a conversational format.</p>
    Chat(crate::types::ChatPromptTemplateConfiguration),
    /// <p>Contains configurations for the text in a message for a prompt.</p>
    Text(crate::types::TextPromptTemplateConfiguration),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl PromptTemplateConfiguration {
    /// Tries to convert the enum instance into [`Chat`](crate::types::PromptTemplateConfiguration::Chat), extracting the inner [`ChatPromptTemplateConfiguration`](crate::types::ChatPromptTemplateConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_chat(&self) -> ::std::result::Result<&crate::types::ChatPromptTemplateConfiguration, &Self> {
        if let PromptTemplateConfiguration::Chat(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Chat`](crate::types::PromptTemplateConfiguration::Chat).
    pub fn is_chat(&self) -> bool {
        self.as_chat().is_ok()
    }
    /// Tries to convert the enum instance into [`Text`](crate::types::PromptTemplateConfiguration::Text), extracting the inner [`TextPromptTemplateConfiguration`](crate::types::TextPromptTemplateConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_text(&self) -> ::std::result::Result<&crate::types::TextPromptTemplateConfiguration, &Self> {
        if let PromptTemplateConfiguration::Text(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Text`](crate::types::PromptTemplateConfiguration::Text).
    pub fn is_text(&self) -> bool {
        self.as_text().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
impl ::std::fmt::Debug for PromptTemplateConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            PromptTemplateConfiguration::Chat(_) => f.debug_tuple("*** Sensitive Data Redacted ***").finish(),
            PromptTemplateConfiguration::Text(_) => f.debug_tuple("*** Sensitive Data Redacted ***").finish(),
            PromptTemplateConfiguration::Unknown => f.debug_tuple("Unknown").finish(),
        }
    }
}
