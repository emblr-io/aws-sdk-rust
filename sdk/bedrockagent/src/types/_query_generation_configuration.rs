// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configurations for query generation. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-build-structured.html">Build a knowledge base by connecting to a structured data source</a> in the Amazon Bedrock User Guide..</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct QueryGenerationConfiguration {
    /// <p>The time after which query generation will time out.</p>
    pub execution_timeout_seconds: ::std::option::Option<i32>,
    /// <p>Specifies configurations for context to use during query generation.</p>
    pub generation_context: ::std::option::Option<crate::types::QueryGenerationContext>,
}
impl QueryGenerationConfiguration {
    /// <p>The time after which query generation will time out.</p>
    pub fn execution_timeout_seconds(&self) -> ::std::option::Option<i32> {
        self.execution_timeout_seconds
    }
    /// <p>Specifies configurations for context to use during query generation.</p>
    pub fn generation_context(&self) -> ::std::option::Option<&crate::types::QueryGenerationContext> {
        self.generation_context.as_ref()
    }
}
impl ::std::fmt::Debug for QueryGenerationConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("QueryGenerationConfiguration");
        formatter.field("execution_timeout_seconds", &self.execution_timeout_seconds);
        formatter.field("generation_context", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl QueryGenerationConfiguration {
    /// Creates a new builder-style object to manufacture [`QueryGenerationConfiguration`](crate::types::QueryGenerationConfiguration).
    pub fn builder() -> crate::types::builders::QueryGenerationConfigurationBuilder {
        crate::types::builders::QueryGenerationConfigurationBuilder::default()
    }
}

/// A builder for [`QueryGenerationConfiguration`](crate::types::QueryGenerationConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct QueryGenerationConfigurationBuilder {
    pub(crate) execution_timeout_seconds: ::std::option::Option<i32>,
    pub(crate) generation_context: ::std::option::Option<crate::types::QueryGenerationContext>,
}
impl QueryGenerationConfigurationBuilder {
    /// <p>The time after which query generation will time out.</p>
    pub fn execution_timeout_seconds(mut self, input: i32) -> Self {
        self.execution_timeout_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time after which query generation will time out.</p>
    pub fn set_execution_timeout_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.execution_timeout_seconds = input;
        self
    }
    /// <p>The time after which query generation will time out.</p>
    pub fn get_execution_timeout_seconds(&self) -> &::std::option::Option<i32> {
        &self.execution_timeout_seconds
    }
    /// <p>Specifies configurations for context to use during query generation.</p>
    pub fn generation_context(mut self, input: crate::types::QueryGenerationContext) -> Self {
        self.generation_context = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies configurations for context to use during query generation.</p>
    pub fn set_generation_context(mut self, input: ::std::option::Option<crate::types::QueryGenerationContext>) -> Self {
        self.generation_context = input;
        self
    }
    /// <p>Specifies configurations for context to use during query generation.</p>
    pub fn get_generation_context(&self) -> &::std::option::Option<crate::types::QueryGenerationContext> {
        &self.generation_context
    }
    /// Consumes the builder and constructs a [`QueryGenerationConfiguration`](crate::types::QueryGenerationConfiguration).
    pub fn build(self) -> crate::types::QueryGenerationConfiguration {
        crate::types::QueryGenerationConfiguration {
            execution_timeout_seconds: self.execution_timeout_seconds,
            generation_context: self.generation_context,
        }
    }
}
impl ::std::fmt::Debug for QueryGenerationConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("QueryGenerationConfigurationBuilder");
        formatter.field("execution_timeout_seconds", &self.execution_timeout_seconds);
        formatter.field("generation_context", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
