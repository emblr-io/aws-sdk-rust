// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a table for the query engine to consider.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QueryGenerationTable {
    /// <p>The name of the table for which the other fields in this object apply.</p>
    pub name: ::std::string::String,
    /// <p>A description of the table that helps the query engine understand the contents of the table.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether to include or exclude the table during query generation. If you specify <code>EXCLUDE</code>, the table will be ignored. If you specify <code>INCLUDE</code>, all other tables will be ignored.</p>
    pub inclusion: ::std::option::Option<crate::types::IncludeExclude>,
    /// <p>An array of objects, each of which defines information about a column in the table.</p>
    pub columns: ::std::option::Option<::std::vec::Vec<crate::types::QueryGenerationColumn>>,
}
impl QueryGenerationTable {
    /// <p>The name of the table for which the other fields in this object apply.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>A description of the table that helps the query engine understand the contents of the table.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Specifies whether to include or exclude the table during query generation. If you specify <code>EXCLUDE</code>, the table will be ignored. If you specify <code>INCLUDE</code>, all other tables will be ignored.</p>
    pub fn inclusion(&self) -> ::std::option::Option<&crate::types::IncludeExclude> {
        self.inclusion.as_ref()
    }
    /// <p>An array of objects, each of which defines information about a column in the table.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.columns.is_none()`.
    pub fn columns(&self) -> &[crate::types::QueryGenerationColumn] {
        self.columns.as_deref().unwrap_or_default()
    }
}
impl QueryGenerationTable {
    /// Creates a new builder-style object to manufacture [`QueryGenerationTable`](crate::types::QueryGenerationTable).
    pub fn builder() -> crate::types::builders::QueryGenerationTableBuilder {
        crate::types::builders::QueryGenerationTableBuilder::default()
    }
}

/// A builder for [`QueryGenerationTable`](crate::types::QueryGenerationTable).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QueryGenerationTableBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) inclusion: ::std::option::Option<crate::types::IncludeExclude>,
    pub(crate) columns: ::std::option::Option<::std::vec::Vec<crate::types::QueryGenerationColumn>>,
}
impl QueryGenerationTableBuilder {
    /// <p>The name of the table for which the other fields in this object apply.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the table for which the other fields in this object apply.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the table for which the other fields in this object apply.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of the table that helps the query engine understand the contents of the table.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the table that helps the query engine understand the contents of the table.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the table that helps the query engine understand the contents of the table.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Specifies whether to include or exclude the table during query generation. If you specify <code>EXCLUDE</code>, the table will be ignored. If you specify <code>INCLUDE</code>, all other tables will be ignored.</p>
    pub fn inclusion(mut self, input: crate::types::IncludeExclude) -> Self {
        self.inclusion = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to include or exclude the table during query generation. If you specify <code>EXCLUDE</code>, the table will be ignored. If you specify <code>INCLUDE</code>, all other tables will be ignored.</p>
    pub fn set_inclusion(mut self, input: ::std::option::Option<crate::types::IncludeExclude>) -> Self {
        self.inclusion = input;
        self
    }
    /// <p>Specifies whether to include or exclude the table during query generation. If you specify <code>EXCLUDE</code>, the table will be ignored. If you specify <code>INCLUDE</code>, all other tables will be ignored.</p>
    pub fn get_inclusion(&self) -> &::std::option::Option<crate::types::IncludeExclude> {
        &self.inclusion
    }
    /// Appends an item to `columns`.
    ///
    /// To override the contents of this collection use [`set_columns`](Self::set_columns).
    ///
    /// <p>An array of objects, each of which defines information about a column in the table.</p>
    pub fn columns(mut self, input: crate::types::QueryGenerationColumn) -> Self {
        let mut v = self.columns.unwrap_or_default();
        v.push(input);
        self.columns = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects, each of which defines information about a column in the table.</p>
    pub fn set_columns(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::QueryGenerationColumn>>) -> Self {
        self.columns = input;
        self
    }
    /// <p>An array of objects, each of which defines information about a column in the table.</p>
    pub fn get_columns(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::QueryGenerationColumn>> {
        &self.columns
    }
    /// Consumes the builder and constructs a [`QueryGenerationTable`](crate::types::QueryGenerationTable).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::QueryGenerationTableBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::QueryGenerationTable, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::QueryGenerationTable {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building QueryGenerationTable",
                )
            })?,
            description: self.description,
            inclusion: self.inclusion,
            columns: self.columns,
        })
    }
}
