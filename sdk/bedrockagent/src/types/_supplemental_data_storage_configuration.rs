// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies configurations for the storage location of the images extracted from multimodal documents in your data source. These images can be retrieved and returned to the end user.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SupplementalDataStorageConfiguration {
    /// <p>A list of objects specifying storage locations for images extracted from multimodal documents in your data source.</p>
    pub storage_locations: ::std::vec::Vec<crate::types::SupplementalDataStorageLocation>,
}
impl SupplementalDataStorageConfiguration {
    /// <p>A list of objects specifying storage locations for images extracted from multimodal documents in your data source.</p>
    pub fn storage_locations(&self) -> &[crate::types::SupplementalDataStorageLocation] {
        use std::ops::Deref;
        self.storage_locations.deref()
    }
}
impl SupplementalDataStorageConfiguration {
    /// Creates a new builder-style object to manufacture [`SupplementalDataStorageConfiguration`](crate::types::SupplementalDataStorageConfiguration).
    pub fn builder() -> crate::types::builders::SupplementalDataStorageConfigurationBuilder {
        crate::types::builders::SupplementalDataStorageConfigurationBuilder::default()
    }
}

/// A builder for [`SupplementalDataStorageConfiguration`](crate::types::SupplementalDataStorageConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SupplementalDataStorageConfigurationBuilder {
    pub(crate) storage_locations: ::std::option::Option<::std::vec::Vec<crate::types::SupplementalDataStorageLocation>>,
}
impl SupplementalDataStorageConfigurationBuilder {
    /// Appends an item to `storage_locations`.
    ///
    /// To override the contents of this collection use [`set_storage_locations`](Self::set_storage_locations).
    ///
    /// <p>A list of objects specifying storage locations for images extracted from multimodal documents in your data source.</p>
    pub fn storage_locations(mut self, input: crate::types::SupplementalDataStorageLocation) -> Self {
        let mut v = self.storage_locations.unwrap_or_default();
        v.push(input);
        self.storage_locations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of objects specifying storage locations for images extracted from multimodal documents in your data source.</p>
    pub fn set_storage_locations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SupplementalDataStorageLocation>>) -> Self {
        self.storage_locations = input;
        self
    }
    /// <p>A list of objects specifying storage locations for images extracted from multimodal documents in your data source.</p>
    pub fn get_storage_locations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SupplementalDataStorageLocation>> {
        &self.storage_locations
    }
    /// Consumes the builder and constructs a [`SupplementalDataStorageConfiguration`](crate::types::SupplementalDataStorageConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`storage_locations`](crate::types::builders::SupplementalDataStorageConfigurationBuilder::storage_locations)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::SupplementalDataStorageConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SupplementalDataStorageConfiguration {
            storage_locations: self.storage_locations.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "storage_locations",
                    "storage_locations was not specified but it is required when building SupplementalDataStorageConfiguration",
                )
            })?,
        })
    }
}
