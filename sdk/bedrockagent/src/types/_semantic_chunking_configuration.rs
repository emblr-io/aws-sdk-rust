// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings for semantic document chunking for a data source. Semantic chunking splits a document into into smaller documents based on groups of similar content derived from the text with natural language processing.</p>
/// <p>With semantic chunking, each sentence is compared to the next to determine how similar they are. You specify a threshold in the form of a percentile, where adjacent sentences that are less similar than that percentage of sentence pairs are divided into separate chunks. For example, if you set the threshold to 90, then the 10 percent of sentence pairs that are least similar are split. So if you have 101 sentences, 100 sentence pairs are compared, and the 10 with the least similarity are split, creating 11 chunks. These chunks are further split if they exceed the max token size.</p>
/// <p>You must also specify a buffer size, which determines whether sentences are compared in isolation, or within a moving context window that includes the previous and following sentence. For example, if you set the buffer size to <code>1</code>, the embedding for sentence 10 is derived from sentences 9, 10, and 11 combined.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SemanticChunkingConfiguration {
    /// <p>The maximum number of tokens that a chunk can contain.</p>
    pub max_tokens: i32,
    /// <p>The buffer size.</p>
    pub buffer_size: i32,
    /// <p>The dissimilarity threshold for splitting chunks.</p>
    pub breakpoint_percentile_threshold: i32,
}
impl SemanticChunkingConfiguration {
    /// <p>The maximum number of tokens that a chunk can contain.</p>
    pub fn max_tokens(&self) -> i32 {
        self.max_tokens
    }
    /// <p>The buffer size.</p>
    pub fn buffer_size(&self) -> i32 {
        self.buffer_size
    }
    /// <p>The dissimilarity threshold for splitting chunks.</p>
    pub fn breakpoint_percentile_threshold(&self) -> i32 {
        self.breakpoint_percentile_threshold
    }
}
impl SemanticChunkingConfiguration {
    /// Creates a new builder-style object to manufacture [`SemanticChunkingConfiguration`](crate::types::SemanticChunkingConfiguration).
    pub fn builder() -> crate::types::builders::SemanticChunkingConfigurationBuilder {
        crate::types::builders::SemanticChunkingConfigurationBuilder::default()
    }
}

/// A builder for [`SemanticChunkingConfiguration`](crate::types::SemanticChunkingConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SemanticChunkingConfigurationBuilder {
    pub(crate) max_tokens: ::std::option::Option<i32>,
    pub(crate) buffer_size: ::std::option::Option<i32>,
    pub(crate) breakpoint_percentile_threshold: ::std::option::Option<i32>,
}
impl SemanticChunkingConfigurationBuilder {
    /// <p>The maximum number of tokens that a chunk can contain.</p>
    /// This field is required.
    pub fn max_tokens(mut self, input: i32) -> Self {
        self.max_tokens = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of tokens that a chunk can contain.</p>
    pub fn set_max_tokens(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_tokens = input;
        self
    }
    /// <p>The maximum number of tokens that a chunk can contain.</p>
    pub fn get_max_tokens(&self) -> &::std::option::Option<i32> {
        &self.max_tokens
    }
    /// <p>The buffer size.</p>
    /// This field is required.
    pub fn buffer_size(mut self, input: i32) -> Self {
        self.buffer_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The buffer size.</p>
    pub fn set_buffer_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.buffer_size = input;
        self
    }
    /// <p>The buffer size.</p>
    pub fn get_buffer_size(&self) -> &::std::option::Option<i32> {
        &self.buffer_size
    }
    /// <p>The dissimilarity threshold for splitting chunks.</p>
    /// This field is required.
    pub fn breakpoint_percentile_threshold(mut self, input: i32) -> Self {
        self.breakpoint_percentile_threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>The dissimilarity threshold for splitting chunks.</p>
    pub fn set_breakpoint_percentile_threshold(mut self, input: ::std::option::Option<i32>) -> Self {
        self.breakpoint_percentile_threshold = input;
        self
    }
    /// <p>The dissimilarity threshold for splitting chunks.</p>
    pub fn get_breakpoint_percentile_threshold(&self) -> &::std::option::Option<i32> {
        &self.breakpoint_percentile_threshold
    }
    /// Consumes the builder and constructs a [`SemanticChunkingConfiguration`](crate::types::SemanticChunkingConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`max_tokens`](crate::types::builders::SemanticChunkingConfigurationBuilder::max_tokens)
    /// - [`buffer_size`](crate::types::builders::SemanticChunkingConfigurationBuilder::buffer_size)
    /// - [`breakpoint_percentile_threshold`](crate::types::builders::SemanticChunkingConfigurationBuilder::breakpoint_percentile_threshold)
    pub fn build(self) -> ::std::result::Result<crate::types::SemanticChunkingConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SemanticChunkingConfiguration {
            max_tokens: self.max_tokens.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "max_tokens",
                    "max_tokens was not specified but it is required when building SemanticChunkingConfiguration",
                )
            })?,
            buffer_size: self.buffer_size.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "buffer_size",
                    "buffer_size was not specified but it is required when building SemanticChunkingConfiguration",
                )
            })?,
            breakpoint_percentile_threshold: self.breakpoint_percentile_threshold.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "breakpoint_percentile_threshold",
                    "breakpoint_percentile_threshold was not specified but it is required when building SemanticChunkingConfiguration",
                )
            })?,
        })
    }
}
