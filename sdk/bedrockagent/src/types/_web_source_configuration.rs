// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of the URL/URLs for the web content that you want to crawl. You should be authorized to crawl the URLs.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WebSourceConfiguration {
    /// <p>The configuration of the URL/URLs.</p>
    pub url_configuration: ::std::option::Option<crate::types::UrlConfiguration>,
}
impl WebSourceConfiguration {
    /// <p>The configuration of the URL/URLs.</p>
    pub fn url_configuration(&self) -> ::std::option::Option<&crate::types::UrlConfiguration> {
        self.url_configuration.as_ref()
    }
}
impl WebSourceConfiguration {
    /// Creates a new builder-style object to manufacture [`WebSourceConfiguration`](crate::types::WebSourceConfiguration).
    pub fn builder() -> crate::types::builders::WebSourceConfigurationBuilder {
        crate::types::builders::WebSourceConfigurationBuilder::default()
    }
}

/// A builder for [`WebSourceConfiguration`](crate::types::WebSourceConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WebSourceConfigurationBuilder {
    pub(crate) url_configuration: ::std::option::Option<crate::types::UrlConfiguration>,
}
impl WebSourceConfigurationBuilder {
    /// <p>The configuration of the URL/URLs.</p>
    /// This field is required.
    pub fn url_configuration(mut self, input: crate::types::UrlConfiguration) -> Self {
        self.url_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the URL/URLs.</p>
    pub fn set_url_configuration(mut self, input: ::std::option::Option<crate::types::UrlConfiguration>) -> Self {
        self.url_configuration = input;
        self
    }
    /// <p>The configuration of the URL/URLs.</p>
    pub fn get_url_configuration(&self) -> &::std::option::Option<crate::types::UrlConfiguration> {
        &self.url_configuration
    }
    /// Consumes the builder and constructs a [`WebSourceConfiguration`](crate::types::WebSourceConfiguration).
    pub fn build(self) -> crate::types::WebSourceConfiguration {
        crate::types::WebSourceConfiguration {
            url_configuration: self.url_configuration,
        }
    }
}
