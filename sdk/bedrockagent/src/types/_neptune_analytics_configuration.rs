// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the storage configuration of the knowledge base in Amazon Neptune Analytics. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-setup-neptune.html">Create a vector index in Amazon Neptune Analytics</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct NeptuneAnalyticsConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the Neptune Analytics vector store.</p>
    pub graph_arn: ::std::string::String,
    /// <p>Contains the names of the fields to which to map information about the vector store.</p>
    pub field_mapping: ::std::option::Option<crate::types::NeptuneAnalyticsFieldMapping>,
}
impl NeptuneAnalyticsConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the Neptune Analytics vector store.</p>
    pub fn graph_arn(&self) -> &str {
        use std::ops::Deref;
        self.graph_arn.deref()
    }
    /// <p>Contains the names of the fields to which to map information about the vector store.</p>
    pub fn field_mapping(&self) -> ::std::option::Option<&crate::types::NeptuneAnalyticsFieldMapping> {
        self.field_mapping.as_ref()
    }
}
impl ::std::fmt::Debug for NeptuneAnalyticsConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("NeptuneAnalyticsConfiguration");
        formatter.field("graph_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("field_mapping", &self.field_mapping);
        formatter.finish()
    }
}
impl NeptuneAnalyticsConfiguration {
    /// Creates a new builder-style object to manufacture [`NeptuneAnalyticsConfiguration`](crate::types::NeptuneAnalyticsConfiguration).
    pub fn builder() -> crate::types::builders::NeptuneAnalyticsConfigurationBuilder {
        crate::types::builders::NeptuneAnalyticsConfigurationBuilder::default()
    }
}

/// A builder for [`NeptuneAnalyticsConfiguration`](crate::types::NeptuneAnalyticsConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct NeptuneAnalyticsConfigurationBuilder {
    pub(crate) graph_arn: ::std::option::Option<::std::string::String>,
    pub(crate) field_mapping: ::std::option::Option<crate::types::NeptuneAnalyticsFieldMapping>,
}
impl NeptuneAnalyticsConfigurationBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Neptune Analytics vector store.</p>
    /// This field is required.
    pub fn graph_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.graph_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Neptune Analytics vector store.</p>
    pub fn set_graph_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.graph_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Neptune Analytics vector store.</p>
    pub fn get_graph_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.graph_arn
    }
    /// <p>Contains the names of the fields to which to map information about the vector store.</p>
    /// This field is required.
    pub fn field_mapping(mut self, input: crate::types::NeptuneAnalyticsFieldMapping) -> Self {
        self.field_mapping = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the names of the fields to which to map information about the vector store.</p>
    pub fn set_field_mapping(mut self, input: ::std::option::Option<crate::types::NeptuneAnalyticsFieldMapping>) -> Self {
        self.field_mapping = input;
        self
    }
    /// <p>Contains the names of the fields to which to map information about the vector store.</p>
    pub fn get_field_mapping(&self) -> &::std::option::Option<crate::types::NeptuneAnalyticsFieldMapping> {
        &self.field_mapping
    }
    /// Consumes the builder and constructs a [`NeptuneAnalyticsConfiguration`](crate::types::NeptuneAnalyticsConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`graph_arn`](crate::types::builders::NeptuneAnalyticsConfigurationBuilder::graph_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::NeptuneAnalyticsConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NeptuneAnalyticsConfiguration {
            graph_arn: self.graph_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "graph_arn",
                    "graph_arn was not specified but it is required when building NeptuneAnalyticsConfiguration",
                )
            })?,
            field_mapping: self.field_mapping,
        })
    }
}
impl ::std::fmt::Debug for NeptuneAnalyticsConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("NeptuneAnalyticsConfigurationBuilder");
        formatter.field("graph_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("field_mapping", &self.field_mapping);
        formatter.finish()
    }
}
