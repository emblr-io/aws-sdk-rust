// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the storage configuration of the knowledge base in MongoDB Atlas.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MongoDbAtlasConfiguration {
    /// <p>The endpoint URL of your MongoDB Atlas cluster for your knowledge base.</p>
    pub endpoint: ::std::string::String,
    /// <p>The database name in your MongoDB Atlas cluster for your knowledge base.</p>
    pub database_name: ::std::string::String,
    /// <p>The collection name of the knowledge base in MongoDB Atlas.</p>
    pub collection_name: ::std::string::String,
    /// <p>The name of the MongoDB Atlas vector search index.</p>
    pub vector_index_name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the secret that you created in Secrets Manager that contains user credentials for your MongoDB Atlas cluster.</p>
    pub credentials_secret_arn: ::std::string::String,
    /// <p>Contains the names of the fields to which to map information about the vector store.</p>
    pub field_mapping: ::std::option::Option<crate::types::MongoDbAtlasFieldMapping>,
    /// <p>The name of the VPC endpoint service in your account that is connected to your MongoDB Atlas cluster.</p>
    pub endpoint_service_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the text search index in the MongoDB collection. This is required for using the hybrid search feature.</p>
    pub text_index_name: ::std::option::Option<::std::string::String>,
}
impl MongoDbAtlasConfiguration {
    /// <p>The endpoint URL of your MongoDB Atlas cluster for your knowledge base.</p>
    pub fn endpoint(&self) -> &str {
        use std::ops::Deref;
        self.endpoint.deref()
    }
    /// <p>The database name in your MongoDB Atlas cluster for your knowledge base.</p>
    pub fn database_name(&self) -> &str {
        use std::ops::Deref;
        self.database_name.deref()
    }
    /// <p>The collection name of the knowledge base in MongoDB Atlas.</p>
    pub fn collection_name(&self) -> &str {
        use std::ops::Deref;
        self.collection_name.deref()
    }
    /// <p>The name of the MongoDB Atlas vector search index.</p>
    pub fn vector_index_name(&self) -> &str {
        use std::ops::Deref;
        self.vector_index_name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the secret that you created in Secrets Manager that contains user credentials for your MongoDB Atlas cluster.</p>
    pub fn credentials_secret_arn(&self) -> &str {
        use std::ops::Deref;
        self.credentials_secret_arn.deref()
    }
    /// <p>Contains the names of the fields to which to map information about the vector store.</p>
    pub fn field_mapping(&self) -> ::std::option::Option<&crate::types::MongoDbAtlasFieldMapping> {
        self.field_mapping.as_ref()
    }
    /// <p>The name of the VPC endpoint service in your account that is connected to your MongoDB Atlas cluster.</p>
    pub fn endpoint_service_name(&self) -> ::std::option::Option<&str> {
        self.endpoint_service_name.as_deref()
    }
    /// <p>The name of the text search index in the MongoDB collection. This is required for using the hybrid search feature.</p>
    pub fn text_index_name(&self) -> ::std::option::Option<&str> {
        self.text_index_name.as_deref()
    }
}
impl MongoDbAtlasConfiguration {
    /// Creates a new builder-style object to manufacture [`MongoDbAtlasConfiguration`](crate::types::MongoDbAtlasConfiguration).
    pub fn builder() -> crate::types::builders::MongoDbAtlasConfigurationBuilder {
        crate::types::builders::MongoDbAtlasConfigurationBuilder::default()
    }
}

/// A builder for [`MongoDbAtlasConfiguration`](crate::types::MongoDbAtlasConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MongoDbAtlasConfigurationBuilder {
    pub(crate) endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) collection_name: ::std::option::Option<::std::string::String>,
    pub(crate) vector_index_name: ::std::option::Option<::std::string::String>,
    pub(crate) credentials_secret_arn: ::std::option::Option<::std::string::String>,
    pub(crate) field_mapping: ::std::option::Option<crate::types::MongoDbAtlasFieldMapping>,
    pub(crate) endpoint_service_name: ::std::option::Option<::std::string::String>,
    pub(crate) text_index_name: ::std::option::Option<::std::string::String>,
}
impl MongoDbAtlasConfigurationBuilder {
    /// <p>The endpoint URL of your MongoDB Atlas cluster for your knowledge base.</p>
    /// This field is required.
    pub fn endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The endpoint URL of your MongoDB Atlas cluster for your knowledge base.</p>
    pub fn set_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint = input;
        self
    }
    /// <p>The endpoint URL of your MongoDB Atlas cluster for your knowledge base.</p>
    pub fn get_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint
    }
    /// <p>The database name in your MongoDB Atlas cluster for your knowledge base.</p>
    /// This field is required.
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database name in your MongoDB Atlas cluster for your knowledge base.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The database name in your MongoDB Atlas cluster for your knowledge base.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The collection name of the knowledge base in MongoDB Atlas.</p>
    /// This field is required.
    pub fn collection_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collection_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The collection name of the knowledge base in MongoDB Atlas.</p>
    pub fn set_collection_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collection_name = input;
        self
    }
    /// <p>The collection name of the knowledge base in MongoDB Atlas.</p>
    pub fn get_collection_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.collection_name
    }
    /// <p>The name of the MongoDB Atlas vector search index.</p>
    /// This field is required.
    pub fn vector_index_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vector_index_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the MongoDB Atlas vector search index.</p>
    pub fn set_vector_index_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vector_index_name = input;
        self
    }
    /// <p>The name of the MongoDB Atlas vector search index.</p>
    pub fn get_vector_index_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vector_index_name
    }
    /// <p>The Amazon Resource Name (ARN) of the secret that you created in Secrets Manager that contains user credentials for your MongoDB Atlas cluster.</p>
    /// This field is required.
    pub fn credentials_secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.credentials_secret_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the secret that you created in Secrets Manager that contains user credentials for your MongoDB Atlas cluster.</p>
    pub fn set_credentials_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.credentials_secret_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the secret that you created in Secrets Manager that contains user credentials for your MongoDB Atlas cluster.</p>
    pub fn get_credentials_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.credentials_secret_arn
    }
    /// <p>Contains the names of the fields to which to map information about the vector store.</p>
    /// This field is required.
    pub fn field_mapping(mut self, input: crate::types::MongoDbAtlasFieldMapping) -> Self {
        self.field_mapping = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the names of the fields to which to map information about the vector store.</p>
    pub fn set_field_mapping(mut self, input: ::std::option::Option<crate::types::MongoDbAtlasFieldMapping>) -> Self {
        self.field_mapping = input;
        self
    }
    /// <p>Contains the names of the fields to which to map information about the vector store.</p>
    pub fn get_field_mapping(&self) -> &::std::option::Option<crate::types::MongoDbAtlasFieldMapping> {
        &self.field_mapping
    }
    /// <p>The name of the VPC endpoint service in your account that is connected to your MongoDB Atlas cluster.</p>
    pub fn endpoint_service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint_service_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the VPC endpoint service in your account that is connected to your MongoDB Atlas cluster.</p>
    pub fn set_endpoint_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint_service_name = input;
        self
    }
    /// <p>The name of the VPC endpoint service in your account that is connected to your MongoDB Atlas cluster.</p>
    pub fn get_endpoint_service_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint_service_name
    }
    /// <p>The name of the text search index in the MongoDB collection. This is required for using the hybrid search feature.</p>
    pub fn text_index_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text_index_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the text search index in the MongoDB collection. This is required for using the hybrid search feature.</p>
    pub fn set_text_index_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text_index_name = input;
        self
    }
    /// <p>The name of the text search index in the MongoDB collection. This is required for using the hybrid search feature.</p>
    pub fn get_text_index_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.text_index_name
    }
    /// Consumes the builder and constructs a [`MongoDbAtlasConfiguration`](crate::types::MongoDbAtlasConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`endpoint`](crate::types::builders::MongoDbAtlasConfigurationBuilder::endpoint)
    /// - [`database_name`](crate::types::builders::MongoDbAtlasConfigurationBuilder::database_name)
    /// - [`collection_name`](crate::types::builders::MongoDbAtlasConfigurationBuilder::collection_name)
    /// - [`vector_index_name`](crate::types::builders::MongoDbAtlasConfigurationBuilder::vector_index_name)
    /// - [`credentials_secret_arn`](crate::types::builders::MongoDbAtlasConfigurationBuilder::credentials_secret_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::MongoDbAtlasConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MongoDbAtlasConfiguration {
            endpoint: self.endpoint.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "endpoint",
                    "endpoint was not specified but it is required when building MongoDbAtlasConfiguration",
                )
            })?,
            database_name: self.database_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "database_name",
                    "database_name was not specified but it is required when building MongoDbAtlasConfiguration",
                )
            })?,
            collection_name: self.collection_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "collection_name",
                    "collection_name was not specified but it is required when building MongoDbAtlasConfiguration",
                )
            })?,
            vector_index_name: self.vector_index_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "vector_index_name",
                    "vector_index_name was not specified but it is required when building MongoDbAtlasConfiguration",
                )
            })?,
            credentials_secret_arn: self.credentials_secret_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "credentials_secret_arn",
                    "credentials_secret_arn was not specified but it is required when building MongoDbAtlasConfiguration",
                )
            })?,
            field_mapping: self.field_mapping,
            endpoint_service_name: self.endpoint_service_name,
            text_index_name: self.text_index_name,
        })
    }
}
