// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings for parsing document contents. If you exclude this field, the default parser converts the contents of each document into text before splitting it into chunks. Specify the parsing strategy to use in the <code>parsingStrategy</code> field and include the relevant configuration, or omit it to use the Amazon Bedrock default parser. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/kb-advanced-parsing.html">Parsing options for your data source</a>.</p><note>
/// <p>If you specify <code>BEDROCK_DATA_AUTOMATION</code> or <code>BEDROCK_FOUNDATION_MODEL</code> and it fails to parse a file, the Amazon Bedrock default parser will be used instead.</p>
/// </note>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParsingConfiguration {
    /// <p>The parsing strategy for the data source.</p>
    pub parsing_strategy: crate::types::ParsingStrategy,
    /// <p>If you specify <code>BEDROCK_FOUNDATION_MODEL</code> as the parsing strategy for ingesting your data source, use this object to modify configurations for using a foundation model to parse documents.</p>
    pub bedrock_foundation_model_configuration: ::std::option::Option<crate::types::BedrockFoundationModelConfiguration>,
    /// <p>If you specify <code>BEDROCK_DATA_AUTOMATION</code> as the parsing strategy for ingesting your data source, use this object to modify configurations for using the Amazon Bedrock Data Automation parser.</p>
    pub bedrock_data_automation_configuration: ::std::option::Option<crate::types::BedrockDataAutomationConfiguration>,
}
impl ParsingConfiguration {
    /// <p>The parsing strategy for the data source.</p>
    pub fn parsing_strategy(&self) -> &crate::types::ParsingStrategy {
        &self.parsing_strategy
    }
    /// <p>If you specify <code>BEDROCK_FOUNDATION_MODEL</code> as the parsing strategy for ingesting your data source, use this object to modify configurations for using a foundation model to parse documents.</p>
    pub fn bedrock_foundation_model_configuration(&self) -> ::std::option::Option<&crate::types::BedrockFoundationModelConfiguration> {
        self.bedrock_foundation_model_configuration.as_ref()
    }
    /// <p>If you specify <code>BEDROCK_DATA_AUTOMATION</code> as the parsing strategy for ingesting your data source, use this object to modify configurations for using the Amazon Bedrock Data Automation parser.</p>
    pub fn bedrock_data_automation_configuration(&self) -> ::std::option::Option<&crate::types::BedrockDataAutomationConfiguration> {
        self.bedrock_data_automation_configuration.as_ref()
    }
}
impl ParsingConfiguration {
    /// Creates a new builder-style object to manufacture [`ParsingConfiguration`](crate::types::ParsingConfiguration).
    pub fn builder() -> crate::types::builders::ParsingConfigurationBuilder {
        crate::types::builders::ParsingConfigurationBuilder::default()
    }
}

/// A builder for [`ParsingConfiguration`](crate::types::ParsingConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ParsingConfigurationBuilder {
    pub(crate) parsing_strategy: ::std::option::Option<crate::types::ParsingStrategy>,
    pub(crate) bedrock_foundation_model_configuration: ::std::option::Option<crate::types::BedrockFoundationModelConfiguration>,
    pub(crate) bedrock_data_automation_configuration: ::std::option::Option<crate::types::BedrockDataAutomationConfiguration>,
}
impl ParsingConfigurationBuilder {
    /// <p>The parsing strategy for the data source.</p>
    /// This field is required.
    pub fn parsing_strategy(mut self, input: crate::types::ParsingStrategy) -> Self {
        self.parsing_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The parsing strategy for the data source.</p>
    pub fn set_parsing_strategy(mut self, input: ::std::option::Option<crate::types::ParsingStrategy>) -> Self {
        self.parsing_strategy = input;
        self
    }
    /// <p>The parsing strategy for the data source.</p>
    pub fn get_parsing_strategy(&self) -> &::std::option::Option<crate::types::ParsingStrategy> {
        &self.parsing_strategy
    }
    /// <p>If you specify <code>BEDROCK_FOUNDATION_MODEL</code> as the parsing strategy for ingesting your data source, use this object to modify configurations for using a foundation model to parse documents.</p>
    pub fn bedrock_foundation_model_configuration(mut self, input: crate::types::BedrockFoundationModelConfiguration) -> Self {
        self.bedrock_foundation_model_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>If you specify <code>BEDROCK_FOUNDATION_MODEL</code> as the parsing strategy for ingesting your data source, use this object to modify configurations for using a foundation model to parse documents.</p>
    pub fn set_bedrock_foundation_model_configuration(
        mut self,
        input: ::std::option::Option<crate::types::BedrockFoundationModelConfiguration>,
    ) -> Self {
        self.bedrock_foundation_model_configuration = input;
        self
    }
    /// <p>If you specify <code>BEDROCK_FOUNDATION_MODEL</code> as the parsing strategy for ingesting your data source, use this object to modify configurations for using a foundation model to parse documents.</p>
    pub fn get_bedrock_foundation_model_configuration(&self) -> &::std::option::Option<crate::types::BedrockFoundationModelConfiguration> {
        &self.bedrock_foundation_model_configuration
    }
    /// <p>If you specify <code>BEDROCK_DATA_AUTOMATION</code> as the parsing strategy for ingesting your data source, use this object to modify configurations for using the Amazon Bedrock Data Automation parser.</p>
    pub fn bedrock_data_automation_configuration(mut self, input: crate::types::BedrockDataAutomationConfiguration) -> Self {
        self.bedrock_data_automation_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>If you specify <code>BEDROCK_DATA_AUTOMATION</code> as the parsing strategy for ingesting your data source, use this object to modify configurations for using the Amazon Bedrock Data Automation parser.</p>
    pub fn set_bedrock_data_automation_configuration(
        mut self,
        input: ::std::option::Option<crate::types::BedrockDataAutomationConfiguration>,
    ) -> Self {
        self.bedrock_data_automation_configuration = input;
        self
    }
    /// <p>If you specify <code>BEDROCK_DATA_AUTOMATION</code> as the parsing strategy for ingesting your data source, use this object to modify configurations for using the Amazon Bedrock Data Automation parser.</p>
    pub fn get_bedrock_data_automation_configuration(&self) -> &::std::option::Option<crate::types::BedrockDataAutomationConfiguration> {
        &self.bedrock_data_automation_configuration
    }
    /// Consumes the builder and constructs a [`ParsingConfiguration`](crate::types::ParsingConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`parsing_strategy`](crate::types::builders::ParsingConfigurationBuilder::parsing_strategy)
    pub fn build(self) -> ::std::result::Result<crate::types::ParsingConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ParsingConfiguration {
            parsing_strategy: self.parsing_strategy.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "parsing_strategy",
                    "parsing_strategy was not specified but it is required when building ParsingConfiguration",
                )
            })?,
            bedrock_foundation_model_configuration: self.bedrock_foundation_model_configuration,
            bedrock_data_automation_configuration: self.bedrock_data_automation_configuration,
        })
    }
}
