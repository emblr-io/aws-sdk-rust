// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a flow that contains an incompatible node in a DoWhile loop.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LoopIncompatibleNodeTypeFlowValidationDetails {
    /// <p>The <code>Loop</code> container node that contains an incompatible node.</p>
    pub node: ::std::string::String,
    /// <p>The node type of the incompatible node in the DoWhile loop. Some node types, like a condition node, aren't allowed in a DoWhile loop.</p>
    pub incompatible_node_type: crate::types::IncompatibleLoopNodeType,
    /// <p>The node that's incompatible in the DoWhile loop.</p>
    pub incompatible_node_name: ::std::string::String,
}
impl LoopIncompatibleNodeTypeFlowValidationDetails {
    /// <p>The <code>Loop</code> container node that contains an incompatible node.</p>
    pub fn node(&self) -> &str {
        use std::ops::Deref;
        self.node.deref()
    }
    /// <p>The node type of the incompatible node in the DoWhile loop. Some node types, like a condition node, aren't allowed in a DoWhile loop.</p>
    pub fn incompatible_node_type(&self) -> &crate::types::IncompatibleLoopNodeType {
        &self.incompatible_node_type
    }
    /// <p>The node that's incompatible in the DoWhile loop.</p>
    pub fn incompatible_node_name(&self) -> &str {
        use std::ops::Deref;
        self.incompatible_node_name.deref()
    }
}
impl LoopIncompatibleNodeTypeFlowValidationDetails {
    /// Creates a new builder-style object to manufacture [`LoopIncompatibleNodeTypeFlowValidationDetails`](crate::types::LoopIncompatibleNodeTypeFlowValidationDetails).
    pub fn builder() -> crate::types::builders::LoopIncompatibleNodeTypeFlowValidationDetailsBuilder {
        crate::types::builders::LoopIncompatibleNodeTypeFlowValidationDetailsBuilder::default()
    }
}

/// A builder for [`LoopIncompatibleNodeTypeFlowValidationDetails`](crate::types::LoopIncompatibleNodeTypeFlowValidationDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LoopIncompatibleNodeTypeFlowValidationDetailsBuilder {
    pub(crate) node: ::std::option::Option<::std::string::String>,
    pub(crate) incompatible_node_type: ::std::option::Option<crate::types::IncompatibleLoopNodeType>,
    pub(crate) incompatible_node_name: ::std::option::Option<::std::string::String>,
}
impl LoopIncompatibleNodeTypeFlowValidationDetailsBuilder {
    /// <p>The <code>Loop</code> container node that contains an incompatible node.</p>
    /// This field is required.
    pub fn node(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>Loop</code> container node that contains an incompatible node.</p>
    pub fn set_node(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node = input;
        self
    }
    /// <p>The <code>Loop</code> container node that contains an incompatible node.</p>
    pub fn get_node(&self) -> &::std::option::Option<::std::string::String> {
        &self.node
    }
    /// <p>The node type of the incompatible node in the DoWhile loop. Some node types, like a condition node, aren't allowed in a DoWhile loop.</p>
    /// This field is required.
    pub fn incompatible_node_type(mut self, input: crate::types::IncompatibleLoopNodeType) -> Self {
        self.incompatible_node_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The node type of the incompatible node in the DoWhile loop. Some node types, like a condition node, aren't allowed in a DoWhile loop.</p>
    pub fn set_incompatible_node_type(mut self, input: ::std::option::Option<crate::types::IncompatibleLoopNodeType>) -> Self {
        self.incompatible_node_type = input;
        self
    }
    /// <p>The node type of the incompatible node in the DoWhile loop. Some node types, like a condition node, aren't allowed in a DoWhile loop.</p>
    pub fn get_incompatible_node_type(&self) -> &::std::option::Option<crate::types::IncompatibleLoopNodeType> {
        &self.incompatible_node_type
    }
    /// <p>The node that's incompatible in the DoWhile loop.</p>
    /// This field is required.
    pub fn incompatible_node_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.incompatible_node_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The node that's incompatible in the DoWhile loop.</p>
    pub fn set_incompatible_node_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.incompatible_node_name = input;
        self
    }
    /// <p>The node that's incompatible in the DoWhile loop.</p>
    pub fn get_incompatible_node_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.incompatible_node_name
    }
    /// Consumes the builder and constructs a [`LoopIncompatibleNodeTypeFlowValidationDetails`](crate::types::LoopIncompatibleNodeTypeFlowValidationDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`node`](crate::types::builders::LoopIncompatibleNodeTypeFlowValidationDetailsBuilder::node)
    /// - [`incompatible_node_type`](crate::types::builders::LoopIncompatibleNodeTypeFlowValidationDetailsBuilder::incompatible_node_type)
    /// - [`incompatible_node_name`](crate::types::builders::LoopIncompatibleNodeTypeFlowValidationDetailsBuilder::incompatible_node_name)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::LoopIncompatibleNodeTypeFlowValidationDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LoopIncompatibleNodeTypeFlowValidationDetails {
            node: self.node.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "node",
                    "node was not specified but it is required when building LoopIncompatibleNodeTypeFlowValidationDetails",
                )
            })?,
            incompatible_node_type: self.incompatible_node_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "incompatible_node_type",
                    "incompatible_node_type was not specified but it is required when building LoopIncompatibleNodeTypeFlowValidationDetails",
                )
            })?,
            incompatible_node_name: self.incompatible_node_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "incompatible_node_name",
                    "incompatible_node_name was not specified but it is required when building LoopIncompatibleNodeTypeFlowValidationDetails",
                )
            })?,
        })
    }
}
