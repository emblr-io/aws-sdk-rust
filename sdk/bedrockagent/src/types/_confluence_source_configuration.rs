// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The endpoint information to connect to your Confluence data source.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfluenceSourceConfiguration {
    /// <p>The Confluence host URL or instance URL.</p>
    pub host_url: ::std::string::String,
    /// <p>The supported host type, whether online/cloud or server/on-premises.</p>
    pub host_type: crate::types::ConfluenceHostType,
    /// <p>The supported authentication type to authenticate and connect to your Confluence instance.</p>
    pub auth_type: crate::types::ConfluenceAuthType,
    /// <p>The Amazon Resource Name of an Secrets Manager secret that stores your authentication credentials for your Confluence instance URL. For more information on the key-value pairs that must be included in your secret, depending on your authentication type, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/confluence-data-source-connector.html#configuration-confluence-connector">Confluence connection configuration</a>.</p>
    pub credentials_secret_arn: ::std::string::String,
}
impl ConfluenceSourceConfiguration {
    /// <p>The Confluence host URL or instance URL.</p>
    pub fn host_url(&self) -> &str {
        use std::ops::Deref;
        self.host_url.deref()
    }
    /// <p>The supported host type, whether online/cloud or server/on-premises.</p>
    pub fn host_type(&self) -> &crate::types::ConfluenceHostType {
        &self.host_type
    }
    /// <p>The supported authentication type to authenticate and connect to your Confluence instance.</p>
    pub fn auth_type(&self) -> &crate::types::ConfluenceAuthType {
        &self.auth_type
    }
    /// <p>The Amazon Resource Name of an Secrets Manager secret that stores your authentication credentials for your Confluence instance URL. For more information on the key-value pairs that must be included in your secret, depending on your authentication type, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/confluence-data-source-connector.html#configuration-confluence-connector">Confluence connection configuration</a>.</p>
    pub fn credentials_secret_arn(&self) -> &str {
        use std::ops::Deref;
        self.credentials_secret_arn.deref()
    }
}
impl ConfluenceSourceConfiguration {
    /// Creates a new builder-style object to manufacture [`ConfluenceSourceConfiguration`](crate::types::ConfluenceSourceConfiguration).
    pub fn builder() -> crate::types::builders::ConfluenceSourceConfigurationBuilder {
        crate::types::builders::ConfluenceSourceConfigurationBuilder::default()
    }
}

/// A builder for [`ConfluenceSourceConfiguration`](crate::types::ConfluenceSourceConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConfluenceSourceConfigurationBuilder {
    pub(crate) host_url: ::std::option::Option<::std::string::String>,
    pub(crate) host_type: ::std::option::Option<crate::types::ConfluenceHostType>,
    pub(crate) auth_type: ::std::option::Option<crate::types::ConfluenceAuthType>,
    pub(crate) credentials_secret_arn: ::std::option::Option<::std::string::String>,
}
impl ConfluenceSourceConfigurationBuilder {
    /// <p>The Confluence host URL or instance URL.</p>
    /// This field is required.
    pub fn host_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.host_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Confluence host URL or instance URL.</p>
    pub fn set_host_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.host_url = input;
        self
    }
    /// <p>The Confluence host URL or instance URL.</p>
    pub fn get_host_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.host_url
    }
    /// <p>The supported host type, whether online/cloud or server/on-premises.</p>
    /// This field is required.
    pub fn host_type(mut self, input: crate::types::ConfluenceHostType) -> Self {
        self.host_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The supported host type, whether online/cloud or server/on-premises.</p>
    pub fn set_host_type(mut self, input: ::std::option::Option<crate::types::ConfluenceHostType>) -> Self {
        self.host_type = input;
        self
    }
    /// <p>The supported host type, whether online/cloud or server/on-premises.</p>
    pub fn get_host_type(&self) -> &::std::option::Option<crate::types::ConfluenceHostType> {
        &self.host_type
    }
    /// <p>The supported authentication type to authenticate and connect to your Confluence instance.</p>
    /// This field is required.
    pub fn auth_type(mut self, input: crate::types::ConfluenceAuthType) -> Self {
        self.auth_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The supported authentication type to authenticate and connect to your Confluence instance.</p>
    pub fn set_auth_type(mut self, input: ::std::option::Option<crate::types::ConfluenceAuthType>) -> Self {
        self.auth_type = input;
        self
    }
    /// <p>The supported authentication type to authenticate and connect to your Confluence instance.</p>
    pub fn get_auth_type(&self) -> &::std::option::Option<crate::types::ConfluenceAuthType> {
        &self.auth_type
    }
    /// <p>The Amazon Resource Name of an Secrets Manager secret that stores your authentication credentials for your Confluence instance URL. For more information on the key-value pairs that must be included in your secret, depending on your authentication type, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/confluence-data-source-connector.html#configuration-confluence-connector">Confluence connection configuration</a>.</p>
    /// This field is required.
    pub fn credentials_secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.credentials_secret_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name of an Secrets Manager secret that stores your authentication credentials for your Confluence instance URL. For more information on the key-value pairs that must be included in your secret, depending on your authentication type, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/confluence-data-source-connector.html#configuration-confluence-connector">Confluence connection configuration</a>.</p>
    pub fn set_credentials_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.credentials_secret_arn = input;
        self
    }
    /// <p>The Amazon Resource Name of an Secrets Manager secret that stores your authentication credentials for your Confluence instance URL. For more information on the key-value pairs that must be included in your secret, depending on your authentication type, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/confluence-data-source-connector.html#configuration-confluence-connector">Confluence connection configuration</a>.</p>
    pub fn get_credentials_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.credentials_secret_arn
    }
    /// Consumes the builder and constructs a [`ConfluenceSourceConfiguration`](crate::types::ConfluenceSourceConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`host_url`](crate::types::builders::ConfluenceSourceConfigurationBuilder::host_url)
    /// - [`host_type`](crate::types::builders::ConfluenceSourceConfigurationBuilder::host_type)
    /// - [`auth_type`](crate::types::builders::ConfluenceSourceConfigurationBuilder::auth_type)
    /// - [`credentials_secret_arn`](crate::types::builders::ConfluenceSourceConfigurationBuilder::credentials_secret_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::ConfluenceSourceConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConfluenceSourceConfiguration {
            host_url: self.host_url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "host_url",
                    "host_url was not specified but it is required when building ConfluenceSourceConfiguration",
                )
            })?,
            host_type: self.host_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "host_type",
                    "host_type was not specified but it is required when building ConfluenceSourceConfiguration",
                )
            })?,
            auth_type: self.auth_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "auth_type",
                    "auth_type was not specified but it is required when building ConfluenceSourceConfiguration",
                )
            })?,
            credentials_secret_arn: self.credentials_secret_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "credentials_secret_arn",
                    "credentials_secret_arn was not specified but it is required when building ConfluenceSourceConfiguration",
                )
            })?,
        })
    }
}
