// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the model used to create vector embeddings for the knowledge base.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VectorKnowledgeBaseConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the model used to create vector embeddings for the knowledge base.</p>
    pub embedding_model_arn: ::std::string::String,
    /// <p>The embeddings model configuration details for the vector model used in Knowledge Base.</p>
    pub embedding_model_configuration: ::std::option::Option<crate::types::EmbeddingModelConfiguration>,
    /// <p>If you include multimodal data from your data source, use this object to specify configurations for the storage location of the images extracted from your documents. These images can be retrieved and returned to the end user. They can also be used in generation when using <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_RetrieveAndGenerate.html">RetrieveAndGenerate</a>.</p>
    pub supplemental_data_storage_configuration: ::std::option::Option<crate::types::SupplementalDataStorageConfiguration>,
}
impl VectorKnowledgeBaseConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the model used to create vector embeddings for the knowledge base.</p>
    pub fn embedding_model_arn(&self) -> &str {
        use std::ops::Deref;
        self.embedding_model_arn.deref()
    }
    /// <p>The embeddings model configuration details for the vector model used in Knowledge Base.</p>
    pub fn embedding_model_configuration(&self) -> ::std::option::Option<&crate::types::EmbeddingModelConfiguration> {
        self.embedding_model_configuration.as_ref()
    }
    /// <p>If you include multimodal data from your data source, use this object to specify configurations for the storage location of the images extracted from your documents. These images can be retrieved and returned to the end user. They can also be used in generation when using <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_RetrieveAndGenerate.html">RetrieveAndGenerate</a>.</p>
    pub fn supplemental_data_storage_configuration(&self) -> ::std::option::Option<&crate::types::SupplementalDataStorageConfiguration> {
        self.supplemental_data_storage_configuration.as_ref()
    }
}
impl VectorKnowledgeBaseConfiguration {
    /// Creates a new builder-style object to manufacture [`VectorKnowledgeBaseConfiguration`](crate::types::VectorKnowledgeBaseConfiguration).
    pub fn builder() -> crate::types::builders::VectorKnowledgeBaseConfigurationBuilder {
        crate::types::builders::VectorKnowledgeBaseConfigurationBuilder::default()
    }
}

/// A builder for [`VectorKnowledgeBaseConfiguration`](crate::types::VectorKnowledgeBaseConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VectorKnowledgeBaseConfigurationBuilder {
    pub(crate) embedding_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) embedding_model_configuration: ::std::option::Option<crate::types::EmbeddingModelConfiguration>,
    pub(crate) supplemental_data_storage_configuration: ::std::option::Option<crate::types::SupplementalDataStorageConfiguration>,
}
impl VectorKnowledgeBaseConfigurationBuilder {
    /// <p>The Amazon Resource Name (ARN) of the model used to create vector embeddings for the knowledge base.</p>
    /// This field is required.
    pub fn embedding_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.embedding_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model used to create vector embeddings for the knowledge base.</p>
    pub fn set_embedding_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.embedding_model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model used to create vector embeddings for the knowledge base.</p>
    pub fn get_embedding_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.embedding_model_arn
    }
    /// <p>The embeddings model configuration details for the vector model used in Knowledge Base.</p>
    pub fn embedding_model_configuration(mut self, input: crate::types::EmbeddingModelConfiguration) -> Self {
        self.embedding_model_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The embeddings model configuration details for the vector model used in Knowledge Base.</p>
    pub fn set_embedding_model_configuration(mut self, input: ::std::option::Option<crate::types::EmbeddingModelConfiguration>) -> Self {
        self.embedding_model_configuration = input;
        self
    }
    /// <p>The embeddings model configuration details for the vector model used in Knowledge Base.</p>
    pub fn get_embedding_model_configuration(&self) -> &::std::option::Option<crate::types::EmbeddingModelConfiguration> {
        &self.embedding_model_configuration
    }
    /// <p>If you include multimodal data from your data source, use this object to specify configurations for the storage location of the images extracted from your documents. These images can be retrieved and returned to the end user. They can also be used in generation when using <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_RetrieveAndGenerate.html">RetrieveAndGenerate</a>.</p>
    pub fn supplemental_data_storage_configuration(mut self, input: crate::types::SupplementalDataStorageConfiguration) -> Self {
        self.supplemental_data_storage_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>If you include multimodal data from your data source, use this object to specify configurations for the storage location of the images extracted from your documents. These images can be retrieved and returned to the end user. They can also be used in generation when using <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_RetrieveAndGenerate.html">RetrieveAndGenerate</a>.</p>
    pub fn set_supplemental_data_storage_configuration(
        mut self,
        input: ::std::option::Option<crate::types::SupplementalDataStorageConfiguration>,
    ) -> Self {
        self.supplemental_data_storage_configuration = input;
        self
    }
    /// <p>If you include multimodal data from your data source, use this object to specify configurations for the storage location of the images extracted from your documents. These images can be retrieved and returned to the end user. They can also be used in generation when using <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_RetrieveAndGenerate.html">RetrieveAndGenerate</a>.</p>
    pub fn get_supplemental_data_storage_configuration(&self) -> &::std::option::Option<crate::types::SupplementalDataStorageConfiguration> {
        &self.supplemental_data_storage_configuration
    }
    /// Consumes the builder and constructs a [`VectorKnowledgeBaseConfiguration`](crate::types::VectorKnowledgeBaseConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`embedding_model_arn`](crate::types::builders::VectorKnowledgeBaseConfigurationBuilder::embedding_model_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::VectorKnowledgeBaseConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::VectorKnowledgeBaseConfiguration {
            embedding_model_arn: self.embedding_model_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "embedding_model_arn",
                    "embedding_model_arn was not specified but it is required when building VectorKnowledgeBaseConfiguration",
                )
            })?,
            embedding_model_configuration: self.embedding_model_configuration,
            supplemental_data_storage_configuration: self.supplemental_data_storage_configuration,
        })
    }
}
