// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings for hierarchical document chunking for a data source. Hierarchical chunking splits documents into layers of chunks where the first layer contains large chunks, and the second layer contains smaller chunks derived from the first layer.</p>
/// <p>You configure the number of tokens to overlap, or repeat across adjacent chunks. For example, if you set overlap tokens to 60, the last 60 tokens in the first chunk are also included at the beginning of the second chunk. For each layer, you must also configure the maximum number of tokens in a chunk.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HierarchicalChunkingConfiguration {
    /// <p>Token settings for each layer.</p>
    pub level_configurations: ::std::vec::Vec<crate::types::HierarchicalChunkingLevelConfiguration>,
    /// <p>The number of tokens to repeat across chunks in the same layer.</p>
    pub overlap_tokens: i32,
}
impl HierarchicalChunkingConfiguration {
    /// <p>Token settings for each layer.</p>
    pub fn level_configurations(&self) -> &[crate::types::HierarchicalChunkingLevelConfiguration] {
        use std::ops::Deref;
        self.level_configurations.deref()
    }
    /// <p>The number of tokens to repeat across chunks in the same layer.</p>
    pub fn overlap_tokens(&self) -> i32 {
        self.overlap_tokens
    }
}
impl HierarchicalChunkingConfiguration {
    /// Creates a new builder-style object to manufacture [`HierarchicalChunkingConfiguration`](crate::types::HierarchicalChunkingConfiguration).
    pub fn builder() -> crate::types::builders::HierarchicalChunkingConfigurationBuilder {
        crate::types::builders::HierarchicalChunkingConfigurationBuilder::default()
    }
}

/// A builder for [`HierarchicalChunkingConfiguration`](crate::types::HierarchicalChunkingConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct HierarchicalChunkingConfigurationBuilder {
    pub(crate) level_configurations: ::std::option::Option<::std::vec::Vec<crate::types::HierarchicalChunkingLevelConfiguration>>,
    pub(crate) overlap_tokens: ::std::option::Option<i32>,
}
impl HierarchicalChunkingConfigurationBuilder {
    /// Appends an item to `level_configurations`.
    ///
    /// To override the contents of this collection use [`set_level_configurations`](Self::set_level_configurations).
    ///
    /// <p>Token settings for each layer.</p>
    pub fn level_configurations(mut self, input: crate::types::HierarchicalChunkingLevelConfiguration) -> Self {
        let mut v = self.level_configurations.unwrap_or_default();
        v.push(input);
        self.level_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Token settings for each layer.</p>
    pub fn set_level_configurations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::HierarchicalChunkingLevelConfiguration>>,
    ) -> Self {
        self.level_configurations = input;
        self
    }
    /// <p>Token settings for each layer.</p>
    pub fn get_level_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::HierarchicalChunkingLevelConfiguration>> {
        &self.level_configurations
    }
    /// <p>The number of tokens to repeat across chunks in the same layer.</p>
    /// This field is required.
    pub fn overlap_tokens(mut self, input: i32) -> Self {
        self.overlap_tokens = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of tokens to repeat across chunks in the same layer.</p>
    pub fn set_overlap_tokens(mut self, input: ::std::option::Option<i32>) -> Self {
        self.overlap_tokens = input;
        self
    }
    /// <p>The number of tokens to repeat across chunks in the same layer.</p>
    pub fn get_overlap_tokens(&self) -> &::std::option::Option<i32> {
        &self.overlap_tokens
    }
    /// Consumes the builder and constructs a [`HierarchicalChunkingConfiguration`](crate::types::HierarchicalChunkingConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`level_configurations`](crate::types::builders::HierarchicalChunkingConfigurationBuilder::level_configurations)
    /// - [`overlap_tokens`](crate::types::builders::HierarchicalChunkingConfigurationBuilder::overlap_tokens)
    pub fn build(self) -> ::std::result::Result<crate::types::HierarchicalChunkingConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::HierarchicalChunkingConfiguration {
            level_configurations: self.level_configurations.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "level_configurations",
                    "level_configurations was not specified but it is required when building HierarchicalChunkingConfiguration",
                )
            })?,
            overlap_tokens: self.overlap_tokens.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "overlap_tokens",
                    "overlap_tokens was not specified but it is required when building HierarchicalChunkingConfiguration",
                )
            })?,
        })
    }
}
