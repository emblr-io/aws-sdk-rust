// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Determines how multiple nodes in a flow can run in parallel. Running nodes concurrently can improve your flow's performance.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FlowAliasConcurrencyConfiguration {
    /// <p>The type of concurrency to use for parallel node execution. Specify one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>Automatic</code> - Amazon Bedrock determines which nodes can be executed in parallel based on the flow definition and its dependencies.</p></li>
    /// <li>
    /// <p><code>Manual</code> - You specify which nodes can be executed in parallel.</p></li>
    /// </ul>
    pub r#type: crate::types::ConcurrencyType,
    /// <p>The maximum number of nodes that can be executed concurrently in the flow.</p>
    pub max_concurrency: ::std::option::Option<i32>,
}
impl FlowAliasConcurrencyConfiguration {
    /// <p>The type of concurrency to use for parallel node execution. Specify one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>Automatic</code> - Amazon Bedrock determines which nodes can be executed in parallel based on the flow definition and its dependencies.</p></li>
    /// <li>
    /// <p><code>Manual</code> - You specify which nodes can be executed in parallel.</p></li>
    /// </ul>
    pub fn r#type(&self) -> &crate::types::ConcurrencyType {
        &self.r#type
    }
    /// <p>The maximum number of nodes that can be executed concurrently in the flow.</p>
    pub fn max_concurrency(&self) -> ::std::option::Option<i32> {
        self.max_concurrency
    }
}
impl FlowAliasConcurrencyConfiguration {
    /// Creates a new builder-style object to manufacture [`FlowAliasConcurrencyConfiguration`](crate::types::FlowAliasConcurrencyConfiguration).
    pub fn builder() -> crate::types::builders::FlowAliasConcurrencyConfigurationBuilder {
        crate::types::builders::FlowAliasConcurrencyConfigurationBuilder::default()
    }
}

/// A builder for [`FlowAliasConcurrencyConfiguration`](crate::types::FlowAliasConcurrencyConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FlowAliasConcurrencyConfigurationBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::ConcurrencyType>,
    pub(crate) max_concurrency: ::std::option::Option<i32>,
}
impl FlowAliasConcurrencyConfigurationBuilder {
    /// <p>The type of concurrency to use for parallel node execution. Specify one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>Automatic</code> - Amazon Bedrock determines which nodes can be executed in parallel based on the flow definition and its dependencies.</p></li>
    /// <li>
    /// <p><code>Manual</code> - You specify which nodes can be executed in parallel.</p></li>
    /// </ul>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::ConcurrencyType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of concurrency to use for parallel node execution. Specify one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>Automatic</code> - Amazon Bedrock determines which nodes can be executed in parallel based on the flow definition and its dependencies.</p></li>
    /// <li>
    /// <p><code>Manual</code> - You specify which nodes can be executed in parallel.</p></li>
    /// </ul>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ConcurrencyType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of concurrency to use for parallel node execution. Specify one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>Automatic</code> - Amazon Bedrock determines which nodes can be executed in parallel based on the flow definition and its dependencies.</p></li>
    /// <li>
    /// <p><code>Manual</code> - You specify which nodes can be executed in parallel.</p></li>
    /// </ul>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ConcurrencyType> {
        &self.r#type
    }
    /// <p>The maximum number of nodes that can be executed concurrently in the flow.</p>
    pub fn max_concurrency(mut self, input: i32) -> Self {
        self.max_concurrency = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of nodes that can be executed concurrently in the flow.</p>
    pub fn set_max_concurrency(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_concurrency = input;
        self
    }
    /// <p>The maximum number of nodes that can be executed concurrently in the flow.</p>
    pub fn get_max_concurrency(&self) -> &::std::option::Option<i32> {
        &self.max_concurrency
    }
    /// Consumes the builder and constructs a [`FlowAliasConcurrencyConfiguration`](crate::types::FlowAliasConcurrencyConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::FlowAliasConcurrencyConfigurationBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::FlowAliasConcurrencyConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FlowAliasConcurrencyConfiguration {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building FlowAliasConcurrencyConfiguration",
                )
            })?,
            max_concurrency: self.max_concurrency,
        })
    }
}
