// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An agent collaborator summary.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AgentCollaboratorSummary {
    /// <p>The collaborator's agent ID.</p>
    pub agent_id: ::std::string::String,
    /// <p>The collaborator's agent version.</p>
    pub agent_version: ::std::string::String,
    /// <p>The collaborator's ID.</p>
    pub collaborator_id: ::std::string::String,
    /// <p>The collaborator's agent descriptor.</p>
    pub agent_descriptor: ::std::option::Option<crate::types::AgentDescriptor>,
    /// <p>The collaborator's collaboration instruction.</p>
    pub collaboration_instruction: ::std::string::String,
    /// <p>The collaborator's relay conversation history.</p>
    pub relay_conversation_history: crate::types::RelayConversationHistory,
    /// <p>The collaborator's name.</p>
    pub collaborator_name: ::std::string::String,
    /// <p>When the collaborator was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>When the collaborator was last updated.</p>
    pub last_updated_at: ::aws_smithy_types::DateTime,
}
impl AgentCollaboratorSummary {
    /// <p>The collaborator's agent ID.</p>
    pub fn agent_id(&self) -> &str {
        use std::ops::Deref;
        self.agent_id.deref()
    }
    /// <p>The collaborator's agent version.</p>
    pub fn agent_version(&self) -> &str {
        use std::ops::Deref;
        self.agent_version.deref()
    }
    /// <p>The collaborator's ID.</p>
    pub fn collaborator_id(&self) -> &str {
        use std::ops::Deref;
        self.collaborator_id.deref()
    }
    /// <p>The collaborator's agent descriptor.</p>
    pub fn agent_descriptor(&self) -> ::std::option::Option<&crate::types::AgentDescriptor> {
        self.agent_descriptor.as_ref()
    }
    /// <p>The collaborator's collaboration instruction.</p>
    pub fn collaboration_instruction(&self) -> &str {
        use std::ops::Deref;
        self.collaboration_instruction.deref()
    }
    /// <p>The collaborator's relay conversation history.</p>
    pub fn relay_conversation_history(&self) -> &crate::types::RelayConversationHistory {
        &self.relay_conversation_history
    }
    /// <p>The collaborator's name.</p>
    pub fn collaborator_name(&self) -> &str {
        use std::ops::Deref;
        self.collaborator_name.deref()
    }
    /// <p>When the collaborator was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>When the collaborator was last updated.</p>
    pub fn last_updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.last_updated_at
    }
}
impl ::std::fmt::Debug for AgentCollaboratorSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AgentCollaboratorSummary");
        formatter.field("agent_id", &self.agent_id);
        formatter.field("agent_version", &self.agent_version);
        formatter.field("collaborator_id", &self.collaborator_id);
        formatter.field("agent_descriptor", &self.agent_descriptor);
        formatter.field("collaboration_instruction", &"*** Sensitive Data Redacted ***");
        formatter.field("relay_conversation_history", &self.relay_conversation_history);
        formatter.field("collaborator_name", &self.collaborator_name);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.finish()
    }
}
impl AgentCollaboratorSummary {
    /// Creates a new builder-style object to manufacture [`AgentCollaboratorSummary`](crate::types::AgentCollaboratorSummary).
    pub fn builder() -> crate::types::builders::AgentCollaboratorSummaryBuilder {
        crate::types::builders::AgentCollaboratorSummaryBuilder::default()
    }
}

/// A builder for [`AgentCollaboratorSummary`](crate::types::AgentCollaboratorSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AgentCollaboratorSummaryBuilder {
    pub(crate) agent_id: ::std::option::Option<::std::string::String>,
    pub(crate) agent_version: ::std::option::Option<::std::string::String>,
    pub(crate) collaborator_id: ::std::option::Option<::std::string::String>,
    pub(crate) agent_descriptor: ::std::option::Option<crate::types::AgentDescriptor>,
    pub(crate) collaboration_instruction: ::std::option::Option<::std::string::String>,
    pub(crate) relay_conversation_history: ::std::option::Option<crate::types::RelayConversationHistory>,
    pub(crate) collaborator_name: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl AgentCollaboratorSummaryBuilder {
    /// <p>The collaborator's agent ID.</p>
    /// This field is required.
    pub fn agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The collaborator's agent ID.</p>
    pub fn set_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_id = input;
        self
    }
    /// <p>The collaborator's agent ID.</p>
    pub fn get_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_id
    }
    /// <p>The collaborator's agent version.</p>
    /// This field is required.
    pub fn agent_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The collaborator's agent version.</p>
    pub fn set_agent_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_version = input;
        self
    }
    /// <p>The collaborator's agent version.</p>
    pub fn get_agent_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_version
    }
    /// <p>The collaborator's ID.</p>
    /// This field is required.
    pub fn collaborator_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaborator_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The collaborator's ID.</p>
    pub fn set_collaborator_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaborator_id = input;
        self
    }
    /// <p>The collaborator's ID.</p>
    pub fn get_collaborator_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaborator_id
    }
    /// <p>The collaborator's agent descriptor.</p>
    /// This field is required.
    pub fn agent_descriptor(mut self, input: crate::types::AgentDescriptor) -> Self {
        self.agent_descriptor = ::std::option::Option::Some(input);
        self
    }
    /// <p>The collaborator's agent descriptor.</p>
    pub fn set_agent_descriptor(mut self, input: ::std::option::Option<crate::types::AgentDescriptor>) -> Self {
        self.agent_descriptor = input;
        self
    }
    /// <p>The collaborator's agent descriptor.</p>
    pub fn get_agent_descriptor(&self) -> &::std::option::Option<crate::types::AgentDescriptor> {
        &self.agent_descriptor
    }
    /// <p>The collaborator's collaboration instruction.</p>
    /// This field is required.
    pub fn collaboration_instruction(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaboration_instruction = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The collaborator's collaboration instruction.</p>
    pub fn set_collaboration_instruction(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaboration_instruction = input;
        self
    }
    /// <p>The collaborator's collaboration instruction.</p>
    pub fn get_collaboration_instruction(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaboration_instruction
    }
    /// <p>The collaborator's relay conversation history.</p>
    /// This field is required.
    pub fn relay_conversation_history(mut self, input: crate::types::RelayConversationHistory) -> Self {
        self.relay_conversation_history = ::std::option::Option::Some(input);
        self
    }
    /// <p>The collaborator's relay conversation history.</p>
    pub fn set_relay_conversation_history(mut self, input: ::std::option::Option<crate::types::RelayConversationHistory>) -> Self {
        self.relay_conversation_history = input;
        self
    }
    /// <p>The collaborator's relay conversation history.</p>
    pub fn get_relay_conversation_history(&self) -> &::std::option::Option<crate::types::RelayConversationHistory> {
        &self.relay_conversation_history
    }
    /// <p>The collaborator's name.</p>
    /// This field is required.
    pub fn collaborator_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaborator_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The collaborator's name.</p>
    pub fn set_collaborator_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaborator_name = input;
        self
    }
    /// <p>The collaborator's name.</p>
    pub fn get_collaborator_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaborator_name
    }
    /// <p>When the collaborator was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the collaborator was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>When the collaborator was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>When the collaborator was last updated.</p>
    /// This field is required.
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the collaborator was last updated.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>When the collaborator was last updated.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// Consumes the builder and constructs a [`AgentCollaboratorSummary`](crate::types::AgentCollaboratorSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`agent_id`](crate::types::builders::AgentCollaboratorSummaryBuilder::agent_id)
    /// - [`agent_version`](crate::types::builders::AgentCollaboratorSummaryBuilder::agent_version)
    /// - [`collaborator_id`](crate::types::builders::AgentCollaboratorSummaryBuilder::collaborator_id)
    /// - [`collaboration_instruction`](crate::types::builders::AgentCollaboratorSummaryBuilder::collaboration_instruction)
    /// - [`relay_conversation_history`](crate::types::builders::AgentCollaboratorSummaryBuilder::relay_conversation_history)
    /// - [`collaborator_name`](crate::types::builders::AgentCollaboratorSummaryBuilder::collaborator_name)
    /// - [`created_at`](crate::types::builders::AgentCollaboratorSummaryBuilder::created_at)
    /// - [`last_updated_at`](crate::types::builders::AgentCollaboratorSummaryBuilder::last_updated_at)
    pub fn build(self) -> ::std::result::Result<crate::types::AgentCollaboratorSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AgentCollaboratorSummary {
            agent_id: self.agent_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "agent_id",
                    "agent_id was not specified but it is required when building AgentCollaboratorSummary",
                )
            })?,
            agent_version: self.agent_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "agent_version",
                    "agent_version was not specified but it is required when building AgentCollaboratorSummary",
                )
            })?,
            collaborator_id: self.collaborator_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "collaborator_id",
                    "collaborator_id was not specified but it is required when building AgentCollaboratorSummary",
                )
            })?,
            agent_descriptor: self.agent_descriptor,
            collaboration_instruction: self.collaboration_instruction.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "collaboration_instruction",
                    "collaboration_instruction was not specified but it is required when building AgentCollaboratorSummary",
                )
            })?,
            relay_conversation_history: self.relay_conversation_history.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "relay_conversation_history",
                    "relay_conversation_history was not specified but it is required when building AgentCollaboratorSummary",
                )
            })?,
            collaborator_name: self.collaborator_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "collaborator_name",
                    "collaborator_name was not specified but it is required when building AgentCollaboratorSummary",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building AgentCollaboratorSummary",
                )
            })?,
            last_updated_at: self.last_updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_updated_at",
                    "last_updated_at was not specified but it is required when building AgentCollaboratorSummary",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for AgentCollaboratorSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AgentCollaboratorSummaryBuilder");
        formatter.field("agent_id", &self.agent_id);
        formatter.field("agent_version", &self.agent_version);
        formatter.field("collaborator_id", &self.collaborator_id);
        formatter.field("agent_descriptor", &self.agent_descriptor);
        formatter.field("collaboration_instruction", &"*** Sensitive Data Redacted ***");
        formatter.field("relay_conversation_history", &self.relay_conversation_history);
        formatter.field("collaborator_name", &self.collaborator_name);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.finish()
    }
}
