// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the details for a document that was ingested or deleted.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KnowledgeBaseDocumentDetail {
    /// <p>The identifier of the knowledge base that the document was ingested into or deleted from.</p>
    pub knowledge_base_id: ::std::string::String,
    /// <p>The identifier of the data source connected to the knowledge base that the document was ingested into or deleted from.</p>
    pub data_source_id: ::std::string::String,
    /// <p>The ingestion status of the document. The following statuses are possible:</p>
    /// <ul>
    /// <li>
    /// <p>STARTED – You submitted the ingestion job containing the document.</p></li>
    /// <li>
    /// <p>PENDING – The document is waiting to be ingested.</p></li>
    /// <li>
    /// <p>IN_PROGRESS – The document is being ingested.</p></li>
    /// <li>
    /// <p>INDEXED – The document was successfully indexed.</p></li>
    /// <li>
    /// <p>PARTIALLY_INDEXED – The document was partially indexed.</p></li>
    /// <li>
    /// <p>METADATA_PARTIALLY_INDEXED – You submitted metadata for an existing document and it was partially indexed.</p></li>
    /// <li>
    /// <p>METADATA_UPDATE_FAILED – You submitted a metadata update for an existing document but it failed.</p></li>
    /// <li>
    /// <p>FAILED – The document failed to be ingested.</p></li>
    /// <li>
    /// <p>NOT_FOUND – The document wasn't found.</p></li>
    /// <li>
    /// <p>IGNORED – The document was ignored during ingestion.</p></li>
    /// <li>
    /// <p>DELETING – You submitted the delete job containing the document.</p></li>
    /// <li>
    /// <p>DELETE_IN_PROGRESS – The document is being deleted.</p></li>
    /// </ul>
    pub status: crate::types::DocumentStatus,
    /// <p>Contains information that identifies the document.</p>
    pub identifier: ::std::option::Option<crate::types::DocumentIdentifier>,
    /// <p>The reason for the status. Appears alongside the status <code>IGNORED</code>.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The date and time at which the document was last updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl KnowledgeBaseDocumentDetail {
    /// <p>The identifier of the knowledge base that the document was ingested into or deleted from.</p>
    pub fn knowledge_base_id(&self) -> &str {
        use std::ops::Deref;
        self.knowledge_base_id.deref()
    }
    /// <p>The identifier of the data source connected to the knowledge base that the document was ingested into or deleted from.</p>
    pub fn data_source_id(&self) -> &str {
        use std::ops::Deref;
        self.data_source_id.deref()
    }
    /// <p>The ingestion status of the document. The following statuses are possible:</p>
    /// <ul>
    /// <li>
    /// <p>STARTED – You submitted the ingestion job containing the document.</p></li>
    /// <li>
    /// <p>PENDING – The document is waiting to be ingested.</p></li>
    /// <li>
    /// <p>IN_PROGRESS – The document is being ingested.</p></li>
    /// <li>
    /// <p>INDEXED – The document was successfully indexed.</p></li>
    /// <li>
    /// <p>PARTIALLY_INDEXED – The document was partially indexed.</p></li>
    /// <li>
    /// <p>METADATA_PARTIALLY_INDEXED – You submitted metadata for an existing document and it was partially indexed.</p></li>
    /// <li>
    /// <p>METADATA_UPDATE_FAILED – You submitted a metadata update for an existing document but it failed.</p></li>
    /// <li>
    /// <p>FAILED – The document failed to be ingested.</p></li>
    /// <li>
    /// <p>NOT_FOUND – The document wasn't found.</p></li>
    /// <li>
    /// <p>IGNORED – The document was ignored during ingestion.</p></li>
    /// <li>
    /// <p>DELETING – You submitted the delete job containing the document.</p></li>
    /// <li>
    /// <p>DELETE_IN_PROGRESS – The document is being deleted.</p></li>
    /// </ul>
    pub fn status(&self) -> &crate::types::DocumentStatus {
        &self.status
    }
    /// <p>Contains information that identifies the document.</p>
    pub fn identifier(&self) -> ::std::option::Option<&crate::types::DocumentIdentifier> {
        self.identifier.as_ref()
    }
    /// <p>The reason for the status. Appears alongside the status <code>IGNORED</code>.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The date and time at which the document was last updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl KnowledgeBaseDocumentDetail {
    /// Creates a new builder-style object to manufacture [`KnowledgeBaseDocumentDetail`](crate::types::KnowledgeBaseDocumentDetail).
    pub fn builder() -> crate::types::builders::KnowledgeBaseDocumentDetailBuilder {
        crate::types::builders::KnowledgeBaseDocumentDetailBuilder::default()
    }
}

/// A builder for [`KnowledgeBaseDocumentDetail`](crate::types::KnowledgeBaseDocumentDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct KnowledgeBaseDocumentDetailBuilder {
    pub(crate) knowledge_base_id: ::std::option::Option<::std::string::String>,
    pub(crate) data_source_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::DocumentStatus>,
    pub(crate) identifier: ::std::option::Option<crate::types::DocumentIdentifier>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl KnowledgeBaseDocumentDetailBuilder {
    /// <p>The identifier of the knowledge base that the document was ingested into or deleted from.</p>
    /// This field is required.
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the knowledge base that the document was ingested into or deleted from.</p>
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// <p>The identifier of the knowledge base that the document was ingested into or deleted from.</p>
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_id
    }
    /// <p>The identifier of the data source connected to the knowledge base that the document was ingested into or deleted from.</p>
    /// This field is required.
    pub fn data_source_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_source_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the data source connected to the knowledge base that the document was ingested into or deleted from.</p>
    pub fn set_data_source_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_source_id = input;
        self
    }
    /// <p>The identifier of the data source connected to the knowledge base that the document was ingested into or deleted from.</p>
    pub fn get_data_source_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_source_id
    }
    /// <p>The ingestion status of the document. The following statuses are possible:</p>
    /// <ul>
    /// <li>
    /// <p>STARTED – You submitted the ingestion job containing the document.</p></li>
    /// <li>
    /// <p>PENDING – The document is waiting to be ingested.</p></li>
    /// <li>
    /// <p>IN_PROGRESS – The document is being ingested.</p></li>
    /// <li>
    /// <p>INDEXED – The document was successfully indexed.</p></li>
    /// <li>
    /// <p>PARTIALLY_INDEXED – The document was partially indexed.</p></li>
    /// <li>
    /// <p>METADATA_PARTIALLY_INDEXED – You submitted metadata for an existing document and it was partially indexed.</p></li>
    /// <li>
    /// <p>METADATA_UPDATE_FAILED – You submitted a metadata update for an existing document but it failed.</p></li>
    /// <li>
    /// <p>FAILED – The document failed to be ingested.</p></li>
    /// <li>
    /// <p>NOT_FOUND – The document wasn't found.</p></li>
    /// <li>
    /// <p>IGNORED – The document was ignored during ingestion.</p></li>
    /// <li>
    /// <p>DELETING – You submitted the delete job containing the document.</p></li>
    /// <li>
    /// <p>DELETE_IN_PROGRESS – The document is being deleted.</p></li>
    /// </ul>
    /// This field is required.
    pub fn status(mut self, input: crate::types::DocumentStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ingestion status of the document. The following statuses are possible:</p>
    /// <ul>
    /// <li>
    /// <p>STARTED – You submitted the ingestion job containing the document.</p></li>
    /// <li>
    /// <p>PENDING – The document is waiting to be ingested.</p></li>
    /// <li>
    /// <p>IN_PROGRESS – The document is being ingested.</p></li>
    /// <li>
    /// <p>INDEXED – The document was successfully indexed.</p></li>
    /// <li>
    /// <p>PARTIALLY_INDEXED – The document was partially indexed.</p></li>
    /// <li>
    /// <p>METADATA_PARTIALLY_INDEXED – You submitted metadata for an existing document and it was partially indexed.</p></li>
    /// <li>
    /// <p>METADATA_UPDATE_FAILED – You submitted a metadata update for an existing document but it failed.</p></li>
    /// <li>
    /// <p>FAILED – The document failed to be ingested.</p></li>
    /// <li>
    /// <p>NOT_FOUND – The document wasn't found.</p></li>
    /// <li>
    /// <p>IGNORED – The document was ignored during ingestion.</p></li>
    /// <li>
    /// <p>DELETING – You submitted the delete job containing the document.</p></li>
    /// <li>
    /// <p>DELETE_IN_PROGRESS – The document is being deleted.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DocumentStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The ingestion status of the document. The following statuses are possible:</p>
    /// <ul>
    /// <li>
    /// <p>STARTED – You submitted the ingestion job containing the document.</p></li>
    /// <li>
    /// <p>PENDING – The document is waiting to be ingested.</p></li>
    /// <li>
    /// <p>IN_PROGRESS – The document is being ingested.</p></li>
    /// <li>
    /// <p>INDEXED – The document was successfully indexed.</p></li>
    /// <li>
    /// <p>PARTIALLY_INDEXED – The document was partially indexed.</p></li>
    /// <li>
    /// <p>METADATA_PARTIALLY_INDEXED – You submitted metadata for an existing document and it was partially indexed.</p></li>
    /// <li>
    /// <p>METADATA_UPDATE_FAILED – You submitted a metadata update for an existing document but it failed.</p></li>
    /// <li>
    /// <p>FAILED – The document failed to be ingested.</p></li>
    /// <li>
    /// <p>NOT_FOUND – The document wasn't found.</p></li>
    /// <li>
    /// <p>IGNORED – The document was ignored during ingestion.</p></li>
    /// <li>
    /// <p>DELETING – You submitted the delete job containing the document.</p></li>
    /// <li>
    /// <p>DELETE_IN_PROGRESS – The document is being deleted.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DocumentStatus> {
        &self.status
    }
    /// <p>Contains information that identifies the document.</p>
    /// This field is required.
    pub fn identifier(mut self, input: crate::types::DocumentIdentifier) -> Self {
        self.identifier = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information that identifies the document.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<crate::types::DocumentIdentifier>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>Contains information that identifies the document.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<crate::types::DocumentIdentifier> {
        &self.identifier
    }
    /// <p>The reason for the status. Appears alongside the status <code>IGNORED</code>.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the status. Appears alongside the status <code>IGNORED</code>.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The reason for the status. Appears alongside the status <code>IGNORED</code>.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The date and time at which the document was last updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time at which the document was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The date and time at which the document was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Consumes the builder and constructs a [`KnowledgeBaseDocumentDetail`](crate::types::KnowledgeBaseDocumentDetail).
    /// This method will fail if any of the following fields are not set:
    /// - [`knowledge_base_id`](crate::types::builders::KnowledgeBaseDocumentDetailBuilder::knowledge_base_id)
    /// - [`data_source_id`](crate::types::builders::KnowledgeBaseDocumentDetailBuilder::data_source_id)
    /// - [`status`](crate::types::builders::KnowledgeBaseDocumentDetailBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::KnowledgeBaseDocumentDetail, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::KnowledgeBaseDocumentDetail {
            knowledge_base_id: self.knowledge_base_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "knowledge_base_id",
                    "knowledge_base_id was not specified but it is required when building KnowledgeBaseDocumentDetail",
                )
            })?,
            data_source_id: self.data_source_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "data_source_id",
                    "data_source_id was not specified but it is required when building KnowledgeBaseDocumentDetail",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building KnowledgeBaseDocumentDetail",
                )
            })?,
            identifier: self.identifier,
            status_reason: self.status_reason,
            updated_at: self.updated_at,
        })
    }
}
