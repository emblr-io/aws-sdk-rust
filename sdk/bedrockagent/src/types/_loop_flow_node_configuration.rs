// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configurations for the nodes of a DoWhile loop in your flow.</p>
/// <p>A DoWhile loop is made up of the following nodes:</p>
/// <ul>
/// <li>
/// <p><code>Loop</code> - The container node that holds the loop's flow definition. This node encompasses the entire loop structure.</p></li>
/// <li>
/// <p><code>LoopInput</code> - The entry point node for the loop. This node receives inputs from nodes outside the loop and from previous loop iterations.</p></li>
/// <li>
/// <p>Body nodes - The processing nodes that execute within each loop iteration. These can be nodes for handling data in your flow, such as a prompt or Lambda function nodes. Some node types aren't supported inside a DoWhile loop body. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_LoopIncompatibleNodeTypeFlowValidationDetails.html">LoopIncompatibleNodeTypeFlowValidationDetails</a>.</p></li>
/// <li>
/// <p><code>LoopController</code> - The node that evaluates whether the loop should continue or exit based on a condition.</p></li>
/// </ul>
/// <p>These nodes work together to create a loop that runs at least once and continues until a specified condition is met or a maximum number of iterations is reached.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct LoopFlowNodeConfiguration {
    /// <p>The definition of the DoWhile loop nodes and connections between nodes in the flow.</p>
    pub definition: ::std::option::Option<crate::types::FlowDefinition>,
}
impl LoopFlowNodeConfiguration {
    /// <p>The definition of the DoWhile loop nodes and connections between nodes in the flow.</p>
    pub fn definition(&self) -> ::std::option::Option<&crate::types::FlowDefinition> {
        self.definition.as_ref()
    }
}
impl ::std::fmt::Debug for LoopFlowNodeConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("LoopFlowNodeConfiguration");
        formatter.field("definition", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl LoopFlowNodeConfiguration {
    /// Creates a new builder-style object to manufacture [`LoopFlowNodeConfiguration`](crate::types::LoopFlowNodeConfiguration).
    pub fn builder() -> crate::types::builders::LoopFlowNodeConfigurationBuilder {
        crate::types::builders::LoopFlowNodeConfigurationBuilder::default()
    }
}

/// A builder for [`LoopFlowNodeConfiguration`](crate::types::LoopFlowNodeConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct LoopFlowNodeConfigurationBuilder {
    pub(crate) definition: ::std::option::Option<crate::types::FlowDefinition>,
}
impl LoopFlowNodeConfigurationBuilder {
    /// <p>The definition of the DoWhile loop nodes and connections between nodes in the flow.</p>
    /// This field is required.
    pub fn definition(mut self, input: crate::types::FlowDefinition) -> Self {
        self.definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The definition of the DoWhile loop nodes and connections between nodes in the flow.</p>
    pub fn set_definition(mut self, input: ::std::option::Option<crate::types::FlowDefinition>) -> Self {
        self.definition = input;
        self
    }
    /// <p>The definition of the DoWhile loop nodes and connections between nodes in the flow.</p>
    pub fn get_definition(&self) -> &::std::option::Option<crate::types::FlowDefinition> {
        &self.definition
    }
    /// Consumes the builder and constructs a [`LoopFlowNodeConfiguration`](crate::types::LoopFlowNodeConfiguration).
    pub fn build(self) -> crate::types::LoopFlowNodeConfiguration {
        crate::types::LoopFlowNodeConfiguration { definition: self.definition }
    }
}
impl ::std::fmt::Debug for LoopFlowNodeConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("LoopFlowNodeConfigurationBuilder");
        formatter.field("definition", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
