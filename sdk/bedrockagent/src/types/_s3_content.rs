// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the content to ingest into a knowledge base connected to an Amazon S3 data source.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3Content {
    /// <p>The S3 location of the file containing the content to ingest.</p>
    pub s3_location: ::std::option::Option<crate::types::S3Location>,
}
impl S3Content {
    /// <p>The S3 location of the file containing the content to ingest.</p>
    pub fn s3_location(&self) -> ::std::option::Option<&crate::types::S3Location> {
        self.s3_location.as_ref()
    }
}
impl S3Content {
    /// Creates a new builder-style object to manufacture [`S3Content`](crate::types::S3Content).
    pub fn builder() -> crate::types::builders::S3ContentBuilder {
        crate::types::builders::S3ContentBuilder::default()
    }
}

/// A builder for [`S3Content`](crate::types::S3Content).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct S3ContentBuilder {
    pub(crate) s3_location: ::std::option::Option<crate::types::S3Location>,
}
impl S3ContentBuilder {
    /// <p>The S3 location of the file containing the content to ingest.</p>
    /// This field is required.
    pub fn s3_location(mut self, input: crate::types::S3Location) -> Self {
        self.s3_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The S3 location of the file containing the content to ingest.</p>
    pub fn set_s3_location(mut self, input: ::std::option::Option<crate::types::S3Location>) -> Self {
        self.s3_location = input;
        self
    }
    /// <p>The S3 location of the file containing the content to ingest.</p>
    pub fn get_s3_location(&self) -> &::std::option::Option<crate::types::S3Location> {
        &self.s3_location
    }
    /// Consumes the builder and constructs a [`S3Content`](crate::types::S3Content).
    pub fn build(self) -> crate::types::S3Content {
        crate::types::S3Content {
            s3_location: self.s3_location,
        }
    }
}
