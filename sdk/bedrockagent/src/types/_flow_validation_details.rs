// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A union type containing various possible validation issues in the flow.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum FlowValidationDetails {
    /// <p>Details about a cyclic connection in the flow.</p>
    CyclicConnection(crate::types::CyclicConnectionFlowValidationDetails),
    /// <p>Details about duplicate condition expressions in a node.</p>
    DuplicateConditionExpression(crate::types::DuplicateConditionExpressionFlowValidationDetails),
    /// <p>Details about duplicate connections between nodes.</p>
    DuplicateConnections(crate::types::DuplicateConnectionsFlowValidationDetails),
    /// <p>Details about incompatible data types in a connection.</p>
    IncompatibleConnectionDataType(crate::types::IncompatibleConnectionDataTypeFlowValidationDetails),
    /// <p>Details about a flow that includes connections that violate loop boundary rules.</p>
    InvalidLoopBoundary(crate::types::InvalidLoopBoundaryFlowValidationDetails),
    /// <p>Details about a flow that includes incompatible node types in a DoWhile loop.</p>
    LoopIncompatibleNodeType(crate::types::LoopIncompatibleNodeTypeFlowValidationDetails),
    /// <p>Details about a malformed condition expression in a node.</p>
    MalformedConditionExpression(crate::types::MalformedConditionExpressionFlowValidationDetails),
    /// <p>Details about a malformed input expression in a node.</p>
    MalformedNodeInputExpression(crate::types::MalformedNodeInputExpressionFlowValidationDetails),
    /// <p>Details about mismatched input data types in a node.</p>
    MismatchedNodeInputType(crate::types::MismatchedNodeInputTypeFlowValidationDetails),
    /// <p>Details about mismatched output data types in a node.</p>
    MismatchedNodeOutputType(crate::types::MismatchedNodeOutputTypeFlowValidationDetails),
    /// <p>Details about missing configuration for a connection.</p>
    MissingConnectionConfiguration(crate::types::MissingConnectionConfigurationFlowValidationDetails),
    /// <p>Details about a missing default condition in a conditional node.</p>
    MissingDefaultCondition(crate::types::MissingDefaultConditionFlowValidationDetails),
    /// <p>Details about missing ending nodes in the flow.</p>
    MissingEndingNodes(crate::types::MissingEndingNodesFlowValidationDetails),
    /// <p>Details about a flow that's missing a required <code>LoopController</code> node in a DoWhile loop.</p>
    MissingLoopControllerNode(crate::types::MissingLoopControllerNodeFlowValidationDetails),
    /// <p>Details about a flow that's missing a required <code>LoopInput</code> node in a DoWhile loop.</p>
    MissingLoopInputNode(crate::types::MissingLoopInputNodeFlowValidationDetails),
    /// <p>Details about missing configuration for a node.</p>
    MissingNodeConfiguration(crate::types::MissingNodeConfigurationFlowValidationDetails),
    /// <p>Details about a missing required input in a node.</p>
    MissingNodeInput(crate::types::MissingNodeInputFlowValidationDetails),
    /// <p>Details about a missing required output in a node.</p>
    MissingNodeOutput(crate::types::MissingNodeOutputFlowValidationDetails),
    /// <p>Details about missing starting nodes in the flow.</p>
    MissingStartingNodes(crate::types::MissingStartingNodesFlowValidationDetails),
    /// <p>Details about a flow that contains multiple <code>LoopController</code> nodes in a DoWhile loop.</p>
    MultipleLoopControllerNodes(crate::types::MultipleLoopControllerNodesFlowValidationDetails),
    /// <p>Details about a flow that contains multiple <code>LoopInput</code> nodes in a DoWhile loop.</p>
    MultipleLoopInputNodes(crate::types::MultipleLoopInputNodesFlowValidationDetails),
    /// <p>Details about multiple connections to a single node input.</p>
    MultipleNodeInputConnections(crate::types::MultipleNodeInputConnectionsFlowValidationDetails),
    /// <p>Details about an unfulfilled node input with no valid connections.</p>
    UnfulfilledNodeInput(crate::types::UnfulfilledNodeInputFlowValidationDetails),
    /// <p>Details about an unknown condition for a connection.</p>
    UnknownConnectionCondition(crate::types::UnknownConnectionConditionFlowValidationDetails),
    /// <p>Details about an unknown source node for a connection.</p>
    UnknownConnectionSource(crate::types::UnknownConnectionSourceFlowValidationDetails),
    /// <p>Details about an unknown source output for a connection.</p>
    UnknownConnectionSourceOutput(crate::types::UnknownConnectionSourceOutputFlowValidationDetails),
    /// <p>Details about an unknown target node for a connection.</p>
    UnknownConnectionTarget(crate::types::UnknownConnectionTargetFlowValidationDetails),
    /// <p>Details about an unknown target input for a connection.</p>
    UnknownConnectionTargetInput(crate::types::UnknownConnectionTargetInputFlowValidationDetails),
    /// <p>Details about an unknown input for a node.</p>
    UnknownNodeInput(crate::types::UnknownNodeInputFlowValidationDetails),
    /// <p>Details about an unknown output for a node.</p>
    UnknownNodeOutput(crate::types::UnknownNodeOutputFlowValidationDetails),
    /// <p>Details about an unreachable node in the flow.</p>
    UnreachableNode(crate::types::UnreachableNodeFlowValidationDetails),
    /// <p>Details about unsatisfied conditions for a connection.</p>
    UnsatisfiedConnectionConditions(crate::types::UnsatisfiedConnectionConditionsFlowValidationDetails),
    /// <p>Details about an unspecified validation.</p>
    Unspecified(crate::types::UnspecifiedFlowValidationDetails),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl FlowValidationDetails {
    /// Tries to convert the enum instance into [`CyclicConnection`](crate::types::FlowValidationDetails::CyclicConnection), extracting the inner [`CyclicConnectionFlowValidationDetails`](crate::types::CyclicConnectionFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_cyclic_connection(&self) -> ::std::result::Result<&crate::types::CyclicConnectionFlowValidationDetails, &Self> {
        if let FlowValidationDetails::CyclicConnection(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`CyclicConnection`](crate::types::FlowValidationDetails::CyclicConnection).
    pub fn is_cyclic_connection(&self) -> bool {
        self.as_cyclic_connection().is_ok()
    }
    /// Tries to convert the enum instance into [`DuplicateConditionExpression`](crate::types::FlowValidationDetails::DuplicateConditionExpression), extracting the inner [`DuplicateConditionExpressionFlowValidationDetails`](crate::types::DuplicateConditionExpressionFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_duplicate_condition_expression(
        &self,
    ) -> ::std::result::Result<&crate::types::DuplicateConditionExpressionFlowValidationDetails, &Self> {
        if let FlowValidationDetails::DuplicateConditionExpression(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`DuplicateConditionExpression`](crate::types::FlowValidationDetails::DuplicateConditionExpression).
    pub fn is_duplicate_condition_expression(&self) -> bool {
        self.as_duplicate_condition_expression().is_ok()
    }
    /// Tries to convert the enum instance into [`DuplicateConnections`](crate::types::FlowValidationDetails::DuplicateConnections), extracting the inner [`DuplicateConnectionsFlowValidationDetails`](crate::types::DuplicateConnectionsFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_duplicate_connections(&self) -> ::std::result::Result<&crate::types::DuplicateConnectionsFlowValidationDetails, &Self> {
        if let FlowValidationDetails::DuplicateConnections(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`DuplicateConnections`](crate::types::FlowValidationDetails::DuplicateConnections).
    pub fn is_duplicate_connections(&self) -> bool {
        self.as_duplicate_connections().is_ok()
    }
    /// Tries to convert the enum instance into [`IncompatibleConnectionDataType`](crate::types::FlowValidationDetails::IncompatibleConnectionDataType), extracting the inner [`IncompatibleConnectionDataTypeFlowValidationDetails`](crate::types::IncompatibleConnectionDataTypeFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_incompatible_connection_data_type(
        &self,
    ) -> ::std::result::Result<&crate::types::IncompatibleConnectionDataTypeFlowValidationDetails, &Self> {
        if let FlowValidationDetails::IncompatibleConnectionDataType(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`IncompatibleConnectionDataType`](crate::types::FlowValidationDetails::IncompatibleConnectionDataType).
    pub fn is_incompatible_connection_data_type(&self) -> bool {
        self.as_incompatible_connection_data_type().is_ok()
    }
    /// Tries to convert the enum instance into [`InvalidLoopBoundary`](crate::types::FlowValidationDetails::InvalidLoopBoundary), extracting the inner [`InvalidLoopBoundaryFlowValidationDetails`](crate::types::InvalidLoopBoundaryFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_invalid_loop_boundary(&self) -> ::std::result::Result<&crate::types::InvalidLoopBoundaryFlowValidationDetails, &Self> {
        if let FlowValidationDetails::InvalidLoopBoundary(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`InvalidLoopBoundary`](crate::types::FlowValidationDetails::InvalidLoopBoundary).
    pub fn is_invalid_loop_boundary(&self) -> bool {
        self.as_invalid_loop_boundary().is_ok()
    }
    /// Tries to convert the enum instance into [`LoopIncompatibleNodeType`](crate::types::FlowValidationDetails::LoopIncompatibleNodeType), extracting the inner [`LoopIncompatibleNodeTypeFlowValidationDetails`](crate::types::LoopIncompatibleNodeTypeFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_loop_incompatible_node_type(&self) -> ::std::result::Result<&crate::types::LoopIncompatibleNodeTypeFlowValidationDetails, &Self> {
        if let FlowValidationDetails::LoopIncompatibleNodeType(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`LoopIncompatibleNodeType`](crate::types::FlowValidationDetails::LoopIncompatibleNodeType).
    pub fn is_loop_incompatible_node_type(&self) -> bool {
        self.as_loop_incompatible_node_type().is_ok()
    }
    /// Tries to convert the enum instance into [`MalformedConditionExpression`](crate::types::FlowValidationDetails::MalformedConditionExpression), extracting the inner [`MalformedConditionExpressionFlowValidationDetails`](crate::types::MalformedConditionExpressionFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_malformed_condition_expression(
        &self,
    ) -> ::std::result::Result<&crate::types::MalformedConditionExpressionFlowValidationDetails, &Self> {
        if let FlowValidationDetails::MalformedConditionExpression(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`MalformedConditionExpression`](crate::types::FlowValidationDetails::MalformedConditionExpression).
    pub fn is_malformed_condition_expression(&self) -> bool {
        self.as_malformed_condition_expression().is_ok()
    }
    /// Tries to convert the enum instance into [`MalformedNodeInputExpression`](crate::types::FlowValidationDetails::MalformedNodeInputExpression), extracting the inner [`MalformedNodeInputExpressionFlowValidationDetails`](crate::types::MalformedNodeInputExpressionFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_malformed_node_input_expression(
        &self,
    ) -> ::std::result::Result<&crate::types::MalformedNodeInputExpressionFlowValidationDetails, &Self> {
        if let FlowValidationDetails::MalformedNodeInputExpression(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`MalformedNodeInputExpression`](crate::types::FlowValidationDetails::MalformedNodeInputExpression).
    pub fn is_malformed_node_input_expression(&self) -> bool {
        self.as_malformed_node_input_expression().is_ok()
    }
    /// Tries to convert the enum instance into [`MismatchedNodeInputType`](crate::types::FlowValidationDetails::MismatchedNodeInputType), extracting the inner [`MismatchedNodeInputTypeFlowValidationDetails`](crate::types::MismatchedNodeInputTypeFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_mismatched_node_input_type(&self) -> ::std::result::Result<&crate::types::MismatchedNodeInputTypeFlowValidationDetails, &Self> {
        if let FlowValidationDetails::MismatchedNodeInputType(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`MismatchedNodeInputType`](crate::types::FlowValidationDetails::MismatchedNodeInputType).
    pub fn is_mismatched_node_input_type(&self) -> bool {
        self.as_mismatched_node_input_type().is_ok()
    }
    /// Tries to convert the enum instance into [`MismatchedNodeOutputType`](crate::types::FlowValidationDetails::MismatchedNodeOutputType), extracting the inner [`MismatchedNodeOutputTypeFlowValidationDetails`](crate::types::MismatchedNodeOutputTypeFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_mismatched_node_output_type(&self) -> ::std::result::Result<&crate::types::MismatchedNodeOutputTypeFlowValidationDetails, &Self> {
        if let FlowValidationDetails::MismatchedNodeOutputType(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`MismatchedNodeOutputType`](crate::types::FlowValidationDetails::MismatchedNodeOutputType).
    pub fn is_mismatched_node_output_type(&self) -> bool {
        self.as_mismatched_node_output_type().is_ok()
    }
    /// Tries to convert the enum instance into [`MissingConnectionConfiguration`](crate::types::FlowValidationDetails::MissingConnectionConfiguration), extracting the inner [`MissingConnectionConfigurationFlowValidationDetails`](crate::types::MissingConnectionConfigurationFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_missing_connection_configuration(
        &self,
    ) -> ::std::result::Result<&crate::types::MissingConnectionConfigurationFlowValidationDetails, &Self> {
        if let FlowValidationDetails::MissingConnectionConfiguration(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`MissingConnectionConfiguration`](crate::types::FlowValidationDetails::MissingConnectionConfiguration).
    pub fn is_missing_connection_configuration(&self) -> bool {
        self.as_missing_connection_configuration().is_ok()
    }
    /// Tries to convert the enum instance into [`MissingDefaultCondition`](crate::types::FlowValidationDetails::MissingDefaultCondition), extracting the inner [`MissingDefaultConditionFlowValidationDetails`](crate::types::MissingDefaultConditionFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_missing_default_condition(&self) -> ::std::result::Result<&crate::types::MissingDefaultConditionFlowValidationDetails, &Self> {
        if let FlowValidationDetails::MissingDefaultCondition(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`MissingDefaultCondition`](crate::types::FlowValidationDetails::MissingDefaultCondition).
    pub fn is_missing_default_condition(&self) -> bool {
        self.as_missing_default_condition().is_ok()
    }
    /// Tries to convert the enum instance into [`MissingEndingNodes`](crate::types::FlowValidationDetails::MissingEndingNodes), extracting the inner [`MissingEndingNodesFlowValidationDetails`](crate::types::MissingEndingNodesFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_missing_ending_nodes(&self) -> ::std::result::Result<&crate::types::MissingEndingNodesFlowValidationDetails, &Self> {
        if let FlowValidationDetails::MissingEndingNodes(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`MissingEndingNodes`](crate::types::FlowValidationDetails::MissingEndingNodes).
    pub fn is_missing_ending_nodes(&self) -> bool {
        self.as_missing_ending_nodes().is_ok()
    }
    /// Tries to convert the enum instance into [`MissingLoopControllerNode`](crate::types::FlowValidationDetails::MissingLoopControllerNode), extracting the inner [`MissingLoopControllerNodeFlowValidationDetails`](crate::types::MissingLoopControllerNodeFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_missing_loop_controller_node(&self) -> ::std::result::Result<&crate::types::MissingLoopControllerNodeFlowValidationDetails, &Self> {
        if let FlowValidationDetails::MissingLoopControllerNode(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`MissingLoopControllerNode`](crate::types::FlowValidationDetails::MissingLoopControllerNode).
    pub fn is_missing_loop_controller_node(&self) -> bool {
        self.as_missing_loop_controller_node().is_ok()
    }
    /// Tries to convert the enum instance into [`MissingLoopInputNode`](crate::types::FlowValidationDetails::MissingLoopInputNode), extracting the inner [`MissingLoopInputNodeFlowValidationDetails`](crate::types::MissingLoopInputNodeFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_missing_loop_input_node(&self) -> ::std::result::Result<&crate::types::MissingLoopInputNodeFlowValidationDetails, &Self> {
        if let FlowValidationDetails::MissingLoopInputNode(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`MissingLoopInputNode`](crate::types::FlowValidationDetails::MissingLoopInputNode).
    pub fn is_missing_loop_input_node(&self) -> bool {
        self.as_missing_loop_input_node().is_ok()
    }
    /// Tries to convert the enum instance into [`MissingNodeConfiguration`](crate::types::FlowValidationDetails::MissingNodeConfiguration), extracting the inner [`MissingNodeConfigurationFlowValidationDetails`](crate::types::MissingNodeConfigurationFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_missing_node_configuration(&self) -> ::std::result::Result<&crate::types::MissingNodeConfigurationFlowValidationDetails, &Self> {
        if let FlowValidationDetails::MissingNodeConfiguration(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`MissingNodeConfiguration`](crate::types::FlowValidationDetails::MissingNodeConfiguration).
    pub fn is_missing_node_configuration(&self) -> bool {
        self.as_missing_node_configuration().is_ok()
    }
    /// Tries to convert the enum instance into [`MissingNodeInput`](crate::types::FlowValidationDetails::MissingNodeInput), extracting the inner [`MissingNodeInputFlowValidationDetails`](crate::types::MissingNodeInputFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_missing_node_input(&self) -> ::std::result::Result<&crate::types::MissingNodeInputFlowValidationDetails, &Self> {
        if let FlowValidationDetails::MissingNodeInput(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`MissingNodeInput`](crate::types::FlowValidationDetails::MissingNodeInput).
    pub fn is_missing_node_input(&self) -> bool {
        self.as_missing_node_input().is_ok()
    }
    /// Tries to convert the enum instance into [`MissingNodeOutput`](crate::types::FlowValidationDetails::MissingNodeOutput), extracting the inner [`MissingNodeOutputFlowValidationDetails`](crate::types::MissingNodeOutputFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_missing_node_output(&self) -> ::std::result::Result<&crate::types::MissingNodeOutputFlowValidationDetails, &Self> {
        if let FlowValidationDetails::MissingNodeOutput(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`MissingNodeOutput`](crate::types::FlowValidationDetails::MissingNodeOutput).
    pub fn is_missing_node_output(&self) -> bool {
        self.as_missing_node_output().is_ok()
    }
    /// Tries to convert the enum instance into [`MissingStartingNodes`](crate::types::FlowValidationDetails::MissingStartingNodes), extracting the inner [`MissingStartingNodesFlowValidationDetails`](crate::types::MissingStartingNodesFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_missing_starting_nodes(&self) -> ::std::result::Result<&crate::types::MissingStartingNodesFlowValidationDetails, &Self> {
        if let FlowValidationDetails::MissingStartingNodes(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`MissingStartingNodes`](crate::types::FlowValidationDetails::MissingStartingNodes).
    pub fn is_missing_starting_nodes(&self) -> bool {
        self.as_missing_starting_nodes().is_ok()
    }
    /// Tries to convert the enum instance into [`MultipleLoopControllerNodes`](crate::types::FlowValidationDetails::MultipleLoopControllerNodes), extracting the inner [`MultipleLoopControllerNodesFlowValidationDetails`](crate::types::MultipleLoopControllerNodesFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_multiple_loop_controller_nodes(&self) -> ::std::result::Result<&crate::types::MultipleLoopControllerNodesFlowValidationDetails, &Self> {
        if let FlowValidationDetails::MultipleLoopControllerNodes(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`MultipleLoopControllerNodes`](crate::types::FlowValidationDetails::MultipleLoopControllerNodes).
    pub fn is_multiple_loop_controller_nodes(&self) -> bool {
        self.as_multiple_loop_controller_nodes().is_ok()
    }
    /// Tries to convert the enum instance into [`MultipleLoopInputNodes`](crate::types::FlowValidationDetails::MultipleLoopInputNodes), extracting the inner [`MultipleLoopInputNodesFlowValidationDetails`](crate::types::MultipleLoopInputNodesFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_multiple_loop_input_nodes(&self) -> ::std::result::Result<&crate::types::MultipleLoopInputNodesFlowValidationDetails, &Self> {
        if let FlowValidationDetails::MultipleLoopInputNodes(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`MultipleLoopInputNodes`](crate::types::FlowValidationDetails::MultipleLoopInputNodes).
    pub fn is_multiple_loop_input_nodes(&self) -> bool {
        self.as_multiple_loop_input_nodes().is_ok()
    }
    /// Tries to convert the enum instance into [`MultipleNodeInputConnections`](crate::types::FlowValidationDetails::MultipleNodeInputConnections), extracting the inner [`MultipleNodeInputConnectionsFlowValidationDetails`](crate::types::MultipleNodeInputConnectionsFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_multiple_node_input_connections(
        &self,
    ) -> ::std::result::Result<&crate::types::MultipleNodeInputConnectionsFlowValidationDetails, &Self> {
        if let FlowValidationDetails::MultipleNodeInputConnections(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`MultipleNodeInputConnections`](crate::types::FlowValidationDetails::MultipleNodeInputConnections).
    pub fn is_multiple_node_input_connections(&self) -> bool {
        self.as_multiple_node_input_connections().is_ok()
    }
    /// Tries to convert the enum instance into [`UnfulfilledNodeInput`](crate::types::FlowValidationDetails::UnfulfilledNodeInput), extracting the inner [`UnfulfilledNodeInputFlowValidationDetails`](crate::types::UnfulfilledNodeInputFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_unfulfilled_node_input(&self) -> ::std::result::Result<&crate::types::UnfulfilledNodeInputFlowValidationDetails, &Self> {
        if let FlowValidationDetails::UnfulfilledNodeInput(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`UnfulfilledNodeInput`](crate::types::FlowValidationDetails::UnfulfilledNodeInput).
    pub fn is_unfulfilled_node_input(&self) -> bool {
        self.as_unfulfilled_node_input().is_ok()
    }
    /// Tries to convert the enum instance into [`UnknownConnectionCondition`](crate::types::FlowValidationDetails::UnknownConnectionCondition), extracting the inner [`UnknownConnectionConditionFlowValidationDetails`](crate::types::UnknownConnectionConditionFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_unknown_connection_condition(&self) -> ::std::result::Result<&crate::types::UnknownConnectionConditionFlowValidationDetails, &Self> {
        if let FlowValidationDetails::UnknownConnectionCondition(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`UnknownConnectionCondition`](crate::types::FlowValidationDetails::UnknownConnectionCondition).
    pub fn is_unknown_connection_condition(&self) -> bool {
        self.as_unknown_connection_condition().is_ok()
    }
    /// Tries to convert the enum instance into [`UnknownConnectionSource`](crate::types::FlowValidationDetails::UnknownConnectionSource), extracting the inner [`UnknownConnectionSourceFlowValidationDetails`](crate::types::UnknownConnectionSourceFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_unknown_connection_source(&self) -> ::std::result::Result<&crate::types::UnknownConnectionSourceFlowValidationDetails, &Self> {
        if let FlowValidationDetails::UnknownConnectionSource(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`UnknownConnectionSource`](crate::types::FlowValidationDetails::UnknownConnectionSource).
    pub fn is_unknown_connection_source(&self) -> bool {
        self.as_unknown_connection_source().is_ok()
    }
    /// Tries to convert the enum instance into [`UnknownConnectionSourceOutput`](crate::types::FlowValidationDetails::UnknownConnectionSourceOutput), extracting the inner [`UnknownConnectionSourceOutputFlowValidationDetails`](crate::types::UnknownConnectionSourceOutputFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_unknown_connection_source_output(
        &self,
    ) -> ::std::result::Result<&crate::types::UnknownConnectionSourceOutputFlowValidationDetails, &Self> {
        if let FlowValidationDetails::UnknownConnectionSourceOutput(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`UnknownConnectionSourceOutput`](crate::types::FlowValidationDetails::UnknownConnectionSourceOutput).
    pub fn is_unknown_connection_source_output(&self) -> bool {
        self.as_unknown_connection_source_output().is_ok()
    }
    /// Tries to convert the enum instance into [`UnknownConnectionTarget`](crate::types::FlowValidationDetails::UnknownConnectionTarget), extracting the inner [`UnknownConnectionTargetFlowValidationDetails`](crate::types::UnknownConnectionTargetFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_unknown_connection_target(&self) -> ::std::result::Result<&crate::types::UnknownConnectionTargetFlowValidationDetails, &Self> {
        if let FlowValidationDetails::UnknownConnectionTarget(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`UnknownConnectionTarget`](crate::types::FlowValidationDetails::UnknownConnectionTarget).
    pub fn is_unknown_connection_target(&self) -> bool {
        self.as_unknown_connection_target().is_ok()
    }
    /// Tries to convert the enum instance into [`UnknownConnectionTargetInput`](crate::types::FlowValidationDetails::UnknownConnectionTargetInput), extracting the inner [`UnknownConnectionTargetInputFlowValidationDetails`](crate::types::UnknownConnectionTargetInputFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_unknown_connection_target_input(
        &self,
    ) -> ::std::result::Result<&crate::types::UnknownConnectionTargetInputFlowValidationDetails, &Self> {
        if let FlowValidationDetails::UnknownConnectionTargetInput(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`UnknownConnectionTargetInput`](crate::types::FlowValidationDetails::UnknownConnectionTargetInput).
    pub fn is_unknown_connection_target_input(&self) -> bool {
        self.as_unknown_connection_target_input().is_ok()
    }
    /// Tries to convert the enum instance into [`UnknownNodeInput`](crate::types::FlowValidationDetails::UnknownNodeInput), extracting the inner [`UnknownNodeInputFlowValidationDetails`](crate::types::UnknownNodeInputFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_unknown_node_input(&self) -> ::std::result::Result<&crate::types::UnknownNodeInputFlowValidationDetails, &Self> {
        if let FlowValidationDetails::UnknownNodeInput(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`UnknownNodeInput`](crate::types::FlowValidationDetails::UnknownNodeInput).
    pub fn is_unknown_node_input(&self) -> bool {
        self.as_unknown_node_input().is_ok()
    }
    /// Tries to convert the enum instance into [`UnknownNodeOutput`](crate::types::FlowValidationDetails::UnknownNodeOutput), extracting the inner [`UnknownNodeOutputFlowValidationDetails`](crate::types::UnknownNodeOutputFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_unknown_node_output(&self) -> ::std::result::Result<&crate::types::UnknownNodeOutputFlowValidationDetails, &Self> {
        if let FlowValidationDetails::UnknownNodeOutput(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`UnknownNodeOutput`](crate::types::FlowValidationDetails::UnknownNodeOutput).
    pub fn is_unknown_node_output(&self) -> bool {
        self.as_unknown_node_output().is_ok()
    }
    /// Tries to convert the enum instance into [`UnreachableNode`](crate::types::FlowValidationDetails::UnreachableNode), extracting the inner [`UnreachableNodeFlowValidationDetails`](crate::types::UnreachableNodeFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_unreachable_node(&self) -> ::std::result::Result<&crate::types::UnreachableNodeFlowValidationDetails, &Self> {
        if let FlowValidationDetails::UnreachableNode(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`UnreachableNode`](crate::types::FlowValidationDetails::UnreachableNode).
    pub fn is_unreachable_node(&self) -> bool {
        self.as_unreachable_node().is_ok()
    }
    /// Tries to convert the enum instance into [`UnsatisfiedConnectionConditions`](crate::types::FlowValidationDetails::UnsatisfiedConnectionConditions), extracting the inner [`UnsatisfiedConnectionConditionsFlowValidationDetails`](crate::types::UnsatisfiedConnectionConditionsFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_unsatisfied_connection_conditions(
        &self,
    ) -> ::std::result::Result<&crate::types::UnsatisfiedConnectionConditionsFlowValidationDetails, &Self> {
        if let FlowValidationDetails::UnsatisfiedConnectionConditions(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`UnsatisfiedConnectionConditions`](crate::types::FlowValidationDetails::UnsatisfiedConnectionConditions).
    pub fn is_unsatisfied_connection_conditions(&self) -> bool {
        self.as_unsatisfied_connection_conditions().is_ok()
    }
    /// Tries to convert the enum instance into [`Unspecified`](crate::types::FlowValidationDetails::Unspecified), extracting the inner [`UnspecifiedFlowValidationDetails`](crate::types::UnspecifiedFlowValidationDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_unspecified(&self) -> ::std::result::Result<&crate::types::UnspecifiedFlowValidationDetails, &Self> {
        if let FlowValidationDetails::Unspecified(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Unspecified`](crate::types::FlowValidationDetails::Unspecified).
    pub fn is_unspecified(&self) -> bool {
        self.as_unspecified().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
