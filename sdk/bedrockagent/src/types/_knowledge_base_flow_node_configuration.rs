// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configurations for a knowledge base node in a flow. This node takes a query as the input and returns, as the output, the retrieved responses directly (as an array) or a response generated based on the retrieved responses. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/flows-nodes.html">Node types in a flow</a> in the Amazon Bedrock User Guide.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KnowledgeBaseFlowNodeConfiguration {
    /// <p>The unique identifier of the knowledge base to query.</p>
    pub knowledge_base_id: ::std::string::String,
    /// <p>The unique identifier of the model or <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html">inference profile</a> to use to generate a response from the query results. Omit this field if you want to return the retrieved results as an array.</p>
    pub model_id: ::std::option::Option<::std::string::String>,
    /// <p>Contains configurations for a guardrail to apply during query and response generation for the knowledge base in this configuration.</p>
    pub guardrail_configuration: ::std::option::Option<crate::types::GuardrailConfiguration>,
    /// <p>The number of results to retrieve from the knowledge base.</p>
    pub number_of_results: ::std::option::Option<i32>,
    /// <p>A custom prompt template to use with the knowledge base for generating responses.</p>
    pub prompt_template: ::std::option::Option<crate::types::KnowledgeBasePromptTemplate>,
    /// <p>Contains inference configurations for the prompt.</p>
    pub inference_configuration: ::std::option::Option<crate::types::PromptInferenceConfiguration>,
    /// <p>The configuration for reranking the retrieved results from the knowledge base to improve relevance.</p>
    pub reranking_configuration: ::std::option::Option<crate::types::VectorSearchRerankingConfiguration>,
    /// <p>The configuration for orchestrating the retrieval and generation process in the knowledge base node.</p>
    pub orchestration_configuration: ::std::option::Option<crate::types::KnowledgeBaseOrchestrationConfiguration>,
}
impl KnowledgeBaseFlowNodeConfiguration {
    /// <p>The unique identifier of the knowledge base to query.</p>
    pub fn knowledge_base_id(&self) -> &str {
        use std::ops::Deref;
        self.knowledge_base_id.deref()
    }
    /// <p>The unique identifier of the model or <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html">inference profile</a> to use to generate a response from the query results. Omit this field if you want to return the retrieved results as an array.</p>
    pub fn model_id(&self) -> ::std::option::Option<&str> {
        self.model_id.as_deref()
    }
    /// <p>Contains configurations for a guardrail to apply during query and response generation for the knowledge base in this configuration.</p>
    pub fn guardrail_configuration(&self) -> ::std::option::Option<&crate::types::GuardrailConfiguration> {
        self.guardrail_configuration.as_ref()
    }
    /// <p>The number of results to retrieve from the knowledge base.</p>
    pub fn number_of_results(&self) -> ::std::option::Option<i32> {
        self.number_of_results
    }
    /// <p>A custom prompt template to use with the knowledge base for generating responses.</p>
    pub fn prompt_template(&self) -> ::std::option::Option<&crate::types::KnowledgeBasePromptTemplate> {
        self.prompt_template.as_ref()
    }
    /// <p>Contains inference configurations for the prompt.</p>
    pub fn inference_configuration(&self) -> ::std::option::Option<&crate::types::PromptInferenceConfiguration> {
        self.inference_configuration.as_ref()
    }
    /// <p>The configuration for reranking the retrieved results from the knowledge base to improve relevance.</p>
    pub fn reranking_configuration(&self) -> ::std::option::Option<&crate::types::VectorSearchRerankingConfiguration> {
        self.reranking_configuration.as_ref()
    }
    /// <p>The configuration for orchestrating the retrieval and generation process in the knowledge base node.</p>
    pub fn orchestration_configuration(&self) -> ::std::option::Option<&crate::types::KnowledgeBaseOrchestrationConfiguration> {
        self.orchestration_configuration.as_ref()
    }
}
impl KnowledgeBaseFlowNodeConfiguration {
    /// Creates a new builder-style object to manufacture [`KnowledgeBaseFlowNodeConfiguration`](crate::types::KnowledgeBaseFlowNodeConfiguration).
    pub fn builder() -> crate::types::builders::KnowledgeBaseFlowNodeConfigurationBuilder {
        crate::types::builders::KnowledgeBaseFlowNodeConfigurationBuilder::default()
    }
}

/// A builder for [`KnowledgeBaseFlowNodeConfiguration`](crate::types::KnowledgeBaseFlowNodeConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct KnowledgeBaseFlowNodeConfigurationBuilder {
    pub(crate) knowledge_base_id: ::std::option::Option<::std::string::String>,
    pub(crate) model_id: ::std::option::Option<::std::string::String>,
    pub(crate) guardrail_configuration: ::std::option::Option<crate::types::GuardrailConfiguration>,
    pub(crate) number_of_results: ::std::option::Option<i32>,
    pub(crate) prompt_template: ::std::option::Option<crate::types::KnowledgeBasePromptTemplate>,
    pub(crate) inference_configuration: ::std::option::Option<crate::types::PromptInferenceConfiguration>,
    pub(crate) reranking_configuration: ::std::option::Option<crate::types::VectorSearchRerankingConfiguration>,
    pub(crate) orchestration_configuration: ::std::option::Option<crate::types::KnowledgeBaseOrchestrationConfiguration>,
}
impl KnowledgeBaseFlowNodeConfigurationBuilder {
    /// <p>The unique identifier of the knowledge base to query.</p>
    /// This field is required.
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the knowledge base to query.</p>
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// <p>The unique identifier of the knowledge base to query.</p>
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_id
    }
    /// <p>The unique identifier of the model or <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html">inference profile</a> to use to generate a response from the query results. Omit this field if you want to return the retrieved results as an array.</p>
    pub fn model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the model or <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html">inference profile</a> to use to generate a response from the query results. Omit this field if you want to return the retrieved results as an array.</p>
    pub fn set_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_id = input;
        self
    }
    /// <p>The unique identifier of the model or <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html">inference profile</a> to use to generate a response from the query results. Omit this field if you want to return the retrieved results as an array.</p>
    pub fn get_model_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_id
    }
    /// <p>Contains configurations for a guardrail to apply during query and response generation for the knowledge base in this configuration.</p>
    pub fn guardrail_configuration(mut self, input: crate::types::GuardrailConfiguration) -> Self {
        self.guardrail_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains configurations for a guardrail to apply during query and response generation for the knowledge base in this configuration.</p>
    pub fn set_guardrail_configuration(mut self, input: ::std::option::Option<crate::types::GuardrailConfiguration>) -> Self {
        self.guardrail_configuration = input;
        self
    }
    /// <p>Contains configurations for a guardrail to apply during query and response generation for the knowledge base in this configuration.</p>
    pub fn get_guardrail_configuration(&self) -> &::std::option::Option<crate::types::GuardrailConfiguration> {
        &self.guardrail_configuration
    }
    /// <p>The number of results to retrieve from the knowledge base.</p>
    pub fn number_of_results(mut self, input: i32) -> Self {
        self.number_of_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of results to retrieve from the knowledge base.</p>
    pub fn set_number_of_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_results = input;
        self
    }
    /// <p>The number of results to retrieve from the knowledge base.</p>
    pub fn get_number_of_results(&self) -> &::std::option::Option<i32> {
        &self.number_of_results
    }
    /// <p>A custom prompt template to use with the knowledge base for generating responses.</p>
    pub fn prompt_template(mut self, input: crate::types::KnowledgeBasePromptTemplate) -> Self {
        self.prompt_template = ::std::option::Option::Some(input);
        self
    }
    /// <p>A custom prompt template to use with the knowledge base for generating responses.</p>
    pub fn set_prompt_template(mut self, input: ::std::option::Option<crate::types::KnowledgeBasePromptTemplate>) -> Self {
        self.prompt_template = input;
        self
    }
    /// <p>A custom prompt template to use with the knowledge base for generating responses.</p>
    pub fn get_prompt_template(&self) -> &::std::option::Option<crate::types::KnowledgeBasePromptTemplate> {
        &self.prompt_template
    }
    /// <p>Contains inference configurations for the prompt.</p>
    pub fn inference_configuration(mut self, input: crate::types::PromptInferenceConfiguration) -> Self {
        self.inference_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains inference configurations for the prompt.</p>
    pub fn set_inference_configuration(mut self, input: ::std::option::Option<crate::types::PromptInferenceConfiguration>) -> Self {
        self.inference_configuration = input;
        self
    }
    /// <p>Contains inference configurations for the prompt.</p>
    pub fn get_inference_configuration(&self) -> &::std::option::Option<crate::types::PromptInferenceConfiguration> {
        &self.inference_configuration
    }
    /// <p>The configuration for reranking the retrieved results from the knowledge base to improve relevance.</p>
    pub fn reranking_configuration(mut self, input: crate::types::VectorSearchRerankingConfiguration) -> Self {
        self.reranking_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for reranking the retrieved results from the knowledge base to improve relevance.</p>
    pub fn set_reranking_configuration(mut self, input: ::std::option::Option<crate::types::VectorSearchRerankingConfiguration>) -> Self {
        self.reranking_configuration = input;
        self
    }
    /// <p>The configuration for reranking the retrieved results from the knowledge base to improve relevance.</p>
    pub fn get_reranking_configuration(&self) -> &::std::option::Option<crate::types::VectorSearchRerankingConfiguration> {
        &self.reranking_configuration
    }
    /// <p>The configuration for orchestrating the retrieval and generation process in the knowledge base node.</p>
    pub fn orchestration_configuration(mut self, input: crate::types::KnowledgeBaseOrchestrationConfiguration) -> Self {
        self.orchestration_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for orchestrating the retrieval and generation process in the knowledge base node.</p>
    pub fn set_orchestration_configuration(mut self, input: ::std::option::Option<crate::types::KnowledgeBaseOrchestrationConfiguration>) -> Self {
        self.orchestration_configuration = input;
        self
    }
    /// <p>The configuration for orchestrating the retrieval and generation process in the knowledge base node.</p>
    pub fn get_orchestration_configuration(&self) -> &::std::option::Option<crate::types::KnowledgeBaseOrchestrationConfiguration> {
        &self.orchestration_configuration
    }
    /// Consumes the builder and constructs a [`KnowledgeBaseFlowNodeConfiguration`](crate::types::KnowledgeBaseFlowNodeConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`knowledge_base_id`](crate::types::builders::KnowledgeBaseFlowNodeConfigurationBuilder::knowledge_base_id)
    pub fn build(self) -> ::std::result::Result<crate::types::KnowledgeBaseFlowNodeConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::KnowledgeBaseFlowNodeConfiguration {
            knowledge_base_id: self.knowledge_base_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "knowledge_base_id",
                    "knowledge_base_id was not specified but it is required when building KnowledgeBaseFlowNodeConfiguration",
                )
            })?,
            model_id: self.model_id,
            guardrail_configuration: self.guardrail_configuration,
            number_of_results: self.number_of_results,
            prompt_template: self.prompt_template,
            inference_configuration: self.inference_configuration,
            reranking_configuration: self.reranking_configuration,
            orchestration_configuration: self.orchestration_configuration,
        })
    }
}
