// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Parameters for the Email Channel Subtype
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EmailChannelSubtypeParameters {
    /// Source/Destination Email address used for Email messages
    pub destination_email_address: ::std::string::String,
    /// Source/Destination Email address used for Email messages
    pub connect_source_email_address: ::std::option::Option<::std::string::String>,
    /// Amazon Resource Names(ARN)
    pub template_arn: ::std::option::Option<::std::string::String>,
    /// A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in contact flows just like any other contact attributes.
    pub template_parameters: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl EmailChannelSubtypeParameters {
    /// Source/Destination Email address used for Email messages
    pub fn destination_email_address(&self) -> &str {
        use std::ops::Deref;
        self.destination_email_address.deref()
    }
    /// Source/Destination Email address used for Email messages
    pub fn connect_source_email_address(&self) -> ::std::option::Option<&str> {
        self.connect_source_email_address.as_deref()
    }
    /// Amazon Resource Names(ARN)
    pub fn template_arn(&self) -> ::std::option::Option<&str> {
        self.template_arn.as_deref()
    }
    /// A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in contact flows just like any other contact attributes.
    pub fn template_parameters(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.template_parameters
    }
}
impl ::std::fmt::Debug for EmailChannelSubtypeParameters {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EmailChannelSubtypeParameters");
        formatter.field("destination_email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("connect_source_email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("template_arn", &self.template_arn);
        formatter.field("template_parameters", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl EmailChannelSubtypeParameters {
    /// Creates a new builder-style object to manufacture [`EmailChannelSubtypeParameters`](crate::types::EmailChannelSubtypeParameters).
    pub fn builder() -> crate::types::builders::EmailChannelSubtypeParametersBuilder {
        crate::types::builders::EmailChannelSubtypeParametersBuilder::default()
    }
}

/// A builder for [`EmailChannelSubtypeParameters`](crate::types::EmailChannelSubtypeParameters).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct EmailChannelSubtypeParametersBuilder {
    pub(crate) destination_email_address: ::std::option::Option<::std::string::String>,
    pub(crate) connect_source_email_address: ::std::option::Option<::std::string::String>,
    pub(crate) template_arn: ::std::option::Option<::std::string::String>,
    pub(crate) template_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl EmailChannelSubtypeParametersBuilder {
    /// Source/Destination Email address used for Email messages
    /// This field is required.
    pub fn destination_email_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_email_address = ::std::option::Option::Some(input.into());
        self
    }
    /// Source/Destination Email address used for Email messages
    pub fn set_destination_email_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_email_address = input;
        self
    }
    /// Source/Destination Email address used for Email messages
    pub fn get_destination_email_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_email_address
    }
    /// Source/Destination Email address used for Email messages
    pub fn connect_source_email_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connect_source_email_address = ::std::option::Option::Some(input.into());
        self
    }
    /// Source/Destination Email address used for Email messages
    pub fn set_connect_source_email_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connect_source_email_address = input;
        self
    }
    /// Source/Destination Email address used for Email messages
    pub fn get_connect_source_email_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.connect_source_email_address
    }
    /// Amazon Resource Names(ARN)
    pub fn template_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// Amazon Resource Names(ARN)
    pub fn set_template_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_arn = input;
        self
    }
    /// Amazon Resource Names(ARN)
    pub fn get_template_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_arn
    }
    /// Adds a key-value pair to `template_parameters`.
    ///
    /// To override the contents of this collection use [`set_template_parameters`](Self::set_template_parameters).
    ///
    /// A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in contact flows just like any other contact attributes.
    pub fn template_parameters(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.template_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.template_parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in contact flows just like any other contact attributes.
    pub fn set_template_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.template_parameters = input;
        self
    }
    /// A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in contact flows just like any other contact attributes.
    pub fn get_template_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.template_parameters
    }
    /// Consumes the builder and constructs a [`EmailChannelSubtypeParameters`](crate::types::EmailChannelSubtypeParameters).
    /// This method will fail if any of the following fields are not set:
    /// - [`destination_email_address`](crate::types::builders::EmailChannelSubtypeParametersBuilder::destination_email_address)
    /// - [`template_parameters`](crate::types::builders::EmailChannelSubtypeParametersBuilder::template_parameters)
    pub fn build(self) -> ::std::result::Result<crate::types::EmailChannelSubtypeParameters, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EmailChannelSubtypeParameters {
            destination_email_address: self.destination_email_address.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "destination_email_address",
                    "destination_email_address was not specified but it is required when building EmailChannelSubtypeParameters",
                )
            })?,
            connect_source_email_address: self.connect_source_email_address,
            template_arn: self.template_arn,
            template_parameters: self.template_parameters.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "template_parameters",
                    "template_parameters was not specified but it is required when building EmailChannelSubtypeParameters",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for EmailChannelSubtypeParametersBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EmailChannelSubtypeParametersBuilder");
        formatter.field("destination_email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("connect_source_email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("template_arn", &self.template_arn);
        formatter.field("template_parameters", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
